void ___ZL25_emojiClientDispatchQueuev_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;

  v0 = dispatch_queue_create("com.apple.TextInput.emoji-client", 0);
  v1 = (void *)_emojiClientDispatchQueue(void)::__xpc_queue;
  _emojiClientDispatchQueue(void)::__xpc_queue = (uint64_t)v0;

}

void sub_1B3DE3548(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B3DE3704(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1B3DE37C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)EMFEmojiPreferencesClient;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B3DE3AA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1B3DE3B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t _compareEmojiGendersUsingSortCollation(int a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v4 = -1;
  if (a4)
  {
    v5 = 0;
    v6 = -1;
    v7 = -1;
    do
    {
      v8 = *(_DWORD *)(a3 + 4 * v5);
      if (v8 == a1)
        v7 = v5;
      if (v8 == a2)
        v6 = v5;
      ++v5;
    }
    while (a4 != v5);
  }
  else
  {
    v7 = -1;
    v6 = -1;
  }
  if (v7 >= v6)
    v4 = 1;
  if (v7 == v6)
    return 0;
  else
    return v4;
}

uint64_t _compareEmojiGendersUsingDefaultSortCollation(int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;

  v2 = 0;
  v3 = -1;
  v4 = -1;
  do
  {
    v5 = kEMFEmojiGenderInclusiveSortCollation[v2];
    if (v5 == a1)
      v4 = v2;
    if (v5 == a2)
      v3 = v2;
    ++v2;
  }
  while (v2 != 4);
  v6 = v4 == v3;
  v7 = v4 < v3;
  v8 = -1;
  if (!v7)
    v8 = 1;
  if (v6)
    return 0;
  else
    return v8;
}

uint64_t _compareEmojiTokensUsingDefaultSortCollation(uint64_t a1, void *a2)
{
  id v2;
  int Gender;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a2;
  Gender = CEMEmojiTokenGetGender();
  v4 = CEMEmojiTokenGetGender();
  v5 = 0;
  v6 = -1;
  v7 = -1;
  do
  {
    v8 = kEMFEmojiGenderInclusiveSortCollation[v5];
    if (v8 == Gender)
      v7 = v5;
    if (v8 == v4)
      v6 = v5;
    ++v5;
  }
  while (v5 != 4);
  v9 = v7 == v6;
  v10 = v7 < v6;
  v11 = -1;
  if (!v10)
    v11 = 1;
  if (v9)
    v12 = 0;
  else
    v12 = v11;

  return v12;
}

uint64_t _compareEmojiStringsUsingDefaultSortCollation(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  const void *v7;
  const void *v8;
  int Gender;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  v5 = a1;
  v6 = a2;
  if (a3)
  {
    v7 = (const void *)CEMEmojiTokenCreateWithString();
    v8 = (const void *)CEMEmojiTokenCreateWithString();
    Gender = CEMEmojiTokenGetGender();
    v10 = CEMEmojiTokenGetGender();
    v11 = 0;
    v12 = -1;
    v13 = -1;
    do
    {
      v14 = kEMFEmojiGenderInclusiveSortCollation[v11];
      if (v14 == Gender)
        v13 = v11;
      if (v14 == v10)
        v12 = v11;
      ++v11;
    }
    while (v11 != 4);
    v15 = v13 == v12;
    v16 = v13 < v12;
    v17 = -1;
    if (!v16)
      v17 = 1;
    if (v15)
      v18 = 0;
    else
      v18 = v17;
    if (v7)
      CFRelease(v7);
    if (v8)
      CFRelease(v8);
  }
  else
  {
    v18 = 0;
  }

  return v18;
}

uint64_t _compareEmojiTokensUsingGenderInclusiveSortCollation(void *a1, void *a2)
{
  id v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;

  v3 = a2;
  v4 = objc_msgSend(a1, "gender");
  v5 = objc_msgSend(v3, "gender");
  v6 = 0;
  v7 = -1;
  v8 = -1;
  do
  {
    v9 = kEMFEmojiGenderInclusiveSortCollation[v6];
    if (v9 == v4)
      v8 = v6;
    if (v9 == v5)
      v7 = v6;
    ++v6;
  }
  while (v6 != 4);
  v10 = v8 == v7;
  v11 = v8 < v7;
  v12 = -1;
  if (!v11)
    v12 = 1;
  if (v10)
    v13 = 0;
  else
    v13 = v12;

  return v13;
}

CEM::AdaptationDatabaseController *CEM::AdaptationDatabaseController::AdaptationDatabaseController(CEM::AdaptationDatabaseController *this, const __CFString *a2)
{
  *(_QWORD *)this = 850045863;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 8) = 850045863;
  *((_QWORD *)this + 7) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 15) = 0;
  CEM::AdaptationDatabaseController::getDefaultSharedAdaptationDatabase((std::mutex *)this, (_QWORD *)this + 16);
  CEM::getUTF8StringFromCFString(a2, (_QWORD *)this + 18);
  CEM::AdaptationDatabaseController::initializeDatabaseIfNecessary(this);
  return this;
}

void sub_1B3DE56DC(_Unwind_Exception *a1)
{
  std::mutex *v1;
  std::mutex *v2;
  uint64_t v3;
  void **v4;

  if (v1[2].__m_.__opaque[31] < 0)
    operator delete(*v4);
  std::shared_ptr<CEM::AdaptationDatabase>::~shared_ptr[abi:ne180100](v3);
  std::mutex::~mutex(v2);
  std::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

void CEM::AdaptationDatabaseController::getDefaultSharedAdaptationDatabase(std::mutex *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 v4;

  if ((v4 & 1) == 0
  {
    std::__fs::filesystem::path::path[abi:ne180100]<char [25],void>(&CEM::AdaptationDatabaseController::getDefaultSharedAdaptationDatabase(void)::databasePath, "/tmp/emoji_adaptation.db");
  }
  CEM::AdaptationDatabaseController::createAdaptationDatabase(this, (const std::__fs::filesystem::path *)&CEM::AdaptationDatabaseController::getDefaultSharedAdaptationDatabase(void)::databasePath, a2);
}

void sub_1B3DE5798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CEM::AdaptationDatabaseController::initializeDatabaseIfNecessary(CEM::AdaptationDatabaseController *this)
{
  char *v2;
  uint64_t v3;
  _QWORD v5[3];
  void **v6[3];
  void *v7[14];
  void ***v8;

  if (*((char *)this + 167) < 0)
  {
    v2 = (char *)*((_QWORD *)this + 18);
    v3 = *((_QWORD *)this + 19);
  }
  else
  {
    v2 = (char *)this + 144;
    v3 = *((unsigned __int8 *)this + 167);
  }
  memset(v6, 0, sizeof(v6));
  CEM::Statement::Statement(v7, v2, v3, "BEGIN TRANSACTION;\n"
    "L, emoji_id INTEGER NOT NULL, timestamp TEXT NOT NULL, FOREIGN KEY(string_id) REFERENCES string(id), FOREIGN KEY(emo"
    "ji_id) REFERENCES emoji(id));\n"
    "END TRANSACTION;",
    528,
    v6);
  v8 = v6;
  std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  CEM::AdaptationDatabase::executeStatement(*((CEM::AdaptationDatabase **)this + 16), (CEM::Statement *)v7, v5);
  v6[0] = (void **)v5;
  std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__destroy_vector::operator()[abi:ne180100](v6);
  CEM::Statement::~Statement(v7);
  return 1;
}

void sub_1B3DE5848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  CEM::Statement::~Statement((void **)va);
  _Unwind_Resume(a1);
}

uint64_t CEM::AdaptationDatabaseController::AdaptationDatabaseController(uint64_t a1, const void *a2, size_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = 850045863;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 64) = 850045863;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  CEM::AdaptationDatabaseController::getDefaultSharedAdaptationDatabase((std::mutex *)a1, (_QWORD *)(a1 + 128));
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a3 >= 0x17)
  {
    v7 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v7 = a3 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *(_QWORD *)(a1 + 152) = a3;
    *(_QWORD *)(a1 + 160) = v8 | 0x8000000000000000;
    *(_QWORD *)(a1 + 144) = v6;
  }
  else
  {
    *(_BYTE *)(a1 + 167) = a3;
    v6 = (void *)(a1 + 144);
    if (!a3)
      goto LABEL_9;
  }
  memmove(v6, a2, a3);
LABEL_9:
  *((_BYTE *)v6 + a3) = 0;
  CEM::AdaptationDatabaseController::initializeDatabaseIfNecessary((CEM::AdaptationDatabaseController *)a1);
  return a1;
}

void sub_1B3DE5978(_Unwind_Exception *a1)
{
  std::mutex *v1;
  std::mutex *v2;
  uint64_t v3;
  void **v4;

  if (v1[2].__m_.__opaque[31] < 0)
    operator delete(*v4);
  std::shared_ptr<CEM::AdaptationDatabase>::~shared_ptr[abi:ne180100](v3);
  std::mutex::~mutex(v2);
  std::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

uint64_t CEM::AdaptationDatabaseController::AdaptationDatabaseController(uint64_t a1, const void *a2, size_t a3, std::__fs::filesystem::path *a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = 850045863;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 64) = 850045863;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)(a1 + 120) = 0;
  CEM::AdaptationDatabaseController::createAdaptationDatabase((std::mutex *)a1, a4, (_QWORD *)(a1 + 128));
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a3 >= 0x17)
  {
    v8 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v8 = a3 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *(_QWORD *)(a1 + 152) = a3;
    *(_QWORD *)(a1 + 160) = v9 | 0x8000000000000000;
    *(_QWORD *)(a1 + 144) = v7;
  }
  else
  {
    *(_BYTE *)(a1 + 167) = a3;
    v7 = (void *)(a1 + 144);
    if (!a3)
      goto LABEL_9;
  }
  memmove(v7, a2, a3);
LABEL_9:
  *((_BYTE *)v7 + a3) = 0;
  CEM::AdaptationDatabaseController::initializeDatabaseIfNecessary((CEM::AdaptationDatabaseController *)a1);
  return a1;
}

void sub_1B3DE5AC8(_Unwind_Exception *a1)
{
  std::mutex *v1;
  std::mutex *v2;
  uint64_t v3;
  void **v4;

  if (v1[2].__m_.__opaque[31] < 0)
    operator delete(*v4);
  std::shared_ptr<CEM::AdaptationDatabase>::~shared_ptr[abi:ne180100](v3);
  std::mutex::~mutex(v2);
  std::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

void CEM::AdaptationDatabaseController::createAdaptationDatabase(std::mutex *this@<X0>, const std::__fs::filesystem::path *a2@<X1>, _QWORD *a3@<X8>)
{
  CEM::AdaptationDatabaseController *v6;
  unsigned __int8 *v7;
  std::__shared_weak_count *v8;
  std::string::size_type v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *size;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::string __p;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::string pn;

  std::mutex::lock(this);
  CEM::AdaptationDatabaseController::getSharedAdaptationDatabaseCache(v6);
  if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&pn, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
  else
    pn = a2->__pn_;
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>>>::find<std::string>(&CEM::AdaptationDatabaseController::getSharedAdaptationDatabaseCache(void)::__adaptationDatabaseCache, (unsigned __int8 *)&pn);
  if (v7)
  {
    v9 = *((_QWORD *)v7 + 5);
    v8 = (std::__shared_weak_count *)*((_QWORD *)v7 + 6);
    __p.__r_.__value_.__r.__words[0] = v9;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
    if (v8)
    {
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
      if (v8->__shared_owners_ != -1)
      {
        std::shared_ptr<CEM::AdaptationDatabase>::shared_ptr[abi:ne180100]<CEM::AdaptationDatabase,void>(a3, &__p);
        size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (!__p.__r_.__value_.__l.__size_)
          goto LABEL_31;
LABEL_30:
        std::__shared_weak_count::__release_weak(size);
        goto LABEL_31;
      }
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  std::allocate_shared[abi:ne180100]<CEM::AdaptationDatabase,std::allocator<CEM::AdaptationDatabase>,std::__fs::filesystem::path const&,void>(a2, &v24);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, pn.__r_.__value_.__l.__data_, pn.__r_.__value_.__l.__size_);
  else
    __p = pn;
  v22 = v24;
  v23 = v25;
  if (v25)
  {
    v13 = (unint64_t *)&v25->__shared_weak_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::weak_ptr<CEM::AdaptationDatabase>>>((uint64_t)&CEM::AdaptationDatabaseController::getSharedAdaptationDatabaseCache(void)::__adaptationDatabaseCache, (unsigned __int8 *)&__p, (__int128 *)&__p);
  if (v23)
    std::__shared_weak_count::__release_weak(v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v15 = v25;
  *a3 = v24;
  a3[1] = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    v18 = v25;
    if (v25)
    {
      v19 = (unint64_t *)&v25->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        size = v18;
        goto LABEL_30;
      }
    }
  }
LABEL_31:
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    operator delete(pn.__r_.__value_.__l.__data_);
  std::mutex::unlock(this);
}

void sub_1B3DE5CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::mutex *v22;

  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  if (a22 < 0)
    operator delete(__p);
  std::mutex::unlock(v22);
  _Unwind_Resume(a1);
}

uint64_t CEM::AdaptationDatabaseController::getEmojiId(uint64_t a1, void *__src, size_t __len)
{
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  __int128 *v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  NSObject *adaptation_log;
  __int128 v17;
  unint64_t v18;
  void **v19;
  void **v20;
  void **v21;
  void *v22[14];
  void ***v23;
  char v24;
  __int128 v25;
  unint64_t v26;
  int v27;
  _QWORD v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  if ((v6 & 1) == 0
  {
  }
  if (*(char *)(a1 + 167) < 0)
  {
    v7 = *(_QWORD *)(a1 + 144);
    v8 = *(_QWORD *)(a1 + 152);
  }
  else
  {
    v7 = a1 + 144;
    v8 = *(unsigned __int8 *)(a1 + 167);
  }
  if (byte_1EF083E77 >= 0)
    v9 = byte_1EF083E77;
  else
    v9 = unk_1EF083E68;
  if (byte_1EF083E77 >= 0)
    v10 = &CEM::AdaptationDatabaseController::getEmojiId(std::string_view)const::sql;
  else
    v10 = (uint64_t *)CEM::AdaptationDatabaseController::getEmojiId(std::string_view)const::sql;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v12 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v12 = __len | 7;
    v13 = v12 + 1;
    v11 = (__int128 *)operator new(v12 + 1);
    *((_QWORD *)&v17 + 1) = __len;
    v18 = v13 | 0x8000000000000000;
    *(_QWORD *)&v17 = v11;
    goto LABEL_18;
  }
  HIBYTE(v18) = __len;
  v11 = &v17;
  if (__len)
LABEL_18:
    memmove(v11, __src, __len);
  *((_BYTE *)v11 + __len) = 0;
  v25 = v17;
  v26 = v18;
  v27 = 3;
  v20 = 0;
  v21 = 0;
  v19 = 0;
  v23 = &v19;
  v24 = 0;
  v19 = (void **)operator new(0x20uLL);
  v20 = v19;
  v21 = v19 + 4;
  v20 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*>((uint64_t)&v21, (uint64_t)&v25, (uint64_t)v28, (uint64_t)v19);
  CEM::Statement::Statement(v22, v7, v8, v10, v9, &v19);
  v23 = &v19;
  std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v25);
  CEM::AdaptationDatabase::executeStatement(*(CEM::AdaptationDatabase **)(a1 + 128), (CEM::Statement *)v22, &v25);
  if (*((_QWORD *)&v25 + 1) == (_QWORD)v25)
  {
LABEL_24:
    v14 = 0;
    goto LABEL_25;
  }
  if (*(_DWORD *)(*(_QWORD *)v25 + 80) != 1)
  {
    adaptation_log = cem_logging_get_adaptation_log();
    if (os_log_type_enabled(adaptation_log, OS_LOG_TYPE_ERROR))
      CEM::AdaptationDatabaseController::getEmojiId();
    goto LABEL_24;
  }
  v14 = *(unsigned int *)(*(_QWORD *)v25 + 56);
LABEL_25:
  v19 = (void **)&v25;
  std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__destroy_vector::operator()[abi:ne180100](&v19);
  CEM::Statement::~Statement(v22);
  return v14;
}

void sub_1B3DE5F98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CEM::AdaptationDatabaseController::createEmojiId(uint64_t a1, void *__src, size_t __len)
{
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  __int128 *v11;
  size_t v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *adaptation_log;
  const char *v18;
  int v19;
  __int128 v20;
  unint64_t v21;
  void **v22;
  void **v23;
  void **v24;
  void *v25[14];
  void ***v26;
  char v27;
  __int128 v28;
  unint64_t v29;
  int v30;
  _QWORD v31[2];

  v31[1] = *MEMORY[0x1E0C80C00];
  if ((v6 & 1) == 0
  {
  }
  if (*(char *)(a1 + 167) < 0)
  {
    v7 = *(_QWORD *)(a1 + 144);
    v8 = *(_QWORD *)(a1 + 152);
  }
  else
  {
    v7 = a1 + 144;
    v8 = *(unsigned __int8 *)(a1 + 167);
  }
  if (byte_1EF083E97 >= 0)
    v9 = byte_1EF083E97;
  else
    v9 = unk_1EF083E88;
  if (byte_1EF083E97 >= 0)
    v10 = &CEM::AdaptationDatabaseController::createEmojiId(std::string_view)::sql;
  else
    v10 = (uint64_t *)CEM::AdaptationDatabaseController::createEmojiId(std::string_view)::sql;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v12 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v12 = __len | 7;
    v13 = v12 + 1;
    v11 = (__int128 *)operator new(v12 + 1);
    *((_QWORD *)&v20 + 1) = __len;
    v21 = v13 | 0x8000000000000000;
    *(_QWORD *)&v20 = v11;
    goto LABEL_18;
  }
  HIBYTE(v21) = __len;
  v11 = &v20;
  if (__len)
LABEL_18:
    memmove(v11, __src, __len);
  *((_BYTE *)v11 + __len) = 0;
  v28 = v20;
  v29 = v21;
  v30 = 3;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  v26 = &v22;
  v27 = 0;
  v22 = (void **)operator new(0x20uLL);
  v23 = v22;
  v24 = v22 + 4;
  v23 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*>((uint64_t)&v24, (uint64_t)&v28, (uint64_t)v31, (uint64_t)v22);
  CEM::Statement::Statement(v25, v7, v8, v10, v9, &v22);
  v26 = &v22;
  std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v28);
  CEM::AdaptationDatabase::executeStatement(*(CEM::AdaptationDatabase **)(a1 + 128), (CEM::Statement *)v25, &v28);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v28 + 1) - v28) >> 3);
  if (v14 != 1)
  {
    if (v14)
    {
      v18 = "(rows.size() == 1) && \"createEmojiId: Database inconsistency: exactly 1 ID has not been assigned to this em"
            "oji; cannot continue.\"";
      v19 = 70;
    }
    else
    {
      v18 = "(rows.size() > 0) && \"createEmojiId: Database inconsistency: ID insertion failed; cannot continue.\"";
      v19 = 69;
    }
    __assert_rtn("createEmojiId", "AdaptationDatabaseController.cpp", v19, v18);
  }
  if (*(_DWORD *)(*(_QWORD *)v28 + 80) == 1)
  {
    v15 = *(unsigned int *)(*(_QWORD *)v28 + 56);
  }
  else
  {
    adaptation_log = cem_logging_get_adaptation_log();
    if (os_log_type_enabled(adaptation_log, OS_LOG_TYPE_ERROR))
      CEM::AdaptationDatabaseController::createEmojiId();
    v15 = 0;
  }
  v22 = (void **)&v28;
  std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__destroy_vector::operator()[abi:ne180100](&v22);
  CEM::Statement::~Statement(v25);
  return v15;
}

void sub_1B3DE62CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CEM::AdaptationDatabaseController::getStringId(uint64_t a1, void *__src, size_t __len)
{
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  __int128 *v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  NSObject *adaptation_log;
  __int128 v17;
  unint64_t v18;
  void **v19;
  void **v20;
  void **v21;
  void *v22[14];
  void ***v23;
  char v24;
  __int128 v25;
  unint64_t v26;
  int v27;
  _QWORD v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  if ((v6 & 1) == 0
  {
  }
  if (*(char *)(a1 + 167) < 0)
  {
    v7 = *(_QWORD *)(a1 + 144);
    v8 = *(_QWORD *)(a1 + 152);
  }
  else
  {
    v7 = a1 + 144;
    v8 = *(unsigned __int8 *)(a1 + 167);
  }
  if (byte_1EF083D77 >= 0)
    v9 = byte_1EF083D77;
  else
    v9 = unk_1EF083D68;
  if (byte_1EF083D77 >= 0)
    v10 = &CEM::AdaptationDatabaseController::getStringId(std::string_view)const::sql;
  else
    v10 = (uint64_t *)CEM::AdaptationDatabaseController::getStringId(std::string_view)const::sql;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v12 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v12 = __len | 7;
    v13 = v12 + 1;
    v11 = (__int128 *)operator new(v12 + 1);
    *((_QWORD *)&v17 + 1) = __len;
    v18 = v13 | 0x8000000000000000;
    *(_QWORD *)&v17 = v11;
    goto LABEL_18;
  }
  HIBYTE(v18) = __len;
  v11 = &v17;
  if (__len)
LABEL_18:
    memmove(v11, __src, __len);
  *((_BYTE *)v11 + __len) = 0;
  v25 = v17;
  v26 = v18;
  v27 = 3;
  v20 = 0;
  v21 = 0;
  v19 = 0;
  v23 = &v19;
  v24 = 0;
  v19 = (void **)operator new(0x20uLL);
  v20 = v19;
  v21 = v19 + 4;
  v20 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*>((uint64_t)&v21, (uint64_t)&v25, (uint64_t)v28, (uint64_t)v19);
  CEM::Statement::Statement(v22, v7, v8, v10, v9, &v19);
  v23 = &v19;
  std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v25);
  CEM::AdaptationDatabase::executeStatement(*(CEM::AdaptationDatabase **)(a1 + 128), (CEM::Statement *)v22, &v25);
  if (*((_QWORD *)&v25 + 1) == (_QWORD)v25)
  {
LABEL_24:
    v14 = 0;
    goto LABEL_25;
  }
  if (*(_DWORD *)(*(_QWORD *)v25 + 80) != 1)
  {
    adaptation_log = cem_logging_get_adaptation_log();
    if (os_log_type_enabled(adaptation_log, OS_LOG_TYPE_ERROR))
      CEM::AdaptationDatabaseController::getStringId();
    goto LABEL_24;
  }
  v14 = *(unsigned int *)(*(_QWORD *)v25 + 56);
LABEL_25:
  v19 = (void **)&v25;
  std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__destroy_vector::operator()[abi:ne180100](&v19);
  CEM::Statement::~Statement(v22);
  return v14;
}

void sub_1B3DE65B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CEM::AdaptationDatabaseController::createStringId(uint64_t a1, void *__src, size_t __len)
{
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  __int128 *v11;
  size_t v12;
  size_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *adaptation_log;
  const char *v18;
  int v19;
  __int128 v20;
  unint64_t v21;
  void **v22;
  void **v23;
  void **v24;
  void *v25[14];
  void ***v26;
  char v27;
  __int128 v28;
  unint64_t v29;
  int v30;
  _QWORD v31[2];

  v31[1] = *MEMORY[0x1E0C80C00];
  if ((v6 & 1) == 0
  {
  }
  if (*(char *)(a1 + 167) < 0)
  {
    v7 = *(_QWORD *)(a1 + 144);
    v8 = *(_QWORD *)(a1 + 152);
  }
  else
  {
    v7 = a1 + 144;
    v8 = *(unsigned __int8 *)(a1 + 167);
  }
  if (byte_1EF083EB7 >= 0)
    v9 = byte_1EF083EB7;
  else
    v9 = unk_1EF083EA8;
  if (byte_1EF083EB7 >= 0)
    v10 = &CEM::AdaptationDatabaseController::createStringId(std::string_view)::sql;
  else
    v10 = (uint64_t *)CEM::AdaptationDatabaseController::createStringId(std::string_view)::sql;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v12 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v12 = __len | 7;
    v13 = v12 + 1;
    v11 = (__int128 *)operator new(v12 + 1);
    *((_QWORD *)&v20 + 1) = __len;
    v21 = v13 | 0x8000000000000000;
    *(_QWORD *)&v20 = v11;
    goto LABEL_18;
  }
  HIBYTE(v21) = __len;
  v11 = &v20;
  if (__len)
LABEL_18:
    memmove(v11, __src, __len);
  *((_BYTE *)v11 + __len) = 0;
  v28 = v20;
  v29 = v21;
  v30 = 3;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  v26 = &v22;
  v27 = 0;
  v22 = (void **)operator new(0x20uLL);
  v23 = v22;
  v24 = v22 + 4;
  v23 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*>((uint64_t)&v24, (uint64_t)&v28, (uint64_t)v31, (uint64_t)v22);
  CEM::Statement::Statement(v25, v7, v8, v10, v9, &v22);
  v26 = &v22;
  std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v26);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v28);
  CEM::AdaptationDatabase::executeStatement(*(CEM::AdaptationDatabase **)(a1 + 128), (CEM::Statement *)v25, &v28);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v28 + 1) - v28) >> 3);
  if (v14 != 1)
  {
    if (v14)
    {
      v18 = "(rows.size() == 1) && \"createStringId: Database inconsistency: exactly 1 ID has been not assigned to this s"
            "tring; cannot continue.\"";
      v19 = 108;
    }
    else
    {
      v18 = "(rows.size() > 0) && \"createStringId: Database inconsistency: ID insertion failed; cannot continue.\"";
      v19 = 107;
    }
    __assert_rtn("createStringId", "AdaptationDatabaseController.cpp", v19, v18);
  }
  if (*(_DWORD *)(*(_QWORD *)v28 + 80) == 1)
  {
    v15 = *(unsigned int *)(*(_QWORD *)v28 + 56);
  }
  else
  {
    adaptation_log = cem_logging_get_adaptation_log();
    if (os_log_type_enabled(adaptation_log, OS_LOG_TYPE_ERROR))
      CEM::AdaptationDatabaseController::createStringId();
    v15 = 0;
  }
  v22 = (void **)&v28;
  std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__destroy_vector::operator()[abi:ne180100](&v22);
  CEM::Statement::~Statement(v25);
  return v15;
}

void sub_1B3DE68EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CEM::AdaptationDatabaseController::getRecentEmojisForString(CEM::AdaptationDatabaseController *a1@<X0>, void *a2@<X1>, size_t a3@<X2>, uint64_t *a4@<X8>)
{
  int StringId;

  StringId = CEM::AdaptationDatabaseController::getStringId((uint64_t)a1, a2, a3);
  if (StringId)
  {
    CEM::AdaptationDatabaseController::getRecentEmojisForStringId(a1, StringId, 3, a4);
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void CEM::AdaptationDatabaseController::getRecentEmojisForStringId(CEM::AdaptationDatabaseController *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  unsigned __int8 v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  void **v17;
  __int128 *v18;
  unint64_t v19;
  uint64_t v20;
  void *__p;
  uint64_t v22;
  char *v23;
  void *v24[14];
  void **p_p;
  char v26;
  _QWORD v27[3];
  int v28;
  int v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if ((v8 & 1) == 0
  {
  }
  if (*((char *)this + 167) < 0)
  {
    v9 = (char *)*((_QWORD *)this + 18);
    v10 = *((_QWORD *)this + 19);
  }
  else
  {
    v9 = (char *)this + 144;
    v10 = *((unsigned __int8 *)this + 167);
  }
  if (byte_1EF083ED7 >= 0)
    v11 = byte_1EF083ED7;
  else
    v11 = unk_1EF083EC8;
  if (byte_1EF083ED7 >= 0)
    v12 = &CEM::AdaptationDatabaseController::getRecentEmojisForStringId(unsigned int,unsigned long)const::sql;
  else
    v12 = (uint64_t *)CEM::AdaptationDatabaseController::getRecentEmojisForStringId(unsigned int,unsigned long)const::sql;
  LODWORD(v27[0]) = a2;
  v28 = 1;
  v29 = a3;
  v30 = 1;
  v22 = 0;
  v23 = 0;
  __p = 0;
  p_p = &__p;
  v26 = 0;
  __p = operator new(0x40uLL);
  v22 = (uint64_t)__p;
  v23 = (char *)__p + 64;
  v22 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*>((uint64_t)&v23, (uint64_t)v27, (uint64_t)&v31, (uint64_t)__p);
  CEM::Statement::Statement(v24, v9, v10, v12, v11, &__p);
  p_p = &__p;
  std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&p_p);
  for (i = 4; i != -4; i -= 4)
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v27[i]);
  CEM::AdaptationDatabase::executeStatement(*((CEM::AdaptationDatabase **)this + 16), (CEM::Statement *)v24, v27);
  v14 = v27[0];
  v15 = v27[1];
  a4[1] = 0;
  a4[2] = 0;
  for (*a4 = 0; v14 != v15; v14 = (uint64_t)(v17 + 2))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "emoji");
    v16 = std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::find<std::string>(v14, &__p);
    if (SHIBYTE(v23) < 0)
      operator delete(__p);
    v17 = (void **)(v14 + 8);
    if (v17 != v16 && *((_DWORD *)v16 + 20) == 3)
    {
      v18 = (__int128 *)(v16 + 7);
      v19 = a4[1];
      if (v19 >= a4[2])
      {
        v20 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a4, v18);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a4, v18);
        v20 = v19 + 24;
      }
      a4[1] = v20;
    }
  }
  __p = v27;
  std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  CEM::Statement::~Statement(v24);
}

void sub_1B3DE6C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Unwind_Resume(a1);
}

void CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(uint64_t a1, std::vector<std::string>::size_type __n, uint64_t a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  void *v18[14];
  std::vector<std::string> v19;
  void *__p[2];
  uint64_t v21;
  void *v22[2];
  uint64_t v23;
  char **v24;
  char v25;
  _BYTE v26[24];
  _BYTE *v27;
  _DWORD v28[8];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if ((v6 & 1) == 0
  {
  }
  v22[0] = 0;
  v22[1] = 0;
  v23 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v21 = 0;
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::reserve(&v19, __n);
  if (*(char *)(a1 + 167) < 0)
  {
    v7 = *(_QWORD *)(a1 + 144);
    v8 = *(_QWORD *)(a1 + 152);
  }
  else
  {
    v7 = a1 + 144;
    v8 = *(unsigned __int8 *)(a1 + 167);
  }
  if (byte_1EF083EF7 >= 0)
    v9 = byte_1EF083EF7;
  else
    v9 = unk_1EF083EE8;
  if (byte_1EF083EF7 >= 0)
    v10 = &CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)const::sql;
  else
    v10 = (uint64_t *)CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)const::sql;
  v28[0] = __n;
  v28[6] = 1;
  v16 = 0;
  v17 = 0;
  v15 = 0;
  v24 = &v15;
  v25 = 0;
  v15 = (char *)operator new(0x20uLL);
  v16 = (uint64_t)v15;
  v17 = v15 + 32;
  v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*>((uint64_t)&v17, (uint64_t)v28, (uint64_t)&v29, (uint64_t)v15);
  CEM::Statement::Statement(v18, v7, v8, v10, v9, &v15);
  v24 = &v15;
  std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v28);
  v11 = *(_QWORD *)(a1 + 128);
  v27 = 0;
  v12 = operator new(0x28uLL);
  *v12 = &off_1E66E4B08;
  v12[1] = __p;
  v12[2] = v22;
  v12[3] = &v19;
  v12[4] = a3;
  v27 = v12;
  CEM::AdaptationDatabase::executeStatement(v11, (CEM::Statement *)v18, (uint64_t)v26);
  v13 = v27;
  if (v27 == v26)
  {
    v14 = 4;
    v13 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_16;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_16:
  CEM::Statement::~Statement(v18);
  v18[0] = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23) < 0)
    operator delete(v22[0]);
}

void sub_1B3DE6F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  _Unwind_Resume(a1);
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *value;
  int64_t v5;
  uint64_t v6;
  std::__split_buffer<std::string> __v;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_1B3DE706C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void CEM::AdaptationDatabaseController::enumerateStringAndStringId(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD v12[3];
  void *v13[14];
  void **v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((v4 & 1) == 0
  {
  }
  if (*(char *)(a1 + 167) < 0)
  {
    v5 = *(_QWORD *)(a1 + 144);
    v6 = *(_QWORD *)(a1 + 152);
  }
  else
  {
    v5 = a1 + 144;
    v6 = *(unsigned __int8 *)(a1 + 167);
  }
  if (byte_1EF083F17 >= 0)
    v7 = byte_1EF083F17;
  else
    v7 = unk_1EF083F08;
  if (byte_1EF083F17 >= 0)
    v8 = &CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)const::sql;
  else
    v8 = (uint64_t *)CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)const::sql;
  memset(v12, 0, sizeof(v12));
  CEM::Statement::Statement(v13, v5, v6, v8, v7, v12);
  v14 = (void **)v12;
  std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v14);
  v9 = *(_QWORD *)(a1 + 128);
  v15[0] = &off_1E66E4AB0;
  v15[1] = a2;
  v16 = v15;
  CEM::AdaptationDatabase::executeStatement(v9, (CEM::Statement *)v13, (uint64_t)v15);
  v10 = v16;
  if (v16 == v15)
  {
    v11 = 4;
    v10 = v15;
    goto LABEL_15;
  }
  if (v16)
  {
    v11 = 5;
LABEL_15:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  CEM::Statement::~Statement(v13);
}

void sub_1B3DE71D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t CEM::AdaptationDatabaseController::recordEmojiEngagement(uint64_t a1, void *a2, size_t a3, void *a4, size_t a5)
{
  std::mutex *v10;
  unsigned __int8 v11;
  uint64_t StringId;
  int EmojiId;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t i;
  _QWORD v20[3];
  char *v21;
  uint64_t v22;
  char *v23;
  void *v24[14];
  char **v25;
  char v26;
  void **v27[3];
  int v28;
  int v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v10 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  if (CEM::AdaptationDatabase::isConnected(*(CEM::AdaptationDatabase **)(a1 + 128)))
  {
    if ((v11 & 1) == 0
    {
    }
    StringId = CEM::AdaptationDatabaseController::getStringId(a1, a2, a3);
    if (!(_DWORD)StringId)
      StringId = CEM::AdaptationDatabaseController::createStringId(a1, a2, a3);
    EmojiId = CEM::AdaptationDatabaseController::getEmojiId(a1, a4, a5);
    if (!EmojiId)
      EmojiId = CEM::AdaptationDatabaseController::createEmojiId(a1, a4, a5);
    if (*(char *)(a1 + 167) < 0)
    {
      v14 = *(_QWORD *)(a1 + 144);
      v15 = *(_QWORD *)(a1 + 152);
    }
    else
    {
      v14 = a1 + 144;
      v15 = *(unsigned __int8 *)(a1 + 167);
    }
    if (byte_1EF083F37 >= 0)
      v16 = byte_1EF083F37;
    else
      v16 = unk_1EF083F28;
    if (byte_1EF083F37 >= 0)
      v17 = &CEM::AdaptationDatabaseController::recordEmojiEngagement(std::string_view,std::string_view)::sql;
    else
      v17 = (uint64_t *)CEM::AdaptationDatabaseController::recordEmojiEngagement(std::string_view,std::string_view)::sql;
    LODWORD(v27[0]) = StringId;
    v28 = 1;
    v29 = EmojiId;
    v30 = 1;
    v22 = 0;
    v23 = 0;
    v21 = 0;
    v25 = &v21;
    v26 = 0;
    v21 = (char *)operator new(0x40uLL);
    v22 = (uint64_t)v21;
    v23 = v21 + 64;
    v22 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*>((uint64_t)&v23, (uint64_t)v27, (uint64_t)&v31, (uint64_t)v21);
    CEM::Statement::Statement(v24, v14, v15, v17, v16, &v21);
    v25 = &v21;
    std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
    for (i = 4; i != -4; i -= 4)
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v27[i]);
    CEM::AdaptationDatabase::executeStatement(*(CEM::AdaptationDatabase **)(a1 + 128), (CEM::Statement *)v24, v20);
    v27[0] = (void **)v20;
    std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__destroy_vector::operator()[abi:ne180100](v27);
    CEM::Statement::~Statement(v24);
  }
  else
  {
    StringId = 0;
  }
  std::mutex::unlock(v10);
  return StringId;
}

void sub_1B3DE7480(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

__int128 *CEM::AdaptationDatabaseController::getSharedAdaptationDatabaseCache(CEM::AdaptationDatabaseController *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    CEM::AdaptationDatabaseController::getSharedAdaptationDatabaseCache(void)::__adaptationDatabaseCache = 0u;
    unk_1EF083D48 = 0u;
    dword_1EF083D58 = 1065353216;
  }
  return &CEM::AdaptationDatabaseController::getSharedAdaptationDatabaseCache(void)::__adaptationDatabaseCache;
}

uint64_t std::pair<std::string const,std::weak_ptr<CEM::AdaptationDatabase>>::~pair(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t CEM::AdaptationDatabaseController::setLocale(uint64_t a1, const std::string::value_type *__s1, size_t __n)
{
  std::string *v6;
  uint64_t v7;
  const void *v8;
  uint64_t result;

  v6 = (std::string *)(a1 + 144);
  if (*(char *)(a1 + 167) < 0)
  {
    v8 = *(const void **)(a1 + 144);
    v7 = *(_QWORD *)(a1 + 152);
  }
  else
  {
    v7 = *(unsigned __int8 *)(a1 + 167);
    v8 = (const void *)(a1 + 144);
  }
  if (__n != v7 || (result = memcmp(__s1, v8, __n), (_DWORD)result))
  {
    std::string::__assign_external(v6, __s1, __n);
    return CEM::AdaptationDatabaseController::initializeDatabaseIfNecessary((CEM::AdaptationDatabaseController *)a1);
  }
  return result;
}

void CEM::AdaptationDatabaseController::reset(CEM::AdaptationDatabaseController *this)
{
  char *v2;
  uint64_t v3;
  _QWORD v4[3];
  void **v5[3];
  void *v6[14];
  void ***v7;

  if (CEM::AdaptationDatabase::isConnected(*((CEM::AdaptationDatabase **)this + 16)))
  {
    if (*((char *)this + 167) < 0)
    {
      v2 = (char *)*((_QWORD *)this + 18);
      v3 = *((_QWORD *)this + 19);
    }
    else
    {
      v2 = (char *)this + 144;
      v3 = *((unsigned __int8 *)this + 167);
    }
    memset(v5, 0, sizeof(v5));
    CEM::Statement::Statement(v6, v2, v3, "BEGIN TRANSACTION;\n"
      "END TRANSACTION;",
      111,
      v5);
    v7 = v5;
    std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
    CEM::AdaptationDatabase::executeStatement(*((CEM::AdaptationDatabase **)this + 16), (CEM::Statement *)v6, v4);
    v5[0] = (void **)v4;
    std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__destroy_vector::operator()[abi:ne180100](v5);
    CEM::Statement::~Statement(v6);
  }
}

void sub_1B3DE76C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  CEM::Statement::~Statement((void **)va);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E66E3638, MEMORY[0x1E0DE42D0]);
}

void sub_1B3DE774C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>> const*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::__copy_constructor(a4 + v7, a2 + v7);
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B3DE78B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 32;
    do
    {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor(v4 + v2);
      v2 -= 32;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_1B3DE790C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E66F9A10[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E66F9A38[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEjdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIhNSC_IhEEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS8_jdSE_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEjdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIhNSC_IhEEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS8_jdSE_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEjdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIhNSC_IhEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJS8_jdSE_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEjdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIhNSC_IhEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJS8_jdSE_SH_EEERKSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEjdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIhNSC_IhEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJS8_jdSE_SH_EEERKSZ_EEEDcSR_DpT0_(int a1, std::string *this, __int128 *a3)
{
  __int128 v3;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEjdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIhNSC_IhEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSR_OT0_E_JRNS0_6__baseILSM_1EJS8_jdSE_SH_EEERKSZ_EEEDcSR_DpT0_(int a1, _QWORD *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a2, *(const void **)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B3DE7B28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::vector<unsigned char>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E66F9A10[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor(v4 - 32);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::destroy((uint64_t)(v4 - 24), *((_QWORD **)v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,0>(uint64_t a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void CEM::Statement::~Statement(void **this)
{
  void **v2;

  v2 = this + 7;
  std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_1B3DE7DF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1B3DE7F0C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = __n;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

uint64_t std::shared_ptr<CEM::AdaptationDatabase>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void **std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::find<std::string>(uint64_t a1, void **a2)
{
  void **v2;
  _QWORD *v3;
  void **v5;
  char v6;
  _QWORD *v7;

  v2 = (void **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (void **)(a1 + 8);
  do
  {
    v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6 >= 0)
      v5 = (void **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, void **a2)
{
  size_t v2;
  size_t v3;
  int v4;
  void *v5;
  size_t v6;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (_QWORD *)*a1;
    v2 = v3;
  }
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  size_t v7;
  int v8;

  if (a4 >= a2)
    v7 = a2;
  else
    v7 = a4;
  v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (a2 == a4)
      return 0;
    if (a2 >= a4)
      return 1;
  }
  return 255;
}

void std::__function::__func<CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::~__func()
{
  JUMPOUT(0x1B5E3061CLL);
}

__n128 std::__function::__func<CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E66E4B08;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E66E4B08;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  void **v4;
  void **v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned __int8 **v8;
  size_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  __int128 *v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  void *__p[2];
  char v25;

  std::string::basic_string[abi:ne180100]<0>(__p, "string");
  v4 = std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::find<std::string>(a2, __p);
  if (v25 < 0)
    operator delete(__p[0]);
  v5 = (void **)(a2 + 8);
  if ((void **)(a2 + 8) != v4 && *((_DWORD *)v4 + 20) == 3)
    std::string::operator=(*(std::string **)(a1 + 8), (const std::string *)(v4 + 7));
  v6 = *(unsigned __int8 **)(a1 + 16);
  v7 = v6[23];
  if (((char)v6[23] & 0x80000000) == 0)
  {
    if (v6[23])
      goto LABEL_9;
    goto LABEL_8;
  }
  if (!*((_QWORD *)v6 + 1))
  {
LABEL_8:
    std::string::operator=(*(std::string **)(a1 + 16), *(const std::string **)(a1 + 8));
    v6 = *(unsigned __int8 **)(a1 + 16);
    v7 = v6[23];
  }
LABEL_9:
  v8 = *(unsigned __int8 ***)(a1 + 8);
  v9 = *((_QWORD *)v6 + 1);
  if ((v7 & 0x80u) == 0)
    v10 = (unsigned __int8 *)v7;
  else
    v10 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
  v11 = (unsigned __int8 *)*((unsigned __int8 *)v8 + 23);
  v12 = (char)v11;
  if ((char)v11 < 0)
    v11 = v8[1];
  if (v10 != v11)
  {
LABEL_24:
    v16 = *(_QWORD *)(a1 + 32);
    if ((v7 & 0x80) != 0)
      v6 = *(unsigned __int8 **)v6;
    else
      v9 = v7;
    goto LABEL_31;
  }
  if (v12 >= 0)
    v13 = *(unsigned __int8 **)(a1 + 8);
  else
    v13 = *v8;
  if ((v7 & 0x80) == 0)
  {
    if (!v7)
      goto LABEL_33;
    v14 = v6;
    v15 = v7;
    while (*v14 == *v13)
    {
      ++v14;
      ++v13;
      if (!--v15)
        goto LABEL_33;
    }
    goto LABEL_24;
  }
  v6 = *(unsigned __int8 **)v6;
  if (!memcmp(v6, v13, v9))
    goto LABEL_33;
  v16 = *(_QWORD *)(a1 + 32);
LABEL_31:
  v17 = *(_QWORD *)(a1 + 24);
  __p[0] = v6;
  __p[1] = (void *)v9;
  v18 = *(_QWORD *)(v16 + 24);
  if (!v18)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v18 + 48))(v18, __p, v17);
  std::vector<std::string>::__clear[abi:ne180100](*(uint64_t **)(a1 + 24));
  std::string::operator=(*(std::string **)(a1 + 16), *(const std::string **)(a1 + 8));
LABEL_33:
  std::string::basic_string[abi:ne180100]<0>(__p, "emoji");
  v19 = std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::find<std::string>(a2, __p);
  if (v25 < 0)
    operator delete(__p[0]);
  if (v5 != v19 && *((_DWORD *)v19 + 20) == 3)
  {
    v20 = (__int128 *)(v19 + 7);
    v21 = *(uint64_t **)(a1 + 24);
    v22 = v21[1];
    if (v22 >= v21[2])
    {
      v23 = std::vector<std::string>::__emplace_back_slow_path<std::string const>(v21, v20);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const>((uint64_t)v21, v20);
      v23 = v22 + 24;
    }
    v21[1] = v23;
  }
}

void sub_1B3DE86B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateRecentEmojisForAllStrings(unsigned long,std::function<void ()(std::string_view,std::vector<std::string> const&)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::target_type()
{
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1B5E3061CLL);
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_1B3DE87C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string const>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1B3DE88DC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

void std::__function::__func<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::~__func()
{
  JUMPOUT(0x1B5E3061CLL);
}

_QWORD *std::__function::__func<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E66E4AB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E66E4AB0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  void **v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *adaptation_log;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  void *__p[2];
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "id");
  v4 = std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::find<std::string>(a2, __p);
  if (v13 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "string");
  v5 = std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::find<std::string>(a2, __p);
  if (v13 < 0)
    operator delete(__p[0]);
  if ((void **)(a2 + 8) == v4)
  {
    adaptation_log = cem_logging_get_adaptation_log();
    if (os_log_type_enabled(adaptation_log, OS_LOG_TYPE_ERROR))
      std::__function::__func<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::operator()();
  }
  else if ((void **)(a2 + 8) == v5)
  {
    v9 = cem_logging_get_adaptation_log();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      std::__function::__func<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::operator()();
  }
  else if (*((_DWORD *)v4 + 20) == 1)
  {
    if (*((_DWORD *)v5 + 20) == 3)
    {
      if (*((char *)v5 + 79) < 0)
      {
        v6 = (uint64_t)v5[7];
        v7 = (uint64_t)v5[8];
      }
      else
      {
        v6 = (uint64_t)(v5 + 7);
        v7 = *((unsigned __int8 *)v5 + 79);
      }
      std::function<void ()(std::string_view,unsigned int)>::operator()(*(_QWORD *)(a1 + 8), v6, v7, *((_DWORD *)v4 + 14));
    }
    else
    {
      v11 = cem_logging_get_adaptation_log();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        std::__function::__func<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::operator()();
    }
  }
  else
  {
    v10 = cem_logging_get_adaptation_log();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      std::__function::__func<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::operator()();
  }
}

void sub_1B3DE8B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::target_type()
{
}

uint64_t std::function<void ()(std::string_view,unsigned int)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int v6;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v6 = a4;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD *, int *))(*(_QWORD *)v4 + 48))(v4, v7, &v6);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [25],void>(std::string *this, char *a2)
{
  char *v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1B3DE8BE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_1B3DE8D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<char const*,char const*>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

_QWORD *std::shared_ptr<CEM::AdaptationDatabase>::shared_ptr[abi:ne180100]<CEM::AdaptationDatabase,void>(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4)
    goto LABEL_5;
  return a1;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE4F80] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E28], MEMORY[0x1E0DE43F0]);
}

_QWORD *std::allocate_shared[abi:ne180100]<CEM::AdaptationDatabase,std::allocator<CEM::AdaptationDatabase>,std::__fs::filesystem::path const&,void>@<X0>(const std::__fs::filesystem::path *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x78uLL);
  result = std::__shared_ptr_emplace<CEM::AdaptationDatabase>::__shared_ptr_emplace[abi:ne180100]<std::__fs::filesystem::path const&,std::allocator<CEM::AdaptationDatabase>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B3DE9520(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<CEM::AdaptationDatabase>::__shared_ptr_emplace[abi:ne180100]<std::__fs::filesystem::path const&,std::allocator<CEM::AdaptationDatabase>,0>(_QWORD *a1, const std::__fs::filesystem::path *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E66E4B88;
  a1[1] = 0;
  CEM::AdaptationDatabase::AdaptationDatabase((CEM::AdaptationDatabase *)(a1 + 3), a2);
  return a1;
}

void sub_1B3DE956C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CEM::AdaptationDatabase>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E66E4B88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CEM::AdaptationDatabase>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E66E4B88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E3061CLL);
}

void std::__shared_ptr_emplace<CEM::AdaptationDatabase>::__on_zero_shared(uint64_t a1)
{
  CEM::AdaptationDatabase::~AdaptationDatabase((CEM::AdaptationDatabase *)(a1 + 24));
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::weak_ptr<CEM::AdaptationDatabase>>>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>>>::__construct_node_hash<std::pair<std::string const,std::weak_ptr<CEM::AdaptationDatabase>>>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1B3DE983C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>>>::__construct_node_hash<std::pair<std::string const,std::weak_ptr<CEM::AdaptationDatabase>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::weak_ptr<CEM::AdaptationDatabase>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1B3DE98B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::weak_ptr<CEM::AdaptationDatabase>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  return this;
}

void std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<CEM::AdaptationDatabase>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<CEM::AdaptationDatabase>>,0>(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

id cem_logging_get_default_log()
{
  if (cem_logging_get_default_log_onceToken != -1)
    dispatch_once(&cem_logging_get_default_log_onceToken, &__block_literal_global);
  return (id)cem_logging_get_default_log_log;
}

void __cem_logging_get_default_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.CoreEmoji", "StandardLogger");
  v1 = (void *)cem_logging_get_default_log_log;
  cem_logging_get_default_log_log = (uint64_t)v0;

}

id cem_logging_get_adaptation_log()
{
  if (cem_logging_get_adaptation_log_onceToken != -1)
    dispatch_once(&cem_logging_get_adaptation_log_onceToken, &__block_literal_global_3);
  return (id)cem_logging_get_adaptation_log_log;
}

void __cem_logging_get_adaptation_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.CoreEmoji", "AdaptationLogger");
  v1 = (void *)cem_logging_get_adaptation_log_log;
  cem_logging_get_adaptation_log_log = (uint64_t)v0;

}

void log_emoji_string_lookup_error()
{
  NSObject *v0;

  emf_logging_get_default_log();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    log_emoji_string_lookup_error_cold_1();

}

void log_emoji_token_creation_error()
{
  NSObject *v0;

  emf_logging_get_default_log();
  v0 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    log_emoji_token_creation_error_cold_1();

}

id createEmojiTokenMatchesWithMatchingIDsAndEmojiLocaleData(void *a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = 0;
    v7 = *(_QWORD *)v12;
    do
    {
      v8 = 0;
      v9 = v6;
      do
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v8), "unsignedIntegerValue", (_QWORD)v11);
        CEMEmojiTokenCreateWithIndex();
        v6 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v2, "addObject:", v6);
        ++v8;
        v9 = v6;
      }
      while (v5 != v8);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);

  }
  return v2;
}

void OUTLINED_FUNCTION_0_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

BOOL ___sortAnchorCollection_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  unint64_t v5;
  unint64_t v6;

  v4 = a3;
  v5 = objc_msgSend(a2, "length");
  v6 = objc_msgSend(v4, "length");

  return v5 < v6;
}

void sub_1B3DEBD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B3DEF2A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B3DEF53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  va_list va;

  va_start(va, a14);
  nlp::CFScopedPtr<void const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__SecTask *>::reset((const void **)(v18 - 88), 0);

  _Unwind_Resume(a1);
}

void nlp::CFScopedPtr<void const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void nlp::CFScopedPtr<__SecTask *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

id _createStrippedLocaleIdentifierForLocale(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v1, "languageCode");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKey:", v3, *MEMORY[0x1E0C997E8]);

  objc_msgSend(v1, "countryCode");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    objc_msgSend(v1, "countryCode");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKey:", v5, *MEMORY[0x1E0C997B0]);

  }
  objc_msgSend(v1, "scriptCode");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    objc_msgSend(v1, "scriptCode");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKey:", v7, *MEMORY[0x1E0C99820]);

  }
  objc_msgSend(MEMORY[0x1E0C99DC8], "localeIdentifierFromComponents:", v2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id _createStrippedFallbackLocaleIdentifierForLocale(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v1 = (void *)MEMORY[0x1E0C99DC8];
  objc_msgSend(a1, "localeIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "baseLanguageFromLanguage:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id _overridePlistForLocaleIdentifier(void *a1, uint64_t a2, int a3)
{
  if (a3)
    objc_msgSend(a1, "URLForResource:withExtension:subdirectory:", a2, CFSTR("plist"), CFSTR("SearchEngineOverrideLists"));
  else
    objc_msgSend(a1, "URLForResource:withExtension:subdirectory:localization:", CFSTR("SearchEngineOverrideList"), CFSTR("plist"), 0, a2);
  return (id)objc_claimAutoreleasedReturnValue();
}

id _overridePlistForLocaleIdentifierCheckingBothLocations(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;

  v3 = a2;
  v4 = a1;
  if (_os_feature_enabled_impl())
    objc_msgSend(v4, "URLForResource:withExtension:subdirectory:localization:", CFSTR("SearchEngineOverrideList"), CFSTR("plist"), 0, v3);
  else
    objc_msgSend(v4, "URLForResource:withExtension:subdirectory:", v3, CFSTR("plist"), CFSTR("SearchEngineOverrideLists"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id EMFGetDeviceRegionCode()
{
  if (EMFGetDeviceRegionCode_onceToken != -1)
    dispatch_once(&EMFGetDeviceRegionCode_onceToken, &__block_literal_global_5);
  return (id)EMFGetDeviceRegionCode_regionCode;
}

uint64_t EMFIsDeviceInGreaterChina()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;

  EMFGetDeviceRegionCode();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", *MEMORY[0x1E0C997B0]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v0, "isEqualToString:", CFSTR("CH")) & 1) != 0
    || (objc_msgSend(v2, "isEqualToString:", CFSTR("CN")) & 1) != 0
    || (objc_msgSend(v2, "isEqualToString:", CFSTR("MO")) & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    v3 = objc_msgSend(v2, "isEqualToString:", CFSTR("HK"));
  }

  return v3;
}

objc_class *_strategyClassForIndex(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  objc_class *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  objc_class *v11;
  int v13;
  void *v14;
  __int16 v15;
  void *v16;
  __int16 v17;
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "termIndex");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "allKeys");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectAtIndexedSubscript:", 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "objectForKeyedSubscript:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    v6 = (objc_class *)objc_opt_class();
  else
    v6 = 0;
  emf_logging_get_default_log();
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    NSStringFromClass(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "termIndexURL");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "documentIndexURL");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v13 = 138412802;
    v14 = v8;
    v15 = 2112;
    v16 = v9;
    v17 = 2112;
    v18 = v10;
    _os_log_impl(&dword_1B3DE1000, v7, OS_LOG_TYPE_INFO, "Using index strategy class: '%@' for index: ('%@', '%@')", (uint8_t *)&v13, 0x20u);

  }
  v11 = v6;

  return v11;
}

void sub_1B3DF346C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 200), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void sub_1B3DF3F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void OUTLINED_FUNCTION_0_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1B3DF52E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B3DF6104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void OUTLINED_FUNCTION_0_4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t CEM::Statement::Statement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  CEM::Statement::makeLocalizedStatementBody((CEM::Statement *)a1, (std::string *)(a1 + 32));
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*>((_QWORD *)(a1 + 56), *a6, a6[1], (a6[1] - *a6) >> 5);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 101;
  return a1;
}

void sub_1B3DF6C54(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void CEM::Statement::makeLocalizedStatementBody(CEM::Statement *this@<X0>, std::string *a2@<X8>)
{
  size_t v4;
  const void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  std::string::size_type v9;
  std::string::size_type size;
  std::string::size_type v11;
  void *v12;
  char *v13;
  char *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  std::string::size_type v18;
  std::string v19;

  memset(&v19, 0, sizeof(v19));
  if (*((_QWORD *)this + 1))
  {
    std::string::append(&v19, "-", 1uLL);
    std::string::append(&v19, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  v4 = *((_QWORD *)this + 3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (const void *)*((_QWORD *)this + 2);
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a2->__r_.__value_.__l.__size_ = v4;
    a2->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
  }
  else
  {
    *((_BYTE *)&a2->__r_.__value_.__s + 23) = v4;
    v6 = a2;
    if (!v4)
      goto LABEL_11;
  }
  memmove(v6, v5, v4);
LABEL_11:
  v9 = 0;
  *((_BYTE *)v6 + v4) = 0;
  size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v11 = (std::string::size_type)a2;
  else
    v11 = a2->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = a2->__r_.__value_.__l.__size_;
LABEL_16:
  v12 = (void *)(v11 + v9);
  v13 = (char *)(v11 + size);
  while (v13 - (_BYTE *)v12 >= 2)
  {
    v14 = (char *)memchr(v12, 123, v13 - (_BYTE *)v12 - 1);
    if (!v14)
      break;
    if (*(_WORD *)v14 == 32123)
    {
      if (v14 != v13)
      {
        v15 = (std::string::size_type)&v14[-v11];
        if (v15 != -1)
        {
          if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v16 = &v19;
          else
            v16 = (std::string *)v19.__r_.__value_.__r.__words[0];
          if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v17 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
          else
            v17 = v19.__r_.__value_.__l.__size_;
          std::string::replace(a2, v15, 2uLL, (const std::string::value_type *)v16, v17);
          v18 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
          if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v18 = v19.__r_.__value_.__l.__size_;
          v9 = v18 + v15;
          size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
          if ((size & 0x80u) == 0)
            v11 = (std::string::size_type)a2;
          else
            v11 = a2->__r_.__value_.__r.__words[0];
          if ((size & 0x80u) != 0)
            size = a2->__r_.__value_.__l.__size_;
          if (size >= v9)
            goto LABEL_16;
        }
      }
      break;
    }
    v12 = v14 + 1;
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
}

void sub_1B3DF6E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t CEM::Statement::prepare(CEM::Statement *this)
{
  uint64_t result;
  sqlite3 **v3;
  const char *v4;
  NSObject *adaptation_log;

  v3 = (sqlite3 **)((char *)this + 96);
  result = *((_QWORD *)this + 12);
  if (result)
  {
    v4 = (const char *)*((_QWORD *)this + 11);
    if (!v4)
    {
      v4 = (char *)this + 32;
      if (*((char *)this + 55) < 0)
        v4 = *(const char **)v4;
    }
    if (sqlite3_prepare_v2((sqlite3 *)result, v4, -1, (sqlite3_stmt **)this + 10, (const char **)this + 11))
    {
      adaptation_log = cem_logging_get_adaptation_log();
      if (os_log_type_enabled(adaptation_log, OS_LOG_TYPE_ERROR))
        CEM::Statement::prepare((uint64_t)this, v3, adaptation_log);
      sqlite3_finalize(*((sqlite3_stmt **)this + 10));
      return 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t CEM::Statement::bindParameters(CEM::Statement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  NSObject *adaptation_log;
  _QWORD v9[3];
  int v10;
  _QWORD *v11;

  v1 = *((_QWORD *)this + 7);
  v2 = 1;
  if (*((_QWORD *)this + 8) != v1)
  {
    v4 = 0;
    v5 = 0;
    while (1)
    {
      v10 = 1;
      v9[0] = this;
      v9[1] = &v10;
      v9[2] = v5;
      v6 = *(unsigned int *)(v1 + v4 + 24);
      if ((_DWORD)v6 == -1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v11 = v9;
      ((void (*)(_QWORD **))off_1E66F9FF8[v6])(&v11);
      if (v10)
        break;
      ++v5;
      v1 = *((_QWORD *)this + 7);
      v4 += 32;
      if (v5 >= (*((_QWORD *)this + 8) - v1) >> 5)
        return 1;
    }
    adaptation_log = cem_logging_get_adaptation_log();
    if (os_log_type_enabled(adaptation_log, OS_LOG_TYPE_ERROR))
      CEM::Statement::bindParameters(v5, (uint64_t)this, adaptation_log);
    return 0;
  }
  return v2;
}

void CEM::Statement::getValueForColumnAtIndex(sqlite3_stmt **this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  char *v7;
  size_t v8;
  const void *v9;
  __int128 v10;
  uint64_t v11;

  switch(sqlite3_column_type(this[10], a2))
  {
    case 1:
      *(_DWORD *)a3 = sqlite3_column_int(this[10], a2);
      v6 = 1;
      goto LABEL_6;
    case 2:
      *(double *)a3 = sqlite3_column_double(this[10], a2);
      v6 = 2;
      goto LABEL_6;
    case 3:
      v7 = (char *)sqlite3_column_text(this[10], a2);
      std::string::basic_string[abi:ne180100]<0>(&v10, v7);
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      v6 = 3;
      goto LABEL_6;
    case 4:
      v8 = sqlite3_column_bytes(this[10], a2);
      v9 = sqlite3_column_blob(this[10], a2);
      v10 = 0uLL;
      v11 = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&v10, v9, (uint64_t)v9 + v8, v8);
      *(_OWORD *)a3 = v10;
      *(_QWORD *)(a3 + 16) = v11;
      v6 = 4;
LABEL_6:
      *(_DWORD *)(a3 + 24) = v6;
      break;
    case 5:
      *(_DWORD *)(a3 + 24) = 0;
      break;
    default:
      CEM::Statement::getValueForColumnAtIndex();
  }
}

BOOL CEM::Statement::step(sqlite3_stmt **this)
{
  int v2;

  v2 = sqlite3_step(this[10]);
  *((_DWORD *)this + 26) = v2;
  return v2 != 101;
}

BOOL CEM::Statement::isValid(CEM::Statement *this)
{
  return *((_QWORD *)this + 10) != 0;
}

BOOL CEM::Statement::hasParameters(CEM::Statement *this)
{
  return *((_QWORD *)this + 8) != *((_QWORD *)this + 7);
}

BOOL CEM::Statement::hasRows(CEM::Statement *this)
{
  return *((_DWORD *)this + 26) == 100;
}

uint64_t CEM::Statement::columnSize(sqlite3_stmt **this)
{
  return sqlite3_column_count(this[10]);
}

const char *CEM::Statement::getColumnNameAtIndex(sqlite3_stmt **this, int a2)
{
  const char *v2;

  v2 = sqlite3_column_name(this[10], a2);
  strlen(v2);
  return v2;
}

BOOL CEM::Statement::finalize(sqlite3_stmt **this)
{
  int v2;

  v2 = sqlite3_finalize(this[10]);
  *((_DWORD *)this + 26) = v2;
  return v2 == 0;
}

char *CEM::Statement::getExpandedSql(sqlite3_stmt **this)
{
  return sqlite3_expanded_sql(this[10]);
}

_QWORD *std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__init_with_size[abi:ne180100]<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1B3DF7260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::__copy_constructor(a4 + v7, a2 + v7);
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1B3DF7350(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 32;
    do
    {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor(v4 + v2);
      v2 -= 32;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5040] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E88], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CEM::Statement::bindParameters(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,unsigned int,double,std::string,std::vector<unsigned char,std::char_traits<char><unsigned char>>> const&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  result = sqlite3_bind_null(*(sqlite3_stmt **)(*(_QWORD *)*a1 + 80), *(_DWORD *)(*a1 + 16));
  **(_DWORD **)(v1 + 8) = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CEM::Statement::bindParameters(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,unsigned int,double,std::string,std::vector<unsigned char,std::char_traits<char><unsigned char>>> const&>(uint64_t *a1, int *a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = sqlite3_bind_int(*(sqlite3_stmt **)(*(_QWORD *)*a1 + 80), *(_DWORD *)(*a1 + 16) + 1, *a2);
  **(_DWORD **)(v2 + 8) = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CEM::Statement::bindParameters(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,unsigned int,double,std::string,std::vector<unsigned char,std::char_traits<char><unsigned char>>> const&>(uint64_t *a1, double *a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = sqlite3_bind_double(*(sqlite3_stmt **)(*(_QWORD *)*a1 + 80), *(_DWORD *)(*a1 + 16), *a2);
  **(_DWORD **)(v2 + 8) = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CEM::Statement::bindParameters(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,unsigned int,double,std::string,std::vector<unsigned char,std::char_traits<char><unsigned char>>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  sqlite3_stmt *v3;
  int v4;
  const char *v5;
  int v6;
  uint64_t result;

  v2 = *a1;
  v3 = *(sqlite3_stmt **)(*(_QWORD *)*a1 + 80);
  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = (const char *)a2;
  else
    v5 = *(const char **)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_DWORD *)(a2 + 8);
  result = sqlite3_bind_text(v3, *(_DWORD *)(v2 + 16) + 1, v5, v6, 0);
  **(_DWORD **)(v2 + 8) = result;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<CEM::Statement::bindParameters(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,unsigned int,double,std::string,std::vector<unsigned char,std::char_traits<char><unsigned char>>> const&>(uint64_t *a1, unsigned __int8 **a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = sqlite3_bind_blob(*(sqlite3_stmt **)(*(_QWORD *)*a1 + 80), *(_DWORD *)(*a1 + 16), (const void *)**a2, *((_DWORD *)a2 + 2) - *a2, 0);
  **(_DWORD **)(v2 + 8) = result;
  return result;
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B3DF7560(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL CEM::CFStringsAreEqual(const __CFString *this, const __CFString *a2, const __CFString *a3)
{
  return CFStringCompare(this, a2, (CFStringCompareFlags)a3) == kCFCompareEqualTo;
}

void CEM::enumerateSpaceSeparatedTokensWithFullStops(CFStringRef str, CFRange range, uint64_t a3)
{
  CFStringRef v5;
  std::string::size_type v6;
  uint64_t i;
  int v8;
  std::string::size_type size;
  std::string *v11;
  std::string::size_type v12;
  char *p_p;
  int64_t v15;
  std::string::size_type v16;
  char *v17;
  char *v18;
  int64_t v19;
  std::string *v20;
  int v21;
  int64_t v22;
  char *v23;
  char *v24;
  std::string *v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  int v35;
  const char *v36;
  const __CFString *v37;
  CFRange v38;
  int v39;
  const __CFString *v40;
  uint64_t v41;
  void *__p;
  int64_t v43;
  unsigned __int8 v44;
  std::string v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::string v49;
  CFTypeRef cf;
  __int128 v51;
  char v52;
  std::vector<std::string> *v53[2];

  if (!str)
    return;
  v5 = CFStringCreateWithSubstring(0, str, range);
  cf = v5;
  if (!v5)
    return;
  CEM::getUTF8StringFromCFString(v5, &v49);
  v46 = 0;
  v47 = 0;
  v48 = 0;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v45, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
  else
    v45 = v49;
  std::string::basic_string[abi:ne180100]<0>(&__p, " ");
  v40 = str;
  v41 = a3;
  v6 = 0;
  for (i = 0; ; ++i)
  {
    v8 = SHIBYTE(v45.__r_.__value_.__r.__words[2]);
    size = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      break;
    if (v6 >= HIBYTE(v45.__r_.__value_.__r.__words[2]) || i == -1)
      goto LABEL_50;
    v11 = &v45;
    v12 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
LABEL_18:
    if ((v44 & 0x80u) == 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    if ((v44 & 0x80u) == 0)
      v15 = v44;
    else
      v15 = v43;
    v16 = v6;
    if (v15)
    {
      v17 = (char *)v11 + v6;
      v18 = (char *)v11 + v12;
      v19 = v12 - v6;
      if (v19 >= v15)
      {
        v21 = *p_p;
        do
        {
          v22 = v19 - v15;
          if (v22 == -1)
            break;
          v23 = (char *)memchr(v17, v21, v22 + 1);
          if (!v23)
            break;
          v24 = v23;
          if (!memcmp(v23, p_p, v15))
          {
            if (v24 == v18)
              break;
            v16 = v24 - (char *)v11;
            if (v24 - (char *)v11 == -1)
              break;
            goto LABEL_42;
          }
          v17 = v24 + 1;
          v19 = v18 - (v24 + 1);
        }
        while (v19 >= v15);
      }
      if (v8 < 0)
      {
        size = v45.__r_.__value_.__l.__size_;
        v20 = (std::string *)v45.__r_.__value_.__r.__words[0];
      }
      else
      {
        v20 = &v45;
      }
      std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v51, (char *)v20 + (int)v6, (char *)v20 + size, size - (int)v6);
      v53[0] = (std::vector<std::string> *)&v46;
      std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](v53, &v51);
      if (v52 < 0)
        operator delete((void *)v51);
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        v6 = v45.__r_.__value_.__l.__size_;
      else
        v6 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    }
    else
    {
LABEL_42:
      v25 = (std::string *)v45.__r_.__value_.__r.__words[0];
      if (v8 >= 0)
        v25 = &v45;
      std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v51, (char *)v25 + (int)v6, (char *)v25 + (int)v16, (int)v16 - (uint64_t)(int)v6);
      v53[0] = (std::vector<std::string> *)&v46;
      std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](v53, &v51);
      if (v52 < 0)
        operator delete((void *)v51);
      v26 = v44;
      if ((v44 & 0x80u) != 0)
        v26 = v43;
      v6 = v26 + v16;
    }
  }
  v12 = v45.__r_.__value_.__l.__size_;
  if (v6 < v45.__r_.__value_.__l.__size_ && i != -1)
  {
    v11 = (std::string *)v45.__r_.__value_.__r.__words[0];
    goto LABEL_18;
  }
LABEL_50:
  if ((char)v44 < 0)
  {
    operator delete(__p);
    LOBYTE(v8) = *((_BYTE *)&v45.__r_.__value_.__s + 23);
  }
  if ((v8 & 0x80) != 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  v27 = v46;
  v28 = v47;
  if (v46 != v47)
  {
    while (2)
    {
      LOBYTE(v53[0]) = 0;
      v29 = *(unsigned __int8 *)(v27 + 23);
      if (*(char *)(v27 + 23) < 0)
      {
        v30 = *(const char **)v27;
        v31 = *(_QWORD *)(v27 + 8);
      }
      else
      {
        v30 = (const char *)v27;
        v31 = *(unsigned __int8 *)(v27 + 23);
      }
      v32 = 0;
      v33 = v30 - 1;
      v34 = 1;
      while (v31 != v32)
      {
        v35 = v33[v31];
        --v34;
        --v33;
        ++v32;
        if (v35 == 46)
        {
          if (!(v31 + v34))
            break;
          if ((v29 & 0x80) != 0)
          {
            if (!(v31 - *(_QWORD *)(v27 + 8) + v34))
              break;
            v36 = *(const char **)v27;
          }
          else
          {
            if (!(v31 - v29 + v34))
              break;
            v36 = (const char *)v27;
          }
          v37 = CFStringCreateWithCString(0, v36, 0x8000100u);
          *(_QWORD *)&v51 = v37;
          if (v37)
          {
            v38 = CFStringFind(v40, v37, 0);
            if (v38.location != -1 && v38.length)
              (*(void (**)(uint64_t, CFIndex, CFIndex, std::vector<std::string> **))(v41 + 16))(v41, v38.location, v38.length, v53);
            v39 = LOBYTE(v53[0]);
            CFRelease(v37);
            if (v39)
              goto LABEL_73;
          }
          break;
        }
      }
      v27 += 24;
      if (v27 != v28)
        continue;
      break;
    }
  }
LABEL_73:
  *(_QWORD *)&v51 = &v46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (cf)
    CFRelease(cf);
}

void sub_1B3DF7CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,const void *a34)
{
  uint64_t v34;

  *(_QWORD *)(v34 - 96) = &a25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 96));
  if (a33 < 0)
    operator delete(__p);
  nlp::CFScopedPtr<__CFString const*>::reset(&a34, 0);
  _Unwind_Resume(a1);
}

const __CFString *CEM::getUTF8StringFromCFString@<X0>(const __CFString *this@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *v4;
  char *CStringPtr;
  CFIndex Length;
  CFIndex v7;
  char *v8;

  if (this)
  {
    v4 = this;
    CStringPtr = (char *)CFStringGetCStringPtr(this, 0x8000100u);
    if (!CStringPtr)
    {
      Length = CFStringGetLength(v4);
      v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
      v8 = (char *)operator new[]();
      CFStringGetCString(v4, v8, v7, 0x8000100u);
      std::string::basic_string[abi:ne180100]<0>(a2, v8);
      JUMPOUT(0x1B5E305F8);
    }
    return (const __CFString *)std::string::basic_string[abi:ne180100]<0>(a2, CStringPtr);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return this;
}

void sub_1B3DF7E30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E305F8](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

BOOL CEM::deviceIsChinese(CEM *this)
{
  if (CEM::getDeviceRegionCode(void)::onceToken != -1)
    dispatch_once(&CEM::getDeviceRegionCode(void)::onceToken, &__block_literal_global_37);
  return !CEM::getDeviceRegionCode(void)::__regionCode
      || CFStringCompare((CFStringRef)CEM::getDeviceRegionCode(void)::__regionCode, CFSTR("CH"), 0) == kCFCompareEqualTo;
}

BOOL CEM::shouldShowTaiwanFlagEmoji(CEM *this)
{
  _BOOL8 v1;
  const __CFLocale *v2;
  const __CFLocale *v3;
  const __CFString *Value;

  if (CEM::shouldShowTaiwanFlagEmoji(void)::onceToken != -1)
    dispatch_once(&CEM::shouldShowTaiwanFlagEmoji(void)::onceToken, &__block_literal_global_7);
  if (CEM::shouldShowTaiwanFlagEmoji(void)::_deviceIsChinese)
    return 0;
  v2 = CFLocaleCopyCurrent();
  if (!v2)
    return 1;
  v3 = v2;
  Value = (const __CFString *)CFLocaleGetValue(v2, (CFLocaleKey)*MEMORY[0x1E0C9B060]);
  if (Value)
    v1 = CFStringCompare(Value, CFSTR("CN"), 0) != kCFCompareEqualTo;
  else
    v1 = 1;
  CFRelease(v3);
  return v1;
}

void sub_1B3DF7F70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

BOOL ___ZN3CEM25shouldShowTaiwanFlagEmojiEv_block_invoke(CEM *a1)
{
  _BOOL8 result;

  result = CEM::deviceIsChinese(a1);
  CEM::shouldShowTaiwanFlagEmoji(void)::_deviceIsChinese = result;
  return result;
}

const __CFString *CEM::copyPreferredLocaleIdentifierFromFrameworkBundleWithLocale(CEM *this, __CFBundle *a2, const __CFLocale *a3)
{
  const __CFString *ValueAtIndex;
  CFLocaleRef OverrideLocaleForLocale;
  CFLocaleRef v7;
  const __CFLocale *v8;
  const __CFAllocator *v9;
  const __CFArray *v10;
  const __CFArray *v11;
  const __CFArray *v12;
  const __CFArray *v13;
  const __CFLocale *v14;
  const __CFString *v15;
  const __CFString *Value;
  const __CFString *v17;
  void *values[2];

  ValueAtIndex = 0;
  if (!this || !a2)
    return ValueAtIndex;
  OverrideLocaleForLocale = CEM::createOverrideLocaleForLocale(a2, a2);
  v7 = OverrideLocaleForLocale;
  values[0] = 0;
  values[1] = OverrideLocaleForLocale;
  if (OverrideLocaleForLocale)
    v8 = OverrideLocaleForLocale;
  else
    v8 = a2;
  values[0] = (void *)MEMORY[0x1B5E3013C](v8);
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v10 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 1, MEMORY[0x1E0C9B378]);
  v11 = CFBundleCopyBundleLocalizations(this);
  v12 = CFBundleCopyLocalizationsForPreferences(v11, v10);
  v13 = v12;
  if (v12 && !CFArrayGetCount(v12))
  {
    ValueAtIndex = 0;
  }
  else
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v13, 0);
    v14 = CFLocaleCreate(v9, ValueAtIndex);
    v15 = (const __CFString *)*MEMORY[0x1E0C9B088];
    Value = (const __CFString *)CFLocaleGetValue(v8, (CFLocaleKey)*MEMORY[0x1E0C9B088]);
    v17 = (const __CFString *)CFLocaleGetValue(v14, v15);
    if (CFStringCompare(Value, v17, 0))
      ValueAtIndex = 0;
    else
      CFRetain(ValueAtIndex);
    if (v14)
      CFRelease(v14);
    if (!v13)
      goto LABEL_17;
  }
  CFRelease(v13);
LABEL_17:
  if (v11)
    CFRelease(v11);
  if (v10)
    CFRelease(v10);
  if (v7)
    CFRelease(v7);
  return ValueAtIndex;
}

void sub_1B3DF8138(_Unwind_Exception *a1, uint64_t a2, ...)
{
  const void *v3;
  va_list va;
  const void *v5;
  va_list va1;
  const void *v7;
  va_list va2;
  uint64_t v9;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v5 = va_arg(va2, const void *);
  va_copy(va3, va2);
  v7 = va_arg(va3, const void *);
  v9 = va_arg(va3, _QWORD);
  nlp::CFScopedPtr<__CFArray const*>::reset((const void **)va, 0);
  nlp::CFScopedPtr<__CFArray const*>::reset((const void **)va1, 0);
  nlp::CFScopedPtr<__CFArray const*>::reset((const void **)va2, 0);
  nlp::CFScopedPtr<__CFLocale const*>::reset((const void **)va3, 0);
  _Unwind_Resume(a1);
}

CFLocaleRef CEM::createOverrideLocaleForLocale(CEM *this, const __CFLocale *a2)
{
  const __CFString *v2;
  const __CFString *v4;

  v2 = (const __CFString *)MEMORY[0x1B5E3013C](this, a2);
  if (CFStringCompare(v2, CFSTR("ars"), 0))
  {
    if (CFStringCompare(v2, CFSTR("nn"), 0))
    {
      if (CFStringCompare(v2, CFSTR("yue-Hant"), 0))
      {
        if (CFStringCompare(v2, CFSTR("en_CA"), 0) && CFStringCompare(v2, CFSTR("en_JP"), 0))
          return 0;
        v4 = CFSTR("en_US");
      }
      else
      {
        v4 = CFSTR("zh_HK");
      }
    }
    else
    {
      v4 = CFSTR("nb_NO");
    }
  }
  else
  {
    v4 = CFSTR("ar");
  }
  return CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4);
}

CFLocaleRef CEM::createNormalizedLocale(CEM *this, const __CFLocale *a2)
{
  const __CFAllocator *v2;
  const __CFString *v3;
  const __CFDictionary *ComponentsFromLocaleIdentifier;
  const __CFString *LocaleIdentifierFromComponents;
  CFLocaleRef v6;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = (const __CFString *)MEMORY[0x1B5E3013C](this, a2);
  ComponentsFromLocaleIdentifier = CFLocaleCreateComponentsFromLocaleIdentifier(v2, v3);
  LocaleIdentifierFromComponents = CFLocaleCreateLocaleIdentifierFromComponents(v2, ComponentsFromLocaleIdentifier);
  v6 = CFLocaleCreate(v2, LocaleIdentifierFromComponents);
  if (LocaleIdentifierFromComponents)
    CFRelease(LocaleIdentifierFromComponents);
  if (ComponentsFromLocaleIdentifier)
    CFRelease(ComponentsFromLocaleIdentifier);
  return v6;
}

void sub_1B3DF8324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  nlp::CFScopedPtr<__CFString const*>::reset(&a9, 0);
  nlp::CFScopedPtr<__CFDictionary const*>::reset(&a10, 0);
  _Unwind_Resume(a1);
}

uint64_t CEM::createFrameworkBundle(CEM *this)
{
  if (CEM::createFrameworkBundle(void)::onceToken != -1)
    dispatch_once(&CEM::createFrameworkBundle(void)::onceToken, &__block_literal_global_25);
  CFRetain((CFTypeRef)CEM::createFrameworkBundle(void)::frameworkBundle);
  return CEM::createFrameworkBundle(void)::frameworkBundle;
}

void ___ZN3CEM21createFrameworkBundleEv_block_invoke(uint64_t a1, const __CFString *a2)
{
  __CFString *PathRelativeToPlatformRoot;
  const __CFAllocator *v3;
  const __CFURL *v4;

  PathRelativeToPlatformRoot = CEM::createPathRelativeToPlatformRoot(CFSTR("/System/Library/PrivateFrameworks/CoreEmoji.framework"), a2);
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = CFURLCreateWithFileSystemPath((CFAllocatorRef)*MEMORY[0x1E0C9AE00], PathRelativeToPlatformRoot, kCFURLPOSIXPathStyle, 1u);
  CEM::createFrameworkBundle(void)::frameworkBundle = (uint64_t)CFBundleCreate(v3, v4);
  if (!CEM::createFrameworkBundle(void)::frameworkBundle)
    __assert_rtn("createFrameworkBundle_block_invoke", "CEMUtilityFunctions.cpp", 276, "frameworkBundle && \"CoreEmoji framework bundle could not be found.\"");
  if (v4)
    CFRelease(v4);
  if (PathRelativeToPlatformRoot)
    CFRelease(PathRelativeToPlatformRoot);
}

void sub_1B3DF8460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

__CFString *CEM::createPathRelativeToPlatformRoot(const __CFString *this, const __CFString *a2)
{
  __CFString *Mutable;
  const __CFString *v4;

  Mutable = CFStringCreateMutable(0, 1024);
  v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], "/", 0x8000100u);
  CFStringAppend(Mutable, v4);
  if (this)
    CFStringAppend(Mutable, this);
  CFRelease(v4);
  return Mutable;
}

CFURLRef CEM::copyResourceURLFromFrameworkBundle(CEM *this, const __CFString *a2, const __CFString *a3, __CFString *a4, const __CFLocale *a5)
{
  CEM *FrameworkBundle;
  const __CFLocale *v10;
  __CFBundle *v11;
  const __CFString *v12;
  CFURLRef v13;

  FrameworkBundle = (CEM *)CEM::createFrameworkBundle(this);
  if (!FrameworkBundle)
    return 0;
  v11 = FrameworkBundle;
  if (a4)
  {
    v12 = CEM::copyPreferredLocaleIdentifierFromFrameworkBundleWithLocale(FrameworkBundle, (__CFBundle *)a4, v10);
    if (v12)
    {
      v13 = CFBundleCopyResourceURLForLocalization(v11, (CFStringRef)this, a2, a3, v12);
      CFRelease(v12);
    }
    else
    {
      v13 = 0;
    }
  }
  else
  {
    v13 = CFBundleCopyResourceURL(FrameworkBundle, (CFStringRef)this, a2, a3);
  }
  CFRelease(v11);
  return v13;
}

void sub_1B3DF85D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFBundle *>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void CEM::getUTF16StringFromCFString(const __CFString *this@<X0>, uint64_t a2@<X8>)
{
  CFIndex Length;
  UniChar *v6;
  CFRange v7;

  if (this)
  {
    Length = CFStringGetLength(this);
    std::basic_string<char16_t>::basic_string[abi:ne180100]((_QWORD *)a2, Length, 32);
    if (*(char *)(a2 + 23) >= 0)
      v6 = (UniChar *)a2;
    else
      v6 = *(UniChar **)a2;
    v7.location = 0;
    v7.length = Length;
    CFStringGetCharacters(this, v7, v6);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
}

void sub_1B3DF867C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void CEM::getFileSystemRepresentationFromCFURL(CEM *this@<X0>, _QWORD *a2@<X8>)
{
  void *v5;

  v5 = (void *)operator new[]();
  bzero(v5, 0x400uLL);
  CFURLGetFileSystemRepresentation(this, 1u, (UInt8 *)v5, 1024);
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)v5);
  JUMPOUT(0x1B5E305F8);
}

void sub_1B3DF8718(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E305F8](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

CFPropertyListRef CEM::createCFTypeWithContentsOfURL(CFURLRef fileURL, const __CFURL *a2)
{
  __CFReadStream *v2;
  __CFReadStream *v3;
  CFPropertyListRef v4;

  if (!fileURL)
    return 0;
  v2 = CFReadStreamCreateWithFile(0, fileURL);
  if (!v2)
    return 0;
  v3 = v2;
  if (CFReadStreamOpen(v2))
  {
    v4 = CFPropertyListCreateWithStream(0, v3, 0, 0, 0, 0);
    CFReadStreamClose(v3);
  }
  else
  {
    v4 = 0;
  }
  CFRelease(v3);
  return v4;
}

CFURLRef CEM::copyLibraryKeyboardDirectoryURL(CEM *this)
{
  const __CFURL *v1;
  CFURLRef v2;

  v1 = (const __CFURL *)CFCopyHomeDirectoryURLForUser();
  v2 = CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1, CFSTR("/Library/Keyboard"), 1u);
  if (v1)
    CFRelease(v1);
  return v2;
}

void sub_1B3DF8820(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFURL const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFURLRef CEM::copyEmojiAdaptationDatabaseURL(CEM *this)
{
  const __CFURL *v1;
  CFURLRef v2;

  v1 = CEM::copyLibraryKeyboardDirectoryURL(this);
  v2 = CFURLCreateCopyAppendingPathComponent((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1, CFSTR("emoji_adaptation.db"), 0);
  if (v1)
    CFRelease(v1);
  return v2;
}

void sub_1B3DF889C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFURL const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFURLRef CEM::copyResourceURLFromFrameworkBundle(CEM *this, const __CFString *a2, __CFString *a3, const __CFLocale *a4, const __CFLocale *a5)
{
  return CEM::copyResourceURLFromFrameworkBundle(this, a2, 0, a3, a5);
}

_QWORD *std::basic_string<char16_t>::basic_string[abi:ne180100](_QWORD *a1, unint64_t a2, __int16 a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1;
  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 >= 0xB)
  {
    v6 = (a2 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((a2 | 3) != 0xB)
      v6 = a2 | 3;
    a1 = std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>((uint64_t)a1, v6 + 1);
    v3[1] = a2;
    v3[2] = v7 | 0x8000000000000000;
    *v3 = a1;
  }
  else
  {
    *((_BYTE *)a1 + 23) = a2;
    if (!a2)
      goto LABEL_10;
  }
  v8 = 0;
  do
    *((_WORD *)a1 + v8++) = a3;
  while (a2 != v8);
LABEL_10:
  *((_WORD *)a1 + a2) = 0;
  return v3;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

void nlp::CFScopedPtr<__CFString const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

std::vector<std::string> **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](std::vector<std::string> **a1, __int128 *a2)
{
  std::vector<std::string> *v4;
  std::vector<std::string>::pointer end;
  std::vector<std::string> *v6;
  std::allocator<std::string> *p_end_cap;
  std::string *v8;
  std::string *value;
  __int128 v10;
  std::string *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  std::string *v16;
  std::string *v17;
  __int128 v18;
  std::__split_buffer<std::string> __v;

  v4 = *a1;
  end = (*a1)->__end_;
  v6 = *a1;
  value = v6->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&v6->__end_cap_;
  v8 = value;
  if (end >= value)
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v4->__begin_) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v4->__begin_) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v13;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v15)
      v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v15);
    else
      v16 = 0;
    v17 = v16 + v12;
    __v.__first_ = v16;
    __v.__begin_ = v17;
    __v.__end_cap_.__value_ = &v16[v15];
    v18 = *a2;
    v17->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    __v.__end_ = v17 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(v4, &__v);
    v11 = v4->__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    v10 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v11 = end + 1;
    v4->__end_ = end + 1;
  }
  v4->__end_ = v11;
  return a1;
}

void sub_1B3DF8B44(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void nlp::CFScopedPtr<__CFLocale const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFArray const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFDictionary const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFURL const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFBundle *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

id emf_signpost_get_log()
{
  if (emf_signpost_get_log_onceToken != -1)
    dispatch_once(&emf_signpost_get_log_onceToken, &__block_literal_global_9);
  return (id)emf_signpost_get_log_log;
}

void __emf_signpost_get_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.EmojiFoundation", "EmojiFoundationSignposts");
  v1 = (void *)emf_signpost_get_log_log;
  emf_signpost_get_log_log = (uint64_t)v0;

}

id emf_logging_get_default_log()
{
  if (emf_logging_get_default_log_onceToken != -1)
    dispatch_once(&emf_logging_get_default_log_onceToken, &__block_literal_global_3_0);
  return (id)emf_logging_get_default_log_log;
}

void __emf_logging_get_default_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.EmojiFoundation", "StandardLogger");
  v1 = (void *)emf_logging_get_default_log_log;
  emf_logging_get_default_log_log = (uint64_t)v0;

}

id emf_logging_get_query_log()
{
  if (emf_logging_get_query_log_onceToken[0] != -1)
    dispatch_once(emf_logging_get_query_log_onceToken, &__block_literal_global_5);
  return (id)emf_logging_get_query_log_log;
}

void __emf_logging_get_query_log_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.EmojiFoundation", "QueryLogger");
  v1 = (void *)emf_logging_get_query_log_log;
  emf_logging_get_query_log_log = (uint64_t)v0;

}

__CFArray *_createTokensForString(void *a1, void *a2)
{
  __CFString *v3;
  const __CFLocale *v4;
  const __CFAllocator *v5;
  __CFStringTokenizer *v6;
  __CFArray *Mutable;
  CFStringRef v8;
  CFRange v10;
  CFRange CurrentTokenRange;

  v3 = a1;
  v4 = a2;
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v10.length = CFStringGetLength(v3);
  v10.location = 0;
  v6 = CFStringTokenizerCreate(v5, v3, v10, 0, v4);
  Mutable = CFArrayCreateMutable(v5, 3, MEMORY[0x1E0C9B378]);
  while (CFStringTokenizerAdvanceToNextToken(v6))
  {
    CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange(v6);
    v8 = CFStringCreateWithSubstring(v5, v3, CurrentTokenRange);
    CFArrayAppendValue(Mutable, v8);
    CFRelease(v8);
  }
  CFRelease(v6);

  return Mutable;
}

CFMutableStringRef _createNormalizedString(void *a1, void *a2)
{
  const __CFAllocator *v3;
  const __CFLocale *v4;
  __CFString *v5;
  CFIndex Length;
  CFMutableStringRef MutableCopy;
  CFRange v9;

  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = a2;
  v5 = a1;
  Length = CFStringGetLength(v5);
  MutableCopy = CFStringCreateMutableCopy(v3, Length, v5);

  CFStringNormalize(MutableCopy, kCFStringNormalizationFormD);
  CFStringLowercase(MutableCopy, v4);

  v9.length = CFStringGetLength(MutableCopy);
  v9.location = 0;
  CFStringFindAndReplace(MutableCopy, CFSTR("'"), CFSTR("’"), v9, 0);
  return MutableCopy;
}

id _createStemmedTokensForTokenArray(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;

  v3 = a1;
  v4 = v3;
  if (a2)
  {
    objc_msgSend(a2, "stemTokens:", v3);
    v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = v3;
  }
  v6 = v5;

  return v6;
}

void sub_1B3DFB5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

void _enumeratePrefixesInStringUsingBlock(void *a1, void *a2)
{
  id v3;
  void (**v4)(id, void *, unint64_t, _BYTE *);
  void *v5;
  unint64_t v6;
  void *v7;
  char v8;

  v3 = a1;
  v4 = a2;
  v5 = 0;
  v6 = 0;
  v8 = 0;
  while (v6 < objc_msgSend(v3, "length"))
  {
    objc_msgSend(v3, "substringWithRange:", 0, v6 + 1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    v4[2](v4, v7, v6, &v8);
    v5 = v7;
    ++v6;
    if (v8)
      goto LABEL_6;
  }
  v7 = v5;
LABEL_6:

}

void sub_1B3DFB8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _searchTypeForEntryMetadata(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  objc_msgSend(a1, "objectForKey:", CFSTR("searchType"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
    v3 = objc_msgSend(v1, "unsignedIntegerValue");
  else
    v3 = 0;

  return v3;
}

void sub_1B3DFC9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void sub_1B3DFCDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

std::string *CEM::AdaptationDatabase::AdaptationDatabase(std::string *this, const std::__fs::filesystem::path *a2)
{
  __int128 v3;
  std::string *v4;
  NSObject *adaptation_log;
  std::string *v6;
  const char *v7;
  NSObject *v8;
  uint8_t v10[24];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&a2->__pn_.__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = a2->__pn_.__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 850045863;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = 0u;
  this[3].__r_.__value_.__r.__words[2] = 0;
  v4 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    v4 = (std::string *)this->__r_.__value_.__r.__words[0];
  if (sqlite3_open_v2((const char *)v4, (sqlite3 **)&this[1], 65542, 0))
  {
    adaptation_log = cem_logging_get_adaptation_log();
    if (os_log_type_enabled(adaptation_log, OS_LOG_TYPE_ERROR))
    {
      v6 = this;
      if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        v6 = (std::string *)this->__r_.__value_.__r.__words[0];
      v7 = sqlite3_errmsg((sqlite3 *)this[1].__r_.__value_.__l.__data_);
      CEM::AdaptationDatabase::AdaptationDatabase((uint64_t)v6, (uint64_t)v7, v10, adaptation_log);
    }
    this[1].__r_.__value_.__r.__words[0] = 0;
  }
  else
  {
    v8 = cem_logging_get_adaptation_log();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      CEM::AdaptationDatabase::AdaptationDatabase((char *)&this->__r_.__value_.__r.__words[2] + 7, this, v8);
  }
  return this;
}

void sub_1B3DFD7B0(_Unwind_Exception *a1)
{
  void **v1;
  char *v2;
  std::mutex *v3;

  std::mutex::~mutex(v3);
  if (*v2 < 0)
    operator delete(*v1);
  _Unwind_Resume(a1);
}

void CEM::AdaptationDatabase::~AdaptationDatabase(CEM::AdaptationDatabase *this)
{
  sqlite3 *v2;

  v2 = (sqlite3 *)*((_QWORD *)this + 3);
  if (v2)
    sqlite3_close(v2);
  std::mutex::~mutex((std::mutex *)((char *)this + 32));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

BOOL CEM::AdaptationDatabase::isConnected(CEM::AdaptationDatabase *this)
{
  return *((_QWORD *)this + 3) != 0;
}

BOOL CEM::AdaptationDatabase::initializeDatbaseWithSql(CEM::AdaptationDatabase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  NSObject *adaptation_log;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  void **v15[3];
  void *v16[14];
  void ***v17;

  v3 = *((_QWORD *)a1 + 3);
  if (v3)
  {
    memset(v15, 0, sizeof(v15));
    CEM::Statement::Statement(v16, "", 0, a2, a3, v15);
    v17 = v15;
    std::vector<std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
    CEM::AdaptationDatabase::executeStatement(a1, (CEM::Statement *)v16, v14);
    v15[0] = (void **)v14;
    std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__destroy_vector::operator()[abi:ne180100](v15);
    CEM::Statement::~Statement(v16);
  }
  else
  {
    adaptation_log = cem_logging_get_adaptation_log();
    if (os_log_type_enabled(adaptation_log, OS_LOG_TYPE_DEBUG))
      CEM::AdaptationDatabase::initializeDatbaseWithSql(adaptation_log, v6, v7, v8, v9, v10, v11, v12);
  }
  return v3 != 0;
}

void sub_1B3DFD908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  CEM::Statement::~Statement((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *CEM::AdaptationDatabase::executeStatement@<X0>(CEM::AdaptationDatabase *this@<X0>, CEM::Statement *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5[0] = &off_1E66E4A58;
  v5[1] = a3;
  v6 = v5;
  CEM::AdaptationDatabase::executeStatement((uint64_t)this, a2, (uint64_t)v5);
  result = v6;
  if (v6 == v5)
  {
    v4 = 4;
    result = v5;
  }
  else
  {
    if (!v6)
      return result;
    v4 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v4))();
}

void sub_1B3DFD9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void CEM::AdaptationDatabase::executeStatement(uint64_t a1, CEM::Statement *a2, uint64_t a3)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *adaptation_log;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[32];
  _QWORD v21[2];
  uint64_t *v22;
  _QWORD *v23[2];

  v6 = (std::mutex *)(a1 + 32);
  std::mutex::lock((std::mutex *)(a1 + 32));
  v7 = *(_QWORD *)(a1 + 24);
  if (v7)
  {
    *((_QWORD *)a2 + 12) = v7;
    CEM::Statement::prepare(a2);
    while (CEM::Statement::isValid(a2))
    {
      CEM::Statement::bindParameters(a2);
      while (CEM::Statement::step((sqlite3_stmt **)a2) && CEM::Statement::hasRows(a2))
      {
        v23[0] = 0;
        v23[1] = 0;
        v22 = (uint64_t *)v23;
        v8 = CEM::Statement::columnSize((sqlite3_stmt **)a2);
        if (v8)
        {
          v9 = 0;
          do
          {
            v21[0] = CEM::Statement::getColumnNameAtIndex((sqlite3_stmt **)a2, v9);
            v21[1] = v10;
            CEM::Statement::getValueForColumnAtIndex((sqlite3_stmt **)a2, v9, (uint64_t)v20);
            std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__emplace_unique_impl<std::string_view const&,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>(&v22, (uint64_t)v21, (uint64_t)v20);
            std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v20);
            ++v9;
          }
          while (v8 != v9);
        }
        v11 = *(_QWORD *)(a3 + 24);
        if (!v11)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v11 + 48))(v11, &v22);
        std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::destroy((uint64_t)&v22, v23[0]);
      }
      CEM::Statement::finalize((sqlite3_stmt **)a2);
      CEM::Statement::prepare(a2);
    }
  }
  else
  {
    adaptation_log = cem_logging_get_adaptation_log();
    if (os_log_type_enabled(adaptation_log, OS_LOG_TYPE_DEBUG))
      CEM::AdaptationDatabase::executeStatement(adaptation_log, v13, v14, v15, v16, v17, v18, v19);
  }
  std::mutex::unlock(v6);
}

void sub_1B3DFDB74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17)
{
  std::mutex *v17;

  std::mutex::unlock(v17);
  _Unwind_Resume(a1);
}

void std::__function::__func<CEM::AdaptationDatabase::executeStatement(CEM::Statement &)::$_0,std::allocator<CEM::AdaptationDatabase::executeStatement(CEM::Statement &)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::~__func()
{
  JUMPOUT(0x1B5E3061CLL);
}

_QWORD *std::__function::__func<CEM::AdaptationDatabase::executeStatement(CEM::Statement &)::$_0,std::allocator<CEM::AdaptationDatabase::executeStatement(CEM::Statement &)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E66E4A58;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CEM::AdaptationDatabase::executeStatement(CEM::Statement &)::$_0,std::allocator<CEM::AdaptationDatabase::executeStatement(CEM::Statement &)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E66E4A58;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<CEM::AdaptationDatabase::executeStatement(CEM::Statement &)::$_0,std::allocator<CEM::AdaptationDatabase::executeStatement(CEM::Statement &)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 8);
  if (v3 >= *(_QWORD *)(v2 + 16))
  {
    result = std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__emplace_back_slow_path<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&>(*(uint64_t **)(a1 + 8), a2);
  }
  else
  {
    std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::map[abi:ne180100](*(uint64_t **)(v2 + 8), a2);
    result = v3 + 24;
    *(_QWORD *)(v2 + 8) = v3 + 24;
  }
  *(_QWORD *)(v2 + 8) = result;
  return result;
}

void sub_1B3DFDC74(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<CEM::AdaptationDatabase::executeStatement(CEM::Statement &)::$_0,std::allocator<CEM::AdaptationDatabase::executeStatement(CEM::Statement &)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<CEM::AdaptationDatabase::executeStatement(CEM::Statement &)::$_0,std::allocator<CEM::AdaptationDatabase::executeStatement(CEM::Statement &)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::target_type()
{
}

uint64_t std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__emplace_back_slow_path<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  uint64_t *v14;
  uint64_t *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (uint64_t *)&v10[24 * v4];
  v16 = &v10[24 * v9];
  std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::map[abi:ne180100](v14, a2);
  v15 = v14 + 3;
  std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::~__split_buffer(&v13);
  return v11;
}

void sub_1B3DFDDB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_1B3DFDE04(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  void **v4;
  uint64_t **v5;
  uint64_t v6;
  void **v7;
  void **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t)(result + 1);
    do
    {
      result = std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v4[2];
          v9 = *v8 == v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&>(uint64_t **a1, uint64_t a2, void **a3, __int128 *a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  void **v12;

  v6 = std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void **std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__find_equal<std::string>(_QWORD *a1, uint64_t a2, void ***a3, uint64_t *a4, void **a5)
{
  void **v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void **v14;
  void **v15;
  _QWORD *v16;
  BOOL v17;
  void **v19;

  v9 = (void **)(a1 + 1);
  if (a1 + 1 == (_QWORD *)a2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, (void **)(a2 + 32)) & 0x80) != 0)
  {
    if (*a1 == a2)
    {
      v12 = (_QWORD *)a2;
    }
    else
    {
      v11 = *(_QWORD **)a2;
      if (*(_QWORD *)a2)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)v11[1];
        }
        while (v11);
      }
      else
      {
        v16 = (_QWORD *)a2;
        do
        {
          v12 = (_QWORD *)v16[2];
          v17 = *v12 == (_QWORD)v16;
          v16 = v12;
        }
        while (v17);
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12 + 4, a5) & 0x80) == 0)
        return (void **)std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
    }
    if (*(_QWORD *)a2)
    {
      *a3 = (void **)v12;
      return (void **)(v12 + 1);
    }
    else
    {
      *a3 = (void **)a2;
      return (void **)a2;
    }
  }
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(a2 + 32), a5) & 0x80) != 0)
  {
    a4 = (uint64_t *)(a2 + 8);
    v13 = *(_QWORD *)(a2 + 8);
    if (v13)
    {
      v14 = *(void ***)(a2 + 8);
      do
      {
        v15 = v14;
        v14 = (void **)*v14;
      }
      while (v14);
    }
    else
    {
      v19 = (void **)a2;
      do
      {
        v15 = (void **)v19[2];
        v17 = *v15 == v19;
        v19 = v15;
      }
      while (!v17);
    }
    if (v15 == v9)
      goto LABEL_27;
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, v15 + 4) & 0x80) != 0)
    {
      v13 = *a4;
LABEL_27:
      if (v13)
      {
        *a3 = v15;
        return v15;
      }
      else
      {
        *a3 = (void **)a2;
      }
      return (void **)a4;
    }
    return (void **)std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
  }
  *a3 = (void **)a2;
  *a4 = a2;
  return (void **)a4;
}

std::string *std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__construct_node<std::pair<std::string const,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1B3DFE108(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

_QWORD *std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, void **a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)v4 + 4) & 0x80) == 0)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

std::string *std::pair<std::string const,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_1B3DFE25C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t std::vector<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>,std::reverse_iterator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>*>,std::reverse_iterator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>*>,std::reverse_iterator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>,std::reverse_iterator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>*>,std::reverse_iterator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>*>,std::reverse_iterator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v8 = a3;
    do
    {
      v9 = *(_QWORD *)(v8 - 24);
      v8 -= 24;
      *(_QWORD *)(v7 - 24) = v9;
      v10 = (_QWORD *)(a3 - 16);
      v11 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 16) = v11;
      v12 = v7 - 16;
      v13 = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(v7 - 8) = v13;
      if (v13)
      {
        *(_QWORD *)(v11 + 16) = v12;
        *(_QWORD *)(a3 - 24) = v10;
        *v10 = 0;
        *(_QWORD *)(a3 - 8) = 0;
      }
      else
      {
        *(_QWORD *)(v7 - 24) = v12;
      }
      v7 = *((_QWORD *)&v19 + 1) - 24;
      *((_QWORD *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>,std::reverse_iterator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>,std::reverse_iterator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>,std::reverse_iterator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>,std::reverse_iterator<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
    v1 += 24;
  }
}

void **std::__split_buffer<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::destroy(i - 24, *(_QWORD **)(i - 16));
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__emplace_unique_impl<std::string_view const&,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8[3];

  std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__construct_node<std::string_view const&,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>((uint64_t)a1, a2, a3, (uint64_t)v8);
  v4 = (uint64_t **)std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__find_equal<std::string>((uint64_t)a1, &v7, (void **)v8[0] + 4);
  v5 = *v4;
  if (!*v4)
  {
    std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__insert_node_at(a1, v7, v4, v8[0]);
    v5 = v8[0];
    v8[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  return v5;
}

void sub_1B3DFE6F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__construct_node<std::string_view const&,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 8;
  v8 = operator new(0x58uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = std::pair<std::string const,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string_view const&,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,0>(v8 + 4, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1B3DFE760(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::pair[abi:ne180100]<std::string_view const&,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,0>(_QWORD *__dst, uint64_t a2, uint64_t a3)
{
  size_t v4;
  const void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = *(const void **)a2;
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    __dst[1] = v4;
    __dst[2] = v9 | 0x8000000000000000;
    *__dst = v7;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v4;
    v7 = __dst;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v7, v6, v4);
LABEL_9:
  *((_BYTE *)v7 + v4) = 0;
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)(__dst + 3), a3);
  return __dst;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E66FA1E8[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E66FA238[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEjdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIhNSC_IhEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS8_jdSE_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEjdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIhNSC_IhEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS8_jdSE_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEjdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIhNSC_IhEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS8_jdSE_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_9monostateEjdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIhNSC_IhEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJS8_jdSE_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

void OUTLINED_FUNCTION_0_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_1B3DFED5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void sub_1B3DFEE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _getSharedSerialOperationQueue(void)
{
  unsigned __int8 v0;

  {
    dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
    _getSharedSerialOperationQueue(void)::attributes = objc_claimAutoreleasedReturnValue();
  }
  if (_getSharedSerialOperationQueue(void)::onceToken != -1)
    dispatch_once(&_getSharedSerialOperationQueue(void)::onceToken, &__block_literal_global_12);
  return (id)_getSharedSerialOperationQueue(void)::__sharedSerialOperationQueue;
}

void ___Z30_getSharedSerialOperationQueuev_block_invoke()
{
  dispatch_queue_t v0;
  void *v1;

  v0 = dispatch_queue_create("com.apple.EmojiFoundation.EMFEmojiPreferences.sharedSerialOperationQueue", (dispatch_queue_attr_t)_getSharedSerialOperationQueue(void)::attributes);
  v1 = (void *)_getSharedSerialOperationQueue(void)::__sharedSerialOperationQueue;
  _getSharedSerialOperationQueue(void)::__sharedSerialOperationQueue = (uint64_t)v0;

}

CEM::AdaptationDatabaseController *std::unique_ptr<CEM::AdaptationDatabaseController>::reset[abi:ne180100](CEM::AdaptationDatabaseController **a1, CEM::AdaptationDatabaseController *a2)
{
  CEM::AdaptationDatabaseController *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    CEM::AdaptationDatabaseController::~AdaptationDatabaseController(result);
    JUMPOUT(0x1B5E3061CLL);
  }
  return result;
}

void sub_1B3DFF274(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B3DFF438(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B3DFF600(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B3DFF6B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B3DFF7CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

void sub_1B3DFF9C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B3DFFB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B3DFFBD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void getEmojiAdaptationDatabasePath(CEM *a1@<X0>, std::string *a2@<X8>)
{
  const __CFURL *v3;
  __CFString *v4;
  char *v5;
  __CFString *v6;
  const __CFURL *v7;

  v3 = CEM::copyEmojiAdaptationDatabaseURL(a1);
  v7 = v3;
  v6 = (__CFString *)CFURLCopyFileSystemPath(v3, kCFURLPOSIXPathStyle);
  v4 = objc_retainAutorelease(v6);
  v5 = (char *)-[__CFString UTF8String](v4, "UTF8String");
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(a2, &v5);
  if (v4)
    CFRelease(v4);
  if (v3)
    CFRelease(v3);
}

void sub_1B3DFFC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  nlp::CFScopedPtr<__CFURL const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

void sub_1B3DFFDA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  uint64_t v21;

  MEMORY[0x1B5E3061C](v21, 0x1032C409B631534);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);

  _Unwind_Resume(a1);
}

void sub_1B3DFFF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  if (a14 < 0)
    operator delete(__p);

  if (a20 < 0)
    operator delete(a15);

  _Unwind_Resume(a1);
}

void sub_1B3E0029C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  a16 = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (a30 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1B3E003FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B3E00580(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B3E00790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B3E00910(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1B3E0097C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B3E00AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B3E00BB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B3E00CB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B3E00D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B3E010C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B3E01300(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B3E01690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B3E01A18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B3E01FD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B3E0216C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B3E02280(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B3E023B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B3E024B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B3E02738(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B3E0293C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  void *v29;
  void *v30;

  _Block_object_dispose(&a24, 8);
  _Unwind_Resume(a1);
}

void sub_1B3E02AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B3E02E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B3E02F94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B3E03580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B3E036C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_1B3E037AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B3E03894(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B3E03968(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B3E03AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B3E03D18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B3E03F74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B3E04050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B3E04134(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B3E04194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B3E0433C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;
  void *v24;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

id EMFGetDeviceBuildVersion(void)
{
  if (EMFGetDeviceBuildVersion(void)::onceToken != -1)
    dispatch_once(&EMFGetDeviceBuildVersion(void)::onceToken, &__block_literal_global_51);
  return (id)EMFGetDeviceBuildVersion(void)::__buildVersion;
}

void ___Z24EMFGetDeviceBuildVersionv_block_invoke()
{
  uint64_t v0;
  void *v1;

  MGCopyAnswer();
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)EMFGetDeviceBuildVersion(void)::__buildVersion;
  EMFGetDeviceBuildVersion(void)::__buildVersion = v0;

  if (!EMFGetDeviceBuildVersion(void)::__buildVersion)
  {
    EMFGetDeviceBuildVersion(void)::__buildVersion = (uint64_t)&stru_1E670BD50;

  }
}

void sub_1B3E045B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B3E046D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B3E04778(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B3E04860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

void sub_1B3E048B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B3E049E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v6;

  objc_sync_exit(v5);
  _Unwind_Resume(a1);
}

void sub_1B3E04ACC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_1B3E04B7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B3E04CC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B3E050C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  objc_sync_exit(v23);
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_1B3E05260(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B3E053A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B3E05428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)EMFEmojiPreferencesService;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B3E055DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void CEM::AdaptationDatabaseController::~AdaptationDatabaseController(CEM::AdaptationDatabaseController *this)
{
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  std::shared_ptr<CEM::AdaptationDatabase>::~shared_ptr[abi:ne180100]((uint64_t)this + 128);
  std::mutex::~mutex((std::mutex *)this + 1);
  std::mutex::~mutex((std::mutex *)this);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::string&,long &>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[3];

  v9 = (_QWORD *)(a1 + 24);
  v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__construct_node_hash<std::string&,long &>(a1, v11, a3, a4, (uint64_t)v27);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<CEM::AdaptationDatabase>>>>::__rehash<true>(a1, v23);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12)
          v25 %= v12;
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  i = (unsigned __int8 *)v27[0];
  ++*v9;
  return i;
}

void sub_1B3E05990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__construct_node_hash<std::string&,long &>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  std::string *v11;

  v9 = a1 + 16;
  v10 = operator new(0x30uLL);
  *(_QWORD *)(a5 + 8) = v9;
  *(_QWORD *)a5 = v10;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  v11 = (std::string *)(v10 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v10[4] = *(_QWORD *)(a3 + 16);
  }
  v10[5] = *a4;
  *(_BYTE *)(a5 + 16) = 1;
}

void sub_1B3E05A4C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void **v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = (void **)__p;
  __p = 0;
  if (v3)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  return v2;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(std::string *this, char **a2)
{
  char *v3;
  char *v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = *a2;
  v4 = v3 - 1;
  while (*++v4)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

void sub_1B3E05C70(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1B3E05CF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B3E05DF8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B3E0624C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, void *a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;

  std::mutex::unlock(a9);
  _Unwind_Resume(a1);
}

void sub_1B3E06438(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B3E064E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B3E06630(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B3E069AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::mutex *v14;
  void *v15;
  void *v16;
  void *v17;

  std::mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void sub_1B3E06FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,char *a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;

  if (a37 < 0)
    operator delete(__p);
  (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  if (a11)
  {
    a12 = a11;
    operator delete(a11);
  }
  a11 = &a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a11);
  std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned short>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned short>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned short>>>::destroy((uint64_t)&a29, a30);

  _Unwind_Resume(a1);
}

void std::basic_string<char16_t>::resize(std::basic_string<char16_t> *this, std::basic_string<char16_t>::size_type __n, std::basic_string<char16_t>::value_type __c)
{
  std::basic_string<char16_t>::size_type size;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    size = this->__r_.__value_.__l.__size_;
    if (size >= __n)
    {
      this->__r_.__value_.__l.__size_ = __n;
      this = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
LABEL_5:
    std::basic_string<char16_t>::append(this, __n - size, __c);
    return;
  }
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (size < __n)
    goto LABEL_5;
  *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_7:
  this->__r_.__value_.__s.__data_[__n] = 0;
}

std::basic_string<char16_t> *__cdecl std::basic_string<char16_t>::append(std::basic_string<char16_t> *this, std::basic_string<char16_t>::size_type __n, std::basic_string<char16_t>::value_type __c)
{
  unint64_t v6;
  std::basic_string<char16_t>::size_type size;
  std::basic_string<char16_t>::size_type v8;
  unint64_t v9;
  std::basic_string<char16_t> *v10;
  std::basic_string<char16_t>::value_type *v11;
  std::basic_string<char16_t>::size_type v12;
  std::basic_string<char16_t>::size_type v13;

  if (__n)
  {
    LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((v6 & 0x80000000) != 0)
    {
      size = this->__r_.__value_.__l.__size_;
      v9 = this->__r_.__value_.__r.__words[2];
      v8 = (v9 & 0x7FFFFFFFFFFFFFFFLL) - 1;
      v6 = HIBYTE(v9);
    }
    else
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v8 = 10;
    }
    if (v8 - size < __n)
    {
      std::basic_string<char16_t>::__grow_by(this, v8, __n - v8 + size, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v10 = this;
    if ((v6 & 0x80) != 0)
      v10 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
    v11 = (std::basic_string<char16_t>::value_type *)((char *)v10 + 2 * size);
    v12 = __n;
    do
    {
      *v11++ = __c;
      --v12;
    }
    while (v12);
    v13 = size + __n;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v13;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v13 & 0x7F;
    v10->__r_.__value_.__s.__data_[v13] = 0;
  }
  return this;
}

void std::basic_string<char16_t>::__grow_by(std::basic_string<char16_t> *this, std::basic_string<char16_t>::size_type __old_cap, std::basic_string<char16_t>::size_type __delta_cap, std::basic_string<char16_t>::size_type __old_sz, std::basic_string<char16_t>::size_type __n_copy, std::basic_string<char16_t>::size_type __n_del, std::basic_string<char16_t>::size_type __n_add)
{
  std::basic_string<char16_t> *v13;
  std::basic_string<char16_t>::size_type v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  std::basic_string<char16_t>::size_type v19;
  uint64_t v20;
  uint64_t v21;

  if (0x7FFFFFFFFFFFFFF7 - __old_cap < __delta_cap)
    std::string::__throw_length_error[abi:ne180100]();
  v13 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    v13 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
  v14 = __delta_cap + __old_cap;
  if (__delta_cap + __old_cap <= 2 * __old_cap)
    v14 = 2 * __old_cap;
  v15 = (v14 & 0xFFFFFFFFFFFFFFFCLL) + 4;
  if ((v14 | 3) != 0xB)
    v15 = v14 | 3;
  if (v14 >= 0xB)
    v16 = v15 + 1;
  else
    v16 = 11;
  if (__old_cap <= 0x3FFFFFFFFFFFFFF2)
    v17 = v16;
  else
    v17 = 0x7FFFFFFFFFFFFFF7;
  v18 = std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>((uint64_t)this, v17);
  v19 = (std::basic_string<char16_t>::size_type)v18;
  v21 = v20;
  if (__n_copy)
    memmove(v18, v13, 2 * __n_copy);
  if (__old_sz != __n_del + __n_copy)
    memmove((void *)(v19 + 2 * __n_copy + 2 * __n_add), (char *)v13 + 2 * __n_copy + 2 * __n_del, 2 * (__old_sz - (__n_del + __n_copy)));
  if (__old_cap != 10)
    operator delete(v13);
  this->__r_.__value_.__r.__words[0] = v19;
  this->__r_.__value_.__r.__words[2] = v21 | 0x8000000000000000;
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t std::vector<std::basic_string<char16_t>>::__emplace_back_slow_path<std::basic_string<char16_t> const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> v15;

  v3 = *(_QWORD *)a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v7 = a1 + 16;
  v8 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 16) - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v15.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  v15.__first_ = v10;
  v15.__begin_ = end;
  v15.__end_ = end;
  v15.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)end, *(const std::basic_string<char16_t>::value_type **)a2, *((_QWORD *)a2 + 1));
    end = v15.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  v15.__end_ = end + 1;
  std::vector<std::basic_string<char16_t>>::__swap_out_circular_buffer((uint64_t *)a1, &v15);
  v13 = *(_QWORD *)(a1 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&v15);
  return v13;
}

void sub_1B3E075B8(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::basic_string<char16_t>::__init_copy_ctor_external(std::basic_string<char16_t> *this, const std::basic_string<char16_t>::value_type *__s, std::basic_string<char16_t>::size_type __sz)
{
  std::basic_string<char16_t> *v5;
  std::basic_string<char16_t>::size_type v6;
  std::basic_string<char16_t> *v7;
  uint64_t v8;

  v5 = this;
  if (__sz > 0xA)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((__sz | 3) != 0xB)
      v6 = __sz | 3;
    v7 = (std::basic_string<char16_t> *)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>((uint64_t)this, v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)v7;
    v5 = v7;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, 2 * __sz + 2);
}

uint64_t std::vector<std::basic_string<char16_t>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::basic_string<char16_t>>,std::reverse_iterator<std::basic_string<char16_t>*>,std::reverse_iterator<std::basic_string<char16_t>*>,std::reverse_iterator<std::basic_string<char16_t>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::basic_string<char16_t>>,std::reverse_iterator<std::basic_string<char16_t>*>,std::reverse_iterator<std::basic_string<char16_t>*>,std::reverse_iterator<std::basic_string<char16_t>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::basic_string<char16_t>>,std::reverse_iterator<std::basic_string<char16_t>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::basic_string<char16_t>>,std::reverse_iterator<std::basic_string<char16_t>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void trie::MarisaTrie<unsigned short,char16_t>::~MarisaTrie(_QWORD *a1)
{
  trie::MarisaTrie<unsigned short,char16_t>::~MarisaTrie(a1);
  JUMPOUT(0x1B5E3061CLL);
}

uint64_t trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::build(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t i;
  void *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v30;
  void *v31;
  void *__p;
  char *v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;

  v35 = 0;
  v36 = 0;
  v37 = 0;
  __p = 0;
  v33 = 0;
  v34 = 0;
  if (a2)
  {
    for (i = 0; i != a2; ++i)
    {
      v10 = *(void **)(a3 + 8 * i);
      v11 = *(_QWORD *)(a4 + 8 * i) >> 1;
      v30 = v11;
      v31 = v10;
      v12 = v36;
      if ((unint64_t)v36 >= v37)
      {
        v13 = (_QWORD *)std::vector<std::basic_string<char16_t>>::__emplace_back_slow_path<char16_t const*,unsigned long>((uint64_t)&v35, &v31, &v30);
      }
      else
      {
        std::basic_string<char16_t>::basic_string[abi:ne180100](v36, v10, v11);
        v13 = v12 + 3;
      }
      v36 = v13;
      if (a5)
      {
        v14 = *(_QWORD *)(a5 + 8 * i);
        v15 = v33;
        if (v33 >= v34)
        {
          v17 = (char *)__p;
          v18 = v33 - (_BYTE *)__p;
          if (v33 - (_BYTE *)__p <= -3)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v19 = v18 >> 1;
          if (v34 - (_BYTE *)__p <= (unint64_t)((v18 >> 1) + 1))
            v20 = v19 + 1;
          else
            v20 = v34 - (_BYTE *)__p;
          if ((unint64_t)(v34 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
            v21 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v21 = v20;
          if (v21)
          {
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>((uint64_t)&v34, v21);
            v17 = (char *)__p;
            v15 = v33;
          }
          else
          {
            v22 = 0;
          }
          v23 = &v22[2 * v19];
          *(_WORD *)v23 = v14;
          v16 = v23 + 2;
          while (v15 != v17)
          {
            v24 = *((_WORD *)v15 - 1);
            v15 -= 2;
            *((_WORD *)v23 - 1) = v24;
            v23 -= 2;
          }
          __p = v23;
          v33 = v16;
          v34 = &v22[2 * v21];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *(_WORD *)v33 = v14;
          v16 = v15 + 2;
        }
        v33 = v16;
      }
    }
  }
  v25 = *a1;
  if (a5)
    v26 = (*(uint64_t (**)(void))(v25 + 64))();
  else
    v26 = (*(uint64_t (**)(void))(v25 + 56))();
  v27 = v26;
  if (__p)
  {
    v33 = (char *)__p;
    operator delete(__p);
  }
  __p = &v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v27;
}

void sub_1B3E07990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16, uint64_t a17)
{
  if (__p)
  {
    a14 = __p;
    operator delete(__p);
  }
  __p = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::lookup(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  uint64_t result;
  unsigned __int16 v6;

  v6 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unsigned __int16 *))(*(_QWORD *)a1 + 80))(a1, a2, a3 >> 1, &v6);
  *a4 = v6;
  return result;
}

_QWORD *trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumeratePrefixStrings(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E66E4948;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, unint64_t, _QWORD *))(*(_QWORD *)a1 + 88))(a1, a2, a3 >> 1, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_1B3E07AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumerateCompletions(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E66E48F0;
  v6[1] = a4;
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t, unint64_t, _QWORD *))(*(_QWORD *)a1 + 96))(a1, a2, a3 >> 1, v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_1B3E07B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t trie::MarisaTrie<unsigned short,char16_t>::serialize@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  int v5;
  const std::string::value_type *v6;
  void **v7;
  std::string::size_type v8;
  uint64_t v9;
  std::string::value_type __s[4];
  void *__p[2];
  int64_t v13;
  _QWORD v14[2];
  uint64_t v15;
  _QWORD v16[10];
  char v17;
  uint64_t v18;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  internal::marisa::Trie::write((internal::marisa::grimoire::trie::LoudsTrie ***)(a1 + 16), (uint64_t)&v15);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v16, __p);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v5 = HIBYTE(v13);
    if (v13 < 0)
      v5 = (int)__p[1];
    *(_DWORD *)__s = v5;
    v6 = *(const std::string::value_type **)(a1 + 24);
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    std::string::append(a2, __s, 4uLL);
    if (v13 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if (v13 >= 0)
      v8 = HIBYTE(v13);
    else
      v8 = (std::string::size_type)__p[1];
    std::string::append(a2, (const std::string::value_type *)v7, v8);
    std::string::append(a2, v6, 2 * v4);
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    a2->__r_.__value_.__r.__words[2] = v13;
  }
  v14[0] = *MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v15 = v9;
  v16[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v17 < 0)
    operator delete((void *)v16[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B5E305D4](&v18);
}

void sub_1B3E07D24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t trie::MarisaTrie<unsigned short,char16_t>::build(uint64_t a1, uint64_t **a2)
{
  return trie::MarisaTrie<unsigned short,char16_t>::buildFromKeys(a1, a2, 0);
}

uint64_t trie::MarisaTrie<unsigned short,char16_t>::build(_QWORD *a1, uint64_t a2, __int16 **a3)
{
  uint64_t v3;
  void *__p;
  void *v6;
  uint64_t v7;

  __p = 0;
  v6 = 0;
  v7 = 0;
  v3 = trie::MarisaTrie<unsigned short,char16_t>::build(a1, a2, a3, (uint64_t **)&__p);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  return v3;
}

void sub_1B3E07DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t trie::MarisaTrie<unsigned short,char16_t>::load(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  char *v7;
  uint64_t v8;

  if (a3 >= 0xF)
  {
    if (*a2 == 0x2065766F6C206557 && *(_QWORD *)((char *)a2 + 7) == 0x2E61736972614D20)
    {
      internal::marisa::Trie::map((internal::marisa::grimoire::trie::LoudsTrie **)(a1 + 16), a2, a3);
      return 1;
    }
  }
  else if (a3 < 4)
  {
    return 0;
  }
  v7 = (char *)a2 + 4;
  v8 = *(unsigned int *)a2;
  internal::marisa::Trie::map((internal::marisa::grimoire::trie::LoudsTrie **)(a1 + 16), (char *)a2 + 4, v8);
  *(_QWORD *)(a1 + 24) = &v7[v8];
  *(_QWORD *)(a1 + 32) = (a3 - v8 - 4) >> 1;
  return 1;
}

uint64_t trie::MarisaTrie<unsigned short,char16_t>::lookup(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4)
{
  uint64_t v6;
  unint64_t v8;

  v8 = 0;
  v6 = internal::marisa::Trie::lookup((internal::marisa::grimoire::vector::BitVector **)(a1 + 16), a2, 2 * a3, &v8);
  if ((_DWORD)v6)
    *a4 = trie::MarisaTrie<unsigned short,char16_t>::getCustomPayload(a1, v8);
  return v6;
}

_QWORD *trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6[0] = &off_1E66E4898;
  v6[1] = a1;
  v6[2] = a4;
  v7 = v6;
  internal::marisa::Trie::common_prefix_search((uint64_t *)(a1 + 16), a2, 2 * a3, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_1B3E07F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *trie::MarisaTrie<unsigned short,char16_t>::enumerateCompletions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7[0] = &off_1E66E4840;
  v7[1] = a1;
  v7[2] = a4;
  v8 = v7;
  internal::marisa::Trie::predictive_search((internal::marisa::grimoire::vector::BitVector **)(a1 + 16), a2, 2 * a3, (uint64_t)v7, (a5 << (a5 > 0)));
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_1B3E08070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

double trie::MarisaTrie<unsigned short,char16_t>::root@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

BOOL trie::MarisaTrie<unsigned short,char16_t>::isValid(uint64_t a1, _QWORD *a2)
{
  return *a2 != 0xFFFFFFFFLL;
}

void trie::MarisaTrie<unsigned short,char16_t>::advance(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  internal::marisa::Trie::advance((internal::marisa::grimoire::vector::BitVector **)(a1 + 16), a3, 2 * a4, a2, a5);
}

uint64_t trie::MarisaTrie<unsigned short,char16_t>::getPayload(uint64_t *a1, uint64_t a2, _WORD *a3)
{
  uint64_t payload;
  unint64_t v8;

  if (!(*(unsigned int (**)(uint64_t *))(*a1 + 112))(a1))
    return 0;
  v8 = 0;
  payload = internal::marisa::Trie::get_payload(a1 + 2, a2, &v8);
  if ((_DWORD)payload)
    *a3 = trie::MarisaTrie<unsigned short,char16_t>::getCustomPayload((uint64_t)a1, v8);
  return payload;
}

_QWORD *trie::MarisaTrie<unsigned short,char16_t>::enumerateEntries(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)(*(uint64_t (**)(unint64_t *))(*a1 + 112))(a1);
  if ((_DWORD)result)
  {
    v10[0] = &off_1E66E4790;
    v10[1] = a1;
    v10[2] = a3;
    v11 = v10;
    internal::marisa::Trie::enumerate_entries(a1 + 2, a2, (uint64_t)v10, a4);
    result = v11;
    if (v11 == v10)
    {
      v9 = 4;
      result = v10;
    }
    else
    {
      if (!v11)
        return result;
      v9 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v9))();
  }
  return result;
}

void sub_1B3E0822C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  if ((_DWORD)result)
  {
    v8[0] = &off_1E66E47E8;
    v8[1] = a3;
    v9 = v8;
    internal::marisa::Trie::enumerate_children(a1 + 2, a2, (uint64_t)v8);
    result = v9;
    if (v9 == v8)
    {
      v7 = 4;
      result = v8;
    }
    else
    {
      if (!v9)
        return result;
      v7 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
  }
  return result;
}

void sub_1B3E08324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *trie::MarisaTrie<unsigned short,char16_t>::~MarisaTrie(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E66E46C0;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  internal::marisa::Trie::~Trie((internal::marisa::Trie *)(a1 + 2));
  return a1;
}

uint64_t std::vector<std::basic_string<char16_t>>::__emplace_back_slow_path<char16_t const*,unsigned long>(uint64_t a1, void **a2, unint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  uint64_t v13;
  std::__split_buffer<std::string> v15;

  v4 = *(_QWORD *)a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  v9 = a1 + 16;
  v10 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 16) - v4) >> 3);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x555555555555555)
    v11 = 0xAAAAAAAAAAAAAAALL;
  else
    v11 = v6;
  v15.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
  if (v11)
    v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v9, v11);
  else
    v12 = 0;
  v15.__first_ = v12;
  v15.__begin_ = v12 + v5;
  v15.__end_ = v15.__begin_;
  v15.__end_cap_.__value_ = &v12[v11];
  std::basic_string<char16_t>::basic_string[abi:ne180100](v15.__begin_->__r_.__value_.__r.__words, *a2, *a3);
  v15.__end_ = v15.__begin_ + 1;
  std::vector<std::basic_string<char16_t>>::__swap_out_circular_buffer((uint64_t *)a1, &v15);
  v13 = *(_QWORD *)(a1 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&v15);
  return v13;
}

void sub_1B3E0849C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::basic_string<char16_t>::basic_string[abi:ne180100](_QWORD *__dst, void *__src, unint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;

  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a3 >= 0xB)
  {
    v7 = (a3 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((a3 | 3) != 0xB)
      v7 = a3 | 3;
    v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>((uint64_t)__dst, v7 + 1);
    __dst[1] = a3;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = a3;
    v6 = __dst;
    if (!a3)
      goto LABEL_9;
  }
  memmove(v6, __src, 2 * a3);
LABEL_9:
  *((_WORD *)v6 + a3) = 0;
  return __dst;
}

void std::__function::__func<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumeratePrefixStrings(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&)::{lambda(unsigned short,std::u16string_view,BOOL &)#1},std::allocator<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumeratePrefixStrings(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&)::{lambda(unsigned short,std::u16string_view,BOOL &)#1}>,void ()(unsigned short,std::u16string_view,BOOL &)>::~__func()
{
  JUMPOUT(0x1B5E3061CLL);
}

_QWORD *std::__function::__func<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumeratePrefixStrings(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&)::{lambda(unsigned short,std::u16string_view,BOOL &)#1},std::allocator<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumeratePrefixStrings(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&)::{lambda(unsigned short,std::u16string_view,BOOL &)#1}>,void ()(unsigned short,std::u16string_view,BOOL &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E66E4948;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumeratePrefixStrings(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&)::{lambda(unsigned short,std::u16string_view,BOOL &)#1},std::allocator<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumeratePrefixStrings(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&)::{lambda(unsigned short,std::u16string_view,BOOL &)#1}>,void ()(unsigned short,std::u16string_view,BOOL &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E66E4948;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumeratePrefixStrings(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&)::{lambda(unsigned short,std::u16string_view,BOOL &)#1},std::allocator<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumeratePrefixStrings(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&)::{lambda(unsigned short,std::u16string_view,BOOL &)#1}>,void ()(unsigned short,std::u16string_view,BOOL &)>::operator()(uint64_t a1, unsigned __int16 *a2, uint64_t *a3, uint64_t a4)
{
  return std::function<void ()(long long,std::string_view,BOOL &)>::operator()(*(_QWORD *)(a1 + 8), *a2, *a3, 2 * a3[1], a4);
}

uint64_t std::__function::__func<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumeratePrefixStrings(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&)::{lambda(unsigned short,std::u16string_view,BOOL &)#1},std::allocator<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumeratePrefixStrings(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&)::{lambda(unsigned short,std::u16string_view,BOOL &)#1}>,void ()(unsigned short,std::u16string_view,BOOL &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumeratePrefixStrings(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&)::{lambda(unsigned short,std::u16string_view,BOOL &)#1},std::allocator<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumeratePrefixStrings(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&)::{lambda(unsigned short,std::u16string_view,BOOL &)#1}>,void ()(unsigned short,std::u16string_view,BOOL &)>::target_type()
{
}

uint64_t std::function<void ()(long long,std::string_view,BOOL &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[2];

  v8[0] = a3;
  v8[1] = a4;
  v7 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v7, v8, a5);
}

void std::__function::__func<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumerateCompletions(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&,int)::{lambda(unsigned short,std::u16string_view,BOOL &)#1},std::allocator<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumerateCompletions(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&,int)::{lambda(unsigned short,std::u16string_view,BOOL &)#1}>,void ()(unsigned short,std::u16string_view,BOOL &)>::~__func()
{
  JUMPOUT(0x1B5E3061CLL);
}

_QWORD *std::__function::__func<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumerateCompletions(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&,int)::{lambda(unsigned short,std::u16string_view,BOOL &)#1},std::allocator<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumerateCompletions(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&,int)::{lambda(unsigned short,std::u16string_view,BOOL &)#1}>,void ()(unsigned short,std::u16string_view,BOOL &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E66E48F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumerateCompletions(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&,int)::{lambda(unsigned short,std::u16string_view,BOOL &)#1},std::allocator<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumerateCompletions(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&,int)::{lambda(unsigned short,std::u16string_view,BOOL &)#1}>,void ()(unsigned short,std::u16string_view,BOOL &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E66E48F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumerateCompletions(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&,int)::{lambda(unsigned short,std::u16string_view,BOOL &)#1},std::allocator<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumerateCompletions(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&,int)::{lambda(unsigned short,std::u16string_view,BOOL &)#1}>,void ()(unsigned short,std::u16string_view,BOOL &)>::operator()(uint64_t a1, unsigned __int16 *a2, uint64_t *a3, uint64_t a4)
{
  return std::function<void ()(long long,std::string_view,BOOL &)>::operator()(*(_QWORD *)(a1 + 8), *a2, *a3, 2 * a3[1], a4);
}

uint64_t std::__function::__func<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumerateCompletions(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&,int)::{lambda(unsigned short,std::u16string_view,BOOL &)#1},std::allocator<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumerateCompletions(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&,int)::{lambda(unsigned short,std::u16string_view,BOOL &)#1}>,void ()(unsigned short,std::u16string_view,BOOL &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumerateCompletions(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&,int)::{lambda(unsigned short,std::u16string_view,BOOL &)#1},std::allocator<trie::Trie<unsigned short,char16_t,internal::marisa::Cursor>::enumerateCompletions(char const*,unsigned long,std::function<void ()(long long,std::string_view,BOOL &)> const&,int)::{lambda(unsigned short,std::u16string_view,BOOL &)#1}>,void ()(unsigned short,std::u16string_view,BOOL &)>::target_type()
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1B3E08830(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1B5E305D4](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B5E305D4](a1 + 128);
  return a1;
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  unint64_t v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (const void *)result;
  v6 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v4;
    if (!v4)
      goto LABEL_9;
  }
  result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1;
  unint64_t v3;

  v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 88) < v3)
      *(_QWORD *)(a1 + 88) = v3;
    return *(_QWORD *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(_QWORD *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

uint64_t trie::MarisaTrie<unsigned short,char16_t>::buildFromKeys(uint64_t a1, uint64_t **a2, _QWORD *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  void *__p;
  char *v22;
  char *v23;

  __p = 0;
  v22 = 0;
  v23 = 0;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    v7 = 0;
    do
    {
      if (*((char *)v5 + 23) < 0)
      {
        v9 = (uint64_t *)*v5;
        v8 = v5[1];
      }
      else
      {
        v8 = *((unsigned __int8 *)v5 + 23);
        v9 = v5;
      }
      v10 = 2 * v8;
      if (v7 >= v23)
      {
        v11 = (v7 - (_BYTE *)__p) >> 4;
        if ((unint64_t)(v11 + 1) >> 60)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v12 = (v23 - (_BYTE *)__p) >> 3;
        if (v12 <= v11 + 1)
          v12 = v11 + 1;
        if ((unint64_t)(v23 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF0)
          v13 = 0xFFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string_view>>((uint64_t)&v23, v13);
        v16 = &v14[16 * v11];
        *(_QWORD *)v16 = v9;
        *((_QWORD *)v16 + 1) = v10;
        v18 = (char *)__p;
        v17 = v22;
        v19 = v16;
        if (v22 != __p)
        {
          do
          {
            *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
            v19 -= 16;
            v17 -= 16;
          }
          while (v17 != v18);
          v17 = (char *)__p;
        }
        v7 = v16 + 16;
        __p = v19;
        v22 = v16 + 16;
        v23 = &v14[16 * v15];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *(_QWORD *)v7 = v9;
        *((_QWORD *)v7 + 1) = v10;
        v7 += 16;
      }
      v22 = v7;
      v5 += 3;
    }
    while (v5 != v6);
  }
  internal::marisa::Trie::build((internal::marisa::grimoire::trie::LoudsTrie **)(a1 + 16), (uint64_t *)&__p, a3, *(_DWORD *)(a1 + 8));
  if (__p)
  {
    v22 = (char *)__p;
    operator delete(__p);
  }
  return 1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string_view>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t trie::MarisaTrie<unsigned short,char16_t>::build(_QWORD *a1, uint64_t a2, __int16 **a3, uint64_t **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int16 *v12;
  uint64_t *v13;
  __int16 v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3) != a3[1] - *a3)
    trie::MarisaTrie<unsigned short,char16_t>::build();
  v8 = trie::MarisaTrie<unsigned short,char16_t>::buildFromKeys((uint64_t)a1, (uint64_t **)a2, a4);
  if ((_DWORD)v8)
  {
    std::vector<unsigned short>::resize((uint64_t)(a1 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    v9 = a1[5];
    v10 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
    if (v10)
    {
      v11 = v10 / 24;
      v12 = *a3;
      v13 = *a4;
      if (v11 <= 1)
        v11 = 1;
      do
      {
        v15 = *v12++;
        v14 = v15;
        v16 = *v13++;
        *(_WORD *)(v9 + 2 * v16) = v14;
        --v11;
      }
      while (v11);
    }
    v17 = (a1[6] - v9) >> 1;
    a1[3] = v9;
    a1[4] = v17;
  }
  return v8;
}

void std::vector<unsigned short>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    std::vector<unsigned short>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<unsigned short>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 1);
    if (v10 < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 1;
    v12 = v5 - v8;
    if (v12 > v10)
      v10 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<char16_t>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v11];
    v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

uint64_t trie::MarisaTrie<unsigned short,char16_t>::getCustomPayload(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  std::logic_error *exception;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    if (v2 <= a2)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::out_of_range::out_of_range[abi:ne180100](exception, "Marisa Payload");
      __cxa_throw(exception, (struct type_info *)off_1E66E3640, MEMORY[0x1E0DE42E0]);
    }
    LOWORD(a2) = *(_WORD *)(*(_QWORD *)(a1 + 24) + 2 * a2);
  }
  return (unsigned __int16)a2;
}

void sub_1B3E08E3C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::~__func()
{
  JUMPOUT(0x1B5E3061CLL);
}

__n128 std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E66E4898;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E66E4898;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::operator()(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1} &,unsigned long,std::string_view,BOOL &>((uint64_t *)(a1 + 8), a2, a3, a4);
}

uint64_t std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1} &,unsigned long,std::string_view,BOOL &>(uint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __int16 CustomPayload;

  v6 = *a3;
  v7 = (unint64_t)a3[1] >> 1;
  CustomPayload = trie::MarisaTrie<unsigned short,char16_t>::getCustomPayload(*a1, *a2);
  return std::function<void ()(unsigned short,std::u16string_view,BOOL &)>::operator()(a1[1], CustomPayload, v6, v7, a4);
}

uint64_t std::function<void ()(unsigned short,std::u16string_view,BOOL &)>::operator()(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  __int16 v7;
  _QWORD v8[2];

  v8[0] = a3;
  v8[1] = a4;
  v7 = a2;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, __int16 *, _QWORD *, uint64_t))(*(_QWORD *)v5 + 48))(v5, &v7, v8, a5);
}

void std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateCompletions(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateCompletions(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::~__func()
{
  JUMPOUT(0x1B5E3061CLL);
}

__n128 std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateCompletions(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateCompletions(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E66E4840;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateCompletions(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateCompletions(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E66E4840;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateCompletions(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateCompletions(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::operator()(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1} &,unsigned long,std::string_view,BOOL &>((uint64_t *)(a1 + 8), a2, a3, a4);
}

uint64_t std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateCompletions(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateCompletions(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateCompletions(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateCompletions(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::target_type()
{
}

void std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateEntries(internal::marisa::Cursor const&,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateEntries(internal::marisa::Cursor const&,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::~__func()
{
  JUMPOUT(0x1B5E3061CLL);
}

__n128 std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateEntries(internal::marisa::Cursor const&,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateEntries(internal::marisa::Cursor const&,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E66E4790;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateEntries(internal::marisa::Cursor const&,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateEntries(internal::marisa::Cursor const&,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E66E4790;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateEntries(internal::marisa::Cursor const&,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateEntries(internal::marisa::Cursor const&,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::operator()(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<trie::MarisaTrie<unsigned short,char16_t>::enumeratePrefixStrings(std::u16string_view,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&)::{lambda(unsigned long,std::string_view,BOOL &)#1} &,unsigned long,std::string_view,BOOL &>((uint64_t *)(a1 + 8), a2, a3, a4);
}

uint64_t std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateEntries(internal::marisa::Cursor const&,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateEntries(internal::marisa::Cursor const&,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateEntries(internal::marisa::Cursor const&,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateEntries(internal::marisa::Cursor const&,std::function<void ()(unsigned short,std::u16string_view,BOOL &)> const&,int)::{lambda(unsigned long,std::string_view,BOOL &)#1}>,void ()(unsigned long,std::string_view,BOOL &)>::target_type()
{
}

void std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(internal::marisa::Cursor const&,std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)> const&)::{lambda(char,internal::marisa::Cursor const&,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(internal::marisa::Cursor const&,std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)> const&)::{lambda(char,internal::marisa::Cursor const&,BOOL &)#1}>,void ()(char,internal::marisa::Cursor const&,BOOL &)>::~__func()
{
  JUMPOUT(0x1B5E3061CLL);
}

_QWORD *std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(internal::marisa::Cursor const&,std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)> const&)::{lambda(char,internal::marisa::Cursor const&,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(internal::marisa::Cursor const&,std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)> const&)::{lambda(char,internal::marisa::Cursor const&,BOOL &)#1}>,void ()(char,internal::marisa::Cursor const&,BOOL &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E66E47E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(internal::marisa::Cursor const&,std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)> const&)::{lambda(char,internal::marisa::Cursor const&,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(internal::marisa::Cursor const&,std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)> const&)::{lambda(char,internal::marisa::Cursor const&,BOOL &)#1}>,void ()(char,internal::marisa::Cursor const&,BOOL &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E66E47E8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(internal::marisa::Cursor const&,std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)> const&)::{lambda(char,internal::marisa::Cursor const&,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(internal::marisa::Cursor const&,std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)> const&)::{lambda(char,internal::marisa::Cursor const&,BOOL &)#1}>,void ()(char,internal::marisa::Cursor const&,BOOL &)>::operator()(uint64_t a1, char *a2)
{
  return std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(internal::marisa::Cursor const&,std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)> const&)::{lambda(char,internal::marisa::Cursor const&,BOOL &)#1} &,char,internal::marisa::Cursor const&,BOOL &>((uint64_t *)(a1 + 8), a2);
}

uint64_t std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(internal::marisa::Cursor const&,std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)> const&)::{lambda(char,internal::marisa::Cursor const&,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(internal::marisa::Cursor const&,std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)> const&)::{lambda(char,internal::marisa::Cursor const&,BOOL &)#1}>,void ()(char,internal::marisa::Cursor const&,BOOL &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(internal::marisa::Cursor const&,std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)> const&)::{lambda(char,internal::marisa::Cursor const&,BOOL &)#1},std::allocator<trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(internal::marisa::Cursor const&,std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)> const&)::{lambda(char,internal::marisa::Cursor const&,BOOL &)#1}>,void ()(char,internal::marisa::Cursor const&,BOOL &)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<trie::MarisaTrie<unsigned short,char16_t>::enumerateChildren(internal::marisa::Cursor const&,std::function<void ()(char16_t,internal::marisa::Cursor const&,BOOL &)> const&)::{lambda(char,internal::marisa::Cursor const&,BOOL &)#1} &,char,internal::marisa::Cursor const&,BOOL &>(uint64_t *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v5;

  v2 = *a1;
  v5 = *a2;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(_QWORD *)v3 + 48))(v3, &v5);
}

void std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned short>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned short>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned short>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned short>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned short>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned short>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned short>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned short>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned short>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned short>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned short>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned short>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::basic_string<char16_t> const&,unsigned short>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD *a4)
{
  uint64_t **v7;
  uint64_t *result;
  uint64_t *v9;
  uint64_t v10;

  v7 = (uint64_t **)std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned short>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned short>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned short>>>::__find_equal<std::basic_string<char16_t>>((uint64_t)a1, &v10, a2);
  result = *v7;
  if (!*v7)
  {
    std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned short>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned short>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned short>>>::__construct_node<std::basic_string<char16_t> const&,unsigned short>((uint64_t)a1, a3, a4, (uint64_t)&v9);
    std::__tree<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>>>>::__insert_node_at(a1, v10, v7, v9);
    return v9;
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned short>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned short>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned short>>>::__find_equal<std::basic_string<char16_t>>(uint64_t a1, _QWORD *a2, unsigned __int16 *a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  unsigned __int16 *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = (_QWORD *)v4;
        v8 = (unsigned __int16 *)(v4 + 32);
        if ((std::operator<=>[abi:ne180100]<char16_t,std::char_traits<char16_t>,std::allocator<char16_t>>(a3, (unsigned __int16 *)(v4 + 32)) & 0x80) == 0)break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((std::operator<=>[abi:ne180100]<char16_t,std::char_traits<char16_t>,std::allocator<char16_t>>(v8, a3) & 0x80) == 0)
        break;
      v5 = v7 + 1;
      v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned short>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned short>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned short>>>::__construct_node<std::basic_string<char16_t> const&,unsigned short>(uint64_t a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::basic_string<char16_t> *v9;

  v7 = a1 + 8;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  v9 = (std::basic_string<char16_t> *)(v8 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(v9, *(const std::basic_string<char16_t>::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v8 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_WORD *)v8 + 28) = *a3;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1B3E09430(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::basic_string<char16_t>,unsigned short>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::operator<=>[abi:ne180100]<char16_t,std::char_traits<char16_t>,std::allocator<char16_t>>(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = *((_QWORD *)a1 + 1);
  v4 = *((unsigned __int8 *)a2 + 23);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v4 >= v2)
    v6 = v2;
  else
    v6 = v4;
  if (v6)
  {
    if (v5 >= 0)
      v7 = a2;
    else
      v7 = *(unsigned __int16 **)a2;
    if (v3 >= 0)
      v8 = a1;
    else
      v8 = *(unsigned __int16 **)a1;
    do
    {
      v9 = *v8;
      v10 = *v7;
      if (v9 < v10)
        return 255;
      if (v10 < v9)
        return 1;
      ++v8;
      ++v7;
    }
    while (--v6);
  }
  if (v2 == v4)
    return 0;
  if (v2 < v4)
    return 255;
  return 1;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::basic_string<char16_t>,unsigned short>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_1B3E09E3C(double a1, double a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, double a7, double a8)
{
  CGRect v13;
  CGRect v14;

  v13.origin.x = a3;
  v13.origin.y = a4;
  v13.size.width = a5;
  v13.size.height = a6;
  vabdd_f64(CGRectGetWidth(v13), a7);
  v14.origin.x = a3;
  v14.origin.y = a4;
  v14.size.width = a5;
  v14.size.height = a6;
  vabdd_f64(CGRectGetHeight(v14), a8);
}

id sub_1B3E09F28()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CachedImageProfile();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CachedImageProfile()
{
  return objc_opt_self();
}

uint64_t initializeBufferWithCopyOfBuffer for ImageProfile(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for ImageProfile(id *a1)
{
  uint64_t v1;

  v1 = (uint64_t)(a1 + 1);

  return __swift_destroy_boxed_opaque_existential_1(v1);
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t initializeWithCopy for ImageProfile(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  id v10;

  v4 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = a1 + 8;
  v6 = a2 + 8;
  v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v7;
  v8 = v7;
  v9 = **(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8);
  v10 = v4;
  v9(v5, v6, v8);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t assignWithCopy for ImageProfile(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ImageProfile(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for ImageProfile(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ImageProfile(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ImageProfile()
{
  return &type metadata for ImageProfile;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_1B3E0A360(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1B3E0A380(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_1B3E0ACF8(a1, &qword_1EF083A38);
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for EmojiProfile(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for EmojiProfile(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
  sub_1B3E0ACF8(a1, &qword_1EF083A40);
}

void type metadata accessor for CGImage(uint64_t a1)
{
  sub_1B3E0ACF8(a1, &qword_1EF083A48);
}

id *sub_1B3E0A450(id *a1)
{
  uint64_t v2;

  v2 = (uint64_t)(a1 + 1);

  __swift_destroy_boxed_opaque_existential_1(v2);
  return a1;
}

uint64_t sub_1B3E0A484(uint64_t a1, uint64_t a2)
{
  return sub_1B3E0A5CC(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1940]);
}

uint64_t sub_1B3E0A490(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_1B3E38044();
  *a2 = 0;
  return result;
}

uint64_t sub_1B3E0A504(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_1B3E38050();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1B3E0A580@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_1B3E3805C();
  v2 = sub_1B3E38038();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1B3E0A5C0(uint64_t a1, uint64_t a2)
{
  return sub_1B3E0A5CC(a1, a2, MEMORY[0x1E0DEA950]);
}

uint64_t sub_1B3E0A5CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1B3E3805C();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1B3E0A608()
{
  sub_1B3E3805C();
  sub_1B3E38074();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B3E0A648()
{
  uint64_t v0;

  sub_1B3E3805C();
  sub_1B3E381F4();
  sub_1B3E38074();
  v0 = sub_1B3E3820C();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1B3E0A6B8(uint64_t a1)
{
  MEMORY[0x1B5E30D78](&unk_1B3E3C824, a1);
  return sub_1B3E38008();
}

uint64_t sub_1B3E0A6F4()
{
  MEMORY[0x1B5E30D78](&unk_1B3E3C824);
  return sub_1B3E37FFC();
}

uint64_t sub_1B3E0A73C(uint64_t a1, uint64_t a2)
{
  sub_1B3E381F4();
  MEMORY[0x1B5E30D78](&unk_1B3E3C824, a2);
  sub_1B3E37FFC();
  return sub_1B3E3820C();
}

uint64_t sub_1B3E0A794@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B3E38038();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1B3E0A7D8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1B3E3805C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B3E0A800()
{
  sub_1B3E0ABE4((unint64_t *)&qword_1EF083AA8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1B3E3C894);
  sub_1B3E0ABE4(&qword_1EF083AB0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1B3E3C73C);
  return sub_1B3E3814C();
}

uint64_t sub_1B3E0A884()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_1B3E3805C();
  v2 = v1;
  if (v0 == sub_1B3E3805C() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_1B3E381C4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1B3E0A90C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1B5E30D78](&unk_1B3E3C824, a3);
  return sub_1B3E37FF0();
}

BOOL sub_1B3E0A958(CGImage *a1, double a2, double a3)
{
  double Width;
  int64_t Height;

  Width = (double)(uint64_t)CGImageGetWidth(a1);
  Height = CGImageGetHeight(a1);
  return (*(_QWORD *)&Width & 0x7FFFFFFFFFFFFFFFLL) != 0
      && fabs((double)Height)
      && round(a2 * a3 / (Width * (double)Height) * 100.0) >= 95.0;
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_1B3E0ACF8(a1, &qword_1EF083A50);
}

void type metadata accessor for CTRun(uint64_t a1)
{
  sub_1B3E0ACF8(a1, &qword_1EF083A58);
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1B3E0AA2C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_1B3E0AA88(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

void type metadata accessor for vImage_CGImageFormat(uint64_t a1)
{
  sub_1B3E0ACF8(a1, &qword_1EF083A60);
}

void type metadata accessor for CTFont(uint64_t a1)
{
  sub_1B3E0ACF8(a1, &qword_1EF083A68);
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_1B3E0ACF8(a1, &qword_1EF083A70);
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B3E0AB2C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1B3E0AB4C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_1B3E0ACF8(a1, &qword_1EF083A78);
}

uint64_t sub_1B3E0AB8C()
{
  return sub_1B3E0ABE4(&qword_1EF083A80, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1B3E3C700);
}

uint64_t sub_1B3E0ABB8()
{
  return sub_1B3E0ABE4(&qword_1EF083A88, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1B3E3C6D4);
}

uint64_t sub_1B3E0ABE4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1B5E30D78](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B3E0AC24()
{
  return sub_1B3E0ABE4((unint64_t *)&qword_1EF083A90, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1B3E3C850);
}

uint64_t sub_1B3E0AC50()
{
  return sub_1B3E0ABE4(&qword_1EF083A98, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1B3E3C7F8);
}

uint64_t sub_1B3E0AC7C()
{
  return sub_1B3E0ABE4(&qword_1EF083AA0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1B3E3C770);
}

void type metadata accessor for CGColorRenderingIntent(uint64_t a1)
{
  sub_1B3E0ACF8(a1, &qword_1EF083AB8);
}

void type metadata accessor for CGBitmapInfo(uint64_t a1)
{
  sub_1B3E0ACF8(a1, &qword_1EF083AC0);
}

void type metadata accessor for CGColorSpace(uint64_t a1)
{
  sub_1B3E0ACF8(a1, &qword_1EF083AC8);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_1B3E0ACF8(a1, &qword_1EF083AD0);
}

void sub_1B3E0ACF8(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

void sub_1B3E0AD48()
{
  qword_1EF084A10 = 0x4044000000000000;
}

void sub_1B3E0AD58()
{
  qword_1EF084A18 = 0x4064000000000000;
}

double sub_1B3E0AD68()
{
  uint64_t v0;
  double result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083AF8);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B3E3C940;
  if (qword_1EF083A08 != -1)
    swift_once();
  *(_QWORD *)(v0 + 32) = qword_1EF084A10;
  *(_OWORD *)(v0 + 40) = xmmword_1B3E3C950;
  if (qword_1EF083A10 != -1)
    swift_once();
  result = *(double *)&qword_1EF084A18;
  *(_QWORD *)(v0 + 56) = qword_1EF084A18;
  qword_1EF084A20 = v0;
  return result;
}

void sub_1B3E0AE24(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, _OWORD *a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>)
{
  uint64_t v8;
  uint64_t v9;
  CTFontRef v18;
  double Size;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  BOOL v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  CGImage *v44;
  CGImage *v45;
  CGImage *v46;
  double v47;
  id v48;
  void *v49;
  id v50;
  void *v51;
  void *v52;
  void *v53;
  id v54;
  void *v55;
  id v56;
  void *v57;
  id v58;
  uint64_t v59;
  double v60;
  double v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  CGImage *v65;
  BOOL v66;
  id v67;
  uint64_t v68;
  double v69;
  double v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  CGImage *v74;
  BOOL v75;
  objc_class *v76;
  id v77;
  id v78;
  _OWORD *v79;
  __int128 v80;
  double Width;
  double Height;
  double v83;
  double v84;
  double v85;
  double v86;
  uint64_t v87;
  BOOL v88;
  CGImage *v89;
  objc_class *v90;
  id v91;
  id v92;
  uint64_t v93;
  double v94;
  double v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _OWORD *v99;
  void *v100;
  objc_super v101;
  objc_super v102;
  id v103[3];
  ValueMetadata *v104;
  _UNKNOWN **v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  BOOL v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  double v117;

  v9 = v8;
  v18 = *(CTFontRef *)v9;
  Size = CTFontGetSize(*(CTFontRef *)v9);
  if ((~*(_QWORD *)&Size & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_40;
  }
  if (Size <= -9.22337204e18)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (Size >= 9.22337204e18)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v20 = *(void **)(v9 + 16);
  v21 = *(void **)(v9 + 24);
  sub_1B3E0C484(a1, a2, 0, 0, 1, v18, v20, v21);
  if (!v22)
  {
    *(_OWORD *)((char *)a5 + 41) = 0u;
    a5[1] = 0u;
    a5[2] = 0u;
    *a5 = 0u;
    return;
  }
  v25 = v24;
  v98 = v23;
  v99 = a5;
  v100 = v22;
  v97 = (uint64_t)Size;
  if ((a4 & 1) == 0)
    goto LABEL_25;
  v26 = *(_QWORD *)(v9 + 8);
  if (!*(_QWORD *)(v26 + 16))
    goto LABEL_25;
  swift_bridgeObjectRetain();
  v27 = sub_1B3E113D4(v98, v25);
  if ((v28 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_25:
    sub_1B3E0C484(a1, a2, 0, 0, 1, v18, v20, v21);
    if (!v52)
    {
      *(_OWORD *)((char *)v99 + 41) = 0u;
      v99[1] = 0u;
      v99[2] = 0u;
      *v99 = 0u;

      swift_bridgeObjectRelease();
      return;
    }
    v53 = v52;
    swift_bridgeObjectRelease();
    if ((a4 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)v99 = v53;
      v58 = v53;
      sub_1B3E0F4F4(v58, 0xCuLL, 30, (uint64_t)&v110);
      *((_QWORD *)&v107 + 1) = &type metadata for ProfileFromCGImage;
      *(_QWORD *)&v108 = &off_1E66E4088;
      v59 = swift_allocObject();
      *(_QWORD *)&v106 = v59;
      v60 = *((double *)&v116 + 1);
      v61 = v117;
      v62 = v115;
      *(_OWORD *)(v59 + 80) = v114;
      *(_OWORD *)(v59 + 96) = v62;
      *(_OWORD *)(v59 + 112) = v116;
      *(double *)(v59 + 128) = v117;
      v63 = v111;
      *(_OWORD *)(v59 + 16) = v110;
      *(_OWORD *)(v59 + 32) = v63;
      v64 = v113;
      *(_OWORD *)(v59 + 48) = v112;
      *(_OWORD *)(v59 + 64) = v64;
      *((_QWORD *)v99 + 1) = v58;
      sub_1B3E0C7D8((uint64_t)&v106, (uint64_t)(v99 + 1));
      v65 = (CGImage *)v58;
      v66 = sub_1B3E0A958(v65, v60, v61);

      *((_BYTE *)v99 + 56) = v66;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v106);

      return;
    }
    v54 = sub_1B3E0C074();
    swift_bridgeObjectRelease();
    v55 = *(void **)(v9 + 32);
    v56 = objc_msgSend(v55, sel_objectForKey_, v54);
    if (v56)
    {
      v57 = v56;

      sub_1B3E0C81C((uint64_t)v57 + OBJC_IVAR____TtC15EmojiFoundation18CachedImageProfile_value, (uint64_t)&v106);
    }
    else
    {
      v67 = v53;
      sub_1B3E0F4F4(v67, 0xCuLL, 30, (uint64_t)&v110);
      v104 = &type metadata for ProfileFromCGImage;
      v105 = &off_1E66E4088;
      v68 = swift_allocObject();
      v103[0] = (id)v68;
      v69 = *((double *)&v116 + 1);
      v70 = v117;
      v71 = v115;
      *(_OWORD *)(v68 + 80) = v114;
      *(_OWORD *)(v68 + 96) = v71;
      *(_OWORD *)(v68 + 112) = v116;
      *(double *)(v68 + 128) = v117;
      v72 = v111;
      *(_OWORD *)(v68 + 16) = v110;
      *(_OWORD *)(v68 + 32) = v72;
      v73 = v113;
      *(_OWORD *)(v68 + 48) = v112;
      *(_OWORD *)(v68 + 64) = v73;
      *(_QWORD *)&v106 = v67;
      sub_1B3E0C7D8((uint64_t)v103, (uint64_t)&v106 + 8);
      v74 = (CGImage *)v67;
      v75 = sub_1B3E0A958(v74, v69, v70);

      v109 = v75;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v103);
      sub_1B3E0C81C((uint64_t)&v106, (uint64_t)v103);
      v76 = (objc_class *)type metadata accessor for CachedImageProfile();
      v77 = objc_allocWithZone(v76);
      sub_1B3E0C81C((uint64_t)v103, (uint64_t)v77 + OBJC_IVAR____TtC15EmojiFoundation18CachedImageProfile_value);
      v102.receiver = v77;
      v102.super_class = v76;
      v78 = objc_msgSendSuper2(&v102, sel_init);
      sub_1B3E0A450(v103);
      objc_msgSend(v55, sel_setObject_forKey_, v78, v54);

      v57 = v100;
    }

    v79 = v99;
    *(_QWORD *)v99 = v53;
    goto LABEL_33;
  }
  v29 = *(_QWORD *)(v26 + 56) + (v27 << 6);
  v31 = *(double *)v29;
  v30 = *(double *)(v29 + 8);
  v33 = *(double *)(v29 + 16);
  v32 = *(double *)(v29 + 24);
  v94 = *(double *)(v29 + 40);
  v95 = *(double *)(v29 + 32);
  v96 = *(_QWORD *)(v29 + 48);
  v93 = *(_QWORD *)(v29 + 56);
  swift_bridgeObjectRelease();
  v34 = (double)v97;
  if ((a3 & 1) != 0)
    v35 = v33;
  else
    v35 = (double)v97;
  if ((a3 & 1) != 0)
    v34 = v32;
  v36 = v34 < v35;
  v37 = a6 / v35;
  v38 = a7 / v34;
  if (v36)
    v38 = v37;
  if (1.0 / a8 < v38)
    v38 = 1.0 / a8;
  sub_1B3E0C858(Size * v38, a8);
  v40 = v39;
  *((_QWORD *)&v107 + 1) = &type metadata for PrecomputedProfile;
  *(_QWORD *)&v108 = &off_1E66E3FB8;
  v41 = swift_allocObject();
  *(_QWORD *)&v106 = v41;
  v42 = v31;
  *(double *)(v41 + 16) = v31;
  *(double *)(v41 + 24) = v30;
  v43 = v30;
  *(double *)(v41 + 32) = v33;
  *(double *)(v41 + 40) = v32;
  *(double *)(v41 + 48) = v95;
  *(double *)(v41 + 56) = v94;
  *(_QWORD *)(v41 + 64) = v96;
  *(_QWORD *)(v41 + 72) = v93;
  *(_QWORD *)&v110 = v100;
  sub_1B3E0C7D8((uint64_t)&v106, (uint64_t)&v110 + 8);
  v44 = v100;
  LOBYTE(v113) = sub_1B3E0A958(v44, v33, v32);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v106);
  sub_1B3E0C484(a1, a2, 0, v40, 0, v18, v20, v21);
  if (!v45)
  {
    sub_1B3E0A450((id *)&v110);
    swift_bridgeObjectRelease();

    *(_OWORD *)((char *)v99 + 41) = 0u;
    v99[1] = 0u;
    v99[2] = 0u;
    *v99 = 0u;
    return;
  }
  v46 = v45;
  v47 = v32;
  swift_bridgeObjectRelease();
  if ((~v40 & 0x7FF0000000000000) == 0)
    goto LABEL_42;
  if (*(double *)&v40 > -9.22337204e18)
  {
    if (*(double *)&v40 < 9.22337204e18)
    {
      v48 = sub_1B3E0C074();
      swift_bridgeObjectRelease();
      v49 = *(void **)(v9 + 32);
      v50 = objc_msgSend(v49, sel_objectForKey_, v48);
      if (v50)
      {
        v51 = v50;
        sub_1B3E0A450((id *)&v110);

        *(_QWORD *)v99 = v46;
        sub_1B3E0C81C((uint64_t)v51 + OBJC_IVAR____TtC15EmojiFoundation18CachedImageProfile_value, (uint64_t)v99 + 8);

        return;
      }
      Width = (double)(uint64_t)CGImageGetWidth(v46);
      Height = (double)(uint64_t)CGImageGetHeight(v46);
      if (Height / v94 == Width / v95)
      {
        sub_1B3E0DDF8(v42, v30, v33, v32, Height / v94);
        v42 = v83;
        v43 = v84;
        v33 = v85;
        v47 = v86;
      }
      else
      {
        Width = v95;
        Height = v94;
      }
      v104 = &type metadata for PrecomputedProfile;
      v105 = &off_1E66E3FB8;
      v87 = swift_allocObject();
      v103[0] = (id)v87;
      *(double *)(v87 + 16) = v42;
      *(double *)(v87 + 24) = v43;
      *(double *)(v87 + 32) = v33;
      *(double *)(v87 + 40) = v47;
      *(double *)(v87 + 48) = Width;
      *(double *)(v87 + 56) = Height;
      *(_QWORD *)(v87 + 64) = v96;
      *(_QWORD *)(v87 + 72) = v93;
      v88 = v113;
      *(_QWORD *)&v106 = v46;
      sub_1B3E0C7D8((uint64_t)v103, (uint64_t)&v106 + 8);
      v109 = v88;
      v89 = v46;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v103);
      sub_1B3E0C81C((uint64_t)&v106, (uint64_t)v103);
      v90 = (objc_class *)type metadata accessor for CachedImageProfile();
      v91 = objc_allocWithZone(v90);
      sub_1B3E0C81C((uint64_t)v103, (uint64_t)v91 + OBJC_IVAR____TtC15EmojiFoundation18CachedImageProfile_value);
      v101.receiver = v91;
      v101.super_class = v90;
      v92 = objc_msgSendSuper2(&v101, sel_init);
      sub_1B3E0A450(v103);
      objc_msgSend(v49, sel_setObject_forKey_, v92, v48);

      sub_1B3E0A450((id *)&v110);
      v79 = v99;
      *(_QWORD *)v99 = v89;
LABEL_33:
      v80 = v107;
      *(_OWORD *)((char *)v79 + 8) = v106;
      *(_OWORD *)((char *)v79 + 24) = v80;
      *(_OWORD *)((char *)v79 + 40) = v108;
      *((_BYTE *)v79 + 56) = v109;
      return;
    }
    goto LABEL_44;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
}

uint64_t sub_1B3E0B610(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int i;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unsigned __int16 v13;
  uint64_t result;
  int v15;
  uint64_t v16;

  v4 = sub_1B3E38080();
  if (v4 == 4)
  {
    v6 = (a2 & 0x2000000000000000) != 0 ? HIBYTE(a2) & 0xF : a1 & 0xFFFFFFFFFFFFLL;
    if (v6)
    {
      if ((a2 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain_n();
        v7 = 0;
        v8 = 0;
        goto LABEL_21;
      }
      if ((a2 & 0x2000000000000000) != 0)
      {
        swift_bridgeObjectRetain_n();
        v7 = 0;
        v8 = 0;
      }
      else
      {
        swift_bridgeObjectRetain_n();
        v7 = 0;
        v8 = 0;
        if ((a1 & 0x1000000000000000) == 0)
LABEL_10:
          sub_1B3E38104();
      }
LABEL_13:
      for (i = sub_1B3E38110(); ; i = sub_1B3E380EC())
      {
        v11 = v10;
        if (i >= 0x10000)
        {
          v16 = v4;
          v13 = sub_1B3E38248();
          result = sub_1B3E38248();
          if (__CFADD__(v8 << 8, (unsigned __int16)result))
          {
            __break(1u);
            return result;
          }
          v15 = ((v8 << 8) + (unsigned __int16)result) << 8;
          v12 = __CFADD__(v15, v13);
          v8 = v15 + v13;
          v4 = v16;
          if (v12)
          {
            __break(1u);
LABEL_27:
            __break(1u);
LABEL_28:
            swift_bridgeObjectRelease_n();
            v5 = v8;
            return v5 | ((unint64_t)(v4 != 4) << 32);
          }
        }
        else
        {
          v12 = __CFADD__(i, v8 << 8);
          v8 = i + (v8 << 8);
          if (v12)
            goto LABEL_27;
        }
        v7 += v11;
        if (v7 >= v6)
          goto LABEL_28;
        if ((a2 & 0x1000000000000000) == 0)
        {
          if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0)
            goto LABEL_10;
          goto LABEL_13;
        }
LABEL_21:
        ;
      }
    }
  }
  v5 = 0;
  return v5 | ((unint64_t)(v4 != 4) << 32);
}

uint64_t sub_1B3E0B7B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v0 = (_QWORD *)sub_1B3E10670(MEMORY[0x1E0DEE9D8]);
  sub_1B3E37FD8();
  swift_allocObject();
  sub_1B3E37FCC();
  sub_1B3E0C2A0();
  sub_1B3E37FC0();
  swift_release();
  v36 = v40 + 64;
  v1 = 1 << *(_BYTE *)(v40 + 32);
  v2 = -1;
  if (v1 < 64)
    v2 = ~(-1 << v1);
  v3 = v2 & *(_QWORD *)(v40 + 64);
  v37 = (unint64_t)(v1 + 63) >> 6;
  swift_bridgeObjectRetain();
  v4 = 0;
  while (1)
  {
    if (v3)
    {
      v6 = __clz(__rbit64(v3));
      v3 &= v3 - 1;
      v7 = v6 | (v4 << 6);
    }
    else
    {
      v8 = v4 + 1;
      if (__OFADD__(v4, 1))
        goto LABEL_36;
      if (v8 >= v37)
      {
LABEL_33:
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v0;
      }
      v9 = *(_QWORD *)(v36 + 8 * v8);
      ++v4;
      if (!v9)
      {
        v4 = v8 + 1;
        if (v8 + 1 >= v37)
          goto LABEL_33;
        v9 = *(_QWORD *)(v36 + 8 * v4);
        if (!v9)
        {
          v4 = v8 + 2;
          if (v8 + 2 >= v37)
            goto LABEL_33;
          v9 = *(_QWORD *)(v36 + 8 * v4);
          if (!v9)
          {
            v10 = v8 + 3;
            if (v10 >= v37)
              goto LABEL_33;
            v9 = *(_QWORD *)(v36 + 8 * v10);
            if (!v9)
            {
              while (1)
              {
                v4 = v10 + 1;
                if (__OFADD__(v10, 1))
                  goto LABEL_37;
                if (v4 >= v37)
                  goto LABEL_33;
                v9 = *(_QWORD *)(v36 + 8 * v4);
                ++v10;
                if (v9)
                  goto LABEL_21;
              }
            }
            v4 = v10;
          }
        }
      }
LABEL_21:
      v3 = (v9 - 1) & v9;
      v7 = __clz(__rbit64(v9)) + (v4 << 6);
    }
    v11 = (uint64_t *)(*(_QWORD *)(v40 + 48) + 16 * v7);
    v13 = *v11;
    v12 = v11[1];
    v14 = (uint64_t *)(*(_QWORD *)(v40 + 56) + 48 * v7);
    v16 = *v14;
    v15 = v14[1];
    v18 = v14[2];
    v17 = v14[3];
    v20 = v14[4];
    v19 = v14[5];
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = sub_1B3E113D4(v13, v12);
    v24 = v0[2];
    v25 = (v22 & 1) == 0;
    v26 = v24 + v25;
    if (__OFADD__(v24, v25))
      break;
    v27 = v22;
    if (v0[3] >= v26)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v22 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_1B3E12088();
        if ((v27 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_1B3E118D4(v26, isUniquelyReferenced_nonNull_native);
      v28 = sub_1B3E113D4(v13, v12);
      if ((v27 & 1) != (v29 & 1))
        goto LABEL_38;
      v23 = v28;
      if ((v27 & 1) != 0)
      {
LABEL_4:
        v5 = (_QWORD *)(v0[7] + (v23 << 6));
        *v5 = v16;
        v5[1] = v15;
        v5[2] = v18;
        v5[3] = v17;
        v5[4] = v38;
        v5[5] = v39;
        v5[6] = v20;
        v5[7] = v19;
        goto LABEL_5;
      }
    }
    v0[(v23 >> 6) + 8] |= 1 << v23;
    v30 = (uint64_t *)(v0[6] + 16 * v23);
    *v30 = v13;
    v30[1] = v12;
    v31 = (_QWORD *)(v0[7] + (v23 << 6));
    *v31 = v16;
    v31[1] = v15;
    v31[2] = v18;
    v31[3] = v17;
    v31[4] = v38;
    v31[5] = v39;
    v31[6] = v20;
    v31[7] = v19;
    v32 = v0[2];
    v33 = __OFADD__(v32, 1);
    v34 = v32 + 1;
    if (v33)
      goto LABEL_35;
    v0[2] = v34;
    swift_bridgeObjectRetain();
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  result = sub_1B3E381DC();
  __break(1u);
  return result;
}

void sub_1B3E0BB38(void *a1@<X0>, const __CTFont **a2@<X8>)
{
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  const __CTFont *v15;
  id v16;
  uint64_t v17;
  CFDataRef v18;
  CFDataRef v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;

  sub_1B3E10670(MEMORY[0x1E0DEE9D8]);
  v4 = objc_allocWithZone(MEMORY[0x1E0C99D38]);
  swift_bridgeObjectRetain();
  v5 = objc_msgSend(v4, sel_init);
  v6 = objc_allocWithZone(MEMORY[0x1E0C99D38]);
  v7 = v5;
  v8 = objc_msgSend(v6, sel_init);
  v9 = objc_allocWithZone(MEMORY[0x1E0C99D38]);
  v10 = v8;
  v11 = objc_msgSend(v9, sel_init);
  v12 = a1;
  v13 = v7;
  v14 = v10;
  v15 = (const __CTFont *)v12;
  v16 = v11;
  v17 = sub_1B3E0B610(1920233059, 0xE400000000000000);
  if ((v17 & 0x100000000) != 0 || (v18 = CTFontCopyTable(v15, v17, 0)) == 0)
  {
    v23 = sub_1B3E10670(MEMORY[0x1E0DEE9D8]);
  }
  else
  {
    v19 = v18;
    v20 = sub_1B3E37FE4();
    v22 = v21;

    v23 = sub_1B3E0B7B0();
    sub_1B3E0C25C(v20, v22);
  }

  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease_n();
  v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, CTFontGetSize(v15));
  objc_msgSend(v13, sel_setObject_forKey_, v15, v24);

  swift_bridgeObjectRelease();
  *a2 = v15;
  a2[1] = (const __CTFont *)v23;
  a2[2] = (const __CTFont *)v13;
  a2[3] = (const __CTFont *)v14;
  a2[4] = (const __CTFont *)v16;
}

uint64_t sub_1B3E0BD2C(const __CTLine *a1)
{
  uint64_t result;

  CTLineGetGlyphRuns(a1);
  type metadata accessor for CTRun(0);
  result = sub_1B3E38098();
  __break(1u);
  return result;
}

id sub_1B3E0C074()
{
  id v0;
  void *v1;
  id v2;

  swift_bridgeObjectRetain();
  sub_1B3E3808C();
  sub_1B3E0C148();
  sub_1B3E380C8();
  sub_1B3E3808C();
  swift_bridgeObjectRelease();
  sub_1B3E3808C();
  v0 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
  v1 = (void *)sub_1B3E38038();
  swift_bridgeObjectRelease();
  v2 = objc_msgSend(v0, sel_initWithString_, v1);

  return v2;
}

unint64_t sub_1B3E0C148()
{
  unint64_t result;

  result = qword_1EF083AD8;
  if (!qword_1EF083AD8)
  {
    result = MEMORY[0x1B5E30D78](MEMORY[0x1E0DEB460], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&qword_1EF083AD8);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1B5E30D60]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_1B3E0C1CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF083AE8;
  if (!qword_1EF083AE8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF083AE0);
    result = MEMORY[0x1B5E30D78](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&qword_1EF083AE8);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1B5E30D6C](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1B3E0C25C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

unint64_t sub_1B3E0C2A0()
{
  unint64_t result;

  result = qword_1EF083AF0;
  if (!qword_1EF083AF0)
  {
    result = MEMORY[0x1B5E30D78](&protocol conformance descriptor for EmojiCenteringData, &type metadata for EmojiCenteringData);
    atomic_store(result, (unint64_t *)&qword_1EF083AF0);
  }
  return result;
}

void sub_1B3E0C2E4(CTLineRef line, size_t a2, char a3)
{
  size_t v4;
  double y;
  double x;
  size_t v8;
  CGFloat width;
  CGFloat height;
  double v11;
  double v12;
  CGColorSpace *DeviceRGB;
  CGContext *v14;
  CGRect BoundsWithOptions;
  CGRect v16;
  CGRect ImageBounds;

  v4 = a2;
  y = 0.0;
  x = 0.0;
  v8 = a2;
  if ((a3 & 1) != 0)
  {
    BoundsWithOptions = CTLineGetBoundsWithOptions(line, 1uLL);
    x = BoundsWithOptions.origin.x;
    y = BoundsWithOptions.origin.y;
    width = BoundsWithOptions.size.width;
    height = BoundsWithOptions.size.height;
    v11 = CGRectGetWidth(BoundsWithOptions);
    if ((~*(_QWORD *)&v11 & 0x7FF0000000000000) != 0)
    {
      if (v11 > -9.22337204e18)
      {
        if (v11 < 9.22337204e18)
        {
          v16.origin.x = x;
          v16.origin.y = y;
          v16.size.width = width;
          v16.size.height = height;
          v12 = CGRectGetHeight(v16);
          if ((~*(_QWORD *)&v12 & 0x7FF0000000000000) != 0)
          {
            if (v12 > -9.22337204e18)
            {
              if (v12 < 9.22337204e18)
              {
                v8 = (uint64_t)v11;
                v4 = (uint64_t)v12;
                goto LABEL_9;
              }
LABEL_19:
              __break(1u);
              return;
            }
LABEL_18:
            __break(1u);
            goto LABEL_19;
          }
LABEL_17:
          __break(1u);
          goto LABEL_18;
        }
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_16;
  }
LABEL_9:
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v14 = CGBitmapContextCreate(0, v8, v4, 8uLL, 0, DeviceRGB, 1u);

  if (v14)
  {
    if ((a3 & 1) == 0)
    {
      ImageBounds = CTLineGetImageBounds(line, v14);
      x = ImageBounds.origin.x;
      y = ImageBounds.origin.y;
    }
    CGContextTranslateCTM(v14, -x, -y);
    CTLineDraw(line, v14);
    CGBitmapContextCreateImage(v14);

  }
}

void sub_1B3E0C484(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, void *a6, void *a7, void *a8)
{
  id v13;
  const __CTFont *v14;
  const __CTFont *v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  const __CTFont *v19;
  id v20;
  void *v21;
  void *v22;
  const __CFAttributedString *v23;
  const __CTLine *v24;
  double Size;
  size_t v26;
  id v27;
  uint64_t v28;

  if ((a5 & 1) != 0)
  {
    v15 = a6;
  }
  else
  {
    v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, *(double *)&a4);
    v14 = (const __CTFont *)objc_msgSend(a7, sel_objectForKey_, v13);
    if (v14)
    {
      v15 = v14;
    }
    else
    {
      v15 = CTFontCreateCopyWithAttributes((CTFontRef)a6, *(CGFloat *)&a4, 0, 0);
      objc_msgSend(a7, sel_setObject_forKey_, v15, v13);

    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083B00);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B3E3C960;
  sub_1B3E3805C();
  v17 = sub_1B3E38038();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 32) = v17;
  type metadata accessor for CTFont(0);
  *(_QWORD *)(inited + 64) = v18;
  *(_QWORD *)(inited + 40) = v15;
  v19 = v15;
  sub_1B3E107B4(inited);
  v20 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
  swift_bridgeObjectRetain();
  v21 = (void *)sub_1B3E38038();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_1B3E0C974();
  v22 = (void *)sub_1B3E38014();
  swift_bridgeObjectRelease();
  v23 = (const __CFAttributedString *)objc_msgSend(v20, sel_initWithString_attributes_, v21, v22);

  v24 = CTLineCreateWithAttributedString(v23);
  sub_1B3E0BD2C(v24);
  Size = CTFontGetSize(v19);
  if ((~*(_QWORD *)&Size & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (Size <= -9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (Size >= 9.22337204e18)
  {
LABEL_17:
    __break(1u);
    return;
  }
  v26 = (uint64_t)Size;
  v27 = sub_1B3E0C074();
  if (objc_msgSend(a8, sel_objectForKey_, v27))
  {
LABEL_13:

    return;
  }
  sub_1B3E0C2E4(v24, v26, a3 & 1);
  if (v28)
  {
    objc_msgSend(a8, sel_setObject_forKey_, v28, v27);
    goto LABEL_13;
  }

  swift_bridgeObjectRelease();
}

uint64_t sub_1B3E0C784()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B3E0C7D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1B3E0C81C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ImageProfile(a2, a1);
  return a2;
}

uint64_t sub_1B3E0C858(double a1, double a2)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = a1 * a2;
  if (qword_1EF083A08 != -1)
    result = swift_once();
  if (v2 > *(double *)&qword_1EF084A10)
  {
    if (qword_1EF083A10 != -1)
      goto LABEL_17;
    while (*(double *)&qword_1EF084A18 > v2)
    {
      if (qword_1EF083A18 != -1)
        result = swift_once();
      v3 = *(_QWORD *)(qword_1EF084A20 + 16);
      if (!v3 || v2 <= *(double *)(qword_1EF084A20 + 32) || v3 == 1)
        break;
      v4 = 5;
      while (1)
      {
        v5 = v4 - 3;
        if (__OFADD__(v4 - 4, 1))
          break;
        if (v2 > *(double *)(qword_1EF084A20 + 8 * v4))
        {
          ++v4;
          if (v5 != v3)
            continue;
        }
        return result;
      }
      __break(1u);
LABEL_17:
      result = swift_once();
    }
  }
  return result;
}

uint64_t sub_1B3E0C964()
{
  return swift_deallocObject();
}

unint64_t sub_1B3E0C974()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF083AA8;
  if (!qword_1EF083AA8)
  {
    type metadata accessor for Key(255);
    result = MEMORY[0x1B5E30D78](&unk_1B3E3C894, v1);
    atomic_store(result, (unint64_t *)&qword_1EF083AA8);
  }
  return result;
}

BOOL sub_1B3E0C9BC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1B3E0C9D4()
{
  sub_1B3E381F4();
  sub_1B3E38200();
  return sub_1B3E3820C();
}

uint64_t sub_1B3E0CA18()
{
  return sub_1B3E38200();
}

uint64_t sub_1B3E0CA40()
{
  sub_1B3E381F4();
  sub_1B3E38200();
  return sub_1B3E3820C();
}

uint64_t sub_1B3E0CA80(double a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t result;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  double v25;
  uint64_t v26;

  v3 = v1[2];
  result = sub_1B3E0D038(v3);
  if (v5 > a1)
  {
    v26 = v1[1];
    v6 = v1[4];
    sub_1B3E0D240((uint64_t)&v26);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = sub_1B3E0CF5C(v3, v6);
    sub_1B3E0D268((uint64_t)&v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v8 = *(_QWORD *)(v7 + 16);
    v9 = 0.0;
    if (!v8)
      goto LABEL_10;
    if (v8 == 1)
    {
      v10 = 0;
    }
    else
    {
      v10 = v8 & 0x7FFFFFFFFFFFFFFELL;
      v11 = (double *)(v7 + 40);
      v12 = v8 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v9 = v9 + *(v11 - 1) + *v11;
        v11 += 2;
        v12 -= 2;
      }
      while (v12);
      if (v8 == v10)
      {
LABEL_10:
        swift_bridgeObjectRelease();
        sub_1B3E0D240((uint64_t)&v26);
        swift_bridgeObjectRetain();
        v16 = swift_bridgeObjectRetain();
        v17 = sub_1B3E0CF5C(v16, v6);
        sub_1B3E0D268((uint64_t)&v26);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v18 = *(_QWORD *)(v17 + 16);
        if (v18)
        {
          if (v18 == 1)
          {
            v19 = 0;
            v20 = 0.0;
          }
          else
          {
            v19 = v18 & 0x7FFFFFFFFFFFFFFELL;
            v21 = (double *)(v17 + 40);
            v20 = 0.0;
            v22 = v18 & 0x7FFFFFFFFFFFFFFELL;
            do
            {
              v20 = v20 + *(v21 - 1) + *v21;
              v21 += 2;
              v22 -= 2;
            }
            while (v22);
            if (v18 == v19)
              return swift_bridgeObjectRelease();
          }
          v23 = v18 - v19;
          v24 = (double *)(v17 + 8 * v19 + 32);
          do
          {
            v25 = *v24++;
            v20 = v20 + v25;
            --v23;
          }
          while (v23);
        }
        return swift_bridgeObjectRelease();
      }
    }
    v13 = v8 - v10;
    v14 = (double *)(v7 + 8 * v10 + 32);
    do
    {
      v15 = *v14++;
      v9 = v9 + v15;
      --v13;
    }
    while (v13);
    goto LABEL_10;
  }
  return result;
}

char *sub_1B3E0CC8C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083B10);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1B3E0CD84(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083B08);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1B3E0CE7C(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  v2 = *(_QWORD *)(result + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = result;
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)result && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_5;
    goto LABEL_13;
  }
  if (v4 <= v5)
    v11 = v4 + v2;
  else
    v11 = v4;
  result = (uint64_t)sub_1B3E0CD84((char *)result, v11, 1, (char *)v3);
  v3 = result;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_13:
    if (!v2)
      goto LABEL_14;
    goto LABEL_16;
  }
LABEL_5:
  v7 = *(_QWORD *)(v3 + 16);
  if ((*(_QWORD *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  result = (uint64_t)memcpy((void *)(v3 + 8 * v7 + 32), (const void *)(v6 + 32), 8 * v2);
  if (!v2)
  {
LABEL_14:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v8 = *(_QWORD *)(v3 + 16);
  v9 = __OFADD__(v8, v2);
  v10 = v8 + v2;
  if (!v9)
  {
    *(_QWORD *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_1B3E0CF5C(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    sub_1B3E12420(0, v3, 0);
    result = v11;
    v6 = (uint64_t *)(a1 + 32);
    do
    {
      v8 = *v6++;
      v7 = v8;
      v12 = result;
      v10 = *(_QWORD *)(result + 16);
      v9 = *(_QWORD *)(result + 24);
      if (v10 >= v9 >> 1)
      {
        sub_1B3E12420((char *)(v9 > 1), v10 + 1, 1);
        result = v12;
      }
      *(_QWORD *)(result + 16) = v10 + 1;
      *(double *)(result + 8 * v10 + 32) = (double)v7 / (double)a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_1B3E0D038(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  double *v17;
  unint64_t v18;
  double v19;
  double v20;
  double v21;
  double *v22;
  double v23;
  double v24;
  uint64_t v26;

  swift_bridgeObjectRetain();
  v1 = swift_bridgeObjectRetain();
  sub_1B3E0CE7C(v1);
  v2 = a1;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v26 = MEMORY[0x1E0DEE9D8];
    sub_1B3E12420(0, v3, 0);
    v4 = 0;
    v5 = v26;
    v6 = *(_QWORD *)(v26 + 16);
    do
    {
      v7 = *(_QWORD *)(v2 + 8 * v4 + 32);
      v8 = *(_QWORD *)(v26 + 24);
      if (v6 >= v8 >> 1)
        sub_1B3E12420((char *)(v8 > 1), v6 + 1, 1);
      ++v4;
      *(_QWORD *)(v26 + 16) = v6 + 1;
      *(double *)(v26 + 8 * v6++ + 32) = (double)v7;
    }
    while (v3 != v4);
    result = swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v5 = MEMORY[0x1E0DEE9D8];
  }
  v10 = *(_QWORD *)(v5 + 16);
  if (v10 >= 2)
  {
    v11 = 0;
    v12 = v10 + 3;
    v13 = 0.0;
    do
    {
      if (v12 - 4 >= v10)
      {
        __break(1u);
        return result;
      }
      v14 = v5 + 8 * v11++;
      v13 = v13 + vabdd_f64(*(double *)(v14 + 32), *(double *)(v5 + 8 * v12--));
    }
    while (v10 >> 1 != v11);
    v15 = *(double *)(v5 + 32);
    v16 = v10 - 1;
    v17 = (double *)(v5 + 40);
    v18 = v10 - 1;
    v19 = v15;
    do
    {
      v20 = *v17++;
      v21 = v20;
      if (v19 < v20)
        v19 = v21;
      --v18;
    }
    while (v18);
    v22 = (double *)(v5 + 40);
    do
    {
      v23 = *v22++;
      v24 = v23;
      if (v23 < v15)
        v15 = v24;
      --v16;
    }
    while (v16);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B3E0D240(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B3E0D268(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for SideProfile()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SideProfile(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SideProfile(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for SideProfile(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SideProfile(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SideProfile(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SideProfile()
{
  return &type metadata for SideProfile;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SideProfile.Side(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SideProfile.Side(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B3E0D580 + 4 * byte_1B3E3C975[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B3E0D5B4 + 4 * byte_1B3E3C970[v4]))();
}

uint64_t sub_1B3E0D5B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B3E0D5BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B3E0D5C4);
  return result;
}

uint64_t sub_1B3E0D5D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B3E0D5D8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B3E0D5DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B3E0D5E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B3E0D5F0(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1B3E0D5FC(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SideProfile.Side()
{
  return &type metadata for SideProfile.Side;
}

unint64_t sub_1B3E0D61C()
{
  unint64_t result;

  result = qword_1EF083B18;
  if (!qword_1EF083B18)
  {
    result = MEMORY[0x1B5E30D78](&unk_1B3E3C9DC, &type metadata for SideProfile.Side);
    atomic_store(result, (unint64_t *)&qword_1EF083B18);
  }
  return result;
}

void sub_1B3E0D660(double a1, double a2)
{
  CGImageSource *v2;
  CGImageSource *v3;
  int64_t Count;
  int64_t v7;
  size_t v8;
  void *v9;
  void *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  CFDictionaryRef v15;
  CFDictionaryRef v16;
  uint64_t v17;
  id v18;
  unint64_t v19;
  char v20;
  double v21;
  id v22;
  unint64_t v23;
  char v24;
  double v25;
  size_t PrimaryImageIndex;
  CGImageSource *v27;
  char v28;
  uint64_t v29;
  size_t v30;
  char v31;
  size_t v32;
  double v33;
  __int128 v34;
  __int128 v35;

  v3 = v2;
  Count = CGImageSourceGetCount(v2);
  if (Count < 2)
    goto LABEL_44;
  v7 = Count;
  v30 = 0;
  v32 = 0;
  v8 = 0;
  v9 = (void *)*MEMORY[0x1E0CBD048];
  v10 = (void *)*MEMORY[0x1E0CBD040];
  v11 = 0.0;
  v12 = 0.0;
  v28 = 1;
  v29 = 0x100000001;
  v31 = 1;
  v13 = 0.0;
  v14 = 0.0;
  do
  {
    if (v7 == v8)
    {
      __break(1u);
      return;
    }
    v15 = CGImageSourceCopyPropertiesAtIndex(v3, v8, 0);
    if (!v15)
      goto LABEL_38;
    v16 = v15;
    *(_QWORD *)&v34 = 0;
    type metadata accessor for CFString(0);
    sub_1B3E0D988();
    sub_1B3E38020();

    v17 = v34;
    if (!(_QWORD)v34)
      goto LABEL_38;
    if (!*(_QWORD *)(v34 + 16))
    {
      v34 = 0u;
      v35 = 0u;
LABEL_16:
      swift_bridgeObjectRelease();
LABEL_17:
      sub_1B3E0D9D0((uint64_t)&v34);
      goto LABEL_38;
    }
    v18 = v9;
    v19 = sub_1B3E114B8((uint64_t)v18);
    if ((v20 & 1) != 0)
    {
      sub_1B3E0DA10(*(_QWORD *)(v17 + 56) + 32 * v19, (uint64_t)&v34);
    }
    else
    {
      v34 = 0u;
      v35 = 0u;
    }

    if (!*((_QWORD *)&v35 + 1))
      goto LABEL_16;
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_38;
    }
    v21 = v33;
    if (*(_QWORD *)(v17 + 16))
    {
      v22 = v10;
      v23 = sub_1B3E114B8((uint64_t)v22);
      if ((v24 & 1) != 0)
      {
        sub_1B3E0DA10(*(_QWORD *)(v17 + 56) + 32 * v23, (uint64_t)&v34);
      }
      else
      {
        v34 = 0u;
        v35 = 0u;
      }

    }
    else
    {
      v34 = 0u;
      v35 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((_QWORD *)&v35 + 1))
      goto LABEL_17;
    if ((swift_dynamicCast() & 1) != 0)
    {
      v25 = v33;
      if (v33 == a1 && v33 == a2)
      {
        v27 = v3;
        PrimaryImageIndex = v8;
        goto LABEL_46;
      }
      if (v33 <= a1 || v33 <= a2)
      {
        if ((v29 & 1) != 0 || v11 < v33 && v12 < v33)
        {
          v29 = 0;
          v30 = v8;
          v11 = v33;
          v12 = v33;
        }
        else
        {
          LOBYTE(v29) = 0;
        }
      }
      else
      {
        if ((v28 & 1) != 0 || v33 - a1 < v13 - a1 || v33 - a2 < v14 - a2)
        {
          v31 = 0;
          v28 = 0;
          v32 = v8;
          goto LABEL_39;
        }
        v28 = 0;
      }
    }
LABEL_38:
    v21 = v13;
    v25 = v14;
LABEL_39:
    ++v8;
    v13 = v21;
    v14 = v25;
  }
  while (v7 != v8);
  if ((v31 & 1) != 0)
    PrimaryImageIndex = v30;
  else
    PrimaryImageIndex = v32;
  if ((v31 & 1 & BYTE4(v29)) == 1)
LABEL_44:
    PrimaryImageIndex = CGImageSourceGetPrimaryImageIndex(v3);
  v27 = v3;
LABEL_46:
  CGImageSourceCreateImageAtIndex(v27, PrimaryImageIndex, 0);
}

unint64_t sub_1B3E0D988()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF083A90;
  if (!qword_1EF083A90)
  {
    type metadata accessor for CFString(255);
    result = MEMORY[0x1B5E30D78](&unk_1B3E3C850, v1);
    atomic_store(result, (unint64_t *)&qword_1EF083A90);
  }
  return result;
}

uint64_t sub_1B3E0D9D0(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083B20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B3E0DA10(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

double centeredImageForEmoji(_:frameSize:contentsScale:transformOut:isLowerLeftOrigin:)(uint64_t a1, uint64_t a2, _OWORD *a3, char a4, double a5, double a6, double a7)
{
  double result;
  __int128 v9;
  _BYTE v10[56];
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v15[2];
  char v16;

  memset(v15, 0, sizeof(v15));
  v16 = 1;
  sub_1B3E13CCC(a1, a2, (uint64_t)v15, 1, a4, 1, (uint64_t)v10, a5, a6, a7);
  sub_1B3E0DD4C((uint64_t)v10, (uint64_t)&v11);
  if (v11)
  {
    v9 = v13;
    *a3 = v12;
    a3[1] = v9;
    result = *(double *)&v14;
    a3[2] = v14;
  }
  return result;
}

void *centeredImageForImageSource(_:frameSize:contentsScale:transformOut:isLowerLeftOrigin:)(double a1, double a2, double a3, uint64_t a4, _OWORD *a5, char a6)
{
  void *v11;
  void *v12;
  __int128 v13;
  _OWORD v15[3];
  _OWORD v16[2];
  char v17;

  memset(v16, 0, sizeof(v16));
  v17 = 1;
  sub_1B3E0D660(a1 * a3, a1 * a3);
  v12 = v11;
  if (v11)
  {
    sub_1B3E13EBC(v11, (uint64_t)v16, 1, a6 & 1, v15, a1, a2, a3);
    v13 = v15[1];
    *a5 = v15[0];
    a5[1] = v13;
    a5[2] = v15[2];
  }
  return v12;
}

double getTransformForCentering(_:frameSize:contentsScale:isLowerLeftOrigin:)@<D0>(void *a1@<X0>, char a2@<W1>, _OWORD *a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  __int128 v7;
  double result;
  _OWORD v9[2];
  __int128 v10;
  _OWORD v11[2];
  char v12;

  memset(v11, 0, sizeof(v11));
  v12 = 1;
  sub_1B3E13EBC(a1, (uint64_t)v11, 1, a2, v9, a4, a5, a6);
  v7 = v9[1];
  *a3 = v9[0];
  a3[1] = v7;
  result = *(double *)&v10;
  a3[2] = v10;
  return result;
}

double centeredImageForEmoji(_:in:frameSize:contentsScale:transformOut:isLowerLeftOrigin:)(uint64_t a1, uint64_t a2, _OWORD *a3, char a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  double result;
  __int128 v13;
  _BYTE v14[56];
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD v19[4];
  char v20;

  *(double *)v19 = a5;
  *(double *)&v19[1] = a6;
  *(double *)&v19[2] = a7;
  *(double *)&v19[3] = a8;
  v20 = 0;
  sub_1B3E13CCC(a1, a2, (uint64_t)v19, 1, a4, 1, (uint64_t)v14, a9, a10, a11);
  sub_1B3E0DD4C((uint64_t)v14, (uint64_t)&v15);
  if (v15)
  {
    v13 = v17;
    *a3 = v16;
    a3[1] = v13;
    result = *(double *)&v18;
    a3[2] = v18;
  }
  return result;
}

void *centeredImageForImageSource(_:in:frameSize:contentsScale:transformOut:isLowerLeftOrigin:)(double a1, double a2, double a3, double a4, double a5, double a6, double a7, uint64_t a8, _OWORD *a9, char a10)
{
  void *v15;
  void *v16;
  __int128 v17;
  _OWORD v19[3];
  _QWORD v20[4];
  char v21;

  *(double *)v20 = a1;
  *(double *)&v20[1] = a2;
  *(double *)&v20[2] = a3;
  *(double *)&v20[3] = a4;
  v21 = 0;
  sub_1B3E0D660(a5 * a7, a5 * a7);
  v16 = v15;
  if (v15)
  {
    sub_1B3E13EBC(v15, (uint64_t)v20, 1, a10 & 1, v19, a5, a6, a7);
    v17 = v19[1];
    *a9 = v19[0];
    a9[1] = v17;
    a9[2] = v19[2];
  }
  return v16;
}

double getTransformForCentering(_:in:frameSize:contentsScale:isLowerLeftOrigin:)@<D0>(void *a1@<X0>, char a2@<W1>, _OWORD *a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>, double a8@<D4>, double a9@<D5>, double a10@<D6>)
{
  __int128 v11;
  double result;
  _OWORD v13[2];
  __int128 v14;
  _QWORD v15[4];
  char v16;

  *(double *)v15 = a4;
  *(double *)&v15[1] = a5;
  *(double *)&v15[2] = a6;
  *(double *)&v15[3] = a7;
  v16 = 0;
  sub_1B3E13EBC(a1, (uint64_t)v15, 1, a2, v13, a8, a9, a10);
  v11 = v13[1];
  *a3 = v13[0];
  a3[1] = v11;
  result = *(double *)&v14;
  a3[2] = v14;
  return result;
}

uint64_t sub_1B3E0DD4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083B28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double sub_1B3E0DD94()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

double sub_1B3E0DD9C()
{
  uint64_t v0;

  return *(double *)v0;
}

double sub_1B3E0DDA8()
{
  CGRect *v0;
  double x;

  x = v0->origin.x;
  CGRectGetHeight(*v0);
  return x;
}

void sub_1B3E0DDF8(double a1, double a2, double a3, double a4, double a5)
{
  double v5;
  double v6;
  double v7;
  double v8;

  v5 = round(a1 * a5);
  if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v5 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v5 >= 9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = round(a2 * a5);
  if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) == 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (v6 <= -9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v6 >= 9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v7 = round(a3 * a5);
  if ((~*(_QWORD *)&v7 & 0x7FF0000000000000) == 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = round(a4 * a5);
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v8 <= -9.22337204e18)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v8 >= 9.22337204e18)
LABEL_25:
    __break(1u);
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for PrecomputedProfile(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PrecomputedProfile(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PrecomputedProfile()
{
  return &type metadata for PrecomputedProfile;
}

uint64_t sub_1B3E0DFB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083B30);
  result = sub_1B3E37F30();
  if (result < 0)
  {
LABEL_29:
    __break(1u);
    return result;
  }
  v12 = result;
  if (result)
  {
    v13 = 0;
    v14 = a5;
    v26 = result;
    while (v13 != v12)
    {
      result = sub_1B3E37F24();
      if (result < 0)
        goto LABEL_27;
      v15 = result;
      if (result)
      {
        v16 = a4 * v13;
        if ((unsigned __int128)(a4 * (__int128)v13) >> 64 != (a4 * v13) >> 63)
          goto LABEL_28;
        v17 = 0;
        while (1)
        {
          result = sub_1B3E37F54();
          v18 = result * v17;
          if ((unsigned __int128)(result * (__int128)v17) >> 64 != (result * v17) >> 63)
            break;
          v19 = __OFADD__(v16, v18);
          v20 = v16 + v18;
          if (v19)
            goto LABEL_25;
          if (*(unsigned __int8 *)(a1 + v20) > v14)
          {
            v21 = *a6;
            if (*a6 >= v17)
              v21 = v17;
            *a6 = v21;
            v22 = *a7;
            if (*a7 <= v17)
              v22 = v17;
            *a7 = v22;
            v23 = *a8;
            if (*a8 >= v13)
              v23 = v13;
            *a8 = v23;
            v24 = *a9;
            if (*a9 <= v13)
              v24 = v13;
            *a9 = v24;
          }
          if (v15 == ++v17)
            goto LABEL_4;
        }
        __break(1u);
LABEL_25:
        __break(1u);
        break;
      }
LABEL_4:
      ++v13;
      v12 = v26;
      if (v13 == v26)
        return result;
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  return result;
}

uint64_t sub_1B3E0E134()
{
  uint64_t v0;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083B30);
  v0 = sub_1B3E37F78();
  result = sub_1B3E37F48();
  if ((unsigned __int128)(v0 * (__int128)result) >> 64 == (v0 * result) >> 63)
  {
    MEMORY[0x1E0C80A78]();
    return sub_1B3E37F3C();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1B3E0E23C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6, uint64_t *a7, uint64_t *a8, unint64_t a9, uint64_t *a10, uint64_t *a11)
{
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;

  v12 = result;
  v13 = a6;
  v45 = *(uint64_t **)(a3 + 16);
  if (v45)
  {
    v14 = 0;
    v46 = (uint64_t *)(a3 + 32);
    do
    {
      v15 = v46[v14];
      __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083B30);
      v16 = sub_1B3E37F24();
      v17 = a5 * v15;
      v18 = (unsigned __int128)(a5 * (__int128)v15) >> 64;
      if (v16 >= 1)
      {
        if (v18 != v17 >> 63)
          goto LABEL_83;
        v11 = v16;
        v19 = 0;
        while (1)
        {
          v20 = sub_1B3E37F54();
          v21 = v20 * v19;
          if ((unsigned __int128)(v20 * (__int128)v19) >> 64 != (v20 * v19) >> 63)
            goto LABEL_69;
          v22 = __OFADD__(v17, v21);
          v23 = v17 + v21;
          if (v22)
            goto LABEL_70;
          if (*(unsigned __int8 *)(v12 + v23) > v13)
            break;
          if (v11 == ++v19)
            goto LABEL_16;
        }
        v11 = *a7;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *a7 = v11;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v11 = (uint64_t)sub_1B3E0F058(v11);
        if ((unint64_t)v14 >= *(_QWORD *)(v11 + 16))
          goto LABEL_84;
        *(_QWORD *)(v11 + 8 * v14 + 32) = v19;
        *a7 = v11;
      }
LABEL_16:
      v50 = v14;
      result = sub_1B3E37F24();
      v14 = result - 1;
      if (__OFSUB__(result, 1))
        goto LABEL_77;
      v11 = 0;
      v18 = v18 != v17 >> 63;
      do
      {
        v25 = v14;
        if (v14 <= 0)
        {
          if ((v14 != 0) | v11 & 1)
            goto LABEL_3;
          v14 = 0;
          v11 = 1;
          if ((v18 & 1) != 0)
          {
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
            while (1)
            {
              __break(1u);
LABEL_72:
              __break(1u);
LABEL_73:
              __break(1u);
LABEL_74:
              __break(1u);
LABEL_75:
              __break(1u);
LABEL_76:
              __break(1u);
LABEL_77:
              __break(1u);
LABEL_78:
              __break(1u);
LABEL_79:
              __break(1u);
LABEL_80:
              __break(1u);
LABEL_81:
              __break(1u);
LABEL_82:
              __break(1u);
LABEL_83:
              __break(1u);
LABEL_84:
              __break(1u);
LABEL_85:
              __break(1u);
LABEL_86:
              __break(1u);
LABEL_87:
              __break(1u);
LABEL_88:
              __break(1u);
LABEL_89:
              v11 = (uint64_t)sub_1B3E0F058(v11);
LABEL_34:
              *v46 = v11;
              v31 = 0;
              v49 = v18 + 32;
              v48 = v14;
              while (1)
              {
                if (v31 == v14)
                  goto LABEL_78;
                v51 = v31;
                v32 = *(_QWORD *)(v49 + 8 * v31);
                v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083B30);
                v33 = sub_1B3E37F30();
                if (v33 >= 1)
                  break;
LABEL_50:
                result = sub_1B3E37F30();
                if (__OFSUB__(result, 1))
                  goto LABEL_79;
                if (result - 1 >= 1)
                {
                  v39 = result;
                  do
                  {
                    --v39;
                    v11 = a5 * v39;
                    if ((unsigned __int128)(a5 * (__int128)(uint64_t)v39) >> 64 != (uint64_t)(a5 * v39) >> 63)
                      goto LABEL_74;
                    result = sub_1B3E37F54();
                    v40 = result * v32;
                    if ((unsigned __int128)(result * (__int128)v32) >> 64 != (result * v32) >> 63)
                      goto LABEL_75;
                    v22 = __OFADD__(v11, v40);
                    v41 = v11 + v40;
                    if (v22)
                      goto LABEL_76;
                    if (*(unsigned __int8 *)(v12 + v41) > v13)
                    {
                      v42 = sub_1B3E37F30();
                      v43 = v42 - v39;
                      if (__OFSUB__(v42, v39))
                        goto LABEL_86;
                      v18 = v43 - 1;
                      if (!__OFSUB__(v43, 1))
                      {
                        v14 = (uint64_t)v46;
                        v11 = *v46;
                        result = swift_isUniquelyReferenced_nonNull_native();
                        *v46 = v11;
                        if ((result & 1) == 0)
                        {
                          result = (uint64_t)sub_1B3E0F058(v11);
                          v11 = result;
                        }
                        if (v51 < *(_QWORD *)(v11 + 16))
                        {
                          *(_QWORD *)(v11 + 8 * v51 + 32) = v18;
                          *v46 = v11;
                          break;
                        }
                        goto LABEL_88;
                      }
                      goto LABEL_87;
                    }
                  }
                  while (v39 > 1);
                }
                v31 = v51 + 1;
                v14 = v48;
                if (v51 + 1 == v48)
                  return result;
              }
              v11 = v33;
              v34 = 0;
              while (1)
              {
                v18 = a5 * v34;
                if ((unsigned __int128)(a5 * (__int128)v34) >> 64 != (a5 * v34) >> 63)
                  break;
                v35 = sub_1B3E37F54();
                v36 = v35 * v32;
                if ((unsigned __int128)(v35 * (__int128)v32) >> 64 != (v35 * v32) >> 63)
                  goto LABEL_72;
                v22 = __OFADD__(v18, v36);
                v37 = v18 + v36;
                if (v22)
                  goto LABEL_73;
                if (*(unsigned __int8 *)(v12 + v37) > v13)
                {
                  v18 = (unint64_t)v45;
                  v11 = *v45;
                  v38 = swift_isUniquelyReferenced_nonNull_native();
                  *v45 = v11;
                  if ((v38 & 1) == 0)
                    v11 = (uint64_t)sub_1B3E0F058(v11);
                  if (v51 < *(_QWORD *)(v11 + 16))
                  {
                    *(_QWORD *)(v11 + 8 * v51 + 32) = v34;
                    *v45 = v11;
                    goto LABEL_50;
                  }
                  goto LABEL_85;
                }
                if (v11 == ++v34)
                  goto LABEL_50;
              }
            }
          }
        }
        else
        {
          --v14;
          if ((v18 & 1) != 0)
            goto LABEL_66;
        }
        result = sub_1B3E37F54();
        v26 = result * v25;
        if ((unsigned __int128)(result * (__int128)v25) >> 64 != (result * v25) >> 63)
          goto LABEL_67;
        v22 = __OFADD__(v17, v26);
        v27 = v17 + v26;
        if (v22)
          goto LABEL_68;
      }
      while (*(unsigned __int8 *)(v12 + v27) <= v13);
      v28 = sub_1B3E37F24();
      v29 = v28 - v25;
      if (__OFSUB__(v28, v25))
        goto LABEL_80;
      v18 = v29 - 1;
      if (__OFSUB__(v29, 1))
        goto LABEL_81;
      v11 = *a8;
      result = swift_isUniquelyReferenced_nonNull_native();
      *a8 = v11;
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1B3E0F058(v11);
        v11 = result;
      }
      if (v50 >= *(_QWORD *)(v11 + 16))
        goto LABEL_82;
      *(_QWORD *)(v11 + 8 * v50 + 32) = v18;
      *a8 = v11;
LABEL_3:
      v14 = v50 + 1;
    }
    while ((uint64_t *)(v50 + 1) != v45);
  }
  v18 = a9;
  v14 = *(_QWORD *)(a9 + 16);
  if (v14)
  {
    v45 = a10;
    v11 = *a11;
    v30 = swift_isUniquelyReferenced_nonNull_native();
    v46 = a11;
    *a11 = v11;
    if ((v30 & 1) != 0)
      goto LABEL_34;
    goto LABEL_89;
  }
  return result;
}

double sub_1B3E0E70C()
{
  double v0;
  double v1;

  sub_1B3E0CA80(0.18);
  v1 = v0;
  sub_1B3E0CA80(0.18);
  return v1;
}

double sub_1B3E0E784()
{
  uint64_t v0;

  return *(double *)(v0 + 88);
}

double sub_1B3E0E790()
{
  uint64_t v0;
  double v1;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGRect v6;

  v1 = *(double *)(v0 + 88);
  v2 = *(double *)(v0 + 96);
  v3 = *(double *)(v0 + 104);
  v4 = *(double *)(v0 + 112);
  CGImageGetHeight(*(CGImageRef *)v0);
  v6.origin.x = v1;
  v6.origin.y = v2;
  v6.size.width = v3;
  v6.size.height = v4;
  CGRectGetHeight(v6);
  return v1;
}

uint64_t sub_1B3E0E7F4(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = sub_1B3E381E8();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v14 = *v3;
    *v3 = 0x8000000000000000;
    sub_1B3E0EB58(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1B3E0E8EC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083B58);
  result = sub_1B3E380E0();
  v4 = result;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 0;
    v6 = (uint64_t *)(v2 + 56);
    v7 = 1 << *(_BYTE *)(v2 + 32);
    v26 = -1 << v7;
    v27 = v1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v2 + 56);
    v28 = 1 << *(_BYTE *)(v2 + 32);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v5 << 6);
      }
      else
      {
        v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
          return result;
        }
        if (v15 >= v10)
          goto LABEL_31;
        v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          v5 = v15 + 1;
          if (v15 + 1 >= v10)
            goto LABEL_31;
          v16 = v6[v5];
          if (!v16)
          {
            v17 = v15 + 2;
            if (v17 >= v10)
            {
LABEL_31:
              if (v28 >= 64)
                bzero((void *)(v2 + 56), 8 * v10);
              else
                *v6 = v26;
              v1 = v27;
              *(_QWORD *)(v2 + 16) = 0;
              break;
            }
            v16 = v6[v17];
            if (!v16)
            {
              while (1)
              {
                v5 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_37;
                if (v5 >= v10)
                  goto LABEL_31;
                v16 = v6[v5];
                ++v17;
                if (v16)
                  goto LABEL_21;
              }
            }
            v5 = v17;
          }
        }
LABEL_21:
        v9 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
      result = sub_1B3E381E8();
      v19 = -1 << *(_BYTE *)(v4 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v22 = 0;
        v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_36;
          }
          v24 = v21 == v23;
          if (v21 == v23)
            v21 = 0;
          v22 |= v24;
          v25 = *(_QWORD *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

uint64_t sub_1B3E0EB58(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_1B3E0E8EC();
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1B3E0EC78();
      goto LABEL_14;
    }
    sub_1B3E0EDF8();
  }
  v8 = *v3;
  result = sub_1B3E381E8();
  v9 = -1 << *(_BYTE *)(v8 + 32);
  a2 = result & ~v9;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 48);
    if (*(_QWORD *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      result = sub_1B3E381D0();
      __break(1u);
    }
    else
    {
      v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v10 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v12 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * a2) = v5;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    *(_QWORD *)(v12 + 16) = v15;
  return result;
}

void *sub_1B3E0EC78()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083B58);
  v2 = *v0;
  v3 = sub_1B3E380D4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v16 >= v13)
      goto LABEL_26;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_26;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
        break;
    }
LABEL_25:
    v19 = __clz(__rbit64(v17));
    v12 = (v17 - 1) & v17;
    v15 = v19 + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 2;
  if (v18 >= v13)
    goto LABEL_26;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1B3E0EDF8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083B58);
  result = sub_1B3E380E0();
  v4 = result;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_33:
    *v1 = v4;
    return result;
  }
  v26 = v1;
  v5 = 0;
  v6 = v2 + 56;
  v7 = 1 << *(_BYTE *)(v2 + 32);
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_22;
    }
    v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    if (v15 >= v10)
      goto LABEL_31;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      v5 = v15 + 1;
      if (v15 + 1 >= v10)
        goto LABEL_31;
      v16 = *(_QWORD *)(v6 + 8 * v5);
      if (!v16)
        break;
    }
LABEL_21:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_22:
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v14);
    result = sub_1B3E381E8();
    v19 = -1 << *(_BYTE *)(v4 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_34;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 2;
  if (v17 >= v10)
  {
LABEL_31:
    result = swift_release();
    v1 = v26;
    goto LABEL_33;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v5 = v17;
    goto LABEL_21;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v10)
      goto LABEL_31;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_21;
  }
LABEL_35:
  __break(1u);
  return result;
}

char *sub_1B3E0F044(uint64_t a1)
{
  return sub_1B3E0CC8C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B3E0F058(uint64_t a1)
{
  return sub_1B3E0CD84(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B3E0F06C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = v1;
  v3 = 0;
  v4 = *(_QWORD *)(result + 16);
  v5 = result + 32;
  v6 = MEMORY[0x1E0DEE9D8];
LABEL_2:
  if (v3 <= v4)
    v7 = v4;
  else
    v7 = v3;
  while (1)
  {
    if (v4 == v3)
      return v6;
    if (v7 == v3)
      break;
    v8 = *(_QWORD *)(v5 + 8 * v3++);
    result = sub_1B3E0E7F4(&v12, v8);
    if ((result & 1) != 0)
    {
      result = swift_isUniquelyReferenced_nonNull_native();
      v13 = v6;
      v11 = v2;
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1B3E12404(0, *(_QWORD *)(v6 + 16) + 1, 1);
        v6 = v13;
      }
      v10 = *(_QWORD *)(v6 + 16);
      v9 = *(_QWORD *)(v6 + 24);
      if (v10 >= v9 >> 1)
      {
        result = (uint64_t)sub_1B3E12404((char *)(v9 > 1), v10 + 1, 1);
        v6 = v13;
      }
      *(_QWORD *)(v6 + 16) = v10 + 1;
      *(_QWORD *)(v6 + 8 * v10 + 32) = v8;
      v2 = v11;
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1B3E0F17C(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  void *v3;
  int64_t v4;
  double v6;
  double v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  _BOOL4 v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v3 = &unk_1E66E4060;
  if (a1 < 2)
    return (uint64_t)v3;
  v4 = a2;
  if (a2 < 2)
    return (uint64_t)v3;
  if (a1 == 2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083B08);
    v3 = (void *)swift_allocObject();
    *((_OWORD *)v3 + 1) = xmmword_1B3E3CA50;
    *((_QWORD *)v3 + 4) = 0;
    *((_QWORD *)v3 + 5) = v4 - 1;
    return (uint64_t)v3;
  }
  v6 = (double)a2;
  v7 = (double)a2 / ((double)a1 + -1.0);
  if (v7 == 0.0)
    goto LABEL_44;
  v2 = MEMORY[0x1E0DEE9D8];
  if (v7 > 0.0)
  {
    v10 = 0;
    v3 = (void *)MEMORY[0x1E0DEE9D8];
    v11 = 0.0;
    while (!__OFADD__(v10, 1))
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = sub_1B3E0CC8C(0, *((_QWORD *)v3 + 2) + 1, 1, (char *)v3);
      v13 = *((_QWORD *)v3 + 2);
      v12 = *((_QWORD *)v3 + 3);
      v4 = v13 + 1;
      if (v13 >= v12 >> 1)
        v3 = sub_1B3E0CC8C((char *)(v12 > 1), v13 + 1, 1, (char *)v3);
      *((double *)v3 + v13 + 4) = v11;
      v11 = (double)(v10 + 1) * v7 + 0.0;
      *((_QWORD *)v3 + 2) = v4;
      v14 = v11 <= v6;
      if (v7 > 0.0)
        v14 = v11 >= v6;
      ++v10;
      if (v14)
        goto LABEL_9;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v4 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  v3 = (void *)MEMORY[0x1E0DEE9D8];
LABEL_9:
  v6 = v6 + -1.0;
  if (v4 < a1)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
LABEL_11:
      v9 = *((_QWORD *)v3 + 2);
      v8 = *((_QWORD *)v3 + 3);
      v4 = v9 + 1;
      if (v9 >= v8 >> 1)
        v3 = sub_1B3E0CC8C((char *)(v8 > 1), v9 + 1, 1, (char *)v3);
      *((_QWORD *)v3 + 2) = v4;
      *((double *)v3 + v9 + 4) = v6;
      goto LABEL_29;
    }
LABEL_45:
    v3 = sub_1B3E0CC8C(0, v4 + 1, 1, (char *)v3);
    goto LABEL_11;
  }
  if (v4 != a1)
  {
LABEL_28:
    if (!v4)
    {
      swift_bridgeObjectRelease();
LABEL_37:
      v20 = swift_bridgeObjectRetain();
      v3 = (void *)sub_1B3E0F06C(v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v3;
    }
LABEL_29:
    swift_bridgeObjectRetain();
    sub_1B3E12404(0, v4, 0);
    v16 = 0;
    v17 = v2;
    do
    {
      v6 = *((double *)v3 + v16 + 4);
      if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) == 0)
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      if (v6 <= -9.22337204e18)
        goto LABEL_41;
      if (v6 >= 9.22337204e18)
        goto LABEL_42;
      v19 = *(_QWORD *)(v17 + 16);
      v18 = *(_QWORD *)(v17 + 24);
      v2 = v19 + 1;
      if (v19 >= v18 >> 1)
        sub_1B3E12404((char *)(v18 > 1), v19 + 1, 1);
      ++v16;
      *(_QWORD *)(v17 + 16) = v2;
      *(_QWORD *)(v17 + 8 * v19 + 32) = (uint64_t)v6;
    }
    while (v4 != v16);
    swift_bridgeObjectRelease_n();
    goto LABEL_37;
  }
  result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1B3E0F044((uint64_t)v3);
    v3 = (void *)result;
  }
  if (*((_QWORD *)v3 + 2) >= (unint64_t)a1)
  {
    *((double *)v3 + a1 + 3) = v6;
    v4 = *((_QWORD *)v3 + 2);
    goto LABEL_28;
  }
  __break(1u);
  return result;
}

void sub_1B3E0F4F4(void *a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  CGImage *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(unint64_t, char *, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  CGImage *v36;
  char v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  int64x2_t v54;
  int64x2_t *v55;
  unint64_t v56;
  unint64_t v57;
  double v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  int64x2_t v63;
  int64x2_t *v64;
  unint64_t v65;
  unint64_t v66;
  double v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  int64x2_t v74;
  int64x2_t *v75;
  unint64_t v76;
  unint64_t v77;
  double v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  int64x2_t v83;
  int64x2_t *v84;
  unint64_t v85;
  unint64_t v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  char *v107;
  CGImageRef v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int64_t Height;
  uint64_t v119;
  int64_t Width;
  __int128 v121;
  __int128 v122;
  uint64_t v123;
  char v124[32];
  _OWORD v125[2];
  uint64_t v126;
  CGRect v127;
  CGRect v128;
  CGRect v129;
  CGRect v130;
  CGRect v131;
  CGRect v132;
  CGRect v133;
  CGRect v134;

  v106 = a3;
  v105 = a2;
  sub_1B3E37FA8();
  ((void (*)(void))MEMORY[0x1E0C80A78])();
  v109 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083B30);
  v6 = *(_QWORD *)(v109 - 8);
  v7 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v107 = (char *)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v98 - v10;
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v98 - v13;
  MEMORY[0x1E0C80A78](v12);
  v111 = (char *)&v98 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083B38);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v98 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083B40);
  v112 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v110 = (char *)&v98 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a1;
  CGColorSpaceCreateDeviceRGB();
  sub_1B3E380BC();
  sub_1B3E101AC((uint64_t)v124, (uint64_t)v125);
  if (*((_QWORD *)&v125[0] + 1) == 1)
    goto LABEL_99;
  v121 = v125[0];
  v122 = v125[1];
  v123 = v126;
  sub_1B3E37F9C();
  v22 = (CGImage *)v21;
  sub_1B3E37F84();
  v104 = 0;
  v103 = a4;
  v108 = v22;
  v23 = v112;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v112 + 56))(v18, 0, 1, v19);
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v110, v18, v19);
  sub_1B3E37F18();
  sub_1B3E37FB4();
  sub_1B3E37F6C();
  sub_1B3E37F18();
  sub_1B3E37F6C();
  sub_1B3E37F18();
  v24 = v11;
  sub_1B3E37F6C();
  v99 = v19;
  sub_1B3E37F18();
  v25 = v107;
  sub_1B3E37F6C();
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083B50);
  v26 = *(_QWORD *)(v6 + 72);
  v27 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1B3E3C940;
  v29 = v28 + v27;
  v102 = v6;
  v30 = *(void (**)(unint64_t, char *, uint64_t))(v6 + 16);
  v31 = v109;
  v30(v29, v111, v109);
  v100 = v14;
  v30(v29 + v26, v14, v31);
  v101 = v24;
  v30(v29 + 2 * v26, v24, v31);
  v32 = v25;
  v30(v29 + 3 * v26, v25, v31);
  sub_1B3E37F90();
  swift_bridgeObjectRelease();
  v33 = sub_1B3E37F78();
  v34 = sub_1B3E37F48();
  v35 = v33 * v34;
  if ((unsigned __int128)(v33 * (__int128)v34) >> 64 != (v33 * v34) >> 63)
  {
    __break(1u);
    goto LABEL_70;
  }
  v36 = v108;
  Width = CGImageGetWidth(v108);
  v119 = 0;
  Height = CGImageGetHeight(v36);
  v117 = 0;
  MEMORY[0x1E0C80A78](Height);
  *(&v98 - 8) = (uint64_t)v25;
  *(&v98 - 7) = v35;
  v37 = v106;
  *((_BYTE *)&v98 - 48) = v106;
  *(&v98 - 5) = (uint64_t)&Width;
  *(&v98 - 4) = (uint64_t)&v119;
  *(&v98 - 3) = (uint64_t)&Height;
  *(&v98 - 2) = (uint64_t)&v117;
  sub_1B3E37F3C();
  v38 = v119 - Width;
  if (__OFSUB__(v119, Width))
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  v39 = __OFADD__(v38, 1);
  v40 = v38 + 1;
  if (v39)
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  v41 = v117 - Height;
  if (__OFSUB__(v117, Height))
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  v39 = __OFADD__(v41, 1);
  v42 = v41 + 1;
  if (v39)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  v43 = (double)Width;
  v44 = (double)Height;
  v45 = (double)v40;
  v46 = (double)v42;
  v127.origin.x = (double)Width;
  v127.origin.y = (double)Height;
  v127.size.width = (double)v40;
  v127.size.height = (double)v42;
  v47 = CGRectGetWidth(v127);
  if ((~*(_QWORD *)&v47 & 0x7FF0000000000000) == 0)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  if (v47 <= -9.22337204e18)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }
  if (v47 >= 9.22337204e18)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  v48 = v105;
  if ((v105 & 0x8000000000000000) != 0)
  {
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  if (!v105)
  {
    v49 = MEMORY[0x1E0DEE9D8];
    v52 = v103;
    goto LABEL_20;
  }
  v49 = sub_1B3E380A4();
  *(_QWORD *)(v49 + 16) = v48;
  v50 = (uint64_t)v47;
  v51 = (unint64_t *)(v49 + 32);
  v52 = v103;
  if (v48 < 4)
  {
    v53 = 0;
LABEL_18:
    v57 = v48 - v53;
    do
    {
      *v51++ = v50;
      --v57;
    }
    while (v57);
    goto LABEL_20;
  }
  v53 = v48 & 0xFFFFFFFFFFFFFFFCLL;
  v51 += v48 & 0xFFFFFFFFFFFFFFFCLL;
  v54 = vdupq_n_s64(v50);
  v55 = (int64x2_t *)(v49 + 48);
  v56 = v48 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v55[-1] = v54;
    *v55 = v54;
    v55 += 2;
    v56 -= 4;
  }
  while (v56);
  if (v53 != v48)
    goto LABEL_18;
LABEL_20:
  v116 = v49;
  v128.origin.x = v43;
  v128.origin.y = v44;
  v128.size.width = v45;
  v128.size.height = v46;
  v58 = CGRectGetWidth(v128);
  if ((~*(_QWORD *)&v58 & 0x7FF0000000000000) == 0)
  {
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  if (v58 <= -9.22337204e18)
  {
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  if (v58 >= 9.22337204e18)
  {
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  if (!v48)
  {
    v59 = MEMORY[0x1E0DEE9D8];
    goto LABEL_32;
  }
  v59 = sub_1B3E380A4();
  *(_QWORD *)(v59 + 16) = v48;
  v60 = (uint64_t)v58;
  v61 = (unint64_t *)(v59 + 32);
  if (v48 < 4)
  {
    v62 = 0;
LABEL_30:
    v66 = v48 - v62;
    do
    {
      *v61++ = v60;
      --v66;
    }
    while (v66);
    goto LABEL_32;
  }
  v62 = v48 & 0xFFFFFFFFFFFFFFFCLL;
  v61 += v48 & 0xFFFFFFFFFFFFFFFCLL;
  v63 = vdupq_n_s64(v60);
  v64 = (int64x2_t *)(v59 + 48);
  v65 = v48 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v64[-1] = v63;
    *v64 = v63;
    v64 += 2;
    v65 -= 4;
  }
  while (v65);
  if (v62 != v48)
    goto LABEL_30;
LABEL_32:
  v115 = v59;
  v129.origin.x = v43;
  v129.origin.y = v44;
  v129.size.width = v45;
  v129.size.height = v46;
  v67 = CGRectGetHeight(v129);
  if ((~*(_QWORD *)&v67 & 0x7FF0000000000000) == 0)
  {
LABEL_81:
    __break(1u);
    goto LABEL_82;
  }
  if (v67 <= -9.22337204e18)
  {
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  if (v67 >= 9.22337204e18)
  {
LABEL_83:
    __break(1u);
    goto LABEL_84;
  }
  v68 = sub_1B3E0F17C(v48, (uint64_t)v67);
  v130.origin.x = v43;
  v130.origin.y = v44;
  v130.size.width = v45;
  v130.size.height = v46;
  v69 = CGRectGetHeight(v130);
  if ((~*(_QWORD *)&v69 & 0x7FF0000000000000) == 0)
  {
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  if (v69 <= -9.22337204e18)
  {
LABEL_85:
    __break(1u);
    goto LABEL_86;
  }
  if (v69 >= 9.22337204e18)
  {
LABEL_86:
    __break(1u);
    goto LABEL_87;
  }
  if (!v48)
  {
    v70 = MEMORY[0x1E0DEE9D8];
    goto LABEL_47;
  }
  v70 = sub_1B3E380A4();
  *(_QWORD *)(v70 + 16) = v48;
  v71 = (uint64_t)v69;
  v72 = (unint64_t *)(v70 + 32);
  if (v48 < 4)
  {
    v73 = 0;
LABEL_45:
    v77 = v48 - v73;
    do
    {
      *v72++ = v71;
      --v77;
    }
    while (v77);
    goto LABEL_47;
  }
  v73 = v48 & 0xFFFFFFFFFFFFFFFCLL;
  v72 += v48 & 0xFFFFFFFFFFFFFFFCLL;
  v74 = vdupq_n_s64(v71);
  v75 = (int64x2_t *)(v70 + 48);
  v76 = v48 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v75[-1] = v74;
    *v75 = v74;
    v75 += 2;
    v76 -= 4;
  }
  while (v76);
  if (v73 != v48)
    goto LABEL_45;
LABEL_47:
  v114 = v70;
  v131.origin.x = v43;
  v131.origin.y = v44;
  v131.size.width = v45;
  v131.size.height = v46;
  v78 = CGRectGetHeight(v131);
  if ((~*(_QWORD *)&v78 & 0x7FF0000000000000) == 0)
  {
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  if (v78 <= -9.22337204e18)
  {
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  if (v78 >= 9.22337204e18)
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  if (!v48)
  {
    v79 = MEMORY[0x1E0DEE9D8];
    goto LABEL_59;
  }
  v79 = sub_1B3E380A4();
  *(_QWORD *)(v79 + 16) = v48;
  v80 = (uint64_t)v78;
  v81 = (unint64_t *)(v79 + 32);
  if (v48 < 4)
  {
    v82 = 0;
LABEL_57:
    v86 = v48 - v82;
    do
    {
      *v81++ = v80;
      --v86;
    }
    while (v86);
    goto LABEL_59;
  }
  v82 = v48 & 0xFFFFFFFFFFFFFFFCLL;
  v81 += v48 & 0xFFFFFFFFFFFFFFFCLL;
  v83 = vdupq_n_s64(v80);
  v84 = (int64x2_t *)(v79 + 48);
  v85 = v48 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v84[-1] = v83;
    *v84 = v83;
    v84 += 2;
    v85 -= 4;
  }
  while (v85);
  if (v82 != v48)
    goto LABEL_57;
LABEL_59:
  v113 = v79;
  v132.origin.x = v43;
  v132.origin.y = v44;
  v132.size.width = v45;
  v132.size.height = v46;
  v87 = CGRectGetWidth(v132);
  if ((~*(_QWORD *)&v87 & 0x7FF0000000000000) == 0)
  {
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  if (v87 <= -9.22337204e18)
  {
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  if (v87 >= 9.22337204e18)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  v88 = sub_1B3E0F17C(v48, (uint64_t)v87);
  v89 = MEMORY[0x1E0C80A78](v88);
  *(&v98 - 8) = v68;
  *((_BYTE *)&v98 - 56) = v37;
  *(&v98 - 6) = (uint64_t)&v116;
  *(&v98 - 5) = (uint64_t)&v115;
  *(&v98 - 4) = v89;
  *(&v98 - 3) = (uint64_t)&v114;
  *(&v98 - 2) = (uint64_t)&v113;
  sub_1B3E37F60();
  v90 = v116;
  v91 = v115;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v133.origin.x = v43;
  v133.origin.y = v44;
  v133.size.width = v45;
  v133.size.height = v46;
  v92 = CGRectGetWidth(v133);
  if ((~*(_QWORD *)&v92 & 0x7FF0000000000000) == 0)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  if (v92 <= -9.22337204e18)
  {
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  if (v92 >= 9.22337204e18)
  {
LABEL_95:
    __break(1u);
    goto LABEL_96;
  }
  v93 = v31;
  v94 = v114;
  v95 = v113;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v134.origin.x = v43;
  v134.origin.y = v44;
  v134.size.width = v45;
  v134.size.height = v46;
  v96 = CGRectGetHeight(v134);

  v97 = *(void (**)(char *, uint64_t))(v102 + 8);
  v97(v101, v93);
  v97(v100, v93);
  v97(v111, v93);
  (*(void (**)(char *, uint64_t))(v112 + 8))(v110, v99);
  if ((~*(_QWORD *)&v96 & 0x7FF0000000000000) == 0)
  {
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }
  if (v96 > -9.22337204e18)
  {
    if (v96 < 9.22337204e18)
    {
      v97(v32, v109);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_QWORD *)v52 = v108;
      *(_BYTE *)(v52 + 8) = 0;
      *(_QWORD *)(v52 + 16) = v68;
      *(_QWORD *)(v52 + 24) = v90;
      *(_QWORD *)(v52 + 32) = v91;
      *(_QWORD *)(v52 + 40) = (uint64_t)v92;
      *(_BYTE *)(v52 + 48) = 1;
      *(_QWORD *)(v52 + 56) = v88;
      *(_QWORD *)(v52 + 64) = v94;
      *(_QWORD *)(v52 + 72) = v95;
      *(_QWORD *)(v52 + 80) = (uint64_t)v96;
      *(double *)(v52 + 88) = v43;
      *(double *)(v52 + 96) = v44;
      *(double *)(v52 + 104) = v45;
      *(double *)(v52 + 112) = v46;
      return;
    }
    goto LABEL_98;
  }
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
}

uint64_t sub_1B3E101AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083B48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B3E101F4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083B38);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B3E10234(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1B3E0DFB0(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_BYTE *)(v2 + 32), *(uint64_t **)(v2 + 40), *(uint64_t **)(v2 + 48), *(uint64_t **)(v2 + 56), *(uint64_t **)(v2 + 64));
}

uint64_t sub_1B3E10264()
{
  return sub_1B3E0E134();
}

uint64_t sub_1B3E1028C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1B3E0E23C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_BYTE *)(v2 + 40), *(uint64_t **)(v2 + 48), *(uint64_t **)(v2 + 56), *(_QWORD *)(v2 + 64), *(uint64_t **)(v2 + 72), *(uint64_t **)(v2 + 80));
}

uint64_t destroy for ProfileFromCGImage(id *a1)
{

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ProfileFromCGImage(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v8 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ProfileFromCGImage(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

__n128 __swift_memcpy120_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for ProfileFromCGImage(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for ProfileFromCGImage(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ProfileFromCGImage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ProfileFromCGImage()
{
  return &type metadata for ProfileFromCGImage;
}

unint64_t sub_1B3E10670(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083C08);
  v2 = (_QWORD *)sub_1B3E38140();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v7 = *(v4 - 1);
    v8 = *v4;
    v9 = v4[1];
    v10 = v4[2];
    v11 = v4[3];
    v12 = v4[4];
    v13 = v4[5];
    v14 = v4[6];
    swift_bridgeObjectRetain();
    result = sub_1B3E113D4(v5, v6);
    if ((v16 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v17 = (uint64_t *)(v2[6] + 16 * result);
    *v17 = v5;
    v17[1] = v6;
    v18 = (_QWORD *)(v2[7] + (result << 6));
    *v18 = v7;
    v18[1] = v8;
    v18[2] = v9;
    v18[3] = v10;
    v18[4] = v11;
    v18[5] = v12;
    v18[6] = v13;
    v18[7] = v14;
    v19 = v2[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v2[2] = v21;
    v4 += 10;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1B3E107B4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083BF0);
  v2 = sub_1B3E38140();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1B3E136F0(v6, (uint64_t)&v13);
    v7 = v13;
    result = sub_1B3E11438(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)sub_1B3E13738(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1B3E108CC(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  char v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083BE8);
  v2 = (_QWORD *)sub_1B3E38140();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    v8 = v4[1];
    v9 = v4[2];
    v10 = v4[3];
    v11 = v4[4];
    v12 = v4[5];
    swift_bridgeObjectRetain();
    result = sub_1B3E113D4(v5, v6);
    if ((v14 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v15 = (uint64_t *)(v2[6] + 16 * result);
    *v15 = v5;
    v15[1] = v6;
    v16 = (_QWORD *)(v2[7] + 48 * result);
    *v16 = v7;
    v16[1] = v8;
    v16[2] = v9;
    v16[3] = v10;
    v16[4] = v11;
    v16[5] = v12;
    v17 = v2[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_11;
    v2[2] = v19;
    v4 += 8;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

EmojiFoundation::EmojiCenteringData __swiftcall EmojiCenteringData.init(font:emojis:)(CTFontRef font, Swift::String emojis)
{
  uint64_t v2;
  void *object;
  _QWORD *countAndFlagsBits;
  uint64_t v5;
  const __CTFont *v6;
  void *v7;
  Swift::Int v8;
  double Size;
  double v10;
  double v11;
  void *v12;
  const __CTFont *v13;
  uint64_t v14;
  uint64_t v15;
  const __CTFont *v16;
  void *v17;
  const __CTFont *v18[3];
  void *v19;
  void *v20;
  const __CTFont *v21;
  EmojiFoundation::EmojiCenteringData result;

  object = emojis._object;
  countAndFlagsBits = (_QWORD *)emojis._countAndFlagsBits;
  v5 = v2;
  v6 = font;
  sub_1B3E0BB38(v6, v18);
  Size = CTFontGetSize(v6);
  v11 = Size;
  if ((~*(_QWORD *)&Size & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  Size = -9.22337204e18;
  if (v11 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  Size = 9.22337204e18;
  if (v11 >= 9.22337204e18)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v12 = v19;
  v13 = v18[0];
  sub_1B3E12748(v18[0], v19, countAndFlagsBits, (uint64_t)object, (uint64_t)v11);
  v15 = v14;

  v21 = v18[1];
  sub_1B3E0D268((uint64_t)&v21);
  v16 = v18[2];

  v17 = v20;
  swift_bridgeObjectRelease();

  *(double *)v5 = v11;
  *(double *)(v5 + 8) = v11;
  *(_QWORD *)(v5 + 16) = v15;
  *(_QWORD *)(v5 + 24) = 1;
LABEL_8:
  result.size.height = v10;
  result.size.width = Size;
  result.version = v8;
  result.profiles._rawValue = v7;
  return result;
}

BOOL sub_1B3E10B10(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1B3E10B24()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x73656C69666F7270;
  if (*v0 != 1)
    v1 = 0x6E6F6973726576;
  if (*v0)
    return v1;
  else
    return 1702521203;
}

uint64_t sub_1B3E10B78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B3E13284(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B3E10B9C()
{
  return 0;
}

void sub_1B3E10BA8(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1B3E10BB4()
{
  sub_1B3E12D84();
  return sub_1B3E38254();
}

uint64_t sub_1B3E10BDC()
{
  sub_1B3E12D84();
  return sub_1B3E38260();
}

uint64_t EmojiCenteringData.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083B60);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = v1[1];
  v12 = v1[2];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B3E12D84();
  sub_1B3E3823C();
  v13 = v8;
  v14 = v9;
  v15 = 0;
  type metadata accessor for CGSize(0);
  sub_1B3E0ABE4(&qword_1EF083B70, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x1E0C9B9F0]);
  sub_1B3E3817C();
  if (!v2)
  {
    v13 = v12;
    v15 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083B78);
    sub_1B3E12E0C(&qword_1EF083B80, (uint64_t (*)(void))sub_1B3E12DC8, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]);
    sub_1B3E3817C();
    LOBYTE(v13) = 2;
    sub_1B3E38170();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t EmojiCenteringData.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  char v15;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083B90);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B3E12D84();
  sub_1B3E38224();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  type metadata accessor for CGSize(0);
  v15 = 0;
  sub_1B3E0ABE4(&qword_1EF083B98, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, MEMORY[0x1E0C9BA08]);
  sub_1B3E38164();
  v9 = v14[0];
  v10 = v14[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083B78);
  v15 = 1;
  sub_1B3E12E0C(&qword_1EF083BA0, (uint64_t (*)(void))sub_1B3E12E80, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
  sub_1B3E38164();
  v11 = v14[0];
  LOBYTE(v14[0]) = 2;
  swift_bridgeObjectRetain();
  v12 = sub_1B3E38158();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *a2 = v9;
  a2[1] = v10;
  a2[2] = v11;
  a2[3] = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B3E10FF0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return EmojiCenteringData.init(from:)(a1, a2);
}

uint64_t sub_1B3E11004(_QWORD *a1)
{
  return EmojiCenteringData.encode(to:)(a1);
}

void sub_1B3E11018(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  CGFloat v5;
  CGFloat v6;
  double Width;
  double Height;
  uint64_t v9;
  _BYTE v10[24];
  uint64_t v11;
  _BYTE v12[24];
  uint64_t v13;
  _BYTE v14[24];
  uint64_t v15;
  uint64_t v16;
  CGRect v17;
  CGRect v18;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B3E38230();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v15);
  sub_1B3E381A0();
  v3 = *(double *)v1;
  if ((~*(_QWORD *)v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v3 >= 9.22337204e18)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v4 = *(double *)(v1 + 8);
  v5 = *(double *)(v1 + 16);
  v6 = *(double *)(v1 + 24);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
  sub_1B3E381AC();
  if (v2)
  {
LABEL_20:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
    return;
  }
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
    goto LABEL_24;
  if (v4 <= -9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v4 >= 9.22337204e18)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
  sub_1B3E381AC();
  v17.origin.x = v3;
  v17.origin.y = v4;
  v17.size.width = v5;
  v17.size.height = v6;
  Width = CGRectGetWidth(v17);
  if ((~*(_QWORD *)&Width & 0x7FF0000000000000) == 0)
    goto LABEL_27;
  if (Width <= -9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (Width >= 9.22337204e18)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
  sub_1B3E381AC();
  v18.origin.x = v3;
  v18.origin.y = v4;
  v18.size.width = v5;
  v18.size.height = v6;
  Height = CGRectGetHeight(v18);
  if ((~*(_QWORD *)&Height & 0x7FF0000000000000) == 0)
    goto LABEL_30;
  if (Height <= -9.22337204e18)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (Height < 9.22337204e18)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v12, v13);
    sub_1B3E381AC();
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v15);
    sub_1B3E381A0();
    v9 = *(_QWORD *)(v1 + 40);
    v16 = *(_QWORD *)(v1 + 32);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
    sub_1B3E133F0();
    sub_1B3E381B8();
    v16 = v9;
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v10, v11);
    sub_1B3E381B8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
    goto LABEL_20;
  }
LABEL_32:
  __break(1u);
}

double sub_1B3E11380@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_1B3E13434(a1, v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

void sub_1B3E113C0(_QWORD *a1)
{
  sub_1B3E11018(a1);
}

unint64_t sub_1B3E113D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B3E381F4();
  sub_1B3E38074();
  v4 = sub_1B3E3820C();
  return sub_1B3E11540(a1, a2, v4);
}

unint64_t sub_1B3E11438(uint64_t a1)
{
  uint64_t v2;

  sub_1B3E3805C();
  sub_1B3E381F4();
  sub_1B3E38074();
  v2 = sub_1B3E3820C();
  swift_bridgeObjectRelease();
  return sub_1B3E11620(a1, v2);
}

unint64_t sub_1B3E114B8(uint64_t a1)
{
  uint64_t v2;

  sub_1B3E381F4();
  type metadata accessor for CFString(0);
  sub_1B3E0ABE4(&qword_1EF083C10, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1B3E3C824);
  sub_1B3E37FFC();
  v2 = sub_1B3E3820C();
  return sub_1B3E11794(a1, v2);
}

unint64_t sub_1B3E11540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1B3E381C4() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1B3E381C4() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1B3E11620(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = sub_1B3E3805C();
    v8 = v7;
    if (v6 == sub_1B3E3805C() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = sub_1B3E381C4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = sub_1B3E3805C();
          v15 = v14;
          if (v13 == sub_1B3E3805C() && v15 == v16)
            break;
          v18 = sub_1B3E381C4();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_1B3E11794(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  void *v6;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    type metadata accessor for CFString(0);
    v6 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * i);
    sub_1B3E0ABE4(&qword_1EF083C10, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1B3E3C824);
    v7 = v6;
    v8 = sub_1B3E37FF0();

    if ((v8 & 1) == 0)
    {
      v9 = ~v4;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v11 = sub_1B3E37FF0();

        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

uint64_t sub_1B3E118D4(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _OWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 *v33;
  uint64_t v34;
  int64_t v35;
  _QWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083C08);
  v6 = a2;
  v7 = sub_1B3E38134();
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v14 << 6);
      }
      else
      {
        v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35)
          goto LABEL_33;
        v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          v14 = v23 + 1;
          if (v23 + 1 >= v35)
            goto LABEL_33;
          v24 = v36[v14];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v6 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v5 + 32);
                if (v34 >= 64)
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                v14 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_40;
                if (v14 >= v35)
                  goto LABEL_33;
                v24 = v36[v14];
                ++v25;
                if (v24)
                  goto LABEL_30;
              }
            }
            v14 = v25;
          }
        }
LABEL_30:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
      v32 = *v30;
      v31 = v30[1];
      v33 = (__int128 *)(*(_QWORD *)(v5 + 56) + (v22 << 6));
      v39 = v33[2];
      v40 = v33[1];
      v37 = *v33;
      v38 = v33[3];
      if ((v6 & 1) == 0)
        swift_bridgeObjectRetain();
      sub_1B3E381F4();
      sub_1B3E38074();
      result = sub_1B3E3820C();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v17 == v27;
          if (v17 == v27)
            v17 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
      *v19 = v32;
      v19[1] = v31;
      v20 = (_OWORD *)(*(_QWORD *)(v8 + 56) + (v18 << 6));
      *v20 = v37;
      v20[1] = v40;
      v20[2] = v39;
      v20[3] = v38;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t sub_1B3E11BF0(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  int64_t v34;
  _QWORD *v35;
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083BE8);
  v36 = a2;
  v6 = sub_1B3E38134();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v35 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v34)
          goto LABEL_33;
        v23 = v35[v22];
        ++v13;
        if (!v23)
        {
          v13 = v22 + 1;
          if (v22 + 1 >= v34)
            goto LABEL_33;
          v23 = v35[v13];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v34)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v36 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v35[v24];
            if (!v23)
            {
              while (1)
              {
                v13 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_40;
                if (v13 >= v34)
                  goto LABEL_33;
                v23 = v35[v13];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v13 = v24;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v31 = *v29;
      v30 = v29[1];
      v32 = (__int128 *)(*(_QWORD *)(v5 + 56) + 48 * v21);
      v39 = v32[1];
      v37 = *v32;
      v38 = v32[2];
      if ((v36 & 1) == 0)
        swift_bridgeObjectRetain();
      sub_1B3E381F4();
      sub_1B3E38074();
      result = sub_1B3E3820C();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v27 = v16 == v26;
          if (v16 == v26)
            v16 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v31;
      v18[1] = v30;
      v19 = (_OWORD *)(*(_QWORD *)(v7 + 56) + 48 * v17);
      *v19 = v37;
      v19[1] = v39;
      v19[2] = v38;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1B3E11F10(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  __int128 v20;
  char v21;
  uint64_t *v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1B3E113D4(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_1B3E12244();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = (_OWORD *)(v18[7] + 48 * v12);
      v20 = a1[1];
      *v19 = *a1;
      v19[1] = v20;
      v19[2] = a1[2];
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    v23 = (_OWORD *)(v18[7] + 48 * v12);
    v24 = a1[1];
    *v23 = *a1;
    v23[1] = v24;
    v23[2] = a1[2];
    v25 = v18[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (!v26)
    {
      v18[2] = v27;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1B3E11BF0(result, a4 & 1);
  result = sub_1B3E113D4(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1B3E381DC();
  __break(1u);
  return result;
}

void *sub_1B3E12088()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __int128 *v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD *v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083C08);
  v2 = *v0;
  v3 = sub_1B3E38128();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      v9 = v28 + 1;
      if (v28 + 1 >= v13)
        goto LABEL_26;
      v29 = *(_QWORD *)(v6 + 8 * v9);
      if (!v29)
        break;
    }
LABEL_25:
    v12 = (v29 - 1) & v29;
    v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = v15 << 6;
    v21 = (__int128 *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v23 = *v21;
    v24 = v21[1];
    v25 = v21[2];
    v26 = v21[3];
    *v22 = v19;
    v22[1] = v18;
    v27 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v20);
    *v27 = v23;
    v27[1] = v24;
    v27[2] = v25;
    v27[3] = v26;
    result = (void *)swift_bridgeObjectRetain();
  }
  v30 = v28 + 2;
  if (v30 >= v13)
    goto LABEL_26;
  v29 = *(_QWORD *)(v6 + 8 * v30);
  if (v29)
  {
    v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v29 = *(_QWORD *)(v6 + 8 * v9);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1B3E12244()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD *v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083BE8);
  v2 = *v0;
  v3 = sub_1B3E38128();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 48 * v15;
    v21 = (__int128 *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v23 = *v21;
    v24 = v21[1];
    v25 = v21[2];
    *v22 = v19;
    v22[1] = v18;
    v26 = (_OWORD *)(*(_QWORD *)(v4 + 56) + v20);
    *v26 = v23;
    v26[1] = v24;
    v26[2] = v25;
    result = (void *)swift_bridgeObjectRetain();
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

char *sub_1B3E12404(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1B3E12458(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1B3E12420(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1B3E12550(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1B3E1243C(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_1B3E12648(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

char *sub_1B3E12458(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083B08);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

char *sub_1B3E12550(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083B10);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

char *sub_1B3E12648(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083C00);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

void sub_1B3E12748(void *a1, void *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t inited;
  id v26;
  uint64_t v27;
  uint64_t v28;
  const __CTFont *v29;
  id v30;
  void *v31;
  void *v32;
  const __CFAttributedString *v33;
  const __CTLine *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double Size;
  size_t v39;
  id v40;
  void *v41;
  id v42;
  CGImageRef Image;
  CGImage *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char isUniquelyReferenced_nonNull_native;
  CGColorSpace *DeviceRGB;
  CGContext *v52;
  __int128 v53;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  CGRect ImageBounds;

  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1B3E108CC(MEMORY[0x1E0DEE9D8]);
  v58 = a3;
  *(_QWORD *)&v59 = a4;
  *(_QWORD *)&v74 = 0;
  *((_QWORD *)&v74 + 1) = 0xE000000000000000;
  sub_1B3E13630();
  v9 = sub_1B3E380B0();
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    v58 = v8;
    sub_1B3E1243C(0, v10, 0);
    v11 = v8;
    v12 = (uint64_t *)(v9 + 56);
    do
    {
      v13 = *(v12 - 3);
      v14 = *(v12 - 2);
      v15 = *(v12 - 1);
      v16 = *v12;
      swift_bridgeObjectRetain();
      v17 = MEMORY[0x1B5E2FD10](v13, v14, v15, v16);
      v19 = v18;
      swift_bridgeObjectRelease();
      v58 = v11;
      v21 = v11[2];
      v20 = v11[3];
      if (v21 >= v20 >> 1)
      {
        sub_1B3E1243C((char *)(v20 > 1), v21 + 1, 1);
        v11 = v58;
      }
      v11[2] = v21 + 1;
      v22 = &v11[2 * v21];
      v22[4] = v17;
      v22[5] = v19;
      v12 += 4;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    v23 = v11[2];
    if (!v23)
      goto LABEL_24;
  }
  else
  {
    swift_bridgeObjectRelease();
    v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v23 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (!v23)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      return;
    }
  }
  v24 = v11 + 5;
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083B00);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B3E3C960;
    sub_1B3E3805C();
    swift_bridgeObjectRetain();
    v26 = a1;
    v27 = sub_1B3E38038();
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 32) = v27;
    type metadata accessor for CTFont(0);
    *(_QWORD *)(inited + 64) = v28;
    *(_QWORD *)(inited + 40) = v26;
    v29 = (const __CTFont *)v26;
    sub_1B3E107B4(inited);
    v30 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
    swift_bridgeObjectRetain();
    v31 = (void *)sub_1B3E38038();
    swift_bridgeObjectRelease();
    type metadata accessor for Key(0);
    sub_1B3E0ABE4((unint64_t *)&qword_1EF083AA8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1B3E3C894);
    v32 = (void *)sub_1B3E38014();
    swift_bridgeObjectRelease();
    v33 = (const __CFAttributedString *)objc_msgSend(v30, sel_initWithString_attributes_, v31, v32);

    v34 = CTLineCreateWithAttributedString(v33);
    v35 = sub_1B3E0BD2C(v34);
    v37 = v36;
    Size = CTFontGetSize(v29);
    if ((~*(_QWORD *)&Size & 0x7FF0000000000000) == 0)
      break;
    if (Size <= -9.22337204e18)
      goto LABEL_26;
    if (Size >= 9.22337204e18)
      goto LABEL_27;
    v56 = v24;
    v57 = v23;
    v39 = (uint64_t)Size;
    swift_bridgeObjectRetain();
    sub_1B3E3808C();
    sub_1B3E0C148();
    sub_1B3E380C8();
    sub_1B3E3808C();
    swift_bridgeObjectRelease();
    sub_1B3E3808C();
    v40 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
    v41 = (void *)sub_1B3E38038();
    swift_bridgeObjectRelease();
    v42 = objc_msgSend(v40, sel_initWithString_, v41);

    Image = (CGImageRef)objc_msgSend(a2, sel_objectForKey_, v42);
    if (!Image)
    {
      DeviceRGB = CGColorSpaceCreateDeviceRGB();
      v52 = CGBitmapContextCreate(0, v39, v39, 8uLL, 0, DeviceRGB, 1u);

      if (!v52
        || (ImageBounds = CTLineGetImageBounds(v34, v52),
            CGContextTranslateCTM(v52, -ImageBounds.origin.x, -ImageBounds.origin.y),
            CTLineDraw(v34, v52),
            Image = CGBitmapContextCreateImage(v52),
            v52,
            !Image))
      {

        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
      objc_msgSend(a2, sel_setObject_forKey_, Image, v42);
    }

    swift_bridgeObjectRelease();
    if (CGImageGetWidth(Image) == a5 && CGImageGetHeight(Image) == a5)
    {
      v44 = Image;
      sub_1B3E0F4F4(v44, 0xCuLL, 30, (uint64_t)&v58);
      v53 = v65;
      v45 = v66;
      v46 = v67;
      v71 = v59;
      v72 = v60;
      v73 = v61;
      sub_1B3E0CA80(0.18);
      v48 = v47;
      v68 = v62;
      v69 = v63;
      v70 = v64;
      sub_1B3E0CA80(0.18);
      v74 = v53;
      v75 = v45;
      v76 = v46;
      v77 = v48;
      v78 = v49;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_1B3E11F10(&v74, v35, v37, isUniquelyReferenced_nonNull_native);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B3E13674((void **)&v58);
      goto LABEL_12;
    }

LABEL_11:
    swift_bridgeObjectRelease();
LABEL_12:
    v24 = v56 + 2;
    v23 = v57 - 1;
    if (v57 == 1)
      goto LABEL_24;
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_1B3E12D84()
{
  unint64_t result;

  result = qword_1EF083B68;
  if (!qword_1EF083B68)
  {
    result = MEMORY[0x1B5E30D78](&unk_1B3E3CC44, &type metadata for EmojiCenteringData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF083B68);
  }
  return result;
}

unint64_t sub_1B3E12DC8()
{
  unint64_t result;

  result = qword_1EF083B88;
  if (!qword_1EF083B88)
  {
    result = MEMORY[0x1B5E30D78](&unk_1B3E3CC1C, &type metadata for EmojiProfile);
    atomic_store(result, (unint64_t *)&qword_1EF083B88);
  }
  return result;
}

uint64_t sub_1B3E12E0C(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF083B78);
    v10[0] = a3;
    v10[1] = a2();
    result = MEMORY[0x1B5E30D78](a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B3E12E80()
{
  unint64_t result;

  result = qword_1EF083BA8;
  if (!qword_1EF083BA8)
  {
    result = MEMORY[0x1B5E30D78](&unk_1B3E3CBF4, &type metadata for EmojiProfile);
    atomic_store(result, (unint64_t *)&qword_1EF083BA8);
  }
  return result;
}

uint64_t destroy for EmojiCenteringData()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for EmojiCenteringData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for EmojiCenteringData(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for EmojiCenteringData(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for EmojiCenteringData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EmojiCenteringData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EmojiCenteringData()
{
  return &type metadata for EmojiCenteringData;
}

ValueMetadata *type metadata accessor for EmojiProfile()
{
  return &type metadata for EmojiProfile;
}

uint64_t getEnumTagSinglePayload for EmojiCenteringData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for EmojiCenteringData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B3E13124 + 4 * byte_1B3E3CAA5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B3E13158 + 4 * byte_1B3E3CAA0[v4]))();
}

uint64_t sub_1B3E13158(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B3E13160(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B3E13168);
  return result;
}

uint64_t sub_1B3E13174(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B3E1317CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B3E13180(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B3E13188(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1B3E13194(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for EmojiCenteringData.CodingKeys()
{
  return &type metadata for EmojiCenteringData.CodingKeys;
}

unint64_t sub_1B3E131B0()
{
  unint64_t result;

  result = qword_1EF083BB0;
  if (!qword_1EF083BB0)
  {
    result = MEMORY[0x1B5E30D78](&unk_1B3E3CBCC, &type metadata for EmojiCenteringData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF083BB0);
  }
  return result;
}

unint64_t sub_1B3E131F8()
{
  unint64_t result;

  result = qword_1EF083BB8;
  if (!qword_1EF083BB8)
  {
    result = MEMORY[0x1B5E30D78](&unk_1B3E3CB3C, &type metadata for EmojiCenteringData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF083BB8);
  }
  return result;
}

unint64_t sub_1B3E13240()
{
  unint64_t result;

  result = qword_1EF083BC0;
  if (!qword_1EF083BC0)
  {
    result = MEMORY[0x1B5E30D78](&unk_1B3E3CB64, &type metadata for EmojiCenteringData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF083BC0);
  }
  return result;
}

uint64_t sub_1B3E13284(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1702521203 && a2 == 0xE400000000000000;
  if (v2 || (sub_1B3E381C4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73656C69666F7270 && a2 == 0xE800000000000000 || (sub_1B3E381C4() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1B3E381C4();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

unint64_t sub_1B3E133F0()
{
  unint64_t result;

  result = qword_1EF083BC8;
  if (!qword_1EF083BC8)
  {
    result = MEMORY[0x1B5E30D78](MEMORY[0x1E0DEF050], MEMORY[0x1E0DEF040]);
    atomic_store(result, (unint64_t *)&qword_1EF083BC8);
  }
  return result;
}

uint64_t sub_1B3E13434@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  uint64_t v15;
  _QWORD *v16;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1B3E38218();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083BD0);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v15);
  sub_1B3E135D4();
  sub_1B3E38194();
  v5 = v16;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v15);
  result = sub_1B3E38194();
  if (v5[2] == 4)
  {
    v7 = v16;
    v8 = v5[4];
    v9 = v5[5];
    v10 = v5[6];
    v11 = v5[7];
    result = swift_bridgeObjectRelease();
    if (v7[2] == 2)
    {
      v12 = v7[4];
      v13 = v7[5];
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      *a2 = v8;
      a2[1] = v9;
      a2[2] = v10;
      a2[3] = v11;
      a2[4] = v12;
      a2[5] = v13;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_1B3E135D4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF083BD8;
  if (!qword_1EF083BD8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_1EF083BD0);
    v2 = MEMORY[0x1E0DEB0A8];
    result = MEMORY[0x1B5E30D78](MEMORY[0x1E0DEAF40], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF083BD8);
  }
  return result;
}

unint64_t sub_1B3E13630()
{
  unint64_t result;

  result = qword_1EF083BE0;
  if (!qword_1EF083BE0)
  {
    result = MEMORY[0x1B5E30D78](MEMORY[0x1E0DEA9A8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1EF083BE0);
  }
  return result;
}

void **sub_1B3E13674(void **a1)
{
  void *v2;

  v2 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return a1;
}

uint64_t sub_1B3E136F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083BF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *sub_1B3E13738(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_1B3E13748()
{
  CTFontRef UIFontForLanguage;
  CTFontRef v1;
  void *EmojiFontForFont;
  _OWORD v3[2];
  uint64_t v4;

  if (qword_1EF083A10 != -1)
    swift_once();
  UIFontForLanguage = CTFontCreateUIFontForLanguage(kCTFontUIFontSystem, *(CGFloat *)&qword_1EF084A18, 0);
  if (UIFontForLanguage)
  {
    v1 = UIFontForLanguage;
    EmojiFontForFont = (void *)CTFontCreateEmojiFontForFont();

    sub_1B3E0BB38(EmojiFontForFont, (const __CTFont **)v3);
    xmmword_1EF084A28 = v3[0];
    unk_1EF084A38 = v3[1];
    qword_1EF084A48 = v4;
  }
  else
  {
    __break(1u);
  }
}

id sub_1B3E137E4()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D38]), sel_init);
  qword_1EF083C18 = (uint64_t)result;
  return result;
}

CGFloat sub_1B3E13814@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, _OWORD *a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>)
{
  double v16;
  double v17;
  double v18;
  double v19;
  CGImage *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  double v32;
  int64_t Width;
  int64_t Height;
  BOOL v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  CGFloat v41;
  CGFloat v42;
  double v43;
  double v44;
  CGFloat v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  double v57;
  CGFloat v58;
  double v59;
  double v60;
  double v61;
  CGFloat result;
  __int128 v63;
  __int128 v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double x;
  CGFloat ty;
  CGFloat tx;
  CGFloat d;
  CGFloat c;
  CGFloat b;
  CGFloat a;
  double v81;
  double v82;
  double v83;
  double y;
  CGFloat v85;
  CGFloat v86;
  CGAffineTransform v87;
  CGAffineTransform v88;
  _QWORD v89[5];
  char v90[16];
  double v91;
  double v92;
  char v93;
  char v94[32];
  char v95;
  CGRect v96;
  CGRect v97;
  CGRect v98;
  CGRect v99;
  CGRect v100;
  CGRect v101;
  CGRect v102;
  CGRect v103;
  CGRect v104;
  CGRect v105;

  sub_1B3E1416C(a2, (uint64_t)v89);
  v16 = *(double *)&v89[2];
  v68 = *(double *)&v89[1];
  v71 = *(double *)v89;
  v17 = *(double *)&v89[3];
  if (*(_BYTE *)(a1 + 48))
    v18 = a7 * 0.85;
  else
    v18 = a7;
  if (*(_BYTE *)(a1 + 48))
    v19 = a6 * 0.85;
  else
    v19 = a6;
  v82 = v19;
  v20 = *(CGImage **)a1;
  v21 = *(_QWORD *)(a1 + 32);
  v22 = *(_QWORD *)(a1 + 40);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(a1 + 8), v21);
  v23 = 16;
  if ((a4 & 1) != 0)
    v23 = 24;
  v24 = (*(double (**)(uint64_t, uint64_t))(v22 + v23))(v21, v22);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v31 = v27;
  v32 = v29;
  if ((a3 & 1) == 0)
  {
    Width = CGImageGetWidth(v20);
    Height = CGImageGetHeight(v20);
    v31 = (double)Width;
    v32 = (double)Height;
  }
  v35 = v32 < v31;
  v66 = v18;
  v36 = v18 / v32;
  v37 = v82 / v31;
  if (!v35)
    v37 = v36;
  v88.a = 1.0;
  v88.b = 0.0;
  v88.c = 0.0;
  v88.d = 1.0;
  if (1.0 / a8 >= v37)
    v38 = v37;
  else
    v38 = 1.0 / a8;
  v88.tx = 0.0;
  v88.ty = 0.0;
  CGAffineTransformScale(&v87, &v88, v38, v38);
  b = v87.b;
  a = v87.a;
  d = v87.d;
  c = v87.c;
  ty = v87.ty;
  tx = v87.tx;
  v88.a = 1.0;
  v88.b = 0.0;
  v88.c = 0.0;
  v88.d = 1.0;
  v88.tx = 0.0;
  v88.ty = 0.0;
  CGAffineTransformScale(&v87, &v88, v38, v38);
  v88 = v87;
  v96.origin.x = v24;
  v96.origin.y = v26;
  v96.size.width = v28;
  v96.size.height = v30;
  v97 = CGRectApplyAffineTransform(v96, &v88);
  x = v97.origin.x;
  y = v97.origin.y;
  v85 = v97.size.height;
  v86 = v97.size.width;
  v39 = v38 * (double)(uint64_t)CGImageGetWidth(v20);
  v81 = v38;
  v40 = v38 * (double)(uint64_t)CGImageGetHeight(v20);
  sub_1B3E1416C(a2, (uint64_t)v94);
  if ((v95 & 1) != 0)
    v41 = v39;
  else
    v41 = v16;
  if ((v95 & 1) != 0)
    v42 = v40;
  else
    v42 = v17;
  if ((v95 & 1) != 0)
    v43 = 0.0;
  else
    v43 = v68;
  if ((v95 & 1) != 0)
    v44 = 0.0;
  else
    v44 = v71;
  v98.origin.x = v44;
  v98.origin.y = v43;
  v98.size.width = v41;
  v98.size.height = v42;
  v45 = v39;
  v72 = v40;
  if (CGRectGetWidth(v98) >= v39)
  {
    v99.origin.x = v44;
    v99.origin.y = v43;
    v99.size.width = v41;
    v99.size.height = v42;
    v46 = CGRectGetHeight(v99);
    v45 = v46 >= v40 ? v41 : v39;
    if (v46 >= v40)
      v40 = v42;
  }
  v65 = v39;
  v100.origin.x = x;
  v100.origin.y = y;
  v100.size.width = v86;
  v100.size.height = v85;
  v69 = CGRectGetWidth(v100);
  v101.origin.x = x;
  v101.origin.y = y;
  v101.size.width = v86;
  v101.size.height = v85;
  v47 = CGRectGetHeight(v101);
  v102.origin.x = v44;
  v102.origin.y = v43;
  v102.size.width = v45;
  v102.size.height = v40;
  v48 = CGRectGetWidth(v102);
  v103.origin.x = v44;
  v103.origin.y = v43;
  v103.size.width = v45;
  v103.size.height = v40;
  v49 = CGRectGetHeight(v103);
  sub_1B3E1416C(a2, (uint64_t)v90);
  if ((v93 & 1) != 0)
  {
    v50 = v82;
    if (v82 >= v65)
      v50 = v65;
    v83 = v50;
    v51 = v66;
    if (v66 >= v72)
      v51 = v72;
  }
  else
  {
    v83 = v91;
    v51 = v92;
  }
  v73 = v51;
  v67 = v44 + v48 * 0.5 - (x + v69 * 0.5);
  v70 = v43 + v49 * 0.5 - (y + v47 * 0.5);
  v52 = *(_QWORD *)(a1 + 32);
  v53 = *(_QWORD *)(a1 + 40);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(a1 + 8), v52);
  v54 = (*(double (**)(uint64_t, uint64_t))(v53 + 8))(v52, v53);
  v56 = v55;
  v104.origin.x = x;
  v104.origin.y = y;
  v104.size.width = v86;
  v104.size.height = v85;
  v57 = v54 * CGRectGetWidth(v104) * 0.75;
  v105.origin.x = x;
  v105.origin.y = y;
  v105.size.width = v86;
  v105.size.height = v85;
  v58 = CGRectGetHeight(v105);
  sub_1B3E09E3C(v57, v58 * v56 * -0.25, x, y, v86, v85, v83, v73);
  v61 = v67 + v60;
  if ((a4 & 1) == 0)
    v59 = -v59;
  v88.a = a;
  v88.b = b;
  v88.c = c;
  v88.d = d;
  v88.tx = tx;
  v88.ty = ty;
  CGAffineTransformTranslate(&v87, &v88, v61 / v81 - v44, (v70 + v59) / v81 - v43);
  result = v87.a;
  v63 = *(_OWORD *)&v87.c;
  v64 = *(_OWORD *)&v87.tx;
  *a5 = *(_OWORD *)&v87.a;
  a5[1] = v63;
  a5[2] = v64;
  return result;
}

void sub_1B3E13CCC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>, double a10@<D2>)
{
  void *v19;
  __int128 v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v32;
  _BYTE image[56];
  char v34;
  _OWORD v35[3];
  char v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _QWORD v40[2];

  if (qword_1EF083A20 != -1)
    swift_once();
  v37 = xmmword_1EF084A28;
  v38 = unk_1EF084A38;
  v19 = (void *)qword_1EF084A48;
  v39 = qword_1EF084A48;
  v40[0] = *((_QWORD *)&xmmword_1EF084A28 + 1);
  v20 = unk_1EF084A38;
  v21 = (id)xmmword_1EF084A28;
  sub_1B3E0D240((uint64_t)v40);
  v22 = (id)v20;
  v23 = *((id *)&v20 + 1);
  v24 = v19;
  sub_1B3E0AE24(a1, a2, a4 & 1, a6 & 1, image, a8, a9, a10);

  sub_1B3E0D268((uint64_t)v40);
  v25 = *(void **)image;
  if (!*(_QWORD *)image)
  {
    sub_1B3E141B4((uint64_t)image);
    goto LABEL_9;
  }
  v35[0] = *(_OWORD *)&image[8];
  v35[1] = *(_OWORD *)&image[24];
  v35[2] = *(_OWORD *)&image[40];
  v36 = v34;
  if (!CGImageGetWidth(*(CGImageRef *)image) || !CGImageGetHeight((CGImageRef)v25))
  {
    sub_1B3E0A450((id *)v35);

    v25 = 0;
LABEL_9:
    v28 = 0uLL;
    v26 = 0uLL;
    v27 = 0uLL;
    goto LABEL_10;
  }
  sub_1B3E13814((uint64_t)v35, a3, a4 & 1, a5 & 1, image, a8, a9, a10);
  v30 = *(_OWORD *)&image[16];
  v32 = *(_OWORD *)image;
  v29 = *(_OWORD *)&image[32];
  sub_1B3E0A450((id *)v35);
  v27 = v29;
  v26 = v30;
  v28 = v32;
LABEL_10:
  *(_QWORD *)a7 = v25;
  *(_OWORD *)(a7 + 8) = v28;
  *(_OWORD *)(a7 + 24) = v26;
  *(_OWORD *)(a7 + 40) = v27;
}

double sub_1B3E13EBC@<D0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, _OWORD *a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>)
{
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  double v20;
  double v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  CGImage *v25;
  BOOL v26;
  void *v27;
  objc_class *v28;
  id v29;
  __int128 v30;
  double result;
  objc_super v32;
  __int128 v33;
  __int128 v34;
  double v35[3];
  id v36;
  _BYTE v37[48];
  _OWORD v38[6];
  __int128 v39;
  double v40;

  if (qword_1EF083A28 != -1)
    swift_once();
  v16 = objc_msgSend((id)qword_1EF083C18, sel_objectForKey_, a1);
  if (v16)
  {
    v17 = v16;
    sub_1B3E0C81C((uint64_t)v16 + OBJC_IVAR____TtC15EmojiFoundation18CachedImageProfile_value, (uint64_t)&v36);
  }
  else
  {
    v18 = a1;
    sub_1B3E0F4F4(v18, 0xCuLL, 30, (uint64_t)v38);
    *((_QWORD *)&v34 + 1) = &type metadata for ProfileFromCGImage;
    *(_QWORD *)&v35[0] = &off_1E66E4088;
    v19 = swift_allocObject();
    *(_QWORD *)&v33 = v19;
    v20 = *((double *)&v39 + 1);
    v21 = v40;
    v22 = v38[5];
    *(_OWORD *)(v19 + 80) = v38[4];
    *(_OWORD *)(v19 + 96) = v22;
    *(_OWORD *)(v19 + 112) = v39;
    *(double *)(v19 + 128) = v40;
    v23 = v38[1];
    *(_OWORD *)(v19 + 16) = v38[0];
    *(_OWORD *)(v19 + 32) = v23;
    v24 = v38[3];
    *(_OWORD *)(v19 + 48) = v38[2];
    *(_OWORD *)(v19 + 64) = v24;
    v36 = v18;
    sub_1B3E0C7D8((uint64_t)&v33, (uint64_t)v37);
    v25 = (CGImage *)v18;
    v26 = sub_1B3E0A958(v25, v20, v21);

    v37[40] = v26;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
    v27 = (void *)qword_1EF083C18;
    sub_1B3E0C81C((uint64_t)&v36, (uint64_t)&v33);
    v28 = (objc_class *)type metadata accessor for CachedImageProfile();
    v29 = objc_allocWithZone(v28);
    sub_1B3E0C81C((uint64_t)&v33, (uint64_t)v29 + OBJC_IVAR____TtC15EmojiFoundation18CachedImageProfile_value);
    v32.receiver = v29;
    v32.super_class = v28;
    v17 = objc_msgSendSuper2(&v32, sel_init);
    sub_1B3E0A450((id *)&v33);
    objc_msgSend(v27, sel_setObject_forKey_, v17, v25);
  }

  sub_1B3E13814((uint64_t)&v36, a2, a3 & 1, a4 & 1, &v33, a6, a7, a8);
  sub_1B3E0A450(&v36);
  v30 = v34;
  *a5 = v33;
  a5[1] = v30;
  result = v35[0];
  a5[2] = *(_OWORD *)v35;
  return result;
}

uint64_t sub_1B3E14118()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B3E1416C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083C20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B3E141B4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1EF083C28);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B3E141F4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_1B3E141FC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_1B3E14204(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

_QWORD *internal::marisa::Trie::Trie(_QWORD *this)
{
  *this = 0;
  return this;
}

internal::marisa::grimoire::trie::LoudsTrie **internal::marisa::Trie::build(internal::marisa::grimoire::trie::LoudsTrie **a1, uint64_t *a2, _QWORD *a3, unsigned int a4)
{
  internal::marisa::grimoire::trie::LoudsTrie *v8;
  internal::marisa::grimoire::trie::LoudsTrie *v9;
  internal::marisa::grimoire::trie::LoudsTrie *v10;
  _QWORD *exception;
  internal::marisa::grimoire::trie::LoudsTrie *v13;

  v8 = (internal::marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x1E0DE4E10]);
  if (!v8)
  {
    v13 = 0;
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x800000014;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:20: MARISA_"
                   "MEMORY_ERROR: temp.get() == NULL";
  }
  v9 = v8;
  internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie(v8);
  v13 = v9;
  internal::marisa::grimoire::trie::LoudsTrie::build(v9, a2, a3, a4);
  v10 = *a1;
  *a1 = v9;
  v13 = v10;
  return internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(&v13);
}

void sub_1B3E142F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E30610](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

internal::marisa::grimoire::trie::LoudsTrie **internal::marisa::Trie::mmap(internal::marisa::grimoire::trie::LoudsTrie **this, const char *a2)
{
  internal::marisa::grimoire::trie::LoudsTrie *v4;
  internal::marisa::grimoire::trie::LoudsTrie *v5;
  internal::marisa::grimoire::trie::LoudsTrie *v6;
  _QWORD *exception;
  _QWORD *v9;
  _BYTE v10[40];
  internal::marisa::grimoire::trie::LoudsTrie *v11;

  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x20000001CLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:28: MARISA_"
                   "NULL_ERROR: filename == NULL";
  }
  v4 = (internal::marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x1E0DE4E10]);
  if (!v4)
  {
    v11 = 0;
    v9 = __cxa_allocate_exception(0x20uLL);
    *v9 = &off_1E66E4768;
    v9[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    v9[2] = 0x80000001FLL;
    v9[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:31: MARISA_MEMORY_"
            "ERROR: temp.get() == NULL";
  }
  v5 = v4;
  internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie(v4);
  v11 = v5;
  internal::marisa::grimoire::io::Mapper::Mapper((uint64_t)v10);
  internal::marisa::grimoire::io::Mapper::open((internal::marisa::grimoire::io::Mapper *)v10, a2);
  internal::marisa::grimoire::trie::LoudsTrie::map(v11, (internal::marisa::grimoire::io::Mapper *)v10);
  v6 = *this;
  *this = v11;
  v11 = v6;
  internal::marisa::grimoire::io::Mapper::~Mapper((internal::marisa::grimoire::io::Mapper *)v10);
  return internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(&v11);
}

void sub_1B3E14450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr((internal::marisa::grimoire::trie::LoudsTrie **)va);
  _Unwind_Resume(a1);
}

internal::marisa::grimoire::trie::LoudsTrie **internal::marisa::Trie::map(internal::marisa::grimoire::trie::LoudsTrie **this, const void *a2, uint64_t a3)
{
  internal::marisa::grimoire::trie::LoudsTrie *v6;
  internal::marisa::grimoire::trie::LoudsTrie *v7;
  internal::marisa::grimoire::trie::LoudsTrie *v8;
  _QWORD *exception;
  _QWORD *v11;
  _BYTE v12[40];
  internal::marisa::grimoire::trie::LoudsTrie *v13;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x200000029;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:41: MARISA_"
                   "NULL_ERROR: (ptr == NULL) && (size != 0)";
  }
  v6 = (internal::marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x1E0DE4E10]);
  if (!v6)
  {
    v13 = 0;
    v11 = __cxa_allocate_exception(0x20uLL);
    *v11 = &off_1E66E4768;
    v11[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    v11[2] = 0x80000002CLL;
    v11[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:44: MARISA_MEMORY"
             "_ERROR: temp.get() == NULL";
  }
  v7 = v6;
  internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie(v6);
  v13 = v7;
  internal::marisa::grimoire::io::Mapper::Mapper((uint64_t)v12);
  internal::marisa::grimoire::io::Mapper::open((internal::marisa::grimoire::io::Mapper *)v12, a2, a3);
  internal::marisa::grimoire::trie::LoudsTrie::map(v13, (internal::marisa::grimoire::io::Mapper *)v12);
  v8 = *this;
  *this = v13;
  v13 = v8;
  internal::marisa::grimoire::io::Mapper::~Mapper((internal::marisa::grimoire::io::Mapper *)v12);
  return internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(&v13);
}

void sub_1B3E145C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr((internal::marisa::grimoire::trie::LoudsTrie **)va);
  _Unwind_Resume(a1);
}

internal::marisa::grimoire::trie::LoudsTrie **internal::marisa::Trie::load(internal::marisa::grimoire::trie::LoudsTrie **this, const char *a2)
{
  internal::marisa::grimoire::trie::LoudsTrie *v4;
  internal::marisa::grimoire::trie::LoudsTrie *v5;
  internal::marisa::grimoire::trie::LoudsTrie *v6;
  _QWORD *exception;
  _QWORD *v9;
  FILE *v10[4];
  internal::marisa::grimoire::trie::LoudsTrie *v11;

  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x200000036;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:54: MARISA_"
                   "NULL_ERROR: filename == NULL";
  }
  v4 = (internal::marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x1E0DE4E10]);
  if (!v4)
  {
    v11 = 0;
    v9 = __cxa_allocate_exception(0x20uLL);
    *v9 = &off_1E66E4768;
    v9[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    v9[2] = 0x800000039;
    v9[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:57: MARISA_MEMORY_"
            "ERROR: temp.get() == NULL";
  }
  v5 = v4;
  internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie(v4);
  v11 = v5;
  internal::marisa::grimoire::io::Reader::Reader((uint64_t)v10);
  internal::marisa::grimoire::io::Reader::open(v10, a2);
  internal::marisa::grimoire::trie::LoudsTrie::read(v11, (internal::marisa::grimoire::io::Reader *)v10);
  v6 = *this;
  *this = v11;
  v11 = v6;
  internal::marisa::grimoire::io::Reader::~Reader(v10);
  return internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(&v11);
}

void sub_1B3E14734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr((internal::marisa::grimoire::trie::LoudsTrie **)va);
  _Unwind_Resume(a1);
}

internal::marisa::grimoire::trie::LoudsTrie **internal::marisa::Trie::read(internal::marisa::grimoire::trie::LoudsTrie **this, int a2)
{
  internal::marisa::grimoire::trie::LoudsTrie *v4;
  internal::marisa::grimoire::trie::LoudsTrie *v5;
  internal::marisa::grimoire::trie::LoudsTrie *v6;
  _QWORD *exception;
  _QWORD *v9;
  FILE *v10[4];
  internal::marisa::grimoire::trie::LoudsTrie *v11;

  if (a2 == -1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x500000043;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:67: MARISA_"
                   "CODE_ERROR: fd == -1";
  }
  v4 = (internal::marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x1E0DE4E10]);
  if (!v4)
  {
    v11 = 0;
    v9 = __cxa_allocate_exception(0x20uLL);
    *v9 = &off_1E66E4768;
    v9[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    v9[2] = 0x800000046;
    v9[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:70: MARISA_MEMORY_"
            "ERROR: temp.get() == NULL";
  }
  v5 = v4;
  internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie(v4);
  v11 = v5;
  internal::marisa::grimoire::io::Reader::Reader((uint64_t)v10);
  internal::marisa::grimoire::io::Reader::open(v10, a2);
  internal::marisa::grimoire::trie::LoudsTrie::read(v11, (internal::marisa::grimoire::io::Reader *)v10);
  v6 = *this;
  *this = v11;
  v11 = v6;
  internal::marisa::grimoire::io::Reader::~Reader(v10);
  return internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(&v11);
}

void sub_1B3E148A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr((internal::marisa::grimoire::trie::LoudsTrie **)va);
  _Unwind_Resume(a1);
}

void internal::marisa::Trie::save(internal::marisa::grimoire::trie::LoudsTrie ***this, const char *a2)
{
  _QWORD *exception;
  const char *v5;
  FILE *v6[4];

  if (!*this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000050;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:80: MARISA_STATE_ERRO"
         "R: trie_.get() == NULL";
    goto LABEL_6;
  }
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x200000051;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:81: MARISA_NULL_ERROR"
         ": filename == NULL";
LABEL_6:
    exception[3] = v5;
  }
  internal::marisa::grimoire::io::Reader::Reader((uint64_t)v6);
  internal::marisa::grimoire::io::Writer::open(v6, a2);
  internal::marisa::grimoire::trie::LoudsTrie::write(*this, (internal::marisa::grimoire::io::Writer *)v6);
  internal::marisa::grimoire::io::Reader::~Reader(v6);
}

void sub_1B3E149BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, FILE *a9)
{
  internal::marisa::grimoire::io::Reader::~Reader(&a9);
  _Unwind_Resume(a1);
}

void internal::marisa::Trie::write(internal::marisa::grimoire::trie::LoudsTrie ***this, int a2)
{
  _QWORD *exception;
  const char *v5;
  FILE *v6[4];

  if (!*this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x10000005ALL;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:90: MARISA_STATE_ERRO"
         "R: trie_.get() == NULL";
    goto LABEL_6;
  }
  if (a2 == -1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x50000005BLL;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:91: MARISA_CODE_ERROR: fd == -1";
LABEL_6:
    exception[3] = v5;
  }
  internal::marisa::grimoire::io::Reader::Reader((uint64_t)v6);
  internal::marisa::grimoire::io::Writer::open(v6, a2);
  internal::marisa::grimoire::trie::LoudsTrie::write(*this, (internal::marisa::grimoire::io::Writer *)v6);
  internal::marisa::grimoire::io::Reader::~Reader(v6);
}

void sub_1B3E14AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, FILE *a9)
{
  internal::marisa::grimoire::io::Reader::~Reader(&a9);
  _Unwind_Resume(a1);
}

void internal::marisa::Trie::write(internal::marisa::grimoire::trie::LoudsTrie ***a1, uint64_t a2)
{
  _QWORD *exception;
  FILE *v5[4];

  if (!*a1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000064;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:100: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  internal::marisa::grimoire::io::Reader::Reader((uint64_t)v5);
  internal::marisa::grimoire::io::Reader::open((uint64_t)v5, a2);
  internal::marisa::grimoire::trie::LoudsTrie::write(*a1, (internal::marisa::grimoire::io::Writer *)v5);
  internal::marisa::grimoire::io::Reader::~Reader(v5);
}

void sub_1B3E14B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, FILE *a9)
{
  internal::marisa::grimoire::io::Reader::~Reader(&a9);
  _Unwind_Resume(a1);
}

uint64_t internal::marisa::Trie::get_payload(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *exception;

  v3 = *a1;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x10000006DLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:109: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  return internal::marisa::grimoire::trie::LoudsTrie::get_payload(v3, a2, a3);
}

uint64_t internal::marisa::Trie::lookup(internal::marisa::grimoire::vector::BitVector **a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  internal::marisa::grimoire::vector::BitVector *v4;
  _QWORD *exception;

  v4 = *a1;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000073;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:115: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  return internal::marisa::grimoire::trie::LoudsTrie::lookup(v4, a2, a3, a4);
}

void internal::marisa::Trie::reverse_lookup(internal::marisa::grimoire::trie::LoudsTrie **this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X8>)
{
  internal::marisa::grimoire::trie::LoudsTrie *v3;
  _QWORD *exception;

  v3 = *this;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000079;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:121: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  internal::marisa::grimoire::trie::LoudsTrie::reverse_lookup(v3, a2, a3);
}

uint64_t internal::marisa::Trie::common_prefix_search(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *exception;

  v4 = *a1;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x10000007FLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:127: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  return internal::marisa::grimoire::trie::LoudsTrie::common_prefix_search(v4, a2, a3, a4);
}

void internal::marisa::Trie::predictive_search(internal::marisa::grimoire::vector::BitVector **a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  internal::marisa::grimoire::vector::BitVector *v5;
  _QWORD *exception;

  v5 = *a1;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000086;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:134: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  internal::marisa::grimoire::trie::LoudsTrie::predictive_search(v5, a2, a3, a4, a5);
}

void internal::marisa::Trie::advance(internal::marisa::grimoire::vector::BitVector **a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  internal::marisa::grimoire::vector::BitVector *v5;
  _QWORD *exception;

  v5 = *a1;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x10000008CLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:140: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  internal::marisa::grimoire::trie::LoudsTrie::advance(v5, a2, a3, a4, a5);
}

void internal::marisa::Trie::enumerate_entries(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *exception;

  v4 = *a1;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000093;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:147: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  internal::marisa::grimoire::trie::LoudsTrie::enumerate_entries(v4, a2, a3, a4);
}

void internal::marisa::Trie::enumerate_children(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *exception;

  v3 = *a1;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000099;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:153: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  internal::marisa::grimoire::trie::LoudsTrie::enumerate_children(v3, a2, a3);
}

uint64_t internal::marisa::Trie::num_tries(internal::marisa::Trie *this)
{
  _QWORD *exception;

  if (!*(_QWORD *)this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x10000009FLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:159: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  return *(_QWORD *)(*(_QWORD *)this + 1072);
}

uint64_t internal::marisa::Trie::num_keys(internal::marisa::Trie *this)
{
  _QWORD *exception;

  if (!*(_QWORD *)this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x1000000A5;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:165: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  return *(_QWORD *)(*(_QWORD *)this + 264);
}

uint64_t internal::marisa::Trie::num_nodes(internal::marisa::Trie *this)
{
  _QWORD *exception;

  if (!*(_QWORD *)this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x1000000ABLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:171: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  return (*(_QWORD *)(*(_QWORD *)this + 48) >> 1) - 1;
}

uint64_t internal::marisa::Trie::tail_mode(internal::marisa::Trie *this)
{
  _QWORD *exception;

  if (!*(_QWORD *)this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x1000000B1;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:177: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  return *(unsigned int *)(*(_QWORD *)this + 1084);
}

uint64_t internal::marisa::Trie::node_order(internal::marisa::Trie *this)
{
  _QWORD *exception;

  if (!*(_QWORD *)this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x1000000B7;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:183: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  return *(unsigned int *)(*(_QWORD *)this + 1088);
}

BOOL internal::marisa::Trie::empty(internal::marisa::Trie *this)
{
  _QWORD *exception;

  if (!*(_QWORD *)this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x1000000BDLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:189: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  return *(_QWORD *)(*(_QWORD *)this + 264) == 0;
}

uint64_t internal::marisa::Trie::size(internal::marisa::Trie *this)
{
  _QWORD *exception;

  if (!*(_QWORD *)this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x1000000C3;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:195: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  return *(_QWORD *)(*(_QWORD *)this + 264);
}

uint64_t internal::marisa::Trie::total_size(internal::marisa::grimoire::trie::LoudsTrie **this)
{
  internal::marisa::grimoire::trie::LoudsTrie *v1;
  _QWORD *exception;

  v1 = *this;
  if (!v1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x1000000C9;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:201: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  return internal::marisa::grimoire::trie::LoudsTrie::total_size(v1);
}

unint64_t internal::marisa::Trie::io_size(internal::marisa::grimoire::trie::LoudsTrie **this)
{
  internal::marisa::grimoire::trie::LoudsTrie *v1;
  _QWORD *exception;

  v1 = *this;
  if (!v1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x1000000CFLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:207: MARISA"
                   "_STATE_ERROR: trie_.get() == NULL";
  }
  return internal::marisa::grimoire::trie::LoudsTrie::io_size(v1);
}

internal::marisa::grimoire::trie::LoudsTrie **internal::marisa::Trie::clear(internal::marisa::grimoire::trie::LoudsTrie **this)
{
  internal::marisa::grimoire::trie::LoudsTrie *v2;

  v2 = *this;
  *this = 0;
  return internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(&v2);
}

uint64_t *internal::marisa::Trie::swap(uint64_t *this, internal::marisa::Trie *a2)
{
  uint64_t v2;

  v2 = *this;
  *this = *(_QWORD *)a2;
  *(_QWORD *)a2 = v2;
  return this;
}

internal::marisa::grimoire::trie::LoudsTrie **internal::marisa::fread(__sFILE *this, __sFILE *a2, internal::marisa::Trie *a3)
{
  _QWORD *exception;
  const char *v5;

  if (!this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x20000010DLL;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:269: MARISA_NULL_ERROR: file == NULL";
    goto LABEL_6;
  }
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x20000010ELL;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:270: MARISA_NULL_ERROR: trie == NULL";
LABEL_6:
    exception[3] = v5;
  }
  return internal::marisa::TrieIO::fread(this, a2, a3);
}

internal::marisa::grimoire::trie::LoudsTrie **internal::marisa::TrieIO::fread(__sFILE *this, __sFILE *a2, internal::marisa::Trie *a3)
{
  internal::marisa::grimoire::trie::LoudsTrie *v5;
  internal::marisa::grimoire::trie::LoudsTrie *v6;
  unsigned __int8 *p;
  _QWORD *exception;
  _QWORD *v10;
  FILE *v11[4];
  internal::marisa::grimoire::trie::LoudsTrie *v12;

  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x2000000E1;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:225: MARISA"
                   "_NULL_ERROR: trie == NULL";
  }
  v5 = (internal::marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x1E0DE4E10]);
  if (!v5)
  {
    v12 = 0;
    v10 = __cxa_allocate_exception(0x20uLL);
    *v10 = &off_1E66E4768;
    v10[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    v10[2] = 0x8000000E4;
    v10[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:228: MARISA_MEMOR"
             "Y_ERROR: temp.get() == NULL";
  }
  v6 = v5;
  internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie(v5);
  v12 = v6;
  internal::marisa::grimoire::io::Reader::Reader((uint64_t)v11);
  internal::marisa::grimoire::io::Reader::open(v11, this);
  internal::marisa::grimoire::trie::LoudsTrie::read(v12, (internal::marisa::grimoire::io::Reader *)v11);
  p = a2->_p;
  a2->_p = (unsigned __int8 *)v12;
  v12 = (internal::marisa::grimoire::trie::LoudsTrie *)p;
  internal::marisa::grimoire::io::Reader::~Reader(v11);
  return internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(&v12);
}

void sub_1B3E15400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr((internal::marisa::grimoire::trie::LoudsTrie **)va);
  _Unwind_Resume(a1);
}

void internal::marisa::fwrite(__sFILE *this, __sFILE *a2, const internal::marisa::Trie *a3)
{
  _QWORD *exception;

  if (!this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x200000114;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:276: MARISA"
                   "_NULL_ERROR: file == NULL";
  }
  internal::marisa::TrieIO::fwrite(this, a2, a3);
}

void internal::marisa::TrieIO::fwrite(__sFILE *this, __sFILE *a2, const internal::marisa::Trie *a3)
{
  _QWORD *exception;
  const char *v6;
  FILE *v7[4];

  if (!this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x2000000EDLL;
    v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:237: MARISA_NULL_ERROR: file == NULL";
    goto LABEL_6;
  }
  if (!a2->_p)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x1000000EELL;
    v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:238: MARISA_STATE_ERR"
         "OR: trie.trie_.get() == NULL";
LABEL_6:
    exception[3] = v6;
  }
  internal::marisa::grimoire::io::Reader::Reader((uint64_t)v7);
  internal::marisa::grimoire::io::Writer::open(v7, this);
  internal::marisa::grimoire::trie::LoudsTrie::write((internal::marisa::grimoire::trie::LoudsTrie **)a2->_p, (internal::marisa::grimoire::io::Writer *)v7);
  internal::marisa::grimoire::io::Reader::~Reader(v7);
}

void sub_1B3E15570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, FILE *a9)
{
  internal::marisa::grimoire::io::Reader::~Reader(&a9);
  _Unwind_Resume(a1);
}

uint64_t internal::marisa::read(uint64_t a1, internal::marisa::grimoire::trie::LoudsTrie **a2)
{
  _QWORD *exception;

  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x20000011ALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:282: MARISA"
                   "_NULL_ERROR: trie == NULL";
  }
  return internal::marisa::TrieIO::read(a1, a2);
}

uint64_t internal::marisa::TrieIO::read(uint64_t a1, internal::marisa::grimoire::trie::LoudsTrie **a2)
{
  internal::marisa::grimoire::trie::LoudsTrie *v4;
  internal::marisa::grimoire::trie::LoudsTrie *v5;
  internal::marisa::grimoire::trie::LoudsTrie *v6;
  _QWORD *exception;
  _QWORD *v9;
  FILE *v10[4];
  internal::marisa::grimoire::trie::LoudsTrie *v11;

  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x2000000F6;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:246: MARISA"
                   "_NULL_ERROR: trie == NULL";
  }
  v4 = (internal::marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x1E0DE4E10]);
  if (!v4)
  {
    v11 = 0;
    v9 = __cxa_allocate_exception(0x20uLL);
    *v9 = &off_1E66E4768;
    v9[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    v9[2] = 0x8000000F9;
    v9[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:249: MARISA_MEMORY"
            "_ERROR: temp.get() == NULL";
  }
  v5 = v4;
  internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie(v4);
  v11 = v5;
  internal::marisa::grimoire::io::Reader::Reader((uint64_t)v10);
  internal::marisa::grimoire::io::Reader::open((uint64_t)v10, a1);
  internal::marisa::grimoire::trie::LoudsTrie::read(v11, (internal::marisa::grimoire::io::Reader *)v10);
  v6 = *a2;
  *a2 = v11;
  v11 = v6;
  internal::marisa::grimoire::io::Reader::~Reader(v10);
  internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(&v11);
  return a1;
}

void sub_1B3E1570C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr((internal::marisa::grimoire::trie::LoudsTrie **)va);
  _Unwind_Resume(a1);
}

uint64_t internal::marisa::TrieIO::write(uint64_t a1, internal::marisa::grimoire::trie::LoudsTrie ***a2)
{
  _QWORD *exception;
  FILE *v6[4];

  if (!*a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc";
    exception[2] = 0x100000103;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/trie.cc:259: MARISA"
                   "_STATE_ERROR: trie.trie_.get() == NULL";
  }
  internal::marisa::grimoire::io::Reader::Reader((uint64_t)v6);
  internal::marisa::grimoire::io::Reader::open((uint64_t)v6, a1);
  internal::marisa::grimoire::trie::LoudsTrie::write(*a2, (internal::marisa::grimoire::io::Writer *)v6);
  internal::marisa::grimoire::io::Reader::~Reader(v6);
  return a1;
}

void sub_1B3E157F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, FILE *a9)
{
  internal::marisa::grimoire::io::Reader::~Reader(&a9);
  _Unwind_Resume(a1);
}

void internal::marisa::Exception::~Exception(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1B5E3061CLL);
}

uint64_t internal::marisa::Exception::what(internal::marisa::Exception *this)
{
  return *((_QWORD *)this + 3);
}

internal::marisa::grimoire::trie::LoudsTrie **internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(internal::marisa::grimoire::trie::LoudsTrie **a1)
{
  internal::marisa::grimoire::trie::LoudsTrie *v2;

  v2 = *a1;
  if (v2)
  {
    internal::marisa::grimoire::trie::LoudsTrie::~LoudsTrie(v2);
    MEMORY[0x1B5E3061C]();
  }
  return a1;
}

uint64_t internal::marisa::grimoire::io::Reader::Reader(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_DWORD *)(this + 8) = -1;
  *(_QWORD *)(this + 16) = 0;
  *(_BYTE *)(this + 24) = 0;
  return this;
}

void internal::marisa::grimoire::io::Reader::~Reader(FILE **this)
{
  if (*((_BYTE *)this + 24))
    fclose(*this);
}

FILE *internal::marisa::grimoire::io::Reader::open(FILE **this, const char *a2)
{
  FILE *result;
  int v4;
  _QWORD *exception;
  FILE *v6;
  int v7;
  FILE *v8;
  char v9;

  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.cc";
    exception[2] = 0x200000023;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader."
                   "cc:35: MARISA_NULL_ERROR: filename == NULL";
  }
  v6 = 0;
  v7 = -1;
  v8 = 0;
  v9 = 0;
  internal::marisa::grimoire::io::Reader::open_((internal::marisa::grimoire::io::Reader *)&v6, a2);
  result = *this;
  *this = v6;
  *((_DWORD *)this + 2) = v7;
  this[2] = v8;
  v4 = *((unsigned __int8 *)this + 24);
  *((_BYTE *)this + 24) = v9;
  if (v4)
    return (FILE *)fclose(result);
  return result;
}

void sub_1B3E15988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, FILE *a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12)
    fclose(a9);
  _Unwind_Resume(exception_object);
}

FILE *internal::marisa::grimoire::io::Reader::open_(internal::marisa::grimoire::io::Reader *this, const char *__filename)
{
  FILE *result;
  _QWORD *exception;

  result = fopen(__filename, "rb");
  if (!result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.cc";
    exception[2] = 0x900000068;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader."
                   "cc:104: MARISA_IO_ERROR: file == NULL";
  }
  *(_QWORD *)this = result;
  *((_BYTE *)this + 24) = 1;
  return result;
}

uint64_t *internal::marisa::grimoire::io::Reader::swap(uint64_t *this, internal::marisa::grimoire::io::Reader *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *this;
  *this = *(_QWORD *)a2;
  *(_QWORD *)a2 = v2;
  LODWORD(v2) = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v2;
  v3 = this[2];
  this[2] = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = v3;
  LOBYTE(v3) = *((_BYTE *)this + 24);
  *((_BYTE *)this + 24) = *((_BYTE *)a2 + 24);
  *((_BYTE *)a2 + 24) = v3;
  return this;
}

FILE *internal::marisa::grimoire::io::Reader::open(FILE **this, __sFILE *a2)
{
  FILE *result;
  int v4;
  _QWORD *exception;

  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.cc";
    exception[2] = 0x20000002CLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader."
                   "cc:44: MARISA_NULL_ERROR: file == NULL";
  }
  result = *this;
  *this = a2;
  *((_DWORD *)this + 2) = -1;
  this[2] = 0;
  v4 = *((unsigned __int8 *)this + 24);
  *((_BYTE *)this + 24) = 0;
  if (v4)
    return (FILE *)fclose(result);
  return result;
}

_QWORD *internal::marisa::grimoire::io::Reader::open_(_QWORD *this, __sFILE *a2)
{
  *this = a2;
  return this;
}

FILE *internal::marisa::grimoire::io::Reader::open(FILE **this, int a2)
{
  FILE *result;
  int v4;
  _QWORD *exception;

  if (a2 == -1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.cc";
    exception[2] = 0x500000035;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader."
                   "cc:53: MARISA_CODE_ERROR: fd == -1";
  }
  result = *this;
  *this = 0;
  *((_DWORD *)this + 2) = a2;
  this[2] = 0;
  v4 = *((unsigned __int8 *)this + 24);
  *((_BYTE *)this + 24) = 0;
  if (v4)
    return (FILE *)fclose(result);
  return result;
}

uint64_t internal::marisa::grimoire::io::Reader::open_(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) = a2;
  return this;
}

FILE *internal::marisa::grimoire::io::Reader::open(uint64_t a1, uint64_t a2)
{
  FILE *result;
  int v4;

  result = *(FILE **)a1;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_QWORD *)(a1 + 16) = a2;
  v4 = *(unsigned __int8 *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = 0;
  if (v4)
    return (FILE *)fclose(result);
  return result;
}

uint64_t internal::marisa::grimoire::io::Reader::open_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  return result;
}

FILE *internal::marisa::grimoire::io::Reader::clear(FILE **this)
{
  FILE *result;
  int v3;

  result = *this;
  *this = 0;
  *((_DWORD *)this + 2) = -1;
  this[2] = 0;
  v3 = *((unsigned __int8 *)this + 24);
  *((_BYTE *)this + 24) = 0;
  if (v3)
    return (FILE *)fclose(result);
  return result;
}

uint64_t internal::marisa::grimoire::io::Reader::seek(uint64_t this, size_t __nitems)
{
  size_t v2;
  uint64_t v3;
  size_t v4;
  _QWORD *exception;
  char v6[1024];
  uint64_t v7;

  v2 = __nitems;
  v3 = this;
  v7 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)this && *(_DWORD *)(this + 8) == -1 && !*(_QWORD *)(this + 16))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.cc";
    exception[2] = 0x10000004FLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader."
                   "cc:79: MARISA_STATE_ERROR: !is_open()";
  }
  if (__nitems)
  {
    if (__nitems > 0x10)
    {
      do
      {
        if (v2 >= 0x400)
          v4 = 1024;
        else
          v4 = v2;
        this = internal::marisa::grimoire::io::Reader::read_data(v3, v6, v4);
        v2 -= v4;
      }
      while (v2);
    }
    else
    {
      return internal::marisa::grimoire::io::Reader::read_data(this, v6, __nitems);
    }
  }
  return this;
}

BOOL internal::marisa::grimoire::io::Reader::is_open(internal::marisa::grimoire::io::Reader *this)
{
  return *(_QWORD *)this || *((_DWORD *)this + 2) != -1 || *((_QWORD *)this + 2) != 0;
}

uint64_t internal::marisa::grimoire::io::Reader::read_data(uint64_t this, char *a2, size_t __nitems)
{
  size_t v3;
  char *v4;
  uint64_t v5;
  FILE *v6;
  size_t v7;
  _QWORD *exception;
  const char *v9;
  _QWORD *v10;

  v3 = __nitems;
  v4 = a2;
  v5 = this;
  v6 = *(FILE **)this;
  if (!*(_QWORD *)this && *(_DWORD *)(this + 8) == -1 && !*(_QWORD *)(this + 16))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.cc";
    exception[2] = 0x100000076;
    v9 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.cc:118: MA"
         "RISA_STATE_ERROR: !is_open()";
    goto LABEL_19;
  }
  if (__nitems)
  {
    if (*(_DWORD *)(this + 8) != -1)
    {
      while (1)
      {
        v7 = v3 >= 0x7FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v3;
        this = read(*(_DWORD *)(v5 + 8), v4, v7);
        if (this <= 0)
          break;
        v4 += this;
        v3 -= this;
        if (!v3)
          return this;
      }
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_1E66E4768;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.cc";
      exception[2] = 0x900000084;
      v9 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.cc:132: "
           "MARISA_IO_ERROR: size_read <= 0";
LABEL_19:
      exception[3] = v9;
    }
    if (v6)
    {
      this = fread(a2, 1uLL, __nitems, v6);
      if (this != v3)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        *exception = &off_1E66E4768;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.cc";
        exception[2] = 0x900000089;
        v9 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.cc:137"
             ": MARISA_IO_ERROR: ::fread(buf, 1, size, file_) != size";
        goto LABEL_19;
      }
    }
    else
    {
      this = *(_QWORD *)(this + 16);
      if (this)
      {
        this = std::istream::read();
        if ((*(_BYTE *)(this + *(_QWORD *)(*(_QWORD *)this - 24) + 32) & 5) != 0)
        {
          v10 = __cxa_allocate_exception(0x20uLL);
          *v10 = &off_1E66E4768;
          v10[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.cc";
          v10[2] = 0x90000008ELL;
          v10[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader."
                   "cc:142: MARISA_IO_ERROR: !stream_->read(static_cast<char*>(buf), static_cast<std::streamsize>(size))";
        }
      }
    }
  }
  return this;
}

void sub_1B3E15EF8()
{
  __break(1u);
}

void sub_1B3E15F5C()
{
  __cxa_end_catch();
  JUMPOUT(0x1B3E15F64);
}

FILE *internal::marisa::grimoire::io::Writer::open(FILE **this, const char *a2)
{
  FILE *result;
  int v4;
  _QWORD *exception;
  FILE *v6;
  int v7;
  FILE *v8;
  char v9;

  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
    exception[2] = 0x200000023;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer."
                   "cc:35: MARISA_NULL_ERROR: filename == NULL";
  }
  v6 = 0;
  v7 = -1;
  v8 = 0;
  v9 = 0;
  internal::marisa::grimoire::io::Writer::open_((internal::marisa::grimoire::io::Writer *)&v6, a2);
  result = *this;
  *this = v6;
  *((_DWORD *)this + 2) = v7;
  this[2] = v8;
  v4 = *((unsigned __int8 *)this + 24);
  *((_BYTE *)this + 24) = v9;
  if (v4)
    return (FILE *)fclose(result);
  return result;
}

void sub_1B3E16038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, FILE *a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12)
    fclose(a9);
  _Unwind_Resume(exception_object);
}

FILE *internal::marisa::grimoire::io::Writer::open_(internal::marisa::grimoire::io::Writer *this, const char *__filename)
{
  FILE *result;
  _QWORD *exception;

  result = fopen(__filename, "wb");
  if (!result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
    exception[2] = 0x900000068;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer."
                   "cc:104: MARISA_IO_ERROR: file == NULL";
  }
  *(_QWORD *)this = result;
  *((_BYTE *)this + 24) = 1;
  return result;
}

FILE *internal::marisa::grimoire::io::Writer::open(FILE **this, __sFILE *a2)
{
  FILE *result;
  int v4;
  _QWORD *exception;

  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
    exception[2] = 0x20000002CLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer."
                   "cc:44: MARISA_NULL_ERROR: file == NULL";
  }
  result = *this;
  *this = a2;
  *((_DWORD *)this + 2) = -1;
  this[2] = 0;
  v4 = *((unsigned __int8 *)this + 24);
  *((_BYTE *)this + 24) = 0;
  if (v4)
    return (FILE *)fclose(result);
  return result;
}

FILE *internal::marisa::grimoire::io::Writer::open(FILE **this, int a2)
{
  FILE *result;
  int v4;
  _QWORD *exception;

  if (a2 == -1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
    exception[2] = 0x500000035;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer."
                   "cc:53: MARISA_CODE_ERROR: fd == -1";
  }
  result = *this;
  *this = 0;
  *((_DWORD *)this + 2) = a2;
  this[2] = 0;
  v4 = *((unsigned __int8 *)this + 24);
  *((_BYTE *)this + 24) = 0;
  if (v4)
    return (FILE *)fclose(result);
  return result;
}

uint64_t internal::marisa::grimoire::io::Writer::seek(uint64_t this, size_t __nitems)
{
  size_t v2;
  uint64_t v3;
  size_t v4;
  _QWORD *exception;
  _QWORD __buf[129];

  v2 = __nitems;
  v3 = this;
  __buf[128] = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)this && *(_DWORD *)(this + 8) == -1 && !*(_QWORD *)(this + 16))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
    exception[2] = 0x10000004FLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer."
                   "cc:79: MARISA_STATE_ERROR: !is_open()";
  }
  if (__nitems)
  {
    if (__nitems > 0x10)
    {
      bzero(__buf, 0x400uLL);
      do
      {
        if (v2 >= 0x400)
          v4 = 1024;
        else
          v4 = v2;
        this = internal::marisa::grimoire::io::Writer::write_data(v3, (char *)__buf, v4);
        v2 -= v4;
      }
      while (v2);
    }
    else
    {
      __buf[0] = 0;
      __buf[1] = 0;
      return internal::marisa::grimoire::io::Writer::write_data(this, (char *)__buf, __nitems);
    }
  }
  return this;
}

uint64_t internal::marisa::grimoire::io::Writer::write_data(uint64_t this, char *__buf, size_t __nitems)
{
  size_t v3;
  char *v4;
  uint64_t v5;
  FILE *v6;
  size_t v7;
  _QWORD *exception;
  const char *v9;
  _QWORD *v10;

  v3 = __nitems;
  v4 = __buf;
  v5 = this;
  v6 = *(FILE **)this;
  if (!*(_QWORD *)this && *(_DWORD *)(this + 8) == -1 && !*(_QWORD *)(this + 16))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
    exception[2] = 0x100000076;
    v9 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc:118: MA"
         "RISA_STATE_ERROR: !is_open()";
    goto LABEL_20;
  }
  if (__nitems)
  {
    if (*(_DWORD *)(this + 8) != -1)
    {
      while (1)
      {
        v7 = v3 >= 0x7FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v3;
        this = write(*(_DWORD *)(v5 + 8), v4, v7);
        if (this <= 0)
          break;
        v4 += this;
        v3 -= this;
        if (!v3)
          return this;
      }
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_1E66E4768;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
      exception[2] = 0x900000084;
      v9 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc:132: "
           "MARISA_IO_ERROR: size_written <= 0";
LABEL_20:
      exception[3] = v9;
    }
    if (v6)
    {
      if (fwrite(__buf, 1uLL, __nitems, v6) != __nitems)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        *exception = &off_1E66E4768;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
        exception[2] = 0x900000089;
        v9 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc:137"
             ": MARISA_IO_ERROR: ::fwrite(data, 1, size, file_) != size";
        goto LABEL_20;
      }
      this = fflush(*(FILE **)v5);
      if ((_DWORD)this)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        *exception = &off_1E66E4768;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
        exception[2] = 0x90000008ALL;
        v9 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc:138"
             ": MARISA_IO_ERROR: ::fflush(file_) != 0";
        goto LABEL_20;
      }
    }
    else
    {
      this = *(_QWORD *)(this + 16);
      if (this)
      {
        this = std::ostream::write();
        if ((*(_BYTE *)(this + *(_QWORD *)(*(_QWORD *)this - 24) + 32) & 5) != 0)
        {
          v10 = __cxa_allocate_exception(0x20uLL);
          *v10 = &off_1E66E4768;
          v10[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.cc";
          v10[2] = 0x90000008FLL;
          v10[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer."
                   "cc:143: MARISA_IO_ERROR: !stream_->write(static_cast<const char*>(data), static_cast<std::streamsize>(size))";
        }
      }
    }
  }
  return this;
}

void sub_1B3E16518()
{
  __break(1u);
}

void sub_1B3E1657C()
{
  __cxa_end_catch();
  JUMPOUT(0x1B3E16584);
}

uint64_t internal::marisa::grimoire::io::Mapper::Mapper(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = -1;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = -1;
  return this;
}

void internal::marisa::grimoire::io::Mapper::~Mapper(internal::marisa::grimoire::io::Mapper *this)
{
  void *v2;
  int v3;

  v2 = (void *)*((_QWORD *)this + 1);
  if (v2 != (void *)-1)
    munmap(v2, *((_QWORD *)this + 3));
  v3 = *((_DWORD *)this + 8);
  if (v3 != -1)
    close(v3);
}

void internal::marisa::grimoire::io::Mapper::open(internal::marisa::grimoire::io::Mapper *this, const char *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  int v6;
  _QWORD *exception;
  __int128 v8;
  __int128 v9;
  int v10;

  if (!a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x200000047;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper."
                   "cc:71: MARISA_NULL_ERROR: filename == NULL";
  }
  *(_QWORD *)&v8 = 0;
  *((_QWORD *)&v8 + 1) = -1;
  v9 = 0uLL;
  v10 = -1;
  internal::marisa::grimoire::io::Mapper::open_((internal::marisa::grimoire::io::Mapper *)&v8, a2);
  v3 = v9;
  v4 = *(_OWORD *)this;
  v5 = *((_OWORD *)this + 1);
  *(_OWORD *)this = v8;
  *((_OWORD *)this + 1) = v3;
  v8 = v4;
  v9 = v5;
  v6 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = v10;
  v10 = v6;
  internal::marisa::grimoire::io::Mapper::~Mapper((internal::marisa::grimoire::io::Mapper *)&v8);
}

void sub_1B3E166A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  internal::marisa::grimoire::io::Mapper::~Mapper((internal::marisa::grimoire::io::Mapper *)&a9);
  _Unwind_Resume(a1);
}

void *internal::marisa::grimoire::io::Mapper::open_(internal::marisa::grimoire::io::Mapper *this, const char *a2)
{
  int v4;
  void *result;
  _QWORD *exception;
  const char *v7;
  stat v8;

  if (stat(a2, &v8))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x90000009FLL;
    v7 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc:159: MA"
         "RISA_IO_ERROR: ::stat(filename, &st) != 0";
    goto LABEL_8;
  }
  *((_QWORD *)this + 3) = v8.st_size;
  v4 = open(a2, 0);
  *((_DWORD *)this + 8) = v4;
  if (v4 == -1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x9000000A4;
    v7 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc:164: MA"
         "RISA_IO_ERROR: fd_ == -1";
    goto LABEL_8;
  }
  result = mmap(0, *((_QWORD *)this + 3), 1, 1, v4, 0);
  *((_QWORD *)this + 1) = result;
  if (result == (void *)-1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x9000000A7;
    v7 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc:167: MA"
         "RISA_IO_ERROR: origin_ == MAP_FAILED";
LABEL_8:
    exception[3] = v7;
  }
  *(_QWORD *)this = result;
  *((_QWORD *)this + 2) = *((_QWORD *)this + 3);
  return result;
}

uint64_t *internal::marisa::grimoire::io::Mapper::swap(uint64_t *this, internal::marisa::grimoire::io::Mapper *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *this;
  *this = *(_QWORD *)a2;
  *(_QWORD *)a2 = v2;
  v4 = this[1];
  v3 = this[2];
  v5 = *((_QWORD *)a2 + 2);
  this[1] = *((_QWORD *)a2 + 1);
  this[2] = v5;
  *((_QWORD *)a2 + 1) = v4;
  *((_QWORD *)a2 + 2) = v3;
  v6 = this[3];
  this[3] = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = v6;
  LODWORD(v6) = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = v6;
  return this;
}

__n128 internal::marisa::grimoire::io::Mapper::open(internal::marisa::grimoire::io::Mapper *this, const void *a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  int v5;
  __n128 result;
  _QWORD *exception;
  _OWORD v8[2];
  int v9;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x200000050;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper."
                   "cc:80: MARISA_NULL_ERROR: (ptr == NULL) && (size != 0)";
  }
  v3 = *(_OWORD *)this;
  v4 = *((_OWORD *)this + 1);
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = -1;
  *((_QWORD *)this + 2) = a3;
  *((_QWORD *)this + 3) = 0;
  v8[0] = v3;
  v8[1] = v4;
  v5 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = -1;
  v9 = v5;
  internal::marisa::grimoire::io::Mapper::~Mapper((internal::marisa::grimoire::io::Mapper *)v8);
  return result;
}

_QWORD *internal::marisa::grimoire::io::Mapper::open_(_QWORD *this, const void *a2, uint64_t a3)
{
  *this = a2;
  this[2] = a3;
  return this;
}

uint64_t internal::marisa::grimoire::io::Mapper::seek(internal::marisa::grimoire::io::Mapper *this, unint64_t a2)
{
  _QWORD *exception;
  const char *v4;

  if (!*(_QWORD *)this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x100000059;
    v4 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc:89: MAR"
         "ISA_STATE_ERROR: !is_open()";
    goto LABEL_6;
  }
  if (*((_QWORD *)this + 2) < a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x90000005ALL;
    v4 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc:90: MAR"
         "ISA_IO_ERROR: size > avail_";
LABEL_6:
    exception[3] = v4;
  }
  return internal::marisa::grimoire::io::Mapper::map_data(this, a2);
}

BOOL internal::marisa::grimoire::io::Mapper::is_open(internal::marisa::grimoire::io::Mapper *this)
{
  return *(_QWORD *)this != 0;
}

uint64_t internal::marisa::grimoire::io::Mapper::map_data(internal::marisa::grimoire::io::Mapper *this, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  _QWORD *exception;
  const char *v8;

  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x100000073;
    v8 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc:115: MA"
         "RISA_STATE_ERROR: !is_open()";
LABEL_6:
    exception[3] = v8;
  }
  v3 = *((_QWORD *)this + 2);
  v4 = v3 >= a2;
  v5 = v3 - a2;
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc";
    exception[2] = 0x900000074;
    v8 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.cc:116: MA"
         "RISA_IO_ERROR: size > avail_";
    goto LABEL_6;
  }
  *(_QWORD *)this = v2 + a2;
  *((_QWORD *)this + 2) = v5;
  return v2;
}

__n128 internal::marisa::grimoire::io::Mapper::clear(internal::marisa::grimoire::io::Mapper *this)
{
  __int128 v1;
  __int128 v2;
  __n128 result;
  _OWORD v4[2];
  int v5;

  v1 = *(_OWORD *)this;
  v2 = *((_OWORD *)this + 1);
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = -1;
  v4[0] = v1;
  v4[1] = v2;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v5 = *((_DWORD *)this + 8);
  *((_DWORD *)this + 8) = -1;
  internal::marisa::grimoire::io::Mapper::~Mapper((internal::marisa::grimoire::io::Mapper *)v4);
  return result;
}

internal::marisa::grimoire::trie::LoudsTrie *internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie(internal::marisa::grimoire::trie::LoudsTrie *this)
{
  *(_OWORD *)((char *)this + 25) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 137) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *(_OWORD *)((char *)this + 185) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(_OWORD *)((char *)this + 89) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *(_OWORD *)((char *)this + 233) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *(_OWORD *)((char *)this + 345) = 0u;
  *(_OWORD *)((char *)this + 393) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 297) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *(_OWORD *)((char *)this + 441) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *(_OWORD *)((char *)this + 553) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *(_OWORD *)((char *)this + 601) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *(_OWORD *)((char *)this + 505) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *(_OWORD *)((char *)this + 649) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 697) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_QWORD *)this + 90) = 0;
  *((_DWORD *)this + 182) = 0;
  *((_QWORD *)this + 92) = 0;
  internal::marisa::grimoire::trie::Tail::Tail((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 744));
  *((_BYTE *)this + 1048) = 0;
  *(_OWORD *)((char *)this + 1016) = 0u;
  *(_OWORD *)((char *)this + 1032) = 0u;
  *(_OWORD *)((char *)this + 1000) = 0u;
  *((_OWORD *)this + 66) = 0u;
  *((_QWORD *)this + 134) = 3;
  *((_QWORD *)this + 135) = 0x100000000200;
  *((_DWORD *)this + 272) = 0x20000;
  internal::marisa::grimoire::io::Mapper::Mapper((uint64_t)this + 1096);
  return this;
}

void sub_1B3E16BA0(_Unwind_Exception *a1)
{
  internal::marisa::grimoire::vector::BitVector *v1;
  internal::marisa::grimoire::vector::BitVector *v2;
  internal::marisa::grimoire::vector::BitVector *v3;
  internal::marisa::grimoire::trie::Tail *v4;
  internal::marisa::grimoire::trie::LoudsTrie **v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;

  v9 = *((_QWORD *)v1 + 126);
  if (v9)
    MEMORY[0x1B5E305F8](v9, 0x1000C8077774924);
  internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(v5);
  internal::marisa::grimoire::trie::Tail::~Tail(v4);
  if (*v7)
    MEMORY[0x1B5E305F8](*v7, 0x1000C8077774924);
  if (*v6)
    MEMORY[0x1B5E305F8](*v6, 0x1000C8077774924);
  internal::marisa::grimoire::vector::BitVector::~BitVector(v3);
  internal::marisa::grimoire::vector::BitVector::~BitVector(v2);
  internal::marisa::grimoire::vector::BitVector::~BitVector(v1);
  _Unwind_Resume(a1);
}

void internal::marisa::grimoire::trie::Tail::~Tail(internal::marisa::grimoire::trie::Tail *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 26);
  if (v2)
    MEMORY[0x1B5E305F8](v2, 0x1000C8077774924);
  v3 = *((_QWORD *)this + 20);
  if (v3)
    MEMORY[0x1B5E305F8](v3, 0x1000C8077774924);
  v4 = *((_QWORD *)this + 14);
  if (v4)
    MEMORY[0x1B5E305F8](v4, 0x1000C8077774924);
  v5 = *((_QWORD *)this + 6);
  if (v5)
    MEMORY[0x1B5E305F8](v5, 0x1000C8077774924);
  if (*(_QWORD *)this)
    MEMORY[0x1B5E305F8](*(_QWORD *)this, 0x1000C8077774924);
}

void internal::marisa::grimoire::vector::BitVector::~BitVector(internal::marisa::grimoire::vector::BitVector *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 20);
  if (v2)
    MEMORY[0x1B5E305F8](v2, 0x1000C8077774924);
  v3 = *((_QWORD *)this + 14);
  if (v3)
    MEMORY[0x1B5E305F8](v3, 0x1000C8077774924);
  v4 = *((_QWORD *)this + 8);
  if (v4)
    MEMORY[0x1B5E305F8](v4, 0x1000C8077774924);
  if (*(_QWORD *)this)
    MEMORY[0x1B5E305F8](*(_QWORD *)this, 0x1000C8077774924);
}

void internal::marisa::grimoire::trie::LoudsTrie::~LoudsTrie(internal::marisa::grimoire::trie::LoudsTrie *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  internal::marisa::grimoire::io::Mapper::~Mapper((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 1096));
  v2 = *((_QWORD *)this + 126);
  if (v2)
    MEMORY[0x1B5E305F8](v2, 0x1000C8077774924);
  internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr((internal::marisa::grimoire::trie::LoudsTrie **)this + 125);
  v3 = *((_QWORD *)this + 119);
  if (v3)
    MEMORY[0x1B5E305F8](v3, 0x1000C8077774924);
  v4 = *((_QWORD *)this + 113);
  if (v4)
    MEMORY[0x1B5E305F8](v4, 0x1000C8077774924);
  v5 = *((_QWORD *)this + 107);
  if (v5)
    MEMORY[0x1B5E305F8](v5, 0x1000C8077774924);
  v6 = *((_QWORD *)this + 99);
  if (v6)
    MEMORY[0x1B5E305F8](v6, 0x1000C8077774924);
  v7 = *((_QWORD *)this + 93);
  if (v7)
    MEMORY[0x1B5E305F8](v7, 0x1000C8077774924);
  v8 = *((_QWORD *)this + 84);
  if (v8)
    MEMORY[0x1B5E305F8](v8, 0x1000C8077774924);
  v9 = *((_QWORD *)this + 78);
  if (v9)
    MEMORY[0x1B5E305F8](v9, 0x1000C8077774924);
  v10 = *((_QWORD *)this + 72);
  if (v10)
    MEMORY[0x1B5E305F8](v10, 0x1000C8077774924);
  v11 = *((_QWORD *)this + 66);
  if (v11)
    MEMORY[0x1B5E305F8](v11, 0x1000C8077774924);
  v12 = *((_QWORD *)this + 60);
  if (v12)
    MEMORY[0x1B5E305F8](v12, 0x1000C8077774924);
  v13 = *((_QWORD *)this + 52);
  if (v13)
    MEMORY[0x1B5E305F8](v13, 0x1000C8077774924);
  v14 = *((_QWORD *)this + 46);
  if (v14)
    MEMORY[0x1B5E305F8](v14, 0x1000C8077774924);
  v15 = *((_QWORD *)this + 40);
  if (v15)
    MEMORY[0x1B5E305F8](v15, 0x1000C8077774924);
  v16 = *((_QWORD *)this + 34);
  if (v16)
    MEMORY[0x1B5E305F8](v16, 0x1000C8077774924);
  v17 = *((_QWORD *)this + 26);
  if (v17)
    MEMORY[0x1B5E305F8](v17, 0x1000C8077774924);
  v18 = *((_QWORD *)this + 20);
  if (v18)
    MEMORY[0x1B5E305F8](v18, 0x1000C8077774924);
  v19 = *((_QWORD *)this + 14);
  if (v19)
    MEMORY[0x1B5E305F8](v19, 0x1000C8077774924);
  v20 = *((_QWORD *)this + 8);
  if (v20)
    MEMORY[0x1B5E305F8](v20, 0x1000C8077774924);
  if (*(_QWORD *)this)
    MEMORY[0x1B5E305F8](*(_QWORD *)this, 0x1000C8077774924);
}

void internal::marisa::grimoire::trie::LoudsTrie::build(internal::marisa::grimoire::trie::LoudsTrie *a1, uint64_t *a2, _QWORD *a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD v10[2];
  int v11;

  v7 = 3;
  v8 = 0x100000000200;
  v9 = 0x20000;
  internal::marisa::grimoire::trie::Config::parse_((internal::marisa::grimoire::trie::Config *)&v7, a4);
  v10[0] = v7;
  v10[1] = v8;
  v11 = v9;
  internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie((internal::marisa::grimoire::trie::LoudsTrie *)&v7);
  internal::marisa::grimoire::trie::LoudsTrie::build_((uint64_t)&v7, a2, a3, (uint64_t)v10);
  internal::marisa::grimoire::trie::LoudsTrie::swap(a1, (internal::marisa::grimoire::trie::LoudsTrie *)&v7);
  internal::marisa::grimoire::trie::LoudsTrie::~LoudsTrie((internal::marisa::grimoire::trie::LoudsTrie *)&v7);
}

void sub_1B3E17078(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  internal::marisa::grimoire::trie::LoudsTrie::~LoudsTrie((internal::marisa::grimoire::trie::LoudsTrie *)va);
  _Unwind_Resume(a1);
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::build_(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t i;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  _OWORD v33[3];
  __int128 v34;
  unint64_t v35[4];
  _OWORD v36[3];
  char v37;

  memset(v36, 0, 41);
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Key>::resize((uint64_t *)v36, (a2[1] - *a2) >> 4);
  v8 = *a2;
  if (a2[1] != *a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = *((_QWORD *)&v36[0] + 1) + v10;
      v13 = (uint64_t *)(v8 + v9);
      v15 = *v13;
      v14 = v13[1];
      *(_QWORD *)v12 = v15;
      *(_DWORD *)(v12 + 8) = v14;
      *(_DWORD *)(v12 + 12) = 1065353216;
      ++v11;
      v8 = *a2;
      v10 += 24;
      v9 += 16;
    }
    while (v11 < (a2[1] - *a2) >> 4);
  }
  v34 = 0u;
  memset(v35, 0, 25);
  internal::marisa::grimoire::trie::LoudsTrie::build_trie<internal::marisa::grimoire::trie::Key>(a1, (uint64_t *)v36, &v34, a4, 1);
  memset(v33, 0, 41);
  internal::marisa::grimoire::vector::Vector<std::pair<unsigned int,unsigned int>>::resize((uint64_t *)v33, v35[1]);
  v16 = *((_QWORD *)&v33[1] + 1);
  if (*((_QWORD *)&v33[1] + 1))
  {
    v17 = 0;
    v18 = *((_QWORD *)&v34 + 1);
    v19 = (_DWORD *)(*((_QWORD *)&v33[0] + 1) + 4);
    do
    {
      *(v19 - 1) = *(_DWORD *)(v18 + 4 * v17);
      *v19 = v17++;
      v19 += 2;
    }
    while (v16 != v17);
  }
  v20 = v34;
  v34 = 0u;
  memset(v35, 0, 25);
  if (v20)
  {
    MEMORY[0x1B5E305F8](v20, 0x1000C8077774924);
    v16 = *((_QWORD *)&v33[1] + 1);
  }
  v21 = 126 - 2 * __clz(v16);
  if (v16)
    v22 = v21;
  else
    v22 = 0;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *,false>(*((uint64_t *)&v33[0] + 1), (unsigned int *)(*((_QWORD *)&v33[0] + 1) + 8 * v16), (uint64_t)&v37, v22, 1);
  if (*((_QWORD *)&v33[1] + 1))
  {
    v23 = 0;
    v24 = 0;
    do
    {
      for (i = *((_QWORD *)&v33[0] + 1); ; i = *((_QWORD *)&v33[0] + 1))
      {
        v26 = *(unsigned int *)(i + 8 * v23);
        if (v24 >= v26)
          break;
        internal::marisa::grimoire::vector::BitVector::push_back((uint64_t *)(a1 + 208), 0);
        ++v24;
      }
      if (v24 == v26)
      {
        internal::marisa::grimoire::vector::BitVector::push_back((uint64_t *)(a1 + 208), 1);
        ++v24;
      }
      ++v23;
    }
    while (v23 < *((_QWORD *)&v33[1] + 1));
  }
  else
  {
    v24 = 0;
  }
  for (; v24 < *(_QWORD *)(a1 + 648); ++v24)
    internal::marisa::grimoire::vector::BitVector::push_back((uint64_t *)(a1 + 208), 0);
  v27 = (uint64_t *)(a1 + 208);
  internal::marisa::grimoire::vector::BitVector::push_back(v27, 0);
  internal::marisa::grimoire::vector::BitVector::build((internal::marisa::grimoire::vector::BitVector *)v27, 0, 1);
  if (a3)
  {
    std::vector<unsigned long>::resize((uint64_t)a3, (a2[1] - *a2) >> 4);
    if (a2[1] != *a2)
    {
      v28 = 0;
      v29 = 0;
      v30 = *((_QWORD *)&v33[0] + 1);
      do
      {
        v31 = internal::marisa::grimoire::vector::BitVector::rank1((internal::marisa::grimoire::vector::BitVector *)v27, *(unsigned int *)(v30 + v28));
        v30 = *((_QWORD *)&v33[0] + 1);
        *(_QWORD *)(*a3 + 8 * *(unsigned int *)(*((_QWORD *)&v33[0] + 1) + v28 + 4)) = v31;
        ++v29;
        v28 += 8;
      }
      while (v29 < (a2[1] - *a2) >> 4);
    }
  }
  if (*(_QWORD *)&v33[0])
    MEMORY[0x1B5E305F8](*(_QWORD *)&v33[0], 0x1000C8077774924);
  if ((_QWORD)v34)
    MEMORY[0x1B5E305F8](v34, 0x1000C8077774924);
  result = *(_QWORD *)&v36[0];
  if (*(_QWORD *)&v36[0])
    return MEMORY[0x1B5E305F8](*(_QWORD *)&v36[0], 0x1000C8077774924);
  return result;
}

void sub_1B3E1737C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a15)
    MEMORY[0x1B5E305F8](a15, 0x1000C8077774924);
  if (a21)
    MEMORY[0x1B5E305F8](a21, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t *internal::marisa::grimoire::trie::LoudsTrie::swap(internal::marisa::grimoire::trie::LoudsTrie *this, internal::marisa::grimoire::trie::LoudsTrie *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  internal::marisa::grimoire::vector::BitVector::swap(this, a2);
  internal::marisa::grimoire::vector::BitVector::swap((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 208), (internal::marisa::grimoire::trie::LoudsTrie *)((char *)a2 + 208));
  internal::marisa::grimoire::vector::BitVector::swap((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 416), (internal::marisa::grimoire::trie::LoudsTrie *)((char *)a2 + 416));
  internal::marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this + 78, (uint64_t *)a2 + 78);
  internal::marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this + 84, (uint64_t *)a2 + 84);
  v4 = *((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = *((_QWORD *)a2 + 90);
  *((_QWORD *)a2 + 90) = v4;
  LODWORD(v4) = *((_DWORD *)this + 182);
  *((_DWORD *)this + 182) = *((_DWORD *)a2 + 182);
  *((_DWORD *)a2 + 182) = v4;
  v5 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = *((_QWORD *)a2 + 92);
  *((_QWORD *)a2 + 92) = v5;
  internal::marisa::grimoire::trie::Tail::swap((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 744), (internal::marisa::grimoire::trie::LoudsTrie *)((char *)a2 + 744));
  v6 = *((_QWORD *)this + 125);
  *((_QWORD *)this + 125) = *((_QWORD *)a2 + 125);
  *((_QWORD *)a2 + 125) = v6;
  internal::marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this + 126, (uint64_t *)a2 + 126);
  v7 = *((_QWORD *)this + 132);
  *((_QWORD *)this + 132) = *((_QWORD *)a2 + 132);
  *((_QWORD *)a2 + 132) = v7;
  v8 = *((_QWORD *)this + 133);
  *((_QWORD *)this + 133) = *((_QWORD *)a2 + 133);
  *((_QWORD *)a2 + 133) = v8;
  v9 = *((_QWORD *)this + 134);
  *((_QWORD *)this + 134) = *((_QWORD *)a2 + 134);
  *((_QWORD *)a2 + 134) = v9;
  v10 = *((_QWORD *)this + 135);
  *((_QWORD *)this + 135) = *((_QWORD *)a2 + 135);
  *((_QWORD *)a2 + 135) = v10;
  LODWORD(v9) = *((_DWORD *)this + 272);
  *((_DWORD *)this + 272) = *((_DWORD *)a2 + 272);
  *((_DWORD *)a2 + 272) = v9;
  return internal::marisa::grimoire::io::Mapper::swap((uint64_t *)this + 137, (internal::marisa::grimoire::trie::LoudsTrie *)((char *)a2 + 1096));
}

void internal::marisa::grimoire::trie::LoudsTrie::map(internal::marisa::grimoire::trie::LoudsTrie *this, internal::marisa::grimoire::io::Mapper *a2)
{
  _BYTE v4[1096];
  uint64_t v5[5];

  internal::marisa::grimoire::trie::Header::map((internal::marisa::grimoire::trie::Header *)v4, a2);
  internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie((internal::marisa::grimoire::trie::LoudsTrie *)v4);
  internal::marisa::grimoire::trie::LoudsTrie::map_((internal::marisa::grimoire::trie::LoudsTrie *)v4, a2);
  internal::marisa::grimoire::io::Mapper::swap(v5, a2);
  internal::marisa::grimoire::trie::LoudsTrie::swap(this, (internal::marisa::grimoire::trie::LoudsTrie *)v4);
  internal::marisa::grimoire::trie::LoudsTrie::~LoudsTrie((internal::marisa::grimoire::trie::LoudsTrie *)v4);
}

void sub_1B3E17574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  internal::marisa::grimoire::trie::LoudsTrie::~LoudsTrie((internal::marisa::grimoire::trie::LoudsTrie *)&a9);
  _Unwind_Resume(a1);
}

_BYTE *internal::marisa::grimoire::trie::Header::map(internal::marisa::grimoire::trie::Header *this, internal::marisa::grimoire::io::Mapper *a2)
{
  _BYTE *result;
  uint64_t v3;
  int v4;
  int v5;
  _QWORD *exception;

  result = (_BYTE *)internal::marisa::grimoire::io::Mapper::map_data(a2, 0x10uLL);
  if (*result != 87)
    goto LABEL_7;
  v3 = 1u;
  do
  {
    if (v3 == 16)
      return result;
    v4 = result[v3];
    v5 = internal::marisa::grimoire::trie::Header::get_header(void)::buf[v3++];
  }
  while (v4 == v5);
  if ((unint64_t)(v3 - 2) <= 0xE)
  {
LABEL_7:
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/header.h";
    exception[2] = 0xA00000015;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/heade"
                   "r.h:21: MARISA_FORMAT_ERROR: !test_header(ptr)";
  }
  return result;
}

double internal::marisa::grimoire::trie::LoudsTrie::map_(internal::marisa::grimoire::trie::LoudsTrie *this, internal::marisa::grimoire::io::Mapper *a2)
{
  internal::marisa::grimoire::trie::LoudsTrie *v4;
  internal::marisa::grimoire::trie::LoudsTrie *v5;
  internal::marisa::grimoire::trie::LoudsTrie *v6;
  unsigned int v7;
  double result;
  _QWORD *exception;
  uint64_t v10;
  double v11;
  int v12;

  internal::marisa::grimoire::vector::BitVector::map(this, a2);
  internal::marisa::grimoire::vector::BitVector::map((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 208), a2);
  internal::marisa::grimoire::vector::BitVector::map((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 416), a2);
  internal::marisa::grimoire::vector::Vector<unsigned char>::map((__int128 *)this + 39, a2);
  internal::marisa::grimoire::vector::FlatVector::map((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 672), a2);
  internal::marisa::grimoire::trie::Tail::map((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 744), a2);
  if (*((_QWORD *)this + 59) && !*((_QWORD *)this + 96))
  {
    v4 = (internal::marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x1E0DE4E10]);
    v5 = v4;
    if (v4)
      internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie(v4);
    v10 = *((_QWORD *)this + 125);
    *((_QWORD *)this + 125) = v5;
    internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr((internal::marisa::grimoire::trie::LoudsTrie **)&v10);
    v6 = (internal::marisa::grimoire::trie::LoudsTrie *)*((_QWORD *)this + 125);
    if (!v6)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_1E66E4768;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x800000249;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/lou"
                     "ds-trie.cc:585: MARISA_MEMORY_ERROR: next_trie_.get() == NULL";
    }
    internal::marisa::grimoire::trie::LoudsTrie::map_(v6, a2);
  }
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Cache>::map((__int128 *)this + 63, a2);
  *((_QWORD *)this + 132) = *((_QWORD *)this + 129) - 1;
  *((_QWORD *)this + 133) = *(unsigned int *)internal::marisa::grimoire::io::Mapper::map_data(a2, 4uLL);
  v7 = *(_DWORD *)internal::marisa::grimoire::io::Mapper::map_data(a2, 4uLL);
  v10 = 3;
  *(_QWORD *)&v11 = 0x100000000200;
  v12 = 0x20000;
  internal::marisa::grimoire::trie::Config::parse_((internal::marisa::grimoire::trie::Config *)&v10, v7);
  *((_QWORD *)this + 134) = v10;
  result = v11;
  *((double *)this + 135) = v11;
  *((_DWORD *)this + 272) = v12;
  return result;
}

void sub_1B3E177B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E30610](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

void internal::marisa::grimoire::trie::LoudsTrie::read(internal::marisa::grimoire::trie::LoudsTrie *this, internal::marisa::grimoire::io::Reader *a2)
{
  _BYTE v4[1136];

  internal::marisa::grimoire::trie::Header::read((internal::marisa::grimoire::trie::Header *)v4, a2);
  internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie((internal::marisa::grimoire::trie::LoudsTrie *)v4);
  internal::marisa::grimoire::trie::LoudsTrie::read_((internal::marisa::grimoire::trie::LoudsTrie *)v4, a2);
  internal::marisa::grimoire::trie::LoudsTrie::swap(this, (internal::marisa::grimoire::trie::LoudsTrie *)v4);
  internal::marisa::grimoire::trie::LoudsTrie::~LoudsTrie((internal::marisa::grimoire::trie::LoudsTrie *)v4);
}

void sub_1B3E1782C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  internal::marisa::grimoire::trie::LoudsTrie::~LoudsTrie((internal::marisa::grimoire::trie::LoudsTrie *)&a9);
  _Unwind_Resume(a1);
}

uint64_t internal::marisa::grimoire::trie::Header::read(internal::marisa::grimoire::trie::Header *this, internal::marisa::grimoire::io::Reader *a2)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  int v5;
  _QWORD *exception;
  char v7[16];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  result = internal::marisa::grimoire::io::Reader::read_data((uint64_t)a2, v7, 0x10uLL);
  if (v7[0] != 87)
    goto LABEL_7;
  v3 = 1u;
  do
  {
    if (v3 == 16)
      return result;
    v4 = v7[v3];
    v5 = internal::marisa::grimoire::trie::Header::get_header(void)::buf[v3++];
  }
  while (v4 == v5);
  if ((unint64_t)(v3 - 2) <= 0xE)
  {
LABEL_7:
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/header.h";
    exception[2] = 0xA0000001BLL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/heade"
                   "r.h:27: MARISA_FORMAT_ERROR: !test_header(buf)";
  }
  return result;
}

double internal::marisa::grimoire::trie::LoudsTrie::read_(internal::marisa::grimoire::trie::LoudsTrie *this, internal::marisa::grimoire::io::Reader *a2)
{
  internal::marisa::grimoire::trie::LoudsTrie *v4;
  internal::marisa::grimoire::trie::LoudsTrie *v5;
  internal::marisa::grimoire::trie::LoudsTrie *v6;
  double result;
  _QWORD *exception;
  int v9;
  uint64_t v10;
  double v11;
  int v12;

  internal::marisa::grimoire::vector::BitVector::read(this, a2);
  internal::marisa::grimoire::vector::BitVector::read((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 208), a2);
  internal::marisa::grimoire::vector::BitVector::read((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 416), a2);
  internal::marisa::grimoire::vector::Vector<unsigned char>::read((__int128 *)this + 39, a2);
  internal::marisa::grimoire::vector::FlatVector::read((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 672), a2);
  internal::marisa::grimoire::trie::Tail::read((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 744), a2);
  if (*((_QWORD *)this + 59) && !*((_QWORD *)this + 96))
  {
    v4 = (internal::marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x1E0DE4E10]);
    v5 = v4;
    if (v4)
      internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie(v4);
    v10 = *((_QWORD *)this + 125);
    *((_QWORD *)this + 125) = v5;
    internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr((internal::marisa::grimoire::trie::LoudsTrie **)&v10);
    v6 = (internal::marisa::grimoire::trie::LoudsTrie *)*((_QWORD *)this + 125);
    if (!v6)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_1E66E4768;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x800000264;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/lou"
                     "ds-trie.cc:612: MARISA_MEMORY_ERROR: next_trie_.get() == NULL";
    }
    internal::marisa::grimoire::trie::LoudsTrie::read_(v6, a2);
  }
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Cache>::read((__int128 *)this + 63, a2);
  *((_QWORD *)this + 132) = *((_QWORD *)this + 129) - 1;
  LODWORD(v10) = 0;
  internal::marisa::grimoire::io::Reader::read_data((uint64_t)a2, (char *)&v10, 4uLL);
  *((_QWORD *)this + 133) = v10;
  v9 = 0;
  internal::marisa::grimoire::io::Reader::read_data((uint64_t)a2, (char *)&v9, 4uLL);
  v10 = 3;
  *(_QWORD *)&v11 = 0x100000000200;
  v12 = 0x20000;
  internal::marisa::grimoire::trie::Config::parse_((internal::marisa::grimoire::trie::Config *)&v10, v9);
  *((_QWORD *)this + 134) = v10;
  result = v11;
  *((double *)this + 135) = v11;
  *((_DWORD *)this + 272) = v12;
  return result;
}

void sub_1B3E17ABC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E30610](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::write(internal::marisa::grimoire::trie::LoudsTrie **this, internal::marisa::grimoire::io::Writer *a2)
{
  internal::marisa::grimoire::io::Writer::write_data((uint64_t)a2, "We love Marisa.", 0x10uLL);
  return internal::marisa::grimoire::trie::LoudsTrie::write_(this, a2);
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::write_(internal::marisa::grimoire::trie::LoudsTrie **this, internal::marisa::grimoire::io::Writer *a2)
{
  internal::marisa::grimoire::trie::LoudsTrie *v4;
  int v6;
  unsigned int __buf;

  internal::marisa::grimoire::vector::BitVector::write_((internal::marisa::grimoire::vector::BitVector *)this, a2);
  internal::marisa::grimoire::vector::BitVector::write_((internal::marisa::grimoire::vector::BitVector *)(this + 26), a2);
  internal::marisa::grimoire::vector::BitVector::write_((internal::marisa::grimoire::vector::BitVector *)(this + 52), a2);
  internal::marisa::grimoire::vector::Vector<unsigned char>::write_((uint64_t)(this + 78), a2);
  internal::marisa::grimoire::vector::FlatVector::write_((internal::marisa::grimoire::vector::FlatVector *)(this + 84), a2);
  internal::marisa::grimoire::trie::Tail::write((internal::marisa::grimoire::trie::Tail *)(this + 93), a2);
  v4 = this[125];
  if (v4)
    internal::marisa::grimoire::trie::LoudsTrie::write_(v4, a2);
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::write_((uint64_t)(this + 126), a2);
  __buf = this[133];
  internal::marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&__buf, 4uLL);
  v6 = *((_DWORD *)this + 271) | *((_DWORD *)this + 268) | *((_DWORD *)this + 272);
  return internal::marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&v6, 4uLL);
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::get_payload(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v5;

  v3 = *(unsigned __int8 *)(a2 + 31);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 16);
  if (v3)
    return 0;
  v5 = *(_QWORD *)a2;
  if (((*(_QWORD *)(*(_QWORD *)(a1 + 224) + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
    return 0;
  *a3 = internal::marisa::grimoire::vector::BitVector::rank1((internal::marisa::grimoire::vector::BitVector *)(a1 + 208), v5);
  return 1;
}

void internal::marisa::grimoire::trie::LoudsTrie::predictive_search(internal::marisa::grimoire::vector::BitVector *this, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  std::string __p;
  char v12;
  unint64_t v13;
  unint64_t v14;

  v13 = 0;
  v14 = 0;
  v12 = 0;
  memset(&__p, 0, sizeof(__p));
  while (v13 < a3)
  {
    if ((internal::marisa::grimoire::trie::LoudsTrie::predictive_find_child(this, a2, a3, &v13, &v14, &__p) & 1) == 0)
      goto LABEL_8;
  }
  v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = __p.__r_.__value_.__r.__words[1];
  internal::marisa::grimoire::trie::LoudsTrie::enumerate_entries_DFS((unint64_t)this, v14, (uint64_t)&__p, &v12, a4, (v10 - a3) & ~((v10 - (int)a3) >> 31), a5);
LABEL_8:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1B3E17D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::predictive_find_child(internal::marisa::grimoire::vector::BitVector *this, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5, std::string *a6)
{
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v12 = (*(unsigned __int8 *)(a2 + *a4) ^ (32 * *a5) ^ *a5) & *((_QWORD *)this + 132);
  v13 = *((_QWORD *)this + 128);
  if (*a5 != *(_DWORD *)(v13 + 12 * v12))
  {
    v15 = internal::marisa::grimoire::vector::BitVector::select0(this, *a5);
    v16 = *((_QWORD *)this + 2);
    if (((*(_QWORD *)(v16 + (((v15 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v15 + 1)) & 1) != 0)
    {
      v17 = v15 - *a5;
      *a5 = v17;
      v18 = v15 + 2;
      v19 = 0xFFFFFFFFLL;
      while (1)
      {
        if (((*(_QWORD *)(*((_QWORD *)this + 54) + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
        {
          if (v19 == 0xFFFFFFFFLL)
          {
            v19 = internal::marisa::grimoire::vector::BitVector::rank1((internal::marisa::grimoire::vector::BitVector *)((char *)this + 416), v17);
            v17 = *a5;
          }
          else
          {
            ++v19;
          }
          v21 = *a4;
          v22 = *((_QWORD *)this + 90);
          v23 = (unint64_t)(v22 * v19) >> 6;
          v24 = (v22 * v19) & 0x3F;
          v25 = v24 + v22;
          v26 = *((_QWORD *)this + 86);
          v27 = *(_QWORD *)(v26 + 8 * v23) >> v24;
          if (v25 > 0x40)
            v27 |= (2 * *(_QWORD *)(v26 + 8 * v23 + 8)) << (v24 ^ 0x3Fu);
          v28 = *(unsigned __int8 *)(*((_QWORD *)this + 80) + v17) | ((*((_DWORD *)this + 182) & v27) << 8);
          v29 = *((_QWORD *)this + 125);
          if (v29)
          {
            if ((internal::marisa::grimoire::trie::LoudsTrie::prefix_match_(v29, a2, a3, a4, v28, a6) & 1) != 0)
              return 1;
          }
          else if (internal::marisa::grimoire::trie::Tail::prefix_match((_QWORD *)this + 93, a2, a3, a4, v28, a6))
          {
            return 1;
          }
          if (*a4 != v21)
            return 0;
          v17 = *a5;
          v16 = *((_QWORD *)this + 2);
        }
        else
        {
          v20 = *(unsigned __int8 *)(*((_QWORD *)this + 80) + v17);
          if (v20 == *(unsigned __int8 *)(a2 + *a4))
          {
            std::string::push_back(a6, v20);
            ++*a4;
            return 1;
          }
        }
        *a5 = ++v17;
        v30 = *(_QWORD *)(v16 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v18;
        ++v18;
        if ((v30 & 1) == 0)
          return 0;
      }
    }
    return 0;
  }
  v14 = *(unsigned int *)(v13 + 12 * v12 + 8);
  if (v14 > 0xFFFFFEFF)
  {
    std::string::push_back(a6, v14);
    ++*a4;
    goto LABEL_24;
  }
  v31 = *((_QWORD *)this + 125);
  if (v31)
  {
    if ((internal::marisa::grimoire::trie::LoudsTrie::prefix_match_(v31, a2, a3, a4, v14, a6) & 1) != 0)
      goto LABEL_24;
    return 0;
  }
  if (!internal::marisa::grimoire::trie::Tail::prefix_match((_QWORD *)this + 93, a2, a3, a4, v14, a6))
    return 0;
LABEL_24:
  *a5 = *(unsigned int *)(*((_QWORD *)this + 128) + 12 * v12 + 4);
  return 1;
}

unint64_t internal::marisa::grimoire::trie::LoudsTrie::enumerate_entries_DFS(unint64_t result, unint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5, int a6, uint64_t a7)
{
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  std::string::size_type v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  if (!*a4)
  {
    v11 = result;
    if ((a7 & 0x80000000) != 0 || a6 <= (int)a7)
    {
      if (((*(_QWORD *)(*(_QWORD *)(result + 224) + ((a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) == 0
        || ((v12 = internal::marisa::grimoire::vector::BitVector::rank1((internal::marisa::grimoire::vector::BitVector *)(result + 208), a2), v13 = *(char *)(a3 + 23), v13 >= 0)? (v14 = a3): (v14 = *(_QWORD *)a3), v13 >= 0 ? (v15 = *(unsigned __int8 *)(a3 + 23)) : (v15 = *(_QWORD *)(a3 + 8)), result = std::function<void ()(long long,std::string_view,BOOL &)>::operator()(a5, v12, v14, v15, (uint64_t)a4), !*a4))
      {
        v16 = *(char *)(a3 + 23) >= 0 ? *(unsigned __int8 *)(a3 + 23) : *(_QWORD *)(a3 + 8);
        result = internal::marisa::grimoire::vector::BitVector::select0((internal::marisa::grimoire::vector::BitVector *)v11, a2);
        if (!*a4)
        {
          v17 = result;
          v18 = 0xFFFFFFFFLL;
          do
          {
            if (((*(_QWORD *)(*(_QWORD *)(v11 + 16) + (((v17 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v17 + 1)) & 1) == 0)
              break;
            if (((*(_QWORD *)(*(_QWORD *)(v11 + 432) + (((v17 - a2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v17 - a2)) & 1) != 0)
            {
              if (v18 == 0xFFFFFFFFLL)
                v18 = internal::marisa::grimoire::vector::BitVector::rank1((internal::marisa::grimoire::vector::BitVector *)(v11 + 416), v17 - a2);
              else
                ++v18;
              v19 = *(_QWORD *)(v11 + 720);
              v20 = (unint64_t)(v19 * v18) >> 6;
              v21 = (v19 * v18) & 0x3F;
              v22 = v21 + v19;
              v23 = *(_QWORD *)(v11 + 688);
              v24 = *(_QWORD *)(v23 + 8 * v20) >> v21;
              if (v22 > 0x40)
                v24 |= (2 * *(_QWORD *)(v23 + 8 * v20 + 8)) << (v21 ^ 0x3Fu);
              v25 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 640) - a2 + v17) | ((*(_DWORD *)(v11 + 728) & v24) << 8);
              v26 = *(_QWORD *)(v11 + 1000);
              if (v26)
                internal::marisa::grimoire::trie::LoudsTrie::restore_(v26, (std::string *)a3, v25);
              else
                internal::marisa::grimoire::trie::Tail::restore((_QWORD *)(v11 + 744), (std::string *)a3, v25);
            }
            else
            {
              std::string::push_back((std::string *)a3, *(_BYTE *)(*(_QWORD *)(v11 + 640) - a2 + v17));
            }
            v27 = *(unsigned __int8 *)(a3 + 23);
            if ((v27 & 0x80u) != 0)
              v27 = *(_DWORD *)(a3 + 8);
            internal::marisa::grimoire::trie::LoudsTrie::enumerate_entries_DFS(v11, v17 - a2, a3, a4, a5, (v27 - v16 + a6), a7);
            v28 = *(unsigned __int8 *)(a3 + 23);
            v29 = (char)v28;
            v30 = a3 + v28;
            if (v29 >= 0)
            {
              v31 = a3;
            }
            else
            {
              v30 = *(_QWORD *)a3 + *(_QWORD *)(a3 + 8);
              v31 = *(_QWORD *)a3;
            }
            result = (unint64_t)std::string::erase((std::string *)a3, v16, v30 - (v31 + v16));
            ++v17;
          }
          while (!*a4);
        }
      }
    }
  }
  return result;
}

void internal::marisa::grimoire::trie::LoudsTrie::enumerate_entries(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  void *__p;
  int v18;
  unsigned __int8 v19;
  char v20;

  if ((a4 & 0x80000000) != 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 31);
    v10 = *(_QWORD *)(a2 + 16);
    v9 = *(_BYTE *)(a2 + 31);
LABEL_8:
    v20 = 0;
    v12 = *(_QWORD *)(a2 + 8) + v10;
    v13 = a2 + 8 + v8;
    if (v9 >= 0)
      v14 = v13;
    else
      v14 = v12;
    if (v9 >= 0)
      v15 = a2 + 8;
    else
      v15 = *(_QWORD *)(a2 + 8);
    std::string::__init_with_size[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<char const*>>,std::reverse_iterator<std::__wrap_iter<char const*>>>(&__p, v14, v14, v15, v15, v14 - v15);
    if ((v19 & 0x80u) == 0)
      v16 = v19;
    else
      v16 = v18;
    internal::marisa::grimoire::trie::LoudsTrie::enumerate_entries_DFS(a1, *(_QWORD *)a2, (uint64_t)&__p, &v20, a3, v16, a4);
    if ((char)v19 < 0)
      operator delete(__p);
    return;
  }
  v8 = *(unsigned __int8 *)(a2 + 31);
  v9 = v8;
  v10 = *(_QWORD *)(a2 + 16);
  if ((v8 & 0x80u) == 0)
    v11 = *(unsigned __int8 *)(a2 + 31);
  else
    v11 = *(_QWORD *)(a2 + 16);
  if (v11 <= a4)
    goto LABEL_8;
}

void sub_1B3E1831C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void internal::marisa::grimoire::trie::LoudsTrie::enumerate_children(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  std::string::size_type v7;
  const std::string::value_type **v8;
  std::string *p_p;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  std::string::size_type size;
  std::string *v23;
  std::string *v24;
  char *v25;
  std::string::value_type v26;
  char v28;
  uint64_t v29;
  std::string *v30;
  uint64_t v31;
  int v32;
  std::string::value_type v33;
  uint64_t v34;
  uint64_t v35;
  int v36[2];
  std::string v37;
  unint64_t v38;
  std::string __p;
  unsigned __int8 v40;
  char v41;

  v40 = 0;
  v5 = *(unsigned __int8 *)(a2 + 31);
  v6 = (char)v5;
  v7 = *(_QWORD *)(a2 + 16);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v8 = (const std::string::value_type **)(a2 + 8);
    v38 = *(_QWORD *)a2;
    p_p = &__p;
    if (v6 < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *v8, v7);
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v8;
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v33 = *(_BYTE *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_ - 1);
      v34 = --__p.__r_.__value_.__l.__size_;
    }
    else
    {
      v33 = __p.__r_.__value_.__s.__data_[HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1];
      v34 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v34 & 0x7F;
    }
    p_p->__r_.__value_.__s.__data_[v34] = 0;
    v37.__r_.__value_.__s.__data_[0] = v33;
    v35 = *(_QWORD *)(a3 + 24);
    if (!v35)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, std::string *, unint64_t *, unsigned __int8 *))(*(_QWORD *)v35 + 48))(v35, &v37, &v38, &v40);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v11 = internal::marisa::grimoire::vector::BitVector::select0((internal::marisa::grimoire::vector::BitVector *)a1, *(_QWORD *)a2);
    v12 = v11 - *(_QWORD *)a2;
    *(_QWORD *)v36 = a1 + 744;
    v13 = 0xFFFFFFFFLL;
    do
    {
      ++v11;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 16) + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        break;
      memset(&v37, 0, sizeof(v37));
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 432) + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
      {
        if (v13 == 0xFFFFFFFFLL)
          v13 = internal::marisa::grimoire::vector::BitVector::rank1((internal::marisa::grimoire::vector::BitVector *)(a1 + 416), v12);
        else
          ++v13;
        v14 = *(_QWORD *)(a1 + 720);
        v15 = (unint64_t)(v14 * v13) >> 6;
        v16 = (v14 * v13) & 0x3F;
        v17 = v16 + v14;
        v18 = *(_QWORD *)(a1 + 688);
        v19 = *(_QWORD *)(v18 + 8 * v15) >> v16;
        if (v17 > 0x40)
          v19 |= (2 * *(_QWORD *)(v18 + 8 * v15 + 8)) << (v16 ^ 0x3Fu);
        v20 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + v12) | ((*(_DWORD *)(a1 + 728) & v19) << 8);
        v21 = *(_QWORD *)(a1 + 1000);
        if (v21)
          internal::marisa::grimoire::trie::LoudsTrie::restore_(v21, &v37, v20);
        else
          internal::marisa::grimoire::trie::Tail::restore(*(_QWORD **)v36, &v37, v20);
        size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = &v37;
        else
          v23 = (std::string *)v37.__r_.__value_.__r.__words[0];
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v37.__r_.__value_.__l.__size_;
        if (size)
        {
          v24 = (std::string *)((char *)v23 + size - 1);
          if (v24 > v23)
          {
            v25 = &v23->__r_.__value_.__s.__data_[1];
            do
            {
              v26 = *(v25 - 1);
              *(v25 - 1) = v24->__r_.__value_.__s.__data_[0];
              v24->__r_.__value_.__s.__data_[0] = v26;
              v24 = (std::string *)((char *)v24 - 1);
            }
            while (v25++ < (char *)v24);
          }
        }
      }
      else
      {
        std::string::push_back(&v37, *(_BYTE *)(*(_QWORD *)(a1 + 640) + v12));
      }
      __p = v37;
      memset(&v37, 0, sizeof(v37));
      v38 = v12;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v28 = *(_BYTE *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_ - 1);
        v29 = --__p.__r_.__value_.__l.__size_;
      }
      else
      {
        v28 = *((_BYTE *)&v38 + HIBYTE(__p.__r_.__value_.__r.__words[2]) + 7);
        v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
        *((_BYTE *)&__p.__r_.__value_.__s + 23) = v29 & 0x7F;
        v30 = &__p;
      }
      v30->__r_.__value_.__s.__data_[v29] = 0;
      v41 = v28;
      v31 = *(_QWORD *)(a3 + 24);
      if (!v31)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, char *, unint64_t *, unsigned __int8 *))(*(_QWORD *)v31 + 48))(v31, &v41, &v38, &v40);
      v32 = v40;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      ++v12;
    }
    while (!v32);
  }
}

void sub_1B3E1866C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::lookup(internal::marisa::grimoire::vector::BitVector *this, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  unint64_t v9;
  unint64_t v10;

  v9 = 0;
  v10 = 0;
  while (v9 < a3)
  {
    if ((internal::marisa::grimoire::trie::LoudsTrie::find_child(this, a2, a3, &v9, &v10) & 1) == 0)
      return 0;
  }
  if (((*(_QWORD *)(*((_QWORD *)this + 28) + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    *a4 = internal::marisa::grimoire::vector::BitVector::rank1((internal::marisa::grimoire::vector::BitVector *)((char *)this + 208), v10);
    return 1;
  }
  return 0;
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::find_child(internal::marisa::grimoire::vector::BitVector *this, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t *a5)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v10 = (*(unsigned __int8 *)(a2 + *a4) ^ (32 * *a5) ^ *a5) & *((_QWORD *)this + 132);
  v11 = *((_QWORD *)this + 128);
  if (*a5 != *(_DWORD *)(v11 + 12 * v10))
  {
    v13 = internal::marisa::grimoire::vector::BitVector::select0(this, *a5);
    v14 = *((_QWORD *)this + 2);
    if (((*(_QWORD *)(v14 + (((v13 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v13 + 1)) & 1) != 0)
    {
      v15 = v13 - *a5;
      *a5 = v15;
      v16 = v13 + 2;
      v17 = 0xFFFFFFFFLL;
      while (1)
      {
        if (((*(_QWORD *)(*((_QWORD *)this + 54) + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
        {
          if (v17 == 0xFFFFFFFFLL)
          {
            v17 = internal::marisa::grimoire::vector::BitVector::rank1((internal::marisa::grimoire::vector::BitVector *)((char *)this + 416), v15);
            v15 = *a5;
          }
          else
          {
            ++v17;
          }
          v18 = *a4;
          v19 = *((_QWORD *)this + 90);
          v20 = (unint64_t)(v19 * v17) >> 6;
          v21 = (v19 * v17) & 0x3F;
          v22 = v21 + v19;
          v23 = *((_QWORD *)this + 86);
          v24 = *(_QWORD *)(v23 + 8 * v20) >> v21;
          if (v22 > 0x40)
            v24 |= (2 * *(_QWORD *)(v23 + 8 * v20 + 8)) << (v21 ^ 0x3Fu);
          v25 = *(unsigned __int8 *)(*((_QWORD *)this + 80) + v15) | ((*((_DWORD *)this + 182) & v24) << 8);
          v26 = *((_QWORD *)this + 125);
          if (v26)
          {
            if ((internal::marisa::grimoire::trie::LoudsTrie::match_(v26, a2, a3, a4, v25) & 1) != 0)
              return 1;
          }
          else if ((internal::marisa::grimoire::trie::Tail::match((_QWORD *)this + 93, a2, a3, a4, v25) & 1) != 0)
          {
            return 1;
          }
          if (*a4 != v18)
            return 0;
          v15 = *a5;
          v14 = *((_QWORD *)this + 2);
        }
        else if (*(unsigned __int8 *)(*((_QWORD *)this + 80) + v15) == *(unsigned __int8 *)(a2 + *a4))
        {
          ++*a4;
          return 1;
        }
        *a5 = ++v15;
        v27 = *(_QWORD *)(v14 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v16;
        ++v16;
        if ((v27 & 1) == 0)
          return 0;
      }
    }
    return 0;
  }
  v12 = *(unsigned int *)(v11 + 12 * v10 + 8);
  if (v12 > 0xFFFFFEFF)
  {
    ++*a4;
    goto LABEL_24;
  }
  v28 = *((_QWORD *)this + 125);
  if (v28)
  {
    if ((internal::marisa::grimoire::trie::LoudsTrie::match_(v28, a2, a3, a4, v12) & 1) != 0)
      goto LABEL_24;
    return 0;
  }
  if ((internal::marisa::grimoire::trie::Tail::match((_QWORD *)this + 93, a2, a3, a4, v12) & 1) == 0)
    return 0;
LABEL_24:
  *a5 = *(unsigned int *)(*((_QWORD *)this + 128) + 12 * v10 + 4);
  return 1;
}

void internal::marisa::grimoire::trie::LoudsTrie::reverse_lookup(internal::marisa::grimoire::trie::LoudsTrie *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  int v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  BOOL v30;
  unint64_t v31;
  char v32;
  _QWORD *exception;

  if (*((_QWORD *)this + 33) <= a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
    exception[2] = 0x3000000C6;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds"
                   "-trie.cc:198: MARISA_BOUND_ERROR: payload_id >= size()";
  }
  v5 = internal::marisa::grimoire::vector::BitVector::select1((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 208), a2);
  if (v5)
  {
    v6 = v5;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    while (1)
    {
      if (((*(_QWORD *)(*((_QWORD *)this + 54) + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      {
        if (*(char *)(a3 + 23) >= 0)
          v7 = *(unsigned __int8 *)(a3 + 23);
        else
          v7 = *(_QWORD *)(a3 + 8);
        v8 = *(unsigned __int8 *)(*((_QWORD *)this + 80) + v6);
        v9 = internal::marisa::grimoire::vector::BitVector::rank1((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 416), v6);
        v10 = *((_QWORD *)this + 90);
        v11 = (unint64_t)(v10 * v9) >> 6;
        v12 = (v10 * v9) & 0x3F;
        v13 = v12 + v10;
        v14 = *((_QWORD *)this + 86);
        v15 = *(_QWORD *)(v14 + 8 * v11);
        if (v13 > 0x40)
          v16 = ((2 * *(_QWORD *)(v14 + 8 * v11 + 8)) << (v12 ^ 0x3Fu)) | (v15 >> v12);
        else
          v16 = v15 >> v12;
        v17 = v8 | ((*((_DWORD *)this + 182) & v16) << 8);
        v18 = *((_QWORD *)this + 125);
        if (v18)
          internal::marisa::grimoire::trie::LoudsTrie::restore_(v18, (std::string *)a3, v17);
        else
          internal::marisa::grimoire::trie::Tail::restore((_QWORD *)this + 93, (std::string *)a3, v17);
        v19 = *(unsigned __int8 *)(a3 + 23);
        if ((v19 & 0x80u) == 0)
          v20 = a3;
        else
          v20 = *(_QWORD *)a3;
        if ((v19 & 0x80u) != 0)
          v19 = *(_QWORD *)(a3 + 8);
        if (v7 != v19)
        {
          v21 = (_BYTE *)(v20 + v19 - 1);
          if ((unint64_t)v21 > v20 + v7)
          {
            v22 = v20 + v7 + 1;
            do
            {
              v23 = *(_BYTE *)(v22 - 1);
              *(_BYTE *)(v22 - 1) = *v21;
              *v21-- = v23;
              v24 = v22++ >= (unint64_t)v21;
            }
            while (!v24);
          }
        }
      }
      else
      {
        std::string::push_back((std::string *)a3, *(_BYTE *)(*((_QWORD *)this + 80) + v6));
      }
      if (v6 <= *((_QWORD *)this + 133))
        break;
      v6 = internal::marisa::grimoire::vector::BitVector::select1(this, v6) + ~v6;
    }
    v25 = *(char *)(a3 + 23);
    v26 = v25 < 0;
    if (v25 >= 0)
      v27 = a3;
    else
      v27 = *(_QWORD *)a3;
    if (v26)
      v28 = *(_QWORD *)(a3 + 8);
    else
      v28 = *(unsigned __int8 *)(a3 + 23);
    v29 = (_BYTE *)(v27 + v28 - 1);
    if (v28)
      v30 = (unint64_t)v29 > v27;
    else
      v30 = 0;
    if (v30)
    {
      v31 = v27 + 1;
      do
      {
        v32 = *(_BYTE *)(v31 - 1);
        *(_BYTE *)(v31 - 1) = *v29;
        *v29-- = v32;
        v24 = v31++ >= (unint64_t)v29;
      }
      while (!v24);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a3, "");
  }
}

void sub_1B3E18C28(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::common_prefix_search(uint64_t this, uint64_t a2, unint64_t a3, uint64_t a4)
{
  internal::marisa::grimoire::vector::BitVector *v7;
  internal::marisa::grimoire::vector::BitVector *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  char v15;

  v7 = (internal::marisa::grimoire::vector::BitVector *)this;
  v15 = 0;
  v13 = 0;
  v14 = 0;
  v8 = (internal::marisa::grimoire::vector::BitVector *)(this + 208);
  if ((**(_BYTE **)(this + 224) & 1) != 0)
  {
    v9 = internal::marisa::grimoire::vector::BitVector::rank1((internal::marisa::grimoire::vector::BitVector *)(this + 208), 0);
    this = std::function<void ()(long long,std::string_view,BOOL &)>::operator()(a4, v9, a2, 0, (uint64_t)&v15);
    if (v15)
      v10 = 1;
    else
      v10 = a3 == 0;
    if (v10)
      return this;
  }
  else if (!a3)
  {
    return this;
  }
  this = internal::marisa::grimoire::trie::LoudsTrie::find_child(v7, a2, a3, &v13, &v14);
  if ((_DWORD)this)
  {
    do
    {
      if (((*(_QWORD *)(*((_QWORD *)v7 + 28) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
      {
        v11 = internal::marisa::grimoire::vector::BitVector::rank1(v8, v14);
        this = std::function<void ()(long long,std::string_view,BOOL &)>::operator()(a4, v11, a2, v13, (uint64_t)&v15);
        if (v15)
          v12 = 1;
        else
          v12 = v13 >= a3;
        if (v12)
          return this;
      }
      else if (v13 >= a3)
      {
        return this;
      }
      this = internal::marisa::grimoire::trie::LoudsTrie::find_child(v7, a2, a3, &v13, &v14);
    }
    while ((this & 1) != 0);
  }
  return this;
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::total_size(internal::marisa::grimoire::trie::LoudsTrie *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  internal::marisa::grimoire::trie::LoudsTrie *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = *((_QWORD *)this + 3);
  v3 = *((_QWORD *)this + 11);
  v4 = *((_QWORD *)this + 17);
  v5 = *((_QWORD *)this + 23);
  v6 = *((_QWORD *)this + 29);
  v7 = *((_QWORD *)this + 37);
  v8 = *((_QWORD *)this + 43);
  v9 = *((_QWORD *)this + 49);
  v10 = *((_QWORD *)this + 55);
  v11 = *((_QWORD *)this + 63);
  v12 = *((_QWORD *)this + 69);
  v13 = *((_QWORD *)this + 75);
  v14 = *((_QWORD *)this + 81);
  v15 = *((_QWORD *)this + 87);
  v16 = *((_QWORD *)this + 96);
  v17 = *((_QWORD *)this + 102);
  v18 = *((_QWORD *)this + 110);
  v19 = *((_QWORD *)this + 116);
  v20 = *((_QWORD *)this + 122);
  v21 = (internal::marisa::grimoire::trie::LoudsTrie *)*((_QWORD *)this + 125);
  if (v21)
  {
    v34 = v3;
    v35 = v4;
    v26 = v18;
    v27 = v11;
    v22 = v5;
    v32 = v20;
    v33 = v2;
    v30 = v7;
    v31 = v14;
    v28 = v17;
    v29 = v12;
    v23 = v16;
    v24 = v13;
    v21 = (internal::marisa::grimoire::trie::LoudsTrie *)internal::marisa::grimoire::trie::LoudsTrie::total_size(v21);
    v12 = v29;
    v7 = v30;
    v14 = v31;
    v20 = v32;
    v2 = v33;
    v3 = v34;
    v13 = v24;
    v16 = v23;
    v11 = v27;
    v17 = v28;
    v5 = v22;
    v18 = v26;
    v4 = v35;
  }
  return (uint64_t)v21
       + 12 * *((_QWORD *)this + 129)
       + 12 * v18
       + 12 * v11
       + 12 * v3
       + 12 * v7
       + 8 * v2
       + 8 * v17
       + 8 * v15
       + 8 * v10
       + 8 * v6
       + 4 * v4
       + 4 * v8
       + 4 * v9
       + 4 * v12
       + 4 * v13
       + 4 * v19
       + 4 * v20
       + 4 * v5
       + v16
       + v14;
}

unint64_t internal::marisa::grimoire::trie::LoudsTrie::io_size(internal::marisa::grimoire::trie::LoudsTrie *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  internal::marisa::grimoire::trie::LoudsTrie *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *((_QWORD *)this + 11);
  v3 = *((_QWORD *)this + 17);
  v4 = *((_QWORD *)this + 23);
  v28 = *((_QWORD *)this + 29);
  v29 = *((_QWORD *)this + 3);
  v5 = *((_QWORD *)this + 37);
  v6 = *((_QWORD *)this + 43);
  v7 = *((_QWORD *)this + 49);
  v25 = *((_QWORD *)this + 63);
  v26 = *((_QWORD *)this + 69);
  v27 = *((_QWORD *)this + 55);
  v8 = *((_QWORD *)this + 75);
  v9 = *((_QWORD *)this + 81);
  v10 = *((_QWORD *)this + 87);
  v11 = internal::marisa::grimoire::trie::Tail::io_size((internal::marisa::grimoire::trie::LoudsTrie *)((char *)this + 744));
  v12 = (internal::marisa::grimoire::trie::LoudsTrie *)*((_QWORD *)this + 125);
  if (v12)
  {
    v24 = v8;
    v13 = v5;
    v14 = v6;
    v15 = v7;
    v16 = v10;
    v17 = v2;
    v18 = v3;
    v19 = v4;
    v20 = v11;
    v21 = internal::marisa::grimoire::trie::LoudsTrie::io_size(v12);
    v11 = v20;
    v4 = v19;
    v3 = v18;
    v2 = v17;
    v10 = v16;
    v7 = v15;
    v6 = v14;
    v5 = v13;
    v8 = v24;
    v22 = v21 - 16;
  }
  else
  {
    v22 = 0;
  }
  return ((12 * v2 + 7) & 0xFFFFFFFFFFFFFFF8)
       + ((4 * v3 + 7) & 0xFFFFFFFFFFFFFFF8)
       + ((4 * v4 + 7) & 0xFFFFFFFFFFFFFFF8)
       + ((12 * v5 + 7) & 0xFFFFFFFFFFFFFFF8)
       + ((4 * v6 + 7) & 0xFFFFFFFFFFFFFFF8)
       + ((4 * v7 + 7) & 0xFFFFFFFFFFFFFFF8)
       + ((12 * v25 + 7) & 0xFFFFFFFFFFFFFFF8)
       + ((4 * v26 + 7) & 0xFFFFFFFFFFFFFFF8)
       + ((v9 + 7) & 0xFFFFFFFFFFFFFFF8)
       + ((4 * v8 + 7) & 0xFFFFFFFFFFFFFFF8)
       + v11
       + 8 * (v28 + v29 + v27 + v10)
       + v22
       + ((12 * *((_QWORD *)this + 129) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 184;
}

unint64_t internal::marisa::grimoire::trie::Tail::io_size(internal::marisa::grimoire::trie::Tail *this)
{
  return ((*((_QWORD *)this + 3) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 8 * *((_QWORD *)this + 9)
       + ((4 * *((_QWORD *)this + 23) + 7) & 0xFFFFFFFFFFFFFFF8)
       + ((4 * *((_QWORD *)this + 29) + 7) & 0xFFFFFFFFFFFFFFF8)
       + ((12 * *((_QWORD *)this + 17) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 48;
}

void internal::marisa::grimoire::trie::LoudsTrie::clear(internal::marisa::grimoire::trie::LoudsTrie *this)
{
  _BYTE v2[1136];

  internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie((internal::marisa::grimoire::trie::LoudsTrie *)v2);
  internal::marisa::grimoire::trie::LoudsTrie::swap((internal::marisa::grimoire::trie::LoudsTrie *)v2, this);
  internal::marisa::grimoire::trie::LoudsTrie::~LoudsTrie((internal::marisa::grimoire::trie::LoudsTrie *)v2);
}

void sub_1B3E19108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  internal::marisa::grimoire::trie::LoudsTrie::~LoudsTrie((internal::marisa::grimoire::trie::LoudsTrie *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *internal::marisa::grimoire::vector::BitVector::swap(internal::marisa::grimoire::vector::BitVector *this, internal::marisa::grimoire::vector::BitVector *a2)
{
  uint64_t v4;
  uint64_t v5;

  internal::marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this, (uint64_t *)a2);
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = v4;
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = v5;
  internal::marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this + 8, (uint64_t *)a2 + 8);
  internal::marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this + 14, (uint64_t *)a2 + 14);
  return internal::marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this + 20, (uint64_t *)a2 + 20);
}

uint64_t *internal::marisa::grimoire::vector::Vector<unsigned char>::swap(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  v3 = result[1];
  result[1] = a2[1];
  a2[1] = v3;
  v4 = result[2];
  v5 = result[3];
  v6 = a2[3];
  result[2] = a2[2];
  result[3] = v6;
  a2[2] = v4;
  a2[3] = v5;
  v7 = result[4];
  result[4] = a2[4];
  a2[4] = v7;
  LOBYTE(v7) = *((_BYTE *)result + 40);
  *((_BYTE *)result + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a2 + 40) = v7;
  return result;
}

uint64_t *internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Key>::resize(uint64_t *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a2;
  v3 = result;
  v4 = result[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 > 0x555555555555555)
      v5 = 0xAAAAAAAAAAAAAAALL;
    if (v4 > a2 >> 1)
      a2 = v5;
    result = (uint64_t *)internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Key>::realloc(result, a2);
  }
  v6 = v3[3];
  v7 = v2 - v6;
  if (v2 > v6)
  {
    v8 = 24 * v6;
    do
    {
      v9 = v3[1] + v8;
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_DWORD *)(v9 + 16) = 0;
      v8 += 24;
      --v7;
    }
    while (v7);
  }
  v3[3] = v2;
  return result;
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::build_trie<internal::marisa::grimoire::trie::Key>(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  _DWORD *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17[3];
  uint64_t v18;
  uint64_t v19;
  int v20;

  internal::marisa::grimoire::trie::LoudsTrie::build_current_trie<internal::marisa::grimoire::trie::Key>((uint64_t *)a1, (uint64_t)a2, a3, a4, a5);
  memset(v17, 0, 41);
  if (a2[3])
    internal::marisa::grimoire::trie::LoudsTrie::build_next_trie<internal::marisa::grimoire::trie::Key>(a1, a2, v17, a4, a5);
  v9 = *(_DWORD **)(a1 + 1000);
  if (v9)
  {
    v10 = (v9[268] + 1) | v9[271] | v9[272];
    v18 = 3;
    v19 = 0x100000000200;
    v20 = 0x20000;
    internal::marisa::grimoire::trie::Config::parse_((internal::marisa::grimoire::trie::Config *)&v18, v10);
  }
  else
  {
    if (*(_QWORD *)(a1 + 840))
      v11 = 0x2000;
    else
      v11 = 4096;
    v12 = *(_DWORD *)(a4 + 16) | *(_DWORD *)(a4 + 8) | v11 | 1;
    v18 = 3;
    v19 = 0x100000000200;
    v20 = 0x20000;
    internal::marisa::grimoire::trie::Config::parse_((internal::marisa::grimoire::trie::Config *)&v18, v12);
  }
  *(_QWORD *)(a1 + 1072) = v18;
  *(_QWORD *)(a1 + 1080) = v19;
  *(_DWORD *)(a1 + 1088) = v20;
  internal::marisa::grimoire::vector::BitVector::build((internal::marisa::grimoire::vector::BitVector *)(a1 + 416), 0, 0);
  if (*((_QWORD *)&v17[1] + 1))
  {
    v13 = 0;
    v14 = 0;
    do
    {
      do
      {
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 432) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14;
        ++v14;
      }
      while ((v15 & 1) == 0);
      *(_BYTE *)(*(_QWORD *)(a1 + 632) + v14 - 1) = *(_DWORD *)(*((_QWORD *)&v17[0] + 1) + 4 * v13);
      *(_DWORD *)(*((_QWORD *)&v17[0] + 1) + 4 * v13++) >>= 8;
    }
    while (v13 < *((_QWORD *)&v17[1] + 1));
  }
  internal::marisa::grimoire::vector::FlatVector::build((__int128 *)(a1 + 672), (uint64_t)v17);
  internal::marisa::grimoire::trie::LoudsTrie::fill_cache(a1);
  result = *(_QWORD *)&v17[0];
  if (*(_QWORD *)&v17[0])
    return MEMORY[0x1B5E305F8](*(_QWORD *)&v17[0], 0x1000C8077774924);
  return result;
}

void sub_1B3E19414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1B5E305F8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

void internal::marisa::grimoire::vector::Vector<std::pair<unsigned int,unsigned int>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = a1[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 >> 60)
      v5 = 0x1FFFFFFFFFFFFFFFLL;
    if (v4 > a2 >> 1)
      a2 = v5;
    internal::marisa::grimoire::vector::Vector<unsigned long long>::realloc(a1, a2);
  }
  v6 = a1[3];
  if (v2 > v6)
    bzero((void *)(a1[1] + 8 * v6), 8 * (v2 - v6));
  a1[3] = v2;
}

uint64_t *internal::marisa::grimoire::vector::BitVector::push_back(uint64_t *this, int a2)
{
  unint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *exception;
  uint64_t v7;

  v2 = this[6];
  if (v2 == 0xFFFFFFFF)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/bit-vector.h";
    exception[2] = 0x70000003ALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/bit"
                   "-vector.h:58: MARISA_SIZE_ERROR: size_ == MARISA_UINT32_MAX";
  }
  v4 = this;
  v5 = this[3];
  if (v2 == v5 << 6)
  {
    v7 = 0;
    this = internal::marisa::grimoire::vector::Vector<unsigned long long>::resize(this, v5 + 1, &v7);
    v2 = v4[6];
  }
  if (a2)
  {
    *(_QWORD *)(v4[1] + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v2;
    ++v4[7];
  }
  v4[6] = v2 + 1;
  return this;
}

uint64_t internal::marisa::grimoire::vector::BitVector::build(internal::marisa::grimoire::vector::BitVector *this, int a2, int a3)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t result;
  _OWORD v8[4];
  __int128 v9;
  _BYTE v10[25];
  __int128 v11;
  _BYTE v12[25];
  __int128 v13;
  _BYTE v14[25];

  memset(v8, 0, 41);
  v11 = 0u;
  memset(v12, 0, sizeof(v12));
  v13 = 0u;
  memset(v14, 0, sizeof(v14));
  v8[3] = 0u;
  v9 = 0u;
  memset(v10, 0, sizeof(v10));
  internal::marisa::grimoire::vector::BitVector::build_index((internal::marisa::grimoire::vector::BitVector *)v8, this, a2, a3);
  internal::marisa::grimoire::vector::Vector<unsigned long long>::shrink(this);
  v4 = v8[0];
  v8[0] = *(_OWORD *)this;
  *(_OWORD *)this = v4;
  v5 = *(_QWORD *)&v8[1];
  *(_QWORD *)&v8[1] = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v5;
  v6 = *(_OWORD *)((char *)&v8[1] + 8);
  *(_OWORD *)((char *)&v8[1] + 8) = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)((char *)this + 24) = v6;
  LOBYTE(v5) = BYTE8(v8[2]);
  BYTE8(v8[2]) = *((_BYTE *)this + 40);
  *((_BYTE *)this + 40) = v5;
  internal::marisa::grimoire::vector::BitVector::swap(this, (internal::marisa::grimoire::vector::BitVector *)v8);
  if ((_QWORD)v13)
    MEMORY[0x1B5E305F8](v13, 0x1000C8077774924);
  if ((_QWORD)v11)
    MEMORY[0x1B5E305F8](v11, 0x1000C8077774924);
  if ((_QWORD)v9)
    MEMORY[0x1B5E305F8](v9, 0x1000C8077774924);
  result = *(_QWORD *)&v8[0];
  if (*(_QWORD *)&v8[0])
    return MEMORY[0x1B5E305F8](*(_QWORD *)&v8[0], 0x1000C8077774924);
  return result;
}

void sub_1B3E196B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  internal::marisa::grimoire::vector::BitVector::~BitVector((internal::marisa::grimoire::vector::BitVector *)&a9);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::build_next_trie<internal::marisa::grimoire::trie::Key>(uint64_t a1, uint64_t *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unsigned int *v10;
  _DWORD *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  internal::marisa::grimoire::trie::LoudsTrie *v21;
  internal::marisa::grimoire::trie::LoudsTrie *v22;
  uint64_t v23;
  uint64_t result;
  _QWORD *exception;
  __int128 v26;
  _BYTE v27[25];
  internal::marisa::grimoire::trie::LoudsTrie *v28;

  if (*(_QWORD *)a4 == a5)
  {
    v26 = 0u;
    memset(v27, 0, sizeof(v27));
    internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Entry>::resize((uint64_t *)&v26, a2[3]);
    v9 = a2[3];
    if (v9)
    {
      v10 = (unsigned int *)(*((_QWORD *)&v26 + 1) + 8);
      v11 = (_DWORD *)(a2[1] + 8);
      do
      {
        v12 = *((_QWORD *)v11 - 1);
        v13 = *v11;
        v11 += 6;
        *((_QWORD *)v10 - 1) = v12 + v13 - 1;
        *v10 = v13;
        v10 += 4;
        --v9;
      }
      while (v9);
    }
    internal::marisa::grimoire::trie::Tail::build((__int128 *)(a1 + 744), (uint64_t)&v26, a3, *(_DWORD *)(a4 + 12));
  }
  else
  {
    v26 = 0u;
    memset(v27, 0, sizeof(v27));
    internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Key>::resize((uint64_t *)&v26, a2[3]);
    if (a2[3])
    {
      v15 = 0;
      v16 = 0;
      do
      {
        v17 = *((_QWORD *)&v26 + 1) + v15;
        v18 = a2[1] + v15;
        v19 = *(unsigned int *)(v18 + 8);
        *(_QWORD *)v17 = *(_QWORD *)v18 + v19;
        *(_DWORD *)(v17 + 8) = v19;
        *(_DWORD *)(v17 + 12) = *(_DWORD *)(v18 + 12);
        ++v16;
        v15 += 24;
      }
      while (v16 < a2[3]);
    }
    v20 = *a2;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
    *(_OWORD *)((char *)a2 + 25) = 0u;
    if (v20)
      MEMORY[0x1B5E305F8](v20, 0x1000C8077774924);
    v21 = (internal::marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x1E0DE4E10]);
    v22 = v21;
    if (v21)
      internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie(v21);
    v28 = *(internal::marisa::grimoire::trie::LoudsTrie **)(a1 + 1000);
    *(_QWORD *)(a1 + 1000) = v22;
    internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr(&v28);
    v23 = *(_QWORD *)(a1 + 1000);
    if (!v23)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_1E66E4768;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x8000001EBLL;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/lou"
                     "ds-trie.cc:491: MARISA_MEMORY_ERROR: next_trie_.get() == NULL";
    }
    internal::marisa::grimoire::trie::LoudsTrie::build_trie<internal::marisa::grimoire::trie::ReverseKey>(v23, (uint64_t)&v26, a3, a4, a5 + 1);
  }
  result = v26;
  if ((_QWORD)v26)
    return MEMORY[0x1B5E305F8](v26, 0x1000C8077774924);
  return result;
}

void sub_1B3E198F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  MEMORY[0x1B5E30610](v9, MEMORY[0x1E0DE4E10]);
  if (a9)
    MEMORY[0x1B5E305F8](a9, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t *internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Entry>::resize(uint64_t *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = a2;
  v3 = result;
  v4 = result[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 >> 59)
      v5 = 0xFFFFFFFFFFFFFFFLL;
    if (v4 > a2 >> 1)
      a2 = v5;
    result = (uint64_t *)internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Entry>::realloc(result, a2);
  }
  v6 = v3[3];
  v7 = v2 - v6;
  if (v2 > v6)
  {
    v8 = 16 * v6;
    do
    {
      v9 = (_QWORD *)(v3[1] + v8);
      *v9 = 0;
      v9[1] = 0;
      v8 += 16;
      --v7;
    }
    while (v7);
  }
  v3[3] = v2;
  return result;
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::build_trie<internal::marisa::grimoire::trie::ReverseKey>(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  _DWORD *v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17[3];
  uint64_t v18;
  uint64_t v19;
  int v20;

  internal::marisa::grimoire::trie::LoudsTrie::build_current_trie<internal::marisa::grimoire::trie::ReverseKey>((uint64_t *)a1, a2, a3, a4, a5);
  memset(v17, 0, 41);
  if (*(_QWORD *)(a2 + 24))
    internal::marisa::grimoire::trie::LoudsTrie::build_next_trie<internal::marisa::grimoire::trie::ReverseKey>(a1, a2, v17, a4, a5);
  v9 = *(_DWORD **)(a1 + 1000);
  if (v9)
  {
    v10 = (v9[268] + 1) | v9[271] | v9[272];
    v18 = 3;
    v19 = 0x100000000200;
    v20 = 0x20000;
    internal::marisa::grimoire::trie::Config::parse_((internal::marisa::grimoire::trie::Config *)&v18, v10);
  }
  else
  {
    if (*(_QWORD *)(a1 + 840))
      v11 = 0x2000;
    else
      v11 = 4096;
    v12 = *(_DWORD *)(a4 + 16) | *(_DWORD *)(a4 + 8) | v11 | 1;
    v18 = 3;
    v19 = 0x100000000200;
    v20 = 0x20000;
    internal::marisa::grimoire::trie::Config::parse_((internal::marisa::grimoire::trie::Config *)&v18, v12);
  }
  *(_QWORD *)(a1 + 1072) = v18;
  *(_QWORD *)(a1 + 1080) = v19;
  *(_DWORD *)(a1 + 1088) = v20;
  internal::marisa::grimoire::vector::BitVector::build((internal::marisa::grimoire::vector::BitVector *)(a1 + 416), 0, 0);
  if (*((_QWORD *)&v17[1] + 1))
  {
    v13 = 0;
    v14 = 0;
    do
    {
      do
      {
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 432) + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14;
        ++v14;
      }
      while ((v15 & 1) == 0);
      *(_BYTE *)(*(_QWORD *)(a1 + 632) + v14 - 1) = *(_DWORD *)(*((_QWORD *)&v17[0] + 1) + 4 * v13);
      *(_DWORD *)(*((_QWORD *)&v17[0] + 1) + 4 * v13++) >>= 8;
    }
    while (v13 < *((_QWORD *)&v17[1] + 1));
  }
  internal::marisa::grimoire::vector::FlatVector::build((__int128 *)(a1 + 672), (uint64_t)v17);
  internal::marisa::grimoire::trie::LoudsTrie::fill_cache(a1);
  result = *(_QWORD *)&v17[0];
  if (*(_QWORD *)&v17[0])
    return MEMORY[0x1B5E305F8](*(_QWORD *)&v17[0], 0x1000C8077774924);
  return result;
}

void sub_1B3E19B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1B5E305F8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::build_next_trie<internal::marisa::grimoire::trie::ReverseKey>(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  internal::marisa::grimoire::trie::LoudsTrie *v16;
  internal::marisa::grimoire::trie::LoudsTrie *v17;
  uint64_t v18;
  _QWORD *exception;
  _OWORD v20[3];

  if (*(_QWORD *)a4 == a5)
  {
    memset(v20, 0, 41);
    internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Entry>::resize((uint64_t *)v20, *(_QWORD *)(a2 + 24));
    v9 = *(_QWORD *)(a2 + 24);
    if (v9)
    {
      v10 = (_DWORD *)(*((_QWORD *)&v20[0] + 1) + 8);
      v11 = (_DWORD *)(*(_QWORD *)(a2 + 8) + 8);
      do
      {
        v12 = *((_QWORD *)v11 - 1);
        v13 = *v11;
        v11 += 6;
        *((_QWORD *)v10 - 1) = v12 - 1;
        *v10 = v13;
        v10 += 4;
        --v9;
      }
      while (v9);
    }
    internal::marisa::grimoire::trie::Tail::build((__int128 *)(a1 + 744), (uint64_t)v20, a3, *(_DWORD *)(a4 + 12));
    result = *(_QWORD *)&v20[0];
    if (*(_QWORD *)&v20[0])
      return MEMORY[0x1B5E305F8](*(_QWORD *)&v20[0], 0x1000C8077774924);
  }
  else
  {
    v16 = (internal::marisa::grimoire::trie::LoudsTrie *)operator new(0x470uLL, MEMORY[0x1E0DE4E10]);
    v17 = v16;
    if (v16)
      internal::marisa::grimoire::trie::LoudsTrie::LoudsTrie(v16);
    *(_QWORD *)&v20[0] = *(_QWORD *)(a1 + 1000);
    *(_QWORD *)(a1 + 1000) = v17;
    internal::marisa::scoped_ptr<internal::marisa::grimoire::trie::LoudsTrie>::~scoped_ptr((internal::marisa::grimoire::trie::LoudsTrie **)v20);
    v18 = *(_QWORD *)(a1 + 1000);
    if (!v18)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_1E66E4768;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
      exception[2] = 0x8000001FDLL;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/lou"
                     "ds-trie.cc:509: MARISA_MEMORY_ERROR: next_trie_.get() == NULL";
    }
    return internal::marisa::grimoire::trie::LoudsTrie::build_trie<internal::marisa::grimoire::trie::ReverseKey>(v18, a2, a3, a4, a5 + 1);
  }
  return result;
}

void sub_1B3E19D00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E30610](v1, MEMORY[0x1E0DE4E10]);
  _Unwind_Resume(a1);
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::cache<internal::marisa::grimoire::trie::Key>(uint64_t result, uint64_t a2, int a3, unsigned __int8 a4, float a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  float v9;
  _DWORD *v10;

  v5 = *(_QWORD *)(result + 1056) & (a4 ^ (unint64_t)(32 * a2) ^ a2);
  v6 = *(_QWORD *)(result + 1016);
  v7 = v6 + 12 * v5;
  v9 = *(float *)(v7 + 8);
  v8 = (float *)(v7 + 8);
  if (v9 < a5)
  {
    v10 = (_DWORD *)(v6 + 12 * v5);
    *v10 = a2;
    v10[1] = a3;
    *v8 = a5;
  }
  return result;
}

uint64_t *internal::marisa::grimoire::trie::LoudsTrie::reserve_cache(internal::marisa::grimoire::trie::LoudsTrie *this, const internal::marisa::grimoire::trie::Config *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t *result;

  v5 = 256;
  if (a3 != 1)
    v5 = 1;
  do
  {
    v6 = v5;
    v5 *= 2;
  }
  while (v6 < a4 / *((unsigned int *)a2 + 2));
  result = internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Cache>::resize((uint64_t *)this + 126, v6);
  *((_QWORD *)this + 132) = v6 - 1;
  return result;
}

uint64_t *internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Cache>::resize(uint64_t *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a2;
  v3 = result;
  v4 = result[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 > 0xAAAAAAAAAAAAAAALL)
      v5 = 0x1555555555555555;
    if (v4 > a2 >> 1)
      a2 = v5;
    result = (uint64_t *)internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Cache>::realloc(result, a2);
  }
  v6 = v3[3];
  v7 = v2 - v6;
  if (v2 > v6)
  {
    v8 = 12 * v6;
    do
    {
      v9 = v3[1] + v8;
      *(_QWORD *)v9 = 0;
      *(_DWORD *)(v9 + 8) = 0x800000;
      v8 += 12;
      --v7;
    }
    while (v7);
  }
  v3[3] = v2;
  return result;
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::cache<internal::marisa::grimoire::trie::ReverseKey>(uint64_t result, int a2, uint64_t a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float v8;
  _DWORD *v9;

  v4 = *(_QWORD *)(result + 1056) & a3;
  v5 = *(_QWORD *)(result + 1016);
  v6 = v5 + 12 * v4;
  v8 = *(float *)(v6 + 8);
  v7 = (float *)(v6 + 8);
  if (v8 < a4)
  {
    v9 = (_DWORD *)(v5 + 12 * v4);
    *v9 = a2;
    v9[1] = a3;
    *v7 = a4;
  }
  return result;
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::fill_cache(uint64_t this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  internal::marisa::grimoire::vector::BitVector *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;

  v1 = *(_QWORD *)(this + 1032);
  if (v1)
  {
    v2 = this;
    v3 = 0;
    v4 = 0;
    v5 = (internal::marisa::grimoire::vector::BitVector *)(this + 416);
    do
    {
      v6 = *(_QWORD *)(v2 + 1016);
      v7 = *(unsigned int *)(v6 + v3 + 4);
      if ((_DWORD)v7)
      {
        *(_BYTE *)(v6 + v3 + 8) = *(_BYTE *)(*(_QWORD *)(v2 + 632) + v7);
        v8 = *(_QWORD *)(v2 + 1016);
        if (((*(_QWORD *)(*(_QWORD *)(v2 + 432) + ((v7 >> 3) & 0x1FFFFFF8)) >> v7) & 1) != 0)
        {
          this = internal::marisa::grimoire::vector::BitVector::rank1(v5, v7);
          v9 = *(_QWORD *)(v2 + 720);
          v10 = (unint64_t)(v9 * this) >> 6;
          v11 = (v9 * this) & 0x3F;
          v12 = v11 + v9;
          v13 = *(_QWORD *)(v2 + 688);
          v14 = *(_QWORD *)(v13 + 8 * v10);
          if (v12 > 0x40)
            v15 = ((2 * *(_QWORD *)(v13 + 8 * v10 + 8)) << (v11 ^ 0x3Fu)) | (v14 >> v11);
          else
            v15 = v14 >> v11;
          v16 = *(_DWORD *)(v2 + 728) & v15;
        }
        else
        {
          v16 = 0xFFFFFF;
        }
        *(_DWORD *)(v8 + v3 + 8) = *(unsigned __int8 *)(v8 + v3 + 8) | (v16 << 8);
        v1 = *(_QWORD *)(v2 + 1032);
      }
      else
      {
        *(_QWORD *)(v6 + v3) = -1;
      }
      ++v4;
      v3 += 12;
    }
    while (v4 < v1);
  }
  return this;
}

uint64_t internal::marisa::grimoire::vector::BitVector::map(internal::marisa::grimoire::vector::BitVector *this, internal::marisa::grimoire::io::Mapper *a2)
{
  uint64_t result;
  _OWORD v4[4];
  __int128 v5;
  _BYTE v6[25];
  __int128 v7;
  _BYTE v8[25];
  __int128 v9;
  _BYTE v10[25];

  memset(v4, 0, 41);
  v7 = 0u;
  memset(v8, 0, sizeof(v8));
  v9 = 0u;
  memset(v10, 0, sizeof(v10));
  v4[3] = 0u;
  v5 = 0u;
  memset(v6, 0, sizeof(v6));
  internal::marisa::grimoire::vector::BitVector::map_((internal::marisa::grimoire::vector::BitVector *)v4, a2);
  internal::marisa::grimoire::vector::BitVector::swap(this, (internal::marisa::grimoire::vector::BitVector *)v4);
  if ((_QWORD)v9)
    MEMORY[0x1B5E305F8](v9, 0x1000C8077774924);
  if ((_QWORD)v7)
    MEMORY[0x1B5E305F8](v7, 0x1000C8077774924);
  if ((_QWORD)v5)
    MEMORY[0x1B5E305F8](v5, 0x1000C8077774924);
  result = *(_QWORD *)&v4[0];
  if (*(_QWORD *)&v4[0])
    return MEMORY[0x1B5E305F8](*(_QWORD *)&v4[0], 0x1000C8077774924);
  return result;
}

void sub_1B3E1A074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  internal::marisa::grimoire::vector::BitVector::~BitVector((internal::marisa::grimoire::vector::BitVector *)&a9);
  _Unwind_Resume(a1);
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned char>::map(__int128 *a1, internal::marisa::grimoire::io::Mapper *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  internal::marisa::grimoire::vector::Vector<unsigned char>::map_((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x1B5E305F8](v3, 0x1000C8077774924);
  return result;
}

void sub_1B3E1A11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1B5E305F8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::vector::FlatVector::map(internal::marisa::grimoire::vector::FlatVector *this, internal::marisa::grimoire::io::Mapper *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _OWORD v9[3];
  uint64_t v10;
  int v11;
  uint64_t v12;

  memset(v9, 0, 41);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  internal::marisa::grimoire::vector::FlatVector::map_((internal::marisa::grimoire::vector::FlatVector *)v9, a2);
  v3 = *(_OWORD *)this;
  *(_OWORD *)this = v9[0];
  v9[0] = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *(_QWORD *)&v9[1];
  *(_QWORD *)&v9[1] = v4;
  v5 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)&v9[1] + 8);
  *(_OWORD *)((char *)&v9[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)this + 40);
  *((_BYTE *)this + 40) = BYTE8(v9[2]);
  BYTE8(v9[2]) = v4;
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v10;
  v10 = v6;
  LODWORD(v6) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = v11;
  v11 = v6;
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v12;
  result = v3;
  v12 = v7;
  if ((_QWORD)v3)
    return MEMORY[0x1B5E305F8](v3, 0x1000C8077774924);
  return result;
}

void sub_1B3E1A214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1B5E305F8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Cache>::map(__int128 *a1, internal::marisa::grimoire::io::Mapper *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::map_((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x1B5E305F8](v3, 0x1000C8077774924);
  return result;
}

void sub_1B3E1A2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1B5E305F8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::vector::BitVector::read(internal::marisa::grimoire::vector::BitVector *this, internal::marisa::grimoire::io::Reader *a2)
{
  uint64_t result;
  _OWORD v4[4];
  __int128 v5;
  _BYTE v6[25];
  __int128 v7;
  _BYTE v8[25];
  __int128 v9;
  _BYTE v10[25];

  memset(v4, 0, 41);
  v7 = 0u;
  memset(v8, 0, sizeof(v8));
  v9 = 0u;
  memset(v10, 0, sizeof(v10));
  v4[3] = 0u;
  v5 = 0u;
  memset(v6, 0, sizeof(v6));
  internal::marisa::grimoire::vector::BitVector::read_((internal::marisa::grimoire::vector::BitVector *)v4, a2);
  internal::marisa::grimoire::vector::BitVector::swap(this, (internal::marisa::grimoire::vector::BitVector *)v4);
  if ((_QWORD)v9)
    MEMORY[0x1B5E305F8](v9, 0x1000C8077774924);
  if ((_QWORD)v7)
    MEMORY[0x1B5E305F8](v7, 0x1000C8077774924);
  if ((_QWORD)v5)
    MEMORY[0x1B5E305F8](v5, 0x1000C8077774924);
  result = *(_QWORD *)&v4[0];
  if (*(_QWORD *)&v4[0])
    return MEMORY[0x1B5E305F8](*(_QWORD *)&v4[0], 0x1000C8077774924);
  return result;
}

void sub_1B3E1A3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  internal::marisa::grimoire::vector::BitVector::~BitVector((internal::marisa::grimoire::vector::BitVector *)&a9);
  _Unwind_Resume(a1);
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned char>::read(__int128 *a1, internal::marisa::grimoire::io::Reader *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  internal::marisa::grimoire::vector::Vector<unsigned char>::read_((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x1B5E305F8](v3, 0x1000C8077774924);
  return result;
}

void sub_1B3E1A474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1B5E305F8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::vector::FlatVector::read(internal::marisa::grimoire::vector::FlatVector *this, internal::marisa::grimoire::io::Reader *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _OWORD v9[3];
  uint64_t v10;
  int v11;
  uint64_t v12;

  memset(v9, 0, 41);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  internal::marisa::grimoire::vector::FlatVector::read_((internal::marisa::grimoire::vector::FlatVector *)v9, a2);
  v3 = *(_OWORD *)this;
  *(_OWORD *)this = v9[0];
  v9[0] = v3;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *(_QWORD *)&v9[1];
  *(_QWORD *)&v9[1] = v4;
  v5 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)((char *)this + 24) = *(_OWORD *)((char *)&v9[1] + 8);
  *(_OWORD *)((char *)&v9[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)this + 40);
  *((_BYTE *)this + 40) = BYTE8(v9[2]);
  BYTE8(v9[2]) = v4;
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v10;
  v10 = v6;
  LODWORD(v6) = *((_DWORD *)this + 14);
  *((_DWORD *)this + 14) = v11;
  v11 = v6;
  v7 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v12;
  result = v3;
  v12 = v7;
  if ((_QWORD)v3)
    return MEMORY[0x1B5E305F8](v3, 0x1000C8077774924);
  return result;
}

void sub_1B3E1A56C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1B5E305F8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Cache>::read(__int128 *a1, internal::marisa::grimoire::io::Reader *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Cache>::read_((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x1B5E305F8](v3, 0x1000C8077774924);
  return result;
}

void sub_1B3E1A628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1B5E305F8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

void internal::marisa::grimoire::trie::LoudsTrie::advance(internal::marisa::grimoire::vector::BitVector *this@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t v9;
  uint64_t v10;
  std::string *p_p;
  std::string *v12;
  char v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  BOOL v17;
  char *v18;
  std::string::value_type v19;
  std::string *v21;
  std::string v22;
  std::string __str;
  unint64_t v24;
  unint64_t v25;
  std::string __p;
  char v27;

  if (*(_QWORD *)a4 == 0xFFFFFFFFLL)
  {
    MEMORY[0xFFFFFFFF] = 0xFFFFFFFFLL;
    if (*(char *)(a4 + 31) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)0x100000007, *(const std::string::value_type **)(a4 + 8), *(_QWORD *)(a4 + 16));
    }
    else
    {
      MEMORY[0x100000007] = *(_OWORD *)(a4 + 8);
      MEMORY[0x100000017] = *(_QWORD *)(a4 + 24);
    }
    return;
  }
  v25 = *(_QWORD *)a4;
  if (*(char *)(a4 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a4 + 8), *(_QWORD *)(a4 + 16));
  else
    __p = *(std::string *)(a4 + 8);
  v24 = 0;
  if (!a3)
  {
LABEL_18:
    *a5 = v25;
    v12 = (std::string *)(a5 + 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(v12, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      *v12 = __p;
    goto LABEL_44;
  }
  v9 = 0;
  while ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
      goto LABEL_21;
    v24 = v9 + 1;
    if (*(unsigned __int8 *)(a2 + v9) != *((unsigned __int8 *)&v25 + HIBYTE(__p.__r_.__value_.__r.__words[2]) + 7))
    {
LABEL_25:
      *a5 = 0xFFFFFFFFLL;
      a5[1] = 0;
      a5[2] = 0;
      a5[3] = 0;
      goto LABEL_44;
    }
    v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
    --*((_BYTE *)&__p.__r_.__value_.__s + 23);
    ++v9;
    p_p = &__p;
LABEL_17:
    p_p->__r_.__value_.__s.__data_[v10] = 0;
    if (v9 >= a3)
      goto LABEL_18;
  }
  if (__p.__r_.__value_.__l.__size_)
  {
    v24 = v9 + 1;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (*(unsigned __int8 *)(a2 + v9) != *(unsigned __int8 *)(__p.__r_.__value_.__r.__words[0]
                                                             + __p.__r_.__value_.__l.__size_
                                                             - 1))
      goto LABEL_25;
    v10 = --__p.__r_.__value_.__l.__size_;
    ++v9;
    goto LABEL_17;
  }
LABEL_21:
  memset(&__str, 0, sizeof(__str));
  while (v24 < a3)
  {
    if ((internal::marisa::grimoire::trie::LoudsTrie::predictive_find_child(this, a2, a3, &v24, &v25, &__str) & 1) == 0)
    {
      *a5 = 0xFFFFFFFFLL;
      a5[1] = 0;
      a5[2] = 0;
      a5[3] = 0;
      goto LABEL_42;
    }
  }
  std::string::basic_string(&v22, &__str, v24 - v9, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v27);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v22;
  v13 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  size = v22.__r_.__value_.__l.__size_;
  v14 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v14 = &__p;
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  v16 = (std::string *)((char *)v14 + size - 1);
  if (size)
    v17 = v16 > v14;
  else
    v17 = 0;
  if (v17)
  {
    v18 = &v14->__r_.__value_.__s.__data_[1];
    do
    {
      v19 = *(v18 - 1);
      *(v18 - 1) = v16->__r_.__value_.__s.__data_[0];
      v16->__r_.__value_.__s.__data_[0] = v19;
      v16 = (std::string *)((char *)v16 - 1);
    }
    while (v18++ < (char *)v16);
    v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  *a5 = v25;
  v21 = (std::string *)(a5 + 1);
  if (v13 < 0)
    std::string::__init_copy_ctor_external(v21, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    *v21 = __p;
LABEL_42:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
LABEL_44:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1B3E1A910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a17 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void internal::marisa::grimoire::trie::LoudsTrie::restore_(uint64_t a1, std::string *a2, unint64_t a3)
{
  internal::marisa::grimoire::vector::BitVector *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v6 = (internal::marisa::grimoire::vector::BitVector *)(a1 + 416);
  v7 = (_QWORD *)(a1 + 744);
  while (1)
  {
    while (1)
    {
      v8 = *(_QWORD *)(a1 + 1056) & a3;
      v9 = *(_QWORD *)(a1 + 1024);
      if (a3 != *(_DWORD *)(v9 + 12 * v8 + 4))
        break;
      v10 = *(unsigned int *)(v9 + 12 * v8 + 8);
      if (v10 <= 0xFFFFFEFF)
      {
        v20 = *(_QWORD *)(a1 + 1000);
        if (v20)
          internal::marisa::grimoire::trie::LoudsTrie::restore_(v20, a2, v10);
        else
          internal::marisa::grimoire::trie::Tail::restore(v7, a2, v10);
      }
      else
      {
        std::string::push_back(a2, v10);
      }
      a3 = *(unsigned int *)(*(_QWORD *)(a1 + 1024) + 12 * v8);
      if (!(_DWORD)a3)
        return;
    }
    v11 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + a3);
    if (((*(_QWORD *)(*(_QWORD *)(a1 + 432) + ((a3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
    {
      v12 = internal::marisa::grimoire::vector::BitVector::rank1(v6, a3);
      v13 = *(_QWORD *)(a1 + 720);
      v14 = (unint64_t)(v13 * v12) >> 6;
      v15 = (v13 * v12) & 0x3F;
      v16 = v15 + v13;
      v17 = *(_QWORD *)(a1 + 688);
      v18 = *(_QWORD *)(v17 + 8 * v14);
      v19 = v16 > 0x40
          ? ((2 * *(_QWORD *)(v17 + 8 * v14 + 8)) << (v15 ^ 0x3Fu)) | (v18 >> v15)
          : v18 >> v15;
      v21 = v11 | ((*(_DWORD *)(a1 + 728) & v19) << 8);
      v22 = *(_QWORD *)(a1 + 1000);
      if (v22)
        internal::marisa::grimoire::trie::LoudsTrie::restore_(v22, a2, v21);
      else
        internal::marisa::grimoire::trie::Tail::restore(v7, a2, v21);
    }
    else
    {
      std::string::push_back(a2, v11);
    }
    if (a3 <= *(_QWORD *)(a1 + 1064))
      break;
    a3 = internal::marisa::grimoire::vector::BitVector::select1((internal::marisa::grimoire::vector::BitVector *)a1, a3)
       + ~a3;
  }
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::match_(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t a5)
{
  internal::marisa::grimoire::vector::BitVector *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v10 = (internal::marisa::grimoire::vector::BitVector *)(a1 + 416);
  v11 = (_QWORD *)(a1 + 744);
  while (1)
  {
    while (1)
    {
      v12 = *(_QWORD *)(a1 + 1056) & a5;
      v13 = *(_QWORD *)(a1 + 1024);
      if (a5 == *(_DWORD *)(v13 + 12 * v12 + 4))
        break;
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 432) + ((a5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a5) & 1) != 0)
      {
        v15 = *(_QWORD *)(a1 + 1000);
        v16 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + a5);
        v17 = internal::marisa::grimoire::vector::BitVector::rank1(v10, a5);
        v18 = *(_QWORD *)(a1 + 720);
        v19 = (unint64_t)(v18 * v17) >> 6;
        v20 = (v18 * v17) & 0x3F;
        v21 = v20 + v18;
        v22 = *(_QWORD *)(a1 + 688);
        v23 = *(_QWORD *)(v22 + 8 * v19);
        if (v15)
        {
          v24 = v23 >> v20;
          if (v21 > 0x40)
            v24 |= (2 * *(_QWORD *)(v22 + 8 * v19 + 8)) << (v20 ^ 0x3Fu);
          v25 = v16 | ((*(_DWORD *)(a1 + 728) & v24) << 8);
          v26 = *(_QWORD *)(a1 + 1000);
          if (v26)
          {
            if ((internal::marisa::grimoire::trie::LoudsTrie::match_(v26, a2, a3, a4, v25) & 1) == 0)
              return 0;
            goto LABEL_27;
          }
        }
        else
        {
          if (v21 > 0x40)
            v28 = ((2 * *(_QWORD *)(v22 + 8 * v19 + 8)) << (v20 ^ 0x3Fu)) | (v23 >> v20);
          else
            v28 = v23 >> v20;
          v25 = v16 | ((*(_DWORD *)(a1 + 728) & v28) << 8);
        }
        if ((internal::marisa::grimoire::trie::Tail::match(v11, a2, a3, a4, v25) & 1) == 0)
          return 0;
      }
      else
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + a5) != *(unsigned __int8 *)(a2 + *a4))
          return 0;
        ++*a4;
      }
LABEL_27:
      if (a5 <= *(_QWORD *)(a1 + 1064))
        return 1;
      if (*a4 >= a3)
        return 0;
      a5 = internal::marisa::grimoire::vector::BitVector::select1((internal::marisa::grimoire::vector::BitVector *)a1, a5)+ ~a5;
    }
    v14 = *(unsigned int *)(v13 + 12 * v12 + 8);
    if (v14 <= 0xFFFFFEFF)
    {
      v27 = *(_QWORD *)(a1 + 1000);
      if (v27)
      {
        if ((internal::marisa::grimoire::trie::LoudsTrie::match_(v27, a2, a3, a4, v14) & 1) == 0)
          return 0;
      }
      else if ((internal::marisa::grimoire::trie::Tail::match(v11, a2, a3, a4, v14) & 1) == 0)
      {
        return 0;
      }
    }
    else
    {
      if (*(unsigned __int8 *)(a2 + *a4) != v14)
        return 0;
      ++*a4;
    }
    a5 = *(unsigned int *)(*(_QWORD *)(a1 + 1024) + 12 * v12);
    if (!(_DWORD)a5)
      return 1;
    if (*a4 >= a3)
      return 0;
  }
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::prefix_match_(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t a5, std::string *a6)
{
  internal::marisa::grimoire::vector::BitVector *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v12 = (internal::marisa::grimoire::vector::BitVector *)(a1 + 416);
  v13 = (_QWORD *)(a1 + 744);
  while (1)
  {
    v14 = *(_QWORD *)(a1 + 1056) & a5;
    v15 = *(_QWORD *)(a1 + 1024);
    if (a5 != *(_DWORD *)(v15 + 12 * v14 + 4))
    {
      v17 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 640) + a5);
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 432) + ((a5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a5) & 1) != 0)
      {
        v18 = internal::marisa::grimoire::vector::BitVector::rank1(v12, a5);
        v19 = *(_QWORD *)(a1 + 720);
        v20 = (unint64_t)(v19 * v18) >> 6;
        v21 = (v19 * v18) & 0x3F;
        v22 = v21 + v19;
        v23 = *(_QWORD *)(a1 + 688);
        v24 = *(_QWORD *)(v23 + 8 * v20);
        if (v22 > 0x40)
          v25 = ((2 * *(_QWORD *)(v23 + 8 * v20 + 8)) << (v21 ^ 0x3Fu)) | (v24 >> v21);
        else
          v25 = v24 >> v21;
        v27 = v17 | ((*(_DWORD *)(a1 + 728) & v25) << 8);
        v28 = *(_QWORD *)(a1 + 1000);
        if (v28)
        {
          if ((internal::marisa::grimoire::trie::LoudsTrie::prefix_match_(v28, a2, a3, a4, v27, a6) & 1) == 0)
            return 0;
        }
        else if (!internal::marisa::grimoire::trie::Tail::prefix_match(v13, a2, a3, a4, v27, a6))
        {
          return 0;
        }
      }
      else
      {
        if (v17 != *(unsigned __int8 *)(a2 + *a4))
          return 0;
        std::string::push_back(a6, v17);
        ++*a4;
      }
      if (a5 <= *(_QWORD *)(a1 + 1064))
        return 1;
      a5 = internal::marisa::grimoire::vector::BitVector::select1((internal::marisa::grimoire::vector::BitVector *)a1, a5)+ ~a5;
      goto LABEL_23;
    }
    v16 = *(unsigned int *)(v15 + 12 * v14 + 8);
    if (v16 > 0xFFFFFEFF)
    {
      if (*(unsigned __int8 *)(a2 + *a4) != v16)
        return 0;
      std::string::push_back(a6, v16);
      ++*a4;
      goto LABEL_22;
    }
    v26 = *(_QWORD *)(a1 + 1000);
    if (!v26)
      break;
    if ((internal::marisa::grimoire::trie::LoudsTrie::prefix_match_(v26, a2, a3, a4, v16, a6) & 1) == 0)
      return 0;
LABEL_22:
    a5 = *(unsigned int *)(*(_QWORD *)(a1 + 1024) + 12 * v14);
    if (!(_DWORD)a5)
      return 1;
LABEL_23:
    if (*a4 >= a3)
    {
      internal::marisa::grimoire::trie::LoudsTrie::restore_(a1, a6, a5);
      return 1;
    }
  }
  if (internal::marisa::grimoire::trie::Tail::prefix_match(v13, a2, a3, a4, v16, a6))
    goto LABEL_22;
  return 0;
}

uint64_t internal::marisa::grimoire::trie::Config::parse_(internal::marisa::grimoire::trie::Config *this, unsigned int a2)
{
  _QWORD *exception;

  if (a2 >= 0x100000)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/config.h";
    exception[2] = 0x500000034;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/confi"
                   "g.h:52: MARISA_CODE_ERROR: (config_flags & ~MARISA_CONFIG_MASK) != 0";
  }
  if ((a2 & 0x7F) != 0)
    *(_QWORD *)this = a2 & 0x7F;
  internal::marisa::grimoire::trie::Config::parse_cache_level((uint64_t)this, a2);
  internal::marisa::grimoire::trie::Config::parse_tail_mode((uint64_t)this, a2);
  return internal::marisa::grimoire::trie::Config::parse_node_order((uint64_t)this, a2);
}

uint64_t internal::marisa::grimoire::trie::Config::parse_cache_level(uint64_t this, __int16 a2)
{
  unsigned int v2;
  int v3;
  _QWORD *exception;

  v2 = a2 & 0xF80;
  v3 = 512;
  if (v2 > 0x1FF)
  {
    if (v2 == 512)
      goto LABEL_11;
    if (v2 != 1024)
    {
      v3 = a2 & 0xF80;
      if (v2 != 2048)
        goto LABEL_9;
      goto LABEL_11;
    }
LABEL_10:
    v3 = a2 & 0xF80;
    goto LABEL_11;
  }
  if ((a2 & 0xF80) == 0)
    goto LABEL_11;
  if (v2 == 128)
    goto LABEL_10;
  v3 = a2 & 0xF80;
  if (v2 != 256)
  {
LABEL_9:
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/config.h";
    exception[2] = 0x500000060;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/confi"
                   "g.h:96: MARISA_CODE_ERROR: undefined cache level";
  }
LABEL_11:
  *(_DWORD *)(this + 8) = v3;
  return this;
}

uint64_t internal::marisa::grimoire::trie::Config::parse_tail_mode(uint64_t this, __int16 a2)
{
  int v2;
  int v3;
  _QWORD *exception;

  v2 = 4096;
  v3 = a2 & 0xF000;
  if ((a2 & 0xF000) != 0 && v3 != 4096)
  {
    if (v3 != 0x2000)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_1E66E4768;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/config.h";
      exception[2] = 0x500000075;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/con"
                     "fig.h:117: MARISA_CODE_ERROR: undefined tail mode";
    }
    v2 = 0x2000;
  }
  *(_DWORD *)(this + 12) = v2;
  return this;
}

uint64_t internal::marisa::grimoire::trie::Config::parse_node_order(uint64_t this, int a2)
{
  int v2;
  int v3;
  _QWORD *exception;

  v2 = 0x20000;
  v3 = a2 & 0xF0000;
  if ((a2 & 0xF0000) != 0 && v3 != 0x20000)
  {
    if (v3 != 0x10000)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      *exception = &off_1E66E4768;
      exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/config.h";
      exception[2] = 0x50000008ALL;
      exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/con"
                     "fig.h:138: MARISA_CODE_ERROR: undefined node order";
    }
    v2 = 0x10000;
  }
  *(_DWORD *)(this + 16) = v2;
  return this;
}

uint64_t *internal::marisa::grimoire::vector::Vector<unsigned long long>::resize(uint64_t *result, unint64_t a2, _QWORD *a3)
{
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  v4 = a2;
  v5 = result;
  v6 = result[4];
  if (v6 < a2)
  {
    v7 = 2 * v6;
    if (v6 >> 60)
      v7 = 0x1FFFFFFFFFFFFFFFLL;
    if (v6 > a2 >> 1)
      a2 = v7;
    result = internal::marisa::grimoire::vector::Vector<unsigned long long>::realloc(result, a2);
  }
  v8 = v5[3];
  v9 = v4 - v8;
  if (v4 > v8)
  {
    v10 = (_QWORD *)(v5[1] + 8 * v8);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
  v5[3] = v4;
  return result;
}

_QWORD *internal::marisa::grimoire::vector::Vector<unsigned long long>::realloc(uint64_t *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  result = operator new[](8 * a2, MEMORY[0x1E0DE4E10]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (uint64_t *)a1[1];
    v7 = result;
    do
    {
      v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x1B5E305F8);
  return result;
}

_QWORD *internal::marisa::grimoire::vector::Vector<unsigned long long>::shrink(_QWORD *result)
{
  uint64_t v1;
  _QWORD *exception;

  if (*((_BYTE *)result + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0x100000072;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:114: MARISA_STATE_ERROR: fixed_";
  }
  v1 = result[3];
  if (v1 != result[4])
    return internal::marisa::grimoire::vector::Vector<unsigned long long>::realloc(result, v1);
  return result;
}

uint64_t internal::marisa::grimoire::vector::BitVector::map_(internal::marisa::grimoire::vector::BitVector *this, internal::marisa::grimoire::io::Mapper *a2)
{
  unint64_t v4;
  _QWORD *exception;

  internal::marisa::grimoire::vector::Vector<unsigned long long>::map((__int128 *)this, a2);
  *((_QWORD *)this + 6) = *(unsigned int *)internal::marisa::grimoire::io::Mapper::map_data(a2, 4uLL);
  v4 = *(unsigned int *)internal::marisa::grimoire::io::Mapper::map_data(a2, 4uLL);
  if (*((_QWORD *)this + 6) < v4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/bit-vector.h";
    exception[2] = 0xA00000086;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/bit"
                   "-vector.h:134: MARISA_FORMAT_ERROR: temp_num_1s > size_";
  }
  *((_QWORD *)this + 7) = v4;
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::map((__int128 *)this + 4, a2);
  internal::marisa::grimoire::vector::Vector<unsigned int>::map((__int128 *)this + 7, a2);
  return internal::marisa::grimoire::vector::Vector<unsigned int>::map((__int128 *)this + 10, a2);
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned long long>::map(__int128 *a1, internal::marisa::grimoire::io::Mapper *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  internal::marisa::grimoire::vector::Vector<unsigned long long>::map_((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x1B5E305F8](v3, 0x1000C8077774924);
  return result;
}

void sub_1B3E1B464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1B5E305F8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::map(__int128 *a1, internal::marisa::grimoire::io::Mapper *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::map_((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x1B5E305F8](v3, 0x1000C8077774924);
  return result;
}

void sub_1B3E1B520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1B5E305F8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned int>::map(__int128 *a1, internal::marisa::grimoire::io::Mapper *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  internal::marisa::grimoire::vector::Vector<unsigned int>::map_((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x1B5E305F8](v3, 0x1000C8077774924);
  return result;
}

void sub_1B3E1B5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1B5E305F8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned long long>::map_(uint64_t a1, internal::marisa::grimoire::io::Mapper *this)
{
  unint64_t v4;
  _QWORD *exception;

  v4 = *(_QWORD *)internal::marisa::grimoire::io::Mapper::map_data(this, 8uLL);
  if ((v4 & 7) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0xA000000D2;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:210: MARISA_FORMAT_ERROR: (total_size % sizeof(T)) != 0";
  }
  internal::marisa::grimoire::io::Mapper::map<unsigned long long>(this, (uint64_t *)(a1 + 16), v4 >> 3);
  internal::marisa::grimoire::io::Mapper::seek(this, -(int)v4 & 7);
  *(_QWORD *)(a1 + 24) = v4 >> 3;
  return internal::marisa::grimoire::vector::Vector<unsigned long long>::fix(a1);
}

uint64_t internal::marisa::grimoire::io::Mapper::map<unsigned long long>(internal::marisa::grimoire::io::Mapper *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t result;
  _QWORD *exception;
  const char *v6;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x20000001FLL;
    v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:31: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 61)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x700000020;
    v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:32: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
  }
  result = internal::marisa::grimoire::io::Mapper::map_data(a1, 8 * a3);
  *a2 = result;
  return result;
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned long long>::fix(uint64_t result)
{
  _QWORD *exception;

  if (*(_BYTE *)(result + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0x10000007ALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:122: MARISA_STATE_ERROR: fixed_";
  }
  *(_BYTE *)(result + 40) = 1;
  return result;
}

uint64_t internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::map_(uint64_t a1, internal::marisa::grimoire::io::Mapper *this)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *exception;

  v4 = *(_QWORD *)internal::marisa::grimoire::io::Mapper::map_data(this, 8uLL);
  v5 = v4 / 0xC;
  if (v4 % 0xC)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0xA000000D2;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:210: MARISA_FORMAT_ERROR: (total_size % sizeof(T)) != 0";
  }
  internal::marisa::grimoire::io::Mapper::map<internal::marisa::grimoire::vector::RankIndex>(this, (uint64_t *)(a1 + 16), v5);
  internal::marisa::grimoire::io::Mapper::seek(this, -(int)v4 & 7);
  *(_QWORD *)(a1 + 24) = v5;
  return internal::marisa::grimoire::vector::Vector<unsigned long long>::fix(a1);
}

uint64_t internal::marisa::grimoire::io::Mapper::map<internal::marisa::grimoire::vector::RankIndex>(internal::marisa::grimoire::io::Mapper *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t result;
  _QWORD *exception;
  const char *v6;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x20000001FLL;
    v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:31: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >= 0x1555555555555556)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x700000020;
    v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:32: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
  }
  result = internal::marisa::grimoire::io::Mapper::map_data(a1, 12 * a3);
  *a2 = result;
  return result;
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned int>::map_(uint64_t a1, internal::marisa::grimoire::io::Mapper *this)
{
  unint64_t v4;
  _QWORD *exception;

  v4 = *(_QWORD *)internal::marisa::grimoire::io::Mapper::map_data(this, 8uLL);
  if ((v4 & 3) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0xA000000D2;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:210: MARISA_FORMAT_ERROR: (total_size % sizeof(T)) != 0";
  }
  internal::marisa::grimoire::io::Mapper::map<unsigned int>(this, (uint64_t *)(a1 + 16), v4 >> 2);
  internal::marisa::grimoire::io::Mapper::seek(this, -(int)v4 & 7);
  *(_QWORD *)(a1 + 24) = v4 >> 2;
  return internal::marisa::grimoire::vector::Vector<unsigned long long>::fix(a1);
}

uint64_t internal::marisa::grimoire::io::Mapper::map<unsigned int>(internal::marisa::grimoire::io::Mapper *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t result;
  _QWORD *exception;
  const char *v6;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x20000001FLL;
    v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:31: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 62)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h";
    exception[2] = 0x700000020;
    v6 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/mapper.h:32: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v6;
  }
  result = internal::marisa::grimoire::io::Mapper::map_data(a1, 4 * a3);
  *a2 = result;
  return result;
}

_QWORD *internal::marisa::grimoire::vector::FlatVector::map_(internal::marisa::grimoire::vector::FlatVector *this, internal::marisa::grimoire::io::Mapper *a2)
{
  uint64_t v4;
  _QWORD *result;
  _QWORD *exception;

  internal::marisa::grimoire::vector::Vector<unsigned long long>::map((__int128 *)this, a2);
  v4 = *(unsigned int *)internal::marisa::grimoire::io::Mapper::map_data(a2, 4uLL);
  if (v4 >= 0x21)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/flat-vector.h";
    exception[2] = 0xA00000084;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/fla"
                   "t-vector.h:132: MARISA_FORMAT_ERROR: temp_value_size > 32";
  }
  *((_QWORD *)this + 6) = v4;
  *((_DWORD *)this + 14) = *(_DWORD *)internal::marisa::grimoire::io::Mapper::map_data(a2, 4uLL);
  result = (_QWORD *)internal::marisa::grimoire::io::Mapper::map_data(a2, 8uLL);
  *((_QWORD *)this + 8) = *result;
  return result;
}

uint64_t internal::marisa::grimoire::vector::BitVector::read_(internal::marisa::grimoire::vector::BitVector *this, internal::marisa::grimoire::io::Reader *a2)
{
  _QWORD *exception;
  unsigned int v6;
  unsigned int v7;

  internal::marisa::grimoire::vector::Vector<unsigned long long>::read((__int128 *)this, a2);
  v7 = 0;
  internal::marisa::grimoire::io::Reader::read_data((uint64_t)a2, (char *)&v7, 4uLL);
  *((_QWORD *)this + 6) = v7;
  v6 = 0;
  internal::marisa::grimoire::io::Reader::read_data((uint64_t)a2, (char *)&v6, 4uLL);
  if (*((_QWORD *)this + 6) < (unint64_t)v6)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/bit-vector.h";
    exception[2] = 0xA00000099;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/bit"
                   "-vector.h:153: MARISA_FORMAT_ERROR: temp_num_1s > size_";
  }
  *((_QWORD *)this + 7) = v6;
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::read((__int128 *)this + 4, a2);
  internal::marisa::grimoire::vector::Vector<unsigned int>::read((__int128 *)this + 7, a2);
  return internal::marisa::grimoire::vector::Vector<unsigned int>::read((__int128 *)this + 10, a2);
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned long long>::read(__int128 *a1, internal::marisa::grimoire::io::Reader *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  internal::marisa::grimoire::vector::Vector<unsigned long long>::read_((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x1B5E305F8](v3, 0x1000C8077774924);
  return result;
}

void sub_1B3E1BCE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1B5E305F8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::read(__int128 *a1, internal::marisa::grimoire::io::Reader *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::read_((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x1B5E305F8](v3, 0x1000C8077774924);
  return result;
}

void sub_1B3E1BDA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1B5E305F8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned int>::read(__int128 *a1, internal::marisa::grimoire::io::Reader *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  internal::marisa::grimoire::vector::Vector<unsigned int>::read_((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x1B5E305F8](v3, 0x1000C8077774924);
  return result;
}

void sub_1B3E1BE5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1B5E305F8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned long long>::read_(uint64_t a1, internal::marisa::grimoire::io::Reader *this)
{
  unint64_t v4;
  _QWORD *exception;
  unint64_t v7;

  v7 = 0;
  internal::marisa::grimoire::io::Reader::read_data((uint64_t)this, (char *)&v7, 8uLL);
  if ((v7 & 7) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0xA000000DELL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:222: MARISA_FORMAT_ERROR: (total_size % sizeof(T)) != 0";
  }
  v4 = v7 >> 3;
  internal::marisa::grimoire::vector::Vector<unsigned long long>::resize((uint64_t *)a1, v7 >> 3);
  internal::marisa::grimoire::io::Reader::read<unsigned long long>((uint64_t)this, *(char **)(a1 + 8), v4);
  return internal::marisa::grimoire::io::Reader::seek((uint64_t)this, -(int)v7 & 7);
}

uint64_t *internal::marisa::grimoire::vector::Vector<unsigned long long>::resize(uint64_t *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v2 = a2;
  v3 = result;
  v4 = result[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 >> 60)
      v5 = 0x1FFFFFFFFFFFFFFFLL;
    if (v4 > a2 >> 1)
      a2 = v5;
    result = internal::marisa::grimoire::vector::Vector<unsigned long long>::realloc(result, a2);
  }
  v3[3] = v2;
  return result;
}

uint64_t internal::marisa::grimoire::io::Reader::read<unsigned long long>(uint64_t a1, char *a2, unint64_t a3)
{
  _QWORD *exception;
  const char *v5;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.h";
    exception[2] = 0x200000022;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.h:34: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 61)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.h";
    exception[2] = 0x700000023;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.h:35: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v5;
  }
  return internal::marisa::grimoire::io::Reader::read_data(a1, a2, 8 * a3);
}

uint64_t internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::read_(uint64_t a1, internal::marisa::grimoire::io::Reader *this)
{
  unint64_t v4;
  _QWORD *exception;
  unint64_t v7;

  v7 = 0;
  internal::marisa::grimoire::io::Reader::read_data((uint64_t)this, (char *)&v7, 8uLL);
  v4 = v7 / 0xC;
  if (v7 % 0xC)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0xA000000DELL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:222: MARISA_FORMAT_ERROR: (total_size % sizeof(T)) != 0";
  }
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::resize((uint64_t *)a1, v7 / 0xC);
  internal::marisa::grimoire::io::Reader::read<internal::marisa::grimoire::vector::RankIndex>((uint64_t)this, *(char **)(a1 + 8), v4);
  return internal::marisa::grimoire::io::Reader::seek((uint64_t)this, -(int)v7 & 7);
}

void internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a2;
  v4 = a1[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 > 0xAAAAAAAAAAAAAAALL)
      v5 = 0x1555555555555555;
    if (v4 > a2 >> 1)
      a2 = v5;
    internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::realloc(a1, a2);
  }
  v6 = a1[3];
  if (v2 > v6)
    bzero((void *)(a1[1] + 12 * v6), 12 * (v2 - v6));
  a1[3] = v2;
}

uint64_t internal::marisa::grimoire::io::Reader::read<internal::marisa::grimoire::vector::RankIndex>(uint64_t a1, char *a2, unint64_t a3)
{
  _QWORD *exception;
  const char *v5;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.h";
    exception[2] = 0x200000022;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.h:34: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >= 0x1555555555555556)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.h";
    exception[2] = 0x700000023;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.h:35: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v5;
  }
  return internal::marisa::grimoire::io::Reader::read_data(a1, a2, 12 * a3);
}

_DWORD *internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::realloc(uint64_t *a1, uint64_t a2)
{
  _DWORD *result;
  uint64_t v5;
  uint64_t *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;

  result = operator new[](12 * a2, MEMORY[0x1E0DE4E10]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (uint64_t *)a1[1];
    v7 = result;
    do
    {
      v8 = *v6;
      v7[2] = *((_DWORD *)v6 + 2);
      *(_QWORD *)v7 = v8;
      v7 += 3;
      v6 = (uint64_t *)((char *)v6 + 12);
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x1B5E305F8);
  return result;
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned int>::read_(uint64_t a1, internal::marisa::grimoire::io::Reader *this)
{
  unint64_t v4;
  _QWORD *exception;
  unint64_t v7;

  v7 = 0;
  internal::marisa::grimoire::io::Reader::read_data((uint64_t)this, (char *)&v7, 8uLL);
  if ((v7 & 3) != 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0xA000000DELL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:222: MARISA_FORMAT_ERROR: (total_size % sizeof(T)) != 0";
  }
  v4 = v7 >> 2;
  internal::marisa::grimoire::vector::Vector<unsigned int>::resize((uint64_t *)a1, v7 >> 2);
  internal::marisa::grimoire::io::Reader::read<unsigned int>((uint64_t)this, *(char **)(a1 + 8), v4);
  return internal::marisa::grimoire::io::Reader::seek((uint64_t)this, -(int)v7 & 7);
}

uint64_t *internal::marisa::grimoire::vector::Vector<unsigned int>::resize(uint64_t *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v2 = a2;
  v3 = result;
  v4 = result[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 >> 61)
      v5 = 0x3FFFFFFFFFFFFFFFLL;
    if (v4 > a2 >> 1)
      a2 = v5;
    result = (uint64_t *)internal::marisa::grimoire::vector::Vector<unsigned int>::realloc(result, a2);
  }
  v3[3] = v2;
  return result;
}

uint64_t internal::marisa::grimoire::io::Reader::read<unsigned int>(uint64_t a1, char *a2, unint64_t a3)
{
  _QWORD *exception;
  const char *v5;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.h";
    exception[2] = 0x200000022;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.h:34: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 62)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.h";
    exception[2] = 0x700000023;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.h:35: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v5;
  }
  return internal::marisa::grimoire::io::Reader::read_data(a1, a2, 4 * a3);
}

_DWORD *internal::marisa::grimoire::vector::Vector<unsigned int>::realloc(uint64_t *a1, uint64_t a2)
{
  _DWORD *result;
  uint64_t v5;
  int *v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;

  result = operator new[](4 * a2, MEMORY[0x1E0DE4E10]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (int *)a1[1];
    v7 = result;
    do
    {
      v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x1B5E305F8);
  return result;
}

uint64_t internal::marisa::grimoire::vector::FlatVector::read_(internal::marisa::grimoire::vector::FlatVector *this, internal::marisa::grimoire::io::Reader *a2)
{
  uint64_t result;
  _QWORD *exception;
  uint64_t v6;

  internal::marisa::grimoire::vector::Vector<unsigned long long>::read((__int128 *)this, a2);
  LODWORD(v6) = 0;
  internal::marisa::grimoire::io::Reader::read_data((uint64_t)a2, (char *)&v6, 4uLL);
  if (v6 >= 0x21)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/flat-vector.h";
    exception[2] = 0xA0000009ALL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/fla"
                   "t-vector.h:154: MARISA_FORMAT_ERROR: temp_value_size > 32";
  }
  *((_QWORD *)this + 6) = v6;
  LODWORD(v6) = 0;
  internal::marisa::grimoire::io::Reader::read_data((uint64_t)a2, (char *)&v6, 4uLL);
  *((_DWORD *)this + 14) = v6;
  v6 = 0;
  result = internal::marisa::grimoire::io::Reader::read_data((uint64_t)a2, (char *)&v6, 8uLL);
  *((_QWORD *)this + 8) = v6;
  return result;
}

uint64_t internal::marisa::grimoire::vector::BitVector::write_(internal::marisa::grimoire::vector::BitVector *this, internal::marisa::grimoire::io::Writer *a2)
{
  int v5;
  int __buf;

  internal::marisa::grimoire::vector::Vector<unsigned long long>::write_((uint64_t)this, a2);
  __buf = *((_QWORD *)this + 6);
  internal::marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&__buf, 4uLL);
  v5 = *((_QWORD *)this + 7);
  internal::marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&v5, 4uLL);
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::write_((uint64_t)this + 64, a2);
  internal::marisa::grimoire::vector::Vector<unsigned int>::write_((uint64_t)this + 112, a2);
  return internal::marisa::grimoire::vector::Vector<unsigned int>::write_((uint64_t)this + 160, a2);
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned long long>::write_(uint64_t a1, internal::marisa::grimoire::io::Writer *this)
{
  uint64_t __buf;

  __buf = 8 * *(_QWORD *)(a1 + 24);
  internal::marisa::grimoire::io::Writer::write_data((uint64_t)this, (char *)&__buf, 8uLL);
  internal::marisa::grimoire::io::Writer::write<unsigned long long>((uint64_t)this, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24));
  return internal::marisa::grimoire::io::Writer::seek((uint64_t)this, 0);
}

uint64_t internal::marisa::grimoire::io::Writer::write<unsigned long long>(uint64_t a1, char *a2, unint64_t a3)
{
  _QWORD *exception;
  const char *v5;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x200000021;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:33: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 61)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x700000022;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:34: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v5;
  }
  return internal::marisa::grimoire::io::Writer::write_data(a1, a2, 8 * a3);
}

uint64_t internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::write_(uint64_t a1, internal::marisa::grimoire::io::Writer *this)
{
  uint64_t __buf;

  __buf = 12 * *(_QWORD *)(a1 + 24);
  internal::marisa::grimoire::io::Writer::write_data((uint64_t)this, (char *)&__buf, 8uLL);
  internal::marisa::grimoire::io::Writer::write<internal::marisa::grimoire::vector::RankIndex>((uint64_t)this, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24));
  return internal::marisa::grimoire::io::Writer::seek((uint64_t)this, 4 * (*(_DWORD *)(a1 + 24) & 1));
}

uint64_t internal::marisa::grimoire::io::Writer::write<internal::marisa::grimoire::vector::RankIndex>(uint64_t a1, char *a2, unint64_t a3)
{
  _QWORD *exception;
  const char *v5;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x200000021;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:33: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >= 0x1555555555555556)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x700000022;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:34: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v5;
  }
  return internal::marisa::grimoire::io::Writer::write_data(a1, a2, 12 * a3);
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned int>::write_(uint64_t a1, internal::marisa::grimoire::io::Writer *this)
{
  uint64_t __buf;

  __buf = 4 * *(_QWORD *)(a1 + 24);
  internal::marisa::grimoire::io::Writer::write_data((uint64_t)this, (char *)&__buf, 8uLL);
  internal::marisa::grimoire::io::Writer::write<unsigned int>((uint64_t)this, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24));
  return internal::marisa::grimoire::io::Writer::seek((uint64_t)this, 4 * (*(_DWORD *)(a1 + 24) & 1));
}

uint64_t internal::marisa::grimoire::io::Writer::write<unsigned int>(uint64_t a1, char *a2, unint64_t a3)
{
  _QWORD *exception;
  const char *v5;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x200000021;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:33: MARI"
         "SA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
    goto LABEL_7;
  }
  if (a3 >> 62)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x700000022;
    v5 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h:34: MARI"
         "SA_SIZE_ERROR: num_objs > (MARISA_SIZE_MAX / sizeof(T))";
LABEL_7:
    exception[3] = v5;
  }
  return internal::marisa::grimoire::io::Writer::write_data(a1, a2, 4 * a3);
}

uint64_t internal::marisa::grimoire::vector::FlatVector::write_(internal::marisa::grimoire::vector::FlatVector *this, internal::marisa::grimoire::io::Writer *a2)
{
  uint64_t __buf;

  internal::marisa::grimoire::vector::Vector<unsigned long long>::write_((uint64_t)this, a2);
  LODWORD(__buf) = *((_QWORD *)this + 6);
  internal::marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&__buf, 4uLL);
  LODWORD(__buf) = *((_DWORD *)this + 14);
  internal::marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&__buf, 4uLL);
  __buf = *((_QWORD *)this + 8);
  return internal::marisa::grimoire::io::Writer::write_data((uint64_t)a2, (char *)&__buf, 8uLL);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<std::reverse_iterator<std::__wrap_iter<char const*>>,std::reverse_iterator<std::__wrap_iter<char const*>>>(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v6 = result;
  if (a6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a6 > 0x16)
  {
    v10 = (a6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a6 | 7) != 0x17)
      v10 = a6 | 7;
    v11 = v10 + 1;
    result = operator new(v10 + 1);
    v6[1] = a6;
    v6[2] = v11 | 0x8000000000000000;
    *v6 = result;
    v6 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a6;
  }
  while (a3 != a5)
  {
    v12 = *(_BYTE *)--a3;
    *(_BYTE *)v6 = v12;
    v6 = (_QWORD *)((char *)v6 + 1);
  }
  *(_BYTE *)v6 = 0;
  return result;
}

char *internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Key>::realloc(uint64_t *a1, uint64_t a2)
{
  char *result;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;

  result = (char *)operator new[](24 * a2, MEMORY[0x1E0DE4E10]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (_DWORD *)(a1[1] + 16);
    v7 = result + 16;
    do
    {
      *((_QWORD *)v7 - 2) = *((_QWORD *)v6 - 2);
      *(v7 - 2) = *(v6 - 2);
      *(v7 - 1) = *(v6 - 1);
      v8 = *v6;
      v6 += 6;
      *v7 = v8;
      v7 += 6;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x1B5E305F8);
  return result;
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::build_current_trie<internal::marisa::grimoire::trie::Key>(uint64_t *a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  __n128 v34;
  uint64_t v35;
  __n128 *v36;
  unint64_t v37;
  __n128 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int *v43;
  uint64_t *v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int32 *v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float *v63;
  float v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  uint64_t result;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  __n128 v78;
  int v79;
  __int128 v80;
  uint64_t v81[4];
  _OWORD v82[2];
  __int128 v83;
  _OWORD v84[4];

  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 8);
  if (v9)
  {
    v11 = 0;
    v12 = (_DWORD *)(v10 + 16);
    do
    {
      *v12 = v11;
      v12 += 6;
      ++v11;
    }
    while (v9 != v11);
  }
  v13 = internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Key *>(v10, v10 + 24 * v9, 0);
  v14 = 256;
  if (a5 != 1)
    v14 = 1;
  do
  {
    v15 = v14;
    v14 *= 2;
  }
  while (v15 < v13 / *(unsigned int *)(a4 + 8));
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Cache>::resize(a1 + 126, v15);
  a1[132] = v15 - 1;
  internal::marisa::grimoire::vector::BitVector::push_back(a1, 1);
  internal::marisa::grimoire::vector::BitVector::push_back(a1, 0);
  v16 = a1 + 78;
  LOBYTE(v84[0]) = 0;
  internal::marisa::grimoire::vector::Vector<unsigned char>::push_back(a1 + 78, v84);
  v77 = a1 + 52;
  internal::marisa::grimoire::vector::BitVector::push_back(a1 + 52, 0);
  v72 = a5;
  memset(v84, 0, 41);
  v83 = 0u;
  memset(v82, 0, sizeof(v82));
  v80 = 0u;
  memset(v81, 0, 25);
  v78.n128_u64[0] = *(_QWORD *)(a2 + 24) << 32;
  v78.n128_u32[2] = 0;
  std::deque<internal::marisa::grimoire::trie::Range>::push_back(v82, (uint64_t *)&v78);
  v17 = *((_QWORD *)&v83 + 1);
  if (*((_QWORD *)&v83 + 1))
  {
    v73 = a1 + 78;
    do
    {
      v18 = a1[58];
      v19 = (unsigned int *)(*(_QWORD *)(*((_QWORD *)&v82[0] + 1) + 8 * ((unint64_t)v83 / 0x155))
                           + 12 * ((unint64_t)v83 % 0x155));
      v20 = *v19;
      v21 = v19[1];
      v22 = v19[2];
      *(_QWORD *)&v83 = v83 + 1;
      *((_QWORD *)&v83 + 1) = v17 - 1;
      if ((unint64_t)v83 >= 0x2AA)
      {
        v23 = v18;
        operator delete(**((void ***)&v82[0] + 1));
        v18 = v23;
        *((_QWORD *)&v82[0] + 1) += 8;
        *(_QWORD *)&v83 = v83 - 341;
      }
      v76 = v17;
      v24 = v18 - v17;
      if (v20 < v21)
      {
        while (1)
        {
          v25 = *(_QWORD *)(a2 + 8);
          if (*(_DWORD *)(v25 + 24 * v20 + 8) != (_DWORD)v22)
            break;
          *(_DWORD *)(v25 + 24 * v20 + 12) = v24;
          v20 = (v20 + 1);
          if ((_DWORD)v21 == (_DWORD)v20)
            goto LABEL_49;
        }
      }
      if ((_DWORD)v20 != (_DWORD)v21)
      {
        v75 = v18;
        v26 = v80;
        v80 = 0u;
        memset(v81, 0, 25);
        if (v26)
          MEMORY[0x1B5E305F8](v26, 0x1000C8077774924);
        v27 = *(_QWORD *)(a2 + 8);
        v28 = *(float *)(v27 + 24 * v20 + 12);
        v29 = v20 + 1;
        if (v20 + 1 < v21)
        {
          v30 = 24 * v20;
          v31 = (v20 << 32) + 0x100000000;
          do
          {
            if (*(unsigned __int8 *)(*(_QWORD *)(v27 + v30) + v22) != *(unsigned __int8 *)(*(_QWORD *)(v27 + v30 + 24)
                                                                                          + v22))
            {
              *(float *)&v32 = v28;
              v78.n128_u64[0] = v31 + v20;
              v78.n128_u64[1] = v22 | ((unint64_t)v32 << 32);
              internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::WeightedRange>::push_back((uint64_t *)&v80, &v78);
              v27 = *(_QWORD *)(a2 + 8);
              v28 = 0.0;
              LODWORD(v20) = v29;
            }
            v28 = v28 + *(float *)(v27 + v30 + 36);
            ++v29;
            v30 += 24;
            v31 += 0x100000000;
          }
          while (v21 != v29);
        }
        *(float *)&v33 = v28;
        v78.n128_u32[0] = v20;
        v78.n128_u32[1] = v21;
        v78.n128_u64[1] = v22 | ((unint64_t)v33 << 32);
        v34 = internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::WeightedRange>::push_back((uint64_t *)&v80, &v78);
        v16 = a1 + 78;
        v35 = v75;
        if (*(_DWORD *)(a4 + 16) == 0x20000)
        {
          v36 = (__n128 *)*((_QWORD *)&v80 + 1);
          v37 = v81[1];
          if (v81[1] < 129)
          {
            v38 = 0;
            v40 = 0;
          }
          else
          {
            v38 = (__n128 *)std::get_temporary_buffer[abi:ne180100]<internal::marisa::grimoire::trie::WeightedRange>(v81[1]);
            v40 = v39;
          }
          std::__stable_sort<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(v36, &v36[v37], (uint64_t)&v78, v37, v38, v40, v34);
          if (v38)
            operator delete(v38);
          v35 = v75;
        }
        v41 = v81[1];
        if (v35 == v76)
          a1[133] = v81[1];
        if (v41)
        {
          v42 = 0;
          do
          {
            v43 = (unsigned int *)(*((_QWORD *)&v80 + 1) + 16 * v42);
            v44 = (uint64_t *)v43;
            v45 = v43[2];
            v46 = *v43;
            v47 = *(_QWORD *)(a2 + 8);
            v48 = *(unsigned int *)(v47 + 24 * *v43 + 8);
            v49 = v45 + 1;
            if (v45 + 1 >= v48)
            {
              v50 = v43[2];
              LODWORD(v48) = v45 + 1;
            }
            else
            {
              v50 = v48 - 1;
              v51 = v43[2];
              do
              {
                v52 = v51;
                v51 = v49;
                v53 = (uint64_t *)(v47 + 24 * v46);
                v54 = *v43;
                while (++v54 < (unint64_t)v43[1])
                {
                  v55 = *v53;
                  v56 = v53[3];
                  v53 += 3;
                  if (*(unsigned __int8 *)(v55 + v51) != *(unsigned __int8 *)(v56 + v51))
                  {
                    v50 = v52;
                    LODWORD(v48) = v51;
                    goto LABEL_43;
                  }
                }
                v49 = v51 + 1;
              }
              while (v51 + 1 != v48);
            }
LABEL_43:
            v58 = *((float *)v43 + 3);
            v57 = v43 + 3;
            v59 = v58;
            v60 = ((32 * v24) ^ v24 ^ *(unsigned __int8 *)(*(_QWORD *)(v47 + 24 * v46) + v45)) & a1[132];
            v61 = a1[127];
            v62 = v61 + 12 * v60;
            v64 = *(float *)(v62 + 8);
            v63 = (float *)(v62 + 8);
            if (v64 < v59)
            {
              v65 = a1[81];
              v66 = (_DWORD *)(v61 + 12 * v60);
              *v66 = v24;
              v66[1] = v65;
              *v63 = v59;
              v45 = *((unsigned int *)v44 + 2);
            }
            if (v50 == v45)
            {
              v78.n128_u8[0] = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * *(unsigned int *)v44) + v50);
              internal::marisa::grimoire::vector::Vector<unsigned char>::push_back(v73, &v78);
              internal::marisa::grimoire::vector::BitVector::push_back(v77, 0);
            }
            else
            {
              v78.n128_u8[0] = 0;
              internal::marisa::grimoire::vector::Vector<unsigned char>::push_back(v73, &v78);
              internal::marisa::grimoire::vector::BitVector::push_back(v77, 1);
              v78 = 0uLL;
              v79 = 0;
              v67 = *((unsigned int *)v44 + 2);
              v78.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * *(unsigned int *)v44) + v67;
              v78.n128_u64[1] = (v48 - v67);
              v78.n128_u32[3] = *v57;
              internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Key>::push_back((uint64_t *)v84, (uint64_t)&v78);
            }
            *((_DWORD *)v44 + 2) = v48;
            std::deque<internal::marisa::grimoire::trie::Range>::push_back(v82, v44);
            internal::marisa::grimoire::vector::BitVector::push_back(a1, 1);
            ++v42;
          }
          while (v42 < v81[1]);
        }
      }
LABEL_49:
      internal::marisa::grimoire::vector::BitVector::push_back(a1, 0);
      v17 = *((_QWORD *)&v83 + 1);
    }
    while (*((_QWORD *)&v83 + 1));
  }
  internal::marisa::grimoire::vector::BitVector::push_back(a1, 0);
  internal::marisa::grimoire::vector::BitVector::build((internal::marisa::grimoire::vector::BitVector *)a1, v72 == 1, 1);
  internal::marisa::grimoire::vector::Vector<unsigned char>::shrink(v16);
  internal::marisa::grimoire::trie::LoudsTrie::build_terminals<internal::marisa::grimoire::trie::Key>((uint64_t)a1, a2, a3);
  v68 = *(_OWORD *)a2;
  *(_OWORD *)a2 = v84[0];
  v84[0] = v68;
  v69 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)&v84[1];
  *(_QWORD *)&v84[1] = v69;
  v70 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)&v84[1] + 8);
  *(_OWORD *)((char *)&v84[1] + 8) = v70;
  LOBYTE(v69) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a2 + 40) = BYTE8(v84[2]);
  BYTE8(v84[2]) = v69;
  if ((_QWORD)v80)
    MEMORY[0x1B5E305F8](v80, 0x1000C8077774924);
  std::deque<internal::marisa::grimoire::trie::Range>::~deque[abi:ne180100](v82);
  result = *(_QWORD *)&v84[0];
  if (*(_QWORD *)&v84[0])
    return MEMORY[0x1B5E305F8](*(_QWORD *)&v84[0], 0x1000C8077774924);
  return result;
}

void sub_1B3E1D188(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, ...)
{
  uint64_t v18;
  uint64_t v21;
  _QWORD *exception;
  va_list va;

  va_start(va, a18);
  if (a13)
    MEMORY[0x1B5E305F8](a13, 0x1000C8077774924);
  std::deque<internal::marisa::grimoire::trie::Range>::~deque[abi:ne180100]((uint64_t *)va);
  v21 = *(_QWORD *)(v18 - 144);
  if (v21)
    MEMORY[0x1B5E305F8](v21, 0x1000C8077774924);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
    exception[2] = 0x8000001D3;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds"
                   "-trie.cc:467: MARISA_MEMORY_ERROR: std::bad_alloc";
  }
  _Unwind_Resume(a1);
}

uint64_t internal::marisa::grimoire::vector::FlatVector::build(__int128 *a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _OWORD v9[3];
  uint64_t v10;
  int v11;
  uint64_t v12;

  memset(v9, 0, 41);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  internal::marisa::grimoire::vector::FlatVector::build_((uint64_t)v9, a2);
  v3 = *a1;
  *a1 = v9[0];
  v9[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v9[1];
  *(_QWORD *)&v9[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v9[1] + 8);
  *(_OWORD *)((char *)&v9[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v9[2]);
  BYTE8(v9[2]) = v4;
  v6 = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 6) = v10;
  v10 = v6;
  LODWORD(v6) = *((_DWORD *)a1 + 14);
  *((_DWORD *)a1 + 14) = v11;
  v11 = v6;
  v7 = *((_QWORD *)a1 + 8);
  *((_QWORD *)a1 + 8) = v12;
  result = v3;
  v12 = v7;
  if ((_QWORD)v3)
    return MEMORY[0x1B5E305F8](v3, 0x1000C8077774924);
  return result;
}

void sub_1B3E1D360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1B5E305F8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t *internal::marisa::grimoire::vector::Vector<unsigned char>::push_back(uint64_t *result, _BYTE *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  size_t v8;

  v3 = result;
  v4 = result[3];
  v5 = result[4];
  v6 = v4 + 1;
  if (v5 < (unint64_t)(v4 + 1))
  {
    v7 = 2 * v5;
    if (v5 < 0)
      v7 = -1;
    if (v5 <= v6 >> 1)
      v8 = v6;
    else
      v8 = v7;
    result = (uint64_t *)internal::marisa::grimoire::vector::Vector<unsigned char>::realloc(result, v8);
    v4 = v3[3];
  }
  *(_BYTE *)(v3[1] + v4) = *a2;
  ++v3[3];
  return result;
}

__n128 internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::WeightedRange>::push_back(uint64_t *a1, __n128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;

  v4 = a1[3];
  v5 = a1[4];
  v6 = v4 + 1;
  if (v5 < v4 + 1)
  {
    v7 = 2 * v5;
    if (v5 >> 59)
      v7 = 0xFFFFFFFFFFFFFFFLL;
    if (v5 <= v6 >> 1)
      v8 = v6;
    else
      v8 = v7;
    internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::WeightedRange>::realloc(a1, v8);
    v4 = a1[3];
  }
  result = *a2;
  *(__n128 *)(a1[1] + 16 * v4) = *a2;
  ++a1[3];
  return result;
}

uint64_t *internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Key>::push_back(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v4 = result[3];
  v5 = result[4];
  v6 = v4 + 1;
  if (v5 < v4 + 1)
  {
    v7 = 2 * v5;
    if (v5 > 0x555555555555555)
      v7 = 0xAAAAAAAAAAAAAAALL;
    if (v5 <= v6 >> 1)
      v8 = v6;
    else
      v8 = v7;
    result = (uint64_t *)internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Key>::realloc(result, v8);
    v4 = v3[3];
  }
  v9 = v3[1] + 24 * v4;
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v9 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v9 + 16) = *(_DWORD *)(a2 + 16);
  ++v3[3];
  return result;
}

_BYTE *internal::marisa::grimoire::vector::Vector<unsigned char>::shrink(_BYTE *result)
{
  size_t v1;
  _QWORD *exception;

  if (result[40])
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0x100000072;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:114: MARISA_STATE_ERROR: fixed_";
  }
  v1 = *((_QWORD *)result + 3);
  if (v1 != *((_QWORD *)result + 4))
    return internal::marisa::grimoire::vector::Vector<unsigned char>::realloc((uint64_t *)result, v1);
  return result;
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::build_terminals<internal::marisa::grimoire::trie::Key>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t result;
  _OWORD v13[3];

  memset(v13, 0, 41);
  internal::marisa::grimoire::vector::Vector<unsigned int>::resize((uint64_t *)v13, *(_QWORD *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v6 = *((_QWORD *)&v13[0] + 1);
    v7 = (unsigned int *)(*(_QWORD *)(a2 + 16) + 16);
    do
    {
      *(_DWORD *)(v6 + 4 * *v7) = *(v7 - 1);
      v7 += 6;
      --v5;
    }
    while (v5);
  }
  else
  {
    v6 = *((_QWORD *)&v13[0] + 1);
  }
  v8 = *a3;
  v9 = *(_QWORD *)&v13[1];
  *(_QWORD *)a3 = *(_QWORD *)&v13[0];
  *((_QWORD *)a3 + 1) = v6;
  v13[0] = v8;
  v10 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 2) = v9;
  *(_QWORD *)&v13[1] = v10;
  v11 = *(__int128 *)((char *)a3 + 24);
  *(__int128 *)((char *)a3 + 24) = *(_OWORD *)((char *)&v13[1] + 8);
  *(_OWORD *)((char *)&v13[1] + 8) = v11;
  LOBYTE(v10) = *((_BYTE *)a3 + 40);
  *((_BYTE *)a3 + 40) = BYTE8(v13[2]);
  result = v8;
  BYTE8(v13[2]) = v10;
  if ((_QWORD)v8)
    return MEMORY[0x1B5E305F8](v8, 0x1000C8077774924);
  return result;
}

void sub_1B3E1D638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1B5E305F8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Key *>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;

  v4 = a2;
  v5 = a1;
  v6 = a2 - a1;
  if ((uint64_t)(a2 - a1) < 241)
  {
    v7 = 0;
    goto LABEL_69;
  }
  v7 = 0;
  do
  {
    v8 = internal::marisa::grimoire::algorithm::details::median<internal::marisa::grimoire::trie::Key>(v5, v5 + 24 * (v6 / 0x30uLL), v4 - 24, a3);
    v9 = v8;
    v10 = v5;
    v11 = v4;
    v12 = v5;
    v13 = v4;
    while (v10 < v11)
    {
      v14 = *(unsigned int *)(v10 + 8);
      v15 = a3 >= v14 ? -1 : *(unsigned __int8 *)(*(_QWORD *)v10 + a3);
      if (v15 > v8)
        break;
      if (v15 == v8)
      {
        v16 = *(_QWORD *)v10;
        *(_QWORD *)v10 = *(_QWORD *)v12;
        *(_DWORD *)(v10 + 8) = *(_DWORD *)(v12 + 8);
        v17 = *(_QWORD *)(v10 + 12);
        *(_DWORD *)(v10 + 12) = *(_DWORD *)(v12 + 12);
        *(_DWORD *)(v10 + 16) = *(_DWORD *)(v12 + 16);
        *(_QWORD *)v12 = v16;
        *(_DWORD *)(v12 + 8) = v14;
        *(_QWORD *)(v12 + 12) = v17;
        v12 += 24;
      }
LABEL_11:
      v10 += 24;
    }
    if (v10 < v11)
    {
      v18 = v11 - 24;
      do
      {
        v11 = v18;
        v19 = *(unsigned int *)(v18 + 8);
        if (a3 >= v19)
          v20 = -1;
        else
          v20 = *(unsigned __int8 *)(*(_QWORD *)v11 + a3);
        if (v20 < v8)
          break;
        if (v20 == v8)
        {
          v21 = *(_QWORD *)(v13 - 24);
          v13 -= 24;
          v22 = *(_QWORD *)v11;
          *(_QWORD *)v11 = v21;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v13 + 8);
          v23 = *(_QWORD *)(v11 + 12);
          *(_DWORD *)(v11 + 12) = *(_DWORD *)(v13 + 12);
          *(_DWORD *)(v11 + 16) = *(_DWORD *)(v13 + 16);
          *(_QWORD *)v13 = v22;
          *(_DWORD *)(v13 + 8) = v19;
          *(_QWORD *)(v13 + 12) = v23;
        }
        v18 = v11 - 24;
      }
      while (v10 < v11);
    }
    if (v10 < v11)
    {
      v24 = *(_QWORD *)v10;
      v25 = *(_DWORD *)(v10 + 16);
      *(_QWORD *)v10 = *(_QWORD *)v11;
      v26 = *(_QWORD *)(v10 + 8);
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v10 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v10 + 16) = *(_DWORD *)(v11 + 16);
      *(_QWORD *)v11 = v24;
      *(_QWORD *)(v11 + 8) = v26;
      *(_DWORD *)(v11 + 16) = v25;
      goto LABEL_11;
    }
    v44 = v7;
    if (v12 > v5)
    {
      v27 = 0;
      do
      {
        v28 = v12 + v27;
        v29 = v10 + v27;
        v30 = *(_QWORD *)(v12 + v27 - 24);
        v31 = *(_DWORD *)(v12 + v27 - 8);
        *(_QWORD *)(v28 - 24) = *(_QWORD *)(v10 + v27 - 24);
        v32 = *(_QWORD *)(v12 + v27 - 16);
        *(_DWORD *)(v28 - 16) = *(_DWORD *)(v10 + v27 - 16);
        *(_DWORD *)(v28 - 12) = *(_DWORD *)(v10 + v27 - 12);
        *(_DWORD *)(v28 - 8) = *(_DWORD *)(v10 + v27 - 8);
        *(_QWORD *)(v29 - 24) = v30;
        *(_QWORD *)(v29 - 16) = v32;
        *(_DWORD *)(v29 - 8) = v31;
        v27 -= 24;
      }
      while (v12 + v27 > v5);
      v10 += v27;
    }
    while (v13 < v4)
    {
      v33 = *(_QWORD *)v13;
      v34 = *(_DWORD *)(v13 + 16);
      *(_QWORD *)v13 = *(_QWORD *)v11;
      v35 = *(_QWORD *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v13 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v13 + 16) = *(_DWORD *)(v11 + 16);
      *(_QWORD *)v11 = v33;
      *(_QWORD *)(v11 + 8) = v35;
      *(_DWORD *)(v11 + 16) = v34;
      v11 += 24;
      v13 += 24;
    }
    v36 = v10 - v5;
    v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v5) >> 3);
    v38 = v11 - v10;
    v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v10) >> 3);
    if (v37 <= v39)
    {
      v40 = v4 - v11;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)) <= v39)
      {
        if (v36 == 24)
        {
          v41 = v44 + 1;
        }
        else
        {
          if (v36 < 25)
            goto LABEL_53;
          v41 = internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Key *>(v5, v10, a3)+ v44;
        }
        v44 = v41;
LABEL_53:
        if (v40 == 24)
        {
          v7 = v44 + 1;
        }
        else if (v40 < 25)
        {
          v7 = v44;
        }
        else
        {
          v7 = internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Key *>(v11, v4, a3)+ v44;
        }
        if (v38 == 24)
        {
          ++v7;
        }
        else if (v38 >= 25)
        {
          if (v9 == -1)
          {
            ++v7;
            v5 = v11;
            goto LABEL_64;
          }
          ++a3;
        }
        v5 = v10;
LABEL_64:
        v4 = v11;
        goto LABEL_65;
      }
    }
    if (v38 == 24)
      goto LABEL_32;
    if (v38 < 25)
    {
      v7 = v44;
    }
    else if (v8 == -1)
    {
LABEL_32:
      v7 = v44 + 1;
    }
    else
    {
      v7 = internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Key *>(v10, v11, a3 + 1)+ v44;
    }
    v42 = v4 - v11;
    if (v37 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)))
    {
      if (v42 == 24)
      {
        ++v7;
      }
      else if (v42 >= 25)
      {
        v7 += internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Key *>(v11, v4, a3);
      }
      v4 = v10;
    }
    else
    {
      if (v36 == 24)
      {
        ++v7;
      }
      else if (v36 >= 25)
      {
        v7 += internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Key *>(v5, v10, a3);
      }
      v5 = v11;
    }
LABEL_65:
    v6 = v4 - v5;
  }
  while ((uint64_t)(v4 - v5) > 240);
LABEL_69:
  if (v6 >= 25)
    v7 += internal::marisa::grimoire::algorithm::details::insertion_sort<internal::marisa::grimoire::trie::Key *>(v5, v4, a3);
  return v7;
}

uint64_t internal::marisa::grimoire::algorithm::details::median<internal::marisa::grimoire::trie::Key>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v4;
  int v5;
  int v6;
  int v7;

  if (*(unsigned int *)(a1 + 8) <= a4)
    v4 = -1;
  else
    v4 = *(unsigned __int8 *)(*(_QWORD *)a1 + a4);
  if (*(unsigned int *)(a2 + 8) <= a4)
    v5 = -1;
  else
    v5 = *(unsigned __int8 *)(*(_QWORD *)a2 + a4);
  if (*(unsigned int *)(a3 + 8) <= a4)
    v6 = -1;
  else
    v6 = *(unsigned __int8 *)(*(_QWORD *)a3 + a4);
  if (v4 <= v5)
    v7 = v5;
  else
    v7 = v4;
  if (v4 >= v5)
    v4 = v5;
  if (v4 <= v6)
    v4 = v6;
  if (v7 >= v6)
    return v4;
  else
    return v7;
}

uint64_t internal::marisa::grimoire::algorithm::details::insertion_sort<internal::marisa::grimoire::trie::Key *>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a1 + 24;
  if (a1 + 24 >= a2)
    return 1;
  v7 = 1;
  do
  {
    v8 = v3;
    if (v3 <= a1)
    {
      v10 = 0;
    }
    else
    {
      while (1)
      {
        v9 = v8 - 24;
        v10 = internal::marisa::grimoire::algorithm::details::compare<internal::marisa::grimoire::trie::Key>(v8 - 24, v8, a3);
        if (v10 < 1)
          break;
        v11 = *(_QWORD *)(v8 - 24);
        v12 = *(_DWORD *)(v8 - 8);
        *(_QWORD *)(v8 - 24) = *(_QWORD *)v8;
        v13 = *(_QWORD *)(v8 + 8);
        *(_DWORD *)(v8 - 8) = *(_DWORD *)(v8 + 16);
        *(_QWORD *)v8 = v11;
        v14 = *(_QWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 + 8) = v14;
        *(_DWORD *)(v8 + 16) = v12;
        v8 -= 24;
        if (v9 <= a1)
        {
          v10 = 1;
          break;
        }
      }
    }
    if (v10)
      ++v7;
    v3 += 24;
  }
  while (v3 < a2);
  return v7;
}

uint64_t internal::marisa::grimoire::algorithm::details::compare<internal::marisa::grimoire::trie::Key>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  uint64_t result;
  unsigned int v12;

  v3 = *(unsigned int *)(a1 + 8);
  v4 = *(unsigned int *)(a2 + 8);
  v5 = v3 - a3;
  if (v3 <= a3)
  {
LABEL_6:
    if (v3 < v4)
      v12 = -1;
    else
      v12 = 1;
    if ((_DWORD)v3 == (_DWORD)v4)
      return 0;
    else
      return v12;
  }
  else
  {
    v6 = v4 - a3;
    v7 = (unsigned __int8 *)(*(_QWORD *)a1 + a3);
    v8 = (unsigned __int8 *)(*(_QWORD *)a2 + a3);
    while (v6)
    {
      v9 = *v7;
      v10 = *v8;
      result = (v9 - v10);
      if (v9 != v10)
        return result;
      --v6;
      ++v7;
      ++v8;
      if (!--v5)
        goto LABEL_6;
    }
    return 1;
  }
}

_BYTE *internal::marisa::grimoire::vector::Vector<unsigned char>::realloc(uint64_t *a1, size_t __sz)
{
  _BYTE *result;
  uint64_t v5;
  char *v6;
  _BYTE *v7;
  char v8;
  uint64_t v9;

  result = operator new[](__sz, MEMORY[0x1E0DE4E10]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (char *)a1[1];
    v7 = result;
    do
    {
      v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = __sz;
  if (v9)
    JUMPOUT(0x1B5E305F8);
  return result;
}

void std::deque<internal::marisa::grimoire::trie::Range>::push_back(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 341 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<internal::marisa::grimoire::trie::Range>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x155)) + 12 * (v7 % 0x155);
  v9 = *a2;
  *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v8 = v9;
  ++a1[5];
}

void std::deque<internal::marisa::grimoire::trie::Range>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x155;
  v4 = v2 - 341;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<internal::marisa::grimoire::trie::Range *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFFCuLL);
      std::__split_buffer<internal::marisa::grimoire::trie::Range *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFFCuLL);
    std::__split_buffer<internal::marisa::grimoire::trie::Range *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<internal::marisa::grimoire::trie::Range *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<internal::marisa::grimoire::trie::Range *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFFCuLL);
  std::__split_buffer<internal::marisa::grimoire::trie::Range *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<internal::marisa::grimoire::trie::Range *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1B3E1E09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<internal::marisa::grimoire::trie::Range *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<internal::marisa::grimoire::trie::Range *>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<internal::marisa::grimoire::trie::Range *>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<internal::marisa::grimoire::trie::Range *>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<internal::marisa::grimoire::trie::Range *>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<internal::marisa::grimoire::trie::Range *>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<internal::marisa::grimoire::trie::Range *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

_OWORD *internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::WeightedRange>::realloc(uint64_t *a1, uint64_t a2)
{
  _OWORD *result;
  uint64_t v5;
  __int128 *v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;

  result = operator new[](16 * a2, MEMORY[0x1E0DE4E10]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (__int128 *)a1[1];
    v7 = result;
    do
    {
      v8 = *v6++;
      *v7++ = v8;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x1B5E305F8);
  return result;
}

void *std::get_temporary_buffer[abi:ne180100]<internal::marisa::grimoire::trie::WeightedRange>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x7FFFFFFFFFFFFFFLL)
    v1 = 0x7FFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(16 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

double std::__stable_sort<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, uint64_t a6, __n128 a7)
{
  unint64_t v13;
  __n128 *v14;
  unint64_t v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;

  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      a7.n128_u32[0] = a2[-1].n128_u32[3];
      if (a7.n128_f32[0] > a1->n128_f32[3])
      {
        a7 = *a1;
        *a1 = a2[-1];
        a2[-1] = a7;
      }
    }
    else if ((uint64_t)a4 > 128)
    {
      v13 = a4 >> 1;
      v14 = &a1[a4 >> 1];
      v15 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v17.n128_f64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(a1, v14, a3, v15, a5, a7);
        v18.n128_f64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v13], v17);
        a7.n128_u64[0] = std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*,internal::marisa::grimoire::trie::WeightedRange*,internal::marisa::grimoire::trie::WeightedRange*>(a5, &a5[v13], &a5[v13], &a5[a4], a1, v18).n128_u64[0];
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(a1, v14, a3, v15, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        a7.n128_u64[0] = std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>((__int128 *)a1, (__int128 *)&a1[a4 >> 1], (__int128 *)a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6, v16).n128_u64[0];
      }
    }
    else
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>((uint64_t)a1, (uint64_t)a2);
    }
  }
  return a7.n128_f64[0];
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  if (result != a2)
  {
    v2 = result + 16;
    if (result + 16 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = *(float *)(v4 + 28);
        v6 = *(float *)(v4 + 12);
        v4 = v2;
        if (v5 > v6)
        {
          v10 = *(_QWORD *)v2;
          v11 = *(_DWORD *)(v2 + 8);
          v7 = v3;
          while (1)
          {
            *(_OWORD *)(result + v7 + 16) = *(_OWORD *)(result + v7);
            if (!v7)
              break;
            v8 = *(float *)(result + v7 - 4);
            v7 -= 16;
            if (v5 <= v8)
            {
              v9 = result + v7 + 16;
              goto LABEL_10;
            }
          }
          v9 = result;
LABEL_10:
          *(_QWORD *)v9 = v10;
          *(_DWORD *)(v9 + 8) = v11;
          *(float *)(v9 + 12) = v5;
        }
        v2 = v4 + 16;
        v3 += 16;
      }
      while (v4 + 16 != a2);
    }
  }
  return result;
}

double std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, __n128 a6)
{
  __n128 *v10;
  __n128 v12;

  if (a4)
  {
    if (a4 == 2)
    {
      v10 = a2 - 1;
      if (a2[-1].n128_f32[3] <= a1->n128_f32[3])
      {
        *a5 = *a1;
        a6 = *v10;
      }
      else
      {
        *a5 = *v10;
        a6 = *a1;
      }
      a5[1] = a6;
    }
    else if (a4 == 1)
    {
      a6 = *a1;
      *a5 = *a1;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(a1, &a1[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      a6.n128_u64[0] = std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*,internal::marisa::grimoire::trie::WeightedRange*,internal::marisa::grimoire::trie::WeightedRange*>(a1, &a1[a4 >> 1], &a1[a4 >> 1], a2, a5, v12).n128_u64[0];
    }
    else
    {
      a6.n128_u64[0] = std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(a1, a2, a5).n128_u64[0];
    }
  }
  return a6.n128_f64[0];
}

__n128 std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*,internal::marisa::grimoire::trie::WeightedRange*,internal::marisa::grimoire::trie::WeightedRange*>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, __n128 result)
{
  __n128 v6;
  __n128 v7;
  __n128 v8;
  uint64_t v9;

  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        v8 = *a3++;
        result.n128_u64[0] = v8.n128_u64[0];
        *a5++ = v8;
      }
      return result;
    }
    if (a3 == a4)
      break;
    if (a3->n128_f32[3] <= a1->n128_f32[3])
    {
      v7 = *a1++;
      result = v7;
    }
    else
    {
      v6 = *a3++;
      result = v6;
    }
    *a5++ = result;
  }
  if (a1 != a2)
  {
    v9 = 0;
    do
    {
      result = a1[v9];
      a5[v9++] = result;
    }
    while (&a1[v9] != a2);
  }
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, __n128 result)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  unint64_t v21;
  unint64_t v22;
  __int128 *v23;
  float v24;
  __int128 *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 *v29;
  float v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 *v39;
  uint64_t v40;
  __n128 v43;

  if (a6)
  {
    v10 = a6;
    do
    {
      if (v10 <= a8 || a5 <= a8)
      {
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(a1, a2, a3, a4, a5, v10, a7);
        return result;
      }
      if (!a5)
        return result;
      v12 = 0;
      result.n128_u32[0] = *((_DWORD *)a2 + 3);
      v13 = -a5;
      while (1)
      {
        v14 = &a1[v12];
        if (result.n128_f32[0] > *((float *)&a1[v12] + 3))
          break;
        ++v12;
        if (__CFADD__(v13++, 1))
          return result;
      }
      v16 = -v13;
      v39 = a3;
      v40 = a8;
      if (-v13 >= v10)
      {
        if (v13 == -1)
        {
          v43 = (__n128)a1[v12];
          a1[v12] = *a2;
          result = v43;
          *a2 = (__int128)v43;
          return result;
        }
        if (v13 > 0)
          v16 = 1 - v13;
        v26 = v16 >> 1;
        v20 = &a1[(v16 >> 1) + v12];
        v19 = a3;
        if (a3 != a2)
        {
          v27 = a3 - a2;
          v19 = a2;
          do
          {
            v28 = v27 >> 1;
            v29 = &v19[v27 >> 1];
            v30 = *((float *)v29 + 3);
            v31 = v29 + 1;
            v27 += ~(v27 >> 1);
            if (v30 > *((float *)v20 + 3))
              v19 = v31;
            else
              v27 = v28;
          }
          while (v27);
        }
        v18 = v19 - a2;
      }
      else
      {
        if (v10 >= 0)
          v17 = v10;
        else
          v17 = v10 + 1;
        v18 = v17 >> 1;
        v19 = &a2[v17 >> 1];
        v20 = a2;
        if (v14 != a2)
        {
          v21 = ((char *)a2 - (char *)a1 - v12 * 16) >> 4;
          v20 = &a1[v12];
          do
          {
            v22 = v21 >> 1;
            v23 = &v20[v21 >> 1];
            v24 = *((float *)v23 + 3);
            v25 = v23 + 1;
            v21 += ~(v21 >> 1);
            if (*((float *)v19 + 3) > v24)
              v21 = v22;
            else
              v20 = v25;
          }
          while (v21);
        }
        v26 = ((char *)v20 - (char *)a1 - v12 * 16) >> 4;
      }
      a5 = -(v26 + v13);
      v32 = v10 - v18;
      v33 = v18;
      v34 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,internal::marisa::grimoire::trie::WeightedRange *,internal::marisa::grimoire::trie::WeightedRange *>((char *)v20, (char *)a2, (char *)v19);
      v35 = v33;
      v36 = (__int128 *)v34;
      if (v26 + v35 >= v10 - (v26 + v35) - v13)
      {
        v38 = v35;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(v34, v19, v39, a4, a5, v32, a7, v40);
        v19 = v20;
        v32 = v38;
        a5 = v26;
        a8 = v40;
        a3 = v36;
      }
      else
      {
        v37 = v26;
        a8 = v40;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(v14, v20, v34, a4, v37, v35, a7, v40);
        v14 = v36;
        a3 = v39;
      }
      v10 = v32;
      a1 = v14;
      a2 = v19;
    }
    while (v32);
  }
  return result;
}

__n128 std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(__n128 *a1, __n128 *a2, __n128 *a3)
{
  __n128 result;
  __n128 *v4;
  uint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 *v8;
  __n128 *v9;
  uint64_t v10;

  if (a1 != a2)
  {
    result = *a1;
    *a3 = *a1;
    v4 = a1 + 1;
    if (&a1[1] != a2)
    {
      v5 = 0;
      v6 = a3;
      do
      {
        v7 = a1;
        v8 = v6;
        a1 = v4;
        v9 = ++v6;
        if (v7[1].n128_f32[3] > v8->n128_f32[3])
        {
          *v6 = *v8;
          v9 = a3;
          if (v8 != a3)
          {
            v10 = v5;
            while (1)
            {
              v9 = (__n128 *)((char *)a3 + v10);
              if (v7[1].n128_f32[3] <= *(float *)((char *)&a3->n128_f32[-1] + v10))
                break;
              *v9 = v9[-1];
              v10 -= 16;
              if (!v10)
              {
                v9 = a3;
                break;
              }
            }
          }
        }
        result = *a1;
        *v9 = *a1;
        v4 = a1 + 1;
        v5 += 16;
      }
      while (&a1[1] != a2);
    }
  }
  return result;
}

__int128 *std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(__int128 *result, __int128 *a2, __int128 *a3, int a4, uint64_t a5, uint64_t a6, char *__src)
{
  uint64_t v7;
  float *v8;
  __int128 *v9;
  float v10;
  float v11;
  char *v12;
  unint64_t v13;
  float *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;

  if (a5 <= a6)
  {
    if (result != a2)
    {
      v13 = 0;
      do
      {
        *(_OWORD *)&__src[v13] = result[v13 / 0x10];
        v13 += 16;
      }
      while (&result[v13 / 0x10] != a2);
      if (v13)
      {
        v14 = (float *)__src;
        while (a2 != a3)
        {
          if (*((float *)a2 + 3) <= v14[3])
          {
            v17 = *(_OWORD *)v14;
            v14 += 4;
            v16 = v17;
          }
          else
          {
            v15 = *a2++;
            v16 = v15;
          }
          *result++ = v16;
          if (&__src[v13] == (char *)v14)
            return result;
        }
        return (__int128 *)memmove(result, v14, __src - (char *)v14 + v13);
      }
    }
  }
  else if (a2 != a3)
  {
    v7 = 0;
    do
    {
      *(_OWORD *)&__src[v7 * 16] = a2[v7];
      ++v7;
    }
    while (&a2[v7] != a3);
    if (v7 * 16)
    {
      v8 = (float *)&__src[v7 * 16];
      v9 = a3 - 1;
      while (a2 != result)
      {
        v10 = *(v8 - 1);
        v11 = *((float *)a2 - 1);
        if (v10 <= v11)
          v12 = (char *)(v8 - 4);
        else
          v12 = (char *)(a2 - 1);
        if (v10 <= v11)
          v8 -= 4;
        else
          --a2;
        *v9-- = *(_OWORD *)v12;
        if (v8 == (float *)__src)
          return result;
      }
      v18 = 0;
      do
      {
        v9[v18 / 4] = *(_OWORD *)&v8[v18 - 4];
        v18 -= 4;
      }
      while (&v8[v18] != (float *)__src);
    }
  }
  return result;
}

char *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,internal::marisa::grimoire::trie::WeightedRange *,internal::marisa::grimoire::trie::WeightedRange *>(char *__src, char *a2, char *a3)
{
  char *v4;
  int64_t v6;
  size_t v7;
  __int128 v9;
  __int128 v10;

  v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 16 == a2)
    {
      v9 = *(_OWORD *)__src;
      v6 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      v4 = &__src[v6];
      *(_OWORD *)v4 = v9;
    }
    else if (a2 + 16 == a3)
    {
      v4 = __src + 16;
      v10 = *((_OWORD *)a3 - 1);
      v7 = a3 - 16 - __src;
      if (a3 - 16 != __src)
        memmove(__src + 16, __src, v7);
      *(_OWORD *)__src = v10;
    }
    else
    {
      return (char *)std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,internal::marisa::grimoire::trie::WeightedRange *>(__src, a2, a3);
    }
  }
  return v4;
}

_OWORD *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,internal::marisa::grimoire::trie::WeightedRange *>(_OWORD *a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  _OWORD *v14;
  _OWORD *v15;
  _OWORD *v16;
  BOOL v17;
  char v18;
  uint64_t v19;

  v3 = a2 - a1;
  if (v3 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = 0;
      do
      {
        v5 = a1[v4];
        a1[v4] = a2[v4];
        v6 = (uint64_t)&a1[v4 + 1];
        a2[v4] = v5;
        v7 = (uint64_t)&a2[++v4];
      }
      while ((_OWORD *)v6 != a2 && v7 != (_QWORD)a3);
    }
  }
  else
  {
    v9 = a3 - a2;
    v10 = a2 - a1;
    do
    {
      v11 = v10;
      v10 = v9;
      v9 = v11 % v9;
    }
    while (v9);
    if (v10)
    {
      v12 = &a1[v10];
      do
      {
        v13 = *--v12;
        v14 = &v12[v3];
        v15 = v12;
        do
        {
          v16 = v15;
          v15 = v14;
          *v16 = *v14;
          v17 = __OFSUB__(v3, a3 - v14);
          v19 = v3 - (a3 - v14);
          v18 = (v19 < 0) ^ v17;
          v14 = &a1[v19];
          if (v18)
            v14 = &v15[v3];
        }
        while (v14 != v12);
        *v15 = v13;
      }
      while (v12 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

uint64_t std::deque<internal::marisa::grimoire::trie::Range>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 170;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 341;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<internal::marisa::grimoire::trie::Range *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<internal::marisa::grimoire::trie::Range *>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

uint64_t internal::marisa::grimoire::vector::FlatVector::build_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  _BOOL8 v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;

  v4 = *(_QWORD *)(a2 + 24);
  if (!v4)
    goto LABEL_10;
  v5 = 0;
  v6 = *(unsigned int **)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  do
  {
    v9 = *v6++;
    v8 = v9;
    if (v9 > v5)
      v5 = v8;
    --v7;
  }
  while (v7);
  if (v5)
  {
    v10 = 0;
    do
    {
      ++v10;
      v11 = v5 > 1;
      v5 >>= 1;
    }
    while (v11);
  }
  else
  {
LABEL_10:
    v10 = 0;
  }
  v12 = v4 != 0;
  v13 = (unint64_t)(v10 * v4 + 63) >> 6;
  if (v10)
    v14 = v13;
  else
    v14 = v12;
  result = (uint64_t)internal::marisa::grimoire::vector::Vector<unsigned long long>::resize((uint64_t *)a1, v14);
  if (v14)
    *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * *(_QWORD *)(a1 + 24) - 8) = 0;
  *(_QWORD *)(a1 + 48) = v10;
  if (v10)
    *(_DWORD *)(a1 + 56) = 0xFFFFFFFF >> -(char)v10;
  v16 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 64) = v16;
  if (v16)
  {
    v17 = 0;
    do
    {
      result = internal::marisa::grimoire::vector::FlatVector::set(a1, v17, *(_DWORD *)(*(_QWORD *)(a2 + 16) + 4 * v17));
      ++v17;
    }
    while (v17 < *(_QWORD *)(a2 + 24));
  }
  return result;
}

uint64_t internal::marisa::grimoire::vector::FlatVector::set(uint64_t this, uint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(this + 48);
  v4 = (unint64_t)(v3 * a2) >> 6;
  v5 = (v3 * a2) & 0x3F;
  v6 = *(unsigned int *)(this + 56);
  v7 = *(_QWORD *)(this + 8);
  v8 = v6 & a3;
  *(_QWORD *)(v7 + 8 * v4) = *(_QWORD *)(v7 + 8 * v4) & ~(v6 << (v3 * a2)) | (v8 << (v3 * a2));
  if ((unint64_t)(v5 + v3) >= 0x41)
    *(_QWORD *)(v7 + 8 * v4 + 8) = *(_QWORD *)(v7 + 8 * v4 + 8) & ~(v6 >> -(char)v5) | (v8 >> -(char)v5);
  return this;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *,false>(uint64_t result, unsigned int *a2, uint64_t a3, uint64_t a4, char a5)
{
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  char v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;

  v8 = (unsigned int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v21 = *(a2 - 2);
        v22 = *v9;
        if (v21 < *v9 || v22 >= v21 && *(a2 - 1) < v9[1])
        {
          *v9 = v21;
          *(a2 - 2) = v22;
          v23 = v9[1];
          v9[1] = *(a2 - 1);
          *(a2 - 1) = v23;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v9, v9 + 2, a2 - 2);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v9, v9 + 2, v9 + 4, a2 - 2);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v9, a2);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v9 + 2, v15 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v15 - 2, v15, &v9[2 * v14 + 2]);
            v16 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v15;
            *(_QWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v17 = *(v9 - 2);
          if (v17 >= *v9 && (*v9 < v17 || *(v9 - 1) >= v9[1]))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned int> *,std::__less<void,void> &>(v9, a2);
            v9 = (unsigned int *)result;
            goto LABEL_19;
          }
LABEL_14:
          v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned int> *,std::__less<void,void> &>(v9, a2);
          if ((v19 & 1) == 0)
            goto LABEL_17;
          v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v9, v18);
          v9 = v18 + 2;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(v18 + 2, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v20)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *,false>(v8, v18, a3, -v11, a5 & 1);
            v9 = v18 + 2;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *,std::pair<unsigned int,unsigned int> *>(v9, a2, a2, a3);
        return result;
    }
  }
}

unsigned int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *result, unsigned int *a2)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v4;
        v4 = v2;
        v6 = v5[2];
        v7 = *v5;
        if (v6 < *v5 || v7 >= v6 && v5[3] < v5[1])
        {
          v9 = v5[2];
          v8 = v5[3];
          v10 = v5[1];
          v5[2] = v7;
          v4[1] = v10;
          v11 = result;
          if (v5 != result)
          {
            v12 = v3;
            do
            {
              v13 = *(unsigned int *)((char *)result + v12 - 8);
              if (v13 <= v9)
              {
                if (v13 < v9)
                {
                  v11 = v5;
                  goto LABEL_17;
                }
                v11 = (unsigned int *)((char *)result + v12);
                v14 = *(unsigned int *)((char *)result + v12 - 4);
                if (v14 <= v8)
                  goto LABEL_17;
              }
              else
              {
                v14 = *(unsigned int *)((char *)result + v12 - 4);
              }
              v5 -= 2;
              v15 = (unsigned int *)((char *)result + v12);
              *v15 = v13;
              v15[1] = v14;
              v12 -= 8;
            }
            while (v12);
            v11 = result;
          }
LABEL_17:
          *v11 = v9;
          v11[1] = v8;
        }
        v2 = v4 + 2;
        v3 += 8;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

unsigned int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *result, unsigned int *a2)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *i;
  unsigned int v10;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = result + 1;
      do
      {
        v4 = result;
        result = v2;
        v5 = v4[2];
        v6 = *v4;
        if (v5 < *v4 || v6 >= v5 && v4[3] < v4[1])
        {
          v7 = *result;
          v8 = result[1];
          for (i = v3; ; i -= 2)
          {
            v10 = *i;
            i[1] = v6;
            i[2] = v10;
            v6 = *(i - 3);
            if (v6 <= v7 && (v6 < v7 || *(i - 2) <= v8))
              break;
          }
          *(i - 1) = v7;
          *i = v8;
        }
        v2 = result + 2;
        v3 += 2;
      }
      while (result + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int *v6;
  int *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v3 = *a2;
  v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    v9 = *a3;
    if (*a3 >= v3 && (v3 < v9 || a3[1] >= a2[1]))
      return 0;
    *a2 = v9;
    *a3 = v3;
    v11 = (int *)(a2 + 1);
    v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    v12 = *a2;
    v13 = *a1;
    if (*a2 >= *a1 && (v13 < v12 || *v11 >= a1[1]))
      return 1;
    *a1 = v12;
    v6 = (int *)(a1 + 1);
    *a2 = v13;
    v8 = 2;
  }
  else
  {
    v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *a1 = v5;
      v6 = (int *)(a1 + 1);
      *a3 = v4;
      v7 = (int *)(a3 + 1);
      v8 = 1;
    }
    else
    {
      *a1 = v3;
      *a2 = v4;
      v14 = a1[1];
      a1[1] = a2[1];
      a2[1] = v14;
      v15 = *a3;
      v16 = *a2;
      if (*a3 >= *a2 && (v16 < v15 || a3[1] >= v14))
        return 1;
      *a2 = v15;
      *a3 = v16;
      v7 = (int *)(a3 + 1);
      v8 = 2;
      v6 = (int *)(a2 + 1);
    }
    v11 = v7;
  }
  v17 = *v6;
  *v6 = *v11;
  *v11 = v17;
  return v8;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned int> *,std::__less<void,void> &>(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int *i;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;

  v3 = *a1;
  v2 = a1[1];
  v4 = *(a2 - 2);
  if (v4 <= *a1 && (v4 < v3 || *(a2 - 1) <= v2))
  {
    for (i = a1 + 2; i < a2 && *i <= v3 && (*i < v3 || i[1] <= v2); i += 2)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v7 = i[2];
      i += 2;
      v6 = v7;
    }
    while (v7 <= v3 && (v6 < v3 || i[1] <= v2));
  }
  if (i < a2)
  {
    for (a2 -= 2; v4 > v3 || v4 >= v3 && a2[1] > v2; a2 -= 2)
    {
      v8 = *(a2 - 2);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *i;
    v10 = *a2;
    do
    {
      *i = v10;
      *a2 = v9;
      v11 = i[1];
      i[1] = a2[1];
      a2[1] = v11;
      do
      {
        v12 = i[2];
        i += 2;
        v9 = v12;
      }
      while (v12 <= v3 && (v9 < v3 || i[1] <= v2));
      do
      {
        do
        {
          v13 = *(a2 - 2);
          a2 -= 2;
          v10 = v13;
          v14 = v13 >= v3;
        }
        while (v13 > v3);
      }
      while (v14 && a2[1] > v2);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v3;
  *(i - 1) = v2;
  return i;
}

unsigned int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<unsigned int,unsigned int> *,std::__less<void,void> &>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  while (1)
  {
    v5 = a1[v2 + 2];
    if (v5 >= v3 && (v5 > v3 || a1[v2 + 3] >= v4))
      break;
    v2 += 2;
  }
  v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 4)
  {
    do
    {
      v8 = *(a2 - 2);
      a2 -= 2;
      v7 = v8;
    }
    while (v8 >= v3 && (v7 > v3 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        v10 = *(a2 - 2);
        a2 -= 2;
        v9 = v10;
        if (v10 < v3)
          break;
        if (v9 > v3)
          goto LABEL_19;
      }
      while (a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    v13 = (unsigned int *)v6;
  }
  else
  {
    v12 = *a2;
    v13 = (unsigned int *)v6;
    v14 = a2;
    do
    {
      *v13 = v12;
      *v14 = v5;
      v15 = v13[1];
      v13[1] = v14[1];
      v14[1] = v15;
      do
      {
        do
        {
          v16 = v13[2];
          v13 += 2;
          v5 = v16;
          v17 = v16 > v3;
        }
        while (v16 < v3);
      }
      while (!v17 && v13[1] < v4);
      do
      {
        v18 = *(v14 - 2);
        v14 -= 2;
        v12 = v18;
      }
      while (v18 >= v3 && (v12 > v3 || v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    *a1 = *(v13 - 2);
    a1[1] = *(v13 - 1);
  }
  *(v13 - 2) = v3;
  *(v13 - 1) = v4;
  return v13 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  unsigned int v20;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && *(a2 - 1) < a1[1])
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  do
  {
    v13 = *v9;
    if (*v10 >= *v9 && (v13 < *v10 || v10[1] >= v9[1]))
      goto LABEL_22;
    v14 = *v10;
    v15 = v10[1];
    *v10 = v13;
    v10[1] = v9[1];
    v16 = a1;
    if (v9 == a1)
      goto LABEL_21;
    v17 = v11;
    while (1)
    {
      v18 = (char *)a1 + v17;
      v19 = *(unsigned int *)((char *)a1 + v17 + 8);
      if (v19 <= v14)
        break;
      v20 = *((_DWORD *)v18 + 3);
LABEL_18:
      v9 -= 2;
      *((_DWORD *)v18 + 4) = v19;
      *(unsigned int *)((char *)a1 + v17 + 20) = v20;
      v17 -= 8;
      if (v17 == -16)
      {
        v16 = a1;
        goto LABEL_21;
      }
    }
    if (v19 < v14)
    {
      v16 = v9;
      goto LABEL_21;
    }
    v20 = *(unsigned int *)((char *)a1 + v17 + 12);
    if (v20 > v15)
      goto LABEL_18;
    v16 = (unsigned int *)((char *)a1 + v17 + 16);
LABEL_21:
    *v16 = v14;
    v16[1] = v15;
    if (++v12 == 8)
      return v10 + 2 == a2;
LABEL_22:
    v9 = v10;
    v11 += 8;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && a4[1] < a3[1])
  {
    *a3 = v9;
    *a4 = v10;
    v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    v12 = *a3;
    v13 = *a2;
    if (*a3 < *a2 || v13 >= v12 && a3[1] < a2[1])
    {
      *a2 = v12;
      *a3 = v13;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      v15 = *a2;
      v16 = *a1;
      if (*a2 < *a1 || v16 >= v15 && a2[1] < a1[1])
      {
        *a1 = v15;
        *a2 = v16;
        v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && a5[1] < a4[1])
  {
    *a4 = v11;
    *a5 = v12;
    v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    v14 = *a4;
    v15 = *a3;
    if (*a4 < *a3 || v15 >= v14 && a4[1] < a3[1])
    {
      *a3 = v14;
      *a4 = v15;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      v17 = *a3;
      v18 = *a2;
      if (*a3 < *a2 || v18 >= v17 && a3[1] < a2[1])
      {
        *a2 = v17;
        *a3 = v18;
        v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        v20 = *a2;
        v21 = *a1;
        if (*a2 < *a1 || v21 >= v20 && a2[1] < a1[1])
        {
          *a1 = v20;
          *a2 = v21;
          v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

unsigned int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *,std::pair<unsigned int,unsigned int> *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        v16 = *a1;
        if (*v14 < *a1 || v16 >= v15 && v14[1] < a1[1])
        {
          *v14 = v16;
          *a1 = v15;
          v17 = v14[1];
          v14[1] = a1[1];
          a1[1] = v17;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v18 = (unint64_t)v8 >> 3;
      v19 = a2 - 2;
      do
      {
        v21 = *a1;
        v20 = a1[1];
        v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(a1, a4, v18);
        if (v19 == v22)
        {
          *v22 = v21;
          v22[1] = v20;
        }
        else
        {
          *v22 = *v19;
          v22[1] = v19[1];
          *v19 = v21;
          v19[1] = v20;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>((uint64_t)a1, (uint64_t)(v22 + 2), a4, ((char *)(v22 + 2) - (char *)a1) >> 3);
        }
        v19 -= 2;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(uint64_t result, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (unsigned int *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(_DWORD *)(result + 8 * v7 + 4) < v8[3])
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v11 = *v8;
      if (*v8 >= *a4 && (*a4 < v11 || v8[1] >= a4[1]))
      {
        v12 = *a4;
        v13 = a4[1];
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            v15 = 2 * v7;
            v7 = (2 * v7) | 1;
            v14 = (unsigned int *)(result + 8 * v7);
            v16 = v15 + 2;
            if (v16 < a3)
            {
              v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && *(_DWORD *)(result + 8 * v7 + 4) < v14[3])
              {
                v14 += 2;
                v7 = v16;
              }
            }
            v18 = *v14;
            if (*v14 < v12 || v18 <= v12 && v14[1] < v13)
              break;
            *v8 = v18;
            v8[1] = v14[1];
            v8 = v14;
            if (v5 < v7)
              goto LABEL_22;
          }
        }
        v14 = v8;
LABEL_22:
        *v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

unsigned int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = result;
    v7 = v3 + 1;
    result += 2 * v3 + 2;
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = result[2];
      if (*result < v10 || v10 >= *result && v6[2 * v7 + 1] < result[3])
      {
        result += 2;
        v3 = v9;
      }
    }
    *v6 = *result;
    v6[1] = result[1];
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<unsigned int,unsigned int> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (unsigned int *)(result + 8 * (v4 >> 1));
    v7 = *v6;
    v8 = *(_DWORD *)(a2 - 8);
    if (*v6 < v8 || v8 >= v7 && *(_DWORD *)(result + 8 * v5 + 4) < *(_DWORD *)(a2 - 4))
    {
      v9 = *(_DWORD *)(a2 - 8);
      v10 = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 8) = v7;
      *(_DWORD *)(a2 - 4) = v6[1];
      if (v4 >= 2)
      {
        while (1)
        {
          v12 = v5 - 1;
          v5 = (v5 - 1) >> 1;
          v11 = (unsigned int *)(result + 8 * v5);
          v13 = *v11;
          if (*v11 >= v9)
          {
            if (v13 > v9)
              break;
            v14 = *(_DWORD *)(result + 8 * v5 + 4);
            if (v14 >= v10)
              break;
          }
          else
          {
            v14 = v11[1];
          }
          *v6 = v13;
          v6[1] = v14;
          v6 = (unsigned int *)(result + 8 * v5);
          if (v12 <= 1)
            goto LABEL_12;
        }
      }
      v11 = v6;
LABEL_12:
      *v11 = v9;
      v11[1] = v10;
    }
  }
  return result;
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<internal::marisa::grimoire::trie::Range *>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

char *internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Entry>::realloc(uint64_t *a1, uint64_t a2)
{
  char *result;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  result = (char *)operator new[](16 * a2, MEMORY[0x1E0DE4E10]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (uint64_t *)(a1[1] + 8);
    v7 = result + 8;
    do
    {
      *(v7 - 1) = *(v6 - 1);
      v8 = *v6;
      v6 += 2;
      *v7 = v8;
      v7 += 2;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x1B5E305F8);
  return result;
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::build_current_trie<internal::marisa::grimoire::trie::ReverseKey>(uint64_t *a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  __n128 v33;
  uint64_t v34;
  __n128 *v35;
  unint64_t v36;
  __n128 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int32 *v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float *v63;
  float v64;
  _DWORD *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t result;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v75;
  uint64_t v76;
  int v77;
  __n128 v78;
  int v79;
  __int128 v80;
  uint64_t v81[4];
  _OWORD v82[2];
  __int128 v83;
  _OWORD v84[4];

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    v10 = 0;
    v11 = (_DWORD *)(v9 + 16);
    do
    {
      *v11 = v10;
      v11 += 6;
      ++v10;
    }
    while (v8 != v10);
  }
  v12 = internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::ReverseKey *>(v9, v9 + 24 * v8, 0);
  v13 = 256;
  if (a5 != 1)
    v13 = 1;
  do
  {
    v14 = v13;
    v13 *= 2;
  }
  while (v14 < v12 / *(unsigned int *)(a4 + 8));
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Cache>::resize(a1 + 126, v14);
  a1[132] = v14 - 1;
  internal::marisa::grimoire::vector::BitVector::push_back(a1, 1);
  internal::marisa::grimoire::vector::BitVector::push_back(a1, 0);
  v15 = a1 + 78;
  LOBYTE(v84[0]) = 0;
  internal::marisa::grimoire::vector::Vector<unsigned char>::push_back(a1 + 78, v84);
  internal::marisa::grimoire::vector::BitVector::push_back(a1 + 52, 0);
  memset(v84, 0, 41);
  v83 = 0u;
  memset(v82, 0, sizeof(v82));
  v80 = 0u;
  memset(v81, 0, 25);
  v78.n128_u64[0] = *(_QWORD *)(a2 + 24) << 32;
  v78.n128_u32[2] = 0;
  std::deque<internal::marisa::grimoire::trie::Range>::push_back(v82, (uint64_t *)&v78);
  v16 = *((_QWORD *)&v83 + 1);
  if (*((_QWORD *)&v83 + 1))
  {
    v72 = a1 + 52;
    v73 = a1 + 78;
    do
    {
      v17 = a1[58];
      v18 = (unsigned int *)(*(_QWORD *)(*((_QWORD *)&v82[0] + 1) + 8 * ((unint64_t)v83 / 0x155))
                           + 12 * ((unint64_t)v83 % 0x155));
      v19 = *v18;
      v20 = v18[1];
      v21 = v18[2];
      *(_QWORD *)&v83 = v83 + 1;
      *((_QWORD *)&v83 + 1) = v16 - 1;
      if ((unint64_t)v83 >= 0x2AA)
      {
        v22 = v17;
        v23 = v16;
        operator delete(**((void ***)&v82[0] + 1));
        v16 = v23;
        v17 = v22;
        *((_QWORD *)&v82[0] + 1) += 8;
        *(_QWORD *)&v83 = v83 - 341;
      }
      if (v19 < v20)
      {
        while (1)
        {
          v24 = *(_QWORD *)(a2 + 8);
          if (*(_DWORD *)(v24 + 24 * v19 + 8) != (_DWORD)v21)
            break;
          *(_DWORD *)(v24 + 24 * v19 + 12) = v17 - v16;
          v19 = (v19 + 1);
          if ((_DWORD)v20 == (_DWORD)v19)
            goto LABEL_49;
        }
      }
      if ((_DWORD)v19 != (_DWORD)v20)
      {
        v76 = v16;
        v77 = v17 - v16;
        v25 = v80;
        v80 = 0u;
        memset(v81, 0, 25);
        if (v25)
          MEMORY[0x1B5E305F8](v25, 0x1000C8077774924);
        v75 = v17;
        v26 = *(_QWORD *)(a2 + 8);
        v27 = *(float *)(v26 + 24 * v19 + 12);
        v28 = v19 + 1;
        if (v19 + 1 < v20)
        {
          v29 = 24 * v19;
          v30 = (v19 << 32) + 0x100000000;
          do
          {
            if (*(unsigned __int8 *)(*(_QWORD *)(v26 + v29) - v21 - 1) != *(unsigned __int8 *)(*(_QWORD *)(v26 + v29 + 24)
                                                                                              - v21
                                                                                              - 1))
            {
              *(float *)&v31 = v27;
              v78.n128_u64[0] = v30 + v19;
              v78.n128_u64[1] = v21 | ((unint64_t)v31 << 32);
              internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::WeightedRange>::push_back((uint64_t *)&v80, &v78);
              v26 = *(_QWORD *)(a2 + 8);
              v27 = 0.0;
              LODWORD(v19) = v28;
            }
            v27 = v27 + *(float *)(v26 + v29 + 36);
            ++v28;
            v29 += 24;
            v30 += 0x100000000;
          }
          while (v20 != v28);
        }
        *(float *)&v32 = v27;
        v78.n128_u32[0] = v19;
        v78.n128_u32[1] = v20;
        v78.n128_u64[1] = v21 | ((unint64_t)v32 << 32);
        v33 = internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::WeightedRange>::push_back((uint64_t *)&v80, &v78);
        v15 = a1 + 78;
        v34 = v76;
        if (*(_DWORD *)(a4 + 16) == 0x20000)
        {
          v35 = (__n128 *)*((_QWORD *)&v80 + 1);
          v36 = v81[1];
          if (v81[1] < 129)
          {
            v37 = 0;
            v39 = 0;
          }
          else
          {
            v37 = (__n128 *)std::get_temporary_buffer[abi:ne180100]<internal::marisa::grimoire::trie::WeightedRange>(v81[1]);
            v39 = v38;
          }
          std::__stable_sort<std::_ClassicAlgPolicy,std::greater<internal::marisa::grimoire::trie::WeightedRange> &,internal::marisa::grimoire::trie::WeightedRange*>(v35, &v35[v36], (uint64_t)&v78, v36, v37, v39, v33);
          if (v37)
            operator delete(v37);
          v34 = v76;
        }
        v40 = v81[1];
        if (v75 == v34)
          a1[133] = v81[1];
        if (v40)
        {
          v41 = 0;
          do
          {
            v42 = (unsigned int *)(*((_QWORD *)&v80 + 1) + 16 * v41);
            v43 = (uint64_t *)v42;
            v44 = v42[2];
            v45 = *(_QWORD *)(a2 + 8);
            v46 = *(unsigned int *)(v45 + 24 * *v42 + 8);
            v47 = v44 + 1;
            if (v44 + 1 >= v46)
            {
              v48 = v42[2];
              LODWORD(v46) = v44 + 1;
            }
            else
            {
              v48 = v46 - 1;
              v49 = (uint64_t *)(v45 + 24 * *v42);
              v50 = v42[2];
              do
              {
                v51 = v50;
                v50 = v47;
                v52 = v49;
                v53 = *v42;
                while (++v53 < (unint64_t)v42[1])
                {
                  v54 = *v52;
                  v55 = v52[3];
                  v52 += 3;
                  if (*(unsigned __int8 *)(v54 + ~v51 - 1) != *(unsigned __int8 *)(v55 + ~v51 - 1))
                  {
                    v48 = v51;
                    LODWORD(v46) = v47;
                    goto LABEL_43;
                  }
                }
                ++v47;
              }
              while (v50 + 1 != v46);
            }
LABEL_43:
            v56 = a1[81];
            v58 = *((float *)v42 + 3);
            v57 = v42 + 3;
            v59 = v58;
            v60 = a1[132] & v56;
            v61 = a1[127];
            v62 = v61 + 12 * v60;
            v64 = *(float *)(v62 + 8);
            v63 = (float *)(v62 + 8);
            if (v64 < v59)
            {
              v65 = (_DWORD *)(v61 + 12 * v60);
              *v65 = v77;
              v65[1] = v56;
              *v63 = v59;
              v44 = *((unsigned int *)v43 + 2);
            }
            if (v48 == v44)
            {
              v78.n128_u8[0] = *(_BYTE *)(~v48 + *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * *(unsigned int *)v43));
              internal::marisa::grimoire::vector::Vector<unsigned char>::push_back(v73, &v78);
              internal::marisa::grimoire::vector::BitVector::push_back(v72, 0);
            }
            else
            {
              v78.n128_u8[0] = 0;
              internal::marisa::grimoire::vector::Vector<unsigned char>::push_back(v73, &v78);
              internal::marisa::grimoire::vector::BitVector::push_back(v72, 1);
              v78 = 0uLL;
              v79 = 0;
              v66 = *((unsigned int *)v43 + 2);
              v78.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24 * *(unsigned int *)v43) - v66;
              v78.n128_u64[1] = (v46 - v66);
              v78.n128_u32[3] = *v57;
              internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Key>::push_back((uint64_t *)v84, (uint64_t)&v78);
            }
            *((_DWORD *)v43 + 2) = v46;
            std::deque<internal::marisa::grimoire::trie::Range>::push_back(v82, v43);
            internal::marisa::grimoire::vector::BitVector::push_back(a1, 1);
            ++v41;
          }
          while (v41 < v81[1]);
        }
      }
LABEL_49:
      internal::marisa::grimoire::vector::BitVector::push_back(a1, 0);
      v16 = *((_QWORD *)&v83 + 1);
    }
    while (*((_QWORD *)&v83 + 1));
  }
  internal::marisa::grimoire::vector::BitVector::push_back(a1, 0);
  internal::marisa::grimoire::vector::BitVector::build((internal::marisa::grimoire::vector::BitVector *)a1, a5 == 1, 1);
  internal::marisa::grimoire::vector::Vector<unsigned char>::shrink(v15);
  internal::marisa::grimoire::trie::LoudsTrie::build_terminals<internal::marisa::grimoire::trie::ReverseKey>((uint64_t)a1, a2, a3);
  v67 = *(_OWORD *)a2;
  *(_OWORD *)a2 = v84[0];
  v84[0] = v67;
  v68 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)&v84[1];
  *(_QWORD *)&v84[1] = v68;
  v69 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)&v84[1] + 8);
  *(_OWORD *)((char *)&v84[1] + 8) = v69;
  LOBYTE(v68) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a2 + 40) = BYTE8(v84[2]);
  BYTE8(v84[2]) = v68;
  if ((_QWORD)v80)
    MEMORY[0x1B5E305F8](v80, 0x1000C8077774924);
  std::deque<internal::marisa::grimoire::trie::Range>::~deque[abi:ne180100](v82);
  result = *(_QWORD *)&v84[0];
  if (*(_QWORD *)&v84[0])
    return MEMORY[0x1B5E305F8](*(_QWORD *)&v84[0], 0x1000C8077774924);
  return result;
}

void sub_1B3E20B30(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v30;
  _QWORD *exception;

  if (a21)
    MEMORY[0x1B5E305F8](a21, 0x1000C8077774924);
  std::deque<internal::marisa::grimoire::trie::Range>::~deque[abi:ne180100](&a27);
  v30 = *(_QWORD *)(v27 - 144);
  if (v30)
    MEMORY[0x1B5E305F8](v30, 0x1000C8077774924);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds-trie.cc";
    exception[2] = 0x8000001D3;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/louds"
                   "-trie.cc:467: MARISA_MEMORY_ERROR: std::bad_alloc";
  }
  _Unwind_Resume(a1);
}

uint64_t internal::marisa::grimoire::trie::LoudsTrie::build_terminals<internal::marisa::grimoire::trie::ReverseKey>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t result;
  _OWORD v13[3];

  memset(v13, 0, 41);
  internal::marisa::grimoire::vector::Vector<unsigned int>::resize((uint64_t *)v13, *(_QWORD *)(a2 + 24));
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v6 = *((_QWORD *)&v13[0] + 1);
    v7 = (unsigned int *)(*(_QWORD *)(a2 + 16) + 16);
    do
    {
      *(_DWORD *)(v6 + 4 * *v7) = *(v7 - 1);
      v7 += 6;
      --v5;
    }
    while (v5);
  }
  else
  {
    v6 = *((_QWORD *)&v13[0] + 1);
  }
  v8 = *a3;
  v9 = *(_QWORD *)&v13[1];
  *(_QWORD *)a3 = *(_QWORD *)&v13[0];
  *((_QWORD *)a3 + 1) = v6;
  v13[0] = v8;
  v10 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 2) = v9;
  *(_QWORD *)&v13[1] = v10;
  v11 = *(__int128 *)((char *)a3 + 24);
  *(__int128 *)((char *)a3 + 24) = *(_OWORD *)((char *)&v13[1] + 8);
  *(_OWORD *)((char *)&v13[1] + 8) = v11;
  LOBYTE(v10) = *((_BYTE *)a3 + 40);
  *((_BYTE *)a3 + 40) = BYTE8(v13[2]);
  result = v8;
  BYTE8(v13[2]) = v10;
  if ((_QWORD)v8)
    return MEMORY[0x1B5E305F8](v8, 0x1000C8077774924);
  return result;
}

void sub_1B3E20D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1B5E305F8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::ReverseKey *>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;

  v4 = a2;
  v5 = a1;
  v6 = a2 - a1;
  if ((uint64_t)(a2 - a1) < 241)
  {
    v7 = 0;
    goto LABEL_69;
  }
  v7 = 0;
  do
  {
    v8 = internal::marisa::grimoire::algorithm::details::median<internal::marisa::grimoire::trie::ReverseKey>(v5, v5 + 24 * (v6 / 0x30uLL), v4 - 24, a3);
    v9 = v8;
    v10 = v5;
    v11 = v4;
    v12 = v5;
    v13 = v4;
    while (v10 < v11)
    {
      v14 = *(unsigned int *)(v10 + 8);
      v15 = a3 >= v14 ? -1 : *(unsigned __int8 *)(*(_QWORD *)v10 - a3 - 1);
      if (v15 > v8)
        break;
      if (v15 == v8)
      {
        v16 = *(_QWORD *)v10;
        *(_QWORD *)v10 = *(_QWORD *)v12;
        *(_DWORD *)(v10 + 8) = *(_DWORD *)(v12 + 8);
        v17 = *(_QWORD *)(v10 + 12);
        *(_DWORD *)(v10 + 12) = *(_DWORD *)(v12 + 12);
        *(_DWORD *)(v10 + 16) = *(_DWORD *)(v12 + 16);
        *(_QWORD *)v12 = v16;
        *(_DWORD *)(v12 + 8) = v14;
        *(_QWORD *)(v12 + 12) = v17;
        v12 += 24;
      }
LABEL_11:
      v10 += 24;
    }
    if (v10 < v11)
    {
      v18 = v11 - 24;
      do
      {
        v11 = v18;
        v19 = *(unsigned int *)(v18 + 8);
        if (a3 >= v19)
          v20 = -1;
        else
          v20 = *(unsigned __int8 *)(*(_QWORD *)v11 - a3 - 1);
        if (v20 < v8)
          break;
        if (v20 == v8)
        {
          v21 = *(_QWORD *)(v13 - 24);
          v13 -= 24;
          v22 = *(_QWORD *)v11;
          *(_QWORD *)v11 = v21;
          *(_DWORD *)(v11 + 8) = *(_DWORD *)(v13 + 8);
          v23 = *(_QWORD *)(v11 + 12);
          *(_DWORD *)(v11 + 12) = *(_DWORD *)(v13 + 12);
          *(_DWORD *)(v11 + 16) = *(_DWORD *)(v13 + 16);
          *(_QWORD *)v13 = v22;
          *(_DWORD *)(v13 + 8) = v19;
          *(_QWORD *)(v13 + 12) = v23;
        }
        v18 = v11 - 24;
      }
      while (v10 < v11);
    }
    if (v10 < v11)
    {
      v24 = *(_QWORD *)v10;
      v25 = *(_DWORD *)(v10 + 16);
      *(_QWORD *)v10 = *(_QWORD *)v11;
      v26 = *(_QWORD *)(v10 + 8);
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v10 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v10 + 16) = *(_DWORD *)(v11 + 16);
      *(_QWORD *)v11 = v24;
      *(_QWORD *)(v11 + 8) = v26;
      *(_DWORD *)(v11 + 16) = v25;
      goto LABEL_11;
    }
    v44 = v7;
    if (v12 > v5)
    {
      v27 = 0;
      do
      {
        v28 = v12 + v27;
        v29 = v10 + v27;
        v30 = *(_QWORD *)(v12 + v27 - 24);
        v31 = *(_DWORD *)(v12 + v27 - 8);
        *(_QWORD *)(v28 - 24) = *(_QWORD *)(v10 + v27 - 24);
        v32 = *(_QWORD *)(v12 + v27 - 16);
        *(_DWORD *)(v28 - 16) = *(_DWORD *)(v10 + v27 - 16);
        *(_DWORD *)(v28 - 12) = *(_DWORD *)(v10 + v27 - 12);
        *(_DWORD *)(v28 - 8) = *(_DWORD *)(v10 + v27 - 8);
        *(_QWORD *)(v29 - 24) = v30;
        *(_QWORD *)(v29 - 16) = v32;
        *(_DWORD *)(v29 - 8) = v31;
        v27 -= 24;
      }
      while (v12 + v27 > v5);
      v10 += v27;
    }
    while (v13 < v4)
    {
      v33 = *(_QWORD *)v13;
      v34 = *(_DWORD *)(v13 + 16);
      *(_QWORD *)v13 = *(_QWORD *)v11;
      v35 = *(_QWORD *)(v13 + 8);
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v11 + 8);
      *(_DWORD *)(v13 + 12) = *(_DWORD *)(v11 + 12);
      *(_DWORD *)(v13 + 16) = *(_DWORD *)(v11 + 16);
      *(_QWORD *)v11 = v33;
      *(_QWORD *)(v11 + 8) = v35;
      *(_DWORD *)(v11 + 16) = v34;
      v11 += 24;
      v13 += 24;
    }
    v36 = v10 - v5;
    v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v5) >> 3);
    v38 = v11 - v10;
    v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v10) >> 3);
    if (v37 <= v39)
    {
      v40 = v4 - v11;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)) <= v39)
      {
        if (v36 == 24)
        {
          v41 = v44 + 1;
        }
        else
        {
          if (v36 < 25)
            goto LABEL_53;
          v41 = internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::ReverseKey *>(v5, v10, a3)+ v44;
        }
        v44 = v41;
LABEL_53:
        if (v40 == 24)
        {
          v7 = v44 + 1;
        }
        else if (v40 < 25)
        {
          v7 = v44;
        }
        else
        {
          v7 = internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::ReverseKey *>(v11, v4, a3)+ v44;
        }
        if (v38 == 24)
        {
          ++v7;
        }
        else if (v38 >= 25)
        {
          if (v9 == -1)
          {
            ++v7;
            v5 = v11;
            goto LABEL_64;
          }
          ++a3;
        }
        v5 = v10;
LABEL_64:
        v4 = v11;
        goto LABEL_65;
      }
    }
    if (v38 == 24)
      goto LABEL_32;
    if (v38 < 25)
    {
      v7 = v44;
    }
    else if (v8 == -1)
    {
LABEL_32:
      v7 = v44 + 1;
    }
    else
    {
      v7 = internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::ReverseKey *>(v10, v11, a3 + 1)+ v44;
    }
    v42 = v4 - v11;
    if (v37 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v11) >> 3)))
    {
      if (v42 == 24)
      {
        ++v7;
      }
      else if (v42 >= 25)
      {
        v7 += internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::ReverseKey *>(v11, v4, a3);
      }
      v4 = v10;
    }
    else
    {
      if (v36 == 24)
      {
        ++v7;
      }
      else if (v36 >= 25)
      {
        v7 += internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::ReverseKey *>(v5, v10, a3);
      }
      v5 = v11;
    }
LABEL_65:
    v6 = v4 - v5;
  }
  while ((uint64_t)(v4 - v5) > 240);
LABEL_69:
  if (v6 >= 25)
    v7 += internal::marisa::grimoire::algorithm::details::insertion_sort<internal::marisa::grimoire::trie::ReverseKey *>(v5, v4, a3);
  return v7;
}

uint64_t internal::marisa::grimoire::algorithm::details::median<internal::marisa::grimoire::trie::ReverseKey>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v4;
  int v5;
  int v6;
  int v7;

  if (*(unsigned int *)(a1 + 8) <= a4)
    v4 = -1;
  else
    v4 = *(unsigned __int8 *)(~a4 + *(_QWORD *)a1);
  if (*(unsigned int *)(a2 + 8) <= a4)
    v5 = -1;
  else
    v5 = *(unsigned __int8 *)(~a4 + *(_QWORD *)a2);
  if (*(unsigned int *)(a3 + 8) <= a4)
    v6 = -1;
  else
    v6 = *(unsigned __int8 *)(~a4 + *(_QWORD *)a3);
  if (v4 <= v5)
    v7 = v5;
  else
    v7 = v4;
  if (v4 >= v5)
    v4 = v5;
  if (v4 <= v6)
    v4 = v6;
  if (v7 >= v6)
    return v4;
  else
    return v7;
}

uint64_t internal::marisa::grimoire::algorithm::details::insertion_sort<internal::marisa::grimoire::trie::ReverseKey *>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a1 + 24;
  if (a1 + 24 >= a2)
    return 1;
  v7 = 1;
  do
  {
    v8 = v3;
    if (v3 <= a1)
    {
      v10 = 0;
    }
    else
    {
      while (1)
      {
        v9 = v8 - 24;
        v10 = internal::marisa::grimoire::algorithm::details::compare<internal::marisa::grimoire::trie::ReverseKey>(v8 - 24, v8, a3);
        if (v10 < 1)
          break;
        v11 = *(_QWORD *)(v8 - 24);
        v12 = *(_DWORD *)(v8 - 8);
        *(_QWORD *)(v8 - 24) = *(_QWORD *)v8;
        v13 = *(_QWORD *)(v8 + 8);
        *(_DWORD *)(v8 - 8) = *(_DWORD *)(v8 + 16);
        *(_QWORD *)v8 = v11;
        v14 = *(_QWORD *)(v8 - 16);
        *(_QWORD *)(v8 - 16) = v13;
        *(_QWORD *)(v8 + 8) = v14;
        *(_DWORD *)(v8 + 16) = v12;
        v8 -= 24;
        if (v9 <= a1)
        {
          v10 = 1;
          break;
        }
      }
    }
    if (v10)
      ++v7;
    v3 += 24;
  }
  while (v3 < a2);
  return v7;
}

uint64_t internal::marisa::grimoire::algorithm::details::compare<internal::marisa::grimoire::trie::ReverseKey>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  uint64_t result;
  unsigned int v12;

  v3 = *(unsigned int *)(a1 + 8);
  v4 = *(unsigned int *)(a2 + 8);
  v5 = v3 - a3;
  if (v3 <= a3)
  {
LABEL_6:
    if (v3 < v4)
      v12 = -1;
    else
      v12 = 1;
    if ((_DWORD)v3 == (_DWORD)v4)
      return 0;
    else
      return v12;
  }
  else
  {
    v6 = v4 - a3;
    v7 = (unsigned __int8 *)(*(_QWORD *)a2 + ~a3);
    v8 = (unsigned __int8 *)(*(_QWORD *)a1 + ~a3);
    while (v6)
    {
      v9 = *v8;
      v10 = *v7;
      result = (v9 - v10);
      if (v9 != v10)
        return result;
      --v6;
      --v7;
      --v8;
      if (!--v5)
        goto LABEL_6;
    }
    return 1;
  }
}

char *internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Cache>::realloc(uint64_t *a1, uint64_t a2)
{
  char *result;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;

  result = (char *)operator new[](12 * a2, MEMORY[0x1E0DE4E10]);
  v5 = a1[3];
  if (v5)
  {
    v6 = (_DWORD *)(a1[1] + 8);
    v7 = result + 8;
    do
    {
      *((_QWORD *)v7 - 1) = *((_QWORD *)v6 - 1);
      v8 = *v6;
      v6 += 3;
      *v7 = v8;
      v7 += 3;
      --v5;
    }
    while (v5);
  }
  v9 = *a1;
  *a1 = (uint64_t)result;
  a1[1] = (uint64_t)result;
  a1[2] = (uint64_t)result;
  a1[4] = a2;
  if (v9)
    JUMPOUT(0x1B5E305F8);
  return result;
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned char>::map_(uint64_t a1, internal::marisa::grimoire::io::Mapper *this)
{
  unint64_t v4;

  v4 = *(_QWORD *)internal::marisa::grimoire::io::Mapper::map_data(this, 8uLL);
  *(_QWORD *)(a1 + 16) = internal::marisa::grimoire::io::Mapper::map_data(this, v4);
  internal::marisa::grimoire::io::Mapper::seek(this, -(int)v4 & 7);
  *(_QWORD *)(a1 + 24) = v4;
  return internal::marisa::grimoire::vector::Vector<unsigned long long>::fix(a1);
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned char>::read_(uint64_t a1, internal::marisa::grimoire::io::Reader *this)
{
  size_t v4;
  size_t v6;

  v6 = 0;
  internal::marisa::grimoire::io::Reader::read_data((uint64_t)this, (char *)&v6, 8uLL);
  v4 = v6;
  internal::marisa::grimoire::vector::Vector<unsigned char>::resize((uint64_t *)a1, v6);
  internal::marisa::grimoire::io::Reader::read<unsigned char>((uint64_t)this, *(char **)(a1 + 8), v4);
  return internal::marisa::grimoire::io::Reader::seek((uint64_t)this, -(int)v6 & 7);
}

uint64_t *internal::marisa::grimoire::vector::Vector<unsigned char>::resize(uint64_t *result, size_t a2)
{
  size_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a2;
  v3 = result;
  v4 = result[4];
  if (v4 < a2)
  {
    v5 = 2 * v4;
    if (v4 < 0)
      v5 = -1;
    if (v4 > a2 >> 1)
      a2 = v5;
    result = (uint64_t *)internal::marisa::grimoire::vector::Vector<unsigned char>::realloc(result, a2);
  }
  v3[3] = v2;
  return result;
}

uint64_t internal::marisa::grimoire::io::Reader::read<unsigned char>(uint64_t a1, char *a2, size_t a3)
{
  _QWORD *exception;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader.h";
    exception[2] = 0x200000022;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/reader."
                   "h:34: MARISA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
  }
  return internal::marisa::grimoire::io::Reader::read_data(a1, a2, a3);
}

uint64_t internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Cache>::read_(uint64_t a1, internal::marisa::grimoire::io::Reader *this)
{
  unint64_t v4;
  _QWORD *exception;
  unint64_t v7;

  v7 = 0;
  internal::marisa::grimoire::io::Reader::read_data((uint64_t)this, (char *)&v7, 8uLL);
  v4 = v7 / 0xC;
  if (v7 % 0xC)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0xA000000DELL;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:222: MARISA_FORMAT_ERROR: (total_size % sizeof(T)) != 0";
  }
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::trie::Cache>::resize((uint64_t *)a1, v7 / 0xC);
  internal::marisa::grimoire::io::Reader::read<internal::marisa::grimoire::vector::RankIndex>((uint64_t)this, *(char **)(a1 + 8), v4);
  return internal::marisa::grimoire::io::Reader::seek((uint64_t)this, -(int)v7 & 7);
}

uint64_t internal::marisa::grimoire::vector::Vector<unsigned char>::write_(uint64_t a1, internal::marisa::grimoire::io::Writer *this)
{
  uint64_t __buf;

  __buf = *(_QWORD *)(a1 + 24);
  internal::marisa::grimoire::io::Writer::write_data((uint64_t)this, (char *)&__buf, 8uLL);
  internal::marisa::grimoire::io::Writer::write<unsigned char>((uint64_t)this, *(char **)(a1 + 16), *(_QWORD *)(a1 + 24));
  return internal::marisa::grimoire::io::Writer::seek((uint64_t)this, -*(_DWORD *)(a1 + 24) & 7);
}

uint64_t internal::marisa::grimoire::io::Writer::write<unsigned char>(uint64_t a1, char *a2, size_t a3)
{
  _QWORD *exception;

  if (!a2 && a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer.h";
    exception[2] = 0x200000021;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/io/writer."
                   "h:33: MARISA_NULL_ERROR: (objs == NULL) && (num_objs != 0)";
  }
  return internal::marisa::grimoire::io::Writer::write_data(a1, a2, a3);
}

double internal::marisa::grimoire::trie::Tail::Tail(internal::marisa::grimoire::trie::Tail *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 25) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 73) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *(_OWORD *)((char *)this + 185) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *(_OWORD *)((char *)this + 233) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 137) = 0u;
  return result;
}

uint64_t internal::marisa::grimoire::trie::Tail::build(__int128 *a1, uint64_t a2, __int128 *a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t result;
  _QWORD *exception;
  const char *v17;
  _OWORD v18[3];
  _OWORD v19[4];
  __int128 v20;
  _BYTE v21[25];
  __int128 v22;
  _BYTE v23[25];
  __int128 v24;
  _BYTE v25[25];

  if (!a3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc";
    exception[2] = 0x200000011;
    v17 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc:17: MA"
          "RISA_NULL_ERROR: offsets == NULL";
    goto LABEL_28;
  }
  if (a4 == 0x2000)
    goto LABEL_15;
  if (a4 != 4096)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc";
    exception[2] = 0x500000028;
    v17 = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc:40: MA"
          "RISA_CODE_ERROR: undefined tail mode";
LABEL_28:
    exception[3] = v17;
  }
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    v6 = 0;
    a4 = 4096;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + 8) + 16 * v6;
      v8 = *(unsigned int *)(v7 + 8);
      if ((_DWORD)v8)
        break;
LABEL_11:
      if (++v6 == v5)
        goto LABEL_15;
    }
    v9 = -v8;
    v10 = *(_QWORD *)v7 + 1;
    while (*(_BYTE *)(v10 + v9))
    {
      if (__CFADD__(v9++, 1))
        goto LABEL_11;
    }
    a4 = 0x2000;
  }
  else
  {
    a4 = 4096;
  }
LABEL_15:
  memset(v18, 0, 41);
  memset(v19, 0, 41);
  v22 = 0u;
  memset(v23, 0, sizeof(v23));
  v24 = 0u;
  memset(v25, 0, sizeof(v25));
  v19[3] = 0u;
  v20 = 0u;
  memset(v21, 0, sizeof(v21));
  internal::marisa::grimoire::trie::Tail::build_((uint64_t)v18, a2, a3, a4);
  v12 = *a1;
  *a1 = v18[0];
  v18[0] = v12;
  v13 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v18[1];
  *(_QWORD *)&v18[1] = v13;
  v14 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v18[1] + 8);
  *(_OWORD *)((char *)&v18[1] + 8) = v14;
  LOBYTE(v13) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v18[2]);
  BYTE8(v18[2]) = v13;
  internal::marisa::grimoire::vector::BitVector::swap((internal::marisa::grimoire::vector::BitVector *)(a1 + 3), (internal::marisa::grimoire::vector::BitVector *)v19);
  if ((_QWORD)v24)
    MEMORY[0x1B5E305F8](v24, 0x1000C8077774924);
  if ((_QWORD)v22)
    MEMORY[0x1B5E305F8](v22, 0x1000C8077774924);
  if ((_QWORD)v20)
    MEMORY[0x1B5E305F8](v20, 0x1000C8077774924);
  if (*(_QWORD *)&v19[0])
    MEMORY[0x1B5E305F8](*(_QWORD *)&v19[0], 0x1000C8077774924);
  result = *(_QWORD *)&v18[0];
  if (*(_QWORD *)&v18[0])
    return MEMORY[0x1B5E305F8](*(_QWORD *)&v18[0], 0x1000C8077774924);
  return result;
}

void sub_1B3E21988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  internal::marisa::grimoire::trie::Tail::~Tail((internal::marisa::grimoire::trie::Tail *)&a9);
  _Unwind_Resume(a1);
}

uint64_t internal::marisa::grimoire::trie::Tail::build_(uint64_t a1, uint64_t a2, __int128 *a3, int a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t i;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t result;
  _QWORD *exception;
  _QWORD *v31;
  char v32;
  _QWORD v33[2];
  _OWORD v34[3];

  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    v10 = 0;
    v11 = (_DWORD *)(v9 + 12);
    do
    {
      *v11 = v10;
      v11 += 4;
      ++v10;
    }
    while (v8 != v10);
  }
  internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Entry *>(v9, v9 + 16 * v8, 0);
  memset(v34, 0, 41);
  v12 = *(_QWORD *)(a2 + 24);
  LODWORD(v33[0]) = 0;
  internal::marisa::grimoire::vector::Vector<unsigned int>::resize((uint64_t *)v34, v12, v33);
  v33[0] = 0;
  v33[1] = 0;
  v13 = *(_QWORD *)(a2 + 24);
  if (v13)
  {
    v14 = v33;
    do
    {
      --v13;
      v15 = *(_QWORD *)(a2 + 8);
      v16 = v15 + 16 * v13;
      v18 = (unsigned int *)(v16 + 8);
      v17 = *(unsigned int *)(v16 + 8);
      if (!*(_DWORD *)(v16 + 8))
      {
        exception = __cxa_allocate_exception(0x20uLL);
        *exception = &off_1E66E4768;
        exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc";
        exception[2] = 0x4000000ACLL;
        exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/t"
                       "ail.cc:172: MARISA_RANGE_ERROR: current.length() == 0";
      }
      v19 = 0;
      v20 = 0;
      v21 = *((unsigned int *)v14 + 2);
      while (v21 != v20)
      {
        if (*(unsigned __int8 *)(*v14 + v19) != *(unsigned __int8 *)(*(_QWORD *)v16 + v19))
          goto LABEL_13;
        ++v20;
        --v19;
        if (v17 == v20)
          goto LABEL_14;
      }
      v20 = *((unsigned int *)v14 + 2);
LABEL_13:
      if (v20 != v17)
      {
        v22 = *((_QWORD *)&v34[0] + 1);
        goto LABEL_17;
      }
LABEL_14:
      v22 = *((_QWORD *)&v34[0] + 1);
      if ((_DWORD)v21)
      {
        *(_DWORD *)(*((_QWORD *)&v34[0] + 1) + 4 * *(unsigned int *)(v15 + 16 * v13 + 12)) = v21
                                                                                             - v17
                                                                                             + *(_DWORD *)(*((_QWORD *)&v34[0] + 1) + 4 * *((unsigned int *)v14 + 3));
        goto LABEL_29;
      }
LABEL_17:
      *(_DWORD *)(v22 + 4 * *(unsigned int *)(v15 + 16 * v13 + 12)) = *(_QWORD *)(a1 + 24);
      v23 = *v18;
      if ((_DWORD)v23)
      {
        for (i = 0; i < v23; ++i)
        {
          v32 = *(_BYTE *)(*(_QWORD *)v16 - v23 + i + 1);
          internal::marisa::grimoire::vector::Vector<unsigned char>::push_back((uint64_t *)a1, &v32);
          v23 = *v18;
        }
        if (a4 != 4096)
        {
          if (v23 >= 2)
          {
            v25 = 1;
            do
            {
              internal::marisa::grimoire::vector::BitVector::push_back((uint64_t *)(a1 + 48), 0);
              ++v25;
            }
            while (v25 < *v18);
          }
LABEL_27:
          internal::marisa::grimoire::vector::BitVector::push_back((uint64_t *)(a1 + 48), 1);
          goto LABEL_28;
        }
      }
      else if (a4 != 4096)
      {
        goto LABEL_27;
      }
      v32 = 0;
      internal::marisa::grimoire::vector::Vector<unsigned char>::push_back((uint64_t *)a1, &v32);
LABEL_28:
      if (*(_DWORD *)(a1 + 28))
      {
        v31 = __cxa_allocate_exception(0x20uLL);
        *v31 = &off_1E66E4768;
        v31[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc";
        v31[2] = 0x7000000C2;
        v31[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/trie/tail.cc"
                 ":194: MARISA_SIZE_ERROR: buf_.size() > MARISA_UINT32_MAX";
      }
LABEL_29:
      v14 = (_QWORD *)v16;
    }
    while (v13);
  }
  internal::marisa::grimoire::vector::Vector<unsigned char>::shrink((_BYTE *)a1);
  v26 = *a3;
  *a3 = v34[0];
  v34[0] = v26;
  v27 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 2) = *(_QWORD *)&v34[1];
  *(_QWORD *)&v34[1] = v27;
  v28 = *(__int128 *)((char *)a3 + 24);
  *(__int128 *)((char *)a3 + 24) = *(_OWORD *)((char *)&v34[1] + 8);
  *(_OWORD *)((char *)&v34[1] + 8) = v28;
  LOBYTE(v27) = *((_BYTE *)a3 + 40);
  *((_BYTE *)a3 + 40) = BYTE8(v34[2]);
  result = v26;
  BYTE8(v34[2]) = v27;
  if ((_QWORD)v26)
    return MEMORY[0x1B5E305F8](v26, 0x1000C8077774924);
  return result;
}

void sub_1B3E21C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    MEMORY[0x1B5E305F8](a13, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t *internal::marisa::grimoire::trie::Tail::swap(internal::marisa::grimoire::trie::Tail *this, internal::marisa::grimoire::trie::Tail *a2)
{
  internal::marisa::grimoire::vector::Vector<unsigned char>::swap((uint64_t *)this, (uint64_t *)a2);
  return internal::marisa::grimoire::vector::BitVector::swap((internal::marisa::grimoire::trie::Tail *)((char *)this + 48), (internal::marisa::grimoire::trie::Tail *)((char *)a2 + 48));
}

uint64_t internal::marisa::grimoire::trie::Tail::map(internal::marisa::grimoire::trie::Tail *this, internal::marisa::grimoire::io::Mapper *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t result;
  __int128 v8[3];
  _OWORD v9[4];
  __int128 v10;
  _BYTE v11[25];
  __int128 v12;
  _BYTE v13[25];
  __int128 v14;
  _BYTE v15[25];

  memset(v8, 0, 41);
  memset(v9, 0, 41);
  v12 = 0u;
  memset(v13, 0, sizeof(v13));
  v14 = 0u;
  memset(v15, 0, sizeof(v15));
  v9[3] = 0u;
  v10 = 0u;
  memset(v11, 0, sizeof(v11));
  internal::marisa::grimoire::vector::Vector<char>::map(v8, a2);
  internal::marisa::grimoire::vector::BitVector::map((internal::marisa::grimoire::vector::BitVector *)v9, a2);
  v4 = *(_OWORD *)this;
  *(_OWORD *)this = v8[0];
  v8[0] = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *(_QWORD *)&v8[1];
  *(_QWORD *)&v8[1] = v5;
  v6 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)((char *)this + 24) = *(__int128 *)((char *)&v8[1] + 8);
  *(__int128 *)((char *)&v8[1] + 8) = v6;
  LOBYTE(v5) = *((_BYTE *)this + 40);
  *((_BYTE *)this + 40) = BYTE8(v8[2]);
  BYTE8(v8[2]) = v5;
  internal::marisa::grimoire::vector::BitVector::swap((internal::marisa::grimoire::trie::Tail *)((char *)this + 48), (internal::marisa::grimoire::vector::BitVector *)v9);
  if ((_QWORD)v14)
    MEMORY[0x1B5E305F8](v14, 0x1000C8077774924);
  if ((_QWORD)v12)
    MEMORY[0x1B5E305F8](v12, 0x1000C8077774924);
  if ((_QWORD)v10)
    MEMORY[0x1B5E305F8](v10, 0x1000C8077774924);
  if (*(_QWORD *)&v9[0])
    MEMORY[0x1B5E305F8](*(_QWORD *)&v9[0], 0x1000C8077774924);
  result = *(_QWORD *)&v8[0];
  if (*(_QWORD *)&v8[0])
    return MEMORY[0x1B5E305F8](*(_QWORD *)&v8[0], 0x1000C8077774924);
  return result;
}

void sub_1B3E21E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  internal::marisa::grimoire::trie::Tail::~Tail((internal::marisa::grimoire::trie::Tail *)&a9);
  _Unwind_Resume(a1);
}

uint64_t internal::marisa::grimoire::trie::Tail::map_(internal::marisa::grimoire::trie::Tail *this, internal::marisa::grimoire::io::Mapper *a2)
{
  internal::marisa::grimoire::vector::Vector<char>::map((__int128 *)this, a2);
  return internal::marisa::grimoire::vector::BitVector::map((internal::marisa::grimoire::trie::Tail *)((char *)this + 48), a2);
}

uint64_t internal::marisa::grimoire::trie::Tail::read(internal::marisa::grimoire::trie::Tail *this, internal::marisa::grimoire::io::Reader *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t result;
  __int128 v8[3];
  _OWORD v9[4];
  __int128 v10;
  _BYTE v11[25];
  __int128 v12;
  _BYTE v13[25];
  __int128 v14;
  _BYTE v15[25];

  memset(v8, 0, 41);
  memset(v9, 0, 41);
  v12 = 0u;
  memset(v13, 0, sizeof(v13));
  v14 = 0u;
  memset(v15, 0, sizeof(v15));
  v9[3] = 0u;
  v10 = 0u;
  memset(v11, 0, sizeof(v11));
  internal::marisa::grimoire::vector::Vector<char>::read(v8, a2);
  internal::marisa::grimoire::vector::BitVector::read((internal::marisa::grimoire::vector::BitVector *)v9, a2);
  v4 = *(_OWORD *)this;
  *(_OWORD *)this = v8[0];
  v8[0] = v4;
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *(_QWORD *)&v8[1];
  *(_QWORD *)&v8[1] = v5;
  v6 = *(_OWORD *)((char *)this + 24);
  *(_OWORD *)((char *)this + 24) = *(__int128 *)((char *)&v8[1] + 8);
  *(__int128 *)((char *)&v8[1] + 8) = v6;
  LOBYTE(v5) = *((_BYTE *)this + 40);
  *((_BYTE *)this + 40) = BYTE8(v8[2]);
  BYTE8(v8[2]) = v5;
  internal::marisa::grimoire::vector::BitVector::swap((internal::marisa::grimoire::trie::Tail *)((char *)this + 48), (internal::marisa::grimoire::vector::BitVector *)v9);
  if ((_QWORD)v14)
    MEMORY[0x1B5E305F8](v14, 0x1000C8077774924);
  if ((_QWORD)v12)
    MEMORY[0x1B5E305F8](v12, 0x1000C8077774924);
  if ((_QWORD)v10)
    MEMORY[0x1B5E305F8](v10, 0x1000C8077774924);
  if (*(_QWORD *)&v9[0])
    MEMORY[0x1B5E305F8](*(_QWORD *)&v9[0], 0x1000C8077774924);
  result = *(_QWORD *)&v8[0];
  if (*(_QWORD *)&v8[0])
    return MEMORY[0x1B5E305F8](*(_QWORD *)&v8[0], 0x1000C8077774924);
  return result;
}

void sub_1B3E21FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  internal::marisa::grimoire::trie::Tail::~Tail((internal::marisa::grimoire::trie::Tail *)&a9);
  _Unwind_Resume(a1);
}

uint64_t internal::marisa::grimoire::trie::Tail::read_(internal::marisa::grimoire::trie::Tail *this, internal::marisa::grimoire::io::Reader *a2)
{
  internal::marisa::grimoire::vector::Vector<char>::read((__int128 *)this, a2);
  return internal::marisa::grimoire::vector::BitVector::read((internal::marisa::grimoire::trie::Tail *)((char *)this + 48), a2);
}

uint64_t internal::marisa::grimoire::trie::Tail::write(internal::marisa::grimoire::trie::Tail *this, internal::marisa::grimoire::io::Writer *a2)
{
  internal::marisa::grimoire::vector::Vector<unsigned char>::write_((uint64_t)this, a2);
  return internal::marisa::grimoire::vector::BitVector::write_((internal::marisa::grimoire::trie::Tail *)((char *)this + 48), a2);
}

void internal::marisa::grimoire::trie::Tail::restore(_QWORD *a1, std::string *this, unint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  std::string::value_type v8;
  unsigned __int8 *v9;
  int v10;

  v3 = a3;
  if (a1[12])
  {
    do
    {
      std::string::push_back(this, *(_BYTE *)(a1[2] + v3));
      v6 = *(_QWORD *)(a1[8] + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3;
      ++v3;
    }
    while ((v6 & 1) == 0);
  }
  else
  {
    v7 = a1[2];
    v8 = *(_BYTE *)(v7 + a3);
    if (v8)
    {
      v9 = (unsigned __int8 *)(a3 + v7 + 1);
      do
      {
        std::string::push_back(this, v8);
        v10 = *v9++;
        v8 = v10;
      }
      while (v10);
    }
  }
}

uint64_t internal::marisa::grimoire::trie::Tail::match(_QWORD *a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  _BYTE *v9;
  int v10;
  int v11;

  v5 = a1[2];
  if (a1[12])
  {
    v6 = *a4;
    do
    {
      if (*(unsigned __int8 *)(v5 + a5) != *(unsigned __int8 *)(a2 + v6))
        break;
      *a4 = ++v6;
      if (((*(_QWORD *)(a1[8] + ((a5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a5) & 1) != 0)
        return 1;
      ++a5;
    }
    while (v6 < a3);
  }
  else
  {
    v7 = (unsigned __int8 *)(v5 + a5);
    v8 = *a4;
    v11 = *v7;
    v9 = v7 + 1;
    v10 = v11;
    while (v10 == *(unsigned __int8 *)(a2 + v8))
    {
      *a4 = ++v8;
      v10 = *v9;
      if (!*v9)
        return 1;
      ++v9;
      if (v8 >= a3)
        return 0;
    }
  }
  return 0;
}

BOOL internal::marisa::grimoire::trie::Tail::prefix_match(_QWORD *a1, uint64_t a2, unint64_t a3, unint64_t *a4, unint64_t a5, std::string *this)
{
  unint64_t v7;
  unint64_t v12;
  int v13;
  int v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unsigned __int8 *v24;
  int v25;

  v7 = a5;
  if (a1[12])
  {
    v12 = *a4;
    while (1)
    {
      v13 = *(unsigned __int8 *)(a1[2] + v7);
      v14 = *(unsigned __int8 *)(a2 + v12);
      v15 = v13 == v14;
      if (v13 != v14)
        break;
      std::string::push_back(this, v13);
      v12 = *a4 + 1;
      *a4 = v12;
      if (((*(_QWORD *)(a1[8] + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        break;
      ++v7;
      if (v12 >= a3)
      {
        do
        {
          std::string::push_back(this, *(_BYTE *)(a1[2] + v7));
          v16 = *(_QWORD *)(a1[8] + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7;
          ++v7;
        }
        while ((v16 & 1) == 0);
        return 1;
      }
    }
  }
  else
  {
    v17 = a1[2];
    v18 = *a4;
    v19 = v17 + a5 - *a4;
    v20 = *(_BYTE *)(v17 + a5);
    v21 = *a4;
    while (1)
    {
      v22 = *(unsigned __int8 *)(a2 + v21);
      v15 = v20 == v22;
      if (v20 != v22)
        break;
      std::string::push_back(this, v20);
      v23 = *a4;
      v21 = *a4 + 1;
      *a4 = v21;
      v20 = *(_BYTE *)(v19 + v21);
      if (!v20)
        break;
      if (v21 >= a3)
      {
        v24 = (unsigned __int8 *)(v7 - v18 + v17 + v23 + 2);
        do
        {
          std::string::push_back(this, v20);
          v25 = *v24++;
          v20 = v25;
        }
        while (v25);
        return 1;
      }
    }
  }
  return v15;
}

uint64_t internal::marisa::grimoire::trie::Tail::clear(internal::marisa::grimoire::trie::Tail *this)
{
  uint64_t result;
  __int128 v2;
  _OWORD v3[4];
  __int128 v4;
  _BYTE v5[25];
  __int128 v6;
  _BYTE v7[25];
  __int128 v8;
  _BYTE v9[25];

  memset(v3, 0, 41);
  v6 = 0u;
  memset(v7, 0, sizeof(v7));
  v8 = 0u;
  memset(v9, 0, sizeof(v9));
  v3[3] = 0u;
  v4 = 0u;
  memset(v5, 0, sizeof(v5));
  v2 = *(_OWORD *)this;
  *(_OWORD *)this = 0u;
  *((_QWORD *)this + 2) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_BYTE *)this + 40) = 0;
  internal::marisa::grimoire::vector::BitVector::swap((internal::marisa::grimoire::vector::BitVector *)v3, (internal::marisa::grimoire::trie::Tail *)((char *)this + 48));
  if ((_QWORD)v8)
    MEMORY[0x1B5E305F8](v8, 0x1000C8077774924);
  if ((_QWORD)v6)
    MEMORY[0x1B5E305F8](v6, 0x1000C8077774924);
  if ((_QWORD)v4)
    MEMORY[0x1B5E305F8](v4, 0x1000C8077774924);
  if (*(_QWORD *)&v3[0])
    MEMORY[0x1B5E305F8](*(_QWORD *)&v3[0], 0x1000C8077774924);
  result = v2;
  if ((_QWORD)v2)
    return MEMORY[0x1B5E305F8](v2, 0x1000C8077774924);
  return result;
}

void sub_1B3E223F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  internal::marisa::grimoire::trie::Tail::~Tail((internal::marisa::grimoire::trie::Tail *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *internal::marisa::grimoire::vector::Vector<unsigned int>::resize(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;

  v4 = a2;
  v5 = result;
  v6 = result[4];
  if (v6 < a2)
  {
    v7 = 2 * v6;
    if (v6 >> 61)
      v7 = 0x3FFFFFFFFFFFFFFFLL;
    if (v6 > a2 >> 1)
      a2 = v7;
    result = (uint64_t *)internal::marisa::grimoire::vector::Vector<unsigned int>::realloc(result, a2);
  }
  v8 = v5[3];
  v9 = v4 - v8;
  if (v4 > v8)
  {
    v10 = (_DWORD *)(v5[1] + 4 * v8);
    do
    {
      *v10++ = *a3;
      --v9;
    }
    while (v9);
  }
  v5[3] = v4;
  return result;
}

uint64_t internal::marisa::grimoire::vector::Vector<char>::map(__int128 *a1, internal::marisa::grimoire::io::Mapper *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  internal::marisa::grimoire::vector::Vector<unsigned char>::map_((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x1B5E305F8](v3, 0x1000C8077774924);
  return result;
}

void sub_1B3E2251C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1B5E305F8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::vector::Vector<char>::read(__int128 *a1, internal::marisa::grimoire::io::Reader *a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  uint64_t result;
  _OWORD v7[3];

  memset(v7, 0, 41);
  internal::marisa::grimoire::vector::Vector<unsigned char>::read_((uint64_t)v7, a2);
  v3 = *a1;
  *a1 = v7[0];
  v7[0] = v3;
  v4 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = *(_QWORD *)&v7[1];
  *(_QWORD *)&v7[1] = v4;
  v5 = *(__int128 *)((char *)a1 + 24);
  *(__int128 *)((char *)a1 + 24) = *(_OWORD *)((char *)&v7[1] + 8);
  *(_OWORD *)((char *)&v7[1] + 8) = v5;
  LOBYTE(v4) = *((_BYTE *)a1 + 40);
  *((_BYTE *)a1 + 40) = BYTE8(v7[2]);
  result = v3;
  BYTE8(v7[2]) = v4;
  if ((_QWORD)v3)
    return MEMORY[0x1B5E305F8](v3, 0x1000C8077774924);
  return result;
}

void sub_1B3E225D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    MEMORY[0x1B5E305F8](a9, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Entry *>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;

  v4 = a2;
  v5 = a1;
  v6 = a2 - a1;
  if ((uint64_t)(a2 - a1) < 161)
  {
    v7 = 0;
    goto LABEL_68;
  }
  v7 = 0;
  do
  {
    v8 = internal::marisa::grimoire::algorithm::details::median<internal::marisa::grimoire::trie::Entry>(v5, v5 + 16 * ((unint64_t)v6 >> 5), v4 - 16, a3);
    v9 = v8;
    v10 = v5;
    v11 = v4;
    v12 = v5;
    v13 = v4;
    while (v10 < v11)
    {
      v14 = *(unsigned int *)(v10 + 8);
      v15 = a3 >= v14 ? -1 : *(unsigned __int8 *)(*(_QWORD *)v10 - a3);
      if (v15 > v8)
        break;
      if (v15 == v8)
      {
        v16 = *(_QWORD *)v10;
        v17 = *(_DWORD *)(v10 + 12);
        *(_QWORD *)v10 = *(_QWORD *)v12;
        *(_QWORD *)(v10 + 8) = *(_QWORD *)(v12 + 8);
        *(_QWORD *)v12 = v16;
        *(_DWORD *)(v12 + 8) = v14;
        *(_DWORD *)(v12 + 12) = v17;
        v12 += 16;
      }
LABEL_11:
      v10 += 16;
    }
    if (v10 < v11)
    {
      v18 = v11 - 16;
      do
      {
        v11 = v18;
        v19 = *(unsigned int *)(v18 + 8);
        if (a3 >= v19)
          v20 = -1;
        else
          v20 = *(unsigned __int8 *)(*(_QWORD *)v11 - a3);
        if (v20 < v8)
          break;
        if (v20 == v8)
        {
          v21 = *(_QWORD *)(v13 - 16);
          v13 -= 16;
          v22 = *(_QWORD *)v11;
          v23 = *(_DWORD *)(v11 + 12);
          *(_QWORD *)v11 = v21;
          *(_QWORD *)(v11 + 8) = *(_QWORD *)(v13 + 8);
          *(_QWORD *)v13 = v22;
          *(_DWORD *)(v13 + 8) = v19;
          *(_DWORD *)(v13 + 12) = v23;
        }
        v18 = v11 - 16;
      }
      while (v10 < v11);
    }
    if (v10 < v11)
    {
      v24 = *(_QWORD *)v10;
      *(_QWORD *)v10 = *(_QWORD *)v11;
      v25 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)v11 = v24;
      v26 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)(v10 + 8) = v25;
      *(_QWORD *)(v11 + 8) = v26;
      goto LABEL_11;
    }
    v42 = v7;
    while (v12 > v5)
    {
      v28 = *(_QWORD *)(v12 - 16);
      v12 -= 16;
      v27 = v28;
      v29 = *(_QWORD *)(v10 - 16);
      v10 -= 16;
      *(_QWORD *)v12 = v29;
      v30 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)v10 = v27;
      v31 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = v30;
      *(_QWORD *)(v10 + 8) = v31;
    }
    while (v13 < v4)
    {
      v32 = *(_QWORD *)v13;
      *(_QWORD *)v13 = *(_QWORD *)v11;
      v33 = *(_QWORD *)(v11 + 8);
      *(_QWORD *)v11 = v32;
      v34 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)(v13 + 8) = v33;
      *(_QWORD *)(v11 + 8) = v34;
      v11 += 16;
      v13 += 16;
    }
    v35 = v10 - v5;
    v36 = (uint64_t)(v10 - v5) >> 4;
    v37 = v11 - v10;
    if (v36 <= (uint64_t)(v11 - v10) >> 4)
    {
      v38 = v4 - v11;
      if (v37 >> 4 >= (uint64_t)(v4 - v11) >> 4)
      {
        if (v35 == 16)
        {
          v39 = v42 + 1;
        }
        else
        {
          if (v35 < 17)
            goto LABEL_52;
          v39 = internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Entry *>(v5, v10, a3)+ v42;
        }
        v42 = v39;
LABEL_52:
        if (v38 == 16)
        {
          v7 = v42 + 1;
        }
        else if (v38 < 17)
        {
          v7 = v42;
        }
        else
        {
          v7 = internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Entry *>(v11, v4, a3)+ v42;
        }
        if (v37 == 16)
        {
          ++v7;
        }
        else if (v37 >= 17)
        {
          if (v9 == -1)
          {
            ++v7;
            v5 = v11;
            goto LABEL_63;
          }
          ++a3;
        }
        v5 = v10;
LABEL_63:
        v4 = v11;
        goto LABEL_64;
      }
    }
    if (v37 == 16)
      goto LABEL_31;
    if (v37 < 17)
    {
      v7 = v42;
    }
    else if (v8 == -1)
    {
LABEL_31:
      v7 = v42 + 1;
    }
    else
    {
      v7 = internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Entry *>(v10, v11, a3 + 1)+ v42;
    }
    v40 = v4 - v11;
    if (v36 >= (uint64_t)(v4 - v11) >> 4)
    {
      if (v40 == 16)
      {
        ++v7;
      }
      else if (v40 >= 17)
      {
        v7 += internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Entry *>(v11, v4, a3);
      }
      v4 = v10;
    }
    else
    {
      if (v35 == 16)
      {
        ++v7;
      }
      else if (v35 >= 17)
      {
        v7 += internal::marisa::grimoire::algorithm::details::sort<internal::marisa::grimoire::trie::Entry *>(v5, v10, a3);
      }
      v5 = v11;
    }
LABEL_64:
    v6 = v4 - v5;
  }
  while ((uint64_t)(v4 - v5) > 160);
LABEL_68:
  if (v6 >= 17)
    v7 += internal::marisa::grimoire::algorithm::details::insertion_sort<internal::marisa::grimoire::trie::Entry *>(v5, v4, a3);
  return v7;
}

uint64_t internal::marisa::grimoire::algorithm::details::median<internal::marisa::grimoire::trie::Entry>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v4;
  int v5;
  int v6;
  int v7;

  if (*(unsigned int *)(a1 + 8) <= a4)
    v4 = -1;
  else
    v4 = *(unsigned __int8 *)(*(_QWORD *)a1 - a4);
  if (*(unsigned int *)(a2 + 8) <= a4)
    v5 = -1;
  else
    v5 = *(unsigned __int8 *)(*(_QWORD *)a2 - a4);
  if (*(unsigned int *)(a3 + 8) <= a4)
    v6 = -1;
  else
    v6 = *(unsigned __int8 *)(*(_QWORD *)a3 - a4);
  if (v4 <= v5)
    v7 = v5;
  else
    v7 = v4;
  if (v4 >= v5)
    v4 = v5;
  if (v4 <= v6)
    v4 = v6;
  if (v7 >= v6)
    return v4;
  else
    return v7;
}

uint64_t internal::marisa::grimoire::algorithm::details::insertion_sort<internal::marisa::grimoire::trie::Entry *>(unint64_t a1, unint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = (_QWORD *)(a1 + 16);
  if (a1 + 16 >= a2)
    return 1;
  v7 = 1;
  do
  {
    v8 = v3;
    if ((unint64_t)v3 <= a1)
    {
      v10 = 0;
    }
    else
    {
      while (1)
      {
        v9 = v8 - 2;
        v10 = internal::marisa::grimoire::algorithm::details::compare<internal::marisa::grimoire::trie::Entry>((uint64_t)(v8 - 2), (uint64_t)v8, a3);
        if (v10 < 1)
          break;
        v11 = *(v8 - 2);
        *(v8 - 2) = *v8;
        v12 = v8[1];
        *v8 = v11;
        v13 = *(v8 - 1);
        *(v8 - 1) = v12;
        v8[1] = v13;
        v8 -= 2;
        if ((unint64_t)v9 <= a1)
        {
          v10 = 1;
          break;
        }
      }
    }
    if (v10)
      ++v7;
    v3 += 2;
  }
  while ((unint64_t)v3 < a2);
  return v7;
}

uint64_t internal::marisa::grimoire::algorithm::details::compare<internal::marisa::grimoire::trie::Entry>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  uint64_t result;
  unsigned int v12;

  v3 = *(unsigned int *)(a1 + 8);
  v4 = *(unsigned int *)(a2 + 8);
  v5 = v3 - a3;
  if (v3 <= a3)
  {
LABEL_6:
    if (v3 < v4)
      v12 = -1;
    else
      v12 = 1;
    if ((_DWORD)v3 == (_DWORD)v4)
      return 0;
    else
      return v12;
  }
  else
  {
    v6 = v4 - a3;
    v7 = (unsigned __int8 *)(*(_QWORD *)a2 - a3);
    v8 = (unsigned __int8 *)(*(_QWORD *)a1 - a3);
    while (v6)
    {
      v9 = *v8;
      v10 = *v7;
      result = (v9 - v10);
      if (v9 != v10)
        return result;
      --v6;
      --v7;
      --v8;
      if (!--v5)
        goto LABEL_6;
    }
    return 1;
  }
}

uint64_t internal::marisa::grimoire::vector::BitVector::rank1(internal::marisa::grimoire::vector::BitVector *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2 >> 9;
  v3 = *((_QWORD *)this + 10);
  v4 = *(unsigned int *)(v3 + 12 * (a2 >> 9));
  switch((a2 >> 6) & 7)
  {
    case 1uLL:
      v5 = *(_DWORD *)(v3 + 12 * v2 + 4) & 0x7F;
      goto LABEL_10;
    case 2uLL:
      v6 = (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 7;
      goto LABEL_5;
    case 3uLL:
      v6 = (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 15;
LABEL_5:
      v4 += v6;
      break;
    case 4uLL:
      v4 += (unint64_t)*(unsigned int *)(v3 + 12 * v2 + 4) >> 23;
      break;
    case 5uLL:
      v5 = *(_DWORD *)(v3 + 12 * v2 + 8) & 0x1FF;
      goto LABEL_10;
    case 6uLL:
      v5 = ((unint64_t)*(unsigned int *)(v3 + 12 * v2 + 8) >> 9) & 0x1FF;
      goto LABEL_10;
    case 7uLL:
      v5 = ((unint64_t)*(unsigned int *)(v3 + 12 * v2 + 8) >> 18) & 0x1FF;
LABEL_10:
      v4 += v5;
      break;
    default:
      break;
  }
  v7 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * (a2 >> 6)) & ~(-1 << a2);
  v8 = (((((v7 >> 1) & 0x5555555555555555) + (v7 & 0x5555555555555555)) >> 2) & 0x3333333333333333)
     + ((((v7 >> 1) & 0x5555555555555555) + (v7 & 0x5555555555555555)) & 0x3333333333333333);
  return v4 + ((0x101010101010101 * (((v8 >> 4) & 0x707070707070707) + (v8 & 0x707070707070707))) >> 56);
}

unint64_t internal::marisa::grimoire::vector::BitVector::select0(internal::marisa::grimoire::vector::BitVector *this, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unint64_t v12;
  internal::marisa::grimoire::vector::_anonymous_namespace_ *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *((_QWORD *)this + 16);
  if ((a2 & 0x1FF) == 0)
    return *(unsigned int *)(v2 + 4 * (a2 >> 9));
  v3 = *(_DWORD *)(v2 + 4 * (a2 >> 9)) >> 9;
  v4 = (*(_DWORD *)(v2 + 4 * (a2 >> 9) + 4) + 511) >> 9;
  v5 = *((_QWORD *)this + 10);
  if (v3 + 10 >= v4)
  {
    v7 = v5 + 12 * v3;
    v8 = v3-- << 9;
    v9 = (unsigned int *)(v7 + 12);
    do
    {
      v10 = *v9;
      v9 += 3;
      ++v3;
      v8 += 512;
    }
    while (v8 - v10 <= a2);
  }
  else
  {
    do
    {
      if (((v4 + v3) >> 1 << 9) - *(unsigned int *)(v5 + 12 * ((v4 + v3) >> 1)) > a2)
        v4 = (v4 + v3) >> 1;
      else
        v3 = (v4 + v3) >> 1;
    }
    while (v3 + 1 < v4);
  }
  v11 = (unsigned int *)(v5 + 12 * v3);
  v12 = v11[1];
  v13 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)(a2 - (v3 << 9) + *v11);
  v14 = 8 * v3;
  if ((unint64_t)v13 >= 256 - (v12 >> 23))
  {
    v15 = *(unsigned int *)(v5 + 12 * v3 + 8);
    v16 = (v15 >> 9) & 0x1FF;
    if ((unint64_t)v13 >= 384 - v16)
    {
      v18 = (v15 >> 18) & 0x1FF;
      if ((unint64_t)v13 >= 448 - v18)
      {
        v14 |= 7uLL;
        v13 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + v18 - 448);
      }
      else
      {
        v14 |= 6uLL;
        v13 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + v16 - 384);
      }
    }
    else if ((unint64_t)v13 >= 320 - (v15 & 0x1FF))
    {
      v14 |= 5uLL;
      v13 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + (v15 & 0x1FF) - 320);
    }
    else
    {
      v14 |= 4uLL;
      v13 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + (v12 >> 23) - 256);
    }
  }
  else if ((unint64_t)v13 >= 128 - (unint64_t)(v12 >> 7))
  {
    v17 = (v12 >> 15);
    if ((unint64_t)v13 >= 192 - v17)
    {
      v14 |= 3uLL;
      v13 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + v17 - 192);
    }
    else
    {
      v14 |= 2uLL;
      v13 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + (v12 >> 7)
                                                                                      - 128);
    }
  }
  else if ((unint64_t)v13 >= 64 - (v12 & 0x7F))
  {
    v14 |= 1uLL;
    v13 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)((char *)v13 + (v12 & 0x7F) - 64);
  }
}

unint64_t internal::marisa::grimoire::vector::`anonymous namespace'::select_bit(internal::marisa::grimoire::vector::_anonymous_namespace_ *this, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = (((a3 - ((a3 >> 1) & 0x5555555555555555)) >> 2) & 0x3333333333333333)
     + ((a3 - ((a3 >> 1) & 0x5555555555555555)) & 0x3333333333333333);
  v4 = (v3 + (v3 >> 4)) & 0xF0F0F0F0F0F0F0FLL;
  v5 = __clz(__rbit64(((((0x101010101010101 * v4) | 0x8080808080808080)
                      - 0x101010101010101 * (_QWORD)this
                      - 0x101010101010101) >> 7) & 0x101010101010101));
  return v5
       + a2
                                                                               * ((_QWORD)this
                                                                                - ((unint64_t)(0x101010101010100 * v4) >> v5))
                                                                               + (a3 >> v5)];
}

unint64_t internal::marisa::grimoire::vector::BitVector::select1(internal::marisa::grimoire::vector::BitVector *this, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  internal::marisa::grimoire::vector::_anonymous_namespace_ *v16;
  uint64_t v17;
  unint64_t v18;
  internal::marisa::grimoire::vector::_anonymous_namespace_ *v19;
  BOOL v20;
  internal::marisa::grimoire::vector::_anonymous_namespace_ *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  internal::marisa::grimoire::vector::_anonymous_namespace_ *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  internal::marisa::grimoire::vector::_anonymous_namespace_ *v33;
  BOOL v34;

  v2 = *((_QWORD *)this + 22);
  if ((a2 & 0x1FF) == 0)
    return *(unsigned int *)(v2 + 4 * (a2 >> 9));
  v3 = *(_DWORD *)(v2 + 4 * (a2 >> 9)) >> 9;
  v4 = (*(_DWORD *)(v2 + 4 * (a2 >> 9) + 4) + 511) >> 9;
  v5 = *((_QWORD *)this + 10);
  if (v3 + 10 >= v4)
  {
    v7 = v5 + 12 * v3--;
    v8 = (unsigned int *)(v7 + 12);
    do
    {
      v9 = *v8;
      v8 += 3;
      ++v3;
    }
    while (v9 <= a2);
  }
  else
  {
    do
    {
      if (*(unsigned int *)(v5 + 12 * ((v4 + v3) >> 1)) > a2)
        v4 = (v4 + v3) >> 1;
      else
        v3 = (v4 + v3) >> 1;
    }
    while (v3 + 1 < v4);
  }
  v10 = (unsigned int *)(v5 + 12 * v3);
  v11 = v10[1];
  v12 = a2 - *v10;
  v13 = 8 * v3;
  if (v12 >= v11 >> 23)
  {
    v23 = v11 >> 23;
    v24 = *(unsigned int *)(v5 + 12 * v3 + 8);
    v25 = (v24 >> 9) & 0x1FF;
    v26 = (v24 >> 18) & 0x1FF;
    v27 = v13 | 7;
    v28 = v12 >= v26;
    if (v12 < v26)
      v29 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - v25);
    else
      v29 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - v26);
    if (!v28)
      v27 = v13 | 6;
    v30 = v24 & 0x1FF;
    v31 = v13 | 5;
    v32 = v13 | 4;
    v33 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - v23);
    v34 = v12 >= v30;
    if (v12 < v30)
      v21 = v33;
    else
      v21 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - v30);
    if (v34)
      v32 = v31;
    if (v12 < v25)
    {
      v22 = v32;
    }
    else
    {
      v21 = v29;
      v22 = v27;
    }
  }
  else
  {
    v14 = v11 >> 7;
    v15 = (v11 >> 15);
    v16 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - (v11 >> 7));
    if (v12 < v15)
    {
      v17 = v13 | 2;
    }
    else
    {
      v16 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - v15);
      v17 = v13 | 3;
    }
    v18 = v11 & 0x7F;
    v20 = v12 >= v18;
    v19 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)(v12 - v18);
    if (v20)
      v13 |= 1uLL;
    else
      v19 = (internal::marisa::grimoire::vector::_anonymous_namespace_ *)v12;
    v20 = v12 >= v14;
    if (v12 < v14)
      v21 = v19;
    else
      v21 = v16;
    if (v20)
      v22 = v17;
    else
      v22 = v13;
  }
}

void internal::marisa::grimoire::vector::BitVector::build_index(internal::marisa::grimoire::vector::BitVector *this, const internal::marisa::grimoire::vector::BitVector *a2, int a3, int a4)
{
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  unsigned int v15;
  _DWORD *v16;
  unsigned int v17;
  _DWORD *v18;
  unsigned int v19;
  _DWORD *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t *v24;
  _DWORD *v25;
  _DWORD *v26;
  int v27;

  v8 = *((_QWORD *)a2 + 6);
  v9 = (uint64_t *)((char *)this + 64);
  v10 = v8 >> 9;
  if ((v8 & 0x1FF) != 0)
    ++v10;
  internal::marisa::grimoire::vector::Vector<internal::marisa::grimoire::vector::RankIndex>::resize(v9, v10 + 1);
  if (*((_QWORD *)a2 + 3))
    __asm { BR              X10 }
  if ((v8 & 0x1FF) != 0)
  {
    v11 = (v8 - 1) >> 9;
    switch(((v8 - 1) >> 6) & 7)
    {
      case 0uLL:
        v12 = *((_QWORD *)this + 9);
        v13 = (_DWORD *)(v12 + 12 * v11);
        v14 = -*v13;
        v15 = v13[1] & 0xFFFFFF80 | v14 & 0x7F;
        v13[1] = v15;
        goto LABEL_9;
      case 1uLL:
        v12 = *((_QWORD *)this + 9);
        v16 = (_DWORD *)(v12 + 12 * v11);
        v15 = v16[1];
        v14 = -*v16;
LABEL_9:
        v17 = v15 & 0xFFFF807F | (v14 << 7);
        *(_DWORD *)(v12 + 12 * v11 + 4) = v17;
        goto LABEL_11;
      case 2uLL:
        v12 = *((_QWORD *)this + 9);
        v18 = (_DWORD *)(v12 + 12 * v11);
        v17 = v18[1];
        v14 = -*v18;
LABEL_11:
        v19 = v17 & 0xFF807FFF | (v14 << 15);
        *(_DWORD *)(v12 + 12 * v11 + 4) = v19;
        goto LABEL_13;
      case 3uLL:
        v12 = *((_QWORD *)this + 9);
        v20 = (_DWORD *)(v12 + 12 * v11);
        v19 = v20[1];
        v14 = -*v20;
LABEL_13:
        *(_DWORD *)(v12 + 12 * v11 + 4) = v19 & 0x7FFFFF | ((unsigned __int16)v14 << 23);
        goto LABEL_15;
      case 4uLL:
        v12 = *((_QWORD *)this + 9);
        v14 = -*(_DWORD *)(v12 + 12 * v11);
LABEL_15:
        v21 = v12 + 12 * v11;
        v22 = *(_DWORD *)(v21 + 8) & 0xFFFFFE00 | v14 & 0x1FF;
        *(_DWORD *)(v21 + 8) = v22;
        goto LABEL_16;
      case 5uLL:
        v12 = *((_QWORD *)this + 9);
        v25 = (_DWORD *)(v12 + 12 * v11);
        v22 = v25[2];
        v14 = -*v25;
LABEL_16:
        v23 = v22 & 0xFFFC01FF | ((v14 & 0x1FF) << 9);
        *(_DWORD *)(v12 + 12 * v11 + 8) = v23;
        goto LABEL_17;
      case 6uLL:
        v12 = *((_QWORD *)this + 9);
        v26 = (_DWORD *)(v12 + 12 * v11);
        v23 = v26[2];
        v14 = -*v26;
LABEL_17:
        *(_DWORD *)(v12 + 12 * v11 + 8) = v23 & 0xF803FFFF | ((v14 & 0x1FF) << 18);
        break;
      default:
        break;
    }
  }
  *((_QWORD *)this + 6) = v8;
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *(_DWORD *)(*((_QWORD *)this + 9) + 12 * *((_QWORD *)this + 11) - 12) = 0;
  if (a3)
  {
    v27 = v8;
    internal::marisa::grimoire::vector::Vector<unsigned int>::push_back((uint64_t *)this + 14, &v27);
    internal::marisa::grimoire::vector::Vector<unsigned int>::shrink((_DWORD *)this + 28);
  }
  if (a4)
  {
    v24 = (uint64_t *)((char *)this + 160);
    v27 = v8;
    internal::marisa::grimoire::vector::Vector<unsigned int>::push_back(v24, &v27);
    internal::marisa::grimoire::vector::Vector<unsigned int>::shrink(v24);
  }
}

uint64_t *internal::marisa::grimoire::vector::Vector<unsigned int>::push_back(uint64_t *result, _DWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = result;
  v4 = result[3];
  v5 = result[4];
  v6 = v4 + 1;
  if (v5 < v4 + 1)
  {
    v7 = 2 * v5;
    if (v5 >> 61)
      v7 = 0x3FFFFFFFFFFFFFFFLL;
    if (v5 <= v6 >> 1)
      v8 = v6;
    else
      v8 = v7;
    result = (uint64_t *)internal::marisa::grimoire::vector::Vector<unsigned int>::realloc(result, v8);
    v4 = v3[3];
    v6 = v4 + 1;
  }
  *(_DWORD *)(v3[1] + 4 * v4) = *a2;
  v3[3] = v6;
  return result;
}

_DWORD *internal::marisa::grimoire::vector::Vector<unsigned int>::shrink(_DWORD *result)
{
  uint64_t v1;
  _QWORD *exception;

  if (*((_BYTE *)result + 40))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *exception = &off_1E66E4768;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vector.h";
    exception[2] = 0x100000072;
    exception[3] = "/Library/Caches/com.apple.xbs/Sources/TrieUtils/src/third_party/marisa/lib/marisa/grimoire/vector/vec"
                   "tor.h:114: MARISA_STATE_ERROR: fixed_";
  }
  v1 = *((_QWORD *)result + 3);
  if (v1 != *((_QWORD *)result + 4))
    return internal::marisa::grimoire::vector::Vector<unsigned int>::realloc((uint64_t *)result, v1);
  return result;
}

uint64_t greek_UTF_8_stem(uint64_t a1)
{
  int v2;
  int among_b;
  uint64_t v4;
  void *v5;
  uint64_t result;
  int v7;
  int v8;
  int v9;
  int v10;
  void *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  char v18;
  int v19;
  void *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int v33;
  uint64_t v34;
  int v35;

  v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 24) = v2;
  among_b = find_among_b(a1, (uint64_t)&a_0, 46);
  if (among_b)
  {
    while (2)
    {
      v4 = *(unsigned int *)(a1 + 8);
      *(_DWORD *)(a1 + 20) = v4;
      switch(among_b)
      {
        case 1:
          v5 = &s_0;
          goto LABEL_27;
        case 2:
          v5 = &s_1;
          goto LABEL_27;
        case 3:
          v5 = &s_2;
          goto LABEL_27;
        case 4:
          v5 = &s_3;
          goto LABEL_27;
        case 5:
          v5 = &s_4;
          goto LABEL_27;
        case 6:
          v5 = &s_5;
          goto LABEL_27;
        case 7:
          v5 = &s_6;
          goto LABEL_27;
        case 8:
          v5 = &s_7;
          goto LABEL_27;
        case 9:
          v5 = &s_8;
          goto LABEL_27;
        case 10:
          v5 = &s_9;
          goto LABEL_27;
        case 11:
          v5 = &s_10;
          goto LABEL_27;
        case 12:
          v5 = &s_11;
          goto LABEL_27;
        case 13:
          v5 = &s_12;
          goto LABEL_27;
        case 14:
          v5 = &s_13;
          goto LABEL_27;
        case 15:
          v5 = &s_14;
          goto LABEL_27;
        case 16:
          v5 = &s_15;
          goto LABEL_27;
        case 17:
          v5 = &s_16;
          goto LABEL_27;
        case 18:
          v5 = &s_17;
          goto LABEL_27;
        case 19:
          v5 = &s_18;
          goto LABEL_27;
        case 20:
          v5 = &s_19;
          goto LABEL_27;
        case 21:
          v5 = &s_20;
          goto LABEL_27;
        case 22:
          v5 = &s_21;
          goto LABEL_27;
        case 23:
          v5 = &s_22;
          goto LABEL_27;
        case 24:
          v5 = &s_23;
LABEL_27:
          result = slice_from_s(a1, 2, v5);
          if ((result & 0x80000000) == 0)
            goto LABEL_28;
          return result;
        case 25:
          v7 = skip_utf8(*(_QWORD *)a1, v4, *(unsigned int *)(a1 + 16), 0, -1);
          if (v7 < 0)
            break;
          *(_DWORD *)(a1 + 8) = v7;
          goto LABEL_28;
        default:
LABEL_28:
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
          among_b = find_among_b(a1, (uint64_t)&a_0, 46);
          if (!among_b)
            break;
          continue;
      }
      break;
    }
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if ((int)len_utf8(*(char **)a1) < 3)
    return 0;
  **(_BYTE **)(a1 + 48) = 1;
  v9 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 24) = v9;
  v10 = find_among_b(a1, (uint64_t)&a_1, 40);
  if (v10)
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    switch(v10)
    {
      case 1:
        v11 = &s_24;
        goto LABEL_47;
      case 2:
        v11 = &s_25;
        goto LABEL_45;
      case 3:
        v11 = &s_26;
        goto LABEL_45;
      case 4:
        v11 = &s_27;
        goto LABEL_47;
      case 5:
        v11 = &s_28;
        v12 = a1;
        v13 = 8;
        goto LABEL_50;
      case 6:
        v11 = &s_29;
        goto LABEL_45;
      case 7:
        v11 = &s_30;
        goto LABEL_45;
      case 8:
        v11 = &s_31;
LABEL_45:
        v12 = a1;
        v13 = 6;
        goto LABEL_50;
      case 9:
        v11 = &s_32;
LABEL_47:
        v12 = a1;
        v13 = 4;
        goto LABEL_50;
      case 10:
        v11 = &s_33;
        v12 = a1;
        v13 = 12;
        goto LABEL_50;
      case 11:
        v11 = &s_34;
        v12 = a1;
        v13 = 10;
LABEL_50:
        result = slice_from_s(v12, v13, v11);
        if ((result & 0x80000000) == 0)
          goto LABEL_51;
        return result;
      default:
LABEL_51:
        **(_BYTE **)(a1 + 48) = 0;
        break;
    }
  }
  v14 = v9 - v8;
  v15 = *(_DWORD *)(a1 + 12) + v14;
  *(_DWORD *)(a1 + 8) = v15;
  *(_DWORD *)(a1 + 24) = v15;
  if (find_among_b(a1, (uint64_t)&a_4, 14))
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    result = slice_del(a1);
    if ((result & 0x80000000) != 0)
      return result;
    **(_BYTE **)(a1 + 48) = 0;
    v16 = *(_DWORD *)(a1 + 12);
    v17 = *(int *)(a1 + 8);
    *(_DWORD *)(a1 + 20) = v17;
    *(_DWORD *)(a1 + 24) = v17;
    if ((int)v17 - 3 > *(_DWORD *)(a1 + 16)
      && (v18 = *(_BYTE *)(v17 + *(_QWORD *)a1 - 1), (v18 & 0xE0) == 0xA0)
      && ((0x80220000 >> v18) & 1) != 0
      && find_among_b(a1, (uint64_t)&a_2, 9)
      && *(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
    {
      v20 = &s_35;
      v21 = a1;
      v22 = 2;
    }
    else
    {
      v19 = *(_DWORD *)(a1 + 12) + v17 - v16;
      *(_DWORD *)(a1 + 8) = v19;
      *(_DWORD *)(a1 + 20) = v19;
      *(_DWORD *)(a1 + 24) = v19;
      if (!find_among_b(a1, (uint64_t)&a_3, 22) || *(_DWORD *)(a1 + 8) > *(_DWORD *)(a1 + 16))
        goto LABEL_63;
      v20 = &s_36;
      v21 = a1;
      v22 = 4;
    }
    result = slice_from_s(v21, v22, v20);
    if ((result & 0x80000000) != 0)
      return result;
  }
LABEL_63:
  v23 = *(_DWORD *)(a1 + 12) + v14;
  *(_DWORD *)(a1 + 8) = v23;
  *(_DWORD *)(a1 + 24) = v23;
  if (find_among_b(a1, (uint64_t)&a_6, 7))
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    result = slice_del(a1);
    if ((result & 0x80000000) != 0)
      return result;
    **(_BYTE **)(a1 + 48) = 0;
    v24 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 20) = v24;
    *(_DWORD *)(a1 + 24) = v24;
    if (find_among_b(a1, (uint64_t)&a_5, 8))
    {
      if (*(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
      {
        result = slice_from_s(a1, 4, &s_37);
        if ((result & 0x80000000) != 0)
          return result;
      }
    }
  }
  v25 = *(_DWORD *)(a1 + 12) + v14;
  *(_DWORD *)(a1 + 8) = v25;
  *(_DWORD *)(a1 + 24) = v25;
  if (find_among_b(a1, (uint64_t)&a_9, 7))
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    result = slice_del(a1);
    if ((result & 0x80000000) != 0)
      return result;
    **(_BYTE **)(a1 + 48) = 0;
    v27 = *(int *)(a1 + 8);
    v26 = *(int *)(a1 + 12);
    if (eq_s_b(a1, 6, &s_38))
    {
      v28 = *(_DWORD *)(a1 + 16);
      if (*(_DWORD *)(a1 + 8) <= v28)
      {
        v29 = &s_39;
LABEL_82:
        v34 = a1;
        v35 = 4;
        goto LABEL_83;
      }
    }
    else
    {
      v28 = *(_DWORD *)(a1 + 16);
    }
    v30 = v26 - v27;
    v31 = *(int *)(a1 + 12) - v30;
    *(_DWORD *)(a1 + 8) = v31;
    *(_DWORD *)(a1 + 20) = v31;
    *(_DWORD *)(a1 + 24) = v31;
    if ((int)v31 - 3 > v28)
    {
      v32 = *(_BYTE *)(v31 + *(_QWORD *)a1 - 1);
      if ((v32 & 0xE0) == 0xA0
        && ((0x80220000 >> v32) & 1) != 0
        && find_among_b(a1, (uint64_t)&a_7, 19)
        && *(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
      {
        v29 = &s_40;
        v34 = a1;
        v35 = 2;
LABEL_83:
        result = slice_from_s(v34, v35, v29);
        if ((result & 0x80000000) != 0)
          return result;
        goto LABEL_84;
      }
    }
    v33 = *(_DWORD *)(a1 + 12) - v30;
    *(_DWORD *)(a1 + 8) = v33;
    *(_DWORD *)(a1 + 20) = v33;
    *(_DWORD *)(a1 + 24) = v33;
    if (find_among_b(a1, (uint64_t)&a_8, 13) && *(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
    {
      v29 = &s_41;
      goto LABEL_82;
    }
  }
LABEL_84:
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
  result = r_steps4(a1);
  if ((result & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
    result = r_steps5(a1);
    if ((result & 0x80000000) == 0)
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
      result = r_steps6(a1);
      if ((result & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
        result = r_steps7(a1);
        if ((result & 0x80000000) == 0)
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
          result = r_steps8(a1);
          if ((result & 0x80000000) == 0)
          {
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
            result = r_steps9(a1);
            if ((result & 0x80000000) == 0)
            {
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
              result = r_steps10(a1);
              if ((result & 0x80000000) == 0)
              {
                *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                result = r_step2a(a1);
                if ((result & 0x80000000) == 0)
                {
                  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                  result = r_step2b(a1);
                  if ((result & 0x80000000) == 0)
                  {
                    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                    result = r_step2c(a1);
                    if ((result & 0x80000000) == 0)
                    {
                      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                      result = r_step2d(a1);
                      if ((result & 0x80000000) == 0)
                      {
                        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                        result = r_step3(a1);
                        if ((result & 0x80000000) == 0)
                        {
                          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                          result = r_step4(a1);
                          if ((result & 0x80000000) == 0)
                          {
                            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                            result = r_step5a(a1);
                            if ((result & 0x80000000) == 0)
                            {
                              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                              result = r_step5b(a1);
                              if ((result & 0x80000000) == 0)
                              {
                                *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                                result = r_step5c(a1);
                                if ((result & 0x80000000) == 0)
                                {
                                  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                                  result = r_step5d(a1);
                                  if ((result & 0x80000000) == 0)
                                  {
                                    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                                    result = r_step5e(a1);
                                    if ((result & 0x80000000) == 0)
                                    {
                                      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                                      result = r_step5f(a1);
                                      if ((result & 0x80000000) == 0)
                                      {
                                        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                                        result = r_step5g(a1);
                                        if ((result & 0x80000000) == 0)
                                        {
                                          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                                          result = r_step5h(a1);
                                          if ((result & 0x80000000) == 0)
                                          {
                                            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                                            result = r_step5j(a1);
                                            if ((result & 0x80000000) == 0)
                                            {
                                              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                                              result = r_step5i(a1);
                                              if ((result & 0x80000000) == 0)
                                              {
                                                *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                                                result = r_step5k(a1);
                                                if ((result & 0x80000000) == 0)
                                                {
                                                  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                                                  result = r_step5l(a1);
                                                  if ((result & 0x80000000) == 0)
                                                  {
                                                    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                                                    result = r_step5m(a1);
                                                    if ((result & 0x80000000) == 0)
                                                    {
                                                      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                                                      result = r_step6(a1);
                                                      if ((result & 0x80000000) == 0)
                                                      {
                                                        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v14;
                                                        result = r_step7(a1);
                                                        if ((result & 0x80000000) == 0)
                                                        {
                                                          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
                                                          return 1;
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t r_steps4(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  result = find_among_b(a1, (uint64_t)&a_11, 7);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      result = 0;
      **(_BYTE **)(a1 + 48) = 0;
      v3 = *(int *)(a1 + 8);
      *(_DWORD *)(a1 + 20) = v3;
      *(_DWORD *)(a1 + 24) = v3;
      if ((int)v3 - 3 > *(_DWORD *)(a1 + 16))
      {
        v4 = *(_BYTE *)(v3 + *(_QWORD *)a1 - 1);
        if ((v4 & 0xE0) != 0xA0 || ((0x80220000 >> v4) & 1) == 0)
          return 0;
        result = find_among_b(a1, (uint64_t)&a_10, 19);
        if (!(_DWORD)result)
          return result;
        if (*(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
        {
          LODWORD(result) = slice_from_s(a1, 2, &s_42);
          if ((int)result >= 0)
            return 1;
          else
            return result;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t r_steps5(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v8;
  uint64_t v9;

  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  if (!find_among_b(a1, (uint64_t)&a_14, 11))
    return 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
  v2 = slice_del(a1);
  if ((v2 & 0x80000000) != 0)
    return v2;
  **(_BYTE **)(a1 + 48) = 0;
  v3 = *(_DWORD *)(a1 + 12);
  v4 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v4;
  *(_DWORD *)(a1 + 24) = v4;
  if ((int)v4 - 3 > *(_DWORD *)(a1 + 16))
  {
    v5 = *(unsigned __int8 *)(v4 + *(_QWORD *)a1 - 1);
    if ((v5 == 191 || v5 == 181)
      && find_among_b(a1, (uint64_t)&a_12, 7)
      && *(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
    {
      v9 = slice_from_s(a1, 2, &s_43);
      if ((v9 & 0x80000000) != 0)
        return v9;
      return 1;
    }
  }
  v6 = *(_DWORD *)(a1 + 12) + v4 - v3;
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 20) = v6;
  *(_DWORD *)(a1 + 24) = v6;
  if (!find_among_b(a1, (uint64_t)&a_13, 33) || *(_DWORD *)(a1 + 8) > *(_DWORD *)(a1 + 16))
    return 0;
  v8 = slice_from_s(a1, 6, &s_44);
  if (v8 >= 0)
    v2 = v2;
  else
    v2 = v8;
  if ((v8 & 0x80000000) == 0)
    return 1;
  return v2;
}

uint64_t r_steps6(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int among_b;
  uint64_t v10;
  int v11;
  void *v12;
  uint64_t v13;
  int v14;

  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  result = find_among_b(a1, (uint64_t)&a_18, 6);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      **(_BYTE **)(a1 + 48) = 0;
      v4 = *(int *)(a1 + 8);
      v3 = *(int *)(a1 + 12);
      *(_DWORD *)(a1 + 20) = v4;
      *(_DWORD *)(a1 + 24) = v4;
      v5 = *(_DWORD *)(a1 + 16);
      if ((int)v4 - 3 > v5
        && *(unsigned __int8 *)(v4 + *(_QWORD *)a1 - 1) == 181
        && (v6 = find_among_b(a1, (uint64_t)&a_15, 5), v5 = *(_DWORD *)(a1 + 16), v6)
        && *(_DWORD *)(a1 + 8) <= v5)
      {
        v12 = &s_45;
LABEL_19:
        v13 = a1;
        v14 = 6;
      }
      else
      {
        v7 = v3 - v4;
        v8 = *(int *)(a1 + 12) - v7;
        *(_DWORD *)(a1 + 8) = v8;
        *(_DWORD *)(a1 + 20) = v8;
        *(_DWORD *)(a1 + 24) = v8;
        if ((int)v8 - 7 > v5
          && *(unsigned __int8 *)(v8 + *(_QWORD *)a1 - 1) == 181
          && (among_b = find_among_b(a1, (uint64_t)&a_16, 2), v5 = *(_DWORD *)(a1 + 16), among_b)
          && *(_DWORD *)(a1 + 8) <= v5)
        {
          v12 = &s_46;
          v13 = a1;
          v14 = 2;
        }
        else
        {
          v10 = *(int *)(a1 + 12) - (uint64_t)(int)v7;
          *(_DWORD *)(a1 + 8) = v10;
          *(_DWORD *)(a1 + 24) = v10;
          if ((int)v10 - 9 <= v5)
            return 0;
          v11 = *(unsigned __int8 *)(v10 + *(_QWORD *)a1 - 1);
          if (v11 != 189 && v11 != 186)
            return 0;
          result = find_among_b(a1, (uint64_t)&a_17, 10);
          if (!(_DWORD)result)
            return result;
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
          switch((int)result)
          {
            case 1:
              v12 = &s_47;
              goto LABEL_29;
            case 2:
              v12 = &s_48;
              v13 = a1;
              v14 = 8;
              break;
            case 3:
              v12 = &s_49;
              goto LABEL_31;
            case 4:
              v12 = &s_50;
              goto LABEL_19;
            case 5:
              v12 = &s_51;
              goto LABEL_29;
            case 6:
              v12 = &s_52;
              goto LABEL_31;
            case 7:
              v12 = &s_53;
              goto LABEL_19;
            case 8:
              v12 = &s_54;
              v13 = a1;
              v14 = 16;
              break;
            case 9:
              v12 = &s_55;
LABEL_29:
              v13 = a1;
              v14 = 12;
              break;
            case 10:
              v12 = &s_56;
LABEL_31:
              v13 = a1;
              v14 = 10;
              break;
            default:
              return 1;
          }
        }
      }
      result = slice_from_s(v13, v14, v12);
      if ((result & 0x80000000) == 0)
        return 1;
    }
  }
  return result;
}

uint64_t r_steps7(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 9 <= *(_DWORD *)(a1 + 16) || (*(unsigned __int8 *)(v1 + *(_QWORD *)a1 - 1) | 8) != 0xB9)
    return 0;
  result = find_among_b(a1, (uint64_t)&a_20, 4);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      result = 0;
      **(_BYTE **)(a1 + 48) = 0;
      v4 = *(int *)(a1 + 8);
      *(_DWORD *)(a1 + 20) = v4;
      *(_DWORD *)(a1 + 24) = v4;
      v5 = v4 - 1;
      if ((int)v5 > *(_DWORD *)(a1 + 16))
      {
        if ((*(unsigned __int8 *)(*(_QWORD *)a1 + v5) | 4) != 0x87)
          return 0;
        result = find_among_b(a1, (uint64_t)&a_19, 2);
        if (!(_DWORD)result)
          return result;
        if (*(_DWORD *)(a1 + 8) > *(_DWORD *)(a1 + 16))
          return 0;
        LODWORD(result) = slice_from_s(a1, 8, &s_57);
        if ((int)result >= 0)
          return 1;
        else
          return result;
      }
    }
  }
  return result;
}

uint64_t r_steps8(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  void *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  if (!find_among_b(a1, (uint64_t)&a_23, 8))
    return 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
  v2 = slice_del(a1);
  if ((v2 & 0x80000000) != 0)
    return v2;
  **(_BYTE **)(a1 + 48) = 0;
  v4 = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 20) = v4;
  *(_DWORD *)(a1 + 24) = v4;
  if (find_among_b(a1, (uint64_t)&a_21, 33) && *(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
  {
    v9 = &s_58;
    v10 = a1;
    v11 = 4;
    goto LABEL_16;
  }
  v5 = v3 - v4;
  v6 = *(_DWORD *)(a1 + 12) - v5;
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 20) = v6;
  *(_DWORD *)(a1 + 24) = v6;
  if (find_among_b(a1, (uint64_t)&a_22, 15) && *(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
  {
    v9 = &s_59;
    v10 = a1;
    v11 = 6;
LABEL_16:
    v12 = slice_from_s(v10, v11, v9);
    if ((v12 & 0x80000000) != 0)
      return v12;
    return 1;
  }
  v7 = *(_DWORD *)(a1 + 12) - v5;
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 20) = v7;
  *(_DWORD *)(a1 + 24) = v7;
  if (!eq_s_b(a1, 6, &s_60))
    return 0;
  v8 = slice_from_s(a1, 6, &s_61);
  if (v8 >= 0)
    v2 = v2;
  else
    v2 = v8;
  if ((v8 & 0x80000000) == 0)
    return 1;
  return v2;
}

uint64_t r_steps9(uint64_t a1)
{
  uint64_t v1;
  char v3;
  uint64_t v4;
  int v5;
  int v6;
  int among_b;
  int v8;
  int v9;
  uint64_t v10;
  void *v11;
  int v13;

  v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 7 <= *(_DWORD *)(a1 + 16))
    return 0;
  v3 = *(_BYTE *)(v1 + *(_QWORD *)a1 - 1);
  if ((v3 & 0xE0) != 0xA0 || ((0xA0020000 >> v3) & 1) == 0 || !find_among_b(a1, (uint64_t)&a_26, 3))
    return 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
  v4 = slice_del(a1);
  if ((v4 & 0x80000000) != 0)
    return v4;
  **(_BYTE **)(a1 + 48) = 0;
  v6 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 20) = v6;
  *(_DWORD *)(a1 + 24) = v6;
  among_b = find_among_b(a1, (uint64_t)&a_24, 4);
  v8 = *(_DWORD *)(a1 + 16);
  if (among_b && *(_DWORD *)(a1 + 8) <= v8)
  {
    v11 = &s_62;
    goto LABEL_15;
  }
  v9 = *(_DWORD *)(a1 + 12) + v6 - v5;
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 20) = v9;
  *(_DWORD *)(a1 + 24) = v9;
  v10 = v9 - 1;
  if ((int)v10 <= v8
    || (*(unsigned __int8 *)(*(_QWORD *)a1 + v10) | 8) != 0xBD
    || !find_among_b(a1, (uint64_t)&a_25, 2))
  {
    return 0;
  }
  v11 = &s_63;
LABEL_15:
  v13 = slice_from_s(a1, 4, v11);
  if (v13 >= 0)
    v4 = v4;
  else
    v4 = v13;
  if ((v13 & 0x80000000) == 0)
    return 1;
  return v4;
}

uint64_t r_steps10(uint64_t a1)
{
  uint64_t result;
  int v3;

  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  result = find_among_b(a1, (uint64_t)&a_28, 4);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      **(_BYTE **)(a1 + 48) = 0;
      v3 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 20) = v3;
      *(_DWORD *)(a1 + 24) = v3;
      result = find_among_b(a1, (uint64_t)&a_27, 7);
      if ((_DWORD)result)
      {
        if (*(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
        {
          LODWORD(result) = slice_from_s(a1, 6, &s_64);
          if ((int)result >= 0)
            return 1;
          else
            return result;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t r_step2a(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t result;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 7 <= *(_DWORD *)(a1 + 16))
    return 0;
  v3 = *(unsigned __int8 *)(v1 + *(_QWORD *)a1 - 1);
  if (v3 != 189 && v3 != 131)
    return 0;
  result = find_among_b(a1, (uint64_t)&a_29, 2);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      v6 = *(_DWORD *)(a1 + 8);
      v5 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 24) = v6;
      if (find_among_b(a1, (uint64_t)&a_30, 10))
      {
        result = 0;
        *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
      }
      else
      {
        v7 = v6 - v5;
        v8 = *(_DWORD *)(a1 + 12);
        v9 = v8 + v6 - v5;
        *(_DWORD *)(a1 + 8) = v9;
        LODWORD(result) = insert_s(a1, v8 + v7, v8 + v7, 4, &s_65);
        *(_DWORD *)(a1 + 8) = v9;
        if ((int)result >= 0)
          return 1;
        else
          return result;
      }
    }
  }
  return result;
}

uint64_t r_step2b(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t result;
  uint64_t v5;
  int v6;

  v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 7 <= *(_DWORD *)(a1 + 16))
    return 0;
  v3 = *(unsigned __int8 *)(v1 + *(_QWORD *)a1 - 1);
  if (v3 != 189 && v3 != 131)
    return 0;
  result = find_among_b(a1, (uint64_t)&a_31, 2);
  if (!(_DWORD)result)
    return result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
  result = slice_del(a1);
  if ((result & 0x80000000) != 0)
    return result;
  v5 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v5;
  *(_DWORD *)(a1 + 24) = v5;
  if ((int)v5 - 3 <= *(_DWORD *)(a1 + 16))
    return 0;
  v6 = *(unsigned __int8 *)(v5 + *(_QWORD *)a1 - 1);
  if (v6 != 187 && v6 != 128)
    return 0;
  result = find_among_b(a1, (uint64_t)&a_32, 8);
  if ((_DWORD)result)
  {
    LODWORD(result) = slice_from_s(a1, 4, &s_66);
    if ((int)result >= 0)
      return 1;
    else
      return result;
  }
  return result;
}

uint64_t r_step2c(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t result;
  int v5;

  v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 9 <= *(_DWORD *)(a1 + 16))
    return 0;
  v3 = *(unsigned __int8 *)(v1 + *(_QWORD *)a1 - 1);
  if (v3 != 189 && v3 != 131)
    return 0;
  result = find_among_b(a1, (uint64_t)&a_33, 2);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      v5 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 20) = v5;
      *(_DWORD *)(a1 + 24) = v5;
      result = find_among_b(a1, (uint64_t)&a_34, 15);
      if ((_DWORD)result)
      {
        LODWORD(result) = slice_from_s(a1, 6, &s_67);
        if ((int)result >= 0)
          return 1;
        else
          return result;
      }
    }
  }
  return result;
}

uint64_t r_step2d(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t result;
  int v5;

  v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 5 <= *(_DWORD *)(a1 + 16))
    return 0;
  v3 = *(unsigned __int8 *)(v1 + *(_QWORD *)a1 - 1);
  if (v3 != 189 && v3 != 131)
    return 0;
  result = find_among_b(a1, (uint64_t)&a_35, 2);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      **(_BYTE **)(a1 + 48) = 0;
      v5 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 20) = v5;
      *(_DWORD *)(a1 + 24) = v5;
      result = find_among_b(a1, (uint64_t)&a_36, 8);
      if ((_DWORD)result)
      {
        if (*(_DWORD *)(a1 + 8) > *(_DWORD *)(a1 + 16))
          return 0;
        LODWORD(result) = slice_from_s(a1, 2, &s_68);
        if ((int)result >= 0)
          return 1;
        else
          return result;
      }
    }
  }
  return result;
}

uint64_t r_step3(uint64_t a1)
{
  uint64_t result;
  int v3;
  int v4;

  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  result = find_among_b(a1, (uint64_t)&a_37, 3);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      **(_BYTE **)(a1 + 48) = 0;
      v3 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 20) = v3;
      *(_DWORD *)(a1 + 24) = v3;
      v4 = in_grouping_b_U(a1, (uint64_t)&g_v, 945, 969, 0);
      result = 0;
      if (!v4)
      {
        LODWORD(result) = slice_from_s(a1, 2, &s_69);
        if ((int)result >= 0)
          return 1;
        else
          return result;
      }
    }
  }
  return result;
}

uint64_t r_step4(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v8;

  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  if (!find_among_b(a1, (uint64_t)&a_38, 4))
    return 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
  v2 = slice_del(a1);
  if ((v2 & 0x80000000) == 0)
  {
    **(_BYTE **)(a1 + 48) = 0;
    v4 = *(_DWORD *)(a1 + 8);
    v3 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 20) = v4;
    *(_DWORD *)(a1 + 24) = v4;
    if (in_grouping_b_U(a1, (uint64_t)&g_v, 945, 969, 0))
    {
      v5 = *(_DWORD *)(a1 + 12) + v4 - v3;
      *(_DWORD *)(a1 + 8) = v5;
      *(_DWORD *)(a1 + 24) = v5;
    }
    else
    {
      v6 = slice_from_s(a1, 4, &s_70);
      if (v6 >= 0)
        v2 = v2;
      else
        v2 = v6;
      if (v6 < 0)
        return v2;
      v5 = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 20) = v5;
    if (!find_among_b(a1, (uint64_t)&a_39, 36) || *(_DWORD *)(a1 + 8) > *(_DWORD *)(a1 + 16))
      return 0;
    v8 = slice_from_s(a1, 4, &s_71);
    if (v8 >= 0)
      return 1;
    else
      return v8;
  }
  return v2;
}

uint64_t r_step5a(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t result;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v3 = *(_DWORD *)(a1 + 8);
  v2 = *(_DWORD *)(a1 + 12);
  if (!eq_s_b(a1, 10, &s_72)
    || *(_DWORD *)(a1 + 8) > *(_DWORD *)(a1 + 16)
    || (result = slice_from_s(a1, 8, &s_73), (result & 0x80000000) == 0))
  {
    v5 = v3 - v2;
    v6 = *(_DWORD *)(a1 + 16);
    v7 = *(_DWORD *)(a1 + 12) + v5;
    *(_DWORD *)(a1 + 8) = v7;
    *(_DWORD *)(a1 + 24) = v7;
    if (v7 - 9 > v6
      && *(unsigned __int8 *)(*(_QWORD *)a1 + v7 - 1) == 181
      && find_among_b(a1, (uint64_t)&a_40, 5))
    {
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
      result = slice_del(a1);
      if ((result & 0x80000000) != 0)
        return result;
      **(_BYTE **)(a1 + 48) = 0;
    }
    v8 = *(_DWORD *)(a1 + 12) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    *(_DWORD *)(a1 + 24) = v8;
    result = eq_s_b(a1, 6, &s_74);
    if ((_DWORD)result)
    {
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
      result = slice_del(a1);
      if ((result & 0x80000000) == 0)
      {
        **(_BYTE **)(a1 + 48) = 0;
        v9 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 20) = v9;
        *(_DWORD *)(a1 + 24) = v9;
        result = find_among_b(a1, (uint64_t)&a_41, 12);
        if ((_DWORD)result)
        {
          if (*(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
          {
            LODWORD(result) = slice_from_s(a1, 4, &s_75);
            if ((int)result >= 0)
              return 1;
            else
              return result;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t r_step5b(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;

  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v3;
  if ((int)v3 - 9 <= *(_DWORD *)(a1 + 16)
    || *(unsigned __int8 *)(v3 + *(_QWORD *)a1 - 1) != 181
    || !find_among_b(a1, (uint64_t)&a_43, 11)
    || (*(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8), result = slice_del(a1), (result & 0x80000000) == 0)
    && ((**(_BYTE **)(a1 + 48) = 0,
         v5 = *(int *)(a1 + 8),
         *(_DWORD *)(a1 + 20) = v5,
         *(_DWORD *)(a1 + 24) = v5,
         (int)v5 - 3 <= *(_DWORD *)(a1 + 16))
     || (*(unsigned __int8 *)(v5 + *(_QWORD *)a1 - 1) | 2) != 0x83
     || !find_among_b(a1, (uint64_t)&a_42, 2)
     || *(_DWORD *)(a1 + 8) > *(_DWORD *)(a1 + 16)
     || (result = slice_from_s(a1, 8, &s_76), (result & 0x80000000) == 0)))
  {
    v6 = *(_DWORD *)(a1 + 12) + v3 - v2;
    *(_DWORD *)(a1 + 8) = v6;
    *(_DWORD *)(a1 + 24) = v6;
    result = eq_s_b(a1, 6, &s_77);
    if ((_DWORD)result)
    {
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
      result = slice_del(a1);
      if ((result & 0x80000000) == 0)
      {
        **(_BYTE **)(a1 + 48) = 0;
        v8 = *(_DWORD *)(a1 + 8);
        v7 = *(_DWORD *)(a1 + 12);
        *(_DWORD *)(a1 + 20) = v8;
        *(_DWORD *)(a1 + 24) = v8;
        if (in_grouping_b_U(a1, (uint64_t)&g_v2, 945, 969, 0))
        {
          v9 = *(_DWORD *)(a1 + 12) + v8 - v7;
          *(_DWORD *)(a1 + 8) = v9;
          *(_DWORD *)(a1 + 24) = v9;
        }
        else
        {
          result = slice_from_s(a1, 4, &s_78);
          if ((result & 0x80000000) != 0)
            return result;
          v9 = *(_DWORD *)(a1 + 8);
        }
        *(_DWORD *)(a1 + 20) = v9;
        result = find_among_b(a1, (uint64_t)&a_44, 95);
        if ((_DWORD)result)
        {
          if (*(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
          {
            LODWORD(result) = slice_from_s(a1, 4, &s_79);
            if ((int)result >= 0)
              return 1;
            else
              return result;
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t r_step5c(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  void *v10;
  int v11;

  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v3;
  if ((int)v3 - 9 > *(_DWORD *)(a1 + 16)
    && *(unsigned __int8 *)(v3 + *(_QWORD *)a1 - 1) == 181
    && find_among_b(a1, (uint64_t)&a_45, 1))
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    result = slice_del(a1);
    if ((result & 0x80000000) != 0)
      return result;
    **(_BYTE **)(a1 + 48) = 0;
  }
  v5 = *(_DWORD *)(a1 + 12) + v3 - v2;
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 24) = v5;
  result = eq_s_b(a1, 6, &s_80);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      **(_BYTE **)(a1 + 48) = 0;
      v7 = *(_DWORD *)(a1 + 8);
      v6 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 20) = v7;
      *(_DWORD *)(a1 + 24) = v7;
      if (in_grouping_b_U(a1, (uint64_t)&g_v2, 945, 969, 0))
      {
        v8 = v6 - v7;
        v9 = *(_DWORD *)(a1 + 12) - v8;
        *(_DWORD *)(a1 + 8) = v9;
        *(_DWORD *)(a1 + 20) = v9;
        *(_DWORD *)(a1 + 24) = v9;
        if (!find_among_b(a1, (uint64_t)&a_46, 31))
        {
          v11 = *(_DWORD *)(a1 + 12) - v8;
          *(_DWORD *)(a1 + 8) = v11;
          *(_DWORD *)(a1 + 24) = v11;
LABEL_15:
          *(_DWORD *)(a1 + 20) = v11;
          result = find_among_b(a1, (uint64_t)&a_47, 25);
          if ((_DWORD)result)
          {
            if (*(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
            {
              LODWORD(result) = slice_from_s(a1, 4, &s_83);
              if ((int)result >= 0)
                return 1;
              else
                return result;
            }
            else
            {
              return 0;
            }
          }
          return result;
        }
        v10 = &s_82;
      }
      else
      {
        v10 = &s_81;
      }
      result = slice_from_s(a1, 4, v10);
      if ((result & 0x80000000) != 0)
        return result;
      v11 = *(_DWORD *)(a1 + 8);
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t r_step5d(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  void *v7;
  int v9;

  v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 9 <= *(_DWORD *)(a1 + 16)
    || *(unsigned __int8 *)(v1 + *(_QWORD *)a1 - 1) != 131
    || !find_among_b(a1, (uint64_t)&a_48, 2))
  {
    return 0;
  }
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
  v3 = slice_del(a1);
  if ((v3 & 0x80000000) != 0)
    return v3;
  **(_BYTE **)(a1 + 48) = 0;
  v5 = *(_DWORD *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 20) = v5;
  *(_DWORD *)(a1 + 24) = v5;
  if (eq_s_b(a1, 6, &s_84) && *(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
  {
    v7 = &s_85;
    goto LABEL_12;
  }
  v6 = *(_DWORD *)(a1 + 12) + v5 - v4;
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 20) = v6;
  *(_DWORD *)(a1 + 24) = v6;
  if (!eq_s_b(a1, 6, &s_86))
    return 0;
  v7 = &s_87;
LABEL_12:
  v9 = slice_from_s(a1, 6, v7);
  if (v9 >= 0)
    v3 = v3;
  else
    v3 = v9;
  if ((v9 & 0x80000000) == 0)
    return 1;
  return v3;
}

uint64_t r_step5e(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  int v4;

  v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 11 <= *(_DWORD *)(a1 + 16) || *(unsigned __int8 *)(v1 + *(_QWORD *)a1 - 1) != 181)
    return 0;
  result = find_among_b(a1, (uint64_t)&a_49, 2);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      **(_BYTE **)(a1 + 48) = 0;
      v4 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 20) = v4;
      *(_DWORD *)(a1 + 24) = v4;
      result = eq_s_b(a1, 4, &s_88);
      if ((_DWORD)result)
      {
        if (*(_DWORD *)(a1 + 8) > *(_DWORD *)(a1 + 16))
          return 0;
        LODWORD(result) = slice_from_s(a1, 10, &s_89);
        if ((int)result >= 0)
          return 1;
        else
          return result;
      }
    }
  }
  return result;
}

uint64_t r_step5f(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;

  v3 = *(_DWORD *)(a1 + 8);
  v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 24) = v3;
  if (!eq_s_b(a1, 10, &s_90))
    goto LABEL_9;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
  result = slice_del(a1);
  if ((result & 0x80000000) == 0)
  {
    if ((**(_BYTE **)(a1 + 48) = 0,
          v5 = *(int *)(a1 + 8),
          *(_DWORD *)(a1 + 20) = v5,
          *(_DWORD *)(a1 + 24) = v5,
          v6 = v5 - 1,
          (int)v6 <= *(_DWORD *)(a1 + 16))
      || (v7 = *(unsigned __int8 *)(*(_QWORD *)a1 + v6), v7 != 134) && v7 != 128
      || !find_among_b(a1, (uint64_t)&a_50, 6)
      || *(_DWORD *)(a1 + 8) > *(_DWORD *)(a1 + 16)
      || (result = slice_from_s(a1, 8, &s_91), (result & 0x80000000) == 0))
    {
LABEL_9:
      v8 = *(_DWORD *)(a1 + 12) + v3 - v2;
      *(_DWORD *)(a1 + 8) = v8;
      *(_DWORD *)(a1 + 24) = v8;
      result = eq_s_b(a1, 8, &s_92);
      if ((_DWORD)result)
      {
        *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
        result = slice_del(a1);
        if ((result & 0x80000000) == 0)
        {
          **(_BYTE **)(a1 + 48) = 0;
          v9 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 20) = v9;
          *(_DWORD *)(a1 + 24) = v9;
          result = find_among_b(a1, (uint64_t)&a_51, 9);
          if ((_DWORD)result)
          {
            if (*(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
            {
              LODWORD(result) = slice_from_s(a1, 8, &s_93);
              if ((int)result >= 0)
                return 1;
              else
                return result;
            }
            else
            {
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t r_step5g(uint64_t a1)
{
  uint64_t v1;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  void *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 24) = v4;
  if (find_among_b(a1, (uint64_t)&a_52, 3))
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    v1 = slice_del(a1);
    if ((v1 & 0x80000000) != 0)
      return v1;
    **(_BYTE **)(a1 + 48) = 0;
  }
  v5 = *(_DWORD *)(a1 + 12) + v4 - v3;
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 24) = v5;
  if (!find_among_b(a1, (uint64_t)&a_55, 3))
    return 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
  v6 = slice_del(a1);
  if ((v6 & 0x80000000) != 0)
    return v6;
  **(_BYTE **)(a1 + 48) = 0;
  v8 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 24) = v8;
  if (!find_among_b(a1, (uint64_t)&a_53, 6))
  {
    v11 = *(_DWORD *)(a1 + 16);
    v12 = *(_DWORD *)(a1 + 12) + v8 - v7;
    *(_DWORD *)(a1 + 8) = v12;
    *(_DWORD *)(a1 + 20) = v12;
    *(_DWORD *)(a1 + 24) = v12;
    v13 = v12 - 1;
    if ((int)v13 > v11
      && *(unsigned __int8 *)(*(_QWORD *)a1 + v13) == 184
      && find_among_b(a1, (uint64_t)&a_54, 5)
      && *(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
    {
      v9 = &s_95;
      goto LABEL_8;
    }
    return 0;
  }
  v9 = &s_94;
LABEL_8:
  v10 = slice_from_s(a1, 4, v9);
  if (v10 >= 0)
    v1 = v1;
  else
    v1 = v10;
  if ((v10 & 0x80000000) == 0)
    return 1;
  return v1;
}

uint64_t r_step5h(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  void *v5;
  int v6;
  int v7;

  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  if (!find_among_b(a1, (uint64_t)&a_58, 3))
    return 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
  v2 = slice_del(a1);
  if ((v2 & 0x80000000) != 0)
    return v2;
  **(_BYTE **)(a1 + 48) = 0;
  v4 = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 20) = v4;
  *(_DWORD *)(a1 + 24) = v4;
  if (!find_among_b(a1, (uint64_t)&a_56, 12))
  {
    v7 = *(_DWORD *)(a1 + 12) + v4 - v3;
    *(_DWORD *)(a1 + 8) = v7;
    *(_DWORD *)(a1 + 20) = v7;
    *(_DWORD *)(a1 + 24) = v7;
    if (find_among_b(a1, (uint64_t)&a_57, 25) && *(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
    {
      v5 = &s_97;
      goto LABEL_5;
    }
    return 0;
  }
  v5 = &s_96;
LABEL_5:
  v6 = slice_from_s(a1, 6, v5);
  if (v6 >= 0)
    v2 = v2;
  else
    v2 = v6;
  if ((v6 & 0x80000000) == 0)
    return 1;
  return v2;
}

uint64_t r_step5j(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  result = find_among_b(a1, (uint64_t)&a_63, 3);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      result = 0;
      **(_BYTE **)(a1 + 48) = 0;
      v3 = *(int *)(a1 + 8);
      *(_DWORD *)(a1 + 20) = v3;
      *(_DWORD *)(a1 + 24) = v3;
      v4 = v3 - 1;
      if ((int)v4 > *(_DWORD *)(a1 + 16))
      {
        if (*(unsigned __int8 *)(*(_QWORD *)a1 + v4) != 189)
          return 0;
        result = find_among_b(a1, (uint64_t)&a_64, 6);
        if (!(_DWORD)result)
          return result;
        if (*(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
        {
          LODWORD(result) = slice_from_s(a1, 4, &s_102);
          if ((int)result >= 0)
            return 1;
          else
            return result;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t r_step5i(uint64_t a1)
{
  uint64_t result;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  void *v8;
  int v9;

  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  result = find_among_b(a1, (uint64_t)&a_62, 3);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      **(_BYTE **)(a1 + 48) = 0;
      v4 = *(_DWORD *)(a1 + 8);
      v3 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 20) = v4;
      *(_DWORD *)(a1 + 24) = v4;
      if (eq_s_b(a1, 8, &s_98))
      {
        LODWORD(result) = slice_from_s(a1, 4, &s_99);
        if ((int)result >= 0)
          return 1;
        else
          return result;
      }
      else
      {
        v5 = v4 - v3;
        v6 = *(_DWORD *)(a1 + 16);
        v7 = *(_DWORD *)(a1 + 12) + v5;
        *(_DWORD *)(a1 + 8) = v7;
        *(_DWORD *)(a1 + 24) = v7;
        if (v7 - 5 > v6 && (*(_BYTE *)(*(_QWORD *)a1 + v7 - 1) & 0xFE) == 0x86)
        {
          if (find_among_b(a1, (uint64_t)&a_59, 2))
          {
            result = 0;
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
            return result;
          }
          v7 = *(_DWORD *)(a1 + 12) + v5;
        }
        *(_DWORD *)(a1 + 8) = v7;
        *(_DWORD *)(a1 + 20) = v7;
        *(_DWORD *)(a1 + 24) = v7;
        if (find_among_b(a1, (uint64_t)&a_60, 10))
        {
          v8 = &s_100;
        }
        else
        {
          v9 = *(_DWORD *)(a1 + 12) + v5;
          *(_DWORD *)(a1 + 8) = v9;
          *(_DWORD *)(a1 + 20) = v9;
          *(_DWORD *)(a1 + 24) = v9;
          result = find_among_b(a1, (uint64_t)&a_61, 44);
          if (!(_DWORD)result)
            return result;
          if (*(_DWORD *)(a1 + 8) > *(_DWORD *)(a1 + 16))
            return 0;
          v8 = &s_101;
        }
        result = slice_from_s(a1, 4, v8);
        if ((result & 0x80000000) == 0)
          return 1;
      }
    }
  }
  return result;
}

uint64_t r_step5k(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  int v4;

  v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 7 <= *(_DWORD *)(a1 + 16) || *(unsigned __int8 *)(v1 + *(_QWORD *)a1 - 1) != 181)
    return 0;
  result = find_among_b(a1, (uint64_t)&a_65, 1);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      **(_BYTE **)(a1 + 48) = 0;
      v4 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 20) = v4;
      *(_DWORD *)(a1 + 24) = v4;
      result = find_among_b(a1, (uint64_t)&a_66, 10);
      if ((_DWORD)result)
      {
        if (*(_DWORD *)(a1 + 8) > *(_DWORD *)(a1 + 16))
          return 0;
        LODWORD(result) = slice_from_s(a1, 6, &s_103);
        if ((int)result >= 0)
          return 1;
        else
          return result;
      }
    }
  }
  return result;
}

uint64_t r_step5l(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  int v4;

  v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 7 <= *(_DWORD *)(a1 + 16) || *(unsigned __int8 *)(v1 + *(_QWORD *)a1 - 1) != 181)
    return 0;
  result = find_among_b(a1, (uint64_t)&a_67, 3);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      **(_BYTE **)(a1 + 48) = 0;
      v4 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 20) = v4;
      *(_DWORD *)(a1 + 24) = v4;
      result = find_among_b(a1, (uint64_t)&a_68, 6);
      if ((_DWORD)result)
      {
        if (*(_DWORD *)(a1 + 8) > *(_DWORD *)(a1 + 16))
          return 0;
        LODWORD(result) = slice_from_s(a1, 6, &s_104);
        if ((int)result >= 0)
          return 1;
        else
          return result;
      }
    }
  }
  return result;
}

uint64_t r_step5m(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  int v4;

  v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 7 <= *(_DWORD *)(a1 + 16) || *(unsigned __int8 *)(v1 + *(_QWORD *)a1 - 1) != 181)
    return 0;
  result = find_among_b(a1, (uint64_t)&a_69, 3);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      **(_BYTE **)(a1 + 48) = 0;
      v4 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 20) = v4;
      *(_DWORD *)(a1 + 24) = v4;
      result = find_among_b(a1, (uint64_t)&a_70, 7);
      if ((_DWORD)result)
      {
        if (*(_DWORD *)(a1 + 8) > *(_DWORD *)(a1 + 16))
          return 0;
        LODWORD(result) = slice_from_s(a1, 6, &s_105);
        if ((int)result >= 0)
          return 1;
        else
          return result;
      }
    }
  }
  return result;
}

uint64_t r_step6(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t result;
  int v5;

  v3 = *(_DWORD *)(a1 + 8);
  v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 24) = v3;
  if (!find_among_b(a1, (uint64_t)&a_71, 3)
    || (*(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8), result = slice_from_s(a1, 4, &s_106), (result & 0x80000000) == 0))
  {
    v5 = v3 - v2 + *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v5;
    if (**(_BYTE **)(a1 + 48))
    {
      *(_DWORD *)(a1 + 24) = v5;
      result = find_among_b(a1, (uint64_t)&a_72, 84);
      if ((_DWORD)result)
      {
        *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
        LODWORD(result) = slice_del(a1);
        if ((int)result >= 0)
          return 1;
        else
          return result;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t r_step7(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t result;

  v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 7 <= *(_DWORD *)(a1 + 16))
    return 0;
  v3 = *(unsigned __int8 *)(v1 + *(_QWORD *)a1 - 1);
  if (v3 != 132 && v3 != 129)
    return 0;
  result = find_among_b(a1, (uint64_t)&a_73, 8);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    LODWORD(result) = slice_del(a1);
    if ((int)result >= 0)
      return 1;
    else
      return result;
  }
  return result;
}

_QWORD *greek_UTF_8_create_env()
{
  return SN_create_env(0, 0, 1);
}

void greek_UTF_8_close_env(uint64_t a1)
{
  SN_close_env(a1, 0);
}

uint64_t spanish_UTF_8_stem(uint64_t a1)
{
  _DWORD *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int among_b;
  int v20;
  void *v21;
  uint64_t v22;
  int v23;
  uint64_t result;
  int v25;
  uint64_t v26;
  char v27;
  int v28;
  int v29;
  void *v30;
  void *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  int v72;
  int among;
  uint64_t v74;
  void *v75;
  int v76;
  uint64_t v77;

  v2 = *(_DWORD **)(a1 + 40);
  *v2 = *(_DWORD *)(a1 + 12);
  v2[1] = *(_DWORD *)(a1 + 12);
  v2[2] = *(_DWORD *)(a1 + 12);
  v3 = *(_DWORD *)(a1 + 8);
  if (!in_grouping_U(a1, (uint64_t)&g_v_0, 97, 252, 0))
  {
    v4 = *(_DWORD *)(a1 + 8);
    if (!out_grouping_U(a1, (uint64_t)&g_v_0, 97, 252, 0))
    {
      v7 = out_grouping_U(a1, (uint64_t)&g_v_0, 97, 252, 1);
      if ((v7 & 0x80000000) == 0)
        goto LABEL_14;
    }
    *(_DWORD *)(a1 + 8) = v4;
    if (!in_grouping_U(a1, (uint64_t)&g_v_0, 97, 252, 0))
    {
      v7 = in_grouping_U(a1, (uint64_t)&g_v_0, 97, 252, 1);
      if ((v7 & 0x80000000) == 0)
        goto LABEL_14;
    }
  }
  *(_DWORD *)(a1 + 8) = v3;
  if (out_grouping_U(a1, (uint64_t)&g_v_0, 97, 252, 0))
    goto LABEL_16;
  v5 = *(_DWORD *)(a1 + 8);
  if (out_grouping_U(a1, (uint64_t)&g_v_0, 97, 252, 0)
    || (v7 = out_grouping_U(a1, (uint64_t)&g_v_0, 97, 252, 1), v7 < 0))
  {
    *(_DWORD *)(a1 + 8) = v5;
    if (in_grouping_U(a1, (uint64_t)&g_v_0, 97, 252, 0))
      goto LABEL_16;
    v6 = skip_utf8(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), 0, *(unsigned int *)(a1 + 12), 1);
    if (v6 < 0)
      goto LABEL_16;
  }
  else
  {
LABEL_14:
    v6 = *(_DWORD *)(a1 + 8) + v7;
  }
  **(_DWORD **)(a1 + 40) = v6;
LABEL_16:
  *(_DWORD *)(a1 + 8) = v3;
  v8 = out_grouping_U(a1, (uint64_t)&g_v_0, 97, 252, 1);
  if ((v8 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) += v8;
    v9 = in_grouping_U(a1, (uint64_t)&g_v_0, 97, 252, 1);
    if ((v9 & 0x80000000) == 0)
    {
      v10 = *(_DWORD *)(a1 + 8) + v9;
      *(_DWORD *)(a1 + 8) = v10;
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) = v10;
      v11 = out_grouping_U(a1, (uint64_t)&g_v_0, 97, 252, 1);
      if ((v11 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) += v11;
        v12 = in_grouping_U(a1, (uint64_t)&g_v_0, 97, 252, 1);
        if ((v12 & 0x80000000) == 0)
          *(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) = *(_DWORD *)(a1 + 8) + v12;
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v3;
  v13 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 24) = v13;
  v14 = v13 - 1;
  if ((int)v14 > v3)
  {
    v15 = *(_BYTE *)(*(_QWORD *)a1 + v14);
    if ((v15 & 0xE0) == 0x60 && ((0x88022u >> v15) & 1) != 0)
    {
      if (find_among_b(a1, (uint64_t)&a_1_0, 13))
      {
        v16 = *(int *)(a1 + 8);
        *(_DWORD *)(a1 + 20) = v16;
        v17 = v16 - 1;
        if ((int)v17 > *(_DWORD *)(a1 + 16))
        {
          v18 = *(unsigned __int8 *)(*(_QWORD *)a1 + v17);
          if (v18 == 114 || v18 == 111)
          {
            among_b = find_among_b(a1, (uint64_t)&a_2_0, 11);
            if (among_b)
            {
              v20 = *(_DWORD *)(a1 + 8);
              if (**(_DWORD **)(a1 + 40) <= v20)
              {
                switch(among_b)
                {
                  case 1:
                    *(_DWORD *)(a1 + 20) = v20;
                    v21 = &s_5_8;
                    v22 = a1;
                    v23 = 5;
                    goto LABEL_37;
                  case 2:
                    *(_DWORD *)(a1 + 20) = v20;
                    v21 = &s_6_7;
                    v22 = a1;
                    v23 = 4;
                    goto LABEL_37;
                  case 3:
                    *(_DWORD *)(a1 + 20) = v20;
                    v21 = &s_7_19;
                    goto LABEL_36;
                  case 4:
                    *(_DWORD *)(a1 + 20) = v20;
                    v21 = &s_8_13;
                    goto LABEL_36;
                  case 5:
                    *(_DWORD *)(a1 + 20) = v20;
                    v21 = &s_9_7;
LABEL_36:
                    v22 = a1;
                    v23 = 2;
LABEL_37:
                    result = slice_from_s(v22, v23, v21);
                    if ((result & 0x80000000) == 0)
                      break;
                    return result;
                  case 6:
                    goto LABEL_150;
                  case 7:
                    if (v20 <= *(_DWORD *)(a1 + 16))
                      break;
                    v77 = v20 - 1;
                    if (*(_BYTE *)(*(_QWORD *)a1 + v77) != 117)
                      break;
                    *(_DWORD *)(a1 + 8) = v77;
LABEL_150:
                    result = slice_del(a1);
                    if ((result & 0x80000000) != 0)
                      return result;
                    break;
                  default:
                    break;
                }
              }
            }
          }
        }
      }
    }
  }
  v25 = *(_DWORD *)(a1 + 16);
  v26 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v26;
  *(_DWORD *)(a1 + 24) = v26;
  if ((int)v26 - 2 > v25)
  {
    v27 = *(_BYTE *)(v26 + *(_QWORD *)a1 - 1);
    if ((v27 & 0xE0) == 0x60 && ((0xCC032u >> v27) & 1) != 0)
    {
      v28 = find_among_b(a1, (uint64_t)&a_6_0, 46);
      if (v28)
      {
        v29 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 20) = v29;
        switch(v28)
        {
          case 1:
            if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) <= v29)
              goto LABEL_106;
            break;
          case 2:
            if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v29)
              break;
            result = slice_del(a1);
            if ((result & 0x80000000) != 0)
              return result;
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
            v30 = &s_10_19;
            goto LABEL_144;
          case 3:
            if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v29)
              break;
            v31 = &s_11_7;
            v32 = a1;
            v33 = 3;
            goto LABEL_54;
          case 4:
            if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v29)
              break;
            v31 = &s_12_7;
            v32 = a1;
            v33 = 1;
            goto LABEL_54;
          case 5:
            if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v29)
              break;
            v31 = &s_13_33;
            v32 = a1;
            v33 = 4;
LABEL_54:
            result = slice_from_s(v32, v33, v31);
            if ((result & 0x80000000) != 0)
              return result;
            goto LABEL_109;
          case 6:
            if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) > v29)
              break;
            result = slice_del(a1);
            if ((result & 0x80000000) != 0)
              return result;
            v34 = *(int *)(a1 + 8);
            *(_DWORD *)(a1 + 24) = v34;
            v35 = v34 - 1;
            if ((int)v35 <= *(_DWORD *)(a1 + 16))
              goto LABEL_109;
            v36 = *(_BYTE *)(*(_QWORD *)a1 + v35);
            if ((v36 & 0xE0) != 0x60)
              goto LABEL_109;
            if (((0x480018u >> v36) & 1) == 0)
              goto LABEL_109;
            v37 = find_among_b(a1, (uint64_t)&a_3_0, 4);
            if (!v37)
              goto LABEL_109;
            v38 = *(_DWORD *)(a1 + 8);
            *(_DWORD *)(a1 + 20) = v38;
            if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v38)
              goto LABEL_109;
            v39 = v37;
            result = slice_del(a1);
            if ((result & 0x80000000) != 0)
              return result;
            if (v39 == 1)
            {
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
              v30 = &s_14_11;
LABEL_144:
              if (eq_s_b(a1, 2, v30))
                goto LABEL_145;
            }
            goto LABEL_109;
          case 7:
            if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v29)
              break;
            result = slice_del(a1);
            if ((result & 0x80000000) != 0)
              return result;
            v40 = *(int *)(a1 + 8);
            *(_DWORD *)(a1 + 24) = v40;
            if ((int)v40 - 3 <= *(_DWORD *)(a1 + 16) || *(_BYTE *)(v40 + *(_QWORD *)a1 - 1) != 101)
              goto LABEL_109;
            v41 = &a_4_0;
            goto LABEL_77;
          case 8:
            if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v29)
              break;
            result = slice_del(a1);
            if ((result & 0x80000000) != 0)
              return result;
            v42 = *(int *)(a1 + 8);
            *(_DWORD *)(a1 + 24) = v42;
            v43 = v42 - 1;
            if ((int)v43 <= *(_DWORD *)(a1 + 16))
              goto LABEL_109;
            v44 = *(_BYTE *)(*(_QWORD *)a1 + v43);
            if ((v44 & 0xE0) != 0x60 || ((0x401008u >> v44) & 1) == 0)
              goto LABEL_109;
            v41 = &a_5_0;
LABEL_77:
            if (!find_among_b(a1, (uint64_t)v41, 3))
              goto LABEL_109;
LABEL_145:
            v76 = *(_DWORD *)(a1 + 8);
            *(_DWORD *)(a1 + 20) = v76;
            if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v76)
              goto LABEL_109;
            goto LABEL_106;
          case 9:
            if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v29)
              break;
            result = slice_del(a1);
            if ((result & 0x80000000) != 0)
              return result;
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
            v30 = &s_15_5;
            goto LABEL_144;
          default:
            goto LABEL_109;
        }
      }
    }
  }
  v45 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v45;
  v46 = **(_DWORD **)(a1 + 40);
  if (v45 < v46)
    goto LABEL_96;
  v47 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = v46;
  *(_DWORD *)(a1 + 24) = v45;
  if (!find_among_b(a1, (uint64_t)&a_7_0, 12))
  {
    *(_DWORD *)(a1 + 16) = v47;
    goto LABEL_96;
  }
  v48 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 16) = v47;
  *(_DWORD *)(a1 + 20) = v48;
  if ((int)v48 <= v47)
    goto LABEL_96;
  v49 = v48 - 1;
  if (*(_BYTE *)(*(_QWORD *)a1 + v49) != 117)
    goto LABEL_96;
  *(_DWORD *)(a1 + 8) = v49;
  v50 = slice_del(a1);
  v51 = v50 & (v50 >> 31);
  if (v50 >= 0)
    v51 = 1;
  v52 = v51 >> 31;
  if (!v51)
    v52 = 4;
  if (!v52)
    goto LABEL_109;
  if (v52 == 4)
  {
LABEL_96:
    v53 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v53;
    v54 = **(_DWORD **)(a1 + 40);
    if (v53 < v54)
      goto LABEL_109;
    v55 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v54;
    *(_DWORD *)(a1 + 24) = v53;
    v56 = find_among_b(a1, (uint64_t)&a_8_0, 96);
    if (v56)
    {
      v57 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 16) = v55;
      *(_DWORD *)(a1 + 20) = v57;
      if (v56 != 2)
      {
        if (v56 != 1)
          goto LABEL_109;
        if (v57 > v55)
        {
          v58 = *(_QWORD *)a1;
          v59 = v57 - 1;
          if (*(_BYTE *)(*(_QWORD *)a1 + v59) == 117)
          {
            *(_DWORD *)(a1 + 8) = v59;
            if ((int)v59 > v55 && *(_BYTE *)(v57 + v58 - 2) == 103)
              --v57;
          }
        }
        *(_DWORD *)(a1 + 8) = v57;
        *(_DWORD *)(a1 + 20) = v57;
      }
LABEL_106:
      result = slice_del(a1);
      if ((result & 0x80000000) != 0)
        return result;
    }
    else
    {
      *(_DWORD *)(a1 + 16) = v55;
    }
LABEL_109:
    v60 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v60;
    *(_DWORD *)(a1 + 24) = v60;
    v61 = find_among_b(a1, (uint64_t)&a_9_0, 8);
    if (v61)
    {
      v62 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 20) = v62;
      if (v61 == 2)
      {
        if (**(_DWORD **)(a1 + 40) > v62)
          goto LABEL_122;
        result = slice_del(a1);
        if ((result & 0x80000000) != 0)
          return result;
        v63 = *(int *)(a1 + 8);
        *(_DWORD *)(a1 + 24) = v63;
        v64 = *(_DWORD *)(a1 + 16);
        if ((int)v63 <= v64)
          goto LABEL_122;
        v65 = *(_QWORD *)a1;
        v66 = v63 - 1;
        if (*(_BYTE *)(*(_QWORD *)a1 + v63 - 1) != 117)
          goto LABEL_122;
        *(_DWORD *)(a1 + 8) = v66;
        *(_DWORD *)(a1 + 20) = v66;
        if (v66 <= v64 || *(_BYTE *)(v63 + v65 - 2) != 103 || **(_DWORD **)(a1 + 40) >= (int)v63)
          goto LABEL_122;
        goto LABEL_113;
      }
      if (v61 == 1 && **(_DWORD **)(a1 + 40) <= v62)
      {
LABEL_113:
        result = slice_del(a1);
        if ((result & 0x80000000) != 0)
          return result;
      }
    }
LABEL_122:
    v67 = *(unsigned int *)(a1 + 12);
    v68 = *(unsigned int *)(a1 + 16);
    *(_DWORD *)(a1 + 8) = v68;
    v69 = v68;
    while (1)
    {
      *(_DWORD *)(a1 + 20) = v69;
      v70 = (int)v69 + 1;
      if ((int)v70 < (int)v67
        && (v71 = *(_BYTE *)(*(_QWORD *)a1 + v70), (v71 & 0xE0) == 0xA0)
        && ((0x4082202u >> v71) & 1) != 0)
      {
        among = find_among(a1, (uint64_t)&a_0_0, 6);
        if (!among)
          goto LABEL_140;
        v69 = *(unsigned int *)(a1 + 8);
        *(_DWORD *)(a1 + 24) = v69;
        switch(among)
        {
          case 1:
            v74 = a1;
            v75 = &s_0_0;
            break;
          case 2:
            v74 = a1;
            v75 = &s_1_40;
            break;
          case 3:
            v74 = a1;
            v75 = &s_2_11;
            break;
          case 4:
            v74 = a1;
            v75 = &s_3_22;
            break;
          case 5:
            v74 = a1;
            v75 = &s_4_14;
            break;
          case 6:
            v67 = *(unsigned int *)(a1 + 12);
            goto LABEL_127;
          default:
            goto LABEL_129;
        }
        result = slice_from_s(v74, 1, v75);
        if ((result & 0x80000000) != 0)
          return result;
      }
      else
      {
        *(_DWORD *)(a1 + 24) = v69;
LABEL_127:
        v72 = skip_utf8(*(_QWORD *)a1, v69, 0, v67, 1);
        if (v72 < 0)
        {
LABEL_140:
          *(_DWORD *)(a1 + 8) = v68;
          return 1;
        }
        *(_DWORD *)(a1 + 8) = v72;
      }
LABEL_129:
      v69 = *(unsigned int *)(a1 + 8);
      v67 = *(unsigned int *)(a1 + 12);
    }
  }
  if (v51 >= 0)
    result = 1;
  else
    result = v51;
  if ((v51 & 0x80000000) == 0)
    goto LABEL_109;
  return result;
}

_QWORD *spanish_UTF_8_create_env()
{
  return SN_create_env(0, 3, 0);
}

void spanish_UTF_8_close_env(uint64_t a1)
{
  SN_close_env(a1, 0);
}

char **sb_stemmer_list()
{
  return algorithm_names;
}

_QWORD *sb_stemmer_new(char *__s2, const char *a2)
{
  const char *v3;
  uint64_t (**i)();
  _QWORD *v5;
  _QWORD *v7;
  __int128 v8;
  uint64_t v9;
  void (*v10)(_QWORD);

  if (a2 && strcmp("UTF_8", a2))
    return 0;
  v3 = "ar";
  for (i = &off_1E66F8D10; strcmp(v3, __s2) || *((_DWORD *)i - 6) != 1; i += 5)
  {
    v3 = (const char *)i[1];
    if (!v3)
      return 0;
  }
  v7 = malloc_type_malloc(0x20uLL, 0xA00400770BE9BuLL);
  v5 = v7;
  if (v7)
  {
    v8 = *((_OWORD *)i - 1);
    *(_OWORD *)v7 = v8;
    v7[2] = *i;
    v9 = ((uint64_t (*)(void))v8)();
    v5[3] = v9;
    if (!v9)
    {
      v10 = (void (*)(_QWORD))v5[1];
      if (v10)
        v10(0);
      free(v5);
      return 0;
    }
  }
  return v5;
}

void sb_stemmer_delete(_QWORD *a1)
{
  void (*v2)(_QWORD);

  if (a1)
  {
    v2 = (void (*)(_QWORD))a1[1];
    if (v2)
      v2(a1[3]);
    free(a1);
  }
}

uint64_t sb_stemmer_stem(uint64_t a1, void *__src, int a3)
{
  uint64_t result;

  if (SN_set_current(*(_QWORD *)(a1 + 24), a3, __src))
  {
    result = 0;
    *(_DWORD *)(*(_QWORD *)(a1 + 24) + 12) = 0;
  }
  else if (((*(uint64_t (**)(_QWORD))(a1 + 16))(*(_QWORD *)(a1 + 24)) & 0x80000000) != 0)
  {
    return 0;
  }
  else
  {
    *(_BYTE *)(**(_QWORD **)(a1 + 24) + *(int *)(*(_QWORD *)(a1 + 24) + 12)) = 0;
    return **(_QWORD **)(a1 + 24);
  }
  return result;
}

uint64_t sb_stemmer_length(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 24) + 12);
}

uint64_t dutch_UTF_8_stem(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  int among;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  char v26;
  int among_b;
  int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  char v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  _BOOL4 v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  char v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  void *v62;
  uint64_t v64;
  uint64_t v65;
  int v66;

  v3 = *(unsigned int *)(a1 + 8);
  for (i = v3; ; i = *(unsigned int *)(a1 + 8))
  {
    *(_DWORD *)(a1 + 20) = i;
    v5 = (int)i + 1;
    v6 = *(unsigned int *)(a1 + 12);
    if ((int)v5 >= (int)v6)
      break;
    v7 = *(_BYTE *)(*(_QWORD *)a1 + v5);
    if ((v7 & 0xE0) != 0xA0 || ((0x1448AA12u >> v7) & 1) == 0)
      break;
    among = find_among(a1, (uint64_t)&a_0_1, 11);
    if (!among)
      goto LABEL_19;
    i = *(unsigned int *)(a1 + 8);
    *(_DWORD *)(a1 + 24) = i;
    switch(among)
    {
      case 1:
        v10 = a1;
        v11 = &s_0_46;
        break;
      case 2:
        v10 = a1;
        v11 = &s_1_41;
        break;
      case 3:
        v10 = a1;
        v11 = &s_2_12;
        break;
      case 4:
        v10 = a1;
        v11 = &s_3_23;
        break;
      case 5:
        v10 = a1;
        v11 = &s_4_15;
        break;
      case 6:
        v6 = *(unsigned int *)(a1 + 12);
        goto LABEL_6;
      default:
        continue;
    }
    v12 = slice_from_s(v10, 1, v11);
    if ((v12 & 0x80000000) != 0)
      return v12;
LABEL_8:
    ;
  }
  *(_DWORD *)(a1 + 24) = i;
LABEL_6:
  v8 = skip_utf8(*(_QWORD *)a1, i, 0, v6, 1);
  if ((v8 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) = v8;
    goto LABEL_8;
  }
LABEL_19:
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 20) = v3;
  v13 = v3;
  if ((_DWORD)v3 != *(_DWORD *)(a1 + 12))
  {
    v13 = v3;
    if (*(_BYTE *)(*(_QWORD *)a1 + (int)v3) == 121)
    {
      *(_DWORD *)(a1 + 8) = v3 + 1;
      *(_DWORD *)(a1 + 24) = v3 + 1;
      v12 = slice_from_s(a1, 1, &s_5_9);
      if ((v12 & 0x80000000) == 0)
      {
        v13 = *(unsigned int *)(a1 + 8);
        goto LABEL_23;
      }
      return v12;
    }
  }
LABEL_23:
  while (2)
  {
    if (in_grouping_U(a1, (uint64_t)&g_v_1, 97, 232, 0))
    {
      v15 = *(_QWORD *)a1;
      v14 = *(unsigned int *)(a1 + 12);
    }
    else
    {
      v1 = *(unsigned int *)(a1 + 8);
      v14 = *(unsigned int *)(a1 + 12);
      *(_DWORD *)(a1 + 20) = v1;
      v15 = *(_QWORD *)a1;
      if ((_DWORD)v1 == (_DWORD)v14)
        goto LABEL_34;
      if (*(_BYTE *)(v15 + (int)v1) != 105)
        goto LABEL_28;
      *(_DWORD *)(a1 + 8) = v1 + 1;
      *(_DWORD *)(a1 + 24) = v1 + 1;
      if (!in_grouping_U(a1, (uint64_t)&g_v_1, 97, 232, 0))
      {
        v16 = a1;
        v17 = &s_6_46;
        goto LABEL_31;
      }
      v14 = *(unsigned int *)(a1 + 12);
      v15 = *(_QWORD *)a1;
LABEL_28:
      *(_DWORD *)(a1 + 8) = v1;
      if ((_DWORD)v1 == (_DWORD)v14)
      {
LABEL_34:
        v14 = v1;
      }
      else if (*(_BYTE *)(v15 + (int)v1) == 121)
      {
        *(_DWORD *)(a1 + 8) = v1 + 1;
        *(_DWORD *)(a1 + 24) = v1 + 1;
        v16 = a1;
        v17 = &s_7_20;
LABEL_31:
        v12 = slice_from_s(v16, 1, v17);
        if ((v12 & 0x80000000) != 0)
          return v12;
LABEL_32:
        *(_DWORD *)(a1 + 8) = v13;
        continue;
      }
    }
    break;
  }
  *(_DWORD *)(a1 + 8) = v13;
  v18 = skip_utf8(v15, v13, 0, v14, 1);
  if ((v18 & 0x80000000) == 0)
  {
    v13 = v18;
    goto LABEL_32;
  }
  *(_DWORD *)(a1 + 8) = v3;
  v19 = *(_DWORD **)(a1 + 40);
  *v19 = *(_DWORD *)(a1 + 12);
  v19[1] = *(_DWORD *)(a1 + 12);
  v20 = out_grouping_U(a1, (uint64_t)&g_v_1, 97, 232, 1);
  if ((v20 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) += v20;
    v21 = in_grouping_U(a1, (uint64_t)&g_v_1, 97, 232, 1);
    if ((v21 & 0x80000000) == 0)
    {
      v22 = *(_DWORD *)(a1 + 8) + v21;
      *(_DWORD *)(a1 + 8) = v22;
      if (v22 <= 3)
        v22 = 3;
      **(_DWORD **)(a1 + 40) = v22;
      v23 = out_grouping_U(a1, (uint64_t)&g_v_1, 97, 232, 1);
      if ((v23 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) += v23;
        v24 = in_grouping_U(a1, (uint64_t)&g_v_1, 97, 232, 1);
        if ((v24 & 0x80000000) == 0)
          *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) = *(_DWORD *)(a1 + 8) + v24;
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v3;
  v25 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v25;
  *(_DWORD *)(a1 + 24) = v25;
  if ((int)v25 <= (int)v3)
    goto LABEL_66;
  v26 = *(_BYTE *)(v25 + *(_QWORD *)a1 - 1);
  if ((v26 & 0xE0) != 0x60)
    goto LABEL_66;
  if (((0x84020u >> v26) & 1) == 0)
    goto LABEL_66;
  among_b = find_among_b(a1, (uint64_t)&a_3_1, 5);
  if (!among_b)
    goto LABEL_66;
  v28 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v28;
  if (among_b == 3)
  {
    if (**(_DWORD **)(a1 + 40) <= v28)
    {
      if (out_grouping_b_U(a1, (uint64_t)&g_v_j, 97, 232, 0))
        goto LABEL_65;
      v12 = slice_del(a1);
      if ((v12 & 0x80000000) == 0)
        goto LABEL_65;
      return v12;
    }
    goto LABEL_57;
  }
  if (among_b != 2)
  {
    if (among_b != 1)
      goto LABEL_66;
    if (**(_DWORD **)(a1 + 40) <= v28)
    {
      v12 = slice_from_s(a1, 4, &s_11_8);
      if ((v12 & 0x80000000) != 0)
        return v12;
LABEL_65:
      LODWORD(v1) = 1;
LABEL_66:
      v31 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v31;
      v32 = v31;
LABEL_67:
      v12 = r_e_ending(a1);
      if ((v12 & 0x80000000) != 0)
        return v12;
      v33 = v31 - v32;
      v34 = *(_DWORD *)(a1 + 12) + v33;
      *(_DWORD *)(a1 + 8) = v34;
      *(_DWORD *)(a1 + 24) = v34;
      if (eq_s_b(a1, 4, &s_12_8))
      {
        v35 = *(int *)(a1 + 8);
        *(_DWORD *)(a1 + 20) = v35;
        if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) <= (int)v35
          && ((int)v35 <= *(_DWORD *)(a1 + 16) || *(_BYTE *)(v35 + *(_QWORD *)a1 - 1) != 99))
        {
          v12 = slice_del(a1);
          if ((v12 & 0x80000000) != 0)
            return v12;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
          if (eq_s_b(a1, 2, &s_13_34))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
            v48 = r_en_ending(a1);
            v49 = v48 >= 0 ? v1 : v48;
            v1 = v48 ? v49 : v1;
            v50 = v48 ? v48 >> 31 : 4;
            if ((v50 | 4) != 4)
            {
              if ((v48 & 0x80000000) == 0)
              {
                v37 = *(_DWORD *)(a1 + 8);
                v36 = *(_DWORD *)(a1 + 12);
                goto LABEL_71;
              }
LABEL_123:
              if ((v1 & 0x80000000) != 0)
                return v1;
              goto LABEL_137;
            }
          }
        }
      }
      v36 = *(_DWORD *)(a1 + 12);
      v37 = v36 + v33;
      *(_DWORD *)(a1 + 8) = v37;
LABEL_71:
      *(_DWORD *)(a1 + 24) = v37;
      v38 = v37 - 1;
      if ((int)v38 > *(_DWORD *)(a1 + 16))
      {
        v39 = *(_BYTE *)(*(_QWORD *)a1 + v38);
        if ((v39 & 0xE0) == 0x60 && ((0x40890u >> v39) & 1) != 0)
        {
          v40 = find_among_b(a1, (uint64_t)&a_4_1, 6);
          if (v40)
          {
            v41 = *(int *)(a1 + 8);
            *(_DWORD *)(a1 + 20) = v41;
            switch(v40)
            {
              case 1:
                if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) > (int)v41)
                  goto LABEL_130;
                v12 = slice_del(a1);
                if ((v12 & 0x80000000) != 0)
                  return v12;
                v43 = *(_DWORD *)(a1 + 8);
                v42 = *(_DWORD *)(a1 + 12);
                *(_DWORD *)(a1 + 24) = v43;
                if (eq_s_b(a1, 2, &s_14_12))
                {
                  v44 = *(int *)(a1 + 8);
                  *(_DWORD *)(a1 + 20) = v44;
                  if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) <= (int)v44
                    && ((int)v44 <= *(_DWORD *)(a1 + 16) || *(_BYTE *)(v44 + *(_QWORD *)a1 - 1) != 101))
                  {
LABEL_129:
                    v12 = slice_del(a1);
                    if ((v12 & 0x80000000) != 0)
                      return v12;
                    goto LABEL_130;
                  }
                }
                *(_DWORD *)(a1 + 8) = v43 - v42 + *(_DWORD *)(a1 + 12);
                v45 = r_undouble(a1);
                if (v45 > 0)
                  goto LABEL_130;
                v46 = v45 != 0;
                v47 = v45 ? 1 : 6;
                v1 = v45 ? v45 : v1;
LABEL_121:
                if (v47 == 6)
                  goto LABEL_130;
                if (!v46)
                  goto LABEL_131;
                break;
              case 2:
                if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) > (int)v41
                  || (int)v41 > *(_DWORD *)(a1 + 16) && *(_BYTE *)(v41 + *(_QWORD *)a1 - 1) == 101)
                {
                  goto LABEL_130;
                }
                goto LABEL_129;
              case 3:
                if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) > (int)v41)
                  goto LABEL_130;
                v12 = slice_del(a1);
                if ((v12 & 0x80000000) != 0)
                  return v12;
                v51 = r_e_ending(a1);
                if (v51 >= 0)
                  v52 = v1;
                else
                  v52 = v51;
                v46 = v51 >> 31;
                if (v51)
                  v1 = v52;
                else
                  v1 = v1;
                if (v51)
                  v47 = v51 >> 31;
                else
                  v47 = 6;
                if (v47)
                  goto LABEL_121;
                goto LABEL_130;
              case 4:
                if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) > (int)v41)
                  goto LABEL_130;
                goto LABEL_129;
              case 5:
                if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) > (int)v41 || !**(_BYTE **)(a1 + 48))
                  goto LABEL_130;
                goto LABEL_129;
              default:
                goto LABEL_130;
            }
            goto LABEL_123;
          }
        }
      }
LABEL_130:
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v37 - v36;
LABEL_131:
      if (!out_grouping_b_U(a1, (uint64_t)&g_v_I, 73, 232, 0))
      {
        v53 = *(int *)(a1 + 8);
        if ((int)v53 - 1 > *(_DWORD *)(a1 + 16))
        {
          v54 = *(_BYTE *)(*(_QWORD *)a1 + v53 - 1);
          if ((v54 & 0xE0) == 0x60 && ((0x208022u >> v54) & 1) != 0)
          {
            v55 = *(_DWORD *)(a1 + 12);
            if (find_among_b(a1, (uint64_t)&a_5_1, 4))
            {
              if (!out_grouping_b_U(a1, (uint64_t)&g_v_1, 97, 232, 0))
              {
                v64 = *(unsigned int *)(a1 + 16);
                v65 = (*(_DWORD *)(a1 + 12) + v53 - v55);
                *(_DWORD *)(a1 + 8) = v65;
                *(_DWORD *)(a1 + 24) = v65;
                v66 = skip_utf8(*(_QWORD *)a1, v65, v64, 0, -1);
                if ((v66 & 0x80000000) == 0)
                {
                  *(_DWORD *)(a1 + 8) = v66;
                  *(_DWORD *)(a1 + 20) = v66;
                  v12 = slice_del(a1);
                  if ((v12 & 0x80000000) != 0)
                    return v12;
                }
              }
            }
          }
        }
      }
LABEL_137:
      v56 = *(unsigned int *)(a1 + 16);
      *(_DWORD *)(a1 + 8) = v56;
      v57 = v56;
      while (2)
      {
        *(_DWORD *)(a1 + 20) = v57;
        v58 = *(unsigned int *)(a1 + 12);
        if ((int)v57 < (int)v58 && (*(unsigned __int8 *)(*(_QWORD *)a1 + (int)v57) | 0x10) == 0x59)
        {
          v59 = find_among(a1, (uint64_t)&a_1_1, 3);
          if (!v59)
            goto LABEL_154;
          v57 = *(unsigned int *)(a1 + 8);
          *(_DWORD *)(a1 + 24) = v57;
          switch(v59)
          {
            case 1:
              v61 = a1;
              v62 = &s_8_96;
              break;
            case 2:
              v61 = a1;
              v62 = &s_9_8;
              break;
            case 3:
              v58 = *(unsigned int *)(a1 + 12);
              goto LABEL_146;
            default:
              goto LABEL_148;
          }
          v12 = slice_from_s(v61, 1, v62);
          if ((v12 & 0x80000000) != 0)
            return v12;
          goto LABEL_148;
        }
        *(_DWORD *)(a1 + 24) = v57;
LABEL_146:
        v60 = skip_utf8(*(_QWORD *)a1, v57, 0, v58, 1);
        if (v60 < 0)
        {
LABEL_154:
          *(_DWORD *)(a1 + 8) = v56;
          return 1;
        }
        *(_DWORD *)(a1 + 8) = v60;
LABEL_148:
        v57 = *(unsigned int *)(a1 + 8);
        continue;
      }
    }
LABEL_57:
    LODWORD(v1) = 0;
    goto LABEL_66;
  }
  v29 = r_en_ending(a1);
  v1 = v29;
  v30 = v29 >> 31;
  if (!(_DWORD)v29)
    v30 = 2;
  if ((v30 | 2) == 2)
    goto LABEL_66;
  if ((v29 & 0x80000000) == 0)
  {
    v31 = *(_DWORD *)(a1 + 8);
    v32 = *(_DWORD *)(a1 + 12);
    goto LABEL_67;
  }
  return v1;
}

_QWORD *dutch_UTF_8_create_env()
{
  return SN_create_env(0, 2, 1);
}

void dutch_UTF_8_close_env(uint64_t a1)
{
  SN_close_env(a1, 0);
}

uint64_t r_en_ending(uint64_t a1)
{
  int v1;
  uint64_t result;
  int v4;
  int v5;
  int v6;

  v1 = *(_DWORD *)(a1 + 8);
  if (**(_DWORD **)(a1 + 40) > v1)
    return 0;
  v4 = *(_DWORD *)(a1 + 12);
  v5 = out_grouping_b_U(a1, (uint64_t)&g_v_1, 97, 232, 0);
  result = 0;
  if (!v5)
  {
    v6 = v1 - v4;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v6;
    if (eq_s_b(a1, 3, &s_10_20))
      return 0;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v6;
    result = slice_del(a1);
    if ((result & 0x80000000) == 0)
      return r_undouble(a1);
  }
  return result;
}

uint64_t r_e_ending(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  int v5;
  int v6;

  result = 0;
  **(_BYTE **)(a1 + 48) = 0;
  v3 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v3;
  if ((int)v3 > *(_DWORD *)(a1 + 16))
  {
    v4 = v3 - 1;
    if (*(_BYTE *)(*(_QWORD *)a1 + v3 - 1) == 101
      && (*(_DWORD *)(a1 + 8) = v4, *(_DWORD *)(a1 + 20) = v4, **(_DWORD **)(a1 + 40) < (int)v3))
    {
      v5 = *(_DWORD *)(a1 + 12);
      v6 = out_grouping_b_U(a1, (uint64_t)&g_v_1, 97, 232, 0);
      result = 0;
      if (!v6)
      {
        *(_DWORD *)(a1 + 8) = v4 - v5 + *(_DWORD *)(a1 + 12);
        result = slice_del(a1);
        if ((result & 0x80000000) == 0)
        {
          **(_BYTE **)(a1 + 48) = 1;
          return r_undouble(a1);
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t r_undouble(uint64_t a1)
{
  uint64_t v1;
  char v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  v1 = *(int *)(a1 + 8);
  if ((int)v1 - 1 <= *(_DWORD *)(a1 + 16))
    return 0;
  v3 = *(_BYTE *)(*(_QWORD *)a1 + v1 - 1);
  if ((v3 & 0xE0) != 0x60 || ((0x100810u >> v3) & 1) == 0)
    return 0;
  v5 = *(_DWORD *)(a1 + 12);
  result = find_among_b(a1, (uint64_t)&a_2_1, 3);
  if ((_DWORD)result)
  {
    v6 = *(unsigned int *)(a1 + 16);
    v7 = (*(_DWORD *)(a1 + 12) + v1 - v5);
    *(_DWORD *)(a1 + 8) = v7;
    *(_DWORD *)(a1 + 24) = v7;
    v8 = skip_utf8(*(_QWORD *)a1, v7, v6, 0, -1);
    if (v8 < 0)
      return 0;
    *(_DWORD *)(a1 + 8) = v8;
    *(_DWORD *)(a1 + 20) = v8;
    v9 = slice_del(a1);
    if (v9 >= 0)
      return 1;
    else
      return v9 & (v9 >> 31);
  }
  return result;
}

uint64_t finnish_UTF_8_stem(uint64_t a1)
{
  int v2;
  _DWORD *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int among_b;
  int v11;
  uint64_t result;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = *(_DWORD **)(a1 + 40);
  *v3 = *(_DWORD *)(a1 + 12);
  v3[1] = *(_DWORD *)(a1 + 12);
  if ((out_grouping_U(a1, (uint64_t)&g_V1, 97, 246, 1) & 0x80000000) == 0)
  {
    v4 = in_grouping_U(a1, (uint64_t)&g_V1, 97, 246, 1);
    if ((v4 & 0x80000000) == 0)
    {
      v5 = *(_DWORD *)(a1 + 8) + v4;
      *(_DWORD *)(a1 + 8) = v5;
      **(_DWORD **)(a1 + 40) = v5;
      if ((out_grouping_U(a1, (uint64_t)&g_V1, 97, 246, 1) & 0x80000000) == 0)
      {
        v6 = in_grouping_U(a1, (uint64_t)&g_V1, 97, 246, 1);
        if ((v6 & 0x80000000) == 0)
          *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) = *(_DWORD *)(a1 + 8) + v6;
      }
    }
  }
  *(_DWORD *)(a1 + 8) = v2;
  **(_BYTE **)(a1 + 48) = 0;
  v8 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 8) = v7;
  v9 = **(_DWORD **)(a1 + 40);
  if (v7 >= v9)
  {
    *(_DWORD *)(a1 + 16) = v9;
    *(_DWORD *)(a1 + 24) = v7;
    among_b = find_among_b(a1, (uint64_t)&a_0_2, 10);
    if (!among_b)
    {
      *(_DWORD *)(a1 + 16) = v8;
      goto LABEL_15;
    }
    v11 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 16) = v8;
    *(_DWORD *)(a1 + 20) = v11;
    if (among_b == 2)
    {
      if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) > v11)
        goto LABEL_15;
    }
    else if (among_b == 1 && in_grouping_b_U(a1, (uint64_t)&g_particle_end, 97, 246, 0))
    {
      goto LABEL_15;
    }
    result = slice_del(a1);
    if ((result & 0x80000000) != 0)
      return result;
  }
LABEL_15:
  v13 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v13;
  v14 = **(_DWORD **)(a1 + 40);
  if (v13 >= v14)
  {
    v15 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v14;
    *(_DWORD *)(a1 + 24) = v13;
    v16 = find_among_b(a1, (uint64_t)&a_4_2, 9);
    if (v16)
    {
      v17 = *(int *)(a1 + 8);
      *(_DWORD *)(a1 + 16) = v15;
      *(_DWORD *)(a1 + 20) = v17;
      switch(v16)
      {
        case 1:
          if ((int)v17 > v15 && *(_BYTE *)(v17 + *(_QWORD *)a1 - 1) == 107)
            goto LABEL_38;
          goto LABEL_37;
        case 2:
          result = slice_del(a1);
          if ((result & 0x80000000) == 0)
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
            if (!eq_s_b(a1, 3, &s_0_47))
              goto LABEL_38;
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
            result = slice_from_s(a1, 3, &s_1_42);
            if ((result & 0x80000000) == 0)
              goto LABEL_38;
          }
          return result;
        case 3:
          goto LABEL_37;
        case 4:
          v18 = v17 - 1;
          if ((int)v18 <= v15 || *(_BYTE *)(*(_QWORD *)a1 + v18) != 97)
            goto LABEL_38;
          v19 = &a_1_2;
          goto LABEL_32;
        case 5:
          if ((int)v17 - 2 <= v15 || *(unsigned __int8 *)(v17 + *(_QWORD *)a1 - 1) != 164)
            goto LABEL_38;
          v19 = &a_2_2;
LABEL_32:
          v20 = a1;
          v21 = 6;
          break;
        case 6:
          if ((int)v17 - 2 <= v15 || *(_BYTE *)(v17 + *(_QWORD *)a1 - 1) != 101)
            goto LABEL_38;
          v19 = &a_3_2;
          v20 = a1;
          v21 = 2;
          break;
        default:
          goto LABEL_38;
      }
      if (find_among_b(v20, (uint64_t)v19, v21))
      {
LABEL_37:
        result = slice_del(a1);
        if ((result & 0x80000000) != 0)
          return result;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 16) = v15;
    }
  }
LABEL_38:
  v22 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v22;
  v23 = **(_DWORD **)(a1 + 40);
  if (v22 >= v23)
  {
    v24 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v23;
    *(_DWORD *)(a1 + 24) = v22;
    v25 = find_among_b(a1, (uint64_t)&a_6_1, 30);
    if (v25)
    {
      v26 = *(int *)(a1 + 8);
      *(_DWORD *)(a1 + 16) = v24;
      *(_DWORD *)(a1 + 20) = v26;
      switch(v25)
      {
        case 1:
          if ((int)v26 <= v24)
            break;
          v27 = v26 - 1;
          if (*(_BYTE *)(*(_QWORD *)a1 + v27) != 97)
            break;
          goto LABEL_53;
        case 2:
          if ((int)v26 <= v24)
            break;
          v27 = v26 - 1;
          if (*(_BYTE *)(*(_QWORD *)a1 + v27) != 101)
            break;
          goto LABEL_53;
        case 3:
          if ((int)v26 <= v24)
            break;
          v27 = v26 - 1;
          if (*(_BYTE *)(*(_QWORD *)a1 + v27) != 105)
            break;
          goto LABEL_53;
        case 4:
          if ((int)v26 <= v24)
            break;
          v27 = v26 - 1;
          if (*(_BYTE *)(*(_QWORD *)a1 + v27) != 111)
            break;
LABEL_53:
          *(_DWORD *)(a1 + 8) = v27;
          goto LABEL_66;
        case 5:
          v28 = &s_2_13;
          goto LABEL_56;
        case 6:
          v28 = &s_3_24;
LABEL_56:
          if (!eq_s_b(a1, 2, v28))
            break;
          goto LABEL_66;
        case 7:
          v29 = *(_DWORD *)(a1 + 12) - v26;
          if ((find_among_b(a1, (uint64_t)&a_5_2, 7)
             || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v29, eq_s_b(a1, 2, &s_4_16)))
            && (v30 = *(unsigned int *)(a1 + 16),
                v31 = (*(_DWORD *)(a1 + 12) - v29),
                *(_DWORD *)(a1 + 8) = v31,
                v32 = skip_utf8(*(_QWORD *)a1, v31, v30, 0, -1),
                (v32 & 0x80000000) == 0))
          {
            *(_DWORD *)(a1 + 8) = v32;
            *(_DWORD *)(a1 + 20) = v32;
          }
          else
          {
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v29;
          }
          goto LABEL_66;
        case 8:
          if (in_grouping_b_U(a1, (uint64_t)&g_V1, 97, 246, 0)
            || in_grouping_b_U(a1, (uint64_t)&g_C, 98, 122, 0))
          {
            break;
          }
          goto LABEL_66;
        default:
LABEL_66:
          result = slice_del(a1);
          if ((result & 0x80000000) != 0)
            return result;
          **(_BYTE **)(a1 + 48) = 1;
          break;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 16) = v24;
    }
  }
  v33 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v33;
  v34 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4);
  if (v33 >= v34)
  {
    v35 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v34;
    *(_DWORD *)(a1 + 24) = v33;
    v36 = find_among_b(a1, (uint64_t)&a_7_1, 14);
    if (v36)
    {
      v37 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 16) = v35;
      *(_DWORD *)(a1 + 20) = v37;
      if (v36 == 1)
      {
        v38 = *(_DWORD *)(a1 + 12);
        if (eq_s_b(a1, 2, &s_5_10))
          goto LABEL_76;
        *(_DWORD *)(a1 + 8) = v37 - v38 + *(_DWORD *)(a1 + 12);
      }
      result = slice_del(a1);
      if ((result & 0x80000000) != 0)
        return result;
    }
    else
    {
      *(_DWORD *)(a1 + 16) = v35;
    }
  }
LABEL_76:
  v39 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v39;
  v40 = **(_DWORD **)(a1 + 40);
  if (**(_BYTE **)(a1 + 48))
  {
    if (v39 >= v40)
    {
      v41 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 16) = v40;
      *(_DWORD *)(a1 + 24) = v39;
      if (v39 > v40
        && *(unsigned __int8 *)(v39 + *(_QWORD *)a1 - 1) - 105 <= 1
        && find_among_b(a1, (uint64_t)&a_8_1, 2))
      {
        v42 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 16) = v41;
        *(_DWORD *)(a1 + 20) = v42;
        goto LABEL_82;
      }
      goto LABEL_88;
    }
  }
  else if (v39 >= v40)
  {
    v41 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v40;
    *(_DWORD *)(a1 + 24) = v39;
    if (v39 <= v40
      || (v43 = v39 - 1, *(_BYTE *)(*(_QWORD *)a1 + v43) != 116)
      || (*(_DWORD *)(a1 + 8) = v43,
          *(_DWORD *)(a1 + 20) = v43,
          in_grouping_b_U(a1, (uint64_t)&g_V1, 97, 246, 0)))
    {
LABEL_88:
      *(_DWORD *)(a1 + 16) = v41;
      goto LABEL_89;
    }
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - 1;
    result = slice_del(a1);
    if ((result & 0x80000000) != 0)
      return result;
    *(_DWORD *)(a1 + 16) = v41;
    v60 = *(_DWORD *)(a1 + 8);
    v61 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4);
    if (v60 >= v61)
    {
      *(_DWORD *)(a1 + 16) = v61;
      *(_DWORD *)(a1 + 24) = v60;
      if (v60 - 2 > v61 && *(_BYTE *)(v60 + *(_QWORD *)a1 - 1) == 97)
      {
        v62 = find_among_b(a1, (uint64_t)&a_9_1, 2);
        if (v62)
        {
          v63 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 16) = v41;
          *(_DWORD *)(a1 + 20) = v63;
          if (v62 == 1)
          {
            v64 = *(_DWORD *)(a1 + 12);
            if (eq_s_b(a1, 2, &s_6_47))
              goto LABEL_89;
            *(_DWORD *)(a1 + 8) = v63 - v64 + *(_DWORD *)(a1 + 12);
          }
LABEL_82:
          result = slice_del(a1);
          if ((result & 0x80000000) != 0)
            return result;
          goto LABEL_89;
        }
      }
      goto LABEL_88;
    }
  }
LABEL_89:
  v44 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v44;
  v45 = **(_DWORD **)(a1 + 40);
  if (v44 < v45)
    goto LABEL_111;
  v46 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = v45;
  if (!find_among_b(a1, (uint64_t)&a_5_2, 7))
    goto LABEL_128;
  v47 = *(unsigned int *)(a1 + 12);
  v48 = *(unsigned int *)(a1 + 16);
  *(_DWORD *)(a1 + 8) = v47;
  *(_DWORD *)(a1 + 24) = v47;
  v49 = skip_utf8(*(_QWORD *)a1, v47, v48, 0, -1);
  if (v49 < 0
    || (*(_DWORD *)(a1 + 8) = v49, *(_DWORD *)(a1 + 20) = v49, result = slice_del(a1), (result & 0x80000000) == 0))
  {
LABEL_128:
    v50 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v50;
    *(_DWORD *)(a1 + 24) = v50;
    if (in_grouping_b_U(a1, (uint64_t)&g_AEI, 97, 228, 0)
      || (*(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8), in_grouping_b_U(a1, (uint64_t)&g_C, 98, 122, 0))
      || (result = slice_del(a1), (result & 0x80000000) == 0))
    {
      v51 = *(_DWORD *)(a1 + 12);
      v52 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 8) = v51;
      *(_DWORD *)(a1 + 24) = v51;
      if (v51 > v52)
      {
        v53 = *(_QWORD *)a1;
        v54 = v51 - 1;
        if (*(_BYTE *)(*(_QWORD *)a1 + v54) == 106)
        {
          *(_DWORD *)(a1 + 8) = v54;
          *(_DWORD *)(a1 + 20) = v54;
          if ((int)v54 > v52)
          {
            v55 = v51 - 2;
            v56 = *(unsigned __int8 *)(v53 + v55);
            if (v56 == 117 || v56 == 111)
            {
              *(_DWORD *)(a1 + 8) = v55;
              result = slice_del(a1);
              if ((result & 0x80000000) != 0)
                return result;
              v51 = *(_DWORD *)(a1 + 12);
              v52 = *(_DWORD *)(a1 + 16);
            }
          }
        }
      }
      *(_DWORD *)(a1 + 8) = v51;
      *(_DWORD *)(a1 + 24) = v51;
      if (v51 > v52)
      {
        v57 = *(_QWORD *)a1;
        v58 = v51 - 1;
        if (*(_BYTE *)(*(_QWORD *)a1 + v58) == 111)
        {
          *(_DWORD *)(a1 + 8) = v58;
          *(_DWORD *)(a1 + 20) = v58;
          if ((int)v58 > v52 && *(_BYTE *)(v57 + v51 - 2) == 106)
          {
            *(_DWORD *)(a1 + 8) = v51 - 2;
            result = slice_del(a1);
            if ((result & 0x80000000) != 0)
              return result;
            v51 = *(_DWORD *)(a1 + 12);
          }
        }
      }
      *(_DWORD *)(a1 + 8) = v51;
      *(_DWORD *)(a1 + 16) = v46;
      if ((in_grouping_b_U(a1, (uint64_t)&g_V1, 97, 246, 1) & 0x80000000) != 0)
        goto LABEL_111;
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
      if (in_grouping_b_U(a1, (uint64_t)&g_C, 98, 122, 0))
        goto LABEL_111;
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
      **(_QWORD **)(a1 + 32) = slice_to((uint64_t *)a1, **(_DWORD ***)(a1 + 32));
      v59 = **(_DWORD ***)(a1 + 32);
      if (!v59)
        return 0xFFFFFFFFLL;
      if (!eq_v_b(a1, v59) || (result = slice_del(a1), (result & 0x80000000) == 0))
      {
LABEL_111:
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
        return 1;
      }
    }
  }
  return result;
}

_QWORD *finnish_UTF_8_create_env()
{
  return SN_create_env(1, 2, 1);
}

void finnish_UTF_8_close_env(uint64_t a1)
{
  SN_close_env(a1, 1);
}

BOOL r_LONG(uint64_t a1)
{
  return find_among_b(a1, (uint64_t)&a_5_2, 7) != 0;
}

BOOL r_VI(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(int *)(a1 + 8);
  if ((int)v1 <= *(_DWORD *)(a1 + 16))
    return 0;
  v2 = v1 - 1;
  if (*(_BYTE *)(*(_QWORD *)a1 + v2) != 105)
    return 0;
  *(_DWORD *)(a1 + 8) = v2;
  return in_grouping_b_U(a1, (uint64_t)&g_V2, 97, 246, 0) == 0;
}

uint64_t portuguese_UTF_8_stem(uint64_t a1)
{
  unsigned int v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int among;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t result;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  int among_b;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int v33;
  int v34;
  int v35;
  void *v36;
  uint64_t v37;
  int v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  void *v67;

  v2 = *(_DWORD *)(a1 + 8);
  for (i = v2; ; i = *(unsigned int *)(a1 + 8))
  {
    *(_DWORD *)(a1 + 20) = i;
    v4 = (int)i + 1;
    v5 = *(unsigned int *)(a1 + 12);
    if ((int)v4 >= (int)v5 || (v6 = *(unsigned __int8 *)(*(_QWORD *)a1 + v4), v6 != 163) && v6 != 181)
    {
      *(_DWORD *)(a1 + 24) = i;
      goto LABEL_11;
    }
    among = find_among(a1, (uint64_t)&a_0_3, 3);
    if (!among)
      goto LABEL_18;
    i = *(unsigned int *)(a1 + 8);
    *(_DWORD *)(a1 + 24) = i;
    if (among == 1)
    {
      v9 = a1;
      v10 = &s_0_48;
      goto LABEL_16;
    }
    if (among != 2)
      break;
    v9 = a1;
    v10 = &s_1_43;
LABEL_16:
    result = slice_from_s(v9, 2, v10);
    if ((result & 0x80000000) != 0)
      return result;
LABEL_13:
    ;
  }
  if (among != 3)
    goto LABEL_13;
  v5 = *(unsigned int *)(a1 + 12);
LABEL_11:
  v8 = skip_utf8(*(_QWORD *)a1, i, 0, v5, 1);
  if ((v8 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) = v8;
    goto LABEL_13;
  }
LABEL_18:
  *(_DWORD *)(a1 + 8) = v2;
  v12 = *(_DWORD **)(a1 + 40);
  *v12 = *(_DWORD *)(a1 + 12);
  v12[1] = *(_DWORD *)(a1 + 12);
  v12[2] = *(_DWORD *)(a1 + 12);
  v13 = *(_DWORD *)(a1 + 8);
  if (!in_grouping_U(a1, (uint64_t)&g_v_2, 97, 250, 0))
  {
    if ((v14 = *(_DWORD *)(a1 + 8), !out_grouping_U(a1, (uint64_t)&g_v_2, 97, 250, 0))
      && (v17 = out_grouping_U(a1, (uint64_t)&g_v_2, 97, 250, 1), (v17 & 0x80000000) == 0)
      || (*(_DWORD *)(a1 + 8) = v14, !in_grouping_U(a1, (uint64_t)&g_v_2, 97, 250, 0))
      && (v17 = in_grouping_U(a1, (uint64_t)&g_v_2, 97, 250, 1), (v17 & 0x80000000) == 0))
    {
LABEL_31:
      v16 = *(_DWORD *)(a1 + 8) + v17;
      goto LABEL_32;
    }
  }
  *(_DWORD *)(a1 + 8) = v13;
  if (!out_grouping_U(a1, (uint64_t)&g_v_2, 97, 250, 0))
  {
    v15 = *(_DWORD *)(a1 + 8);
    if (!out_grouping_U(a1, (uint64_t)&g_v_2, 97, 250, 0))
    {
      v17 = out_grouping_U(a1, (uint64_t)&g_v_2, 97, 250, 1);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_31;
    }
    *(_DWORD *)(a1 + 8) = v15;
    if (!in_grouping_U(a1, (uint64_t)&g_v_2, 97, 250, 0))
    {
      v16 = skip_utf8(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), 0, *(unsigned int *)(a1 + 12), 1);
      if ((v16 & 0x80000000) == 0)
LABEL_32:
        **(_DWORD **)(a1 + 40) = v16;
    }
  }
  *(_DWORD *)(a1 + 8) = v13;
  v18 = out_grouping_U(a1, (uint64_t)&g_v_2, 97, 250, 1);
  if ((v18 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) += v18;
    v19 = in_grouping_U(a1, (uint64_t)&g_v_2, 97, 250, 1);
    if ((v19 & 0x80000000) == 0)
    {
      v20 = *(_DWORD *)(a1 + 8) + v19;
      *(_DWORD *)(a1 + 8) = v20;
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) = v20;
      v21 = out_grouping_U(a1, (uint64_t)&g_v_2, 97, 250, 1);
      if ((v21 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) += v21;
        v22 = in_grouping_U(a1, (uint64_t)&g_v_2, 97, 250, 1);
        if ((v22 & 0x80000000) == 0)
          *(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) = *(_DWORD *)(a1 + 8) + v22;
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v13;
  v23 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v23;
  *(_DWORD *)(a1 + 24) = v23;
  if ((int)v23 - 2 > v13)
  {
    v24 = *(_BYTE *)(v23 + *(_QWORD *)a1 - 1);
    if ((v24 & 0xE0) == 0x60 && ((0xC9022u >> v24) & 1) != 0)
    {
      among_b = find_among_b(a1, (uint64_t)&a_5_3, 45);
      if (among_b)
      {
        v26 = *(int *)(a1 + 8);
        *(_DWORD *)(a1 + 20) = v26;
        switch(among_b)
        {
          case 1:
            if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > (int)v26)
              break;
            goto LABEL_80;
          case 2:
            if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > (int)v26)
              break;
            v27 = &s_4_17;
            v28 = a1;
            v29 = 3;
            goto LABEL_86;
          case 3:
            if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > (int)v26)
              break;
            v27 = &s_5_11;
            v28 = a1;
            v29 = 1;
            goto LABEL_86;
          case 4:
            if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > (int)v26)
              break;
            v27 = &s_6_48;
            v28 = a1;
            v29 = 4;
            goto LABEL_86;
          case 5:
            if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) > (int)v26)
              break;
            result = slice_del(a1);
            if ((result & 0x80000000) != 0)
              return result;
            v30 = *(int *)(a1 + 8);
            *(_DWORD *)(a1 + 24) = v30;
            v31 = v30 - 1;
            if ((int)v31 <= *(_DWORD *)(a1 + 16))
              goto LABEL_92;
            v32 = *(_BYTE *)(*(_QWORD *)a1 + v31);
            if ((v32 & 0xE0) != 0x60)
              goto LABEL_92;
            if (((0x480018u >> v32) & 1) == 0)
              goto LABEL_92;
            v33 = find_among_b(a1, (uint64_t)&a_2_3, 4);
            if (!v33)
              goto LABEL_92;
            v34 = *(_DWORD *)(a1 + 8);
            *(_DWORD *)(a1 + 20) = v34;
            if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v34)
              goto LABEL_92;
            v35 = v33;
            result = slice_del(a1);
            if ((result & 0x80000000) != 0)
              return result;
            if (v35 == 1)
            {
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
              v36 = &s_7_21;
LABEL_78:
              if (eq_s_b(a1, 2, v36))
                goto LABEL_79;
            }
            goto LABEL_92;
          case 6:
            if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > (int)v26)
              break;
            result = slice_del(a1);
            if ((result & 0x80000000) != 0)
              return result;
            v37 = *(int *)(a1 + 8);
            *(_DWORD *)(a1 + 24) = v37;
            if ((int)v37 - 3 <= *(_DWORD *)(a1 + 16))
              goto LABEL_92;
            v38 = *(unsigned __int8 *)(v37 + *(_QWORD *)a1 - 1);
            if (v38 != 108 && v38 != 101)
              goto LABEL_92;
            v39 = &a_3_3;
            goto LABEL_73;
          case 7:
            if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > (int)v26)
              break;
            result = slice_del(a1);
            if ((result & 0x80000000) != 0)
              return result;
            v40 = *(int *)(a1 + 8);
            *(_DWORD *)(a1 + 24) = v40;
            v41 = v40 - 1;
            if ((int)v41 <= *(_DWORD *)(a1 + 16))
              goto LABEL_92;
            v42 = *(_BYTE *)(*(_QWORD *)a1 + v41);
            if ((v42 & 0xE0) != 0x60 || ((0x401008u >> v42) & 1) == 0)
              goto LABEL_92;
            v39 = &a_4_3;
LABEL_73:
            if (!find_among_b(a1, (uint64_t)v39, 3))
              goto LABEL_92;
LABEL_79:
            v43 = *(_DWORD *)(a1 + 8);
            *(_DWORD *)(a1 + 20) = v43;
            if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v43)
              goto LABEL_92;
LABEL_80:
            result = slice_del(a1);
            if ((result & 0x80000000) != 0)
              return result;
            goto LABEL_92;
          case 8:
            if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > (int)v26)
              break;
            result = slice_del(a1);
            if ((result & 0x80000000) != 0)
              return result;
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
            v36 = &s_8_97;
            goto LABEL_78;
          case 9:
            if (**(_DWORD **)(a1 + 40) > (int)v26)
              break;
            if ((int)v26 <= *(_DWORD *)(a1 + 16))
              break;
            v44 = v26 - 1;
            if (*(_BYTE *)(*(_QWORD *)a1 + v44) != 101)
              break;
            *(_DWORD *)(a1 + 8) = v44;
            v27 = &s_9_9;
            v28 = a1;
            v29 = 2;
LABEL_86:
            result = slice_from_s(v28, v29, v27);
            if ((result & 0x80000000) != 0)
              return result;
            goto LABEL_92;
          default:
            goto LABEL_92;
        }
      }
    }
  }
  v45 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v45;
  v46 = **(_DWORD **)(a1 + 40);
  if (v45 >= v46)
  {
    v47 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v46;
    *(_DWORD *)(a1 + 24) = v45;
    if (find_among_b(a1, (uint64_t)&a_6_2, 120))
    {
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
      result = slice_del(a1);
      if ((result & 0x80000000) != 0)
        return result;
      *(_DWORD *)(a1 + 16) = v47;
LABEL_92:
      v48 = *(_DWORD *)(a1 + 16);
      v49 = *(int *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v49;
      *(_DWORD *)(a1 + 24) = v49;
      if ((int)v49 <= v48)
        goto LABEL_102;
      v50 = *(_QWORD *)a1;
      v51 = v49 - 1;
      if (*(_BYTE *)(*(_QWORD *)a1 + v49 - 1) != 105)
        goto LABEL_102;
      *(_DWORD *)(a1 + 8) = v51;
      *(_DWORD *)(a1 + 20) = v51;
      if (v51 <= v48 || *(_BYTE *)(v49 + v50 - 2) != 99 || **(_DWORD **)(a1 + 40) >= (int)v49)
        goto LABEL_102;
      goto LABEL_101;
    }
    *(_DWORD *)(a1 + 16) = v47;
    v45 = *(_DWORD *)(a1 + 12);
  }
  *(_DWORD *)(a1 + 8) = v45;
  *(_DWORD *)(a1 + 24) = v45;
  if (!find_among_b(a1, (uint64_t)&a_7_2, 7))
    goto LABEL_102;
  v52 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v52;
  if (**(_DWORD **)(a1 + 40) > v52)
    goto LABEL_102;
LABEL_101:
  result = slice_del(a1);
  if ((result & 0x80000000) != 0)
    return result;
LABEL_102:
  v53 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v53;
  *(_DWORD *)(a1 + 24) = v53;
  v54 = find_among_b(a1, (uint64_t)&a_8_2, 4);
  if (!v54)
    goto LABEL_118;
  v55 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v55;
  if (v54 == 2)
  {
    result = slice_from_s(a1, 1, &s_10_21);
    if ((result & 0x80000000) != 0)
      return result;
    goto LABEL_118;
  }
  if (v54 != 1 || **(_DWORD **)(a1 + 40) > v55)
    goto LABEL_118;
  result = slice_del(a1);
  if ((result & 0x80000000) == 0)
  {
    v56 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 24) = v56;
    v57 = *(_DWORD *)(a1 + 16);
    if (v56 <= v57)
      goto LABEL_118;
    v58 = *(_QWORD *)a1;
    v59 = v56 - 1;
    if (*(_BYTE *)(*(_QWORD *)a1 + v59) != 117
      || (*(_DWORD *)(a1 + 8) = v59, *(_DWORD *)(a1 + 20) = v59, (int)v59 <= v57)
      || *(_BYTE *)(v56 + v58 - 2) != 103)
    {
      *(_DWORD *)(a1 + 8) = v56;
      if (*(_BYTE *)(v58 + v59) != 105)
        goto LABEL_118;
      *(_DWORD *)(a1 + 8) = v59;
      *(_DWORD *)(a1 + 20) = v59;
      if ((int)v59 <= v57 || *(_BYTE *)(v56 + v58 - 2) != 99)
        goto LABEL_118;
    }
    *(_DWORD *)(a1 + 8) = v59;
    if (**(_DWORD **)(a1 + 40) >= v56 || (result = slice_del(a1), (result & 0x80000000) == 0))
    {
LABEL_118:
      v60 = *(unsigned int *)(a1 + 12);
      v61 = *(unsigned int *)(a1 + 16);
      *(_DWORD *)(a1 + 8) = v61;
      v62 = v61;
      while (1)
      {
        *(_DWORD *)(a1 + 20) = v62;
        v63 = (int)v62 + 1;
        if ((int)v63 < (int)v60 && *(_BYTE *)(*(_QWORD *)a1 + v63) == 126)
        {
          v64 = find_among(a1, (uint64_t)&a_1_3, 3);
          if (!v64)
            goto LABEL_134;
          v62 = *(unsigned int *)(a1 + 8);
          *(_DWORD *)(a1 + 24) = v62;
          if (v64 == 1)
          {
            v66 = a1;
            v67 = &s_2_14;
            goto LABEL_132;
          }
          if (v64 == 2)
          {
            v66 = a1;
            v67 = &s_3_25;
LABEL_132:
            result = slice_from_s(v66, 2, v67);
            if ((result & 0x80000000) != 0)
              return result;
            goto LABEL_129;
          }
          if (v64 != 3)
            goto LABEL_129;
          v60 = *(unsigned int *)(a1 + 12);
        }
        else
        {
          *(_DWORD *)(a1 + 24) = v62;
        }
        v65 = skip_utf8(*(_QWORD *)a1, v62, 0, v60, 1);
        if (v65 < 0)
        {
LABEL_134:
          *(_DWORD *)(a1 + 8) = v61;
          return 1;
        }
        *(_DWORD *)(a1 + 8) = v65;
LABEL_129:
        v62 = *(unsigned int *)(a1 + 8);
        v60 = *(unsigned int *)(a1 + 12);
      }
    }
  }
  return result;
}

_QWORD *portuguese_UTF_8_create_env()
{
  return SN_create_env(0, 3, 0);
}

void portuguese_UTF_8_close_env(uint64_t a1)
{
  SN_close_env(a1, 0);
}

uint64_t nepali_UTF_8_stem(uint64_t a1)
{
  int v2;
  int among_b;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  void *v20;
  int v21;
  int v22;
  int v23;
  int v25;

  v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 24) = v2;
  among_b = find_among_b(a1, (uint64_t)&a_0_4, 17);
  if (among_b)
  {
    v4 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 20) = v4;
    if (among_b == 2)
    {
      v7 = *(_DWORD *)(a1 + 12);
      if (!eq_s_b(a1, 3, &s_0_49))
      {
        v8 = v7 - v4;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v8;
        if (!eq_s_b(a1, 3, &s_1_44))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v8;
LABEL_4:
          v5 = slice_del(a1);
          if ((v5 & 0x80000000) != 0)
            return v5;
        }
      }
    }
    else if (among_b == 1)
    {
      goto LABEL_4;
    }
    LODWORD(v6) = 1;
    goto LABEL_10;
  }
  LODWORD(v6) = 0;
LABEL_10:
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  do
  {
    v9 = *(int *)(a1 + 8);
    v10 = *(int *)(a1 + 12) - v9;
    *(_DWORD *)(a1 + 24) = v9;
    if ((int)v9 - 2 <= *(_DWORD *)(a1 + 16))
      goto LABEL_28;
    v11 = *(_BYTE *)(v9 + *(_QWORD *)a1 - 1);
    if ((v11 & 0xE0) != 0x80)
      goto LABEL_28;
    if (((0x106u >> v11) & 1) == 0)
      goto LABEL_28;
    if (!find_among_b(a1, (uint64_t)&a_1_4, 3))
      goto LABEL_28;
    v12 = *(_DWORD *)(a1 + 8);
    v13 = *(int *)(a1 + 12) - v10;
    *(_DWORD *)(a1 + 8) = v13;
    *(_DWORD *)(a1 + 20) = v12;
    *(_DWORD *)(a1 + 24) = v13;
    if ((int)v13 - 2 <= *(_DWORD *)(a1 + 16))
      goto LABEL_28;
    v14 = *(_BYTE *)(v13 + *(_QWORD *)a1 - 1);
    if ((v14 & 0xE0) != 0x80)
      goto LABEL_28;
    if (((0x106u >> v14) & 1) == 0)
      goto LABEL_28;
    v15 = find_among_b(a1, (uint64_t)&a_2_4, 3);
    if (!v15)
      goto LABEL_28;
    v16 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 20) = v16;
    if (v15 == 2)
    {
      v18 = a1;
      v19 = 9;
      v20 = &s_6_120;
LABEL_26:
      if (!eq_s_b(v18, v19, v20))
        goto LABEL_28;
      goto LABEL_27;
    }
    if (v15 != 1)
      goto LABEL_28;
    v25 = *(_DWORD *)(a1 + 12);
    if (!eq_s_b(a1, 6, &s_2_15))
    {
      v17 = v25 - v16;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v17;
      if (!eq_s_b(a1, 6, &s_3_26))
      {
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v17;
        if (!eq_s_b(a1, 6, &s_4_18))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v17;
          v18 = a1;
          v19 = 6;
          v20 = &s_5_45;
          goto LABEL_26;
        }
      }
    }
LABEL_27:
    v5 = slice_del(a1);
    if ((v5 & 0x80000000) != 0)
      return v5;
LABEL_28:
    v21 = *(_DWORD *)(a1 + 12) - v10;
    *(_DWORD *)(a1 + 8) = v21;
    *(_DWORD *)(a1 + 24) = v21;
    if (!find_among_b(a1, (uint64_t)&a_3_4, 91))
      goto LABEL_36;
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    v22 = slice_del(a1);
    if (v22 >= 0)
      v6 = v6;
    else
      v6 = v22;
    v23 = v22 >> 31;
    if (v22 >= 0)
      v23 = 2;
  }
  while (v23 == 2);
  if (v23)
    return v6;
LABEL_36:
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
  return 1;
}

_QWORD *nepali_UTF_8_create_env()
{
  return SN_create_env(0, 0, 0);
}

void nepali_UTF_8_close_env(uint64_t a1)
{
  SN_close_env(a1, 0);
}

uint64_t hungarian_UTF_8_stem(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int among_b;
  int v19;
  void *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  void *v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  void *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  void *v42;

  v2 = *(_DWORD *)(a1 + 8);
  **(_DWORD **)(a1 + 40) = *(_DWORD *)(a1 + 12);
  v3 = *(_DWORD *)(a1 + 8);
  if (!in_grouping_U(a1, (uint64_t)&g_v_3, 97, 369, 0)
    && (in_grouping_U(a1, (uint64_t)&g_v_3, 97, 369, 1) & 0x80000000) == 0)
  {
    v6 = *(unsigned int *)(a1 + 12);
    v7 = *(int *)(a1 + 8);
    v8 = *(_QWORD *)a1;
    if ((int)v7 + 1 < (int)v6)
    {
      v9 = *(_BYTE *)(v8 + v7 + 1);
      if ((v9 & 0xE0) == 0x60 && ((0x6080000u >> v9) & 1) != 0)
      {
        if (find_among(a1, (uint64_t)&a_0_5, 8))
        {
          v5 = *(_DWORD *)(a1 + 8);
          goto LABEL_13;
        }
        v8 = *(_QWORD *)a1;
        v6 = *(unsigned int *)(a1 + 12);
      }
    }
    *(_DWORD *)(a1 + 8) = v7;
    v5 = skip_utf8(v8, v7, 0, v6, 1);
    if ((v5 & 0x80000000) == 0)
      goto LABEL_13;
  }
  *(_DWORD *)(a1 + 8) = v3;
  if (!out_grouping_U(a1, (uint64_t)&g_v_3, 97, 369, 0))
  {
    v4 = out_grouping_U(a1, (uint64_t)&g_v_3, 97, 369, 1);
    if ((v4 & 0x80000000) == 0)
    {
      v5 = *(_DWORD *)(a1 + 8) + v4;
LABEL_13:
      **(_DWORD **)(a1 + 40) = v5;
    }
  }
  *(_DWORD *)(a1 + 16) = v2;
  v10 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v10;
  *(_DWORD *)(a1 + 24) = v10;
  v11 = v10 - 1;
  if ((int)v11 > v2 && *(_BYTE *)(*(_QWORD *)a1 + v11) == 108)
  {
    if (find_among_b(a1, (uint64_t)&a_3_5, 2))
    {
      v12 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 20) = v12;
      if (**(_DWORD **)(a1 + 40) <= v12)
      {
        if (r_double(a1))
        {
          result = slice_del(a1);
          if ((result & 0x80000000) != 0)
            return result;
          result = r_undouble_0(a1);
          if ((result & 0x80000000) != 0)
            return result;
        }
      }
    }
  }
  v14 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v14;
  *(_DWORD *)(a1 + 24) = v14;
  if (find_among_b(a1, (uint64_t)&a_4_4, 44))
  {
    v15 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 20) = v15;
    if (**(_DWORD **)(a1 + 40) <= v15)
    {
      result = slice_del(a1);
      if ((result & 0x80000000) != 0)
        return result;
      v16 = *(int *)(a1 + 8);
      *(_DWORD *)(a1 + 24) = v16;
      v17 = v16 - 1;
      if ((int)v17 > *(_DWORD *)(a1 + 16) && (*(unsigned __int8 *)(*(_QWORD *)a1 + v17) | 8) == 0xA9)
      {
        among_b = find_among_b(a1, (uint64_t)&a_1_5, 2);
        if (among_b)
        {
          v19 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 20) = v19;
          if (**(_DWORD **)(a1 + 40) <= v19)
          {
            if (among_b == 2)
            {
              v20 = &s_1_45;
            }
            else
            {
              if (among_b != 1)
                goto LABEL_33;
              v20 = &s_0_50;
            }
            result = slice_from_s(a1, 1, v20);
            if ((result & 0x80000000) != 0)
              return result;
          }
        }
      }
    }
  }
LABEL_33:
  v21 = *(_DWORD *)(a1 + 16);
  v22 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v22;
  *(_DWORD *)(a1 + 24) = v22;
  if ((int)v22 - 2 > v21)
  {
    v23 = *(unsigned __int8 *)(v22 + *(_QWORD *)a1 - 1);
    if (v23 == 116 || v23 == 110)
    {
      v24 = find_among_b(a1, (uint64_t)&a_5_4, 3);
      if (v24)
      {
        v25 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 20) = v25;
        if (**(_DWORD **)(a1 + 40) <= v25)
        {
          if (v24 == 2)
          {
            v26 = &s_3_91;
          }
          else
          {
            if (v24 != 1)
              goto LABEL_43;
            v26 = &s_2_23;
          }
          result = slice_from_s(a1, 1, v26);
          if ((result & 0x80000000) != 0)
            return result;
        }
      }
    }
  }
LABEL_43:
  v27 = *(_DWORD *)(a1 + 16);
  v28 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v28;
  *(_DWORD *)(a1 + 24) = v28;
  if ((int)v28 - 3 <= v27)
    goto LABEL_55;
  if (*(_BYTE *)(v28 + *(_QWORD *)a1 - 1) != 108)
    goto LABEL_55;
  v29 = find_among_b(a1, (uint64_t)&a_6_3, 6);
  if (!v29)
    goto LABEL_55;
  v30 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v30;
  if (**(_DWORD **)(a1 + 40) > v30)
    goto LABEL_55;
  switch(v29)
  {
    case 3:
      v31 = &s_5_46;
      goto LABEL_54;
    case 2:
      v31 = &s_4_44;
LABEL_54:
      result = slice_from_s(a1, 1, v31);
      if ((result & 0x80000000) != 0)
        return result;
      break;
    case 1:
      result = slice_del(a1);
      if ((result & 0x80000000) != 0)
        return result;
      break;
  }
LABEL_55:
  v32 = *(_DWORD *)(a1 + 16);
  v33 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v33;
  *(_DWORD *)(a1 + 24) = v33;
  v34 = v33 - 1;
  if ((int)v34 > v32 && (*(unsigned __int8 *)(*(_QWORD *)a1 + v34) | 8) == 0xA9)
  {
    if (find_among_b(a1, (uint64_t)&a_7_3, 2))
    {
      v35 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 20) = v35;
      if (**(_DWORD **)(a1 + 40) <= v35)
      {
        if (r_double(a1))
        {
          result = slice_del(a1);
          if ((result & 0x80000000) != 0)
            return result;
          result = r_undouble_0(a1);
          if ((result & 0x80000000) != 0)
            return result;
        }
      }
    }
  }
  v36 = *(_DWORD *)(a1 + 16);
  v37 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v37;
  *(_DWORD *)(a1 + 24) = v37;
  v38 = v37 - 1;
  if ((int)v38 <= v36)
    goto LABEL_75;
  v39 = *(unsigned __int8 *)(*(_QWORD *)a1 + v38);
  if (v39 != 169 && v39 != 105)
    goto LABEL_75;
  v40 = find_among_b(a1, (uint64_t)&a_9_2, 12);
  if (!v40)
    goto LABEL_75;
  v41 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v41;
  if (**(_DWORD **)(a1 + 40) > v41)
    goto LABEL_75;
  if (v40 == 3)
  {
    v42 = &s_9_10;
  }
  else
  {
    if (v40 != 2)
    {
      if (v40 == 1)
      {
        result = slice_del(a1);
        if ((result & 0x80000000) != 0)
          return result;
      }
      goto LABEL_75;
    }
    v42 = &s_8_98;
  }
  result = slice_from_s(a1, 1, v42);
  if ((result & 0x80000000) != 0)
    return result;
LABEL_75:
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  result = r_sing_owner(a1);
  if ((result & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
    result = r_plur_owner(a1);
    if ((result & 0x80000000) == 0)
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      result = r_plural(a1);
      if ((result & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
        return 1;
      }
    }
  }
  return result;
}

uint64_t r_sing_owner(uint64_t a1)
{
  uint64_t result;
  int v3;
  void *v4;

  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  result = find_among_b(a1, (uint64_t)&a_10_0, 31);
  if ((_DWORD)result)
  {
    v3 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 20) = v3;
    if (**(_DWORD **)(a1 + 40) > v3)
      return 0;
    if ((_DWORD)result == 3)
    {
      v4 = &s_11_9;
    }
    else
    {
      if ((_DWORD)result != 2)
      {
        if ((_DWORD)result == 1)
        {
          result = slice_del(a1);
          if ((result & 0x80000000) != 0)
            return result;
        }
        return 1;
      }
      v4 = &s_10_22;
    }
    result = slice_from_s(a1, 1, v4);
    if ((result & 0x80000000) != 0)
      return result;
    return 1;
  }
  return result;
}

uint64_t r_plur_owner(uint64_t a1)
{
  uint64_t v1;
  char v3;
  uint64_t result;
  int v5;
  void *v6;

  v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 <= *(_DWORD *)(a1 + 16))
    return 0;
  v3 = *(_BYTE *)(v1 + *(_QWORD *)a1 - 1);
  if ((v3 & 0xE0) != 0x60 || ((0x2A10u >> v3) & 1) == 0)
    return 0;
  result = find_among_b(a1, (uint64_t)&a_11_0, 42);
  if (!(_DWORD)result)
    return result;
  v5 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v5;
  if (**(_DWORD **)(a1 + 40) > v5)
    return 0;
  if ((_DWORD)result == 3)
  {
    v6 = &s_13_35;
    goto LABEL_15;
  }
  if ((_DWORD)result == 2)
  {
    v6 = &s_12_9;
LABEL_15:
    result = slice_from_s(a1, 1, v6);
    if ((result & 0x80000000) != 0)
      return result;
    return 1;
  }
  if ((_DWORD)result != 1)
    return 1;
  result = slice_del(a1);
  if ((result & 0x80000000) == 0)
    return 1;
  return result;
}

uint64_t r_plural(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  int v4;
  void *v5;

  v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 <= *(_DWORD *)(a1 + 16) || *(_BYTE *)(v1 + *(_QWORD *)a1 - 1) != 107)
    return 0;
  result = find_among_b(a1, (uint64_t)&a_8_3, 7);
  if (!(_DWORD)result)
    return result;
  v4 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v4;
  if (**(_DWORD **)(a1 + 40) > v4)
    return 0;
  if ((_DWORD)result == 3)
  {
    result = slice_del(a1);
    if ((result & 0x80000000) != 0)
      return result;
    return 1;
  }
  if ((_DWORD)result != 2)
  {
    if ((_DWORD)result == 1)
    {
      v5 = &s_6_121;
      goto LABEL_14;
    }
    return 1;
  }
  v5 = &s_7_22;
LABEL_14:
  result = slice_from_s(a1, 1, v5);
  if ((result & 0x80000000) == 0)
    return 1;
  return result;
}

_QWORD *hungarian_UTF_8_create_env()
{
  return SN_create_env(0, 1, 0);
}

void hungarian_UTF_8_close_env(uint64_t a1)
{
  SN_close_env(a1, 0);
}

uint64_t r_double(uint64_t a1)
{
  uint64_t v1;
  char v3;
  uint64_t result;
  int v5;

  v1 = *(int *)(a1 + 8);
  if ((int)v1 - 1 <= *(_DWORD *)(a1 + 16))
    return 0;
  v3 = *(_BYTE *)(*(_QWORD *)a1 + v1 - 1);
  if ((v3 & 0xE0) != 0x60 || ((0x65D7CDCu >> v3) & 1) == 0)
    return 0;
  v5 = *(_DWORD *)(a1 + 12);
  result = find_among_b(a1, (uint64_t)&a_2_5, 23);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 8) = v1 - v5 + *(_DWORD *)(a1 + 12);
    return 1;
  }
  return result;
}

uint64_t r_undouble_0(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;

  v2 = skip_utf8(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 16), 0, -1);
  if ((v2 & 0x80000000) != 0)
    return 0;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 24) = v2;
  v3 = skip_utf8(*(_QWORD *)a1, v2, *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 12), -1);
  if (v3 < 0)
    return 0;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 20) = v3;
  v4 = slice_del(a1);
  if (v4 >= 0)
    return 1;
  else
    return v4 & (v4 >> 31);
}

uint64_t romanian_UTF_8_stem(uint64_t a1)
{
  unsigned int v2;
  uint64_t i;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t result;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  int among_b;
  int v27;
  void *v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  void *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  void *v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int among;
  int v62;
  uint64_t v63;
  void *v64;

  v2 = *(_DWORD *)(a1 + 8);
  for (i = v2; ; *(_DWORD *)(a1 + 8) = i)
  {
    v4 = in_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 0);
    v5 = *(unsigned int *)(a1 + 12);
    if (v4)
    {
      v7 = *(unsigned int *)(a1 + 12);
      goto LABEL_16;
    }
    v6 = *(unsigned int *)(a1 + 8);
    *(_DWORD *)(a1 + 20) = v6;
    if ((_DWORD)v6 == (_DWORD)v5 || *(_BYTE *)(*(_QWORD *)a1 + (int)v6) != 117)
      break;
    *(_DWORD *)(a1 + 8) = v6 + 1;
    *(_DWORD *)(a1 + 24) = v6 + 1;
    if (in_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 0))
    {
      v5 = *(unsigned int *)(a1 + 12);
      break;
    }
    v8 = a1;
    v9 = &s_0_51;
LABEL_11:
    result = slice_from_s(v8, 1, v9);
    if ((result & 0x80000000) != 0)
      return result;
LABEL_12:
    ;
  }
  *(_DWORD *)(a1 + 8) = v6;
  v7 = v6;
  if ((_DWORD)v6 == (_DWORD)v5)
    goto LABEL_16;
  v7 = v5;
  if (*(_BYTE *)(*(_QWORD *)a1 + (int)v6) != 105)
    goto LABEL_16;
  *(_DWORD *)(a1 + 8) = v6 + 1;
  *(_DWORD *)(a1 + 24) = v6 + 1;
  if (!in_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 0))
  {
    v8 = a1;
    v9 = &s_1_46;
    goto LABEL_11;
  }
  v7 = *(unsigned int *)(a1 + 12);
LABEL_16:
  *(_DWORD *)(a1 + 8) = i;
  v11 = skip_utf8(*(_QWORD *)a1, i, 0, v7, 1);
  if ((v11 & 0x80000000) == 0)
  {
    i = v11;
    goto LABEL_12;
  }
  *(_DWORD *)(a1 + 8) = v2;
  v12 = *(_DWORD **)(a1 + 40);
  *v12 = *(_DWORD *)(a1 + 12);
  v12[1] = *(_DWORD *)(a1 + 12);
  v12[2] = *(_DWORD *)(a1 + 12);
  v13 = *(_DWORD *)(a1 + 8);
  if (!in_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 0))
  {
    if ((v14 = *(_DWORD *)(a1 + 8), !out_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 0))
      && (v17 = out_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 1), (v17 & 0x80000000) == 0)
      || (*(_DWORD *)(a1 + 8) = v14, !in_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 0))
      && (v17 = in_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 1), (v17 & 0x80000000) == 0))
    {
LABEL_31:
      v16 = *(_DWORD *)(a1 + 8) + v17;
      goto LABEL_32;
    }
  }
  *(_DWORD *)(a1 + 8) = v13;
  if (!out_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 0))
  {
    v15 = *(_DWORD *)(a1 + 8);
    if (!out_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 0))
    {
      v17 = out_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 1);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_31;
    }
    *(_DWORD *)(a1 + 8) = v15;
    if (!in_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 0))
    {
      v16 = skip_utf8(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), 0, *(unsigned int *)(a1 + 12), 1);
      if ((v16 & 0x80000000) == 0)
LABEL_32:
        **(_DWORD **)(a1 + 40) = v16;
    }
  }
  *(_DWORD *)(a1 + 8) = v13;
  v18 = out_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 1);
  if ((v18 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) += v18;
    v19 = in_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 1);
    if ((v19 & 0x80000000) == 0)
    {
      v20 = *(_DWORD *)(a1 + 8) + v19;
      *(_DWORD *)(a1 + 8) = v20;
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) = v20;
      v21 = out_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 1);
      if ((v21 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) += v21;
        v22 = in_grouping_U(a1, (uint64_t)&g_v_4, 97, 259, 1);
        if ((v22 & 0x80000000) == 0)
          *(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) = *(_DWORD *)(a1 + 8) + v22;
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v13;
  v23 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v23;
  *(_DWORD *)(a1 + 24) = v23;
  v24 = v23 - 1;
  if ((int)v24 <= v13)
    goto LABEL_55;
  v25 = *(_BYTE *)(*(_QWORD *)a1 + v24);
  if ((v25 & 0xE0) != 0x60)
    goto LABEL_55;
  if (((0x41222u >> v25) & 1) == 0)
    goto LABEL_55;
  among_b = find_among_b(a1, (uint64_t)&a_1_6, 16);
  if (!among_b)
    goto LABEL_55;
  v27 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v27;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) > v27)
    goto LABEL_55;
  switch(among_b)
  {
    case 1:
      result = slice_del(a1);
      if ((result & 0x80000000) == 0)
        goto LABEL_55;
      return result;
    case 2:
      v28 = &s_4_45;
      goto LABEL_51;
    case 3:
      v28 = &s_5_47;
      goto LABEL_51;
    case 4:
      v28 = &s_6_122;
      goto LABEL_51;
    case 5:
      v29 = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 2, &s_7_23))
        goto LABEL_55;
      *(_DWORD *)(a1 + 8) = v27 - v29 + *(_DWORD *)(a1 + 12);
      v28 = &s_8_99;
LABEL_51:
      v30 = a1;
      v31 = 1;
      break;
    case 6:
      v28 = &s_9_12;
      v30 = a1;
      v31 = 2;
      break;
    case 7:
      v28 = &s_10_31;
      v30 = a1;
      v31 = 4;
      break;
    default:
      goto LABEL_55;
  }
  result = slice_from_s(v30, v31, v28);
  if ((result & 0x80000000) == 0)
  {
LABEL_55:
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
    **(_BYTE **)(a1 + 48) = 0;
    v32 = *(_DWORD *)(a1 + 8);
    v33 = v32 - *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 24) = v32;
    v34 = find_among_b(a1, (uint64_t)&a_2_6, 46);
    if (v34)
    {
      while (2)
      {
        v35 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 20) = v35;
        if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) <= v35)
        {
          switch(v34)
          {
            case 1:
              v36 = a1;
              v37 = 4;
              v38 = &s_11_42;
              goto LABEL_64;
            case 2:
              v36 = a1;
              v37 = 4;
              v38 = &s_12_10;
              goto LABEL_64;
            case 3:
              v36 = a1;
              v37 = 2;
              v38 = &s_13_36;
              goto LABEL_64;
            case 4:
              v36 = a1;
              v37 = 2;
              v38 = &s_14_13;
              goto LABEL_64;
            case 5:
              v36 = a1;
              v37 = 2;
              v38 = &s_15_6;
              goto LABEL_64;
            case 6:
              v36 = a1;
              v37 = 2;
              v38 = &s_16_2;
LABEL_64:
              result = slice_from_s(v36, v37, v38);
              if ((result & 0x80000000) == 0)
                goto LABEL_65;
              return result;
            default:
LABEL_65:
              **(_BYTE **)(a1 + 48) = 1;
              v39 = *(_DWORD *)(a1 + 12) + v33;
              *(_DWORD *)(a1 + 8) = v39;
              *(_DWORD *)(a1 + 24) = v39;
              v34 = find_among_b(a1, (uint64_t)&a_2_6, 46);
              if (!v34)
                break;
              continue;
          }
        }
        break;
      }
    }
    v40 = *(_DWORD *)(a1 + 12) + v33;
    *(_DWORD *)(a1 + 8) = v40;
    *(_DWORD *)(a1 + 24) = v40;
    v41 = find_among_b(a1, (uint64_t)&a_3_6, 62);
    if (!v41)
      goto LABEL_78;
    v42 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 20) = v42;
    if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v42)
      goto LABEL_78;
    if (v41 == 3)
    {
      v43 = &s_19_2;
      v44 = a1;
      v45 = 3;
    }
    else
    {
      if (v41 != 2)
      {
        if (v41 == 1)
        {
          result = slice_del(a1);
          if ((result & 0x80000000) != 0)
            return result;
        }
LABEL_77:
        **(_BYTE **)(a1 + 48) = 1;
LABEL_78:
        v46 = *(_DWORD *)(a1 + 12);
        *(_DWORD *)(a1 + 8) = v46;
        if (!**(_BYTE **)(a1 + 48))
        {
          v47 = **(_DWORD **)(a1 + 40);
          if (v46 >= v47)
          {
            v48 = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 16) = v47;
            *(_DWORD *)(a1 + 24) = v46;
            v49 = find_among_b(a1, (uint64_t)&a_4_5, 94);
            if (!v49)
              goto LABEL_88;
            v50 = *(_DWORD *)(a1 + 8);
            *(_DWORD *)(a1 + 20) = v50;
            if (v49 == 2)
              goto LABEL_87;
            if (v49 != 1)
              goto LABEL_88;
            v51 = *(_DWORD *)(a1 + 12);
            if (!out_grouping_b_U(a1, (uint64_t)&g_v_4, 97, 259, 0))
            {
LABEL_87:
              result = slice_del(a1);
              if ((result & 0x80000000) != 0)
                return result;
            }
            else
            {
              v52 = *(_DWORD *)(a1 + 16);
              v53 = *(_DWORD *)(a1 + 12) + v50 - v51;
              *(_DWORD *)(a1 + 8) = v53;
              if (v53 > v52)
              {
                v54 = v53 - 1;
                if (*(_BYTE *)(*(_QWORD *)a1 + v54) == 117)
                {
                  *(_DWORD *)(a1 + 8) = v54;
                  goto LABEL_87;
                }
              }
            }
LABEL_88:
            *(_DWORD *)(a1 + 16) = v48;
          }
        }
        v55 = *(_DWORD *)(a1 + 12);
        *(_DWORD *)(a1 + 8) = v55;
        *(_DWORD *)(a1 + 24) = v55;
        if (find_among_b(a1, (uint64_t)&a_5_5, 5))
        {
          v56 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 20) = v56;
          if (**(_DWORD **)(a1 + 40) <= v56)
          {
            result = slice_del(a1);
            if ((result & 0x80000000) != 0)
              return result;
          }
        }
        v57 = *(unsigned int *)(a1 + 12);
        v58 = *(unsigned int *)(a1 + 16);
        *(_DWORD *)(a1 + 8) = v58;
        v59 = v58;
        while (2)
        {
          *(_DWORD *)(a1 + 20) = v59;
          if ((int)v59 < (int)v57)
          {
            v60 = *(unsigned __int8 *)(*(_QWORD *)a1 + (int)v59);
            if (v60 == 73 || v60 == 85)
            {
              among = find_among(a1, (uint64_t)&a_0_6, 3);
              if (!among)
                goto LABEL_109;
              v59 = *(unsigned int *)(a1 + 8);
              *(_DWORD *)(a1 + 24) = v59;
              switch(among)
              {
                case 1:
                  v63 = a1;
                  v64 = &s_2_46;
                  break;
                case 2:
                  v63 = a1;
                  v64 = &s_3_92;
                  break;
                case 3:
                  v57 = *(unsigned int *)(a1 + 12);
                  goto LABEL_102;
                default:
                  goto LABEL_104;
              }
              result = slice_from_s(v63, 1, v64);
              if ((result & 0x80000000) != 0)
                return result;
              goto LABEL_104;
            }
          }
          *(_DWORD *)(a1 + 24) = v59;
LABEL_102:
          v62 = skip_utf8(*(_QWORD *)a1, v59, 0, v57, 1);
          if (v62 < 0)
          {
LABEL_109:
            *(_DWORD *)(a1 + 8) = v58;
            return 1;
          }
          *(_DWORD *)(a1 + 8) = v62;
LABEL_104:
          v59 = *(unsigned int *)(a1 + 8);
          v57 = *(unsigned int *)(a1 + 12);
          continue;
        }
      }
      if (!eq_s_b(a1, 2, &s_17_10))
        goto LABEL_78;
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
      v43 = &s_18_6;
      v44 = a1;
      v45 = 1;
    }
    result = slice_from_s(v44, v45, v43);
    if ((result & 0x80000000) != 0)
      return result;
    goto LABEL_77;
  }
  return result;
}

_QWORD *romanian_UTF_8_create_env()
{
  return SN_create_env(0, 3, 1);
}

void romanian_UTF_8_close_env(uint64_t a1)
{
  SN_close_env(a1, 0);
}

uint64_t tamil_UTF_8_stem(uint64_t a1)
{
  int v2;
  uint64_t result;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  int v10;

  *(_BYTE *)(*(_QWORD *)(a1 + 48) + 1) = 0;
  v2 = *(_DWORD *)(a1 + 8);
  result = r_fix_ending(a1);
  if ((result & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) = v2;
    if ((int)len_utf8(*(char **)a1) < 5)
    {
      return 0;
    }
    else
    {
      v4 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 20) = v4;
      if (!eq_s(a1, 3, &s_12_11)
        || !find_among(a1, (uint64_t)&a_0_7, 10)
        || !eq_s(a1, 3, &s_13_37)
        || (*(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8), result = slice_del(a1), (result & 0x80000000) == 0)
        && (result = r_fix_va_start((_DWORD *)a1), (result & 0x80000000) == 0))
      {
        *(_DWORD *)(a1 + 8) = v4;
        **(_BYTE **)(a1 + 48) = 0;
        v5 = *(_DWORD *)(a1 + 12);
        v6 = *(int *)(a1 + 8);
        *(_DWORD *)(a1 + 20) = v6;
        v7 = v6 + 2;
        if ((int)v7 >= v5
          || (v8 = *(_BYTE *)(*(_QWORD *)a1 + v7), (v8 & 0xE0) != 0x80)
          || ((0x2A0u >> v8) & 1) == 0
          || !find_among(a1, (uint64_t)&a_11_1, 3)
          || !find_among(a1, (uint64_t)&a_12_0, 10)
          || !eq_s(a1, 3, &s_45_1)
          || (*(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8), result = slice_del(a1), (result & 0x80000000) == 0)
          && (**(_BYTE **)(a1 + 48) = 1, result = r_fix_va_start((_DWORD *)a1), (result & 0x80000000) == 0))
        {
          *(_DWORD *)(a1 + 8) = v4;
          if ((int)len_utf8(*(char **)a1) < 5)
            goto LABEL_21;
          **(_BYTE **)(a1 + 48) = 0;
          v9 = *(_DWORD *)(a1 + 12);
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = v9;
          *(_DWORD *)(a1 + 24) = v9;
          if (find_among_b(a1, (uint64_t)&a_14_0, 3))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
            result = slice_from_s(a1, 3, &s_53_6);
            if ((result & 0x80000000) != 0)
              return result;
            **(_BYTE **)(a1 + 48) = 1;
          }
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
          result = r_fix_endings(a1);
          if ((result & 0x80000000) == 0)
          {
LABEL_21:
            *(_DWORD *)(a1 + 8) = v4;
            **(_BYTE **)(a1 + 48) = 0;
            if ((int)len_utf8(*(char **)a1) < 5)
              goto LABEL_25;
            v10 = *(_DWORD *)(a1 + 12);
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 8);
            *(_DWORD *)(a1 + 8) = v10;
            *(_DWORD *)(a1 + 24) = v10;
            if (!eq_s_b(a1, 9, &s_54_5)
              || (*(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8),
                  result = slice_from_s(a1, 3, &s_55_3),
                  (result & 0x80000000) == 0)
              && (**(_BYTE **)(a1 + 48) = 1,
                  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16),
                  result = r_fix_ending(a1),
                  (result & 0x80000000) == 0))
            {
LABEL_25:
              *(_DWORD *)(a1 + 8) = v4;
              result = r_remove_common_word_endings(a1);
              if ((result & 0x80000000) == 0)
              {
                *(_DWORD *)(a1 + 8) = v4;
                result = r_remove_vetrumai_urupukal(a1);
                if ((result & 0x80000000) == 0)
                {
                  *(_DWORD *)(a1 + 8) = v4;
                  result = r_remove_plural_suffix(a1);
                  if ((result & 0x80000000) == 0)
                  {
                    *(_DWORD *)(a1 + 8) = v4;
                    result = r_remove_command_suffixes(a1);
                    if ((result & 0x80000000) == 0)
                    {
                      *(_DWORD *)(a1 + 8) = v4;
                      result = r_remove_tense_suffixes(a1);
                      if ((result & 0x80000000) == 0)
                      {
                        *(_DWORD *)(a1 + 8) = v4;
                        return 1;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t r_fix_ending(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  uint64_t result;
  int v7;
  int v8;
  int v9;
  void *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  char v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;

  if ((int)len_utf8(*(char **)a1) < 4)
    return 0;
  v3 = *(_DWORD *)(a1 + 8);
  v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 24) = v2;
  if (v2 - 5 > v3)
  {
    v4 = *(unsigned __int8 *)(v2 + *(_QWORD *)a1 - 1);
    if (v4 == 164 || v4 == 141)
    {
      if (find_among_b(a1, (uint64_t)&a_1_7, 3))
      {
LABEL_6:
        v5 = *(_DWORD *)(a1 + 8);
        goto LABEL_12;
      }
      v2 = *(_DWORD *)(a1 + 12);
    }
  }
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 24) = v2;
  if (eq_s_b(a1, 6, &s_14_14))
  {
    v8 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    if (find_among_b(a1, (uint64_t)&a_2_7, 3))
    {
LABEL_11:
      v5 = *(_DWORD *)(a1 + 12) + v8 - v7;
      *(_DWORD *)(a1 + 8) = v5;
LABEL_12:
      *(_DWORD *)(a1 + 20) = v5;
      result = slice_del(a1);
      if ((result & 0x80000000) != 0)
        return result;
      goto LABEL_19;
    }
  }
  v9 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 24) = v9;
  if (eq_s_b(a1, 12, &s_15_7)
    || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12), eq_s_b(a1, 12, &s_16_3)))
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    v10 = &s_17_11;
LABEL_17:
    v11 = a1;
    v12 = 6;
    goto LABEL_18;
  }
  v13 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 24) = v13;
  if (eq_s_b(a1, 12, &s_18_7))
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    v10 = &s_19_3;
    goto LABEL_17;
  }
  v14 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v14;
  *(_DWORD *)(a1 + 24) = v14;
  if (eq_s_b(a1, 12, &s_20_4))
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    v10 = &s_21_33;
    goto LABEL_17;
  }
  v15 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v15;
  *(_DWORD *)(a1 + 24) = v15;
  if (eq_s_b(a1, 12, &s_22_15))
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    v10 = &s_23_8;
    goto LABEL_17;
  }
  v16 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v16;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 48) + 1))
  {
    *(_DWORD *)(a1 + 24) = v16;
    v17 = eq_s_b(a1, 12, &s_24_4);
    v18 = *(_DWORD *)(a1 + 12);
    if (v17)
    {
      v19 = *(_DWORD *)(a1 + 8);
      v20 = eq_s_b(a1, 3, &s_25_2);
      v16 = *(_DWORD *)(a1 + 12);
      if (!v20)
      {
        v21 = v16 + v19 - v18;
        *(_DWORD *)(a1 + 8) = v21;
        *(_DWORD *)(a1 + 20) = v21;
        result = slice_from_s(a1, 6, &s_26_3);
        if ((result & 0x80000000) == 0)
        {
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
LABEL_19:
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
          return 1;
        }
        return result;
      }
    }
    else
    {
      v16 = *(_DWORD *)(a1 + 12);
    }
  }
  *(_DWORD *)(a1 + 8) = v16;
  *(_DWORD *)(a1 + 24) = v16;
  if (eq_s_b(a1, 9, &s_27_7)
    || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12), eq_s_b(a1, 15, &s_28_4)))
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    v10 = &s_29_2;
LABEL_36:
    v11 = a1;
    v12 = 3;
LABEL_18:
    result = slice_from_s(v11, v12, v10);
    if ((result & 0x80000000) != 0)
      return result;
    goto LABEL_19;
  }
  v22 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v22;
  *(_DWORD *)(a1 + 24) = v22;
  if (eq_s_b(a1, 3, &s_30_10)
    && find_among_b(a1, (uint64_t)&a_3_7, 6)
    && eq_s_b(a1, 3, &s_31_2)
    && find_among_b(a1, (uint64_t)&a_4_6, 6))
  {
    goto LABEL_6;
  }
  v23 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v23;
  *(_DWORD *)(a1 + 24) = v23;
  if (eq_s_b(a1, 9, &s_32_8))
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    v10 = &s_33_2;
    goto LABEL_36;
  }
  v24 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v24;
  *(_DWORD *)(a1 + 24) = v24;
  if (eq_s_b(a1, 3, &s_34_15) && find_among_b(a1, (uint64_t)&a_5_6, 6))
    goto LABEL_6;
  v25 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v25;
  *(_DWORD *)(a1 + 24) = v25;
  if (eq_s_b(a1, 3, &s_35_2))
  {
    v26 = *(_DWORD *)(a1 + 12);
    v27 = *(int *)(a1 + 8);
    if ((int)v27 - 2 > *(_DWORD *)(a1 + 16) && (v28 = *(_BYTE *)(v27 + *(_QWORD *)a1 - 1), (v28 & 0xE0) == 0xA0))
    {
      v29 = 0x3D8000u >> v28;
      v30 = *(_DWORD *)(a1 + 12);
      if ((v29 & 1) != 0)
      {
        if (find_among_b(a1, (uint64_t)&a_6_4, 6))
        {
LABEL_53:
          if (eq_s_b(a1, 3, &s_36_8))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
            v10 = &s_37_3;
            goto LABEL_36;
          }
          goto LABEL_55;
        }
        v30 = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      v30 = *(_DWORD *)(a1 + 12);
    }
    *(_DWORD *)(a1 + 8) = v27 - v26 + v30;
    if (!find_among_b(a1, (uint64_t)&a_7_4, 6))
      goto LABEL_55;
    goto LABEL_53;
  }
LABEL_55:
  v31 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v31;
  *(_DWORD *)(a1 + 24) = v31;
  if (find_among_b(a1, (uint64_t)&a_8_4, 3))
    goto LABEL_6;
  v32 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v32;
  *(_DWORD *)(a1 + 24) = v32;
  if (eq_s_b(a1, 6, &s_38_4))
  {
    v8 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    if (!find_among_b(a1, (uint64_t)&a_9_3, 8))
      goto LABEL_11;
  }
  v33 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v33;
  *(_DWORD *)(a1 + 24) = v33;
  if (eq_s_b(a1, 6, &s_39_36))
  {
    v35 = *(_DWORD *)(a1 + 8);
    v34 = *(_DWORD *)(a1 + 12);
    if (!eq_s_b(a1, 3, &s_40_5))
    {
      v41 = *(_DWORD *)(a1 + 12) + v35 - v34;
      *(_DWORD *)(a1 + 8) = v41;
      *(_DWORD *)(a1 + 20) = v41;
      v10 = &s_41_12;
      goto LABEL_17;
    }
  }
  v36 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v36;
  *(_DWORD *)(a1 + 24) = v36;
  if (eq_s_b(a1, 6, &s_42_2))
    goto LABEL_6;
  v37 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v37;
  *(_DWORD *)(a1 + 24) = v37;
  result = eq_s_b(a1, 3, &s_43_11);
  if ((_DWORD)result)
  {
    v38 = *(_DWORD *)(a1 + 12) - *(_DWORD *)(a1 + 8);
    if (find_among_b(a1, (uint64_t)&a_10_1, 8)
      || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v38, result = eq_s_b(a1, 3, &s_44_95), (_DWORD)result))
    {
      v39 = *(_DWORD *)(a1 + 12) - v38;
      *(_DWORD *)(a1 + 8) = v39;
      *(_DWORD *)(a1 + 20) = v39;
      v40 = slice_del(a1);
      if (v40 < 0)
        return v40 & (v40 >> 31);
      goto LABEL_19;
    }
  }
  return result;
}

uint64_t r_remove_common_word_endings(uint64_t a1)
{
  int v2;
  uint64_t result;
  int v4;
  int v5;
  int v6;
  int v7;

  **(_BYTE **)(a1 + 48) = 0;
  v2 = len_utf8(*(char **)a1);
  result = 0;
  if (v2 >= 5)
  {
    v4 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = v4;
    *(_DWORD *)(a1 + 24) = v4;
    if (!eq_s_b(a1, 12, &s_56_12))
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (!eq_s_b(a1, 15, &s_57_25))
      {
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
        if (!eq_s_b(a1, 12, &s_58_3))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
          if (!eq_s_b(a1, 15, &s_59_2))
          {
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
            if (!eq_s_b(a1, 9, &s_60_10))
            {
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
              if (!eq_s_b(a1, 12, &s_61_44))
              {
                *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
                if (!eq_s_b(a1, 15, &s_62_3))
                {
                  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
                  if (!eq_s_b(a1, 12, &s_63_3))
                  {
                    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
                    if (!eq_s_b(a1, 12, &s_64_6))
                    {
                      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
                      if (!eq_s_b(a1, 9, &s_65_1))
                      {
                        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
                        if (!eq_s_b(a1, 15, &s_66_10))
                        {
                          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
                          if (eq_s_b(a1, 9, &s_67_3)
                            && (v6 = *(_DWORD *)(a1 + 8),
                                v5 = *(_DWORD *)(a1 + 12),
                                !find_among_b(a1, (uint64_t)&a_16_0, 8)))
                          {
                            *(_DWORD *)(a1 + 8) = v6 - v5 + *(_DWORD *)(a1 + 12);
                          }
                          else
                          {
                            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
                            if (!eq_s_b(a1, 6, &s_68_6))
                            {
                              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
                              if (!eq_s_b(a1, 9, &s_69_3))
                              {
                                v7 = *(_DWORD *)(a1 + 12);
                                *(_DWORD *)(a1 + 8) = v7;
                                *(_DWORD *)(a1 + 24) = v7;
                                result = find_among_b(a1, (uint64_t)&a_17_0, 13);
                                if (!(_DWORD)result)
                                  return result;
                                *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
                                result = slice_del(a1);
                                if ((result & 0x80000000) != 0)
                                  return result;
LABEL_22:
                                **(_BYTE **)(a1 + 48) = 1;
                                *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
                                LODWORD(result) = r_fix_endings(a1);
                                if ((int)result >= 0)
                                  return 1;
                                else
                                  return result;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    result = slice_from_s(a1, 3, &s_70_7);
    if ((result & 0x80000000) != 0)
      return result;
    goto LABEL_22;
  }
  return result;
}

uint64_t r_remove_vetrumai_urupukal(uint64_t a1)
{
  int v2;
  uint64_t result;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  void *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;

  **(_BYTE **)(a1 + 48) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 48) + 1) = 0;
  v2 = len_utf8(*(char **)a1);
  result = 0;
  if (v2 < 5)
    return result;
  v4 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 24) = v4;
  if (eq_s_b(a1, 6, &s_71_3))
    goto LABEL_3;
  v5 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 24) = v5;
  if ((eq_s_b(a1, 9, &s_72_84)
     || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12), eq_s_b(a1, 3, &s_73_8)))
    && (v7 = *(_DWORD *)(a1 + 8), v6 = *(_DWORD *)(a1 + 12), !find_among_b(a1, (uint64_t)&a_18_0, 6))
    || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12), eq_s_b(a1, 3, &s_74_0))
    && (v7 = *(_DWORD *)(a1 + 8), v6 = *(_DWORD *)(a1 + 12), find_among_b(a1, (uint64_t)&a_19_0, 6))
    && eq_s_b(a1, 3, &s_75_0))
  {
    v8 = v7 - v6 + *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v8;
    *(_DWORD *)(a1 + 20) = v8;
    v9 = &s_76_0;
    goto LABEL_41;
  }
  v10 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v10;
  *(_DWORD *)(a1 + 24) = v10;
  if (eq_s_b(a1, 9, &s_77_0))
    goto LABEL_40;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if (eq_s_b(a1, 9, &s_78_0))
    goto LABEL_40;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if (eq_s_b(a1, 9, &s_79_0))
    goto LABEL_40;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if (eq_s_b(a1, 9, &s_80_0))
    goto LABEL_40;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if (eq_s_b(a1, 9, &s_81_0))
  {
    v12 = *(_DWORD *)(a1 + 8);
    v11 = *(_DWORD *)(a1 + 12);
    if (!eq_s_b(a1, 3, &s_82_0))
      goto LABEL_39;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if (eq_s_b(a1, 15, &s_83_0))
    goto LABEL_40;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if (eq_s_b(a1, 21, &s_84_0))
    goto LABEL_40;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if (eq_s_b(a1, 9, &s_85_0))
    goto LABEL_40;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if ((int)len_utf8(*(char **)a1) >= 7)
  {
    if (eq_s_b(a1, 12, &s_86_0))
      goto LABEL_40;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if (eq_s_b(a1, 9, &s_87_0))
    goto LABEL_40;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if (eq_s_b(a1, 9, &s_88_0))
    goto LABEL_40;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if (eq_s_b(a1, 12, &s_89_0))
    goto LABEL_40;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if (eq_s_b(a1, 6, &s_90_0))
  {
    v12 = *(_DWORD *)(a1 + 8);
    v11 = *(_DWORD *)(a1 + 12);
    if (!find_among_b(a1, (uint64_t)&a_20_0, 8))
    {
LABEL_39:
      *(_DWORD *)(a1 + 8) = v12 - v11 + *(_DWORD *)(a1 + 12);
      goto LABEL_40;
    }
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  if (eq_s_b(a1, 9, &s_91_0))
  {
LABEL_40:
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    v9 = &s_92_0;
    goto LABEL_41;
  }
  v13 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 24) = v13;
  if (!eq_s_b(a1, 9, &s_93_0))
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
    if (!eq_s_b(a1, 12, &s_94_0))
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (!eq_s_b(a1, 12, &s_95_0))
      {
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
        if (!eq_s_b(a1, 12, &s_96_0))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
          if (!eq_s_b(a1, 12, &s_97_0))
          {
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
            if (!eq_s_b(a1, 12, &s_98_0))
            {
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
              if (!eq_s_b(a1, 6, &s_99_0)
                || (v15 = *(_DWORD *)(a1 + 8),
                    v14 = *(_DWORD *)(a1 + 12),
                    find_among_b(a1, (uint64_t)&a_21_0, 8)))
              {
                v16 = *(_DWORD *)(a1 + 12);
                *(_DWORD *)(a1 + 8) = v16;
                *(_DWORD *)(a1 + 24) = v16;
                result = eq_s_b(a1, 3, &s_100_0);
                if (!(_DWORD)result)
                  return result;
                *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
                v9 = &s_101_0;
LABEL_41:
                result = slice_from_s(a1, 3, v9);
                if ((result & 0x80000000) != 0)
                  return result;
                goto LABEL_42;
              }
              *(_DWORD *)(a1 + 8) = v15 - v14 + *(_DWORD *)(a1 + 12);
            }
          }
        }
      }
    }
  }
LABEL_3:
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
  result = slice_del(a1);
  if ((result & 0x80000000) != 0)
    return result;
LABEL_42:
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  **(_BYTE **)(a1 + 48) = 1;
  *(_BYTE *)(*(_QWORD *)(a1 + 48) + 1) = 1;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  if (!eq_s_b(a1, 9, &s_102_0)
    || (*(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8), result = slice_from_s(a1, 3, &s_103_0), (result & 0x80000000) == 0))
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
    LODWORD(result) = r_fix_endings(a1);
    if ((int)result >= 0)
      return 1;
    else
      return result;
  }
  return result;
}

uint64_t r_remove_plural_suffix(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  void *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t result;
  int v12;

  **(_BYTE **)(a1 + 48) = 0;
  v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 24) = v2;
  if (eq_s_b(a1, 18, &s_46_31))
  {
    v4 = *(_DWORD *)(a1 + 8);
    v3 = *(_DWORD *)(a1 + 12);
    if (!find_among_b(a1, (uint64_t)&a_13_0, 6))
    {
      v10 = *(_DWORD *)(a1 + 12) + v4 - v3;
      *(_DWORD *)(a1 + 8) = v10;
      *(_DWORD *)(a1 + 20) = v10;
      v6 = &s_47_25;
      v8 = a1;
      v9 = 3;
LABEL_9:
      result = slice_from_s(v8, v9, v6);
      if ((result & 0x80000000) != 0)
        return result;
      goto LABEL_10;
    }
  }
  v5 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 24) = v5;
  if (eq_s_b(a1, 15, &s_48_2))
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    v6 = &s_49_2;
LABEL_7:
    v8 = a1;
    v9 = 6;
    goto LABEL_9;
  }
  v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 24) = v7;
  if (eq_s_b(a1, 15, &s_50_6))
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    v6 = &s_51_9;
    goto LABEL_7;
  }
  v12 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v12;
  *(_DWORD *)(a1 + 24) = v12;
  result = eq_s_b(a1, 9, &s_52_3);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
LABEL_10:
      result = 1;
      **(_BYTE **)(a1 + 48) = 1;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
    }
  }
  return result;
}

uint64_t r_remove_command_suffixes(uint64_t a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;

  if ((int)len_utf8(*(char **)a1) < 5)
    return 0;
  result = 0;
  **(_BYTE **)(a1 + 48) = 0;
  v3 = *(_DWORD *)(a1 + 8);
  v4 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 24) = v4;
  if ((int)v4 - 5 <= v3)
    return result;
  if (*(unsigned __int8 *)(v4 + *(_QWORD *)a1 - 1) != 191)
    return 0;
  result = find_among_b(a1, (uint64_t)&a_15_0, 2);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      result = 1;
      **(_BYTE **)(a1 + 48) = 1;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
    }
  }
  return result;
}

uint64_t r_remove_tense_suffixes(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t fixed;
  int v20;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;

  v1 = 1;
  **(_BYTE **)(a1 + 48) = 1;
  v2 = *(_BYTE **)(a1 + 48);
  if (*v2)
  {
    v4 = *(_DWORD *)(a1 + 8);
    while (1)
    {
      *v2 = 0;
      if ((int)len_utf8(*(char **)a1) < 5)
        goto LABEL_80;
      v6 = *(_DWORD *)(a1 + 8);
      v5 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 16) = v6;
      *(_DWORD *)(a1 + 8) = v5;
      *(_DWORD *)(a1 + 24) = v5;
      if (v5 - 8 > v6)
      {
        v7 = *(unsigned __int8 *)(v5 + *(_QWORD *)a1 - 1);
        if (v7 == 141 || v7 == 129)
        {
          if (find_among_b(a1, (uint64_t)&a_22_0, 2))
            goto LABEL_69;
          v5 = *(_DWORD *)(a1 + 12);
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
      *(_DWORD *)(a1 + 24) = v5;
      if (eq_s_b(a1, 12, &s_104_0))
        goto LABEL_69;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_105_0))
        goto LABEL_69;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_106_0))
        goto LABEL_69;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_107))
        goto LABEL_69;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_108))
        goto LABEL_69;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_109))
        goto LABEL_69;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_110))
      {
        v8 = *(_DWORD *)(a1 + 12);
        v9 = *(int *)(a1 + 8);
        if ((int)v9 - 2 <= *(_DWORD *)(a1 + 16) || (v10 = *(_BYTE *)(v9 + *(_QWORD *)a1 - 1), (v10 & 0xE0) != 0x80))
        {
          v12 = *(_DWORD *)(a1 + 12);
LABEL_67:
          v18 = v9 - v8 + v12;
LABEL_68:
          *(_DWORD *)(a1 + 8) = v18;
LABEL_69:
          v17 = *(_DWORD *)(a1 + 8);
          goto LABEL_70;
        }
        v11 = 0x1DC7E0u >> v10;
        v12 = *(_DWORD *)(a1 + 12);
        if ((v11 & 1) == 0)
          goto LABEL_67;
        v22 = *(_DWORD *)(a1 + 8);
        v26 = *(_DWORD *)(a1 + 12);
        if (!find_among_b(a1, (uint64_t)&a_23_0, 12))
        {
          v12 = *(_DWORD *)(a1 + 12);
          v8 = v26;
          LODWORD(v9) = v22;
          goto LABEL_67;
        }
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_111))
        goto LABEL_69;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_112))
        goto LABEL_69;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_113))
        goto LABEL_69;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_114))
        goto LABEL_69;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 3, &s_115))
        goto LABEL_69;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 3, &s_116))
        goto LABEL_69;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 3, &s_117))
        goto LABEL_69;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 3, &s_118))
        goto LABEL_69;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 3, &s_119))
        goto LABEL_69;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_120))
        goto LABEL_69;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_121))
        goto LABEL_69;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_122))
        goto LABEL_69;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 6, &s_123))
      {
        v27 = *(_DWORD *)(a1 + 12);
        v23 = *(_DWORD *)(a1 + 8);
        if (!find_among_b(a1, (uint64_t)&a_24_0, 8))
        {
          v18 = v23 - v27 + *(_DWORD *)(a1 + 12);
          goto LABEL_68;
        }
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 15, &s_124))
        goto LABEL_69;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_125))
        goto LABEL_69;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_126))
        goto LABEL_69;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_127))
        goto LABEL_69;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_128))
        goto LABEL_69;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_129))
        goto LABEL_69;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_130))
        goto LABEL_69;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 6, &s_131))
        goto LABEL_69;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 6, &s_132))
        goto LABEL_69;
      v13 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v13;
      *(_DWORD *)(a1 + 24) = v13;
      if (eq_s_b(a1, 9, &s_133))
      {
        v28 = *(_DWORD *)(a1 + 12);
        v24 = *(_DWORD *)(a1 + 8);
        if (!eq_s_b(a1, 3, &s_134))
        {
          *(_DWORD *)(a1 + 8) = v24 - v28 + *(_DWORD *)(a1 + 12);
LABEL_85:
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
          fixed = slice_from_s(a1, 3, &s_152);
          if ((fixed & 0x80000000) != 0)
            return fixed;
          goto LABEL_71;
        }
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_135))
        goto LABEL_85;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_136))
        goto LABEL_85;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_137))
        goto LABEL_85;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 3, &s_138))
        goto LABEL_85;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_139))
        goto LABEL_85;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_140))
        goto LABEL_85;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_141))
        goto LABEL_85;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_142))
        goto LABEL_85;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_143))
        goto LABEL_85;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_144))
        goto LABEL_85;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_145))
        goto LABEL_85;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_146))
        goto LABEL_85;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_147))
        goto LABEL_85;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_148))
        goto LABEL_85;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_149))
        goto LABEL_85;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 9, &s_150))
        goto LABEL_85;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
      if (eq_s_b(a1, 12, &s_151))
        goto LABEL_85;
      v14 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v14;
      *(_DWORD *)(a1 + 24) = v14;
      if (!eq_s_b(a1, 6, &s_153))
      {
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
        if (!eq_s_b(a1, 6, &s_154))
          goto LABEL_72;
      }
      v29 = *(_DWORD *)(a1 + 12);
      v25 = *(_DWORD *)(a1 + 8);
      v15 = eq_s_b(a1, 3, &s_155);
      v16 = *(_DWORD *)(a1 + 12);
      if (!v15)
        goto LABEL_73;
      v17 = v16 + v25 - v29;
      *(_DWORD *)(a1 + 8) = v17;
LABEL_70:
      *(_DWORD *)(a1 + 20) = v17;
      fixed = slice_del(a1);
      if ((fixed & 0x80000000) != 0)
        return fixed;
LABEL_71:
      **(_BYTE **)(a1 + 48) = 1;
LABEL_72:
      v16 = *(_DWORD *)(a1 + 12);
LABEL_73:
      *(_DWORD *)(a1 + 8) = v16;
      *(_DWORD *)(a1 + 24) = v16;
      if (v16 - 8 > *(_DWORD *)(a1 + 16))
      {
        v20 = *(unsigned __int8 *)(*(_QWORD *)a1 + v16 - 1);
        if (v20 == 177 || v20 == 141)
        {
          if (find_among_b(a1, (uint64_t)&a_25_0, 6))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
            fixed = slice_del(a1);
            if ((fixed & 0x80000000) != 0)
              return fixed;
            **(_BYTE **)(a1 + 48) = 1;
          }
        }
      }
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
      fixed = r_fix_endings(a1);
      if ((fixed & 0x80000000) != 0)
        return fixed;
LABEL_80:
      *(_DWORD *)(a1 + 8) = v4;
      v2 = *(_BYTE **)(a1 + 48);
      if (!*v2)
        return 1;
    }
  }
  return v1;
}

_QWORD *tamil_UTF_8_create_env()
{
  return SN_create_env(0, 0, 2);
}

void tamil_UTF_8_close_env(uint64_t a1)
{
  SN_close_env(a1, 0);
}

uint64_t r_fix_va_start(_DWORD *a1)
{
  int v2;
  void *v3;
  uint64_t result;

  v2 = a1[2];
  eq_s((uint64_t)a1, 6, &s_0_52);
  a1[2] = v2;
  a1[5] = v2;
  if (eq_s((uint64_t)a1, 6, &s_1_47))
  {
    a1[6] = a1[2];
    v3 = &s_2_47;
  }
  else
  {
    a1[2] = v2;
    eq_s((uint64_t)a1, 6, &s_3_93);
    a1[2] = v2;
    a1[5] = v2;
    if (eq_s((uint64_t)a1, 6, &s_4_94))
    {
      a1[6] = a1[2];
      v3 = &s_5_48;
    }
    else
    {
      a1[2] = v2;
      eq_s((uint64_t)a1, 6, &s_6_123);
      a1[2] = v2;
      a1[5] = v2;
      if (eq_s((uint64_t)a1, 6, &s_7_24))
      {
        a1[6] = a1[2];
        v3 = &s_8_100;
      }
      else
      {
        a1[2] = v2;
        eq_s((uint64_t)a1, 6, &s_9_13);
        a1[2] = v2;
        a1[5] = v2;
        result = eq_s((uint64_t)a1, 6, &s_10_32);
        if (!(_DWORD)result)
          return result;
        a1[6] = a1[2];
        v3 = &s_11_43;
      }
    }
  }
  result = slice_from_s((uint64_t)a1, 3, v3);
  if ((result & 0x80000000) == 0)
    return 1;
  return result;
}

uint64_t r_fix_endings(uint64_t a1)
{
  unsigned int v1;
  int v3;
  int fixed;
  int v5;
  int v6;
  int v7;

  v3 = *(_DWORD *)(a1 + 8);
  do
  {
    fixed = r_fix_ending(a1);
    if (fixed >= 0)
      v5 = v1;
    else
      v5 = fixed;
    v6 = fixed >> 31;
    if (fixed)
    {
      v1 = v5;
      v7 = fixed >> 31;
    }
    else
    {
      v7 = 4;
    }
    if (v7)
    {
      if (v7 == 4)
      {
        *(_DWORD *)(a1 + 8) = v3;
        return 1;
      }
    }
    else
    {
      v6 = 2;
    }
  }
  while (v6 == 2);
  if (v6)
    return v1;
  else
    return 1;
}

uint64_t indonesian_UTF_8_stem(uint64_t a1)
{
  int v2;
  int i;
  int *v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int among;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  void *v26;
  _DWORD *v27;
  int v28;
  int v29;
  void *v30;
  _DWORD *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;

  **(_DWORD **)(a1 + 40) = 0;
  v2 = *(_DWORD *)(a1 + 8);
  for (i = out_grouping_U(a1, (uint64_t)&g_vowel, 97, 117, 1);
        (i & 0x80000000) == 0;
        i = out_grouping_U(a1, (uint64_t)&g_vowel, 97, 117, 1))
  {
    *(_DWORD *)(a1 + 8) += i;
    ++**(_DWORD **)(a1 + 40);
  }
  *(_DWORD *)(a1 + 8) = v2;
  v4 = *(int **)(a1 + 40);
  if (*v4 < 3)
    return 0;
  v4[1] = 0;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 24) = v6;
  if ((int)v6 - 2 > v5 && ((v7 = *(unsigned __int8 *)(v6 + *(_QWORD *)a1 - 1), v7 == 110) || v7 == 104))
  {
    if (find_among_b(a1, (uint64_t)&a_0_8, 3))
    {
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
      v8 = slice_del(a1);
      if ((v8 & 0x80000000) != 0)
        return v8;
      v4 = *(int **)(a1 + 40);
      --*v4;
      v9 = 1;
    }
    else
    {
      v9 = 0;
      v4 = *(int **)(a1 + 40);
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v10;
  if (*v4 < 3)
    return 0;
  *(_DWORD *)(a1 + 24) = v10;
  v11 = v10 - 1;
  if ((int)v11 > *(_DWORD *)(a1 + 16))
  {
    v12 = *(unsigned __int8 *)(*(_QWORD *)a1 + v11);
    if (v12 == 117 || v12 == 97)
    {
      if (find_among_b(a1, (uint64_t)&a_1_8, 3))
      {
        *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
        v8 = slice_del(a1);
        if ((v8 & 0x80000000) != 0)
          return v8;
        v4 = *(int **)(a1 + 40);
        --*v4;
      }
      else
      {
        v4 = *(int **)(a1 + 40);
      }
    }
  }
  v13 = *(_DWORD *)(a1 + 12);
  v14 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 8) = v14;
  if (*v4 < 3)
    return 0;
  *(_DWORD *)(a1 + 20) = v14;
  v15 = v14 + 1;
  if ((int)v15 < v13)
  {
    v16 = *(unsigned __int8 *)(*(_QWORD *)a1 + v15);
    if (v16 == 105 || v16 == 101)
    {
      among = find_among(a1, (uint64_t)&a_3_8, 12);
      if (among)
      {
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
        switch(among)
        {
          case 1:
            v8 = slice_del(a1);
            if ((v8 & 0x80000000) != 0)
              return v8;
            v18 = *(_DWORD **)(a1 + 40);
            v19 = 1;
            goto LABEL_46;
          case 2:
            v8 = slice_del(a1);
            if ((v8 & 0x80000000) != 0)
              return v8;
            v18 = *(_DWORD **)(a1 + 40);
            v19 = 3;
LABEL_46:
            v18[1] = v19;
            goto LABEL_51;
          case 3:
            *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) = 1;
            v26 = &s_1_48;
            goto LABEL_49;
          case 4:
            *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) = 3;
            v26 = &s_2_48;
LABEL_49:
            v8 = slice_from_s(a1, 1, v26);
            if ((v8 & 0x80000000) != 0)
              return v8;
            v18 = *(_DWORD **)(a1 + 40);
LABEL_51:
            --*v18;
            goto LABEL_56;
          case 5:
            v27 = *(_DWORD **)(a1 + 40);
            --*v27;
            v27[1] = 1;
            v28 = *(_DWORD *)(a1 + 8);
            v29 = in_grouping_U(a1, (uint64_t)&g_vowel, 97, 117, 0);
            *(_DWORD *)(a1 + 8) = v28;
            if (v29)
              goto LABEL_55;
            v30 = &s_3_94;
            goto LABEL_84;
          case 6:
            v31 = *(_DWORD **)(a1 + 40);
            --*v31;
            v31[1] = 3;
            v32 = *(_DWORD *)(a1 + 8);
            v33 = in_grouping_U(a1, (uint64_t)&g_vowel, 97, 117, 0);
            *(_DWORD *)(a1 + 8) = v32;
            if (v33)
            {
LABEL_55:
              v8 = slice_del(a1);
              if ((v8 & 0x80000000) != 0)
                return v8;
            }
            else
            {
              v30 = &s_4_95;
LABEL_84:
              v8 = slice_from_s(a1, 1, v30);
              if ((v8 & 0x80000000) != 0)
                return v8;
            }
LABEL_56:
            if (**(int **)(a1 + 40) < 3)
              goto LABEL_81;
            v35 = *(_DWORD *)(a1 + 8);
            v34 = *(_DWORD *)(a1 + 12);
            *(_DWORD *)(a1 + 16) = v35;
            *(_DWORD *)(a1 + 8) = v34;
            v36 = r_remove_suffix(a1);
            if (v36 >= 0)
              v20 = v9;
            else
              v20 = v36;
            if (v36 >= 1)
            {
              *(_DWORD *)(a1 + 8) = v35;
LABEL_62:
              if (**(int **)(a1 + 40) < 3)
                goto LABEL_81;
              v37 = r_remove_second_order_prefix(a1);
              v38 = v37 >= 0 ? v20 : v37;
              v24 = v37 >> 31;
              v20 = v37 ? v38 : v20;
              v39 = v37 ? v37 >> 31 : 6;
              if (!v39 || v39 == 6)
                goto LABEL_81;
              goto LABEL_80;
            }
            v24 = v36 >> 31;
            if (v36)
              v40 = v36 >> 31;
            else
              v40 = 6;
            if (v40 == 6)
              goto LABEL_81;
            if (!v40)
              goto LABEL_62;
LABEL_80:
            if (v24)
              goto LABEL_42;
            break;
          default:
            goto LABEL_56;
        }
        goto LABEL_81;
      }
    }
  }
  *(_DWORD *)(a1 + 8) = v14;
  v8 = r_remove_second_order_prefix(a1);
  if ((v8 & 0x80000000) != 0)
    return v8;
  *(_DWORD *)(a1 + 8) = v14;
  if (**(int **)(a1 + 40) < 3
    || ((*(_DWORD *)(a1 + 16) = v14, *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12), v22 = r_remove_suffix(a1), v22 >= 0)
      ? (v23 = v9)
      : (v23 = v22),
        (v24 = v22 >> 31, v22) ? (v20 = v23) : (v20 = v9),
        v22 ? (v25 = v22 >> 31) : (v25 = 8),
        (v25 | 8) == 8))
  {
LABEL_81:
    *(_DWORD *)(a1 + 8) = v14;
    return 1;
  }
LABEL_42:
  if (!v24)
    return 1;
  return v20;
}

uint64_t r_remove_suffix(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t result;

  v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 <= *(_DWORD *)(a1 + 16))
    return 0;
  v3 = *(unsigned __int8 *)(v1 + *(_QWORD *)a1 - 1);
  if (v3 != 110 && v3 != 105)
    return 0;
  result = find_among_b(a1, (uint64_t)&a_2_8, 3);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      --**(_DWORD **)(a1 + 40);
      return 1;
    }
  }
  return result;
}

uint64_t r_remove_second_order_prefix(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _DWORD *v6;
  int v7;

  v1 = *(_DWORD *)(a1 + 12);
  v2 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v2;
  v3 = v2 + 1;
  if ((int)v3 >= v1 || *(_BYTE *)(*(_QWORD *)a1 + v3) != 101)
    return 0;
  result = find_among(a1, (uint64_t)&a_4_7, 6);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
    switch((int)result)
    {
      case 1:
        result = slice_del(a1);
        if ((result & 0x80000000) == 0)
        {
          v6 = *(_DWORD **)(a1 + 40);
          v7 = 2;
          goto LABEL_13;
        }
        break;
      case 2:
        result = slice_from_s(a1, 4, &s_5_49);
        if ((result & 0x80000000) == 0)
        {
          v6 = *(_DWORD **)(a1 + 40);
          goto LABEL_16;
        }
        break;
      case 3:
        result = slice_del(a1);
        if ((result & 0x80000000) == 0)
        {
          v6 = *(_DWORD **)(a1 + 40);
          v7 = 4;
LABEL_13:
          v6[1] = v7;
          goto LABEL_16;
        }
        break;
      case 4:
        result = slice_from_s(a1, 4, &s_6_124);
        if ((result & 0x80000000) == 0)
        {
          v6 = *(_DWORD **)(a1 + 40);
          v6[1] = 4;
LABEL_16:
          --*v6;
          goto LABEL_17;
        }
        break;
      default:
LABEL_17:
        result = 1;
        break;
    }
  }
  return result;
}

_QWORD *indonesian_UTF_8_create_env()
{
  return SN_create_env(0, 2, 0);
}

void indonesian_UTF_8_close_env(uint64_t a1)
{
  SN_close_env(a1, 0);
}

BOOL r_VOWEL(uint64_t a1)
{
  return in_grouping_U(a1, (uint64_t)&g_vowel, 97, 117, 0) == 0;
}

uint64_t r_SUFFIX_I_OK(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  if (*(int *)(*(_QWORD *)(a1 + 40) + 4) > 2)
    return 0;
  v1 = *(int *)(a1 + 8);
  if ((int)v1 <= *(_DWORD *)(a1 + 16))
    return 1;
  v2 = v1 - 1;
  if (*(_BYTE *)(*(_QWORD *)a1 + v1 - 1) != 115)
    return 1;
  v3 = 0;
  *(_DWORD *)(a1 + 8) = v2;
  return v3;
}

BOOL r_SUFFIX_AN_OK(uint64_t a1)
{
  return *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) != 1;
}

BOOL r_SUFFIX_KAN_OK(uint64_t a1)
{
  return (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) & 0xFFFFFFFE) != 2;
}

BOOL r_KER(uint64_t a1)
{
  int v2;
  _BOOL8 result;

  v2 = out_grouping_U(a1, (uint64_t)&g_vowel, 97, 117, 0);
  result = 0;
  if (!v2)
    return eq_s(a1, 2, &s_0_53) != 0;
  return result;
}

uint64_t italian_UTF_8_stem(uint64_t a1)
{
  uint64_t v2;
  int among;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _DWORD *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int among_b;
  int v34;
  int v35;
  int v36;
  int *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  void *v55;
  void *v56;
  int v57;
  void *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  int v70;

  v2 = *(unsigned int *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v2;
  among = find_among(a1, (uint64_t)&a_0_9, 7);
  if (among)
  {
    while (2)
    {
      v4 = *(unsigned int *)(a1 + 8);
      *(_DWORD *)(a1 + 24) = v4;
      switch(among)
      {
        case 1:
          v5 = a1;
          v6 = &s_0_54;
          goto LABEL_9;
        case 2:
          v5 = a1;
          v6 = &s_1_49;
          goto LABEL_9;
        case 3:
          v5 = a1;
          v6 = &s_2_49;
          goto LABEL_9;
        case 4:
          v5 = a1;
          v6 = &s_3_95;
          goto LABEL_9;
        case 5:
          v5 = a1;
          v6 = &s_4_96;
          goto LABEL_9;
        case 6:
          v5 = a1;
          v6 = &s_5_50;
LABEL_9:
          result = slice_from_s(v5, 2, v6);
          if ((result & 0x80000000) == 0)
            goto LABEL_10;
          return result;
        case 7:
          v8 = skip_utf8(*(_QWORD *)a1, v4, 0, *(unsigned int *)(a1 + 12), 1);
          if (v8 < 0)
            break;
          *(_DWORD *)(a1 + 8) = v8;
          goto LABEL_10;
        default:
LABEL_10:
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
          among = find_among(a1, (uint64_t)&a_0_9, 7);
          if (!among)
            break;
          continue;
      }
      break;
    }
  }
  v9 = v2;
  do
  {
    while (1)
    {
      *(_DWORD *)(a1 + 8) = v9;
      v10 = in_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 0);
      v11 = *(unsigned int *)(a1 + 12);
      if (v10)
      {
        v13 = *(unsigned int *)(a1 + 12);
        break;
      }
      v12 = *(unsigned int *)(a1 + 8);
      *(_DWORD *)(a1 + 20) = v12;
      if ((_DWORD)v12 != (_DWORD)v11 && *(_BYTE *)(*(_QWORD *)a1 + (int)v12) == 117)
      {
        *(_DWORD *)(a1 + 8) = v12 + 1;
        *(_DWORD *)(a1 + 24) = v12 + 1;
        if (!in_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 0))
        {
          v14 = a1;
          v15 = &s_6_125;
          goto LABEL_24;
        }
        v11 = *(unsigned int *)(a1 + 12);
      }
      *(_DWORD *)(a1 + 8) = v12;
      v13 = v12;
      if ((_DWORD)v12 == (_DWORD)v11)
        break;
      v13 = v11;
      if (*(_BYTE *)(*(_QWORD *)a1 + (int)v12) != 105)
        break;
      *(_DWORD *)(a1 + 8) = v12 + 1;
      *(_DWORD *)(a1 + 24) = v12 + 1;
      if (in_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 0))
      {
        v13 = *(unsigned int *)(a1 + 12);
        break;
      }
      v14 = a1;
      v15 = &s_7_25;
LABEL_24:
      result = slice_from_s(v14, 1, v15);
      if ((result & 0x80000000) != 0)
        return result;
    }
    *(_DWORD *)(a1 + 8) = v9;
    v9 = skip_utf8(*(_QWORD *)a1, v9, 0, v13, 1);
  }
  while ((v9 & 0x80000000) == 0);
  *(_DWORD *)(a1 + 8) = v2;
  v16 = *(_DWORD **)(a1 + 40);
  *v16 = *(_DWORD *)(a1 + 12);
  v16[1] = *(_DWORD *)(a1 + 12);
  v16[2] = *(_DWORD *)(a1 + 12);
  v17 = *(_DWORD *)(a1 + 8);
  if (!in_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 0))
  {
    if ((v18 = *(_DWORD *)(a1 + 8), !out_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 0))
      && (v21 = out_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 1), (v21 & 0x80000000) == 0)
      || (*(_DWORD *)(a1 + 8) = v18, !in_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 0))
      && (v21 = in_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 1), (v21 & 0x80000000) == 0))
    {
LABEL_43:
      v20 = *(_DWORD *)(a1 + 8) + v21;
      goto LABEL_44;
    }
  }
  *(_DWORD *)(a1 + 8) = v17;
  if (!out_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 0))
  {
    v19 = *(_DWORD *)(a1 + 8);
    if (!out_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 0))
    {
      v21 = out_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 1);
      if ((v21 & 0x80000000) == 0)
        goto LABEL_43;
    }
    *(_DWORD *)(a1 + 8) = v19;
    if (!in_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 0))
    {
      v20 = skip_utf8(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), 0, *(unsigned int *)(a1 + 12), 1);
      if ((v20 & 0x80000000) == 0)
LABEL_44:
        **(_DWORD **)(a1 + 40) = v20;
    }
  }
  *(_DWORD *)(a1 + 8) = v17;
  v22 = out_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 1);
  if ((v22 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) += v22;
    v23 = in_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 1);
    if ((v23 & 0x80000000) == 0)
    {
      v24 = *(_DWORD *)(a1 + 8) + v23;
      *(_DWORD *)(a1 + 8) = v24;
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) = v24;
      v25 = out_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 1);
      if ((v25 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) += v25;
        v26 = in_grouping_U(a1, (uint64_t)&g_v_5, 97, 249, 1);
        if ((v26 & 0x80000000) == 0)
          *(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) = *(_DWORD *)(a1 + 8) + v26;
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v17;
  v27 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v27;
  *(_DWORD *)(a1 + 24) = v27;
  v28 = v27 - 1;
  if ((int)v28 <= v17)
    goto LABEL_64;
  v29 = *(_BYTE *)(*(_QWORD *)a1 + v28);
  if ((v29 & 0xE0) != 0x60)
    goto LABEL_64;
  if (((0x8222u >> v29) & 1) == 0)
    goto LABEL_64;
  if (!find_among_b(a1, (uint64_t)&a_2_9, 37))
    goto LABEL_64;
  v30 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v30;
  v31 = v30 - 1;
  if ((int)v31 <= *(_DWORD *)(a1 + 16))
    goto LABEL_64;
  v32 = *(unsigned __int8 *)(*(_QWORD *)a1 + v31);
  if (v32 != 114 && v32 != 111)
    goto LABEL_64;
  among_b = find_among_b(a1, (uint64_t)&a_3_9, 5);
  if (!among_b || **(_DWORD **)(a1 + 40) > *(_DWORD *)(a1 + 8))
    goto LABEL_64;
  if (among_b == 2)
  {
    result = slice_from_s(a1, 1, &s_10_33);
    if ((result & 0x80000000) != 0)
      return result;
    goto LABEL_64;
  }
  if (among_b != 1 || (result = slice_del(a1), (result & 0x80000000) == 0))
  {
LABEL_64:
    v34 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v34;
    *(_DWORD *)(a1 + 24) = v34;
    v35 = find_among_b(a1, (uint64_t)&a_6_5, 51);
    if (v35)
    {
      v36 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 20) = v36;
      switch(v35)
      {
        case 1:
          v37 = *(int **)(a1 + 40);
          v38 = v37[2];
          goto LABEL_121;
        case 2:
          v37 = *(int **)(a1 + 40);
          if (v37[2] > v36)
            goto LABEL_68;
          result = slice_del(a1);
          if ((result & 0x80000000) != 0)
            return result;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
          v56 = &s_11_44;
          goto LABEL_109;
        case 3:
          v37 = *(int **)(a1 + 40);
          if (v37[2] > v36)
            goto LABEL_68;
          v58 = &s_12_12;
          v59 = a1;
          v60 = 3;
          goto LABEL_118;
        case 4:
          v37 = *(int **)(a1 + 40);
          if (v37[2] > v36)
            goto LABEL_68;
          v58 = &s_13_38;
          v59 = a1;
          v60 = 1;
          goto LABEL_118;
        case 5:
          v37 = *(int **)(a1 + 40);
          if (v37[2] > v36)
            goto LABEL_68;
          v58 = &s_14_15;
          v59 = a1;
          v60 = 4;
LABEL_118:
          result = slice_from_s(v59, v60, v58);
          if ((result & 0x80000000) != 0)
            return result;
          goto LABEL_72;
        case 6:
          v37 = *(int **)(a1 + 40);
          v38 = *v37;
LABEL_121:
          if (v38 <= v36)
            goto LABEL_122;
          goto LABEL_68;
        case 7:
          v37 = *(int **)(a1 + 40);
          if (v37[1] > v36)
            goto LABEL_68;
          result = slice_del(a1);
          if ((result & 0x80000000) != 0)
            return result;
          v61 = *(int *)(a1 + 8);
          *(_DWORD *)(a1 + 24) = v61;
          v62 = v61 - 1;
          if ((int)v62 <= *(_DWORD *)(a1 + 16))
            goto LABEL_72;
          v63 = *(_BYTE *)(*(_QWORD *)a1 + v62);
          if ((v63 & 0xE0) != 0x60)
            goto LABEL_72;
          if (((0x481008u >> v63) & 1) == 0)
            goto LABEL_72;
          v64 = find_among_b(a1, (uint64_t)&a_4_8, 4);
          if (!v64)
            goto LABEL_72;
          v65 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 20) = v65;
          if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v65)
            goto LABEL_72;
          v66 = v64;
          result = slice_del(a1);
          if ((result & 0x80000000) != 0)
            return result;
          if (v66 != 1)
            goto LABEL_72;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
          v56 = &s_15_8;
LABEL_109:
          if (!eq_s_b(a1, 2, v56))
            goto LABEL_72;
LABEL_110:
          v57 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 20) = v57;
          if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v57)
            goto LABEL_72;
LABEL_122:
          result = slice_del(a1);
          if ((result & 0x80000000) != 0)
            return result;
          goto LABEL_72;
        case 8:
          v37 = *(int **)(a1 + 40);
          if (v37[2] > v36)
            goto LABEL_68;
          result = slice_del(a1);
          if ((result & 0x80000000) != 0)
            return result;
          v67 = *(int *)(a1 + 8);
          *(_DWORD *)(a1 + 24) = v67;
          v68 = v67 - 1;
          if ((int)v68 <= *(_DWORD *)(a1 + 16))
            goto LABEL_72;
          v69 = *(_BYTE *)(*(_QWORD *)a1 + v68);
          if ((v69 & 0xE0) != 0x60
            || ((0x401008u >> v69) & 1) == 0
            || !find_among_b(a1, (uint64_t)&a_5_7, 3))
          {
            goto LABEL_72;
          }
          goto LABEL_110;
        case 9:
          v37 = *(int **)(a1 + 40);
          if (v37[2] > v36)
            goto LABEL_68;
          result = slice_del(a1);
          if ((result & 0x80000000) != 0)
            return result;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
          if (!eq_s_b(a1, 2, &s_16_8))
            goto LABEL_72;
          v70 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 20) = v70;
          if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v70)
            goto LABEL_72;
          result = slice_del(a1);
          if ((result & 0x80000000) != 0)
            return result;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
          v56 = &s_17_13;
          goto LABEL_109;
        default:
          goto LABEL_72;
      }
    }
    v37 = *(int **)(a1 + 40);
LABEL_68:
    v39 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v39;
    v40 = *v37;
    if (v39 >= v40)
    {
      v41 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 16) = v40;
      *(_DWORD *)(a1 + 24) = v39;
      if (find_among_b(a1, (uint64_t)&a_7_5, 87))
      {
        *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
        result = slice_del(a1);
        if ((result & 0x80000000) != 0)
          return result;
      }
      *(_DWORD *)(a1 + 16) = v41;
    }
LABEL_72:
    v42 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v42;
    *(_DWORD *)(a1 + 24) = v42;
    if (in_grouping_b_U(a1, (uint64_t)&g_AEIO, 97, 242, 0))
      goto LABEL_80;
    v43 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 20) = v43;
    if (**(_DWORD **)(a1 + 40) > v43)
      goto LABEL_80;
    result = slice_del(a1);
    if ((result & 0x80000000) != 0)
      return result;
    v44 = *(int *)(a1 + 8);
    *(_DWORD *)(a1 + 24) = v44;
    if ((int)v44 <= *(_DWORD *)(a1 + 16)
      || (v45 = v44 - 1, *(_BYTE *)(*(_QWORD *)a1 + v44 - 1) != 105)
      || (*(_DWORD *)(a1 + 8) = v45, *(_DWORD *)(a1 + 20) = v45, **(_DWORD **)(a1 + 40) >= (int)v44))
    {
LABEL_80:
      v47 = *(unsigned int *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v47;
      v46 = v47;
    }
    else
    {
      result = slice_del(a1);
      if ((result & 0x80000000) != 0)
        return result;
      LODWORD(v47) = *(_DWORD *)(a1 + 8);
      v46 = *(unsigned int *)(a1 + 12);
    }
    *(_DWORD *)(a1 + 24) = v47;
    if ((int)v47 > *(_DWORD *)(a1 + 16))
    {
      v48 = (int)v47 - 1;
      if (*(_BYTE *)(*(_QWORD *)a1 + v48) == 104)
      {
        *(_DWORD *)(a1 + 8) = v48;
        *(_DWORD *)(a1 + 20) = v48;
        if (!in_grouping_b_U(a1, (uint64_t)&g_CG, 99, 103, 0)
          && **(_DWORD **)(a1 + 40) <= *(_DWORD *)(a1 + 8))
        {
          result = slice_del(a1);
          if ((result & 0x80000000) != 0)
            return result;
        }
        v46 = *(unsigned int *)(a1 + 12);
      }
    }
    v49 = *(unsigned int *)(a1 + 16);
    *(_DWORD *)(a1 + 8) = v49;
    v50 = v49;
    while (1)
    {
      *(_DWORD *)(a1 + 20) = v50;
      if ((int)v50 < (int)v46 && ((v51 = *(unsigned __int8 *)(*(_QWORD *)a1 + (int)v50), v51 == 73) || v51 == 85))
      {
        v52 = find_among(a1, (uint64_t)&a_1_9, 3);
        if (!v52)
          goto LABEL_104;
        v50 = *(unsigned int *)(a1 + 8);
        *(_DWORD *)(a1 + 24) = v50;
        if (v52 == 1)
        {
          v54 = a1;
          v55 = &s_8_101;
          goto LABEL_102;
        }
        if (v52 == 2)
        {
          v54 = a1;
          v55 = &s_9_14;
LABEL_102:
          result = slice_from_s(v54, 1, v55);
          if ((result & 0x80000000) != 0)
            return result;
          goto LABEL_99;
        }
        if (v52 != 3)
          goto LABEL_99;
        v46 = *(unsigned int *)(a1 + 12);
      }
      else
      {
        *(_DWORD *)(a1 + 24) = v50;
      }
      v53 = skip_utf8(*(_QWORD *)a1, v50, 0, v46, 1);
      if (v53 < 0)
      {
LABEL_104:
        *(_DWORD *)(a1 + 8) = v49;
        return 1;
      }
      *(_DWORD *)(a1 + 8) = v53;
LABEL_99:
      v50 = *(unsigned int *)(a1 + 8);
      v46 = *(unsigned int *)(a1 + 12);
    }
  }
  return result;
}

_QWORD *italian_UTF_8_create_env()
{
  return SN_create_env(0, 3, 0);
}

void italian_UTF_8_close_env(uint64_t a1)
{
  SN_close_env(a1, 0);
}

uint64_t porter_UTF_8_stem(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int among_b;
  void *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  char v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  char v44;
  int v45;
  int v46;
  void *v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  **(_BYTE **)(a1 + 48) = 0;
  v3 = *(unsigned int *)(a1 + 8);
  v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 20) = v3;
  if ((_DWORD)v3 != v2 && *(_BYTE *)(*(_QWORD *)a1 + (int)v3) == 121)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    *(_DWORD *)(a1 + 24) = v3 + 1;
    result = slice_from_s(a1, 1, &s_21_34);
    if ((result & 0x80000000) != 0)
      return result;
    **(_BYTE **)(a1 + 48) = 1;
  }
  *(_DWORD *)(a1 + 8) = v3;
  v5 = v3;
  while (1)
  {
    while (1)
    {
      if (in_grouping_U(a1, (uint64_t)&g_v_6, 97, 121, 0))
      {
        v6 = *(_QWORD *)a1;
        v7 = *(unsigned int *)(a1 + 12);
        break;
      }
      v8 = *(unsigned int *)(a1 + 8);
      v7 = *(unsigned int *)(a1 + 12);
      *(_DWORD *)(a1 + 20) = v8;
      v6 = *(_QWORD *)a1;
      if ((_DWORD)v8 == (_DWORD)v7)
      {
        v7 = v8;
        break;
      }
      if (*(_BYTE *)(v6 + (int)v8) != 121)
        break;
      *(_DWORD *)(a1 + 24) = v8 + 1;
      *(_DWORD *)(a1 + 8) = v5;
      result = slice_from_s(a1, 1, &s_22_16);
      if ((result & 0x80000000) != 0)
        return result;
      **(_BYTE **)(a1 + 48) = 1;
      v5 = *(unsigned int *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 8) = v5;
    v9 = skip_utf8(v6, v5, 0, v7, 1);
    if ((v9 & 0x80000000) != 0)
      break;
    v5 = v9;
    *(_DWORD *)(a1 + 8) = v9;
  }
  *(_DWORD *)(a1 + 8) = v3;
  v10 = *(_DWORD **)(a1 + 40);
  *v10 = *(_DWORD *)(a1 + 12);
  v10[1] = *(_DWORD *)(a1 + 12);
  v11 = *(_DWORD *)(a1 + 8);
  v12 = out_grouping_U(a1, (uint64_t)&g_v_6, 97, 121, 1);
  if ((v12 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) += v12;
    v13 = in_grouping_U(a1, (uint64_t)&g_v_6, 97, 121, 1);
    if ((v13 & 0x80000000) == 0)
    {
      v14 = *(_DWORD *)(a1 + 8) + v13;
      *(_DWORD *)(a1 + 8) = v14;
      **(_DWORD **)(a1 + 40) = v14;
      v15 = out_grouping_U(a1, (uint64_t)&g_v_6, 97, 121, 1);
      if ((v15 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) += v15;
        v16 = in_grouping_U(a1, (uint64_t)&g_v_6, 97, 121, 1);
        if ((v16 & 0x80000000) == 0)
          *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) = *(_DWORD *)(a1 + 8) + v16;
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v11;
  v17 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v17;
  *(_DWORD *)(a1 + 24) = v17;
  if ((int)v17 <= v11)
    goto LABEL_31;
  if (*(_BYTE *)(v17 + *(_QWORD *)a1 - 1) != 115)
    goto LABEL_31;
  among_b = find_among_b(a1, (uint64_t)&a_0_10, 4);
  if (!among_b)
    goto LABEL_31;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
  switch(among_b)
  {
    case 3:
      result = slice_del(a1);
      if ((result & 0x80000000) == 0)
        goto LABEL_31;
      break;
    case 2:
      v19 = &s_1_50;
      v20 = a1;
      v21 = 1;
LABEL_30:
      result = slice_from_s(v20, v21, v19);
      if ((result & 0x80000000) == 0)
      {
LABEL_31:
        v22 = *(_DWORD *)(a1 + 16);
        v23 = *(int *)(a1 + 12);
        *(_DWORD *)(a1 + 8) = v23;
        *(_DWORD *)(a1 + 24) = v23;
        v24 = v23 - 1;
        if ((int)v24 <= v22)
          goto LABEL_57;
        v25 = *(unsigned __int8 *)(*(_QWORD *)a1 + v24);
        if (v25 != 103 && v25 != 100)
          goto LABEL_57;
        v26 = find_among_b(a1, (uint64_t)&a_2_10, 3);
        if (!v26)
          goto LABEL_57;
        v27 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 20) = v27;
        if (v26 == 2)
        {
          v28 = *(_DWORD *)(a1 + 12);
          if ((out_grouping_b_U(a1, (uint64_t)&g_v_6, 97, 121, 1) & 0x80000000) != 0)
            goto LABEL_57;
          *(_DWORD *)(a1 + 8) = v27 - v28 + *(_DWORD *)(a1 + 12);
          result = slice_del(a1);
          if ((result & 0x80000000) != 0)
            return result;
          v29 = *(_DWORD *)(a1 + 12);
          v30 = *(int *)(a1 + 8);
          if ((int)v30 - 1 <= *(_DWORD *)(a1 + 16))
            goto LABEL_98;
          v31 = *(_BYTE *)(*(_QWORD *)a1 + v30 - 1);
          if ((v31 & 0xE0) != 0x60 || ((0x41570D4u >> v31) & 1) == 0)
            goto LABEL_98;
          v35 = find_among_b(a1, (uint64_t)&a_1_10, 13);
          if (!v35)
            goto LABEL_57;
          v36 = v30 - v29;
          v29 = *(_DWORD *)(a1 + 12);
          LODWORD(v30) = v29 + v36;
          *(_DWORD *)(a1 + 8) = v29 + v36;
          if (v35 != 3)
          {
            if (v35 == 2)
            {
              *(_DWORD *)(a1 + 24) = v30;
              v37 = skip_utf8(*(_QWORD *)a1, (v29 + v36), *(unsigned int *)(a1 + 16), 0, -1);
              if (v37 < 0)
                goto LABEL_57;
              *(_DWORD *)(a1 + 8) = v37;
              *(_DWORD *)(a1 + 20) = v37;
              result = slice_del(a1);
              if ((result & 0x80000000) == 0)
                goto LABEL_57;
            }
            else
            {
              if (v35 != 1)
                goto LABEL_57;
              result = insert_s(a1, v29 + v36, v29 + v36, 1, &s_3_96);
              *(_DWORD *)(a1 + 8) = v30;
              if ((result & 0x80000000) == 0)
                goto LABEL_57;
            }
          }
          else
          {
LABEL_98:
            if ((_DWORD)v30 != **(_DWORD **)(a1 + 40))
              goto LABEL_57;
            if (!r_shortv(a1))
              goto LABEL_57;
            v32 = v30 - v29;
            v33 = *(_DWORD *)(a1 + 12);
            v34 = v33 + v30 - v29;
            *(_DWORD *)(a1 + 8) = v34;
            result = insert_s(a1, v33 + v32, v33 + v32, 1, &s_4_97);
            *(_DWORD *)(a1 + 8) = v34;
            if ((result & 0x80000000) == 0)
              goto LABEL_57;
          }
        }
        else
        {
          if (v26 == 1 && **(_DWORD **)(a1 + 40) <= v27)
          {
            result = slice_from_s(a1, 2, &s_2_50);
            if ((result & 0x80000000) != 0)
              return result;
          }
LABEL_57:
          v38 = *(_DWORD *)(a1 + 16);
          v39 = *(int *)(a1 + 12);
          *(_DWORD *)(a1 + 8) = v39;
          *(_DWORD *)(a1 + 24) = v39;
          if ((int)v39 <= v38
            || (v40 = v39 - 1, (*(unsigned __int8 *)(*(_QWORD *)a1 + v40) | 0x20) != 0x79)
            || (*(_DWORD *)(a1 + 8) = v40,
                *(_DWORD *)(a1 + 20) = v40,
                v41 = out_grouping_b_U(a1, (uint64_t)&g_v_6, 97, 121, 1),
                v41 < 0)
            || (*(_DWORD *)(a1 + 8) -= v41, result = slice_from_s(a1, 1, &s_5_51), (result & 0x80000000) == 0))
          {
            v42 = *(_DWORD *)(a1 + 16);
            v43 = *(int *)(a1 + 12);
            *(_DWORD *)(a1 + 8) = v43;
            *(_DWORD *)(a1 + 24) = v43;
            if ((int)v43 - 2 > v42)
            {
              v44 = *(_BYTE *)(v43 + *(_QWORD *)a1 - 1);
              if ((v44 & 0xE0) == 0x60 && ((0xC7200u >> v44) & 1) != 0)
              {
                v45 = find_among_b(a1, (uint64_t)&a_3_10, 20);
                if (v45)
                {
                  v46 = *(_DWORD *)(a1 + 8);
                  *(_DWORD *)(a1 + 20) = v46;
                  if (**(_DWORD **)(a1 + 40) <= v46)
                  {
                    switch(v45)
                    {
                      case 1:
                        v47 = &s_6_126;
                        goto LABEL_71;
                      case 2:
                        v47 = &s_7_87;
                        goto LABEL_71;
                      case 3:
                        v47 = &s_8_102;
                        goto LABEL_71;
                      case 4:
                        v47 = &s_9_15;
LABEL_71:
                        v48 = a1;
                        v49 = 4;
                        goto LABEL_82;
                      case 5:
                        v47 = &s_10_34;
                        goto LABEL_81;
                      case 6:
                        v47 = &s_11_45;
                        v48 = a1;
                        v49 = 1;
                        goto LABEL_82;
                      case 7:
                        v47 = &s_12_13;
                        goto LABEL_81;
                      case 8:
                        v47 = &s_13_39;
                        goto LABEL_81;
                      case 9:
                        v47 = &s_14_16;
                        v48 = a1;
                        v49 = 2;
                        goto LABEL_82;
                      case 10:
                        v47 = &s_15_9;
                        goto LABEL_81;
                      case 11:
                        v47 = &s_16_9;
                        goto LABEL_81;
                      case 12:
                        v47 = &s_17_14;
                        goto LABEL_81;
                      case 13:
                        v47 = &s_18_8;
LABEL_81:
                        v48 = a1;
                        v49 = 3;
LABEL_82:
                        result = slice_from_s(v48, v49, v47);
                        if ((result & 0x80000000) == 0)
                          break;
                        return result;
                      default:
                        break;
                    }
                  }
                }
              }
            }
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
            result = r_Step_3(a1);
            if ((result & 0x80000000) == 0)
            {
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
              result = r_Step_4(a1);
              if ((result & 0x80000000) == 0)
              {
                *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
                result = r_Step_5a(a1);
                if ((result & 0x80000000) == 0)
                {
                  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
                  result = r_Step_5b(a1);
                  if ((result & 0x80000000) == 0)
                  {
                    v50 = *(_DWORD *)(a1 + 16);
                    *(_DWORD *)(a1 + 8) = v50;
                    if (**(_BYTE **)(a1 + 48))
                    {
                      do
                      {
                        v51 = *(unsigned int *)(a1 + 8);
                        while (1)
                        {
                          *(_DWORD *)(a1 + 20) = v51;
                          v52 = *(unsigned int *)(a1 + 12);
                          v53 = *(_QWORD *)a1;
                          if ((_DWORD)v51 != (_DWORD)v52 && *(_BYTE *)(v53 + (int)v51) == 89)
                            break;
                          v54 = skip_utf8(v53, v51, 0, v52, 1);
                          if ((v54 & 0x80000000) != 0)
                            goto LABEL_95;
                          v51 = v54;
                          *(_DWORD *)(a1 + 8) = v54;
                        }
                        *(_DWORD *)(a1 + 24) = v51 + 1;
                        *(_DWORD *)(a1 + 8) = v51;
                        result = slice_from_s(a1, 1, &s_23_12);
                      }
                      while ((result & 0x80000000) == 0);
                    }
                    else
                    {
LABEL_95:
                      *(_DWORD *)(a1 + 8) = v50;
                      return 1;
                    }
                  }
                }
              }
            }
          }
        }
      }
      break;
    case 1:
      v19 = &s_0_55;
      v20 = a1;
      v21 = 2;
      goto LABEL_30;
    default:
      goto LABEL_31;
  }
  return result;
}

uint64_t r_Step_3(uint64_t a1)
{
  uint64_t v1;
  char v3;
  uint64_t result;
  int v5;
  void *v6;

  v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 2 <= *(_DWORD *)(a1 + 16))
    return 0;
  v3 = *(_BYTE *)(v1 + *(_QWORD *)a1 - 1);
  if ((v3 & 0xE0) != 0x60 || ((0x81220u >> v3) & 1) == 0)
    return 0;
  result = find_among_b(a1, (uint64_t)&a_4_9, 7);
  if (!(_DWORD)result)
    return result;
  v5 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v5;
  if (**(_DWORD **)(a1 + 40) > v5)
    return 0;
  if ((_DWORD)result == 3)
  {
    result = slice_del(a1);
    if ((result & 0x80000000) != 0)
      return result;
    return 1;
  }
  if ((_DWORD)result != 2)
  {
    if ((_DWORD)result == 1)
    {
      v6 = &s_19_6;
      goto LABEL_15;
    }
    return 1;
  }
  v6 = &s_20_8;
LABEL_15:
  result = slice_from_s(a1, 2, v6);
  if ((result & 0x80000000) == 0)
    return 1;
  return result;
}

uint64_t r_Step_4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  v2 = v1 - 1;
  if ((int)v2 <= *(_DWORD *)(a1 + 16))
    return 0;
  v4 = *(_BYTE *)(*(_QWORD *)a1 + v2);
  if ((v4 & 0xE0) != 0x60 || ((0x3C7228u >> v4) & 1) == 0)
    return 0;
  result = find_among_b(a1, (uint64_t)&a_5_8, 19);
  if (!(_DWORD)result)
    return result;
  v6 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v6;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) > (int)v6)
    return 0;
  if ((_DWORD)result == 2)
  {
    if ((int)v6 <= *(_DWORD *)(a1 + 16))
      return 0;
    v7 = v6 - 1;
    if (*(unsigned __int8 *)(*(_QWORD *)a1 + v7) - 115 > 1)
      return 0;
    *(_DWORD *)(a1 + 8) = v7;
  }
  else if ((_DWORD)result != 1)
  {
    return 1;
  }
  result = slice_del(a1);
  if ((result & 0x80000000) == 0)
    return 1;
  return result;
}

uint64_t r_Step_5a(uint64_t a1)
{
  uint64_t v1;
  int v3;
  _DWORD *v4;
  uint64_t result;
  int v6;

  v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 <= *(_DWORD *)(a1 + 16))
    return 0;
  v3 = v1 - 1;
  if (*(_BYTE *)(*(_QWORD *)a1 + v1 - 1) != 101)
    return 0;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 20) = v3;
  v4 = *(_DWORD **)(a1 + 40);
  if (v4[1] < (int)v1)
    goto LABEL_4;
  if (*v4 >= (int)v1)
    return 0;
  v6 = *(_DWORD *)(a1 + 12);
  if (r_shortv(a1))
    return 0;
  *(_DWORD *)(a1 + 8) = v3 - v6 + *(_DWORD *)(a1 + 12);
LABEL_4:
  LODWORD(result) = slice_del(a1);
  if ((int)result >= 0)
    return 1;
  else
    return result;
}

uint64_t r_Step_5b(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v6;
  uint64_t result;

  v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  v2 = *(_DWORD *)(a1 + 16);
  if ((int)v1 <= v2)
    return 0;
  v3 = *(_QWORD *)a1;
  v4 = v1 - 1;
  if (*(_BYTE *)(*(_QWORD *)a1 + v1 - 1) != 108)
    return 0;
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 20) = v4;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) >= (int)v1 || v4 <= v2)
    return 0;
  v6 = v1 - 2;
  if (*(_BYTE *)(v3 + v6) != 108)
    return 0;
  *(_DWORD *)(a1 + 8) = v6;
  LODWORD(result) = slice_del(a1);
  if ((int)result >= 0)
    return 1;
  else
    return result;
}

_QWORD *porter_UTF_8_create_env()
{
  return SN_create_env(0, 2, 1);
}

void porter_UTF_8_close_env(uint64_t a1)
{
  SN_close_env(a1, 0);
}

BOOL r_shortv(uint64_t a1)
{
  int v2;
  _BOOL8 result;
  int v4;

  v2 = out_grouping_b_U(a1, (uint64_t)&g_v_WXY, 89, 121, 0);
  result = 0;
  if (!v2)
  {
    v4 = in_grouping_b_U(a1, (uint64_t)&g_v_6, 97, 121, 0);
    result = 0;
    if (!v4)
      return out_grouping_b_U(a1, (uint64_t)&g_v_6, 97, 121, 0) == 0;
  }
  return result;
}

uint64_t danish_UTF_8_stem(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  int v8;
  int v9;
  char v10;
  int among_b;
  int v12;
  uint64_t result;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  char v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  _DWORD *v25;

  v2 = *(_DWORD *)(a1 + 8);
  **(_DWORD **)(a1 + 40) = *(_DWORD *)(a1 + 12);
  v3 = *(_DWORD *)(a1 + 8);
  v4 = skip_utf8(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), 0, *(unsigned int *)(a1 + 12), 3);
  if ((v4 & 0x80000000) == 0)
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) = v4;
    *(_DWORD *)(a1 + 8) = v3;
    if ((out_grouping_U(a1, (uint64_t)&g_v_7, 97, 248, 1) & 0x80000000) == 0)
    {
      v5 = in_grouping_U(a1, (uint64_t)&g_v_7, 97, 248, 1);
      if ((v5 & 0x80000000) == 0)
      {
        v6 = *(_DWORD *)(a1 + 8) + v5;
        *(_DWORD *)(a1 + 8) = v6;
        v7 = *(_DWORD **)(a1 + 40);
        if (v6 <= v7[1])
          v6 = v7[1];
        *v7 = v6;
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v2;
  v8 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v8;
  v9 = **(_DWORD **)(a1 + 40);
  if (v8 >= v9)
  {
    *(_DWORD *)(a1 + 16) = v9;
    *(_DWORD *)(a1 + 24) = v8;
    if (v8 > v9
      && (v10 = *(_BYTE *)(v8 + *(_QWORD *)a1 - 1), (v10 & 0xE0) == 0x60)
      && ((0x1C4030u >> v10) & 1) != 0
      && (among_b = find_among_b(a1, (uint64_t)&a_0_11, 32)) != 0)
    {
      v12 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 16) = v2;
      *(_DWORD *)(a1 + 20) = v12;
      if (among_b == 2)
      {
        if (in_grouping_b_U(a1, (uint64_t)&g_s_ending, 97, 229, 0))
          goto LABEL_16;
      }
      else if (among_b != 1)
      {
        goto LABEL_16;
      }
      result = slice_del(a1);
      if ((result & 0x80000000) != 0)
        return result;
    }
    else
    {
      *(_DWORD *)(a1 + 16) = v2;
    }
  }
LABEL_16:
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  result = r_consonant_pair(a1);
  if ((result & 0x80000000) == 0)
  {
    v14 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v14;
    *(_DWORD *)(a1 + 24) = v14;
    if (!eq_s_b(a1, 2, &s_0_56)
      || (*(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8), !eq_s_b(a1, 2, &s_1_51))
      || (result = slice_del(a1), (result & 0x80000000) == 0))
    {
      v15 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v15;
      v16 = **(_DWORD **)(a1 + 40);
      if (v15 >= v16)
      {
        v17 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(a1 + 16) = v16;
        *(_DWORD *)(a1 + 24) = v15;
        v18 = v15 - 1;
        if ((int)v18 > v16
          && (v19 = *(_BYTE *)(*(_QWORD *)a1 + v18), (v19 & 0xE0) == 0x60)
          && ((0x180080u >> v19) & 1) != 0
          && (v20 = find_among_b(a1, (uint64_t)&a_2_11, 5)) != 0)
        {
          v21 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 16) = v17;
          *(_DWORD *)(a1 + 20) = v21;
          if (v20 == 2)
          {
            result = slice_from_s(a1, 4, &s_2_51);
            if ((result & 0x80000000) != 0)
              return result;
          }
          else if (v20 == 1)
          {
            result = slice_del(a1);
            if ((result & 0x80000000) != 0)
              return result;
            result = r_consonant_pair(a1);
            if ((result & 0x80000000) != 0)
              return result;
          }
        }
        else
        {
          *(_DWORD *)(a1 + 16) = v17;
        }
      }
      v22 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v22;
      v23 = **(_DWORD **)(a1 + 40);
      if (v22 < v23)
      {
LABEL_34:
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
        return 1;
      }
      v24 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 16) = v23;
      *(_DWORD *)(a1 + 24) = v22;
      if (in_grouping_b_U(a1, (uint64_t)&g_c, 98, 122, 0))
      {
        *(_DWORD *)(a1 + 16) = v24;
        goto LABEL_34;
      }
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
      **(_QWORD **)(a1 + 32) = slice_to((uint64_t *)a1, **(_DWORD ***)(a1 + 32));
      v25 = **(_DWORD ***)(a1 + 32);
      if (!v25)
        return 0xFFFFFFFFLL;
      *(_DWORD *)(a1 + 16) = v24;
      if (!eq_v_b(a1, v25))
        goto LABEL_34;
      result = slice_del(a1);
      if ((result & 0x80000000) == 0)
        goto LABEL_34;
    }
  }
  return result;
}

uint64_t r_consonant_pair(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;

  v1 = *(_DWORD *)(a1 + 8);
  v2 = **(_DWORD **)(a1 + 40);
  if (v1 < v2)
    return 0;
  v6 = *(_DWORD *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = v2;
  *(_DWORD *)(a1 + 24) = v1;
  v7 = v1 - 1;
  if ((int)v7 <= v2 || (*(unsigned __int8 *)(*(_QWORD *)a1 + v7) | 0x10) != 0x74)
  {
    result = 0;
    goto LABEL_11;
  }
  result = find_among_b(a1, (uint64_t)&a_1_11, 4);
  if (!(_DWORD)result)
  {
LABEL_11:
    *(_DWORD *)(a1 + 16) = v5;
    return result;
  }
  v8 = *(_DWORD *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v8;
  v10 = (v9 + v1 - v6);
  *(_DWORD *)(a1 + 8) = v10;
  v11 = skip_utf8(*(_QWORD *)a1, v10, v5, 0, -1);
  if (v11 < 0)
    return 0;
  *(_DWORD *)(a1 + 8) = v11;
  *(_DWORD *)(a1 + 20) = v11;
  v12 = slice_del(a1);
  if (v12 >= 0)
    return 1;
  else
    return v12 & (v12 >> 31);
}

_QWORD *danish_UTF_8_create_env()
{
  return SN_create_env(1, 2, 0);
}

void danish_UTF_8_close_env(uint64_t a1)
{
  SN_close_env(a1, 1);
}

uint64_t hindi_UTF_8_stem(uint64_t a1)
{
  int v2;
  int v3;
  int *v4;
  int v5;
  int v6;
  uint64_t result;
  int v8;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = skip_utf8(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), 0, *(unsigned int *)(a1 + 12), 1);
  if (v3 < 0)
    return 0;
  v4 = *(int **)(a1 + 40);
  *v4 = v3;
  *(_DWORD *)(a1 + 16) = v2;
  v5 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v5;
  v6 = *v4;
  if (v5 < v6)
    return 0;
  *(_DWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = v5;
  result = find_among_b(a1, (uint64_t)&a_0_12, 132);
  if ((_DWORD)result)
  {
    v8 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 16) = v2;
    *(_DWORD *)(a1 + 20) = v8;
    result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
      return 1;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 16) = v2;
  }
  return result;
}

_QWORD *hindi_UTF_8_create_env()
{
  return SN_create_env(0, 1, 0);
}

void hindi_UTF_8_close_env(uint64_t a1)
{
  SN_close_env(a1, 0);
}

BOOL r_CONSONANT(uint64_t a1)
{
  return in_grouping_b_U(a1, (uint64_t)&g_consonant, 2325, 2399, 0) == 0;
}

uint64_t french_UTF_8_stem(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int among_b;
  int v30;
  int v31;
  void *v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  void *v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int *v52;
  int v53;
  char v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  int v70;
  int v71;
  char v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  int v90;
  int among;
  uint64_t v92;
  int v93;
  void *v94;
  uint64_t v96;
  unsigned int v97;
  int v98;

  v97 = *(_DWORD *)(a1 + 8);
  v2 = v97;
  while (2)
  {
    v98 = v2 + 1;
    v3 = (int)v2 + 1;
    v4 = v2 + 2;
    while (1)
    {
      if (!in_grouping_U(a1, (uint64_t)&g_v_8, 97, 251, 0))
      {
        v6 = *(_DWORD *)(a1 + 8);
        v5 = *(_DWORD *)(a1 + 12);
        *(_DWORD *)(a1 + 20) = v6;
        if (v6 != v5)
        {
          if (*(_BYTE *)(*(_QWORD *)a1 + v6) == 117)
          {
            *(_DWORD *)(a1 + 8) = v6 + 1;
            *(_DWORD *)(a1 + 24) = v6 + 1;
            if (!in_grouping_U(a1, (uint64_t)&g_v_8, 97, 251, 0))
            {
              v7 = a1;
              v8 = 1;
              v9 = &s_0_132;
              goto LABEL_32;
            }
            v5 = *(_DWORD *)(a1 + 12);
          }
          *(_DWORD *)(a1 + 8) = v6;
          if (v6 != v5)
          {
            if (*(_BYTE *)(*(_QWORD *)a1 + v6) == 105)
            {
              *(_DWORD *)(a1 + 8) = v6 + 1;
              *(_DWORD *)(a1 + 24) = v6 + 1;
              if (!in_grouping_U(a1, (uint64_t)&g_v_8, 97, 251, 0))
              {
                v7 = a1;
                v8 = 1;
                v9 = &s_1_52;
                goto LABEL_32;
              }
              v5 = *(_DWORD *)(a1 + 12);
            }
            *(_DWORD *)(a1 + 8) = v6;
            if (v6 != v5 && *(_BYTE *)(*(_QWORD *)a1 + v6) == 121)
            {
              *(_DWORD *)(a1 + 8) = v6 + 1;
              *(_DWORD *)(a1 + 24) = v6 + 1;
              v7 = a1;
              v8 = 1;
              v9 = &s_2_52;
              goto LABEL_32;
            }
          }
        }
      }
      *(_DWORD *)(a1 + 8) = v2;
      *(_DWORD *)(a1 + 20) = v2;
      if (eq_s(a1, 2, &s_3_97))
      {
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
        v7 = a1;
        v8 = 2;
        v9 = &s_4_98;
        goto LABEL_32;
      }
      *(_DWORD *)(a1 + 8) = v2;
      *(_DWORD *)(a1 + 20) = v2;
      if (eq_s(a1, 2, &s_5_52))
      {
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
        v7 = a1;
        v8 = 2;
        v9 = &s_6_127;
        goto LABEL_32;
      }
      *(_DWORD *)(a1 + 8) = v2;
      *(_DWORD *)(a1 + 20) = v2;
      v10 = *(unsigned int *)(a1 + 12);
      v11 = *(_QWORD *)a1;
      if ((_DWORD)v2 == (_DWORD)v10)
      {
        v10 = v2;
        goto LABEL_24;
      }
      if (*(_BYTE *)(v11 + (int)v2) != 121)
        goto LABEL_24;
      *(_DWORD *)(a1 + 8) = v98;
      *(_DWORD *)(a1 + 24) = v98;
      if (in_grouping_U(a1, (uint64_t)&g_v_8, 97, 251, 0))
        break;
      v7 = a1;
      v8 = 1;
      v9 = &s_7_88;
LABEL_32:
      v12 = slice_from_s(v7, v8, v9);
      if ((v12 & 0x80000000) != 0)
        return v12;
      *(_DWORD *)(a1 + 8) = v2;
    }
    v10 = *(unsigned int *)(a1 + 12);
    v11 = *(_QWORD *)a1;
LABEL_24:
    *(_DWORD *)(a1 + 8) = v2;
    if ((_DWORD)v2 != (_DWORD)v10 && *(_BYTE *)(v11 + (int)v2) == 113)
    {
      *(_DWORD *)(a1 + 8) = v3;
      *(_DWORD *)(a1 + 20) = v3;
      if ((_DWORD)v3 != (_DWORD)v10 && *(_BYTE *)(v11 + v3) == 117)
      {
        *(_DWORD *)(a1 + 8) = v4;
        *(_DWORD *)(a1 + 24) = v4;
        v7 = a1;
        v8 = 1;
        v9 = &s_8_103;
        goto LABEL_32;
      }
    }
    *(_DWORD *)(a1 + 8) = v2;
    v13 = skip_utf8(v11, v2, 0, v10, 1);
    if ((v13 & 0x80000000) == 0)
    {
      v2 = v13;
      *(_DWORD *)(a1 + 8) = v13;
      continue;
    }
    break;
  }
  *(_DWORD *)(a1 + 8) = v97;
  v14 = *(_DWORD **)(a1 + 40);
  *v14 = *(_DWORD *)(a1 + 12);
  v14[1] = *(_DWORD *)(a1 + 12);
  v14[2] = *(_DWORD *)(a1 + 12);
  v15 = *(unsigned int *)(a1 + 8);
  if (in_grouping_U(a1, (uint64_t)&g_v_8, 97, 251, 0)
    || in_grouping_U(a1, (uint64_t)&g_v_8, 97, 251, 0)
    || (v20 = skip_utf8(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), 0, *(unsigned int *)(a1 + 12), 1), v20 < 0))
  {
    *(_DWORD *)(a1 + 8) = v15;
    v16 = (int)v15 + 2;
    v17 = *(unsigned int *)(a1 + 12);
    v18 = *(_QWORD *)a1;
    if ((int)v16 < (int)v17)
    {
      v19 = *(_BYTE *)(v18 + v16);
      if ((v19 & 0xE0) == 0x60 && ((0x51000u >> v19) & 1) != 0)
      {
        if (find_among(a1, (uint64_t)&a_0_13, 3))
        {
          v20 = *(_DWORD *)(a1 + 8);
          goto LABEL_49;
        }
        v18 = *(_QWORD *)a1;
        v17 = *(unsigned int *)(a1 + 12);
      }
    }
    *(_DWORD *)(a1 + 8) = v15;
    v21 = skip_utf8(v18, v15, 0, v17, 1);
    if ((v21 & 0x80000000) == 0)
    {
      *(_DWORD *)(a1 + 8) = v21;
      v22 = out_grouping_U(a1, (uint64_t)&g_v_8, 97, 251, 1);
      if ((v22 & 0x80000000) == 0)
      {
        v20 = *(_DWORD *)(a1 + 8) + v22;
        goto LABEL_49;
      }
    }
  }
  else
  {
LABEL_49:
    **(_DWORD **)(a1 + 40) = v20;
  }
  *(_DWORD *)(a1 + 8) = v15;
  v23 = out_grouping_U(a1, (uint64_t)&g_v_8, 97, 251, 1);
  if ((v23 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) += v23;
    v24 = in_grouping_U(a1, (uint64_t)&g_v_8, 97, 251, 1);
    if ((v24 & 0x80000000) == 0)
    {
      v25 = *(_DWORD *)(a1 + 8) + v24;
      *(_DWORD *)(a1 + 8) = v25;
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) = v25;
      v26 = out_grouping_U(a1, (uint64_t)&g_v_8, 97, 251, 1);
      if ((v26 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) += v26;
        v27 = in_grouping_U(a1, (uint64_t)&g_v_8, 97, 251, 1);
        if ((v27 & 0x80000000) == 0)
          *(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) = *(_DWORD *)(a1 + 8) + v27;
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v15;
  v28 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v28;
  *(_DWORD *)(a1 + 24) = v28;
  among_b = find_among_b(a1, (uint64_t)&a_4_10, 43);
  if (among_b)
  {
    v30 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 20) = v30;
    switch(among_b)
    {
      case 1:
        if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v30)
          break;
        goto LABEL_109;
      case 2:
        if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v30)
          break;
        v12 = slice_del(a1);
        if ((v12 & 0x80000000) != 0)
          return v12;
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
        if (!eq_s_b(a1, 2, &s_14_17))
          goto LABEL_167;
        v31 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 20) = v31;
        if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) <= v31)
          goto LABEL_109;
        v32 = &s_15_10;
        goto LABEL_99;
      case 3:
        if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v30)
          break;
        v32 = &s_16_10;
        goto LABEL_99;
      case 4:
        if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v30)
          break;
        v32 = &s_17_15;
LABEL_68:
        v33 = a1;
        v34 = 1;
        goto LABEL_100;
      case 5:
        if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v30)
          break;
        v32 = &s_18_9;
        goto LABEL_99;
      case 6:
        if (**(_DWORD **)(a1 + 40) > v30)
          break;
        v12 = slice_del(a1);
        if ((v12 & 0x80000000) != 0)
          return v12;
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
        v35 = find_among_b(a1, (uint64_t)&a_2_12, 6);
        if (!v35)
          goto LABEL_167;
        v36 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 20) = v36;
        switch(v35)
        {
          case 1:
            if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v36)
              goto LABEL_167;
            v12 = slice_del(a1);
            if ((v12 & 0x80000000) != 0)
              return v12;
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
            if (!eq_s_b(a1, 2, &s_19_7))
              goto LABEL_167;
            v36 = *(_DWORD *)(a1 + 8);
            *(_DWORD *)(a1 + 20) = v36;
            break;
          case 2:
            v96 = *(_QWORD *)(a1 + 40);
            if (*(_DWORD *)(v96 + 8) <= v36)
              goto LABEL_109;
            if (*(_DWORD *)(v96 + 4) > v36)
              goto LABEL_167;
            v32 = &s_20_9;
            goto LABEL_99;
          case 3:
            goto LABEL_231;
          case 4:
            if (**(_DWORD **)(a1 + 40) > v36)
              goto LABEL_167;
            v32 = &s_21_35;
            goto LABEL_68;
          default:
            goto LABEL_167;
        }
        goto LABEL_231;
      case 7:
        if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v30)
          break;
        v12 = slice_del(a1);
        if ((v12 & 0x80000000) != 0)
          return v12;
        v37 = *(int *)(a1 + 8);
        *(_DWORD *)(a1 + 24) = v37;
        v38 = v37 - 1;
        if ((int)v38 <= *(_DWORD *)(a1 + 16))
          goto LABEL_167;
        v39 = *(_BYTE *)(*(_QWORD *)a1 + v38);
        if ((v39 & 0xE0) != 0x60)
          goto LABEL_167;
        if (((0x401008u >> v39) & 1) == 0)
          goto LABEL_167;
        v40 = find_among_b(a1, (uint64_t)&a_3_11, 3);
        if (!v40)
          goto LABEL_167;
        v36 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 20) = v36;
        switch(v40)
        {
          case 3:
LABEL_231:
            if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v36)
              goto LABEL_167;
            break;
          case 2:
            if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v36)
            {
              v32 = &s_23_13;
              goto LABEL_99;
            }
            break;
          case 1:
            if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v36)
            {
              v32 = &s_22_17;
LABEL_99:
              v33 = a1;
              v34 = 3;
LABEL_100:
              v12 = slice_from_s(v33, v34, v32);
              if ((v12 & 0x80000000) == 0)
                goto LABEL_167;
              return v12;
            }
            break;
          default:
            goto LABEL_167;
        }
LABEL_109:
        v12 = slice_del(a1);
        if ((v12 & 0x80000000) == 0)
          goto LABEL_167;
        return v12;
      case 8:
        if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v30)
          break;
        v12 = slice_del(a1);
        if ((v12 & 0x80000000) != 0)
          return v12;
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
        if (!eq_s_b(a1, 2, &s_24_8))
          goto LABEL_167;
        v41 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 20) = v41;
        if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v41)
          goto LABEL_167;
        v12 = slice_del(a1);
        if ((v12 & 0x80000000) != 0)
          return v12;
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
        if (!eq_s_b(a1, 2, &s_25_6))
          goto LABEL_167;
        v42 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 20) = v42;
        if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) <= v42)
          goto LABEL_109;
        v32 = &s_26_4;
        goto LABEL_99;
      case 9:
        v32 = &s_27_8;
        goto LABEL_99;
      case 10:
        if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) > v30)
          break;
        v32 = &s_28_5;
        v33 = a1;
        v34 = 2;
        goto LABEL_100;
      case 11:
        v43 = *(_QWORD *)(a1 + 40);
        if (*(_DWORD *)(v43 + 8) <= v30)
          goto LABEL_109;
        if (*(_DWORD *)(v43 + 4) > v30)
          break;
        v32 = &s_29_3;
        goto LABEL_99;
      case 12:
        if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) > v30
          || out_grouping_b_U(a1, (uint64_t)&g_v_8, 97, 251, 0))
        {
          break;
        }
        goto LABEL_109;
      case 13:
        if (**(_DWORD **)(a1 + 40) > v30)
          break;
        v44 = &s_30_11;
        goto LABEL_115;
      case 14:
        if (**(_DWORD **)(a1 + 40) > v30)
          break;
        v44 = &s_31_3;
LABEL_115:
        v45 = slice_from_s(a1, 3, v44);
        goto LABEL_116;
      case 15:
        v49 = *(_DWORD *)(a1 + 12);
        if (in_grouping_b_U(a1, (uint64_t)&g_v_8, 97, 251, 0)
          || **(_DWORD **)(a1 + 40) > *(_DWORD *)(a1 + 8))
        {
          break;
        }
        *(_DWORD *)(a1 + 8) = v30 - v49 + *(_DWORD *)(a1 + 12);
        v45 = slice_del(a1);
LABEL_116:
        v46 = v45 & (v45 >> 31);
        if (v45 >= 0)
          v47 = 1;
        else
          v47 = v46;
        if ((v45 & 0x80000000) == 0)
          goto LABEL_125;
        if ((v46 & 0x80000000) == 0)
          goto LABEL_167;
        v48 = v46 >> 31;
        goto LABEL_155;
      default:
        goto LABEL_167;
    }
  }
  LODWORD(v47) = 1;
LABEL_125:
  v50 = *(_DWORD *)(a1 + 12);
  v51 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 8) = v50;
  v52 = *(int **)(a1 + 40);
  v53 = *v52;
  if (v50 < *v52)
  {
LABEL_143:
    *(_DWORD *)(a1 + 8) = v50;
    v58 = *v52;
    if (v50 < v58)
    {
LABEL_150:
      *(_DWORD *)(a1 + 8) = v50;
      *(_DWORD *)(a1 + 24) = v50;
      if (v50 > v51)
      {
        v61 = v50 - 1;
        if (*(_BYTE *)(*(_QWORD *)a1 + v61) == 115)
        {
          *(_DWORD *)(a1 + 8) = v61;
          *(_DWORD *)(a1 + 20) = v61;
          if (eq_s_b(a1, 2, &s_32_9)
            || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - 1,
                !out_grouping_b_U(a1, (uint64_t)&g_keep_with_s, 97, 232, 0)))
          {
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - 1;
            v12 = slice_del(a1);
            if ((v12 & 0x80000000) != 0)
              return v12;
            v50 = *(_DWORD *)(a1 + 8);
          }
          else
          {
            v50 = *(_DWORD *)(a1 + 12);
            *(_DWORD *)(a1 + 8) = v50;
          }
        }
      }
      v70 = **(_DWORD **)(a1 + 40);
      if (v50 < v70)
      {
LABEL_196:
        v77 = *(_DWORD *)(a1 + 16);
        v78 = *(int *)(a1 + 12);
        *(_DWORD *)(a1 + 8) = v78;
        if ((int)v78 - 2 <= v77)
          goto LABEL_242;
        v79 = *(_BYTE *)(v78 + *(_QWORD *)a1 - 1);
        if ((v79 & 0xE0) != 0x60)
          goto LABEL_242;
        if (((0x105000u >> v79) & 1) == 0)
          goto LABEL_242;
        if (!find_among_b(a1, (uint64_t)&a_8_5, 5))
          goto LABEL_242;
        v80 = *(unsigned int *)(a1 + 12);
        v81 = *(unsigned int *)(a1 + 16);
        *(_DWORD *)(a1 + 8) = v80;
        *(_DWORD *)(a1 + 24) = v80;
        v82 = skip_utf8(*(_QWORD *)a1, v80, v81, 0, -1);
        if (v82 < 0
          || (*(_DWORD *)(a1 + 8) = v82, *(_DWORD *)(a1 + 20) = v82, v12 = slice_del(a1), (v12 & 0x80000000) == 0))
        {
LABEL_242:
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
          v83 = 2;
          do
            --v83;
          while (!out_grouping_b_U(a1, (uint64_t)&g_v_8, 97, 251, 0));
          if (v83 > 0
            || (v84 = *(_DWORD *)(a1 + 8),
                v85 = *(_DWORD *)(a1 + 12),
                *(_DWORD *)(a1 + 24) = v84,
                !eq_s_b(a1, 2, &s_34_16))
            && (*(_DWORD *)(a1 + 8) = v84 - v85 + *(_DWORD *)(a1 + 12), !eq_s_b(a1, 2, &s_35_3))
            || (*(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8), v12 = slice_from_s(a1, 1, &s_36_9), (v12 & 0x80000000) == 0))
          {
            v86 = *(unsigned int *)(a1 + 12);
            v87 = *(unsigned int *)(a1 + 16);
            *(_DWORD *)(a1 + 8) = v87;
            v88 = v87;
            while (1)
            {
              *(_DWORD *)(a1 + 20) = v88;
              if ((int)v88 < (int)v86
                && (v89 = *(_BYTE *)(*(_QWORD *)a1 + (int)v88), (v89 & 0xE0) == 0x40)
                && ((0x2200300u >> v89) & 1) != 0)
              {
                among = find_among(a1, (uint64_t)&a_1_12, 7);
                if (!among)
                  goto LABEL_230;
                v88 = *(unsigned int *)(a1 + 8);
                *(_DWORD *)(a1 + 24) = v88;
                switch(among)
                {
                  case 1:
                    v92 = a1;
                    v93 = 1;
                    v94 = &s_9_16;
                    break;
                  case 2:
                    v92 = a1;
                    v93 = 1;
                    v94 = &s_10_35;
                    break;
                  case 3:
                    v92 = a1;
                    v93 = 1;
                    v94 = &s_11_46;
                    break;
                  case 4:
                    v92 = a1;
                    v93 = 2;
                    v94 = &s_12_14;
                    break;
                  case 5:
                    v92 = a1;
                    v93 = 2;
                    v94 = &s_13_40;
                    break;
                  case 6:
                    v12 = slice_del(a1);
                    if ((v12 & 0x80000000) != 0)
                      return v12;
                    goto LABEL_215;
                  case 7:
                    v86 = *(unsigned int *)(a1 + 12);
                    goto LABEL_213;
                  default:
                    goto LABEL_215;
                }
                v12 = slice_from_s(v92, v93, v94);
                if ((v12 & 0x80000000) != 0)
                  return v12;
              }
              else
              {
                *(_DWORD *)(a1 + 24) = v88;
LABEL_213:
                v90 = skip_utf8(*(_QWORD *)a1, v88, 0, v86, 1);
                if (v90 < 0)
                {
LABEL_230:
                  *(_DWORD *)(a1 + 8) = v87;
                  return 1;
                }
                *(_DWORD *)(a1 + 8) = v90;
              }
LABEL_215:
              v88 = *(unsigned int *)(a1 + 8);
              v86 = *(unsigned int *)(a1 + 12);
            }
          }
        }
        return v12;
      }
      v71 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 16) = v70;
      *(_DWORD *)(a1 + 24) = v50;
      if (v50 > v70)
      {
        v72 = *(_BYTE *)(*(_QWORD *)a1 + v50 - 1);
        if ((v72 & 0xE0) == 0x60 && ((0x44020u >> v72) & 1) != 0)
        {
          v73 = find_among_b(a1, (uint64_t)&a_7_6, 6);
          if (v73)
          {
            v74 = *(int *)(a1 + 8);
            *(_DWORD *)(a1 + 20) = v74;
            if (v73 == 3)
              goto LABEL_188;
            if (v73 == 2)
            {
              v12 = slice_from_s(a1, 1, &s_33_3);
              if ((v12 & 0x80000000) != 0)
                return v12;
              goto LABEL_195;
            }
            if (v73 == 1 && *(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) <= (int)v74 && (int)v74 > *(_DWORD *)(a1 + 16))
            {
              v75 = v74 - 1;
              if (*(unsigned __int8 *)(*(_QWORD *)a1 + v75) - 115 <= 1)
              {
                *(_DWORD *)(a1 + 8) = v75;
LABEL_188:
                v12 = slice_del(a1);
                if ((v12 & 0x80000000) != 0)
                  return v12;
              }
            }
          }
        }
      }
LABEL_195:
      *(_DWORD *)(a1 + 16) = v71;
      goto LABEL_196;
    }
    *(_DWORD *)(a1 + 16) = v58;
    *(_DWORD *)(a1 + 24) = v50;
    v59 = find_among_b(a1, (uint64_t)&a_6_6, 38);
    if (!v59)
    {
LABEL_149:
      *(_DWORD *)(a1 + 16) = v51;
      v50 = *(_DWORD *)(a1 + 12);
      goto LABEL_150;
    }
    v60 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 20) = v60;
    if (v59 == 3)
    {
      v12 = slice_del(a1);
      if ((v12 & 0x80000000) != 0)
        return v12;
      v64 = *(int *)(a1 + 8);
      *(_DWORD *)(a1 + 24) = v64;
      if ((int)v64 <= *(_DWORD *)(a1 + 16) || (v65 = v64 - 1, *(_BYTE *)(*(_QWORD *)a1 + v65) != 101))
      {
LABEL_166:
        *(_DWORD *)(a1 + 16) = v51;
        goto LABEL_167;
      }
      *(_DWORD *)(a1 + 8) = v65;
      *(_DWORD *)(a1 + 20) = v65;
    }
    else if (v59 != 2)
    {
      if (v59 != 1)
        goto LABEL_166;
      if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v60)
        goto LABEL_149;
    }
    v12 = slice_del(a1);
    if ((v12 & 0x80000000) != 0)
      return v12;
    goto LABEL_166;
  }
  *(_DWORD *)(a1 + 16) = v53;
  *(_DWORD *)(a1 + 24) = v50;
  if (v50 <= v53
    || (v54 = *(_BYTE *)(v50 + *(_QWORD *)a1 - 1), (v54 & 0xE0) != 0x60)
    || ((0x41C0222u >> v54) & 1) == 0)
  {
    v55 = 0;
    goto LABEL_130;
  }
  v55 = find_among_b(a1, (uint64_t)&a_5_9, 35);
  if (!v55)
    goto LABEL_130;
  v62 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v62;
  if ((int)v62 > *(_DWORD *)(a1 + 16))
  {
    v63 = v62 - 1;
    if (*(_BYTE *)(*(_QWORD *)a1 + v63) == 72)
    {
      v55 = 0;
      *(_DWORD *)(a1 + 8) = v63;
      goto LABEL_130;
    }
  }
  v76 = out_grouping_b_U(a1, (uint64_t)&g_v_8, 97, 251, 0);
  v55 = 0;
  if (v76)
  {
LABEL_130:
    *(_DWORD *)(a1 + 16) = v51;
  }
  else
  {
    v55 = slice_del(a1);
    if ((v55 & 0x80000000) == 0)
    {
      v55 = 1;
      goto LABEL_130;
    }
  }
  if (v55 >= 0)
    v56 = v47;
  else
    v56 = v55;
  v48 = v55 >> 31;
  if (v55)
    v47 = v56;
  else
    v47 = v47;
  if (v55)
    v57 = v55 >> 31;
  else
    v57 = 4;
  if (!v57)
    goto LABEL_167;
  if (v57 == 4)
  {
    v52 = *(int **)(a1 + 40);
    v50 = *(_DWORD *)(a1 + 12);
    v51 = *(_DWORD *)(a1 + 16);
    goto LABEL_143;
  }
LABEL_155:
  if (!v48)
  {
LABEL_167:
    v66 = *(_DWORD *)(a1 + 16);
    v67 = *(int *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v67;
    *(_DWORD *)(a1 + 24) = v67;
    if ((int)v67 > v66)
    {
      v68 = v67 - 1;
      if (*(_BYTE *)(*(_QWORD *)a1 + v68) == 89)
      {
        *(_DWORD *)(a1 + 8) = v68;
        *(_DWORD *)(a1 + 20) = v68;
        v69 = &s_37_4;
        goto LABEL_172;
      }
    }
    if (eq_s_b(a1, 2, &s_38_5))
    {
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
      v69 = &s_39_37;
LABEL_172:
      v12 = slice_from_s(a1, 1, v69);
      if ((v12 & 0x80000000) != 0)
        return v12;
    }
    goto LABEL_196;
  }
  return v47;
}

_QWORD *french_UTF_8_create_env()
{
  return SN_create_env(0, 3, 0);
}

void french_UTF_8_close_env(uint64_t a1)
{
  SN_close_env(a1, 0);
}

uint64_t arabic_UTF_8_stem(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  int among;
  uint64_t i;
  int v8;
  uint64_t v9;
  int v10;
  void *v11;
  uint64_t v12;
  int v13;
  int v14;
  _BYTE *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  int v51;
  uint64_t v52;
  int among_b;
  int v54;
  unsigned int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  int v67;
  int v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  char v83;
  int v84;
  void *v85;
  int v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  _BYTE *v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t j;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char v108;
  int v109;
  uint64_t v110;
  void *v111;
  int v112;

  v2 = 0;
  **(_BYTE **)(a1 + 48) = 1;
  *(_BYTE *)(*(_QWORD *)(a1 + 48) + 1) = 1;
  *(_BYTE *)(*(_QWORD *)(a1 + 48) + 2) = 0;
  v3 = *(_DWORD *)(a1 + 12);
  v4 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v4;
  if ((int)v4 + 3 >= v3)
    goto LABEL_9;
  v5 = *(unsigned __int8 *)(*(_QWORD *)a1 + v4 + 3);
  if (v5 == 167 || v5 == 132)
  {
    among = find_among(a1, (uint64_t)&a_3_12, 4);
    if (among)
    {
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
      if (among != 2)
      {
        if (among != 1)
        {
          v2 = 1;
          goto LABEL_9;
        }
        if ((int)len_utf8(*(char **)a1) <= 4)
          goto LABEL_8;
LABEL_184:
        v2 = 1;
        **(_BYTE **)(a1 + 48) = 1;
        *(_BYTE *)(*(_QWORD *)(a1 + 48) + 1) = 0;
        *(_BYTE *)(*(_QWORD *)(a1 + 48) + 2) = 1;
        goto LABEL_9;
      }
      if ((int)len_utf8(*(char **)a1) >= 4)
        goto LABEL_184;
    }
  }
LABEL_8:
  v2 = 0;
LABEL_9:
  *(_DWORD *)(a1 + 8) = v4;
  for (i = v4; ; i = *(unsigned int *)(a1 + 8))
  {
    *(_DWORD *)(a1 + 20) = i;
    v8 = find_among(a1, (uint64_t)&a_0_14, 144);
    if (v8)
    {
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
      switch(v8)
      {
        case 1:
          v9 = slice_del(a1);
          if ((v9 & 0x80000000) != 0)
            return v9;
          continue;
        case 2:
          v11 = &s_0_133;
          goto LABEL_26;
        case 3:
          v11 = &s_1_53;
          goto LABEL_26;
        case 4:
          v11 = &s_2_53;
          goto LABEL_26;
        case 5:
          v11 = &s_3_98;
          goto LABEL_26;
        case 6:
          v11 = &s_4_99;
          goto LABEL_26;
        case 7:
          v11 = &s_5_53;
          goto LABEL_26;
        case 8:
          v11 = &s_6_128;
          goto LABEL_26;
        case 9:
          v11 = &s_7_89;
          goto LABEL_26;
        case 10:
          v11 = &s_8_104;
          goto LABEL_26;
        case 11:
          v11 = &s_9_17;
LABEL_26:
          v12 = a1;
          v13 = 1;
          goto LABEL_64;
        case 12:
          v11 = &s_10_36;
          goto LABEL_63;
        case 13:
          v11 = &s_11_47;
          goto LABEL_63;
        case 14:
          v11 = &s_12_15;
          goto LABEL_63;
        case 15:
          v11 = &s_13_41;
          goto LABEL_63;
        case 16:
          v11 = &s_14_18;
          goto LABEL_63;
        case 17:
          v11 = &s_15_11;
          goto LABEL_63;
        case 18:
          v11 = &s_16_11;
          goto LABEL_63;
        case 19:
          v11 = &s_17_16;
          goto LABEL_63;
        case 20:
          v11 = &s_18_10;
          goto LABEL_63;
        case 21:
          v11 = &s_19_8;
          goto LABEL_63;
        case 22:
          v11 = &s_20_10;
          goto LABEL_63;
        case 23:
          v11 = &s_21_36;
          goto LABEL_63;
        case 24:
          v11 = &s_22_18;
          goto LABEL_63;
        case 25:
          v11 = &s_23_14;
          goto LABEL_63;
        case 26:
          v11 = &s_24_9;
          goto LABEL_63;
        case 27:
          v11 = &s_25_7;
          goto LABEL_63;
        case 28:
          v11 = &s_26_5;
          goto LABEL_63;
        case 29:
          v11 = &s_27_9;
          goto LABEL_63;
        case 30:
          v11 = &s_28_6;
          goto LABEL_63;
        case 31:
          v11 = &s_29_4;
          goto LABEL_63;
        case 32:
          v11 = &s_30_12;
          goto LABEL_63;
        case 33:
          v11 = &s_31_4;
          goto LABEL_63;
        case 34:
          v11 = &s_32_10;
          goto LABEL_63;
        case 35:
          v11 = &s_33_4;
          goto LABEL_63;
        case 36:
          v11 = &s_34_17;
          goto LABEL_63;
        case 37:
          v11 = &s_35_4;
          goto LABEL_63;
        case 38:
          v11 = &s_36_10;
          goto LABEL_63;
        case 39:
          v11 = &s_37_5;
          goto LABEL_63;
        case 40:
          v11 = &s_38_6;
          goto LABEL_63;
        case 41:
          v11 = &s_39_38;
          goto LABEL_63;
        case 42:
          v11 = &s_40_6;
          goto LABEL_63;
        case 43:
          v11 = &s_41_13;
          goto LABEL_63;
        case 44:
          v11 = &s_42_3;
          goto LABEL_63;
        case 45:
          v11 = &s_43_12;
          goto LABEL_63;
        case 46:
          v11 = &s_44_96;
          goto LABEL_63;
        case 47:
          v11 = &s_45_2;
LABEL_63:
          v12 = a1;
          v13 = 2;
          goto LABEL_64;
        case 48:
          v11 = &s_46_32;
          goto LABEL_70;
        case 49:
          v11 = &s_47_26;
          goto LABEL_70;
        case 50:
          v11 = &s_48_3;
          goto LABEL_70;
        case 51:
          v11 = &s_49_3;
LABEL_70:
          v12 = a1;
          v13 = 4;
LABEL_64:
          v9 = slice_from_s(v12, v13, v11);
          if ((v9 & 0x80000000) == 0)
            continue;
          return v9;
        default:
          continue;
      }
    }
    *(_DWORD *)(a1 + 8) = i;
    v10 = skip_utf8(*(_QWORD *)a1, i, 0, *(unsigned int *)(a1 + 12), 1);
    if (v10 < 0)
      break;
    *(_DWORD *)(a1 + 8) = v10;
  }
  *(_DWORD *)(a1 + 16) = v4;
  v14 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v14;
  v15 = *(_BYTE **)(a1 + 48);
  if (!v15[1])
  {
LABEL_130:
    *(_DWORD *)(a1 + 8) = v14;
    if (!*v15)
    {
LABEL_262:
      v76 = *(_DWORD *)(a1 + 16);
      v77 = *(int *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v77;
      *(_DWORD *)(a1 + 24) = v77;
      v78 = v77 - 1;
      if ((int)v78 > v76 && *(unsigned __int8 *)(*(_QWORD *)a1 + v78) == 137)
      {
        if (find_among_b(a1, (uint64_t)&a_21_1, 1))
        {
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
          v9 = slice_from_s(a1, 2, &s_68_7);
          if ((v9 & 0x80000000) != 0)
            return v9;
        }
      }
LABEL_271:
      v81 = *(_DWORD *)(a1 + 12);
      v82 = *(int *)(a1 + 16);
      *(_DWORD *)(a1 + 8) = v82;
      *(_DWORD *)(a1 + 20) = v82;
      if ((int)v82 + 3 < v81
        && (v83 = *(_BYTE *)(*(_QWORD *)a1 + v82 + 3), (v83 & 0xE0) == 0xA0)
        && ((0xBCu >> v83) & 1) != 0
        && (v84 = find_among(a1, (uint64_t)&a_4_11, 5)) != 0)
      {
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
        switch(v84)
        {
          case 1:
            if ((int)len_utf8(*(char **)a1) < 4)
              goto LABEL_287;
            v85 = &s_54_6;
            break;
          case 2:
            if ((int)len_utf8(*(char **)a1) < 4)
              goto LABEL_287;
            v85 = &s_55_4;
            break;
          case 3:
            if ((int)len_utf8(*(char **)a1) < 4)
              goto LABEL_287;
            v85 = &s_56_13;
            break;
          case 4:
            if ((int)len_utf8(*(char **)a1) < 4)
              goto LABEL_287;
            v85 = &s_57_26;
            break;
          default:
            goto LABEL_288;
        }
        v9 = slice_from_s(a1, 2, v85);
        if ((v9 & 0x80000000) != 0)
          return v9;
      }
      else
      {
LABEL_287:
        *(_DWORD *)(a1 + 8) = v82;
      }
LABEL_288:
      v86 = *(_DWORD *)(a1 + 8);
      if (!eq_s(a1, 4, &s_58_4)
        && (*(_DWORD *)(a1 + 8) = v86, !eq_s(a1, 4, &s_59_3))
        && (*(_DWORD *)(a1 + 8) = v86, *(_DWORD *)(a1 + 20) = v86, v87 = v86 + 1, (int)v87 < *(_DWORD *)(a1 + 12))
        && ((v88 = *(unsigned __int8 *)(*(_QWORD *)a1 + v87), v88 == 136) || v88 == 129)
        && find_among(a1, (uint64_t)&a_5_10, 2)
        && (*(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8), (int)len_utf8(*(char **)a1) >= 4))
      {
        v89 = slice_del(a1);
        if (v89 < 0)
          return v89 & (v89 >> 31);
        v86 = *(_DWORD *)(a1 + 8);
      }
      else
      {
        *(_DWORD *)(a1 + 8) = v86;
      }
      *(_DWORD *)(a1 + 20) = v86;
      v90 = v86 + 3;
      if ((int)v90 < *(_DWORD *)(a1 + 12))
      {
        v91 = *(unsigned __int8 *)(*(_QWORD *)a1 + v90);
        if (v91 == 167 || v91 == 132)
        {
          v92 = find_among(a1, (uint64_t)&a_6_7, 4);
          if (v92)
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
            if (v92 == 2)
            {
              if ((int)len_utf8(*(char **)a1) >= 5)
              {
LABEL_305:
                v9 = slice_del(a1);
                if ((v9 & 0x80000000) != 0)
                  return v9;
                goto LABEL_336;
              }
            }
            else
            {
              if (v92 != 1)
                goto LABEL_336;
              if ((int)len_utf8(*(char **)a1) >= 6)
                goto LABEL_305;
            }
          }
        }
      }
      *(_DWORD *)(a1 + 8) = v86;
      v93 = *(_BYTE **)(a1 + 48);
      if (*v93)
      {
        v94 = r_Prefix_Step3b_Noun(a1);
        if (v94 >= 0)
          v95 = v2;
        else
          v95 = v94;
        v96 = v94 >> 31;
        if (v94)
          v97 = v95;
        else
          v97 = v2;
        if (v94)
          v98 = v94 >> 31;
        else
          v98 = 34;
        if (!v98)
          goto LABEL_336;
        if (v98 != 34)
        {
          v2 = v97;
          goto LABEL_334;
        }
        v93 = *(_BYTE **)(a1 + 48);
      }
      else
      {
        LODWORD(v97) = v2;
      }
      *(_DWORD *)(a1 + 8) = v86;
      if (v93[1])
      {
        v99 = r_Prefix_Step3_Verb(a1);
        if ((_DWORD)v99)
        {
          v2 = v99;
          if ((v99 & 0x80000000) != 0)
            return v2;
        }
        else
        {
          *(_DWORD *)(a1 + 8) = v86;
        }
        v100 = r_Prefix_Step4_Verb(a1);
        v96 = v100 >> 31;
        if (v100 >= 0)
          v2 = v97;
        else
          v2 = v100;
        if (!v100)
          v96 = 35;
        if (v100 <= 0)
        {
LABEL_334:
          if (v96 > 0x23 || ((1 << v96) & 0xA00000001) == 0)
            return v2;
        }
      }
LABEL_336:
      *(_DWORD *)(a1 + 16) = v82;
      v101 = *(int *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v101;
      *(_DWORD *)(a1 + 24) = v101;
      v102 = v101 - 1;
      if ((int)v102 > (int)v82)
      {
        v103 = *(_BYTE *)(*(_QWORD *)a1 + v102);
        if ((v103 & 0xE0) == 0xA0 && ((0x7Cu >> v103) & 1) != 0)
        {
          if (find_among_b(a1, (uint64_t)&a_1_13, 5))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
            v9 = slice_from_s(a1, 2, &s_50_7);
            if ((v9 & 0x80000000) != 0)
              return v9;
          }
        }
      }
      *(_DWORD *)(a1 + 8) = v82;
      for (j = v82; ; j = *(unsigned int *)(a1 + 8))
      {
        *(_DWORD *)(a1 + 20) = j;
        v105 = (int)j + 1;
        v106 = *(unsigned int *)(a1 + 12);
        v107 = *(char **)a1;
        if ((int)v105 >= (int)v106)
          goto LABEL_351;
        v108 = v107[v105];
        if ((v108 & 0xE0) != 0xA0 || ((0x7Cu >> v108) & 1) == 0)
          goto LABEL_351;
        v109 = find_among(a1, (uint64_t)&a_2_13, 5);
        if (!v109)
          break;
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
        switch(v109)
        {
          case 3:
            v110 = a1;
            v111 = &s_53_7;
            break;
          case 2:
            v110 = a1;
            v111 = &s_52_4;
            break;
          case 1:
            v110 = a1;
            v111 = &s_51_10;
            break;
          default:
            continue;
        }
        v9 = slice_from_s(v110, 2, v111);
        if ((v9 & 0x80000000) != 0)
          return v9;
LABEL_353:
        ;
      }
      v107 = *(char **)a1;
      v106 = *(unsigned int *)(a1 + 12);
LABEL_351:
      *(_DWORD *)(a1 + 8) = j;
      v112 = skip_utf8((uint64_t)v107, j, 0, v106, 1);
      if (v112 < 0)
      {
        *(_DWORD *)(a1 + 8) = v82;
        return 1;
      }
      *(_DWORD *)(a1 + 8) = v112;
      goto LABEL_353;
    }
    *(_DWORD *)(a1 + 24) = v14;
    v35 = v14 - 1;
    if ((int)v35 > *(_DWORD *)(a1 + 16) && *(unsigned __int8 *)(*(_QWORD *)a1 + v35) == 169)
    {
      if (find_among_b(a1, (uint64_t)&a_15_1, 1))
      {
        *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
        if ((int)len_utf8(*(char **)a1) >= 4)
        {
          v36 = slice_del(a1);
          if (v36 >= 0)
            v2 = v2;
          else
            v2 = v36;
          if ((v36 & 0x80000000) == 0)
            goto LABEL_250;
          goto LABEL_247;
        }
      }
    }
    v37 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v37;
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 48) + 2))
    {
      *(_DWORD *)(a1 + 24) = v37;
      among_b = find_among_b(a1, (uint64_t)&a_10_2, 10);
      if (among_b)
      {
        *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
        switch(among_b)
        {
          case 3:
            if ((int)len_utf8(*(char **)a1) >= 6)
              goto LABEL_211;
            break;
          case 2:
            if ((int)len_utf8(*(char **)a1) >= 5)
              goto LABEL_211;
            break;
          case 1:
            if ((int)len_utf8(*(char **)a1) >= 4)
            {
LABEL_211:
              v9 = slice_del(a1);
              if ((v9 & 0x80000000) != 0)
                return v9;
LABEL_212:
              v59 = *(_DWORD *)(a1 + 8);
              v58 = *(_DWORD *)(a1 + 12);
              v60 = r_Suffix_Noun_Step2a(a1);
              if (v60 >= 0)
                v61 = v2;
              else
                v61 = v60;
              v62 = v60 >> 31;
              if (v60)
                v2 = v61;
              else
                v2 = v2;
              if (v60)
                v63 = v60 >> 31;
              else
                v63 = 18;
              if (!v63)
                goto LABEL_250;
              if (v63 != 18)
                goto LABEL_267;
              v64 = v58 - v59;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v64;
              v65 = r_Suffix_Noun_Step2b(a1);
              if (v65 >= 0)
                v66 = v2;
              else
                v66 = v65;
              v62 = v65 >> 31;
              if (v65)
                v2 = v66;
              else
                v2 = v2;
              if (v65)
                v67 = v65 >> 31;
              else
                v67 = 20;
              if (!v67)
                goto LABEL_250;
              if (v67 != 20)
                goto LABEL_267;
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v64;
              v68 = r_Suffix_Noun_Step2c1(a1);
              if (v68 >= 0)
                v69 = v2;
              else
                v69 = v68;
              v62 = v68 >> 31;
              if (v68)
                v2 = v69;
              else
                v2 = v2;
              if (v68)
                v70 = v68 >> 31;
              else
                v70 = 21;
              if (!v70)
                goto LABEL_250;
              if (v70 != 21)
              {
LABEL_267:
                if (v62)
                  return v2;
LABEL_250:
                v73 = *(int *)(a1 + 8);
                *(_DWORD *)(a1 + 24) = v73;
                v74 = v73 - 1;
                if ((int)v74 > *(_DWORD *)(a1 + 16) && *(unsigned __int8 *)(*(_QWORD *)a1 + v74) == 138)
                {
                  if (find_among_b(a1, (uint64_t)&a_16_1, 1))
                  {
                    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
                    if ((int)len_utf8(*(char **)a1) >= 3)
                    {
                      v75 = slice_del(a1);
                      if (v75 >= 0)
                        v2 = v2;
                      else
                        v2 = v75;
                      if (v75 < 0)
                      {
                        v21 = v75 >> 31;
                        goto LABEL_259;
                      }
                      goto LABEL_271;
                    }
                  }
                }
                goto LABEL_262;
              }
              v71 = *(unsigned int *)(a1 + 16);
              v72 = (*(_DWORD *)(a1 + 12) - v64);
              *(_DWORD *)(a1 + 8) = v72;
              v57 = skip_utf8(*(_QWORD *)a1, v72, v71, 0, -1);
              if ((v57 & 0x80000000) == 0)
                goto LABEL_207;
            }
            break;
          default:
            goto LABEL_212;
        }
      }
    }
    v38 = *(_DWORD *)(a1 + 16);
    v39 = *(int *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v39;
    *(_DWORD *)(a1 + 24) = v39;
    v40 = v39 - 1;
    if ((int)v40 > v38 && *(unsigned __int8 *)(*(_QWORD *)a1 + v40) == 134)
    {
      if (find_among_b(a1, (uint64_t)&a_11_2, 1))
      {
        *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
        if ((int)len_utf8(*(char **)a1) >= 6)
        {
          v36 = slice_del(a1);
          if (v36 >= 0)
            v2 = v2;
          else
            v2 = v36;
          if (v36 < 0)
          {
LABEL_247:
            v21 = v36 >> 31;
LABEL_248:
            if (v21 && v21 != 15)
              goto LABEL_259;
            goto LABEL_250;
          }
          v42 = *(_DWORD *)(a1 + 8);
          v41 = *(_DWORD *)(a1 + 12);
          v43 = r_Suffix_Noun_Step2a(a1);
          if (v43 >= 0)
            v44 = v2;
          else
            v44 = v43;
          v21 = v43 >> 31;
          if (v43)
            v2 = v44;
          else
            v2 = v2;
          if (v43)
            v45 = v43 >> 31;
          else
            v45 = 23;
          if (!v45)
            goto LABEL_250;
          if (v45 == 23)
          {
            v46 = v41 - v42;
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v46;
            v47 = r_Suffix_Noun_Step2b(a1);
            v48 = v47 >= 0 ? v2 : v47;
            v21 = v47 >> 31;
            v2 = v47 ? v48 : v2;
            v49 = v47 ? v47 >> 31 : 25;
            if (!v49)
              goto LABEL_250;
            if (v49 == 25)
            {
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v46;
              v50 = r_Suffix_Noun_Step2c1(a1);
              v21 = v50 >> 31;
              if (v50 >= 0)
                v2 = v2;
              else
                v2 = v50;
              if (!v50)
                v21 = 22;
              if (v50 > 0)
                goto LABEL_250;
            }
          }
          if (!v21)
            goto LABEL_250;
          if (v21 != 22)
            goto LABEL_248;
        }
      }
    }
    v51 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v51;
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 48) + 2))
    {
      v54 = r_Suffix_Noun_Step2a(a1);
      if (v54 >= 0)
        v55 = v2;
      else
        v55 = v54;
      v21 = v54 >> 31;
      if (v54)
        v2 = v55;
      else
        v2 = v2;
      if (v54)
        v56 = v54 >> 31;
      else
        v56 = 27;
      if (!v56)
        goto LABEL_250;
      if (v56 != 27)
        goto LABEL_248;
      v51 = *(_DWORD *)(a1 + 12);
    }
    *(_DWORD *)(a1 + 8) = v51;
    v52 = r_Suffix_Noun_Step2b(a1);
    if ((_DWORD)v52)
    {
      if ((v52 & 0x80000000) == 0)
        goto LABEL_250;
      v21 = v52 >> 31;
      v2 = v52;
      goto LABEL_248;
    }
    v57 = *(_DWORD *)(a1 + 12);
LABEL_207:
    *(_DWORD *)(a1 + 8) = v57;
    goto LABEL_250;
  }
  v16 = 1;
  do
  {
    v18 = *(_DWORD *)(a1 + 8);
    v17 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 24) = v18;
    v19 = find_among_b(a1, (uint64_t)&a_17_1, 12);
    if (!v19)
    {
LABEL_91:
      v22 = *(_DWORD *)(a1 + 12);
      v23 = v18 - v17 + v22;
      *(_DWORD *)(a1 + 8) = v23;
      if (v16 > 0)
      {
LABEL_92:
        *(_DWORD *)(a1 + 8) = v22;
        *(_DWORD *)(a1 + 24) = v22;
        if (v22 - 3 > *(_DWORD *)(a1 + 16)
          && ((v24 = *(unsigned __int8 *)(*(_QWORD *)a1 + v22 - 1), v24 == 167) || v24 == 133)
          && find_among_b(a1, (uint64_t)&a_19_1, 2)
          && (*(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8), (int)len_utf8(*(char **)a1) >= 5))
        {
          v25 = slice_del(a1);
          if (v25 >= 0)
            v2 = v2;
          else
            v2 = v25;
          if (v25 < 0)
          {
            v21 = v25 >> 31;
            goto LABEL_127;
          }
        }
        else
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
          v34 = r_Suffix_Verb_Step2a(a1);
          v21 = v34 >> 31;
          if (v34 >= 0)
            v2 = v2;
          else
            v2 = v34;
          if (!v34)
            v21 = 2;
          if (v34 <= 0)
            goto LABEL_127;
        }
        goto LABEL_271;
      }
LABEL_102:
      v26 = r_Suffix_Verb_Step2a(a1);
      if (v26 >= 0)
        v27 = v2;
      else
        v27 = v26;
      if (v26)
        v2 = v27;
      else
        v2 = v2;
      if (v26)
        v28 = v26 >> 31;
      else
        v28 = 7;
      if (!v28)
        goto LABEL_271;
      if (v28 != 7)
      {
        if (v26 < 0)
          return v2;
        goto LABEL_271;
      }
      v29 = v22 - v23;
      v30 = *(_DWORD *)(a1 + 16);
      v31 = *(int *)(a1 + 12) - (uint64_t)v29;
      *(_DWORD *)(a1 + 8) = v31;
      *(_DWORD *)(a1 + 24) = v31;
      v32 = v31 - 1;
      if ((int)v32 > v30 && *(unsigned __int8 *)(*(_QWORD *)a1 + v32) == 136)
      {
        v33 = find_among_b(a1, (uint64_t)&a_20_1, 2);
        if (v33)
        {
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
          if (v33 == 2)
          {
            if ((int)len_utf8(*(char **)a1) >= 6)
            {
LABEL_119:
              v9 = slice_del(a1);
              if ((v9 & 0x80000000) == 0)
                goto LABEL_271;
              return v9;
            }
          }
          else
          {
            if (v33 != 1)
              goto LABEL_271;
            if ((int)len_utf8(*(char **)a1) >= 4)
              goto LABEL_119;
          }
        }
      }
      v79 = *(unsigned int *)(a1 + 16);
      v80 = (*(_DWORD *)(a1 + 12) - v29);
      *(_DWORD *)(a1 + 8) = v80;
      if ((skip_utf8(*(_QWORD *)a1, v80, v79, 0, -1) & 0x80000000) == 0)
        goto LABEL_271;
      v22 = *(_DWORD *)(a1 + 12);
      goto LABEL_92;
    }
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    switch(v19)
    {
      case 3:
        if ((int)len_utf8(*(char **)a1) < 6)
          goto LABEL_91;
        break;
      case 2:
        if ((int)len_utf8(*(char **)a1) < 5)
          goto LABEL_91;
        break;
      case 1:
        if ((int)len_utf8(*(char **)a1) < 4)
          goto LABEL_91;
        break;
      default:
        goto LABEL_83;
    }
    v20 = slice_del(a1);
    if ((v20 & 0x80000000) == 0)
    {
LABEL_83:
      LODWORD(v20) = 1;
      goto LABEL_85;
    }
    v2 = v20;
LABEL_85:
    if ((int)v20 < 0)
      v21 = v20 >> 31;
    else
      v21 = 3;
    v16 -= (int)v20 >= 0;
  }
  while (v21 == 3);
  if (!v21)
  {
    v23 = *(_DWORD *)(a1 + 8);
    v22 = *(_DWORD *)(a1 + 12);
    goto LABEL_102;
  }
LABEL_127:
  if (!v21)
    goto LABEL_271;
  if (v21 == 2)
  {
    v14 = *(_DWORD *)(a1 + 12);
    v15 = *(_BYTE **)(a1 + 48);
    goto LABEL_130;
  }
LABEL_259:
  if (v21 == 12 || !v21)
    goto LABEL_271;
  return v2;
}

uint64_t r_Suffix_Verb_Step2a(uint64_t a1)
{
  uint64_t result;

  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  result = find_among_b(a1, (uint64_t)&a_18_1, 11);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    switch((int)result)
    {
      case 1:
        if ((int)len_utf8(*(char **)a1) >= 4)
          goto LABEL_4;
        goto LABEL_7;
      case 2:
        if ((int)len_utf8(*(char **)a1) < 5)
          goto LABEL_7;
        goto LABEL_4;
      case 3:
      case 4:
        if ((int)len_utf8(*(char **)a1) < 6)
        {
LABEL_7:
          result = 0;
        }
        else
        {
LABEL_4:
          result = slice_del(a1);
          if ((result & 0x80000000) == 0)
LABEL_5:
            result = 1;
        }
        break;
      default:
        goto LABEL_5;
    }
  }
  return result;
}

uint64_t r_Suffix_Noun_Step2a(uint64_t a1)
{
  uint64_t result;

  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  result = find_among_b(a1, (uint64_t)&a_12_1, 3);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    if ((int)len_utf8(*(char **)a1) < 5)
    {
      return 0;
    }
    else
    {
      LODWORD(result) = slice_del(a1);
      if ((int)result >= 0)
        return 1;
      else
        return result;
    }
  }
  return result;
}

uint64_t r_Suffix_Noun_Step2b(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 3 <= *(_DWORD *)(a1 + 16) || *(unsigned __int8 *)(v1 + *(_QWORD *)a1 - 1) != 170)
    return 0;
  result = find_among_b(a1, (uint64_t)&a_13_1, 1);
  if (!(_DWORD)result)
    return result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
  if ((int)len_utf8(*(char **)a1) < 5)
    return 0;
  LODWORD(result) = slice_del(a1);
  if ((int)result >= 0)
    return 1;
  else
    return result;
}

uint64_t r_Suffix_Noun_Step2c1(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  v2 = v1 - 1;
  if ((int)v2 <= *(_DWORD *)(a1 + 16) || *(unsigned __int8 *)(*(_QWORD *)a1 + v2) != 170)
    return 0;
  result = find_among_b(a1, (uint64_t)&a_14_1, 1);
  if (!(_DWORD)result)
    return result;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
  if ((int)len_utf8(*(char **)a1) < 4)
    return 0;
  LODWORD(result) = slice_del(a1);
  if ((int)result >= 0)
    return 1;
  else
    return result;
}

uint64_t r_Prefix_Step3b_Noun(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  void *v6;

  v2 = *(_DWORD *)(a1 + 8);
  if (eq_s(a1, 4, &s_60_11))
    return 0;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 20) = v2;
  v3 = v2 + 1;
  if ((int)v3 >= *(_DWORD *)(a1 + 12))
    return 0;
  v4 = *(unsigned __int8 *)(*(_QWORD *)a1 + v3);
  if (v4 != 168 && v4 != 131)
    return 0;
  result = find_among(a1, (uint64_t)&a_7_7, 3);
  if (!(_DWORD)result)
    return result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  if ((_DWORD)result == 3)
  {
    if ((int)len_utf8(*(char **)a1) < 4)
      return 0;
    v6 = &s_62_4;
LABEL_16:
    result = slice_from_s(a1, 2, v6);
    if ((result & 0x80000000) != 0)
      return result;
    return 1;
  }
  if ((_DWORD)result == 2)
  {
    if ((int)len_utf8(*(char **)a1) < 4)
      return 0;
    v6 = &s_61_45;
    goto LABEL_16;
  }
  if ((_DWORD)result != 1)
    return 1;
  if ((int)len_utf8(*(char **)a1) < 4)
    return 0;
  result = slice_del(a1);
  if ((result & 0x80000000) == 0)
    return 1;
  return result;
}

uint64_t r_Prefix_Step3_Verb(uint64_t a1)
{
  uint64_t result;
  void *v3;

  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
  result = find_among(a1, (uint64_t)&a_8_6, 4);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
    switch((int)result)
    {
      case 1:
        if ((int)len_utf8(*(char **)a1) < 5)
          goto LABEL_13;
        v3 = &s_63_4;
        goto LABEL_11;
      case 2:
        if ((int)len_utf8(*(char **)a1) < 5)
          goto LABEL_13;
        v3 = &s_64_7;
        goto LABEL_11;
      case 3:
        if ((int)len_utf8(*(char **)a1) < 5)
          goto LABEL_13;
        v3 = &s_65_2;
        goto LABEL_11;
      case 4:
        if ((int)len_utf8(*(char **)a1) < 5)
        {
LABEL_13:
          result = 0;
        }
        else
        {
          v3 = &s_66_11;
LABEL_11:
          result = slice_from_s(a1, 2, v3);
          if ((result & 0x80000000) == 0)
LABEL_12:
            result = 1;
        }
        break;
      default:
        goto LABEL_12;
    }
  }
  return result;
}

uint64_t r_Prefix_Step4_Verb(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = *(_DWORD *)(a1 + 12);
  v2 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v2;
  v3 = v2 + 5;
  if ((int)v3 >= v1 || *(unsigned __int8 *)(*(_QWORD *)a1 + v3) != 170)
    return 0;
  result = find_among(a1, (uint64_t)&a_9_4, 3);
  if (!(_DWORD)result)
    return result;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  if ((int)len_utf8(*(char **)a1) < 5)
    return 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 48) + 1) = 1;
  **(_BYTE **)(a1 + 48) = 0;
  LODWORD(result) = slice_from_s(a1, 6, &s_67_4);
  if ((int)result >= 0)
    return 1;
  else
    return result;
}

_QWORD *arabic_UTF_8_create_env()
{
  return SN_create_env(0, 0, 3);
}

void arabic_UTF_8_close_env(uint64_t a1)
{
  SN_close_env(a1, 0);
}

uint64_t irish_UTF_8_stem(uint64_t a1)
{
  int v2;
  int among;
  uint64_t result;
  void *v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int among_b;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  void *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  char v26;
  int v27;
  int v28;
  int v29;

  v2 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v2;
  among = find_among(a1, (uint64_t)&a_0_15, 24);
  if (among)
  {
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
    switch(among)
    {
      case 1:
        result = slice_del(a1);
        if ((result & 0x80000000) == 0)
          break;
        return result;
      case 2:
        v5 = &s_0_144;
        goto LABEL_14;
      case 3:
        v5 = &s_1_54;
        goto LABEL_14;
      case 4:
        v5 = &s_2_54;
        goto LABEL_14;
      case 5:
        v5 = &s_3_99;
        goto LABEL_14;
      case 6:
        v5 = &s_4_100;
        goto LABEL_14;
      case 7:
        v5 = &s_5_54;
        goto LABEL_14;
      case 8:
        v5 = &s_6_129;
        goto LABEL_14;
      case 9:
        v5 = &s_7_90;
        goto LABEL_14;
      case 10:
        v5 = &s_8_105;
LABEL_14:
        result = slice_from_s(a1, 1, v5);
        if ((result & 0x80000000) == 0)
          break;
        return result;
      default:
        break;
    }
  }
  *(_DWORD *)(a1 + 8) = v2;
  v6 = *(_DWORD **)(a1 + 40);
  *v6 = *(_DWORD *)(a1 + 12);
  v6[1] = *(_DWORD *)(a1 + 12);
  v6[2] = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8);
  v8 = out_grouping_U(a1, (uint64_t)&g_v_9, 97, 250, 1);
  if ((v8 & 0x80000000) == 0)
    **(_DWORD **)(a1 + 40) = *(_DWORD *)(a1 + 8) + v8;
  *(_DWORD *)(a1 + 8) = v7;
  v9 = out_grouping_U(a1, (uint64_t)&g_v_9, 97, 250, 1);
  if ((v9 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) += v9;
    v10 = in_grouping_U(a1, (uint64_t)&g_v_9, 97, 250, 1);
    if ((v10 & 0x80000000) == 0)
    {
      v11 = *(_DWORD *)(a1 + 8) + v10;
      *(_DWORD *)(a1 + 8) = v11;
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) = v11;
      v12 = out_grouping_U(a1, (uint64_t)&g_v_9, 97, 250, 1);
      if ((v12 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) += v12;
        v13 = in_grouping_U(a1, (uint64_t)&g_v_9, 97, 250, 1);
        if ((v13 & 0x80000000) == 0)
          *(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) = *(_DWORD *)(a1 + 8) + v13;
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v7;
  v14 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v14;
  *(_DWORD *)(a1 + 24) = v14;
  among_b = find_among_b(a1, (uint64_t)&a_1_14, 16);
  if (among_b)
  {
    v16 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 20) = v16;
    if (among_b == 2)
    {
      v17 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 8);
      goto LABEL_27;
    }
    if (among_b == 1)
    {
      v17 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4);
LABEL_27:
      if (v17 <= v16)
      {
        result = slice_del(a1);
        if ((result & 0x80000000) != 0)
          return result;
      }
    }
  }
  v18 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v18;
  *(_DWORD *)(a1 + 24) = v18;
  v19 = find_among_b(a1, (uint64_t)&a_2_14, 25);
  if (v19)
  {
    v20 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 20) = v20;
    switch(v19)
    {
      case 1:
        if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) > v20)
          break;
        result = slice_del(a1);
        if ((result & 0x80000000) == 0)
          break;
        return result;
      case 2:
        v21 = &s_9_18;
        goto LABEL_36;
      case 3:
        v21 = &s_10_37;
LABEL_36:
        v22 = a1;
        v23 = 3;
        goto LABEL_41;
      case 4:
        v21 = &s_11_48;
        goto LABEL_40;
      case 5:
        v21 = &s_12_16;
        v22 = a1;
        v23 = 5;
        goto LABEL_41;
      case 6:
        v21 = &s_13_42;
LABEL_40:
        v22 = a1;
        v23 = 4;
LABEL_41:
        result = slice_from_s(v22, v23, v21);
        if ((result & 0x80000000) == 0)
          break;
        return result;
      default:
        break;
    }
  }
  v24 = *(_DWORD *)(a1 + 16);
  v25 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v25;
  *(_DWORD *)(a1 + 24) = v25;
  if ((int)v25 - 2 <= v24)
    goto LABEL_52;
  v26 = *(_BYTE *)(v25 + *(_QWORD *)a1 - 1);
  if ((v26 & 0xE0) != 0x60)
    goto LABEL_52;
  if (((0x45110u >> v26) & 1) == 0)
    goto LABEL_52;
  v27 = find_among_b(a1, (uint64_t)&a_3_13, 12);
  if (!v27)
    goto LABEL_52;
  v28 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v28;
  if (v27 == 2)
  {
    v29 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4);
  }
  else
  {
    if (v27 != 1)
    {
LABEL_52:
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
      return 1;
    }
    v29 = **(_DWORD **)(a1 + 40);
  }
  if (v29 > v28)
    goto LABEL_52;
  result = slice_del(a1);
  if ((result & 0x80000000) == 0)
    goto LABEL_52;
  return result;
}

_QWORD *irish_UTF_8_create_env()
{
  return SN_create_env(0, 3, 0);
}

void irish_UTF_8_close_env(uint64_t a1)
{
  SN_close_env(a1, 0);
}

_QWORD *create_s()
{
  _QWORD *result;

  result = malloc_type_malloc(0xAuLL, 0x86595534uLL);
  if (result)
    *result++ = 1;
  return result;
}

void lose_s(uint64_t a1)
{
  if (a1)
    free((void *)(a1 - 8));
}

uint64_t skip_utf8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  BOOL v7;

  if (a5 < 0)
  {
    while ((int)a2 > (int)a3)
    {
      v5 = (int)a2 - 1;
      if (*(char *)(a1 + v5) < 0 && (int)v5 > (int)a3)
      {
        v5 = (int)a2 - 1;
        while (*(unsigned __int8 *)(a1 + v5) <= 0xBFu)
        {
          if (--v5 <= (int)a3)
          {
            v5 = a3;
            break;
          }
        }
      }
      LODWORD(a2) = v5;
      if (__CFADD__(a5++, 1))
        return v5;
    }
  }
  else
  {
    if (!a5)
      return a2;
    while ((int)a2 < (int)a4)
    {
      v5 = (a2 + 1);
      if (*(unsigned __int8 *)(a1 + (int)a2) >= 0xC0u && (int)v5 < (int)a4)
      {
        v5 = (int)a2 + 1;
        while (*(char *)(a1 + v5) <= -65)
        {
          if (++v5 >= (int)a4)
          {
            v5 = a4;
            break;
          }
        }
      }
      LODWORD(a2) = v5;
      v7 = __OFSUB__(a5--, 1);
      if ((a5 < 0) ^ v7 | (a5 == 0))
        return v5;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t in_grouping_U(uint64_t a1, uint64_t a2, int a3, signed int a4, int a5)
{
  uint64_t v10;
  int v11;
  int v12;
  uint64_t result;
  signed int v14;

  v10 = *(_QWORD *)a1;
  v12 = *(_DWORD *)(a1 + 8);
  v11 = *(_DWORD *)(a1 + 12);
  while (1)
  {
    v14 = 0;
    result = get_utf8(v10, v12, v11, (unsigned int *)&v14);
    if (!(_DWORD)result)
      break;
    if (v14 > a4
      || v14 - a3 < 0
      || ((*(unsigned __int8 *)(a2 + ((unint64_t)(v14 - a3) >> 3)) >> ((v14 - a3) & 7)) & 1) == 0)
    {
      return result;
    }
    v12 += result;
    *(_DWORD *)(a1 + 8) = v12;
    if (!a5)
      return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t get_utf8(uint64_t a1, int a2, int a3, unsigned int *a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  uint64_t v8;
  int v9;
  int v11;
  uint64_t v12;

  if (a2 >= a3)
    return 0;
  v4 = a2 + 1;
  v5 = *(unsigned __int8 *)(a1 + a2);
  if (v5 < 0xC0 || (_DWORD)v4 == a3)
  {
    result = 1;
  }
  else
  {
    v8 = a2 + 2;
    v9 = *(_BYTE *)(a1 + v4) & 0x3F;
    if (v5 < 0xE0 || (_DWORD)v8 == a3)
    {
      result = 2;
      v5 = v9 & 0xFFFFF83F | ((v5 & 0x1F) << 6);
    }
    else
    {
      v11 = *(_BYTE *)(a1 + v8) & 0x3F;
      if (v5 < 0xF0 || (v12 = a2 + 3, (_DWORD)v12 == a3))
      {
        v5 = ((v5 & 0xF) << 12) | (v9 << 6) | v11;
        result = 3;
      }
      else
      {
        v5 = (v5 << 18) & 0x380000 | (v9 << 12) | (v11 << 6) | *(_BYTE *)(a1 + v12) & 0x3F;
        result = 4;
      }
    }
  }
  *a4 = v5;
  return result;
}

uint64_t in_grouping_b_U(uint64_t a1, uint64_t a2, int a3, signed int a4, int a5)
{
  uint64_t v10;
  int v11;
  int v12;
  uint64_t result;
  signed int v14;

  v10 = *(_QWORD *)a1;
  v11 = *(_DWORD *)(a1 + 16);
  v12 = *(_DWORD *)(a1 + 8);
  while (1)
  {
    v14 = 0;
    result = get_b_utf8(v10, v12, v11, (unsigned int *)&v14);
    if (!(_DWORD)result)
      break;
    if (v14 > a4
      || v14 - a3 < 0
      || ((*(unsigned __int8 *)(a2 + ((unint64_t)(v14 - a3) >> 3)) >> ((v14 - a3) & 7)) & 1) == 0)
    {
      return result;
    }
    v12 -= result;
    *(_DWORD *)(a1 + 8) = v12;
    if (!a5)
      return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t get_b_utf8(uint64_t a1, int a2, int a3, unsigned int *a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  __int16 v9;
  int v10;
  unsigned int v11;

  if (a2 <= a3)
    return 0;
  v4 = a2 - 1;
  v5 = *(unsigned __int8 *)(a1 + v4);
  v6 = 1;
  if ((_DWORD)v4 != a3 && *(char *)(a1 + v4) < 0)
  {
    v7 = v5 & 0x3F;
    v8 = *(unsigned __int8 *)(a1 + a2 - 2);
    v9 = (_WORD)v8 << 6;
    if (a2 - 2 == a3 || v8 >= 0xC0)
    {
      v5 = v9 & 0x7C0 | v7;
      v6 = 2;
    }
    else
    {
      v10 = v9 & 0xFC0 | v7;
      v11 = *(unsigned __int8 *)(a1 + a2 - 3);
      if (a2 - 3 == a3 || v11 >= 0xE0)
      {
        v5 = v10 & 0xFFFF0FFF | ((v11 & 0xF) << 12);
        v6 = 3;
      }
      else
      {
        v5 = ((*(_BYTE *)(a2 + a1 - 4) & 0xE) << 18) | ((v11 & 0x3F) << 12) | v10;
        v6 = 4;
      }
    }
  }
  *a4 = v5;
  return v6;
}

uint64_t out_grouping_U(uint64_t a1, uint64_t a2, int a3, signed int a4, int a5)
{
  uint64_t v10;
  int v11;
  int v12;
  uint64_t result;
  signed int v14;

  v10 = *(_QWORD *)a1;
  v12 = *(_DWORD *)(a1 + 8);
  v11 = *(_DWORD *)(a1 + 12);
  while (1)
  {
    v14 = 0;
    result = get_utf8(v10, v12, v11, (unsigned int *)&v14);
    if (!(_DWORD)result)
      break;
    if (v14 <= a4
      && v14 - a3 >= 0
      && ((*(unsigned __int8 *)(a2 + ((unint64_t)(v14 - a3) >> 3)) >> ((v14 - a3) & 7)) & 1) != 0)
    {
      return result;
    }
    v12 += result;
    *(_DWORD *)(a1 + 8) = v12;
    if (!a5)
      return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t out_grouping_b_U(uint64_t a1, uint64_t a2, int a3, signed int a4, int a5)
{
  uint64_t v10;
  int v11;
  int v12;
  uint64_t result;
  signed int v14;

  v10 = *(_QWORD *)a1;
  v11 = *(_DWORD *)(a1 + 16);
  v12 = *(_DWORD *)(a1 + 8);
  while (1)
  {
    v14 = 0;
    result = get_b_utf8(v10, v12, v11, (unsigned int *)&v14);
    if (!(_DWORD)result)
      break;
    if (v14 <= a4
      && v14 - a3 >= 0
      && ((*(unsigned __int8 *)(a2 + ((unint64_t)(v14 - a3) >> 3)) >> ((v14 - a3) & 7)) & 1) != 0)
    {
      return result;
    }
    v12 -= result;
    *(_DWORD *)(a1 + 8) = v12;
    if (!a5)
      return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t in_grouping(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v9;

  v5 = *(_DWORD *)(a1 + 12);
  v6 = *(int *)(a1 + 8);
  if ((int)v6 > v5)
    v5 = *(_DWORD *)(a1 + 8);
  v7 = v6 + 1;
  while (v5 != v6)
  {
    v8 = *(unsigned __int8 *)(*(_QWORD *)a1 + v6);
    if (v8 > a4)
      return 1;
    v9 = (v8 - a3);
    if ((v9 & 0x80000000) != 0 || ((*(unsigned __int8 *)(a2 + (v9 >> 3)) >> (v9 & 7)) & 1) == 0)
      return 1;
    ++v6;
    *(_DWORD *)(a1 + 8) = v7++;
    if (!a5)
      return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t in_grouping_b(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v9;

  v5 = *(int *)(a1 + 16);
  v6 = *(int *)(a1 + 8);
  v7 = v6 - 1;
  while (v6 > v5)
  {
    v8 = *(unsigned __int8 *)(*(_QWORD *)a1 + v6 - 1);
    if (v8 > a4)
      return 1;
    v9 = (v8 - a3);
    if ((v9 & 0x80000000) != 0 || ((*(unsigned __int8 *)(a2 + (v9 >> 3)) >> (v9 & 7)) & 1) == 0)
      return 1;
    *(_DWORD *)(a1 + 8) = v7--;
    --v6;
    if (!a5)
      return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t out_grouping(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v9;

  v5 = *(_DWORD *)(a1 + 12);
  v6 = *(int *)(a1 + 8);
  if ((int)v6 > v5)
    v5 = *(_DWORD *)(a1 + 8);
  v7 = v6 + 1;
  while (1)
  {
    if (v5 == v6)
      return 0xFFFFFFFFLL;
    v8 = *(unsigned __int8 *)(*(_QWORD *)a1 + v6);
    if (v8 <= a4)
    {
      v9 = (v8 - a3);
      if ((v9 & 0x80000000) == 0 && ((*(unsigned __int8 *)(a2 + (v9 >> 3)) >> (v9 & 7)) & 1) != 0)
        break;
    }
    ++v6;
    *(_DWORD *)(a1 + 8) = v7++;
    if (!a5)
      return 0;
  }
  return 1;
}

uint64_t out_grouping_b(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v9;

  v5 = *(int *)(a1 + 16);
  v6 = *(int *)(a1 + 8);
  v7 = v6 - 1;
  while (1)
  {
    if (v6 <= v5)
      return 0xFFFFFFFFLL;
    v8 = *(unsigned __int8 *)(*(_QWORD *)a1 + v6 - 1);
    if (v8 <= a4)
    {
      v9 = (v8 - a3);
      if ((v9 & 0x80000000) == 0 && ((*(unsigned __int8 *)(a2 + (v9 >> 3)) >> (v9 & 7)) & 1) != 0)
        break;
    }
    *(_DWORD *)(a1 + 8) = v7--;
    --v6;
    if (!a5)
      return 0;
  }
  return 1;
}

uint64_t eq_s(uint64_t a1, int a2, void *__s2)
{
  uint64_t v3;

  v3 = *(int *)(a1 + 8);
  if (*(_DWORD *)(a1 + 12) - (int)v3 < a2 || memcmp((const void *)(*(_QWORD *)a1 + v3), __s2, a2))
    return 0;
  *(_DWORD *)(a1 + 8) = v3 + a2;
  return 1;
}

uint64_t eq_s_b(uint64_t a1, int a2, void *__s2)
{
  uint64_t v3;

  v3 = *(int *)(a1 + 8);
  if ((int)v3 - *(_DWORD *)(a1 + 16) < a2 || memcmp((const void *)(*(_QWORD *)a1 + v3 - a2), __s2, a2))
    return 0;
  *(_DWORD *)(a1 + 8) = v3 - a2;
  return 1;
}

uint64_t eq_v(uint64_t a1, _DWORD *__s2)
{
  return eq_s(a1, *(__s2 - 1), __s2);
}

uint64_t eq_v_b(uint64_t a1, _DWORD *__s2)
{
  return eq_s_b(a1, *(__s2 - 1), __s2);
}

uint64_t find_among(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  BOOL v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  int v21;

  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = *(int *)(a1 + 8);
  v9 = 1;
  while (1)
  {
    v10 = v5 + ((a3 - v5) >> 1);
    if (v6 >= v7)
      LODWORD(v11) = v7;
    else
      LODWORD(v11) = v6;
    v12 = v10;
    v13 = *(_DWORD *)(a2 + 32 * v10);
    if ((int)v11 >= v13)
    {
      v14 = 0;
    }
    else
    {
      v11 = (int)v11;
      while (*(_DWORD *)(a1 + 12) - (_DWORD)v8 != (_DWORD)v11)
      {
        v14 = *(unsigned __int8 *)(*(_QWORD *)a1 + v8 + v11)
            - *(unsigned __int8 *)(*(_QWORD *)(a2 + 32 * v12 + 8) + v11);
        if (v14)
          goto LABEL_13;
        if (++v11 >= v13)
        {
          v14 = 0;
          LODWORD(v11) = v13;
          goto LABEL_13;
        }
      }
      v14 = -1;
    }
LABEL_13:
    if (v14 < 0)
      a3 = v12;
    else
      v5 = v12;
    if (v14 < 0)
      v7 = v11;
    else
      v6 = v11;
    if (a3 - v5 <= 1)
    {
      v15 = v5 >= 1 || a3 == v5;
      v16 = !v15;
      v17 = v16 & v9;
      v9 = 0;
      if ((v17 & 1) == 0)
        break;
    }
  }
  while (1)
  {
    v18 = v5;
    v19 = a2 + 32 * v5;
    if (v6 >= *(_DWORD *)v19)
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v19 + v8;
      v20 = *(uint64_t (**)(uint64_t))(v19 + 24);
      if (!v20)
        break;
      v21 = v20(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)v19 + v8;
      if (v21)
        break;
    }
    v5 = *(_DWORD *)(v19 + 16);
    if (v5 < 0)
      return 0;
  }
  return *(unsigned int *)(a2 + 32 * v18 + 20);
}

uint64_t find_among_b(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  BOOL v20;
  BOOL v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  int v26;

  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = *(int *)(a1 + 8);
  v9 = v8 - *(_DWORD *)(a1 + 16);
  v10 = v8 + *(_QWORD *)a1 - 1;
  v11 = 1;
  while (1)
  {
    v12 = v5 + ((a3 - v5) >> 1);
    if (v6 >= v7)
      v13 = v7;
    else
      v13 = v6;
    v14 = v12;
    v15 = *(_DWORD *)(a2 + 32 * v12);
    if (v15 + ~v13 < 0)
    {
      v19 = 0;
      v16 = v13;
    }
    else
    {
      v16 = v13;
      v17 = (unsigned __int8 *)(v10 - v13);
      v18 = v15 - v13;
      while (v9 != v16)
      {
        v19 = *v17 - *(unsigned __int8 *)(*(_QWORD *)(a2 + 32 * v14 + 8) + --v18);
        if (v19)
          goto LABEL_13;
        ++v16;
        --v17;
        if (v18 <= 0)
        {
          v19 = 0;
          v16 = v15;
          goto LABEL_13;
        }
      }
      v19 = -1;
    }
LABEL_13:
    if (v19 < 0)
      a3 = v14;
    else
      v5 = v14;
    if (v19 < 0)
      v7 = v16;
    else
      v6 = v16;
    if (a3 - v5 <= 1)
    {
      v20 = v5 >= 1 || a3 == v5;
      v21 = !v20;
      v22 = v21 & v11;
      v11 = 0;
      if ((v22 & 1) == 0)
        break;
    }
  }
  while (1)
  {
    v23 = v5;
    v24 = a2 + 32 * v5;
    if (v6 >= *(_DWORD *)v24)
    {
      *(_DWORD *)(a1 + 8) = v8 - *(_DWORD *)v24;
      v25 = *(uint64_t (**)(uint64_t))(v24 + 24);
      if (!v25)
        break;
      v26 = v25(a1);
      *(_DWORD *)(a1 + 8) = v8 - *(_DWORD *)v24;
      if (v26)
        break;
    }
    v5 = *(_DWORD *)(v24 + 16);
    if (v5 < 0)
      return 0;
  }
  return *(unsigned int *)(a2 + 32 * v23 + 20);
}

uint64_t replace_s(uint64_t a1, int a2, int a3, int a4, void *__src, _DWORD *a6)
{
  _DWORD *v12;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t result;

  v12 = *(_DWORD **)a1;
  if (!v12)
  {
    v13 = malloc_type_malloc(0xAuLL, 0x86595534uLL);
    if (!v13)
    {
      *(_QWORD *)a1 = 0;
      return 0xFFFFFFFFLL;
    }
    *v13 = 1;
    v12 = v13 + 1;
    *(_QWORD *)a1 = v12;
  }
  v14 = a2 - a3 + a4;
  if (!v14)
    goto LABEL_12;
  v15 = *(v12 - 1);
  if (v15 + v14 > *(v12 - 2))
  {
    v12 = increase_size((uint64_t)v12, v15 + v14);
    *(_QWORD *)a1 = v12;
    if (!v12)
      return 0xFFFFFFFFLL;
  }
  memmove((char *)v12 + a3 + v14, (char *)v12 + a3, v15 - a3);
  v12 = *(_DWORD **)a1;
  *(_DWORD *)(*(_QWORD *)a1 - 4) = v15 + v14;
  v16 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 12) += v14;
  if (v16 >= a3)
  {
    v17 = v16 + v14;
  }
  else
  {
    v17 = a2;
    if (v16 <= a2)
      goto LABEL_12;
  }
  *(_DWORD *)(a1 + 8) = v17;
LABEL_12:
  if (a4)
    memmove((char *)v12 + a2, __src, a4);
  result = 0;
  if (a6)
    *a6 = v14;
  return result;
}

_DWORD *increase_size(uint64_t a1, int a2)
{
  void *v4;
  _DWORD *v5;

  v4 = (void *)(a1 - 8);
  v5 = malloc_type_realloc((void *)(a1 - 8), a2 + 29, 0x36394E3EuLL);
  if (v5)
  {
    *v5 = a2 + 20;
    return v5 + 2;
  }
  else
  {
    if (a1)
      free(v4);
    return 0;
  }
}

uint64_t slice_from_s(uint64_t a1, int a2, void *__src)
{
  int v4;
  int v6;
  int v7;

  v4 = *(_DWORD *)(a1 + 20);
  if ((v4 & 0x80000000) == 0
    && (v6 = *(_DWORD *)(a1 + 24), v4 <= v6)
    && (v7 = *(_DWORD *)(a1 + 12), v6 <= v7)
    && *(_QWORD *)a1
    && v7 <= *(_DWORD *)(*(_QWORD *)a1 - 4))
  {
    return replace_s(a1, v4, v6, a2, __src, 0);
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

uint64_t slice_from_v(uint64_t a1, _DWORD *__src)
{
  return slice_from_s(a1, *(__src - 1), __src);
}

uint64_t slice_del(uint64_t a1)
{
  return slice_from_s(a1, 0, 0);
}

uint64_t insert_s(uint64_t a1, int a2, int a3, int a4, void *a5)
{
  uint64_t result;
  int v8;
  int v9;
  int v10;

  v10 = 0;
  if (replace_s(a1, a2, a3, a4, a5, &v10))
    return 0xFFFFFFFFLL;
  v8 = *(_DWORD *)(a1 + 20);
  if (v8 >= a2)
    *(_DWORD *)(a1 + 20) = v10 + v8;
  v9 = *(_DWORD *)(a1 + 24);
  result = 0;
  if (v9 >= a2)
    *(_DWORD *)(a1 + 24) = v10 + v9;
  return result;
}

uint64_t insert_v(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  return insert_s(a1, a2, a3, *(a4 - 1), a4);
}

_DWORD *slice_to(uint64_t *a1, _DWORD *__dst)
{
  _DWORD *v2;
  int v3;
  int v5;
  int v6;
  int v7;
  uint64_t v8;

  v2 = __dst;
  v3 = *((_DWORD *)a1 + 5);
  if ((v3 & 0x80000000) == 0)
  {
    v5 = *((_DWORD *)a1 + 6);
    v6 = v5 - v3;
    if (v5 >= v3)
    {
      v7 = *((_DWORD *)a1 + 3);
      if (v5 <= v7)
      {
        v8 = *a1;
        if (*a1)
        {
          if (v7 <= *(_DWORD *)(v8 - 4))
          {
            if (*(__dst - 2) < v6)
            {
              v2 = increase_size((uint64_t)__dst, v6);
              if (!v2)
                return v2;
              v8 = *a1;
              v3 = *((_DWORD *)a1 + 5);
            }
            memmove(v2, (const void *)(v8 + v3), v6);
            *(v2 - 1) = v6;
            return v2;
          }
        }
      }
    }
  }
  if (__dst)
  {
    free(__dst - 2);
    return 0;
  }
  return v2;
}

_DWORD *assign_to(uint64_t a1, _DWORD *__dst)
{
  _DWORD *v2;
  int v4;

  v2 = __dst;
  v4 = *(_DWORD *)(a1 + 12);
  if (*(__dst - 2) >= v4 || (v2 = increase_size((uint64_t)__dst, v4)) != 0)
  {
    memmove(v2, *(const void **)a1, v4);
    *(v2 - 1) = v4;
  }
  return v2;
}

uint64_t len_utf8(char *a1)
{
  int v1;
  uint64_t v2;
  int v3;

  v1 = *((_DWORD *)a1 - 1);
  if (!v1)
    return 0;
  LODWORD(v2) = 0;
  do
  {
    v3 = *a1++;
    if (v3 <= -65)
      v2 = v2;
    else
      v2 = (v2 + 1);
    --v1;
  }
  while (v1);
  return v2;
}

uint64_t german_UTF_8_stem(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _DWORD *v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _DWORD *v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  int among_b;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  int v36;
  uint64_t v37;
  int v38;
  int among;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2;
  while (1)
  {
    while (1)
    {
      *(_DWORD *)(a1 + 20) = v3;
      if (!eq_s(a1, 2, &s_0_145))
        break;
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
      result = slice_from_s(a1, 2, &s_1_55);
      if ((result & 0x80000000) != 0)
        return result;
      v3 = *(unsigned int *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 8) = v3;
    v5 = skip_utf8(*(_QWORD *)a1, v3, 0, *(unsigned int *)(a1 + 12), 1);
    if ((v5 & 0x80000000) != 0)
      break;
    v3 = v5;
    *(_DWORD *)(a1 + 8) = v5;
  }
  v6 = v2;
  do
  {
    while (1)
    {
      *(_DWORD *)(a1 + 8) = v6;
      v7 = in_grouping_U(a1, (uint64_t)&g_v_10, 97, 252, 0);
      v8 = *(unsigned int *)(a1 + 12);
      if (v7)
      {
        v10 = *(unsigned int *)(a1 + 12);
        break;
      }
      v9 = *(unsigned int *)(a1 + 8);
      *(_DWORD *)(a1 + 20) = v9;
      if ((_DWORD)v9 != (_DWORD)v8 && *(_BYTE *)(*(_QWORD *)a1 + (int)v9) == 117)
      {
        *(_DWORD *)(a1 + 8) = v9 + 1;
        *(_DWORD *)(a1 + 24) = v9 + 1;
        if (!in_grouping_U(a1, (uint64_t)&g_v_10, 97, 252, 0))
        {
          v11 = a1;
          v12 = &s_2_55;
          goto LABEL_17;
        }
        v8 = *(unsigned int *)(a1 + 12);
      }
      *(_DWORD *)(a1 + 8) = v9;
      v10 = v9;
      if ((_DWORD)v9 == (_DWORD)v8)
        break;
      v10 = v8;
      if (*(_BYTE *)(*(_QWORD *)a1 + (int)v9) != 121)
        break;
      *(_DWORD *)(a1 + 8) = v9 + 1;
      *(_DWORD *)(a1 + 24) = v9 + 1;
      if (in_grouping_U(a1, (uint64_t)&g_v_10, 97, 252, 0))
      {
        v10 = *(unsigned int *)(a1 + 12);
        break;
      }
      v11 = a1;
      v12 = &s_3_100;
LABEL_17:
      result = slice_from_s(v11, 1, v12);
      if ((result & 0x80000000) != 0)
        return result;
    }
    *(_DWORD *)(a1 + 8) = v6;
    v6 = skip_utf8(*(_QWORD *)a1, v6, 0, v10, 1);
  }
  while ((v6 & 0x80000000) == 0);
  *(_DWORD *)(a1 + 8) = v2;
  v13 = *(_DWORD **)(a1 + 40);
  *v13 = *(_DWORD *)(a1 + 12);
  v13[1] = *(_DWORD *)(a1 + 12);
  v14 = *(_DWORD *)(a1 + 8);
  v15 = skip_utf8(*(_QWORD *)a1, v14, 0, *(unsigned int *)(a1 + 12), 3);
  if ((v15 & 0x80000000) == 0)
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) = v15;
    *(_DWORD *)(a1 + 8) = v14;
    v16 = out_grouping_U(a1, (uint64_t)&g_v_10, 97, 252, 1);
    if ((v16 & 0x80000000) == 0)
    {
      *(_DWORD *)(a1 + 8) += v16;
      v17 = in_grouping_U(a1, (uint64_t)&g_v_10, 97, 252, 1);
      if ((v17 & 0x80000000) == 0)
      {
        v18 = *(_DWORD *)(a1 + 8) + v17;
        *(_DWORD *)(a1 + 8) = v18;
        v19 = *(_DWORD **)(a1 + 40);
        if (v18 <= v19[2])
          v18 = v19[2];
        *v19 = v18;
        v20 = out_grouping_U(a1, (uint64_t)&g_v_10, 97, 252, 1);
        if ((v20 & 0x80000000) == 0)
        {
          *(_DWORD *)(a1 + 8) += v20;
          v21 = in_grouping_U(a1, (uint64_t)&g_v_10, 97, 252, 1);
          if ((v21 & 0x80000000) == 0)
            *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) = *(_DWORD *)(a1 + 8) + v21;
        }
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v2;
  v22 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v22;
  *(_DWORD *)(a1 + 24) = v22;
  if ((int)v22 > (int)v2
    && (v23 = *(_BYTE *)(v22 + *(_QWORD *)a1 - 1), (v23 & 0xE0) == 0x60)
    && ((0xC6020u >> v23) & 1) != 0
    && (v24 = find_among_b(a1, (uint64_t)&a_1_15, 7)) != 0
    && (v25 = *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 20) = v25, **(_DWORD **)(a1 + 40) <= v25))
  {
    switch(v24)
    {
      case 3:
        if (in_grouping_b_U(a1, (uint64_t)&g_s_ending_0, 98, 116, 0))
          goto LABEL_36;
        break;
      case 2:
        result = slice_del(a1);
        if ((result & 0x80000000) != 0)
          return result;
        v45 = *(int *)(a1 + 8);
        *(_DWORD *)(a1 + 24) = v45;
        if ((int)v45 <= *(_DWORD *)(a1 + 16))
          goto LABEL_36;
        v46 = v45 - 1;
        if (*(_BYTE *)(*(_QWORD *)a1 + v46) != 115)
          goto LABEL_36;
        *(_DWORD *)(a1 + 8) = v46;
        *(_DWORD *)(a1 + 20) = v46;
        if (!eq_s_b(a1, 3, &s_8_106))
          goto LABEL_36;
        break;
      case 1:
        break;
      default:
        goto LABEL_36;
    }
    result = slice_del(a1);
    if ((result & 0x80000000) == 0)
      goto LABEL_36;
  }
  else
  {
LABEL_36:
    v26 = *(_DWORD *)(a1 + 16);
    v27 = *(int *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v27;
    *(_DWORD *)(a1 + 24) = v27;
    v28 = v27 - 1;
    if ((int)v28 <= v26)
      goto LABEL_50;
    v29 = *(_BYTE *)(*(_QWORD *)a1 + v28);
    if ((v29 & 0xE0) != 0x60)
      goto LABEL_50;
    if (((0x144000u >> v29) & 1) == 0)
      goto LABEL_50;
    among_b = find_among_b(a1, (uint64_t)&a_2_15, 4);
    if (!among_b)
      goto LABEL_50;
    v31 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 20) = v31;
    if (**(_DWORD **)(a1 + 40) > v31)
      goto LABEL_50;
    if (among_b != 2)
    {
      if (among_b == 1)
        goto LABEL_43;
      goto LABEL_50;
    }
    if (in_grouping_b_U(a1, (uint64_t)&g_st_ending, 98, 116, 0))
      goto LABEL_50;
    v53 = skip_utf8(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 12), -3);
    if (v53 < 0)
      goto LABEL_50;
    *(_DWORD *)(a1 + 8) = v53;
LABEL_43:
    result = slice_del(a1);
    if ((result & 0x80000000) == 0)
    {
LABEL_50:
      v32 = *(_DWORD *)(a1 + 16);
      v33 = *(int *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v33;
      *(_DWORD *)(a1 + 24) = v33;
      v34 = v33 - 1;
      if ((int)v34 > v32
        && (v35 = *(_BYTE *)(*(_QWORD *)a1 + v34), (v35 & 0xE0) == 0x60)
        && ((0x100990u >> v35) & 1) != 0
        && (v36 = find_among_b(a1, (uint64_t)&a_4_12, 8)) != 0
        && (v37 = *(int *)(a1 + 8), *(_DWORD *)(a1 + 20) = v37, *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) <= (int)v37))
      {
        switch(v36)
        {
          case 1:
            result = slice_del(a1);
            if ((result & 0x80000000) != 0)
              return result;
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
            if (eq_s_b(a1, 2, &s_9_19))
            {
              v44 = *(int *)(a1 + 8);
              *(_DWORD *)(a1 + 20) = v44;
              if (((int)v44 <= *(_DWORD *)(a1 + 16) || *(_BYTE *)(v44 + *(_QWORD *)a1 - 1) != 101)
                && *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) <= (int)v44)
              {
                goto LABEL_90;
              }
            }
            goto LABEL_55;
          case 2:
            if ((int)v37 > *(_DWORD *)(a1 + 16) && *(_BYTE *)(v37 + *(_QWORD *)a1 - 1) == 101)
              goto LABEL_55;
            goto LABEL_90;
          case 3:
            result = slice_del(a1);
            if ((result & 0x80000000) != 0)
              return result;
            v48 = *(_DWORD *)(a1 + 8);
            v47 = *(_DWORD *)(a1 + 12);
            *(_DWORD *)(a1 + 24) = v48;
            if (eq_s_b(a1, 2, &s_10_38)
              || (*(_DWORD *)(a1 + 8) = v48 - v47 + *(_DWORD *)(a1 + 12), eq_s_b(a1, 2, &s_11_49)))
            {
              v49 = *(_DWORD *)(a1 + 8);
              *(_DWORD *)(a1 + 20) = v49;
              if (**(_DWORD **)(a1 + 40) <= v49)
                goto LABEL_90;
            }
            goto LABEL_55;
          case 4:
            result = slice_del(a1);
            if ((result & 0x80000000) != 0)
              return result;
            v50 = *(_DWORD *)(a1 + 12);
            v51 = *(int *)(a1 + 8);
            *(_DWORD *)(a1 + 24) = v51;
            if ((int)v51 - 1 <= *(_DWORD *)(a1 + 16)
              || *(unsigned __int8 *)(*(_QWORD *)a1 + v51 - 1) - 103 > 1
              || !find_among_b(a1, (uint64_t)&a_3_14, 2))
            {
              goto LABEL_55;
            }
            v52 = *(_DWORD *)(a1 + 8);
            *(_DWORD *)(a1 + 20) = v52;
            if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) > v52)
            {
              *(_DWORD *)(a1 + 8) = v51 - v50 + *(_DWORD *)(a1 + 12);
              goto LABEL_55;
            }
LABEL_90:
            result = slice_del(a1);
            if ((result & 0x80000000) == 0)
              goto LABEL_55;
            break;
          default:
            goto LABEL_55;
        }
      }
      else
      {
LABEL_55:
        v38 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)(a1 + 8) = v38;
        *(_DWORD *)(a1 + 20) = v38;
        among = find_among(a1, (uint64_t)&a_0_16, 6);
        if (among)
        {
          while (2)
          {
            v40 = *(unsigned int *)(a1 + 8);
            *(_DWORD *)(a1 + 24) = v40;
            switch(among)
            {
              case 1:
                v41 = a1;
                v42 = &s_4_101;
                goto LABEL_61;
              case 2:
                v41 = a1;
                v42 = &s_5_55;
                goto LABEL_61;
              case 3:
                v41 = a1;
                v42 = &s_6_130;
                goto LABEL_61;
              case 4:
                v41 = a1;
                v42 = &s_7_91;
LABEL_61:
                result = slice_from_s(v41, 1, v42);
                if ((result & 0x80000000) == 0)
                  goto LABEL_62;
                return result;
              case 5:
                v43 = skip_utf8(*(_QWORD *)a1, v40, 0, *(unsigned int *)(a1 + 12), 1);
                if (v43 < 0)
                  break;
                *(_DWORD *)(a1 + 8) = v43;
                goto LABEL_62;
              default:
LABEL_62:
                *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
                among = find_among(a1, (uint64_t)&a_0_16, 6);
                if (!among)
                  break;
                continue;
            }
            break;
          }
        }
        *(_DWORD *)(a1 + 8) = v38;
        return 1;
      }
    }
  }
  return result;
}

_QWORD *german_UTF_8_create_env()
{
  return SN_create_env(0, 3, 0);
}

void german_UTF_8_close_env(uint64_t a1)
{
  SN_close_env(a1, 0);
}

uint64_t basque_UTF_8_stem(uint64_t a1)
{
  _DWORD *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char v16;
  int among_b;
  int v18;
  int v19;
  uint64_t result;
  uint64_t v21;
  int v22;
  void *v23;
  int v24;
  int v25;
  int v26;
  char v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  void *v33;
  int v34;
  int v35;
  uint64_t v36;
  char v37;
  int v38;
  int v39;

  v2 = *(_DWORD **)(a1 + 40);
  *v2 = *(_DWORD *)(a1 + 12);
  v2[1] = *(_DWORD *)(a1 + 12);
  v2[2] = *(_DWORD *)(a1 + 12);
  v3 = *(_DWORD *)(a1 + 8);
  if (!in_grouping_U(a1, (uint64_t)&g_v_11, 97, 117, 0))
  {
    v4 = *(_DWORD *)(a1 + 8);
    if (!out_grouping_U(a1, (uint64_t)&g_v_11, 97, 117, 0))
    {
      v7 = out_grouping_U(a1, (uint64_t)&g_v_11, 97, 117, 1);
      if ((v7 & 0x80000000) == 0)
        goto LABEL_14;
    }
    *(_DWORD *)(a1 + 8) = v4;
    if (!in_grouping_U(a1, (uint64_t)&g_v_11, 97, 117, 0))
    {
      v7 = in_grouping_U(a1, (uint64_t)&g_v_11, 97, 117, 1);
      if ((v7 & 0x80000000) == 0)
        goto LABEL_14;
    }
  }
  *(_DWORD *)(a1 + 8) = v3;
  if (out_grouping_U(a1, (uint64_t)&g_v_11, 97, 117, 0))
    goto LABEL_16;
  v5 = *(_DWORD *)(a1 + 8);
  if (out_grouping_U(a1, (uint64_t)&g_v_11, 97, 117, 0)
    || (v7 = out_grouping_U(a1, (uint64_t)&g_v_11, 97, 117, 1), v7 < 0))
  {
    *(_DWORD *)(a1 + 8) = v5;
    if (in_grouping_U(a1, (uint64_t)&g_v_11, 97, 117, 0))
      goto LABEL_16;
    v6 = skip_utf8(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), 0, *(unsigned int *)(a1 + 12), 1);
    if (v6 < 0)
      goto LABEL_16;
  }
  else
  {
LABEL_14:
    v6 = *(_DWORD *)(a1 + 8) + v7;
  }
  **(_DWORD **)(a1 + 40) = v6;
LABEL_16:
  *(_DWORD *)(a1 + 8) = v3;
  v8 = out_grouping_U(a1, (uint64_t)&g_v_11, 97, 117, 1);
  if ((v8 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) += v8;
    v9 = in_grouping_U(a1, (uint64_t)&g_v_11, 97, 117, 1);
    if ((v9 & 0x80000000) == 0)
    {
      v10 = *(_DWORD *)(a1 + 8) + v9;
      *(_DWORD *)(a1 + 8) = v10;
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) = v10;
      v11 = out_grouping_U(a1, (uint64_t)&g_v_11, 97, 117, 1);
      if ((v11 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) += v11;
        v12 = in_grouping_U(a1, (uint64_t)&g_v_11, 97, 117, 1);
        if ((v12 & 0x80000000) == 0)
          *(_DWORD *)(*(_QWORD *)(a1 + 40) + 8) = *(_DWORD *)(a1 + 8) + v12;
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v3;
  v13 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v13;
  *(_DWORD *)(a1 + 24) = v13;
  v14 = v13 - 1;
  if (v13 - 1 <= v3)
  {
    v15 = v13;
  }
  else
  {
    v15 = v13;
    while (2)
    {
      v16 = *(_BYTE *)(*(_QWORD *)a1 + v14);
      if ((v16 & 0xE0) == 0x60 && ((0x434C222u >> v16) & 1) != 0)
      {
        among_b = find_among_b(a1, (uint64_t)&a_0_17, 109);
        if (among_b)
        {
          v18 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 20) = v18;
          switch(among_b)
          {
            case 1:
              v19 = **(_DWORD **)(a1 + 40);
              goto LABEL_29;
            case 2:
              v19 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 8);
LABEL_29:
              if (v19 > v18)
                break;
              result = slice_del(a1);
              if ((result & 0x80000000) != 0)
                return result;
              goto LABEL_36;
            case 3:
              v21 = a1;
              v22 = 7;
              v23 = &s_0_146;
              goto LABEL_35;
            case 4:
              v21 = a1;
              v22 = 7;
              v23 = &s_1_56;
              goto LABEL_35;
            case 5:
              v21 = a1;
              v22 = 6;
              v23 = &s_2_56;
LABEL_35:
              result = slice_from_s(v21, v22, v23);
              if ((result & 0x80000000) == 0)
                goto LABEL_36;
              return result;
            default:
LABEL_36:
              v13 = *(_DWORD *)(a1 + 8);
              v15 = *(_DWORD *)(a1 + 12);
              *(_DWORD *)(a1 + 24) = v13;
              v14 = v13 - 1;
              if (v13 - 1 <= *(_DWORD *)(a1 + 16))
                break;
              continue;
          }
        }
      }
      break;
    }
  }
  v25 = *(_DWORD *)(a1 + 12);
  v24 = *(_DWORD *)(a1 + 16);
  v26 = v13 - v15 + v25;
  *(_DWORD *)(a1 + 8) = v26;
  *(_DWORD *)(a1 + 24) = v26;
  if (v26 > v24)
  {
    while (2)
    {
      v27 = *(_BYTE *)(*(_QWORD *)a1 + v26 - 1);
      if ((v27 & 0xE0) == 0x60 && ((0x43DDA22u >> v27) & 1) != 0)
      {
        v28 = find_among_b(a1, (uint64_t)&a_1_16, 295);
        if (v28)
        {
          v29 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 20) = v29;
          switch(v28)
          {
            case 1:
              v30 = **(_DWORD **)(a1 + 40);
              goto LABEL_48;
            case 2:
              v30 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 8);
              goto LABEL_48;
            case 3:
              v31 = a1;
              v32 = 3;
              v33 = &s_3_101;
              goto LABEL_57;
            case 4:
              v30 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4);
LABEL_48:
              if (v30 > v29)
                break;
              result = slice_del(a1);
              if ((result & 0x80000000) != 0)
                return result;
              goto LABEL_58;
            case 5:
              v31 = a1;
              v32 = 3;
              v33 = &s_4_102;
              goto LABEL_57;
            case 6:
              v31 = a1;
              v32 = 6;
              v33 = &s_5_56;
              goto LABEL_57;
            case 7:
              v31 = a1;
              v32 = 5;
              v33 = &s_6_131;
              goto LABEL_57;
            case 8:
              v31 = a1;
              v32 = 5;
              v33 = &s_7_92;
              goto LABEL_57;
            case 9:
              v31 = a1;
              v32 = 5;
              v33 = &s_8_107;
              goto LABEL_57;
            case 10:
              v31 = a1;
              v32 = 5;
              v33 = &s_9_20;
LABEL_57:
              result = slice_from_s(v31, v32, v33);
              if ((result & 0x80000000) == 0)
                goto LABEL_58;
              return result;
            default:
LABEL_58:
              v26 = *(_DWORD *)(a1 + 8);
              v25 = *(_DWORD *)(a1 + 12);
              *(_DWORD *)(a1 + 24) = v26;
              if (v26 <= *(_DWORD *)(a1 + 16))
                break;
              continue;
          }
        }
      }
      break;
    }
  }
  v34 = *(_DWORD *)(a1 + 16);
  v35 = *(_DWORD *)(a1 + 12) + v26 - v25;
  *(_DWORD *)(a1 + 8) = v35;
  *(_DWORD *)(a1 + 24) = v35;
  v36 = v35 - 1;
  if ((int)v36 <= v34)
    goto LABEL_69;
  v37 = *(_BYTE *)(*(_QWORD *)a1 + v36);
  if ((v37 & 0xE0) != 0x60)
    goto LABEL_69;
  if (((0x8A22u >> v37) & 1) == 0)
    goto LABEL_69;
  v38 = find_among_b(a1, (uint64_t)&a_2_16, 19);
  if (!v38)
    goto LABEL_69;
  v39 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v39;
  if (v38 == 2)
  {
    result = slice_from_s(a1, 1, &s_10_39);
    if ((result & 0x80000000) != 0)
      return result;
    goto LABEL_69;
  }
  if (v38 != 1 || **(_DWORD **)(a1 + 40) > v39 || (result = slice_del(a1), (result & 0x80000000) == 0))
  {
LABEL_69:
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
    return 1;
  }
  return result;
}

_QWORD *basque_UTF_8_create_env()
{
  return SN_create_env(0, 3, 0);
}

void basque_UTF_8_close_env(uint64_t a1)
{
  SN_close_env(a1, 0);
}

_QWORD *SN_create_env(int a1, int a2, int a3)
{
  _QWORD *v6;
  _QWORD *s;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v6 = malloc_type_calloc(1uLL, 0x38uLL, 0x1090040893BA05AuLL);
  if (!v6)
    return v6;
  s = create_s();
  *v6 = s;
  if (!s)
    goto LABEL_13;
  if (!a1)
    goto LABEL_9;
  v8 = malloc_type_calloc(a1, 8uLL, 0x10040436913F5uLL);
  v6[4] = v8;
  if (!v8)
  {
LABEL_13:
    SN_close_env((uint64_t)v6, a1);
    return 0;
  }
  if (a1 >= 1)
  {
    v9 = 0;
    do
    {
      *(_QWORD *)(v6[4] + v9) = create_s();
      if (!*(_QWORD *)(v6[4] + v9))
        goto LABEL_13;
      v9 += 8;
    }
    while (8 * a1 != v9);
  }
LABEL_9:
  if (a2)
  {
    v10 = malloc_type_calloc(a2, 4uLL, 0x100004052888210uLL);
    v6[5] = v10;
    if (!v10)
      goto LABEL_13;
  }
  if (a3)
  {
    v11 = malloc_type_calloc(a3, 1uLL, 0x100004077774924uLL);
    v6[6] = v11;
    if (!v11)
      goto LABEL_13;
  }
  return v6;
}

void SN_close_env(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    if (a2)
    {
      if (a2 >= 1)
      {
        v3 = 0;
        v4 = 8 * a2;
        do
        {
          lose_s(*(_QWORD *)(*(_QWORD *)(a1 + 32) + v3));
          v3 += 8;
        }
        while (v4 != v3);
      }
      free(*(void **)(a1 + 32));
    }
    free(*(void **)(a1 + 40));
    free(*(void **)(a1 + 48));
    if (*(_QWORD *)a1)
      lose_s(*(_QWORD *)a1);
    free((void *)a1);
  }
}

uint64_t SN_set_current(uint64_t a1, int a2, void *__src)
{
  uint64_t result;

  result = replace_s(a1, 0, *(_DWORD *)(a1 + 12), a2, __src, 0);
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t norwegian_UTF_8_stem(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  int v8;
  int v9;
  char v10;
  int among_b;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t result;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  char v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;

  v2 = *(_DWORD *)(a1 + 8);
  **(_DWORD **)(a1 + 40) = *(_DWORD *)(a1 + 12);
  v3 = *(_DWORD *)(a1 + 8);
  v4 = skip_utf8(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), 0, *(unsigned int *)(a1 + 12), 3);
  if ((v4 & 0x80000000) == 0)
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) = v4;
    *(_DWORD *)(a1 + 8) = v3;
    if ((out_grouping_U(a1, (uint64_t)&g_v_12, 97, 248, 1) & 0x80000000) == 0)
    {
      v5 = in_grouping_U(a1, (uint64_t)&g_v_12, 97, 248, 1);
      if ((v5 & 0x80000000) == 0)
      {
        v6 = *(_DWORD *)(a1 + 8) + v5;
        *(_DWORD *)(a1 + 8) = v6;
        v7 = *(_DWORD **)(a1 + 40);
        if (v6 <= v7[1])
          v6 = v7[1];
        *v7 = v6;
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v2;
  v8 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v8;
  v9 = **(_DWORD **)(a1 + 40);
  if (v8 >= v9)
  {
    *(_DWORD *)(a1 + 16) = v9;
    *(_DWORD *)(a1 + 24) = v8;
    if (v8 <= v9
      || (v10 = *(_BYTE *)(v8 + *(_QWORD *)a1 - 1), (v10 & 0xE0) != 0x60)
      || ((0x1C4022u >> v10) & 1) == 0
      || (among_b = find_among_b(a1, (uint64_t)&a_0_18, 29)) == 0)
    {
      *(_DWORD *)(a1 + 16) = v2;
      goto LABEL_17;
    }
    v12 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 16) = v2;
    *(_DWORD *)(a1 + 20) = v12;
    if (among_b == 3)
    {
      result = slice_from_s(a1, 2, &s_0_147);
      if ((result & 0x80000000) != 0)
        return result;
    }
    else
    {
      if (among_b == 2)
      {
        v27 = *(_DWORD *)(a1 + 12);
        if (in_grouping_b_U(a1, (uint64_t)&g_s_ending_1, 98, 122, 0))
        {
          v28 = *(_DWORD *)(a1 + 16);
          v29 = *(_DWORD *)(a1 + 12) + v12 - v27;
          *(_DWORD *)(a1 + 8) = v29;
          if (v29 <= v28)
            goto LABEL_17;
          v30 = v29 - 1;
          if (*(_BYTE *)(*(_QWORD *)a1 + v30) != 107)
            goto LABEL_17;
          *(_DWORD *)(a1 + 8) = v30;
          if (out_grouping_b_U(a1, (uint64_t)&g_v_12, 97, 248, 0))
            goto LABEL_17;
        }
      }
      else if (among_b != 1)
      {
        goto LABEL_17;
      }
      result = slice_del(a1);
      if ((result & 0x80000000) != 0)
        return result;
    }
  }
LABEL_17:
  v13 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v13;
  v14 = **(_DWORD **)(a1 + 40);
  if (v13 >= v14)
  {
    v15 = *(unsigned int *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v14;
    *(_DWORD *)(a1 + 24) = v13;
    v16 = v13 - 1;
    if ((int)v16 > v14 && *(_BYTE *)(*(_QWORD *)a1 + v16) == 116 && find_among_b(a1, (uint64_t)&a_1_17, 2))
    {
      v18 = *(_DWORD *)(a1 + 8);
      v17 = *(unsigned int *)(a1 + 12);
      *(_DWORD *)(a1 + 16) = v15;
      *(_DWORD *)(a1 + 20) = v18;
      *(_DWORD *)(a1 + 8) = v17;
      v19 = skip_utf8(*(_QWORD *)a1, v17, v15, 0, -1);
      if ((v19 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) = v19;
        *(_DWORD *)(a1 + 20) = v19;
        result = slice_del(a1);
        if ((result & 0x80000000) != 0)
          return result;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 16) = v15;
    }
  }
  v21 = *(_DWORD *)(a1 + 12);
  v22 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 8) = v21;
  v23 = **(_DWORD **)(a1 + 40);
  if (v21 >= v23)
  {
    *(_DWORD *)(a1 + 16) = v23;
    *(_DWORD *)(a1 + 24) = v21;
    v24 = v21 - 1;
    if ((int)v24 > v23
      && (v25 = *(_BYTE *)(*(_QWORD *)a1 + v24), (v25 & 0xE0) == 0x60)
      && ((0x480080u >> v25) & 1) != 0
      && find_among_b(a1, (uint64_t)&a_2_17, 11))
    {
      v26 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 16) = v22;
      *(_DWORD *)(a1 + 20) = v26;
      result = slice_del(a1);
      if ((result & 0x80000000) != 0)
        return result;
      v22 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      *(_DWORD *)(a1 + 16) = v22;
    }
  }
  *(_DWORD *)(a1 + 8) = v22;
  return 1;
}

_QWORD *norwegian_UTF_8_create_env()
{
  return SN_create_env(0, 2, 0);
}

void norwegian_UTF_8_close_env(uint64_t a1)
{
  SN_close_env(a1, 0);
}

uint64_t russian_UTF_8_stem(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int among_b;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  void *v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  int v38;

  v2 = *(_DWORD *)(a1 + 8);
LABEL_2:
  v3 = *(unsigned int *)(a1 + 8);
  while (1)
  {
    *(_DWORD *)(a1 + 20) = v3;
    if (eq_s(a1, 2, &s_9_21))
    {
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = v3;
      v5 = slice_from_s(a1, 2, &s_10_40);
      if ((v5 & 0x80000000) == 0)
        goto LABEL_2;
      return v5;
    }
    *(_DWORD *)(a1 + 8) = v3;
    v4 = skip_utf8(*(_QWORD *)a1, v3, 0, *(unsigned int *)(a1 + 12), 1);
    if ((v4 & 0x80000000) != 0)
      break;
    v3 = v4;
    *(_DWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 8) = v2;
  v6 = *(_DWORD **)(a1 + 40);
  *v6 = *(_DWORD *)(a1 + 12);
  v6[1] = *(_DWORD *)(a1 + 12);
  v7 = *(_DWORD *)(a1 + 8);
  v8 = out_grouping_U(a1, (uint64_t)&g_v_13, 1072, 1103, 1);
  if ((v8 & 0x80000000) == 0)
  {
    v9 = *(_DWORD *)(a1 + 8) + v8;
    *(_DWORD *)(a1 + 8) = v9;
    **(_DWORD **)(a1 + 40) = v9;
    v10 = in_grouping_U(a1, (uint64_t)&g_v_13, 1072, 1103, 1);
    if ((v10 & 0x80000000) == 0)
    {
      *(_DWORD *)(a1 + 8) += v10;
      v11 = out_grouping_U(a1, (uint64_t)&g_v_13, 1072, 1103, 1);
      if ((v11 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) += v11;
        v12 = in_grouping_U(a1, (uint64_t)&g_v_13, 1072, 1103, 1);
        if ((v12 & 0x80000000) == 0)
          *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) = *(_DWORD *)(a1 + 8) + v12;
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v7;
  v13 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v13;
  v14 = **(_DWORD **)(a1 + 40);
  if (v13 < v14)
    return 0;
  *(_DWORD *)(a1 + 16) = v14;
  *(_DWORD *)(a1 + 24) = v13;
  among_b = find_among_b(a1, (uint64_t)&a_0_19, 9);
  if (!among_b)
  {
LABEL_20:
    v20 = *(_DWORD *)(a1 + 12);
    v19 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 8) = v20;
    *(_DWORD *)(a1 + 24) = v20;
    if (v20 - 3 > v19)
    {
      v21 = *(unsigned __int8 *)(v20 + *(_QWORD *)a1 - 1);
      if (v21 == 143 || v21 == 140)
      {
        if (find_among_b(a1, (uint64_t)&a_3_15, 2))
        {
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
          v5 = slice_del(a1);
          if ((v5 & 0x80000000) != 0)
            return v5;
          v20 = *(_DWORD *)(a1 + 8);
          v22 = *(_DWORD *)(a1 + 12);
LABEL_28:
          *(_DWORD *)(a1 + 24) = v20;
          if (find_among_b(a1, (uint64_t)&a_1_18, 26))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
            v5 = slice_del(a1);
            if ((v5 & 0x80000000) == 0)
            {
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
              v23 = find_among_b(a1, (uint64_t)&a_2_18, 8);
              if (v23)
              {
                v24 = *(_DWORD *)(a1 + 8);
                *(_DWORD *)(a1 + 20) = v24;
                if (v23 == 2)
                  goto LABEL_35;
                if (v23 == 1)
                {
                  v25 = *(_DWORD *)(a1 + 12);
                  if (eq_s_b(a1, 2, &s_2_57))
                    goto LABEL_35;
                  *(_DWORD *)(a1 + 8) = v24 - v25 + *(_DWORD *)(a1 + 12);
                  if (eq_s_b(a1, 2, &s_3_102))
                    goto LABEL_35;
                }
              }
              goto LABEL_36;
            }
            return v5;
          }
          v34 = v22 - v20;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v34;
          v35 = r_verb((_DWORD *)a1);
          v36 = v35 >> 31;
          if ((_DWORD)v35)
            v37 = v35 >> 31;
          else
            v37 = 13;
          if (v37)
          {
            v15 = v35;
            if (v37 == 13)
            {
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v34;
              v38 = r_noun((_DWORD *)a1);
              if (v38 >= 0)
                v15 = v15;
              else
                v15 = v38;
              if (!v38)
                goto LABEL_36;
              v36 = v38 >> 31;
            }
            if (v36)
              return v15;
          }
LABEL_36:
          v26 = *(_DWORD *)(a1 + 12);
          *(_DWORD *)(a1 + 8) = v26;
          *(_DWORD *)(a1 + 24) = v26;
          if (eq_s_b(a1, 2, &s_11_50))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
            v5 = slice_del(a1);
            if ((v5 & 0x80000000) != 0)
              return v5;
            v27 = *(_DWORD *)(a1 + 8);
            v28 = *(_DWORD *)(a1 + 12);
          }
          else
          {
            v27 = *(_DWORD *)(a1 + 12);
            *(_DWORD *)(a1 + 8) = v27;
            v28 = v27;
          }
          *(_DWORD *)(a1 + 24) = v27;
          if (v27 - 5 > *(_DWORD *)(a1 + 16))
          {
            v29 = *(unsigned __int8 *)(*(_QWORD *)a1 + v27 - 1);
            if (v29 == 140 || v29 == 130)
            {
              if (find_among_b(a1, (uint64_t)&a_6_8, 2))
              {
                v30 = *(_DWORD *)(a1 + 8);
                *(_DWORD *)(a1 + 20) = v30;
                if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) <= v30)
                {
                  v5 = slice_del(a1);
                  if ((v5 & 0x80000000) != 0)
                    return v5;
                }
              }
            }
          }
          v31 = *(_DWORD *)(a1 + 12) + v27 - v28;
          *(_DWORD *)(a1 + 8) = v31;
          *(_DWORD *)(a1 + 24) = v31;
          v32 = find_among_b(a1, (uint64_t)&a_7_8, 4);
          if (v32)
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
            switch(v32)
            {
              case 3:
LABEL_67:
                v5 = slice_del(a1);
                if ((v5 & 0x80000000) != 0)
                  return v5;
                break;
              case 2:
                v33 = &s_8_108;
LABEL_66:
                if (!eq_s_b(a1, 2, v33))
                  break;
                goto LABEL_67;
              case 1:
                v5 = slice_del(a1);
                if ((v5 & 0x80000000) != 0)
                  return v5;
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
                if (eq_s_b(a1, 2, &s_6_132))
                {
                  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
                  v33 = &s_7_93;
                  goto LABEL_66;
                }
                break;
            }
          }
          *(_DWORD *)(a1 + 16) = v7;
          *(_DWORD *)(a1 + 8) = v7;
          return 1;
        }
        v20 = *(_DWORD *)(a1 + 12);
      }
    }
    *(_DWORD *)(a1 + 8) = v20;
    v22 = v20;
    goto LABEL_28;
  }
  v17 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v17;
  if (among_b == 2)
    goto LABEL_35;
  if (among_b != 1)
    goto LABEL_36;
  v18 = *(_DWORD *)(a1 + 12);
  if (!eq_s_b(a1, 2, &s_0_148))
  {
    *(_DWORD *)(a1 + 8) = v17 - v18 + *(_DWORD *)(a1 + 12);
    if (!eq_s_b(a1, 2, &s_1_295))
      goto LABEL_20;
  }
LABEL_35:
  v5 = slice_del(a1);
  if ((v5 & 0x80000000) == 0)
    goto LABEL_36;
  return v5;
}

uint64_t r_verb(_DWORD *a1)
{
  uint64_t result;
  int v3;
  int v4;

  a1[6] = a1[2];
  result = find_among_b((uint64_t)a1, (uint64_t)&a_4_13, 46);
  if ((_DWORD)result)
  {
    v3 = a1[2];
    a1[5] = v3;
    if ((_DWORD)result == 2)
      goto LABEL_6;
    if ((_DWORD)result != 1)
      return 1;
    v4 = a1[3];
    if (eq_s_b((uint64_t)a1, 2, &s_4_103)
      || (a1[2] = v3 - v4 + a1[3], result = eq_s_b((uint64_t)a1, 2, &s_5_57), (_DWORD)result))
    {
LABEL_6:
      result = slice_del((uint64_t)a1);
      if ((result & 0x80000000) != 0)
        return result;
      return 1;
    }
  }
  return result;
}

uint64_t r_noun(_DWORD *a1)
{
  uint64_t result;

  a1[6] = a1[2];
  result = find_among_b((uint64_t)a1, (uint64_t)&a_5_11, 36);
  if ((_DWORD)result)
  {
    a1[5] = a1[2];
    LODWORD(result) = slice_del((uint64_t)a1);
    if ((int)result >= 0)
      return 1;
    else
      return result;
  }
  return result;
}

_QWORD *russian_UTF_8_create_env()
{
  return SN_create_env(0, 2, 0);
}

void russian_UTF_8_close_env(uint64_t a1)
{
  SN_close_env(a1, 0);
}

uint64_t turkish_UTF_8_stem(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int among_b;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  uint64_t inserted;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  void *v66;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  void *v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  unsigned int v97;
  int v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  int v103;
  int v104;
  unsigned int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  uint64_t v112;
  int v113;
  int v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v119;

  v2 = *(_DWORD *)(a1 + 8);
  v3 = out_grouping_U(a1, (uint64_t)&g_vowel_0, 97, 305, 1);
  if (v3 < 0)
  {
    v12 = 0;
LABEL_44:
    *(_DWORD *)(a1 + 8) = v2;
    return v12;
  }
  v4 = 3;
  do
  {
    v5 = *(_DWORD *)(a1 + 8) + v3;
    *(_DWORD *)(a1 + 8) = v5;
    v3 = out_grouping_U(a1, (uint64_t)&g_vowel_0, 97, 305, 1);
    --v4;
  }
  while ((v3 & 0x80000000) == 0);
  if (v4 >= 2)
    v6 = v5;
  else
    v6 = v2;
  *(_DWORD *)(a1 + 8) = v6;
  if (v4 > 1)
    return 0;
  *(_DWORD *)(a1 + 16) = v2;
  v7 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 24) = v7;
  **(_BYTE **)(a1 + 48) = 1;
  v9 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 12);
  v10 = r_mark_ymUs_(a1);
  v11 = v10 >> 31;
  if (!(_DWORD)v10)
    v11 = 2;
  if (!v11)
    goto LABEL_60;
  v12 = v10;
  if (v11 != 2)
  {
LABEL_59:
    if ((v12 & 0x80000000) != 0)
      return v12;
    goto LABEL_60;
  }
  v13 = v8 - v9;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v13;
  if (r_mark_yDU(a1))
    goto LABEL_60;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v13;
  if (r_mark_ysA(a1))
    goto LABEL_60;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v13;
  if (eq_s_b(a1, 3, &s_4_104))
  {
    if (r_mark_suffix_with_optional_y_consonant(a1))
      goto LABEL_60;
  }
  v15 = *(_DWORD *)(a1 + 12);
  v14 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 8) = v15 - v13;
  if (v15 - v13 - 5 > v14 && (*(unsigned __int8 *)(*(_QWORD *)a1 + v15 - v13 - 1) | 4) == 0x65)
  {
    among_b = find_among_b(a1, (uint64_t)&a_19_2, 2);
    v15 = *(_DWORD *)(a1 + 12);
    if (among_b)
    {
      v17 = *(_DWORD *)(a1 + 8);
      if (!r_mark_sUnUz(a1))
      {
        v18 = v15 - v17;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v18;
        if (!r_mark_lAr(a1))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v18;
          if (!r_mark_yUm(a1))
          {
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v18;
            if (!r_mark_sUn(a1))
            {
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v18;
              if (!r_mark_yUz(a1))
                *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v18;
            }
          }
        }
      }
      v19 = r_mark_ymUs_(a1);
      if (v19 >= 0)
        v20 = v12;
      else
        v20 = v19;
      if (v19)
        v12 = v20;
      else
        v12 = v12;
      if (v19)
        v21 = v19 >> 31;
      else
        v21 = 8;
      if (!v21)
        goto LABEL_60;
      if (v21 != 8)
      {
        if (v19 < 0)
        {
          if ((v12 & 0x80000000) != 0)
            return v12;
          goto LABEL_61;
        }
        goto LABEL_60;
      }
      v15 = *(_DWORD *)(a1 + 12);
    }
  }
  *(_DWORD *)(a1 + 8) = v15 - v13;
  if (r_mark_lAr(a1))
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    inserted = slice_del(a1);
    if ((inserted & 0x80000000) != 0)
      return inserted;
    v24 = *(_DWORD *)(a1 + 8);
    v23 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 24) = v24;
    if (!r_mark_DUr(a1))
    {
      v25 = v23 - v24;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - (v23 - v24);
      if (!r_mark_yDU(a1))
      {
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v25;
        if (!r_mark_ysA(a1))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v25;
          v112 = r_mark_ymUs_(a1);
          if ((_DWORD)v112)
          {
            v12 = v112;
            if ((v112 & 0x80000000) != 0)
              return v12;
          }
          else
          {
            *(_DWORD *)(a1 + 8) = v24 - v23 + *(_DWORD *)(a1 + 12);
          }
        }
      }
    }
    **(_BYTE **)(a1 + 48) = 0;
    goto LABEL_60;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v13;
  if (!r_check_vowel_harmony(a1)
    || (v26 = *(int *)(a1 + 8), (int)v26 - 2 <= *(_DWORD *)(a1 + 16))
    || *(_BYTE *)(v26 + *(_QWORD *)a1 - 1) != 122
    || !find_among_b(a1, (uint64_t)&a_17_2, 4)
    || (v28 = *(_DWORD *)(a1 + 8), v27 = *(_DWORD *)(a1 + 12), !r_mark_yDU(a1))
    && (*(_DWORD *)(a1 + 8) = v28 - v27 + *(_DWORD *)(a1 + 12), !r_mark_ysA(a1)))
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v13;
    if (r_mark_sUnUz(a1)
      || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v13, r_mark_yUz(a1))
      || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v13, r_mark_sUn(a1))
      || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v13, r_mark_yUm(a1)))
    {
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
      inserted = slice_del(a1);
      if ((inserted & 0x80000000) != 0)
        return inserted;
      v30 = *(_DWORD *)(a1 + 8);
      v29 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 24) = v30;
    }
    else
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v13;
      if (!r_mark_DUr(a1))
        goto LABEL_61;
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
      inserted = slice_del(a1);
      if ((inserted & 0x80000000) != 0)
        return inserted;
      v30 = *(_DWORD *)(a1 + 8);
      v29 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 24) = v30;
      if (!r_mark_sUnUz(a1))
      {
        v114 = v29 - v30;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - (v29 - v30);
        if (!r_mark_lAr(a1))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v114;
          if (!r_mark_yUm(a1))
          {
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v114;
            if (!r_mark_sUn(a1))
            {
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v114;
              if (!r_mark_yUz(a1))
                *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v114;
            }
          }
        }
      }
    }
    v31 = r_mark_ymUs_(a1);
    if (!(_DWORD)v31)
    {
      *(_DWORD *)(a1 + 8) = v30 - v29 + *(_DWORD *)(a1 + 12);
      goto LABEL_60;
    }
    v12 = v31;
    goto LABEL_59;
  }
LABEL_60:
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
  inserted = slice_del(a1);
  if ((inserted & 0x80000000) != 0)
    return inserted;
LABEL_61:
  v32 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v32;
  if (!**(_BYTE **)(a1 + 48))
    return 0;
  *(_DWORD *)(a1 + 24) = v32;
  if (r_mark_lAr(a1))
    goto LABEL_63;
  v36 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v36;
  *(_DWORD *)(a1 + 24) = v36;
  if (r_check_vowel_harmony(a1))
  {
    v37 = *(int *)(a1 + 8) - 1;
    if ((int)v37 > *(_DWORD *)(a1 + 16)
      && (*(unsigned __int8 *)(*(_QWORD *)a1 + v37) | 4) == 0x65
      && find_among_b(a1, (uint64_t)&a_11_3, 2)
      && r_mark_suffix_with_optional_n_consonant(a1))
    {
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
      inserted = slice_del(a1);
      if ((inserted & 0x80000000) != 0)
        return inserted;
      v39 = *(_DWORD *)(a1 + 8);
      v38 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 24) = v39;
      if (!r_mark_lArI(a1))
      {
        v40 = v38 - v39;
        v41 = *(_DWORD *)(a1 + 12) - v40;
        *(_DWORD *)(a1 + 8) = v41;
        *(_DWORD *)(a1 + 24) = v41;
        if (!r_mark_possessives(a1))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v40;
          v42 = r_mark_sU(a1);
          if ((int)v42 <= 0)
          {
            v12 = v42;
            v43 = v42 >> 31;
            v44 = (_DWORD)v42 ? v42 >> 31 : 10;
            if (v44)
            {
              if (v44 != 10)
              {
                if (v44 != 9)
                  goto LABEL_254;
                goto LABEL_175;
              }
              v116 = *(_DWORD *)(a1 + 12) - v40;
              *(_DWORD *)(a1 + 8) = v116;
              *(_DWORD *)(a1 + 24) = v116;
              if (!r_mark_lAr(a1))
                goto LABEL_179;
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
              inserted = slice_del(a1);
              if ((inserted & 0x80000000) != 0)
                return inserted;
              v117 = r_stem_suffix_chain_before_ki((_DWORD *)a1);
              if (!(_DWORD)v117)
                goto LABEL_179;
              v12 = v117;
              if ((v117 & 0x80000000) == 0)
                goto LABEL_90;
LABEL_253:
              v43 = v12 >> 31;
              goto LABEL_254;
            }
          }
        }
LABEL_175:
        *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
        inserted = slice_del(a1);
        if ((inserted & 0x80000000) != 0)
          return inserted;
        v92 = *(_DWORD *)(a1 + 8);
        v40 = *(_DWORD *)(a1 + 12) - v92;
        *(_DWORD *)(a1 + 24) = v92;
        if (r_mark_lAr(a1))
        {
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
          inserted = slice_del(a1);
          if ((inserted & 0x80000000) != 0)
            return inserted;
          v35 = r_stem_suffix_chain_before_ki((_DWORD *)a1);
          if ((_DWORD)v35)
            goto LABEL_65;
        }
LABEL_179:
        v48 = *(_DWORD *)(a1 + 12) - v40;
        goto LABEL_89;
      }
LABEL_86:
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
      inserted = slice_del(a1);
      if ((inserted & 0x80000000) == 0)
        goto LABEL_90;
      return inserted;
    }
  }
  v45 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v45;
  *(_DWORD *)(a1 + 24) = v45;
  if (r_mark_ndA(a1)
    || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12), r_check_vowel_harmony(a1))
    && (v54 = *(int *)(a1 + 8) - 1, (int)v54 > *(_DWORD *)(a1 + 16))
    && (*(unsigned __int8 *)(*(_QWORD *)a1 + v54) | 4) == 0x65
    && find_among_b(a1, (uint64_t)&a_5_12, 2))
  {
    v47 = *(_DWORD *)(a1 + 8);
    v46 = *(_DWORD *)(a1 + 12);
    if (r_mark_lArI(a1))
      goto LABEL_86;
    v71 = v46 - v47;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v71;
    v72 = r_mark_sU(a1);
    v12 = v72 & (v72 >> 31);
    v61 = v72 >> 31;
    if (v72)
      v73 = v72 >> 31;
    else
      v73 = 18;
    if (v73 == 18)
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v71;
      v88 = r_stem_suffix_chain_before_ki((_DWORD *)a1);
      v61 = v88 >> 31;
      if (v88 >= 0)
        v12 = v12;
      else
        v12 = v88;
      if (!v88)
        v61 = 15;
      if (v88 > 0)
        goto LABEL_90;
    }
    else if (!v73)
    {
      goto LABEL_175;
    }
    if (!v61)
      goto LABEL_90;
    if (v61 != 15)
      goto LABEL_169;
  }
  else
  {
    LODWORD(v12) = 0;
  }
  v55 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v55;
  *(_DWORD *)(a1 + 24) = v55;
  if (r_check_vowel_harmony(a1)
    && (v56 = *(int *)(a1 + 8), (int)v56 - 3 > *(_DWORD *)(a1 + 16))
    && *(_BYTE *)(v56 + *(_QWORD *)a1 - 1) == 110
    && find_among_b(a1, (uint64_t)&a_9_5, 2)
    || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12), r_mark_nU(a1)))
  {
    v58 = *(_DWORD *)(a1 + 8);
    v57 = *(_DWORD *)(a1 + 12);
    v59 = r_mark_sU(a1);
    if (v59 >= 0)
      v60 = v12;
    else
      v60 = v59;
    v61 = v59 >> 31;
    if (v59)
      v12 = v60;
    else
      v12 = v12;
    if (v59)
      v62 = v59 >> 31;
    else
      v62 = 23;
    if (v62 != 23)
    {
      if (!v62)
        goto LABEL_175;
      if ((v59 & 0x80000000) == 0)
        goto LABEL_90;
      goto LABEL_169;
    }
    *(_DWORD *)(a1 + 8) = v58 - v57 + *(_DWORD *)(a1 + 12);
    if (r_mark_lArI(a1))
      goto LABEL_90;
  }
  v89 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v89;
  *(_DWORD *)(a1 + 24) = v89;
  if (r_mark_DAn(a1))
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    inserted = slice_del(a1);
    if ((inserted & 0x80000000) != 0)
      return inserted;
    v91 = *(_DWORD *)(a1 + 8);
    v90 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 24) = v91;
    if (!r_mark_possessives(a1))
    {
      v102 = v90 - v91;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v102;
      if (!r_mark_lAr(a1))
      {
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v102;
        v12 = r_stem_suffix_chain_before_ki((_DWORD *)a1);
        if ((v12 & 0x80000000) != 0)
          return v12;
        goto LABEL_90;
      }
LABEL_63:
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
      inserted = slice_del(a1);
      if ((inserted & 0x80000000) == 0)
      {
        v34 = *(_DWORD *)(a1 + 8);
        v33 = *(_DWORD *)(a1 + 12);
        v35 = r_stem_suffix_chain_before_ki((_DWORD *)a1);
        if ((_DWORD)v35)
        {
LABEL_65:
          v12 = v35;
LABEL_66:
          if ((v12 & 0x80000000) != 0)
            return v12;
          goto LABEL_90;
        }
        v48 = v34 - v33 + *(_DWORD *)(a1 + 12);
LABEL_89:
        *(_DWORD *)(a1 + 8) = v48;
        goto LABEL_90;
      }
      return inserted;
    }
    goto LABEL_175;
  }
  v93 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v93;
  *(_DWORD *)(a1 + 24) = v93;
  if (r_mark_nUn(a1) || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12), r_mark_ylA(a1)))
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    inserted = slice_del(a1);
    if ((inserted & 0x80000000) != 0)
      return inserted;
    v95 = *(_DWORD *)(a1 + 8);
    v94 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 24) = v95;
    if (r_mark_lAr(a1))
    {
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
      inserted = slice_del(a1);
      if ((inserted & 0x80000000) != 0)
        return inserted;
      v96 = r_stem_suffix_chain_before_ki((_DWORD *)a1);
      if (v96 >= 0)
        v97 = v12;
      else
        v97 = v96;
      v43 = v96 >> 31;
      if (v96)
        v12 = v97;
      else
        v12 = v12;
      if (v96)
        v98 = v96 >> 31;
      else
        v98 = 36;
      if (!v98)
        goto LABEL_90;
      if (v98 != 36)
        goto LABEL_254;
    }
    v99 = v94 - v95;
    v100 = *(_DWORD *)(a1 + 12) - v99;
    *(_DWORD *)(a1 + 8) = v100;
    *(_DWORD *)(a1 + 24) = v100;
    if (!r_mark_possessives(a1))
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v99;
      v101 = r_mark_sU(a1);
      if ((int)v101 <= 0)
      {
        if (v101)
          v12 = v101;
        else
          v12 = v12;
        v43 = v101 >> 31;
        if (v101)
          v113 = v101 >> 31;
        else
          v113 = 40;
        if (v113 == 40)
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) - v99;
          v115 = r_stem_suffix_chain_before_ki((_DWORD *)a1);
          if ((v115 & 0x80000000) == 0)
            goto LABEL_90;
          v12 = v115;
          goto LABEL_253;
        }
        if (v113)
        {
LABEL_254:
          if (!v43)
            goto LABEL_90;
          goto LABEL_66;
        }
      }
    }
    goto LABEL_198;
  }
  v103 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v103;
  *(_DWORD *)(a1 + 24) = v103;
  if (r_mark_lArI(a1))
    goto LABEL_86;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  v104 = r_stem_suffix_chain_before_ki((_DWORD *)a1);
  if (v104 >= 0)
    v105 = v12;
  else
    v105 = v104;
  v61 = v104 >> 31;
  if (v104)
    v12 = v105;
  else
    v12 = v12;
  if (v104)
    v106 = v104 >> 31;
  else
    v106 = 44;
  if (!v106)
    goto LABEL_90;
  if (v106 != 44)
  {
LABEL_169:
    if (v61 != 1)
      goto LABEL_90;
    goto LABEL_66;
  }
  v107 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v107;
  *(_DWORD *)(a1 + 24) = v107;
  if (r_mark_DA(a1)
    || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12), r_mark_yU(a1))
    || (*(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12), r_mark_yA(a1)))
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    inserted = slice_del(a1);
    if ((inserted & 0x80000000) != 0)
      return inserted;
    v109 = *(_DWORD *)(a1 + 8);
    v108 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 24) = v109;
    if (r_mark_possessives(a1))
    {
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
      inserted = slice_del(a1);
      if ((inserted & 0x80000000) != 0)
        return inserted;
      v111 = *(_DWORD *)(a1 + 8);
      v110 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 24) = v111;
      if (!r_mark_lAr(a1))
        *(_DWORD *)(a1 + 8) = v111 - v110 + *(_DWORD *)(a1 + 12);
    }
    else
    {
      *(_DWORD *)(a1 + 8) = v109 - v108 + *(_DWORD *)(a1 + 12);
      if (!r_mark_lAr(a1))
        goto LABEL_90;
    }
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    inserted = slice_del(a1);
    if ((inserted & 0x80000000) != 0)
      return inserted;
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
    goto LABEL_201;
  }
  v119 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v119;
  *(_DWORD *)(a1 + 24) = v119;
  if (!r_mark_possessives(a1))
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
    v35 = r_mark_sU(a1);
    if ((int)v35 < 1)
      goto LABEL_65;
  }
LABEL_198:
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
  inserted = slice_del(a1);
  if ((inserted & 0x80000000) != 0)
    return inserted;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a1 + 8);
  if (!r_mark_lAr(a1))
    goto LABEL_90;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
  inserted = slice_del(a1);
  if ((inserted & 0x80000000) != 0)
    return inserted;
LABEL_201:
  inserted = r_stem_suffix_chain_before_ki((_DWORD *)a1);
  if ((inserted & 0x80000000) != 0)
    return inserted;
LABEL_90:
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  v49 = eq_s_b(a1, 2, &s_16_12);
  v50 = *(_DWORD *)(a1 + 12);
  if (!v49)
  {
    v53 = *(_DWORD *)(a1 + 16);
    goto LABEL_120;
  }
  v51 = *(_DWORD *)(a1 + 8);
  if (eq_s_b(a1, 3, &s_17_17))
  {
    v52 = *(_DWORD *)(a1 + 8);
  }
  else
  {
    v52 = *(_DWORD *)(a1 + 12) + v51 - v50;
    *(_DWORD *)(a1 + 8) = v52;
  }
  v53 = *(_DWORD *)(a1 + 16);
  if (v52 <= v53)
    return 0;
  v50 = *(_DWORD *)(a1 + 12);
LABEL_120:
  *(_DWORD *)(a1 + 8) = v50;
  if (v50 <= v53)
    goto LABEL_152;
  v63 = *(unsigned __int8 *)(*(_QWORD *)a1 + v50 - 1);
  if (v63 != 103 && v63 != 100)
    goto LABEL_152;
  if ((out_grouping_b_U(a1, (uint64_t)&g_vowel_0, 97, 305, 1) & 0x80000000) == 0)
  {
    if ((v64 = *(int *)(a1 + 8), (int)v64 > *(_DWORD *)(a1 + 16)) && *(_BYTE *)(v64 + *(_QWORD *)a1 - 1) == 97
      || eq_s_b(a1, 2, &s_9_22))
    {
      v65 = *(_DWORD *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v65;
      v66 = &s_10_41;
      v67 = a1;
      v68 = v65;
      v69 = v65;
      v70 = 2;
      goto LABEL_146;
    }
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  v74 = out_grouping_b_U(a1, (uint64_t)&g_vowel_0, 97, 305, 1);
  v65 = *(_DWORD *)(a1 + 12);
  if ((v74 & 0x80000000) == 0)
  {
    v75 = *(int *)(a1 + 8);
    if ((int)v75 > *(_DWORD *)(a1 + 16))
    {
      v76 = *(unsigned __int8 *)(v75 + *(_QWORD *)a1 - 1);
      if (v76 == 105 || v76 == 101)
      {
        *(_DWORD *)(a1 + 8) = v65;
        v66 = &s_11_51;
LABEL_145:
        v67 = a1;
        v68 = v65;
        v69 = v65;
        v70 = 1;
LABEL_146:
        inserted = insert_s(v67, v68, v69, v70, v66);
        *(_DWORD *)(a1 + 8) = v65;
        if ((inserted & 0x80000000) != 0)
          return inserted;
        goto LABEL_152;
      }
    }
  }
  *(_DWORD *)(a1 + 8) = v65;
  v77 = out_grouping_b_U(a1, (uint64_t)&g_vowel_0, 97, 305, 1);
  v65 = *(_DWORD *)(a1 + 12);
  if ((v77 & 0x80000000) == 0)
  {
    v78 = *(int *)(a1 + 8);
    if ((int)v78 > *(_DWORD *)(a1 + 16))
    {
      v79 = *(unsigned __int8 *)(v78 + *(_QWORD *)a1 - 1);
      if (v79 == 117 || v79 == 111)
      {
        *(_DWORD *)(a1 + 8) = v65;
        v66 = &s_12_17;
        goto LABEL_145;
      }
    }
  }
  *(_DWORD *)(a1 + 8) = v65;
  if ((out_grouping_b_U(a1, (uint64_t)&g_vowel_0, 97, 305, 1) & 0x80000000) != 0)
    goto LABEL_152;
  v81 = *(_DWORD *)(a1 + 8);
  v80 = *(_DWORD *)(a1 + 12);
  if (!eq_s_b(a1, 2, &s_13_43))
  {
    *(_DWORD *)(a1 + 8) = v81 - v80 + *(_DWORD *)(a1 + 12);
    if (!eq_s_b(a1, 2, &s_14_19))
      goto LABEL_152;
  }
  v82 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v82;
  v12 = insert_s(a1, v82, v82, 2, &s_15_12);
  *(_DWORD *)(a1 + 8) = v82;
  if ((v12 & 0x80000000) == 0)
  {
LABEL_152:
    v83 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v83;
    *(_DWORD *)(a1 + 24) = v83;
    v84 = find_among_b(a1, (uint64_t)&a_23_1, 4);
    if (v84)
    {
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
      switch(v84)
      {
        case 1:
          v85 = &s_5_58;
          goto LABEL_158;
        case 2:
          v85 = &s_6_133;
          v86 = a1;
          v87 = 2;
          goto LABEL_159;
        case 3:
          v85 = &s_7_94;
          goto LABEL_158;
        case 4:
          v85 = &s_8_109;
LABEL_158:
          v86 = a1;
          v87 = 1;
LABEL_159:
          inserted = slice_from_s(v86, v87, v85);
          if ((inserted & 0x80000000) == 0)
            break;
          return inserted;
        default:
          break;
      }
    }
    v2 = *(_DWORD *)(a1 + 16);
    v12 = 1;
    goto LABEL_44;
  }
  return v12;
}

_QWORD *turkish_UTF_8_create_env()
{
  return SN_create_env(0, 0, 1);
}

void turkish_UTF_8_close_env(uint64_t a1)
{
  SN_close_env(a1, 0);
}

uint64_t r_mark_ymUs_(uint64_t a1)
{
  uint64_t v2;

  if (r_check_vowel_harmony(a1)
    && (v2 = *(int *)(a1 + 8), (int)v2 - 3 > *(_DWORD *)(a1 + 16))
    && *(unsigned __int8 *)(v2 + *(_QWORD *)a1 - 1) == 159
    && find_among_b(a1, (uint64_t)&a_22_1, 4))
  {
    return r_mark_suffix_with_optional_y_consonant(a1);
  }
  else
  {
    return 0;
  }
}

uint64_t r_mark_yDU(uint64_t a1)
{
  if (r_check_vowel_harmony(a1) && find_among_b(a1, (uint64_t)&a_20_2, 32))
    return r_mark_suffix_with_optional_y_consonant(a1);
  else
    return 0;
}

uint64_t r_mark_ysA(uint64_t a1)
{
  uint64_t v1;
  char v3;

  v1 = *(int *)(a1 + 8) - 1;
  if ((int)v1 > *(_DWORD *)(a1 + 16)
    && (v3 = *(_BYTE *)(*(_QWORD *)a1 + v1), (v3 & 0xE0) == 0x60)
    && ((0x6822u >> v3) & 1) != 0
    && find_among_b(a1, (uint64_t)&a_21_2, 8))
  {
    return r_mark_suffix_with_optional_y_consonant(a1);
  }
  else
  {
    return 0;
  }
}

BOOL r_mark_sUnUz(uint64_t a1)
{
  uint64_t v1;

  v1 = *(int *)(a1 + 8);
  return (int)v1 - 4 > *(_DWORD *)(a1 + 16)
      && *(_BYTE *)(v1 + *(_QWORD *)a1 - 1) == 122
      && find_among_b(a1, (uint64_t)&a_15_2, 4) != 0;
}

uint64_t r_mark_lAr(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = r_check_vowel_harmony(a1);
  if ((_DWORD)result)
  {
    v3 = *(int *)(a1 + 8);
    return (int)v3 - 2 > *(_DWORD *)(a1 + 16)
        && *(_BYTE *)(v3 + *(_QWORD *)a1 - 1) == 114
        && find_among_b(a1, (uint64_t)&a_16_2, 2) != 0;
  }
  return result;
}

uint64_t r_mark_yUm(uint64_t a1)
{
  uint64_t v2;

  if (r_check_vowel_harmony(a1)
    && (v2 = *(int *)(a1 + 8) - 1, (int)v2 > *(_DWORD *)(a1 + 16))
    && *(_BYTE *)(*(_QWORD *)a1 + v2) == 109
    && find_among_b(a1, (uint64_t)&a_12_2, 4))
  {
    return r_mark_suffix_with_optional_y_consonant(a1);
  }
  else
  {
    return 0;
  }
}

uint64_t r_mark_sUn(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = r_check_vowel_harmony(a1);
  if ((_DWORD)result)
  {
    v3 = *(int *)(a1 + 8);
    return (int)v3 - 2 > *(_DWORD *)(a1 + 16)
        && *(_BYTE *)(v3 + *(_QWORD *)a1 - 1) == 110
        && find_among_b(a1, (uint64_t)&a_13_2, 4) != 0;
  }
  return result;
}

uint64_t r_mark_yUz(uint64_t a1)
{
  uint64_t v2;

  if (r_check_vowel_harmony(a1)
    && (v2 = *(int *)(a1 + 8) - 1, (int)v2 > *(_DWORD *)(a1 + 16))
    && *(_BYTE *)(*(_QWORD *)a1 + v2) == 122
    && find_among_b(a1, (uint64_t)&a_14_2, 4))
  {
    return r_mark_suffix_with_optional_y_consonant(a1);
  }
  else
  {
    return 0;
  }
}

uint64_t r_mark_DUr(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = r_check_vowel_harmony(a1);
  if ((_DWORD)result)
  {
    v3 = *(int *)(a1 + 8);
    return (int)v3 - 2 > *(_DWORD *)(a1 + 16)
        && *(_BYTE *)(v3 + *(_QWORD *)a1 - 1) == 114
        && find_among_b(a1, (uint64_t)&a_18_2, 8) != 0;
  }
  return result;
}

uint64_t r_check_vowel_harmony(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 8);
  v2 = *(_DWORD *)(a1 + 12);
  if ((out_grouping_b_U(a1, (uint64_t)&g_vowel_0, 97, 305, 1) & 0x80000000) != 0)
    return 0;
  v4 = *(_DWORD *)(a1 + 12);
  v5 = *(int *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if ((int)v5 <= v6)
  {
    v7 = *(_DWORD *)(a1 + 12);
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 12);
    if (*(_BYTE *)(*(_QWORD *)a1 + v5 - 1) == 97)
    {
      *(_DWORD *)(a1 + 8) = v5 - 1;
      if ((out_grouping_b_U(a1, (uint64_t)&g_vowel1, 97, 305, 1) & 0x80000000) == 0)
        goto LABEL_29;
      v7 = *(_DWORD *)(a1 + 12);
      v6 = *(_DWORD *)(a1 + 16);
    }
  }
  v8 = v4 - v5;
  v9 = v7 - v8;
  *(_DWORD *)(a1 + 8) = v9;
  if (v9 > v6)
  {
    v10 = v9 - 1;
    if (*(_BYTE *)(*(_QWORD *)a1 + v10) == 101)
    {
      *(_DWORD *)(a1 + 8) = v10;
      if ((out_grouping_b_U(a1, (uint64_t)&g_vowel2, 101, 252, 1) & 0x80000000) == 0)
        goto LABEL_29;
      v9 = *(_DWORD *)(a1 + 12) - v8;
    }
  }
  *(_DWORD *)(a1 + 8) = v9;
  if (eq_s_b(a1, 2, &s_0_149) && (out_grouping_b_U(a1, (uint64_t)&g_vowel3, 97, 305, 1) & 0x80000000) == 0)
    goto LABEL_29;
  v11 = *(_DWORD *)(a1 + 16);
  v12 = *(int *)(a1 + 12) - (uint64_t)v8;
  *(_DWORD *)(a1 + 8) = v12;
  if ((int)v12 > v11 && *(_BYTE *)(*(_QWORD *)a1 + v12 - 1) == 105)
  {
    *(_DWORD *)(a1 + 8) = v12 - 1;
    if ((out_grouping_b_U(a1, (uint64_t)&g_vowel4, 101, 105, 1) & 0x80000000) == 0)
      goto LABEL_29;
    v11 = *(_DWORD *)(a1 + 16);
    LODWORD(v12) = *(_DWORD *)(a1 + 12) - v8;
  }
  *(_DWORD *)(a1 + 8) = v12;
  if ((int)v12 > v11)
  {
    v13 = (int)v12 - 1;
    if (*(_BYTE *)(*(_QWORD *)a1 + v13) == 111)
    {
      *(_DWORD *)(a1 + 8) = v13;
      if ((out_grouping_b_U(a1, (uint64_t)&g_vowel5, 111, 117, 1) & 0x80000000) == 0)
        goto LABEL_29;
      LODWORD(v12) = *(_DWORD *)(a1 + 12) - v8;
    }
  }
  *(_DWORD *)(a1 + 8) = v12;
  if (eq_s_b(a1, 2, &s_1_296)
    && (out_grouping_b_U(a1, (uint64_t)&g_vowel6, 246, 252, 1) & 0x80000000) == 0)
  {
    goto LABEL_29;
  }
  v14 = *(_DWORD *)(a1 + 16);
  v15 = *(int *)(a1 + 12) - (uint64_t)v8;
  *(_DWORD *)(a1 + 8) = v15;
  if ((int)v15 > v14 && *(_BYTE *)(*(_QWORD *)a1 + v15 - 1) == 117)
  {
    *(_DWORD *)(a1 + 8) = v15 - 1;
    if ((out_grouping_b_U(a1, (uint64_t)&g_vowel5, 111, 117, 1) & 0x80000000) != 0)
    {
      LODWORD(v15) = *(_DWORD *)(a1 + 12) - v8;
      goto LABEL_27;
    }
LABEL_29:
    *(_DWORD *)(a1 + 8) = v3 - v2 + *(_DWORD *)(a1 + 12);
    return 1;
  }
LABEL_27:
  *(_DWORD *)(a1 + 8) = v15;
  result = eq_s_b(a1, 2, &s_2_58);
  if (!(_DWORD)result)
    return result;
  if ((out_grouping_b_U(a1, (uint64_t)&g_vowel6, 246, 252, 1) & 0x80000000) == 0)
    goto LABEL_29;
  return 0;
}

uint64_t r_mark_suffix_with_optional_y_consonant(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t result;
  int v14;

  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(int *)(a1 + 8);
  v4 = v2;
  v5 = *(unsigned int *)(a1 + 16);
  v6 = *(_QWORD *)a1;
  if ((int)v3 > (int)v5)
  {
    v7 = v3 - 1;
    if (*(_BYTE *)(v6 + v3 - 1) == 121)
    {
      *(_DWORD *)(a1 + 8) = v7;
      v8 = in_grouping_b_U(a1, (uint64_t)&g_vowel_0, 97, 305, 0);
      v4 = *(_DWORD *)(a1 + 12);
      if (!v8)
      {
        v14 = v7 - v2 + v4;
        goto LABEL_12;
      }
      v5 = *(unsigned int *)(a1 + 16);
      v6 = *(_QWORD *)a1;
    }
  }
  v9 = v3 - v2;
  v10 = (v4 + v9);
  *(_DWORD *)(a1 + 8) = v10;
  if ((int)v10 > (int)v5 && *(_BYTE *)(v6 + (int)v10 - 1) == 121)
    return 0;
  v11 = skip_utf8(v6, v10, v5, 0, -1);
  if (v11 < 0)
    return 0;
  *(_DWORD *)(a1 + 8) = v11;
  v12 = in_grouping_b_U(a1, (uint64_t)&g_vowel_0, 97, 305, 0);
  result = 0;
  if (v12)
    return result;
  v14 = *(_DWORD *)(a1 + 12) + v9;
LABEL_12:
  *(_DWORD *)(a1 + 8) = v14;
  return 1;
}

uint64_t r_stem_suffix_chain_before_ki(_DWORD *a1)
{
  uint64_t result;
  _BOOL4 v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;

  a1[6] = a1[2];
  result = eq_s_b((uint64_t)a1, 2, &s_3_103);
  v3 = result != 0;
  if (!(_DWORD)result)
    return result;
  v5 = a1[2];
  v4 = a1[3];
  if (r_mark_DA((uint64_t)a1))
  {
    a1[5] = a1[2];
    result = slice_del((uint64_t)a1);
    if ((result & 0x80000000) != 0)
      return result;
    v7 = a1[2];
    v6 = a1[3];
    a1[6] = v7;
    if (r_mark_lAr((uint64_t)a1))
    {
      a1[5] = a1[2];
      result = slice_del((uint64_t)a1);
      if ((result & 0x80000000) != 0)
        return result;
      v9 = a1[2];
      v8 = a1[3];
      result = r_stem_suffix_chain_before_ki(a1);
      if (!(_DWORD)result)
      {
        v10 = v9 - v8 + a1[3];
LABEL_35:
        a1[2] = v10;
        return 1;
      }
      goto LABEL_32;
    }
    v21 = v7 - v6;
    a1[2] = a1[3] + v21;
    if (!r_mark_possessives((uint64_t)a1))
    {
      v10 = a1[3] + v21;
      goto LABEL_35;
    }
LABEL_24:
    a1[5] = a1[2];
    result = slice_del((uint64_t)a1);
    if ((result & 0x80000000) != 0)
      return result;
    v22 = a1[2];
    v23 = a1[3] - v22;
    a1[6] = v22;
    if (!r_mark_lAr((uint64_t)a1))
      goto LABEL_28;
    a1[5] = a1[2];
    result = slice_del((uint64_t)a1);
    if ((result & 0x80000000) != 0)
      return result;
    result = r_stem_suffix_chain_before_ki(a1);
    if (!(_DWORD)result)
    {
LABEL_28:
      v10 = a1[3] - v23;
      goto LABEL_35;
    }
LABEL_32:
    if ((result & 0x80000000) != 0)
      return result;
    return 1;
  }
  v11 = v4 - v5;
  a1[2] = a1[3] - v11;
  if (!r_mark_nUn((uint64_t)a1))
  {
    a1[2] = a1[3] - v11;
    result = r_mark_ndA((uint64_t)a1);
    if (!(_DWORD)result)
      return result;
    v25 = a1[2];
    v24 = a1[3];
    if (!r_mark_lArI((uint64_t)a1))
    {
      v26 = v24 - v25;
      a1[2] = a1[3] - v26;
      v27 = r_mark_sU((uint64_t)a1);
      v28 = v27 >> 31;
      if (!v27)
        v28 = 19;
      if (v28 == 19)
      {
        a1[2] = a1[3] - v26;
        result = r_stem_suffix_chain_before_ki(a1);
        if ((int)result > 0)
          return 1;
      }
      else
      {
        if (!v28)
          goto LABEL_24;
        v29 = v27;
        if (v27 >= 0)
          v30 = v3;
        else
          v30 = v27;
        if (v27)
          result = v30;
        else
          result = v3;
        if ((v29 & 0x80000000) == 0)
          return 1;
      }
      return result;
    }
LABEL_31:
    a1[5] = a1[2];
    result = slice_del((uint64_t)a1);
    goto LABEL_32;
  }
  a1[5] = a1[2];
  result = slice_del((uint64_t)a1);
  if ((result & 0x80000000) != 0)
    return result;
  v13 = a1[2];
  v12 = a1[3];
  a1[6] = v13;
  if (r_mark_lArI((uint64_t)a1))
    goto LABEL_31;
  v14 = v12 - v13;
  v15 = a1[3] - (v12 - v13);
  a1[2] = v15;
  a1[6] = v15;
  if (r_mark_possessives((uint64_t)a1))
    goto LABEL_24;
  v16 = v13 - v12;
  a1[2] = a1[3] - v14;
  LODWORD(result) = r_mark_sU((uint64_t)a1);
  v17 = (_DWORD)result == 0;
  if ((int)result > 0)
    goto LABEL_24;
  v18 = result;
  result = (_DWORD)result ? result : v3;
  v19 = v18 >> 31;
  v20 = v17 ? 14 : v19;
  switch(v20)
  {
    case 0:
      goto LABEL_24;
    case 14:
      a1[2] = a1[3] - v14;
      result = r_stem_suffix_chain_before_ki(a1);
      if (!(_DWORD)result)
      {
        v10 = v16 + a1[3];
        goto LABEL_35;
      }
      if ((result & 0x80000000) == 0)
        return 1;
      v19 = result >> 31;
      break;
    case 13:
      goto LABEL_24;
  }
  if (!v19)
    return 1;
  return result;
}

BOOL r_mark_lArI(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v1 = *(int *)(a1 + 8);
  if ((int)v1 - 3 > *(_DWORD *)(a1 + 16)
    && ((v2 = *(unsigned __int8 *)(v1 + *(_QWORD *)a1 - 1), v2 == 177) || v2 == 105))
  {
    return find_among_b(a1, (uint64_t)&a_1_19, 2) != 0;
  }
  else
  {
    return 0;
  }
}

uint64_t r_mark_possessives(uint64_t a1)
{
  uint64_t v1;
  char v3;
  uint64_t result;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;

  v1 = *(int *)(a1 + 8);
  if ((int)v1 <= *(_DWORD *)(a1 + 16))
    return 0;
  v3 = *(_BYTE *)(v1 + *(_QWORD *)a1 - 1);
  if ((v3 & 0xE0) != 0x60 || ((0x4006000u >> v3) & 1) == 0)
    return 0;
  result = find_among_b(a1, (uint64_t)&a_0_20, 10);
  if ((_DWORD)result)
  {
    v6 = *(_DWORD *)(a1 + 8);
    v5 = *(_DWORD *)(a1 + 12);
    if (!in_grouping_b_U(a1, (uint64_t)&g_U, 105, 305, 0))
    {
      v8 = *(_DWORD *)(a1 + 8);
      v7 = *(_DWORD *)(a1 + 12);
      if (!out_grouping_b_U(a1, (uint64_t)&g_vowel_0, 97, 305, 0))
      {
        v13 = v8 - v7;
        v9 = *(_DWORD *)(a1 + 12);
        goto LABEL_14;
      }
    }
    v9 = v6 - v5;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12) + v9;
    result = in_grouping_b_U(a1, (uint64_t)&g_U, 105, 305, 0);
    v10 = (*(_DWORD *)(a1 + 12) + v9);
    *(_DWORD *)(a1 + 8) = v10;
    if ((_DWORD)result)
    {
      v11 = skip_utf8(*(_QWORD *)a1, v10, *(unsigned int *)(a1 + 16), 0, -1);
      if (v11 < 0)
        return 0;
      *(_DWORD *)(a1 + 8) = v11;
      v12 = out_grouping_b_U(a1, (uint64_t)&g_vowel_0, 97, 305, 0);
      result = 0;
      if (!v12)
      {
        v13 = *(_DWORD *)(a1 + 12);
LABEL_14:
        *(_DWORD *)(a1 + 8) = v13 + v9;
        return 1;
      }
    }
  }
  return result;
}

uint64_t r_mark_sU(uint64_t a1)
{
  uint64_t result;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;

  result = r_check_vowel_harmony(a1);
  if ((_DWORD)result)
  {
    v3 = in_grouping_b_U(a1, (uint64_t)&g_U, 105, 305, 0);
    result = 0;
    if (!v3)
    {
      v4 = *(_DWORD *)(a1 + 12);
      v5 = *(int *)(a1 + 8);
      v6 = *(unsigned int *)(a1 + 16);
      v7 = *(_QWORD *)a1;
      if ((int)v5 <= (int)v6)
      {
        v9 = *(_DWORD *)(a1 + 12);
      }
      else
      {
        v8 = v5 - 1;
        v9 = *(_DWORD *)(a1 + 12);
        if (*(_BYTE *)(v7 + v5 - 1) == 115)
        {
          *(_DWORD *)(a1 + 8) = v8;
          v10 = in_grouping_b_U(a1, (uint64_t)&g_vowel_0, 97, 305, 0);
          v9 = *(_DWORD *)(a1 + 12);
          if (!v10)
          {
            v15 = v8 - v4 + v9;
LABEL_15:
            *(_DWORD *)(a1 + 8) = v15;
            return 1;
          }
          v6 = *(unsigned int *)(a1 + 16);
          v7 = *(_QWORD *)a1;
        }
      }
      v11 = v5 - v4;
      v12 = (v9 + v11);
      *(_DWORD *)(a1 + 8) = v12;
      if ((int)v12 > (int)v6 && *(_BYTE *)(v7 + (int)v12 - 1) == 115)
        return 0;
      v13 = skip_utf8(v7, v12, v6, 0, -1);
      if (v13 < 0)
        return 0;
      *(_DWORD *)(a1 + 8) = v13;
      v14 = in_grouping_b_U(a1, (uint64_t)&g_vowel_0, 97, 305, 0);
      result = 0;
      if (v14)
        return result;
      v15 = *(_DWORD *)(a1 + 12) + v11;
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t r_mark_ndA(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = r_check_vowel_harmony(a1);
  if ((_DWORD)result)
  {
    v3 = *(int *)(a1 + 8);
    return (int)v3 - 2 > *(_DWORD *)(a1 + 16)
        && (*(unsigned __int8 *)(v3 + *(_QWORD *)a1 - 1) | 4) == 0x65
        && find_among_b(a1, (uint64_t)&a_7_9, 2) != 0;
  }
  return result;
}

uint64_t r_mark_nU(uint64_t a1)
{
  uint64_t result;

  result = r_check_vowel_harmony(a1);
  if ((_DWORD)result)
    return find_among_b(a1, (uint64_t)&a_2_19, 4) != 0;
  return result;
}

uint64_t r_mark_DAn(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = r_check_vowel_harmony(a1);
  if ((_DWORD)result)
  {
    v3 = *(int *)(a1 + 8);
    return (int)v3 - 2 > *(_DWORD *)(a1 + 16)
        && *(_BYTE *)(v3 + *(_QWORD *)a1 - 1) == 110
        && find_among_b(a1, (uint64_t)&a_8_7, 4) != 0;
  }
  return result;
}

uint64_t r_mark_nUn(uint64_t a1)
{
  uint64_t v2;

  if (r_check_vowel_harmony(a1)
    && (v2 = *(int *)(a1 + 8) - 1, (int)v2 > *(_DWORD *)(a1 + 16))
    && *(_BYTE *)(*(_QWORD *)a1 + v2) == 110
    && find_among_b(a1, (uint64_t)&a_3_16, 4))
  {
    return r_mark_suffix_with_optional_n_consonant(a1);
  }
  else
  {
    return 0;
  }
}

uint64_t r_mark_ylA(uint64_t a1)
{
  uint64_t v2;

  if (r_check_vowel_harmony(a1)
    && (v2 = *(int *)(a1 + 8) - 1, (int)v2 > *(_DWORD *)(a1 + 16))
    && (*(unsigned __int8 *)(*(_QWORD *)a1 + v2) | 4) == 0x65
    && find_among_b(a1, (uint64_t)&a_10_3, 2))
  {
    return r_mark_suffix_with_optional_y_consonant(a1);
  }
  else
  {
    return 0;
  }
}

uint64_t r_mark_DA(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = r_check_vowel_harmony(a1);
  if ((_DWORD)result)
  {
    v3 = *(int *)(a1 + 8) - 1;
    return (int)v3 > *(_DWORD *)(a1 + 16)
        && (*(unsigned __int8 *)(*(_QWORD *)a1 + v3) | 4) == 0x65
        && find_among_b(a1, (uint64_t)&a_6_9, 4) != 0;
  }
  return result;
}

uint64_t r_mark_yU(uint64_t a1)
{
  if (r_check_vowel_harmony(a1) && !in_grouping_b_U(a1, (uint64_t)&g_U, 105, 305, 0))
    return r_mark_suffix_with_optional_y_consonant(a1);
  else
    return 0;
}

uint64_t r_mark_yA(uint64_t a1)
{
  uint64_t v2;

  if (r_check_vowel_harmony(a1)
    && (v2 = *(int *)(a1 + 8), (int)v2 > *(_DWORD *)(a1 + 16))
    && (*(unsigned __int8 *)(v2 + *(_QWORD *)a1 - 1) | 4) == 0x65
    && find_among_b(a1, (uint64_t)&a_4_14, 2))
  {
    return r_mark_suffix_with_optional_y_consonant(a1);
  }
  else
  {
    return 0;
  }
}

uint64_t r_mark_suffix_with_optional_n_consonant(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t result;
  int v14;

  v2 = *(_DWORD *)(a1 + 12);
  v3 = *(int *)(a1 + 8);
  v4 = v2;
  v5 = *(unsigned int *)(a1 + 16);
  v6 = *(_QWORD *)a1;
  if ((int)v3 > (int)v5)
  {
    v7 = v3 - 1;
    if (*(_BYTE *)(v6 + v3 - 1) == 110)
    {
      *(_DWORD *)(a1 + 8) = v7;
      v8 = in_grouping_b_U(a1, (uint64_t)&g_vowel_0, 97, 305, 0);
      v4 = *(_DWORD *)(a1 + 12);
      if (!v8)
      {
        v14 = v7 - v2 + v4;
        goto LABEL_12;
      }
      v5 = *(unsigned int *)(a1 + 16);
      v6 = *(_QWORD *)a1;
    }
  }
  v9 = v3 - v2;
  v10 = (v4 + v9);
  *(_DWORD *)(a1 + 8) = v10;
  if ((int)v10 > (int)v5 && *(_BYTE *)(v6 + (int)v10 - 1) == 110)
    return 0;
  v11 = skip_utf8(v6, v10, v5, 0, -1);
  if (v11 < 0)
    return 0;
  *(_DWORD *)(a1 + 8) = v11;
  v12 = in_grouping_b_U(a1, (uint64_t)&g_vowel_0, 97, 305, 0);
  result = 0;
  if (v12)
    return result;
  v14 = *(_DWORD *)(a1 + 12) + v9;
LABEL_12:
  *(_DWORD *)(a1 + 8) = v14;
  return 1;
}

uint64_t english_UTF_8_stem(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  int among;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  char v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int among_b;
  uint64_t v29;
  void *v30;
  void *v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  char v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v2 = *(unsigned int *)(a1 + 12);
  v3 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v3;
  if ((int)v3 + 2 < (int)v2)
  {
    v4 = *(_BYTE *)(*(_QWORD *)a1 + v3 + 2);
    if ((v4 & 0xE0) == 0x60 && ((0x28C5212u >> v4) & 1) != 0)
    {
      among = find_among(a1, (uint64_t)&a_10_4, 18);
      v2 = *(unsigned int *)(a1 + 12);
      if (among)
      {
        v6 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 24) = v6;
        if (v6 >= (int)v2)
        {
          switch(among)
          {
            case 1:
              v31 = &s_27_10;
              goto LABEL_93;
            case 2:
              v31 = &s_28_7;
              goto LABEL_93;
            case 3:
              v31 = &s_29_5;
              goto LABEL_93;
            case 4:
              v31 = &s_30_13;
              goto LABEL_93;
            case 5:
              v31 = &s_31_5;
              goto LABEL_93;
            case 6:
              v31 = &s_32_11;
LABEL_93:
              v55 = a1;
              v56 = 3;
              break;
            case 7:
              v31 = &s_33_5;
              goto LABEL_100;
            case 8:
              v31 = &s_34_18;
              goto LABEL_98;
            case 9:
              v31 = &s_35_5;
              goto LABEL_100;
            case 10:
              v31 = &s_36_11;
LABEL_98:
              v55 = a1;
              v56 = 4;
              break;
            case 11:
              v31 = &s_37_6;
LABEL_100:
              v55 = a1;
              v56 = 5;
              break;
            default:
              return 1;
          }
          result = slice_from_s(v55, v56, v31);
          if ((result & 0x80000000) != 0)
            return result;
          return 1;
        }
      }
    }
  }
  *(_DWORD *)(a1 + 8) = v3;
  v7 = skip_utf8(*(_QWORD *)a1, v3, 0, v2, 3);
  if (v7 >= 0)
    v8 = v7;
  else
    v8 = v3;
  *(_DWORD *)(a1 + 8) = v8;
  if (v7 < 0)
    return 1;
  *(_DWORD *)(a1 + 8) = v3;
  **(_BYTE **)(a1 + 48) = 0;
  v10 = *(unsigned int *)(a1 + 8);
  v9 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 20) = v10;
  if ((_DWORD)v10 != v9)
  {
    if (*(_BYTE *)(*(_QWORD *)a1 + (int)v10) == 39)
    {
      *(_DWORD *)(a1 + 8) = v10 + 1;
      *(_DWORD *)(a1 + 24) = v10 + 1;
      result = slice_del(a1);
      if ((result & 0x80000000) != 0)
        return result;
      v9 = *(_DWORD *)(a1 + 12);
    }
    *(_DWORD *)(a1 + 8) = v10;
    *(_DWORD *)(a1 + 20) = v10;
    if ((_DWORD)v10 != v9 && *(_BYTE *)(*(_QWORD *)a1 + (int)v10) == 121)
    {
      *(_DWORD *)(a1 + 8) = v10 + 1;
      *(_DWORD *)(a1 + 24) = v10 + 1;
      result = slice_from_s(a1, 1, &s_0_150);
      if ((result & 0x80000000) != 0)
        return result;
      **(_BYTE **)(a1 + 48) = 1;
    }
  }
  *(_DWORD *)(a1 + 8) = v10;
  v12 = v10;
  while (1)
  {
    while (1)
    {
      if (in_grouping_U(a1, (uint64_t)&g_v_14, 97, 121, 0))
      {
        v13 = *(_QWORD *)a1;
        v14 = *(unsigned int *)(a1 + 12);
        break;
      }
      v15 = *(unsigned int *)(a1 + 8);
      v14 = *(unsigned int *)(a1 + 12);
      *(_DWORD *)(a1 + 20) = v15;
      v13 = *(_QWORD *)a1;
      if ((_DWORD)v15 == (_DWORD)v14)
      {
        v14 = v15;
        break;
      }
      if (*(_BYTE *)(v13 + (int)v15) != 121)
        break;
      *(_DWORD *)(a1 + 24) = v15 + 1;
      *(_DWORD *)(a1 + 8) = v12;
      result = slice_from_s(a1, 1, &s_1_297);
      if ((result & 0x80000000) != 0)
        return result;
      **(_BYTE **)(a1 + 48) = 1;
      v12 = *(unsigned int *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 8) = v12;
    v16 = skip_utf8(v13, v12, 0, v14, 1);
    if ((v16 & 0x80000000) != 0)
      break;
    v12 = v16;
    *(_DWORD *)(a1 + 8) = v16;
  }
  *(_DWORD *)(a1 + 8) = v10;
  v17 = *(_DWORD **)(a1 + 40);
  *v17 = *(_DWORD *)(a1 + 12);
  v17[1] = *(_DWORD *)(a1 + 12);
  v18 = *(int *)(a1 + 8);
  if ((int)v18 + 4 < *(_DWORD *)(a1 + 12))
  {
    v19 = *(_BYTE *)(*(_QWORD *)a1 + v18 + 4);
    if ((v19 & 0xE0) == 0x60 && ((0x244000u >> v19) & 1) != 0 && find_among(a1, (uint64_t)&a_0_21, 3))
    {
      v20 = *(_DWORD *)(a1 + 8);
      goto LABEL_36;
    }
  }
  *(_DWORD *)(a1 + 8) = v18;
  v21 = out_grouping_U(a1, (uint64_t)&g_v_14, 97, 121, 1);
  if ((v21 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) += v21;
    v22 = in_grouping_U(a1, (uint64_t)&g_v_14, 97, 121, 1);
    if ((v22 & 0x80000000) == 0)
    {
      v20 = *(_DWORD *)(a1 + 8) + v22;
      *(_DWORD *)(a1 + 8) = v20;
LABEL_36:
      **(_DWORD **)(a1 + 40) = v20;
      v23 = out_grouping_U(a1, (uint64_t)&g_v_14, 97, 121, 1);
      if ((v23 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) += v23;
        v24 = in_grouping_U(a1, (uint64_t)&g_v_14, 97, 121, 1);
        if ((v24 & 0x80000000) == 0)
          *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) = *(_DWORD *)(a1 + 8) + v24;
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v18;
  v25 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v25;
  *(_DWORD *)(a1 + 24) = v25;
  if (v25 <= (int)v18 || (v26 = *(unsigned __int8 *)(v25 + *(_QWORD *)a1 - 1), v26 != 115) && v26 != 39)
  {
LABEL_46:
    *(_DWORD *)(a1 + 24) = v25;
    if (v25 > *(_DWORD *)(a1 + 16))
    {
      v27 = *(unsigned __int8 *)(*(_QWORD *)a1 + v25 - 1);
      if (v27 == 115 || v27 == 100)
      {
        among_b = find_among_b(a1, (uint64_t)&a_2_20, 6);
        if (among_b)
        {
          v29 = *(unsigned int *)(a1 + 8);
          *(_DWORD *)(a1 + 20) = v29;
          switch(among_b)
          {
            case 3:
              v32 = skip_utf8(*(_QWORD *)a1, v29, *(unsigned int *)(a1 + 16), 0, -1);
              if ((v32 & 0x80000000) == 0)
              {
                *(_DWORD *)(a1 + 8) = v32;
                v33 = out_grouping_b_U(a1, (uint64_t)&g_v_14, 97, 121, 1);
                if ((v33 & 0x80000000) == 0)
                {
                  *(_DWORD *)(a1 + 8) -= v33;
                  result = slice_del(a1);
                  if ((result & 0x80000000) != 0)
                    return result;
                }
              }
              break;
            case 2:
              v34 = *(_DWORD *)(a1 + 12);
              v35 = skip_utf8(*(_QWORD *)a1, v29, *(unsigned int *)(a1 + 16), v34, -2);
              if ((v35 & 0x80000000) == 0)
              {
                *(_DWORD *)(a1 + 8) = v35;
                v30 = &s_3_104;
                v36 = a1;
                v37 = 1;
                goto LABEL_64;
              }
              *(_DWORD *)(a1 + 8) = v29 - v34 + *(_DWORD *)(a1 + 12);
              v30 = &s_4_105;
LABEL_63:
              v36 = a1;
              v37 = 2;
LABEL_64:
              result = slice_from_s(v36, v37, v30);
              if ((result & 0x80000000) != 0)
                return result;
              break;
            case 1:
              v30 = &s_2_59;
              goto LABEL_63;
          }
        }
      }
    }
    v38 = *(_DWORD *)(a1 + 16);
    v39 = *(int *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v39;
    *(_DWORD *)(a1 + 24) = v39;
    if ((int)v39 - 5 > v38)
    {
      v40 = *(unsigned __int8 *)(v39 + *(_QWORD *)a1 - 1);
      if (v40 == 103 || v40 == 100)
      {
        v41 = find_among_b(a1, (uint64_t)&a_9_6, 8);
        v38 = *(_DWORD *)(a1 + 16);
        if (v41)
        {
          v42 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 20) = v42;
          if (v42 <= v38)
          {
LABEL_117:
            *(_DWORD *)(a1 + 8) = v38;
            if (**(_BYTE **)(a1 + 48))
            {
              do
              {
                v60 = *(unsigned int *)(a1 + 8);
                while (1)
                {
                  *(_DWORD *)(a1 + 20) = v60;
                  v61 = *(unsigned int *)(a1 + 12);
                  v62 = *(_QWORD *)a1;
                  if ((_DWORD)v60 != (_DWORD)v61 && *(_BYTE *)(v62 + (int)v60) == 89)
                    break;
                  v63 = skip_utf8(v62, v60, 0, v61, 1);
                  if ((v63 & 0x80000000) != 0)
                    goto LABEL_125;
                  v60 = v63;
                  *(_DWORD *)(a1 + 8) = v63;
                }
                *(_DWORD *)(a1 + 24) = v60 + 1;
                *(_DWORD *)(a1 + 8) = v60;
                result = slice_from_s(a1, 1, &s_38_7);
              }
              while ((result & 0x80000000) == 0);
              return result;
            }
LABEL_125:
            *(_DWORD *)(a1 + 8) = v38;
            return 1;
          }
        }
      }
    }
    v43 = *(int *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v43;
    *(_DWORD *)(a1 + 24) = v43;
    v44 = v43 - 1;
    if ((int)v44 > v38)
    {
      v45 = *(_BYTE *)(*(_QWORD *)a1 + v44);
      if ((v45 & 0xE0) == 0x60 && ((0x2000090u >> v45) & 1) != 0)
      {
        v46 = find_among_b(a1, (uint64_t)&a_4_15, 6);
        if (v46)
        {
          v47 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 20) = v47;
          if (v46 != 2)
          {
            if (v46 == 1 && **(_DWORD **)(a1 + 40) <= v47)
            {
              result = slice_from_s(a1, 2, &s_5_59);
              if ((result & 0x80000000) != 0)
                return result;
            }
            goto LABEL_111;
          }
          v48 = *(_DWORD *)(a1 + 12);
          if ((out_grouping_b_U(a1, (uint64_t)&g_v_14, 97, 121, 1) & 0x80000000) == 0)
          {
            *(_DWORD *)(a1 + 8) = v47 - v48 + *(_DWORD *)(a1 + 12);
            result = slice_del(a1);
            if ((result & 0x80000000) != 0)
              return result;
            v49 = *(_DWORD *)(a1 + 12);
            v50 = *(int *)(a1 + 8);
            if ((int)v50 - 1 <= *(_DWORD *)(a1 + 16)
              || (v51 = *(_BYTE *)(*(_QWORD *)a1 + v50 - 1), (v51 & 0xE0) != 0x60)
              || ((0x41570D4u >> v51) & 1) == 0)
            {
LABEL_84:
              if ((_DWORD)v50 == **(_DWORD **)(a1 + 40) && r_shortv_0((_DWORD *)a1))
              {
                v52 = v50 - v49;
                v53 = *(_DWORD *)(a1 + 12);
                v54 = v53 + v50 - v49;
                *(_DWORD *)(a1 + 8) = v54;
                result = insert_s(a1, v53 + v52, v53 + v52, 1, &s_7_95);
                *(_DWORD *)(a1 + 8) = v54;
                if ((result & 0x80000000) != 0)
                  return result;
              }
              goto LABEL_111;
            }
            v57 = find_among_b(a1, (uint64_t)&a_3_17, 13);
            if (v57)
            {
              v58 = v50 - v49;
              v49 = *(_DWORD *)(a1 + 12);
              LODWORD(v50) = v49 + v58;
              *(_DWORD *)(a1 + 8) = v49 + v58;
              if (v57 != 3)
              {
                if (v57 == 2)
                {
                  *(_DWORD *)(a1 + 24) = v50;
                  v59 = skip_utf8(*(_QWORD *)a1, (v49 + v58), *(unsigned int *)(a1 + 16), 0, -1);
                  if ((v59 & 0x80000000) == 0)
                  {
                    *(_DWORD *)(a1 + 8) = v59;
                    *(_DWORD *)(a1 + 20) = v59;
                    result = slice_del(a1);
                    if ((result & 0x80000000) != 0)
                      return result;
                  }
                }
                else if (v57 == 1)
                {
                  result = insert_s(a1, v49 + v58, v49 + v58, 1, &s_6_134);
                  *(_DWORD *)(a1 + 8) = v50;
                  if ((result & 0x80000000) != 0)
                    return result;
                }
                goto LABEL_111;
              }
              goto LABEL_84;
            }
          }
        }
      }
    }
LABEL_111:
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
    result = r_Step_1c(a1);
    if ((result & 0x80000000) != 0)
      return result;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
    result = r_Step_2(a1);
    if ((result & 0x80000000) != 0)
      return result;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
    result = r_Step_3_0(a1);
    if ((result & 0x80000000) != 0)
      return result;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
    result = r_Step_4_0(a1);
    if ((result & 0x80000000) != 0)
      return result;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
    result = r_Step_5(a1);
    if ((result & 0x80000000) != 0)
      return result;
    v38 = *(_DWORD *)(a1 + 16);
    goto LABEL_117;
  }
  if (!find_among_b(a1, (uint64_t)&a_1_20, 3))
  {
    v25 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v25;
    goto LABEL_46;
  }
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
  result = slice_del(a1);
  if ((result & 0x80000000) == 0)
  {
    v25 = *(_DWORD *)(a1 + 8);
    goto LABEL_46;
  }
  return result;
}

uint64_t r_Step_1c(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t result;
  int v6;

  v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 <= *(_DWORD *)(a1 + 16))
    return 0;
  v3 = v1 - 1;
  if ((*(unsigned __int8 *)(*(_QWORD *)a1 + v3) | 0x20) != 0x79)
    return 0;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 20) = v3;
  v4 = out_grouping_b_U(a1, (uint64_t)&g_v_14, 97, 121, 0);
  result = 0;
  if (v4)
    return result;
  if (*(_DWORD *)(a1 + 8) <= *(_DWORD *)(a1 + 16))
    return 0;
  v6 = slice_from_s(a1, 1, &s_8_110);
  if (v6 >= 0)
    return 1;
  else
    return v6 & (v6 >> 31);
}

uint64_t r_Step_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t result;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  v2 = v1 - 1;
  if ((int)v2 <= *(_DWORD *)(a1 + 16))
    return 0;
  v4 = *(_BYTE *)(*(_QWORD *)a1 + v2);
  if ((v4 & 0xE0) != 0x60 || ((0xC7200u >> v4) & 1) == 0)
    return 0;
  result = find_among_b(a1, (uint64_t)&a_5_13, 24);
  if (!(_DWORD)result)
    return result;
  v6 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v6;
  if (**(_DWORD **)(a1 + 40) > (int)v6)
    return 0;
  switch((int)result)
  {
    case 1:
      v7 = &s_9_23;
      goto LABEL_30;
    case 2:
      v7 = &s_10_42;
      goto LABEL_30;
    case 3:
      v7 = &s_11_52;
      goto LABEL_30;
    case 4:
      v7 = &s_12_18;
      goto LABEL_30;
    case 5:
      v7 = &s_13_44;
      goto LABEL_28;
    case 6:
      v7 = &s_14_20;
      goto LABEL_28;
    case 7:
      v7 = &s_15_13;
      goto LABEL_28;
    case 8:
      v7 = &s_16_13;
      goto LABEL_24;
    case 9:
      v7 = &s_17_18;
      goto LABEL_28;
    case 10:
      v7 = &s_18_11;
      goto LABEL_28;
    case 11:
      v7 = &s_19_9;
      goto LABEL_28;
    case 12:
      v7 = &s_20_32;
LABEL_28:
      v10 = a1;
      v11 = 3;
      goto LABEL_31;
    case 13:
      if ((int)v6 <= *(_DWORD *)(a1 + 16))
        return 0;
      v8 = v6 - 1;
      if (*(_BYTE *)(*(_QWORD *)a1 + v8) != 108)
        return 0;
      *(_DWORD *)(a1 + 8) = v8;
      v7 = &s_21_37;
LABEL_24:
      v10 = a1;
      v11 = 2;
      goto LABEL_31;
    case 14:
      v7 = &s_22_19;
LABEL_30:
      v10 = a1;
      v11 = 4;
LABEL_31:
      result = slice_from_s(v10, v11, v7);
      if ((result & 0x80000000) == 0)
        goto LABEL_32;
      return result;
    case 15:
      v9 = in_grouping_b_U(a1, (uint64_t)&g_valid_LI, 99, 116, 0);
      result = 0;
      if (v9)
        return result;
      result = slice_del(a1);
      if ((result & 0x80000000) != 0)
        return result;
      goto LABEL_32;
    default:
LABEL_32:
      result = 1;
      break;
  }
  return result;
}

uint64_t r_Step_3_0(uint64_t a1)
{
  uint64_t v1;
  char v3;
  uint64_t result;
  int v5;
  _DWORD *v6;
  void *v7;
  uint64_t v8;
  int v9;

  v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 - 2 <= *(_DWORD *)(a1 + 16))
    return 0;
  v3 = *(_BYTE *)(v1 + *(_QWORD *)a1 - 1);
  if ((v3 & 0xE0) != 0x60 || ((0x81220u >> v3) & 1) == 0)
    return 0;
  result = find_among_b(a1, (uint64_t)&a_6_10, 9);
  if (!(_DWORD)result)
    return result;
  v5 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v5;
  v6 = *(_DWORD **)(a1 + 40);
  if (*v6 > v5)
    return 0;
  switch((int)result)
  {
    case 1:
      v7 = &s_23_15;
      v8 = a1;
      v9 = 4;
      goto LABEL_14;
    case 2:
      v7 = &s_24_10;
      v8 = a1;
      v9 = 3;
      goto LABEL_14;
    case 3:
      v7 = &s_25_8;
      goto LABEL_13;
    case 4:
      v7 = &s_26_6;
LABEL_13:
      v8 = a1;
      v9 = 2;
LABEL_14:
      result = slice_from_s(v8, v9, v7);
      if ((result & 0x80000000) != 0)
        return result;
      goto LABEL_18;
    case 5:
      goto LABEL_17;
    case 6:
      if (v6[1] > v5)
        return 0;
LABEL_17:
      result = slice_del(a1);
      if ((result & 0x80000000) == 0)
        goto LABEL_18;
      return result;
    default:
LABEL_18:
      result = 1;
      break;
  }
  return result;
}

uint64_t r_Step_4_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  v2 = v1 - 1;
  if ((int)v2 <= *(_DWORD *)(a1 + 16))
    return 0;
  v4 = *(_BYTE *)(*(_QWORD *)a1 + v2);
  if ((v4 & 0xE0) != 0x60 || ((0x1C7228u >> v4) & 1) == 0)
    return 0;
  result = find_among_b(a1, (uint64_t)&a_7_10, 18);
  if (!(_DWORD)result)
    return result;
  v6 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v6;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) > (int)v6)
    return 0;
  if ((_DWORD)result == 2)
  {
    if ((int)v6 <= *(_DWORD *)(a1 + 16))
      return 0;
    v7 = v6 - 1;
    if (*(unsigned __int8 *)(*(_QWORD *)a1 + v7) - 115 > 1)
      return 0;
    *(_DWORD *)(a1 + 8) = v7;
  }
  else if ((_DWORD)result != 1)
  {
    return 1;
  }
  result = slice_del(a1);
  if ((result & 0x80000000) == 0)
    return 1;
  return result;
}

uint64_t r_Step_5(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t result;
  uint64_t v5;
  _DWORD *v6;
  int v7;

  v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  if ((int)v1 <= *(_DWORD *)(a1 + 16))
    return 0;
  v3 = *(unsigned __int8 *)(v1 + *(_QWORD *)a1 - 1);
  if (v3 != 108 && v3 != 101)
    return 0;
  result = find_among_b(a1, (uint64_t)&a_8_8, 2);
  if (!(_DWORD)result)
    return result;
  v5 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v5;
  if ((_DWORD)result == 2)
  {
    if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) > (int)v5
      || (int)v5 <= *(_DWORD *)(a1 + 16)
      || *(_BYTE *)(*(_QWORD *)a1 + v5 - 1) != 108)
    {
      return 0;
    }
    *(_DWORD *)(a1 + 8) = v5 - 1;
LABEL_15:
    result = slice_del(a1);
    if ((result & 0x80000000) != 0)
      return result;
    return 1;
  }
  if ((_DWORD)result != 1)
    return 1;
  v6 = *(_DWORD **)(a1 + 40);
  if (v6[1] <= (int)v5)
    goto LABEL_15;
  if (*v6 <= (int)v5)
  {
    v7 = *(_DWORD *)(a1 + 12);
    if (!r_shortv_0((_DWORD *)a1))
    {
      *(_DWORD *)(a1 + 8) = v5 - v7 + *(_DWORD *)(a1 + 12);
      goto LABEL_15;
    }
  }
  return 0;
}

_QWORD *english_UTF_8_create_env()
{
  return SN_create_env(0, 2, 1);
}

void english_UTF_8_close_env(uint64_t a1)
{
  SN_close_env(a1, 0);
}

BOOL r_shortv_0(_DWORD *a1)
{
  int v2;
  int v3;
  int v4;
  _BOOL8 result;
  int v6;

  v3 = a1[2];
  v2 = a1[3];
  if (!out_grouping_b_U((uint64_t)a1, (uint64_t)&g_v_WXY_0, 89, 121, 0)
    && !in_grouping_b_U((uint64_t)a1, (uint64_t)&g_v_14, 97, 121, 0)
    && !out_grouping_b_U((uint64_t)a1, (uint64_t)&g_v_14, 97, 121, 0))
  {
    return 1;
  }
  a1[2] = v3 - v2 + a1[3];
  v4 = out_grouping_b_U((uint64_t)a1, (uint64_t)&g_v_14, 97, 121, 0);
  result = 0;
  if (!v4)
  {
    v6 = in_grouping_b_U((uint64_t)a1, (uint64_t)&g_v_14, 97, 121, 0);
    result = 0;
    if (!v6)
      return a1[2] <= a1[4];
  }
  return result;
}

uint64_t catalan_UTF_8_stem(uint64_t a1)
{
  _DWORD *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t result;
  int v14;
  int among_b;
  int v16;
  int v17;
  void *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int v33;
  int among;
  uint64_t v35;
  void *v36;

  v2 = *(_DWORD **)(a1 + 40);
  *v2 = *(_DWORD *)(a1 + 12);
  v2[1] = *(_DWORD *)(a1 + 12);
  v3 = *(_DWORD *)(a1 + 8);
  v4 = out_grouping_U(a1, (uint64_t)&g_v_15, 97, 252, 1);
  if ((v4 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) += v4;
    v5 = in_grouping_U(a1, (uint64_t)&g_v_15, 97, 252, 1);
    if ((v5 & 0x80000000) == 0)
    {
      v6 = *(_DWORD *)(a1 + 8) + v5;
      *(_DWORD *)(a1 + 8) = v6;
      **(_DWORD **)(a1 + 40) = v6;
      v7 = out_grouping_U(a1, (uint64_t)&g_v_15, 97, 252, 1);
      if ((v7 & 0x80000000) == 0)
      {
        *(_DWORD *)(a1 + 8) += v7;
        v8 = in_grouping_U(a1, (uint64_t)&g_v_15, 97, 252, 1);
        if ((v8 & 0x80000000) == 0)
          *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) = *(_DWORD *)(a1 + 8) + v8;
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v3;
  v9 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 24) = v9;
  v10 = v9 - 1;
  if ((int)v10 > v3)
  {
    v11 = *(_BYTE *)(*(_QWORD *)a1 + v10);
    if ((v11 & 0xE0) == 0x60 && ((0x18F222u >> v11) & 1) != 0)
    {
      if (find_among_b(a1, (uint64_t)&a_1_21, 39))
      {
        v12 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 20) = v12;
        if (**(_DWORD **)(a1 + 40) <= v12)
        {
          result = slice_del(a1);
          if ((result & 0x80000000) != 0)
            return result;
        }
      }
    }
  }
  v14 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v14;
  *(_DWORD *)(a1 + 24) = v14;
  among_b = find_among_b(a1, (uint64_t)&a_2_21, 200);
  if (among_b)
  {
    v16 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 20) = v16;
    switch(among_b)
    {
      case 1:
        v17 = **(_DWORD **)(a1 + 40);
        goto LABEL_16;
      case 2:
        v17 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4);
LABEL_16:
        if (v17 <= v16)
          goto LABEL_29;
        break;
      case 3:
        if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) > v16)
          break;
        v18 = &s_6_135;
        v19 = a1;
        v20 = 3;
        goto LABEL_32;
      case 4:
        if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) > v16)
          break;
        v18 = &s_7_96;
        v19 = a1;
        v20 = 2;
        goto LABEL_32;
      case 5:
        if (**(_DWORD **)(a1 + 40) > v16)
          break;
        v18 = &s_8_111;
        v19 = a1;
        v20 = 1;
LABEL_32:
        result = slice_from_s(v19, v20, v18);
        if ((result & 0x80000000) == 0)
          goto LABEL_33;
        return result;
      default:
        goto LABEL_33;
    }
  }
  v21 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v21;
  *(_DWORD *)(a1 + 24) = v21;
  v22 = find_among_b(a1, (uint64_t)&a_3_18, 283);
  if (v22)
  {
    v23 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 20) = v23;
    if (v22 == 2)
    {
      v24 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4);
LABEL_28:
      if (v24 <= v23)
      {
LABEL_29:
        result = slice_del(a1);
        if ((result & 0x80000000) != 0)
          return result;
      }
      goto LABEL_33;
    }
    if (v22 == 1)
    {
      v24 = **(_DWORD **)(a1 + 40);
      goto LABEL_28;
    }
  }
LABEL_33:
  v25 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v25;
  *(_DWORD *)(a1 + 24) = v25;
  v26 = find_among_b(a1, (uint64_t)&a_4_16, 22);
  if (!v26)
    goto LABEL_41;
  v27 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 20) = v27;
  if (v26 != 2)
  {
    if (v26 == 1 && **(_DWORD **)(a1 + 40) <= v27)
    {
      result = slice_del(a1);
      if ((result & 0x80000000) != 0)
        return result;
    }
LABEL_41:
    v28 = *(unsigned int *)(a1 + 12);
    v29 = *(unsigned int *)(a1 + 16);
    *(_DWORD *)(a1 + 8) = v29;
    v30 = v29;
    while (1)
    {
      *(_DWORD *)(a1 + 20) = v30;
      v31 = (int)v30 + 1;
      if ((int)v31 < (int)v28
        && (v32 = *(_BYTE *)(*(_QWORD *)a1 + v31), (v32 & 0xE0) == 0xA0)
        && ((0x148CB303u >> v32) & 1) != 0)
      {
        among = find_among(a1, (uint64_t)&a_0_22, 13);
        if (!among)
          goto LABEL_60;
        v30 = *(unsigned int *)(a1 + 8);
        *(_DWORD *)(a1 + 24) = v30;
        switch(among)
        {
          case 1:
            v35 = a1;
            v36 = &s_0_151;
            break;
          case 2:
            v35 = a1;
            v36 = &s_1_298;
            break;
          case 3:
            v35 = a1;
            v36 = &s_2_200;
            break;
          case 4:
            v35 = a1;
            v36 = &s_3_283;
            break;
          case 5:
            v35 = a1;
            v36 = &s_4_106;
            break;
          case 6:
            v35 = a1;
            v36 = &s_5_60;
            break;
          case 7:
            v28 = *(unsigned int *)(a1 + 12);
            goto LABEL_46;
          default:
            goto LABEL_48;
        }
        result = slice_from_s(v35, 1, v36);
        if ((result & 0x80000000) != 0)
          return result;
      }
      else
      {
        *(_DWORD *)(a1 + 24) = v30;
LABEL_46:
        v33 = skip_utf8(*(_QWORD *)a1, v30, 0, v28, 1);
        if (v33 < 0)
        {
LABEL_60:
          *(_DWORD *)(a1 + 8) = v29;
          return 1;
        }
        *(_DWORD *)(a1 + 8) = v33;
      }
LABEL_48:
      v30 = *(unsigned int *)(a1 + 8);
      v28 = *(unsigned int *)(a1 + 12);
    }
  }
  if (**(_DWORD **)(a1 + 40) > v27)
    goto LABEL_41;
  result = slice_from_s(a1, 2, &s_9_24);
  if ((result & 0x80000000) == 0)
    goto LABEL_41;
  return result;
}

_QWORD *catalan_UTF_8_create_env()
{
  return SN_create_env(0, 2, 0);
}

void catalan_UTF_8_close_env(uint64_t a1)
{
  SN_close_env(a1, 0);
}

uint64_t lithuanian_UTF_8_stem(uint64_t a1)
{
  int v2;
  char *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  char v10;
  int among_b;
  void *v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  **(_DWORD **)(a1 + 40) = *(_DWORD *)(a1 + 12);
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 != *(_DWORD *)(a1 + 12))
  {
    v3 = *(char **)a1;
    if (*(_BYTE *)(*(_QWORD *)a1 + v2) == 97)
    {
      v4 = len_utf8(v3);
      v5 = v2;
      if (v4 >= 7)
      {
        v6 = skip_utf8(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), 0, *(unsigned int *)(a1 + 12), 1);
        if (v6 >= 0)
          v5 = v6;
        else
          v5 = v2;
      }
      *(_DWORD *)(a1 + 8) = v5;
    }
  }
  v7 = out_grouping_U(a1, (uint64_t)&g_v_16, 97, 371, 1);
  if ((v7 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) += v7;
    v8 = in_grouping_U(a1, (uint64_t)&g_v_16, 97, 371, 1);
    if ((v8 & 0x80000000) == 0)
      **(_DWORD **)(a1 + 40) = *(_DWORD *)(a1 + 8) + v8;
  }
  *(_DWORD *)(a1 + 16) = v2;
  v9 = *(int *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 24) = v9;
  if ((int)v9 - 3 > v2)
  {
    v10 = *(_BYTE *)(v9 + *(_QWORD *)a1 - 1);
    if ((v10 & 0xE0) == 0x60 && ((0x280020u >> v10) & 1) != 0)
    {
      among_b = find_among_b(a1, (uint64_t)&a_2_22, 11);
      if (among_b)
      {
        *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
        switch(among_b)
        {
          case 1:
            v12 = &s_0_152;
            goto LABEL_18;
          case 2:
            v12 = &s_1_299;
LABEL_18:
            v13 = a1;
            v14 = 5;
            goto LABEL_27;
          case 3:
            v12 = &s_2_201;
            v13 = a1;
            v14 = 7;
            goto LABEL_27;
          case 4:
            v12 = &s_3_284;
            goto LABEL_22;
          case 5:
            v12 = &s_4_107;
LABEL_22:
            v13 = a1;
            v14 = 4;
            goto LABEL_27;
          case 6:
            v12 = &s_5_61;
            goto LABEL_26;
          case 7:
            v12 = &s_6_136;
            goto LABEL_26;
          case 8:
            v12 = &s_7_97;
LABEL_26:
            v13 = a1;
            v14 = 6;
LABEL_27:
            result = slice_from_s(v13, v14, v12);
            if ((result & 0x80000000) == 0)
              break;
            return result;
          default:
            break;
        }
      }
    }
  }
  v16 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v16;
  v17 = **(_DWORD **)(a1 + 40);
  if (v16 >= v17)
  {
    v18 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = v17;
    *(_DWORD *)(a1 + 24) = v16;
    if (find_among_b(a1, (uint64_t)&a_0_23, 204))
    {
      v19 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 16) = v18;
      *(_DWORD *)(a1 + 20) = v19;
      if (**(_DWORD **)(a1 + 40) <= v19)
      {
        result = slice_del(a1);
        if ((result & 0x80000000) != 0)
          return result;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 16) = v18;
    }
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
  result = r_fix_chdz(a1);
  if ((result & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
    while (1)
    {
      v20 = *(_DWORD *)(a1 + 8);
      v21 = **(_DWORD **)(a1 + 40);
      if (v20 < v21)
        break;
      v22 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 16) = v21;
      *(_DWORD *)(a1 + 24) = v20;
      if (!find_among_b(a1, (uint64_t)&a_1_22, 62))
      {
        *(_DWORD *)(a1 + 16) = v22;
        break;
      }
      v23 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 16) = v22;
      *(_DWORD *)(a1 + 20) = v23;
      result = slice_del(a1);
      if ((result & 0x80000000) != 0)
        return result;
    }
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 12);
    result = r_fix_chdz(a1);
    if ((result & 0x80000000) == 0)
    {
      v24 = *(_DWORD *)(a1 + 16);
      v25 = *(int *)(a1 + 12);
      *(_DWORD *)(a1 + 8) = v25;
      *(_DWORD *)(a1 + 24) = v25;
      v26 = v25 - 1;
      if ((int)v26 <= v24
        || *(_BYTE *)(*(_QWORD *)a1 + v26) != 100
        || !find_among_b(a1, (uint64_t)&a_4_17, 1)
        || (*(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8),
            result = slice_from_s(a1, 1, &s_10_43),
            (result & 0x80000000) == 0))
      {
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 16);
        return 1;
      }
    }
  }
  return result;
}

uint64_t r_fix_chdz(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t result;
  void *v6;

  v1 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 24) = v1;
  v2 = v1 - 1;
  if ((int)v2 <= *(_DWORD *)(a1 + 16))
    return 0;
  v4 = *(unsigned __int8 *)(*(_QWORD *)a1 + v2);
  if (v4 != 190 && v4 != 141)
    return 0;
  result = find_among_b(a1, (uint64_t)&a_3_19, 2);
  if ((_DWORD)result)
  {
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
    if ((_DWORD)result == 2)
    {
      v6 = &s_9_25;
    }
    else
    {
      if ((_DWORD)result != 1)
        return 1;
      v6 = &s_8_112;
    }
    result = slice_from_s(a1, 1, v6);
    if ((result & 0x80000000) == 0)
      return 1;
  }
  return result;
}

_QWORD *lithuanian_UTF_8_create_env()
{
  return SN_create_env(0, 1, 0);
}

void lithuanian_UTF_8_close_env(uint64_t a1)
{
  SN_close_env(a1, 0);
}

uint64_t swedish_UTF_8_stem(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  _DWORD *v7;
  int v8;
  int v9;
  char v10;
  int among_b;
  int v12;
  int v13;
  int v14;
  int *v15;
  int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t result;
  int v23;
  uint64_t v24;
  char v25;
  int v26;
  void *v27;

  v2 = *(_DWORD *)(a1 + 8);
  **(_DWORD **)(a1 + 40) = *(_DWORD *)(a1 + 12);
  v3 = *(_DWORD *)(a1 + 8);
  v4 = skip_utf8(*(_QWORD *)a1, *(unsigned int *)(a1 + 8), 0, *(unsigned int *)(a1 + 12), 3);
  if ((v4 & 0x80000000) == 0)
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4) = v4;
    *(_DWORD *)(a1 + 8) = v3;
    if ((out_grouping_U(a1, (uint64_t)&g_v_17, 97, 246, 1) & 0x80000000) == 0)
    {
      v5 = in_grouping_U(a1, (uint64_t)&g_v_17, 97, 246, 1);
      if ((v5 & 0x80000000) == 0)
      {
        v6 = *(_DWORD *)(a1 + 8) + v5;
        *(_DWORD *)(a1 + 8) = v6;
        v7 = *(_DWORD **)(a1 + 40);
        if (v6 <= v7[1])
          v6 = v7[1];
        *v7 = v6;
      }
    }
  }
  *(_DWORD *)(a1 + 16) = v2;
  v8 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 8) = v8;
  v9 = **(_DWORD **)(a1 + 40);
  if (v8 >= v9)
  {
    *(_DWORD *)(a1 + 16) = v9;
    *(_DWORD *)(a1 + 24) = v8;
    if (v8 <= v9
      || (v10 = *(_BYTE *)(v8 + *(_QWORD *)a1 - 1), (v10 & 0xE0) != 0x60)
      || ((0x1C4032u >> v10) & 1) == 0
      || (among_b = find_among_b(a1, (uint64_t)&a_0_24, 37)) == 0)
    {
      *(_DWORD *)(a1 + 16) = v2;
      goto LABEL_16;
    }
    v12 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 16) = v2;
    *(_DWORD *)(a1 + 20) = v12;
    if (among_b == 2)
    {
      if (in_grouping_b_U(a1, (uint64_t)&g_s_ending_2, 98, 121, 0))
        goto LABEL_16;
    }
    else if (among_b != 1)
    {
      goto LABEL_16;
    }
    result = slice_del(a1);
    if ((result & 0x80000000) != 0)
      return result;
  }
LABEL_16:
  v13 = *(_DWORD *)(a1 + 12);
  v14 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 8) = v13;
  v15 = *(int **)(a1 + 40);
  v16 = *v15;
  if (v13 < *v15)
    goto LABEL_24;
  *(_DWORD *)(a1 + 16) = v16;
  v17 = v13 - 1;
  if ((int)v17 <= v16)
    goto LABEL_23;
  v18 = *(_BYTE *)(*(_QWORD *)a1 + v17);
  if ((v18 & 0xE0) != 0x60)
    goto LABEL_23;
  if (((0x104010u >> v18) & 1) == 0)
    goto LABEL_23;
  if (!find_among_b(a1, (uint64_t)&a_1_23, 7))
    goto LABEL_23;
  v19 = *(unsigned int *)(a1 + 12);
  v20 = *(unsigned int *)(a1 + 16);
  *(_DWORD *)(a1 + 8) = v19;
  *(_DWORD *)(a1 + 24) = v19;
  v21 = skip_utf8(*(_QWORD *)a1, v19, v20, 0, -1);
  if (v21 < 0
    || (*(_DWORD *)(a1 + 8) = v21, *(_DWORD *)(a1 + 20) = v21, result = slice_del(a1), (result & 0x80000000) == 0))
  {
LABEL_23:
    *(_DWORD *)(a1 + 16) = v14;
    v13 = *(_DWORD *)(a1 + 12);
    v15 = *(int **)(a1 + 40);
LABEL_24:
    *(_DWORD *)(a1 + 8) = v13;
    v23 = *v15;
    if (v13 < v23)
    {
LABEL_41:
      *(_DWORD *)(a1 + 8) = v14;
      return 1;
    }
    *(_DWORD *)(a1 + 16) = v23;
    *(_DWORD *)(a1 + 24) = v13;
    v24 = v13 - 1;
    if ((int)v24 > v23)
    {
      v25 = *(_BYTE *)(*(_QWORD *)a1 + v24);
      if ((v25 & 0xE0) == 0x60 && ((0x180080u >> v25) & 1) != 0)
      {
        v26 = find_among_b(a1, (uint64_t)&a_2_23, 5);
        if (v26)
        {
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 8);
          if (v26 == 3)
          {
            v27 = &s_1_300;
          }
          else
          {
            if (v26 != 2)
            {
              if (v26 == 1)
              {
                result = slice_del(a1);
                if ((result & 0x80000000) != 0)
                  return result;
              }
              goto LABEL_40;
            }
            v27 = &s_0_204;
          }
          result = slice_from_s(a1, 4, v27);
          if ((result & 0x80000000) != 0)
            return result;
        }
      }
    }
LABEL_40:
    *(_DWORD *)(a1 + 16) = v14;
    goto LABEL_41;
  }
  return result;
}

_QWORD *swedish_UTF_8_create_env()
{
  return SN_create_env(0, 2, 0);
}

void swedish_UTF_8_close_env(uint64_t a1)
{
  SN_close_env(a1, 0);
}

void CEM::AdaptationDatabaseController::getEmojiId()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_1B3DE1000, v0, v1, "Could not extract uint32_t from std::variant<T> column value map. getEmojiId(...);",
    v2,
    v3,
    v4,
    v5,
    v6);
  OUTLINED_FUNCTION_1();
}

void CEM::AdaptationDatabaseController::createEmojiId()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_1B3DE1000, v0, v1, "Could not extract uint32_t from std::variant<T> column value map. createEmojiId(...);",
    v2,
    v3,
    v4,
    v5,
    v6);
  OUTLINED_FUNCTION_1();
}

void CEM::AdaptationDatabaseController::getStringId()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_1B3DE1000, v0, v1, "Could not extract uint32_t from std::variant<T> column value map. getStringId(...);",
    v2,
    v3,
    v4,
    v5,
    v6);
  OUTLINED_FUNCTION_1();
}

void CEM::AdaptationDatabaseController::createStringId()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_1B3DE1000, v0, v1, "Could not extract uint32_t from std::variant<T> column value map. createStringId(...);",
    v2,
    v3,
    v4,
    v5,
    v6);
  OUTLINED_FUNCTION_1();
}

void std::__function::__func<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0,std::allocator<CEM::AdaptationDatabaseController::enumerateStringAndStringId(std::function<void ()(std::string_view,unsigned int)>)::$_0>,void ()(std::map<std::string,std::variant<std::monostate,unsigned int,double,std::string,std::vector<unsigned char>>> const&)>::operator()()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
    v2,
    v3,
    v4,
    v5,
    v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
    v2,
    v3,
    v4,
    v5,
    v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_1B3DE1000, v0, v1, "Could not extract std::string from std::variant<T> column value map. enumerateStringAndStringId(...);",
    v2,
    v3,
    v4,
    v5,
    v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0(&dword_1B3DE1000, v0, v1, "Could not extract uint32_t from std::variant<T> column value map. enumerateStringAndStringId(...);",
    v2,
    v3,
    v4,
    v5,
    v6);
  OUTLINED_FUNCTION_1();
}

void log_emoji_string_lookup_error_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  CEMEmojiLocaleDataGetLocaleIdentifier();
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_0(&dword_1B3DE1000, v0, v1, "Could not get an emoji string for document ID '%{public}d' and for locale: '%{public}@'", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2_0();
}

void log_emoji_token_creation_error_cold_1()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  CEMEmojiLocaleDataGetLocaleIdentifier();
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_0(&dword_1B3DE1000, v0, v1, "Could not create an emoji using document ID '%{public}d' and for locale: '%{public}@'", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_2_0();
}

void CEM::Statement::prepare(uint64_t a1, sqlite3 **a2, NSObject *a3)
{
  _QWORD *v4;
  const char *v5;
  int v6;
  _QWORD *v7;
  __int16 v8;
  const char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v4 = (_QWORD *)*v4;
  v5 = sqlite3_errmsg(*a2);
  v6 = 136315394;
  v7 = v4;
  v8 = 2082;
  v9 = v5;
  _os_log_error_impl(&dword_1B3DE1000, a3, OS_LOG_TYPE_ERROR, "Could not prepare SQL statement: '%s'. Error: '%{public}s'", (uint8_t *)&v6, 0x16u);
}

void CEM::Statement::bindParameters(int a1, uint64_t a2, NSObject *a3)
{
  _QWORD *v5;
  const char *v6;
  _DWORD v7[2];
  __int16 v8;
  _QWORD *v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)(a2 + 32);
  if (*(char *)(a2 + 55) < 0)
    v5 = (_QWORD *)*v5;
  v6 = sqlite3_errmsg(*(sqlite3 **)(a2 + 96));
  v7[0] = 67109634;
  v7[1] = a1;
  v8 = 2082;
  v9 = v5;
  v10 = 2082;
  v11 = v6;
  _os_log_error_impl(&dword_1B3DE1000, a3, OS_LOG_TYPE_ERROR, "Could not bind argument (%d) for query '%{public}s'. Error: '%{public}s'", (uint8_t *)v7, 0x1Cu);
}

void CEM::Statement::getValueForColumnAtIndex()
{
  __assert_rtn("getValueForColumnAtIndex", "Statement.cpp", 94, "false && \"SQLITE column type currently not supported.\"");
}

void CEM::AdaptationDatabase::AdaptationDatabase(char *a1, _QWORD *a2, os_log_t log)
{
  int v3;
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (*a1 < 0)
    a2 = (_QWORD *)*a2;
  v3 = 136315138;
  v4 = a2;
  _os_log_debug_impl(&dword_1B3DE1000, log, OS_LOG_TYPE_DEBUG, "Opened database connection successfully: '%s'", (uint8_t *)&v3, 0xCu);
}

void CEM::AdaptationDatabase::AdaptationDatabase(uint64_t a1, uint64_t a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 136446466;
  *(_QWORD *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2082;
  *(_QWORD *)(buf + 14) = a2;
  _os_log_error_impl(&dword_1B3DE1000, log, OS_LOG_TYPE_ERROR, "Could not open database: '%{public}s'; Error: '%{public}s'",
    buf,
    0x16u);
}

void CEM::AdaptationDatabase::initializeDatbaseWithSql(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0_5(&dword_1B3DE1000, a1, a3, "Database connection uninitialized; not executing raw SQL statement.",
    a5,
    a6,
    a7,
    a8,
    0);
}

void CEM::AdaptationDatabase::executeStatement(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0_5(&dword_1B3DE1000, a1, a3, "Database connection uninitialized; not executing SQL statement.",
    a5,
    a6,
    a7,
    a8,
    0);
}

void trie::MarisaTrie<unsigned short,char16_t>::build()
{
  __assert_rtn("build", "MarisaTrie.h", 61, "keys.size() == values.size()");
}

uint64_t sub_1B3E37F18()
{
  return MEMORY[0x1E0DE99D8]();
}

uint64_t sub_1B3E37F24()
{
  return MEMORY[0x1E0DE99E0]();
}

uint64_t sub_1B3E37F30()
{
  return MEMORY[0x1E0DE99E8]();
}

uint64_t sub_1B3E37F3C()
{
  return MEMORY[0x1E0DE99F0]();
}

uint64_t sub_1B3E37F48()
{
  return MEMORY[0x1E0DE99F8]();
}

uint64_t sub_1B3E37F54()
{
  return MEMORY[0x1E0DE9A08]();
}

uint64_t sub_1B3E37F60()
{
  return MEMORY[0x1E0DE9A10]();
}

uint64_t sub_1B3E37F6C()
{
  return MEMORY[0x1E0DE9A18]();
}

uint64_t sub_1B3E37F78()
{
  return MEMORY[0x1E0DE9A20]();
}

uint64_t sub_1B3E37F84()
{
  return MEMORY[0x1E0DE9A28]();
}

uint64_t sub_1B3E37F90()
{
  return MEMORY[0x1E0DE9A30]();
}

uint64_t sub_1B3E37F9C()
{
  return MEMORY[0x1E0DE9A58]();
}

uint64_t sub_1B3E37FA8()
{
  return MEMORY[0x1E0DE9A88]();
}

uint64_t sub_1B3E37FB4()
{
  return MEMORY[0x1E0DE9A98]();
}

uint64_t sub_1B3E37FC0()
{
  return MEMORY[0x1E0CAE070]();
}

uint64_t sub_1B3E37FCC()
{
  return MEMORY[0x1E0CAE0A8]();
}

uint64_t sub_1B3E37FD8()
{
  return MEMORY[0x1E0CAE0B8]();
}

uint64_t sub_1B3E37FE4()
{
  return MEMORY[0x1E0CB0228]();
}

uint64_t sub_1B3E37FF0()
{
  return MEMORY[0x1E0DEF0A0]();
}

uint64_t sub_1B3E37FFC()
{
  return MEMORY[0x1E0DEF0A8]();
}

uint64_t sub_1B3E38008()
{
  return MEMORY[0x1E0DEF0B0]();
}

uint64_t sub_1B3E38014()
{
  return MEMORY[0x1E0CB17D8]();
}

uint64_t sub_1B3E38020()
{
  return MEMORY[0x1E0CB17F8]();
}

uint64_t sub_1B3E3802C()
{
  return MEMORY[0x1E0DEA3B0]();
}

uint64_t sub_1B3E38038()
{
  return MEMORY[0x1E0CB1940]();
}

uint64_t sub_1B3E38044()
{
  return MEMORY[0x1E0CB1960]();
}

uint64_t sub_1B3E38050()
{
  return MEMORY[0x1E0CB1970]();
}

uint64_t sub_1B3E3805C()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t sub_1B3E38068()
{
  return MEMORY[0x1E0DEA658]();
}

uint64_t sub_1B3E38074()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t sub_1B3E38080()
{
  return MEMORY[0x1E0DEA7B8]();
}

uint64_t sub_1B3E3808C()
{
  return MEMORY[0x1E0DEA800]();
}

uint64_t sub_1B3E38098()
{
  return MEMORY[0x1E0CB1AD0]();
}

uint64_t sub_1B3E380A4()
{
  return MEMORY[0x1E0DEAE28]();
}

uint64_t sub_1B3E380B0()
{
  return MEMORY[0x1E0DF1FC0]();
}

uint64_t sub_1B3E380BC()
{
  return MEMORY[0x1E0DE9B10]();
}

uint64_t sub_1B3E380C8()
{
  return MEMORY[0x1E0CB2598]();
}

uint64_t sub_1B3E380D4()
{
  return MEMORY[0x1E0DEC248]();
}

uint64_t sub_1B3E380E0()
{
  return MEMORY[0x1E0DEC250]();
}

uint64_t sub_1B3E380EC()
{
  return MEMORY[0x1E0DEC2A0]();
}

uint64_t sub_1B3E380F8()
{
  return MEMORY[0x1E0DEC3E0]();
}

uint64_t sub_1B3E38104()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t sub_1B3E38110()
{
  return MEMORY[0x1E0DEC590]();
}

uint64_t sub_1B3E3811C()
{
  return MEMORY[0x1E0DECD18]();
}

uint64_t sub_1B3E38128()
{
  return MEMORY[0x1E0DECD38]();
}

uint64_t sub_1B3E38134()
{
  return MEMORY[0x1E0DECD40]();
}

uint64_t sub_1B3E38140()
{
  return MEMORY[0x1E0DECD50]();
}

uint64_t sub_1B3E3814C()
{
  return MEMORY[0x1E0DECE70]();
}

uint64_t sub_1B3E38158()
{
  return MEMORY[0x1E0DECFE0]();
}

uint64_t sub_1B3E38164()
{
  return MEMORY[0x1E0DECFF0]();
}

uint64_t sub_1B3E38170()
{
  return MEMORY[0x1E0DED110]();
}

uint64_t sub_1B3E3817C()
{
  return MEMORY[0x1E0DED120]();
}

uint64_t sub_1B3E38188()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t sub_1B3E38194()
{
  return MEMORY[0x1E0DED290]();
}

uint64_t sub_1B3E381A0()
{
  return MEMORY[0x1E0DED370]();
}

uint64_t sub_1B3E381AC()
{
  return MEMORY[0x1E0DED3C0]();
}

uint64_t sub_1B3E381B8()
{
  return MEMORY[0x1E0DED3D0]();
}

uint64_t sub_1B3E381C4()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t sub_1B3E381D0()
{
  return MEMORY[0x1E0DEDAE0]();
}

uint64_t sub_1B3E381DC()
{
  return MEMORY[0x1E0DEDAE8]();
}

uint64_t sub_1B3E381E8()
{
  return MEMORY[0x1E0DEDEF0]();
}

uint64_t sub_1B3E381F4()
{
  return MEMORY[0x1E0DEDEF8]();
}

uint64_t sub_1B3E38200()
{
  return MEMORY[0x1E0DEDF10]();
}

uint64_t sub_1B3E3820C()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t sub_1B3E38218()
{
  return MEMORY[0x1E0DEE228]();
}

uint64_t sub_1B3E38224()
{
  return MEMORY[0x1E0DEE240]();
}

uint64_t sub_1B3E38230()
{
  return MEMORY[0x1E0DEE258]();
}

uint64_t sub_1B3E3823C()
{
  return MEMORY[0x1E0DEE270]();
}

uint64_t sub_1B3E38248()
{
  return MEMORY[0x1E0DEE710]();
}

uint64_t sub_1B3E38254()
{
  return MEMORY[0x1E0DEE8E0]();
}

uint64_t sub_1B3E38260()
{
  return MEMORY[0x1E0DEE8E8]();
}

uint64_t BiomeLibrary()
{
  return MEMORY[0x1E0D01E18]();
}

unsigned __int8 *__cdecl CC_SHA224(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80348](data, *(_QWORD *)&len, md);
}

uint64_t CEMCopyEmojiTokens()
{
  return MEMORY[0x1E0D15CD8]();
}

uint64_t CEMCreateEmojiCharacterSet()
{
  return MEMORY[0x1E0D15CE0]();
}

uint64_t CEMCreateEmojiLocaleData()
{
  return MEMORY[0x1E0D15CE8]();
}

uint64_t CEMEMFSearchEngineCreateBundleForLocaleIdentifier()
{
  return MEMORY[0x1E0D15CF8]();
}

uint64_t CEMEMFSearchEngineIsLocaleSupported()
{
  return MEMORY[0x1E0D15D00]();
}

uint64_t CEMEmojiLocaleDataCopyCommonEmojiTokens()
{
  return MEMORY[0x1E0D15D08]();
}

uint64_t CEMEmojiLocaleDataCreateEmojiTokensForString()
{
  return MEMORY[0x1E0D15D10]();
}

uint64_t CEMEmojiLocaleDataEnumerateSearchResultsInStringWithBlock()
{
  return MEMORY[0x1E0D15D18]();
}

uint64_t CEMEmojiLocaleDataGetLocaleIdentifier()
{
  return MEMORY[0x1E0D15D20]();
}

uint64_t CEMEmojiTokenCopyName()
{
  return MEMORY[0x1E0D15D28]();
}

uint64_t CEMEmojiTokenCopyRelatedEmoji()
{
  return MEMORY[0x1E0D15D30]();
}

uint64_t CEMEmojiTokenCreateCopyRemovingModifiers()
{
  return MEMORY[0x1E0D15D38]();
}

uint64_t CEMEmojiTokenCreatePresentationVariant()
{
  return MEMORY[0x1E0D15D40]();
}

uint64_t CEMEmojiTokenCreateWithIndex()
{
  return MEMORY[0x1E0D15D48]();
}

uint64_t CEMEmojiTokenCreateWithLongCharacter()
{
  return MEMORY[0x1E0D15D50]();
}

uint64_t CEMEmojiTokenCreateWithString()
{
  return MEMORY[0x1E0D15D58]();
}

uint64_t CEMEmojiTokenGetGender()
{
  return MEMORY[0x1E0D15D68]();
}

uint64_t CEMEmojiTokenGetIndex()
{
  return MEMORY[0x1E0D15D70]();
}

uint64_t CEMEmojiTokenGetLocaleData()
{
  return MEMORY[0x1E0D15D78]();
}

uint64_t CEMEmojiTokenGetPresentationStyle()
{
  return MEMORY[0x1E0D15D80]();
}

uint64_t CEMEmojiTokenGetSkinTone()
{
  return MEMORY[0x1E0D15D88]();
}

uint64_t CEMEmojiTokenGetString()
{
  return MEMORY[0x1E0D15D90]();
}

uint64_t CEMEmojiTokenIsCommon()
{
  return MEMORY[0x1E0D15D98]();
}

uint64_t CEMEmojiTokenSupportsPresentationStyle()
{
  return MEMORY[0x1E0D15DA0]();
}

uint64_t CEMEnumerateEmojiTokensInStringWithBlock()
{
  return MEMORY[0x1E0D15DA8]();
}

uint64_t CEMStringIsSingleEmoji()
{
  return MEMORY[0x1E0D15DC8]();
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

CFArrayRef CFBundleCopyBundleLocalizations(CFBundleRef bundle)
{
  return (CFArrayRef)MEMORY[0x1E0C97FF8](bundle);
}

CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1E0C98000](bundle);
}

CFArrayRef CFBundleCopyLocalizationsForPreferences(CFArrayRef locArray, CFArrayRef prefArray)
{
  return (CFArrayRef)MEMORY[0x1E0C98040](locArray, prefArray);
}

CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName)
{
  return (CFURLRef)MEMORY[0x1E0C98080](bundle, resourceName, resourceType, subDirName);
}

CFURLRef CFBundleCopyResourceURLForLocalization(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName, CFStringRef localizationName)
{
  return (CFURLRef)MEMORY[0x1E0C98088](bundle, resourceName, resourceType, subDirName, localizationName);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x1E0C980D0](allocator, bundleURL);
}

uint64_t CFCopyHomeDirectoryURLForUser()
{
  return MEMORY[0x1E0C98368]();
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return (CFLocaleRef)MEMORY[0x1E0C98770]();
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x1E0C98798](allocator, localeIdentifier);
}

CFDictionaryRef CFLocaleCreateComponentsFromLocaleIdentifier(CFAllocatorRef allocator, CFLocaleIdentifier localeID)
{
  return (CFDictionaryRef)MEMORY[0x1E0C987B8](allocator, localeID);
}

CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromComponents(CFAllocatorRef allocator, CFDictionaryRef dictionary)
{
  return (CFLocaleIdentifier)MEMORY[0x1E0C987C8](allocator, dictionary);
}

CFLocaleIdentifier CFLocaleGetIdentifier(CFLocaleRef locale)
{
  return (CFLocaleIdentifier)MEMORY[0x1E0C987D8](locale);
}

CFTypeRef CFLocaleGetValue(CFLocaleRef locale, CFLocaleKey key)
{
  return (CFTypeRef)MEMORY[0x1E0C98800](locale, key);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1E0C98A30](applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
  MEMORY[0x1E0C98A80](key, value, applicationID);
}

CFPropertyListRef CFPropertyListCreateDeepCopy(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFOptionFlags mutabilityOption)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AB0](allocator, propertyList, mutabilityOption);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AE0](allocator, stream, streamLength, options, format, error);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
  MEMORY[0x1E0C98B10](stream);
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x1E0C98B48](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x1E0C98B80](stream);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
  MEMORY[0x1E0C98ED8](theString, appendedString);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1E0C98F78](alloc, theString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F90](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F98](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1E0C99030](alloc, str, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3;
  CFIndex v4;
  CFRange result;

  v3 = MEMORY[0x1E0C99050](theString, stringToFind, compareOptions);
  result.length = v4;
  result.location = v3;
  return result;
}

CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C99058](theString, stringToFind, replacementString, rangeToSearch.location, rangeToSearch.length, compareOptions);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1E0C990B0](theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
  MEMORY[0x1E0C990C0](theString, range.location, range.length, buffer);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99118](length, *(_QWORD *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
  MEMORY[0x1E0C991D0](theString, locale);
}

void CFStringNormalize(CFMutableStringRef theString, CFStringNormalizationForm theForm)
{
  MEMORY[0x1E0C991D8](theString, theForm);
}

CFStringTokenizerTokenType CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef tokenizer)
{
  return MEMORY[0x1E0C99208](tokenizer);
}

CFStringTokenizerRef CFStringTokenizerCreate(CFAllocatorRef alloc, CFStringRef string, CFRange range, CFOptionFlags options, CFLocaleRef locale)
{
  return (CFStringTokenizerRef)MEMORY[0x1E0C99220](alloc, string, range.location, range.length, options, locale);
}

CFRange CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef tokenizer)
{
  CFIndex v1;
  CFIndex v2;
  CFRange result;

  v1 = MEMORY[0x1E0C99230](tokenizer);
  result.length = v2;
  result.location = v1;
  return result;
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1E0C992D8](anURL, pathStyle);
}

CFURLRef CFURLCreateCopyAppendingPathComponent(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99380](allocator, url, pathComponent, isDirectory);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99420](allocator, filePath, pathStyle, isDirectory);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1E0C99490](url, resolveAgainstBase, buffer, maxBufLen);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAF8](retstr, t, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BB00](retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1E0C9BB10](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1E0C9BB20](context);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDF0]();
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
  MEMORY[0x1E0C9C588](c, tx, ty);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1E0C9CC60](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1E0C9CCD0](image);
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x1E0CBC530](isrc, index, options);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1E0CBC568](isrc, index, options);
}

size_t CGImageSourceGetCount(CGImageSourceRef isrc)
{
  return MEMORY[0x1E0CBC5F0](isrc);
}

size_t CGImageSourceGetPrimaryImageIndex(CGImageSourceRef isrc)
{
  return MEMORY[0x1E0CBC5F8](isrc);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D548](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CGFloat CGRectGetHeight(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D580]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5D0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CFDataRef CTFontCopyTable(CTFontRef font, CTFontTableTag table, CTFontTableOptions options)
{
  return (CFDataRef)MEMORY[0x1E0CA7A00](font, *(_QWORD *)&table, *(_QWORD *)&options);
}

CTFontRef CTFontCreateCopyWithAttributes(CTFontRef font, CGFloat size, const CGAffineTransform *matrix, CTFontDescriptorRef attributes)
{
  return (CTFontRef)MEMORY[0x1E0CA7A30](font, matrix, attributes, size);
}

uint64_t CTFontCreateEmojiFontForFont()
{
  return MEMORY[0x1E0CA7A40]();
}

CTFontRef CTFontCreateUIFontForLanguage(CTFontUIFontType uiType, CGFloat size, CFStringRef language)
{
  return (CTFontRef)MEMORY[0x1E0CA7A68](*(_QWORD *)&uiType, language, size);
}

CGFloat CTFontGetSize(CTFontRef font)
{
  CGFloat result;

  MEMORY[0x1E0CA7C50](font);
  return result;
}

CTLineRef CTLineCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTLineRef)MEMORY[0x1E0CA7E88](attrString);
}

void CTLineDraw(CTLineRef line, CGContextRef context)
{
  MEMORY[0x1E0CA7EA8](line, context);
}

CGRect CTLineGetBoundsWithOptions(CTLineRef line, CTLineBoundsOptions options)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0CA7EC0](line, options);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CFArrayRef CTLineGetGlyphRuns(CTLineRef line)
{
  return (CFArrayRef)MEMORY[0x1E0CA7ED8](line);
}

CGRect CTLineGetImageBounds(CTLineRef line, CGContextRef context)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0CA7EE0](line, context);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CFIndex CTRunGetGlyphCount(CTRunRef run)
{
  return MEMORY[0x1E0CA7FD0](run);
}

void CTRunGetGlyphs(CTRunRef run, CFRange range, CGGlyph *buffer)
{
  MEMORY[0x1E0CA7FE0](run, range.location, range.length, buffer);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1E0DE2B20]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

uint64_t MKBGetDeviceLockState()
{
  return MEMORY[0x1E0D4E4D0]();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return (NSString *)MEMORY[0x1E0CB3220](range.location, range.length);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1E0CD65F0](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1E0CD6610](allocator);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
  MEMORY[0x1E0DE43F8](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add, __p_new_stuff);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4408](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x1E0DE4490](this, __pos, __n1, __s, __n2);
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
  MEMORY[0x1E0DE44B0](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x1E0DE44B8](this, __c);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1E0DE44C8](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

uint64_t std::istream::read()
{
  return MEMORY[0x1E0DE45D0]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x1E0DE46A8]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1E0DE47A8]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1E0DE48F8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA0](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA8](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x1E0DE4AB8](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete[]()
{
  return off_1E66E3698();
}

void operator delete(void *__p)
{
  off_1E66E36A0(__p);
}

void operator delete(void *__p, const std::nothrow_t *a2)
{
  off_1E66E36A8(__p, a2);
}

uint64_t operator delete()
{
  return off_1E66E36B0();
}

void *__cdecl operator new[](size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_1E66E36B8(__sz, a2);
}

uint64_t operator new[]()
{
  return off_1E66E36C0();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E66E36C8(__sz);
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  return (void *)off_1E66E36D0(__sz, a2);
}

uint64_t operator new()
{
  return off_1E66E36D8();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1E0DEEA40]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
  MEMORY[0x1E0C82F08](object, queue);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1E0C83370](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C834A0](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1E0C841D8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1E0C84220](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1E0DE7FC8](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1E0DE7FD0](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1E0C84928](log);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1E0DE8580](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&n, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x1E0DE8598](a1, *(_QWORD *)&a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x1E0DE85A0](a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return MEMORY[0x1E0DE85B0](a1, *(_QWORD *)&a2);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x1E0DE85D8](a1, *(_QWORD *)&a2, a3, *(_QWORD *)&a4, a5);
}

int sqlite3_close(sqlite3 *a1)
{
  return MEMORY[0x1E0DE8650](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x1E0DE8660](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8668](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_count(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1E0DE8678](pStmt);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  double result;

  MEMORY[0x1E0DE8688](a1, *(_QWORD *)&iCol);
  return result;
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE8690](a1, *(_QWORD *)&iCol);
}

const char *__cdecl sqlite3_column_name(sqlite3_stmt *a1, int N)
{
  return (const char *)MEMORY[0x1E0DE86A0](a1, *(_QWORD *)&N);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x1E0DE86B8](a1, *(_QWORD *)&iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x1E0DE86C8](a1, *(_QWORD *)&iCol);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x1E0DE8788](a1);
}

char *__cdecl sqlite3_expanded_sql(sqlite3_stmt *pStmt)
{
  return (char *)MEMORY[0x1E0DE87A8](pStmt);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x1E0DE87C8](pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x1E0DE8870](filename, ppDb, *(_QWORD *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x1E0DE8880](db, zSql, *(_QWORD *)&nByte, ppStmt, pzTail);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x1E0DE89A8](a1);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1E0DEEDE8]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1E0C85D40](*(_QWORD *)&__fd, __buf, __nbyte);
}

