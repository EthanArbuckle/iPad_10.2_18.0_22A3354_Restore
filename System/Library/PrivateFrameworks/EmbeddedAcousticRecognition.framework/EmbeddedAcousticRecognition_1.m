void sub_1AD7C320C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;

  *v14 = 0u;
  v14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  a14 = v16 + 16;
  *v15 = 0u;
  v15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a14);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::vector<unsigned int>::size_type v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64x2_t v14;
  int64x2_t v15;
  int v16;
  int64x2_t v17;
  int32x2_t v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];
  _QWORD v28[35];

  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  v8 = *(int *)(a2 + 20);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v28, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Running forward propagation for batch size = ", 45);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", which contains ", 17);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" frames each from ", 18);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v28);
  }
  std::vector<int>::resize((std::vector<unsigned int> *)(a1[27] + 24 * (int)a4), v8);
  if ((int)v8 >= 1)
  {
    v12 = 0;
    v13 = *(_QWORD *)(a1[27] + 24 * (int)a4);
    v14 = (uint64x2_t)vdupq_n_s64((unint64_t)v8 - 1);
    v15 = (int64x2_t)xmmword_1AE140A90;
    v16 = v8 - 1;
    v17 = vdupq_n_s64(2uLL);
    do
    {
      v18 = vmovn_s64((int64x2_t)vcgeq_u64(v14, (uint64x2_t)v15));
      if ((v18.i8[0] & 1) != 0)
        *(_DWORD *)(v13 + 4 * v12) = v16;
      if ((v18.i8[4] & 1) != 0)
        *(_DWORD *)(v13 + 4 * v12 + 4) = v8 + (v12 ^ 0xFFFFFFFE);
      v12 += 2;
      v15 = vaddq_s64(v15, v17);
      v16 -= 2;
    }
    while (((v8 + 1) & 0x1FFFFFFFELL) != v12);
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1[30] + 48 * (int)a4), v8, *(unsigned int *)(a2 + 16), 1, 0);
  kaldi::CuMatrixBase<float>::CopyRows(a1[30] + 48 * (int)a4, a2, (_QWORD *)(a1[27] + 24 * (int)a4));
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1[33] + 48 * (int)a4), v8, *(unsigned int *)(a1[23] + *(_QWORD *)(*(_QWORD *)a1[23] - 24) + 12), 1, 0);
  v19 = (_DWORD *)(a1[22] + *(_QWORD *)(*(_QWORD *)a1[22] - 24));
  v20 = *(_QWORD *)(a3 + 8);
  v21 = *(_DWORD *)(a3 + 28);
  v22 = *(_QWORD *)(a3 + 32);
  LODWORD(v28[2]) = v19[3];
  *(_QWORD *)((char *)&v28[2] + 4) = *(_QWORD *)(a3 + 20);
  HIDWORD(v28[3]) = v21;
  v28[4] = v22;
  v28[0] = &unk_1E5D29D40;
  v28[1] = v20;
  (*(void (**)(_DWORD *, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v19 + 112))(v19, a2, v28, a4);
  v23 = a1[23] + *(_QWORD *)(*(_QWORD *)a1[23] - 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 112))(v23, a1[30] + 48 * (int)a4, a1[33] + 48 * (int)a4, a4);
  v24 = *(int *)(a1[22] + *(_QWORD *)(*(_QWORD *)a1[22] - 24) + 12);
  v25 = *(_QWORD *)(a3 + 8) + 4 * v24;
  LODWORD(v24) = *(_DWORD *)(a3 + 28) - v24;
  v26 = *(_QWORD *)(a3 + 32);
  LODWORD(v27[2]) = *(_DWORD *)(a1[23] + *(_QWORD *)(*(_QWORD *)a1[23] - 24) + 12);
  *(_QWORD *)((char *)&v27[2] + 4) = *(_QWORD *)(a3 + 20);
  HIDWORD(v27[3]) = v24;
  v27[4] = v26;
  v27[0] = &unk_1E5D29D40;
  v27[1] = v25;
  kaldi::CuMatrixBase<float>::CopyRows((uint64_t)v27, a1[33] + 48 * (int)a4, (_QWORD *)(a1[27] + 24 * (int)a4));
  v27[0] = &unk_1E5D29D40;
  memset(&v27[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v27);
  v28[0] = &unk_1E5D29D40;
  memset(&v28[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v28);
}

void sub_1AD7C3574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;

  *v14 = 0u;
  v14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  a14 = v16 + 16;
  *v15 = 0u;
  v15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a14);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::BidirectionalRecurrentComponent::PropagateFnc((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 128)), a2, a3, a4);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::BackpropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _QWORD v35[5];
  void *v36;
  _QWORD v37[4];

  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  v12 = *(unsigned int *)(a2 + 20);
  v34 = *(_DWORD *)(a1[22] + *(_QWORD *)(*(_QWORD *)a1[22] - 24) + 12);
  v13 = *(_DWORD *)(a1[23] + *(_QWORD *)(*(_QWORD *)a1[23] - 24) + 12);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v36, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Running backward propagation for batch size = ", 46);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", which contains ", 17);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" frames each from ", 18);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v36);
  }
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1[36] + 48 * (int)a6), v12, *(unsigned int *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1[39] + 48 * (int)a6), v12, *(unsigned int *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8), 0, 0);
  v17 = (char *)a1[22];
  v18 = *(_QWORD *)(*(_QWORD *)v17 - 24);
  v19 = *(_QWORD *)(a3 + 8);
  v20 = *(_DWORD *)(a3 + 28);
  v21 = *(_QWORD *)(a3 + 32);
  LODWORD(v37[1]) = v34;
  *(_QWORD *)((char *)&v37[1] + 4) = *(_QWORD *)(a3 + 20);
  HIDWORD(v37[2]) = v20;
  v37[3] = v21;
  v36 = &unk_1E5D29D40;
  v37[0] = v19;
  v22 = *(_QWORD *)(a4 + 8);
  v23 = *(_DWORD *)(a4 + 28);
  v24 = *(_QWORD *)(a4 + 32);
  LODWORD(v35[2]) = v34;
  *(_QWORD *)((char *)&v35[2] + 4) = *(_QWORD *)(a4 + 20);
  HIDWORD(v35[3]) = v23;
  v35[4] = v24;
  v35[0] = &unk_1E5D29D40;
  v35[1] = v22;
  (*(void (**)(char *, uint64_t, void **, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)&v17[v18] + 128))(&v17[v18], a2, &v36, v35, a1[36] + 48 * (int)a6, a6);
  v35[0] = &unk_1E5D29D40;
  memset(&v35[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v35);
  v36 = &unk_1E5D29D40;
  memset(v37, 0, sizeof(v37));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v36);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1[42] + 48 * (int)a6), v12, v13, 1, 0);
  v25 = a1[42] + 48 * (int)a6;
  v26 = *(_QWORD *)(a4 + 8) + 4 * v34;
  v27 = *(_DWORD *)(a4 + 28) - v34;
  v28 = *(_QWORD *)(a4 + 32);
  LODWORD(v37[1]) = v13;
  *(_QWORD *)((char *)&v37[1] + 4) = *(_QWORD *)(a4 + 20);
  HIDWORD(v37[2]) = v27;
  v37[3] = v28;
  v36 = &unk_1E5D29D40;
  v37[0] = v26;
  kaldi::CuMatrixBase<float>::CopyRows(v25, (uint64_t)&v36, (_QWORD *)(a1[27] + 24 * (int)a6));
  v36 = &unk_1E5D29D40;
  memset(v37, 0, sizeof(v37));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v36);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1[33] + 48 * (int)a6), v12, v13, 1, 0);
  v29 = a1[33] + 48 * (int)a6;
  v30 = *(_QWORD *)(a3 + 8) + 4 * v34;
  v31 = *(_DWORD *)(a3 + 28) - v34;
  v32 = *(_QWORD *)(a3 + 32);
  LODWORD(v37[1]) = v13;
  *(_QWORD *)((char *)&v37[1] + 4) = *(_QWORD *)(a3 + 20);
  HIDWORD(v37[2]) = v31;
  v37[3] = v32;
  v36 = &unk_1E5D29D40;
  v37[0] = v30;
  kaldi::CuMatrixBase<float>::CopyRows(v29, (uint64_t)&v36, (_QWORD *)(a1[27] + 24 * (int)a6));
  v36 = &unk_1E5D29D40;
  memset(v37, 0, sizeof(v37));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v36);
  v33 = a1[23] + *(_QWORD *)(*(_QWORD *)a1[23] - 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33 + 128))(v33, a1[30] + 48 * (int)a6, a1[33] + 48 * (int)a6, a1[42] + 48 * (int)a6, a1[39] + 48 * (int)a6, a6);
  if (a5)
  {
    kaldi::CuMatrixBase<float>::CopyRows(a5, a1[39] + 48 * (int)a6, (_QWORD *)(a1[27] + 24 * (int)a6));
    kaldi::CuMatrixBase<float>::AddMat(a5, a1[36] + 48 * (int)a6, 111, 1.0, 1.0);
  }
}

void sub_1AD7C39B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _OWORD *v11;
  va_list va;

  va_start(va, a11);
  *v11 = 0u;
  v11[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::BackpropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  kaldi::nnet1::BidirectionalRecurrentComponent::BackpropagateFnc((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 144)), a2, a3, a4, a5, a6);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::AccumGradients(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = a1[22] + *(_QWORD *)(*(_QWORD *)a1[22] - 24);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 232))(v9);
  v10 = a1[23] + *(_QWORD *)(*(_QWORD *)a1[23] - 24);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 232))(v10, a1[30] + 48 * (int)a5, a3, a4, a5);
}

uint64_t `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::AccumGradients(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v8 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 248));
  v9 = v8[22] + *(_QWORD *)(*(_QWORD *)v8[22] - 24);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 232))(v9);
  v10 = v8[23] + *(_QWORD *)(*(_QWORD *)v8[23] - 24);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 232))(v10, v8[30] + 48 * (int)a5, a3, a4, a5);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::UpdateWeights(kaldi::nnet1::BidirectionalRecurrentComponent *this, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *((_QWORD *)this + 22) + *(_QWORD *)(**((_QWORD **)this + 22) - 24);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 256))(v6);
  v7 = *((_QWORD *)this + 23) + *(_QWORD *)(**((_QWORD **)this + 23) - 24);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v7 + 256))(v7, a2, a3);
}

uint64_t `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::UpdateWeights(kaldi::nnet1::BidirectionalRecurrentComponent *this, void *a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 272);
  v6 = *((_QWORD *)v5 + 22) + *(_QWORD *)(**((_QWORD **)v5 + 22) - 24);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 256))(v6);
  v7 = *((_QWORD *)v5 + 23) + *(_QWORD *)(**((_QWORD **)v5 + 23) - 24);
  return (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v7 + 256))(v7, a2, a3);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::SetGradientNormalization(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(a1 + 176) + *(_QWORD *)(**(_QWORD **)(a1 + 176) - 24);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 240))(v6);
  v7 = *(_QWORD *)(a1 + 184) + *(_QWORD *)(**(_QWORD **)(a1 + 184) - 24);
  return (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)v7 + 240))(v7, a2, a3);
}

uint64_t `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::SetGradientNormalization(_QWORD *a1, uint64_t a2, float a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = (char *)a1 + *(_QWORD *)(*a1 - 256);
  v6 = *((_QWORD *)v5 + 22) + *(_QWORD *)(**((_QWORD **)v5 + 22) - 24);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 240))(v6);
  v7 = *((_QWORD *)v5 + 23) + *(_QWORD *)(**((_QWORD **)v5 + 23) - 24);
  return (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)v7 + 240))(v7, a2, a3);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::NormalizeGradients(kaldi::nnet1::BidirectionalRecurrentComponent *this, float a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *((_QWORD *)this + 22) + *(_QWORD *)(**((_QWORD **)this + 22) - 24);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 248))(v6);
  v7 = *((_QWORD *)this + 23) + *(_QWORD *)(**((_QWORD **)this + 23) - 24);
  return (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)v7 + 248))(v7, a3, a2);
}

uint64_t `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::NormalizeGradients(kaldi::nnet1::BidirectionalRecurrentComponent *this, float a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 264);
  v6 = *((_QWORD *)v5 + 22) + *(_QWORD *)(**((_QWORD **)v5 + 22) - 24);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 248))(v6);
  v7 = *((_QWORD *)v5 + 23) + *(_QWORD *)(**((_QWORD **)v5 + 23) - 24);
  return (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)v7 + 248))(v7, a3, a2);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::Check(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD v14[34];

  v2 = *((_QWORD *)this + 22) + *(_QWORD *)(**((_QWORD **)this + 22) - 24);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2) == 280
    || (v3 = *((_QWORD *)this + 23) + *(_QWORD *)(**((_QWORD **)this + 23) - 24),
        (*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3) == 280))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "no recursive recurrent definition");
    goto LABEL_8;
  }
  v4 = *((_QWORD *)this + 22);
  v5 = v4 + *(_QWORD *)(*(_QWORD *)v4 - 24);
  v6 = *(_DWORD *)(v5 + 8);
  v7 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  if (v6 != *((_DWORD *)v7 + 2))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"the forward RNN's input dimension does not match the component's input dimension ", 81);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" vs ", 4);
    std::ostream::operator<<();
    goto LABEL_8;
  }
  v8 = *((_QWORD *)this + 23) + *(_QWORD *)(**((_QWORD **)this + 23) - 24);
  if (*(_DWORD *)(v8 + 8) != v6)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"the backward RNN's input dimension does not match the component's input dimension ", 82);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" vs ", 4);
    std::ostream::operator<<();
    goto LABEL_8;
  }
  if (*(_DWORD *)(v8 + 12) + *(_DWORD *)(v5 + 12) != *((_DWORD *)v7 + 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"the component has output dimension ", 35);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" , doesn't equal the sum of individual RNN ", 43);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" and ", 5);
    std::ostream::operator<<();
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 128))();
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 23) + 128))(*((_QWORD *)this + 23));
}

void sub_1AD7C400C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::GetHistoryState(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  void *v16;
  _QWORD v17[4];

  v6 = 3 * a3;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8) + 48 * a3;
  v8 = *(int *)(v7 + 16);
  v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 8) + 48 * a3 + 16);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)a2, *(unsigned int *)(v7 + 20), (v9 + v8), 1, 0);
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_DWORD *)(a2 + 28);
  v12 = *(_QWORD *)(a2 + 32);
  LODWORD(v17[1]) = v8;
  *(_QWORD *)((char *)&v17[1] + 4) = *(_QWORD *)(a2 + 20);
  HIDWORD(v17[2]) = v11;
  v17[3] = v12;
  v16 = &unk_1E5D29D40;
  v17[0] = v10;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v16, *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8) + 16 * v6, 111);
  v16 = &unk_1E5D29D40;
  memset(v17, 0, sizeof(v17));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v16);
  v13 = *(_QWORD *)(a2 + 8) + 4 * v8;
  v14 = *(_DWORD *)(a2 + 28) - v8;
  v15 = *(_QWORD *)(a2 + 32);
  LODWORD(v17[1]) = v9;
  *(_QWORD *)((char *)&v17[1] + 4) = *(_QWORD *)(a2 + 20);
  HIDWORD(v17[2]) = v14;
  v17[3] = v15;
  v16 = &unk_1E5D29D40;
  v17[0] = v13;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v16, *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8) + 48 * a3, 111);
  v16 = &unk_1E5D29D40;
  memset(v17, 0, sizeof(v17));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v16);
}

void sub_1AD7C4180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _OWORD *v10;
  uint64_t v11;

  a10 = v11 + 16;
  *v10 = 0u;
  v10[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a10);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::nnet1::BidirectionalRecurrentComponent::GetHistoryState(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v8 = *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 8) + 48 * a4 + 16);
  v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 8) + 48 * a4 + 16);
  kaldi::CuVector<float>::Resize(a2, v9 + v8, 1);
  v10 = *(_QWORD *)(a2 + 8);
  v25 = &unk_1E5D29D70;
  v26 = v10;
  v28 = *(_QWORD *)(a2 + 24);
  v27 = v8;
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8) + 48 * a4;
  v12 = *(_QWORD *)(v11 + 8) + 4 * *(_DWORD *)(v11 + 24) * a3;
  v13 = *(_DWORD *)(v11 + 16);
  v14 = *(_QWORD *)(v11 + 32);
  v21 = &unk_1E5D29D70;
  v22 = v12;
  v24 = v14;
  v23 = v13;
  kaldi::CuVectorBase<float>::CopyFromVec(&v25, (uint64_t)&v21);
  v15 = *(_QWORD *)(a2 + 8) + 4 * v8;
  v25 = &unk_1E5D29D70;
  v26 = v15;
  v28 = *(_QWORD *)(a2 + 24);
  v27 = v9;
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 184) + 8) + 48 * a4;
  v17 = *(_QWORD *)(v16 + 8) + 4 * *(_DWORD *)(v16 + 24) * a3;
  v18 = *(_DWORD *)(v16 + 16);
  v19 = *(_QWORD *)(v16 + 32);
  v21 = &unk_1E5D29D70;
  v22 = v17;
  v24 = v19;
  v23 = v18;
  return kaldi::CuVectorBase<float>::CopyFromVec(&v25, (uint64_t)&v21);
}

float kaldi::nnet1::BidirectionalRecurrentComponent::SetInternalBoundary(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float result;
  _QWORD v20[4];
  _QWORD v21[3];
  uint64_t v22;

  v6 = *(_QWORD *)(a1 + 176);
  v8 = *(_QWORD *)(v6 + 104);
  v9 = *(_QWORD *)(v6 + 112);
  v7 = (uint64_t *)(v6 + 104);
  if (v8 == v9)
  {
    std::vector<kaldi::CuVector<float>>::resize(v7, *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(*(_QWORD *)(a1 + 176) + 128), *(int *)(a1 + 80));
  }
  v10 = *(_QWORD *)(a1 + 184);
  v12 = *(_QWORD *)(v10 + 104);
  v13 = *(_QWORD *)(v10 + 112);
  v11 = (uint64_t *)(v10 + 104);
  if (v12 == v13)
  {
    std::vector<kaldi::CuVector<float>>::resize(v11, *(int *)(a1 + 80));
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(*(_QWORD *)(a1 + 184) + 128), *(int *)(a1 + 80));
  }
  v14 = *(_DWORD *)(a2 + 16);
  if (v14)
  {
    v15 = (v14 >> 1);
    v16 = *(_QWORD *)(a2 + 8);
    v21[0] = &unk_1E5D29D70;
    v21[1] = v16;
    v22 = *(_QWORD *)(a2 + 24);
    v21[2] = v15;
    v20[0] = &unk_1E5D29D70;
    v20[1] = v16 + 4 * (int)v15;
    v20[3] = v22;
    v20[2] = v15;
    v17 = kaldi::CuVectorBase<float>::Sum((uint64_t)v21);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 104) + 32 * a3;
    if (v17 <= 0.0)
    {
      kaldi::CuVector<float>::Resize(v18, 0, 1);
    }
    else
    {
      kaldi::CuVector<float>::Resize(v18, v15, 1);
      kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 104) + 32 * a3), (uint64_t)v21);
    }
    kaldi::CuVector<float>::Resize(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 104) + 32 * a3, v15, 1);
    return kaldi::CuVectorBase<float>::ReverseCopyFromVec(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 104) + 32 * a3, (uint64_t)v20);
  }
  else
  {
    kaldi::CuVector<float>::Resize(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 104) + 32 * a3, 0, 1);
    kaldi::CuVector<float>::Resize(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 104) + 32 * a3, 0, 1);
  }
  return result;
}

uint64_t *std::vector<kaldi::CuVector<float>>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;

  v2 = result;
  v3 = result[1];
  v4 = (v3 - *result) >> 5;
  if (a2 > v4)
    return (uint64_t *)std::vector<kaldi::CuVector<float>>::__append(result, a2 - v4);
  if (a2 < v4)
  {
    v5 = *result + 32 * a2;
    if (v3 != v5)
    {
      v6 = (_QWORD *)(v3 - 32);
      v7 = (_QWORD *)(v3 - 32);
      do
      {
        v8 = *v7;
        v7 -= 4;
        result = (uint64_t *)(*(uint64_t (**)(_QWORD *))(v8 + 8))(v6);
        v9 = v6 == (_QWORD *)v5;
        v6 = v7;
      }
      while (!v9);
    }
    v2[1] = v5;
  }
  return result;
}

uint64_t *std::vector<kaldi::CuMatrix<float>>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;

  v2 = result;
  v3 = result[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *result) >> 4);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
    return (uint64_t *)std::vector<kaldi::CuMatrix<float>>::__append(result, v6);
  if (!v5)
  {
    v7 = *result + 48 * a2;
    if (v3 != v7)
    {
      v8 = (_QWORD *)(v3 - 48);
      v9 = (_QWORD *)(v3 - 48);
      do
      {
        v10 = *v9;
        v9 -= 6;
        result = (uint64_t *)(*(uint64_t (**)(_QWORD *))(v10 + 16))(v8);
        v11 = v8 == (_QWORD *)v7;
        v8 = v9;
      }
      while (!v11);
    }
    v2[1] = v7;
  }
  return result;
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::SetTrainOptions(kaldi::nnet1::BidirectionalRecurrentComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(this, a2);
  (*(void (**)(_QWORD, const kaldi::nnet1::NnetTrainOptions *))(**((_QWORD **)this + 22) + 104))(*((_QWORD *)this + 22), a2);
  return (*(uint64_t (**)(_QWORD, const kaldi::nnet1::NnetTrainOptions *))(**((_QWORD **)this + 23) + 104))(*((_QWORD *)this + 23), a2);
}

void kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *this, const kaldi::nnet1::NnetTrainOptions *lpsrc)
{
  char *v4;
  __int128 v5;
  char *v6;
  __int128 v7;
  _QWORD v8[34];

  if (v4)
  {
    v5 = *(_OWORD *)(v4 + 8);
    *(_OWORD *)((char *)this + 71) = *(_OWORD *)(v4 + 23);
    *(_OWORD *)((char *)this + 56) = v5;
    *((_QWORD *)this + 12) = *((_QWORD *)v4 + 6);
    v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
    v7 = *(_OWORD *)((char *)lpsrc + 8);
    *(_OWORD *)(v6 + 71) = *(_OWORD *)((char *)lpsrc + 23);
    *(_OWORD *)(v6 + 56) = v7;
  }
  else if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"need RecurrentNnetTrainOptions in recurrent style component, ignoring SetTrainOptions", 85);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v8);
  }
}

void sub_1AD7C4688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::SetTrainOptions(kaldi::nnet1::BidirectionalRecurrentComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::RecurrentBaseComponent *v3;

  v3 = (kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 280));
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(v3, a2);
  (*(void (**)(_QWORD *, const kaldi::nnet1::NnetTrainOptions *))(**((_QWORD **)v3 + 22) + 104))(*((_QWORD **)v3 + 22), a2);
  return (*(uint64_t (**)(_QWORD *, const kaldi::nnet1::NnetTrainOptions *))(**((_QWORD **)v3 + 23) + 104))(*((_QWORD **)v3 + 23), a2);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::SetHistoryState()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "This function is probably not meaningful for bidirectional RNNs.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "This function is probably not meaningful for bidirectional RNNs.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::BidirectionalRecurrentComponent::ResetHistoryState()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "This function is probably not meaningful for bidirectional RNNs.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::HistoryStateSize(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  int v2;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 22) + 16))(*((_QWORD *)this + 22));
  return (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 23) + 16))(*((_QWORD *)this + 23)) + v2;
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::ResetHistoryState(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 22) + 32))(*((_QWORD *)this + 22));
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 23) + 32))(*((_QWORD *)this + 23));
}

uint64_t *kaldi::nnet1::BidirectionalRecurrentComponent::EnsureBuffers(uint64_t *this)
{
  uint64_t *v1;
  unint64_t v2;

  if (!*((_BYTE *)this + 360))
  {
    v1 = this;
    (*(void (**)(uint64_t *))(*this + 128))(this);
    v2 = *((int *)v1 + 20);
    std::vector<std::vector<int>>::resize(v1 + 27, v2);
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 30, v2);
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 33, v2);
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 36, v2);
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 39, v2);
    std::vector<kaldi::CuMatrix<float>>::resize(v1 + 42, v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v1[22] + 88))(v1[22]);
    this = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1[23] + 88))(v1[23]);
    *((_BYTE *)v1 + 360) = 1;
  }
  return this;
}

uint64_t kaldi::nnet1::RecurrentBaseComponent::GetHistoryOptions(kaldi::nnet1::RecurrentBaseComponent *this)
{
  return (uint64_t)this + 88;
}

void kaldi::nnet1::RecurrentBaseComponent::SetHistoryOptions(kaldi::nnet1::RecurrentBaseComponent *this, const kaldi::nnet1::HistoryOptions *a2)
{
  const void *v4;
  char *v5;
  __int128 v6;
  int v7;
  void (**v8)(kaldi::nnet1::RecurrentNnetTrainOptions *__hidden);
  _BYTE v9[31];
  void *v10;
  int v11;
  int v12;

  v4 = (const void *)(*(uint64_t (**)(kaldi::nnet1::RecurrentBaseComponent *))(*(_QWORD *)this + 120))(this);
  if (v5)
  {
    v6 = *(_OWORD *)(v5 + 8);
    *(_OWORD *)&v9[15] = *(_OWORD *)(v5 + 23);
    *(_OWORD *)v9 = v6;
    v8 = &off_1E5D305B8;
    v10 = &unk_1E5D305D8;
    v7 = *((_DWORD *)v5 + 13);
    v11 = *((_DWORD *)a2 + 2);
    v12 = v7;
    (*(void (**)(kaldi::nnet1::RecurrentBaseComponent *, void (***)(kaldi::nnet1::RecurrentNnetTrainOptions *__hidden)))(*(_QWORD *)this + 104))(this, &v8);
    kaldi::nnet1::RecurrentNnetTrainOptions::~RecurrentNnetTrainOptions((kaldi::nnet1::RecurrentNnetTrainOptions *)&v8);
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"Inconsistent return type: RecurrentBaseComponent::GetTrainOptions() can not be cast to RecurrentNnetTrainOptions", 112);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
  }
}

void sub_1AD7C49C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::RecurrentBaseComponent::GetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *this)
{
  return (uint64_t)this + 48;
}

uint64_t kaldi::nnet1::UpdatableComponent::IsUpdatable(kaldi::nnet1::UpdatableComponent *this)
{
  return 1;
}

_QWORD *kaldi::nnet1::Component::Info@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void kaldi::nnet1::Component::GetUnitOutputFnc(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  kaldi::nnet1::Component *v4;
  std::string *v5;
  std::string::size_type size;
  _QWORD *v7;
  std::string v8;
  _QWORD v9[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GetUnitOutputFnc", 16);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" is not implemented for ", 24);
  v4 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  kaldi::nnet1::Component::TypeToMarker(v4, &v8);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v8;
  else
    v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  else
    size = v8.__r_.__value_.__l.__size_;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, size);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, " component.");
  std::string::~string(&v8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
}

{
  _QWORD *v2;
  _QWORD *v3;
  kaldi::nnet1::Component *v4;
  std::string *v5;
  std::string::size_type size;
  _QWORD *v7;
  std::string v8;
  _QWORD v9[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GetUnitOutputFnc", 16);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" is not implemented for ", 24);
  v4 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  kaldi::nnet1::Component::TypeToMarker(v4, &v8);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v8;
  else
    v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  else
    size = v8.__r_.__value_.__l.__size_;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, size);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, " component.");
  std::string::~string(&v8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
}

void kaldi::nnet1::UpdatableComponent::GetNormalizedLearningRate(kaldi::nnet1::UpdatableComponent *this)
{
  _QWORD *v2;
  _QWORD *v3;
  kaldi::nnet1::Component *v4;
  std::string *v5;
  std::string::size_type size;
  _QWORD *v7;
  std::string v8;
  _QWORD v9[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GetNormalizedLearningRate", 25);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" is not implemented for ", 24);
  v4 = (kaldi::nnet1::Component *)(*(uint64_t (**)(kaldi::nnet1::UpdatableComponent *))(*(_QWORD *)this + 24))(this);
  kaldi::nnet1::Component::TypeToMarker(v4, &v8);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v8;
  else
    v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  else
    size = v8.__r_.__value_.__l.__size_;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, size);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, " component.");
  std::string::~string(&v8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
}

void kaldi::nnet1::UpdatableComponent::PerturbParams(kaldi::nnet1::UpdatableComponent *this, float a2)
{
  _QWORD *v3;
  _QWORD *v4;
  kaldi::nnet1::Component *v5;
  std::string *v6;
  std::string::size_type size;
  _QWORD *v8;
  std::string v9;
  _QWORD v10[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"PerturbParams", 13);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" is not implemented for ", 24);
  v5 = (kaldi::nnet1::Component *)(*(uint64_t (**)(kaldi::nnet1::UpdatableComponent *))(*(_QWORD *)this + 24))(this);
  kaldi::nnet1::Component::TypeToMarker(v5, &v9);
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v9;
  else
    v6 = (std::string *)v9.__r_.__value_.__r.__words[0];
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  else
    size = v9.__r_.__value_.__l.__size_;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, size);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, " component.");
  std::string::~string(&v9);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
}

void kaldi::nnet1::UpdatableComponent::GetGradient(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  kaldi::nnet1::Component *v4;
  std::string *v5;
  std::string::size_type size;
  _QWORD *v7;
  std::string v8;
  _QWORD v9[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GetGradient", 11);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" is not implemented for ", 24);
  v4 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  kaldi::nnet1::Component::TypeToMarker(v4, &v8);
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v8;
  else
    v5 = (std::string *)v8.__r_.__value_.__r.__words[0];
  if ((v8.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v8.__r_.__value_.__r.__words[2]);
  else
    size = v8.__r_.__value_.__l.__size_;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, size);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, " component.");
  std::string::~string(&v8);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
}

void `virtual thunk to'kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::RecurrentBaseComponent::SetTrainOptions((kaldi::nnet1::RecurrentBaseComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 280)), a2);
}

uint64_t `virtual thunk to'kaldi::nnet1::RecurrentBaseComponent::GetTrainOptions(kaldi::nnet1::RecurrentBaseComponent *this)
{
  return (uint64_t)this + *(_QWORD *)(*(_QWORD *)this - 288) + 48;
}

void kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 368));
}

{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 368));
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::Copy(const std::string *this)
{
  kaldi::nnet1::BidirectionalRecurrentComponent *v2;

  v2 = (kaldi::nnet1::BidirectionalRecurrentComponent *)operator new();
  kaldi::nnet1::BidirectionalRecurrentComponent::BidirectionalRecurrentComponent(v2, this);
  return (uint64_t)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
}

void sub_1AD7C4EF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40DD337325);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::BidirectionalRecurrentComponent::GetType(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  return 280;
}

void kaldi::nnet1::BidirectionalRecurrentComponent::PropagateFnc()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Running on single input doesn't make sense for bidirectional RNNs, since history state is not saved.");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void `non-virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + 208));
}

{
  kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this - 160));
}

{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + 200));
}

{
  kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this - 168));
}

void `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 368));
}

{
  kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent((kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::Copy(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  return kaldi::nnet1::BidirectionalRecurrentComponent::Copy((const std::string *)((char *)this
                                                                                 + *(_QWORD *)(*(_QWORD *)this - 32)));
}

uint64_t `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::GetType(kaldi::nnet1::BidirectionalRecurrentComponent *this)
{
  return 280;
}

void `virtual thunk to'kaldi::nnet1::BidirectionalRecurrentComponent::PropagateFnc()
{
  kaldi::nnet1::BidirectionalRecurrentComponent::PropagateFnc();
}

void kaldi::nnet1::BidirectionalRecurrentComponent::~BidirectionalRecurrentComponent(kaldi::nnet1::BidirectionalRecurrentComponent *this, uint64_t *a2)
{
  uint64_t v4;
  quasar::Bitmap *v5;
  quasar::Bitmap *v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[3];
  *((_QWORD *)this + 20) = &off_1E5D31168;
  v5 = (kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + 160);
  *((_QWORD *)this + 21) = &unk_1E5D31190;
  v6 = (kaldi::nnet1::BidirectionalRecurrentComponent *)((char *)this + 168);
  v7 = *((_QWORD *)this + 22);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 23);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = (void **)((char *)this + 336);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)((char *)this + 312);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)((char *)this + 288);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)((char *)this + 264);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)((char *)this + 240);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)((char *)this + 216);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v9);
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  quasar::Bitmap::~Bitmap(v6);
  quasar::Bitmap::~Bitmap(v5);
  kaldi::nnet1::RecurrentBaseComponent::~RecurrentBaseComponent(this, a2 + 1);
}

uint64_t std::vector<kaldi::CuVector<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      v14 = v7 + 32 * a2;
      v15 = 32 * a2;
      v16 = (_QWORD *)(v7 + 8);
      do
      {
        *v16 = 0;
        v16[1] = 0;
        v16[2] = 0;
        *(v16 - 1) = &unk_1E5D341C8;
        v16 += 4;
        v15 -= 32;
      }
      while (v15);
    }
    else
    {
      v14 = *(_QWORD *)(result - 8);
    }
    a1[1] = v14;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - *a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v24 = result;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(result, v12);
    else
      v13 = 0;
    v20 = v13;
    v21 = &v13[32 * v10];
    v23 = &v13[32 * v12];
    v17 = &v21[32 * a2];
    v18 = 32 * a2;
    v19 = v21 + 8;
    do
    {
      *v19 = 0;
      v19[1] = 0;
      v19[2] = 0;
      *(v19 - 1) = &unk_1E5D341C8;
      v19 += 4;
      v18 -= 32;
    }
    while (v18);
    v22 = v17;
    std::vector<kaldi::CuVector<float>>::__swap_out_circular_buffer(a1, &v20);
    return std::__split_buffer<kaldi::CuVector<float>>::~__split_buffer((uint64_t)&v20);
  }
  return result;
}

void sub_1AD7C527C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::CuVector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::CuVector<float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::CuVector<float>>,std::reverse_iterator<kaldi::CuVector<float>*>,std::reverse_iterator<kaldi::CuVector<float>*>,std::reverse_iterator<kaldi::CuVector<float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::CuVector<float>>,std::reverse_iterator<kaldi::CuVector<float>*>,std::reverse_iterator<kaldi::CuVector<float>*>,std::reverse_iterator<kaldi::CuVector<float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v10 = 0;
  for (i = a7 - 32; ; kaldi::CuVectorBase<float>::CopyFromVec((_QWORD *)(i + v12), v13 - 32))
  {
    v12 = v10;
    v13 = a3 + v10;
    if (a3 + v10 == a5)
      break;
    v14 = (_QWORD *)(i + v10);
    v14[2] = 0;
    v14[3] = 0;
    *v14 = &unk_1E5D341C8;
    v14[1] = 0;
    v14[3] = *(_QWORD *)(v13 - 8);
    kaldi::CuVector<float>::Resize(i + v10, *(unsigned int *)(v13 - 16), 1);
    v10 -= 32;
  }
  return a6;
}

void sub_1AD7C53B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 32)
    (*(void (**)(uint64_t))(*(_QWORD *)(v1 + v2) + 8))(v1 + v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<kaldi::CuVector<float>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(_QWORD *)(i - 32);
    *(_QWORD *)(a1 + 16) = i - 32;
    (*(void (**)(void))(v4 + 8))();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<kaldi::CuMatrix<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD v18[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 48 * a2;
      v14 = 48 * a2;
      do
      {
        *(_OWORD *)(v7 + 24) = 0uLL;
        *(_OWORD *)(v7 + 8) = 0uLL;
        *(_QWORD *)v7 = &unk_1E5D34170;
        *(_BYTE *)(v7 + 40) = 0;
        v7 += 48;
        v14 -= 48;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v9;
    v18[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(result, v11);
    else
      v12 = 0;
    v15 = &v12[48 * v8];
    v18[0] = v12;
    v18[1] = v15;
    v18[3] = &v12[48 * v11];
    v16 = &v15[48 * a2];
    v17 = 48 * a2;
    do
    {
      *(_OWORD *)(v15 + 24) = 0uLL;
      *(_OWORD *)(v15 + 8) = 0uLL;
      *(_QWORD *)v15 = &unk_1E5D34170;
      v15[40] = 0;
      v15 += 48;
      v17 -= 48;
    }
    while (v17);
    v18[2] = v16;
    std::vector<kaldi::CuMatrix<float>>::__swap_out_circular_buffer(a1, v18);
    return std::__split_buffer<kaldi::CuMatrix<float>>::~__split_buffer((uint64_t)v18);
  }
  return result;
}

void sub_1AD7C5594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::CuMatrix<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::CuMatrix<float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,std::reverse_iterator<kaldi::CuMatrix<float>*>,std::reverse_iterator<kaldi::CuMatrix<float>*>,std::reverse_iterator<kaldi::CuMatrix<float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,std::reverse_iterator<kaldi::CuMatrix<float>*>,std::reverse_iterator<kaldi::CuMatrix<float>*>,std::reverse_iterator<kaldi::CuMatrix<float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v10 = 0;
  v11 = a7 - 48;
  while (a3 + v10 != a5)
  {
    v12 = v11 + v10;
    v10 -= 48;
    kaldi::CuMatrix<float>::CuMatrix(v12, v10 + a3, 111);
  }
  return a6;
}

uint64_t std::__split_buffer<kaldi::CuMatrix<float>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(_QWORD *)(i - 48);
    *(_QWORD *)(a1 + 16) = i - 48;
    (*(void (**)(void))(v4 + 16))();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void quasar::lm::fst_builder::FstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::create(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  int v11;
  BOOL v12;
  BOOL v13;
  _QWORD *Featurizer;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _BYTE v18[16];

  *a5 = 0;
  if (*(_DWORD *)a1 == 2)
  {
    v11 = *(unsigned __int8 *)(a1 + 17);
    if (*(_BYTE *)(a1 + 16))
      v12 = v11 == 0;
    else
      v12 = 0;
    if (v12)
    {
      v10 = operator new();
      quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::SqueezedFstBuilder(v10, a1, a2, a3, a4);
    }
    else
    {
      if (*(_BYTE *)(a1 + 16))
        v13 = 0;
      else
        v13 = v11 == 0;
      if (!v13)
      {
        quasar::lm::LogMessage::LogMessage(v18, 5, "create", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 90);
        Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v18);
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"Not implemented (", 17);
        v16 = quasar::lm::fst_builder::operator<<<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)").", 2);
        quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v18);
        return;
      }
      v10 = operator new();
      quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::SqueezedFstBuilder(v10, a1, a2, a3, a4);
    }
  }
  else
  {
    if (*(_DWORD *)a1 != 1)
    {
      quasar::lm::LogMessage::LogMessage(v18, 5, "create", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 95);
      v17 = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Unknown FstBuilder implementation: ", 35);
      std::ostream::operator<<();
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v18);
      return;
    }
    v10 = operator new();
    quasar::lm::fst_builder::MutableFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::MutableFstBuilder(v10, a1, a2, a3, a4);
  }
  *a5 = v10;
}

void sub_1AD7C58C8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E1C40763D396DLL);
  *v1 = 0;
  _Unwind_Resume(a1);
}

_QWORD *quasar::lm::fst_builder::operator<<<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;

  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Options(", 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"implementation=", 15);
  v3 = (_QWORD *)std::ostream::operator<<();
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"explicitStartEndMarkers=", 24);
  v5 = (_QWORD *)std::ostream::operator<<();
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"keepDisambiguationSymbols=", 26);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"removeRedundantStates=", 22);
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"attachSymbolTables=", 19);
  v11 = (_QWORD *)std::ostream::operator<<();
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"mutableFst=", 11);
  v14 = quasar::lm::fst_builder::operator<<<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v13);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" ", 1);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"squeezedFst=", 12);
  v17 = quasar::lm::fst_builder::operator<<<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)")", 1);
  return a1;
}

{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"SqueezedOptions(", 16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"acceptor=", 9);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"quantized=", 10);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"stream=", 7);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)")", 1);
  return a1;
}

{
  _QWORD *v2;
  _QWORD *v3;

  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"MutableOptions(", 15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"fst=", 4);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)")", 1);
  return a1;
}

uint64_t quasar::lm::fst_builder::FstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::addState(uint64_t a1, _QWORD *a2, float *a3)
{
  uint64_t result;
  _BYTE v8[16];

  if (*(_QWORD *)(a1 + 40) <= (unint64_t)*(int *)(a1 + 60))
  {
    quasar::lm::LogMessage::LogMessage(v8, 5, "addState", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 125);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v8);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v8);
  }
  else
  {
    quasar::lm::nullstream((quasar::lm *)a1);
  }
  (*(void (**)(uint64_t, _QWORD *, float *))(*(_QWORD *)a1 + 16))(a1, a2, a3);
  *(_QWORD *)(a1 + 64) += (uint64_t)(a2[1] - *a2) >> 4;
  if (*a3 > INFINITY || (float)(*a3 + 0.00097656) < INFINITY)
    ++*(_QWORD *)(a1 + 72);
  result = *(unsigned int *)(a1 + 60);
  *(_DWORD *)(a1 + 60) = result + 1;
  return result;
}

void sub_1AD7C5B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::lm::fst_builder::FstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::build(uint64_t a1)
{
  quasar::lm *v2;
  quasar::lm *v3;
  _QWORD *Featurizer;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t result;
  _BYTE v11[16];

  if (*(_BYTE *)(a1 + 80))
  {
    quasar::lm::LogMessage::LogMessage(v11, 5, "build", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 140);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v11);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v11);
  }
  else
  {
    v2 = (quasar::lm *)quasar::lm::nullstream((quasar::lm *)a1);
  }
  if (*(_QWORD *)(a1 + 40) == *(_DWORD *)(a1 + 60))
  {
    v3 = (quasar::lm *)quasar::lm::nullstream(v2);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v11, 5, "build", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 142);
    Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"Expected ", 9);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" states, but only observed ", 27);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" state(s).", 10);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v11);
  }
  if (*(_QWORD *)(a1 + 64) == *(_QWORD *)(a1 + 48))
  {
    quasar::lm::nullstream(v3);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v11, 5, "build", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 145);
    v7 = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Expected ", 9);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" arcs, but only observed ", 25);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" arc(s).", 8);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v11);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  *(_BYTE *)(a1 + 80) = 1;
  return result;
}

void sub_1AD7C5D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::lm::fst_builder::FstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FstBuilder(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, int a5)
{
  __int128 v6;
  quasar::lm *v7;
  quasar::lm *v8;
  quasar::lm *v9;
  quasar::lm *v10;
  _BYTE v12[16];

  *(_QWORD *)a1 = &unk_1E5D3A630;
  v6 = *a2;
  *(_OWORD *)(a1 + 24) = a2[1];
  *(_OWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = a4;
  *(_DWORD *)(a1 + 56) = a5;
  *(_QWORD *)(a1 + 68) = 0;
  *(_QWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 73) = 0;
  v7 = (quasar::lm *)quasar::lm::nullstream((quasar::lm *)a1);
  if (*(_QWORD *)(a1 + 40))
  {
    v8 = (quasar::lm *)quasar::lm::nullstream(v7);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v12, 5, "FstBuilder", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 114);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v12);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v12);
  }
  if (*(_QWORD *)(a1 + 40) * *(_QWORD *)(a1 + 40) >= *(_QWORD *)(a1 + 48))
  {
    v9 = (quasar::lm *)quasar::lm::nullstream(v8);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v12, 5, "FstBuilder", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 115);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v12);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v12);
  }
  if ((*(_DWORD *)(a1 + 56) & 0x80000000) != 0)
  {
    quasar::lm::LogMessage::LogMessage(v12, 5, "FstBuilder", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 117);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v12);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v12);
  }
  else
  {
    v10 = (quasar::lm *)quasar::lm::nullstream(v9);
  }
  if (*(_QWORD *)(a1 + 40) <= (unint64_t)*(int *)(a1 + 56))
  {
    quasar::lm::LogMessage::LogMessage(v12, 5, "FstBuilder", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 118);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v12);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v12);
  }
  else
  {
    quasar::lm::nullstream(v10);
  }
  return a1;
}

void sub_1AD7C5EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::lm::fst_builder::MutableFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::MutableFstBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  quasar::lm *v7;
  uint64_t v8;
  _QWORD *Featurizer;
  _QWORD *v10;
  _BYTE v12[16];

  v7 = (quasar::lm *)quasar::lm::fst_builder::FstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FstBuilder(a1, (__int128 *)a2, a3, a4, a5);
  *(_QWORD *)v7 = &unk_1E5D3A660;
  v8 = *(_QWORD *)(a2 + 8);
  *((_QWORD *)v7 + 11) = v8;
  if (v8)
  {
    quasar::lm::nullstream(v7);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v12, 5, "MutableFstBuilder", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 165);
    Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"A mutable FST should be supplied when using ", 44);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)".", 1);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v12);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 224))(*(_QWORD *)(a1 + 88));
  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 88) + 248))(*(_QWORD *)(a1 + 88), *(unsigned int *)(a1 + 40));
  return a1;
}

void sub_1AD7C5FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::lm::fst_builder::MutableFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::addStateImpl(uint64_t a1, uint64_t *a2, float *a3)
{
  quasar::lm *v6;
  quasar::lm *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[16];

  v6 = (quasar::lm *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 200))(*(_QWORD *)(a1 + 88));
  v7 = v6;
  if ((_DWORD)v6 == *(_DWORD *)(a1 + 60))
  {
    quasar::lm::nullstream(v6);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v11, 5, "addStateImpl", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 178);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v11);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v11);
  }
  v9 = *a2;
  v8 = a2[1];
  while (v9 != v8)
  {
    (*(void (**)(_QWORD, quasar::lm *, uint64_t))(**(_QWORD **)(a1 + 88) + 208))(*(_QWORD *)(a1 + 88), v7, v9);
    v9 += 16;
  }
  return (*(uint64_t (**)(_QWORD, quasar::lm *, float))(**(_QWORD **)(a1 + 88) + 184))(*(_QWORD *)(a1 + 88), v7, *a3);
}

void sub_1AD7C60B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::lm::fst_builder::MutableFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::buildImpl(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 88) + 176))(*(_QWORD *)(a1 + 88), *(unsigned int *)(a1 + 56));
}

uint64_t quasar::lm::fst_builder::Options<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Options(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_WORD *)(result + 16) = 1;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::SqueezedFstBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7;
  quasar::lm *v8;
  quasar::lm *v14;
  _QWORD *Featurizer;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v7 = quasar::lm::fst_builder::FstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FstBuilder(a1, (__int128 *)a2, a3, a4, a5);
  *(_QWORD *)v7 = &unk_1E5D3A6C0;
  *(_QWORD *)(v7 + 88) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(v7 + 96) = 0;
  v8 = (quasar::lm *)operator new();
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)v8 = _D1;
  *((_QWORD *)v8 + 1) = 0x7FFFFFFE0000001ELL;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 104) = v8;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_QWORD *)(a1 + 512) = 0;
  if (*(_QWORD *)(a1 + 88))
  {
    v14 = (quasar::lm *)quasar::lm::nullstream(v8);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(&v28, 5, "SqueezedFstBuilder", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 211);
    Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"A stream should be supplied when using ", 39);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)".", 1);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v28);
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 88) + *(_QWORD *)(**(_QWORD **)(a1 + 88) - 24) + 32))
  {
    quasar::lm::LogMessage::LogMessage(&v28, 5, "SqueezedFstBuilder", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 212);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v28);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v28);
  }
  else
  {
    quasar::lm::nullstream(v14);
  }
  quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::writeHeader(a1);
  v17 = *(_QWORD *)(a1 + 88) + *(_QWORD *)(**(_QWORD **)(a1 + 88) - 24);
  if ((*(_BYTE *)(v17 + 32) & 5) != 0)
  {
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v36 = -1;
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v17 + 40) + 32))(&v28, *(_QWORD *)(v17 + 40), 0, 1, 16);
  }
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 48);
  v20 = v35;
  *(_OWORD *)(a1 + 208) = v34;
  *(_OWORD *)(a1 + 224) = v20;
  *(_QWORD *)(a1 + 240) = v36;
  v21 = v31;
  *(_OWORD *)(a1 + 144) = v30;
  *(_OWORD *)(a1 + 160) = v21;
  v22 = v33;
  *(_OWORD *)(a1 + 176) = v32;
  *(_OWORD *)(a1 + 192) = v22;
  v23 = v29;
  *(_OWORD *)(a1 + 112) = v28;
  *(_OWORD *)(a1 + 128) = v23;
  v24 = *(_QWORD *)(a1 + 240);
  v25 = v24 + 4 * v18;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_QWORD *)(a1 + 376) = v25;
  v26 = v25 + 12 * v19;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_QWORD *)(a1 + 512) = v26;
  while (v24 < v26)
  {
    std::ostream::put();
    ++v24;
    v26 = *(_QWORD *)(a1 + 512);
  }
  return a1;
}

void sub_1AD7C6398(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v1 + 104) = 0;
  if (v3)
    MEMORY[0x1AF44D190](v3, 0x1000C40451B5BE8);
  _Unwind_Resume(exception_object);
}

void quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::writeHeader(uint64_t a1)
{
  _QWORD *Featurizer;
  const std::string *v3;
  unsigned int v4;
  std::string __p;
  _BYTE v6[8];
  void *v7[2];
  void *v8[2];
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  void *v13;
  char v14;

  if (*(_BYTE *)(a1 + 96))
  {
    quasar::lm::LogMessage::LogMessage(v6, 5, "writeHeader", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 254);
    Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"Aligned file format is currently not supported.", 47);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v6);
  }
  else
  {
    quasar::lm::nullstream((quasar::lm *)a1);
  }
  std::string::basic_string[abi:ne180100]<0>(&v13, "");
  v9 = 0u;
  v10 = 0u;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)v8 = 0u;
  v11 = *(int *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 40);
  fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::TypeString(&__p);
  std::string::operator=((std::string *)v7, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v3 = (const std::string *)fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type();
  std::string::operator=((std::string *)&v8[1], v3);
  v4 = *(_BYTE *)(a1 + 96) == 0;
  *((_QWORD *)&v10 + 1) = 1;
  *(int8x8_t *)&v10 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v4), 0x1FuLL)), (int8x8_t)4, (int8x8_t)0x400000003);
  fst::FstHeader::Write();
  fst::SqueezedQuantizationOptions<true,false>::Write();
  if (SHIBYTE(v9) < 0)
    operator delete(v8[1]);
  if (SHIBYTE(v8[0]) < 0)
    operator delete(v7[0]);
  if (v14 < 0)
    operator delete(v13);
}

void sub_1AD7C6568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  if (a14 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a15);
  if (*(char *)(v15 - 17) < 0)
    operator delete(*(void **)(v15 - 40));
  _Unwind_Resume(a1);
}

void quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::addStateImpl(uint64_t a1, uint64_t *a2, float *a3)
{
  uint64_t v5;
  uint64_t v6;

  quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::writeState(a1, a3);
  v5 = *a2;
  v6 = a2[1];
  while (v5 != v6)
  {
    quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::writeArc(a1);
    v5 += 16;
  }
}

void quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::writeState(uint64_t a1, float *a2)
{
  _BOOL4 v3;
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char *v9;
  uint64_t v10;
  quasar::lm *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  quasar::lm *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[16];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _QWORD v45[16];
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v3 = (float)(*a2 + 0.00097656) < INFINITY || *a2 > INFINITY;
  v4 = *(_QWORD **)(a1 + 88);
  v5 = *(_OWORD *)(a1 + 224);
  v42 = *(_OWORD *)(a1 + 208);
  v43 = v5;
  v44 = *(_QWORD *)(a1 + 240);
  v6 = *(_OWORD *)(a1 + 160);
  v38 = *(_OWORD *)(a1 + 144);
  v39 = v6;
  v7 = *(_OWORD *)(a1 + 192);
  v40 = *(_OWORD *)(a1 + 176);
  v41 = v7;
  v8 = *(_OWORD *)(a1 + 128);
  v36 = *(_OWORD *)(a1 + 112);
  v37 = v8;
  MEMORY[0x1AF44CB90](v26, v4);
  v9 = (char *)v4 + *(_QWORD *)(*v4 - 24);
  if ((v9[32] & 5) == 0)
  {
    v10 = *((_QWORD *)v9 + 5);
    v47 = v36;
    v48 = v37;
    v49 = v38;
    v50 = v39;
    v55 = v44;
    v53 = v42;
    v54 = v43;
    v51 = v40;
    v52 = v41;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v10 + 40))(v45, v10, &v47, 16);
    if (v46 == -1)
      std::ios_base::clear((std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)), *(_DWORD *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 32) | 4);
  }
  MEMORY[0x1AF44CB9C](v26);
  v11 = (quasar::lm *)std::ostream::write();
  v12 = *(_QWORD *)(a1 + 240) + 4;
  *(_QWORD *)(a1 + 240) = v12;
  v13 = *(_QWORD *)(a1 + 88) + *(_QWORD *)(**(_QWORD **)(a1 + 88) - 24);
  if ((*(_BYTE *)(v13 + 32) & 5) != 0)
  {
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v14 = -1;
    v55 = -1;
  }
  else
  {
    v11 = (quasar::lm *)(*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v13 + 40) + 32))(&v47, *(_QWORD *)(v13 + 40), 0, 1, 16);
    v12 = *(_QWORD *)(a1 + 240);
    v14 = v55;
  }
  if (v12 == v14)
  {
    quasar::lm::nullstream(v11);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v45, 5, "writeState", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 307);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v45);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v45);
  }
  if (v3)
  {
    v15 = *(_QWORD **)(a1 + 88);
    v16 = *(_OWORD *)(a1 + 480);
    v34 = *(_OWORD *)(a1 + 496);
    v35 = *(_QWORD *)(a1 + 512);
    v17 = *(_OWORD *)(a1 + 432);
    v29 = *(_OWORD *)(a1 + 416);
    v30 = v17;
    v18 = *(_OWORD *)(a1 + 448);
    v32 = *(_OWORD *)(a1 + 464);
    v33 = v16;
    v31 = v18;
    v19 = *(_OWORD *)(a1 + 400);
    v27 = *(_OWORD *)(a1 + 384);
    v28 = v19;
    MEMORY[0x1AF44CB90](v26, v15);
    v20 = (char *)v15 + *(_QWORD *)(*v15 - 24);
    if ((v20[32] & 5) == 0)
    {
      v21 = *((_QWORD *)v20 + 5);
      v47 = v27;
      v48 = v28;
      v49 = v29;
      v50 = v30;
      v55 = v35;
      v53 = v33;
      v54 = v34;
      v51 = v31;
      v52 = v32;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v21 + 40))(v45, v21, &v47, 16);
      if (v46 == -1)
        std::ios_base::clear((std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)), *(_DWORD *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 32) | 4);
    }
    MEMORY[0x1AF44CB9C](v26);
    v22 = (quasar::lm *)std::ostream::write();
    v23 = *(_QWORD *)(a1 + 512) + 8;
    *(_QWORD *)(a1 + 512) = v23;
    v24 = *(_QWORD *)(a1 + 88) + *(_QWORD *)(**(_QWORD **)(a1 + 88) - 24);
    if ((*(_BYTE *)(v24 + 32) & 5) != 0)
    {
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v25 = -1;
      v55 = -1;
    }
    else
    {
      v22 = (quasar::lm *)(*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v24 + 40) + 32))(&v47, *(_QWORD *)(v24 + 40), 0, 1, 16);
      v23 = *(_QWORD *)(a1 + 512);
      v25 = v55;
    }
    if (v23 == v25)
    {
      quasar::lm::nullstream(v22);
    }
    else
    {
      quasar::lm::LogMessage::LogMessage(v45, 5, "writeState", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 318);
      quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v45);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v45);
    }
  }
}

void sub_1AD7C69FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  MEMORY[0x1AF44CB9C](va);
  _Unwind_Resume(a1);
}

void quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::writeArc(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  quasar::lm *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[16];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _QWORD v23[17];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(a1 + 344);
  v19 = *(_OWORD *)(a1 + 328);
  v20 = v2;
  v21 = *(_OWORD *)(a1 + 360);
  v3 = *(_OWORD *)(a1 + 264);
  v4 = *(_OWORD *)(a1 + 296);
  v5 = *(_OWORD *)(a1 + 312);
  v16 = *(_OWORD *)(a1 + 280);
  v17 = v4;
  v6 = *(_QWORD **)(a1 + 88);
  v22 = *(_QWORD *)(a1 + 376);
  v18 = v5;
  v14 = *(_OWORD *)(a1 + 248);
  v15 = v3;
  MEMORY[0x1AF44CB90](v13, v6);
  v7 = (char *)v6 + *(_QWORD *)(*v6 - 24);
  if ((v7[32] & 5) == 0)
  {
    v8 = *((_QWORD *)v7 + 5);
    v24 = v14;
    v25 = v15;
    v26 = v16;
    v27 = v17;
    v32 = v22;
    v30 = v20;
    v31 = v21;
    v28 = v18;
    v29 = v19;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v8 + 40))(v23, v8, &v24, 16);
    if (v23[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)), *(_DWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 32) | 4);
  }
  MEMORY[0x1AF44CB9C](v13);
  v9 = (quasar::lm *)std::ostream::write();
  v10 = *(_QWORD *)(a1 + 376) + 12;
  *(_QWORD *)(a1 + 376) = v10;
  v11 = *(_QWORD *)(a1 + 88) + *(_QWORD *)(**(_QWORD **)(a1 + 88) - 24);
  if ((*(_BYTE *)(v11 + 32) & 5) != 0)
  {
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v12 = -1;
    v32 = -1;
  }
  else
  {
    v9 = (quasar::lm *)(*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v11 + 40) + 32))(&v24, *(_QWORD *)(v11 + 40), 0, 1, 16);
    v10 = *(_QWORD *)(a1 + 376);
    v12 = v32;
  }
  if (v10 == v12)
  {
    quasar::lm::nullstream(v9);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v23, 5, "writeArc", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 333);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v23);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v23);
  }
}

void sub_1AD7C6C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  MEMORY[0x1AF44CB9C](va);
  _Unwind_Resume(a1);
}

uint64_t quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::buildImpl()
{
  return std::ostream::flush();
}

std::string *fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::TypeString@<X0>(std::string *a1@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(a1, "squeezed");
  return std::string::append(a1, "_acceptor");
}

void sub_1AD7C6CE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type()
{
  unsigned __int8 v0;
  std::string *v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;

  if ((v0 & 1) == 0
  {
    v2 = (std::string *)operator new();
    v3 = (_QWORD *)fst::TropicalWeightTpl<float>::Type();
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, "tropical"))
    {
      std::string::basic_string[abi:ne180100]<0>(v2, "standard");
    }
    else
    {
      v4 = fst::TropicalWeightTpl<float>::Type();
      if (*(char *)(v4 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
      }
      else
      {
        v5 = *(_OWORD *)v4;
        v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
        *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v5;
      }
    }
    fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type(void)::type = (uint64_t)v2;
  }
  return fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type(void)::type;
}

void sub_1AD7C6DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::SqueezedQuantizationOptions<true,false>::Write()
{
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  return 1;
}

uint64_t quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::SqueezedFstBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7;
  quasar::lm *v8;
  quasar::lm *v14;
  _QWORD *Featurizer;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v7 = quasar::lm::fst_builder::FstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::FstBuilder(a1, (__int128 *)a2, a3, a4, a5);
  *(_QWORD *)v7 = &unk_1E5D3A690;
  *(_QWORD *)(v7 + 88) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(v7 + 96) = 0;
  v8 = (quasar::lm *)operator new();
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)v8 = _D1;
  *((_QWORD *)v8 + 1) = 0x7FFFFFFE0000001ELL;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 104) = v8;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_QWORD *)(a1 + 512) = 0;
  if (*(_QWORD *)(a1 + 88))
  {
    v14 = (quasar::lm *)quasar::lm::nullstream(v8);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(&v28, 5, "SqueezedFstBuilder", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 211);
    Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"A stream should be supplied when using ", 39);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)".", 1);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v28);
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 88) + *(_QWORD *)(**(_QWORD **)(a1 + 88) - 24) + 32))
  {
    quasar::lm::LogMessage::LogMessage(&v28, 5, "SqueezedFstBuilder", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 212);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v28);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v28);
  }
  else
  {
    quasar::lm::nullstream(v14);
  }
  quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::writeHeader(a1);
  v17 = *(_QWORD *)(a1 + 88) + *(_QWORD *)(**(_QWORD **)(a1 + 88) - 24);
  if ((*(_BYTE *)(v17 + 32) & 5) != 0)
  {
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v36 = -1;
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v17 + 40) + 32))(&v28, *(_QWORD *)(v17 + 40), 0, 1, 16);
  }
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 48);
  v20 = v35;
  *(_OWORD *)(a1 + 208) = v34;
  *(_OWORD *)(a1 + 224) = v20;
  *(_QWORD *)(a1 + 240) = v36;
  v21 = v31;
  *(_OWORD *)(a1 + 144) = v30;
  *(_OWORD *)(a1 + 160) = v21;
  v22 = v33;
  *(_OWORD *)(a1 + 176) = v32;
  *(_OWORD *)(a1 + 192) = v22;
  v23 = v29;
  *(_OWORD *)(a1 + 112) = v28;
  *(_OWORD *)(a1 + 128) = v23;
  v24 = *(_QWORD *)(a1 + 240);
  v25 = v24 + 4 * v18;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_QWORD *)(a1 + 376) = v25;
  v26 = v25 + 16 * v19;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_QWORD *)(a1 + 512) = v26;
  while (v24 < v26)
  {
    std::ostream::put();
    ++v24;
    v26 = *(_QWORD *)(a1 + 512);
  }
  return a1;
}

void sub_1AD7C711C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v1 + 104) = 0;
  if (v3)
    MEMORY[0x1AF44D190](v3, 0x1000C40451B5BE8);
  _Unwind_Resume(exception_object);
}

void quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::writeHeader(uint64_t a1)
{
  _QWORD *Featurizer;
  const std::string *v3;
  unsigned int v4;
  std::string __p;
  _BYTE v6[8];
  void *v7[2];
  void *v8[2];
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  void *v13;
  char v14;

  if (*(_BYTE *)(a1 + 96))
  {
    quasar::lm::LogMessage::LogMessage(v6, 5, "writeHeader", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 254);
    Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"Aligned file format is currently not supported.", 47);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v6);
  }
  else
  {
    quasar::lm::nullstream((quasar::lm *)a1);
  }
  std::string::basic_string[abi:ne180100]<0>(&v13, "");
  v9 = 0u;
  v10 = 0u;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)v8 = 0u;
  v11 = *(int *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 40);
  fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::TypeString(&__p);
  std::string::operator=((std::string *)v7, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v3 = (const std::string *)fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type();
  std::string::operator=((std::string *)&v8[1], v3);
  v4 = *(_BYTE *)(a1 + 96) == 0;
  *((_QWORD *)&v10 + 1) = 1;
  *(int8x8_t *)&v10 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v4), 0x1FuLL)), (int8x8_t)4, (int8x8_t)0x400000003);
  fst::FstHeader::Write();
  fst::SqueezedQuantizationOptions<true,false>::Write();
  if (SHIBYTE(v9) < 0)
    operator delete(v8[1]);
  if (SHIBYTE(v8[0]) < 0)
    operator delete(v7[0]);
  if (v14 < 0)
    operator delete(v13);
}

void sub_1AD7C72EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  if (a14 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a15);
  if (*(char *)(v15 - 17) < 0)
    operator delete(*(void **)(v15 - 40));
  _Unwind_Resume(a1);
}

void quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::addStateImpl(uint64_t a1, uint64_t *a2, float *a3)
{
  uint64_t v5;
  uint64_t v6;

  quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::writeState(a1, a3);
  v5 = *a2;
  v6 = a2[1];
  while (v5 != v6)
  {
    quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::writeArc(a1);
    v5 += 16;
  }
}

void quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::writeState(uint64_t a1, float *a2)
{
  _BOOL4 v3;
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char *v9;
  uint64_t v10;
  quasar::lm *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  quasar::lm *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[16];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  _QWORD v45[16];
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v3 = (float)(*a2 + 0.00097656) < INFINITY || *a2 > INFINITY;
  v4 = *(_QWORD **)(a1 + 88);
  v5 = *(_OWORD *)(a1 + 224);
  v42 = *(_OWORD *)(a1 + 208);
  v43 = v5;
  v44 = *(_QWORD *)(a1 + 240);
  v6 = *(_OWORD *)(a1 + 160);
  v38 = *(_OWORD *)(a1 + 144);
  v39 = v6;
  v7 = *(_OWORD *)(a1 + 192);
  v40 = *(_OWORD *)(a1 + 176);
  v41 = v7;
  v8 = *(_OWORD *)(a1 + 128);
  v36 = *(_OWORD *)(a1 + 112);
  v37 = v8;
  MEMORY[0x1AF44CB90](v26, v4);
  v9 = (char *)v4 + *(_QWORD *)(*v4 - 24);
  if ((v9[32] & 5) == 0)
  {
    v10 = *((_QWORD *)v9 + 5);
    v47 = v36;
    v48 = v37;
    v49 = v38;
    v50 = v39;
    v55 = v44;
    v53 = v42;
    v54 = v43;
    v51 = v40;
    v52 = v41;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v10 + 40))(v45, v10, &v47, 16);
    if (v46 == -1)
      std::ios_base::clear((std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)), *(_DWORD *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 32) | 4);
  }
  MEMORY[0x1AF44CB9C](v26);
  v11 = (quasar::lm *)std::ostream::write();
  v12 = *(_QWORD *)(a1 + 240) + 4;
  *(_QWORD *)(a1 + 240) = v12;
  v13 = *(_QWORD *)(a1 + 88) + *(_QWORD *)(**(_QWORD **)(a1 + 88) - 24);
  if ((*(_BYTE *)(v13 + 32) & 5) != 0)
  {
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v14 = -1;
    v55 = -1;
  }
  else
  {
    v11 = (quasar::lm *)(*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v13 + 40) + 32))(&v47, *(_QWORD *)(v13 + 40), 0, 1, 16);
    v12 = *(_QWORD *)(a1 + 240);
    v14 = v55;
  }
  if (v12 == v14)
  {
    quasar::lm::nullstream(v11);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v45, 5, "writeState", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 307);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v45);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v45);
  }
  if (v3)
  {
    v15 = *(_QWORD **)(a1 + 88);
    v16 = *(_OWORD *)(a1 + 480);
    v34 = *(_OWORD *)(a1 + 496);
    v35 = *(_QWORD *)(a1 + 512);
    v17 = *(_OWORD *)(a1 + 432);
    v29 = *(_OWORD *)(a1 + 416);
    v30 = v17;
    v18 = *(_OWORD *)(a1 + 448);
    v32 = *(_OWORD *)(a1 + 464);
    v33 = v16;
    v31 = v18;
    v19 = *(_OWORD *)(a1 + 400);
    v27 = *(_OWORD *)(a1 + 384);
    v28 = v19;
    MEMORY[0x1AF44CB90](v26, v15);
    v20 = (char *)v15 + *(_QWORD *)(*v15 - 24);
    if ((v20[32] & 5) == 0)
    {
      v21 = *((_QWORD *)v20 + 5);
      v47 = v27;
      v48 = v28;
      v49 = v29;
      v50 = v30;
      v55 = v35;
      v53 = v33;
      v54 = v34;
      v51 = v31;
      v52 = v32;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v21 + 40))(v45, v21, &v47, 16);
      if (v46 == -1)
        std::ios_base::clear((std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)), *(_DWORD *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 32) | 4);
    }
    MEMORY[0x1AF44CB9C](v26);
    v22 = (quasar::lm *)std::ostream::write();
    v23 = *(_QWORD *)(a1 + 512) + 8;
    *(_QWORD *)(a1 + 512) = v23;
    v24 = *(_QWORD *)(a1 + 88) + *(_QWORD *)(**(_QWORD **)(a1 + 88) - 24);
    if ((*(_BYTE *)(v24 + 32) & 5) != 0)
    {
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v25 = -1;
      v55 = -1;
    }
    else
    {
      v22 = (quasar::lm *)(*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v24 + 40) + 32))(&v47, *(_QWORD *)(v24 + 40), 0, 1, 16);
      v23 = *(_QWORD *)(a1 + 512);
      v25 = v55;
    }
    if (v23 == v25)
    {
      quasar::lm::nullstream(v22);
    }
    else
    {
      quasar::lm::LogMessage::LogMessage(v45, 5, "writeState", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 318);
      quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v45);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v45);
    }
  }
}

void sub_1AD7C7780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  MEMORY[0x1AF44CB9C](va);
  _Unwind_Resume(a1);
}

void quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::writeArc(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  quasar::lm *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  _QWORD v24[17];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(a1 + 328);
  v3 = *(_OWORD *)(a1 + 360);
  v21 = *(_OWORD *)(a1 + 344);
  v22 = v3;
  v4 = *(_OWORD *)(a1 + 264);
  v5 = *(_OWORD *)(a1 + 296);
  v6 = *(_OWORD *)(a1 + 312);
  v17 = *(_OWORD *)(a1 + 280);
  v18 = v5;
  v7 = *(_QWORD **)(a1 + 88);
  v23 = *(_QWORD *)(a1 + 376);
  v19 = v6;
  v20 = v2;
  v15 = *(_OWORD *)(a1 + 248);
  v16 = v4;
  MEMORY[0x1AF44CB90](v14, v7);
  v8 = (char *)v7 + *(_QWORD *)(*v7 - 24);
  if ((v8[32] & 5) == 0)
  {
    v9 = *((_QWORD *)v8 + 5);
    v25 = v15;
    v26 = v16;
    v27 = v17;
    v28 = v18;
    v33 = v23;
    v31 = v21;
    v32 = v22;
    v29 = v19;
    v30 = v20;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v9 + 40))(v24, v9, &v25, 16);
    if (v24[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)), *(_DWORD *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 32) | 4);
  }
  MEMORY[0x1AF44CB9C](v14);
  v10 = (quasar::lm *)std::ostream::write();
  v11 = *(_QWORD *)(a1 + 376) + 16;
  *(_QWORD *)(a1 + 376) = v11;
  v12 = *(_QWORD *)(a1 + 88) + *(_QWORD *)(**(_QWORD **)(a1 + 88) - 24);
  if ((*(_BYTE *)(v12 + 32) & 5) != 0)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v13 = -1;
    v33 = -1;
  }
  else
  {
    v10 = (quasar::lm *)(*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v12 + 40) + 32))(&v25, *(_QWORD *)(v12 + 40), 0, 1, 16);
    v11 = *(_QWORD *)(a1 + 376);
    v13 = v33;
  }
  if (v11 == v13)
  {
    quasar::lm::nullstream(v10);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v24, 5, "writeArc", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/fst_builder.cpp", 333);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v24);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v24);
  }
}

void sub_1AD7C79CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  MEMORY[0x1AF44CB9C](va);
  _Unwind_Resume(a1);
}

uint64_t quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::buildImpl()
{
  return std::ostream::flush();
}

std::string *fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::TypeString@<X0>(std::string *a1@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(a1, "squeezed");
  return std::string::append(a1, "_transducer");
}

void sub_1AD7C7A50(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void quasar::lm::fst_builder::MutableFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~MutableFstBuilder()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::~SqueezedFstBuilder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D3A6C0;
  v2 = a1[13];
  a1[13] = 0;
  if (v2)
    MEMORY[0x1AF44D190](v2, 0x1000C40451B5BE8);
  return a1;
}

void quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::~SqueezedFstBuilder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D3A6C0;
  v2 = a1[13];
  a1[13] = 0;
  if (v2)
    MEMORY[0x1AF44D190](v2, 0x1000C40451B5BE8);
  JUMPOUT(0x1AF44D190);
}

_QWORD *quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::~SqueezedFstBuilder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D3A690;
  v2 = a1[13];
  a1[13] = 0;
  if (v2)
    MEMORY[0x1AF44D190](v2, 0x1000C40451B5BE8);
  return a1;
}

void quasar::lm::fst_builder::SqueezedFstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::~SqueezedFstBuilder(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D3A690;
  v2 = a1[13];
  a1[13] = 0;
  if (v2)
    MEMORY[0x1AF44D190](v2, 0x1000C40451B5BE8);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::TropicalWeightTpl<float>::Type()
{
  unsigned __int8 v0;
  uint64_t v2;
  std::string *v3;
  __int128 v4;
  std::string v5;

  {
    v2 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v5, "");
    v3 = std::string::insert(&v5, 0, "tropical");
    v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    *(_QWORD *)(v2 + 16) = *((_QWORD *)&v3->__r_.__value_.__l + 2);
    *(_OWORD *)v2 = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v5.__r_.__value_.__l.__data_);
    fst::TropicalWeightTpl<float>::Type(void)::type = v2;
  }
  return fst::TropicalWeightTpl<float>::Type(void)::type;
}

void sub_1AD7C7D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1AF44D190](v15, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

float kaldi::NccfToPovFeature(kaldi *this, float a2)
{
  float v2;
  float v3;

  v2 = -1.0;
  if (a2 >= -1.0)
    v2 = a2;
  if (a2 <= 1.0)
    v3 = v2;
  else
    v3 = 1.0;
  return pow(1.0001 - v3, 0.15) + -1.0;
}

float kaldi::NccfToPov(kaldi *this, float a2)
{
  float v2;
  double v3;
  double v4;
  long double v5;
  long double v6;
  float v7;

  v2 = fabsf(a2);
  if (v2 > 1.0)
    v2 = 1.0;
  v3 = v2;
  v4 = v2 + -1.0;
  v5 = exp(v4 * 7.5) * 5.4 + -5.2 + v2 * 4.8;
  v6 = v5 + exp(v3 * -10.0) * -2.0;
  v7 = v6 + exp(v4 * 20.0) * 4.2;
  return 1.0 / (exp(-v7) + 1.0);
}

void kaldi::ComputeCorrelation(uint64_t a1, int a2, int a3, int a4, _QWORD *a5, _QWORD *a6)
{
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  float v18;
  const float *v19;
  int v20;
  int v21;
  uint64_t v22;
  const float *v23[3];
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27[3];

  memset(v27, 0, sizeof(v27));
  kaldi::Vector<float>::Resize(v27, *(unsigned int *)(a1 + 8), 1);
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)v27, (const void **)a1);
  v25 = 0;
  v26 = 0;
  v24 = *(const void **)a1;
  LODWORD(v25) = a4;
  v12 = kaldi::VectorBase<float>::Sum((uint64_t)&v24);
  kaldi::VectorBase<float>::Add((uint64_t)v27, (float)-v12 / (float)a4);
  v23[2] = 0;
  v23[0] = (const float *)v27[0];
  v23[1] = (const float *)a4;
  v13 = kaldi::VecVec<float>((uint64_t)v23, v23);
  if (a2 <= a3)
  {
    v14 = v13;
    v15 = 0;
    v16 = 4 * a2;
    v17 = a3 - a2 + 1;
    do
    {
      v21 = 0;
      v22 = 0;
      v19 = (const float *)((char *)v27[0] + v16);
      v20 = a4;
      v18 = kaldi::VecVec<float>((uint64_t)&v19, &v19);
      *(float *)(*a5 + 4 * v15) = kaldi::VecVec<float>((uint64_t)v23, &v19);
      *(float *)(*a6 + 4 * v15++) = v14 * v18;
      v16 += 4;
    }
    while (v17 != (_DWORD)v15);
  }
  kaldi::Vector<float>::Destroy((uint64_t)v27);
}

void sub_1AD7C802C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::ComputeNccf(uint64_t *result, uint64_t *a2, uint64_t *a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  BOOL v11;
  float v12;
  float v13;

  v4 = *((unsigned int *)result + 2);
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = *result;
    v7 = *a2;
    v8 = *a3;
    do
    {
      v9 = *(float *)(v7 + 4 * v5) + a4;
      v10 = fabsf(sqrtf(v9));
      v11 = v9 == -INFINITY;
      v12 = INFINITY;
      if (!v11)
        v12 = v10;
      if (v12 == 0.0)
        v13 = 0.0;
      else
        v13 = *(float *)(v6 + 4 * v5) / v12;
      *(float *)(v8 + 4 * v5++) = v13;
    }
    while (v4 != v5);
  }
  return result;
}

uint64_t quasar::RecogAudioBufferBase::RecogAudioBufferBase(uint64_t this, char a2)
{
  *(_QWORD *)this = off_1E5D37C60;
  *(_BYTE *)(this + 8) = a2;
  return this;
}

uint64_t quasar::RecogAudioBufferBase::setServerSideEndPointing(uint64_t this, char a2)
{
  *(_BYTE *)(this + 8) = a2;
  return this;
}

_QWORD *quasar::operator<<(_QWORD *a1, _DWORD *a2)
{
  const char *v3;
  uint64_t v4;

  switch(*a2)
  {
    case 0:
      v3 = "AudioAdded";
      v4 = 10;
      goto LABEL_7;
    case 1:
      v3 = "AudioEndPointedClient";
      goto LABEL_5;
    case 2:
      v3 = "AudioEndPointedServer";
LABEL_5:
      v4 = 21;
      goto LABEL_7;
    case 3:
      v3 = "AudioMaxBufferLengthReached";
      v4 = 27;
LABEL_7:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
      break;
    default:
      return a1;
  }
  return a1;
}

{
  _QWORD *v4;
  char *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  void *__p[2];
  unsigned __int8 v16;
  void *v17[2];
  unsigned __int8 v18;

  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{\"gender\": ", 11);
  if (*a2)
    v5 = "\"Female\"";
  else
    v5 = "\"Male\"";
  std::string::basic_string[abi:ne180100]<0>(v17, v5);
  if ((v18 & 0x80u) == 0)
    v6 = v17;
  else
    v6 = (void **)v17[0];
  if ((v18 & 0x80u) == 0)
    v7 = v18;
  else
    v7 = (uint64_t)v17[1];
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", \"default\": ", 13);
  if (a2[1])
    v10 = "\"Female\"";
  else
    v10 = "\"Male\"";
  std::string::basic_string[abi:ne180100]<0>(__p, v10);
  if ((v16 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v16 & 0x80u) == 0)
    v12 = v16;
  else
    v12 = (uint64_t)__p[1];
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"}", 1);
  if ((char)v16 < 0)
    operator delete(__p[0]);
  if ((char)v18 < 0)
    operator delete(v17[0]);
  return a1;
}

uint64_t quasar::AppLmData::AppLmData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, __int128 *a6, _DWORD *a7)
{
  std::string::size_type v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t *v19;
  std::string::size_type v20;
  std::string::size_type size;
  void **v22;
  std::string *v23;
  std::string *v24;
  __int128 v25;
  quasar::PTree *PtreeOptional;
  uint64_t String;
  uint64_t v28;
  __int128 *v29;
  __int128 *i;
  std::string::size_type v31;
  uint64_t *v32;
  std::string *v33;
  uint64_t v34;
  _QWORD *v36;
  std::string *v37;
  std::string::size_type v38;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  std::string v44;
  std::string v45;
  __int128 *v46;
  __int128 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51[2];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  void *__p[2];
  __int128 v69;
  int v70;
  std::string v71;
  std::string v72;
  void *v73;
  char v74;
  uint64_t v75;
  std::string *v76;

  if (*(char *)(a3 + 23) < 0)
  {
    v14 = *(_QWORD *)(a3 + 8);
    if (v14)
    {
      std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)a3, v14);
      goto LABEL_7;
    }
  }
  else if (*(_BYTE *)(a3 + 23))
  {
    v71 = *(std::string *)a3;
    goto LABEL_7;
  }
  std::string::basic_string[abi:ne180100]<0>(&v71, "app-lm.data");
LABEL_7:
  v15 = *a4;
  *a4 = 0;
  v75 = v15;
  std::string::basic_string[abi:ne180100]<0>(&v73, "");
  quasar::LmData::LmData();
  if (v74 < 0)
    operator delete(v73);
  v16 = v75;
  v75 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = off_1E5D3BD28;
  if (*(char *)(a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 1048), *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  }
  else
  {
    v17 = *(_OWORD *)a5;
    *(_QWORD *)(a1 + 1064) = *(_QWORD *)(a5 + 16);
    *(_OWORD *)(a1 + 1048) = v17;
  }
  *(_DWORD *)(a1 + 1072) = *a7;
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 1080), *(const std::string::value_type **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    v18 = *a6;
    *(_QWORD *)(a1 + 1096) = *((_QWORD *)a6 + 2);
    *(_OWORD *)(a1 + 1080) = v18;
  }
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_DWORD *)(a1 + 1136) = 1065353216;
  v19 = (uint64_t *)(a1 + 1144);
  *(_QWORD *)(a1 + 1144) = 0;
  *(_QWORD *)(a1 + 1168) = 0;
  *(_QWORD *)(a1 + 1160) = 0;
  *(_QWORD *)(a1 + 1152) = a1 + 1160;
  *(_QWORD *)(a1 + 1176) = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    v20 = *(_QWORD *)(a3 + 8);
    if (v20)
    {
      std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)a3, v20);
      goto LABEL_25;
    }
  }
  else if (*(_BYTE *)(a3 + 23))
  {
    v72 = *(std::string *)a3;
    goto LABEL_25;
  }
  std::string::basic_string[abi:ne180100]<0>(&v72, "app-lm.data");
LABEL_25:
  v51[0] = 0;
  v51[1] = 0;
  *(_QWORD *)&v52 = 0;
  *(_OWORD *)__p = 0u;
  v69 = 0u;
  v70 = 1065353216;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)&v71, a2, (uint64_t *)v51, (uint64_t)__p);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  __p[0] = v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  quasar::SystemConfig::enforceMinVersion((uint64_t)&v71, 189, 0, (uint64_t)&v72);
  if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v72.__r_.__value_.__r.__words[2]);
  else
    size = v72.__r_.__value_.__l.__size_;
  v22 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 1);
  if (SBYTE7(v69) < 0)
    v22 = (void **)__p[0];
  if (size)
  {
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &v72;
    else
      v23 = (std::string *)v72.__r_.__value_.__r.__words[0];
    memmove(v22, v23, size);
  }
  *(_WORD *)((char *)v22 + size) = 46;
  quasar::SystemConfig::setPrefix(&v71, (const std::string *)__p);
  if (SBYTE7(v69) < 0)
    operator delete(__p[0]);
  memset(&v44, 0, sizeof(v44));
  *(_OWORD *)v51 = 0u;
  v52 = 0u;
  LODWORD(v53) = 1065353216;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)__p, a5, (uint64_t *)&v44, (uint64_t)v51);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v51);
  v51[0] = &v44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v51);
  std::operator+<char>();
  v24 = std::string::append(&v44, ".lattice-biglm-lme-faster.supported-lme-template-list");
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  *(_QWORD *)&v52 = *((_QWORD *)&v24->__r_.__value_.__l + 2);
  *(_OWORD *)v51 = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  PtreeOptional = (quasar::PTree *)quasar::SystemConfig::getPtreeOptional((uint64_t)__p, (uint64_t)v51);
  if (SBYTE7(v52) < 0)
    operator delete(v51[0]);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (!PtreeOptional)
  {
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    *(_OWORD *)v51 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"Couldn't get supported LME list", 31);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v51);
  }
  String = quasar::PTree::getString(PtreeOptional);
  std::string::basic_string[abi:ne180100]<0>(v51, ",");
  quasar::splitStringSimple(String, (uint64_t *)v51, &v49);
  if (SBYTE7(v52) < 0)
    operator delete(v51[0]);
  v28 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(v49, v50, (unsigned __int8 **)(a1 + 48));
  if (v28 == v50)
  {
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    *(_OWORD *)v51 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v51);
    v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"oov-replacement value ", 22);
    v40 = *(char *)(a1 + 71);
    if (v40 >= 0)
      v41 = a1 + 48;
    else
      v41 = *(_QWORD *)(a1 + 48);
    if (v40 >= 0)
      v42 = *(unsigned __int8 *)(a1 + 71);
    else
      v42 = *(_QWORD *)(a1 + 56);
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, v41, v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" is not a supported LME for specified decoder chain", 51);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v51);
  }
  v46 = 0;
  v47 = 0;
  v48 = 0;
  std::string::basic_string[abi:ne180100]<0>(v51, "slot-to-lme-map");
  std::string::basic_string[abi:ne180100]<0>(&v44, "Map from developer slots to LMEs");
  quasar::SystemConfig::Register<std::vector<std::pair<std::string,std::string>>>((uint64_t)&v71, (const void **)v51, (uint64_t)&v46, (uint64_t)&v44, 0, 189, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SBYTE7(v52) < 0)
    operator delete(v51[0]);
  std::string::basic_string[abi:ne180100]<0>(v51, "max-lme-per-utterance");
  std::string::basic_string[abi:ne180100]<0>(&v44, "The number of the max lme per utterance. Utterances containing more LME's will be dropped");
  quasar::SystemConfig::Register<int>((uint64_t)&v71, (const void **)v51, a1 + 1180, (uint64_t)&v44, 0, 209, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SBYTE7(v52) < 0)
    operator delete(v51[0]);
  quasar::SystemConfig::readPtree((uint64_t)&v71, (uint64_t)&v72, 0, 0);
  v29 = v46;
  for (i = v47; v29 != i; v29 += 3)
  {
    std::pair<std::string,std::string>::pair[abi:ne180100](&v44, v29);
    v31 = HIBYTE(v45.__r_.__value_.__r.__words[2]);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v31 = v45.__r_.__value_.__l.__size_;
    if (!v31)
    {
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      *(_OWORD *)v51 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v51);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"Empty LME template for slot ", 28);
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = &v44;
      else
        v37 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v38 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v38 = v44.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v51);
    }
    v76 = &v44;
    v32 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1152), (const void **)&v44.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v76);
    std::string::operator=((std::string *)(v32 + 7), &v45);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
  }
  v33 = (std::string *)operator new();
  quasar::PhonesetMapping::PhonesetMapping(v33, (__int128 *)(a1 + 24));
  v34 = *v19;
  *v19 = (uint64_t)v33;
  if (v34)
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100](a1 + 1144, v34);
  v51[0] = &v46;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v51);
  v51[0] = &v49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v51);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)__p);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&v71);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1AD7C8A44(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  JUMPOUT(0x1AD7C8A50);
}

quasar::SystemConfig *quasar::SystemConfig::SystemConfig(quasar::SystemConfig *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  quasar::SystemConfig *v8;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[17];

  v8 = quasar::SystemConfig::SystemConfig(a1);
  if (quasar::SystemConfig::readJsonFile((uint64_t)v8, a2, a3, a4, 0, 0) == 2)
  {
    memset(v14, 0, sizeof(v14));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Error reading JSON config file: ", 32);
    v11 = *(char *)(a2 + 23);
    if (v11 >= 0)
      v12 = a2;
    else
      v12 = *(_QWORD *)a2;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a2 + 23);
    else
      v13 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v14);
  }
  return a1;
}

void sub_1AD7C8BD4(_Unwind_Exception *a1)
{
  quasar::SystemConfig *v1;

  quasar::SystemConfig::~SystemConfig(v1);
  _Unwind_Resume(a1);
}

void quasar::SystemConfig::Register<std::vector<std::pair<std::string,std::string>>>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t *v15;
  uint64_t *v16;
  uint64_t **v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  void **v21;

  quasar::SystemConfig::Register(a1, a2, a3);
  quasar::SystemConfig::Version::Version(&v20, a6, a7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v21 = __p;
  v15 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1464), (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
  v15[7] = v20;
  if (v19 < 0)
    operator delete(__p[0]);
  quasar::SystemConfig::Version::Version(&v20, a8, a9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v21 = __p;
  v16 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1488), (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
  v16[7] = v20;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (!a5)
      return;
  }
  else if (!a5)
  {
    return;
  }
  __p[0] = (void *)(a1 + 816);
  v17 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1512), (const void **)(a1 + 816), (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v17, (const void **)__p, (uint64_t)__p);
  if (v19 < 0)
    operator delete(__p[0]);
}

void sub_1AD7C8D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void quasar::AppLmData::getOrderedOovs(quasar::AppLmData *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t *v3;
  char *i;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = a2 + 2;
  for (i = (char *)this + 1120; ; std::string::operator=((std::string *)(v6 - 56), (const std::string *)(i + 16)))
  {
    i = *(char **)i;
    v5 = a2[1];
    if (!i)
      break;
    if (v5 >= *v3)
    {
      v6 = std::vector<quasar::AppLmData::Oov>::__emplace_back_slow_path<quasar::AppLmData::Oov const&>(a2, (__int128 *)(i + 40));
    }
    else
    {
      std::allocator<quasar::AppLmData::Oov>::construct[abi:ne180100]<quasar::AppLmData::Oov,quasar::AppLmData::Oov const&>((int)v3, (std::string *)a2[1], (__int128 *)(i + 40));
      v6 = v5 + 56;
      a2[1] = v5 + 56;
    }
    a2[1] = v6;
  }
  v7 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a2) >> 3));
  if (v5 == *a2)
    v8 = 0;
  else
    v8 = v7;
  std::__introsort<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *,false>(*a2, a2[1], v8, 1);
}

void sub_1AD7C8EA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<quasar::AppLmData::Oov>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::AppLmData::observeOov(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  std::string v7;
  void *__p;
  char v9;
  char *v10[4];
  __int128 v11;
  uint64_t v12;
  char **v13;
  char *v14[2];
  int v15;

  v5 = a1 + 1104;
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 1104), a2))
  {
    v7.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    v6 = std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v7);
    *((_DWORD *)v6 + 22) += a3;
  }
  else
  {
    v11 = 0uLL;
    v14[0] = 0;
    v14[1] = 0;
    v12 = 0;
    v13 = v14;
    v15 = a3;
    std::pair<std::string const,quasar::AppLmData::Oov>::pair[abi:ne180100]<std::string&,quasar::AppLmData::Oov&,0>(&v7, (__int128 *)a2, &v11);
    std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::AppLmData::Oov>>(v5, (unsigned __int8 *)&v7, (__int128 *)&v7);
    std::__tree<std::string>::destroy((uint64_t)v10, v10[1]);
    if (v9 < 0)
      operator delete(__p);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
    std::__tree<std::string>::destroy((uint64_t)&v13, v14[0]);
    if (SHIBYTE(v12) < 0)
      operator delete((void *)v11);
  }
}

void sub_1AD7C8FC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  std::pair<std::string const,quasar::AppLmData::Oov>::~pair((uint64_t)va);
  quasar::AppLmData::Oov::~Oov((char **)va1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,quasar::AppLmData::Oov>::~pair(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 48, *(char **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void quasar::AppLmData::Oov::~Oov(char **this)
{
  std::__tree<std::string>::destroy((uint64_t)(this + 3), this[4]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t quasar::AppLmData::countOovLme(quasar::AppLmData *this)
{
  unsigned int v1;
  int v2;
  BOOL v3;
  uint64_t v4;
  _OWORD v6[17];

  v1 = *((_DWORD *)this + 294) + 1;
  *((_DWORD *)this + 294) = v1;
  v2 = *((_DWORD *)this + 295);
  v3 = v1 <= v2 || v2 < 1;
  v4 = v3;
  if (!v3 && quasar::gLogLevel >= 6)
  {
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Utterance skipped as number of LMEs in utterance exceed threshold", 65);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v6);
  }
  return v4;
}

void sub_1AD7C9110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::AppLmData::addSentence(uint64_t a1, unsigned int *a2, std::string *a3, uint64_t a4, uint64_t a5, int a6, _DWORD *a7)
{
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string::size_type size;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  std::string *v20;
  uint64_t v21;
  __int128 *v22;
  __int128 v23;
  void *v24;
  int v25;
  uint64_t v26;
  std::string *v27;
  __int128 v28;
  void **v29;
  uint64_t v30;
  std::string v34;
  void *__p[2];
  void *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::string __str;
  unsigned int v58;
  std::string v59;
  std::string v60;

  v11 = *a2;
  memset(&v60, 0, sizeof(v60));
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v59 = *(std::string *)a4;
  v58 = 1;
  if (a6)
  {
    if (*(char *)(a4 + 23) < 0)
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
    else
      __str = *(std::string *)a4;
    quasar::LmData::parseCountPhrase(&__str, (uint64_t)&v59, (int *)&v58);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  v54 = 0;
  v55 = 0;
  v56 = 0;
  if (quasar::LmData::tokenizeSentence(a1, (uint64_t)&v59, &v54))
  {
    __p[0] = 0;
    __p[1] = 0;
    v36 = 0;
    *(_DWORD *)(a1 + 1176) = 0;
    v13 = v54;
    v12 = v55;
    if (v54 != v55)
    {
      while (1)
      {
        v14 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 1152, (const void **)v13);
        if (a1 + 1160 == v14)
          break;
        v15 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
        if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
        else
          size = v60.__r_.__value_.__l.__size_;
        v17 = *(unsigned __int8 *)(v13 + 23);
        v18 = (char)v17;
        if ((v17 & 0x80u) != 0)
          v17 = *(_QWORD *)(v13 + 8);
        if (size != v17)
          goto LABEL_30;
        if (v18 >= 0)
          v19 = (unsigned __int8 *)v13;
        else
          v19 = *(unsigned __int8 **)v13;
        if ((*((_BYTE *)&v60.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (memcmp(v60.__r_.__value_.__l.__data_, v19, v60.__r_.__value_.__l.__size_))
            goto LABEL_30;
        }
        else if (*((_BYTE *)&v60.__r_.__value_.__s + 23))
        {
          v20 = &v60;
          while (v20->__r_.__value_.__s.__data_[0] == *v19)
          {
            v20 = (std::string *)((char *)v20 + 1);
            ++v19;
            if (!--v15)
              goto LABEL_38;
          }
LABEL_30:
          std::string::operator=(&v60, (const std::string *)v13);
          ++*(_DWORD *)(a1 + 1176);
          v21 = v14 + 56;
LABEL_31:
          v22 = (__int128 *)__p[1];
          if (__p[1] >= v36)
          {
            v24 = (void *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)__p, (__int128 *)v21);
          }
          else
          {
            if (*(char *)(v21 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__p[1], *(const std::string::value_type **)v21, *(_QWORD *)(v21 + 8));
            }
            else
            {
              v23 = *(_OWORD *)v21;
              *((_QWORD *)__p[1] + 2) = *(_QWORD *)(v21 + 16);
              *v22 = v23;
            }
            v24 = (char *)v22 + 24;
          }
          __p[1] = v24;
        }
LABEL_38:
        v13 += 32;
        if (v13 == v12)
          goto LABEL_39;
      }
      MEMORY[0x1AF44C914](&v60, "");
      v21 = v13;
      goto LABEL_31;
    }
LABEL_39:
    v25 = *(_DWORD *)(a1 + 1180);
    if (v25 <= 0 || *(_DWORD *)(a1 + 1176) <= v25)
    {
      v26 = quasar::LmData::addTokenizedSentence(a1, *a2, a3, (uint64_t)__p, (_DWORD *)(a1 + 60 * v11 + 108), 0, v58, a7);
    }
    else
    {
      if (quasar::gLogLevel >= 6)
      {
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v37 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"Utterance skipped as number of LMEs in utterance exceed threshold", 65);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v37);
      }
      v26 = 0;
      *(_DWORD *)(a1 + 60 * v11 + 116) += v58;
    }
    *(_QWORD *)&v37 = __p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  }
  else
  {
    if (quasar::gLogLevel >= 6)
    {
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v37);
      std::operator+<char>();
      v27 = std::string::append(&v34, "'");
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v36 = (void *)v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v36) >= 0)
        v29 = __p;
      else
        v29 = (void **)__p[0];
      if (SHIBYTE(v36) >= 0)
        v30 = HIBYTE(v36);
      else
        v30 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)v29, v30);
      if (SHIBYTE(v36) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v37);
    }
    v26 = 0;
    *(_DWORD *)(a1 + 60 * v11 + 116) += v58;
  }
  *(_QWORD *)&v37 = &v54;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  return v26;
}

void sub_1AD7C9554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void **p_p)
{
  uint64_t v25;

  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&p_p);
  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
  p_p = (void **)(v25 - 200);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&p_p);
  if (*(char *)(v25 - 121) < 0)
    operator delete(*(void **)(v25 - 144));
  if (*(char *)(v25 - 97) < 0)
    operator delete(*(void **)(v25 - 120));
  _Unwind_Resume(a1);
}

void quasar::AppLmData::addOovTokensFromSentence(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t i;
  __int128 v7;
  unsigned __int8 *v8;
  __int128 v9;
  uint64_t v10;
  char **v11;
  char *v12[2];
  int v13;
  std::string v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char *v18[28];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = a3 + 8;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  if (quasar::LmData::tokenizeSentence(a1, a2, &v19))
  {
    v5 = v19;
    for (i = v20; v5 != i; v5 += 32)
    {
      if (*(char *)(v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
      }
      else
      {
        v7 = *(_OWORD *)v5;
        v14.__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
        *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
      }
      if (quasar::lm::SymbolTableData::tokenIsOov(*(quasar::lm::SymbolTableData **)(a1 + 96)))
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a3, (const void **)&v14.__r_.__value_.__l.__data_, (uint64_t)&v14);
        if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 1104), (unsigned __int8 *)&v14))
        {
          *(_QWORD *)&v9 = &v14;
          v8 = std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 1104, (unsigned __int8 *)&v14, (uint64_t)&std::piecewise_construct, (__int128 **)&v9);
          ++*((_DWORD *)v8 + 22);
        }
        else
        {
          v9 = 0uLL;
          v12[0] = 0;
          v12[1] = 0;
          v10 = 0;
          v11 = v12;
          v13 = 1;
          std::pair<std::string const,quasar::AppLmData::Oov>::pair[abi:ne180100]<std::string const&,quasar::AppLmData::Oov&,0>((std::string *)&v15, (__int128 *)&v14, &v9);
          std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::AppLmData::Oov>>(a1 + 1104, (unsigned __int8 *)&v15, &v15);
          std::__tree<std::string>::destroy((uint64_t)v18, v18[1]);
          if (SHIBYTE(v17) < 0)
            operator delete(*((void **)&v16 + 1));
          if (SBYTE7(v16) < 0)
            operator delete((void *)v15);
          std::__tree<std::string>::destroy((uint64_t)&v11, v12[0]);
          if (SHIBYTE(v10) < 0)
            operator delete((void *)v9);
        }
      }
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
    }
  }
  else if (quasar::gLogLevel >= 6)
  {
    memset(v18, 0, sizeof(v18));
    v16 = 0u;
    v17 = 0u;
    v15 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Failed to tokenize sentence", 27);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v15);
  }
  *(_QWORD *)&v15 = &v19;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_1AD7C9864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;

  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a24);
  a24 = v25 - 128;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  std::__tree<std::string>::destroy(v24, *(char **)(v24 + 8));
  _Unwind_Resume(a1);
}

uint64_t quasar::AppLmData::setPronsForWord(uint64_t a1, void *a2, std::string *a3, _BYTE *a4)
{
  std::string::size_type *v8;
  std::string::size_type *v9;
  std::string::size_type *v10;
  BOOL v11;
  std::string::size_type v12;
  std::string *v13;
  std::string *v14;
  _QWORD *v15;
  int v16;
  unsigned __int8 *v17;
  std::string *v18;
  uint64_t **v19;
  std::string::size_type *p_size;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type size;
  uint64_t v25;
  const void ***v26;
  std::string v28;
  char *v29[4];
  std::string v30;
  void *__p[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _QWORD v48[2];

  if (quasar::lm::SymbolTableData::tokenIsOov(*(quasar::lm::SymbolTableData **)(a1 + 96)))
  {
    *(_OWORD *)&v30.__r_.__value_.__r.__words[1] = 0uLL;
    v30.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30.__r_.__value_.__l.__size_;
    if (*a4)
    {
      v8 = (std::string::size_type *)a3->__r_.__value_.__r.__words[0];
      v48[0] = &v30;
      v48[1] = &v30.__r_.__value_.__l.__size_;
      if (v8 != &a3->__r_.__value_.__r.__words[1])
      {
        do
        {
          if (*((char *)v8 + 55) < 0)
            std::string::__init_copy_ctor_external(&v28, (const std::string::value_type *)v8[4], v8[5]);
          else
            v28 = *(std::string *)(v8 + 4);
          quasar::PhonesetMapping::getNvASRPhoneSequence(*(_QWORD *)(a1 + 1144), (uint64_t)&v28, (uint64_t)__p);
          std::insert_iterator<std::set<std::string>>::operator=[abi:ne180100]((uint64_t)v48, (const void **)__p);
          if (SBYTE7(v32) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v28.__r_.__value_.__l.__data_);
          v9 = (std::string::size_type *)v8[1];
          if (v9)
          {
            do
            {
              v10 = v9;
              v9 = (std::string::size_type *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              v10 = (std::string::size_type *)v8[2];
              v11 = *v10 == (_QWORD)v8;
              v8 = v10;
            }
            while (!v11);
          }
          v8 = v10;
        }
        while (v10 != &a3->__r_.__value_.__r.__words[1]);
        v12 = v30.__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)v30.__r_.__value_.__l.__data_ != &v30.__r_.__value_.__r.__words[1])
        {
          do
          {
            if (*(char *)(v12 + 55) < 0)
            {
              if (!*(_QWORD *)(v12 + 40))
              {
LABEL_61:
                if (quasar::gLogLevel >= 5)
                {
                  v46 = 0u;
                  v47 = 0u;
                  v44 = 0u;
                  v45 = 0u;
                  v42 = 0u;
                  v43 = 0u;
                  v40 = 0u;
                  v41 = 0u;
                  v38 = 0u;
                  v39 = 0u;
                  v36 = 0u;
                  v37 = 0u;
                  v34 = 0u;
                  v35 = 0u;
                  v32 = 0u;
                  v33 = 0u;
                  *(_OWORD *)__p = 0u;
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Pronunciation mapping failed", 28);
                  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
                }
                v25 = 0;
                goto LABEL_59;
              }
            }
            else if (!*(_BYTE *)(v12 + 55))
            {
              goto LABEL_61;
            }
            v13 = *(std::string **)(v12 + 8);
            if (v13)
            {
              do
              {
                v14 = v13;
                v13 = (std::string *)v13->__r_.__value_.__r.__words[0];
              }
              while (v13);
            }
            else
            {
              do
              {
                v14 = *(std::string **)(v12 + 16);
                v11 = v14->__r_.__value_.__r.__words[0] == v12;
                v12 = (std::string::size_type)v14;
              }
              while (!v11);
            }
            v12 = (std::string::size_type)v14;
          }
          while (v14 != (std::string *)&v30.__r_.__value_.__r.__words[1]);
        }
      }
    }
    v15 = (_QWORD *)(a1 + 1104);
    if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v15, (unsigned __int8 *)a2))
    {
      v16 = *a4;
      __p[0] = a2;
      v17 = std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v15, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
      v18 = &v30;
      if (!v16)
        v18 = a3;
      v19 = (uint64_t **)(v17 + 64);
      if (v19 != (uint64_t **)v18)
      {
        if (v16)
          p_size = &v30.__r_.__value_.__l.__size_;
        else
          p_size = &a3->__r_.__value_.__l.__size_;
        std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v19, v18->__r_.__value_.__l.__data_, p_size);
      }
    }
    else
    {
      if (*a4)
        v26 = (const void ***)&v30;
      else
        v26 = (const void ***)a3;
      quasar::AppLmData::Oov::Oov(&v28, (__int128 *)a2, v26, 0);
      std::pair<std::string,quasar::AppLmData::Oov>::pair[abi:ne180100]<std::string const&,quasar::AppLmData::Oov&,0>((std::string *)__p, (__int128 *)a2, (__int128 *)&v28);
      std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__emplace_unique_key_args<std::string,std::pair<std::string,quasar::AppLmData::Oov>>((uint64_t)v15, (unsigned __int8 *)__p, (__int128 *)__p);
      std::__tree<std::string>::destroy((uint64_t)&v34, *((char **)&v34 + 1));
      if (SHIBYTE(v33) < 0)
        operator delete(*((void **)&v32 + 1));
      if (SBYTE7(v32) < 0)
        operator delete(__p[0]);
      std::__tree<std::string>::destroy((uint64_t)v29, v29[1]);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
    }
    v25 = 1;
LABEL_59:
    std::__tree<std::string>::destroy((uint64_t)&v30, (char *)v30.__r_.__value_.__l.__size_);
  }
  else
  {
    if (quasar::gLogLevel >= 5)
    {
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator+<char>();
      v21 = std::string::append(&v30, " (word is not OOV)");
      v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = &v28;
      else
        v23 = (std::string *)v28.__r_.__value_.__r.__words[0];
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      else
        size = v28.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v23, size);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    return 0;
  }
  return v25;
}

void sub_1AD7C9CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, char *a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a25);
  std::__tree<std::string>::destroy((uint64_t)&a19, a20);
  _Unwind_Resume(a1);
}

uint64_t quasar::AppLmData::canAddProns(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  uint64_t v6;
  BOOL v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string *v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type size;
  std::string v29;
  void *__p[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  std::string v47;
  _QWORD v48[2];

  v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a2 + 8);
  if (v6)
    v7 = a3[2] == 0;
  else
    v7 = 1;
  if (v7)
  {
    if (quasar::gLogLevel >= 5)
    {
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"orthography=", 12);
      v9 = *(char *)(a2 + 23);
      if (v9 >= 0)
        v10 = a2;
      else
        v10 = *(_QWORD *)a2;
      if (v9 >= 0)
        v11 = *(unsigned __int8 *)(a2 + 23);
      else
        v11 = *(_QWORD *)(a2 + 8);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" pronSize=", 10);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    return 3;
  }
  if (!quasar::lm::SymbolTableData::tokenIsOov(*(quasar::lm::SymbolTableData **)(a1 + 96)))
  {
    if (quasar::gLogLevel >= 5)
    {
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator+<char>();
      v24 = std::string::append(&v29, " (word is not OOV)");
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &v47;
      else
        v26 = (std::string *)v47.__r_.__value_.__r.__words[0];
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
      else
        size = v47.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v26, size);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    return 1;
  }
  *(_OWORD *)&v29.__r_.__value_.__r.__words[1] = 0uLL;
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29.__r_.__value_.__l.__size_;
  if (!a4)
    goto LABEL_44;
  v18 = (_QWORD *)*a3;
  v16 = a3 + 1;
  v17 = v18;
  v48[0] = &v29;
  v48[1] = &v29.__r_.__value_.__l.__size_;
  if (v18 == v16)
    goto LABEL_44;
  do
  {
    if (*((char *)v17 + 55) < 0)
      std::string::__init_copy_ctor_external(&v47, (const std::string::value_type *)v17[4], v17[5]);
    else
      v47 = *(std::string *)(v17 + 4);
    quasar::PhonesetMapping::getNvASRPhoneSequence(*(_QWORD *)(a1 + 1144), (uint64_t)&v47, (uint64_t)__p);
    std::insert_iterator<std::set<std::string>>::operator=[abi:ne180100]((uint64_t)v48, (const void **)__p);
    if (SBYTE7(v31) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    v19 = (_QWORD *)v17[1];
    if (v19)
    {
      do
      {
        v20 = v19;
        v19 = (_QWORD *)*v19;
      }
      while (v19);
    }
    else
    {
      do
      {
        v20 = (_QWORD *)v17[2];
        v7 = *v20 == (_QWORD)v17;
        v17 = v20;
      }
      while (!v7);
    }
    v17 = v20;
  }
  while (v20 != v16);
  v21 = v29.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v29.__r_.__value_.__l.__data_ == &v29.__r_.__value_.__r.__words[1])
  {
LABEL_44:
    v13 = 0;
    goto LABEL_45;
  }
  while ((*(char *)(v21 + 55) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v21 + 55))
      goto LABEL_60;
LABEL_38:
    v22 = *(std::string **)(v21 + 8);
    if (v22)
    {
      do
      {
        v23 = v22;
        v22 = (std::string *)v22->__r_.__value_.__r.__words[0];
      }
      while (v22);
    }
    else
    {
      do
      {
        v23 = *(std::string **)(v21 + 16);
        v7 = v23->__r_.__value_.__r.__words[0] == v21;
        v21 = (std::string::size_type)v23;
      }
      while (!v7);
    }
    v21 = (std::string::size_type)v23;
    if (v23 == (std::string *)&v29.__r_.__value_.__r.__words[1])
      goto LABEL_44;
  }
  if (*(_QWORD *)(v21 + 40))
    goto LABEL_38;
LABEL_60:
  if (quasar::gLogLevel >= 5)
  {
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Pronunciation mapping failed", 28);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  v13 = 2;
LABEL_45:
  std::__tree<std::string>::destroy((uint64_t)&v29, (char *)v29.__r_.__value_.__l.__size_);
  return v13;
}

void sub_1AD7CA0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, char *a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a16);
  std::__tree<std::string>::destroy((uint64_t)&__p, a11);
  _Unwind_Resume(a1);
}

void quasar::AppLmData::generateLmeData(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t *v5;
  int v6;
  quasar::SystemConfig *v7;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  const void **v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  char *v27;
  void *v28;
  uint64_t *v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  void **v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  void *v68[2];
  _OWORD v69[16];
  uint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  int v74;
  _OWORD v75[2];
  int v76;
  char **v77;
  char *v78[2];
  char **v79;
  char *v80[2];
  __int128 v81;
  uint64_t v82;
  void *v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  uint64_t *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  char *v93;
  std::__shared_weak_count *v94;
  void *__p[2];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  char *v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  _BYTE v116[160];
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  _QWORD v134[22];

  v134[20] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "•|\\(|\\)|\"|\\[|\\]|\\{|\\}|®|,|;|\\?|\\!|\\\\");
  quasar::BasicTextSanitizer::BasicTextSanitizer((quasar::TextSanitizer *)v116, (uint64_t *)__p);
  if (SBYTE7(v96) < 0)
    operator delete(__p[0]);
  std::allocate_shared[abi:ne180100]<quasar::LmeDataFactory,std::allocator<quasar::LmeDataFactory>,std::string const&,void>(a1 + 1048, &v114);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v114 + 16))(v114))
  {
    v111 = 0u;
    v110 = 0u;
    v109 = 0u;
    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    *(_OWORD *)__p = 0u;
    v96 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"lmeDataFactory initialization with ", 35);
    v51 = *(char *)(a1 + 1071);
    if (v51 >= 0)
      v52 = a1 + 1048;
    else
      v52 = *(_QWORD *)(a1 + 1048);
    if (v51 >= 0)
      v53 = *(unsigned __int8 *)(a1 + 1071);
    else
      v53 = *(_QWORD *)(a1 + 1056);
    v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, v52, v53);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" failed", 7);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v65 = a2;
  v4 = (char *)operator new(0x68uLL);
  *((_QWORD *)v4 + 1) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E5D428E0;
  *((_QWORD *)v4 + 3) = &unk_1E5D35128;
  v6 = *(_DWORD *)(a1 + 1072);
  v4[32] = 0;
  *((_DWORD *)v4 + 9) = v6;
  *((_QWORD *)v4 + 5) = v4 + 40;
  *((_QWORD *)v4 + 6) = v4 + 40;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *((_QWORD *)v4 + 11) = 0;
  *((_DWORD *)v4 + 24) = 1065353216;
  v112 = v4 + 24;
  v113 = (std::__shared_weak_count *)v4;
  v68[0] = 0;
  v68[1] = 0;
  *(_QWORD *)&v69[0] = 0;
  v118 = 0u;
  v117 = 0u;
  LODWORD(v119) = 1065353216;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)__p, a1 + 1048, (uint64_t *)v68, (uint64_t)&v117);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v117);
  *(_QWORD *)&v117 = v68;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
  if (!quasar::QuasarG2PFactory::g2pModelExist((quasar::QuasarG2PFactory *)__p, v7))
  {
    v133 = 0u;
    v132 = 0u;
    v131 = 0u;
    v130 = 0u;
    v129 = 0u;
    v128 = 0u;
    v127 = 0u;
    v126 = 0u;
    v125 = 0u;
    v124 = 0u;
    v123 = 0u;
    v122 = 0u;
    v121 = 0u;
    v120 = 0u;
    v119 = 0u;
    v118 = 0u;
    v117 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v117);
    v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v117, (uint64_t)"G2P initialization with ", 24);
    v56 = *(char *)(a1 + 1071);
    if (v56 >= 0)
      v57 = a1 + 1048;
    else
      v57 = *(_QWORD *)(a1 + 1048);
    if (v56 >= 0)
      v58 = *(unsigned __int8 *)(a1 + 1071);
    else
      v58 = *(_QWORD *)(a1 + 1056);
    v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, v57, v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)" failed", 7);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v117);
  }
  v93 = v4 + 24;
  v94 = (std::__shared_weak_count *)v4;
  do
    v8 = __ldxr(v5);
  while (__stxr(v8 + 1, v5));
  v91 = v114;
  v92 = v115;
  if (v115)
  {
    p_shared_owners = (unint64_t *)&v115->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  quasar::QuasarG2PFactory::createQuasarG2P((uint64_t *)&v93, &v91, (__int128 *)(a1 + 24), (quasar::SystemConfig *)__p, 4, (void **)&v117);
  v11 = (_QWORD *)v117;
  *(_QWORD *)&v117 = 0;
  v12 = v92;
  if (v92)
  {
    v13 = (unint64_t *)&v92->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v94;
  if (v94)
  {
    v16 = (unint64_t *)&v94->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v90 = 0;
  v89 = 0;
  v88 = (uint64_t *)&v89;
  v18 = *(uint64_t ***)(a1 + 1120);
  if (!v18)
    goto LABEL_64;
  v66 = a1;
  v67 = v11;
  v19 = a1 + 1080;
  v20 = (const void **)(a1 + 48);
  do
  {
    v68[0] = 0;
    v68[1] = 0;
    *(_QWORD *)&v69[0] = 0;
    *((_QWORD *)&v81 + 1) = 0;
    v82 = 0;
    *(_QWORD *)&v81 = (char *)&v81 + 8;
    if (v18[10])
    {
      if (&v81 != (__int128 *)(v18 + 8))
        std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)&v81, v18[8], v18 + 9);
    }
    else
    {
      if (quasar::gLogLevel >= 4)
      {
        v133 = 0u;
        v132 = 0u;
        v131 = 0u;
        v130 = 0u;
        v129 = 0u;
        v128 = 0u;
        v127 = 0u;
        v126 = 0u;
        v125 = 0u;
        v124 = 0u;
        v123 = 0u;
        v122 = 0u;
        v121 = 0u;
        v120 = 0u;
        v119 = 0u;
        v118 = 0u;
        v117 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v117);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v117, (uint64_t)"No pronunciation for word ", 26);
        v22 = *((char *)v18 + 39);
        if (v22 >= 0)
          v23 = (uint64_t)(v18 + 2);
        else
          v23 = (uint64_t)v18[2];
        if (v22 >= 0)
          v24 = *((unsigned __int8 *)v18 + 39);
        else
          v24 = (uint64_t)v18[3];
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)". Falling back to G2P", 21);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v117);
      }
      quasar::getPronunciationsFromOrthography((uint64_t)(v18 + 2), (uint64_t)v116, *(_QWORD *)(v66 + 16), v67, (uint64_t)&v117);
      std::__tree<std::string>::destroy((uint64_t)&v81, *((char **)&v81 + 1));
      v26 = (char *)*((_QWORD *)&v117 + 1);
      v81 = v117;
      v82 = v118;
      if ((_QWORD)v118)
      {
        *(_QWORD *)(*((_QWORD *)&v117 + 1) + 16) = (char *)&v81 + 8;
        *(_QWORD *)&v117 = (char *)&v117 + 8;
        *((_QWORD *)&v117 + 1) = 0;
        *(_QWORD *)&v118 = 0;
        v26 = 0;
      }
      else
      {
        *(_QWORD *)&v81 = (char *)&v81 + 8;
      }
      std::__tree<std::string>::destroy((uint64_t)&v117, v26);
    }
    LODWORD(v117) = 1;
    v27 = (char *)v68[1];
    if (v68[1] >= (void *)*(_QWORD *)&v69[0])
    {
      v28 = (void *)std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string const&,std::string const&,int,std::set<std::string> &>((uint64_t *)v68, (uint64_t)(v18 + 2), v19, (unsigned int *)&v117, (uint64_t)&v81);
    }
    else
    {
      std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string const&,std::string const&,int,std::set<std::string> &>((uint64_t)v69, (uint64_t)v68[1], (uint64_t)(v18 + 2), v19, (unsigned int *)&v117, (uint64_t)&v81);
      v28 = v27 + 80;
    }
    v68[1] = v28;
    if (v28 != v68[0])
    {
      *(_QWORD *)&v75[0] = v20;
      v29 = std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v88, v20, (uint64_t)&std::piecewise_construct, (__int128 **)v75);
      v30 = v29 + 7;
      v31 = v29[8];
      if (v31 >= v29[9])
      {
        v32 = std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__push_back_slow_path<std::vector<quasar::LmeDataFactoryBase::Word> const&>(v30, (__int128 **)v68);
      }
      else
      {
        std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::LmeDataFactoryBase::Word> const&>((uint64_t)v30, (__int128 **)v68);
        v32 = v31 + 24;
      }
      v29[8] = v32;
    }
    std::__tree<std::string>::destroy((uint64_t)&v81, *((char **)&v81 + 1));
    *(_QWORD *)&v117 = v68;
    std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v117);
    v18 = (uint64_t **)*v18;
  }
  while (v18);
  v11 = v67;
  if (v90)
  {
    v87 = 0;
    v86 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v114 + 48))(v114, &v86);
    v33 = v87;
    if (v87)
    {
      v34 = (unint64_t *)&v87->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v81);
    v80[0] = 0;
    v80[1] = 0;
    v78[1] = 0;
    v79 = v80;
    v77 = v78;
    v78[0] = 0;
    memset(v75, 0, sizeof(v75));
    v76 = 1065353216;
    v74 = 0;
    v72 = 0;
    v73 = 0;
    v70 = 0;
    v71 = 0;
    v36 = (*(uint64_t (**)(uint64_t, uint64_t **, _QWORD, __int128 *, char ***, char ***, _OWORD *, int *, uint64_t *, uint64_t *, _QWORD, uint64_t *))(*(_QWORD *)v114 + 24))(v114, &v88, 0, &v81, &v79, &v77, v75, &v74, &v73, &v71, 0, &v70);
    v37 = v70;
    v70 = 0;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    v38 = v72;
    if (v72)
    {
      v39 = (unint64_t *)&v72->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    v41 = v73;
    v73 = 0;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
    if (v36)
    {
      if (quasar::gLogLevel >= 1)
      {
        v133 = 0u;
        v132 = 0u;
        v131 = 0u;
        v130 = 0u;
        v129 = 0u;
        v128 = 0u;
        v127 = 0u;
        v126 = 0u;
        v125 = 0u;
        v124 = 0u;
        v123 = 0u;
        v122 = 0u;
        v121 = 0u;
        v120 = 0u;
        v119 = 0u;
        v118 = 0u;
        v117 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v117);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v117, (uint64_t)"Could not get LME data", 22);
        std::ostream::operator<<();
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v117);
      }
    }
    else
    {
      std::ofstream::basic_ofstream(&v117);
      if (*(_DWORD *)((char *)&v119 + *(_QWORD *)(v117 - 24)))
      {
        memset(v69, 0, sizeof(v69));
        *(_OWORD *)v68 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
        v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Can't open ", 11);
        v61 = *(char *)(v65 + 23);
        if (v61 >= 0)
          v62 = v65;
        else
          v62 = *(_QWORD *)v65;
        if (v61 >= 0)
          v63 = *(unsigned __int8 *)(v65 + 23);
        else
          v63 = *(_QWORD *)(v65 + 8);
        v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, v62, v63);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)" for writing", 12);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v68);
      }
      std::stringbuf::str();
      if ((SBYTE7(v69[0]) & 0x80u) == 0)
        v42 = v68;
      else
        v42 = (void **)v68[0];
      if ((SBYTE7(v69[0]) & 0x80u) == 0)
        v43 = BYTE7(v69[0]);
      else
        v43 = (uint64_t)v68[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v117, (uint64_t)v42, v43);
      if (SBYTE7(v69[0]) < 0)
        operator delete(v68[0]);
      if (!std::filebuf::close())
        std::ios_base::clear((std::ios_base *)((char *)&v117 + *(_QWORD *)(v117 - 24)), *(_DWORD *)((char *)&v119 + *(_QWORD *)(v117 - 24)) | 4);
      *(_QWORD *)&v117 = *MEMORY[0x1E0DE4F48];
      *(_QWORD *)((char *)&v117 + *(_QWORD *)(v117 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
      MEMORY[0x1AF44CA70]((char *)&v117 + 8);
      std::ostream::~ostream();
      MEMORY[0x1AF44D094](v134);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v75);
    std::__tree<std::string>::destroy((uint64_t)&v77, v78[0]);
    std::__tree<std::string>::destroy((uint64_t)&v79, v80[0]);
    *(_QWORD *)&v81 = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)&v81 + *(_QWORD *)(v81 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    *((_QWORD *)&v81 + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if (v84 < 0)
      operator delete(v83);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1AF44D094](&v85);
  }
  else
  {
LABEL_64:
    if (quasar::gLogLevel >= 4)
    {
      v133 = 0u;
      v132 = 0u;
      v131 = 0u;
      v130 = 0u;
      v129 = 0u;
      v128 = 0u;
      v127 = 0u;
      v126 = 0u;
      v125 = 0u;
      v124 = 0u;
      v123 = 0u;
      v122 = 0u;
      v121 = 0u;
      v120 = 0u;
      v119 = 0u;
      v118 = 0u;
      v117 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v117);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v117, (uint64_t)"No OOVs to add", 14);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v117);
    }
  }
  std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::destroy((uint64_t)&v88, v89);
  if (v11)
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)__p);
  v44 = v113;
  if (v113)
  {
    v45 = (unint64_t *)&v113->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v115;
  if (v115)
  {
    v48 = (unint64_t *)&v115->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  quasar::BasicTextSanitizer::~BasicTextSanitizer((quasar::BasicTextSanitizer *)v116);
}

void sub_1AD7CAD4C()
{
  JUMPOUT(0x1AD7CAE40);
}

void sub_1AD7CAD74()
{
  unint64_t v0;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&STACK[0xA00]);
  STACK[0xA00] = v0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xA00]);
  JUMPOUT(0x1AD7CAE48);
}

void sub_1AD7CAD90()
{
  JUMPOUT(0x1AD7CAE50);
}

void sub_1AD7CAD9C()
{
  JUMPOUT(0x1AD7CAE58);
}

void sub_1AD7CADA4()
{
  if (SLOBYTE(STACK[0x347]) < 0)
    operator delete((void *)STACK[0x330]);
  JUMPOUT(0x1AD7CAE60);
}

void sub_1AD7CADBC()
{
  JUMPOUT(0x1AD7CAE60);
}

void sub_1AD7CADC4(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1AD7CAE60);
}

void sub_1AD7CADD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  char *a70;

  std::__tree<std::string>::destroy((uint64_t)&a69, a70);
  STACK[0xA00] = (unint64_t)&a17;
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xA00]);
  JUMPOUT(0x1AD7CAE1CLL);
}

uint64_t quasar::AppLmData::getLmeThreshold(quasar::AppLmData *this)
{
  return *((unsigned int *)this + 295);
}

uint64_t *quasar::AppLmData::getSupportedSlots@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  const void **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v3 = (const void **)this[144];
  v4 = this + 145;
  if (v3 != (const void **)(this + 145))
  {
    do
    {
      this = std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a2, v3 + 4, (uint64_t)(v3 + 4));
      v5 = (uint64_t *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (uint64_t *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = (const void **)v6;
        }
        while (!v7);
      }
      v3 = (const void **)v6;
    }
    while (v6 != v4);
  }
  return this;
}

void sub_1AD7CAEF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void quasar::AppLmData::~AppLmData(quasar::AppLmData *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E5D3BD28;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1152, *((_QWORD **)this + 145));
  v2 = *((_QWORD *)this + 143);
  *((_QWORD *)this + 143) = 0;
  if (v2)
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)this + 1144, v2);
  std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::~__hash_table((uint64_t)this + 1104);
  if (*((char *)this + 1103) < 0)
    operator delete(*((void **)this + 135));
  if (*((char *)this + 1071) < 0)
    operator delete(*((void **)this + 131));
  quasar::LmData::~LmData(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E5D3BD28;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1152, *((_QWORD **)this + 145));
  v2 = *((_QWORD *)this + 143);
  *((_QWORD *)this + 143) = 0;
  if (v2)
    std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100]((uint64_t)this + 1144, v2);
  std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::~__hash_table((uint64_t)this + 1104);
  if (*((char *)this + 1103) < 0)
    operator delete(*((void **)this + 135));
  if (*((char *)this + 1071) < 0)
    operator delete(*((void **)this + 131));
  quasar::LmData::~LmData(this);
  JUMPOUT(0x1AF44D190);
}

std::string *std::pair<std::string const,quasar::AppLmData::Oov>::pair[abi:ne180100]<std::string&,quasar::AppLmData::Oov&,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[2], (const void ***)a3 + 3);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a3 + 12);
  return this;
}

void sub_1AD7CB0A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<std::string>::set[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1AD7CB114(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1AD7CB230(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,quasar::AppLmData::Oov>::pair[abi:ne180100]<std::string const&,quasar::AppLmData::Oov&,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[2], (const void ***)a3 + 3);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a3 + 12);
  return this;
}

void sub_1AD7CB2E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *quasar::AppLmData::Oov::Oov(std::string *this, __int128 *a2, const void ***a3, int a4)
{
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  std::set<std::string>::set[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)&this[1], *a3, a3 + 1);
  LODWORD(this[2].__r_.__value_.__l.__data_) = a4;
  return this;
}

void sub_1AD7CB394(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<std::string>::set[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *a1, const void **a2, const void ***a3)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a1, a2, a3);
  return a1;
}

void sub_1AD7CB3E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string,quasar::AppLmData::Oov>::pair[abi:ne180100]<std::string const&,quasar::AppLmData::Oov&,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[2], (const void ***)a3 + 3);
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a3 + 12);
  return this;
}

void sub_1AD7CB494(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

quasar::TextSanitizer *quasar::BasicTextSanitizer::BasicTextSanitizer(quasar::TextSanitizer *a1, uint64_t *a2)
{
  quasar::TextSanitizer *v4;

  v4 = quasar::TextSanitizer::TextSanitizer(a1);
  *(_QWORD *)v4 = &unk_1E5D368F8;
  quasar::TextSanitizer::init((uint64_t)v4, a2);
  return a1;
}

void sub_1AD7CB508(_Unwind_Exception *a1)
{
  quasar::TextSanitizer *v1;

  quasar::TextSanitizer::~TextSanitizer(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t **leaf_high;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::string>::__emplace_multi<std::string const&>(v5, (uint64_t)(a2 + 4));
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1AD7CB688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

const void **std::__tree<std::string>::__emplace_multi<std::string const&>(uint64_t **a1, uint64_t a2)
{
  uint64_t **leaf_high;
  uint64_t v5;
  const void **v6;

  std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)a1, &v5, v6 + 4);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v5, leaf_high, (uint64_t *)v6);
  return v6;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::AppLmData::Oov>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::AppLmData::Oov>,0>(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 48, *(char **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::default_delete<quasar::PhonesetMapping>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    JUMPOUT(0x1AF44D190);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1AD7CB920(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::vector<quasar::AppLmData::Oov>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<quasar::AppLmData::Oov>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::AppLmData::Oov>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__tree<std::string>::destroy(a2 + 24, *(char **)(a2 + 32));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t std::vector<quasar::AppLmData::Oov>::__emplace_back_slow_path<quasar::AppLmData::Oov const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  std::string *v11;
  std::string::value_type *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249)
    v6 = 0x492492492492492;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = (std::string *)&v7[56 * v3];
  v13 = &v7[56 * v6];
  std::allocator<quasar::AppLmData::Oov>::construct[abi:ne180100]<quasar::AppLmData::Oov,quasar::AppLmData::Oov const&>((_DWORD)a1 + 16, v11, a2);
  v12 = &v11[2].__r_.__value_.__s.__data_[8];
  std::vector<quasar::AppLmData::Oov>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<quasar::AppLmData::Oov>::~__split_buffer(&v10);
  return v8;
}

void sub_1AD7CBB0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::AppLmData::Oov>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::allocator<quasar::AppLmData::Oov>::construct[abi:ne180100]<quasar::AppLmData::Oov,quasar::AppLmData::Oov const&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  uint64_t *result;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  result = std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[1], (const void ***)a3 + 3);
  LODWORD(this[2].__r_.__value_.__l.__data_) = *((_DWORD *)a3 + 12);
  return result;
}

void sub_1AD7CBB7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::AppLmData::Oov>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::AppLmData::Oov>,std::reverse_iterator<quasar::AppLmData::Oov*>,std::reverse_iterator<quasar::AppLmData::Oov*>,std::reverse_iterator<quasar::AppLmData::Oov*>>((uint64_t)(a1 + 2), a1[1], (uint64_t *)a1[1], *a1, (uint64_t *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::AppLmData::Oov>,std::reverse_iterator<quasar::AppLmData::Oov*>,std::reverse_iterator<quasar::AppLmData::Oov*>,std::reverse_iterator<quasar::AppLmData::Oov*>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v8 = a3 - 3;
    do
    {
      v9 = *((_OWORD *)v8 - 2);
      *(_QWORD *)(v7 - 40) = *(v8 - 2);
      *(_OWORD *)(v7 - 56) = v9;
      *(v8 - 3) = 0;
      *(v8 - 2) = 0;
      *(v8 - 4) = 0;
      *(_QWORD *)(v7 - 32) = *(v8 - 1);
      v10 = *v8;
      *(_QWORD *)(v7 - 24) = *v8;
      v11 = v7 - 24;
      v12 = v8[1];
      *(_QWORD *)(v7 - 16) = v12;
      if (v12)
      {
        *(_QWORD *)(v10 + 16) = v11;
        *(v8 - 1) = (uint64_t)v8;
        *v8 = 0;
        v8[1] = 0;
      }
      else
      {
        *(_QWORD *)(v7 - 32) = v11;
      }
      *(_DWORD *)(v7 - 8) = *((_DWORD *)v8 + 4);
      v7 = *((_QWORD *)&v19 + 1) - 56;
      *((_QWORD *)&v19 + 1) -= 56;
      v13 = v8 - 4;
      v8 -= 7;
    }
    while (v13 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AppLmData::Oov>,std::reverse_iterator<quasar::AppLmData::Oov*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AppLmData::Oov>,std::reverse_iterator<quasar::AppLmData::Oov*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AppLmData::Oov>,std::reverse_iterator<quasar::AppLmData::Oov*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AppLmData::Oov>,std::reverse_iterator<quasar::AppLmData::Oov*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::AppLmData::Oov>::destroy[abi:ne180100](v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::AppLmData::Oov>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::AppLmData::Oov>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::AppLmData::Oov>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 56;
    std::allocator<quasar::AppLmData::Oov>::destroy[abi:ne180100](v4, i - 56);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t i;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t *v17;
  unsigned int v18;
  unsigned int v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  const std::string::value_type **v24;
  __int128 v25;
  uint64_t *v26;
  unsigned int v27;
  unsigned int v28;
  unint64_t v29;
  __int128 v30;
  unsigned int v31;
  unsigned int v32;
  __int128 *v33;
  unint64_t j;
  __int128 v35;
  unsigned int v36;
  unsigned int v37;
  __int128 *v38;
  unint64_t v39;
  __int128 v40;
  unsigned int v41;
  unsigned int v42;
  __int128 *v43;
  __int128 v44;
  unsigned int v45;
  unsigned int v46;
  void **v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  BOOL v54;
  __int128 v55;
  const void **v56;
  _QWORD *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  __int128 v64;
  uint64_t *v65;
  unsigned int v66;
  unsigned int v67;
  __int128 *v68;
  unint64_t v69;
  __int128 v70;
  unsigned int v71;
  unsigned int v72;
  BOOL v73;
  unint64_t v74;
  __int128 v75;
  unsigned int v76;
  unsigned int v77;
  __int128 *v78;
  __int128 v79;
  uint64_t *v80;
  unsigned int v81;
  unsigned int v82;
  void **v83;
  __int128 v84;
  __int128 v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  __int128 v90;
  uint64_t *v91;
  unsigned int v92;
  unsigned int v93;
  __int128 v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  __int128 v99;
  __int128 v100;
  unsigned int v101;
  unsigned int v102;
  __int128 v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t k;
  uint64_t v107;
  uint64_t v108;
  void **v109;
  const std::string::value_type **v110;
  __int128 v111;
  unsigned int v112;
  unsigned int v113;
  char ***v114;
  __int128 v115;
  char **v116;
  char *v117;
  uint64_t v118;
  char *v119;
  int64_t v120;
  const void ***v121;
  int64_t v122;
  int64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  uint64_t *v130;
  unsigned int v131;
  unsigned int v132;
  __int128 v133;
  uint64_t v134;
  __int128 v135;
  const void ***v136;
  uint64_t *v137;
  uint64_t v138;
  unsigned int *v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  __int128 v143;
  uint64_t v144;
  const void **v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  const void ***v155;
  uint64_t *v156;
  unsigned int v157;
  unsigned int v158;
  __int128 v159;
  const void ***v160;
  unsigned int v161;
  unsigned int v162;
  __int128 v163;
  uint64_t v164;
  char *v165;
  const void *v166;
  char *v167;
  int64_t v168;
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  __int128 v179;
  __int128 v180;
  uint64_t *v181;
  unsigned int v182;
  unsigned int v183;
  __int128 v184;
  uint64_t *v185;
  void **v186;
  int v187;
  __int128 v188;
  __int128 v189;
  unint64_t v190;
  char *v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  __int128 v200;
  __int128 v201;
  unsigned int v202;
  unsigned int v203;
  __int128 v204;
  _QWORD *v205;
  uint64_t v206;
  unint64_t v207;
  __int128 v208;
  unint64_t *v209;
  __int128 v210;
  unsigned int v211;
  unsigned int v212;
  __int128 v213;
  unint64_t v214;
  char *v215;
  uint64_t v216;
  unint64_t v217;
  unsigned int *v218;
  uint64_t v219;
  __int128 v220;
  _QWORD *v221;
  __int128 v222;
  uint64_t v223;
  unsigned int v224;
  unsigned int v225;
  __int128 v226;
  _QWORD *v227;
  uint64_t v228;
  unsigned int *v229;
  void **v230;
  __int128 v231;
  unsigned int v232;
  unsigned int v233;
  void **v234;
  __int128 v235;
  unsigned int *v236;
  char *v237;
  uint64_t v238;
  char *v239;
  __int128 v240;
  uint64_t *v241;
  unsigned int v242;
  unsigned int v243;
  const void ***v244;
  unint64_t v245;
  uint64_t v247;
  __int128 *v248;
  _QWORD *v249;
  __int128 *v250;
  int64_t v252;
  unint64_t v254;
  uint64_t v255;
  uint64_t v257;
  uint64_t *v258;
  std::string v259;
  uint64_t v260[3];
  unsigned int v261;
  std::string v262;
  uint64_t v263[3];
  unsigned int v264;
  std::string v265;
  uint64_t v266[3];
  unsigned int v267;
  std::string v268;
  uint64_t v269[3];
  unsigned int v270;
  std::string v271;
  uint64_t v272[3];
  unsigned int v273;
  std::string v274;
  uint64_t v275[3];
  unsigned int v276;
  std::string v277;
  uint64_t v278;
  char *v279;
  unsigned int v280;
  std::string v281;
  uint64_t v282;
  char *v283;
  unsigned int v284;
  std::string v285;
  uint64_t v286;
  char *v287;
  unsigned int v288;
  std::string v289;
  uint64_t v290;
  char *v291;
  unsigned int v292;
  std::string v293;
  uint64_t v294;
  char *v295;
  unsigned int v296;
  std::string v297;
  char **v298;
  char *v299;
  uint64_t v300;
  unsigned int v301;
  std::string v302;
  const void **v303;
  char *v304;
  const void *v305;
  unsigned int v306;
  std::string v307;
  uint64_t v308;
  char *v309;
  unsigned int v310;
  std::string v311;
  char **v312;
  char *v313;
  uint64_t v314;
  unsigned int v315;
  std::string v316;
  uint64_t v317;
  char *v318;
  unsigned int v319;
  std::string v320;
  char **v321;
  char *v322;
  uint64_t v323;
  unsigned int v324;

LABEL_1:
  v248 = (__int128 *)(a2 - 56);
  v244 = (const void ***)(a2 - 32);
  i = a1;
  while (2)
  {
    v5 = a2 - i;
    v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2 - i) >> 3);
    a1 = i;
    switch(v6)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(char *)(a2 - 33) < 0)
        {
          std::string::__init_copy_ctor_external(&v268, *(const std::string::value_type **)(a2 - 56), *(_QWORD *)(a2 - 48));
        }
        else
        {
          v94 = *v248;
          v268.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 - 40);
          *(_OWORD *)&v268.__r_.__value_.__l.__data_ = v94;
        }
        std::set<std::string>::set[abi:ne180100](v269, v244);
        v270 = *(_DWORD *)(a2 - 8);
        if (*(char *)(i + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v265, *(const std::string::value_type **)i, *(_QWORD *)(i + 8));
        }
        else
        {
          v240 = *(_OWORD *)i;
          v265.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 16);
          *(_OWORD *)&v265.__r_.__value_.__l.__data_ = v240;
        }
        v241 = std::set<std::string>::set[abi:ne180100](v266, (const void ***)(i + 24));
        v242 = *(_DWORD *)(i + 48);
        v267 = v242;
        v243 = v270;
        std::__tree<std::string>::destroy((uint64_t)v241, (char *)v266[1]);
        if (SHIBYTE(v265.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v265.__r_.__value_.__l.__data_);
        std::__tree<std::string>::destroy((uint64_t)v269, (char *)v269[1]);
        if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v268.__r_.__value_.__l.__data_);
        if (v243 > v242)
          std::swap[abi:ne180100]<quasar::AppLmData::Oov>(i, v248);
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(i, i + 56, (uint64_t)v248);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(i, i + 56, i + 112, (uint64_t)v248);
        return;
      case 5uLL:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *,0>(i, i + 56, i + 112, i + 168, (uint64_t)v248);
        return;
      default:
        v7 = i;
        if (v5 > 1343)
        {
          if (!a3)
          {
            if (i != a2)
            {
              v120 = (v6 - 2) >> 1;
              v245 = a2 - i;
              v121 = &v303;
              v122 = v120;
              do
              {
                v123 = v122;
                if (v120 >= v122)
                {
                  v124 = (2 * v122) | 1;
                  v125 = a1;
                  v126 = a1 + 56 * v124;
                  v127 = 2 * v122 + 2;
                  v252 = v122;
                  v257 = v124;
                  if (v127 < (uint64_t)v6)
                  {
                    if (*(char *)(v126 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v320, *(const std::string::value_type **)v126, *(_QWORD *)(v126 + 8));
                    }
                    else
                    {
                      v128 = *(_OWORD *)v126;
                      v320.__r_.__value_.__r.__words[2] = *(_QWORD *)(v126 + 16);
                      *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v128;
                    }
                    std::set<std::string>::set[abi:ne180100]((uint64_t *)&v321, (const void ***)(a1 + 56 * v124 + 24));
                    v324 = *(_DWORD *)(a1 + 56 * v124 + 48);
                    if (*(char *)(v126 + 79) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v316, *(const std::string::value_type **)(v126 + 56), *(_QWORD *)(v126 + 64));
                    }
                    else
                    {
                      v129 = *(_OWORD *)(v126 + 56);
                      v316.__r_.__value_.__r.__words[2] = *(_QWORD *)(v126 + 72);
                      *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v129;
                    }
                    v130 = std::set<std::string>::set[abi:ne180100](&v317, (const void ***)(v126 + 80));
                    v131 = *(_DWORD *)(v126 + 104);
                    v319 = v131;
                    v132 = v324;
                    std::__tree<std::string>::destroy((uint64_t)v130, v318);
                    if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v316.__r_.__value_.__l.__data_);
                    std::__tree<std::string>::destroy((uint64_t)&v321, v322);
                    if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v320.__r_.__value_.__l.__data_);
                    v73 = v132 > v131;
                    v123 = v252;
                    v125 = a1;
                    if (v73)
                    {
                      v126 += 56;
                      v257 = v127;
                    }
                  }
                  if (*(char *)(v126 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v311, *(const std::string::value_type **)v126, *(_QWORD *)(v126 + 8));
                  }
                  else
                  {
                    v133 = *(_OWORD *)v126;
                    v311.__r_.__value_.__r.__words[2] = *(_QWORD *)(v126 + 16);
                    *(_OWORD *)&v311.__r_.__value_.__l.__data_ = v133;
                  }
                  std::set<std::string>::set[abi:ne180100]((uint64_t *)&v312, (const void ***)(v126 + 24));
                  v134 = v125 + 56 * v123;
                  v315 = *(_DWORD *)(v126 + 48);
                  if (*(char *)(v134 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v307, *(const std::string::value_type **)v134, *(_QWORD *)(v134 + 8));
                  }
                  else
                  {
                    v135 = *(_OWORD *)v134;
                    v307.__r_.__value_.__r.__words[2] = *(_QWORD *)(v134 + 16);
                    *(_OWORD *)&v307.__r_.__value_.__l.__data_ = v135;
                  }
                  v136 = (const void ***)(a1 + 56 * v123 + 24);
                  v137 = std::set<std::string>::set[abi:ne180100](&v308, v136);
                  v138 = a1 + 56 * v123;
                  v141 = *(_DWORD *)(v138 + 48);
                  v139 = (unsigned int *)(v138 + 48);
                  v140 = v141;
                  v310 = v141;
                  v142 = v315;
                  std::__tree<std::string>::destroy((uint64_t)v137, v309);
                  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v307.__r_.__value_.__l.__data_);
                  std::__tree<std::string>::destroy((uint64_t)&v312, v313);
                  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v311.__r_.__value_.__l.__data_);
                  v73 = v142 > v140;
                  v123 = v252;
                  if (!v73)
                  {
                    v143 = *(_OWORD *)v134;
                    v302.__r_.__value_.__r.__words[2] = *(_QWORD *)(v134 + 16);
                    *(_OWORD *)&v302.__r_.__value_.__l.__data_ = v143;
                    *(_QWORD *)(v134 + 8) = 0;
                    *(_QWORD *)(v134 + 16) = 0;
                    *(_QWORD *)v134 = 0;
                    v303 = *v136;
                    v144 = a1 + 56 * v252;
                    v147 = *(char **)(v144 + 32);
                    v145 = (const void **)(v144 + 32);
                    v146 = v147;
                    v304 = v147;
                    v305 = v145[1];
                    if (v305)
                    {
                      *((_QWORD *)v146 + 2) = &v304;
                      *v136 = v145;
                      *v145 = 0;
                      v145[1] = 0;
                    }
                    else
                    {
                      v303 = (const void **)&v304;
                    }
                    v306 = *v139;
                    v148 = v257;
                    do
                    {
                      v149 = v126;
                      if (*(char *)(v134 + 23) < 0)
                        operator delete(*(void **)v134);
                      v150 = *(_OWORD *)v126;
                      *(_QWORD *)(v134 + 16) = *(_QWORD *)(v126 + 16);
                      *(_OWORD *)v134 = v150;
                      *(_BYTE *)(v126 + 23) = 0;
                      *(_BYTE *)v126 = 0;
                      v258 = (uint64_t *)(v126 + 24);
                      std::__tree<std::string>::__move_assign(v134 + 24, (_QWORD *)(v126 + 24));
                      *(_DWORD *)(v134 + 48) = *(_DWORD *)(v126 + 48);
                      if (v120 < v148)
                        break;
                      v151 = 2 * v148;
                      v148 = (2 * v148) | 1;
                      v126 = a1 + 56 * v148;
                      v152 = v151 + 2;
                      if (v151 + 2 < (uint64_t)v6)
                      {
                        if (*(char *)(v126 + 23) < 0)
                        {
                          std::string::__init_copy_ctor_external(&v297, *(const std::string::value_type **)v126, *(_QWORD *)(v126 + 8));
                        }
                        else
                        {
                          v153 = *(_OWORD *)v126;
                          v297.__r_.__value_.__r.__words[2] = *(_QWORD *)(v126 + 16);
                          *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v153;
                        }
                        std::set<std::string>::set[abi:ne180100]((uint64_t *)&v298, (const void ***)(a1 + 56 * v148 + 24));
                        v301 = *(_DWORD *)(a1 + 56 * v148 + 48);
                        if (*(char *)(v126 + 79) < 0)
                        {
                          std::string::__init_copy_ctor_external(&v293, *(const std::string::value_type **)(v126 + 56), *(_QWORD *)(v126 + 64));
                        }
                        else
                        {
                          v154 = *(_OWORD *)(v126 + 56);
                          v293.__r_.__value_.__r.__words[2] = *(_QWORD *)(v126 + 72);
                          *(_OWORD *)&v293.__r_.__value_.__l.__data_ = v154;
                        }
                        v155 = v121;
                        v156 = std::set<std::string>::set[abi:ne180100](&v294, (const void ***)(v126 + 80));
                        v157 = *(_DWORD *)(v126 + 104);
                        v296 = v157;
                        v158 = v301;
                        std::__tree<std::string>::destroy((uint64_t)v156, v295);
                        if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v293.__r_.__value_.__l.__data_);
                        std::__tree<std::string>::destroy((uint64_t)&v298, v299);
                        if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v297.__r_.__value_.__l.__data_);
                        v73 = v158 > v157;
                        v121 = v155;
                        if (v73)
                        {
                          v126 += 56;
                          v148 = v152;
                        }
                      }
                      if (*(char *)(v126 + 23) < 0)
                      {
                        std::string::__init_copy_ctor_external(&v289, *(const std::string::value_type **)v126, *(_QWORD *)(v126 + 8));
                      }
                      else
                      {
                        v159 = *(_OWORD *)v126;
                        v289.__r_.__value_.__r.__words[2] = *(_QWORD *)(v126 + 16);
                        *(_OWORD *)&v289.__r_.__value_.__l.__data_ = v159;
                      }
                      std::set<std::string>::set[abi:ne180100](&v290, (const void ***)(v126 + 24));
                      v292 = *(_DWORD *)(v126 + 48);
                      if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
                        std::string::__init_copy_ctor_external(&v285, v302.__r_.__value_.__l.__data_, v302.__r_.__value_.__l.__size_);
                      else
                        v285 = v302;
                      v160 = v121;
                      std::set<std::string>::set[abi:ne180100](&v286, v121);
                      v161 = v306;
                      v288 = v306;
                      v162 = v292;
                      std::__tree<std::string>::destroy((uint64_t)&v286, v287);
                      if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v285.__r_.__value_.__l.__data_);
                      std::__tree<std::string>::destroy((uint64_t)&v290, v291);
                      if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v289.__r_.__value_.__l.__data_);
                      v134 = v149;
                      v73 = v162 > v161;
                      v121 = v160;
                    }
                    while (!v73);
                    if (*(char *)(v149 + 23) < 0)
                      operator delete(*(void **)v149);
                    v163 = *(_OWORD *)&v302.__r_.__value_.__l.__data_;
                    *(_QWORD *)(v149 + 16) = *((_QWORD *)&v302.__r_.__value_.__l + 2);
                    *(_OWORD *)v149 = v163;
                    *((_BYTE *)&v302.__r_.__value_.__s + 23) = 0;
                    v302.__r_.__value_.__s.__data_[0] = 0;
                    v164 = v149 + 32;
                    std::__tree<std::string>::destroy((uint64_t)v258, *(char **)(v149 + 32));
                    *(_QWORD *)(v149 + 24) = v303;
                    v165 = v304;
                    *(_QWORD *)(v149 + 32) = v304;
                    v166 = v305;
                    *(_QWORD *)(v149 + 40) = v305;
                    if (v166)
                    {
                      v167 = 0;
                      *((_QWORD *)v165 + 2) = v164;
                      v303 = (const void **)&v304;
                      v304 = 0;
                      v305 = 0;
                    }
                    else
                    {
                      *v258 = v164;
                      v167 = v304;
                    }
                    *(_DWORD *)(v149 + 48) = v306;
                    std::__tree<std::string>::destroy((uint64_t)v121, v167);
                    if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v302.__r_.__value_.__l.__data_);
                    v123 = v252;
                  }
                }
                v122 = v123 - 1;
              }
              while (v123);
              v168 = v245 / 0x38;
              v249 = (_QWORD *)(a1 + 32);
              do
              {
                v169 = a1;
                v170 = *(_OWORD *)a1;
                v171 = *(_QWORD *)(a1 + 24);
                v297.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
                *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v170;
                *(_QWORD *)(a1 + 8) = 0;
                *(_QWORD *)(a1 + 16) = 0;
                *(_QWORD *)a1 = 0;
                v172 = *(_QWORD *)(a1 + 32);
                v173 = *(_QWORD *)(a1 + 40);
                v298 = (char **)v171;
                v299 = (char *)v172;
                v300 = v173;
                if (v173)
                {
                  *(_QWORD *)(v172 + 16) = &v299;
                  *(_QWORD *)(a1 + 24) = v249;
                  *v249 = 0;
                  *(_QWORD *)(a1 + 40) = 0;
                }
                else
                {
                  v298 = &v299;
                }
                v174 = 0;
                v301 = *(_DWORD *)(a1 + 48);
                do
                {
                  v175 = v174 + 1;
                  v176 = v169 + 56 * (v174 + 1);
                  v177 = 2 * v174;
                  v174 = (2 * v174) | 1;
                  v178 = v177 + 2;
                  if (v177 + 2 < v168)
                  {
                    if (*(char *)(v176 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v320, *(const std::string::value_type **)v176, *(_QWORD *)(v176 + 8));
                    }
                    else
                    {
                      v179 = *(_OWORD *)v176;
                      v320.__r_.__value_.__r.__words[2] = *(_QWORD *)(v176 + 16);
                      *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v179;
                    }
                    std::set<std::string>::set[abi:ne180100]((uint64_t *)&v321, (const void ***)(v169 + 56 * v175 + 24));
                    v324 = *(_DWORD *)(v169 + 56 * v175 + 48);
                    if (*(char *)(v176 + 79) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v316, *(const std::string::value_type **)(v176 + 56), *(_QWORD *)(v176 + 64));
                    }
                    else
                    {
                      v180 = *(_OWORD *)(v176 + 56);
                      v316.__r_.__value_.__r.__words[2] = *(_QWORD *)(v176 + 72);
                      *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v180;
                    }
                    v181 = std::set<std::string>::set[abi:ne180100](&v317, (const void ***)(v176 + 80));
                    v182 = *(_DWORD *)(v176 + 104);
                    v319 = v182;
                    v183 = v324;
                    std::__tree<std::string>::destroy((uint64_t)v181, v318);
                    if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v316.__r_.__value_.__l.__data_);
                    std::__tree<std::string>::destroy((uint64_t)&v321, v322);
                    if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v320.__r_.__value_.__l.__data_);
                    if (v183 > v182)
                    {
                      v176 += 56;
                      v174 = v178;
                    }
                  }
                  if (*(char *)(v169 + 23) < 0)
                    operator delete(*(void **)v169);
                  v184 = *(_OWORD *)v176;
                  *(_QWORD *)(v169 + 16) = *(_QWORD *)(v176 + 16);
                  *(_OWORD *)v169 = v184;
                  *(_BYTE *)(v176 + 23) = 0;
                  *(_BYTE *)v176 = 0;
                  v185 = (uint64_t *)(v176 + 24);
                  std::__tree<std::string>::__move_assign(v169 + 24, (_QWORD *)(v176 + 24));
                  *(_DWORD *)(v169 + 48) = *(_DWORD *)(v176 + 48);
                  v169 = v176;
                }
                while (v174 <= (uint64_t)((unint64_t)(v168 - 2) >> 1));
                v186 = (void **)(a2 - 56);
                v187 = *(char *)(v176 + 23);
                if (v176 == a2 - 56)
                {
                  if (v187 < 0)
                    operator delete(*(void **)v176);
                  v193 = *(_OWORD *)&v297.__r_.__value_.__l.__data_;
                  *(_QWORD *)(v176 + 16) = *((_QWORD *)&v297.__r_.__value_.__l + 2);
                  *(_OWORD *)v176 = v193;
                  *((_BYTE *)&v297.__r_.__value_.__s + 23) = 0;
                  v297.__r_.__value_.__s.__data_[0] = 0;
                  v194 = v176 + 32;
                  std::__tree<std::string>::destroy(v176 + 24, *(char **)(v176 + 32));
                  *(_QWORD *)(v176 + 24) = v298;
                  v195 = v299;
                  *(_QWORD *)(v176 + 32) = v299;
                  v196 = v300;
                  *(_QWORD *)(v176 + 40) = v300;
                  if (v196)
                  {
                    *((_QWORD *)v195 + 2) = v194;
                    v298 = &v299;
                    v299 = 0;
                    v300 = 0;
                  }
                  else
                  {
                    *v185 = v194;
                  }
                  *(_DWORD *)(v176 + 48) = v301;
                }
                else
                {
                  if (v187 < 0)
                    operator delete(*(void **)v176);
                  v188 = *(_OWORD *)v186;
                  *(_QWORD *)(v176 + 16) = *(_QWORD *)(a2 - 40);
                  *(_OWORD *)v176 = v188;
                  *(_BYTE *)(a2 - 33) = 0;
                  *(_BYTE *)(a2 - 56) = 0;
                  std::__tree<std::string>::__move_assign(v176 + 24, (_QWORD *)(a2 - 32));
                  *(_DWORD *)(v176 + 48) = *(_DWORD *)(a2 - 8);
                  if (*(char *)(a2 - 33) < 0)
                    operator delete(*v186);
                  v189 = *(_OWORD *)&v297.__r_.__value_.__l.__data_;
                  *(_QWORD *)(a2 - 40) = *((_QWORD *)&v297.__r_.__value_.__l + 2);
                  *(_OWORD *)v186 = v189;
                  *((_BYTE *)&v297.__r_.__value_.__s + 23) = 0;
                  v297.__r_.__value_.__s.__data_[0] = 0;
                  v190 = a2 - 24;
                  std::__tree<std::string>::destroy(a2 - 32, *(char **)(a2 - 24));
                  *(_QWORD *)(a2 - 32) = v298;
                  v191 = v299;
                  *(_QWORD *)(a2 - 24) = v299;
                  v192 = v300;
                  *(_QWORD *)(a2 - 16) = v300;
                  if (v192)
                  {
                    *((_QWORD *)v191 + 2) = v190;
                    v298 = &v299;
                    v299 = 0;
                    v300 = 0;
                  }
                  else
                  {
                    *(_QWORD *)(a2 - 32) = v190;
                  }
                  *(_DWORD *)(a2 - 8) = v301;
                  v197 = v176 + 56 - a1;
                  if (v197 >= 57)
                  {
                    v198 = (v197 / 0x38uLL - 2) >> 1;
                    v199 = a1 + 56 * v198;
                    if (*(char *)(v199 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v320, *(const std::string::value_type **)v199, *(_QWORD *)(v199 + 8));
                    }
                    else
                    {
                      v200 = *(_OWORD *)v199;
                      v320.__r_.__value_.__r.__words[2] = *(_QWORD *)(v199 + 16);
                      *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v200;
                    }
                    std::set<std::string>::set[abi:ne180100]((uint64_t *)&v321, (const void ***)(a1 + 56 * v198 + 24));
                    v324 = *(_DWORD *)(a1 + 56 * v198 + 48);
                    if (*(char *)(v176 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v316, *(const std::string::value_type **)v176, *(_QWORD *)(v176 + 8));
                    }
                    else
                    {
                      v201 = *(_OWORD *)v176;
                      v316.__r_.__value_.__r.__words[2] = *(_QWORD *)(v176 + 16);
                      *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v201;
                    }
                    std::set<std::string>::set[abi:ne180100](&v317, (const void ***)(v176 + 24));
                    v202 = *(_DWORD *)(v176 + 48);
                    v319 = v202;
                    v203 = v324;
                    std::__tree<std::string>::destroy((uint64_t)&v317, v318);
                    if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v316.__r_.__value_.__l.__data_);
                    std::__tree<std::string>::destroy((uint64_t)&v321, v322);
                    if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v320.__r_.__value_.__l.__data_);
                    if (v203 > v202)
                    {
                      v204 = *(_OWORD *)v176;
                      v311.__r_.__value_.__r.__words[2] = *(_QWORD *)(v176 + 16);
                      *(_OWORD *)&v311.__r_.__value_.__l.__data_ = v204;
                      *(_QWORD *)(v176 + 8) = 0;
                      *(_QWORD *)(v176 + 16) = 0;
                      *(_QWORD *)v176 = 0;
                      v312 = *(char ***)(v176 + 24);
                      v205 = (_QWORD *)(v176 + 32);
                      v206 = *(_QWORD *)(v176 + 32);
                      v313 = (char *)v206;
                      v314 = *(_QWORD *)(v176 + 40);
                      if (v314)
                      {
                        *(_QWORD *)(v206 + 16) = &v313;
                        *v185 = (uint64_t)v205;
                        *v205 = 0;
                        *(_QWORD *)(v176 + 40) = 0;
                      }
                      else
                      {
                        v312 = &v313;
                      }
                      v315 = *(_DWORD *)(v176 + 48);
                      do
                      {
                        v207 = v199;
                        if (*(char *)(v176 + 23) < 0)
                          operator delete(*(void **)v176);
                        v208 = *(_OWORD *)v199;
                        *(_QWORD *)(v176 + 16) = *(_QWORD *)(v199 + 16);
                        *(_OWORD *)v176 = v208;
                        *(_BYTE *)(v199 + 23) = 0;
                        *(_BYTE *)v199 = 0;
                        v209 = (unint64_t *)(v199 + 24);
                        std::__tree<std::string>::__move_assign(v176 + 24, (_QWORD *)(v199 + 24));
                        *(_DWORD *)(v176 + 48) = *(_DWORD *)(v199 + 48);
                        if (!v198)
                          break;
                        v198 = (v198 - 1) >> 1;
                        v199 = a1 + 56 * v198;
                        if (*(char *)(v199 + 23) < 0)
                        {
                          std::string::__init_copy_ctor_external(&v307, *(const std::string::value_type **)v199, *(_QWORD *)(v199 + 8));
                        }
                        else
                        {
                          v210 = *(_OWORD *)v199;
                          v307.__r_.__value_.__r.__words[2] = *(_QWORD *)(v199 + 16);
                          *(_OWORD *)&v307.__r_.__value_.__l.__data_ = v210;
                        }
                        std::set<std::string>::set[abi:ne180100](&v308, (const void ***)(a1 + 56 * v198 + 24));
                        v310 = *(_DWORD *)(a1 + 56 * v198 + 48);
                        if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
                          std::string::__init_copy_ctor_external(&v302, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
                        else
                          v302 = v311;
                        std::set<std::string>::set[abi:ne180100]((uint64_t *)&v303, (const void ***)&v312);
                        v211 = v315;
                        v306 = v315;
                        v212 = v310;
                        std::__tree<std::string>::destroy((uint64_t)&v303, v304);
                        if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v302.__r_.__value_.__l.__data_);
                        std::__tree<std::string>::destroy((uint64_t)&v308, v309);
                        if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v307.__r_.__value_.__l.__data_);
                        v176 = v207;
                      }
                      while (v212 > v211);
                      if (*(char *)(v207 + 23) < 0)
                        operator delete(*(void **)v207);
                      v213 = *(_OWORD *)&v311.__r_.__value_.__l.__data_;
                      *(_QWORD *)(v207 + 16) = *((_QWORD *)&v311.__r_.__value_.__l + 2);
                      *(_OWORD *)v207 = v213;
                      *((_BYTE *)&v311.__r_.__value_.__s + 23) = 0;
                      v311.__r_.__value_.__s.__data_[0] = 0;
                      v214 = v207 + 32;
                      std::__tree<std::string>::destroy(v207 + 24, *(char **)(v207 + 32));
                      *(_QWORD *)(v207 + 24) = v312;
                      v215 = v313;
                      *(_QWORD *)(v207 + 32) = v313;
                      v216 = v314;
                      *(_QWORD *)(v207 + 40) = v314;
                      if (v216)
                      {
                        *((_QWORD *)v215 + 2) = v214;
                        v215 = 0;
                        v312 = &v313;
                        v313 = 0;
                        v314 = 0;
                      }
                      else
                      {
                        *v209 = v214;
                      }
                      *(_DWORD *)(v207 + 48) = v315;
                      std::__tree<std::string>::destroy((uint64_t)&v312, v215);
                      if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v311.__r_.__value_.__l.__data_);
                      v186 = (void **)(a2 - 56);
                    }
                  }
                }
                std::__tree<std::string>::destroy((uint64_t)&v298, v299);
                if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v297.__r_.__value_.__l.__data_);
                a2 = (unint64_t)v186;
                v73 = v168-- <= 2;
              }
              while (!v73);
            }
            return;
          }
          v8 = v6 >> 1;
          v9 = (__int128 *)(i + 56 * (v6 >> 1));
          if ((unint64_t)v5 < 0x1C01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(v7 + 56 * (v6 >> 1), v7, (uint64_t)v248);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(v7, v7 + 56 * (v6 >> 1), (uint64_t)v248);
            v10 = v7 + 56;
            v11 = 56 * v8;
            v12 = v11 + v7 - 56;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(v10, v12, a2 - 112);
            v13 = v10 + v11;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(a1 + 112, v13, a2 - 168);
            v14 = v12;
            v7 = a1;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(v14, (uint64_t)v9, v13);
            std::swap[abi:ne180100]<quasar::AppLmData::Oov>(a1, v9);
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            if (*(char *)(v7 - 33) < 0)
            {
              std::string::__init_copy_ctor_external(&v262, *(const std::string::value_type **)(v7 - 56), *(_QWORD *)(v7 - 48));
            }
            else
            {
              v15 = *(_OWORD *)(v7 - 56);
              v262.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 - 40);
              *(_OWORD *)&v262.__r_.__value_.__l.__data_ = v15;
            }
            std::set<std::string>::set[abi:ne180100](v263, (const void ***)(v7 - 32));
            v264 = *(_DWORD *)(v7 - 8);
            if (*(char *)(v7 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v259, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
            }
            else
            {
              v16 = *(_OWORD *)v7;
              v259.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
              *(_OWORD *)&v259.__r_.__value_.__l.__data_ = v16;
            }
            v17 = std::set<std::string>::set[abi:ne180100](v260, (const void ***)(v7 + 24));
            v18 = *(_DWORD *)(v7 + 48);
            v261 = v18;
            v19 = v264;
            std::__tree<std::string>::destroy((uint64_t)v17, (char *)v260[1]);
            if (SHIBYTE(v259.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v259.__r_.__value_.__l.__data_);
            std::__tree<std::string>::destroy((uint64_t)v263, (char *)v263[1]);
            if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v262.__r_.__value_.__l.__data_);
            if (v19 <= v18)
            {
              v55 = *(_OWORD *)v7;
              v56 = *(const void ***)(v7 + 24);
              v320.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
              *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v55;
              *(_QWORD *)(v7 + 8) = 0;
              *(_QWORD *)(v7 + 16) = 0;
              *(_QWORD *)v7 = 0;
              v57 = (_QWORD *)(v7 + 32);
              v58 = *(_QWORD *)(v7 + 32);
              v321 = (char **)v56;
              v322 = (char *)v58;
              v323 = *(_QWORD *)(v7 + 40);
              if (v323)
              {
                *(_QWORD *)(v58 + 16) = &v322;
                *(_QWORD *)(v7 + 24) = v57;
                *v57 = 0;
                *(_QWORD *)(v7 + 40) = 0;
              }
              else
              {
                v321 = &v322;
              }
              v324 = *(_DWORD *)(v7 + 48);
              if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v316, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
              else
                v316 = v320;
              std::set<std::string>::set[abi:ne180100](&v317, (const void ***)&v321);
              v319 = v324;
              if (*(char *)(a2 - 33) < 0)
              {
                std::string::__init_copy_ctor_external(&v311, *(const std::string::value_type **)(a2 - 56), *(_QWORD *)(a2 - 48));
              }
              else
              {
                v59 = *v248;
                v311.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 - 40);
                *(_OWORD *)&v311.__r_.__value_.__l.__data_ = v59;
              }
              v255 = v7 + 24;
              v60 = std::set<std::string>::set[abi:ne180100]((uint64_t *)&v312, v244);
              v61 = *(_DWORD *)(a2 - 8);
              v315 = v61;
              v62 = v319;
              std::__tree<std::string>::destroy((uint64_t)v60, v313);
              if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v311.__r_.__value_.__l.__data_);
              std::__tree<std::string>::destroy((uint64_t)&v317, v318);
              if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v316.__r_.__value_.__l.__data_);
              v63 = v7;
              if (v62 <= v61)
              {
                for (i = v7 + 56; i < a2; i += 56)
                {
                  if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&v297, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
                  else
                    v297 = v320;
                  std::set<std::string>::set[abi:ne180100]((uint64_t *)&v298, (const void ***)&v321);
                  v301 = v324;
                  if (*(char *)(i + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v293, *(const std::string::value_type **)i, *(_QWORD *)(i + 8));
                  }
                  else
                  {
                    v90 = *(_OWORD *)i;
                    v293.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 16);
                    *(_OWORD *)&v293.__r_.__value_.__l.__data_ = v90;
                  }
                  v91 = std::set<std::string>::set[abi:ne180100](&v294, (const void ***)(i + 24));
                  v92 = *(_DWORD *)(i + 48);
                  v296 = v92;
                  v93 = v301;
                  std::__tree<std::string>::destroy((uint64_t)v91, v295);
                  if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v293.__r_.__value_.__l.__data_);
                  std::__tree<std::string>::destroy((uint64_t)&v298, v299);
                  if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v297.__r_.__value_.__l.__data_);
                  if (v93 > v92)
                    break;
                }
              }
              else
              {
                do
                {
                  if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&v307, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
                  else
                    v307 = v320;
                  std::set<std::string>::set[abi:ne180100](&v308, (const void ***)&v321);
                  i = v63 + 56;
                  v310 = v324;
                  if (*(char *)(v63 + 79) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v302, *(const std::string::value_type **)(v63 + 56), *(_QWORD *)(v63 + 64));
                  }
                  else
                  {
                    v64 = *(_OWORD *)i;
                    v302.__r_.__value_.__r.__words[2] = *(_QWORD *)(v63 + 72);
                    *(_OWORD *)&v302.__r_.__value_.__l.__data_ = v64;
                  }
                  v65 = std::set<std::string>::set[abi:ne180100]((uint64_t *)&v303, (const void ***)(v63 + 80));
                  v66 = *(_DWORD *)(v63 + 104);
                  v306 = v66;
                  v67 = v310;
                  std::__tree<std::string>::destroy((uint64_t)v65, v304);
                  if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v302.__r_.__value_.__l.__data_);
                  std::__tree<std::string>::destroy((uint64_t)&v308, v309);
                  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v307.__r_.__value_.__l.__data_);
                  v63 += 56;
                }
                while (v67 <= v66);
              }
              v68 = (__int128 *)a2;
              if (i < a2)
              {
                v69 = a2;
                do
                {
                  if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&v289, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
                  else
                    v289 = v320;
                  std::set<std::string>::set[abi:ne180100](&v290, (const void ***)&v321);
                  v68 = (__int128 *)(v69 - 56);
                  v292 = v324;
                  if (*(char *)(v69 - 33) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v285, *(const std::string::value_type **)(v69 - 56), *(_QWORD *)(v69 - 48));
                  }
                  else
                  {
                    v70 = *v68;
                    v285.__r_.__value_.__r.__words[2] = *(_QWORD *)(v69 - 40);
                    *(_OWORD *)&v285.__r_.__value_.__l.__data_ = v70;
                  }
                  std::set<std::string>::set[abi:ne180100](&v286, (const void ***)(v69 - 32));
                  v71 = *(_DWORD *)(v69 - 8);
                  v288 = v71;
                  v72 = v292;
                  std::__tree<std::string>::destroy((uint64_t)&v286, v287);
                  if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v285.__r_.__value_.__l.__data_);
                  std::__tree<std::string>::destroy((uint64_t)&v290, v291);
                  if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v289.__r_.__value_.__l.__data_);
                  v69 -= 56;
                  v73 = v72 > v71;
                  v7 = a1;
                }
                while (v73);
              }
              while (i < (unint64_t)v68)
              {
                std::swap[abi:ne180100]<quasar::AppLmData::Oov>(i, v68);
                v74 = i;
                do
                {
                  if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&v281, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
                  else
                    v281 = v320;
                  std::set<std::string>::set[abi:ne180100](&v282, (const void ***)&v321);
                  i = v74 + 56;
                  v284 = v324;
                  if (*(char *)(v74 + 79) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v277, *(const std::string::value_type **)(v74 + 56), *(_QWORD *)(v74 + 64));
                  }
                  else
                  {
                    v75 = *(_OWORD *)i;
                    v277.__r_.__value_.__r.__words[2] = *(_QWORD *)(v74 + 72);
                    *(_OWORD *)&v277.__r_.__value_.__l.__data_ = v75;
                  }
                  std::set<std::string>::set[abi:ne180100](&v278, (const void ***)(v74 + 80));
                  v76 = *(_DWORD *)(v74 + 104);
                  v280 = v76;
                  v77 = v284;
                  std::__tree<std::string>::destroy((uint64_t)&v278, v279);
                  if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v277.__r_.__value_.__l.__data_);
                  std::__tree<std::string>::destroy((uint64_t)&v282, v283);
                  if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v281.__r_.__value_.__l.__data_);
                  v74 += 56;
                }
                while (v77 <= v76);
                v78 = v68;
                do
                {
                  if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&v274, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
                  else
                    v274 = v320;
                  std::set<std::string>::set[abi:ne180100](v275, (const void ***)&v321);
                  v68 = (__int128 *)((char *)v78 - 56);
                  v276 = v324;
                  if (*((char *)v78 - 33) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v271, *((const std::string::value_type **)v78 - 7), *((_QWORD *)v78 - 6));
                  }
                  else
                  {
                    v79 = *v68;
                    v271.__r_.__value_.__r.__words[2] = *((_QWORD *)v78 - 5);
                    *(_OWORD *)&v271.__r_.__value_.__l.__data_ = v79;
                  }
                  v80 = std::set<std::string>::set[abi:ne180100](v272, (const void ***)v78 - 4);
                  v81 = *((_DWORD *)v78 - 2);
                  v273 = v81;
                  v82 = v276;
                  std::__tree<std::string>::destroy((uint64_t)v80, (char *)v272[1]);
                  if (SHIBYTE(v271.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v271.__r_.__value_.__l.__data_);
                  std::__tree<std::string>::destroy((uint64_t)v275, (char *)v275[1]);
                  if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v274.__r_.__value_.__l.__data_);
                  v78 = (__int128 *)((char *)v78 - 56);
                  v73 = v82 > v81;
                  v7 = a1;
                }
                while (v73);
              }
              v83 = (void **)(i - 56);
              if (i - 56 != v7)
              {
                if (*(char *)(v7 + 23) < 0)
                  operator delete(*(void **)v7);
                v84 = *(_OWORD *)v83;
                *(_QWORD *)(v7 + 16) = *(_QWORD *)(i - 40);
                *(_OWORD *)v7 = v84;
                *(_BYTE *)(i - 33) = 0;
                *(_BYTE *)(i - 56) = 0;
                std::__tree<std::string>::__move_assign(v255, (_QWORD *)(i - 32));
                *(_DWORD *)(v7 + 48) = *(_DWORD *)(i - 8);
              }
              if (*(char *)(i - 33) < 0)
                operator delete(*v83);
              v85 = *(_OWORD *)&v320.__r_.__value_.__l.__data_;
              *(_QWORD *)(i - 40) = *((_QWORD *)&v320.__r_.__value_.__l + 2);
              *(_OWORD *)v83 = v85;
              *((_BYTE *)&v320.__r_.__value_.__s + 23) = 0;
              v320.__r_.__value_.__s.__data_[0] = 0;
              v86 = i - 24;
              std::__tree<std::string>::destroy(i - 32, *(char **)(i - 24));
              *(_QWORD *)(i - 32) = v321;
              v87 = v322;
              *(_QWORD *)(i - 24) = v322;
              v88 = v323;
              *(_QWORD *)(i - 16) = v323;
              if (v88)
              {
                v89 = 0;
                *((_QWORD *)v87 + 2) = v86;
                v321 = &v322;
                v322 = 0;
                v323 = 0;
              }
              else
              {
                *(_QWORD *)(i - 32) = v86;
                v89 = v322;
              }
              *(_DWORD *)(i - 8) = v324;
              std::__tree<std::string>::destroy((uint64_t)&v321, v89);
              if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v320.__r_.__value_.__l.__data_);
              goto LABEL_106;
            }
          }
          v20 = *(_OWORD *)v7;
          v320.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
          *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v20;
          *(_QWORD *)(v7 + 8) = 0;
          *(_QWORD *)(v7 + 16) = 0;
          *(_QWORD *)v7 = 0;
          v21 = (_QWORD *)(v7 + 32);
          v22 = *(_QWORD *)(v7 + 32);
          v321 = *(char ***)(v7 + 24);
          v322 = (char *)v22;
          v323 = *(_QWORD *)(v7 + 40);
          v247 = v7 + 24;
          if (v323)
          {
            *(_QWORD *)(v22 + 16) = &v322;
            *(_QWORD *)(v7 + 24) = v21;
            *v21 = 0;
            *(_QWORD *)(v7 + 40) = 0;
          }
          else
          {
            v321 = &v322;
          }
          v23 = 0;
          v324 = *(_DWORD *)(v7 + 48);
          do
          {
            v24 = (const std::string::value_type **)(v7 + v23 + 56);
            if (*(char *)(v7 + v23 + 79) < 0)
            {
              std::string::__init_copy_ctor_external(&v316, *v24, *(_QWORD *)(v7 + v23 + 64));
            }
            else
            {
              v25 = *(_OWORD *)v24;
              v316.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + v23 + 72);
              *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v25;
            }
            std::set<std::string>::set[abi:ne180100](&v317, (const void ***)(v7 + v23 + 80));
            v319 = *(_DWORD *)(v7 + v23 + 104);
            if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v311, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
            else
              v311 = v320;
            v26 = std::set<std::string>::set[abi:ne180100]((uint64_t *)&v312, (const void ***)&v321);
            v27 = v324;
            v315 = v324;
            v28 = v319;
            std::__tree<std::string>::destroy((uint64_t)v26, v313);
            if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v311.__r_.__value_.__l.__data_);
            std::__tree<std::string>::destroy((uint64_t)&v317, v318);
            if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v316.__r_.__value_.__l.__data_);
            v23 += 56;
          }
          while (v28 > v27);
          v254 = v7 + v23;
          v29 = a2;
          if (v23 == 56)
          {
            v33 = (__int128 *)a2;
            if (v254 < a2)
            {
              for (j = a2 - 56; ; j -= 56)
              {
                if (*(char *)(j + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v307, *(const std::string::value_type **)j, *(_QWORD *)(j + 8));
                }
                else
                {
                  v35 = *(_OWORD *)j;
                  v307.__r_.__value_.__r.__words[2] = *(_QWORD *)(j + 16);
                  *(_OWORD *)&v307.__r_.__value_.__l.__data_ = v35;
                }
                std::set<std::string>::set[abi:ne180100](&v308, (const void ***)(j + 24));
                v310 = *(_DWORD *)(j + 48);
                if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v302, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
                else
                  v302 = v320;
                std::set<std::string>::set[abi:ne180100]((uint64_t *)&v303, (const void ***)&v321);
                v36 = v324;
                v306 = v324;
                v37 = v310;
                std::__tree<std::string>::destroy((uint64_t)&v303, v304);
                if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v302.__r_.__value_.__l.__data_);
                std::__tree<std::string>::destroy((uint64_t)&v308, v309);
                if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v307.__r_.__value_.__l.__data_);
                if (v37 > v36 || v254 >= j)
                  break;
              }
              v33 = (__int128 *)j;
            }
          }
          else
          {
            do
            {
              if (*(char *)(v29 - 33) < 0)
              {
                std::string::__init_copy_ctor_external(&v297, *(const std::string::value_type **)(v29 - 56), *(_QWORD *)(v29 - 48));
              }
              else
              {
                v30 = *(_OWORD *)(v29 - 56);
                v297.__r_.__value_.__r.__words[2] = *(_QWORD *)(v29 - 40);
                *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v30;
              }
              std::set<std::string>::set[abi:ne180100]((uint64_t *)&v298, (const void ***)(v29 - 32));
              v301 = *(_DWORD *)(v29 - 8);
              if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                std::string::__init_copy_ctor_external(&v293, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
              else
                v293 = v320;
              v29 -= 56;
              std::set<std::string>::set[abi:ne180100](&v294, (const void ***)&v321);
              v31 = v324;
              v296 = v324;
              v32 = v301;
              std::__tree<std::string>::destroy((uint64_t)&v294, v295);
              if (SHIBYTE(v293.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v293.__r_.__value_.__l.__data_);
              std::__tree<std::string>::destroy((uint64_t)&v298, v299);
              if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v297.__r_.__value_.__l.__data_);
              v33 = (__int128 *)v29;
            }
            while (v32 <= v31);
          }
          i = v254;
          v250 = v33;
          if (v254 < (unint64_t)v33)
          {
            v38 = v33;
            do
            {
              std::swap[abi:ne180100]<quasar::AppLmData::Oov>(i, v38);
              v39 = i;
              do
              {
                i = v39 + 56;
                if (*(char *)(v39 + 79) < 0)
                {
                  std::string::__init_copy_ctor_external(&v289, *(const std::string::value_type **)(v39 + 56), *(_QWORD *)(v39 + 64));
                }
                else
                {
                  v40 = *(_OWORD *)i;
                  v289.__r_.__value_.__r.__words[2] = *(_QWORD *)(v39 + 72);
                  *(_OWORD *)&v289.__r_.__value_.__l.__data_ = v40;
                }
                std::set<std::string>::set[abi:ne180100](&v290, (const void ***)(v39 + 80));
                v292 = *(_DWORD *)(v39 + 104);
                if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v285, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
                else
                  v285 = v320;
                std::set<std::string>::set[abi:ne180100](&v286, (const void ***)&v321);
                v41 = v324;
                v288 = v324;
                v42 = v292;
                std::__tree<std::string>::destroy((uint64_t)&v286, v287);
                if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v285.__r_.__value_.__l.__data_);
                std::__tree<std::string>::destroy((uint64_t)&v290, v291);
                if (SHIBYTE(v289.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v289.__r_.__value_.__l.__data_);
                v39 += 56;
              }
              while (v42 > v41);
              v43 = v38;
              do
              {
                v38 = (__int128 *)((char *)v43 - 56);
                if (*((char *)v43 - 33) < 0)
                {
                  std::string::__init_copy_ctor_external(&v281, *((const std::string::value_type **)v43 - 7), *((_QWORD *)v43 - 6));
                }
                else
                {
                  v44 = *v38;
                  v281.__r_.__value_.__r.__words[2] = *((_QWORD *)v43 - 5);
                  *(_OWORD *)&v281.__r_.__value_.__l.__data_ = v44;
                }
                std::set<std::string>::set[abi:ne180100](&v282, (const void ***)v43 - 4);
                v284 = *((_DWORD *)v43 - 2);
                if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                  std::string::__init_copy_ctor_external(&v277, v320.__r_.__value_.__l.__data_, v320.__r_.__value_.__l.__size_);
                else
                  v277 = v320;
                std::set<std::string>::set[abi:ne180100](&v278, (const void ***)&v321);
                v45 = v324;
                v280 = v324;
                v46 = v284;
                std::__tree<std::string>::destroy((uint64_t)&v278, v279);
                if (SHIBYTE(v277.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v277.__r_.__value_.__l.__data_);
                std::__tree<std::string>::destroy((uint64_t)&v282, v283);
                if (SHIBYTE(v281.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v281.__r_.__value_.__l.__data_);
                v43 = (__int128 *)((char *)v43 - 56);
              }
              while (v46 <= v45);
            }
            while (i < (unint64_t)v38);
          }
          v47 = (void **)(i - 56);
          if (i - 56 != a1)
          {
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v48 = *(_OWORD *)v47;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(i - 40);
            *(_OWORD *)a1 = v48;
            *(_BYTE *)(i - 33) = 0;
            *(_BYTE *)(i - 56) = 0;
            std::__tree<std::string>::__move_assign(v247, (_QWORD *)(i - 32));
            *(_DWORD *)(a1 + 48) = *(_DWORD *)(i - 8);
          }
          if (*(char *)(i - 33) < 0)
            operator delete(*v47);
          v49 = *(_OWORD *)&v320.__r_.__value_.__l.__data_;
          *(_QWORD *)(i - 40) = *((_QWORD *)&v320.__r_.__value_.__l + 2);
          *(_OWORD *)v47 = v49;
          *((_BYTE *)&v320.__r_.__value_.__s + 23) = 0;
          v320.__r_.__value_.__s.__data_[0] = 0;
          v50 = i - 24;
          std::__tree<std::string>::destroy(i - 32, *(char **)(i - 24));
          *(_QWORD *)(i - 32) = v321;
          v51 = v322;
          *(_QWORD *)(i - 24) = v322;
          v52 = v323;
          *(_QWORD *)(i - 16) = v323;
          if (v52)
          {
            v53 = 0;
            *((_QWORD *)v51 + 2) = v50;
            v321 = &v322;
            v322 = 0;
            v323 = 0;
          }
          else
          {
            *(_QWORD *)(i - 32) = v50;
            v53 = v322;
          }
          *(_DWORD *)(i - 8) = v324;
          std::__tree<std::string>::destroy((uint64_t)&v321, v53);
          if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v320.__r_.__value_.__l.__data_);
          if (v254 < (unint64_t)v250)
            goto LABEL_105;
          v54 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(a1, i - 56);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(i, a2))
          {
            if (v54)
              continue;
LABEL_105:
            std::__introsort<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *,false>(a1, i - 56, a3, a4 & 1);
LABEL_106:
            a4 = 0;
            continue;
          }
          a2 = i - 56;
          if (v54)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) != 0)
        {
          if (i != a2)
          {
            v95 = i + 56;
            if (i + 56 != a2)
            {
              v96 = 0;
              v97 = i;
              do
              {
                v98 = v95;
                if (*(char *)(v97 + 79) < 0)
                {
                  std::string::__init_copy_ctor_external(&v320, *(const std::string::value_type **)v95, *(_QWORD *)(v97 + 64));
                }
                else
                {
                  v99 = *(_OWORD *)v95;
                  v320.__r_.__value_.__r.__words[2] = *(_QWORD *)(v95 + 16);
                  *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v99;
                }
                std::set<std::string>::set[abi:ne180100]((uint64_t *)&v321, (const void ***)(v97 + 80));
                v324 = *(_DWORD *)(v97 + 104);
                if (*(char *)(v97 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v316, *(const std::string::value_type **)v97, *(_QWORD *)(v97 + 8));
                }
                else
                {
                  v100 = *(_OWORD *)v97;
                  v316.__r_.__value_.__r.__words[2] = *(_QWORD *)(v97 + 16);
                  *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v100;
                }
                std::set<std::string>::set[abi:ne180100](&v317, (const void ***)(v97 + 24));
                v101 = *(_DWORD *)(v97 + 48);
                v319 = v101;
                v102 = v324;
                std::__tree<std::string>::destroy((uint64_t)&v317, v318);
                if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v316.__r_.__value_.__l.__data_);
                std::__tree<std::string>::destroy((uint64_t)&v321, v322);
                if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v320.__r_.__value_.__l.__data_);
                if (v102 > v101)
                {
                  v103 = *(_OWORD *)v98;
                  v311.__r_.__value_.__r.__words[2] = *(_QWORD *)(v98 + 16);
                  *(_OWORD *)&v311.__r_.__value_.__l.__data_ = v103;
                  *(_QWORD *)(v98 + 8) = 0;
                  *(_QWORD *)(v98 + 16) = 0;
                  *(_QWORD *)v98 = 0;
                  v104 = (_QWORD *)(v97 + 88);
                  v105 = *(_QWORD *)(v97 + 88);
                  v312 = *(char ***)(v97 + 80);
                  v313 = (char *)v105;
                  v314 = *(_QWORD *)(v97 + 96);
                  if (v314)
                  {
                    *(_QWORD *)(v105 + 16) = &v313;
                    *(_QWORD *)(v97 + 80) = v104;
                    *v104 = 0;
                    *(_QWORD *)(v97 + 96) = 0;
                  }
                  else
                  {
                    v312 = &v313;
                  }
                  v315 = *(_DWORD *)(v97 + 104);
                  for (k = v96; ; k -= 56)
                  {
                    v107 = a1;
                    v108 = a1 + k;
                    v109 = (void **)(a1 + k + 56);
                    if (*(char *)(a1 + k + 79) < 0)
                      operator delete(*v109);
                    *(_OWORD *)v109 = *(_OWORD *)v108;
                    *(_QWORD *)(a1 + k + 72) = *(_QWORD *)(v108 + 16);
                    *(_BYTE *)(v108 + 23) = 0;
                    *(_BYTE *)v108 = 0;
                    std::__tree<std::string>::__move_assign(v108 + 80, (_QWORD *)(v108 + 24));
                    *(_DWORD *)(v108 + 104) = *(_DWORD *)(v108 + 48);
                    if (!k)
                      break;
                    if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
                      std::string::__init_copy_ctor_external(&v307, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
                    else
                      v307 = v311;
                    std::set<std::string>::set[abi:ne180100](&v308, (const void ***)&v312);
                    v310 = v315;
                    v110 = (const std::string::value_type **)(a1 + k - 56);
                    if (*(char *)(a1 + k - 33) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v302, *v110, *(_QWORD *)(a1 + k - 48));
                    }
                    else
                    {
                      v111 = *(_OWORD *)v110;
                      v302.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + k - 40);
                      *(_OWORD *)&v302.__r_.__value_.__l.__data_ = v111;
                    }
                    std::set<std::string>::set[abi:ne180100]((uint64_t *)&v303, (const void ***)(a1 + k - 32));
                    v112 = *(_DWORD *)(a1 + k - 8);
                    v306 = v112;
                    v113 = v310;
                    std::__tree<std::string>::destroy((uint64_t)&v303, v304);
                    if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v302.__r_.__value_.__l.__data_);
                    std::__tree<std::string>::destroy((uint64_t)&v308, v309);
                    if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v307.__r_.__value_.__l.__data_);
                    if (v113 <= v112)
                    {
                      v107 = a1 + k;
                      break;
                    }
                  }
                  if (*(char *)(v107 + 23) < 0)
                    operator delete(*(void **)v107);
                  v114 = (char ***)(a1 + k + 24);
                  v115 = *(_OWORD *)&v311.__r_.__value_.__l.__data_;
                  *(_QWORD *)(v107 + 16) = *((_QWORD *)&v311.__r_.__value_.__l + 2);
                  *(_OWORD *)v107 = v115;
                  *((_BYTE *)&v311.__r_.__value_.__s + 23) = 0;
                  v311.__r_.__value_.__s.__data_[0] = 0;
                  v116 = (char **)(v107 + 32);
                  std::__tree<std::string>::destroy((uint64_t)v114, *(char **)(v107 + 32));
                  *v114 = v312;
                  v117 = v313;
                  *(_QWORD *)(v107 + 32) = v313;
                  v118 = v314;
                  *(_QWORD *)(v107 + 40) = v314;
                  if (v118)
                  {
                    v119 = 0;
                    *((_QWORD *)v117 + 2) = v116;
                    v312 = &v313;
                    v313 = 0;
                    v314 = 0;
                  }
                  else
                  {
                    *v114 = v116;
                    v119 = v313;
                  }
                  *(_DWORD *)(v107 + 48) = v315;
                  std::__tree<std::string>::destroy((uint64_t)&v312, v119);
                  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v311.__r_.__value_.__l.__data_);
                }
                v95 = v98 + 56;
                v96 += 56;
                v97 = v98;
              }
              while (v98 + 56 != a2);
            }
          }
        }
        else if (i != a2)
        {
          v217 = i + 56;
          if (i + 56 != a2)
          {
            v218 = (unsigned int *)(i + 104);
            do
            {
              v219 = v217;
              if (*(char *)(v7 + 79) < 0)
              {
                std::string::__init_copy_ctor_external(&v320, *(const std::string::value_type **)v217, *(_QWORD *)(v7 + 64));
              }
              else
              {
                v220 = *(_OWORD *)v217;
                v320.__r_.__value_.__r.__words[2] = *(_QWORD *)(v217 + 16);
                *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v220;
              }
              v221 = (_QWORD *)(v7 + 80);
              std::set<std::string>::set[abi:ne180100]((uint64_t *)&v321, (const void ***)(v7 + 80));
              v324 = *(_DWORD *)(v7 + 104);
              if (*(char *)(v7 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v316, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
              }
              else
              {
                v222 = *(_OWORD *)v7;
                v316.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
                *(_OWORD *)&v316.__r_.__value_.__l.__data_ = v222;
              }
              std::set<std::string>::set[abi:ne180100](&v317, (const void ***)(v7 + 24));
              v223 = v7;
              v224 = *(_DWORD *)(v7 + 48);
              v319 = v224;
              v225 = v324;
              std::__tree<std::string>::destroy((uint64_t)&v317, v318);
              if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v316.__r_.__value_.__l.__data_);
              std::__tree<std::string>::destroy((uint64_t)&v321, v322);
              if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v320.__r_.__value_.__l.__data_);
              if (v225 > v224)
              {
                v226 = *(_OWORD *)v219;
                v311.__r_.__value_.__r.__words[2] = *(_QWORD *)(v219 + 16);
                *(_OWORD *)&v311.__r_.__value_.__l.__data_ = v226;
                *(_QWORD *)(v219 + 8) = 0;
                *(_QWORD *)(v219 + 16) = 0;
                *(_QWORD *)v219 = 0;
                v227 = (_QWORD *)(v223 + 88);
                v228 = *(_QWORD *)(v223 + 88);
                v312 = *(char ***)(v223 + 80);
                v313 = (char *)v228;
                v314 = *(_QWORD *)(v223 + 96);
                if (v314)
                {
                  *(_QWORD *)(v228 + 16) = &v313;
                  *v221 = v227;
                  *v227 = 0;
                  *(_QWORD *)(v223 + 96) = 0;
                }
                else
                {
                  v312 = &v313;
                }
                v315 = *(_DWORD *)(v223 + 104);
                v229 = v218;
                do
                {
                  v230 = (void **)(v229 - 12);
                  if (*((char *)v229 - 25) < 0)
                    operator delete(*v230);
                  *(_OWORD *)v230 = *(_OWORD *)(v229 - 26);
                  *((_QWORD *)v229 - 4) = *((_QWORD *)v229 - 11);
                  *((_BYTE *)v229 - 81) = 0;
                  *((_BYTE *)v229 - 104) = 0;
                  std::__tree<std::string>::__move_assign((uint64_t)(v229 - 6), (_QWORD *)v229 - 10);
                  *v229 = *(v229 - 14);
                  if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
                    std::string::__init_copy_ctor_external(&v307, v311.__r_.__value_.__l.__data_, v311.__r_.__value_.__l.__size_);
                  else
                    v307 = v311;
                  std::set<std::string>::set[abi:ne180100](&v308, (const void ***)&v312);
                  v310 = v315;
                  if (*((char *)v229 - 137) < 0)
                  {
                    std::string::__init_copy_ctor_external(&v302, *((const std::string::value_type **)v229 - 20), *((_QWORD *)v229 - 19));
                  }
                  else
                  {
                    v231 = *((_OWORD *)v229 - 10);
                    v302.__r_.__value_.__r.__words[2] = *((_QWORD *)v229 - 18);
                    *(_OWORD *)&v302.__r_.__value_.__l.__data_ = v231;
                  }
                  std::set<std::string>::set[abi:ne180100]((uint64_t *)&v303, (const void ***)v229 - 17);
                  v232 = *(v229 - 28);
                  v306 = v232;
                  v233 = v310;
                  std::__tree<std::string>::destroy((uint64_t)&v303, v304);
                  if (SHIBYTE(v302.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v302.__r_.__value_.__l.__data_);
                  std::__tree<std::string>::destroy((uint64_t)&v308, v309);
                  if (SHIBYTE(v307.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v307.__r_.__value_.__l.__data_);
                  v229 -= 14;
                }
                while (v233 > v232);
                v234 = (void **)(v229 - 12);
                if (*((char *)v229 - 25) < 0)
                  operator delete(*v234);
                v235 = *(_OWORD *)&v311.__r_.__value_.__l.__data_;
                *((_QWORD *)v229 - 4) = *((_QWORD *)&v311.__r_.__value_.__l + 2);
                *(_OWORD *)v234 = v235;
                *((_BYTE *)&v311.__r_.__value_.__s + 23) = 0;
                v311.__r_.__value_.__s.__data_[0] = 0;
                v236 = v229 - 4;
                std::__tree<std::string>::destroy((uint64_t)(v229 - 6), *((char **)v229 - 2));
                *((_QWORD *)v229 - 3) = v312;
                v237 = v313;
                *((_QWORD *)v229 - 2) = v313;
                v238 = v314;
                *((_QWORD *)v229 - 1) = v314;
                if (v238)
                {
                  v239 = 0;
                  *((_QWORD *)v237 + 2) = v236;
                  v312 = &v313;
                  v313 = 0;
                  v314 = 0;
                }
                else
                {
                  *((_QWORD *)v229 - 3) = v236;
                  v239 = v313;
                }
                *v229 = v315;
                std::__tree<std::string>::destroy((uint64_t)&v312, v239);
                if (SHIBYTE(v311.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v311.__r_.__value_.__l.__data_);
              }
              v217 = v219 + 56;
              v218 += 14;
              v7 = v219;
            }
            while (v219 + 56 != a2);
          }
        }
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 5;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v47 = *(float *)(a2 - 32);
        v48 = *(float *)a1;
        if (v47 > *(float *)a1)
        {
          *(float *)a1 = v47;
          *(float *)(a2 - 32) = v48;
          v49 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 24);
          *(_QWORD *)(a2 - 24) = v49;
          v50 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = v50;
          v51 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v51;
        }
        return;
      case 3:
        _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEjT1_S1D_S1D_S17_(a1, a1 + 32, a2 - 32);
        return;
      case 4:
        _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEvT1_S1D_S1D_S1D_S17_(a1, a1 + 32, a1 + 64, a2 - 32);
        return;
      case 5:
        _ZNSt3__124__sort5_maybe_branchlessB8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_Li0EEEvT1_S1D_S1D_S1D_S1D_S17_(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
        return;
      default:
        if (v9 <= 767)
        {
          v52 = a1 + 32;
          v54 = a1 == a2 || v52 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v54)
            {
              v55 = 0;
              v56 = a1;
              do
              {
                v57 = v52;
                v58 = *(float *)(v56 + 32);
                v59 = *(float *)v56;
                if (v58 > *(float *)v56)
                {
                  v60 = *(_QWORD *)(v56 + 40);
                  v112 = *(_OWORD *)(v56 + 48);
                  *(_QWORD *)(v56 + 48) = 0;
                  *(_QWORD *)(v56 + 56) = 0;
                  v61 = v55;
                  *(_QWORD *)(v56 + 40) = 0;
                  while (1)
                  {
                    v62 = a1 + v61;
                    *(float *)(a1 + v61 + 32) = v59;
                    std::vector<int>::__move_assign(a1 + v61 + 40, (__n128 *)(a1 + v61 + 8));
                    if (!v61)
                      break;
                    v59 = *(float *)(v62 - 32);
                    v61 -= 32;
                    if (v58 <= v59)
                    {
                      v63 = a1 + v61 + 32;
                      goto LABEL_78;
                    }
                  }
                  v63 = a1;
LABEL_78:
                  *(float *)v63 = v58;
                  v64 = *(void **)(v62 + 8);
                  if (v64)
                  {
                    *(_QWORD *)(v63 + 16) = v64;
                    operator delete(v64);
                  }
                  *(_QWORD *)(v62 + 8) = v60;
                  *(_OWORD *)(v63 + 16) = v112;
                }
                v52 = v57 + 32;
                v55 += 32;
                v56 = v57;
              }
              while (v57 + 32 != a2);
            }
          }
          else if (!v54)
          {
            v103 = (__n128 *)(a1 + 56);
            do
            {
              v104 = v52;
              v105 = *(float *)(a1 + 32);
              v106 = *(float *)a1;
              if (v105 > *(float *)a1)
              {
                v114 = *(__n128 *)(a1 + 40);
                v107 = *(_QWORD *)(a1 + 56);
                *(_QWORD *)(a1 + 48) = 0;
                *(_QWORD *)(a1 + 56) = 0;
                v108 = v103;
                *(_QWORD *)(a1 + 40) = 0;
                do
                {
                  v108[-2].n128_f32[2] = v106;
                  std::vector<int>::__move_assign((uint64_t)&v108[-1], v108 - 3);
                  v106 = v108[-6].n128_f32[2];
                  v108 -= 2;
                }
                while (v105 > v106);
                v108[-2].n128_f32[2] = v105;
                v109 = (void *)v108[-1].n128_u64[0];
                if (v109)
                {
                  v108[-1].n128_u64[1] = (unint64_t)v109;
                  operator delete(v109);
                }
                v108[-1] = v114;
                v108->n128_u64[0] = v107;
              }
              v52 = v104 + 32;
              v103 += 2;
              a1 = v104;
            }
            while (v104 + 32 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 == a2)
            return;
          v65 = (unint64_t)(v10 - 2) >> 1;
          v66 = v65;
          do
          {
            v67 = v66;
            if (v65 >= v66)
            {
              v68 = (2 * v66) | 1;
              v69 = a1 + 32 * v68;
              if (2 * v67 + 2 < v10 && *(float *)v69 > *(float *)(v69 + 32))
              {
                v69 += 32;
                v68 = 2 * v67 + 2;
              }
              v70 = a1 + 32 * v67;
              v71 = *(float *)v70;
              if (*(float *)v69 <= *(float *)v70)
              {
                v72 = a1 + 32 * v67;
                v113 = *(_OWORD *)(v72 + 8);
                v73 = *(_QWORD *)(v72 + 24);
                *(_QWORD *)(v72 + 16) = 0;
                *(_QWORD *)(v72 + 24) = 0;
                *(_QWORD *)(v72 + 8) = 0;
                v74 = *(float *)v69;
                do
                {
                  v75 = (float *)v70;
                  v70 = v69;
                  *v75 = v74;
                  std::vector<int>::__move_assign((uint64_t)(v75 + 2), (__n128 *)(v69 + 8));
                  if (v65 < v68)
                    break;
                  v76 = 2 * v68;
                  v68 = (2 * v68) | 1;
                  v69 = a1 + 32 * v68;
                  v77 = v76 + 2;
                  if (v77 < v10 && *(float *)v69 > *(float *)(v69 + 32))
                  {
                    v69 += 32;
                    v68 = v77;
                  }
                  v74 = *(float *)v69;
                }
                while (*(float *)v69 <= v71);
                *(float *)v70 = v71;
                v78 = *(void **)(v70 + 8);
                if (v78)
                {
                  *(_QWORD *)(v70 + 16) = v78;
                  operator delete(v78);
                }
                *(_OWORD *)(v70 + 8) = v113;
                *(_QWORD *)(v70 + 24) = v73;
              }
            }
            v66 = v67 - 1;
          }
          while (v67);
          v79 = (unint64_t)v9 >> 5;
          while (2)
          {
            v80 = 0;
            v81 = *(float *)a1;
            v82 = *(_QWORD *)(a1 + 8);
            v83 = *(_QWORD *)(a1 + 16);
            v84 = *(_QWORD *)(a1 + 24);
            *(_QWORD *)(a1 + 8) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            v85 = a1;
            *(_QWORD *)(a1 + 24) = 0;
            do
            {
              v86 = (_DWORD *)v85;
              v85 += 32 * v80 + 32;
              v87 = 2 * v80;
              v80 = (2 * v80) | 1;
              v88 = v87 + 2;
              if (v88 < v79 && *(float *)v85 > *(float *)(v85 + 32))
              {
                v85 += 32;
                v80 = v88;
              }
              v89 = (_QWORD *)(v85 + 8);
              *v86 = *(_DWORD *)v85;
              std::vector<int>::__move_assign((uint64_t)(v86 + 2), (__n128 *)(v85 + 8));
            }
            while (v80 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
            v90 = a2 - 32;
            if (v85 == a2 - 32)
            {
              *(float *)v85 = v81;
              v101 = *(void **)(v85 + 8);
              if (v101)
              {
                *(_QWORD *)(v85 + 16) = v101;
                operator delete(v101);
                *(_QWORD *)(v85 + 16) = 0;
                *(_QWORD *)(v85 + 24) = 0;
              }
              *v89 = v82;
LABEL_120:
              *(_QWORD *)(v85 + 16) = v83;
              *(_QWORD *)(v85 + 24) = v84;
            }
            else
            {
              *(_DWORD *)v85 = *(_DWORD *)(a2 - 32);
              v91 = v85 + 32;
              std::vector<int>::__move_assign(v85 + 8, (__n128 *)(a2 - 24));
              *(float *)(a2 - 32) = v81;
              v92 = *(void **)(a2 - 24);
              if (v92)
              {
                *(_QWORD *)(a2 - 16) = v92;
                operator delete(v92);
              }
              *(_QWORD *)(a2 - 24) = v82;
              *(_QWORD *)(a2 - 16) = v83;
              *(_QWORD *)(a2 - 8) = v84;
              if (v91 - a1 >= 33)
              {
                v93 = (((unint64_t)(v91 - a1) >> 5) - 2) >> 1;
                v94 = a1 + 32 * v93;
                v95 = *(float *)v85;
                if (*(float *)v94 > *(float *)v85)
                {
                  v96 = *(_QWORD *)(v85 + 8);
                  v83 = *(_QWORD *)(v85 + 16);
                  v84 = *(_QWORD *)(v85 + 24);
                  *v89 = 0;
                  *(_QWORD *)(v85 + 16) = 0;
                  *(_QWORD *)(v85 + 24) = 0;
                  v97 = *(float *)v94;
                  do
                  {
                    v98 = (float *)v85;
                    v85 = v94;
                    *v98 = v97;
                    v99 = (_QWORD *)(v94 + 8);
                    std::vector<int>::__move_assign((uint64_t)(v98 + 2), (__n128 *)(v94 + 8));
                    if (!v93)
                      break;
                    v93 = (v93 - 1) >> 1;
                    v94 = a1 + 32 * v93;
                    v97 = *(float *)v94;
                  }
                  while (*(float *)v94 > v95);
                  *(float *)v85 = v95;
                  v100 = *(void **)(v85 + 8);
                  if (v100)
                  {
                    *(_QWORD *)(v85 + 16) = v100;
                    operator delete(v100);
                    *(_QWORD *)(v85 + 16) = 0;
                    *(_QWORD *)(v85 + 24) = 0;
                  }
                  *v99 = v96;
                  goto LABEL_120;
                }
              }
            }
            a2 = v90;
            if (v79-- <= 2)
              return;
            continue;
          }
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = a1 + 32 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 <= 0x1000)
        {
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEjT1_S1D_S1D_S17_(v12, a1, a2 - 32);
        }
        else
        {
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEjT1_S1D_S1D_S17_(a1, v12, a2 - 32);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEjT1_S1D_S1D_S17_(a1 + 32, v12 - 32, a2 - 64);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEjT1_S1D_S1D_S17_(a1 + 64, a1 + 32 + 32 * v11, a2 - 96);
          _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEjT1_S1D_S1D_S17_(v12 - 32, v12, a1 + 32 + 32 * v11);
          v13 = *(float *)a1;
          *(_DWORD *)a1 = *(_DWORD *)v12;
          *(float *)v12 = v13;
          v14 = *(_OWORD *)(a1 + 8);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(v12 + 8);
          *(_OWORD *)(v12 + 8) = v14;
          v15 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(v12 + 24);
          *(_QWORD *)(v12 + 24) = v15;
        }
        --a3;
        v16 = *(float *)a1;
        if ((a4 & 1) == 0 && *(float *)(a1 - 32) <= v16)
        {
          v33 = *(_OWORD *)(a1 + 8);
          v34 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)(a1 + 24) = 0;
          if (v16 <= *(float *)(a2 - 32))
          {
            v36 = a1 + 32;
            do
            {
              v8 = v36;
              if (v36 >= a2)
                break;
              v36 += 32;
            }
            while (v16 <= *(float *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v35 = *(float *)(v8 + 32);
              v8 += 32;
            }
            while (v16 <= v35);
          }
          v37 = a2;
          if (v8 < a2)
          {
            v37 = a2;
            do
            {
              v38 = *(float *)(v37 - 32);
              v37 -= 32;
            }
            while (v16 > v38);
          }
          v111 = v33;
          if (v8 < v37)
          {
            v39 = *(float *)v8;
            v40 = *(float *)v37;
            do
            {
              *(float *)v8 = v40;
              *(float *)v37 = v39;
              v41 = *(_QWORD *)(v8 + 8);
              *(_QWORD *)(v8 + 8) = *(_QWORD *)(v37 + 8);
              *(_QWORD *)(v37 + 8) = v41;
              v42 = *(_QWORD *)(v8 + 16);
              *(_QWORD *)(v8 + 16) = *(_QWORD *)(v37 + 16);
              *(_QWORD *)(v37 + 16) = v42;
              v43 = *(_QWORD *)(v8 + 24);
              *(_QWORD *)(v8 + 24) = *(_QWORD *)(v37 + 24);
              *(_QWORD *)(v37 + 24) = v43;
              do
              {
                v44 = *(float *)(v8 + 32);
                v8 += 32;
                v39 = v44;
              }
              while (v16 <= v44);
              do
              {
                v45 = *(float *)(v37 - 32);
                v37 -= 32;
                v40 = v45;
              }
              while (v16 > v45);
            }
            while (v8 < v37);
          }
          if (v8 - 32 != a1)
          {
            *(_DWORD *)a1 = *(_DWORD *)(v8 - 32);
            std::vector<int>::__move_assign(a1 + 8, (__n128 *)(v8 - 24));
          }
          *(float *)(v8 - 32) = v16;
          v46 = *(void **)(v8 - 24);
          if (v46)
          {
            *(_QWORD *)(v8 - 16) = v46;
            operator delete(v46);
          }
          a4 = 0;
          *(_OWORD *)(v8 - 24) = v111;
          *(_QWORD *)(v8 - 8) = v34;
          continue;
        }
        v17 = 0;
        v110 = *(_OWORD *)(a1 + 8);
        v18 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        do
        {
          v19 = *(float *)(a1 + v17 + 32);
          v17 += 32;
        }
        while (v19 > v16);
        v20 = a1 + v17;
        v21 = (float *)a2;
        if (v17 == 32)
        {
          v21 = (float *)a2;
          do
          {
            if (v20 >= (unint64_t)v21)
              break;
            v23 = *(v21 - 8);
            v21 -= 8;
          }
          while (v23 <= v16);
        }
        else
        {
          do
          {
            v22 = *(v21 - 8);
            v21 -= 8;
          }
          while (v22 <= v16);
        }
        if (v20 >= (unint64_t)v21)
        {
          v8 = a1 + v17;
        }
        else
        {
          v24 = *v21;
          v8 = a1 + v17;
          v25 = v21;
          do
          {
            *(float *)v8 = v24;
            *v25 = v19;
            v26 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = *((_QWORD *)v25 + 1);
            *((_QWORD *)v25 + 1) = v26;
            v27 = *(_QWORD *)(v8 + 16);
            *(_QWORD *)(v8 + 16) = *((_QWORD *)v25 + 2);
            *((_QWORD *)v25 + 2) = v27;
            v28 = *(_QWORD *)(v8 + 24);
            *(_QWORD *)(v8 + 24) = *((_QWORD *)v25 + 3);
            *((_QWORD *)v25 + 3) = v28;
            do
            {
              v29 = *(float *)(v8 + 32);
              v8 += 32;
              v19 = v29;
            }
            while (v29 > v16);
            do
            {
              v30 = *(v25 - 8);
              v25 -= 8;
              v24 = v30;
            }
            while (v30 <= v16);
          }
          while (v8 < (unint64_t)v25);
        }
        if (v8 - 32 != a1)
        {
          *(_DWORD *)a1 = *(_DWORD *)(v8 - 32);
          std::vector<int>::__move_assign(a1 + 8, (__n128 *)(v8 - 24));
        }
        *(float *)(v8 - 32) = v16;
        v31 = *(void **)(v8 - 24);
        if (v31)
        {
          *(_QWORD *)(v8 - 16) = v31;
          operator delete(v31);
        }
        *(_OWORD *)(v8 - 24) = v110;
        *(_QWORD *)(v8 - 8) = v18;
        if (v20 < (unint64_t)v21)
        {
LABEL_33:
          _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_Lb0EEEvT1_S1D_S17_NS_15iterator_traitsIS1D_E15difference_typeEb(a1, v8 - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v32 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEbT1_S1D_S17_(a1, v8 - 32);
        if (!_ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEbT1_S1D_S17_(v8, a2))
        {
          if (v32)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 32;
        if (!v32)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v20 = *(a2 - 2);
        v19 = (__int128 *)(a2 - 2);
        if (v20 < *v9)
        {
          v28 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *v19;
          *v19 = v28;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((__int128 *)v9, v9 + 2, a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((__int128 *)v9, v9 + 2, v9 + 4, (_OWORD *)a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((__int128 *)v9, v9 + 2, v9 + 4, (__n128 *)v9 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v12 > 383)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(v9, a2, a2, a3);
            return;
          }
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((__int128 *)&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((__int128 *)v9, &v9[2 * (v13 >> 1)], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((__int128 *)v9 + 1, v15 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((__int128 *)v9 + 2, &v9[2 * v14 + 2], a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((__int128 *)v15 - 1, v15, &v9[2 * v14 + 2]);
            v27 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v27;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(v9 - 2) >= *v9)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,std::__less<void,void> &>(v9, a2);
            goto LABEL_16;
          }
LABEL_11:
          v16 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,std::__less<void,void> &>((__int128 *)v9, (__int128 *)a2);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((uint64_t)v9, (unint64_t *)v16);
          v9 = (unint64_t *)(v16 + 1);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((uint64_t)(v16 + 1), a2))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,false>(a1, v16, a3, -v11, a5 & 1);
            v9 = (unint64_t *)(v16 + 1);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (unint64_t *)v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(v9, a2);
        }
        else if (v9 != a2)
        {
          v21 = v9 + 2;
          while (v21 != a2)
          {
            v22 = v21;
            v23 = a1[2];
            if (v23 < *a1)
            {
              v24 = a1[3];
              v25 = v22;
              do
              {
                *(_OWORD *)v25 = *((_OWORD *)v25 - 1);
                v26 = *(v25 - 4);
                v25 -= 2;
              }
              while (v23 < v26);
              *v25 = v23;
              v25[1] = v24;
            }
            v21 = v22 + 2;
            a1 = v22;
          }
        }
        return;
    }
  }
}

  v8 = a2 - 3;
  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * (a2 - v9);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v22 = *(a2 - 3);
        v23 = *v9;
        if (0x6DB6DB6DB6DB6DB7 * ((*(a2 - 2) - v22) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                                                * ((v9[1] - *v9) >> 5)))
        {
          *v9 = v22;
          *(a2 - 3) = v23;
          v24 = v9[1];
          v9[1] = *(a2 - 2);
          *(a2 - 2) = v24;
          v25 = v9[2];
          v9[2] = *(a2 - 1);
          *(a2 - 1) = v25;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(v9, v9 + 3, v8);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(v9, v9 + 3, v9 + 6, v8);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(v9, v9 + 3, v9 + 6, v9 + 9, v8);
        return;
      default:
        if (v12 <= 575)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[3 * (v13 >> 1)];
          if ((unint64_t)v12 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(&v9[3 * (v13 >> 1)], v9, v8);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(v9, &v9[3 * (v13 >> 1)], v8);
            v16 = &v9[3 * v14];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(v9 + 3, v16 - 3, a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(v9 + 6, &v9[3 * v14 + 3], a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(v16 - 3, v15, &v9[3 * v14 + 3]);
            v17 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v17;
            v18 = v9[2];
            v9[2] = v16[2];
            v16[2] = v18;
          }
          if ((a5 & 1) == 0
            && 0x6DB6DB6DB6DB6DB7 * ((*(v9 - 2) - *(v9 - 3)) >> 5) <= (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                                                         * ((v9[1] - *v9) >> 5)))
          {
            v9 = (uint64_t *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<quasar::Token> *,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token>&,std::vector<quasar::Token>&)#1} &>((uint64_t)v9, (void **)a2);
            goto LABEL_16;
          }
          v19 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<quasar::Token> *,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token>&,std::vector<quasar::Token>&)#1} &>((uint64_t)v9, (void **)a2);
          if ((v20 & 1) == 0)
            goto LABEL_14;
          v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(v9, v19);
          v9 = v19 + 3;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(v19 + 3, a2))
          {
            v10 = v11 + 1;
            if ((v21 & 1) != 0)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*,false>(a1, v19, a3, -v11, a5 & 1);
            v9 = v19 + 3;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v19;
          if ((v21 & 1) != 0)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*,std::vector<quasar::Token>*>((uint64_t)v9, (uint64_t)a2, a2, a3);
        return;
    }
  }
}

  MemberOf = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = MemberOf;
    v11 = v10;
    v12 = (char *)a2 - (char *)MemberOf;
    v13 = ((char *)a2 - (char *)MemberOf) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v21 = *(a2 - 2);
        v22 = *MemberOf;
        if (v21 < *MemberOf)
        {
          *MemberOf = v21;
          *(a2 - 2) = v22;
          v23 = MemberOf[1];
          MemberOf[1] = *(a2 - 1);
          *(a2 - 1) = v23;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(MemberOf, MemberOf + 2, a2 - 2);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>((uint64_t)MemberOf, (uint64_t)(MemberOf + 2), (uint64_t)(MemberOf + 4), (float *)a2 - 2);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>((uint64_t)MemberOf, (uint64_t)(MemberOf + 2), (uint64_t)(MemberOf + 4), (float *)MemberOf + 6, (float *)a2 - 2);
        return;
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(MemberOf, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(MemberOf, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &MemberOf[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(&MemberOf[2 * (v13 >> 1)], MemberOf, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(MemberOf, &MemberOf[2 * (v13 >> 1)], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(MemberOf + 2, v15 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(MemberOf + 4, &MemberOf[2 * v14 + 2], a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>(v15 - 2, v15, &MemberOf[2 * v14 + 2]);
            v16 = *MemberOf;
            *MemberOf = *v15;
            *v15 = v16;
            v17 = MemberOf[1];
            MemberOf[1] = v15[1];
            v15[1] = v17;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(MemberOf - 2) >= *MemberOf)
          {
            MemberOf = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,float> *,kaldi::CompareFirstMemberOfPair<int,float> &>(MemberOf, a2);
            goto LABEL_16;
          }
LABEL_11:
          v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,float> *,kaldi::CompareFirstMemberOfPair<int,float> &>(MemberOf, a2);
          if ((v19 & 1) == 0)
            goto LABEL_14;
          v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>((uint64_t)MemberOf, (float *)v18);
          MemberOf = v18 + 2;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *>((uint64_t)(v18 + 2), (float *)a2))
          {
            v10 = v11 + 1;
            if (v20)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *,false>(a1, v18, a3, -v11, a5 & 1);
            MemberOf = v18 + 2;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v18;
          if (v20)
            return;
          goto LABEL_1;
        }
        if (MemberOf != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::CompareFirstMemberOfPair<int,float> &,std::pair<int,float> *,std::pair<int,float> *>((char *)MemberOf, (char *)a2, (char *)a2, a3);
        return;
    }
  }
}

  v8 = (uint64_t *)(a2 - 20);
  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = a2 - (char *)v9;
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - (char *)v9) >> 2);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*((_DWORD *)a2 - 4) < *((_DWORD *)v9 + 1))
        {
          v24 = *v9;
          v25 = *((_DWORD *)v9 + 4);
          *v9 = *(_QWORD *)(a2 - 20);
          v26 = *(_QWORD *)(a2 - 12);
          *((_DWORD *)v9 + 4) = *((_DWORD *)a2 - 1);
          v27 = v9[1];
          v9[1] = v26;
          *(_QWORD *)(a2 - 20) = v24;
          *(_QWORD *)(a2 - 12) = v27;
          *((_DWORD *)a2 - 1) = v25;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v9, (uint64_t *)((char *)v9 + 20), v8);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v9, (uint64_t)v9 + 20, (uint64_t)(v9 + 5), (uint64_t)v8);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v9, (uint64_t)v9 + 20, (uint64_t)(v9 + 5), (uint64_t)v9 + 60, (uint64_t)v8);
        return;
      default:
        if (v12 <= 479)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (uint64_t *)((char *)v9 + 20 * (v13 >> 1));
          if ((unint64_t)v12 < 0xA01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)((char *)v9 + 20 * (v13 >> 1)), v9, v8);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v9, (uint64_t *)((char *)v9 + 20 * (v13 >> 1)), v8);
            v16 = v8;
            v17 = (char *)v9 + 20 * v14;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)((char *)v9 + 20), (uint64_t *)(v17 - 20), (uint64_t *)a2 - 5);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v9 + 5, (uint64_t *)((char *)v9 + 20 * v14 + 20), (uint64_t *)(a2 - 60));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)(v17 - 20), v15, (uint64_t *)((char *)v9 + 20 * v14 + 20));
            v18 = *v9;
            v19 = *((_DWORD *)v9 + 4);
            *v9 = *v15;
            *((_DWORD *)v9 + 4) = *((_DWORD *)v17 + 4);
            *v15 = v18;
            v20 = v9[1];
            v9[1] = *((_QWORD *)v17 + 1);
            *((_QWORD *)v17 + 1) = v20;
            *((_DWORD *)v17 + 4) = v19;
            v8 = v16;
          }
          if ((a5 & 1) == 0 && *((_DWORD *)v9 - 4) >= *((_DWORD *)v9 + 1))
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &>(v9, (unint64_t)a2);
            goto LABEL_16;
          }
          v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &>(v9, (unint64_t)a2);
          if ((v22 & 1) == 0)
            goto LABEL_14;
          v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v9, v21);
          v9 = (uint64_t *)(v21 + 20);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v21 + 20, (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v23)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,false>(a1, v21, a3, -v11, a5 & 1);
            v9 = (uint64_t *)(v21 + 20);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (char *)v21;
          if (v23)
            return;
          goto LABEL_1;
        }
        if (v9 != (uint64_t *)a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v9, (uint64_t *)a2, (uint64_t *)a2, a3);
        return;
    }
  }
}

  v8 = (uint64_t)(a2 - 6);
  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v9) >> 4);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v25 = *(a2 - 6);
        v24 = a2 - 6;
        v46 = v25;
        v47 = v24[1];
        v49 = 0;
        v50 = 0;
        v48 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v48, (const void *)v24[2], v24[3], (v24[3] - v24[2]) >> 2);
        v51 = *((_DWORD *)v24 + 10);
        v40 = *(_QWORD *)v9;
        v41 = *(_QWORD *)(v9 + 8);
        v43 = 0;
        v44 = 0;
        v42 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v42, *(const void **)(v9 + 16), *(_QWORD *)(v9 + 24), (uint64_t)(*(_QWORD *)(v9 + 24) - *(_QWORD *)(v9 + 16)) >> 2);
        v45 = *(_DWORD *)(v9 + 40);
        v26 = v46;
        v27 = v40;
        if (v42)
        {
          v43 = v42;
          operator delete(v42);
        }
        if (v48)
        {
          v49 = v48;
          operator delete(v48);
        }
        if (v26 < v27)
          std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a1, v24);
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(v9, v9 + 48, v8);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(v9, v9 + 48, v9 + 96, v8);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(v9, v9 + 48, v9 + 96, v9 + 144, v8);
        return;
      default:
        if (v12 <= 1151)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>((_QWORD *)v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (uint64_t *)(v9 + 48 * (v13 >> 1));
          if ((unint64_t)v12 < 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>((uint64_t)v15, a1, v8);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1, (uint64_t)v15, v8);
            v16 = v8;
            v17 = 3 * v14;
            v18 = a1 + 48 * v14 - 48;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1 + 48, v18, (uint64_t)(a2 - 12));
            v19 = a1 + 48 + 16 * v17;
            v8 = v16;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1 + 96, v19, (uint64_t)(a2 - 18));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(v18, (uint64_t)v15, v19);
            std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a1, v15);
          }
          if ((a5 & 1) == 0)
          {
            v34 = *(_QWORD *)(a1 - 48);
            v35 = *(_QWORD *)(a1 - 40);
            v37 = 0;
            v38 = 0;
            v36 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v36, *(const void **)(a1 - 32), *(_QWORD *)(a1 - 24), (uint64_t)(*(_QWORD *)(a1 - 24) - *(_QWORD *)(a1 - 32)) >> 2);
            v39 = *(_DWORD *)(a1 - 8);
            v29 = *(_QWORD *)a1;
            v31 = 0;
            v32 = 0;
            __p = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 2);
            v33 = *(_DWORD *)(a1 + 40);
            v20 = v34;
            if (__p)
            {
              v31 = __p;
              operator delete(__p);
            }
            if (v36)
            {
              v37 = v36;
              operator delete(v36);
            }
            if (v20 >= (int)v29)
            {
              v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &>(a1, a2);
              goto LABEL_20;
            }
          }
          v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &>((uint64_t *)a1, (unint64_t)a2);
          if ((v22 & 1) == 0)
            goto LABEL_18;
          v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(a1, v21);
          v9 = v21 + 48;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(v21 + 48, (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v23)
              continue;
LABEL_18:
            std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*,false>(a1, v21, a3, -v11, a5 & 1);
            v9 = v21 + 48;
LABEL_20:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (uint64_t *)v21;
          if (v23)
            return;
          goto LABEL_1;
        }
        if ((uint64_t *)v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>*>(v9, (uint64_t)a2, (uint64_t)a2, a3);
        return;
    }
  }
}

  v8 = (uint64_t *)((char *)a2 - 20);
  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v9) >> 2);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v24 = *(uint64_t *)((char *)a2 - 20);
        v25 = *v9;
        if ((int)v24 < (int)*v9)
        {
          v26 = *((_DWORD *)v9 + 4);
          *v9 = v24;
          v27 = *(uint64_t *)((char *)a2 - 12);
          *((_DWORD *)v9 + 4) = *((_DWORD *)a2 - 1);
          v28 = v9[1];
          v9[1] = v27;
          *(uint64_t *)((char *)a2 - 20) = v25;
          *(uint64_t *)((char *)a2 - 12) = v28;
          *((_DWORD *)a2 - 1) = v26;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v9, (uint64_t *)((char *)v9 + 20), v8);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v9, (uint64_t)v9 + 20, (uint64_t)(v9 + 5), (uint64_t)v8);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v9, (uint64_t)v9 + 20, (uint64_t)(v9 + 5), (uint64_t)v9 + 60, (uint64_t)v8);
        return;
      default:
        if (v12 <= 479)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v9, (uint64_t)a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (uint64_t *)((char *)v9 + 20 * (v13 >> 1));
          if ((unint64_t)v12 < 0xA01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)((char *)v9 + 20 * (v13 >> 1)), v9, v8);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v9, (uint64_t *)((char *)v9 + 20 * (v13 >> 1)), v8);
            v16 = v8;
            v17 = (char *)v9 + 20 * v14;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)((char *)v9 + 20), (uint64_t *)(v17 - 20), a2 - 5);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v9 + 5, (uint64_t *)((char *)v9 + 20 * v14 + 20), (uint64_t *)((char *)a2 - 60));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)(v17 - 20), v15, (uint64_t *)((char *)v9 + 20 * v14 + 20));
            v18 = *v9;
            v19 = *((_DWORD *)v9 + 4);
            *v9 = *v15;
            *((_DWORD *)v9 + 4) = *((_DWORD *)v17 + 4);
            *v15 = v18;
            v20 = v9[1];
            v9[1] = *((_QWORD *)v17 + 1);
            *((_QWORD *)v17 + 1) = v20;
            *((_DWORD *)v17 + 4) = v19;
            v8 = v16;
          }
          if ((a5 & 1) == 0 && *((_DWORD *)v9 - 5) >= *(_DWORD *)v9)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &>(v9, a2);
            goto LABEL_16;
          }
          v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &>(v9, a2);
          if ((v22 & 1) == 0)
            goto LABEL_14;
          v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v9, v21);
          v9 = (uint64_t *)(v21 + 20);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v21 + 20, (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v23)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,false>(a1, v21, a3, -v11, a5 & 1);
            v9 = (uint64_t *)(v21 + 20);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (uint64_t *)v21;
          if (v23)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v9, a2, a2, a3);
        return;
    }
  }
}

  matched = a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = matched;
    v12 = v11;
    v13 = (char *)a2 - (char *)matched;
    v14 = 0x8E38E38E38E38E39 * (((char *)a2 - (char *)matched) >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((__int128 *)((char *)a2 - 72), matched))
          std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(matched, (__int128 *)((char *)a2 - 72));
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(matched, (__int128 *)((char *)matched + 72), (__int128 *)((char *)a2 - 72), a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(matched, (__int128 *)((char *)matched + 72), matched + 9, (__int128 *)((char *)a2 - 72), a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(matched, (__int128 *)((char *)matched + 72), matched + 9, (__int128 *)((char *)matched + 216), (__int128 *)((char *)a2 - 72), a3);
        return;
      default:
        if (v13 <= 1727)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(matched, a2, (uint64_t (**)(__int128 *, uint64_t))a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(matched, a2, (uint64_t (**)(__int128 *, uint64_t))a3);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = (__int128 *)((char *)matched + 72 * (v14 >> 1));
          if ((unint64_t)v13 < 0x2401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(v16, matched, (__int128 *)((char *)a2 - 72), a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(matched, v16, (__int128 *)((char *)a2 - 72), a3);
            v17 = 9 * v15;
            v18 = (__int128 *)((char *)matched + 72 * v15 - 72);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>((__int128 *)((char *)matched + 72), v18, a2 - 9, a3);
            v19 = matched + 9;
            v20 = (__int128 *)((char *)matched + 8 * v17 + 72);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(v19, v20, (__int128 *)((char *)a2 - 216), a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(v18, v16, v20, a3);
            std::swap[abi:ne180100]<quasar::PhoneticMatchResult>(a1, v16);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)((__int128 *)((char *)a1 - 72), a1) & 1) == 0)
          {
            matched = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,quasar::PhoneticMatchResult *,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&)>((uint64_t)a1, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v21 = (__int128 *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,quasar::PhoneticMatchResult *,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&)>((uint64_t)a1, a2, (uint64_t (**)(uint64_t, __int128 *))a3);
          if ((v22 & 1) == 0)
            goto LABEL_14;
          v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>(a1, v21, a3);
          matched = (__int128 *)((char *)v21 + 72);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*>((__int128 *)((char *)v21 + 72), a2, a3))
          {
            v11 = v12 + 1;
            if ((v23 & 1) != 0)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*,false>(a1, v21, a3, -v12, a5 & 1);
            matched = (__int128 *)((char *)v21 + 72);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = v21;
          if ((v23 & 1) != 0)
            return;
          goto LABEL_1;
        }
        if (matched != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::PhoneticMatchResult const&,quasar::PhoneticMatchResult const&),quasar::PhoneticMatchResult*,quasar::PhoneticMatchResult*>(matched, a2, a2, (unsigned int (**)(uint64_t, uint64_t))a3, a6);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v20 = *((_DWORD *)a2 - 4);
        v19 = a2 - 1;
        if (v20 < (signed __int32)v9->n128_u32[0])
        {
          v28 = (__int128)*v9;
          *v9 = (__n128)*v19;
          *v19 = v28;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v9, (int *)&v9[1], (int *)a2 - 4);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v9, (int *)&v9[1], (int *)&v9[2], a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v9, (int *)&v9[1], (int *)&v9[2], v9 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v12 > 383)
        {
          if (v11 == 1)
          {
            if (v9 != (__n128 *)a2)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v9, a2, a2, a3);
            return;
          }
          v14 = v13 >> 1;
          v15 = (int *)&v9[v13 >> 1];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)&v9[v13 >> 1], (int *)v9, (int *)a2 - 4);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v9, (int *)&v9[v13 >> 1], (int *)a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)&v9[1], v15 - 4, (int *)a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)&v9[2], (int *)&v9[v14 + 1], (int *)a2 - 12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v15 - 1, v15, (int *)&v9[v14 + 1]);
            v27 = (__int128)*v9;
            *v9 = *(__n128 *)v15;
            *(_OWORD *)v15 = v27;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if ((signed __int32)v9[-1].n128_u32[0] >= (signed __int32)v9->n128_u32[0])
          {
            v9 = (__n128 *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>(v9, a2);
            goto LABEL_16;
          }
LABEL_11:
          v16 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>((__int128 *)v9, a2);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)v9, (__n128 *)v16);
          v9 = (__n128 *)(v16 + 1);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)(v16 + 1), (__n128 *)a2))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,false>(a1, v16, a3, -v11, a5 & 1);
            v9 = (__n128 *)(v16 + 1);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v9, a2);
        }
        else if (v9 != (__n128 *)a2)
        {
          v21 = (__int128 *)&v9[1];
          while (v21 != a2)
          {
            v22 = v21;
            v23 = a1[1].n128_i64[0];
            if ((int)v23 < (signed __int32)a1->n128_u32[0])
            {
              v24 = a1[1].n128_i64[1];
              v25 = v22;
              do
              {
                *v25 = *(v25 - 1);
                v26 = *((_DWORD *)v25-- - 8);
              }
              while ((int)v23 < v26);
              *(_QWORD *)v25 = v23;
              *((_QWORD *)v25 + 1) = v24;
            }
            v21 = v22 + 1;
            a1 = (__n128 *)v22;
          }
        }
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v20 = *((_DWORD *)a2 - 4);
        v19 = a2 - 1;
        if (v20 < (signed __int32)v9->n128_u32[0])
        {
          v28 = (__int128)*v9;
          *v9 = (__n128)*v19;
          *v19 = v28;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v9, (int *)&v9[1], (int *)a2 - 4);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v9, (int *)&v9[1], (int *)&v9[2], a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v9, (int *)&v9[1], (int *)&v9[2], v9 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v12 > 383)
        {
          if (v11 == 1)
          {
            if (v9 != (__n128 *)a2)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v9, a2, a2, a3);
            return;
          }
          v14 = v13 >> 1;
          v15 = (int *)&v9[v13 >> 1];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)&v9[v13 >> 1], (int *)v9, (int *)a2 - 4);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v9, (int *)&v9[v13 >> 1], (int *)a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)&v9[1], v15 - 4, (int *)a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)&v9[2], (int *)&v9[v14 + 1], (int *)a2 - 12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v15 - 1, v15, (int *)&v9[v14 + 1]);
            v27 = (__int128)*v9;
            *v9 = *(__n128 *)v15;
            *(_OWORD *)v15 = v27;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if ((signed __int32)v9[-1].n128_u32[0] >= (signed __int32)v9->n128_u32[0])
          {
            v9 = (__n128 *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>(v9, a2);
            goto LABEL_16;
          }
LABEL_11:
          v16 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>((__int128 *)v9, a2);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>((uint64_t)v9, (__n128 *)v16);
          v9 = (__n128 *)(v16 + 1);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*>((uint64_t)(v16 + 1), (__n128 *)a2))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>*,false>(a1, v16, a3, -v11, a5 & 1);
            v9 = (__n128 *)(v16 + 1);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v9, a2);
        }
        else if (v9 != (__n128 *)a2)
        {
          v21 = (__int128 *)&v9[1];
          while (v21 != a2)
          {
            v22 = v21;
            v23 = a1[1].n128_i64[0];
            if ((int)v23 < (signed __int32)a1->n128_u32[0])
            {
              v24 = a1[1].n128_i64[1];
              v25 = v22;
              do
              {
                *v25 = *(v25 - 1);
                v26 = *((_DWORD *)v25-- - 8);
              }
              while ((int)v23 < v26);
              *(_QWORD *)v25 = v23;
              *((_QWORD *)v25 + 1) = v24;
            }
            v21 = v22 + 1;
            a1 = (__n128 *)v22;
          }
        }
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v22 = a2 - 1;
        v23 = *((_DWORD *)a2 - 4);
        if (v23 < *(_DWORD *)v9
          || v23 <= *(_DWORD *)v9
          && ((v24 = *((_DWORD *)a2 - 3), v25 = *((_DWORD *)v9 + 1), v24 < v25)
           || v24 <= v25 && *((_DWORD *)a2 - 1) < *((_DWORD *)v9 + 3)))
        {
          v27 = *v9;
          *v9 = *v22;
          *v22 = v27;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v9, (int *)v9 + 4, a2 - 1);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)v9, (int *)v9 + 4, (uint64_t)(v9 + 2), (uint64_t)(a2 - 1));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)v9, (int *)v9 + 4, (uint64_t)(v9 + 2), (uint64_t)(v9 + 3), (uint64_t)(a2 - 1));
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (int *)&v9[v13 >> 1];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(&v9[v13 >> 1], (int *)v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_15;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v9, (int *)&v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v9 + 1, v15 - 4, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v9 + 2, (int *)&v9[v14 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v15 - 1, v15, &v9[v14 + 1]);
            v26 = *v9;
            *v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v26;
            if ((a5 & 1) != 0)
              goto LABEL_15;
          }
          v16 = *((_DWORD *)v9 - 4);
          if (v16 >= *(_DWORD *)v9)
          {
            if (v16 > *(_DWORD *)v9
              || (v17 = *((_DWORD *)v9 - 3), v18 = *((_DWORD *)v9 + 1), v17 >= v18)
              && (v17 > v18 || *((_DWORD *)v9 - 1) >= *((_DWORD *)v9 + 3)))
            {
              v9 = (__int128 *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &>(v9, (unint64_t)a2);
              goto LABEL_20;
            }
          }
LABEL_15:
          v19 = (__int128 *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &>((int *)v9, (unint64_t)a2);
          if ((v20 & 1) == 0)
            goto LABEL_18;
          v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)v9, v19);
          v9 = v19 + 1;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)(v19 + 1), a2))
          {
            v10 = v11 + 1;
            if (v21)
              continue;
LABEL_18:
            std::__introsort<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,false>(a1, v19, a3, -v11, a5 & 1);
            v9 = v19 + 1;
LABEL_20:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v19;
          if (v21)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((int *)v9, (int *)a2, (int *)a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = (uint64_t)((uint64_t)a2 - v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(a2 - 3) < *(_DWORD *)(v9 + 4))
        {
          v20 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *((_OWORD *)a2 - 1);
          *((_OWORD *)a2 - 1) = v20;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v9, (__int128 *)(v9 + 16), (__int128 *)a2 - 1);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v9, v9 + 16, v9 + 32, (uint64_t)(a2 - 4));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__n128 *)v9, (__n128 *)(v9 + 16), (__n128 *)(v9 + 32), (__n128 *)(v9 + 48), (__n128 *)a2 - 1);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((_DWORD *)v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (__int128 *)(v9 + 16 * (v13 >> 1));
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)(v9 + 16 * (v13 >> 1)), (__int128 *)v9, (__int128 *)a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v9, (__int128 *)(v9 + 16 * (v13 >> 1)), (__int128 *)a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)(v9 + 16), v15 - 1, (__int128 *)a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)(v9 + 32), (__int128 *)(v9 + 16 + 16 * v14), (__int128 *)a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v15 - 1, v15, (__int128 *)(v9 + 16 + 16 * v14));
            v19 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *v15;
            *v15 = v19;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(_DWORD *)(v9 - 12) >= *(_DWORD *)(v9 + 4))
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>((int *)v9, a2);
            goto LABEL_16;
          }
LABEL_11:
          v16 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>((int *)v9, a2);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v9, v16);
          v9 = v16 + 16;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v16 + 16, (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,false>(a1, v16, a3, -v11, a5 & 1);
            v9 = v16 + 16;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (_DWORD *)v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if ((_DWORD *)v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((int *)v9, a2, a2, a3);
        return;
    }
  }
}

  v8 = (__int128 *)a1;
  while (2)
  {
    a1 = (uint64_t)v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v50 = (double *)*((_QWORD *)a2 - 2);
        v51 = *(double **)a1;
        if (*v50 > **(double **)a1)
        {
          *(_QWORD *)a1 = v50;
          *((_QWORD *)a2 - 2) = v51;
          v52 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v52;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>((double **)a1, (double **)(a1 + 16), (double **)a2 - 2);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>((double **)a1, (double **)(a1 + 16), (double **)(a1 + 32), (double **)a2 - 2);
        return;
      case 5:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>((double **)a1, (double **)(a1 + 16), (double **)(a1 + 32), (double **)(a1 + 48));
        v53 = (double *)*((_QWORD *)a2 - 2);
        v54 = *(double **)(a1 + 48);
        if (*v53 > *v54)
        {
          *(_QWORD *)(a1 + 48) = v53;
          *((_QWORD *)a2 - 2) = v54;
          v55 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 - 1);
          *((_QWORD *)a2 - 1) = v55;
          v56 = *(double **)(a1 + 48);
          v57 = *v56;
          v58 = *(double **)(a1 + 32);
          if (*v56 > *v58)
          {
            v59 = *(_QWORD *)(a1 + 40);
            v60 = *(_QWORD *)(a1 + 56);
            *(_QWORD *)(a1 + 32) = v56;
            *(_QWORD *)(a1 + 40) = v60;
            *(_QWORD *)(a1 + 48) = v58;
            *(_QWORD *)(a1 + 56) = v59;
            v61 = *(double **)(a1 + 16);
            if (v57 > *v61)
            {
              v62 = *(_QWORD *)(a1 + 24);
              *(_QWORD *)(a1 + 16) = v56;
              *(_QWORD *)(a1 + 24) = v60;
              *(_QWORD *)(a1 + 32) = v61;
              *(_QWORD *)(a1 + 40) = v62;
              v63 = *(double **)a1;
              if (v57 > **(double **)a1)
              {
                v64 = *(_QWORD *)(a1 + 8);
                *(_QWORD *)a1 = v56;
                *(_QWORD *)(a1 + 8) = v60;
                *(_QWORD *)(a1 + 16) = v63;
                *(_QWORD *)(a1 + 24) = v64;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 383)
        {
          if ((a4 & 1) != 0)
          {
            if ((__int128 *)a1 != a2)
            {
              v65 = (_QWORD *)(a1 + 16);
              if ((__int128 *)(a1 + 16) != a2)
              {
                v66 = 0;
                v67 = (double **)a1;
                do
                {
                  v68 = v65;
                  v69 = v67[2];
                  if (*v69 > **v67)
                  {
                    v70 = v67[3];
                    *(_QWORD *)&v117 = v67[2];
                    *((_QWORD *)&v117 + 1) = v70;
                    *v68 = 0;
                    v68[1] = 0;
                    v71 = v66;
                    while (1)
                    {
                      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + v71 + 16, (__int128 *)(a1 + v71));
                      if (!v71)
                        break;
                      v72 = *(double **)(a1 + v71 - 16);
                      v71 -= 16;
                      if (*v69 <= *v72)
                      {
                        v73 = a1 + v71 + 16;
                        goto LABEL_83;
                      }
                    }
                    v73 = a1;
LABEL_83:
                    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v73, &v117);
                    v74 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
                    if (*((_QWORD *)&v117 + 1))
                    {
                      v75 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
                      do
                        v76 = __ldaxr(v75);
                      while (__stlxr(v76 - 1, v75));
                      if (!v76)
                      {
                        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
                        std::__shared_weak_count::__release_weak(v74);
                      }
                    }
                  }
                  v65 = v68 + 2;
                  v66 += 16;
                  v67 = (double **)v68;
                }
                while (v68 + 2 != (_QWORD *)a2);
              }
            }
          }
          else if ((__int128 *)a1 != a2)
          {
            v108 = (__int128 *)(a1 + 16);
            while (v108 != a2)
            {
              v109 = v108;
              v110 = *(double **)(a1 + 16);
              if (*v110 > **(double **)a1)
              {
                v111 = *(_QWORD *)(a1 + 24);
                *(_QWORD *)&v117 = *(_QWORD *)(a1 + 16);
                *((_QWORD *)&v117 + 1) = v111;
                *(_QWORD *)v109 = 0;
                *((_QWORD *)v109 + 1) = 0;
                do
                {
                  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 16, (__int128 *)a1);
                  v112 = *(double **)(a1 - 16);
                  a1 -= 16;
                }
                while (*v110 > *v112);
                std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 16, &v117);
                v113 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
                if (*((_QWORD *)&v117 + 1))
                {
                  v114 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
                  do
                    v115 = __ldaxr(v114);
                  while (__stlxr(v115 - 1, v114));
                  if (!v115)
                  {
                    ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
                    std::__shared_weak_count::__release_weak(v113);
                  }
                }
              }
              v108 = v109 + 1;
              a1 = (uint64_t)v109;
            }
          }
          return;
        }
        if (!a3)
        {
          if ((__int128 *)a1 != a2)
          {
            v77 = (unint64_t)(v10 - 2) >> 1;
            v78 = v77;
            do
            {
              v79 = v78;
              if (v77 >= v78)
              {
                v80 = (2 * v78) | 1;
                v81 = a1 + 16 * v80;
                if (2 * v79 + 2 < v10 && **(double **)v81 > **(double **)(v81 + 16))
                {
                  v81 += 16;
                  v80 = 2 * v79 + 2;
                }
                v82 = (double **)(a1 + 16 * v79);
                v83 = *v82;
                if (**(double **)v81 <= **v82)
                {
                  *(_QWORD *)&v117 = *v82;
                  *((_QWORD *)&v117 + 1) = *(_QWORD *)(a1 + 16 * v79 + 8);
                  *v82 = 0;
                  v82[1] = 0;
                  do
                  {
                    v84 = v81;
                    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)v82, (__int128 *)v81);
                    if (v77 < v80)
                      break;
                    v85 = 2 * v80;
                    v80 = (2 * v80) | 1;
                    v81 = a1 + 16 * v80;
                    v86 = v85 + 2;
                    if (v86 < v10 && **(double **)v81 > **(double **)(v81 + 16))
                    {
                      v81 += 16;
                      v80 = v86;
                    }
                    v82 = (double **)v84;
                  }
                  while (**(double **)v81 <= *v83);
                  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v84, &v117);
                  v87 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
                  if (*((_QWORD *)&v117 + 1))
                  {
                    v88 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
                    do
                      v89 = __ldaxr(v88);
                    while (__stlxr(v89 - 1, v88));
                    if (!v89)
                    {
                      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                      std::__shared_weak_count::__release_weak(v87);
                    }
                  }
                }
              }
              v78 = v79 - 1;
            }
            while (v79);
            v90 = (unint64_t)v9 >> 4;
            do
            {
              v91 = 0;
              v116 = *(_OWORD *)a1;
              *(_QWORD *)a1 = 0;
              *(_QWORD *)(a1 + 8) = 0;
              v92 = a1;
              do
              {
                v93 = v92;
                v92 += 16 * v91 + 16;
                v94 = 2 * v91;
                v91 = (2 * v91) | 1;
                v95 = v94 + 2;
                if (v95 < v90 && **(double **)v92 > **(double **)(v92 + 16))
                {
                  v92 += 16;
                  v91 = v95;
                }
                std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v93, (__int128 *)v92);
              }
              while (v91 <= (uint64_t)((unint64_t)(v90 - 2) >> 1));
              if ((__int128 *)v92 == --a2)
              {
                std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v92, &v116);
              }
              else
              {
                std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v92, a2);
                std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, &v116);
                v96 = v92 - a1 + 16;
                if (v96 >= 17)
                {
                  v97 = (((unint64_t)v96 >> 4) - 2) >> 1;
                  v98 = (__int128 *)(a1 + 16 * v97);
                  v99 = *(double **)v92;
                  if (**(double **)v98 > **(double **)v92)
                  {
                    v117 = *(_OWORD *)v92;
                    *(_QWORD *)v92 = 0;
                    *(_QWORD *)(v92 + 8) = 0;
                    do
                    {
                      v100 = (uint64_t)v98;
                      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v92, v98);
                      if (!v97)
                        break;
                      v97 = (v97 - 1) >> 1;
                      v98 = (__int128 *)(a1 + 16 * v97);
                      v92 = v100;
                    }
                    while (**(double **)v98 > *v99);
                    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v100, &v117);
                    v101 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
                    if (*((_QWORD *)&v117 + 1))
                    {
                      v102 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
                      do
                        v103 = __ldaxr(v102);
                      while (__stlxr(v103 - 1, v102));
                      if (!v103)
                      {
                        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                        std::__shared_weak_count::__release_weak(v101);
                      }
                    }
                  }
                }
              }
              v104 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
              if (*((_QWORD *)&v116 + 1))
              {
                v105 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
                do
                  v106 = __ldaxr(v105);
                while (__stlxr(v106 - 1, v105));
                if (!v106)
                {
                  ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                  std::__shared_weak_count::__release_weak(v104);
                }
              }
            }
            while (v90-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (double **)(a1 + 16 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>(v12, (double **)a1, (double **)a2 - 2);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>((double **)a1, v12, (double **)a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>((double **)(a1 + 16), v12 - 2, (double **)a2 - 4);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>((double **)(a1 + 32), (double **)(a1 + 16 + 16 * v11), (double **)a2 - 6);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>(v12 - 2, v12, (double **)(a1 + 16 + 16 * v11));
          v13 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v13;
        }
        --a3;
        v14 = *(double **)a1;
        if ((a4 & 1) == 0 && **(double **)(a1 - 16) <= *v14)
        {
          v35 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)&v117 = *(_QWORD *)a1;
          *((_QWORD *)&v117 + 1) = v35;
          *(_QWORD *)a1 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          v36 = *v14;
          if (*v14 <= **((double **)a2 - 2))
          {
            v38 = a1 + 16;
            do
            {
              v8 = (__int128 *)v38;
              if (v38 >= (unint64_t)a2)
                break;
              v38 += 16;
            }
            while (v36 <= **(double **)v8);
          }
          else
          {
            v8 = (__int128 *)a1;
            do
              v37 = (double *)*((_QWORD *)v8++ + 2);
            while (v36 <= *v37);
          }
          v39 = (double **)a2;
          if (v8 < a2)
          {
            v39 = (double **)a2;
            do
            {
              v40 = *(v39 - 2);
              v39 -= 2;
            }
            while (v36 > *v40);
          }
          if (v8 < (__int128 *)v39)
          {
            v41 = *(double **)v8;
            v42 = *v39;
            do
            {
              *(_QWORD *)v8 = v42;
              *v39 = v41;
              v43 = (double *)*((_QWORD *)v8 + 1);
              *((_QWORD *)v8 + 1) = v39[1];
              v39[1] = v43;
              v44 = *(double *)v117;
              do
              {
                v45 = (double *)*((_QWORD *)v8++ + 2);
                v41 = v45;
              }
              while (v44 <= *v45);
              do
              {
                v46 = *(v39 - 2);
                v39 -= 2;
                v42 = v46;
              }
              while (v44 > *v46);
            }
            while (v8 < (__int128 *)v39);
          }
          if (v8 - 1 != (__int128 *)a1)
            std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1, v8 - 1);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(v8 - 1), &v117);
          v47 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
          if (*((_QWORD *)&v117 + 1))
          {
            v48 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          a4 = 0;
          continue;
        }
        v15 = 0;
        v16 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)&v117 = *(_QWORD *)a1;
        *((_QWORD *)&v117 + 1) = v16;
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        v17 = *v14;
        do
        {
          v18 = *(double **)(a1 + v15 + 16);
          v15 += 16;
        }
        while (*v18 > v17);
        v19 = a1 + v15;
        v20 = a2;
        if (v15 == 16)
        {
          v20 = a2;
          do
          {
            if (v19 >= (unint64_t)v20)
              break;
            v22 = (double *)*((_QWORD *)v20-- - 2);
          }
          while (*v22 <= v17);
        }
        else
        {
          do
            v21 = (double *)*((_QWORD *)v20-- - 2);
          while (*v21 <= v17);
        }
        if (v19 >= (unint64_t)v20)
        {
          v30 = (__int128 *)(v19 - 16);
        }
        else
        {
          v23 = *(double **)v20;
          v24 = (double **)(a1 + v15);
          v25 = (double **)v20;
          do
          {
            *v24 = v23;
            *v25 = v18;
            v26 = v24[1];
            v24[1] = v25[1];
            v25[1] = v26;
            v27 = *(double *)v117;
            do
            {
              v28 = v24[2];
              v24 += 2;
              v18 = v28;
            }
            while (*v28 > v27);
            do
            {
              v29 = *(v25 - 2);
              v25 -= 2;
              v23 = v29;
            }
            while (*v29 <= v27);
          }
          while (v24 < v25);
          v30 = (__int128 *)(v24 - 2);
        }
        if (v30 != (__int128 *)a1)
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1, v30);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)v30, &v117);
        v31 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
        if (*((_QWORD *)&v117 + 1))
        {
          v32 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        if (v19 < (unint64_t)v20)
        {
LABEL_36:
          std::__introsort<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *,false>(a1, v30, a3, a4 & 1);
          a4 = 0;
          v8 = v30 + 1;
          continue;
        }
        v34 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>(a1, (uint64_t)v30);
        v8 = v30 + 1;
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::TokenGreater &,std::shared_ptr<kaldi::WordHypLattice::GetNbestPath(std::vector<std::vector<kaldi::WordHypLattice::Arc *>> &,int,std::function<double ()(kaldi::WordHypLattice::Arc const&)>,BOOL)::BackTraceToken> *>((uint64_t)(v30 + 1), (uint64_t)a2))
        {
          if (v34)
            continue;
          goto LABEL_36;
        }
        a2 = v30;
        if (!v34)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = (uint64_t *)((char *)a2 - 20);
  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v9) >> 2);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v24 = *(uint64_t *)((char *)a2 - 20);
        v25 = *v9;
        if ((int)v24 < (int)*v9)
        {
          v26 = *((_DWORD *)v9 + 4);
          *v9 = v24;
          v27 = *(uint64_t *)((char *)a2 - 12);
          *((_DWORD *)v9 + 4) = *((_DWORD *)a2 - 1);
          v28 = v9[1];
          v9[1] = v27;
          *(uint64_t *)((char *)a2 - 20) = v25;
          *(uint64_t *)((char *)a2 - 12) = v28;
          *((_DWORD *)a2 - 1) = v26;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v9, (uint64_t *)((char *)v9 + 20), v8);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v9, (uint64_t)v9 + 20, (uint64_t)(v9 + 5), (uint64_t)v8);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v9, (uint64_t)v9 + 20, (uint64_t)(v9 + 5), (uint64_t)v9 + 60, (uint64_t)v8);
        return;
      default:
        if (v12 <= 479)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v9, (uint64_t)a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (uint64_t *)((char *)v9 + 20 * (v13 >> 1));
          if ((unint64_t)v12 < 0xA01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)((char *)v9 + 20 * (v13 >> 1)), v9, v8);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v9, (uint64_t *)((char *)v9 + 20 * (v13 >> 1)), v8);
            v16 = v8;
            v17 = (char *)v9 + 20 * v14;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)((char *)v9 + 20), (uint64_t *)(v17 - 20), a2 - 5);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v9 + 5, (uint64_t *)((char *)v9 + 20 * v14 + 20), (uint64_t *)((char *)a2 - 60));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)(v17 - 20), v15, (uint64_t *)((char *)v9 + 20 * v14 + 20));
            v18 = *v9;
            v19 = *((_DWORD *)v9 + 4);
            *v9 = *v15;
            *((_DWORD *)v9 + 4) = *((_DWORD *)v17 + 4);
            *v15 = v18;
            v20 = v9[1];
            v9[1] = *((_QWORD *)v17 + 1);
            *((_QWORD *)v17 + 1) = v20;
            *((_DWORD *)v17 + 4) = v19;
            v8 = v16;
          }
          if ((a5 & 1) == 0 && *((_DWORD *)v9 - 5) >= *(_DWORD *)v9)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &>(v9, a2);
            goto LABEL_16;
          }
          v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &>(v9, a2);
          if ((v22 & 1) == 0)
            goto LABEL_14;
          v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>*>((uint64_t)v9, v21);
          v9 = (uint64_t *)(v21 + 20);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>*>(v21 + 20, (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v23)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>*,false>(a1, v21, a3, -v11, a5 & 1);
            v9 = (uint64_t *)(v21 + 20);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (uint64_t *)v21;
          if (v23)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v9, a2, a2, a3);
        return;
    }
  }
}

  v8 = (uint64_t *)(a2 - 20);
  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = a2 - (char *)v9;
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - (char *)v9) >> 2);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v27 = *((_DWORD *)a2 - 5);
        if (v27 < *(_DWORD *)v9
          || v27 <= *(_DWORD *)v9
          && ((v28 = *((_DWORD *)a2 - 4), v29 = *((_DWORD *)v9 + 1), v28 < v29)
           || v28 <= v29 && *((_DWORD *)a2 - 1) < *((_DWORD *)v9 + 4)))
        {
          v30 = *v9;
          v31 = *((_DWORD *)v9 + 4);
          *v9 = *(_QWORD *)(a2 - 20);
          v32 = *(_QWORD *)(a2 - 12);
          *((_DWORD *)v9 + 4) = *((_DWORD *)a2 - 1);
          v33 = v9[1];
          v9[1] = v32;
          *(_QWORD *)(a2 - 20) = v30;
          *(_QWORD *)(a2 - 12) = v33;
          *((_DWORD *)a2 - 1) = v31;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v9, (int *)v9 + 5, v8);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v9, (uint64_t *)((char *)v9 + 20), v9 + 5, v8);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v9, (uint64_t)v9 + 20, (uint64_t)(v9 + 5), (uint64_t)v9 + 60, (uint64_t)v8);
        return;
      default:
        if (v12 <= 479)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v9, (uint64_t)a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (int *)v9 + 5 * (v13 >> 1);
          if ((unint64_t)v12 < 0xA01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)((char *)v9 + 20 * (v13 >> 1)), (int *)v9, v8);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v9, (int *)v9 + 5 * (v13 >> 1), v8);
            v16 = v8;
            v17 = (int *)v9 + 5 * v14;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)((char *)v9 + 20), v17 - 5, (uint64_t *)a2 - 5);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v9 + 5, (int *)v9 + 5 * v14 + 5, (uint64_t *)(a2 - 60));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t *)(v17 - 5), v15, (uint64_t *)((char *)v9 + 20 * v14 + 20));
            v18 = *v9;
            v19 = *((_DWORD *)v9 + 4);
            *v9 = *(_QWORD *)v15;
            *((_DWORD *)v9 + 4) = v17[4];
            *(_QWORD *)v15 = v18;
            v20 = v9[1];
            v9[1] = *((_QWORD *)v17 + 1);
            *((_QWORD *)v17 + 1) = v20;
            v17[4] = v19;
            v8 = v16;
          }
          if ((a5 & 1) == 0)
          {
            v21 = *((_DWORD *)v9 - 5);
            if (v21 >= *(_DWORD *)v9)
            {
              if (v21 > *(_DWORD *)v9
                || (v22 = *((_DWORD *)v9 - 4), v23 = *((_DWORD *)v9 + 1), v22 >= v23)
                && (v22 > v23 || *((_DWORD *)v9 - 1) >= *((_DWORD *)v9 + 4)))
              {
                v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &>(v9, (unint64_t)a2);
                goto LABEL_20;
              }
            }
          }
          v24 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> *,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &>(v9, (unint64_t)a2);
          if ((v25 & 1) == 0)
            goto LABEL_18;
          v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v9, v24);
          v9 = (uint64_t *)(v24 + 20);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>(v24 + 20, (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v26)
              continue;
LABEL_18:
            std::__introsort<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,false>(a1, v24, a3, -v11, a5 & 1);
            v9 = (uint64_t *)(v24 + 20);
LABEL_20:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (char *)v24;
          if (v26)
            return;
          goto LABEL_1;
        }
        if (v9 != (uint64_t *)a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*,fst::ArcTpl<fst::LatticeWeightTpl<float>,int>*>((uint64_t)v9, (uint64_t *)a2, (uint64_t *)a2, a3);
        return;
    }
  }
}

  v8 = (uint64_t)(a2 - 6);
  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v9) >> 4);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)v8, (const void **)v9))
        {
          v33 = *(_QWORD *)(v9 + 16);
          v31 = *(_OWORD *)v9;
          v25 = *(_OWORD *)v8;
          *(_QWORD *)(v9 + 16) = *(_QWORD *)(v8 + 16);
          *(_OWORD *)v9 = v25;
          *(_OWORD *)v8 = v31;
          *(_QWORD *)(v8 + 16) = v33;
          v26 = *(const void **)(v9 + 40);
          v27 = *(_OWORD *)(v9 + 24);
          v28 = (uint64_t)*(a2 - 1);
          *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 - 3);
          *(_QWORD *)(v9 + 40) = v28;
          *(_OWORD *)(a2 - 3) = v27;
          *(a2 - 1) = v26;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>((__int128 *)v9, (__int128 *)(v9 + 48), (__int128 *)v8, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(v9, v9 + 48, v9 + 96, v8, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(v9, v9 + 48, v9 + 96, v9 + 144, v8, a3);
        return;
      default:
        if (v12 <= 1151)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(v9, a2, a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>((const void **)v9, a2, a3);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = v9 + 48 * (v13 >> 1);
          if ((unint64_t)v12 < 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>((__int128 *)v15, (__int128 *)v9, (__int128 *)v8, a3);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>((__int128 *)v9, (__int128 *)v15, (__int128 *)v8, a3);
            v16 = v8;
            v17 = v9 + 48 * v14;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>((__int128 *)(v9 + 48), (__int128 *)(v17 - 48), (__int128 *)a2 - 6, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>((__int128 *)(v9 + 96), (__int128 *)(v9 + 48 + 48 * v14), (__int128 *)a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>((__int128 *)(v17 - 48), (__int128 *)v15, (__int128 *)(v9 + 48 + 48 * v14), a3);
            v32 = *(_QWORD *)(v9 + 16);
            v30 = *(_OWORD *)v9;
            v18 = *(_OWORD *)v15;
            *(_QWORD *)(v9 + 16) = *(_QWORD *)(v15 + 16);
            *(_OWORD *)v9 = v18;
            *(_QWORD *)(v15 + 16) = v32;
            *(_OWORD *)v15 = v30;
            v19 = *(_OWORD *)(v9 + 24);
            v20 = *(_QWORD *)(v9 + 40);
            v21 = *(_QWORD *)(v17 + 40);
            *(_OWORD *)(v9 + 24) = *(_OWORD *)(v17 + 24);
            *(_QWORD *)(v9 + 40) = v21;
            *(_QWORD *)(v17 + 40) = v20;
            *(_OWORD *)(v17 + 24) = v19;
            v8 = v16;
          }
          if ((a5 & 1) == 0
            && (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::string,std::string>,std::pair<std::string,std::string>>(a3, (const void **)(v9 - 48), (const void **)v9) & 1) == 0)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::string,std::string> *,std::__less<void,void> &>(v9, (unint64_t)a2, a3);
            goto LABEL_16;
          }
          v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::string,std::string> *,std::__less<void,void> &>(v9, a2, a3);
          if ((v23 & 1) == 0)
            goto LABEL_14;
          v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>(v9, (uint64_t)v22, a3);
          v9 = (unint64_t)(v22 + 3);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *>((uint64_t)(v22 + 3), (uint64_t)a2, a3))
          {
            v10 = v11 + 1;
            if (v24)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *,false>(a1, v22, a3, -v11, a5 & 1);
            v9 = (unint64_t)(v22 + 3);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (const void **)v22;
          if (v24)
            return;
          goto LABEL_1;
        }
        if ((const void **)v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::string,std::string> *,std::pair<std::string,std::string> *>(v9, (uint64_t)a2, (uint64_t)a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v22 = *(a2 - 8);
        v23 = *v9;
        if (v22 < *v9 || v22 <= v23 && *(a2 - 6) < v9[2])
        {
          *v9 = v22;
          *(a2 - 8) = v23;
          v26 = *(_OWORD *)(v9 + 2);
          v24 = *((_QWORD *)v9 + 3);
          *(_OWORD *)(v9 + 2) = *(_OWORD *)(a2 - 6);
          *((_QWORD *)v9 + 3) = *((_QWORD *)a2 - 1);
          *(_OWORD *)(a2 - 6) = v26;
          *((_QWORD *)a2 - 1) = v24;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(v9, v9 + 8, a2 - 8);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((uint64_t)v9, (uint64_t)(v9 + 8), (uint64_t)(v9 + 16), (uint64_t)(a2 - 8));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((uint64_t)v9, (uint64_t)(v9 + 8), (uint64_t)(v9 + 16), (uint64_t)(v9 + 24), a2 - 8);
        return;
      default:
        if (v12 <= 767)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((uint64_t)v9, (uint64_t)a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[8 * (v13 >> 1)];
          if ((unint64_t)v12 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(&v9[8 * (v13 >> 1)], v9, a2 - 8);
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(v9, &v9[8 * (v13 >> 1)], a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(v9 + 8, v15 - 8, a2 - 16);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(v9 + 16, &v9[8 * v14 + 8], a2 - 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(v15 - 8, v15, &v9[8 * v14 + 8]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            v25 = *(_OWORD *)(v9 + 2);
            *(_OWORD *)(v9 + 2) = *(_OWORD *)(v15 + 2);
            *(_OWORD *)(v15 + 2) = v25;
            v17 = *((_QWORD *)v9 + 3);
            *((_QWORD *)v9 + 3) = *((_QWORD *)v15 + 3);
            *((_QWORD *)v15 + 3) = v17;
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          v18 = *(v9 - 8);
          if (v18 >= *v9 && (v18 > *v9 || *(v9 - 6) >= v9[2]))
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &>(v9, a2);
            goto LABEL_18;
          }
LABEL_13:
          v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &>(v9, a2);
          if ((v20 & 1) == 0)
            goto LABEL_16;
          v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((uint64_t)v9, v19);
          v9 = (int *)(v19 + 32);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(v19 + 32, (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v21)
              continue;
LABEL_16:
            std::__introsort<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *,false>(a1, v19, a3, -v11, a5 & 1);
            v9 = (int *)(v19 + 32);
LABEL_18:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (int *)v19;
          if (v21)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((uint64_t)v9, (uint64_t)a2, (uint64_t)a2, a3);
        return;
    }
  }
}

  v9 = a2 - 3;
  v10 = (const void **)a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (std::less<std::string>::operator()[abi:ne180100](a3, a2 - 3, v10))
        {
          v29 = v10[2];
          v27 = *(_OWORD *)v10;
          v25 = *(_OWORD *)v9;
          v10[2] = *(a2 - 1);
          *(_OWORD *)v10 = v25;
          *(_OWORD *)v9 = v27;
          *(a2 - 1) = v29;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v10, v10 + 3, a2 - 3, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v10, v10 + 3, v10 + 6, (__int128 *)(a2 - 3), a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v10, v10 + 3, v10 + 6, (__int128 *)(v10 + 9), (__int128 *)(a2 - 3), a3);
        return;
      default:
        if (v13 <= 575)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v10, a2, a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v10, a2, a3);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[3 * (v14 >> 1)];
          if ((unint64_t)v13 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(&v10[3 * v15], v10, a2 - 3, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v10, &v10[3 * v15], a2 - 3, a3);
            v17 = 3 * v15;
            v18 = &v10[3 * v15 - 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v10 + 3, v18, a2 - 6, a3);
            v19 = v10 + 6;
            v20 = &v10[v17 + 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v19, v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v18, v16, v20, a3);
            v28 = *(const void **)(a1 + 16);
            v26 = *(_OWORD *)a1;
            v21 = *(_OWORD *)v16;
            *(_QWORD *)(a1 + 16) = v16[2];
            *(_OWORD *)a1 = v21;
            v16[2] = v28;
            *(_OWORD *)v16 = v26;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(a1 - 24), (const void **)a1))
          {
            v10 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((const void **)a1, (unint64_t)a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((__int128 *)a1, a2, a3);
          if ((v23 & 1) == 0)
            goto LABEL_14;
          v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v22, a3);
          v10 = (const void **)(v22 + 24);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v22 + 24, (uint64_t)a2, a3))
          {
            v11 = v12 + 1;
            if (v24)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, v22, a3, -v12, a5 & 1);
            v10 = (const void **)(v22 + 24);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (const void **)v22;
          if (v24)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,std::string *>((uint64_t)v10, (__int128 *)a2, (__int128 *)a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v9) >> 4);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(float *)(v9 + 24) < *((float *)a2 - 14))
          std::swap[abi:ne180100]<quasar::Alternative>((__int128 *)v9, a2 - 5);
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(v9, v9 + 80, (uint64_t)(a2 - 5));
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(v9, v9 + 80, v9 + 160, (uint64_t)(a2 - 5));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(v9, v9 + 80, v9 + 160, v9 + 240, (uint64_t)(a2 - 5));
        return;
      default:
        if (v12 <= 1919)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(v9, (uint64_t)a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(v9, (uint64_t)a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (__int128 *)(v9 + 80 * (v13 >> 1));
          if ((unint64_t)v12 < 0x2801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>((uint64_t)v15, v9, (uint64_t)(a2 - 5));
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(v9, (uint64_t)v15, (uint64_t)(a2 - 5));
            v16 = 5 * v14;
            v17 = v9 + 80 * v14 - 80;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(v9 + 80, v17, (uint64_t)(a2 - 10));
            v18 = v9 + 160;
            v19 = v9 + 80 + 16 * v16;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(v18, v19, (uint64_t)(a2 - 15));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(v17, (uint64_t)v15, v19);
            std::swap[abi:ne180100]<quasar::Alternative>((__int128 *)a1, v15);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(float *)(a1 + 24) >= *(float *)(a1 - 56))
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,quasar::Alternative *,std::__less<void,void> &>(a1, a2);
            goto LABEL_16;
          }
LABEL_11:
          v20 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,quasar::Alternative *,std::__less<void,void> &>(a1, a2);
          if ((v21 & 1) == 0)
            goto LABEL_14;
          v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(a1, v20);
          v9 = v20 + 80;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *>(v20 + 80, (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v22)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *,false>(a1, v20, a3, -v11, a5 & 1);
            v9 = v20 + 80;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (__int128 *)v20;
          if (v22)
            return;
          goto LABEL_1;
        }
        if ((__int128 *)v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,quasar::Alternative *,quasar::Alternative *>(v9, (uint64_t)a2, (uint64_t)a2, a3);
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v70 = (__int128 *)(a2 - 16);
        v71 = *(_DWORD *)(a2 - 16);
        v72 = (__int128 *)(v8 + 8);
        v73 = *(_DWORD *)(v8 + 8);
        v77 = v71 == v73;
        v74 = v71 < v73;
        if (v77)
          v74 = *(float *)(a2 - 8) < *(float *)(v8 + 16);
        if (v74)
        {
          v75 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *(_QWORD *)(a2 - 24);
          *(_QWORD *)(a2 - 24) = v75;
          v171 = *v72;
          *v72 = *v70;
          *v70 = v171;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>((uint64_t *)v8, (uint64_t *)(v8 + 24), (uint64_t *)(a2 - 24));
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>(v8, v8 + 24, v8 + 48, a2 - 24);
        return;
      case 5uLL:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,0>(v8, v8 + 24, v8 + 48, v8 + 72, a2 - 24);
        return;
      default:
        if (v9 <= 575)
        {
          v76 = (_QWORD *)(v8 + 24);
          v77 = v8 == a2 || v76 == (_QWORD *)a2;
          v78 = v77;
          if ((a4 & 1) != 0)
          {
            if ((v78 & 1) == 0)
            {
              v79 = 0;
              v80 = (_QWORD *)v8;
              do
              {
                v81 = v76;
                v82 = *((_DWORD *)v80 + 8);
                v83 = *((_DWORD *)v80 + 2);
                v84 = *((float *)v80 + 10);
                v77 = v82 == v83;
                v85 = v82 < v83;
                if (v77)
                  v85 = v84 < *((float *)v80 + 4);
                if (v85)
                {
                  v86 = *v81;
                  v87 = *((_DWORD *)v80 + 9);
                  v88 = v79;
                  v89 = *((_DWORD *)v80 + 11);
                  while (1)
                  {
                    v90 = v8 + v88;
                    *(_QWORD *)(v90 + 24) = *(_QWORD *)(v8 + v88);
                    *(_OWORD *)(v90 + 32) = *(_OWORD *)(v8 + v88 + 8);
                    if (!v88)
                      break;
                    v91 = *(_DWORD *)(v90 - 16);
                    v77 = v82 == v91;
                    v92 = v82 < v91;
                    if (v77)
                      v92 = v84 < *(float *)(v90 - 8);
                    v88 -= 24;
                    if (!v92)
                    {
                      v93 = v8 + v88 + 24;
                      goto LABEL_105;
                    }
                  }
                  v93 = v8;
LABEL_105:
                  *(_QWORD *)v93 = v86;
                  *(_DWORD *)(v90 + 8) = v82;
                  *(_DWORD *)(v93 + 12) = v87;
                  *(float *)(v93 + 16) = v84;
                  *(_DWORD *)(v93 + 20) = v89;
                }
                v76 = v81 + 3;
                v79 += 24;
                v80 = v81;
              }
              while (v81 + 3 != (_QWORD *)a2);
            }
          }
          else if ((v78 & 1) == 0)
          {
            v156 = (float *)(v8 + 44);
            do
            {
              v157 = v76;
              v158 = *(_DWORD *)(a1 + 32);
              v159 = *(_DWORD *)(a1 + 8);
              v160 = *(float *)(a1 + 40);
              v77 = v158 == v159;
              v161 = v158 < v159;
              if (v77)
                v161 = v160 < *(float *)(a1 + 16);
              if (v161)
              {
                v162 = *v157;
                v163 = *(_DWORD *)(a1 + 36);
                v164 = v156;
                v165 = *(_DWORD *)(a1 + 44);
                do
                {
                  *(_QWORD *)(v164 - 5) = *(_QWORD *)(v164 - 11);
                  *(_OWORD *)(v164 - 3) = *(_OWORD *)(v164 - 9);
                  v166 = *((_DWORD *)v164 - 15);
                  v77 = v158 == v166;
                  v167 = v158 < v166;
                  if (v77)
                    v167 = v160 < *(v164 - 13);
                  v164 -= 6;
                }
                while (v167);
                *(_QWORD *)(v164 - 5) = v162;
                *((_DWORD *)v164 - 3) = v158;
                *((_DWORD *)v164 - 2) = v163;
                *(v164 - 1) = v160;
                *(_DWORD *)v164 = v165;
              }
              v76 = v157 + 3;
              v156 += 6;
              a1 = (uint64_t)v157;
            }
            while (v157 + 3 != (uint64_t *)a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v94 = (v10 - 2) >> 1;
            v95 = v94;
            do
            {
              v96 = v95;
              if (v94 >= v95)
              {
                v97 = (2 * v95) | 1;
                v98 = v8 + 24 * v97;
                if (2 * v96 + 2 < (uint64_t)v10)
                {
                  v99 = v8 + 24 * v97;
                  v100 = *(_DWORD *)(v99 + 8);
                  v101 = *(_DWORD *)(v98 + 32);
                  v102 = *(float *)(v99 + 16) < *(float *)(v98 + 40);
                  v77 = v100 == v101;
                  v103 = v100 < v101;
                  if (!v77)
                    v102 = v103;
                  v98 += 24 * v102;
                  if (v102)
                    v97 = 2 * v96 + 2;
                }
                v104 = v8 + 24 * v96;
                v105 = *(_DWORD *)(v98 + 8);
                v106 = *(_DWORD *)(v104 + 8);
                v107 = *(float *)(v104 + 16);
                v108 = *(float *)(v98 + 16) < v107;
                v77 = v105 == v106;
                v109 = v105 < v106;
                if (!v77)
                  v108 = v109;
                if (!v108)
                {
                  v110 = v8 + 24 * v96;
                  v111 = *(_QWORD *)v110;
                  v112 = *(_DWORD *)(v110 + 12);
                  v113 = *(_DWORD *)(v110 + 20);
                  do
                  {
                    v114 = v110;
                    v110 = v98;
                    *(_QWORD *)v114 = *(_QWORD *)v98;
                    *(_OWORD *)(v114 + 8) = *(_OWORD *)(v98 + 8);
                    if (v94 < v97)
                      break;
                    v115 = (2 * v97) | 1;
                    v98 = v8 + 24 * v115;
                    v116 = 2 * v97 + 2;
                    if (v116 < (uint64_t)v10)
                    {
                      v117 = v8 + 24 * v115;
                      v118 = *(_DWORD *)(v117 + 8);
                      v119 = *(_DWORD *)(v98 + 32);
                      v120 = *(float *)(v117 + 16) < *(float *)(v98 + 40);
                      v77 = v118 == v119;
                      v121 = v118 < v119;
                      if (!v77)
                        v120 = v121;
                      v98 += 24 * v120;
                      if (v120)
                        v115 = v116;
                    }
                    v122 = *(_DWORD *)(v98 + 8);
                    v123 = *(float *)(v98 + 16) < v107;
                    v77 = v122 == v106;
                    v124 = v122 < v106;
                    if (!v77)
                      v123 = v124;
                    v97 = v115;
                  }
                  while (!v123);
                  *(_QWORD *)v110 = v111;
                  *(_DWORD *)(v110 + 8) = v106;
                  *(_DWORD *)(v110 + 12) = v112;
                  *(float *)(v110 + 16) = v107;
                  *(_DWORD *)(v110 + 20) = v113;
                }
              }
              v95 = v96 - 1;
            }
            while (v96);
            v125 = v9 / 0x18uLL;
            do
            {
              v126 = 0;
              v127 = *(_QWORD *)v8;
              v172 = *(_OWORD *)(v8 + 8);
              v128 = v8;
              do
              {
                v129 = v126 + 1;
                v130 = v128 + 24 * (v126 + 1);
                v131 = (2 * v126) | 1;
                v132 = 2 * v126 + 2;
                if (v132 < v125)
                {
                  v133 = v128 + 24 * v129;
                  v134 = *(_DWORD *)(v133 + 8);
                  v135 = *(_DWORD *)(v130 + 32);
                  v136 = *(float *)(v133 + 16) < *(float *)(v130 + 40);
                  v77 = v134 == v135;
                  v137 = v134 < v135;
                  if (!v77)
                    v136 = v137;
                  v130 += 24 * v136;
                  if (v136)
                    v131 = v132;
                }
                *(_QWORD *)v128 = *(_QWORD *)v130;
                *(_OWORD *)(v128 + 8) = *(_OWORD *)(v130 + 8);
                v128 = v130;
                v126 = v131;
              }
              while (v131 <= (uint64_t)((unint64_t)(v125 - 2) >> 1));
              v138 = (_OWORD *)(v130 + 8);
              if (v130 == a2 - 24)
              {
                *(_QWORD *)v130 = v127;
                *v138 = v172;
              }
              else
              {
                *(_QWORD *)v130 = *(_QWORD *)(a2 - 24);
                *v138 = *(_OWORD *)(a2 - 16);
                *(_QWORD *)(a2 - 24) = v127;
                *(_OWORD *)(a2 - 16) = v172;
                v139 = v130 - v8 + 24;
                if (v139 >= 25)
                {
                  v140 = (v139 / 0x18uLL - 2) >> 1;
                  v141 = v8 + 24 * v140;
                  v142 = *(_DWORD *)(v141 + 8);
                  v143 = *(_DWORD *)(v130 + 8);
                  v144 = *(float *)(v130 + 16);
                  v145 = *(float *)(v141 + 16) < v144;
                  v77 = v142 == v143;
                  v146 = v142 < v143;
                  if (!v77)
                    v145 = v146;
                  if (v145)
                  {
                    v147 = *(_QWORD *)v130;
                    v148 = *(_DWORD *)(v130 + 12);
                    v149 = *(_DWORD *)(v130 + 20);
                    do
                    {
                      v150 = v130;
                      v130 = v8 + 24 * v140;
                      *(_QWORD *)v150 = *(_QWORD *)v130;
                      *(_OWORD *)(v150 + 8) = *(_OWORD *)(v130 + 8);
                      if (!v140)
                        break;
                      v140 = (v140 - 1) >> 1;
                      v151 = v8 + 24 * v140;
                      v152 = *(_DWORD *)(v151 + 8);
                      v153 = *(float *)(v151 + 16) < v144;
                      v77 = v152 == v143;
                      v154 = v152 < v143;
                      if (!v77)
                        v153 = v154;
                    }
                    while (v153);
                    *(_QWORD *)v130 = v147;
                    *(_DWORD *)(v130 + 8) = v143;
                    *(_DWORD *)(v130 + 12) = v148;
                    *(float *)(v130 + 16) = v144;
                    *(_DWORD *)(v130 + 20) = v149;
                  }
                }
              }
              a2 -= 24;
            }
            while (v125-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (uint64_t *)(v8 + 24 * (v10 >> 1));
        if ((unint64_t)v9 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>((uint64_t *)(a1 + 24 * (v10 >> 1)), (uint64_t *)a1, (uint64_t *)(a2 - 24));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>((uint64_t *)a1, (uint64_t *)(a1 + 24 * (v10 >> 1)), (uint64_t *)(a2 - 24));
          v13 = a1 + 24 * v11;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>((uint64_t *)(a1 + 24), (uint64_t *)(v13 - 24), (uint64_t *)(a2 - 48));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>((uint64_t *)(a1 + 48), (uint64_t *)(a1 + 24 + 24 * v11), (uint64_t *)(a2 - 72));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>((uint64_t *)(v13 - 24), v12, (uint64_t *)(a1 + 24 + 24 * v11));
          v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *v12;
          *v12 = v14;
          v168 = *(_OWORD *)(a1 + 8);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(v13 + 8);
          *(_OWORD *)(v13 + 8) = v168;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v17 = *(_DWORD *)(a1 - 16);
          v15 = *(_DWORD *)(a1 + 8);
          v16 = *(float *)(a1 + 16);
          v77 = v17 == v15;
          v18 = v17 < v15;
          if (v77)
            v18 = *(float *)(a1 - 8) < v16;
          if (v18)
            goto LABEL_13;
          v45 = *(_DWORD *)(a2 - 16);
          v77 = v15 == v45;
          v46 = v15 < v45;
          if (v77)
            v46 = v16 < *(float *)(a2 - 8);
          if (v46)
          {
            v47 = a1;
            do
            {
              v8 = v47 + 24;
              v48 = *(_DWORD *)(v47 + 32);
              v49 = v16 < *(float *)(v47 + 40);
              v77 = v15 == v48;
              v50 = v15 < v48;
              if (v77)
                v50 = v49;
              v47 = v8;
            }
            while (!v50);
          }
          else
          {
            v51 = a1 + 24;
            do
            {
              v8 = v51;
              if (v51 >= a2)
                break;
              v52 = *(_DWORD *)(v51 + 8);
              v53 = v16 < *(float *)(v8 + 16);
              v77 = v15 == v52;
              v54 = v15 < v52;
              if (!v77)
                v53 = v54;
              v51 = v8 + 24;
            }
            while (!v53);
          }
          v55 = a2;
          if (v8 < a2)
          {
            v56 = a2;
            do
            {
              v55 = v56 - 24;
              v57 = *(_DWORD *)(v56 - 16);
              v58 = v16 < *(float *)(v56 - 8);
              v77 = v15 == v57;
              v59 = v15 < v57;
              if (v77)
                v59 = v58;
              v56 = v55;
            }
            while (v59);
          }
          v60 = *(_QWORD *)a1;
          v61 = *(_DWORD *)(a1 + 12);
          v62 = *(_DWORD *)(a1 + 20);
          while (v8 < v55)
          {
            v63 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)v55;
            *(_QWORD *)v55 = v63;
            v170 = *(_OWORD *)(v8 + 8);
            *(_OWORD *)(v8 + 8) = *(_OWORD *)(v55 + 8);
            *(_OWORD *)(v55 + 8) = v170;
            do
            {
              v64 = *(_DWORD *)(v8 + 32);
              v65 = *(float *)(v8 + 40);
              v8 += 24;
              v77 = v15 == v64;
              v66 = v15 < v64;
              if (v77)
                v66 = v16 < v65;
            }
            while (!v66);
            do
            {
              v67 = *(_DWORD *)(v55 - 16);
              v68 = *(float *)(v55 - 8);
              v55 -= 24;
              v77 = v15 == v67;
              v69 = v15 < v67;
              if (v77)
                v69 = v16 < v68;
            }
            while (v69);
          }
          if (v8 - 24 != a1)
          {
            *(_QWORD *)a1 = *(_QWORD *)(v8 - 24);
            *(_OWORD *)(a1 + 8) = *(_OWORD *)(v8 - 16);
          }
          a4 = 0;
          *(_QWORD *)(v8 - 24) = v60;
          *(_DWORD *)(v8 - 16) = v15;
          *(_DWORD *)(v8 - 12) = v61;
          *(float *)(v8 - 8) = v16;
          *(_DWORD *)(v8 - 4) = v62;
          continue;
        }
        v15 = *(_DWORD *)(a1 + 8);
        v16 = *(float *)(a1 + 16);
LABEL_13:
        v19 = 0;
        v20 = *(_QWORD *)a1;
        v21 = *(_DWORD *)(a1 + 12);
        v22 = *(_DWORD *)(a1 + 20);
        do
        {
          v23 = *(_DWORD *)(a1 + v19 + 32);
          v24 = *(float *)(a1 + v19 + 40) < v16;
          v77 = v23 == v15;
          v25 = v23 < v15;
          if (!v77)
            v24 = v25;
          v19 += 24;
        }
        while (v24);
        v26 = a1 + v19;
        v27 = a2;
        if (v19 == 24)
        {
          v32 = a2;
          while (v26 < v32)
          {
            v28 = v32 - 24;
            v33 = *(_DWORD *)(v32 - 16);
            v34 = *(float *)(v32 - 8) < v16;
            v77 = v33 == v15;
            v35 = v33 < v15;
            if (v77)
              v35 = v34;
            v32 = v28;
            if (v35)
              goto LABEL_29;
          }
          v28 = v32;
        }
        else
        {
          do
          {
            v28 = v27 - 24;
            v29 = *(_DWORD *)(v27 - 16);
            v30 = *(float *)(v27 - 8) < v16;
            v77 = v29 == v15;
            v31 = v29 < v15;
            if (v77)
              v31 = v30;
            v27 = v28;
          }
          while (!v31);
        }
LABEL_29:
        v8 = v26;
        if (v26 < v28)
        {
          v36 = v28;
          do
          {
            v37 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)v36;
            *(_QWORD *)v36 = v37;
            v169 = *(_OWORD *)(v8 + 8);
            *(_OWORD *)(v8 + 8) = *(_OWORD *)(v36 + 8);
            *(_OWORD *)(v36 + 8) = v169;
            do
            {
              v38 = *(_DWORD *)(v8 + 32);
              v39 = *(float *)(v8 + 40);
              v8 += 24;
              v77 = v38 == v15;
              v40 = v38 < v15;
              if (v77)
                v40 = v39 < v16;
            }
            while (v40);
            do
            {
              v41 = *(_DWORD *)(v36 - 16);
              v42 = *(float *)(v36 - 8);
              v36 -= 24;
              v77 = v41 == v15;
              v43 = v41 < v15;
              if (v77)
                v43 = v42 < v16;
            }
            while (!v43);
          }
          while (v8 < v36);
        }
        if (v8 - 24 != a1)
        {
          *(_QWORD *)a1 = *(_QWORD *)(v8 - 24);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(v8 - 16);
        }
        *(_QWORD *)(v8 - 24) = v20;
        *(_DWORD *)(v8 - 16) = v15;
        *(_DWORD *)(v8 - 12) = v21;
        *(float *)(v8 - 8) = v16;
        *(_DWORD *)(v8 - 4) = v22;
        if (v26 < v28)
        {
LABEL_44:
          std::__introsort<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,false>(a1, v8 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v44 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>(a1, v8 - 24);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::quasar::MergeTrieFstImpl::Expand(int)::$_0 &,std::pair<fst::quasar::SubPath *,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>(v8, a2))
        {
          if (v44)
            continue;
          goto LABEL_44;
        }
        a2 = v8 - 24;
        if (!v44)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v9) >> 4);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v24 = *((_DWORD *)a2 - 12);
        if (v24 < *(_DWORD *)v9 || v24 <= *(_DWORD *)v9 && *((_DWORD *)a2 - 2) < *(_DWORD *)(v9 + 40))
          std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)v9, a2 - 6);
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(v9, (uint64_t *)(v9 + 48), (uint64_t)(a2 - 6));
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(v9, v9 + 48, v9 + 96, (uint64_t)(a2 - 6));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(v9, v9 + 48, v9 + 96, v9 + 144, (uint64_t)(a2 - 6));
        return;
      default:
        if (v12 <= 1151)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>((_QWORD *)v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>((_QWORD *)v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (uint64_t *)(v9 + 48 * (v13 >> 1));
          if ((unint64_t)v12 < 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>((uint64_t)v15, (uint64_t *)v9, (uint64_t)(a2 - 6));
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(v9, v15, (uint64_t)(a2 - 6));
            v16 = 3 * v14;
            v17 = (uint64_t *)(v9 + 48 * v14 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(v9 + 48, v17, (uint64_t)(a2 - 12));
            v18 = v9 + 96;
            v19 = (uint64_t *)(v9 + 48 + 16 * v16);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(v18, v19, (uint64_t)(a2 - 18));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>((uint64_t)v17, v15, (uint64_t)v19);
            std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t *)a1, v15);
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          v20 = *(_DWORD *)(a1 - 48);
          if (v20 >= *(_DWORD *)a1 && (v20 > *(_DWORD *)a1 || *(_DWORD *)(a1 - 8) >= *(_DWORD *)(a1 + 40)))
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &>((uint64_t *)a1, (unint64_t)a2);
            goto LABEL_18;
          }
LABEL_13:
          v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &>((uint64_t *)a1, (unint64_t)a2);
          if ((v22 & 1) == 0)
            goto LABEL_16;
          v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(a1, v21);
          v9 = v21 + 48;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(v21 + 48, (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v23)
              continue;
LABEL_16:
            std::__introsort<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *,false>(a1, v21, a3, -v11, a5 & 1);
            v9 = v21 + 48;
LABEL_18:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (_QWORD *)v21;
          if (v23)
            return;
          goto LABEL_1;
        }
        if ((_QWORD *)v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::EquivalenceSorter &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> *>(v9, (uint64_t)a2, (uint64_t)a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = (uint64_t)((uint64_t)a2 - v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(a2 - 3) < *(_DWORD *)(v9 + 4))
        {
          v20 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *((_OWORD *)a2 - 1);
          *((_OWORD *)a2 - 1) = v20;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v9, (__int128 *)(v9 + 16), (__int128 *)a2 - 1);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v9, v9 + 16, v9 + 32, (uint64_t)(a2 - 4));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__n128 *)v9, (__n128 *)(v9 + 16), (__n128 *)(v9 + 32), (__n128 *)(v9 + 48), (__n128 *)a2 - 1);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((_DWORD *)v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (__int128 *)(v9 + 16 * (v13 >> 1));
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)(v9 + 16 * (v13 >> 1)), (__int128 *)v9, (__int128 *)a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v9, (__int128 *)(v9 + 16 * (v13 >> 1)), (__int128 *)a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)(v9 + 16), v15 - 1, (__int128 *)a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)(v9 + 32), (__int128 *)(v9 + 16 + 16 * v14), (__int128 *)a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v15 - 1, v15, (__int128 *)(v9 + 16 + 16 * v14));
            v19 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *v15;
            *v15 = v19;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(_DWORD *)(v9 - 12) >= *(_DWORD *)(v9 + 4))
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>((int *)v9, a2);
            goto LABEL_16;
          }
LABEL_11:
          v16 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>((int *)v9, a2);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>> &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*>(v9, v16);
          v9 = v16 + 16;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>> &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*>(v16 + 16, (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>> &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*,false>(a1, v16, a3, -v11, a5 & 1);
            v9 = v16 + 16;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (_DWORD *)v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if ((_DWORD *)v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((int *)v9, a2, a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v20 = *((_DWORD *)a2 - 4);
        v19 = a2 - 1;
        if (v20 < (signed __int32)v9->n128_u32[0])
        {
          v28 = (__int128)*v9;
          *v9 = (__n128)*v19;
          *v19 = v28;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v9, (int *)&v9[1], (int *)a2 - 4);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v9, (int *)&v9[1], (int *)&v9[2], a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v9, (int *)&v9[1], (int *)&v9[2], v9 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v12 > 383)
        {
          if (v11 == 1)
          {
            if (v9 != (__n128 *)a2)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v9, a2, a2, a3);
            return;
          }
          v14 = v13 >> 1;
          v15 = (int *)&v9[v13 >> 1];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)&v9[v13 >> 1], (int *)v9, (int *)a2 - 4);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v9, (int *)&v9[v13 >> 1], (int *)a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)&v9[1], v15 - 4, (int *)a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)&v9[2], (int *)&v9[v14 + 1], (int *)a2 - 12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v15 - 1, v15, (int *)&v9[v14 + 1]);
            v27 = (__int128)*v9;
            *v9 = *(__n128 *)v15;
            *(_OWORD *)v15 = v27;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if ((signed __int32)v9[-1].n128_u32[0] >= (signed __int32)v9->n128_u32[0])
          {
            v9 = (__n128 *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>(v9, a2);
            goto LABEL_16;
          }
LABEL_11:
          v16 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>((__int128 *)v9, a2);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>> &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*>((uint64_t)v9, (__n128 *)v16);
          v9 = (__n128 *)(v16 + 1);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>> &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*>((uint64_t)(v16 + 1), (__n128 *)a2))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::LogWeightTpl<float>,int>> &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*,false>(a1, v16, a3, -v11, a5 & 1);
            v9 = (__n128 *)(v16 + 1);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v9, a2);
        }
        else if (v9 != (__n128 *)a2)
        {
          v21 = (__int128 *)&v9[1];
          while (v21 != a2)
          {
            v22 = v21;
            v23 = a1[1].n128_i64[0];
            if ((int)v23 < (signed __int32)a1->n128_u32[0])
            {
              v24 = a1[1].n128_i64[1];
              v25 = v22;
              do
              {
                *v25 = *(v25 - 1);
                v26 = *((_DWORD *)v25-- - 8);
              }
              while ((int)v23 < v26);
              *(_QWORD *)v25 = v23;
              *((_QWORD *)v25 + 1) = v24;
            }
            v21 = v22 + 1;
            a1 = (__n128 *)v22;
          }
        }
        return;
    }
  }
}

  v10 = a2 - 3;
  v11 = a1;
LABEL_2:
  v12 = 1 - a4;
  while (2)
  {
    a1 = v11;
    v13 = v12;
    v14 = (uint64_t)a2 - v11;
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v11) >> 4);
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)(a2 - 3, (__int128 *)v11))
        {
          v33 = *(_QWORD *)(v11 + 16);
          v31 = *(_OWORD *)v11;
          v27 = *v10;
          *(_QWORD *)(v11 + 16) = *((_QWORD *)a2 - 4);
          *(_OWORD *)v11 = v27;
          *v10 = v31;
          *((_QWORD *)a2 - 4) = v33;
          v28 = *(_QWORD *)(v11 + 24);
          *(_QWORD *)(v11 + 24) = *((_QWORD *)a2 - 3);
          *((_QWORD *)a2 - 3) = v28;
          v29 = *(_QWORD *)(v11 + 32);
          *(_QWORD *)(v11 + 32) = *((_QWORD *)a2 - 2);
          *((_QWORD *)a2 - 2) = v29;
          LODWORD(v27) = *(_DWORD *)(v11 + 40);
          *(_DWORD *)(v11 + 40) = *((_DWORD *)a2 - 2);
          *((_DWORD *)a2 - 2) = v27;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>((__int128 *)v11, (__int128 *)(v11 + 48), a2 - 3, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(v11, v11 + 48, v11 + 96, (uint64_t)(a2 - 3), a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(v11, v11 + 48, v11 + 96, v11 + 144, (uint64_t)(a2 - 3), a3);
        return;
      default:
        if (v14 <= 1151)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(v11, a2, (uint64_t (**)(__int128 *, uint64_t, float))a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(v11, (uint64_t)a2, (uint64_t (**)(__int128 *, uint64_t, float))a3);
          return;
        }
        if (v13 != 1)
        {
          v16 = v15 >> 1;
          v17 = v11 + 48 * (v15 >> 1);
          if ((unint64_t)v14 < 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>((__int128 *)v17, (__int128 *)v11, a2 - 3, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>((__int128 *)v11, (__int128 *)v17, a2 - 3, a3);
            v18 = 3 * v16;
            v19 = (__int128 *)(v11 + 48 * v16 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>((__int128 *)(v11 + 48), v19, a2 - 6, a3);
            v20 = (__int128 *)(v11 + 96);
            v21 = (__int128 *)(v11 + 48 + 16 * v18);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(v20, v21, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(v19, (__int128 *)v17, v21, a3);
            v32 = *(_QWORD *)(a1 + 16);
            v30 = *(_OWORD *)a1;
            v22 = *(_OWORD *)v17;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v17 + 16);
            *(_OWORD *)a1 = v22;
            *(_QWORD *)(v17 + 16) = v32;
            *(_OWORD *)v17 = v30;
            v23 = *(_OWORD *)(a1 + 24);
            *(_OWORD *)(a1 + 24) = *(_OWORD *)(v17 + 24);
            *(_OWORD *)(v17 + 24) = v23;
            LODWORD(v23) = *(_DWORD *)(a1 + 40);
            *(_DWORD *)(a1 + 40) = *(_DWORD *)(v17 + 40);
            *(_DWORD *)(v17 + 40) = v23;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)((__int128 *)(a1 - 48), (__int128 *)a1) & 1) == 0)
          {
            v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<std::string,long long,long long,float> *,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&)>(a1, (unint64_t)a2, (uint64_t (**)(void **, unint64_t))a3);
            goto LABEL_16;
          }
LABEL_11:
          v24 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<std::string,long long,long long,float> *,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&)>(a1, (unint64_t)a2, (uint64_t (**)(uint64_t, void **))a3);
          if ((v25 & 1) == 0)
            goto LABEL_14;
          v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(a1, v24, a3);
          v11 = v24 + 48;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(v24 + 48, (uint64_t)a2, a3))
          {
            v12 = v13 + 1;
            if (v26)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*,false>(a1, v24, a3, -v13, a5 & 1);
            v11 = v24 + 48;
LABEL_16:
            a5 = 0;
            a4 = -v13;
            goto LABEL_2;
          }
          a4 = -v13;
          a2 = (__int128 *)v24;
          if (v26)
            return;
          goto LABEL_1;
        }
        if ((__int128 *)v11 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*,std::tuple<std::string,long long,long long,float>*>(v11, (uint64_t)a2, (uint64_t)a2, (unsigned int (**)(uint64_t, uint64_t, float))a3, a6);
        return;
    }
  }
}

  v9 = (char *)a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v9;
    v11 = v10;
    v12 = a2 - v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v9) >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v27, (_DWORD *)a2 - 6, v9))
        {
          v26 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *((_QWORD *)a2 - 3);
          *((_QWORD *)a2 - 3) = v26;
          v27 = *(_OWORD *)(v9 + 8);
          *(_OWORD *)(v9 + 8) = *((_OWORD *)a2 - 1);
          *((_OWORD *)a2 - 1) = v27;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>((uint64_t *)v9, (uint64_t *)v9 + 3, (uint64_t *)a2 - 3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>((uint64_t)v9, (uint64_t)(v9 + 24), (uint64_t)(v9 + 48), (uint64_t)(a2 - 24));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>((uint64_t)v9, (uint64_t)(v9 + 24), (uint64_t)(v9 + 48), (uint64_t)(v9 + 72), (uint64_t)(a2 - 24));
        return;
      default:
        if (v12 <= 575)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>((uint64_t)v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>((uint64_t)v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[24 * (v13 >> 1)];
          if ((unint64_t)v12 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>((uint64_t *)&v9[24 * v14], (uint64_t *)v9, (uint64_t *)a2 - 3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>((uint64_t *)v9, (uint64_t *)&v9[24 * v14], (uint64_t *)a2 - 3);
            v16 = 3 * v14;
            v17 = (uint64_t *)&v9[24 * v14 - 24];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>((uint64_t *)v9 + 3, v17, (uint64_t *)a2 - 6);
            v18 = (uint64_t *)(v9 + 48);
            v19 = (uint64_t *)&v9[8 * v16 + 24];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(v18, v19, (uint64_t *)a2 - 9);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(v17, (uint64_t *)v15, v19);
            v20 = *(_QWORD *)a1;
            *(_QWORD *)a1 = *(_QWORD *)v15;
            *(_QWORD *)v15 = v20;
            v27 = *(_OWORD *)(a1 + 8);
            *(_OWORD *)(a1 + 8) = *(_OWORD *)(v15 + 8);
            *(_OWORD *)(v15 + 8) = v27;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if ((std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v27, (_DWORD *)(a1 - 24), (_DWORD *)a1) & 1) == 0)
          {
            v9 = (char *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<int,quasar::SegmentType,std::string_view> *,std::__less<void,void> &>(a1, (unint64_t)a2);
            goto LABEL_16;
          }
LABEL_11:
          v22.n128_f64[0] = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<int,quasar::SegmentType,std::string_view> *,std::__less<void,void> &>(a1, a2);
          v23 = (char *)v21;
          if ((v24 & 1) == 0)
            goto LABEL_14;
          v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(a1, v21);
          v9 = v23 + 24;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>((uint64_t)(v23 + 24), (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v25)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *,false>(a1, v23, a3, -v11, a5 & 1, v22);
            v9 = v23 + 24;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v23;
          if (v25)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *,std::tuple<int,quasar::SegmentType,std::string_view> *>((uint64_t)v9, (uint64_t *)a2, (uint64_t *)a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v22 = *(a2 - 8);
        v23 = *v9;
        if (v22 < *v9 || v22 <= v23 && *(a2 - 6) < v9[2])
        {
          *v9 = v22;
          *(a2 - 8) = v23;
          v26 = *(_OWORD *)(v9 + 2);
          v24 = *((_QWORD *)v9 + 3);
          *(_OWORD *)(v9 + 2) = *(_OWORD *)(a2 - 6);
          *((_QWORD *)v9 + 3) = *((_QWORD *)a2 - 1);
          *(_OWORD *)(a2 - 6) = v26;
          *((_QWORD *)a2 - 1) = v24;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(v9, v9 + 8, a2 - 8);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((uint64_t)v9, (uint64_t)(v9 + 8), (uint64_t)(v9 + 16), (uint64_t)(a2 - 8));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((uint64_t)v9, (uint64_t)(v9 + 8), (uint64_t)(v9 + 16), (uint64_t)(v9 + 24), a2 - 8);
        return;
      default:
        if (v12 <= 767)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((uint64_t)v9, (uint64_t)a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[8 * (v13 >> 1)];
          if ((unint64_t)v12 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(&v9[8 * (v13 >> 1)], v9, a2 - 8);
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(v9, &v9[8 * (v13 >> 1)], a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(v9 + 8, v15 - 8, a2 - 16);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(v9 + 16, &v9[8 * v14 + 8], a2 - 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(v15 - 8, v15, &v9[8 * v14 + 8]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            v25 = *(_OWORD *)(v9 + 2);
            *(_OWORD *)(v9 + 2) = *(_OWORD *)(v15 + 2);
            *(_OWORD *)(v15 + 2) = v25;
            v17 = *((_QWORD *)v9 + 3);
            *((_QWORD *)v9 + 3) = *((_QWORD *)v15 + 3);
            *((_QWORD *)v15 + 3) = v17;
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          v18 = *(v9 - 8);
          if (v18 >= *v9 && (v18 > *v9 || *(v9 - 6) >= v9[2]))
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &>(v9, a2);
            goto LABEL_18;
          }
LABEL_13:
          v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &>(v9, a2);
          if ((v20 & 1) == 0)
            goto LABEL_16;
          v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element> *>((uint64_t)v9, v19);
          v9 = (int *)(v19 + 32);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element> *>(v19 + 32, (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v21)
              continue;
LABEL_16:
            std::__introsort<std::_ClassicAlgPolicy,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element> *,false>(a1, v19, a3, -v11, a5 & 1);
            v9 = (int *)(v19 + 32);
LABEL_18:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (int *)v19;
          if (v21)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((uint64_t)v9, (uint64_t)a2, (uint64_t)a2, a3);
        return;
    }
  }
}

  v7 = a2 - 168;
  v228 = a2 - 504;
  v230 = a2 - 336;
  v226 = (_DWORD *)(a2 - 4);
  v8 = a1;
  v234 = a2;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v85 = *(_DWORD *)(a2 - 92);
        v86 = *(_DWORD *)(a1 + 76);
        if (v86 < v85 || (v85 >= v86 ? (v87 = *(_DWORD *)(a1 + 164) < *(_DWORD *)(a2 - 4)) : (v87 = 0), v87))
          std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(a1, v7);
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(a1, a1 + 168, v7);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(a1, a1 + 168, a1 + 336, v7);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*,0>(a1, a1 + 168, a1 + 336, a1 + 504, v7);
        return;
      default:
        if (v9 > 4031)
        {
          if (!a3)
          {
            if (a1 != a2)
            {
              v111 = (unint64_t)(v10 - 2) >> 1;
              v112 = v111;
              do
              {
                v113 = v112;
                if (v111 >= v112)
                {
                  v114 = (2 * v112) | 1;
                  v115 = a1 + 168 * v114;
                  if (2 * v113 + 2 < v10)
                  {
                    v116 = *(_DWORD *)(a1 + 168 * v114 + 76);
                    v117 = *(_DWORD *)(v115 + 244);
                    if (v117 < v116
                      || (v116 >= v117
                        ? (v118 = *(_DWORD *)(v115 + 332) < *(_DWORD *)(a1 + 168 * v114 + 164))
                        : (v118 = 0),
                          v118))
                    {
                      v115 += 168;
                      v114 = 2 * v113 + 2;
                    }
                  }
                  v119 = *(_DWORD *)(v115 + 76);
                  v120 = *(_DWORD *)(a1 + 168 * v113 + 76);
                  if (v120 >= v119 && (v119 < v120 || *(_DWORD *)(a1 + 168 * v113 + 164) >= *(_DWORD *)(v115 + 164)))
                  {
                    v122 = a1 + 168 * v113;
                    v123 = *(_OWORD *)v122;
                    v253 = *(_QWORD *)(v122 + 16);
                    *(_OWORD *)v252 = v123;
                    *(_QWORD *)(v122 + 8) = 0;
                    *(_QWORD *)(v122 + 16) = 0;
                    *(_QWORD *)v122 = 0;
                    v124 = *(_OWORD *)(v122 + 24);
                    v255 = *(_QWORD *)(v122 + 40);
                    v254 = v124;
                    *(_QWORD *)(v122 + 32) = 0;
                    *(_QWORD *)(v122 + 40) = 0;
                    *(_QWORD *)(v122 + 24) = 0;
                    v125 = *(_OWORD *)(v122 + 48);
                    v257 = *(_QWORD *)(v122 + 64);
                    __p = v125;
                    *(_QWORD *)(v122 + 56) = 0;
                    *(_QWORD *)(v122 + 64) = 0;
                    *(_QWORD *)(v122 + 48) = 0;
                    v126 = *(_QWORD *)(v122 + 72);
                    v259 = *(_WORD *)(v122 + 80);
                    v258 = v126;
                    v260 = *(_OWORD *)(v122 + 88);
                    v261 = *(_QWORD *)(v122 + 104);
                    *(_QWORD *)(v122 + 88) = 0;
                    *(_QWORD *)(v122 + 96) = 0;
                    *(_QWORD *)(v122 + 104) = 0;
                    v262 = *(_OWORD *)(v122 + 112);
                    v263 = *(_QWORD *)(v122 + 128);
                    *(_QWORD *)(v122 + 112) = 0;
                    *(_QWORD *)(v122 + 120) = 0;
                    *(_QWORD *)(v122 + 128) = 0;
                    v264 = *(_OWORD *)(v122 + 136);
                    v265 = *(_QWORD *)(v122 + 152);
                    *(_QWORD *)(v122 + 144) = 0;
                    *(_QWORD *)(v122 + 152) = 0;
                    *(_QWORD *)(v122 + 136) = 0;
                    v266 = *(_QWORD *)(v122 + 160);
                    v127 = HIDWORD(v258);
                    v128 = HIDWORD(v266);
                    do
                    {
                      v129 = v115;
                      quasar::result_handler::CommandInterpretation::operator=(v122, (__int128 *)v115);
                      if (v111 < v114)
                        break;
                      v130 = (2 * v114) | 1;
                      v115 = a1 + 168 * v130;
                      if (2 * v114 + 2 < v10)
                      {
                        v131 = *(_DWORD *)(a1 + 168 * v130 + 76);
                        v132 = *(_DWORD *)(v115 + 244);
                        if (v132 < v131
                          || (v131 >= v132
                            ? (v133 = *(_DWORD *)(v115 + 332) < *(_DWORD *)(a1 + 168 * v130 + 164))
                            : (v133 = 0),
                              v133))
                        {
                          v115 += 168;
                          v130 = 2 * v114 + 2;
                        }
                      }
                      v134 = *(_DWORD *)(v115 + 76);
                      if (v127 < v134)
                        break;
                      v135 = v134 < v127 || *(_DWORD *)(v115 + 164) <= (int)v128;
                      v122 = v129;
                      v114 = v130;
                    }
                    while (v135);
                    if (*(char *)(v129 + 23) < 0)
                      operator delete(*(void **)v129);
                    v136 = *(_OWORD *)v252;
                    *(_QWORD *)(v129 + 16) = v253;
                    *(_OWORD *)v129 = v136;
                    HIBYTE(v253) = 0;
                    LOBYTE(v252[0]) = 0;
                    v137 = (void **)(v129 + 24);
                    if (*(char *)(v129 + 47) < 0)
                      operator delete(*v137);
                    v138 = v254;
                    *(_QWORD *)(v129 + 40) = v255;
                    *(_OWORD *)v137 = v138;
                    HIBYTE(v255) = 0;
                    LOBYTE(v254) = 0;
                    v139 = (void **)(v129 + 48);
                    if (*(char *)(v129 + 71) < 0)
                      operator delete(*v139);
                    v140 = __p;
                    *(_QWORD *)(v129 + 64) = v257;
                    *(_OWORD *)v139 = v140;
                    HIBYTE(v257) = 0;
                    LOBYTE(__p) = 0;
                    v141 = v259;
                    *(_QWORD *)(v129 + 72) = v258;
                    *(_WORD *)(v129 + 80) = v141;
                    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v129 + 88));
                    *(_OWORD *)(v129 + 88) = v260;
                    *(_QWORD *)(v129 + 104) = v261;
                    v260 = 0uLL;
                    v261 = 0;
                    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v129 + 112));
                    *(_OWORD *)(v129 + 112) = v262;
                    *(_QWORD *)(v129 + 128) = v263;
                    v262 = 0uLL;
                    v263 = 0;
                    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v129 + 136));
                    *(_OWORD *)(v129 + 136) = v264;
                    *(_QWORD *)(v129 + 152) = v265;
                    v264 = 0uLL;
                    v265 = 0;
                    *(_QWORD *)(v129 + 160) = v266;
                    v236[0] = &v264;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v236);
                    v236[0] = &v262;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v236);
                    v236[0] = &v260;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v236);
                    if (SHIBYTE(v257) < 0)
                      operator delete((void *)__p);
                    a2 = v234;
                    if (SHIBYTE(v255) < 0)
                      operator delete((void *)v254);
                    if (SHIBYTE(v253) < 0)
                      operator delete(v252[0]);
                  }
                }
                v112 = v113 - 1;
              }
              while (v113);
              v142 = v9 / 0xA8uLL;
              v221 = (__int128 *)(a1 + 48);
              v222 = (__int128 *)(a1 + 24);
              do
              {
                v143 = 0;
                v144 = *(_OWORD *)a1;
                v145 = a2;
                v237 = *(_QWORD *)(a1 + 16);
                *(_OWORD *)v236 = v144;
                *(_QWORD *)(a1 + 8) = 0;
                *(_QWORD *)(a1 + 16) = 0;
                *(_QWORD *)a1 = 0;
                v146 = *v222;
                v239 = *(_QWORD *)(a1 + 40);
                v238 = v146;
                *(_QWORD *)(a1 + 32) = 0;
                *(_QWORD *)(a1 + 40) = 0;
                *(_QWORD *)v222 = 0;
                v147 = *v221;
                v241 = *(_QWORD *)(a1 + 64);
                v240 = v147;
                *(_QWORD *)v221 = 0;
                *(_QWORD *)(a1 + 56) = 0;
                *(_QWORD *)(a1 + 64) = 0;
                v148 = *(_QWORD *)(a1 + 72);
                v243 = *(_WORD *)(a1 + 80);
                v242 = v148;
                v149 = *(_QWORD *)(a1 + 96);
                v232 = *(_QWORD *)(a1 + 88);
                *(_QWORD *)&v244 = v232;
                *((_QWORD *)&v244 + 1) = v149;
                v227 = v149;
                v150 = *(_QWORD *)(a1 + 112);
                v223 = *(_QWORD *)(a1 + 104);
                v245 = v223;
                *(_QWORD *)(a1 + 88) = 0;
                *(_QWORD *)(a1 + 96) = 0;
                *(_QWORD *)(a1 + 104) = 0;
                v151 = *(_QWORD *)(a1 + 120);
                v152 = *(_QWORD *)(a1 + 128);
                v231 = v150;
                *(_QWORD *)&v246 = v150;
                *((_QWORD *)&v246 + 1) = v151;
                v225 = v151;
                v247 = v152;
                *(_QWORD *)(a1 + 112) = 0;
                *(_QWORD *)(a1 + 120) = 0;
                *(_QWORD *)(a1 + 128) = 0;
                v153 = *(_QWORD *)(a1 + 144);
                v229 = *(_QWORD *)(a1 + 136);
                *(_QWORD *)&v248 = v229;
                *((_QWORD *)&v248 + 1) = v153;
                v224 = v153;
                v154 = *(_QWORD *)(a1 + 152);
                v155 = *(_QWORD *)(a1 + 160);
                v249 = v154;
                *(_QWORD *)(a1 + 136) = 0;
                *(_QWORD *)(a1 + 144) = 0;
                *(_QWORD *)(a1 + 152) = 0;
                v156 = a1;
                v250 = v155;
                do
                {
                  v157 = v156;
                  v158 = v143 + 1;
                  v156 += 168 * (v143 + 1);
                  v159 = 2 * v143;
                  v143 = (2 * v143) | 1;
                  v160 = v159 + 2;
                  if (v160 < v142)
                  {
                    v161 = *(_DWORD *)(v157 + 168 * v158 + 76);
                    v162 = *(_DWORD *)(v156 + 244);
                    if (v162 < v161
                      || ((v163 = *(_DWORD *)(v157 + 168 * v158 + 164), v161 >= v162)
                        ? (v164 = *(_DWORD *)(v156 + 332) < v163)
                        : (v164 = 0),
                          v164))
                    {
                      v156 += 168;
                      v143 = v160;
                    }
                  }
                  quasar::result_handler::CommandInterpretation::operator=(v157, (__int128 *)v156);
                }
                while (v143 <= (uint64_t)((unint64_t)(v142 - 2) >> 1));
                v165 = (void **)(v145 - 168);
                v235 = v145 - 168;
                if (v156 == v145 - 168)
                {
                  if (*(char *)(v156 + 23) < 0)
                    operator delete(*(void **)v156);
                  v184 = *(_OWORD *)v236;
                  *(_QWORD *)(v156 + 16) = v237;
                  *(_OWORD *)v156 = v184;
                  HIBYTE(v237) = 0;
                  LOBYTE(v236[0]) = 0;
                  v185 = (void **)(v156 + 24);
                  if (*(char *)(v156 + 47) < 0)
                    operator delete(*v185);
                  v186 = v238;
                  *(_QWORD *)(v156 + 40) = v239;
                  *(_OWORD *)v185 = v186;
                  HIBYTE(v239) = 0;
                  LOBYTE(v238) = 0;
                  v187 = (void **)(v156 + 48);
                  if (*(char *)(v156 + 71) < 0)
                    operator delete(*v187);
                  v188 = v240;
                  *(_QWORD *)(v156 + 64) = v241;
                  *(_OWORD *)v187 = v188;
                  HIBYTE(v241) = 0;
                  LOBYTE(v240) = 0;
                  v189 = v243;
                  *(_QWORD *)(v156 + 72) = v242;
                  *(_WORD *)(v156 + 80) = v189;
                  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v156 + 88));
                  *(_OWORD *)(v156 + 88) = v244;
                  *(_QWORD *)(v156 + 104) = v245;
                  v244 = 0uLL;
                  v245 = 0;
                  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v156 + 112));
                  *(_OWORD *)(v156 + 112) = v246;
                  *(_QWORD *)(v156 + 128) = v247;
                  v246 = 0uLL;
                  v247 = 0;
                  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v156 + 136));
                  *(_OWORD *)(v156 + 136) = v248;
                  *(_QWORD *)(v156 + 152) = v249;
                  v248 = 0uLL;
                  v249 = 0;
                  *(_QWORD *)(v156 + 160) = v250;
                }
                else
                {
                  quasar::result_handler::CommandInterpretation::operator=(v156, (__int128 *)(v145 - 168));
                  if (*(char *)(v145 - 145) < 0)
                    operator delete(*v165);
                  v166 = *(_OWORD *)v236;
                  *(_QWORD *)(v145 - 152) = v237;
                  *(_OWORD *)v165 = v166;
                  HIBYTE(v237) = 0;
                  LOBYTE(v236[0]) = 0;
                  v167 = (void **)(v145 - 144);
                  if (*(char *)(v145 - 121) < 0)
                    operator delete(*v167);
                  v168 = v238;
                  *(_QWORD *)(v145 - 128) = v239;
                  *(_OWORD *)v167 = v168;
                  HIBYTE(v239) = 0;
                  LOBYTE(v238) = 0;
                  v169 = (void **)(v145 - 120);
                  if (*(char *)(v145 - 97) < 0)
                    operator delete(*v169);
                  v170 = v240;
                  *(_QWORD *)(v145 - 104) = v241;
                  *(_OWORD *)v169 = v170;
                  HIBYTE(v241) = 0;
                  LOBYTE(v240) = 0;
                  v171 = v242;
                  *(_WORD *)(v145 - 88) = v243;
                  *(_QWORD *)(v145 - 96) = v171;
                  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v145 - 80));
                  *(_QWORD *)(v145 - 80) = v232;
                  *(_QWORD *)(v145 - 72) = v227;
                  *(_QWORD *)(v145 - 64) = v223;
                  v244 = 0uLL;
                  v245 = 0;
                  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v145 - 56));
                  *(_QWORD *)(v145 - 56) = v231;
                  *(_QWORD *)(v145 - 48) = v225;
                  *(_QWORD *)(v145 - 40) = v152;
                  v246 = 0uLL;
                  v247 = 0;
                  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v145 - 32));
                  *(_QWORD *)(v145 - 32) = v229;
                  *(_QWORD *)(v145 - 24) = v224;
                  *(_QWORD *)(v145 - 16) = v154;
                  v248 = 0uLL;
                  v249 = 0;
                  *(_QWORD *)(v145 - 8) = v155;
                  if (v156 + 168 - a1 >= 169)
                  {
                    v172 = (v156 + 168 - a1) / 0xA8uLL - 2;
                    v173 = v172 >> 1;
                    v174 = a1 + 168 * (v172 >> 1);
                    v175 = *(_DWORD *)(v174 + 76);
                    v176 = *(_DWORD *)(v156 + 76);
                    if (v176 < v175
                      || (v175 >= v176
                        ? (v177 = *(_DWORD *)(v156 + 164) < *(_DWORD *)(a1 + 168 * v173 + 164))
                        : (v177 = 0),
                          v177))
                    {
                      v178 = *(_OWORD *)v156;
                      v253 = *(_QWORD *)(v156 + 16);
                      *(_OWORD *)v252 = v178;
                      *(_QWORD *)(v156 + 8) = 0;
                      *(_QWORD *)(v156 + 16) = 0;
                      *(_QWORD *)v156 = 0;
                      v179 = *(_OWORD *)(v156 + 24);
                      v255 = *(_QWORD *)(v156 + 40);
                      v254 = v179;
                      *(_QWORD *)(v156 + 32) = 0;
                      *(_QWORD *)(v156 + 40) = 0;
                      *(_QWORD *)(v156 + 24) = 0;
                      v180 = *(_OWORD *)(v156 + 48);
                      v257 = *(_QWORD *)(v156 + 64);
                      __p = v180;
                      *(_QWORD *)(v156 + 56) = 0;
                      *(_QWORD *)(v156 + 64) = 0;
                      *(_QWORD *)(v156 + 48) = 0;
                      v181 = *(_QWORD *)(v156 + 72);
                      v259 = *(_WORD *)(v156 + 80);
                      v258 = v181;
                      v260 = *(_OWORD *)(v156 + 88);
                      v261 = *(_QWORD *)(v156 + 104);
                      *(_QWORD *)(v156 + 88) = 0;
                      *(_QWORD *)(v156 + 96) = 0;
                      *(_QWORD *)(v156 + 104) = 0;
                      v262 = *(_OWORD *)(v156 + 112);
                      v263 = *(_QWORD *)(v156 + 128);
                      *(_QWORD *)(v156 + 112) = 0;
                      *(_QWORD *)(v156 + 120) = 0;
                      *(_QWORD *)(v156 + 128) = 0;
                      v264 = *(_OWORD *)(v156 + 136);
                      v265 = *(_QWORD *)(v156 + 152);
                      *(_QWORD *)(v156 + 136) = 0;
                      *(_QWORD *)(v156 + 144) = 0;
                      *(_QWORD *)(v156 + 152) = 0;
                      v182 = *(_QWORD *)(v156 + 160);
                      v266 = v182;
                      quasar::result_handler::CommandInterpretation::operator=(v156, (__int128 *)(a1 + 168 * (v172 >> 1)));
                      if (v172 >= 2)
                      {
                        v190 = HIDWORD(v182);
                        v191 = HIDWORD(v258);
                        while (1)
                        {
                          v192 = v173 - 1;
                          v173 = (v173 - 1) >> 1;
                          v183 = a1 + 168 * v173;
                          v193 = *(_DWORD *)(v183 + 76);
                          if (v191 >= v193 && (v193 < v191 || *(_DWORD *)(a1 + 168 * v173 + 164) <= (int)v190))
                            break;
                          quasar::result_handler::CommandInterpretation::operator=(v174, (__int128 *)(a1 + 168 * v173));
                          v174 = a1 + 168 * v173;
                          if (v192 <= 1)
                            goto LABEL_255;
                        }
                      }
                      v183 = v174;
LABEL_255:
                      if (*(char *)(v183 + 23) < 0)
                        operator delete(*(void **)v183);
                      v195 = *(_OWORD *)v252;
                      *(_QWORD *)(v183 + 16) = v253;
                      *(_OWORD *)v183 = v195;
                      HIBYTE(v253) = 0;
                      LOBYTE(v252[0]) = 0;
                      v196 = (void **)(v183 + 24);
                      if (*(char *)(v183 + 47) < 0)
                        operator delete(*v196);
                      v197 = v254;
                      *(_QWORD *)(v183 + 40) = v255;
                      *(_OWORD *)v196 = v197;
                      HIBYTE(v255) = 0;
                      LOBYTE(v254) = 0;
                      v198 = (void **)(v183 + 48);
                      if (*(char *)(v183 + 71) < 0)
                        operator delete(*v198);
                      v199 = __p;
                      *(_QWORD *)(v183 + 64) = v257;
                      *(_OWORD *)v198 = v199;
                      HIBYTE(v257) = 0;
                      LOBYTE(__p) = 0;
                      v200 = v259;
                      *(_QWORD *)(v183 + 72) = v258;
                      *(_WORD *)(v183 + 80) = v200;
                      std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v183 + 88));
                      *(_OWORD *)(v183 + 88) = v260;
                      *(_QWORD *)(v183 + 104) = v261;
                      v260 = 0uLL;
                      v261 = 0;
                      std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v183 + 112));
                      *(_OWORD *)(v183 + 112) = v262;
                      *(_QWORD *)(v183 + 128) = v263;
                      v262 = 0uLL;
                      v263 = 0;
                      std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v183 + 136));
                      *(_OWORD *)(v183 + 136) = v264;
                      *(_QWORD *)(v183 + 152) = v265;
                      v264 = 0uLL;
                      v265 = 0;
                      *(_QWORD *)(v183 + 160) = v266;
                      v251 = (void **)&v264;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v251);
                      v251 = (void **)&v262;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v251);
                      v251 = (void **)&v260;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v251);
                      if (SHIBYTE(v257) < 0)
                        operator delete((void *)__p);
                      if (SHIBYTE(v255) < 0)
                        operator delete((void *)v254);
                      if (SHIBYTE(v253) < 0)
                        operator delete(v252[0]);
                    }
                  }
                }
                v252[0] = &v248;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v252);
                v252[0] = &v246;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v252);
                v252[0] = &v244;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v252);
                if (SHIBYTE(v241) < 0)
                  operator delete((void *)v240);
                a2 = v235;
                if (SHIBYTE(v239) < 0)
                  operator delete((void *)v238);
                if (SHIBYTE(v237) < 0)
                  operator delete(v236[0]);
                v26 = v142-- <= 2;
              }
              while (!v26);
            }
            return;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = a1 + 168 * ((unint64_t)v10 >> 1);
          if ((unint64_t)v9 < 0x5401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(v12, a1, v7);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(a1, v12, v7);
            v13 = 168 * v11;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(a1 + 168, v13 + a1 - 168, v230);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(a1 + 336, a1 + 168 + v13, v228);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(v13 + a1 - 168, v12, a1 + 168 + v13);
            std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(a1, v12);
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            v14 = *(_DWORD *)(a1 - 92);
            v15 = *(_DWORD *)(a1 + 76);
            if (v15 >= v14 && (v14 < v15 || *(_DWORD *)(a1 + 164) >= *(_DWORD *)(a1 - 4)))
            {
              v53 = *(_OWORD *)a1;
              v253 = *(_QWORD *)(a1 + 16);
              *(_OWORD *)v252 = v53;
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              v54 = *(_OWORD *)(a1 + 24);
              v255 = *(_QWORD *)(a1 + 40);
              v254 = v54;
              *(_QWORD *)(a1 + 32) = 0;
              *(_QWORD *)(a1 + 40) = 0;
              *(_QWORD *)(a1 + 24) = 0;
              v55 = *(_OWORD *)(a1 + 48);
              v56 = *(_QWORD *)(a1 + 72);
              v257 = *(_QWORD *)(a1 + 64);
              __p = v55;
              *(_QWORD *)(a1 + 48) = 0;
              *(_QWORD *)(a1 + 56) = 0;
              *(_QWORD *)(a1 + 64) = 0;
              v259 = *(_WORD *)(a1 + 80);
              v258 = v56;
              v260 = *(_OWORD *)(a1 + 88);
              v261 = *(_QWORD *)(a1 + 104);
              *(_QWORD *)(a1 + 88) = 0;
              *(_QWORD *)(a1 + 96) = 0;
              *(_QWORD *)(a1 + 104) = 0;
              v262 = *(_OWORD *)(a1 + 112);
              v263 = *(_QWORD *)(a1 + 128);
              *(_QWORD *)(a1 + 112) = 0;
              *(_QWORD *)(a1 + 120) = 0;
              *(_QWORD *)(a1 + 128) = 0;
              v264 = *(_OWORD *)(a1 + 136);
              v57 = *(_QWORD *)(a1 + 160);
              v265 = *(_QWORD *)(a1 + 152);
              *(_QWORD *)(a1 + 136) = 0;
              *(_QWORD *)(a1 + 144) = 0;
              *(_QWORD *)(a1 + 152) = 0;
              v266 = v57;
              v58 = HIDWORD(v258);
              v59 = HIDWORD(v57);
              a2 = v234;
              v60 = *(_DWORD *)(v234 - 92);
              if (v60 >= SHIDWORD(v258) && (SHIDWORD(v258) < v60 || *(_DWORD *)(v234 - 4) >= SHIDWORD(v57)))
              {
                v81 = a1 + 168;
                do
                {
                  v8 = v81;
                  if (v81 >= v234)
                    break;
                  v82 = *(_DWORD *)(v81 + 76);
                  if (v82 < SHIDWORD(v258))
                    break;
                  v83 = *(_DWORD *)(v81 + 164);
                  v81 += 168;
                }
                while (SHIDWORD(v258) < v82 || v83 >= (int)v59);
              }
              else
              {
                v61 = a1 + 168;
                do
                {
                  v8 = v61;
                  v62 = *(_DWORD *)(v61 + 76);
                  if (v62 < SHIDWORD(v258))
                    break;
                  v63 = *(_DWORD *)(v61 + 164);
                  v61 += 168;
                }
                while (SHIDWORD(v258) < v62 || v63 >= (int)v59);
              }
              v65 = v7;
              v66 = v234;
              if (v8 < v234)
              {
                for (i = v226; v60 < SHIDWORD(v258) || SHIDWORD(v258) >= v60 && *i < (int)v59; i -= 42)
                  v60 = *(i - 64);
                v66 = (unint64_t)(i - 41);
              }
              while (v8 < v66)
              {
                std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(v8, v66);
                v68 = v8 + 168;
                do
                {
                  v8 = v68;
                  v69 = *(_DWORD *)(v68 + 76);
                  if (v69 < v58)
                    break;
                  v70 = *(_DWORD *)(v68 + 164);
                  v68 += 168;
                }
                while (v58 < v69 || v70 >= (int)v59);
                do
                {
                  do
                  {
                    v66 -= 168;
                    v72 = *(_DWORD *)(v66 + 76);
                  }
                  while (v72 < v58);
                }
                while (v58 >= v72 && *(_DWORD *)(v66 + 164) < (int)v59);
              }
              v74 = (void **)(v8 - 168);
              if (v8 - 168 != a1)
                quasar::result_handler::CommandInterpretation::operator=(a1, (__int128 *)(v8 - 168));
              if (*(char *)(v8 - 145) < 0)
                operator delete(*v74);
              v75 = *(_OWORD *)v252;
              *(_QWORD *)(v8 - 152) = v253;
              *(_OWORD *)v74 = v75;
              HIBYTE(v253) = 0;
              LOBYTE(v252[0]) = 0;
              v76 = (void **)(v8 - 144);
              if (*(char *)(v8 - 121) < 0)
                operator delete(*v76);
              v77 = v254;
              *(_QWORD *)(v8 - 128) = v255;
              *(_OWORD *)v76 = v77;
              HIBYTE(v255) = 0;
              LOBYTE(v254) = 0;
              v78 = (void **)(v8 - 120);
              v7 = v65;
              if (*(char *)(v8 - 97) < 0)
                operator delete(*v78);
              v79 = __p;
              *(_QWORD *)(v8 - 104) = v257;
              *(_OWORD *)v78 = v79;
              HIBYTE(v257) = 0;
              LOBYTE(__p) = 0;
              v80 = v258;
              *(_WORD *)(v8 - 88) = v259;
              *(_QWORD *)(v8 - 96) = v80;
              std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v8 - 80));
              *(_OWORD *)(v8 - 80) = v260;
              *(_QWORD *)(v8 - 64) = v261;
              v260 = 0uLL;
              v261 = 0;
              std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v8 - 56));
              *(_OWORD *)(v8 - 56) = v262;
              *(_QWORD *)(v8 - 40) = v263;
              v262 = 0uLL;
              v263 = 0;
              std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v8 - 32));
              *(_OWORD *)(v8 - 32) = v264;
              *(_QWORD *)(v8 - 16) = v265;
              v264 = 0uLL;
              v265 = 0;
              *(_QWORD *)(v8 - 8) = v266;
              v236[0] = &v264;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v236);
              v236[0] = &v262;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v236);
              v236[0] = &v260;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v236);
              if (SHIBYTE(v257) < 0)
                operator delete((void *)__p);
              if (SHIBYTE(v255) < 0)
                operator delete((void *)v254);
              if (SHIBYTE(v253) < 0)
                operator delete(v252[0]);
              goto LABEL_69;
            }
          }
          v16 = a3;
          v17 = 0;
          v18 = *(_OWORD *)a1;
          v253 = *(_QWORD *)(a1 + 16);
          *(_OWORD *)v252 = v18;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v19 = *(_OWORD *)(a1 + 24);
          v255 = *(_QWORD *)(a1 + 40);
          v254 = v19;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 40) = 0;
          *(_QWORD *)(a1 + 24) = 0;
          v20 = *(_OWORD *)(a1 + 48);
          v21 = *(_QWORD *)(a1 + 72);
          v257 = *(_QWORD *)(a1 + 64);
          __p = v20;
          *(_QWORD *)(a1 + 48) = 0;
          *(_QWORD *)(a1 + 56) = 0;
          *(_QWORD *)(a1 + 64) = 0;
          v259 = *(_WORD *)(a1 + 80);
          v258 = v21;
          v260 = *(_OWORD *)(a1 + 88);
          v261 = *(_QWORD *)(a1 + 104);
          *(_QWORD *)(a1 + 88) = 0;
          *(_QWORD *)(a1 + 96) = 0;
          *(_QWORD *)(a1 + 104) = 0;
          v262 = *(_OWORD *)(a1 + 112);
          v263 = *(_QWORD *)(a1 + 128);
          *(_QWORD *)(a1 + 112) = 0;
          *(_QWORD *)(a1 + 120) = 0;
          *(_QWORD *)(a1 + 128) = 0;
          v264 = *(_OWORD *)(a1 + 136);
          v22 = *(_QWORD *)(a1 + 160);
          v265 = *(_QWORD *)(a1 + 152);
          *(_QWORD *)(a1 + 136) = 0;
          *(_QWORD *)(a1 + 144) = 0;
          *(_QWORD *)(a1 + 152) = 0;
          v266 = v22;
          v23 = HIDWORD(v22);
          v24 = HIDWORD(v258);
          while (1)
          {
            v25 = *(_DWORD *)(a1 + v17 + 244);
            if (SHIDWORD(v258) >= v25)
            {
              v26 = v25 < SHIDWORD(v258) || *(_DWORD *)(a1 + v17 + 332) <= (int)v23;
              if (v26)
                break;
            }
            v17 += 168;
          }
          v27 = a1 + v17 + 168;
          v28 = v7;
          v29 = v7;
          if (v17)
          {
            do
            {
              v30 = v29;
              v31 = *(_DWORD *)(v29 + 76);
              if (SHIDWORD(v258) < v31)
                break;
              v32 = *(_DWORD *)(v29 + 164);
              v29 -= 168;
            }
            while (v31 < SHIDWORD(v258) || v32 <= (int)v23);
          }
          else
          {
            v30 = v234;
            while (v27 < v30)
            {
              v34 = v30 - 168;
              v35 = *(_DWORD *)(v30 - 92);
              if (SHIDWORD(v258) >= v35)
              {
                v36 = v35 < SHIDWORD(v258) || *(_DWORD *)(v30 - 4) <= (int)v23;
                v30 -= 168;
                if (v36)
                  continue;
              }
              v30 = v34;
              break;
            }
          }
          v8 = v27;
          if (v27 < v30)
          {
            v37 = v30;
            do
            {
              std::swap[abi:ne180100]<quasar::result_handler::CommandInterpretation>(v8, v37);
              do
              {
                do
                {
                  v8 += 168;
                  v38 = *(_DWORD *)(v8 + 76);
                }
                while (v24 < v38);
              }
              while (v38 >= v24 && *(_DWORD *)(v8 + 164) > (int)v23);
              v40 = v37 - 168;
              do
              {
                v37 = v40;
                v41 = *(_DWORD *)(v40 + 76);
                if (v24 < v41)
                  break;
                v42 = *(_DWORD *)(v40 + 164);
                v40 -= 168;
              }
              while (v41 < v24 || v42 <= (int)v23);
            }
            while (v8 < v37);
          }
          v44 = (void **)(v8 - 168);
          if (v8 - 168 != a1)
            quasar::result_handler::CommandInterpretation::operator=(a1, (__int128 *)(v8 - 168));
          a3 = v16;
          if (*(char *)(v8 - 145) < 0)
            operator delete(*v44);
          v45 = *(_OWORD *)v252;
          *(_QWORD *)(v8 - 152) = v253;
          *(_OWORD *)v44 = v45;
          HIBYTE(v253) = 0;
          LOBYTE(v252[0]) = 0;
          v46 = (void **)(v8 - 144);
          if (*(char *)(v8 - 121) < 0)
            operator delete(*v46);
          v47 = v254;
          *(_QWORD *)(v8 - 128) = v255;
          *(_OWORD *)v46 = v47;
          HIBYTE(v255) = 0;
          LOBYTE(v254) = 0;
          v48 = (void **)(v8 - 120);
          if (*(char *)(v8 - 97) < 0)
            operator delete(*v48);
          v49 = __p;
          *(_QWORD *)(v8 - 104) = v257;
          *(_OWORD *)v48 = v49;
          HIBYTE(v257) = 0;
          LOBYTE(__p) = 0;
          v50 = v258;
          *(_WORD *)(v8 - 88) = v259;
          *(_QWORD *)(v8 - 96) = v50;
          std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v8 - 80));
          *(_OWORD *)(v8 - 80) = v260;
          *(_QWORD *)(v8 - 64) = v261;
          v260 = 0uLL;
          v261 = 0;
          std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v8 - 56));
          *(_OWORD *)(v8 - 56) = v262;
          *(_QWORD *)(v8 - 40) = v263;
          v262 = 0uLL;
          v263 = 0;
          std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v8 - 32));
          *(_OWORD *)(v8 - 32) = v264;
          *(_QWORD *)(v8 - 16) = v265;
          v264 = 0uLL;
          v265 = 0;
          *(_QWORD *)(v8 - 8) = v266;
          v236[0] = &v264;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v236);
          v236[0] = &v262;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v236);
          v236[0] = &v260;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v236);
          if (SHIBYTE(v257) < 0)
            operator delete((void *)__p);
          a2 = v234;
          if (SHIBYTE(v255) < 0)
            operator delete((void *)v254);
          if (SHIBYTE(v253) < 0)
            operator delete(v252[0]);
          v51 = v27 >= v30;
          v7 = v28;
          if (!v51)
            goto LABEL_68;
          v52 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(a1, v8 - 168);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*>(v8, v234))
          {
            if (v52)
              continue;
LABEL_68:
            std::__introsort<std::_ClassicAlgPolicy,quasar::result_handler::findPartialCommands(quasar::corrective_reranking::Parser const&,std::string const&,std::string const&,std::vector<std::vector<quasar::Token>> const&,std::vector<std::vector<quasar::Token>> const&,BOOL,quasar::result_handler::VoiceEditingResultHandlerConfig const&,kaldi::LRUCacheMap<std::string,std::vector<quasar::result_handler::CommandInterpretation>,std::hash<std::string>,std::equal_to<std::string>> &,quasar::PartialHistory &)::$_0 &,quasar::result_handler::CommandInterpretation*,false>(a1, v8 - 168, v16, a4 & 1);
LABEL_69:
            a4 = 0;
            continue;
          }
          a2 = v8 - 168;
          if (v52)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) != 0)
        {
          if (a1 != a2)
          {
            v88 = a1 + 168;
            if (a1 + 168 != a2)
            {
              v89 = 0;
              v90 = a1;
              do
              {
                v91 = v88;
                v92 = *(_DWORD *)(v90 + 244);
                v93 = *(_DWORD *)(v90 + 76);
                if (v93 < v92
                  || (v92 >= v93 ? (v94 = *(_DWORD *)(v90 + 164) < *(_DWORD *)(v90 + 332)) : (v94 = 0), v94))
                {
                  v95 = *(_OWORD *)v91;
                  v253 = *(_QWORD *)(v91 + 16);
                  *(_OWORD *)v252 = v95;
                  *(_QWORD *)(v91 + 8) = 0;
                  *(_QWORD *)(v91 + 16) = 0;
                  *(_QWORD *)v91 = 0;
                  v254 = *(_OWORD *)(v90 + 192);
                  v255 = *(_QWORD *)(v90 + 208);
                  __p = *(_OWORD *)(v90 + 216);
                  v96 = *(_QWORD *)(v90 + 240);
                  v257 = *(_QWORD *)(v90 + 232);
                  v258 = v96;
                  v259 = *(_WORD *)(v90 + 248);
                  v260 = *(_OWORD *)(v90 + 256);
                  v261 = *(_QWORD *)(v90 + 272);
                  v97 = *(_OWORD *)(v90 + 280);
                  v98 = *(_QWORD *)(v90 + 320);
                  v99 = *(_QWORD *)(v90 + 328);
                  v263 = *(_QWORD *)(v90 + 296);
                  v265 = v98;
                  *(_QWORD *)(v90 + 192) = 0;
                  *(_QWORD *)(v90 + 200) = 0;
                  *(_QWORD *)(v90 + 208) = 0;
                  *(_QWORD *)(v90 + 216) = 0;
                  *(_QWORD *)(v90 + 224) = 0;
                  *(_QWORD *)(v90 + 232) = 0;
                  *(_QWORD *)(v90 + 256) = 0;
                  *(_QWORD *)(v90 + 264) = 0;
                  v262 = v97;
                  *(_QWORD *)(v90 + 272) = 0;
                  *(_QWORD *)(v90 + 280) = 0;
                  *(_QWORD *)(v90 + 288) = 0;
                  *(_QWORD *)(v90 + 296) = 0;
                  v264 = *(_OWORD *)(v90 + 304);
                  *(_QWORD *)(v90 + 304) = 0;
                  *(_QWORD *)(v90 + 312) = 0;
                  *(_QWORD *)(v90 + 320) = 0;
                  v266 = v99;
                  quasar::result_handler::CommandInterpretation::operator=(v91, (__int128 *)v90);
                  v100 = a1;
                  if (v90 != a1)
                  {
                    v101 = v89;
                    do
                    {
                      v102 = a1 + v101;
                      v103 = *(_DWORD *)(a1 + v101 - 92);
                      if (v103 >= SHIDWORD(v258) && (SHIDWORD(v258) < v103 || *(_DWORD *)(v102 - 4) >= SHIDWORD(v266)))
                      {
                        v100 = a1 + v101;
                        goto LABEL_156;
                      }
                      quasar::result_handler::CommandInterpretation::operator=(v102, (__int128 *)(v102 - 168));
                      v101 -= 168;
                    }
                    while (v101);
                    v100 = a1;
                  }
LABEL_156:
                  if (*(char *)(v100 + 23) < 0)
                    operator delete(*(void **)v100);
                  v105 = *(_OWORD *)v252;
                  *(_QWORD *)(v100 + 16) = v253;
                  *(_OWORD *)v100 = v105;
                  HIBYTE(v253) = 0;
                  LOBYTE(v252[0]) = 0;
                  v106 = (void **)(v100 + 24);
                  if (*(char *)(v100 + 47) < 0)
                    operator delete(*v106);
                  v107 = v254;
                  *(_QWORD *)(v100 + 40) = v255;
                  *(_OWORD *)v106 = v107;
                  HIBYTE(v255) = 0;
                  LOBYTE(v254) = 0;
                  v108 = (void **)(v100 + 48);
                  if (*(char *)(v100 + 71) < 0)
                    operator delete(*v108);
                  v109 = __p;
                  *(_QWORD *)(v100 + 64) = v257;
                  *(_OWORD *)v108 = v109;
                  HIBYTE(v257) = 0;
                  LOBYTE(__p) = 0;
                  v110 = v259;
                  *(_QWORD *)(v100 + 72) = v258;
                  *(_WORD *)(v100 + 80) = v110;
                  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v100 + 88));
                  *(_OWORD *)(v100 + 88) = v260;
                  *(_QWORD *)(v100 + 104) = v261;
                  v260 = 0uLL;
                  v261 = 0;
                  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v100 + 112));
                  *(_OWORD *)(v100 + 112) = v262;
                  *(_QWORD *)(v100 + 128) = v263;
                  v262 = 0uLL;
                  v263 = 0;
                  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v100 + 136));
                  *(_OWORD *)(v100 + 136) = v264;
                  *(_QWORD *)(v100 + 152) = v265;
                  v264 = 0uLL;
                  v265 = 0;
                  *(_QWORD *)(v100 + 160) = v266;
                  v236[0] = &v264;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v236);
                  v236[0] = &v262;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v236);
                  v236[0] = &v260;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v236);
                  if (SHIBYTE(v257) < 0)
                    operator delete((void *)__p);
                  if (SHIBYTE(v255) < 0)
                    operator delete((void *)v254);
                  if (SHIBYTE(v253) < 0)
                    operator delete(v252[0]);
                }
                v88 = v91 + 168;
                v89 += 168;
                v90 = v91;
              }
              while (v91 + 168 != v234);
            }
          }
        }
        else if (a1 != a2)
        {
          v201 = a1 + 168;
          if (a1 + 168 != a2)
          {
            do
            {
              v202 = v201;
              v203 = *(_DWORD *)(a1 + 244);
              v204 = *(_DWORD *)(a1 + 76);
              if (v204 < v203
                || (v203 >= v204 ? (v205 = *(_DWORD *)(a1 + 164) < *(_DWORD *)(a1 + 332)) : (v205 = 0), v205))
              {
                v206 = *(_OWORD *)v202;
                v253 = *(_QWORD *)(v202 + 16);
                *(_OWORD *)v252 = v206;
                *(_QWORD *)(v202 + 8) = 0;
                *(_QWORD *)(v202 + 16) = 0;
                *(_QWORD *)v202 = 0;
                v254 = *(_OWORD *)(a1 + 192);
                v255 = *(_QWORD *)(a1 + 208);
                __p = *(_OWORD *)(a1 + 216);
                v207 = *(_QWORD *)(a1 + 240);
                v257 = *(_QWORD *)(a1 + 232);
                v258 = v207;
                v259 = *(_WORD *)(a1 + 248);
                v260 = *(_OWORD *)(a1 + 256);
                v261 = *(_QWORD *)(a1 + 272);
                v208 = *(_OWORD *)(a1 + 280);
                v209 = *(_QWORD *)(a1 + 320);
                v210 = *(_QWORD *)(a1 + 328);
                v263 = *(_QWORD *)(a1 + 296);
                v265 = v209;
                *(_QWORD *)(a1 + 192) = 0;
                *(_QWORD *)(a1 + 200) = 0;
                *(_QWORD *)(a1 + 208) = 0;
                *(_QWORD *)(a1 + 216) = 0;
                *(_QWORD *)(a1 + 224) = 0;
                *(_QWORD *)(a1 + 232) = 0;
                *(_QWORD *)(a1 + 256) = 0;
                *(_QWORD *)(a1 + 264) = 0;
                v262 = v208;
                *(_QWORD *)(a1 + 272) = 0;
                *(_QWORD *)(a1 + 280) = 0;
                *(_QWORD *)(a1 + 288) = 0;
                *(_QWORD *)(a1 + 296) = 0;
                v264 = *(_OWORD *)(a1 + 304);
                *(_QWORD *)(a1 + 304) = 0;
                *(_QWORD *)(a1 + 312) = 0;
                *(_QWORD *)(a1 + 320) = 0;
                v211 = v202;
                v266 = v210;
                while (1)
                {
                  v212 = (void **)(v211 - 168);
                  quasar::result_handler::CommandInterpretation::operator=(v211, (__int128 *)(v211 - 168));
                  v213 = *(_DWORD *)(v211 - 260);
                  if (v213 >= SHIDWORD(v258) && (SHIDWORD(v258) < v213 || *(_DWORD *)(v211 - 172) >= SHIDWORD(v266)))
                    break;
                  v211 -= 168;
                }
                if (*(char *)(v211 - 145) < 0)
                  operator delete(*v212);
                v215 = *(_OWORD *)v252;
                *(_QWORD *)(v211 - 152) = v253;
                *(_OWORD *)v212 = v215;
                HIBYTE(v253) = 0;
                LOBYTE(v252[0]) = 0;
                v216 = (void **)(v211 - 144);
                if (*(char *)(v211 - 121) < 0)
                  operator delete(*v216);
                v217 = v254;
                *(_QWORD *)(v211 - 128) = v255;
                *(_OWORD *)v216 = v217;
                HIBYTE(v255) = 0;
                LOBYTE(v254) = 0;
                v218 = (void **)(v211 - 120);
                if (*(char *)(v211 - 97) < 0)
                  operator delete(*v218);
                v219 = __p;
                *(_QWORD *)(v211 - 104) = v257;
                *(_OWORD *)v218 = v219;
                HIBYTE(v257) = 0;
                LOBYTE(__p) = 0;
                v220 = v258;
                *(_WORD *)(v211 - 88) = v259;
                *(_QWORD *)(v211 - 96) = v220;
                std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v211 - 80));
                *(_OWORD *)(v211 - 80) = v260;
                *(_QWORD *)(v211 - 64) = v261;
                v260 = 0uLL;
                v261 = 0;
                std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v211 - 56));
                *(_OWORD *)(v211 - 56) = v262;
                *(_QWORD *)(v211 - 40) = v263;
                v262 = 0uLL;
                v263 = 0;
                std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v211 - 32));
                *(_OWORD *)(v211 - 32) = v264;
                *(_QWORD *)(v211 - 16) = v265;
                v264 = 0uLL;
                v265 = 0;
                *(_QWORD *)(v211 - 8) = v266;
                v236[0] = &v264;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v236);
                v236[0] = &v262;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v236);
                v236[0] = &v260;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v236);
                if (SHIBYTE(v257) < 0)
                  operator delete((void *)__p);
                a2 = v234;
                if (SHIBYTE(v255) < 0)
                  operator delete((void *)v254);
                if (SHIBYTE(v253) < 0)
                  operator delete(v252[0]);
              }
              v201 = v202 + 168;
              a1 = v202;
            }
            while (v202 + 168 != a2);
          }
        }
        return;
    }
  }
}

  v8 = (uint64_t)(a2 - 7);
  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)a2 - v9) >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v25 = *(a2 - 7);
        v24 = a2 - 7;
        v48 = v25;
        v49 = *((_DWORD *)v24 + 2);
        v50 = *(uint64_t *)((char *)v24 + 12);
        v52 = 0;
        v53 = 0;
        v51 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v51, (const void *)v24[3], v24[4], (v24[4] - v24[3]) >> 2);
        v54 = *((_DWORD *)v24 + 12);
        v41 = *(_QWORD *)v9;
        v42 = *(_DWORD *)(v9 + 8);
        v43 = *(_QWORD *)(v9 + 12);
        v45 = 0;
        v46 = 0;
        v44 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v44, *(const void **)(v9 + 24), *(_QWORD *)(v9 + 32), (uint64_t)(*(_QWORD *)(v9 + 32) - *(_QWORD *)(v9 + 24)) >> 2);
        v47 = *(_DWORD *)(v9 + 48);
        v26 = v48;
        v27 = v41;
        if (v44)
        {
          v45 = v44;
          operator delete(v44);
        }
        if (v51)
        {
          v52 = v51;
          operator delete(v51);
        }
        if (v26 < v27)
          std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)a1, v24);
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(v9, v9 + 56, v8);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(v9, v9 + 56, v9 + 112, v8);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(v9, v9 + 56, v9 + 112, v9 + 168, v8);
        return;
      default:
        if (v12 <= 1343)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>((_QWORD *)v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (uint64_t *)(v9 + 56 * (v13 >> 1));
          if ((unint64_t)v12 < 0x1C01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>((uint64_t)v15, a1, v8);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1, (uint64_t)v15, v8);
            v16 = v8;
            v17 = 56 * v14;
            v18 = 56 * v14 + a1 - 56;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1 + 56, v18, (uint64_t)(a2 - 14));
            v19 = a1 + 56 + v17;
            v8 = v16;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1 + 112, v19, (uint64_t)(a2 - 21));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(v18, (uint64_t)v15, v19);
            std::swap[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>((uint64_t *)a1, v15);
          }
          if ((a5 & 1) == 0)
          {
            v34 = *(_QWORD *)(a1 - 56);
            v35 = *(_DWORD *)(a1 - 48);
            v36 = *(_QWORD *)(a1 - 44);
            v38 = 0;
            v39 = 0;
            v37 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v37, *(const void **)(a1 - 32), *(_QWORD *)(a1 - 24), (uint64_t)(*(_QWORD *)(a1 - 24) - *(_QWORD *)(a1 - 32)) >> 2);
            v40 = *(_DWORD *)(a1 - 8);
            v29 = *(_QWORD *)a1;
            v31 = 0;
            v32 = 0;
            __p = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
            v33 = *(_DWORD *)(a1 + 48);
            v20 = v34;
            if (__p)
            {
              v31 = __p;
              operator delete(__p);
            }
            if (v37)
            {
              v38 = v37;
              operator delete(v37);
            }
            if (v20 >= (int)v29)
            {
              v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &>(a1, a2);
              goto LABEL_20;
            }
          }
          v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &>((uint64_t *)a1, a2);
          if ((v22 & 1) == 0)
            goto LABEL_18;
          v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(a1, v21);
          v9 = v21 + 56;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(v21 + 56, (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v23)
              continue;
LABEL_18:
            std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*,false>(a1, v21, a3, -v11, a5 & 1);
            v9 = v21 + 56;
LABEL_20:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (uint64_t *)v21;
          if (v23)
            return;
          goto LABEL_1;
        }
        if ((uint64_t *)v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>> &,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>*>(v9, (uint64_t)a2, (uint64_t)a2, a3);
        return;
    }
  }
}

  v10 = (__int128 *)((char *)a2 - 24);
  v11 = (__int128 *)a1;
LABEL_2:
  v12 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v11;
    v13 = v12;
    v14 = (char *)a2 - (char *)v11;
    v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v11) >> 3);
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((__int128 *)((char *)a2 - 24), v11))
        {
          v30 = *((_QWORD *)v11 + 2);
          v28 = *v11;
          v26 = *v10;
          *((_QWORD *)v11 + 2) = *((_QWORD *)a2 - 1);
          *v11 = v26;
          *v10 = v28;
          *((_QWORD *)a2 - 1) = v30;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(v11, (__int128 *)((char *)v11 + 24), (__int128 *)((char *)a2 - 24), a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((uint64_t)v11, (uint64_t)v11 + 24, (uint64_t)(v11 + 3), (uint64_t)a2 - 24, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((__n128 *)v11, (uint64_t)v11 + 24, (uint64_t)(v11 + 3), (uint64_t)v11 + 72, (uint64_t)a2 - 24, a3);
        return;
      default:
        if (v14 <= 575)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((uint64_t)v11, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((uint64_t)v11, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
          return;
        }
        if (v13 != 1)
        {
          v16 = v15 >> 1;
          v17 = (__int128 *)((char *)v11 + 24 * (v15 >> 1));
          if ((unint64_t)v14 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((__int128 *)((char *)v11 + 24 * v16), v11, (__int128 *)((char *)a2 - 24), a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(v11, (__int128 *)((char *)v11 + 24 * v16), (__int128 *)((char *)a2 - 24), a3);
            v18 = 3 * v16;
            v19 = (__int128 *)((char *)v11 + 24 * v16 - 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((__int128 *)((char *)v11 + 24), v19, a2 - 3, a3);
            v20 = v11 + 3;
            v21 = (__int128 *)((char *)v11 + 8 * v18 + 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(v20, v21, (__int128 *)((char *)a2 - 72), a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(v19, v17, v21, a3);
            v29 = *(_QWORD *)(a1 + 16);
            v27 = *(_OWORD *)a1;
            v22 = *v17;
            *(_QWORD *)(a1 + 16) = *((_QWORD *)v17 + 2);
            *(_OWORD *)a1 = v22;
            *((_QWORD *)v17 + 2) = v29;
            *v17 = v27;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)((__int128 *)(a1 - 24), (__int128 *)a1) & 1) == 0)
          {
            v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRegExpMatch *,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&)>((__int128 *)a1, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v23 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRegExpMatch *,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&)>((__int128 *)a1, (unint64_t)a2, (uint64_t (**)(char *, __int128 *))a3);
          if ((v24 & 1) == 0)
            goto LABEL_14;
          v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(a1, v23, a3);
          v11 = (__int128 *)(v23 + 24);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(v23 + 24, (uint64_t)a2, a3))
          {
            v12 = v13 + 1;
            if (v25)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*,false>(a1, v23, a3, -v13, a5 & 1);
            v11 = (__int128 *)(v23 + 24);
LABEL_16:
            a5 = 0;
            a4 = -v13;
            goto LABEL_2;
          }
          a4 = -v13;
          a2 = (__int128 *)v23;
          if (v25)
            return;
          goto LABEL_1;
        }
        if (v11 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*,TRegExpMatch*>((__n128 *)v11, (__n128 *)a2, (__n128 *)a2, (unsigned int (**)(uint64_t, __int8 *))a3, a6);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = (uint64_t)((uint64_t)a2 - v9) >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, (uint64_t)(a2 - 4), v9))
        {
          v22 = *(_DWORD *)v9;
          *(_DWORD *)v9 = *((_DWORD *)a2 - 8);
          *((_DWORD *)a2 - 8) = v22;
          v23 = *(_DWORD *)(v9 + 4);
          *(_DWORD *)(v9 + 4) = *((_DWORD *)a2 - 7);
          *((_DWORD *)a2 - 7) = v23;
          v26 = *(_OWORD *)(v9 + 8);
          v28 = *(_QWORD *)(v9 + 24);
          v24 = *(_OWORD *)(a2 - 3);
          *(_QWORD *)(v9 + 24) = *(a2 - 1);
          *(_OWORD *)(v9 + 8) = v24;
          *(_OWORD *)(a2 - 3) = v26;
          *(a2 - 1) = v28;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(v9, v9 + 32, (uint64_t)(a2 - 4), a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(v9, v9 + 32, v9 + 64, (uint64_t)(a2 - 4), a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(v9, v9 + 32, v9 + 64, v9 + 96, (uint64_t)(a2 - 4), a3);
        return;
      default:
        if (v12 <= 767)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(v9, a2, a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(v9, a2, a3);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = v9 + 32 * (v13 >> 1);
          if ((unint64_t)v12 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(v9 + 32 * (v13 >> 1), v9, (uint64_t)(a2 - 4), a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(v9, v9 + 32 * (v13 >> 1), (uint64_t)(a2 - 4), a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(v9 + 32, v15 - 32, (uint64_t)(a2 - 8), a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(v9 + 64, v9 + 32 + 32 * v14, (uint64_t)(a2 - 12), a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(v15 - 32, v15, v9 + 32 + 32 * v14, a3);
            v16 = *(_DWORD *)v9;
            *(_DWORD *)v9 = *(_DWORD *)v15;
            *(_DWORD *)v15 = v16;
            v17 = *(_DWORD *)(v9 + 4);
            *(_DWORD *)(v9 + 4) = *(_DWORD *)(v15 + 4);
            *(_DWORD *)(v15 + 4) = v17;
            v27 = *(_QWORD *)(v9 + 24);
            v25 = *(_OWORD *)(v9 + 8);
            v18 = *(_OWORD *)(v15 + 8);
            *(_QWORD *)(v9 + 24) = *(_QWORD *)(v15 + 24);
            *(_OWORD *)(v9 + 8) = v18;
            *(_QWORD *)(v15 + 24) = v27;
            *(_OWORD *)(v15 + 8) = v25;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, v9 - 32, v9))
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::pair<quasar::PronType,float>,std::string> *,std::__less<void,void> &>(v9, (unint64_t)a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::pair<quasar::PronType,float>,std::string> *,std::__less<void,void> &>(v9, (unint64_t)a2, a3);
          if ((v20 & 1) == 0)
            goto LABEL_14;
          v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(v9, v19, a3);
          v9 = v19 + 32;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(v19 + 32, (uint64_t)a2, a3))
          {
            v10 = v11 + 1;
            if (v21)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *,false>(a1, v19, a3, -v11, a5 & 1);
            v9 = v19 + 32;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (uint64_t *)v19;
          if (v21)
            return;
          goto LABEL_1;
        }
        if ((uint64_t *)v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *,std::pair<std::pair<quasar::PronType,float>,std::string> *>(v9, (uint64_t)a2, (uint64_t)a2, a3);
        return;
    }
  }
}

  v7 = a2 - 3;
  v93 = a2 - 6;
  v94 = a2;
  v8 = a2 - 9;
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = v94;
    v11 = (char *)v94 - (char *)v9;
    v12 = 0xAAAAAAAAAAAAAAABLL * (v94 - v9);
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        ResultChoiceCost = quasar::ptt::GetResultChoiceCost(v7);
        if (ResultChoiceCost < quasar::ptt::GetResultChoiceCost(a1))
        {
          v46 = *a1;
          *a1 = *(v94 - 3);
          *(v94 - 3) = v46;
          v47 = a1[1];
          a1[1] = *(v94 - 2);
          *(v94 - 2) = v47;
          v48 = a1[2];
          a1[2] = *(v94 - 1);
          *(v94 - 1) = v48;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(a1, a1 + 3, v7);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(a1, a1 + 3, a1 + 6, v7);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*,0>(a1, a1 + 3, a1 + 6, a1 + 9, v7);
        return;
      default:
        if (v11 <= 575)
        {
          if ((a4 & 1) != 0)
          {
            if (a1 != v94)
            {
              v49 = a1 + 3;
              if (a1 + 3 != v94)
              {
                v50 = 0;
                v51 = a1;
                do
                {
                  v52 = v49;
                  v53 = quasar::ptt::GetResultChoiceCost(v49);
                  if (v53 < quasar::ptt::GetResultChoiceCost(v51))
                  {
                    v98 = *(_OWORD *)v52;
                    v99 = v51[5];
                    *v52 = 0;
                    v52[1] = 0;
                    v52[2] = 0;
                    v54 = v50;
                    while (1)
                    {
                      v55 = (char *)a1 + v54;
                      std::vector<quasar::Token>::__vdeallocate((void **)((char *)a1 + v54 + 24));
                      *(_OWORD *)(v55 + 24) = *(_OWORD *)v55;
                      *((_QWORD *)v55 + 5) = *((_QWORD *)v55 + 2);
                      *((_QWORD *)v55 + 1) = 0;
                      *((_QWORD *)v55 + 2) = 0;
                      *(_QWORD *)v55 = 0;
                      if (!v54)
                        break;
                      v56 = quasar::ptt::GetResultChoiceCost((uint64_t *)&v98);
                      v54 -= 24;
                      if (v56 >= quasar::ptt::GetResultChoiceCost((uint64_t *)v55 - 3))
                      {
                        v57 = (uint64_t)a1 + v54 + 24;
                        goto LABEL_66;
                      }
                    }
                    v57 = (uint64_t)a1;
LABEL_66:
                    std::vector<quasar::Token>::__vdeallocate((void **)v57);
                    *(_OWORD *)v57 = v98;
                    *(_QWORD *)(v57 + 16) = v99;
                    v98 = 0uLL;
                    v99 = 0;
                    *(_QWORD *)&v95 = &v98;
                    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
                  }
                  v49 = v52 + 3;
                  v50 += 24;
                  v51 = v52;
                }
                while (v52 + 3 != v94);
              }
            }
          }
          else if (a1 != v94)
          {
            v86 = a1 + 3;
            if (a1 + 3 != v94)
            {
              v87 = a1 + 5;
              do
              {
                v88 = v86;
                v89 = quasar::ptt::GetResultChoiceCost(v86);
                if (v89 < quasar::ptt::GetResultChoiceCost(a1))
                {
                  v98 = *(_OWORD *)v88;
                  v99 = a1[5];
                  *v88 = 0;
                  v88[1] = 0;
                  v88[2] = 0;
                  v90 = (void **)v87;
                  do
                  {
                    std::vector<quasar::Token>::__vdeallocate(v90 - 2);
                    *((_OWORD *)v90 - 1) = *(_OWORD *)(v90 - 5);
                    *v90 = *(v90 - 3);
                    *(v90 - 4) = 0;
                    *(v90 - 3) = 0;
                    *(v90 - 5) = 0;
                    v91 = quasar::ptt::GetResultChoiceCost((uint64_t *)&v98);
                    v92 = quasar::ptt::GetResultChoiceCost((uint64_t *)v90 - 8);
                    v90 -= 3;
                  }
                  while (v91 < v92);
                  std::vector<quasar::Token>::__vdeallocate(v90 - 2);
                  *((_OWORD *)v90 - 1) = v98;
                  *v90 = (void *)v99;
                  v98 = 0uLL;
                  v99 = 0;
                  *(_QWORD *)&v95 = &v98;
                  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
                }
                v86 = v88 + 3;
                v87 += 3;
                a1 = v88;
              }
              while (v88 + 3 != v94);
            }
          }
          return;
        }
        if (!a3)
        {
          if (a1 != v94)
          {
            v58 = (unint64_t)(v12 - 2) >> 1;
            v59 = v58;
            do
            {
              v60 = v59;
              if (v58 >= v59)
              {
                v61 = (2 * v59) | 1;
                v62 = &a1[3 * v61];
                if (2 * v59 + 2 < v12)
                {
                  v63 = quasar::ptt::GetResultChoiceCost(&a1[3 * v61]);
                  if (v63 < quasar::ptt::GetResultChoiceCost(v62 + 3))
                  {
                    v62 += 3;
                    v61 = 2 * v60 + 2;
                  }
                }
                v64 = &a1[3 * v60];
                v65 = quasar::ptt::GetResultChoiceCost(v62);
                if (v65 >= quasar::ptt::GetResultChoiceCost(v64))
                {
                  v98 = *(_OWORD *)v64;
                  v99 = a1[3 * v60 + 2];
                  *v64 = 0;
                  v64[1] = 0;
                  v64[2] = 0;
                  do
                  {
                    v66 = v62;
                    std::vector<quasar::Token>::__vdeallocate((void **)v64);
                    *(_OWORD *)v64 = *(_OWORD *)v62;
                    v64[2] = v62[2];
                    *v62 = 0;
                    v62[1] = 0;
                    v62[2] = 0;
                    if (v58 < v61)
                      break;
                    v67 = (2 * v61) | 1;
                    v62 = &a1[3 * v67];
                    v61 = 2 * v61 + 2;
                    if (v61 >= v12)
                    {
                      v61 = v67;
                    }
                    else
                    {
                      v68 = quasar::ptt::GetResultChoiceCost(&a1[3 * v67]);
                      if (v68 >= quasar::ptt::GetResultChoiceCost(v62 + 3))
                        v61 = v67;
                      else
                        v62 += 3;
                    }
                    v69 = quasar::ptt::GetResultChoiceCost(v62);
                    v64 = v66;
                  }
                  while (v69 >= quasar::ptt::GetResultChoiceCost((uint64_t *)&v98));
                  std::vector<quasar::Token>::__vdeallocate((void **)v66);
                  *(_OWORD *)v66 = v98;
                  v66[2] = v99;
                  v98 = 0uLL;
                  v99 = 0;
                  *(_QWORD *)&v95 = &v98;
                  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
                }
              }
              v59 = v60 - 1;
            }
            while (v60);
            v70 = v11 / 0x18uLL;
            v71 = v94;
            do
            {
              v72 = 0;
              v73 = v71;
              v95 = *(_OWORD *)a1;
              v96 = a1[2];
              *a1 = 0;
              a1[1] = 0;
              a1[2] = 0;
              v74 = (uint64_t)a1;
              do
              {
                v75 = v74 + 24 * v72 + 24;
                v76 = (2 * v72) | 1;
                v77 = 2 * v72 + 2;
                if (v77 < v70)
                {
                  v78 = quasar::ptt::GetResultChoiceCost((uint64_t *)(v74 + 24 * v72 + 24));
                  if (v78 < quasar::ptt::GetResultChoiceCost((uint64_t *)(v75 + 24)))
                  {
                    v75 += 24;
                    v76 = v77;
                  }
                }
                std::vector<quasar::Token>::__vdeallocate((void **)v74);
                *(_OWORD *)v74 = *(_OWORD *)v75;
                *(_QWORD *)(v74 + 16) = *(_QWORD *)(v75 + 16);
                *(_QWORD *)v75 = 0;
                *(_QWORD *)(v75 + 8) = 0;
                *(_QWORD *)(v75 + 16) = 0;
                v74 = v75;
                v72 = v76;
              }
              while (v76 <= (uint64_t)((unint64_t)(v70 - 2) >> 1));
              v71 = v73 - 3;
              std::vector<quasar::Token>::__vdeallocate((void **)v75);
              if ((uint64_t *)v75 == v73 - 3)
              {
                *(_OWORD *)v75 = v95;
                *(_QWORD *)(v75 + 16) = v96;
                v95 = 0uLL;
                v96 = 0;
              }
              else
              {
                *(_OWORD *)v75 = *(_OWORD *)(v73 - 3);
                *(_QWORD *)(v75 + 16) = *(v73 - 1);
                *v71 = 0;
                *(v73 - 2) = 0;
                *(v73 - 1) = 0;
                std::vector<quasar::Token>::__vdeallocate((void **)v73 - 3);
                *(_OWORD *)(v73 - 3) = v95;
                *(v73 - 1) = v96;
                v95 = 0uLL;
                v96 = 0;
                v79 = v75 - (_QWORD)a1 + 24;
                if (v79 >= 25)
                {
                  v80 = (v79 / 0x18uLL - 2) >> 1;
                  v81 = &a1[3 * v80];
                  v82 = quasar::ptt::GetResultChoiceCost(v81);
                  if (v82 < quasar::ptt::GetResultChoiceCost((uint64_t *)v75))
                  {
                    v98 = *(_OWORD *)v75;
                    v99 = *(_QWORD *)(v75 + 16);
                    *(_QWORD *)v75 = 0;
                    *(_QWORD *)(v75 + 8) = 0;
                    *(_QWORD *)(v75 + 16) = 0;
                    do
                    {
                      v83 = v81;
                      std::vector<quasar::Token>::__vdeallocate((void **)v75);
                      *(_OWORD *)v75 = *(_OWORD *)v81;
                      *(_QWORD *)(v75 + 16) = v81[2];
                      *v81 = 0;
                      v81[1] = 0;
                      v81[2] = 0;
                      if (!v80)
                        break;
                      v80 = (v80 - 1) >> 1;
                      v81 = &a1[3 * v80];
                      v84 = quasar::ptt::GetResultChoiceCost(v81);
                      v75 = (uint64_t)v83;
                    }
                    while (v84 < quasar::ptt::GetResultChoiceCost((uint64_t *)&v98));
                    std::vector<quasar::Token>::__vdeallocate((void **)v83);
                    *(_OWORD *)v83 = v98;
                    v83[2] = v99;
                    v98 = 0uLL;
                    v99 = 0;
                    v97 = (void **)&v98;
                    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v97);
                  }
                }
              }
              *(_QWORD *)&v98 = &v95;
              std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
            }
            while (v70-- > 2);
          }
          return;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = &a1[3 * ((unint64_t)v12 >> 1)];
        if ((unint64_t)v11 < 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(v14, a1, v7);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(a1, v14, v7);
          v15 = 3 * v13;
          v16 = &a1[v15];
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(a1 + 3, v16 - 3, v93);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(a1 + 6, &a1[v15 + 3], v8);
          v10 = v94;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(v16 - 3, v14, &a1[v15 + 3]);
          v17 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(_OWORD *)v14 = v17;
          v18 = a1[2];
          a1[2] = v16[2];
          v16[2] = v18;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v19 = quasar::ptt::GetResultChoiceCost(a1 - 3);
          if (v19 >= quasar::ptt::GetResultChoiceCost(a1))
          {
            v98 = *(_OWORD *)a1;
            v99 = a1[2];
            *a1 = 0;
            a1[1] = 0;
            a1[2] = 0;
            v33 = quasar::ptt::GetResultChoiceCost((uint64_t *)&v98);
            if (v33 >= quasar::ptt::GetResultChoiceCost(v7))
            {
              v35 = a1 + 3;
              do
              {
                v9 = v35;
                if (v35 >= v10)
                  break;
                v36 = quasar::ptt::GetResultChoiceCost((uint64_t *)&v98);
                v37 = quasar::ptt::GetResultChoiceCost(v9);
                v35 = v9 + 3;
              }
              while (v36 >= v37);
            }
            else
            {
              v9 = a1;
              do
              {
                v34 = quasar::ptt::GetResultChoiceCost((uint64_t *)&v98);
                v9 += 3;
              }
              while (v34 >= quasar::ptt::GetResultChoiceCost(v9));
            }
            v38 = v10;
            if (v9 < v10)
            {
              v38 = v10;
              do
              {
                v39 = quasar::ptt::GetResultChoiceCost((uint64_t *)&v98);
                v38 -= 3;
              }
              while (v39 < quasar::ptt::GetResultChoiceCost(v38));
            }
            while (v9 < v38)
            {
              v40 = *v9;
              *v9 = *v38;
              *v38 = v40;
              v41 = v9[1];
              v9[1] = v38[1];
              v38[1] = v41;
              v42 = v9[2];
              v9[2] = v38[2];
              v38[2] = v42;
              do
              {
                v43 = quasar::ptt::GetResultChoiceCost((uint64_t *)&v98);
                v9 += 3;
              }
              while (v43 >= quasar::ptt::GetResultChoiceCost(v9));
              do
              {
                v44 = quasar::ptt::GetResultChoiceCost((uint64_t *)&v98);
                v38 -= 3;
              }
              while (v44 < quasar::ptt::GetResultChoiceCost(v38));
            }
            if (v9 - 3 != a1)
            {
              std::vector<quasar::Token>::__vdeallocate((void **)a1);
              *(_OWORD *)a1 = *(_OWORD *)(v9 - 3);
              a1[2] = *(v9 - 1);
              *(v9 - 3) = 0;
              *(v9 - 2) = 0;
              *(v9 - 1) = 0;
            }
            std::vector<quasar::Token>::__vdeallocate((void **)v9 - 3);
            *(_OWORD *)(v9 - 3) = v98;
            *(v9 - 1) = v99;
            v98 = 0uLL;
            v99 = 0;
            *(_QWORD *)&v95 = &v98;
            std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
            a4 = 0;
            continue;
          }
        }
        v20 = 0;
        v98 = *(_OWORD *)a1;
        v99 = a1[2];
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
        do
        {
          v21 = quasar::ptt::GetResultChoiceCost(&a1[v20 + 3]);
          v20 += 3;
        }
        while (v21 < quasar::ptt::GetResultChoiceCost((uint64_t *)&v98));
        v22 = &a1[v20];
        v23 = v10;
        if (v20 == 3)
        {
          v23 = v10;
          do
          {
            if (v22 >= v23)
              break;
            v23 -= 3;
            v25 = quasar::ptt::GetResultChoiceCost(v23);
          }
          while (v25 >= quasar::ptt::GetResultChoiceCost((uint64_t *)&v98));
        }
        else
        {
          do
          {
            v23 -= 3;
            v24 = quasar::ptt::GetResultChoiceCost(v23);
          }
          while (v24 >= quasar::ptt::GetResultChoiceCost((uint64_t *)&v98));
        }
        v9 = &a1[v20];
        if (v22 < v23)
        {
          v26 = v23;
          do
          {
            v27 = *v9;
            *v9 = *v26;
            *v26 = v27;
            v28 = v9[1];
            v9[1] = v26[1];
            v26[1] = v28;
            v29 = v9[2];
            v9[2] = v26[2];
            v26[2] = v29;
            do
            {
              v9 += 3;
              v30 = quasar::ptt::GetResultChoiceCost(v9);
            }
            while (v30 < quasar::ptt::GetResultChoiceCost((uint64_t *)&v98));
            do
            {
              v26 -= 3;
              v31 = quasar::ptt::GetResultChoiceCost(v26);
            }
            while (v31 >= quasar::ptt::GetResultChoiceCost((uint64_t *)&v98));
          }
          while (v9 < v26);
        }
        if (v9 - 3 != a1)
        {
          std::vector<quasar::Token>::__vdeallocate((void **)a1);
          *(_OWORD *)a1 = *(_OWORD *)(v9 - 3);
          a1[2] = *(v9 - 1);
          *(v9 - 3) = 0;
          *(v9 - 2) = 0;
          *(v9 - 1) = 0;
        }
        std::vector<quasar::Token>::__vdeallocate((void **)v9 - 3);
        *(_OWORD *)(v9 - 3) = v98;
        *(v9 - 1) = v99;
        v98 = 0uLL;
        v99 = 0;
        *(_QWORD *)&v95 = &v98;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
        if (v22 < v23)
        {
LABEL_29:
          std::__introsort<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*,false>(a1, v9 - 3, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(a1, v9 - 3);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(v9, v94))
        {
          if ((v32 & 1) != 0)
            continue;
          goto LABEL_29;
        }
        a2 = v9 - 3;
        if ((v32 & 1) == 0)
          goto LABEL_1;
        return;
    }
  }
}

  v118 = (float *)(a2 - 4);
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 5;
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*((float *)a2 - 2) < *(float *)(a1 + 24))
        {
          v135 = *(void **)(a1 + 16);
          v126 = *(_OWORD *)a1;
          v47 = *((_OWORD *)a2 - 2);
          *(_QWORD *)(a1 + 16) = *(a2 - 2);
          *(_OWORD *)a1 = v47;
          *(a2 - 2) = v135;
          *((_OWORD *)a2 - 2) = v126;
          LODWORD(v47) = *(_DWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 - 2);
          *((_DWORD *)a2 - 2) = v47;
        }
        return;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>((__int128 *)a1, (float *)(a1 + 32), v118);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>(a1, (__int128 *)(a1 + 32), (float *)(a1 + 64), v118);
        return;
      case 5:
        v48 = (__int128 *)(a1 + 32);
        v49 = (__int128 *)(a1 + 64);
        v50 = (__int128 *)(a1 + 96);
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>(a1, (__int128 *)(a1 + 32), (float *)(a1 + 64), (float *)(a1 + 96));
        if (*((float *)a2 - 2) < *(float *)(a1 + 120))
        {
          v51 = *v50;
          v52 = *(void **)(a1 + 112);
          v53 = (uint64_t)*(a2 - 2);
          *v50 = *((_OWORD *)a2 - 2);
          *(_QWORD *)(a1 + 112) = v53;
          *(a2 - 2) = v52;
          *((_OWORD *)a2 - 2) = v51;
          LODWORD(v51) = *(_DWORD *)(a1 + 120);
          *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 - 2);
          *((_DWORD *)a2 - 2) = v51;
          v54 = *(float *)(a1 + 120);
          v55 = *(float *)(a1 + 88);
          if (v54 < v55)
          {
            v56 = *(_QWORD *)(a1 + 80);
            v57 = *v49;
            *v49 = *v50;
            *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 112);
            *v50 = v57;
            *(_QWORD *)(a1 + 112) = v56;
            *(float *)(a1 + 88) = v54;
            v58 = *(float *)(a1 + 56);
            *(float *)(a1 + 120) = v55;
            if (v54 < v58)
            {
              v59 = *(_QWORD *)(a1 + 48);
              v60 = *v48;
              *v48 = *v49;
              *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 80);
              *v49 = v60;
              *(_QWORD *)(a1 + 80) = v59;
              *(float *)(a1 + 56) = v54;
              v61 = *(float *)(a1 + 24);
              *(float *)(a1 + 88) = v58;
              if (v54 < v61)
              {
                v136 = *(_QWORD *)(a1 + 16);
                v127 = *(_OWORD *)a1;
                *(_OWORD *)a1 = *v48;
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 48);
                *v48 = v127;
                *(_QWORD *)(a1 + 48) = v136;
                *(float *)(a1 + 24) = v54;
                *(float *)(a1 + 56) = v61;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 767)
        {
          v62 = (void **)(a1 + 32);
          v64 = (void **)a1 == a2 || v62 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v64)
            {
              v65 = 0;
              v66 = a1;
              do
              {
                v67 = v62;
                v68 = *(float *)(v66 + 56);
                if (v68 < *(float *)(v66 + 24))
                {
                  v69 = *v62;
                  *(_QWORD *)v128 = *(_QWORD *)(v66 + 40);
                  *(_QWORD *)&v128[7] = *(_QWORD *)(v66 + 47);
                  v70 = *(_BYTE *)(v66 + 55);
                  v62[1] = 0;
                  v62[2] = 0;
                  *v62 = 0;
                  v71 = v65;
                  while (1)
                  {
                    v72 = a1 + v71;
                    v73 = (void **)(a1 + v71 + 32);
                    if (*(char *)(a1 + v71 + 55) < 0)
                      operator delete(*v73);
                    *(_OWORD *)v73 = *(_OWORD *)v72;
                    *(_QWORD *)(a1 + v71 + 48) = *(_QWORD *)(v72 + 16);
                    *(_BYTE *)(v72 + 23) = 0;
                    *(_BYTE *)v72 = 0;
                    *(_DWORD *)(v72 + 56) = *(_DWORD *)(v72 + 24);
                    if (!v71)
                      break;
                    v74 = *(float *)(a1 + v71 - 8);
                    v71 -= 32;
                    if (v68 >= v74)
                    {
                      v75 = a1 + v71 + 32;
                      goto LABEL_88;
                    }
                  }
                  v75 = a1;
LABEL_88:
                  if (*(char *)(v75 + 23) < 0)
                    operator delete(*(void **)v75);
                  *(_QWORD *)v75 = v69;
                  *(_QWORD *)(v75 + 8) = *(_QWORD *)v128;
                  *(_QWORD *)(v75 + 15) = *(_QWORD *)&v128[7];
                  *(_BYTE *)(v75 + 23) = v70;
                  *(float *)(v75 + 24) = v68;
                }
                v62 = v67 + 4;
                v65 += 32;
                v66 = (uint64_t)v67;
              }
              while (v67 + 4 != a2);
            }
          }
          else if (!v64)
          {
            v109 = (_DWORD *)(a1 + 56);
            do
            {
              v110 = v62;
              v111 = *(float *)(a1 + 56);
              if (v111 < *(float *)(a1 + 24))
              {
                v112 = *v62;
                *(_QWORD *)v131 = *(_QWORD *)(a1 + 40);
                *(_QWORD *)&v131[7] = *(_QWORD *)(a1 + 47);
                v113 = *(_BYTE *)(a1 + 55);
                v62[1] = 0;
                v62[2] = 0;
                *v62 = 0;
                v114 = v109;
                do
                {
                  v115 = (void **)(v114 - 6);
                  if (*((char *)v114 - 1) < 0)
                    operator delete(*v115);
                  *(_OWORD *)v115 = *(_OWORD *)(v114 - 14);
                  *((_QWORD *)v114 - 1) = *((_QWORD *)v114 - 5);
                  *((_BYTE *)v114 - 33) = 0;
                  *((_BYTE *)v114 - 56) = 0;
                  v116 = (float *)(v114 - 8);
                  *v114 = *(v114 - 8);
                  v117 = *((float *)v114 - 16);
                  v114 -= 8;
                }
                while (v111 < v117);
                if (*((char *)v116 - 1) < 0)
                  operator delete(*((void **)v116 - 3));
                *((_QWORD *)v116 - 3) = v112;
                *(_QWORD *)((char *)v116 - 9) = *(_QWORD *)&v131[7];
                *((_QWORD *)v116 - 2) = *(_QWORD *)v131;
                *((_BYTE *)v116 - 1) = v113;
                *v116 = v111;
              }
              v62 = v110 + 4;
              v109 += 8;
              a1 = (uint64_t)v110;
            }
            while (v110 + 4 != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((void **)a1 != a2)
          {
            v76 = (unint64_t)(v10 - 2) >> 1;
            v77 = v76;
            do
            {
              v78 = v77;
              if (v76 >= v77)
              {
                v79 = (2 * v77) | 1;
                v80 = a1 + 32 * v79;
                if (2 * v78 + 2 < v10 && *(float *)(v80 + 24) < *(float *)(v80 + 56))
                {
                  v80 += 32;
                  v79 = 2 * v78 + 2;
                }
                v81 = *(float *)(a1 + 32 * v78 + 24);
                if (*(float *)(v80 + 24) >= v81)
                {
                  v82 = a1 + 32 * v78;
                  v119 = *(void **)v82;
                  *(_QWORD *)&v129[7] = *(_QWORD *)(v82 + 15);
                  *(_QWORD *)v129 = *(_QWORD *)(v82 + 8);
                  v83 = *(_BYTE *)(v82 + 23);
                  *(_QWORD *)v82 = 0;
                  *(_QWORD *)(v82 + 8) = 0;
                  *(_QWORD *)(v82 + 16) = 0;
                  do
                  {
                    v84 = v82;
                    v82 = v80;
                    if (*(char *)(v84 + 23) < 0)
                      operator delete(*(void **)v84);
                    v85 = *(_OWORD *)v82;
                    *(_QWORD *)(v84 + 16) = *(_QWORD *)(v82 + 16);
                    *(_OWORD *)v84 = v85;
                    *(_BYTE *)(v82 + 23) = 0;
                    *(_BYTE *)v82 = 0;
                    *(_DWORD *)(v84 + 24) = *(_DWORD *)(v82 + 24);
                    if (v76 < v79)
                      break;
                    v86 = 2 * v79;
                    v79 = (2 * v79) | 1;
                    v80 = a1 + 32 * v79;
                    v87 = v86 + 2;
                    if (v87 < v10 && *(float *)(v80 + 24) < *(float *)(v80 + 56))
                    {
                      v80 += 32;
                      v79 = v87;
                    }
                  }
                  while (*(float *)(v80 + 24) >= v81);
                  if (*(char *)(v82 + 23) < 0)
                    operator delete(*(void **)v82);
                  *(_QWORD *)v82 = v119;
                  *(_QWORD *)(v82 + 8) = *(_QWORD *)v129;
                  *(_QWORD *)(v82 + 15) = *(_QWORD *)&v129[7];
                  *(_BYTE *)(v82 + 23) = v83;
                  *(float *)(v82 + 24) = v81;
                }
              }
              v77 = v78 - 1;
            }
            while (v78);
            v88 = (unint64_t)v9 >> 5;
            do
            {
              v89 = 0;
              v90 = a2;
              v91 = *(void **)a1;
              *(_QWORD *)v122 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)&v122[7] = *(_QWORD *)(a1 + 15);
              v92 = *(_BYTE *)(a1 + 23);
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              v93 = *(_DWORD *)(a1 + 24);
              v94 = a1;
              do
              {
                v95 = v94 + 32 * (v89 + 1);
                v96 = 2 * v89;
                v89 = (2 * v89) | 1;
                v97 = v96 + 2;
                if (v97 < v88 && *(float *)(v95 + 24) < *(float *)(v95 + 56))
                {
                  v95 += 32;
                  v89 = v97;
                }
                if (*(char *)(v94 + 23) < 0)
                  operator delete(*(void **)v94);
                v98 = *(_OWORD *)v95;
                *(_QWORD *)(v94 + 16) = *(_QWORD *)(v95 + 16);
                *(_OWORD *)v94 = v98;
                *(_BYTE *)(v95 + 23) = 0;
                *(_BYTE *)v95 = 0;
                *(_DWORD *)(v94 + 24) = *(_DWORD *)(v95 + 24);
                v94 = v95;
              }
              while (v89 <= (uint64_t)((unint64_t)(v88 - 2) >> 1));
              a2 -= 4;
              v99 = *(char *)(v95 + 23);
              if ((void **)v95 == v90 - 4)
              {
                if (v99 < 0)
                  operator delete(*(void **)v95);
                *(_QWORD *)v95 = v91;
                *(_QWORD *)(v95 + 8) = *(_QWORD *)v122;
                *(_QWORD *)(v95 + 15) = *(_QWORD *)&v122[7];
                *(_BYTE *)(v95 + 23) = v92;
                *(_DWORD *)(v95 + 24) = v93;
              }
              else
              {
                if (v99 < 0)
                  operator delete(*(void **)v95);
                v100 = *(_OWORD *)a2;
                *(_QWORD *)(v95 + 16) = *(v90 - 2);
                *(_OWORD *)v95 = v100;
                *((_BYTE *)v90 - 9) = 0;
                *((_BYTE *)v90 - 32) = 0;
                *(_DWORD *)(v95 + 24) = *((_DWORD *)v90 - 2);
                if (*((char *)v90 - 9) < 0)
                  operator delete(*a2);
                *(v90 - 4) = v91;
                *(void **)((char *)v90 - 17) = *(void **)&v122[7];
                *(v90 - 3) = *(void **)v122;
                *((_BYTE *)v90 - 9) = v92;
                *((_DWORD *)v90 - 2) = v93;
                v101 = v95 + 32 - a1;
                if (v101 >= 33)
                {
                  v102 = (((unint64_t)v101 >> 5) - 2) >> 1;
                  v103 = *(float *)(v95 + 24);
                  if (*(float *)(a1 + 32 * v102 + 24) < v103)
                  {
                    v104 = *(void **)v95;
                    *(_QWORD *)v130 = *(_QWORD *)(v95 + 8);
                    *(_QWORD *)&v130[7] = *(_QWORD *)(v95 + 15);
                    v105 = *(_BYTE *)(v95 + 23);
                    *(_QWORD *)(v95 + 8) = 0;
                    *(_QWORD *)(v95 + 16) = 0;
                    *(_QWORD *)v95 = 0;
                    do
                    {
                      if (*(char *)(v95 + 23) < 0)
                        operator delete(*(void **)v95);
                      v106 = a1 + 32 * v102;
                      v107 = *(_OWORD *)v106;
                      *(_QWORD *)(v95 + 16) = *(_QWORD *)(v106 + 16);
                      *(_OWORD *)v95 = v107;
                      *(_BYTE *)(v106 + 23) = 0;
                      *(_BYTE *)v106 = 0;
                      *(_DWORD *)(v95 + 24) = *(_DWORD *)(v106 + 24);
                      if (!v102)
                        break;
                      v102 = (v102 - 1) >> 1;
                      v95 = v106;
                    }
                    while (*(float *)(a1 + 32 * v102 + 24) < v103);
                    if (*(char *)(v106 + 23) < 0)
                      operator delete(*(void **)v106);
                    *(_QWORD *)v106 = v104;
                    *(_QWORD *)(v106 + 15) = *(_QWORD *)&v130[7];
                    *(_QWORD *)(v106 + 8) = *(_QWORD *)v130;
                    *(_BYTE *)(v106 + 23) = v105;
                    *(float *)(v106 + 24) = v103;
                  }
                }
              }
            }
            while (v88-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = a1 + 32 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 <= 0x1000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>((__int128 *)v12, (float *)a1, v118);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>((__int128 *)a1, (float *)v12, v118);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>((__int128 *)(a1 + 32), (float *)(v12 - 32), (float *)a2 - 16);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>((__int128 *)(a1 + 64), (float *)(a1 + 32 + 32 * v11), (float *)a2 - 24);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>((__int128 *)(v12 - 32), (float *)v12, (float *)(a1 + 32 + 32 * v11));
          v132 = *(_QWORD *)(a1 + 16);
          v123 = *(_OWORD *)a1;
          v13 = *(_QWORD *)(v12 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_QWORD *)(a1 + 16) = v13;
          *(_QWORD *)(v12 + 16) = v132;
          *(_OWORD *)v12 = v123;
          v14 = *(_DWORD *)(a1 + 24);
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(v12 + 24);
          *(_DWORD *)(v12 + 24) = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v15 = *(float *)(a1 + 24);
          if (*(float *)(a1 - 8) < v15)
            goto LABEL_11;
          v33 = *(_QWORD *)a1;
          *(_QWORD *)v121 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)&v121[7] = *(_QWORD *)(a1 + 15);
          v34 = *(_BYTE *)(a1 + 23);
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          if (v15 >= *((float *)a2 - 2))
          {
            v37 = a1 + 32;
            do
            {
              v8 = v37;
              if (v37 >= (unint64_t)a2)
                break;
              v38 = *(float *)(v37 + 24);
              v37 += 32;
            }
            while (v15 >= v38);
          }
          else
          {
            v35 = a1;
            do
            {
              v8 = v35 + 32;
              v36 = *(float *)(v35 + 56);
              v35 += 32;
            }
            while (v15 >= v36);
          }
          v39 = a2;
          if (v8 < (unint64_t)a2)
          {
            v40 = a2;
            do
            {
              v39 = v40 - 4;
              v41 = *((float *)v40 - 2);
              v40 -= 4;
            }
            while (v15 < v41);
          }
          while (v8 < (unint64_t)v39)
          {
            v134 = *(void **)(v8 + 16);
            v125 = *(_OWORD *)v8;
            v42 = *(_OWORD *)v39;
            *(_QWORD *)(v8 + 16) = v39[2];
            *(_OWORD *)v8 = v42;
            v39[2] = v134;
            *(_OWORD *)v39 = v125;
            LODWORD(v42) = *(_DWORD *)(v8 + 24);
            *(_DWORD *)(v8 + 24) = *((_DWORD *)v39 + 6);
            *((_DWORD *)v39 + 6) = v42;
            do
            {
              v43 = *(float *)(v8 + 56);
              v8 += 32;
            }
            while (v15 >= v43);
            do
            {
              v44 = *((float *)v39 - 2);
              v39 -= 4;
            }
            while (v15 < v44);
          }
          v45 = (void **)(v8 - 32);
          if (v8 - 32 != a1)
          {
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v46 = *(_OWORD *)v45;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 16);
            *(_OWORD *)a1 = v46;
            *(_BYTE *)(v8 - 9) = 0;
            *(_BYTE *)(v8 - 32) = 0;
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 - 8);
          }
          if (*(char *)(v8 - 9) < 0)
            operator delete(*v45);
          a4 = 0;
          *(_QWORD *)(v8 - 32) = v33;
          *(_QWORD *)(v8 - 17) = *(_QWORD *)&v121[7];
          *(_QWORD *)(v8 - 24) = *(_QWORD *)v121;
          *(_BYTE *)(v8 - 9) = v34;
          *(float *)(v8 - 8) = v15;
          continue;
        }
        v15 = *(float *)(a1 + 24);
LABEL_11:
        v16 = 0;
        v17 = *(_QWORD *)a1;
        *(_QWORD *)v120 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)&v120[7] = *(_QWORD *)(a1 + 15);
        v18 = *(_BYTE *)(a1 + 23);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        do
        {
          v19 = *(float *)(a1 + v16 + 56);
          v16 += 32;
        }
        while (v19 < v15);
        v20 = a1 + v16;
        v21 = a2;
        if (v16 == 32)
        {
          v24 = a2;
          while (v20 < (unint64_t)v24)
          {
            v22 = v24 - 4;
            v25 = *((float *)v24 - 2);
            v24 -= 4;
            if (v25 < v15)
              goto LABEL_21;
          }
          v22 = v24;
        }
        else
        {
          do
          {
            v22 = v21 - 4;
            v23 = *((float *)v21 - 2);
            v21 -= 4;
          }
          while (v23 >= v15);
        }
LABEL_21:
        v8 = v20;
        if (v20 < (unint64_t)v22)
        {
          v26 = (unint64_t)v22;
          do
          {
            v133 = *(_QWORD *)(v8 + 16);
            v124 = *(_OWORD *)v8;
            v27 = *(_OWORD *)v26;
            *(_QWORD *)(v8 + 16) = *(_QWORD *)(v26 + 16);
            *(_OWORD *)v8 = v27;
            *(_QWORD *)(v26 + 16) = v133;
            *(_OWORD *)v26 = v124;
            LODWORD(v27) = *(_DWORD *)(v8 + 24);
            *(_DWORD *)(v8 + 24) = *(_DWORD *)(v26 + 24);
            *(_DWORD *)(v26 + 24) = v27;
            do
            {
              v28 = *(float *)(v8 + 56);
              v8 += 32;
            }
            while (v28 < v15);
            do
            {
              v29 = *(float *)(v26 - 8);
              v26 -= 32;
            }
            while (v29 >= v15);
          }
          while (v8 < v26);
        }
        v30 = (void **)(v8 - 32);
        if (v8 - 32 != a1)
        {
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v31 = *(_OWORD *)v30;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 16);
          *(_OWORD *)a1 = v31;
          *(_BYTE *)(v8 - 9) = 0;
          *(_BYTE *)(v8 - 32) = 0;
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(v8 - 8);
        }
        if (*(char *)(v8 - 9) < 0)
          operator delete(*v30);
        *(_QWORD *)(v8 - 32) = v17;
        *(_QWORD *)(v8 - 17) = *(_QWORD *)&v120[7];
        *(_QWORD *)(v8 - 24) = *(_QWORD *)v120;
        *(_BYTE *)(v8 - 9) = v18;
        *(float *)(v8 - 8) = v15;
        if (v20 < (unint64_t)v22)
        {
LABEL_36:
          std::__introsort<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *,false>(a1, v8 - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v32 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>(a1, v8 - 32);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>(v8, (uint64_t)a2))
        {
          if (v32)
            continue;
          goto LABEL_36;
        }
        a2 = (void **)(v8 - 32);
        if (!v32)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = (unint64_t)a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = (__int128 *)v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)a2 - v9) >> 5);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((__int128 *)a2 - 14, v9))
          std::swap[abi:ne180100]<quasar::Token>(v9, (__int128 *)a2 - 14);
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(v9, (__int128 *)(v9 + 224), (__int128 *)a2 - 14, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(v9, (__int128 *)(v9 + 224), (__int128 *)(v9 + 448), (__int128 *)a2 - 14, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(v9, (__int128 *)(v9 + 224), (__int128 *)(v9 + 448), (__int128 *)(v9 + 672), (__int128 *)a2 - 14, a3);
        return;
      default:
        if (v12 <= 5375)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(v9, a2, (uint64_t (**)(void **, uint64_t))a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>((void **)v9, a2, (uint64_t (**)(void **, uint64_t))a3);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (__int128 *)(v9 + 224 * (v13 >> 1));
          if ((unint64_t)v12 <= 0x7000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(v9 + 224 * v14, (__int128 *)v9, (__int128 *)a2 - 14, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(v9, (__int128 *)(v9 + 224 * v14), (__int128 *)a2 - 14, a3);
            v16 = 224 * v14;
            v17 = (__int128 *)(224 * v14 + v9 - 224);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(v9 + 224, v17, (__int128 *)a2 - 28, a3);
            v18 = v9 + 448;
            v19 = (__int128 *)(v9 + 224 + v16);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(v18, v19, (__int128 *)a2 - 42, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>((uint64_t)v17, v15, v19, a3);
            std::swap[abi:ne180100]<quasar::Token>((uint64_t)a1, v15);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)(a1 - 14, (uint64_t)a1) & 1) == 0)
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,quasar::Token *,BOOL (*&)(quasar::Token const&,quasar::Token const&)>((uint64_t)a1, (__int128 *)a2, (uint64_t (**)(void **, unint64_t))a3);
            goto LABEL_16;
          }
LABEL_11:
          v20 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,quasar::Token *,BOOL (*&)(quasar::Token const&,quasar::Token const&)>((uint64_t)a1, (__int128 *)a2, (uint64_t (**)(uint64_t, void **))a3);
          if ((v21 & 1) == 0)
            goto LABEL_14;
          v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(a1, v20, a3);
          v9 = (unint64_t)(v20 + 14);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*>(v20 + 14, (__int128 *)a2, a3))
          {
            v10 = v11 + 1;
            if (v22)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*,false>(a1, v20, a3, -v11, a5 & 1);
            v9 = (unint64_t)(v20 + 14);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (void **)v20;
          if (v22)
            return;
          goto LABEL_1;
        }
        if ((void **)v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(quasar::Token const&,quasar::Token const&),quasar::Token*,quasar::Token*>((__int128 *)v9, (__int128 *)a2, (uint64_t)a2, a3);
        return;
    }
  }
}

  v10 = (__int128 *)((char *)a2 - 24);
  v11 = (__int128 *)a1;
LABEL_2:
  v12 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v11;
    v13 = v12;
    v14 = (char *)a2 - (char *)v11;
    v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v11) >> 3);
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((__int128 *)((char *)a2 - 24), v11))
        {
          v30 = *((_QWORD *)v11 + 2);
          v28 = *v11;
          v26 = *v10;
          *((_QWORD *)v11 + 2) = *((_QWORD *)a2 - 1);
          *v11 = v26;
          *v10 = v28;
          *((_QWORD *)a2 - 1) = v30;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(v11, (__int128 *)((char *)v11 + 24), (__int128 *)((char *)a2 - 24), a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((uint64_t)v11, (uint64_t)v11 + 24, (uint64_t)(v11 + 3), (uint64_t)a2 - 24, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((__n128 *)v11, (uint64_t)v11 + 24, (uint64_t)(v11 + 3), (uint64_t)v11 + 72, (uint64_t)a2 - 24, a3);
        return;
      default:
        if (v14 <= 575)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((uint64_t)v11, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((uint64_t)v11, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
          return;
        }
        if (v13 != 1)
        {
          v16 = v15 >> 1;
          v17 = (__int128 *)((char *)v11 + 24 * (v15 >> 1));
          if ((unint64_t)v14 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((__int128 *)((char *)v11 + 24 * v16), v11, (__int128 *)((char *)a2 - 24), a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(v11, (__int128 *)((char *)v11 + 24 * v16), (__int128 *)((char *)a2 - 24), a3);
            v18 = 3 * v16;
            v19 = (__int128 *)((char *)v11 + 24 * v16 - 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>((__int128 *)((char *)v11 + 24), v19, a2 - 3, a3);
            v20 = v11 + 3;
            v21 = (__int128 *)((char *)v11 + 8 * v18 + 24);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(v20, v21, (__int128 *)((char *)a2 - 72), a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*>(v19, v17, v21, a3);
            v29 = *(_QWORD *)(a1 + 16);
            v27 = *(_OWORD *)a1;
            v22 = *v17;
            *(_QWORD *)(a1 + 16) = *((_QWORD *)v17 + 2);
            *(_OWORD *)a1 = v22;
            *((_QWORD *)v17 + 2) = v29;
            *v17 = v27;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)((__int128 *)(a1 - 24), (__int128 *)a1) & 1) == 0)
          {
            v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TRegExpMatch *,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&)>((__int128 *)a1, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v23 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TRegExpMatch *,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&)>((__int128 *)a1, (unint64_t)a2, (uint64_t (**)(char *, __int128 *))a3);
          if ((v24 & 1) == 0)
            goto LABEL_14;
          v25 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRespellManager::TRespellMap const&,TRespellManager::TRespellMap const&),TRespellManager::TRespellMap*>(a1, v23, a3);
          v11 = (__int128 *)(v23 + 24);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRespellManager::TRespellMap const&,TRespellManager::TRespellMap const&),TRespellManager::TRespellMap*>(v23 + 24, (uint64_t)a2, a3))
          {
            v12 = v13 + 1;
            if (v25)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TRespellManager::TRespellMap const&,TRespellManager::TRespellMap const&),TRespellManager::TRespellMap*,false>(a1, v23, a3, -v13, a5 & 1);
            v11 = (__int128 *)(v23 + 24);
LABEL_16:
            a5 = 0;
            a4 = -v13;
            goto LABEL_2;
          }
          a4 = -v13;
          a2 = (__int128 *)v23;
          if (v25)
            return;
          goto LABEL_1;
        }
        if (v11 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TRegExpMatch const&,TRegExpMatch const&),TRegExpMatch*,TRegExpMatch*>((__n128 *)v11, (__n128 *)a2, (__n128 *)a2, (unsigned int (**)(uint64_t, __int8 *))a3, a6);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v20 = *((_DWORD *)a2 - 4);
        v19 = a2 - 1;
        if (v20 < (signed __int32)v9->n128_u32[0])
        {
          v28 = (__int128)*v9;
          *v9 = (__n128)*v19;
          *v19 = v28;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v9, (int *)&v9[1], (int *)a2 - 4);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v9, (int *)&v9[1], (int *)&v9[2], a2 - 1);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v9, (int *)&v9[1], (int *)&v9[2], v9 + 3, (__n128 *)a2 - 1);
        return;
      default:
        if (v12 > 383)
        {
          if (v11 == 1)
          {
            if (v9 != (__n128 *)a2)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v9, a2, a2, a3);
            return;
          }
          v14 = v13 >> 1;
          v15 = (int *)&v9[v13 >> 1];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)&v9[v13 >> 1], (int *)v9, (int *)a2 - 4);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v9, (int *)&v9[v13 >> 1], (int *)a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)&v9[1], v15 - 4, (int *)a2 - 8);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)&v9[2], (int *)&v9[v14 + 1], (int *)a2 - 12);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v15 - 1, v15, (int *)&v9[v14 + 1]);
            v27 = (__int128)*v9;
            *v9 = *(__n128 *)v15;
            *(_OWORD *)v15 = v27;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if ((signed __int32)v9[-1].n128_u32[0] >= (signed __int32)v9->n128_u32[0])
          {
            v9 = (__n128 *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>(v9, a2);
            goto LABEL_16;
          }
LABEL_11:
          v16 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &>((__int128 *)v9, a2);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>*>((uint64_t)v9, (__n128 *)v16);
          v9 = (__n128 *)(v16 + 1);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>*>((uint64_t)(v16 + 1), (__n128 *)a2))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>> &,fst::ReverseArc<fst::ArcTpl<fst::LogWeightTpl<float>,int>>*,false>(a1, v16, a3, -v11, a5 & 1);
            v9 = (__n128 *)(v16 + 1);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v9, a2);
        }
        else if (v9 != (__n128 *)a2)
        {
          v21 = (__int128 *)&v9[1];
          while (v21 != a2)
          {
            v22 = v21;
            v23 = a1[1].n128_i64[0];
            if ((int)v23 < (signed __int32)a1->n128_u32[0])
            {
              v24 = a1[1].n128_i64[1];
              v25 = v22;
              do
              {
                *v25 = *(v25 - 1);
                v26 = *((_DWORD *)v25-- - 8);
              }
              while ((int)v23 < v26);
              *(_QWORD *)v25 = v23;
              *((_QWORD *)v25 + 1) = v24;
            }
            v21 = v22 + 1;
            a1 = (__n128 *)v22;
          }
        }
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v22 = a2 - 1;
        v23 = *((_DWORD *)a2 - 4);
        if (v23 < *(_DWORD *)v9
          || v23 <= *(_DWORD *)v9
          && ((v24 = *((_DWORD *)a2 - 3), v25 = *((_DWORD *)v9 + 1), v24 < v25)
           || v24 <= v25 && *((_DWORD *)a2 - 1) < *((_DWORD *)v9 + 3)))
        {
          v27 = *v9;
          *v9 = *v22;
          *v22 = v27;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v9, (int *)v9 + 4, a2 - 1);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)v9, (int *)v9 + 4, (uint64_t)(v9 + 2), (uint64_t)(a2 - 1));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((uint64_t)v9, (int *)v9 + 4, (uint64_t)(v9 + 2), (uint64_t)(v9 + 3), (uint64_t)(a2 - 1));
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (int *)&v9[v13 >> 1];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(&v9[v13 >> 1], (int *)v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_15;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v9, (int *)&v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v9 + 1, v15 - 4, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>(v9 + 2, (int *)&v9[v14 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((__int128 *)v15 - 1, v15, &v9[v14 + 1]);
            v26 = *v9;
            *v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v26;
            if ((a5 & 1) != 0)
              goto LABEL_15;
          }
          v16 = *((_DWORD *)v9 - 4);
          if (v16 >= *(_DWORD *)v9)
          {
            if (v16 > *(_DWORD *)v9
              || (v17 = *((_DWORD *)v9 - 3), v18 = *((_DWORD *)v9 + 1), v17 >= v18)
              && (v17 > v18 || *((_DWORD *)v9 - 1) >= *((_DWORD *)v9 + 3)))
            {
              v9 = (__int128 *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &>(v9, (unint64_t)a2);
              goto LABEL_20;
            }
          }
LABEL_15:
          v19 = (__int128 *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> *,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &>((int *)v9, (unint64_t)a2);
          if ((v20 & 1) == 0)
            goto LABEL_18;
          v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*>((uint64_t)v9, v19);
          v9 = v19 + 1;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*>((uint64_t)(v19 + 1), a2))
          {
            v10 = v11 + 1;
            if (v21)
              continue;
LABEL_18:
            std::__introsort<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::LogWeightTpl<float>,int>*,false>(a1, v19, a3, -v11, a5 & 1);
            v9 = v19 + 1;
LABEL_20:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v19;
          if (v21)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,fst::ArcUniqueMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Compare &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*>((int *)v9, (int *)a2, (int *)a2, a3);
        return;
    }
  }
}

  v8 = (__n128 *)((char *)a2 - 24);
  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v9) >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<absl::string_view,int>,std::pair<absl::string_view,int>>(a3, (uint64_t)v8, (uint64_t)v9))
        {
          v27 = *v9;
          *v9 = *v8;
          *v8 = v27;
          v24 = v9[1].n128_u32[0];
          v9[1].n128_u32[0] = a2[-1].n128_u32[2];
          a2[-1].n128_u32[2] = v24;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *>((uint64_t)v9, (uint64_t)&v9[1].n128_i64[1], (uint64_t)v8, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *>(v9, (uint64_t)&v9[1].n128_i64[1], (uint64_t)&v9[3], (uint64_t)v8, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *>(v9, (uint64_t)&v9[1].n128_i64[1], (uint64_t)&v9[3], (uint64_t)&v9[4].n128_i64[1], (uint64_t)v8, a3);
        return;
      default:
        if (v12 <= 575)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *>((uint64_t)v9, (uint64_t)a2, a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *>((uint64_t)v9, (uint64_t)a2, a3);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (__n128 *)((char *)v9 + 24 * (v13 >> 1));
          if ((unint64_t)v12 < 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *>((uint64_t)v9 + 24 * (v13 >> 1), (uint64_t)v9, (uint64_t)v8, a3);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *>((uint64_t)v9, (uint64_t)v9 + 24 * (v13 >> 1), (uint64_t)v8, a3);
            v16 = v8;
            v17 = (char *)v9 + 24 * v14;
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *>((uint64_t)&v9[1].n128_i64[1], (uint64_t)(v17 - 24), (uint64_t)&a2[-3], a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *>((uint64_t)&v9[3], (uint64_t)&v9[1].n128_i64[3 * v14 + 1], (uint64_t)&a2[-5].n128_i64[1], a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *>((uint64_t)(v17 - 24), (uint64_t)v15, (uint64_t)&v9[1].n128_i64[3 * v14 + 1], a3);
            v26 = *v9;
            *v9 = *v15;
            *v15 = v26;
            v18 = v9[1].n128_u32[0];
            v9[1].n128_u32[0] = *((_DWORD *)v17 + 4);
            *((_DWORD *)v17 + 4) = v18;
            v8 = v16;
          }
          if ((a5 & 1) == 0
            && !std::__less<void,void>::operator()[abi:ne180100]<std::pair<absl::string_view,int>,std::pair<absl::string_view,int>>(a3, (uint64_t)&v9[-2].n128_i64[1], (uint64_t)v9))
          {
            v9 = (__n128 *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<absl::string_view,int> *,std::__less<void,void> &>((unint64_t)v9, (unint64_t)a2, a3);
            goto LABEL_16;
          }
          v20.n128_f64[0] = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<absl::string_view,int> *,std::__less<void,void> &>((__int128 *)v9, (unint64_t)a2, a3);
          v21 = v19;
          if ((v22 & 1) == 0)
            goto LABEL_14;
          v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *>(v9, v19, a3);
          v9 = (__n128 *)((char *)v21 + 24);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *>((__n128 *)((char *)v21 + 24), a2, a3))
          {
            v10 = v11 + 1;
            if (v23)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *,false>(a1, v21, a3, -v11, a5 & 1, v20);
            v9 = (__n128 *)((char *)v21 + 24);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v21;
          if (v23)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<absl::string_view,int> *,std::pair<absl::string_view,int> *>((uint64_t)v9, (uint64_t)a2, (uint64_t)a2, a3);
        return;
    }
  }
}

void sub_1AD7CE0E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  quasar::AppLmData::Oov::~Oov((char **)(v1 - 208));
  quasar::AppLmData::Oov::~Oov((char **)(v1 - 144));
  _Unwind_Resume(a1);
}

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t *v19;
  unsigned int v20;
  unsigned int v21;
  std::string __p;
  uint64_t v23[3];
  unsigned int v24;
  std::string v25;
  uint64_t v26[3];
  unsigned int v27;
  std::string v28;
  uint64_t v29[3];
  unsigned int v30;
  std::string v31;
  uint64_t v32[3];
  unsigned int v33;
  std::string v34;
  uint64_t v35[3];
  unsigned int v36;
  std::string v37;
  uint64_t v38[3];
  unsigned int v39;
  std::string v40;
  uint64_t v41[3];
  unsigned int v42;
  std::string v43;
  uint64_t v44[3];
  unsigned int v45;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(a1, a2, a3, a4);
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v43, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    v43 = *(std::string *)a5;
  std::set<std::string>::set[abi:ne180100](v44, (const void ***)(a5 + 24));
  v45 = *(_DWORD *)(a5 + 48);
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v40 = *(std::string *)a4;
  v10 = std::set<std::string>::set[abi:ne180100](v41, (const void ***)(a4 + 24));
  v11 = *(_DWORD *)(a4 + 48);
  v42 = v11;
  v12 = v45;
  std::__tree<std::string>::destroy((uint64_t)v10, (char *)v41[1]);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  std::__tree<std::string>::destroy((uint64_t)v44, (char *)v44[1]);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (v12 > v11)
  {
    std::swap[abi:ne180100]<quasar::AppLmData::Oov>(a4, (__int128 *)a5);
    if (*(char *)(a4 + 23) < 0)
      std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
    else
      v37 = *(std::string *)a4;
    std::set<std::string>::set[abi:ne180100](v38, (const void ***)(a4 + 24));
    v39 = *(_DWORD *)(a4 + 48);
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v34 = *(std::string *)a3;
    v13 = std::set<std::string>::set[abi:ne180100](v35, (const void ***)(a3 + 24));
    v14 = *(_DWORD *)(a3 + 48);
    v36 = v14;
    v15 = v39;
    std::__tree<std::string>::destroy((uint64_t)v13, (char *)v35[1]);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    std::__tree<std::string>::destroy((uint64_t)v38, (char *)v38[1]);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (v15 > v14)
    {
      std::swap[abi:ne180100]<quasar::AppLmData::Oov>(a3, (__int128 *)a4);
      if (*(char *)(a3 + 23) < 0)
        std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      else
        v31 = *(std::string *)a3;
      std::set<std::string>::set[abi:ne180100](v32, (const void ***)(a3 + 24));
      v33 = *(_DWORD *)(a3 + 48);
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v28 = *(std::string *)a2;
      v16 = std::set<std::string>::set[abi:ne180100](v29, (const void ***)(a2 + 24));
      v17 = *(_DWORD *)(a2 + 48);
      v30 = v17;
      v18 = v33;
      std::__tree<std::string>::destroy((uint64_t)v16, (char *)v29[1]);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      std::__tree<std::string>::destroy((uint64_t)v32, (char *)v32[1]);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (v18 > v17)
      {
        std::swap[abi:ne180100]<quasar::AppLmData::Oov>(a2, (__int128 *)a3);
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          v25 = *(std::string *)a2;
        std::set<std::string>::set[abi:ne180100](v26, (const void ***)(a2 + 24));
        v27 = *(_DWORD *)(a2 + 48);
        if (*(char *)(a1 + 23) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
        else
          __p = *(std::string *)a1;
        v19 = std::set<std::string>::set[abi:ne180100](v23, (const void ***)(a1 + 24));
        v20 = *(_DWORD *)(a1 + 48);
        v24 = v20;
        v21 = v27;
        std::__tree<std::string>::destroy((uint64_t)v19, (char *)v23[1]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        std::__tree<std::string>::destroy((uint64_t)v26, (char *)v26[1]);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v25.__r_.__value_.__l.__data_);
        if (v21 > v20)
          std::swap[abi:ne180100]<quasar::AppLmData::Oov>(a1, (__int128 *)a2);
      }
    }
  }
}

void sub_1AD7CE8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char *a24)
{
  uint64_t v24;

  std::__tree<std::string>::destroy(v24, a24);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(a1);
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t *v17;
  unsigned int v18;
  unsigned int v19;
  __int128 *v20;
  uint64_t *v21;
  unsigned int v22;
  unsigned int v23;
  std::string __p;
  uint64_t v25[3];
  unsigned int v26;
  std::string v27;
  uint64_t v28[3];
  unsigned int v29;
  std::string v30;
  uint64_t v31[3];
  unsigned int v32;
  std::string v33;
  uint64_t v34[3];
  unsigned int v35;
  std::string v36;
  uint64_t v37[3];
  unsigned int v38;
  std::string v39;
  uint64_t v40[3];
  unsigned int v41;
  std::string v42;
  uint64_t v43[3];
  unsigned int v44;
  std::string v45;
  uint64_t v46[3];
  unsigned int v47;
  std::string v48;
  uint64_t v49[3];
  unsigned int v50;
  std::string v51;
  uint64_t v52[3];
  unsigned int v53;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v51 = *(std::string *)a2;
  std::set<std::string>::set[abi:ne180100](v52, (const void ***)(a2 + 24));
  v53 = *(_DWORD *)(a2 + 48);
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v48 = *(std::string *)a1;
  v6 = std::set<std::string>::set[abi:ne180100](v49, (const void ***)(a1 + 24));
  v7 = *(_DWORD *)(a1 + 48);
  v50 = v7;
  v8 = v53;
  std::__tree<std::string>::destroy((uint64_t)v6, (char *)v49[1]);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  std::__tree<std::string>::destroy((uint64_t)v52, (char *)v52[1]);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  v9 = *(char *)(a3 + 23);
  if (v8 <= v7)
  {
    if (v9 < 0)
      std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v45 = *(std::string *)a3;
    std::set<std::string>::set[abi:ne180100](v46, (const void ***)(a3 + 24));
    v47 = *(_DWORD *)(a3 + 48);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v42 = *(std::string *)a2;
    v14 = std::set<std::string>::set[abi:ne180100](v43, (const void ***)(a2 + 24));
    v15 = *(_DWORD *)(a2 + 48);
    v44 = v15;
    v16 = v47;
    std::__tree<std::string>::destroy((uint64_t)v14, (char *)v43[1]);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    std::__tree<std::string>::destroy((uint64_t)v46, (char *)v46[1]);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (v16 > v15)
    {
      std::swap[abi:ne180100]<quasar::AppLmData::Oov>(a2, (__int128 *)a3);
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v39 = *(std::string *)a2;
      std::set<std::string>::set[abi:ne180100](v40, (const void ***)(a2 + 24));
      v41 = *(_DWORD *)(a2 + 48);
      if (*(char *)(a1 + 23) < 0)
        std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      else
        v36 = *(std::string *)a1;
      v21 = std::set<std::string>::set[abi:ne180100](v37, (const void ***)(a1 + 24));
      v22 = *(_DWORD *)(a1 + 48);
      v38 = v22;
      v23 = v41;
      std::__tree<std::string>::destroy((uint64_t)v21, (char *)v37[1]);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      std::__tree<std::string>::destroy((uint64_t)v40, (char *)v40[1]);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      if (v23 > v22)
      {
        v13 = a1;
        v20 = (__int128 *)a2;
        goto LABEL_59;
      }
    }
  }
  else
  {
    if (v9 < 0)
      std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v33 = *(std::string *)a3;
    std::set<std::string>::set[abi:ne180100](v34, (const void ***)(a3 + 24));
    v35 = *(_DWORD *)(a3 + 48);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v30 = *(std::string *)a2;
    v10 = std::set<std::string>::set[abi:ne180100](v31, (const void ***)(a2 + 24));
    v11 = *(_DWORD *)(a2 + 48);
    v32 = v11;
    v12 = v35;
    std::__tree<std::string>::destroy((uint64_t)v10, (char *)v31[1]);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    std::__tree<std::string>::destroy((uint64_t)v34, (char *)v34[1]);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    v13 = a1;
    if (v12 > v11)
      goto LABEL_51;
    std::swap[abi:ne180100]<quasar::AppLmData::Oov>(a1, (__int128 *)a2);
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v27 = *(std::string *)a3;
    std::set<std::string>::set[abi:ne180100](v28, (const void ***)(a3 + 24));
    v29 = *(_DWORD *)(a3 + 48);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p = *(std::string *)a2;
    v17 = std::set<std::string>::set[abi:ne180100](v25, (const void ***)(a2 + 24));
    v18 = *(_DWORD *)(a2 + 48);
    v26 = v18;
    v19 = v29;
    std::__tree<std::string>::destroy((uint64_t)v17, (char *)v25[1]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::__tree<std::string>::destroy((uint64_t)v28, (char *)v28[1]);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    if (v19 > v18)
    {
      v13 = a2;
LABEL_51:
      v20 = (__int128 *)a3;
LABEL_59:
      std::swap[abi:ne180100]<quasar::AppLmData::Oov>(v13, v20);
    }
  }
}

void sub_1AD7CEE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{
  quasar::AppLmData::Oov::~Oov((char **)&a49);
  _Unwind_Resume(a1);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int v13;
  std::string::size_type v14;
  const void **v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  void **v22;
  const std::string::value_type **v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t *v26;
  __int128 v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  std::string v37;
  uint64_t v38[3];
  unsigned int v39;
  std::string v40;
  uint64_t v41[3];
  unsigned int v42;
  std::string __p;
  const void **v44;
  char *v45;
  uint64_t v46;
  unsigned int v47;
  std::string v48;
  uint64_t v49[3];
  unsigned int v50;
  std::string v51;
  uint64_t v52[3];
  unsigned int v53;
  std::string v54;
  uint64_t v55[3];
  unsigned int v56;
  std::string v57;
  uint64_t v58[3];
  unsigned int v59;

  v4 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 56);
      if (*(char *)(a2 - 33) < 0)
      {
        std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)(a2 - 56), *(_QWORD *)(a2 - 48));
      }
      else
      {
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = *v6;
        v57.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 - 40);
      }
      std::set<std::string>::set[abi:ne180100](v58, (const void ***)(a2 - 32));
      v59 = *(_DWORD *)(a2 - 8);
      if (*(char *)(a1 + 23) < 0)
        std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      else
        v54 = *(std::string *)a1;
      v32 = std::set<std::string>::set[abi:ne180100](v55, (const void ***)(a1 + 24));
      v33 = *(_DWORD *)(a1 + 48);
      v56 = v33;
      v34 = v59;
      std::__tree<std::string>::destroy((uint64_t)v32, (char *)v55[1]);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      std::__tree<std::string>::destroy((uint64_t)v58, (char *)v58[1]);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      if (v34 > v33)
        std::swap[abi:ne180100]<quasar::AppLmData::Oov>(a1, v6);
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(a1, a1 + 56, a2 - 56);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(a1, a1 + 56, a1 + 112, a2 - 56);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *,0>(a1, a1 + 56, a1 + 112, a1 + 168, a2 - 56);
      return 1;
    default:
      v7 = a1 + 112;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(a1, a1 + 56, a1 + 112);
      v8 = a1 + 168;
      if (a1 + 168 == a2)
        return 1;
      v9 = 0;
      v35 = 0;
      v36 = a2;
      break;
  }
  do
  {
    if (*(char *)(v8 + 23) < 0)
      std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)v8, *(_QWORD *)(v8 + 8));
    else
      v51 = *(std::string *)v8;
    std::set<std::string>::set[abi:ne180100](v52, (const void ***)(v8 + 24));
    v53 = *(_DWORD *)(v8 + 48);
    if (*(char *)(v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
    }
    else
    {
      v10 = *(_OWORD *)v7;
      v48.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v10;
    }
    v11 = std::set<std::string>::set[abi:ne180100](v49, (const void ***)(v7 + 24));
    v12 = *(_DWORD *)(v7 + 48);
    v50 = v12;
    v13 = v53;
    std::__tree<std::string>::destroy((uint64_t)v11, (char *)v49[1]);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    std::__tree<std::string>::destroy((uint64_t)v52, (char *)v52[1]);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    if (v13 <= v12)
    {
      v19 = v36;
      goto LABEL_48;
    }
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v8;
    v14 = *(_QWORD *)(v8 + 16);
    v15 = *(const void ***)(v8 + 24);
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)v8 = 0;
    __p.__r_.__value_.__r.__words[2] = v14;
    v44 = v15;
    v16 = (_QWORD *)(v8 + 32);
    v17 = *(_QWORD *)(v8 + 32);
    v18 = *(_QWORD *)(v8 + 40);
    v45 = (char *)v17;
    v46 = v18;
    if (v18)
    {
      *(_QWORD *)(v17 + 16) = &v45;
      *(_QWORD *)(v8 + 24) = v16;
      *v16 = 0;
      *(_QWORD *)(v8 + 40) = 0;
    }
    else
    {
      v44 = (const void **)&v45;
    }
    v47 = *(_DWORD *)(v8 + 48);
    for (i = v9; ; i -= 56)
    {
      v21 = a1 + i;
      v22 = (void **)(a1 + i + 168);
      if (*(char *)(a1 + i + 191) < 0)
        operator delete(*v22);
      *(_OWORD *)v22 = *(_OWORD *)(v21 + 112);
      *(_QWORD *)(a1 + i + 184) = *(_QWORD *)(v21 + 128);
      *(_BYTE *)(v21 + 135) = 0;
      *(_BYTE *)(v21 + 112) = 0;
      std::__tree<std::string>::__move_assign(v21 + 192, (_QWORD *)(v21 + 136));
      *(_DWORD *)(v21 + 216) = *(_DWORD *)(v21 + 160);
      if (i == -112)
      {
        v7 = a1;
        goto LABEL_40;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v40, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v40 = __p;
      std::set<std::string>::set[abi:ne180100](v41, &v44);
      v42 = v47;
      v23 = (const std::string::value_type **)(a1 + i + 56);
      if (*(char *)(a1 + i + 79) < 0)
      {
        std::string::__init_copy_ctor_external(&v37, *v23, *(_QWORD *)(a1 + i + 64));
      }
      else
      {
        *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)v23;
        v37.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + i + 72);
      }
      std::set<std::string>::set[abi:ne180100](v38, (const void ***)(a1 + i + 80));
      v24 = *(_DWORD *)(a1 + i + 104);
      v39 = v24;
      v25 = v42;
      std::__tree<std::string>::destroy((uint64_t)v38, (char *)v38[1]);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      std::__tree<std::string>::destroy((uint64_t)v41, (char *)v41[1]);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        break;
      if (v25 <= v24)
        goto LABEL_40;
LABEL_37:
      v7 -= 56;
    }
    operator delete(v40.__r_.__value_.__l.__data_);
    if (v25 > v24)
      goto LABEL_37;
    v7 = a1 + i + 112;
LABEL_40:
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    v26 = (uint64_t *)(a1 + i + 136);
    v27 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v7 = v27;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    v28 = v7 + 32;
    std::__tree<std::string>::destroy((uint64_t)v26, *(char **)(v7 + 32));
    v29 = v45;
    *v26 = (uint64_t)v44;
    *(_QWORD *)(v7 + 32) = v29;
    v30 = v46;
    *(_QWORD *)(v7 + 40) = v46;
    if (v30)
    {
      v31 = 0;
      *((_QWORD *)v29 + 2) = v28;
      v44 = (const void **)&v45;
      v45 = 0;
      v46 = 0;
    }
    else
    {
      *v26 = v28;
      v31 = v45;
    }
    *(_DWORD *)(v7 + 48) = v47;
    std::__tree<std::string>::destroy((uint64_t)&v44, v31);
    v19 = v36;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (++v35 == 8)
      return v8 + 56 == v36;
LABEL_48:
    v7 = v8;
    v9 += 56;
    v8 += 56;
  }
  while (v8 != v19);
  return 1;
}

void sub_1AD7CF49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  uint64_t v61;

  quasar::AppLmData::Oov::~Oov((char **)(v61 - 144));
  _Unwind_Resume(a1);
}

void std::swap[abi:ne180100]<quasar::AppLmData::Oov>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  *(_OWORD *)__p = *(_OWORD *)a1;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v5 = a1 + 24;
  v15 = v4;
  v16 = *(uint64_t **)(a1 + 24);
  v6 = (_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v17 = v7;
  v18 = v8;
  if (v8)
  {
    *(_QWORD *)(v7 + 16) = &v17;
    *(_QWORD *)(a1 + 24) = v6;
    *v6 = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v9 = *(char *)(a1 + 23);
    v19 = *(_DWORD *)(a1 + 48);
    if (v9 < 0)
      operator delete(*(void **)a1);
  }
  else
  {
    v16 = &v17;
    v19 = *(_DWORD *)(a1 + 48);
  }
  v10 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v10;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  std::__tree<std::string>::__move_assign(v5, (_QWORD *)a2 + 3);
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  if (*((char *)a2 + 23) < 0)
    operator delete(*(void **)a2);
  *a2 = *(_OWORD *)__p;
  *((_QWORD *)a2 + 2) = v15;
  v11 = a2 + 2;
  std::__tree<std::string>::destroy((uint64_t)a2 + 24, *((char **)a2 + 4));
  v12 = v17;
  *((_QWORD *)a2 + 3) = v16;
  *((_QWORD *)a2 + 4) = v12;
  v13 = v18;
  *((_QWORD *)a2 + 5) = v18;
  if (v13)
  {
    *(_QWORD *)(v12 + 16) = v11;
    v12 = 0;
    v16 = &v17;
    v17 = 0;
    v18 = 0;
  }
  else
  {
    *((_QWORD *)a2 + 3) = v11;
  }
  *((_DWORD *)a2 + 12) = v19;
  std::__tree<std::string>::destroy((uint64_t)&v16, (char *)v12);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t *v14;
  unsigned int v15;
  unsigned int v16;
  std::string __p;
  uint64_t v18[3];
  unsigned int v19;
  std::string v20;
  uint64_t v21[3];
  unsigned int v22;
  std::string v23;
  uint64_t v24[3];
  unsigned int v25;
  std::string v26;
  uint64_t v27[3];
  unsigned int v28;
  std::string v29;
  uint64_t v30[3];
  unsigned int v31;
  std::string v32;
  uint64_t v33[3];
  unsigned int v34;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::AppLmData::getOrderedOovs(void)::$_0 &,quasar::AppLmData::Oov *>(a1, a2, a3);
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v32 = *(std::string *)a4;
  std::set<std::string>::set[abi:ne180100](v33, (const void ***)(a4 + 24));
  v34 = *(_DWORD *)(a4 + 48);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v29 = *(std::string *)a3;
  v8 = std::set<std::string>::set[abi:ne180100](v30, (const void ***)(a3 + 24));
  v9 = *(_DWORD *)(a3 + 48);
  v31 = v9;
  v10 = v34;
  std::__tree<std::string>::destroy((uint64_t)v8, (char *)v30[1]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  std::__tree<std::string>::destroy((uint64_t)v33, (char *)v33[1]);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (v10 > v9)
  {
    std::swap[abi:ne180100]<quasar::AppLmData::Oov>(a3, (__int128 *)a4);
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v26 = *(std::string *)a3;
    std::set<std::string>::set[abi:ne180100](v27, (const void ***)(a3 + 24));
    v28 = *(_DWORD *)(a3 + 48);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v23 = *(std::string *)a2;
    v11 = std::set<std::string>::set[abi:ne180100](v24, (const void ***)(a2 + 24));
    v12 = *(_DWORD *)(a2 + 48);
    v25 = v12;
    v13 = v28;
    std::__tree<std::string>::destroy((uint64_t)v11, (char *)v24[1]);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    std::__tree<std::string>::destroy((uint64_t)v27, (char *)v27[1]);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (v13 > v12)
    {
      std::swap[abi:ne180100]<quasar::AppLmData::Oov>(a2, (__int128 *)a3);
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v20 = *(std::string *)a2;
      std::set<std::string>::set[abi:ne180100](v21, (const void ***)(a2 + 24));
      v22 = *(_DWORD *)(a2 + 48);
      if (*(char *)(a1 + 23) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      else
        __p = *(std::string *)a1;
      v14 = std::set<std::string>::set[abi:ne180100](v18, (const void ***)(a1 + 24));
      v15 = *(_DWORD *)(a1 + 48);
      v19 = v15;
      v16 = v22;
      std::__tree<std::string>::destroy((uint64_t)v14, (char *)v18[1]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      std::__tree<std::string>::destroy((uint64_t)v21, (char *)v21[1]);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      if (v16 > v15)
        std::swap[abi:ne180100]<quasar::AppLmData::Oov>(a1, (__int128 *)a2);
    }
  }
}

void sub_1AD7CF994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  quasar::AppLmData::Oov::~Oov((char **)&a20);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1AD7CFCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x60uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,quasar::AppLmData::Oov>::pair[abi:ne180100]<std::string const&>((std::string *)(v8 + 16), *a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1AD7CFD34(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,quasar::AppLmData::Oov>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)&this[2].__r_.__value_.__l.__size_;
  LODWORD(this[3].__r_.__value_.__l.__data_) = 1;
  return this;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::AppLmData::Oov>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::AppLmData::Oov>>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__construct_node_hash<std::pair<std::string const,quasar::AppLmData::Oov>>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1AD7D0060(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__construct_node_hash<std::pair<std::string const,quasar::AppLmData::Oov>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x60uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,quasar::AppLmData::Oov>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1AD7D00D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,quasar::AppLmData::Oov>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _QWORD *v6;
  std::string::size_type v7;
  std::string::value_type *v8;
  std::string::size_type v9;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *(__int128 *)((char *)a2 + 24);
  this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  this[2].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 6);
  v6 = (_QWORD *)a2 + 7;
  v7 = *((_QWORD *)a2 + 7);
  this[2].__r_.__value_.__l.__size_ = v7;
  v8 = &this[2].__r_.__value_.__s.__data_[8];
  v9 = *((_QWORD *)a2 + 8);
  this[2].__r_.__value_.__r.__words[2] = v9;
  if (v9)
  {
    *(_QWORD *)(v7 + 16) = v8;
    *((_QWORD *)a2 + 6) = v6;
    *v6 = 0;
    *((_QWORD *)a2 + 8) = 0;
  }
  else
  {
    this[2].__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  }
  LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
  return this;
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

uint64_t std::insert_iterator<std::set<std::string>>::operator=[abi:ne180100](uint64_t a1, const void **a2)
{
  _OWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v3 = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string>(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, (uint64_t)a2);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = (_QWORD *)*((_QWORD *)v3 + 1);
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = (_QWORD *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      v5 = (_QWORD *)*((_QWORD *)v3 + 2);
      v6 = *v5 == (_QWORD)v3;
      v3 = v5;
    }
    while (!v6);
  }
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

_OWORD *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  const void **v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;
  const void **v11;

  v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v11, &v10, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::AppLmData::Oov>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::AppLmData::Oov>>>::__emplace_unique_key_args<std::string,std::pair<std::string,quasar::AppLmData::Oov>>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = operator new(0x60uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v9;
  std::pair<std::string const,quasar::AppLmData::Oov>::pair[abi:ne180100]<std::string,quasar::AppLmData::Oov,0>((uint64_t)(v16 + 2), a3);
  v27 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10)
          v24 %= v10;
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1AD7D0578(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::AppLmData::Oov>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,quasar::AppLmData::Oov>::pair[abi:ne180100]<std::string,quasar::AppLmData::Oov,0>(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a2;
  *(_QWORD *)(result + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)result = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v3 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(result + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(result + 24) = v3;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *(_QWORD *)(result + 48) = *((_QWORD *)a2 + 6);
  v4 = (_QWORD *)a2 + 7;
  v5 = *((_QWORD *)a2 + 7);
  *(_QWORD *)(result + 56) = v5;
  v6 = result + 56;
  v7 = *((_QWORD *)a2 + 8);
  *(_QWORD *)(result + 64) = v7;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    *((_QWORD *)a2 + 6) = v4;
    *v4 = 0;
    *((_QWORD *)a2 + 8) = 0;
  }
  else
  {
    *(_QWORD *)(result + 48) = v6;
  }
  *(_DWORD *)(result + 72) = *((_DWORD *)a2 + 18);
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::LmeDataFactory,std::allocator<quasar::LmeDataFactory>,std::string const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xAF0uLL);
  result = std::__shared_ptr_emplace<quasar::LmeDataFactory>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::LmeDataFactory>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AD7D0648(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::LmeDataFactory>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::LmeDataFactory>,0>(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E5D42988;
  a1[1] = 0;
  std::allocator<quasar::LmeDataFactory>::construct[abi:ne180100]<quasar::LmeDataFactory,std::string const&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1AD7D06A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LmeDataFactory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42988;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LmeDataFactory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42988;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::LmeDataFactory>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<quasar::LmeDataFactory>::construct[abi:ne180100]<quasar::LmeDataFactory,std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[3];
  void **v4;

  memset(v3, 0, sizeof(v3));
  quasar::LmeDataFactory::LmeDataFactory(a2, a3, 1, 1, v3);
  v4 = (void **)v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void sub_1AD7D0764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::GlobalLRUCache<std::string,std::vector<std::string>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D428E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::GlobalLRUCache<std::string,std::vector<std::string>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D428E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::GlobalLRUCache<std::string,std::vector<std::string>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *quasar::GlobalLRUCache<std::string,std::vector<std::string>>::~GlobalLRUCache(_QWORD *a1)
{
  uint64_t *v2;

  *a1 = &unk_1E5D35128;
  v2 = a1 + 2;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 5));
  std::__list_imp<std::pair<std::string,std::vector<std::string>>>::clear(v2);
  return a1;
}

void quasar::GlobalLRUCache<std::string,std::vector<std::string>>::~GlobalLRUCache(_QWORD *a1)
{
  uint64_t *v1;

  *a1 = &unk_1E5D35128;
  v1 = a1 + 2;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 5));
  std::__list_imp<std::pair<std::string,std::vector<std::string>>>::clear(v1);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::GlobalLRUCache<std::string,std::vector<std::string>>::insert(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  _QWORD *v6;
  unsigned __int8 *v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  std::string __p;
  __int128 v16;
  uint64_t v17;
  void **v18;

  v6 = (_QWORD *)(a1 + 40);
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 40), a2);
  if (v7)
  {
    v8 = (uint64_t *)*((_QWORD *)v7 + 5);
    v9 = *v8;
    *(_QWORD *)(v9 + 8) = v8[1];
    *(_QWORD *)v8[1] = v9;
    --*(_QWORD *)(a1 + 32);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(v8 + 2));
    operator delete(v8);
    std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__erase_unique<std::string>(v6, a2);
  }
  std::pair<std::string,std::vector<std::string>>::pair[abi:ne180100]<true,0>(&__p, (__int128 *)a2, a3);
  v10 = (char *)operator new(0x40uLL);
  *(std::string *)(v10 + 16) = __p;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)(v10 + 40) = v16;
  *((_QWORD *)v10 + 7) = v17;
  __p.__r_.__value_.__r.__words[2] = 0;
  v16 = 0uLL;
  v17 = 0;
  v11 = *(_QWORD **)(a1 + 24);
  *(_QWORD *)v10 = a1 + 16;
  *((_QWORD *)v10 + 1) = v11;
  *v11 = v10;
  v12 = *(_QWORD *)(a1 + 32) + 1;
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v12;
  v18 = (void **)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v13 = *(_QWORD *)(a1 + 24);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v6, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 5) = v13;
  if (*(_QWORD *)(a1 + 64) > (unint64_t)*(int *)(a1 + 12))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__erase_unique<std::string>(v6, (unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 16));
    std::list<std::pair<std::string,std::vector<std::string>>>::pop_back((uint64_t **)(a1 + 16));
  }
  return 0;
}

void sub_1AD7D09D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::pair<std::string,std::vector<std::string>>::~pair((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL quasar::GlobalLRUCache<std::string,std::vector<std::string>>::exists(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  *a3 = 0;
  return std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 40), a2) != 0;
}

std::string *quasar::GlobalLRUCache<std::string,std::vector<std::string>>::get@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, _DWORD *a3@<X2>, std::string *a4@<X8>)
{
  std::string *result;
  std::string *v7;
  std::string::size_type v8;

  *a3 = 0;
  result = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 40), a2);
  if (result)
  {
    v7 = result;
    std::list<std::pair<std::string,std::vector<std::string>>>::splice(a1 + 16, *(uint64_t **)(a1 + 24), a1 + 16, (uint64_t *)result[1].__r_.__value_.__r.__words[2]);
    v8 = v7[1].__r_.__value_.__r.__words[2];
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
    return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a4, *(__int128 **)(v8 + 40), *(__int128 **)(v8 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v8 + 48) - *(_QWORD *)(v8 + 40)) >> 3));
  }
  else
  {
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
  }
  return result;
}

uint64_t quasar::GlobalLRUCache<std::string,std::vector<std::string>>::mget(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v11;
  std::string v12;
  std::string __p;
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  int v17;
  std::string *v18;

  v3 = *a2;
  if (a2[1] != *a2)
  {
    v7 = 0;
    v8 = 0;
    v17 = 0;
    do
    {
      (*(void (**)(__int128 **__return_ptr, uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 32))(&v15, a1, v3 + v7, &v17);
      v9 = *a2;
      v11 = v17;
      memset(&v12, 0, sizeof(v12));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, v15, v16, 0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)v15) >> 3));
      std::pair<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>::pair[abi:ne180100]<std::string const&,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>,0>(&__p, (__int128 *)(v9 + v7), (uint64_t)&v11);
      std::__tree<std::__value_type<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>>(a3, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
      v18 = (std::string *)&v14;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v18 = &v12;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v15;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      ++v8;
      v3 = *a2;
      v7 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v8);
  }
  return 0;
}

void sub_1AD7D0BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  std::pair<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>::~pair((uint64_t)&a13);
  *(_QWORD *)(v21 - 88) = v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  a13 = (void **)&a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void std::__list_imp<std::pair<std::string,std::vector<std::string>>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t std::pair<std::string,std::vector<std::string>>::~pair(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void std::list<std::pair<std::string,std::vector<std::string>>>::pop_back(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = *a1;
  v2 = **a1;
  *(_QWORD *)(v2 + 8) = (*a1)[1];
  *(_QWORD *)v1[1] = v2;
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(v1 + 2));
  operator delete(v1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__erase_unique<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t *result;

  result = (uint64_t *)std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void **v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::remove(a1, a2, (uint64_t)&__p);
  v3 = (void **)__p;
  __p = 0;
  if (v3)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  return v2;
}

std::string *std::pair<std::string,std::vector<std::string>>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, __int128 **a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 1, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return this;
}

void sub_1AD7D0E08(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1AD7D0EB0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::list<std::pair<std::string,std::vector<std::string>>>::splice(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 != a4)
  {
    v4 = (uint64_t *)a4[1];
    if (v4 != a2)
    {
      v5 = *a4;
      *(_QWORD *)(v5 + 8) = v4;
      *(_QWORD *)a4[1] = v5;
      v6 = *a2;
      *(_QWORD *)(v6 + 8) = a4;
      *a4 = v6;
      *a2 = (uint64_t)a4;
      a4[1] = (uint64_t)a2;
      --*(_QWORD *)(a3 + 16);
      ++*(_QWORD *)(result + 16);
    }
  }
  return result;
}

uint64_t std::pair<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>::~pair(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_OWORD *std::__tree<std::__value_type<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x58uLL);
    v9[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *((_DWORD *)v6 + 14) = *(_DWORD *)(a3 + 24);
    v6[4] = *(_OWORD *)(a3 + 32);
    *((_QWORD *)v6 + 10) = *(_QWORD *)(a3 + 48);
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    v10 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

std::string *std::pair<std::string,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>>::pair[abi:ne180100]<std::string const&,std::pair<quasar::PronCache<std::string,std::vector<std::string>>::ErrorCode,std::vector<std::string>>,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *(_DWORD *)a3;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = *(_OWORD *)(a3 + 8);
  this[2].__r_.__value_.__r.__words[0] = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  return this;
}

void std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<quasar::LmeDataFactoryBase::Word>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(a2 + 56, *(char **)(a2 + 64));
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::__tree<std::string>::__move_assign(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  std::__tree<std::string>::destroy(a1, *(char **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string const&,std::string const&,int,std::set<std::string> &>(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  void *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v7 = v6 + 1;
  if (v6 + 1 > 0x333333333333333)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v7)
    v7 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v12 = 0x333333333333333;
  else
    v12 = v7;
  v20 = a1 + 2;
  if (v12)
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v12);
  else
    v13 = 0;
  v16 = v13;
  v17 = &v13[80 * v6];
  v19 = &v13[80 * v12];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string const&,std::string const&,int,std::set<std::string> &>((uint64_t)(a1 + 2), (uint64_t)v17, a2, a3, a4, a5);
  v18 = v17 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v16);
  v14 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v16);
  return v14;
}

void sub_1AD7D1498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string const&,std::string const&,int,std::set<std::string> &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  std::string __p;
  std::string v11;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v11 = *(std::string *)a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  quasar::LmeDataFactoryBase::Word::Word(a2, &v11, &__p, *a5, a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1AD7D156C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::LmeDataFactoryBase::Word>,std::reverse_iterator<quasar::LmeDataFactoryBase::Word*>,std::reverse_iterator<quasar::LmeDataFactoryBase::Word*>,std::reverse_iterator<quasar::LmeDataFactoryBase::Word*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::LmeDataFactoryBase::Word>,std::reverse_iterator<quasar::LmeDataFactoryBase::Word*>,std::reverse_iterator<quasar::LmeDataFactoryBase::Word*>,std::reverse_iterator<quasar::LmeDataFactoryBase::Word*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 80);
      *(_QWORD *)(v7 - 64) = *(_QWORD *)(a3 - 64);
      *(_OWORD *)(v7 - 80) = v8;
      *(_QWORD *)(a3 - 72) = 0;
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 80) = 0;
      v9 = *(_OWORD *)(a3 - 56);
      *(_QWORD *)(v7 - 40) = *(_QWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v9;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_DWORD *)(v7 - 32) = *(_DWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      v10 = (_QWORD *)(a3 - 16);
      v11 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 16) = v11;
      v12 = v7 - 16;
      v13 = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(v7 - 8) = v13;
      if (v13)
      {
        *(_QWORD *)(v11 + 16) = v12;
        *(_QWORD *)(a3 - 24) = v10;
        *v10 = 0;
        *(_QWORD *)(a3 - 8) = 0;
      }
      else
      {
        *(_QWORD *)(v7 - 24) = v12;
      }
      a3 -= 80;
      v7 = *((_QWORD *)&v19 + 1) - 80;
      *((_QWORD *)&v19 + 1) -= 80;
    }
    while (a3 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeDataFactoryBase::Word>,std::reverse_iterator<quasar::LmeDataFactoryBase::Word*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeDataFactoryBase::Word>,std::reverse_iterator<quasar::LmeDataFactoryBase::Word*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeDataFactoryBase::Word>,std::reverse_iterator<quasar::LmeDataFactoryBase::Word*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeDataFactoryBase::Word>,std::reverse_iterator<quasar::LmeDataFactoryBase::Word*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::LmeDataFactoryBase::Word>::destroy[abi:ne180100](v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::LmeDataFactoryBase::Word>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 80;
    std::allocator<quasar::LmeDataFactoryBase::Word>::destroy[abi:ne180100](v4, i - 80);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1AD7D1924(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

std::string *std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::LmeDataFactoryBase::Word> const&>(uint64_t a1, __int128 **a2)
{
  std::string *v3;
  std::string *result;

  v3 = *(std::string **)(a1 + 8);
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  result = std::vector<quasar::LmeDataFactoryBase::Word>::__init_with_size[abi:ne180100]<quasar::LmeDataFactoryBase::Word*,quasar::LmeDataFactoryBase::Word*>(v3, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * (a2[1] - *a2));
  *(_QWORD *)(a1 + 8) = v3 + 1;
  return result;
}

void sub_1AD7D19D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__push_back_slow_path<std::vector<quasar::LmeDataFactoryBase::Word> const&>(uint64_t *a1, __int128 **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  uint64_t v12;
  void *v14[2];
  std::string *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  std::vector<quasar::LmeDataFactoryBase::Word>::__init_with_size[abi:ne180100]<quasar::LmeDataFactoryBase::Word*,quasar::LmeDataFactoryBase::Word*>(v11, *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * (a2[1] - *a2));
  ++v15;
  std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<quasar::LmeDataFactoryBase::Word>>::~__split_buffer(v14);
  return v12;
}

void sub_1AD7D1AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::LmeDataFactoryBase::Word>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

std::string *std::vector<quasar::LmeDataFactoryBase::Word>::__init_with_size[abi:ne180100]<quasar::LmeDataFactoryBase::Word*,quasar::LmeDataFactoryBase::Word*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmeDataFactoryBase::Word>,quasar::LmeDataFactoryBase::Word*,quasar::LmeDataFactoryBase::Word*,quasar::LmeDataFactoryBase::Word*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1AD7D1B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::LmeDataFactoryBase::Word>,quasar::LmeDataFactoryBase::Word*,quasar::LmeDataFactoryBase::Word*,quasar::LmeDataFactoryBase::Word*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  int v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = a1;
    do
    {
      std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::Word&>(v7, v4, v6);
      v6 += 5;
      v4 = (std::string *)((char *)v12 + 80);
      v12 = (std::string *)((char *)v12 + 80);
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeDataFactoryBase::Word>,quasar::LmeDataFactoryBase::Word*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1AD7D1C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeDataFactoryBase::Word>,quasar::LmeDataFactoryBase::Word*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::Word&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  __int128 v6;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = *((_DWORD *)a3 + 12);
  return std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100]((uint64_t *)&this[2].__r_.__value_.__l.__size_, (uint64_t)a3 + 56);
}

void sub_1AD7D1CBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::pair<quasar::PronType,std::string>,float>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__tree_node<std::__value_type<std::pair<quasar::PronType,std::string>,float>,void *> *,long>>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1AD7D1D2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::pair<quasar::PronType,std::string>,float>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__tree_node<std::__value_type<std::pair<quasar::PronType,std::string>,float>,void *> *,long>>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__emplace_hint_unique_key_args<std::pair<quasar::PronType,std::string>,std::pair<std::pair<quasar::PronType,std::string> const,float> const&>(v5, v6, (uint64_t)(v4 + 4), (uint64_t)(v4 + 4));
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__emplace_hint_unique_key_args<std::pair<quasar::PronType,std::string>,std::pair<std::pair<quasar::PronType,std::string> const,float> const&>(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__find_equal<std::pair<quasar::PronType,std::string>>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__construct_node<std::pair<std::pair<quasar::PronType,std::string> const,float> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__find_equal<std::pair<quasar::PronType,std::string>>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2
    || std::less<std::pair<quasar::PronType,std::string>>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (uint64_t)(a2 + 4)))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (std::less<std::pair<quasar::PronType,std::string>>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(v12 + 4), a5))goto LABEL_16;
    return std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__find_equal<std::pair<quasar::PronType,std::string>>((uint64_t)a1, a3, a5);
  }
  if (std::less<std::pair<quasar::PronType,std::string>>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(a2 + 4), a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::pair<quasar::PronType,std::string>>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (uint64_t)(v15 + 4)))return std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__find_equal<std::pair<quasar::PronType,std::string>>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

_DWORD *std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__construct_node<std::pair<std::pair<quasar::PronType,std::string> const,float> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;
  _DWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = quasar::PronChoice::PronChoice(v6 + 8, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1AD7D2044(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<quasar::PronType,std::string>,float>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__find_equal<std::pair<quasar::PronType,std::string>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (uint64_t)(v4 + 4);
        if (!std::less<std::pair<quasar::PronType,std::string>>::operator()[abi:ne180100](v7, a3, (uint64_t)(v4 + 4)))break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::pair<quasar::PronType,std::string>>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t std::less<std::pair<quasar::PronType,std::string>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  const void *v5;
  const void *v6;
  int v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  int v11;
  size_t v12;
  const void *v13;
  size_t v14;
  const void *v15;
  size_t v16;
  int v17;

  if (*(_DWORD *)a2 < *(_DWORD *)a3)
    return 1;
  if (*(_DWORD *)a3 < *(_DWORD *)a2)
    return 0;
  v6 = *(const void **)(a3 + 8);
  v4 = a3 + 8;
  v5 = v6;
  v7 = *(char *)(v4 + 23);
  v10 = *(const void **)(a2 + 8);
  v8 = a2 + 8;
  v9 = v10;
  v11 = *(char *)(v8 + 23);
  if (v11 >= 0)
    v12 = *(unsigned __int8 *)(v8 + 23);
  else
    v12 = *(_QWORD *)(v8 + 8);
  if (v11 >= 0)
    v13 = (const void *)v8;
  else
    v13 = v9;
  if (v7 >= 0)
    v14 = *(unsigned __int8 *)(v4 + 23);
  else
    v14 = *(_QWORD *)(v4 + 8);
  if (v7 >= 0)
    v15 = (const void *)v4;
  else
    v15 = v5;
  if (v14 >= v12)
    v16 = v12;
  else
    v16 = v14;
  v17 = memcmp(v13, v15, v16);
  if (v17)
    return v17 < 0;
  else
    return v12 < v14;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<quasar::PronType,std::string>,float>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 63) < 0)
      operator delete(__p[5]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeDataFactoryBase::Word>,quasar::LmeDataFactoryBase::Word*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeDataFactoryBase::Word>,quasar::LmeDataFactoryBase::Word*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeDataFactoryBase::Word>,quasar::LmeDataFactoryBase::Word*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 80;
      std::allocator<quasar::LmeDataFactoryBase::Word>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::LmeDataFactoryBase::Word>>,std::reverse_iterator<std::vector<quasar::LmeDataFactoryBase::Word>*>,std::reverse_iterator<std::vector<quasar::LmeDataFactoryBase::Word>*>,std::reverse_iterator<std::vector<quasar::LmeDataFactoryBase::Word>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<quasar::LmeDataFactoryBase::Word>>,std::reverse_iterator<std::vector<quasar::LmeDataFactoryBase::Word>*>,std::reverse_iterator<std::vector<quasar::LmeDataFactoryBase::Word>*>,std::reverse_iterator<std::vector<quasar::LmeDataFactoryBase::Word>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmeDataFactoryBase::Word>>,std::reverse_iterator<std::vector<quasar::LmeDataFactoryBase::Word>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmeDataFactoryBase::Word>>,std::reverse_iterator<std::vector<quasar::LmeDataFactoryBase::Word>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmeDataFactoryBase::Word>>,std::reverse_iterator<std::vector<quasar::LmeDataFactoryBase::Word>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<quasar::LmeDataFactoryBase::Word>>,std::reverse_iterator<std::vector<quasar::LmeDataFactoryBase::Word>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<quasar::LmeDataFactoryBase::Word>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<quasar::LmeDataFactoryBase::Word>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<quasar::LmeDataFactoryBase::Word>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<quasar::LmeDataFactoryBase::Word>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t quasar::WatermarkDetector::WatermarkDetector(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = quasar::Decoder::Decoder(a1, a2);
  *(_QWORD *)v3 = &off_1E5D36810;
  *(_OWORD *)(v3 + 448) = xmmword_1AE140DA0;
  *(_QWORD *)(v3 + 464) = 0xA23000016D5;
  *(_QWORD *)(v3 + 472) = 0x4023CCCCCCCCCCCDLL;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v3 + 480), "VoiceTrigger");
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_DWORD *)(a1 + 536) = 1065353216;
  *(_QWORD *)(a1 + 544) = 0;
  v4 = *(unsigned int *)(a1 + 468);
  v5 = *(unsigned int *)(a1 + 464);
  v6 = *(unsigned int *)(a1 + 460);
  v7 = *(unsigned int *)(a1 + 456);
  v8 = *(unsigned int *)(a1 + 452);
  v9 = *(unsigned int *)(a1 + 448);
  v10 = operator new();
  *(_QWORD *)v10 = v4 | (v5 << 32);
  *(_QWORD *)(v10 + 8) = v6 | (v7 << 32);
  *(_QWORD *)(v10 + 16) = v8 | (v9 << 32);
  *(_DWORD *)(v10 + 24) = 11;
  *(_QWORD *)(v10 + 32) = 0x40036A4A8C154C98;
  *(_BYTE *)(v10 + 40) = 0;
  v11 = *(_QWORD *)(a1 + 544);
  *(_QWORD *)(a1 + 544) = v10;
  if (v11)
    MEMORY[0x1AF44D190](v11, 0x1000C40D39BF8FDLL);
  return a1;
}

void sub_1AD7D25A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *(_QWORD *)(v1 + 544);
  *(_QWORD *)(v1 + 544) = 0;
  if (v5)
    MEMORY[0x1AF44D190](v5, 0x1000C40D39BF8FDLL);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v3);
  if (*(char *)(v1 + 503) < 0)
    operator delete(*v2);
  quasar::Decoder::~Decoder((void **)v1);
  _Unwind_Resume(a1);
}

void quasar::WatermarkDetector::finishInit(quasar::WatermarkDetector *this)
{
  const std::string *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  char *v5;
  void *__p[2];
  char v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;

  v2 = (const std::string *)((char *)this + 480);
  std::string::basic_string[abi:ne180100]<0>(__p, ",");
  quasar::splitAndTrimNoEmpty(v2, (char *)__p, &v8);
  if (v7 < 0)
    operator delete(__p[0]);
  v3 = v8;
  v4 = v9;
  if (v8 != v9)
  {
    v5 = (char *)this + 504;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v5, v3, (uint64_t)v3);
      v3 += 24;
    }
    while (v3 != v4);
  }
  __p[0] = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1AD7D2694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::WatermarkDetector::runImpl(uint64_t a1, uint64_t a2, uint64_t *a3, quasar::SpeechRequestData **a4)
{
  _QWORD *v7;
  unsigned __int8 *InputOrigin;
  double v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  quasar::SpeechRequestData *v15;
  uint64_t *MultiBuffer;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  double v21;
  double v22;
  double v23;
  double v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  const char *v34;
  size_t v35;
  std::string v37;
  int32x2_t v38[5];
  _BYTE v39[120];
  _QWORD v40[3];
  void *v41;
  _BYTE *v42;
  __int128 v43;
  int v44;
  char v45;
  void *v46;
  char v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  char v51;
  __int128 __p;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;

  v7 = (_QWORD *)(a1 + 504);
  InputOrigin = (unsigned __int8 *)quasar::SpeechRequestData::getInputOrigin(*a4);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v7, InputOrigin))
  {
    if (quasar::gLogLevel >= 4)
    {
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"WatermarkDetector not run on input origin ", 42);
      v11 = quasar::SpeechRequestData::getInputOrigin(*a4);
      v12 = *(char *)(v11 + 23);
      if (v12 >= 0)
        v13 = v11;
      else
        v13 = *(_QWORD *)v11;
      if (v12 >= 0)
        v14 = *(unsigned __int8 *)(v11 + 23);
      else
        v14 = *(_QWORD *)(v11 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v13, v14);
      goto LABEL_13;
    }
LABEL_14:
    *(_DWORD *)(*a3 + 684) = 0;
    return 0;
  }
  v9 = (double)quasar::SpeechRequestData::getEndpointStartMs(*a4) / 1000.0;
  if (v9 > 5.0)
  {
    if (quasar::gLogLevel >= 4)
    {
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"WatermarkDetector: not enough audio cached.", 43);
LABEL_13:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
      goto LABEL_14;
    }
    goto LABEL_14;
  }
  v43 = xmmword_1AE140DB0;
  v44 = 1064849900;
  v45 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v46, "povey");
  v48 = 257;
  v49 = 3212836864;
  v50 = 0;
  v51 = 1;
  v15 = *a4;
  *(float *)&v43 = (float)*(unsigned int *)(*((_QWORD *)*a4 + 3) + 24);
  v44 = 1065353216;
  MultiBuffer = (uint64_t *)quasar::SpeechRequestData::getMultiBuffer(v15);
  quasar::MultiAudioBuffer::getBuffer(*MultiBuffer, 0, &__p);
  quasar::RecogAudioBuffer::getRawAudioCache((quasar::RecogAudioBuffer *)__p, &v41);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (int)(v9 * (float)*(unsigned int *)(*((_QWORD *)*a4 + 3) + 24));
  if (v20 <= (unint64_t)((v42 - (_BYTE *)v41) >> 2))
  {
    v40[2] = 0;
    v40[0] = v41;
    v40[1] = v20;
    kaldi::Spectrogram::Spectrogram(v39, &v43);
    kaldi::Matrix<float>::Matrix((uint64_t)v38);
    kaldi::Spectrogram::Compute((uint64_t)v39, (uint64_t)v40, v38, 0);
    quasar::NotchDetector::measureNotch(*(int **)(a1 + 544), (uint64_t)v38, (float)*(unsigned int *)(*((_QWORD *)*a4 + 3) + 24));
    v23 = v22;
    v24 = v21;
    if (v21 < *(double *)(a1 + 472))
      v25 = 1;
    else
      v25 = 2;
    v26 = *a3;
    *(_DWORD *)(v26 + 684) = v25;
    *(double *)(v26 + 688) = v21;
    v27 = *(_QWORD *)(v26 + 424);
    std::string::basic_string[abi:ne180100]<0>(&__p, "WatermarkPeakAvg");
    quasar::SpeechRequestResultData::addDumpAA(v27, &__p, 1, v24);
    if (SBYTE7(v53) < 0)
      operator delete((void *)__p);
    v28 = *(_QWORD *)(*a3 + 424);
    std::string::basic_string[abi:ne180100]<0>(&__p, "WatermarkPeakMax");
    quasar::SpeechRequestResultData::addDumpAA(v28, &__p, 1, v23);
    if (SBYTE7(v53) < 0)
      operator delete((void *)__p);
    v29 = *(_QWORD *)(*a3 + 424);
    std::string::basic_string[abi:ne180100]<0>(&__p, "WatermarkDetected");
    v30 = (char *)quasar::fingerprintDetectionResultString(*(_DWORD *)(*a3 + 684));
    std::string::basic_string[abi:ne180100]<0>(&v37, v30);
    quasar::SpeechRequestResultData::addDumpAA(v29, &__p, &v37);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SBYTE7(v53) < 0)
      operator delete((void *)__p);
    if (quasar::gLogLevel >= 4)
    {
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"WatermarkDetector peakMax=", 26);
      v31 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", peakAvg=", 10);
      v32 = (_QWORD *)std::ostream::operator<<();
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", detected=", 11);
      v34 = quasar::fingerprintDetectionResultString(*(_DWORD *)(*a3 + 684));
      v35 = strlen(v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
    }
    kaldi::Matrix<float>::~Matrix((uint64_t)v38);
    kaldi::Spectrogram::~Spectrogram((kaldi::Spectrogram *)v39);
  }
  else
  {
    if (quasar::gLogLevel >= 4)
    {
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"WatermarkDetector: not enough audio cached.", 43);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
    }
    *(_DWORD *)(*a3 + 684) = 0;
  }
  if (v41)
  {
    v42 = v41;
    operator delete(v41);
  }
  if (v47 < 0)
    operator delete(v46);
  return 0;
}

void sub_1AD7D2BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  kaldi::Matrix<float>::~Matrix((uint64_t)&a16);
  kaldi::Spectrogram::~Spectrogram((kaldi::Spectrogram *)&a21);
  if (__p)
  {
    a40 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a50 < 0)
    operator delete(a45);
  _Unwind_Resume(a1);
}

void quasar::WatermarkDetector::registerParams(quasar::WatermarkDetector *this, quasar::SystemConfig *a2)
{
  void *v4[2];
  char v5;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "watermark-detector");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 105, 0, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "watermark-detector");
  quasar::SystemConfig::enforceMaxVersion((uint64_t)a2, 145, 0, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "above-hi");
  std::string::basic_string[abi:ne180100]<0>(v4, "Frequency (in Hz) of top of upper band");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 448, (uint64_t)v4, 0, 105, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "above-lo");
  std::string::basic_string[abi:ne180100]<0>(v4, "Frequency (in Hz) of bottom of upper band");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 452, (uint64_t)v4, 0, 105, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "notch-hi");
  std::string::basic_string[abi:ne180100]<0>(v4, "Frequency (in Hz) of top of notch");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 456, (uint64_t)v4, 0, 105, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "notch-lo");
  std::string::basic_string[abi:ne180100]<0>(v4, "Frequency (in Hz) of bottom of notch");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 460, (uint64_t)v4, 0, 105, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "below-hi");
  std::string::basic_string[abi:ne180100]<0>(v4, "Frequency (in Hz) of top of lower band");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 464, (uint64_t)v4, 0, 105, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "below-lo");
  std::string::basic_string[abi:ne180100]<0>(v4, "Frequency (in Hz) of bottom of lower band");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 468, (uint64_t)v4, 0, 105, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "supported-input-origins-list");
  std::string::basic_string[abi:ne180100]<0>(v4, "The input origins that are supported (should be comma separated)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 480, (uint64_t)v4, 0, 105, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "watermark-threshold");
  std::string::basic_string[abi:ne180100]<0>(v4, "Average notch threshold value to detect a watermark");
  quasar::SystemConfig::Register<double>((uint64_t)a2, (const void **)__p, (uint64_t)this + 472, (uint64_t)v4, 0, 105, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1AD7D3154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::Register<double>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t *v15;
  uint64_t *v16;
  uint64_t **v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  void **v21;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  quasar::SystemConfig::Version::Version(&v20, a6, a7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v21 = __p;
  v15 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1464), (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
  v15[7] = v20;
  if (v19 < 0)
    operator delete(__p[0]);
  quasar::SystemConfig::Version::Version(&v20, a8, a9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v21 = __p;
  v16 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1488), (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
  v16[7] = v20;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (!a5)
      return;
  }
  else if (!a5)
  {
    return;
  }
  __p[0] = (void *)(a1 + 816);
  v17 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1512), (const void **)(a1 + 816), (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v17, (const void **)__p, (uint64_t)__p);
  if (v19 < 0)
    operator delete(__p[0]);
}

void sub_1AD7D334C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::WatermarkDetector::affectsRecognitionResults(quasar::WatermarkDetector *this)
{
  return 1;
}

uint64_t quasar::WatermarkDetector::supportsEager(quasar::WatermarkDetector *this)
{
  return 1;
}

uint64_t quasar::WatermarkDetector::decoderNeedsCachedRawAudio(quasar::WatermarkDetector *this)
{
  return 1;
}

void quasar::WatermarkDetector::~WatermarkDetector(quasar::WatermarkDetector *this)
{
  quasar::WatermarkDetector::~WatermarkDetector(this);
  JUMPOUT(0x1AF44D190);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E5D36810;
  v2 = *((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = 0;
  if (v2)
    MEMORY[0x1AF44D190](v2, 0x1000C40D39BF8FDLL);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 504);
  if (*((char *)this + 503) < 0)
    operator delete(*((void **)this + 60));
  quasar::Decoder::~Decoder((void **)this);
}

uint64_t Array<double>::alloc(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = (a2 + (*(_DWORD *)(a1 + 16) >> 1) + 1);
  v6 = (_QWORD *)operator new[]();
  v7 = v6;
  if (a3)
    bzero(v6, 8 * v5);
  v8 = *(unsigned int *)(a1 + 16);
  result = *(_QWORD *)(a1 + 8);
  if ((_DWORD)v8)
  {
    v10 = v7;
    v11 = *(uint64_t **)(a1 + 8);
    do
    {
      v12 = *v11++;
      *v10++ = v12;
      --v8;
    }
    while (v8);
    goto LABEL_8;
  }
  if (result)
LABEL_8:
    result = MEMORY[0x1AF44D160](result, 0x1000C8000313F17);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = v5;
  return result;
}

uint64_t Array<double>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  if (a2 != a1)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8000313F17);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 4);
    v5 = (_QWORD *)operator new[]();
    *(_QWORD *)(a1 + 8) = v5;
    v6 = *(unsigned int *)(a1 + 4);
    if ((_DWORD)v6)
    {
      v7 = *(uint64_t **)(a2 + 8);
      do
      {
        v8 = *v7++;
        *v5++ = v8;
        --v6;
      }
      while (v6);
    }
  }
  return a1;
}

uint64_t Array<double>::operator[](int *a1, uint64_t a2)
{
  unint64_t v3;

  v3 = a2 - *a1;
  if (v3 >= a1[1])
  {
    a1[1] = v3 + 1;
    if (v3 >= a1[4])
      Array<double>::alloc((uint64_t)a1, v3, 0);
  }
  return *((_QWORD *)a1 + 1) + 8 * v3;
}

uint64_t Discount::vocabSize(Discount *this, Vocab *a2)
{
  uint64_t v3;
  unsigned int v5;
  _BYTE v6[32];

  VocabIter::VocabIter((VocabIter *)v6, this, 0);
  v3 = 0;
  v5 = 0;
  while (VocabIter::next((VocabIter *)v6, &v5))
  {
    if ((*(unsigned int (**)(Discount *, _QWORD))(*(_QWORD *)this + 176))(this, v5))
      v3 = v3;
    else
      v3 = (v3 + 1);
  }
  LHashIter<char const*,unsigned int>::~LHashIter((uint64_t)v6);
  return v3;
}

void sub_1AD7D362C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  LHashIter<char const*,unsigned int>::~LHashIter((uint64_t)va);
  _Unwind_Resume(a1);
}

void GoodTuring::GoodTuring(GoodTuring *this, unsigned int a2, unsigned int a3)
{
  *((_BYTE *)this + 8) = 0;
  *((_DWORD *)this + 3) = 0;
  *((_QWORD *)this + 2) = MEMORY[0x1E0DE4A50];
  *((_BYTE *)this + 24) = 0;
  *(_QWORD *)this = &off_1E5D157F0;
  *((_QWORD *)this + 4) = a2;
  *((_QWORD *)this + 5) = a3;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 6) = 0;
  *(_QWORD *)Array<double>::operator[]((int *)this + 12, 0) = 0x3FF0000000000000;
}

void sub_1AD7D36AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 56);
  if (v3)
    MEMORY[0x1AF44D160](v3, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

double GoodTuring::discount(GoodTuring *this, unint64_t a2)
{
  double result;

  result = 1.0;
  if (a2)
  {
    result = 0.0;
    if (*((_QWORD *)this + 4) <= a2)
    {
      result = 1.0;
      if (*((_QWORD *)this + 5) >= a2)
        return *(double *)Array<double>::operator[]((int *)this + 12, a2);
    }
  }
  return result;
}

BOOL GoodTuring::nodiscount(GoodTuring *this)
{
  return *((_QWORD *)this + 4) <= 1uLL && *((_QWORD *)this + 5) == 0;
}

BOOL GoodTuring::write(GoodTuring *this, File *a2)
{
  _BOOL8 result;
  unsigned int v5;
  double *v6;

  snprintf(ctsBuffer, 0x64uLL, "%lu", *((_QWORD *)this + 4));
  File::fprintf(a2, "mincount %s\n", ctsBuffer);
  snprintf(ctsBuffer, 0x64uLL, "%lu", *((_QWORD *)this + 5));
  File::fprintf(a2, "maxcount %s\n", ctsBuffer);
  result = File::error(a2);
  if (!result)
  {
    v5 = 1;
    do
    {
      if (*((_QWORD *)this + 5) < (unint64_t)v5)
        break;
      v6 = (double *)Array<double>::operator[]((int *)this + 12, v5);
      File::fprintf(a2, "discount %u %lf\n", v5++, *v6);
      result = File::error(a2);
    }
    while (!result);
  }
  return result;
}

uint64_t GoodTuring::read(GoodTuring *this, File *a2)
{
  char *v4;
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  char v19[100];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = File::getline(a2);
  if (!v4)
  {
LABEL_18:
    v10 = *((_QWORD *)this + 4);
    if (v10 <= *((_QWORD *)this + 5))
    {
      v11 = (_QWORD *)MEMORY[0x1E0DE4A50];
      do
      {
        if (*(double *)Array<double>::operator[]((int *)this + 12, v10) == 0.0)
        {
          v12 = File::position((const char **)a2, v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"warning: discount coefficient ", 30);
          v13 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" = 0.0\n", 7);
        }
        ++v10;
      }
      while (v10 <= *((_QWORD *)this + 5));
    }
    return 1;
  }
  v5 = v4;
  v6 = (unint64_t *)((char *)this + 40);
  while (1)
  {
    v18 = 0;
    v17 = 0;
    if (sscanf(v5, "mincount %99s", v19) == 1 && v19[0] != 45 && sscanf(v19, "%lu", (char *)this + 32) == 1)
      goto LABEL_17;
    if (sscanf(v5, "maxcount %99s", v19) == 1 && v19[0] != 45 && sscanf(v19, "%lu", (char *)this + 40) == 1)
      break;
    if (sscanf(v5, "discount %u %lf", &v18, &v17) != 2)
    {
      v15 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"unrecognized parameter\n", 23);
      return 0;
    }
    if (v18 > 0x64)
    {
      v9 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"warning: count value out of range\n", 34);
    }
    else
    {
      v8 = v17;
      *(_QWORD *)Array<double>::operator[]((int *)this + 12, v18) = v8;
    }
LABEL_17:
    v5 = File::getline(a2);
    if (!v5)
      goto LABEL_18;
  }
  if (*v6 <= 0x64)
  {
    v7 = 0;
    do
      *(_QWORD *)Array<double>::operator[]((int *)this + 12, v7++) = 0;
    while (v7 <= *v6);
    goto LABEL_17;
  }
  v16 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"maxcount value out of range\n", 28);
  return 0;
}

uint64_t GoodTuring::estimate(GoodTuring *this, NgramStats *a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  std::locale::id *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  const std::locale::facet *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  double v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  double v37;
  double v38;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _BYTE v44[80];
  int v45;
  _BYTE v46[12];
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  std::locale v51;

  v48 = 0;
  v49 = 0;
  v50 = 0;
  *(_DWORD *)&v46[8] = 0;
  v47 = 0;
  v45 = 0;
  *(_QWORD *)v46 = (a3 + 1);
  if ((_DWORD)a3 == -1)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    Array<unsigned int>::alloc((uint64_t)&v45, a3, 0);
    v7 = *(_QWORD *)&v46[4];
    v6 = v45;
  }
  TrieIter2<unsigned int,unsigned long>::TrieIter2(v44, (char *)a2 + 160, v7 - 4 * v6, a3, 0);
  v8 = 0;
  do
    *(_QWORD *)Array<unsigned long>::operator[]((int *)&v48, v8++) = 0;
  while (v8 <= *((_QWORD *)this + 5) + 1);
  v9 = a3 - 1;
  while (1)
  {
    v10 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v44);
    if (!v10)
      break;
    if (!(*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)a2 + 3) + 176))(*((_QWORD *)a2 + 3), *(unsigned int *)(*(_QWORD *)&v46[4] + 4 * (v9 - v45))))
    {
      if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)a2 + 3) + 224))(*((_QWORD *)a2 + 3), *(unsigned int *)(*(_QWORD *)&v46[4] + 4 * (v9 - v45))))
      {
        v11 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)a2 + 3) + 232))(*((_QWORD *)a2 + 3), *(unsigned int *)(*(_QWORD *)&v46[4] + 4 * (v9 - v45)));
        if (v11 && *((_QWORD *)this + 5) + 1 >= (unint64_t)v11)
        {
          v12 = *(_QWORD *)(v10 + 8);
          v13 = (_QWORD *)Array<unsigned long>::operator[]((int *)&v48, v11);
          goto LABEL_15;
        }
      }
      else
      {
        v14 = *(_QWORD *)(v10 + 8);
        if (v14 <= *((_QWORD *)this + 5) + 1)
        {
          v13 = (_QWORD *)Array<unsigned long>::operator[]((int *)&v48, v14);
          v12 = 1;
LABEL_15:
          *v13 += v12;
        }
      }
    }
  }
  if (!*((_BYTE *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
  {
    v15 = (_QWORD *)(*(uint64_t (**)(GoodTuring *))(*(_QWORD *)this + 24))(this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Good-Turing discounting ", 24);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"-grams\n", 7);
    v17 = 0;
    v18 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      v19 = (_QWORD *)(*(uint64_t (**)(GoodTuring *))(*(_QWORD *)this + 24))(this);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"GT-count [", 10);
      v20 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"] = ", 4);
      Array<unsigned long>::operator[]((int *)&v48, v17);
      v21 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(*v21 - 24)));
      v22 = std::locale::use_facet(&v51, v18);
      ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
      std::locale::~locale(&v51);
      std::ostream::put();
      std::ostream::flush();
      ++v17;
    }
    while (v17 <= *((_QWORD *)this + 5) + 1);
  }
  if (!*(_QWORD *)Array<unsigned long>::operator[]((int *)&v48, 1))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"warning: no singleton counts\n", 29);
    *((_QWORD *)this + 5) = 0;
LABEL_28:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"GT discounting disabled\n", 24);
    goto LABEL_29;
  }
  v23 = *((_QWORD *)this + 5);
  if (!v23)
    goto LABEL_28;
  v24 = v23 + 1;
  v25 = (_QWORD *)MEMORY[0x1E0DE4A50];
  while (!*(_QWORD *)Array<unsigned long>::operator[]((int *)&v48, v24))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"warning: count of count ", 24);
    v26 = (_QWORD *)std::ostream::operator<<();
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" is zero ", 9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"-- lowering maxcount\n", 21);
    v24 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v24 - 1;
    if (v24 == 1)
      goto LABEL_28;
  }
  v29 = *((_QWORD *)this + 5);
  if (!v29)
    goto LABEL_28;
  v30 = v29 + 1;
  v31 = *(_QWORD *)Array<unsigned long>::operator[]((int *)&v48, v29 + 1);
  v32 = (unint64_t *)Array<unsigned long>::operator[]((int *)&v48, 1);
  if (*((_QWORD *)this + 5))
  {
    v33 = (double)v30 * (double)v31 / (double)*v32;
    v34 = 1;
    v35 = (_QWORD *)MEMORY[0x1E0DE4A50];
    do
    {
      if (*(_QWORD *)Array<unsigned long>::operator[]((int *)&v48, v34))
      {
        v36 = *(_QWORD *)Array<unsigned long>::operator[]((int *)&v48, v34 + 1);
        v37 = (double)(v34 + 1)
            * (double)v36
            / ((double)v34
             * (double)*(unint64_t *)Array<unsigned long>::operator[]((int *)&v48, v34));
        v38 = (v37 - v33) / (1.0 - v33);
        if (COERCE__INT64(fabs(v38)) > 0x7FEFFFFFFFFFFFFFLL || v37 > 1.0 || v38 <= 0.000003)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"warning: discount coeff ", 24);
          v41 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" is out of range: ", 18);
          v42 = (_QWORD *)std::ostream::operator<<();
          v38 = 1.0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"\n", 1);
        }
      }
      else
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"warning: count of count ", 24);
        v43 = (_QWORD *)std::ostream::operator<<();
        v38 = 1.0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" is zero\n", 9);
      }
      *(double *)Array<double>::operator[]((int *)this + 12, v34++) = v38;
    }
    while (v34 <= *((_QWORD *)this + 5));
  }
LABEL_29:
  TrieIter2<unsigned int,unsigned int>::~TrieIter2(v44);
  if (*(_QWORD *)&v46[4])
    MEMORY[0x1AF44D160](*(_QWORD *)&v46[4], 0x1000C8052888210);
  if (v49)
    MEMORY[0x1AF44D160](v49, 0x1000C8000313F17);
  return 1;
}

void sub_1AD7D4070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::locale a25)
{
  TrieIter2<unsigned int,unsigned int>::~TrieIter2(&a9);
  if (a20)
    MEMORY[0x1AF44D160](a20, 0x1000C8052888210);
  if (a23)
    MEMORY[0x1AF44D160](a23, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

double NaturalDiscount::discount(NaturalDiscount *this, unint64_t a2, unint64_t a3, unint64_t a4)
{
  double result;
  double v5;

  result = 0.0;
  if (*((double *)this + 4) <= (double)a2)
  {
    LODWORD(result) = *((_DWORD *)this + 7);
    v5 = (double)*(unint64_t *)&result;
    result = 1.0;
    if ((double)a4 != v5)
      return ((1.0 - (double)a4) * (double)a4 + (double)a3 * ((double)a3 + 1.0))
           / ((double)a4 + (double)a4 + (double)a3 * ((double)a3 + 1.0));
  }
  return result;
}

uint64_t NaturalDiscount::estimate(NaturalDiscount *this, Discount **a2)
{
  *((_DWORD *)this + 7) = Discount::vocabSize(a2[3], (Vocab *)a2);
  return 1;
}

double KneserNey::discount(KneserNey *this, unint64_t a2)
{
  double result;

  if (!a2)
    return 1.0;
  result = 0.0;
  if (*((_QWORD *)this + 4) <= a2)
    return ((double)a2 - *((double *)this + 5)) / (double)a2;
  return result;
}

double KneserNey::lowerOrderWeight(KneserNey *this, unint64_t a2, unint64_t a3)
{
  return *((double *)this + 5) * (double)a3 / (double)a2;
}

uint64_t KneserNey::write(KneserNey *this, File *a2)
{
  snprintf(ctsBuffer, 0x64uLL, "%lu", *((_QWORD *)this + 4));
  File::fprintf(a2, "mincount %s\n", ctsBuffer);
  return File::fprintf(a2, "discount1 %lf\n", *((double *)this + 5));
}

uint64_t KneserNey::read(KneserNey *this, File *a2)
{
  char *v4;
  char *v5;
  _QWORD *v7;
  char v8[100];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = File::getline(a2);
  if (!v4)
    return 1;
  v5 = v4;
  while (sscanf(v5, "mincount %99s", v8) == 1 && v8[0] != 45 && sscanf(v8, "%lu", (char *)this + 32) == 1
       || sscanf(v5, "discount1 %lf", (char *)this + 40) == 1)
  {
    v5 = File::getline(a2);
    if (!v5)
      return 1;
  }
  v7 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"unrecognized parameter\n", 23);
  return 0;
}

uint64_t KneserNey::estimate(KneserNey *this, NgramStats *a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  _QWORD *v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  uint64_t v24;
  _BYTE v26[80];
  int v27;
  _BYTE v28[12];
  int v29;
  std::locale v30;

  if (!*((_BYTE *)this + 49))
    (*(void (**)(KneserNey *, NgramStats *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, a2, a3, *((unsigned int *)a2 + 39));
  *(_DWORD *)&v28[8] = 0;
  v29 = 0;
  v27 = 0;
  *(_QWORD *)v28 = (a3 + 1);
  if ((_DWORD)a3 == -1)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    Array<unsigned int>::alloc((uint64_t)&v27, a3, 0);
    v7 = *(_QWORD *)&v28[4];
    v6 = v27;
  }
  TrieIter2<unsigned int,unsigned long>::TrieIter2(v26, (char *)a2 + 160, v7 - 4 * v6, a3, 0);
  v8 = 0;
  v9 = 0;
  v10 = a3 - 1;
  while (1)
  {
    v11 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v26);
    if (!v11)
      break;
    if (!(*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)a2 + 3) + 176))(*((_QWORD *)a2 + 3), *(unsigned int *)(*(_QWORD *)&v28[4] + 4 * (v10 - v27))))
    {
      if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)a2 + 3) + 224))(*((_QWORD *)a2 + 3), *(unsigned int *)(*(_QWORD *)&v28[4] + 4 * (v10 - v27))))
      {
        v12 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)a2 + 3) + 232))(*((_QWORD *)a2 + 3), *(unsigned int *)(*(_QWORD *)&v28[4] + 4 * (v10 - v27)));
        if (v12 == 1)
          goto LABEL_15;
        if (v12 == 2)
LABEL_16:
          ++v9;
      }
      else
      {
        v13 = *(_QWORD *)(v11 + 8);
        if (v13 == 2)
          goto LABEL_16;
        if (v13 == 1)
LABEL_15:
          ++v8;
      }
    }
  }
  if (!*((_BYTE *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
  {
    v14 = (_QWORD *)(*(uint64_t (**)(KneserNey *))(*(_QWORD *)this + 24))(this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Kneser-Ney smoothing ", 21);
    v15 = (_QWORD *)std::ostream::operator<<();
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"-grams\n", 7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"n1 = ", 5);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
    v18 = std::locale::use_facet(&v30, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
    std::locale::~locale(&v30);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"n2 = ", 5);
    v19 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
    v20 = std::locale::use_facet(&v30, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
    std::locale::~locale(&v30);
    std::ostream::put();
    std::ostream::flush();
  }
  if (v8 && v9)
  {
    *((double *)this + 5) = (double)v8 / ((double)v8 + (double)(unint64_t)(2 * v9));
    if (!*((_BYTE *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
    {
      v21 = (_QWORD *)(*(uint64_t (**)(KneserNey *))(*(_QWORD *)this + 24))(this);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"D = ", 4);
      v22 = (_QWORD *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
      v23 = std::locale::use_facet(&v30, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
      std::locale::~locale(&v30);
      std::ostream::put();
      std::ostream::flush();
    }
    if (*((_BYTE *)this + 49))
      (*(void (**)(KneserNey *, NgramStats *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, a2, a3, *((unsigned int *)a2 + 39));
    v24 = 1;
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"one of required KneserNey count-of-counts is zero\n", 50);
    v24 = 0;
  }
  TrieIter2<unsigned int,unsigned int>::~TrieIter2(v26);
  if (*(_QWORD *)&v28[4])
    MEMORY[0x1AF44D160](*(_QWORD *)&v28[4], 0x1000C8052888210);
  return v24;
}

void sub_1AD7D475C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  std::locale::~locale((std::locale *)(v20 - 72));
  TrieIter2<unsigned int,unsigned int>::~TrieIter2(&a9);
  if (a20)
    MEMORY[0x1AF44D160](a20, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

uint64_t KneserNey::prepareCounts(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Trie;
  _BYTE v14[80];
  int v15;
  _BYTE v16[12];
  int v17;
  char v18;

  if (a3 < a4)
  {
    v4 = result;
    if (!*(_BYTE *)(result + 48))
    {
      if (!*(_BYTE *)(result + 8) && (Debug::debugAll || *(_DWORD *)(result + 12)))
      {
        v7 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"modifying ", 10);
        v8 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"-gram counts for Kneser-Ney smoothing\n", 38);
      }
      *(_DWORD *)&v16[8] = 0;
      v17 = 0;
      v15 = 0;
      *(_QWORD *)v16 = (a3 + 2);
      if ((_DWORD)a3 == -2)
      {
        v10 = 0;
        v9 = 0;
      }
      else
      {
        Array<unsigned int>::alloc((uint64_t)&v15, a3 + 1, 0);
        v9 = *(_QWORD *)&v16[4];
        v10 = v15;
      }
      TrieIter2<unsigned int,unsigned long>::TrieIter2(v14, a2 + 160, v9 - 4 * v10, a3, 0);
      while (1)
      {
        v11 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v14);
        if (!v11)
          break;
        if (!(*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 24) + 176))(*(_QWORD *)(a2 + 24), *(unsigned int *)(*(_QWORD *)&v16[4] - 4 * v15)))*(_QWORD *)(v11 + 8) = 0;
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2(v14);
      TrieIter2<unsigned int,unsigned long>::TrieIter2(v14, a2 + 160, *(_QWORD *)&v16[4] - 4 * v15, (a3 + 1), 0);
      while (1)
      {
        v12 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v14);
        if (!v12)
          break;
        if (*(_QWORD *)(v12 + 8))
        {
          if (!(*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 24) + 176))(*(_QWORD *)(a2 + 24), *(unsigned int *)(*(_QWORD *)&v16[4] + 4 * (1 - v15))))
          {
            v18 = 0;
            Trie = Trie<unsigned int,unsigned int>::findTrie((_DWORD **)(a2 + 160), (unsigned int *)(*(_QWORD *)&v16[4] + 4 * (1 - v15)), &v18);
            if (Trie)
              ++*(_QWORD *)(Trie + 8);
          }
        }
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2(v14);
      *(_BYTE *)(v4 + 48) = 1;
      result = *(_QWORD *)&v16[4];
      if (*(_QWORD *)&v16[4])
        return MEMORY[0x1AF44D160](*(_QWORD *)&v16[4], 0x1000C8052888210);
    }
  }
  return result;
}

void sub_1AD7D49B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a20)
    MEMORY[0x1AF44D160](a20, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

double ModKneserNey::discount(ModKneserNey *this, unint64_t a2)
{
  double result;

  if (!a2)
    return 1.0;
  result = 0.0;
  if (*((_QWORD *)this + 4) <= a2)
  {
    if (a2 == 2)
    {
      return (2.0 - *((double *)this + 7)) * 0.5;
    }
    else if (a2 == 1)
    {
      return 1.0 - *((double *)this + 5);
    }
    else
    {
      return ((double)a2 - *((double *)this + 8)) / (double)a2;
    }
  }
  return result;
}

double ModKneserNey::lowerOrderWeight(ModKneserNey *this, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return (*((double *)this + 7) * (double)(a4 - a5)
        + *((double *)this + 5) * (double)(unint64_t)(a3 - a4)
        + *((double *)this + 8) * (double)a5)
       / (double)a2;
}

uint64_t ModKneserNey::write(ModKneserNey *this, File *a2)
{
  snprintf(ctsBuffer, 0x64uLL, "%lu", *((_QWORD *)this + 4));
  File::fprintf(a2, "mincount %s\n", ctsBuffer);
  File::fprintf(a2, "discount1 %lf\n", *((double *)this + 5));
  File::fprintf(a2, "discount2 %lf\n", *((double *)this + 7));
  return File::fprintf(a2, "discount3+ %lf\n", *((double *)this + 8));
}

uint64_t ModKneserNey::read(ModKneserNey *this, File *a2)
{
  char *v4;
  char *v5;
  _QWORD *v7;
  char v8[100];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = File::getline(a2);
  if (!v4)
    return 1;
  v5 = v4;
  while (sscanf(v5, "mincount %99s", v8) == 1 && v8[0] != 45 && sscanf(v8, "%lu", (char *)this + 32) == 1
       || sscanf(v5, "discount1 %lf", (char *)this + 40) == 1
       || sscanf(v5, "discount2 %lf", (char *)this + 56) == 1
       || sscanf(v5, "discount3+ %lf", (char *)this + 64) == 1)
  {
    v5 = File::getline(a2);
    if (!v5)
      return 1;
  }
  v7 = File::position((const char **)a2, MEMORY[0x1E0DE4A50]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"unrecognized parameter\n", 23);
  return 0;
}

uint64_t ModKneserNey::estimate(ModKneserNey *this, NgramStats *a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  _QWORD *v21;
  const std::locale::facet *v22;
  _QWORD *v23;
  const std::locale::facet *v24;
  double v25;
  double v26;
  _QWORD *v27;
  _QWORD *v28;
  const std::locale::facet *v29;
  _QWORD *v30;
  const std::locale::facet *v31;
  _QWORD *v32;
  const std::locale::facet *v33;
  uint64_t v34;
  _BYTE v36[80];
  int v37;
  _BYTE v38[12];
  int v39;
  std::locale v40;

  if (!*((_BYTE *)this + 49))
    (*(void (**)(ModKneserNey *, NgramStats *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, a2, a3, *((unsigned int *)a2 + 39));
  *(_DWORD *)&v38[8] = 0;
  v39 = 0;
  v37 = 0;
  *(_QWORD *)v38 = (a3 + 1);
  if ((_DWORD)a3 == -1)
  {
    v6 = 0;
    v7 = 0;
  }
  else
  {
    Array<unsigned int>::alloc((uint64_t)&v37, a3, 0);
    v7 = *(_QWORD *)&v38[4];
    v6 = v37;
  }
  TrieIter2<unsigned int,unsigned long>::TrieIter2(v36, (char *)a2 + 160, v7 - 4 * v6, a3, 0);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = a3 - 1;
  while (1)
  {
    v13 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v36);
    if (!v13)
      break;
    if (!(*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)a2 + 3) + 176))(*((_QWORD *)a2 + 3), *(unsigned int *)(*(_QWORD *)&v38[4] + 4 * (v12 - v37))))
    {
      if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)a2 + 3) + 224))(*((_QWORD *)a2 + 3), *(unsigned int *)(*(_QWORD *)&v38[4] + 4 * (v12 - v37))))
      {
        switch((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)a2 + 3) + 232))(*((_QWORD *)a2 + 3), *(unsigned int *)(*(_QWORD *)&v38[4] + 4 * (v12 - v37))))
        {
          case 1u:
            goto LABEL_12;
          case 2u:
            goto LABEL_13;
          case 3u:
            goto LABEL_14;
          case 4u:
            goto LABEL_15;
          default:
            continue;
        }
      }
      else
      {
        switch(*(_QWORD *)(v13 + 8))
        {
          case 1:
LABEL_12:
            ++v8;
            break;
          case 2:
LABEL_13:
            ++v9;
            break;
          case 3:
LABEL_14:
            ++v10;
            break;
          case 4:
LABEL_15:
            ++v11;
            break;
          default:
            continue;
        }
      }
    }
  }
  if (!*((_BYTE *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
  {
    v14 = (_QWORD *)(*(uint64_t (**)(ModKneserNey *))(*(_QWORD *)this + 24))(this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Kneser-Ney smoothing ", 21);
    v15 = (_QWORD *)std::ostream::operator<<();
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"-grams\n", 7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"n1 = ", 5);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
    v18 = std::locale::use_facet(&v40, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
    std::locale::~locale(&v40);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"n2 = ", 5);
    v19 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
    v20 = std::locale::use_facet(&v40, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
    std::locale::~locale(&v40);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"n3 = ", 5);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(*v21 - 24)));
    v22 = std::locale::use_facet(&v40, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
    std::locale::~locale(&v40);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"n4 = ", 5);
    v23 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
    v24 = std::locale::use_facet(&v40, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
    std::locale::~locale(&v40);
    std::ostream::put();
    std::ostream::flush();
  }
  if (!v8 || !v9 || !v10 || !v11)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"one of required modified KneserNey count-of-counts is zero\n", 59);
    goto LABEL_33;
  }
  v25 = (double)v8 / (double)(v8 + 2 * v9);
  v26 = 1.0 - (v25 + v25) * (double)v9 / (double)v8;
  *((double *)this + 5) = v26;
  *((double *)this + 7) = 2.0 - v25 * 3.0 * (double)v10 / (double)v9;
  *((double *)this + 8) = v25 * -4.0 * (double)v11 / (double)v10 + 3.0;
  if (!*((_BYTE *)this + 8) && (Debug::debugAll || *((_DWORD *)this + 3)))
  {
    v27 = (_QWORD *)(*(uint64_t (**)(ModKneserNey *))(*(_QWORD *)this + 24))(this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"D1 = ", 5);
    v28 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(_QWORD *)(*v28 - 24)));
    v29 = std::locale::use_facet(&v40, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
    std::locale::~locale(&v40);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"D2 = ", 5);
    v30 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(_QWORD *)(*v30 - 24)));
    v31 = std::locale::use_facet(&v40, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
    std::locale::~locale(&v40);
    std::ostream::put();
    std::ostream::flush();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"D3+ = ", 6);
    v32 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(_QWORD *)(*v32 - 24)));
    v33 = std::locale::use_facet(&v40, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
    std::locale::~locale(&v40);
    std::ostream::put();
    std::ostream::flush();
    v26 = *((double *)this + 5);
  }
  if (v26 < 0.0 || *((double *)this + 7) < 0.0 || *((double *)this + 8) < 0.0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"one of modified KneserNey discounts is negative\n", 48);
LABEL_33:
    v34 = 0;
    goto LABEL_34;
  }
  if (*((_BYTE *)this + 49))
    (*(void (**)(ModKneserNey *, NgramStats *, uint64_t, _QWORD))(*(_QWORD *)this + 112))(this, a2, a3, *((unsigned int *)a2 + 39));
  v34 = 1;
LABEL_34:
  TrieIter2<unsigned int,unsigned int>::~TrieIter2(v36);
  if (*(_QWORD *)&v38[4])
    MEMORY[0x1AF44D160](*(_QWORD *)&v38[4], 0x1000C8052888210);
  return v34;
}

void sub_1AD7D5344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  std::locale::~locale((std::locale *)(v20 - 88));
  TrieIter2<unsigned int,unsigned int>::~TrieIter2(&a9);
  if (a20)
    MEMORY[0x1AF44D160](a20, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

void NaturalDiscount::~NaturalDiscount(NaturalDiscount *this)
{
  JUMPOUT(0x1AF44D190);
}

uint64_t Debug::debugme(uint64_t this, int a2)
{
  *(_DWORD *)(this + 12) = a2;
  return this;
}

uint64_t Debug::dout(Debug *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t Debug::dout(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = a2;
  return a2;
}

uint64_t Discount::discount(Discount *this, double a2, double a3, uint64_t a4)
{
  return (*(uint64_t (**)(Discount *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)this + 40))(this, vcvtpd_u64_f64(a2), vcvtpd_u64_f64(a3), a4);
}

double Discount::lowerOrderWeight(Discount *this)
{
  return 0.0;
}

uint64_t Discount::lowerOrderWeight(Discount *this, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(Discount *, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 56))(this, vcvtpd_u64_f64(a2), a3, a4, a5);
}

uint64_t NaturalDiscount::nodiscount(NaturalDiscount *this)
{
  return 0;
}

uint64_t Discount::read()
{
  return 0;
}

uint64_t NaturalDiscount::estimate()
{
  return 0;
}

void KneserNey::~KneserNey(KneserNey *this)
{
  JUMPOUT(0x1AF44D190);
}

uint64_t KneserNey::nodiscount(KneserNey *this)
{
  return 0;
}

uint64_t Discount::estimate(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"discounting method does not support float counts\n", 49);
  return 0;
}

void ModKneserNey::~ModKneserNey(ModKneserNey *this)
{
  JUMPOUT(0x1AF44D190);
}

uint64_t ModKneserNey::nodiscount(ModKneserNey *this)
{
  return 0;
}

void GoodTuring::~GoodTuring(GoodTuring *this)
{
  uint64_t v1;

  *(_QWORD *)this = &off_1E5D157F0;
  v1 = *((_QWORD *)this + 7);
  if (v1)
    MEMORY[0x1AF44D160](v1, 0x1000C8000313F17);
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_1E5D157F0;
  v1 = *((_QWORD *)this + 7);
  if (v1)
    MEMORY[0x1AF44D160](v1, 0x1000C8000313F17);
  JUMPOUT(0x1AF44D190);
}

uint64_t Array<unsigned long>::alloc(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = (a2 + (*(_DWORD *)(a1 + 16) >> 1) + 1);
  v6 = (_QWORD *)operator new[]();
  v7 = v6;
  if (a3)
    bzero(v6, 8 * v5);
  v8 = *(unsigned int *)(a1 + 16);
  result = *(_QWORD *)(a1 + 8);
  if ((_DWORD)v8)
  {
    v10 = v7;
    v11 = *(uint64_t **)(a1 + 8);
    do
    {
      v12 = *v11++;
      *v10++ = v12;
      --v8;
    }
    while (v8);
    goto LABEL_8;
  }
  if (result)
LABEL_8:
    result = MEMORY[0x1AF44D160](result, 0x1000C8000313F17);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = v5;
  return result;
}

uint64_t Array<unsigned long>::operator[](int *a1, uint64_t a2)
{
  unint64_t v3;

  v3 = a2 - *a1;
  if (v3 >= a1[1])
  {
    a1[1] = v3 + 1;
    if (v3 >= a1[4])
      Array<unsigned long>::alloc((uint64_t)a1, v3, 0);
  }
  return *((_QWORD *)a1 + 1) + 8 * v3;
}

void std::vector<float>::push_back[abi:ne180100](uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_DWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v4, v12);
      v8 = *(_DWORD **)a1;
      v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

uint64_t *std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const std::locale::facet *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::locale v19;
  char v20;

  MEMORY[0x1AF44CADC](&v20, a1, 0);
  if (!v20)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v4 = *(_QWORD *)(*a1 - 24);
  v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  v7 = std::locale::use_facet(&v19, MEMORY[0x1E0DE4A90]);
  std::locale::~locale(&v19);
  v8 = 0;
  v9 = a1 + 5;
  if (v5 >= 1)
    v10 = v6;
  else
    v10 = 0x7FFFFFFFFFFFFFF7;
  while (1)
  {
    v11 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v12 = (_BYTE *)v11[3];
    if (v12 == (_BYTE *)v11[4])
      break;
    LOBYTE(v13) = *v12;
LABEL_14:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    v14 = *(_QWORD **)((char *)v9 + *(_QWORD *)(*a1 - 24));
    v15 = v14[3];
    if (v15 == v14[4])
      (*(void (**)(_QWORD *))(*v14 + 80))(v14);
    else
      v14[3] = v15 + 1;
    if (v10 == ++v8)
    {
      v16 = 0;
      v17 = *a1;
      *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
      goto LABEL_25;
    }
  }
  v13 = (*(uint64_t (**)(_QWORD *))(*v11 + 72))(v11);
  if (v13 != -1)
    goto LABEL_14;
  v16 = 2;
LABEL_23:
  v17 = *a1;
  *(uint64_t *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 24) = 0;
  if (!v8)
    v16 |= 4u;
LABEL_25:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_1AD7D5900(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  _QWORD *v9;
  uint64_t v11;

  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  v11 = *v9;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v9 + *(_QWORD *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1AD7D58CCLL);
  }
  __cxa_rethrow();
}

void sub_1AD7D5964(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::vector<double>::push_back[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_QWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v12);
      v8 = *(_QWORD **)a1;
      v6 = *(_QWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v7 = v14 + 8;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_QWORD *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

_QWORD *std::endl[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_1AD7D5AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::AttributeClusterer::AccumulateAttributes(uint64_t a1, unsigned int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  int v14;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  _QWORD *v22;
  void *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  _DWORD *v39;
  __int128 v40;
  __int128 v41;
  int v42;
  uint64_t *v43;

  v40 = 0u;
  v41 = 0u;
  v42 = 1065353216;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  if (v4 != v5)
  {
    v10 = 0;
    do
    {
      v11 = *(_QWORD **)(v5 + 40 * v10 + 16);
      if (v11)
      {
        do
        {
          std::__hash_table<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>::__emplace_unique_key_args<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AbstractAttribute * const&>((uint64_t)&v40, v11 + 2, v11 + 2);
          v11 = (_QWORD *)*v11;
        }
        while (v11);
        v5 = *(_QWORD *)(a1 + 16);
        v4 = *(_QWORD *)(a1 + 24);
      }
      ++v10;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 3) > v10);
    v12 = (_QWORD *)v41;
    if ((_QWORD)v41)
    {
      v13 = a2 | (unint64_t)(a3 << 32);
      do
      {
        v39 = (_DWORD *)v12[2];
        v14 = v39[2];
        if (v14 != 4 && v14 != 8)
        {
          v16 = std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::find<kaldi::quasar::AbstractAttribute *>(a4, &v39);
          v17 = v16;
          if (v16)
          {
            v18 = (uint64_t)(v16 + 5);
            v19 = (unint64_t)v17[5];
            v20 = v17[4];
            if ((unint64_t)v20 >= v19)
            {
              v24 = v17[3];
              v25 = v20 - v24;
              if ((unint64_t)(v25 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v26 = v19 - (_QWORD)v24;
              v27 = v26 >> 2;
              if (v26 >> 2 <= (unint64_t)(v25 + 1))
                v27 = v25 + 1;
              if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
                v28 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v28 = v27;
              if (v28)
                v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v18, v28);
              else
                v29 = 0;
              v30 = (uint64_t *)&v29[8 * v25];
              *v30 = v13;
              v21 = v30 + 1;
              v32 = v17[3];
              v31 = v17[4];
              if (v31 != v32)
              {
                do
                {
                  v33 = *--v31;
                  *--v30 = v33;
                }
                while (v31 != v32);
                v31 = v17[3];
              }
              v17[3] = v30;
              v17[4] = v21;
              v17[5] = (uint64_t *)&v29[8 * v28];
              if (v31)
                operator delete(v31);
            }
            else
            {
              *v20 = v13;
              v21 = v20 + 1;
            }
            v17[4] = v21;
          }
          else
          {
            v36 = v13;
            std::vector<std::pair<int,int>>::vector(&v37, 1uLL, &v36);
            v35 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v39 + 32))(v39);
            v43 = &v35;
            v22 = std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::__emplace_unique_key_args<kaldi::quasar::AbstractAttribute *,std::piecewise_construct_t const&,std::tuple<kaldi::quasar::AbstractAttribute *&&>,std::tuple<>>((uint64_t)a4, &v35, (uint64_t)&std::piecewise_construct, &v43);
            v23 = (void *)v22[3];
            if (v23)
            {
              v22[4] = v23;
              operator delete(v23);
              v22[3] = 0;
              v22[4] = 0;
              v22[5] = 0;
            }
            *(_OWORD *)(v22 + 3) = v37;
            v22[5] = v38;
          }
        }
        v12 = (_QWORD *)*v12;
      }
      while (v12);
    }
  }
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v40);
}

void sub_1AD7D5D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[2];
      if (v4)
      {
        v2[3] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,int>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[2];
    if (v3)
    {
      __p[3] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_QWORD *std::__hash_table<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>::__emplace_unique_key_args<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AbstractAttribute * const&>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v8)
          {
            if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v13[2] + 24))(v13[2], *a2) & 1) != 0)
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v13 = operator new(0x18uLL);
  *v13 = 0;
  v13[1] = v8;
  v13[2] = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *v13 = *v22;
LABEL_38:
    *v22 = v13;
    goto LABEL_39;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*v13)
  {
    v23 = *(_QWORD *)(*v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_1AD7D60E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t **std::__hash_table<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>::find<kaldi::quasar::AbstractAttribute *>(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **i;
  unint64_t v12;

  v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = (uint64_t **)*i)
  {
    v12 = (unint64_t)i[1];
    if (v6 == v12)
    {
      if (((*(uint64_t (**)(uint64_t *, _QWORD))(*i[2] + 24))(i[2], *a2) & 1) != 0)
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

_QWORD *std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::__emplace_unique_key_args<kaldi::quasar::AbstractAttribute *,std::piecewise_construct_t const&,std::tuple<kaldi::quasar::AbstractAttribute *&&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v14[2] + 24))(v14[2], *a2) & 1) != 0)
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  v14 = operator new(0x30uLL);
  *v14 = 0;
  v14[1] = v9;
  v14[2] = **a4;
  v14[3] = 0;
  v14[4] = 0;
  v14[5] = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *v14 = *v24;
LABEL_38:
    *v24 = v14;
    goto LABEL_39;
  }
  *v14 = *v16;
  *v16 = v14;
  *(_QWORD *)(v23 + 8 * v4) = v16;
  if (*v14)
  {
    v25 = *(_QWORD *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1AD7D64A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<int,int>>::__assign_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 3)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 3;
    if (v19 >= a4)
    {
      v26 = result;
      if (a2 != a3)
      {
        v27 = result;
        do
        {
          v28 = *v6++;
          *(_QWORD *)v27 = v28;
          v27 += 8;
          v26 += 8;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v26 - result);
      v12 = result;
    }
    else
    {
      v20 = &a2[v19];
      if (v12 != result)
      {
        v21 = 8 * v19;
        do
        {
          v22 = *v6++;
          *(_QWORD *)result = v22;
          result += 8;
          v21 -= 8;
        }
        while (v21);
      }
      v23 = v12;
      if (v20 != a3)
      {
        v24 = v12;
        do
        {
          v25 = *v20++;
          *(_QWORD *)v24 = v25;
          v24 += 8;
          v23 += 8;
        }
        while (v20 != a3);
      }
      v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *v6++;
        *(_QWORD *)v15 = v16;
        v15 += 8;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

void std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t **std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::find<kaldi::quasar::AbstractAttribute *>(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **i;
  unint64_t v12;

  v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = (uint64_t **)*i)
  {
    v12 = (unint64_t)i[1];
    if (v12 == v6)
    {
      if (((*(uint64_t (**)(uint64_t *, _QWORD))(*i[2] + 24))(i[2], *a2) & 1) != 0)
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

_QWORD *std::vector<std::pair<int,int>>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1AD7D67D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::DecoderOptions::defaultDecoderOptions(quasar::DecoderOptions *this)
{
  unsigned __int8 v1;
  _WORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_WORD *)operator new();
    *v3 = 0;
    quasar::DecoderOptions::defaultDecoderOptions(void)::options = (uint64_t)v3;
  }
  return quasar::DecoderOptions::defaultDecoderOptions(void)::options;
}

void sub_1AD7D6860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void quasar::RegexRules::clear(quasar::RegexRules *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[3];
  void **v6;

  v3 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if (v2 != *(_QWORD *)this)
  {
    do
    {
      v2 -= 88;
      std::allocator<quasar::RegexReplacementRule>::destroy[abi:ne180100]((uint64_t)this + 16, v2);
    }
    while (v2 != v3);
    v2 = *(_QWORD *)this;
  }
  v5[0] = v2;
  v5[1] = v3;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  v5[2] = v4;
  v6 = (void **)v5;
  std::vector<quasar::RegexReplacementRule>::__destroy_vector::operator()[abi:ne180100](&v6);
}

uint64_t quasar::RegexReplacementRule::RegexReplacementRule(uint64_t a1, uint64_t a2)
{
  std::regex_traits<char> *v4;
  std::regex_traits<char> *v5;
  void **p_col;
  uint64_t v7;
  __int32 *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _BYTE *v17;
  BOOL v18;
  char **v19;
  char **v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _BYTE *v27;
  BOOL v28;
  char **v29;
  char **v30;
  uint64_t v31;
  std::__wrap_iter<const char *> v32;
  std::__wrap_iter<const char *> v33;
  std::__shared_weak_count *cntrl;
  uint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  void *__p[2];
  char v42;
  void *v43[2];
  uint64_t v44;
  std::string v45[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v60;
  std::regex_traits<char> v61[2];
  std::__shared_weak_count *v62;
  _OWORD v63[3];
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  uint64_t v71;

  v4 = std::regex_traits<char>::regex_traits((std::regex_traits<char> *)a1);
  *(_OWORD *)&v4[1].__loc_.__locale_ = 0u;
  v5 = v4 + 1;
  *(_OWORD *)&v4[2].__ct_ = 0u;
  *(_OWORD *)&v4[3].__loc_.__locale_ = 0u;
  p_col = (void **)&v4[2].__col_;
  *(_OWORD *)&v4[1].__col_ = 0u;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  memset(v63, 0, 41);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v61, "s/(.*)/(.*)/(g|gI);", 0);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v60.__traits_, "\\\\([1-9])", 0);
  v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (__int32 *)a2;
  else
    v8 = *(__int32 **)a2;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 8);
  if (!std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(v8, (__int32 *)((char *)v8 + v7), (uint64_t)v63, (uint64_t)v61, 0))
  {
    if (quasar::gLogLevel < 5)
      goto LABEL_71;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    memset(v45, 0, sizeof(v45));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Invalid regular expression: '", 29);
    v12 = *(char *)(a2 + 23);
    if (v12 >= 0)
      v13 = a2;
    else
      v13 = *(_QWORD *)a2;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(a2 + 23);
    else
      v14 = *(_QWORD *)(a2 + 8);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"'", 1);
LABEL_20:
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v45);
    goto LABEL_71;
  }
  v9 = *(_QWORD *)&v63[0];
  if (*((_QWORD *)&v63[0] + 1) - *(_QWORD *)&v63[0] != 96)
  {
    if (quasar::gLogLevel < 5)
      goto LABEL_71;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    memset(v45, 0, sizeof(v45));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Invalid number of groups observed in regex", 42);
    goto LABEL_20;
  }
  if (*(_BYTE *)(*(_QWORD *)&v63[0] + 40))
  {
    std::string::__init_with_size[abi:ne180100]<char *,char *>(v43, *(char **)(*(_QWORD *)&v63[0] + 24), *(char **)(*(_QWORD *)&v63[0] + 32), *(_QWORD *)(*(_QWORD *)&v63[0] + 32) - *(_QWORD *)(*(_QWORD *)&v63[0] + 24));
    v9 = *(_QWORD *)&v63[0];
    v10 = *((_QWORD *)&v63[0] + 1) - *(_QWORD *)&v63[0];
  }
  else
  {
    v43[0] = 0;
    v43[1] = 0;
    v10 = 96;
    v44 = 0;
  }
  v16 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 3);
  v17 = (_BYTE *)(v9 + 88);
  if (v16 <= 3)
    v17 = (char *)&v63[2] + 8;
  if (*v17)
  {
    v18 = v16 > 3;
    if (v16 <= 3)
      v19 = (char **)&v63[1] + 1;
    else
      v19 = (char **)(v9 + 72);
    v20 = (char **)(v9 + 80);
    if (!v18)
      v20 = (char **)&v63[2];
    std::string::__init_with_size[abi:ne180100]<char *,char *>(v45, *v19, *v20, *v20 - *v19);
    if (SHIBYTE(v45[0].__r_.__value_.__r.__words[2]) < 0)
    {
      if (v45[0].__r_.__value_.__l.__size_ == 2)
      {
        v21 = *(unsigned __int16 *)v45[0].__r_.__value_.__l.__data_;
        operator delete(v45[0].__r_.__value_.__l.__data_);
        if (v21 == 18791)
          goto LABEL_36;
      }
      else
      {
        operator delete(v45[0].__r_.__value_.__l.__data_);
      }
    }
    else if (SHIBYTE(v45[0].__r_.__value_.__r.__words[2]) == 2 && LOWORD(v45[0].__r_.__value_.__l.__data_) == 18791)
    {
LABEL_36:
      std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((std::regex_traits<char> *)v45, (uint64_t)v43, 1);
      std::locale::operator=((std::locale *)a1, (const std::locale *)v45);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)&v45[0].__r_.__value_.__r.__words[1];
      *(_OWORD *)&v5->__loc_.__locale_ = *(_OWORD *)&v45[1].__r_.__value_.__l.__data_;
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 40, (__int128 *)&v45[1].__r_.__value_.__r.__words[2]);
      v22 = (std::__shared_weak_count *)v46;
      *(_QWORD *)(a1 + 56) = *((_QWORD *)&v46 + 1);
      if (v22)
      {
        p_shared_owners = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldaxr(p_shared_owners);
        while (__stlxr(v24 - 1, p_shared_owners));
        goto LABEL_44;
      }
      goto LABEL_46;
    }
  }
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>((std::regex_traits<char> *)v45, (uint64_t)v43, 0);
  std::locale::operator=((std::locale *)a1, (const std::locale *)v45);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v45[0].__r_.__value_.__r.__words[1];
  *(_OWORD *)&v5->__loc_.__locale_ = *(_OWORD *)&v45[1].__r_.__value_.__l.__data_;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 40, (__int128 *)&v45[1].__r_.__value_.__r.__words[2]);
  v22 = (std::__shared_weak_count *)v46;
  *(_QWORD *)(a1 + 56) = *((_QWORD *)&v46 + 1);
  if (v22)
  {
    v25 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v25);
    while (__stlxr(v24 - 1, v25));
LABEL_44:
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_46:
  std::locale::~locale((std::locale *)v45);
  v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v63[0] + 1) - *(_QWORD *)&v63[0]) >> 3);
  v27 = (_BYTE *)(*(_QWORD *)&v63[0] + 64);
  if (v26 <= 2)
    v27 = (char *)&v63[2] + 8;
  if (*v27)
  {
    v28 = v26 > 2;
    if (v26 <= 2)
      v29 = (char **)&v63[1] + 1;
    else
      v29 = (char **)(*(_QWORD *)&v63[0] + 48);
    v30 = (char **)(*(_QWORD *)&v63[0] + 56);
    if (!v28)
      v30 = (char **)&v63[2];
    std::string::__init_with_size[abi:ne180100]<char *,char *>(v45, *v29, *v30, *v30 - *v29);
  }
  else
  {
    memset(v45, 0, 24);
  }
  if (*(char *)(a1 + 87) < 0)
    operator delete(*p_col);
  *(std::string *)p_col = v45[0];
  std::string::basic_string[abi:ne180100]<0>(v45, "\\\\");
  std::string::basic_string[abi:ne180100]<0>(__p, "\\");
  quasar::replaceAll((uint64_t)p_col, (uint64_t)v45, (char *)__p);
  if (v42 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v45[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45[0].__r_.__value_.__l.__data_);
  memset(v45, 0, 24);
  v31 = *(unsigned __int8 *)(a1 + 87);
  if ((v31 & 0x80u) == 0)
    v32.__i_ = (std::__wrap_iter<const char *>::iterator_type)p_col;
  else
    v32.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)(a1 + 64);
  if ((v31 & 0x80u) != 0)
    v31 = *(_QWORD *)(a1 + 72);
  v33.__i_ = &v32.__i_[v31];
  std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(v45, v32, v33, &v60, "$$$1", 0);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*p_col);
  *(std::string *)p_col = v45[0];
  if (SHIBYTE(v44) < 0)
    operator delete(v43[0]);
LABEL_71:
  cntrl = v60.__start_.__cntrl_;
  if (v60.__start_.__cntrl_)
  {
    v35 = &v60.__start_.__cntrl_->__shared_owners_;
    do
      v36 = __ldaxr((unint64_t *)v35);
    while (__stlxr(v36 - 1, (unint64_t *)v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  std::locale::~locale(&v60.__traits_.__loc_);
  v37 = v62;
  if (v62)
  {
    v38 = (unint64_t *)&v62->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  std::locale::~locale(&v61[0].__loc_);
  if (*(_QWORD *)&v63[0])
  {
    *((_QWORD *)&v63[0] + 1) = *(_QWORD *)&v63[0];
    operator delete(*(void **)&v63[0]);
  }
  return a1;
}

void sub_1AD7D6E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,std::locale a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v63;
  void **v64;
  uint64_t v65;
  void *v67;

  if (a20 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a63);
  std::locale::~locale(&a58);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v65 - 200);
  std::locale::~locale((std::locale *)(v65 - 240));
  v67 = *(void **)(v65 - 176);
  if (v67)
  {
    *(_QWORD *)(v65 - 168) = v67;
    operator delete(v67);
  }
  if (*(char *)(v63 + 87) < 0)
    operator delete(*v64);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v63 + 40);
  std::locale::~locale((std::locale *)v63);
  _Unwind_Resume(a1);
}

double quasar::RegexReplacementRule::applyRule(uint64_t a1, std::__wrap_iter<const char *> a2)
{
  char *i;
  uint64_t v3;
  uint64_t v4;
  std::__wrap_iter<const char *> v5;
  char *v6;
  double result;
  std::string v8;

  i = (char *)a2.__i_;
  memset(&v8, 0, sizeof(v8));
  v3 = *((unsigned __int8 *)a2.__i_ + 23);
  v4 = *((_QWORD *)a2.__i_ + 1);
  if ((v3 & 0x80u) != 0)
  {
    a2.__i_ = *(std::__wrap_iter<const char *>::iterator_type *)a2.__i_;
    v3 = v4;
  }
  if (*(char *)(a1 + 87) >= 0)
    v6 = (char *)(a1 + 64);
  else
    v6 = *(char **)(a1 + 64);
  v5.__i_ = &a2.__i_[v3];
  std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v8, a2, v5, (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)a1, v6, 0);
  if (i[23] < 0)
    operator delete(*(void **)i);
  result = *(double *)&v8.__r_.__value_.__l.__data_;
  *(std::string *)i = v8;
  return result;
}

void sub_1AD7D6FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *quasar::RegexRules::RegexRules(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  quasar::RegexRules::loadFromFile(a1, a2);
  return a1;
}

void sub_1AD7D701C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<quasar::RegexReplacementRule>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

BOOL quasar::RegexRules::loadFromFile(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  std::locale::id *v5;
  const std::locale::facet *v6;
  unsigned __int8 v7;
  _QWORD *v8;
  std::string::size_type v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *__p[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  std::string v36;
  _QWORD v37[2];
  _BYTE v38[120];
  uint64_t v39;
  _QWORD v40[21];

  v40[19] = *MEMORY[0x1E0C80C00];
  std::ifstream::basic_ifstream(v37);
  memset(&v36, 0, sizeof(v36));
  v4 = v39;
  if (v39)
  {
    v5 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    while (1)
    {
      while (1)
      {
        while (1)
        {
          std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(_QWORD *)(v37[0] - 24)));
          v6 = std::locale::use_facet((const std::locale *)__p, v5);
          v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
          std::locale::~locale((std::locale *)__p);
          v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v37, (uint64_t)&v36, v7);
          if ((*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) != 0)
          {
            if (v39 && !std::filebuf::close())
              std::ios_base::clear((std::ios_base *)((char *)v37 + *(_QWORD *)(v37[0] - 24)), *(_DWORD *)&v38[*(_QWORD *)(v37[0] - 24) + 16] | 4);
            if (quasar::gLogLevel >= 5)
            {
              v34 = 0u;
              v35 = 0u;
              v32 = 0u;
              v33 = 0u;
              v30 = 0u;
              v31 = 0u;
              v28 = 0u;
              v29 = 0u;
              v26 = 0u;
              v27 = 0u;
              v24 = 0u;
              v25 = 0u;
              v22 = 0u;
              v23 = 0u;
              v20 = 0u;
              v21 = 0u;
              *(_OWORD *)__p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Loaded ", 7);
              v12 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" rules.", 7);
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
            }
            goto LABEL_31;
          }
          quasar::trim(&v36);
          std::string::basic_string[abi:ne180100]<0>(__p, "#");
          if (!quasar::startsWith((unsigned __int8 *)&v36, (unsigned __int8 *)__p))
            break;
          if (SBYTE7(v20) < 0)
            operator delete(__p[0]);
        }
        v9 = (v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? HIBYTE(v36.__r_.__value_.__r.__words[2])
           : v36.__r_.__value_.__l.__size_;
        if (SBYTE7(v20) < 0)
          break;
        if (v9)
          goto LABEL_14;
      }
      operator delete(__p[0]);
      if (v9)
      {
LABEL_14:
        v10 = a1[1];
        if (v10 >= a1[2])
        {
          v11 = std::vector<quasar::RegexReplacementRule>::__emplace_back_slow_path<std::string &>(a1, (uint64_t)&v36);
        }
        else
        {
          quasar::RegexReplacementRule::RegexReplacementRule(a1[1], (uint64_t)&v36);
          v11 = v10 + 88;
          a1[1] = v10 + 88;
        }
        a1[1] = v11;
      }
    }
  }
  if (quasar::gLogLevel >= 1)
  {
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unable to open the file to read: '", 34);
    v14 = *(char *)(a2 + 23);
    if (v14 >= 0)
      v15 = a2;
    else
      v15 = *(_QWORD *)a2;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(a2 + 23);
    else
      v16 = *(_QWORD *)(a2 + 8);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"'", 1);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
  }
LABEL_31:
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  v37[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v37 + *(_QWORD *)(v37[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1AF44CA70](v38);
  std::istream::~istream();
  MEMORY[0x1AF44D094](v40);
  return v4 != 0;
}

void sub_1AD7D7460()
{
  __cxa_end_catch();
  JUMPOUT(0x1AD7D74E8);
}

void sub_1AD7D7488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  JUMPOUT(0x1AD7D74E8);
}

void sub_1AD7D7498(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1AD7D7500);
}

void sub_1AD7D74B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  JUMPOUT(0x1AD7D74E8);
}

void sub_1AD7D74D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  JUMPOUT(0x1AD7D74E8);
}

void sub_1AD7D74E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50)
{
  if (a49 < 0)
    operator delete(__p);
  std::ifstream::~ifstream(&a50);
  _Unwind_Resume(a1);
}

void quasar::RegexRules::applyRules(uint64_t *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  std::__wrap_iter<const char *> v7;

  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  v5 = *a1;
  v6 = a1[1];
  while (v5 != v6)
  {
    v7.__i_ = (std::__wrap_iter<const char *>::iterator_type)a3;
    quasar::RegexReplacementRule::applyRule(v5, v7);
    v5 += 88;
  }
}

void sub_1AD7D7580(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x1AF44CA64](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x1AF44CA64](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_1AD7D767C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1AF44D094](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *a1 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1AF44CA70](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1AF44D094](a1 + 53);
  return a1;
}

std::regex_traits<char> *std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](std::regex_traits<char> *a1, char *a2, int a3)
{
  std::regex_traits<char> *v6;
  size_t v7;

  v6 = std::regex_traits<char>::regex_traits(a1);
  LODWORD(v6[1].__loc_.__locale_) = a3;
  *(_OWORD *)((char *)&v6[1].__loc_.__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v6[1].__col_ + 4) = 0u;
  HIDWORD(v6[2].__ct_) = 0;
  v7 = strlen(a2);
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>((uint64_t)a1, (std::basic_regex<char> *)a2, (std::basic_regex<char> *)&a2[v7]) != (std::basic_regex<char> *)&a2[v7])std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_1AD7D7780(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v1[5]);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1AF44C8B4](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1AD7D77D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  char *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == a3)
    return (char *)a2;
  v4 = (char *)a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &unk_1E5D408B0;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    do
    {
      v10 = v3;
      v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>((std::basic_regex<char> *)a1, (char *)v3, v4);
    }
    while (v3 != v10);
    if (v10 != (unsigned __int8 *)v4)
    {
      if (v10 + 1 != (unsigned __int8 *)v4 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &unk_1E5D40970;
      *(_QWORD *)(v11 + 8) = v14;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__owns_one_state<char> *v9;
  unsigned __int8 *v10;

  v3 = a3;
  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2)
LABEL_9:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124)
      return (std::basic_regex<char> *)v8;
    v9 = a1->__end_;
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>((uint64_t)a1, (std::basic_regex<char> *)(v8 + 1), v3);
    if (v10 == v8 + 1)
      goto LABEL_9;
    v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(std::basic_regex<char> *a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__owns_one_state<char> *v15;
  std::__node<char> *v16;
  std::__owns_one_state<char> *v17;
  std::__node<char> *v18;

  end = a1->__end_;
  v7 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>((uint64_t)a1, __s, v8);
  }
  if (v8 == a3)
    v12 = v8;
  else
    v12 = v8 + 1;
  while (v12 != a3)
  {
    v13 = (unsigned __int8 *)memchr(v12, 10, a3 - v12);
    if (v13)
      v14 = v13;
    else
      v14 = a3;
    v15 = a1->__end_;
    if (v14 == v12)
    {
      v16 = (std::__node<char> *)operator new();
      v17 = a1->__end_;
      v18 = v17->__first_;
      v16[1].__vftable = (std::__node<char>_vtbl *)v18;
      v17->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>((uint64_t)a1, v12, v14);
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v15);
    if (v14 == a3)
      v12 = v14;
    else
      v12 = v14 + 1;
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *end;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::basic_regex<char> *v12;
  std::basic_regex<char> *v13;
  std::basic_regex<char> *v14;
  std::__owns_one_state<char> *v15;
  std::__node<char> *v16;
  std::__owns_one_state<char> *v17;
  std::__node<char> *v18;

  end = a1->__end_;
  v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
  }
  if (v8 == a3)
    v12 = v8;
  else
    v12 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
  while (v12 != a3)
  {
    v13 = (std::basic_regex<char> *)memchr(v12, 10, (char *)a3 - (char *)v12);
    if (v13)
      v14 = v13;
    else
      v14 = a3;
    v15 = a1->__end_;
    if (v14 == v12)
    {
      v16 = (std::__node<char> *)operator new();
      v17 = a1->__end_;
      v18 = v17->__first_;
      v16[1].__vftable = (std::__node<char>_vtbl *)v18;
      v17->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v12, v14);
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v15);
    if (v14 == a3)
      v12 = v14;
    else
      v12 = (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1);
  }
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1AF44C8B4](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1AD7D7D2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

_QWORD *std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5D465E8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1AD7D7DB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  JUMPOUT(0x1AF44D190);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
  uint64_t v4;
  std::__node<char> *first;

  v4 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v4 = &unk_1E5D40408;
  *(_QWORD *)(v4 + 8) = first;
  std::locale::locale((std::locale *)(v4 + 16), &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_BYTE *)(v4 + 40) = a2;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  std::__node<char> *v8;

  v8 = (std::__node<char> *)operator new();
  std::__lookahead<char,std::regex_traits<char>>::__lookahead[abi:ne180100]((uint64_t)v8, (uint64_t)a2, a3, (uint64_t)this->__end_->__first_, a4);
  this->__end_->__first_ = v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_1AD7D802C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C4030FC3181);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1AF44C8B4](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1AD7D8088(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 92))
  {
    if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8) || (*(_BYTE *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
  }
  *(_DWORD *)a2 = -994;
  v4 = *(_QWORD *)(result + 8);
LABEL_13:
  *(_QWORD *)(a2 + 80) = v4;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    v5 = *(_QWORD *)(result + 8);
  }
  else
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E5D40408;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E5D40408;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_17;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  v7 = *(v4 - 1);
  v8 = *v4;
  v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  v11 = (_DWORD)v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    v12 = 0;
    v13 = -993;
  }
  else
  {
    v12 = *(_QWORD *)(result + 8);
    v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(_QWORD *)(a2 + 80) = v12;
  return result;
}

uint64_t std::__lookahead<char,std::regex_traits<char>>::__lookahead[abi:ne180100](uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &unk_1E5D40120;
  *(_QWORD *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 80) = a5;
  *(_BYTE *)(a1 + 84) = a3;
  return a1;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E5D40120;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E5D40120;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1AF44D190);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  std::vector<std::wcsub_match>::size_type v4;
  uint64_t v5;
  const __int32 *v6;
  BOOL v7;
  char v8;
  std::sub_match<const wchar_t *> *begin;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  std::sub_match<const wchar_t *> *v15;
  uint64_t v16;
  std::vector<std::wcsub_match> __p;
  std::vector<std::wcsub_match>::value_type v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  std::vector<std::wcsub_match>::value_type v22;
  char v23;
  uint64_t v24;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  memset(&v22, 0, 17);
  v23 = 0;
  v24 = 0;
  memset(&__p, 0, sizeof(__p));
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v5 = *(_QWORD *)(a2 + 16);
  v18.first = *(const __int32 **)(a2 + 24);
  v18.second = v18.first;
  v18.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v18);
  v19 = v5;
  v20 = v5;
  v21 = 0;
  v22 = v18;
  v24 = v5;
  v23 = 1;
  v6 = *(const __int32 **)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v7 = v6 == *(const __int32 **)(a2 + 8);
  else
    v7 = 0;
  v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const __int32 **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  begin = __p.__begin_;
  v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin)
      return;
    goto LABEL_14;
  }
  v11 = 0;
  v12 = *(_DWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = 1;
  do
  {
    v15 = &begin[v14];
    v16 = v13 + 24 * (v12 + v11);
    *(std::pair<const wchar_t *, const wchar_t *> *)v16 = v15->std::pair<const wchar_t *, const wchar_t *>;
    *(_BYTE *)(v16 + 16) = v15->matched;
    v14 = (v11 + 2);
    ++v11;
  }
  while (v10 > v14);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_1AD7D8724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__state<char>::~__state(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1AF44C8B4](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1AD7D87BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1AF44C8B4](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1AD7D8808(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void *v16[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x155555555555555)
    v9 = 0x2AAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[96 * v9];
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *((_QWORD *)v11 + 7) = 0;
  *((_QWORD *)v11 + 8) = 0;
  *((_QWORD *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v11 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v13 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v11 + 85) = *(_QWORD *)(a2 + 85);
  *((_QWORD *)v11 + 10) = v13;
  v16[2] = v11 + 96;
  std::vector<std::__state<char>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<std::__state<char>>::~__split_buffer(v16);
  return v14;
}

void sub_1AD7D8954(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::__state<char>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(96 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v7 - 80) = v8;
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(_QWORD *)(v7 - 48) = *(_QWORD *)(a3 - 48);
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v9 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 11) = *(_QWORD *)(a3 - 11);
      *(_QWORD *)(v7 - 16) = v9;
      v7 = *((_QWORD *)&v15 + 1) - 96;
      *((_QWORD *)&v15 + 1) -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(a1[2] + 8);
  v2 = *(_QWORD **)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::__state<char>>::destroy[abi:ne180100](v3, v1);
      v1 += 12;
    }
    while (v1 != v2);
  }
}

void std::allocator<std::__state<char>>::destroy[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)a2[7];
  if (v3)
  {
    a2[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
}

void std::__split_buffer<std::__state<char>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 96;
    std::allocator<std::__state<char>>::destroy[abi:ne180100](v4, (_QWORD *)(i - 96));
  }
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::wcsub_match> *this, std::vector<std::wcsub_match>::size_type __n, std::vector<std::wcsub_match>::const_reference __x)
{
  std::__compressed_pair<std::wcsub_match *> *p_end_cap;
  std::sub_match<const wchar_t *> *v7;
  std::sub_match<const wchar_t *> *value;
  std::sub_match<const wchar_t *> *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  std::sub_match<const wchar_t *> *v15;
  std::vector<std::wcsub_match>::size_type v16;
  std::pair<const wchar_t *, const wchar_t *> v17;
  std::sub_match<const wchar_t *> *v18;
  std::sub_match<const wchar_t *> *v19;
  std::vector<std::wcsub_match>::size_type v20;
  std::pair<const wchar_t *, const wchar_t *> *v21;
  std::pair<const wchar_t *, const wchar_t *> v22;
  std::sub_match<const wchar_t *> *v23;
  std::sub_match<const wchar_t *> *end;
  std::vector<std::wcsub_match>::pointer begin;
  std::pair<const wchar_t *, const wchar_t *> v26;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v7 = value;
  v9 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v9) >> 3) >= __n)
  {
    if (__n)
    {
      v15 = &v9[__n];
      v16 = 24 * __n;
      do
      {
        v17 = __x->std::pair<const wchar_t *, const wchar_t *>;
        *(_QWORD *)&v9->matched = *(_QWORD *)&__x->matched;
        v9->std::pair<const wchar_t *, const wchar_t *> = v17;
        ++v9;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    this->__end_ = v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)this->__begin_) >> 3);
    v11 = v10 + __n;
    if (v10 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, v13);
    else
      v14 = 0;
    v18 = (std::sub_match<const wchar_t *> *)&v14[24 * v10];
    v19 = &v18[__n];
    v20 = 24 * __n;
    v21 = v18;
    do
    {
      v22 = __x->std::pair<const wchar_t *, const wchar_t *>;
      v21[1].first = *(const __int32 **)&__x->matched;
      *v21 = v22;
      v21 = (std::pair<const wchar_t *, const wchar_t *> *)((char *)v21 + 24);
      v20 -= 24;
    }
    while (v20);
    v23 = (std::sub_match<const wchar_t *> *)&v14[24 * v13];
    begin = this->__begin_;
    end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v26 = end[-1].std::pair<const wchar_t *, const wchar_t *>;
        *(_QWORD *)&v18[-1].matched = *(_QWORD *)&end[-1].matched;
        v18[-1].std::pair<const wchar_t *, const wchar_t *> = v26;
        --v18;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v23;
    if (end)
      operator delete(end);
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1AD7D8D6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1AD7D8DDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *result;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  result = std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(a1, a2 + 1, a3);
  if (result == v5)
  {
    result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(a1, (char *)a2 + 1, (char *)a3);
    if (result == v5)
    {
      result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
      if (result == v5)
        return a2;
    }
  }
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  uint64_t v2;
  unsigned int v3;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v2 = operator new();
    v3 = this->__marked_count_ + 1;
    this->__marked_count_ = v3;
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v2 = &unk_1E5D467E8;
    *(_QWORD *)(v2 + 8) = first;
    *(_DWORD *)(v2 + 16) = v3;
    end->__first_ = (std::__node<char> *)v2;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  uint64_t v4;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v4 = operator new();
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v4 = &unk_1E5D46788;
    *(_QWORD *)(v4 + 8) = first;
    *(_DWORD *)(v4 + 16) = a2;
    end->__first_ = (std::__node<char> *)v4;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1AF44C8B4](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1AD7D9074(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1AF44D190);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1AF44C8B4](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1AD7D9158(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v4;
  unsigned int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;

  if (a2 == a3)
    return a2;
  v4 = *a2;
  v5 = v4 - 48;
  if (v4 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
    return a2 + 1;
  }
  if ((v4 - 49) > 8)
    return a2;
  v6 = a3;
  v7 = a2 + 1;
  if (a2 + 1 != a3)
  {
    while (1)
    {
      v8 = *v7;
      if ((v8 - 48) > 9)
        break;
      if (v5 >= 0x19999999)
        goto LABEL_16;
      ++v7;
      v5 = v8 + 10 * v5 - 48;
      if (v7 == a3)
        goto LABEL_12;
    }
    v6 = v7;
LABEL_12:
    if (!v5)
      goto LABEL_16;
  }
  if (v5 > a1->__marked_count_)
LABEL_16:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v5);
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v3;
  int v4;
  BOOL v5;
  BOOL v6;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  int v8;
  BOOL v9;
  std::__bracket_expression<char, std::regex_traits<char>> *v10;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = *a2;
  if (v4 > 99)
  {
    if (v4 == 119)
    {
      v5 = 0;
      goto LABEL_15;
    }
    if (v4 == 115)
    {
      v9 = 0;
      goto LABEL_17;
    }
    if (v4 != 100)
      return v3;
    v6 = 0;
LABEL_12:
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v6);
    v8 = started->__mask_ | 0x400;
LABEL_18:
    started->__mask_ = v8;
    goto LABEL_19;
  }
  switch(v4)
  {
    case 'D':
      v6 = 1;
      goto LABEL_12;
    case 'S':
      v9 = 1;
LABEL_17:
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v9);
      v8 = started->__mask_ | 0x4000;
      goto LABEL_18;
    case 'W':
      v5 = 1;
LABEL_15:
      v10 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v5);
      v10->__mask_ |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v10, 95);
LABEL_19:
      ++v3;
      break;
  }
  return v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  std::basic_regex<char> *v4;
  int locale_low;
  char v6;
  std::string *v7;
  std::basic_regex<char>::value_type locale;
  int v9;
  int v10;
  char v11;
  int v12;
  char v13;
  int v14;
  char v15;
  std::string::value_type v16;
  char v17;
  std::string::value_type v18;

  v4 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      v6 = 0;
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            v7 = a4;
            locale = 10;
            goto LABEL_50;
          }
          locale = 10;
          goto LABEL_59;
        case 'r':
          if (a4)
          {
            v7 = a4;
            locale = 13;
            goto LABEL_50;
          }
          locale = 13;
          goto LABEL_59;
        case 't':
          if (a4)
          {
            v7 = a4;
            locale = 9;
            goto LABEL_50;
          }
          locale = 9;
          goto LABEL_59;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_64;
          v9 = BYTE1(this->__traits_.__loc_.__locale_);
          if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6)
            goto LABEL_64;
          v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_64;
          v10 = LOBYTE(v4->__traits_.__loc_.__locale_);
          v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
            goto LABEL_24;
          v10 |= 0x20u;
          if ((v10 - 97) >= 6)
            goto LABEL_64;
          v11 = -87;
LABEL_24:
          v6 = 16 * (v11 + v10);
LABEL_25:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_64;
          v12 = BYTE1(v4->__traits_.__loc_.__locale_);
          v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
            goto LABEL_30;
          v12 |= 0x20u;
          if ((v12 - 97) >= 6)
            goto LABEL_64;
          v13 = -87;
LABEL_30:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_64;
          v14 = BYTE2(v4->__traits_.__loc_.__locale_);
          v15 = -48;
          if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38)
            goto LABEL_35;
          v14 |= 0x20u;
          if ((v14 - 97) >= 6)
            goto LABEL_64;
          v15 = -87;
LABEL_35:
          v16 = v15 + v14 + 16 * (v13 + v12 + v6);
          if (a4)
            std::string::operator=(a4, v16);
          else
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
          return (std::basic_regex<char> *)((char *)v4 + 3);
        case 'v':
          if (a4)
          {
            v7 = a4;
            locale = 11;
            goto LABEL_50;
          }
          locale = 11;
          break;
        case 'x':
          goto LABEL_25;
        default:
          goto LABEL_45;
      }
      goto LABEL_59;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        v7 = a4;
        locale = 0;
        goto LABEL_50;
      }
      locale = 0;
LABEL_59:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          v7 = a4;
          locale = 12;
LABEL_50:
          std::string::operator=(v7, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        locale = 12;
        goto LABEL_59;
      }
LABEL_45:
      if (LOBYTE(this->__traits_.__loc_.__locale_) != 95
        && ((locale_low & 0x80) != 0
         || (a1->__traits_.__ct_->__tab_[LOBYTE(this->__traits_.__loc_.__locale_)] & 0x500) == 0))
      {
        locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          v7 = a4;
          goto LABEL_50;
        }
        goto LABEL_59;
      }
LABEL_64:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_64;
    v17 = BYTE1(this->__traits_.__loc_.__locale_);
    if (((v17 & 0xDF) - 65) > 0x19u)
      goto LABEL_64;
    v18 = v17 & 0x1F;
    if (a4)
      std::string::operator=(a4, v18);
    else
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v18);
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  uint64_t v8;
  std::__node<char> *first;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = operator new();
    std::__match_char_icase<char,std::regex_traits<char>>::__match_char_icase[abi:ne180100](v8, (uint64_t)this, v2, (uint64_t)this->__end_->__first_);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = operator new();
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &unk_1E5D40910;
    *(_QWORD *)(v8 + 8) = first;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = v2;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &unk_1E5D401E0;
  *(_QWORD *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 16) = v2;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_1AD7D96C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1AF44C8B4](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1AD7D971C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  char *v11;

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)(v11 + 16);
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &unk_1E5D3CDD0;
  *(_QWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 16) = __i;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__match_char_icase[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_1E5D406F0;
  *(_QWORD *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 40) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1AD7D9898(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  _Unwind_Resume(a1);
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E5D406F0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E5D406F0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E5D40910;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E5D40910;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E5D404E8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E5D404E8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v5 >= v4)
    {
      v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v5 + v4;
        v6 = *(_QWORD *)(v7 + 8);
        goto LABEL_10;
      }
      v8 = 0;
      while (1)
      {
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)v3 + v8));
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result)
          break;
        if (v4 == ++v8)
        {
          v5 = *(_QWORD *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E5D40690;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_1E5D40690;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v3 + 24 * v2 + 16))
  {
    v4 = (unsigned __int8 **)(v3 + 24 * v2);
    v5 = *v4;
    v6 = v4[1] - *v4;
    v7 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v7 + v6;
        v8 = *(_QWORD *)(result + 8);
        goto LABEL_9;
      }
      v9 = *(unsigned __int8 **)(a2 + 16);
      v10 = v6;
      while (1)
      {
        v12 = *v5++;
        v11 = v12;
        v13 = *v9++;
        if (v11 != v13)
          break;
        if (!--v10)
          goto LABEL_8;
      }
    }
  }
  v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1AF44D190);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    v10 = *((_QWORD *)v6 + 1);
  }
  else
  {
    v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      v6 = (unint64_t *)(a1 + 40);
      v7 = *(_QWORD *)(a1 + 40);
      v8 = &v5[-v7];
      v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        v10 = v4 - v7;
        if (2 * v10 > v9)
          v9 = 2 * v10;
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
          v11 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = operator new(v11);
        else
          v12 = 0;
        v20 = &v8[(_QWORD)v12];
        v21 = (char *)v12 + v11;
        v8[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v8[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          v22 = &v5[~v7];
          do
          {
            v23 = *--v5;
            (v22--)[(_QWORD)v12] = v23;
          }
          while (v5 != (_BYTE *)v7);
LABEL_45:
          v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  v6 = (unint64_t *)(a1 + 40);
  v5 = *(_BYTE **)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      v24 = *v6;
      v25 = &v5[-*v6];
      v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        v27 = v13 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v12 = operator new(v28);
        else
          v12 = 0;
        v20 = &v25[(_QWORD)v12];
        v21 = (char *)v12 + v28;
        v25[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v25[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          v31 = &v5[~v24];
          do
          {
            v32 = *--v5;
            (v31--)[(_QWORD)v12] = v32;
          }
          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13)
    goto LABEL_22;
  v14 = *v6;
  v15 = &v5[-*v6];
  v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0)
    goto LABEL_50;
  v17 = v13 - v14;
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
    v12 = operator new(v18);
  else
    v12 = 0;
  v20 = &v15[(_QWORD)v12];
  v21 = (char *)v12 + v18;
  v15[(_QWORD)v12] = v2;
  v19 = (uint64_t)&v15[(_QWORD)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    v29 = &v5[~v14];
    do
    {
      v30 = *--v5;
      (v29--)[(_QWORD)v12] = v30;
    }
    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }
LABEL_46:
  v12 = v20;
LABEL_47:
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 56) = v21;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 48) = v19;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  BOOL v13;
  std::locale v15;
  std::string v16;

  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v15, v11);
  std::locale::name(&v16, &v15);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    v13 = v16.__r_.__value_.__l.__size_ != 1 || *v16.__r_.__value_.__l.__data_ != 67;
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = SHIBYTE(v16.__r_.__value_.__r.__words[2]) != 1 || v16.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v15);
  *(_BYTE *)(a1 + 171) = v13;
  return a1;
}

void sub_1AD7DA374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  void (__cdecl ***v10)(std::__owns_one_state<char> *__hidden);
  std::locale *v11;
  void **v12;
  void (__cdecl **v14)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v15)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v16)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v17)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v14 = v10[14];
  if (v14)
  {
    v10[15] = v14;
    operator delete(v14);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v15 = v10[8];
  if (v15)
  {
    v10[9] = v15;
    operator delete(v15);
  }
  v16 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))*v12;
  if (*v12)
  {
    v10[6] = v16;
    operator delete(v16);
  }
  std::locale::~locale(v11);
  v17 = v10[1];
  if (v17)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v17 + 1))(v17);
  _Unwind_Resume(a1);
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, char *a2, char *a3)
{
  unint64_t v4;
  void **v5;
  void *__p[2];
  unsigned __int8 v7;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  v4 = v7;
  if ((v7 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v7 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_1AD7DA534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__lookup_collatename<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(&__s, a2, a3, a3 - a2);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v13, *(_QWORD *)(a1 + 16), v10, (char *)v10 + size);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v13;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a4 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a4 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_1AD7DA6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<char *,char *>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a4 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a4;
      else
        v10 = *(_BYTE **)a4;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_1AD7DA860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1AF44C8B4](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1AD7DA8B4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  uint64_t i;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *__p[2];
  unsigned __int8 v16;
  void *v17;
  uint64_t v18;
  unsigned __int8 v19;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_33;
  for (i = 0; a2[i] != 61 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_33;
  }
  if (&a2[i] == a3)
LABEL_33:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char *>(a1, a2, &a2[i], (uint64_t)&v17);
  if (((char)v19 & 0x80000000) == 0)
  {
    v8 = v19;
    if (v19)
    {
      v9 = (char *)&v17;
      goto LABEL_14;
    }
LABEL_34:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v8 = v18;
  if (!v18)
    goto LABEL_34;
  v9 = (char *)v17;
LABEL_14:
  std::regex_traits<char>::__transform_primary<char *>(a1, v9, &v9[v8], (uint64_t)__p);
  v10 = v16;
  if ((v16 & 0x80u) != 0)
    v10 = (unint64_t)__p[1];
  if (v10)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](a4, (__int128 *)__p);
  }
  else
  {
    v11 = v19;
    if ((v19 & 0x80u) != 0)
      v11 = v18;
    if (v11 == 2)
    {
      v13 = (char *)&v17;
      if ((v19 & 0x80u) != 0)
        v13 = (char *)v17;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)a4, *v13, v13[1]);
    }
    else
    {
      if (v11 != 1)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      v12 = (char *)&v17;
      if ((v19 & 0x80u) != 0)
        v12 = (char *)v17;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)a4, *v12);
    }
  }
  if ((char)v16 < 0)
    operator delete(__p[0]);
  if ((char)v19 < 0)
    operator delete(v17);
  return (uint64_t)&a2[i + 2];
}

void sub_1AD7DAA6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  int v7;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_11;
  for (i = 0; a2[i] != 58 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_11;
  }
  if (&a2[i] == a3)
LABEL_11:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  v7 = std::regex_traits<char>::__lookup_classname<char const*>(a1, a2, &a2[i], *(_BYTE *)(a1 + 24) & 1);
  if (!v7)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
  *(_DWORD *)(a4 + 160) |= v7;
  return (uint64_t)&a2[i + 2];
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  unint64_t v11;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  for (i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_15;
  }
  if (&a2[i] == a3)
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char *>(a1, a2, &a2[i], (uint64_t)&v10);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v10;
  v7 = v11;
  *(_QWORD *)(a4 + 16) = v11;
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return (uint64_t)&a2[i + 2];
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  int locale_low;
  int v7;
  int v8;
  std::string::value_type v9;
  std::string *v10;

  if (this == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119)
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        v10 = a4;
        v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
      v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
    }
    v9 = 0;
    v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  int v5;
  std::string *v6;
  std::string::value_type v7;
  char *v8;
  char v9;
  int v10;
  std::string::value_type v11;

  if (a2 == a3)
LABEL_52:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_21;
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97)
        goto LABEL_21;
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_14;
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30)
    goto LABEL_52;
  v7 = v5 - 48;
  v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30)
      goto LABEL_39;
    v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      goto LABEL_39;
    }
  }
  v8 = a3;
LABEL_39:
  if (this)
    std::string::operator=(this, v7);
  else
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  return v8;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  unint64_t i;
  unint64_t v7;
  char *v8;
  char v9;
  char *v10;
  unint64_t j;
  unint64_t v12;
  char *v13;
  char v14;
  char *v15;
  uint64_t v16;
  unint64_t k;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t m;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char v31;
  _BYTE *v32;
  char *v33;
  char v34;
  _BYTE *v35;
  void *v36[2];
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void *v40[2];
  uint64_t v41;
  void *__p[2];
  uint64_t v43;

  v3 = a3;
  v4 = a2;
  if (*(_BYTE *)(a1 + 170))
  {
    if (*(_BYTE *)(a1 + 169))
    {
      for (i = 0; ; ++i)
      {
        v7 = v4[23] < 0 ? *((_QWORD *)v4 + 1) : v4[23];
        if (i >= v7)
          break;
        v8 = v4;
        if (v4[23] < 0)
          v8 = *(char **)v4;
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v8[i]);
        v10 = v4;
        if (v4[23] < 0)
          v10 = *(char **)v4;
        v10[i] = v9;
      }
      for (j = 0; ; ++j)
      {
        v12 = v3[23] < 0 ? *((_QWORD *)v3 + 1) : v3[23];
        if (j >= v12)
          break;
        v13 = v3;
        if (v3[23] < 0)
          v13 = *(char **)v3;
        v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v13[j]);
        v15 = v3;
        if (v3[23] < 0)
          v15 = *(char **)v3;
        v15[j] = v14;
      }
    }
    else
    {
      for (k = 0; ; ++k)
      {
        v18 = a2[23] < 0 ? *((_QWORD *)a2 + 1) : a2[23];
        if (k >= v18)
          break;
        v19 = a2;
        if (a2[23] < 0)
          v19 = *(char **)a2;
        v20 = a2;
        if (a2[23] < 0)
          v20 = *(char **)a2;
        v20[k] = v19[k];
      }
      for (m = 0; ; ++m)
      {
        v22 = a3[23] < 0 ? *((_QWORD *)a3 + 1) : a3[23];
        if (m >= v22)
          break;
        v23 = a3;
        if (a3[23] < 0)
          v23 = *(char **)a3;
        v24 = a3;
        if (a3[23] < 0)
          v24 = *(char **)a3;
        v24[m] = v23[m];
      }
    }
    if (v4[23] < 0)
    {
      v26 = v4;
      v4 = *(char **)v4;
      v25 = *((_QWORD *)v26 + 1);
    }
    else
    {
      v25 = v4[23];
    }
    std::regex_traits<char>::transform<char *>(a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      v28 = v3;
      v3 = *(char **)v3;
      v27 = *((_QWORD *)v28 + 1);
    }
    else
    {
      v27 = v3[23];
    }
    std::regex_traits<char>::transform<char *>(a1 + 16, v3, &v3[v27]);
    *(_OWORD *)v40 = v38;
    v41 = v39;
    *(_OWORD *)__p = *(_OWORD *)v36;
    v43 = v37;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
  }
  else
  {
    if (a2[23] < 0)
      v16 = *((_QWORD *)a2 + 1);
    else
      v16 = a2[23];
    if (v16 != 1 || (a3[23] < 0 ? (v29 = *((_QWORD *)a3 + 1)) : (v29 = a3[23]), v29 != 1))
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    if (*(_BYTE *)(a1 + 169))
    {
      v30 = a2;
      if (a2[23] < 0)
        v30 = *(char **)a2;
      v31 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v30);
      v32 = v4;
      if (v4[23] < 0)
        v32 = *(_BYTE **)v4;
      *v32 = v31;
      v33 = v3;
      if (v3[23] < 0)
        v33 = *(char **)v3;
      v34 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v33);
      v35 = v3;
      if (v3[23] < 0)
        v35 = *(_BYTE **)v3;
      *v35 = v34;
    }
    *(_OWORD *)v40 = *(_OWORD *)v4;
    v41 = *((_QWORD *)v4 + 2);
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = 0;
    *(_OWORD *)__p = *(_OWORD *)v3;
    v43 = *((_QWORD *)v3 + 2);
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
  }
}

void sub_1AD7DB2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  __int16 v8;
  _WORD *v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  _WORD *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int16 v39;
  char *v40;
  __int16 v41;

  if (!*(_BYTE *)(a1 + 169))
  {
    v18 = a1 + 128;
    v19 = *(_QWORD *)(a1 + 128);
    v10 = (char **)(a1 + 112);
    v8 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    v9 = *(_WORD **)(a1 + 120);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v9 < v19)
        goto LABEL_24;
      v20 = (char *)v9 - *v10;
      if (v20 > -3)
      {
        v21 = v20 >> 1;
        v22 = v19 - (_QWORD)*v10;
        if (v22 <= (v20 >> 1) + 1)
          v23 = v21 + 1;
        else
          v23 = v22;
        if (v22 >= 0x7FFFFFFFFFFFFFFELL)
          v24 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v18, v24);
        else
          v25 = 0;
        v27 = &v25[2 * v21];
        v28 = &v25[2 * v24];
        *(_WORD *)v27 = v8;
        v26 = v27 + 2;
        v38 = *(char **)(a1 + 112);
        v29 = *(char **)(a1 + 120);
        if (v29 == v38)
          goto LABEL_46;
        do
        {
          v39 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v39;
          v27 -= 2;
        }
        while (v29 != v38);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v9 < v19)
        goto LABEL_24;
      v32 = (char *)v9 - *v10;
      if (v32 > -3)
      {
        v33 = v32 >> 1;
        v34 = v19 - (_QWORD)*v10;
        if (v34 <= (v32 >> 1) + 1)
          v35 = v33 + 1;
        else
          v35 = v34;
        if (v34 >= 0x7FFFFFFFFFFFFFFELL)
          v36 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        if (v36)
          v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v18, v36);
        else
          v37 = 0;
        v27 = &v37[2 * v33];
        v28 = &v37[2 * v36];
        *(_WORD *)v27 = v8;
        v26 = v27 + 2;
        v40 = *(char **)(a1 + 112);
        v29 = *(char **)(a1 + 120);
        if (v29 == v40)
          goto LABEL_46;
        do
        {
          v41 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v41;
          v27 -= 2;
        }
        while (v29 != v40);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = v5 | (unsigned __int16)(v6 << 8);
  v9 = *(_WORD **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_24:
    *v9 = v8;
    v26 = v9 + 1;
    goto LABEL_48;
  }
  v10 = (char **)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 112);
  v12 = (uint64_t)v9 - v11;
  if ((uint64_t)v9 - v11 <= -3)
    goto LABEL_49;
  v13 = v12 >> 1;
  v14 = v7 - v11;
  if (v14 <= (v12 >> 1) + 1)
    v15 = v13 + 1;
  else
    v15 = v14;
  if (v14 >= 0x7FFFFFFFFFFFFFFELL)
    v16 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v16 = v15;
  if (v16)
    v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(a1 + 128, v16);
  else
    v17 = 0;
  v27 = &v17[2 * v13];
  v28 = &v17[2 * v16];
  *(_WORD *)v27 = v8;
  v26 = v27 + 2;
  v30 = *(char **)(a1 + 112);
  v29 = *(char **)(a1 + 120);
  if (v29 == v30)
    goto LABEL_46;
  do
  {
    v31 = *((_WORD *)v29 - 1);
    v29 -= 2;
    *((_WORD *)v27 - 1) = v31;
    v27 -= 2;
  }
  while (v29 != v30);
LABEL_45:
  v29 = *v10;
LABEL_46:
  *(_QWORD *)(a1 + 112) = v27;
  *(_QWORD *)(a1 + 120) = v26;
  *(_QWORD *)(a1 + 128) = v28;
  if (v29)
    operator delete(v29);
LABEL_48:
  *(_QWORD *)(a1 + 120) = v26;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1AF44C8B4](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1AD7DB56C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 17;
  v4 = a1[18];
  if (v4 >= a1[19])
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_1AD7DB614(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1AF44C8B4](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1AD7DB654(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  unint64_t v6;
  void **v7;
  void **v8;
  uint64_t classname;
  void *__p[2];
  unsigned __int8 v12;

  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v7, (char *)v7 + v6);
  if ((v12 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  classname = std::__get_classname((const char *)v8, a4);
  if ((char)v12 < 0)
    operator delete(__p[0]);
  return classname;
}

void sub_1AD7DB704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 72);
    v4 = *(_QWORD *)(a1 + 80);
    if ((unint64_t)v5 >= v4)
    {
      v6 = (unint64_t *)(a1 + 64);
      v7 = *(_QWORD *)(a1 + 64);
      v8 = &v5[-v7];
      v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        v10 = v4 - v7;
        if (2 * v10 > v9)
          v9 = 2 * v10;
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
          v11 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = operator new(v11);
        else
          v12 = 0;
        v20 = &v8[(_QWORD)v12];
        v21 = (char *)v12 + v11;
        v8[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v8[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          v22 = &v5[~v7];
          do
          {
            v23 = *--v5;
            (v22--)[(_QWORD)v12] = v23;
          }
          while (v5 != (_BYTE *)v7);
LABEL_45:
          v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<int>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  v6 = (unint64_t *)(a1 + 64);
  v5 = *(_BYTE **)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      v24 = *v6;
      v25 = &v5[-*v6];
      v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        v27 = v13 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v12 = operator new(v28);
        else
          v12 = 0;
        v20 = &v25[(_QWORD)v12];
        v21 = (char *)v12 + v28;
        v25[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v25[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          v31 = &v5[~v24];
          do
          {
            v32 = *--v5;
            (v31--)[(_QWORD)v12] = v32;
          }
          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13)
    goto LABEL_22;
  v14 = *v6;
  v15 = &v5[-*v6];
  v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0)
    goto LABEL_50;
  v17 = v13 - v14;
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
    v12 = operator new(v18);
  else
    v12 = 0;
  v20 = &v15[(_QWORD)v12];
  v21 = (char *)v12 + v18;
  v15[(_QWORD)v12] = v2;
  v19 = (uint64_t)&v15[(_QWORD)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    v29 = &v5[~v14];
    do
    {
      v30 = *--v5;
      (v29--)[(_QWORD)v12] = v30;
    }
    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }
LABEL_46:
  v12 = v20;
LABEL_47:
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v19;
  *(_QWORD *)(a1 + 80) = v21;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 72) = v19;
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](std::vector<std::pair<std::string, std::string>> *a1, __int128 *a2)
{
  std::allocator<std::pair<std::string, std::string>> *p_end_cap;
  std::pair<std::string, std::string> *v5;
  std::pair<std::string, std::string> *value;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  std::pair<std::string, std::string> *end;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::pair<std::string, std::string> *v15;
  std::pair<std::string, std::string> *v16;
  __int128 v17;
  __int128 v18;
  std::__split_buffer<std::pair<std::string, std::string>> __v;

  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::pair<std::string, std::string>> *)&a1->__end_cap_;
  v5 = value;
  v7 = *((_QWORD *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v14)
      v15 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>((uint64_t)p_end_cap, v14);
    else
      v15 = 0;
    v16 = v15 + v11;
    __v.__first_ = v15;
    __v.__begin_ = v16;
    __v.__end_cap_.__value_ = &v15[v14];
    v17 = *a2;
    v16->first.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v16->first.__r_.__value_.__l.__data_ = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    v16->second.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v16->second.__r_.__value_.__l.__data_ = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    __v.__end_ = v16 + 1;
    std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(a1, &__v);
    end = a1->__end_;
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::wstring, std::wstring>> *)&__v);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    end = (std::pair<std::string, std::string> *)(v7 + 48);
    a1->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)(v7 + 48);
  }
  a1->__end_ = end;
}

void sub_1AD7DBAA0(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::wstring, std::wstring>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer((std::__split_buffer<std::pair<std::wstring, std::wstring>> *)&a10);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1AF44C8B4](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1AD7DBAEC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v11 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v9;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v4, i - 48);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1AF44C8B4](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1AD7DBE7C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1AF44C8B4](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1AD7DBEC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E5D405A8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, _QWORD *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((_QWORD *)result + 2);
  }
  else
  {
    a3[10] = *((_QWORD *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E5D405A8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E5D405A8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1AF44D190);
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result[11];
  *(_QWORD *)(a2[7] + 16 * result[10] + 8) = a2[2];
  v3 = result[12];
  if (v2 != v3)
  {
    v4 = v2 - 1;
    v5 = a2[3];
    v6 = v3 - 1 - v4;
    v7 = a2[4] + 24 * v4 + 8;
    do
    {
      *(_QWORD *)(v7 - 8) = v5;
      *(_QWORD *)v7 = v5;
      *(_BYTE *)(v7 + 8) = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_1E5D405A8;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1AF44C8B4](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1AD7DC1A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  unsigned __int8 *v8;

  if (a2 == a3)
    return (unsigned __int8 *)a2;
  end = a1->__end_;
  marked_count = a1->__marked_count_;
  v8 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, a2, a3);
  if (v8 == (unsigned __int8 *)a2)
    return (unsigned __int8 *)a2;
  else
    return std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(a1, v8, (unsigned __int8 *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  unsigned int marked_count;
  char *v11;
  _BOOL4 v13;
  uint64_t v14;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(a1, a2, a3);
  v7 = v6;
  if (v6 == a2 && v6 != a3)
  {
    if (a2 + 1 == a3 || *a2 != 92)
    {
      return a2;
    }
    else
    {
      v8 = a2[1];
      if (v8 == 40)
      {
        v9 = (uint64_t)(a2 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        marked_count = a1->__marked_count_;
        do
        {
          v11 = (char *)v9;
          v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v9, a3);
        }
        while ((char *)v9 != v11);
        if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        v7 = v11 + 2;
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, marked_count);
      }
      else
      {
        v13 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v8);
        v14 = 2;
        if (!v13)
          v14 = 0;
        return &a2[v14];
      }
    }
  }
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  int v11;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  size_t v18;
  size_t v19;
  size_t v20;
  size_t v21;
  std::basic_regex<char> *v22;
  int v24;
  int v25;

  v6 = a2;
  if (a2 != a3)
  {
    v7 = __mexp_end;
    v8 = __mexp_begin;
    v11 = *a2;
    if (v11 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(this, 0, 0xFFFFFFFFFFFFFFFFLL, __s, __mexp_begin, __mexp_end, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      v13 = a2 + 2;
      v25 = 0;
      v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, a2 + 2, a3, &v25);
      if (v14 == v13)
        goto LABEL_16;
      if (v14 != a3)
      {
        v15 = v14 + 1;
        v16 = *v14;
        if (v16 == 44)
        {
          v24 = -1;
          v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, v15, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            v19 = v24;
            v18 = v25;
            if (v24 == -1)
            {
              v19 = -1;
            }
            else if (v24 < v25)
            {
LABEL_16:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
            }
            v6 = &v17[2 * (v17[1] == 125)];
            v20 = v8;
            v21 = v7;
            v22 = this;
LABEL_23:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v22, v18, v19, __s, v20, v21, 1);
            return v6;
          }
        }
        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          v6 = v14 + 2;
          v18 = v25;
          v20 = v8;
          v21 = v7;
          v22 = this;
          v19 = v25;
          goto LABEL_23;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v6;
  char *result;
  std::__node<char> *v9;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
  {
    result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a3);
    if (result != a2)
      return result;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  }
  v6 = *a2;
  if ((a2 + 1 != a3 || v6 != 36)
    && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v6);
    return a2 + 1;
  }
  result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a3);
  if (result != a2)
    return result;
  if (*a2 != 46)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
  v9 = (std::__node<char> *)operator new();
  end = this->__end_;
  first = end->__first_;
  v9->__vftable = (std::__node<char>_vtbl *)&unk_1E5D40180;
  v9[1].__vftable = (std::__node<char>_vtbl *)first;
  end->__first_ = v9;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  return a2 + 1;
}

_BYTE *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(std::basic_regex<char> *a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;

  v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  do
  {
    v7 = v6;
    v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  char *v8;
  unsigned __int8 *v9;
  int locale_low;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  std::basic_regex<char> *v17;
  std::basic_regex<char> *v18;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>((std::basic_regex<char> *)a1, a2, a3);
  v9 = (unsigned __int8 *)v8;
  if (v8 != (char *)a2 || v8 == (char *)a3)
    goto LABEL_12;
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      goto LABEL_8;
    case '(':
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression((std::basic_regex<char> *)a1);
      v16 = *(_DWORD *)(a1 + 28);
      ++*(_DWORD *)(a1 + 36);
      v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v17 == a3 || (v18 = v17, LOBYTE(v17->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression((std::basic_regex<char> *)a1, v16);
      --*(_DWORD *)(a1 + 36);
      v9 = (unsigned __int8 *)&v18->__traits_.__loc_.__locale_ + 1;
LABEL_12:
      if (v9 != (unsigned __int8 *)a2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v9, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
      return (unsigned __int8 *)a2;
    case '^':
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
LABEL_8:
      v15 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = v14 + 16;
      *(_QWORD *)(v11 + 8) = v15;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v9 = (unsigned __int8 *)&a2->__traits_.__loc_.__locale_ + 1;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(a1, v9, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  return (unsigned __int8 *)a2;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  char *result;
  std::__node<char> *v7;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  result = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(a1, a2, a3);
  if (result == (char *)a2)
  {
    result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
    if (result == (char *)a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
      }
      else
      {
        v7 = (std::__node<char> *)operator new();
        end = a1->__end_;
        first = end->__first_;
        v7->__vftable = (std::__node<char>_vtbl *)&unk_1E5D40180;
        v7[1].__vftable = (std::__node<char>_vtbl *)first;
        end->__first_ = v7;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
        return (char *)&a2->__traits_.__loc_.__locale_ + 1;
      }
    }
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  std::basic_regex<char> *v3;
  int locale_low;
  uint64_t v5;

  v3 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    v5 = (locale_low - 36);
    if (v5 > 0x3A)
      goto LABEL_8;
    if (((1 << (locale_low - 36)) & 0x5800000080004D1) != 0)
      return v3;
    if (v5 == 5)
    {
      if (a1->__open_count_)
        return v3;
    }
    else
    {
LABEL_8:
      if ((locale_low - 123) < 2)
        return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
    return (std::basic_regex<char> *)((char *)v3 + 1);
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  int v5;
  std::basic_regex<char>::value_type v6;
  BOOL v7;
  _BOOL4 v9;
  uint64_t v10;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92)
    return v3;
  v5 = *v4;
  v6 = *v4;
  v7 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
  if (!v7 || (v5 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v6);
    v3 += 2;
    return v3;
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0x40)
  {
    v9 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v6);
    v10 = 2;
    if (!v9)
      v10 = 0;
    v3 += v10;
    return v3;
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, a3, 0);
}

uint64_t std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(__int32 *__f, __int32 *__l, uint64_t a3, uint64_t a4, int a5)
{
  __int16 v5;
  int v9;
  uint64_t result;
  std::match_results<const wchar_t *> __p;

  v5 = a5;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  v9 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a4, __f, __l, &__p, a5 | 0x1040u);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::wssub_match> *)a3, (uint64_t)__f, (std::sub_match<std::__wrap_iter<const wchar_t *>> *)__l, (uint64_t *)&__p, (v5 & 0x800) != 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if (!v9)
    return 0;
  if (!*(_BYTE *)(a3 + 88))
    return 1;
  result = 0;
  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  return result;
}

void sub_1AD7DCCAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::wssub_match> *a1, uint64_t a2, std::sub_match<std::__wrap_iter<const wchar_t *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  std::vector<std::wssub_match>::pointer begin;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  char v21;
  std::vector<std::wssub_match>::pointer end;
  std::sub_match<std::__wrap_iter<const wchar_t *>> *v23;

  v10 = a4[6];
  std::vector<std::sub_match<std::__wrap_iter<char const*>>>::resize(a1, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  begin = a1->__begin_;
  if (a1->__end_ != a1->__begin_)
  {
    v12 = 0;
    v13 = 0;
    v15 = *a4;
    v14 = a4[1];
    do
    {
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
      v17 = (_QWORD *)(v15 + v12 * 24);
      if (v16 <= v13)
        v18 = a4 + 3;
      else
        v18 = v17;
      begin[v12].first.__i_ = (std::__wrap_iter<const wchar_t *>::iterator_type)(a2 + *v18 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v13)
        v19 = a4 + 3;
      else
        v19 = (uint64_t *)(*a4 + v12 * 24);
      a1->__begin_[v12].second.__i_ = (std::__wrap_iter<const wchar_t *>::iterator_type)(a2 + v19[1] - v10);
      v15 = *a4;
      v14 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v14 - *a4) >> 3) <= v13)
        v20 = a4 + 3;
      else
        v20 = (uint64_t *)(*a4 + v12 * 24);
      v21 = *((_BYTE *)v20 + 16);
      begin = a1->__begin_;
      end = a1->__end_;
      a1->__begin_[v12].matched = v21;
      ++v13;
      ++v12;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  }
  a1[1].__begin_ = a3;
  a1[1].__end_ = a3;
  LOBYTE(a1[1].__end_cap_.__value_) = 0;
  v23 = (std::sub_match<std::__wrap_iter<const wchar_t *>> *)(a2 + a4[6] - v10);
  a1[2].__begin_ = v23;
  a1[2].__end_ = (std::vector<std::wssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(a1[2].__end_cap_.__value_) = *((_BYTE *)a4 + 64);
  a1[3].__begin_ = (std::vector<std::wssub_match>::pointer)(a2 + a4[9] - v10);
  a1[3].__end_ = (std::vector<std::wssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(a1[3].__end_cap_.__value_) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0)
    a1[4].__end_ = v23;
  LOBYTE(a1[4].__begin_) = *((_BYTE *)a4 + 96);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _BYTE v55[40];
  __int128 v56;
  void *__p[2];
  _QWORD v58[3];
  __int128 v59;
  __int128 v60;
  __int128 v61;

  v60 = 0u;
  v61 = 0u;
  v59 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)v55 = 0;
    memset(&v55[8], 0, 32);
    v56 = 0uLL;
    *(_OWORD *)__p = 0uLL;
    memset(v58, 0, 21);
    std::deque<std::__state<char>>::push_back(&v59, (uint64_t)v55);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v55[32])
    {
      *(_QWORD *)&v56 = *(_QWORD *)&v55[32];
      operator delete(*(void **)&v55[32]);
    }
    v12 = *((_QWORD *)&v59 + 1);
    v13 = *((_QWORD *)&v61 + 1) + v61 - 1;
    v14 = v13 / 0x2A;
    v15 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * (v13 / 0x2A));
    v16 = 3 * (v13 % 0x2A);
    v17 = v15 + 32 * v16;
    *(_DWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = a2;
    *(_QWORD *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 24) = a3;
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const wchar_t *>> *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 56), *(unsigned int *)(a1 + 32));
    v53 = 0;
    v18 = 0;
    v51 = 0;
    v52 = a2;
    v19 = a3 - a2;
    v20 = *((_QWORD *)&v61 + 1);
    v21 = *((_QWORD *)&v59 + 1);
    v22 = *((_QWORD *)&v61 + 1) + v61 - 1;
    v23 = v22 / 0x2A;
    v24 = 3 * (v22 % 0x2A);
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * v23) + 32 * v24 + 80) = v6;
    v25 = *(_QWORD *)(v21 + 8 * v23) + 32 * v24;
    *(_DWORD *)(v25 + 88) = a5;
    *(_BYTE *)(v25 + 92) = a6;
    while (2)
    {
      if ((++v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= (int)v19)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      v27 = v20 + v61 - 1;
      v28 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * (v27 / 0x2A));
      v29 = v27 % 0x2A;
      v30 = v28 + 96 * (v27 % 0x2A);
      v32 = (_QWORD *)(v30 + 80);
      v31 = *(_QWORD *)(v30 + 80);
      if (v31)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v31 + 16))(v31, v28 + 96 * v29);
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          v33 = *(_QWORD *)(v28 + 96 * v29 + 16);
          v35 = (a5 & 0x1000) == 0 || v33 == a3;
          v36 = v33 != v52 || (a5 & 0x20) == 0;
          if (!v36 || !v35)
            goto LABEL_37;
          v37 = v33 - *(_QWORD *)(v28 + 96 * v29 + 8);
          v38 = v51;
          if ((v53 & (v51 >= v37)) == 0)
            v38 = v37;
          if (v38 != v19)
          {
            v51 = v38;
            std::deque<std::__state<char>>::pop_back(&v59);
            v53 = 1;
            goto LABEL_38;
          }
          v39 = (void **)*((_QWORD *)&v59 + 1);
          v40 = v60;
          if ((_QWORD)v60 == *((_QWORD *)&v59 + 1))
          {
            v40 = *((_QWORD *)&v59 + 1);
          }
          else
          {
            v41 = (_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * ((unint64_t)v61 / 0x2A));
            v42 = (_QWORD *)(*v41 + 96 * ((unint64_t)v61 % 0x2A));
            v43 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * ((*((_QWORD *)&v61 + 1) + (_QWORD)v61) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v61 + 1) + (_QWORD)v61) % 0x2AuLL);
            if (v42 != (_QWORD *)v43)
            {
              do
              {
                std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v61 + 8, v42);
                v42 += 12;
                if ((_QWORD *)((char *)v42 - *v41) == (_QWORD *)4032)
                {
                  v44 = (_QWORD *)v41[1];
                  ++v41;
                  v42 = v44;
                }
              }
              while (v42 != (_QWORD *)v43);
              v39 = (void **)*((_QWORD *)&v59 + 1);
              v40 = v60;
            }
          }
          *((_QWORD *)&v61 + 1) = 0;
          v47 = v40 - (_QWORD)v39;
          if (v47 >= 0x11)
          {
            do
            {
              operator delete(*v39);
              v39 = (void **)(*((_QWORD *)&v59 + 1) + 8);
              *((_QWORD *)&v59 + 1) = v39;
              v47 = v60 - (_QWORD)v39;
            }
            while ((_QWORD)v60 - (_QWORD)v39 > 0x10uLL);
          }
          if (v47 >> 3 == 1)
          {
            v48 = 21;
          }
          else
          {
            if (v47 >> 3 != 2)
              goto LABEL_53;
            v48 = 42;
          }
          *(_QWORD *)&v61 = v48;
LABEL_53:
          v53 = 1;
          v51 = v19;
LABEL_38:
          v20 = *((_QWORD *)&v61 + 1);
          if (*((_QWORD *)&v61 + 1))
            continue;
          if ((v53 & 1) != 0)
          {
            v49 = *a4;
            *(_QWORD *)v49 = v52;
            *(_QWORD *)(v49 + 8) = v52 + v51;
            v6 = 1;
            *(_BYTE *)(v49 + 16) = 1;
          }
          else
          {
            v6 = 0;
          }
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          std::deque<std::__state<char>>::push_front((uint64_t)&v59, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          std::deque<std::__state<char>>::pop_back(&v59);
          goto LABEL_38;
        case 0xFFFFFC20:
          v45 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)v55 = *(_OWORD *)v30;
          *(_OWORD *)&v55[16] = v45;
          v56 = 0uLL;
          *(_QWORD *)&v55[32] = 0;
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v55[32], *(__int128 **)(v28 + 96 * v29 + 32), *(__int128 **)(v28 + 96 * v29 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v28 + 96 * v29 + 40) - *(_QWORD *)(v28 + 96 * v29 + 32)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v58[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(__int128 **)(v28 + 96 * v29 + 56), *(__int128 **)(v28 + 96 * v29 + 64), (uint64_t)(*(_QWORD *)(v28 + 96 * v29 + 64) - *(_QWORD *)(v28 + 96 * v29 + 56)) >> 4);
          v46 = *v32;
          *(_QWORD *)((char *)&v58[1] + 5) = *(_QWORD *)(v30 + 85);
          v58[1] = v46;
          (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v32 + 24))(*v32, 1, v28 + 96 * v29);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v58[1] + 24))(v58[1], 0, v55);
          std::deque<std::__state<char>>::push_back(&v59, (uint64_t)v55);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(_QWORD *)&v55[32])
          {
            *(_QWORD *)&v56 = *(_QWORD *)&v55[32];
            operator delete(*(void **)&v55[32]);
          }
          goto LABEL_38;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100](&v59);
  return v6;
}

void sub_1AD7DD33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;

  std::deque<std::__state<char>>::~deque[abi:ne180100]((_QWORD *)(v22 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const __int32 *a2, const __int32 *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  _OWORD *v11;
  unsigned int v12;
  char *v13;
  _OWORD *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  _BYTE *v18;
  const __int32 *v19;
  _OWORD *v20;
  __int128 v21;
  void *v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t *v41;
  char *v42;
  char v43;
  _BYTE v46[56];
  void *__p[2];
  _QWORD v48[4];
  std::vector<std::wcsub_match>::value_type __x;
  _BYTE v50[40];
  __int128 v51;
  void *v52[6];
  _OWORD *v53;
  _OWORD *v54;
  _QWORD v55[3];

  v53 = 0;
  v54 = 0;
  v55[0] = 0;
  *(_DWORD *)v50 = 0;
  memset(&v50[8], 0, 32);
  v51 = 0u;
  memset(v52, 0, 37);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_43;
  __x.first = a3;
  __x.second = a3;
  __x.matched = 0;
  *(_DWORD *)v46 = 0;
  memset(&v46[8], 0, 48);
  *(_OWORD *)__p = 0uLL;
  memset(v48, 0, 21);
  v54 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v53, (uint64_t)v46);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(_QWORD *)&v46[32])
  {
    *(_QWORD *)&v46[40] = *(_QWORD *)&v46[32];
    operator delete(*(void **)&v46[32]);
  }
  v41 = a4;
  v11 = v54;
  *((_DWORD *)v54 - 24) = 0;
  *((_QWORD *)v11 - 11) = a2;
  *((_QWORD *)v11 - 10) = a2;
  *((_QWORD *)v11 - 9) = a3;
  std::vector<std::sub_match<char const*>>::resize((std::vector<std::wcsub_match> *)(v11 - 4), *(unsigned int *)(a1 + 28), &__x);
  std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const wchar_t *>> *)((char *)v54 - 40), *(unsigned int *)(a1 + 32));
  v42 = 0;
  v43 = 0;
  v12 = 0;
  v13 = (char *)((char *)a3 - (char *)a2);
  v14 = v54;
  *((_QWORD *)v54 - 2) = v6;
  *((_DWORD *)v14 - 2) = a5;
  *((_BYTE *)v14 - 4) = a6;
  do
  {
    v15 = (++v12 & 0xFFF) != 0 || (int)(v12 >> 12) < (int)v13;
    if (!v15)
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
    v17 = v14 - 1;
    v16 = *((_QWORD *)v14 - 2);
    v18 = v14 - 6;
    if (v16)
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v16 + 16))(v16, v14 - 6);
    switch(*(_DWORD *)v18)
    {
      case 0xFFFFFC18:
        v19 = (const __int32 *)*((_QWORD *)v14 - 10);
        if ((a5 & 0x20) != 0 && v19 == a2 || (a5 & 0x1000) != 0 && v19 != a3)
          goto LABEL_19;
        v26 = (char *)v19 - *((_QWORD *)v14 - 11);
        v27 = v42;
        if ((v43 & ((uint64_t)v42 >= (uint64_t)v26)) == 0)
        {
          v28 = *(v14 - 5);
          *(_OWORD *)v50 = *(_OWORD *)v18;
          *(_OWORD *)&v50[16] = v28;
          if (v50 != v18)
          {
            std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v50[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
            std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(v52, *((uint64_t **)v14 - 5), *((uint64_t **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
          }
          v29 = (void *)*v17;
          *(void **)((char *)&v52[3] + 5) = *(void **)((char *)v14 - 11);
          v52[3] = v29;
          v27 = v26;
        }
        v30 = v54;
        if (v27 == v13)
        {
          v31 = (uint64_t)v53;
          while (v30 != (_QWORD *)v31)
          {
            v30 -= 12;
            std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v55, v30);
          }
          v54 = (_OWORD *)v31;
          v43 = 1;
          v42 = (char *)((char *)a3 - (char *)a2);
        }
        else
        {
          v42 = v27;
          v32 = v54 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v55, (_QWORD *)v54 - 12);
          v54 = v32;
          v43 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_19:
        v20 = v54 - 6;
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v55, (_QWORD *)v54 - 12);
        v54 = v20;
        break;
      case 0xFFFFFC20:
        v21 = *(v14 - 5);
        *(_OWORD *)v46 = *(_OWORD *)v18;
        *(_OWORD *)&v46[16] = v21;
        memset(&v46[32], 0, 24);
        std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v46[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
        __p[0] = 0;
        __p[1] = 0;
        v48[0] = 0;
        std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((__int128 **)v14 - 5), *((__int128 **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
        v22 = (void *)*v17;
        *(_QWORD *)((char *)&v48[1] + 5) = *(_QWORD *)((char *)v14 - 11);
        v48[1] = v22;
        (*(void (**)(_QWORD, uint64_t, _OWORD *))(*(_QWORD *)*v17 + 24))(*v17, 1, v14 - 6);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v48[1] + 24))(v48[1], 0, v46);
        v23 = v54;
        if ((unint64_t)v54 >= v55[0])
        {
          v54 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v53, (uint64_t)v46);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          v24 = *(_OWORD *)&v46[16];
          *v54 = *(_OWORD *)v46;
          v23[1] = v24;
          *((_QWORD *)v23 + 4) = 0;
          *((_QWORD *)v23 + 5) = 0;
          *((_QWORD *)v23 + 6) = 0;
          *((_QWORD *)v23 + 7) = 0;
          v23[2] = *(_OWORD *)&v46[32];
          *((_QWORD *)v23 + 6) = *(_QWORD *)&v46[48];
          memset(&v46[32], 0, 24);
          *((_QWORD *)v23 + 8) = 0;
          *((_QWORD *)v23 + 9) = 0;
          *(_OWORD *)((char *)v23 + 56) = *(_OWORD *)__p;
          *((_QWORD *)v23 + 9) = v48[0];
          __p[0] = 0;
          __p[1] = 0;
          v48[0] = 0;
          v25 = v48[1];
          *(_QWORD *)((char *)v23 + 85) = *(_QWORD *)((char *)&v48[1] + 5);
          *((_QWORD *)v23 + 10) = v25;
          v54 = v23 + 6;
        }
        if (*(_QWORD *)&v46[32])
        {
          *(_QWORD *)&v46[40] = *(_QWORD *)&v46[32];
          operator delete(*(void **)&v46[32]);
        }
        break;
      default:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
    }
    v14 = v54;
  }
  while (v53 != v54);
  if ((v43 & 1) != 0)
  {
    v33 = *v41;
    *(_QWORD *)v33 = a2;
    *(_QWORD *)(v33 + 8) = &v42[(_QWORD)a2];
    *(_BYTE *)(v33 + 16) = 1;
    if ((_QWORD)v51 != *(_QWORD *)&v50[32])
    {
      v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - *(_QWORD *)&v50[32]) >> 3);
      v35 = (_BYTE *)(*(_QWORD *)&v50[32] + 16);
      v36 = 1;
      do
      {
        v37 = v33 + 24 * v36;
        *(_OWORD *)v37 = *((_OWORD *)v35 - 1);
        v38 = *v35;
        v35 += 24;
        *(_BYTE *)(v37 + 16) = v38;
        v15 = v34 > v36++;
      }
      while (v15);
    }
    v39 = 1;
  }
  else
  {
LABEL_43:
    v39 = 0;
  }
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  if (*(_QWORD *)&v50[32])
  {
    *(_QWORD *)&v51 = *(_QWORD *)&v50[32];
    operator delete(*(void **)&v50[32]);
  }
  *(_QWORD *)v50 = &v53;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
  return v39;
}

void sub_1AD7DD894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  std::__state<char>::~__state(&a19);
  std::__state<char>::~__state(&a35);
  a35 = v35 - 120;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::__state<char>>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __n128 result;
  uint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::__state<char>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v8 + 56) = result;
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v8 + 85) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v8 + 80) = v11;
  ++a1[5];
  return result;
}

uint64_t std::deque<std::__state<char>>::pop_back(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;

  v2 = a1 + 5;
  v3 = a1[5] + a1[4] - 1;
  std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(a1 + 5), (_QWORD *)(*(_QWORD *)(a1[1] + 8 * (v3 / 0x2A)) + 96 * (v3 % 0x2A)));
  --*v2;
  return std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

int64x2_t std::deque<std::__state<char>>::push_front(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    std::deque<std::__state<char>>::__add_front_capacity((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x2A));
  v7 = *v6 + 96 * (v4 % 0x2A);
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4032;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)a2;
  *(_OWORD *)(v7 - 80) = v8;
  *(_QWORD *)(v7 - 56) = 0;
  *(_QWORD *)(v7 - 48) = 0;
  *(_QWORD *)(v7 - 64) = 0;
  *(_OWORD *)(v7 - 64) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v7 - 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v7 - 40) = 0;
  *(_QWORD *)(v7 - 32) = 0;
  *(_QWORD *)(v7 - 24) = 0;
  *(_OWORD *)(v7 - 40) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(v7 - 24) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v7 - 11) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v7 - 16) = v9;
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1AE140E90);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void std::deque<std::__state<char>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1AD7DDE2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 42 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A)
    a2 = 1;
  if (v5 < 0x54)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<std::__state<char>>::__add_front_capacity(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 42 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x2A)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFC0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 21;
      else
        v40 = (uint64_t)a1[4] + 42;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFC0uLL);
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFC0uLL);
      }
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 21;
      else
        v35 = (uint64_t)a1[4] + 42;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 42;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &__p);
  }
}

void sub_1AD7DE1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](_QWORD *a1)
{
  _QWORD *v2;
  void **v3;
  void **v4;
  unint64_t v5;
  void **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = a1 + 5;
  v3 = (void **)a1[1];
  v4 = (void **)a1[2];
  if (v4 == v3)
  {
    v4 = (void **)a1[1];
  }
  else
  {
    v5 = a1[4];
    v6 = &v3[v5 / 0x2A];
    v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    v8 = (unint64_t)v3[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v2, v7);
        v7 += 96;
        if (v7 - (_BYTE *)*v6 == 4032)
        {
          v9 = (char *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      v3 = (void **)a1[1];
      v4 = (void **)a1[2];
    }
  }
  *v2 = 0;
  v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v4 = (void **)a1[2];
      v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 21;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 42;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    v13 = *v3++;
    operator delete(v13);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  __int128 v17;
  int64_t v18;
  char *v19;
  unint64_t v20;
  __int128 *v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    v19 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v19;
    v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result) >> 3);
    if (v20 >= a4)
    {
      v25 = result;
      if (a2 != a3)
      {
        v26 = result;
        do
        {
          *(_OWORD *)v26 = *v6;
          v26[16] = *((_BYTE *)v6 + 16);
          v25 += 24;
          v6 = (__int128 *)((char *)v6 + 24);
          v26 += 24;
        }
        while (v6 != a3);
      }
      v18 = v25 - result;
      v13 = result;
    }
    else
    {
      v21 = (__int128 *)((char *)a2 + 24 * v20);
      if (v13 != result)
      {
        do
        {
          *(_OWORD *)result = *v6;
          result[16] = *((_BYTE *)v6 + 16);
          v6 = (__int128 *)((char *)v6 + 24);
          result += 24;
        }
        while (v6 != v21);
      }
      v22 = v13;
      if (v21 != a3)
      {
        v23 = v13;
        do
        {
          v24 = *v21;
          *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
          *(_OWORD *)v23 = v24;
          v23 += 24;
          v21 = (__int128 *)((char *)v21 + 24);
          v22 += 24;
        }
        while (v21 != a3);
      }
      v18 = v22 - v13;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = std::vector<std::string>::__vallocate[abi:ne180100](a1, v12);
    v15 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v15;
    v16 = v15;
    if (v6 != a3)
    {
      v16 = v13;
      do
      {
        v17 = *v6;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v16 = v17;
        v16 += 24;
        v6 = (__int128 *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
    v18 = v16 - v13;
  }
  *v14 = &v13[v18];
  return result;
}

char *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  unint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      v26 = result;
      if (a2 != a3)
      {
        v27 = result;
        do
        {
          v28 = *v6;
          v29 = v6[1];
          v6 += 2;
          *(_QWORD *)v27 = v28;
          *((_QWORD *)v27 + 1) = v29;
          v27 += 16;
          v26 += 16;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v26 - result);
      v12 = result;
    }
    else
    {
      v20 = (__int128 *)&a2[2 * v19];
      if (v12 != result)
      {
        do
        {
          v21 = *v6;
          v22 = v6[1];
          v6 += 2;
          *(_QWORD *)result = v21;
          *((_QWORD *)result + 1) = v22;
          result += 16;
        }
        while (v6 != (uint64_t *)v20);
      }
      v23 = v12;
      if (v20 != (__int128 *)a3)
      {
        v24 = v12;
        do
        {
          v25 = *v20++;
          *(_OWORD *)v24 = v25;
          v24 += 16;
          v23 += 16;
        }
        while (v20 != (__int128 *)a3);
      }
      v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *(_OWORD *)v6;
        v6 += 2;
        *(_OWORD *)v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::wssub_match> *this, std::vector<std::wssub_match>::size_type __n)
{
  std::__compressed_pair<std::wssub_match *> *p_end_cap;
  std::sub_match<std::__wrap_iter<const wchar_t *>> *v5;
  std::sub_match<std::__wrap_iter<const wchar_t *>> *value;
  std::sub_match<std::__wrap_iter<const wchar_t *>> *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::sub_match<std::__wrap_iter<const wchar_t *>> *v13;
  std::vector<std::wssub_match>::size_type v14;
  std::sub_match<std::__wrap_iter<const wchar_t *>> *v15;
  std::sub_match<std::__wrap_iter<const wchar_t *>> *v16;
  std::vector<std::wssub_match>::size_type v17;
  std::sub_match<std::__wrap_iter<const wchar_t *>> *v18;
  std::sub_match<std::__wrap_iter<const wchar_t *>> *v19;
  std::sub_match<std::__wrap_iter<const wchar_t *>> *end;
  std::vector<std::wssub_match>::pointer begin;
  std::pair<std::__wrap_iter<const wchar_t *>, std::__wrap_iter<const wchar_t *>> v22;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  v7 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v7) >> 3) >= __n)
  {
    if (__n)
    {
      v13 = &v7[__n];
      v14 = 24 * __n;
      do
      {
        v7->first.__i_ = 0;
        v7->second.__i_ = 0;
        v7->matched = 0;
        ++v7;
        v14 -= 24;
      }
      while (v14);
      v7 = v13;
    }
    this->__end_ = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, v11);
    else
      v12 = 0;
    v15 = (std::sub_match<std::__wrap_iter<const wchar_t *>> *)&v12[24 * v8];
    v16 = &v15[__n];
    v17 = 24 * __n;
    v18 = v15;
    do
    {
      v18->first.__i_ = 0;
      v18->second.__i_ = 0;
      v18->matched = 0;
      ++v18;
      v17 -= 24;
    }
    while (v17);
    v19 = (std::sub_match<std::__wrap_iter<const wchar_t *>> *)&v12[24 * v11];
    begin = this->__begin_;
    end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v22 = end[-1].std::pair<std::__wrap_iter<const wchar_t *>, std::__wrap_iter<const wchar_t *>>;
        *(_QWORD *)&v15[-1].matched = *(_QWORD *)&end[-1].matched;
        v15[-1].std::pair<std::__wrap_iter<const wchar_t *>, std::__wrap_iter<const wchar_t *>> = v22;
        --v15;
        --end;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v15;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v19;
    if (end)
      operator delete(end);
  }
}

std::regex_traits<char> *std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(std::regex_traits<char> *a1, uint64_t a2, int a3)
{
  std::regex_traits<char> *v6;
  uint64_t v7;
  std::basic_regex<char> *v8;

  v6 = std::regex_traits<char>::regex_traits(a1);
  LODWORD(v6[1].__loc_.__locale_) = a3;
  *(_OWORD *)((char *)&v6[1].__loc_.__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v6[1].__col_ + 4) = 0u;
  HIDWORD(v6[2].__ct_) = 0;
  v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (std::basic_regex<char> *)a2;
  else
    v8 = *(std::basic_regex<char> **)a2;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 8);
  if ((std::basic_regex<char> *)((char *)v8 + v7) != std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>((uint64_t)v6, v8, (std::basic_regex<char> *)((char *)v8 + v7)))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_1AD7DE82C(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v1[5]);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E5D400C0;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>((_QWORD *)(a1 + 40), (uint64_t)v7);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
  v8 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v8 > 0x3F)
  {
    switch(v8)
    {
      case 0x40u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      case 0x80u:
        return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      case 0x100u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      default:
        goto LABEL_14;
    }
  }
  else if (v8)
  {
    if (v8 != 16)
    {
      if (v8 != 32)
LABEL_14:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
    }
    return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }
  else
  {
    return (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, (char *)a3);
  }
}

void sub_1AD7DE99C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  std::__node<char> *v8;
  std::__owns_one_state<char> *v9;
  std::__node<char> *first;
  std::__owns_one_state<char> *v11;
  unsigned __int8 *v12;
  std::__node<char> *v13;
  std::__owns_one_state<char> *v14;
  std::__node<char> *v15;

  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_alternative<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == a2)
  {
    v8 = (std::__node<char> *)operator new();
    v9 = a1->__end_;
    first = v9->__first_;
    v8[1].__vftable = (std::__node<char>_vtbl *)first;
    v9->__first_ = v8;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  if (v7 == (unsigned __int8 *)a3)
    return a3;
  while (*v7 == 124)
  {
    v11 = a1->__end_;
    v12 = v7 + 1;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_alternative<std::__wrap_iter<char const*>>(a1, v7 + 1, a3);
    if (v12 == v7)
    {
      v13 = (std::__node<char> *)operator new();
      v14 = a1->__end_;
      v15 = v14->__first_;
      v13[1].__vftable = (std::__node<char>_vtbl *)v15;
      v14->__first_ = v13;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v11);
    if (v7 == (unsigned __int8 *)a3)
      return a3;
  }
  return (char *)v7;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  char *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == a3)
    return (char *)a2;
  v4 = (char *)a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &unk_1E5D408B0;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    do
    {
      v10 = v3;
      v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (char *)v3, v4);
    }
    while (v10 != v3);
    if (v10 != v4)
    {
      if (v10 + 1 != v4 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &unk_1E5D40970;
      *(_QWORD *)(v11 + 8) = v14;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__owns_one_state<char> *v9;
  unsigned __int8 *v10;

  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>((uint64_t)a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2)
LABEL_9:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  v8 = v7;
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124)
      return (std::basic_regex<char> *)v8;
    v9 = a1->__end_;
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>((uint64_t)a1, (std::basic_regex<char> *)(v8 + 1), a3);
    if (v8 + 1 == v10)
      goto LABEL_9;
    v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__owns_one_state<char> *v15;
  std::__node<char> *v16;
  std::__owns_one_state<char> *v17;
  std::__node<char> *v18;

  end = a1->__end_;
  v7 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>((uint64_t)a1, __s, v8);
  }
  if (v8 == a3)
    v12 = v8;
  else
    v12 = v8 + 1;
  while (v12 != a3)
  {
    v13 = (unsigned __int8 *)memchr(v12, 10, a3 - v12);
    if (v13)
      v14 = v13;
    else
      v14 = a3;
    v15 = a1->__end_;
    if (v14 == v12)
    {
      v16 = (std::__node<char> *)operator new();
      v17 = a1->__end_;
      v18 = v17->__first_;
      v16[1].__vftable = (std::__node<char>_vtbl *)v18;
      v17->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>((uint64_t)a1, v12, v14);
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v15);
    if (v14 == a3)
      v12 = v14;
    else
      v12 = v14 + 1;
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *end;
  std::basic_regex<char> *v7;
  std::basic_regex<char> *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::basic_regex<char> *v12;
  std::basic_regex<char> *v13;
  std::basic_regex<char> *v14;
  std::__owns_one_state<char> *v15;
  std::__node<char> *v16;
  std::__owns_one_state<char> *v17;
  std::__node<char> *v18;

  end = a1->__end_;
  v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
  }
  if (v8 == a3)
    v12 = v8;
  else
    v12 = (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
  while (v12 != a3)
  {
    v13 = (std::basic_regex<char> *)memchr(v12, 10, (char *)a3 - (char *)v12);
    if (v13)
      v14 = v13;
    else
      v14 = a3;
    v15 = a1->__end_;
    if (v14 == v12)
    {
      v16 = (std::__node<char> *)operator new();
      v17 = a1->__end_;
      v18 = v17->__first_;
      v16[1].__vftable = (std::__node<char>_vtbl *)v18;
      v17->__first_ = v16;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, v12, v14);
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v15);
    if (v14 == a3)
      v12 = v14;
    else
      v12 = (std::basic_regex<char> *)((char *)&v14->__traits_.__loc_.__locale_ + 1);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_alternative<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  unsigned __int8 *v5;

  do
  {
    v5 = a2;
    a2 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, (char *)a2, a3);
  }
  while (v5 != a2);
  return v5;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  unsigned __int8 *result;
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  unsigned __int8 *v9;

  result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    end = a1->__end_;
    marked_count = a1->__marked_count_;
    v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, (unsigned __int8 *)a2, a3);
    result = (unsigned __int8 *)a2;
    if (v9 != (unsigned __int8 *)a2)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  char *v3;
  int v6;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  char *v14;
  int v16;
  BOOL v17;
  unsigned int marked_count;
  std::basic_regex<char> v19;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *a2;
  if (v6 <= 91)
  {
    if (v6 != 36)
    {
      if (v6 == 40 && a2 + 1 != a3 && a2[1] == 63 && a2 + 2 != a3)
      {
        v7 = a2[2];
        if (v7 == 33)
        {
          std::regex_traits<char>::regex_traits(&v19.__traits_);
          memset(&v19.__flags_, 0, 40);
          v19.__flags_ = this->__flags_;
          v8 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v19, v3 + 3, a3);
          marked_count = v19.__marked_count_;
          std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v19, 1, this->__marked_count_);
          this->__marked_count_ += marked_count;
          if (v8 == a3 || *v8 != 41)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          goto LABEL_27;
        }
        if (v7 == 61)
        {
          std::regex_traits<char>::regex_traits(&v19.__traits_);
          memset(&v19.__flags_, 0, 40);
          v19.__flags_ = this->__flags_;
          v8 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v19, v3 + 3, a3);
          v9 = v19.__marked_count_;
          std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v19, 0, this->__marked_count_);
          this->__marked_count_ += v9;
          if (v8 == a3 || *v8 != 41)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
LABEL_27:
          v3 = v8 + 1;
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v19.__start_);
          std::locale::~locale(&v19.__traits_.__loc_);
          return v3;
        }
      }
      return v3;
    }
    v10 = operator new();
    v11 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
LABEL_17:
    *(_QWORD *)v10 = v14 + 16;
    *(_QWORD *)(v10 + 8) = first;
    *(_BYTE *)(v10 + 16) = v11;
    end->__first_ = (std::__node<char> *)v10;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94)
      return v3;
    v10 = operator new();
    v11 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
    goto LABEL_17;
  }
  if (a2 + 1 != a3)
  {
    v16 = a2[1];
    if (v16 == 66)
    {
      v17 = 1;
    }
    else
    {
      if (v16 != 98)
        return v3;
      v17 = 0;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v17);
    v3 += 2;
  }
  return v3;
}

void sub_1AD7DF2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, char *a3)
{
  unsigned __int8 *v3;
  int v6;
  std::__node<char> *v7;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  _BYTE *v11;
  char *v12;
  unsigned int marked_count;
  char *v14;
  char *v15;

  v3 = a2;
  if (a2 != (unsigned __int8 *)a3)
  {
    v6 = (char)*a2;
    if (v6 <= 62)
    {
      if (v6 == 40)
      {
        v11 = a2 + 1;
        if (a2 + 1 != (unsigned __int8 *)a3)
        {
          if (a2 + 2 != (unsigned __int8 *)a3 && *v11 == 63 && a2[2] == 58)
          {
            ++this->__open_count_;
            v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, a2 + 3, a3);
            if (v12 != a3 && *v12 == 41)
            {
              --this->__open_count_;
              return (unsigned __int8 *)(v12 + 1);
            }
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
            marked_count = this->__marked_count_;
            ++this->__open_count_;
            v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, v11, a3);
            if (v14 != a3)
            {
              v15 = v14;
              if (*v14 == 41)
              {
                std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, marked_count);
                --this->__open_count_;
                return (unsigned __int8 *)(v15 + 1);
              }
            }
          }
        }
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      if (v6 == 46)
      {
        v7 = (std::__node<char> *)operator new();
        end = this->__end_;
        first = end->__first_;
        v7->__vftable = (std::__node<char>_vtbl *)&unk_1E5D46728;
        v7[1].__vftable = (std::__node<char>_vtbl *)first;
        end->__first_ = v7;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        return ++v3;
      }
      if ((v6 - 42) >= 2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
LABEL_28:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
    }
    if (v6 > 91)
    {
      if (v6 == 92)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(this, a2, (unsigned __int8 *)a3);
      if (v6 == 123)
        goto LABEL_28;
    }
    else
    {
      if (v6 == 91)
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, (char *)a2, a3);
      if (v6 == 63)
        goto LABEL_28;
    }
    return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  size_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  size_t v18;
  BOOL v19;
  BOOL v20;
  std::__owns_one_state<char> *v21;
  BOOL v22;
  unsigned __int8 *v23;
  unsigned __int8 *v25;
  int v26;
  int v27;
  size_t __max;

  if (a2 == a3)
    return a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      v13 = a2 + 1;
      if (v11)
        v20 = 1;
      else
        v20 = v13 == a3;
      if (!v20 && *v13 == 63)
      {
        v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        v14 = 0;
        v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      v14 = 0;
      v18 = 1;
      goto LABEL_45;
    }
    v13 = a2;
    if (v12 != 123)
      return v13;
    v15 = a2 + 1;
    v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a1, a2 + 1, a3, (int *)&__max);
    if (v15 != v16)
    {
      if (v16 != a3)
      {
        v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v18 = (int)__max;
LABEL_33:
              v21 = __s;
              v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v18 = (int)__max;
LABEL_45:
            v21 = __s;
            v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v23 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v23 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v18 = -1;
          goto LABEL_45;
        }
        v27 = -1;
        v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v10, v23, a3, &v27);
        if (v23 != v25 && v25 != a3 && *v25 == 125)
        {
          v18 = v27;
          v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            v13 = v25 + 1;
            v22 = 1;
            if (!v11 && v13 != a3)
            {
              v26 = v25[1];
              v22 = v26 != 63;
              if (v26 == 63)
                v13 = v25 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    v13 = a2 + 1;
    if (v11)
      v19 = 1;
    else
      v19 = v13 == a3;
    if (!v19 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    v14 = 0;
    goto LABEL_36;
  }
  v13 = a2;
  if (v12 == 43)
  {
    v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 1;
LABEL_26:
      v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    v14 = 1;
    goto LABEL_36;
  }
  return v13;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *result;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  result = std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<std::__wrap_iter<char const*>>(a1, a2 + 1, a3);
  if (v5 == result)
  {
    result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(a1, (char *)a2 + 1, (char *)a3);
    if (v5 == result)
    {
      result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
      if (v5 == result)
        return a2;
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  char *v5;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  uint64_t *v7;
  char *v8;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if (v5 == a3)
      goto LABEL_20;
    v7 = (uint64_t *)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if (v5 == a3)
      goto LABEL_20;
    do
    {
      v8 = v5;
      v5 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(a1, v5, a3, v7);
    }
    while (v8 != v5);
    if (v8 == a3)
      goto LABEL_20;
    if (*v8 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93)
LABEL_20:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v8 + 1;
  }
  return a2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  int v4;
  unsigned int v5;
  int v6;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = *a2;
    v5 = v4 - 48;
    if (v4 == 48)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return ++v3;
    }
    if ((v4 - 49) > 8)
      return v3;
    if (++v3 == a3)
    {
      v3 = a3;
    }
    else
    {
      while (1)
      {
        v6 = *v3;
        if ((v6 - 48) > 9)
          break;
        if (v5 >= 0x19999999)
          goto LABEL_16;
        ++v3;
        v5 = v6 + 10 * v5 - 48;
        if (v3 == a3)
        {
          v3 = a3;
          break;
        }
      }
      if (!v5)
        goto LABEL_16;
    }
    if (v5 <= a1->__marked_count_)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v5);
      return v3;
    }
LABEL_16:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  return v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  std::basic_regex<char> *v4;
  int locale_low;
  char v6;
  std::string *v7;
  std::basic_regex<char>::value_type locale;
  int v9;
  int v10;
  char v11;
  int v12;
  char v13;
  int v14;
  char v15;
  std::string::value_type v16;
  unsigned int v17;
  std::string::value_type v18;

  v4 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      v6 = 0;
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            v7 = a4;
            locale = 10;
            goto LABEL_52;
          }
          locale = 10;
          goto LABEL_61;
        case 'r':
          if (a4)
          {
            v7 = a4;
            locale = 13;
            goto LABEL_52;
          }
          locale = 13;
          goto LABEL_61;
        case 't':
          if (a4)
          {
            v7 = a4;
            locale = 9;
            goto LABEL_52;
          }
          locale = 9;
          goto LABEL_61;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_66;
          v9 = BYTE1(this->__traits_.__loc_.__locale_);
          if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6)
            goto LABEL_66;
          v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_66;
          v10 = LOBYTE(v4->__traits_.__loc_.__locale_);
          v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
            goto LABEL_24;
          v10 |= 0x20u;
          if ((v10 - 97) >= 6)
            goto LABEL_66;
          v11 = -87;
LABEL_24:
          v6 = 16 * (v11 + v10);
LABEL_25:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_66;
          v12 = BYTE1(v4->__traits_.__loc_.__locale_);
          v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
            goto LABEL_30;
          v12 |= 0x20u;
          if ((v12 - 97) >= 6)
            goto LABEL_66;
          v13 = -87;
LABEL_30:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_66;
          v14 = BYTE2(v4->__traits_.__loc_.__locale_);
          v15 = -48;
          if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38)
            goto LABEL_35;
          v14 |= 0x20u;
          if ((v14 - 97) >= 6)
            goto LABEL_66;
          v15 = -87;
LABEL_35:
          v16 = v15 + v14 + 16 * (v13 + v12 + v6);
          if (a4)
            std::string::operator=(a4, v16);
          else
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
          return (std::basic_regex<char> *)((char *)v4 + 3);
        case 'v':
          if (a4)
          {
            v7 = a4;
            locale = 11;
            goto LABEL_52;
          }
          locale = 11;
          break;
        case 'x':
          goto LABEL_25;
        default:
          goto LABEL_47;
      }
      goto LABEL_61;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        v7 = a4;
        locale = 0;
        goto LABEL_52;
      }
      locale = 0;
LABEL_61:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          v7 = a4;
          locale = 12;
LABEL_52:
          std::string::operator=(v7, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        locale = 12;
        goto LABEL_61;
      }
LABEL_47:
      if (LOBYTE(this->__traits_.__loc_.__locale_) != 95
        && ((locale_low & 0x80) != 0
         || (a1->__traits_.__ct_->__tab_[LOBYTE(this->__traits_.__loc_.__locale_)] & 0x500) == 0))
      {
        locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          v7 = a4;
          goto LABEL_52;
        }
        goto LABEL_61;
      }
LABEL_66:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_66;
    if (SBYTE1(this->__traits_.__loc_.__locale_) < 65)
      goto LABEL_66;
    v17 = BYTE1(this->__traits_.__loc_.__locale_);
    if (v17 >= 0x5B && (v17 - 97) > 0x19u)
      goto LABEL_66;
    v18 = v17 & 0x1F;
    if (a4)
      std::string::operator=(a4, v18);
    else
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v18);
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  char *v4;
  int v5;
  uint64_t v6;
  int v9;
  char *v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  int v15;
  std::string *v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  std::string::size_type size;
  char v21;
  std::string __p;
  std::string v24;
  std::string v25;
  std::string v26;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (v5 == 93)
    return v4;
  v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_38;
    }
    if (v9 == 61)
    {
      v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, a4);
LABEL_38:
      v6 = (uint64_t)v10;
      v21 = 0;
      goto LABEL_42;
    }
    goto LABEL_9;
  }
  v19 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, (uint64_t)&v26);
  v4 = v19;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v26.__r_.__value_.__l.__size_;
  v14 = v19;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      v12 = *v4;
      if (v12 == 92)
      {
        v13 = v4 + 1;
        if (v11)
        {
          v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v13, a3, &v26);
        }
        else
        {
          v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, &v26, v6);
          v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (v15 = *v14, v15 == 93)
    || (v17 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v17 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_40:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v6, v16->__r_.__value_.__s.__data_[0], v16->__r_.__value_.__s.__data_[1]);
          goto LABEL_41;
        }
        v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_25;
      }
    }
    else if (*((_BYTE *)&v26.__r_.__value_.__s + 23))
    {
      v16 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1)
        goto LABEL_40;
LABEL_25:
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v6, v16->__r_.__value_.__s.__data_[0]);
    }
LABEL_41:
    v21 = 1;
    v4 = v14;
    goto LABEL_42;
  }
  memset(&v25, 0, sizeof(v25));
  v4 = v14 + 2;
  if (v14 + 2 != a3 && *v17 == 91 && *v4 == 46)
  {
    v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    v4 = v18;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v17) = *v17;
    if ((_DWORD)v17 == 92)
    {
      if (v11)
        v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v14 + 2, a3, &v25);
      else
        v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v14 + 2), (std::basic_regex<char> *)a3, &v25, v6);
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v17) = *v17;
  }
  std::string::operator=(&v25, (std::string::value_type)v17);
LABEL_56:
  v24 = v26;
  memset(&v26, 0, sizeof(v26));
  __p = v25;
  memset(&v25, 0, sizeof(v25));
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v21 = 1;
LABEL_42:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if ((v21 & 1) != 0)
    return v4;
  return (char *)v6;
}

void sub_1AD7E007C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a28 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 49) < 0)
    operator delete(*(void **)(v28 - 72));
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  char *v6;
  char *v7;
  char *v8;
  char *i;
  int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void *__p[2];
  unsigned __int8 v19;
  void *v20;
  uint64_t v21;
  unsigned __int8 v22;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_33;
  v6 = a3 - 2;
  v7 = a2;
  v8 = a2;
  for (i = a2; ; v8 = i)
  {
    v10 = *i++;
    if (v10 == 61 && *i == 93)
      break;
    if (a2 == v6)
      goto LABEL_33;
    ++v7;
    --v6;
  }
  if (v8 == a3)
LABEL_33:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char *>(a1, a2, v7, (uint64_t)&v20);
  if (((char)v22 & 0x80000000) == 0)
  {
    v11 = v22;
    if (v22)
    {
      v12 = (char *)&v20;
      goto LABEL_14;
    }
LABEL_34:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  v11 = v21;
  if (!v21)
    goto LABEL_34;
  v12 = (char *)v20;
LABEL_14:
  std::regex_traits<char>::__transform_primary<char *>(a1, v12, &v12[v11], (uint64_t)__p);
  v13 = v19;
  if ((v19 & 0x80u) != 0)
    v13 = (unint64_t)__p[1];
  if (v13)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](a4, (__int128 *)__p);
  }
  else
  {
    v14 = v22;
    if ((v22 & 0x80u) != 0)
      v14 = v21;
    if (v14 == 2)
    {
      v16 = (char *)&v20;
      if ((v22 & 0x80u) != 0)
        v16 = (char *)v20;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)a4, *v16, v16[1]);
    }
    else
    {
      if (v14 != 1)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      v15 = (char *)&v20;
      if ((v22 & 0x80u) != 0)
        v15 = (char *)v20;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)a4, *v15);
    }
  }
  if ((char)v19 < 0)
    operator delete(__p[0]);
  if ((char)v22 < 0)
    operator delete(v20);
  return v7 + 2;
}

void sub_1AD7E0298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v5;
  char *v6;
  char *v7;
  char *i;
  int v9;
  int v10;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_11;
  v5 = a3 - 2;
  v6 = a2;
  v7 = a2;
  for (i = a2; ; v7 = i)
  {
    v9 = *i++;
    if (v9 == 58 && *i == 93)
      break;
    if (a2 == v5)
      goto LABEL_11;
    ++v6;
    --v5;
  }
  if (v7 == a3)
LABEL_11:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  v10 = std::regex_traits<char>::__lookup_classname<char const*>(a1, a2, v6, *(_DWORD *)(a1 + 24) & 1);
  if (!v10)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
  *(_DWORD *)(a4 + 160) |= v10;
  return v6 + 2;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v5;
  char *v6;
  char *v7;
  char *i;
  int v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v13;
  unint64_t v14;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  v5 = a3 - 2;
  v6 = a2;
  v7 = a2;
  for (i = a2; ; v7 = i)
  {
    v9 = *i++;
    if (v9 == 46 && *i == 93)
      break;
    if (a2 == v5)
      goto LABEL_15;
    ++v6;
    --v5;
  }
  if (v7 == a3)
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char *>(a1, a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v13;
  v10 = v14;
  *(_QWORD *)(a4 + 16) = v14;
  v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a4 + 8);
  if (v11 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return v6 + 2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  int locale_low;
  int v7;
  int v8;
  std::string::value_type v9;
  std::string *v10;

  if (this == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119)
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        v10 = a4;
        v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
      v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
    }
    v9 = 0;
    v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  int v5;
  std::string *v6;
  std::string::value_type v7;
  char *v8;
  char v9;
  int v10;
  std::string::value_type v11;

  if (a2 == a3)
LABEL_52:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_21;
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97)
        goto LABEL_21;
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_14;
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30)
    goto LABEL_52;
  v7 = v5 - 48;
  v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30)
      goto LABEL_39;
    v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      goto LABEL_39;
    }
  }
  v8 = a3;
LABEL_39:
  if (this)
    std::string::operator=(this, v7);
  else
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  return v8;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_RE_expression<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  do
  {
    v5 = a2;
    a2 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(a1, a2, a3);
  }
  while (v5 != a2);
  return v5;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  unsigned __int8 *v8;

  if (a2 == a3)
    return (unsigned __int8 *)a2;
  end = a1->__end_;
  marked_count = a1->__marked_count_;
  v8 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v8 == (unsigned __int8 *)a2)
    return (unsigned __int8 *)a2;
  else
    return std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, (unsigned __int8 *)a3, end, marked_count + 1, a1->__marked_count_ + 1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v6;
  char *v7;
  uint64_t v9;
  unsigned int marked_count;
  char *v11;
  _BOOL4 v12;
  uint64_t v13;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(a1, a2, a3);
  v7 = v6;
  if (a2 == v6 && a2 != a3 && a2 + 1 != a3)
  {
    v9 = (uint64_t)v6;
    if (*a2 == 92)
      v9 = (uint64_t)&a2[2 * (a2[1] == 40)];
    if ((char *)v9 == a2)
    {
      if (*a2 == 92)
      {
        v12 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, a2[1]);
        v13 = 2;
        if (!v12)
          v13 = 0;
        return &a2[v13];
      }
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
      marked_count = a1->__marked_count_;
      v11 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_RE_expression<std::__wrap_iter<char const*>>((uint64_t)a1, v9, (uint64_t)a3);
      if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      v7 = v11 + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, marked_count);
    }
  }
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  int v11;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  size_t v18;
  size_t v19;
  size_t v20;
  size_t v21;
  std::basic_regex<char> *v22;
  int v24;
  int v25;

  v6 = a2;
  if (a2 != a3)
  {
    v7 = __mexp_end;
    v8 = __mexp_begin;
    v11 = *a2;
    if (v11 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(this, 0, 0xFFFFFFFFFFFFFFFFLL, __s, __mexp_begin, __mexp_end, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      v13 = a2 + 2;
      v25 = 0;
      v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, a2 + 2, a3, &v25);
      if (v13 == v14)
        goto LABEL_16;
      if (v14 != a3)
      {
        v15 = v14 + 1;
        v16 = *v14;
        if (v16 == 44)
        {
          v24 = -1;
          v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, v15, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            v19 = v24;
            v18 = v25;
            if (v24 == -1)
            {
              v19 = -1;
            }
            else if (v24 < v25)
            {
LABEL_16:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
            }
            v6 = &v17[2 * (v17[1] == 125)];
            v20 = v8;
            v21 = v7;
            v22 = this;
LABEL_23:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v22, v18, v19, __s, v20, v21, 1);
            return v6;
          }
        }
        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          v6 = v14 + 2;
          v18 = v25;
          v20 = v8;
          v21 = v7;
          v22 = this;
          v19 = v25;
          goto LABEL_23;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  int v6;
  char *result;
  std::__node<char> *v9;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if (a2 == a3)
  {
    result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a3);
    if (result != a2)
      return result;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
  }
  v6 = *a2;
  if ((a2 + 1 != a3 || v6 != 36)
    && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v6);
    return a2 + 1;
  }
  result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a3);
  if (result != a2)
    return result;
  if (*a2 != 46)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
  v9 = (std::__node<char> *)operator new();
  end = this->__end_;
  first = end->__first_;
  v9->__vftable = (std::__node<char>_vtbl *)&unk_1E5D40180;
  v9[1].__vftable = (std::__node<char>_vtbl *)first;
  end->__first_ = v9;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  return a2 + 1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  do
  {
    v7 = v6;
    v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)v6, a3);
  }
  while (v7 != v6);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  char *v8;
  unsigned __int8 *v9;
  int locale_low;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  std::basic_regex<char> *v17;
  std::basic_regex<char> *v18;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
  v9 = (unsigned __int8 *)v8;
  if (v8 != (char *)a2 || v8 == (char *)a3)
    goto LABEL_12;
  locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  switch(locale_low)
  {
    case '$':
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      goto LABEL_8;
    case '(':
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression((std::basic_regex<char> *)a1);
      v16 = *(_DWORD *)(a1 + 28);
      ++*(_DWORD *)(a1 + 36);
      v17 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
      if (v17 == a3 || (v18 = v17, LOBYTE(v17->__traits_.__loc_.__locale_) != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression((std::basic_regex<char> *)a1, v16);
      --*(_DWORD *)(a1 + 36);
      v9 = (unsigned __int8 *)&v18->__traits_.__loc_.__locale_ + 1;
LABEL_12:
      if (v9 != (unsigned __int8 *)a2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v9, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
      return (unsigned __int8 *)a2;
    case '^':
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
LABEL_8:
      v15 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = v14 + 16;
      *(_QWORD *)(v11 + 8) = v15;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v9 = (unsigned __int8 *)&a2->__traits_.__loc_.__locale_ + 1;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v9, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  return (unsigned __int8 *)a2;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  char *result;
  std::__node<char> *v7;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  result = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(a1, a2, a3);
  if (result == (char *)a2)
  {
    result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)a2, (char *)a3);
    if (result == (char *)a2)
    {
      if (a2 == a3 || LOBYTE(a2->__traits_.__loc_.__locale_) != 46)
      {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)a2, (char *)a3);
      }
      else
      {
        v7 = (std::__node<char> *)operator new();
        end = a1->__end_;
        first = end->__first_;
        v7->__vftable = (std::__node<char>_vtbl *)&unk_1E5D40180;
        v7[1].__vftable = (std::__node<char>_vtbl *)first;
        end->__first_ = v7;
        a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
        return (char *)&a2->__traits_.__loc_.__locale_ + 1;
      }
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  int v5;
  char v6;
  BOOL v7;
  _BOOL4 v9;
  uint64_t v10;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = a2 + 1;
    if (v3 + 1 != a3 && *v3 == 92)
    {
      v5 = *v4;
      v6 = *v4;
      v7 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
      if (v7 && (v5 - 123) >= 3)
      {
        if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
        {
          return std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4, a3, 0);
        }
        else
        {
          v9 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v6);
          v10 = 2;
          if (!v9)
            v10 = 0;
          v3 += v10;
        }
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v6);
        v3 += 2;
      }
    }
  }
  return v3;
}

std::string *std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(std::string *a1, std::__wrap_iter<const char *> a2, std::__wrap_iter<const char *> a3, const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *a4, char *a5, unsigned __int32 __m)
{
  __int16 v6;
  std::string::value_type *i;
  std::__wrap_iter<const char *>::iterator_type v11;
  std::string::value_type *v12;
  unsigned __int8 *v13;
  std::string::value_type *v14;
  std::__wrap_iter<const char *>::iterator_type v15;
  std::regex_iterator<std::__wrap_iter<const char *>, char> v17;
  std::regex_iterator<std::__wrap_iter<const char *>, char> v18;

  v6 = __m;
  i = (std::string::value_type *)a2.__i_;
  std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::regex_iterator(&v18, a2, a3, a4, (std::regex_constants::match_flag_type)__m);
  memset(&v17.__match_.__prefix_, 0, 17);
  memset(&v17.__match_.__suffix_, 0, 17);
  v17.__match_.__ready_ = 0;
  v17.__match_.__position_start_.__i_ = 0;
  memset(&v17.__match_, 0, 41);
  memset(&v17, 0, 28);
  if (std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v18, &v17))
  {
    if ((v6 & 0x200) == 0)
    {
      while (i != a3.__i_)
        std::string::push_back(a1, *i++);
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = (unsigned __int8 *)&a5[strlen(a5)];
    while (!std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v18, &v17))
    {
      if ((v6 & 0x200) == 0)
      {
        v14 = (std::string::value_type *)v18.__match_.__prefix_.first.__i_;
        v15 = v18.__match_.__prefix_.second.__i_;
        while (v14 != v15)
          std::string::push_back(a1, *v14++);
      }
      a1 = std::match_results<std::__wrap_iter<char const*>>::format<std::back_insert_iterator<std::string>>((std::string::value_type ***)&v18.__match_, a1, (unsigned __int8 *)a5, v13, v6);
      v12 = (std::string::value_type *)v18.__match_.__suffix_.first.__i_;
      v11 = v18.__match_.__suffix_.second.__i_;
      if ((v6 & 0x400) != 0)
        break;
      std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(&v18);
    }
    if ((v6 & 0x200) == 0)
    {
      while (v12 != v11)
        std::string::push_back(a1, *v12++);
    }
  }
  if (v17.__match_.__matches_.__begin_)
  {
    v17.__match_.__matches_.__end_ = v17.__match_.__matches_.__begin_;
    operator delete(v17.__match_.__matches_.__begin_);
  }
  if (v18.__match_.__matches_.__begin_)
  {
    v18.__match_.__matches_.__end_ = v18.__match_.__matches_.__begin_;
    operator delete(v18.__match_.__matches_.__begin_);
  }
  return a1;
}

void sub_1AD7E110C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if (__p)
    operator delete(__p);
  if (a31)
    operator delete(a31);
  _Unwind_Resume(exception_object);
}

std::string *std::match_results<std::__wrap_iter<char const*>>::format<std::back_insert_iterator<std::string>>(std::string::value_type ***a1, std::string *this, unsigned __int8 *a3, unsigned __int8 *a4, __int16 a5)
{
  unsigned __int8 *v6;
  int v9;
  unsigned __int8 *v10;
  int v12;
  std::string::value_type *v13;
  std::string::value_type *v14;
  std::string::value_type v15;
  std::string::value_type *v16;
  std::string::value_type *v17;
  std::string::value_type v18;
  std::string::value_type *v19;
  std::string::value_type *v20;
  std::string::value_type v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  std::string::value_type *v27;
  std::string::value_type *v28;
  std::string::value_type v29;
  int v30;
  std::string::value_type *v31;
  std::string::value_type *v32;
  std::string::value_type v33;
  unsigned __int8 *v34;
  unint64_t v35;
  uint64_t v36;
  std::string::value_type *v37;
  std::string::value_type *v38;
  std::string::value_type v39;

  v6 = a3;
  if ((a5 & 0x100) != 0)
  {
    if (a3 == a4)
      return this;
    while (1)
    {
      v30 = *v6;
      if (v30 == 92)
      {
        v34 = v6 + 1;
        if (v6 + 1 != a4)
        {
          v30 = *v34;
          if ((v30 - 48) <= 9u)
          {
            v35 = (v30 - 48);
            if (0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1) <= v35)
              v36 = (uint64_t)(a1 + 3);
            else
              v36 = (uint64_t)&(*a1)[3 * v35];
            v37 = *(std::string::value_type **)v36;
            v38 = *(std::string::value_type **)(v36 + 8);
            while (v37 != v38)
            {
              v39 = *v37++;
              std::string::push_back(this, v39);
            }
            goto LABEL_55;
          }
          ++v6;
        }
      }
      else if (v30 == 38)
      {
        v31 = **a1;
        v32 = (*a1)[1];
        while (v31 != v32)
        {
          v33 = *v31++;
          std::string::push_back(this, v33);
        }
        goto LABEL_54;
      }
      std::string::push_back(this, v30);
LABEL_54:
      v34 = v6;
LABEL_55:
      v6 = v34 + 1;
      if (v34 + 1 == a4)
        return this;
    }
  }
  if (a3 != a4)
  {
    do
    {
      v9 = *v6;
      v10 = v6 + 1;
      if (v9 == 36 && v10 != a4)
      {
        v12 = (char)*v10;
        v9 = *v10;
        if (v12 > 38)
        {
          if (v12 == 39)
          {
            v19 = (std::string::value_type *)a1[9];
            v20 = (std::string::value_type *)a1[10];
            while (v19 != v20)
            {
              v21 = *v19++;
              std::string::push_back(this, v21);
            }
            goto LABEL_10;
          }
          if (v12 == 96)
          {
            v16 = (std::string::value_type *)a1[6];
            v17 = (std::string::value_type *)a1[7];
            while (v16 != v17)
            {
              v18 = *v16++;
              std::string::push_back(this, v18);
            }
            goto LABEL_10;
          }
        }
        else
        {
          if (v12 == 36)
            goto LABEL_9;
          if (v12 == 38)
          {
            v13 = **a1;
            v14 = (*a1)[1];
            while (v13 != v14)
            {
              v15 = *v13++;
              std::string::push_back(this, v15);
            }
            goto LABEL_10;
          }
        }
        if ((v9 - 48) <= 9)
        {
          v22 = *v10 - 48;
          if (v6 + 2 != a4)
          {
            v23 = v6[2];
            v24 = v23 - 48;
            v25 = v23 + 10 * (int)v22 - 48;
            if (v24 > 9)
            {
              v10 = v6 + 1;
            }
            else
            {
              v22 = v25;
              v10 = v6 + 2;
            }
          }
          if (0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1) <= v22)
            v26 = (uint64_t)(a1 + 3);
          else
            v26 = (uint64_t)&(*a1)[3 * (int)v22];
          v27 = *(std::string::value_type **)v26;
          v28 = *(std::string::value_type **)(v26 + 8);
          while (v27 != v28)
          {
            v29 = *v27++;
            std::string::push_back(this, v29);
          }
          goto LABEL_10;
        }
        LOBYTE(v9) = 36;
      }
      v10 = v6;
LABEL_9:
      std::string::push_back(this, v9);
LABEL_10:
      v6 = v10 + 1;
    }
    while (v10 + 1 != a4);
  }
  return this;
}

std::regex_iterator<std::__wrap_iter<const char *>, char> *__cdecl std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator++(std::regex_iterator<std::__wrap_iter<const char *>, char> *this)
{
  std::sub_match<std::__wrap_iter<const char *>> *begin;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *p_match;
  int i;
  unsigned __int32 flags;
  std::match_results<std::__wrap_iter<const char *>>::value_type *p_unmatched;
  __int32 *v7;
  const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *pregex;
  __int32 *v9;
  char v10;
  __int32 *v11;
  const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *v12;
  char v13;
  std::match_results<const wchar_t *> __p;

  p_match = &this->__match_;
  begin = this->__match_.__matches_.__begin_;
  i = (int)p_match[-1].__position_start_.__i_;
  flags = i | 0x800;
  LODWORD(p_match[-1].__position_start_.__i_) = i | 0x800;
  if (p_match->__matches_.__end_ == begin)
    p_unmatched = &p_match->__unmatched_;
  else
    p_unmatched = begin;
  v7 = (__int32 *)p_unmatched->second.__i_;
  if ((__int32 *)p_unmatched->first.__i_ != v7)
  {
LABEL_5:
    this->__flags_ = flags | 0x80;
    v9 = (__int32 *)this->__end_.__i_;
    pregex = this->__pregex_;
    memset(&__p.__prefix_, 0, 17);
    memset(&__p.__suffix_, 0, 17);
    __p.__ready_ = 0;
    __p.__position_start_ = 0;
    memset(&__p, 0, 41);
    v10 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)pregex, v7, v9, &__p, flags | 0x80);
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::wssub_match> *)p_match, (uint64_t)v7, (std::sub_match<std::__wrap_iter<const wchar_t *>> *)v9, (uint64_t *)&__p, (flags & 0x800) != 0);
    if (__p.__matches_.__begin_)
    {
      __p.__matches_.__end_ = __p.__matches_.__begin_;
      operator delete(__p.__matches_.__begin_);
    }
    if ((v10 & 1) == 0)
    {
      begin = p_match->__matches_.__begin_;
LABEL_14:
      if (begin)
      {
        this->__match_.__matches_.__end_ = begin;
        operator delete(begin);
        p_match->__matches_.__begin_ = 0;
        p_match->__matches_.__end_ = 0;
        p_match->__matches_.__end_cap_.__value_ = 0;
      }
      this->__match_.__ready_ = 0;
      *(_OWORD *)&p_match->__matches_.__begin_ = 0u;
      *(_OWORD *)&p_match->__matches_.__end_cap_.__value_ = 0u;
      *(std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> *)((char *)&p_match->__unmatched_.std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>
                                                                                   + 1) = 0u;
      this->__match_.__prefix_.first.__i_ = 0;
      this->__match_.__prefix_.second.__i_ = 0;
      this->__match_.__prefix_.matched = 0;
      this->__match_.__suffix_.first.__i_ = 0;
      this->__match_.__suffix_.second.__i_ = 0;
      this->__match_.__suffix_.matched = 0;
      this->__match_.__position_start_.__i_ = 0;
      return this;
    }
    return this;
  }
  v11 = (__int32 *)this->__end_.__i_;
  if (v11 == v7)
    goto LABEL_14;
  v12 = this->__pregex_;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  v13 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v12, v7, v11, &__p, i | 0x860u);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::wssub_match> *)p_match, (uint64_t)v7, (std::sub_match<std::__wrap_iter<const wchar_t *>> *)v11, (uint64_t *)&__p, 1);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if ((v13 & 1) == 0)
  {
    v7 = (__int32 *)((char *)v7 + 1);
    flags = this->__flags_;
    goto LABEL_5;
  }
  return this;
}

void sub_1AD7E1554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  size_t v4;
  void **v5;
  char v6;
  size_t v7;
  const void *p_p;
  size_t v9;
  void **v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  void **v15;
  size_t v16;
  uint64_t v17;
  void *__p;
  size_t v19;
  uint64_t v20;

  if (*(_BYTE *)(a1 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char *,char *>(&__p, *(char **)a1, *(char **)(a1 + 8), *(_QWORD *)(a1 + 8) - *(_QWORD *)a1);
  }
  else
  {
    __p = 0;
    v19 = 0;
    v20 = 0;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char *,char *>(&v15, *(char **)a2, *(char **)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
    v3 = HIBYTE(v17);
    v5 = v15;
    v4 = v16;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v3 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
  }
  v6 = HIBYTE(v20);
  if (v20 >= 0)
    v7 = HIBYTE(v20);
  else
    v7 = v19;
  if (v20 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v3 & 0x80u) == 0)
    v9 = v3;
  else
    v9 = v4;
  if ((v3 & 0x80u) == 0)
    v10 = (void **)&v15;
  else
    v10 = v5;
  if (v9 >= v7)
    v11 = v7;
  else
    v11 = v9;
  v12 = memcmp(p_p, v10, v11);
  if ((v3 & 0x80) != 0)
  {
    operator delete(v5);
    if ((v20 & 0x8000000000000000) == 0)
      goto LABEL_24;
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_24;
  }
  operator delete(__p);
LABEL_24:
  v13 = v9 < v7;
  if (v7 < v9)
    v13 = -1;
  if (v12)
    return v12;
  else
    return v13;
}

void sub_1AD7E1684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x1AF44CADC](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1AD7E17CC(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1AD7E1798);
  }
  __cxa_rethrow();
}

void sub_1AD7E1810(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::RegexReplacementRule>::__emplace_back_slow_path<std::string &>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1745D1745D1745DLL)
    v9 = 0x2E8BA2E8BA2E8BALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,quasar::PTree>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[88 * v4];
  v16 = &v10[88 * v9];
  quasar::RegexReplacementRule::RegexReplacementRule((uint64_t)v14, a2);
  v15 = v14 + 88;
  std::vector<quasar::RegexReplacementRule>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::RegexReplacementRule>::~__split_buffer(&v13);
  return v11;
}

void sub_1AD7E192C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::RegexReplacementRule>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::RegexReplacementRule>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::RegexReplacementRule>,std::reverse_iterator<quasar::RegexReplacementRule*>,std::reverse_iterator<quasar::RegexReplacementRule*>,std::reverse_iterator<quasar::RegexReplacementRule*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::RegexReplacementRule>,std::reverse_iterator<quasar::RegexReplacementRule*>,std::reverse_iterator<quasar::RegexReplacementRule*>,std::reverse_iterator<quasar::RegexReplacementRule*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      std::locale::locale((std::locale *)(v7 - 88), (const std::locale *)(v9 - 88));
      *(_OWORD *)(v7 - 80) = *(_OWORD *)(v9 - 80);
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(v9 - 64);
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(v9 - 48);
      *(_QWORD *)(v9 - 48) = 0;
      *(_QWORD *)(v9 - 40) = 0;
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(v9 - 32);
      v10 = *(_OWORD *)(v9 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(v9 - 8);
      *(_OWORD *)(v7 - 24) = v10;
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v9 - 8) = 0;
      v7 = *((_QWORD *)&v16 + 1) - 88;
      *((_QWORD *)&v16 + 1) -= 88;
      v9 -= 88;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::RegexReplacementRule>,std::reverse_iterator<quasar::RegexReplacementRule*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::RegexReplacementRule>,std::reverse_iterator<quasar::RegexReplacementRule*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::RegexReplacementRule>,std::reverse_iterator<quasar::RegexReplacementRule*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::RegexReplacementRule>,std::reverse_iterator<quasar::RegexReplacementRule*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::RegexReplacementRule>::destroy[abi:ne180100](v3, v1);
      v1 += 88;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::RegexReplacementRule>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::RegexReplacementRule>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::RegexReplacementRule>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 88;
    std::allocator<quasar::RegexReplacementRule>::destroy[abi:ne180100](v4, i - 88);
  }
}

void kaldi::decode(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, int a7@<W7>, uint64_t *a8@<X8>, char a9)
{
  unint64_t v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  int *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  float *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  float *v35;
  float *v36;
  uint64_t v37;
  int v38;
  void *v39;
  unint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD *v43;
  void *v44;
  char *v45;
  void *v46;
  char *v47;
  int64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int v54;
  int v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  _QWORD v98[3];
  void *v99[3];
  void *v100;
  uint64_t v101;
  unsigned __int8 v102;
  void *v103;
  void *__p;
  _QWORD v105[33];
  void *v106;
  unint64_t v107;
  char *v108;
  __int128 v109;
  unint64_t v110;
  int32x2_t v111;
  float *v112;
  int v113;
  int32x2_t v114[3];
  int v115;
  int32x2_t v116;
  __int128 v117;
  __int128 v118;
  char v119;
  int32x2_t v120;
  __int128 v121;
  __int128 v122;
  char v123;
  int32x2_t v124;
  __int128 v125;
  __int128 v126;
  char v127;
  __int128 v128;
  unint64_t v129;
  void **v130[3];

  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v103);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v103, (uint64_t)"receive a prompt of size ", 25);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v103);
  }
  kaldi::quasar::CEDecoder::ResetStates(*a1);
  v12 = (int)kaldi::quasar::CEDecoder::BeamSize((kaldi::quasar::CEDecoder *)*a1);
  LODWORD(v103) = -947920896;
  v105[0] = 0;
  v105[1] = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  std::vector<std::pair<float,std::vector<int>>>::vector(&v128, v12, (uint64_t)&v103);
  if (__p)
  {
    v105[0] = __p;
    operator delete(__p);
  }
  *(_DWORD *)v128 = 0;
  v126 = 0u;
  v125 = 0u;
  v124 = (int32x2_t)&unk_1E5D34170;
  v127 = 0;
  v122 = 0u;
  v121 = 0u;
  v120 = (int32x2_t)&unk_1E5D34170;
  v123 = 0;
  v118 = 0u;
  v117 = 0u;
  v116 = (int32x2_t)&unk_1E5D34170;
  v119 = 0;
  kaldi::CuMatrix<float>::CuMatrix(v114, v12, 1, 1, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix(&v111, v12, 1, 1, 0, 0);
  if ((int)v12 >= 1)
  {
    v13 = 0;
    v14 = v112;
    v15 = 4 * v113;
    do
    {
      *v14 = (float)(int)v13++;
      v14 = (float *)((char *)v14 + v15);
    }
    while (v12 != v13);
  }
  v16 = *(int **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 != 4)
  {
    v17 = 0;
    do
    {
      kaldi::CuMatrixBase<float>::Set((uint64_t)v114, (float)v16[v17]);
      kaldi::quasar::CEDecoder::Compute(*a1, (uint64_t)v114, (uint64_t)&v111, a3, &v124, &v120, &v116);
      ++v17;
      v16 = *(int **)a2;
    }
    while (((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2) - 1 > v17);
  }
  v109 = 0uLL;
  v110 = 0;
  a8[1] = 0;
  a8[2] = 0;
  *a8 = 0;
  v93 = v12;
  if (a7 >= 1)
  {
    v18 = 0;
    v92 = a7;
    v19 = v12;
    v89 = a3;
    do
    {
      if (v12 <= (a8[1] - *a8) >> 5)
        break;
      if (a9)
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a8);
      if ((int)v12 >= 1)
      {
        v20 = 0;
        v21 = (uint64_t)(*((_QWORD *)&v128 + 1) - v128) >> 5;
        v22 = (float *)v114[1];
        v23 = (_QWORD *)(v128 + 16);
        v24 = 4 * v115;
        do
        {
          if (v21 <= v20)
            *((_DWORD *)v23 - 4) = -947920896;
          else
            *v22 = (float)*(int *)(*v23 - 4);
          ++v20;
          v23 += 4;
          v22 = (float *)((char *)v22 + v24);
        }
        while (v19 != v20);
      }
      kaldi::quasar::CEDecoder::Compute(*a1, (uint64_t)v114, (uint64_t)&v111, a3, &v124, &v120, &v116);
      v94 = v18;
      v106 = 0;
      v107 = 0;
      v108 = 0;
      if ((int)v12 < 1)
      {
        v25 = 0;
        v39 = 0;
      }
      else
      {
        v25 = 0;
        v26 = 0;
        do
        {
          v27 = 0;
          do
          {
            v28 = *(float *)(v128 + 32 * v26) + *(float *)(v125 + 4 * (int)v126 * (int)v26 + 4 * v27);
            v29 = v121 + 4 * (int)v122 * (int)v26;
            if (v25 >= (unint64_t)v108)
            {
              v30 = v106;
              v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (_QWORD)v106) >> 2);
              v32 = v31 + 1;
              if (v31 + 1 > 0x1555555555555555)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((v108 - (_BYTE *)v106) >> 2) > v32)
                v32 = 0x5555555555555556 * ((v108 - (_BYTE *)v106) >> 2);
              if (0xAAAAAAAAAAAAAAABLL * ((v108 - (_BYTE *)v106) >> 2) >= 0xAAAAAAAAAAAAAAALL)
                v33 = 0x1555555555555555;
              else
                v33 = v32;
              if (v33)
              {
                v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>((uint64_t)&v108, v33);
                v30 = v106;
                v25 = v107;
              }
              else
              {
                v34 = 0;
              }
              v35 = (float *)&v34[12 * v31];
              *(_DWORD *)v35 = v26;
              v35[1] = v28;
              *((_DWORD *)v35 + 2) = (int)*(float *)(v29 + 4 * v27);
              v36 = v35;
              if ((void *)v25 != v30)
              {
                do
                {
                  v37 = *(_QWORD *)(v25 - 12);
                  v25 -= 12;
                  v38 = *(_DWORD *)(v25 + 8);
                  *(_QWORD *)(v36 - 3) = v37;
                  v36 -= 3;
                  *((_DWORD *)v36 + 2) = v38;
                }
                while ((void *)v25 != v30);
                v30 = v106;
              }
              v25 = (unint64_t)(v35 + 3);
              v106 = v36;
              v107 = (unint64_t)(v35 + 3);
              v108 = &v34[12 * v33];
              if (v30)
                operator delete(v30);
            }
            else
            {
              *(_DWORD *)v25 = v26;
              *(float *)(v25 + 4) = v28;
              *(_DWORD *)(v25 + 8) = (int)*(float *)(v29 + 4 * v27);
              v25 += 12;
            }
            v107 = v25;
            ++v27;
          }
          while (v27 != v19);
          ++v26;
        }
        while (v26 != v19);
        v39 = v106;
        v12 = v93;
        a3 = v89;
      }
      v40 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (_QWORD)v39) >> 2));
      v41 = (void *)v25 == v39 ? 0 : v40;
      std::__introsort<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *,false>((uint64_t)v39, v25, v41, 1);
      v42 = v106;
      v43 = (_DWORD *)v107;
      while (v42 != v43)
      {
        v44 = *(void **)v42;
        LODWORD(v101) = v42[2];
        v100 = v44;
        __p = 0;
        v105[0] = 0;
        v103 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v103, *(const void **)(v128 + 32 * (int)v44 + 8), *(_QWORD *)(v128 + 32 * (int)v44 + 16), (uint64_t)(*(_QWORD *)(v128 + 32 * (int)v44 + 16) - *(_QWORD *)(v128 + 32 * (int)v44 + 8)) >> 2);
        v45 = (char *)__p;
        if ((unint64_t)__p >= v105[0])
        {
          v47 = (char *)v103;
          v48 = ((_BYTE *)__p - (_BYTE *)v103) >> 2;
          v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v50 = v105[0] - (_QWORD)v103;
          if ((uint64_t)(v105[0] - (_QWORD)v103) >> 1 > v49)
            v49 = v50 >> 1;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
            v51 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v51 = v49;
          if (v51)
          {
            v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v105, v51);
            v47 = (char *)v103;
            v45 = (char *)__p;
          }
          else
          {
            v52 = 0;
          }
          v53 = &v52[4 * v48];
          *(_DWORD *)v53 = v101;
          v46 = v53 + 4;
          while (v45 != v47)
          {
            v54 = *((_DWORD *)v45 - 1);
            v45 -= 4;
            *((_DWORD *)v53 - 1) = v54;
            v53 -= 4;
          }
          v103 = v53;
          __p = v46;
          v105[0] = &v52[4 * v51];
          if (v47)
            operator delete(v47);
        }
        else
        {
          *(_DWORD *)__p = v101;
          v46 = v45 + 4;
        }
        __p = v46;
        v55 = v101;
        if (v55 == kaldi::quasar::CEFusedAcousticEncoder::GetContextEmbeddingMaskDim((kaldi::quasar::CEFusedAcousticEncoder *)*a1))
        {
          if (*((float *)&v100 + 1) > -65504.0)
          {
            v56 = a8[1];
            if (v56 >= a8[2])
            {
              v57 = std::vector<std::pair<float,std::vector<int>>>::__emplace_back_slow_path<float &,std::vector<int>&>(a8, (_DWORD *)&v100 + 1, (uint64_t)&v103);
            }
            else
            {
              std::vector<std::pair<float,std::vector<int>>>::__construct_one_at_end[abi:ne180100]<float &,std::vector<int>&>((uint64_t)a8, (_DWORD *)&v100 + 1, (uint64_t)&v103);
              v57 = v56 + 32;
            }
            a8[1] = v57;
            v60 = *(_QWORD *)(a5 + 24);
            if (!v60)
              std::__throw_bad_function_call[abi:ne180100]();
            *(float *)(a8[1] - 32) = (*(float (**)(_QWORD, uint64_t))(*(_QWORD *)v60 + 48))(*(_QWORD *)(a5 + 24), v57 - 32);
          }
        }
        else
        {
          v58 = *((_QWORD *)&v109 + 1);
          v112[(int)(v113 * ((*((_QWORD *)&v109 + 1) - (_QWORD)v109) >> 5))] = (float)(int)v100;
          if (v58 >= v110)
          {
            v59 = std::vector<std::pair<float,std::vector<int>>>::__emplace_back_slow_path<float &,std::vector<int>&>((uint64_t *)&v109, (_DWORD *)&v100 + 1, (uint64_t)&v103);
          }
          else
          {
            *(_DWORD *)v58 = HIDWORD(v100);
            *(_QWORD *)(v58 + 16) = 0;
            *(_QWORD *)(v58 + 24) = 0;
            *(_QWORD *)(v58 + 8) = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v58 + 8), v103, (uint64_t)__p, ((_BYTE *)__p - (_BYTE *)v103) >> 2);
            v59 = v58 + 32;
          }
          *((_QWORD *)&v109 + 1) = v59;
        }
        if (v12 == (uint64_t)(*((_QWORD *)&v109 + 1) - v109) >> 5 || v12 == (a8[1] - *a8) >> 5)
        {
          if (v103)
          {
            __p = v103;
            operator delete(v103);
          }
          break;
        }
        if (v103)
        {
          __p = v103;
          operator delete(v103);
        }
        v42 += 3;
      }
      v61 = a8[1];
      v62 = 126 - 2 * __clz((uint64_t)(v61 - *a8) >> 5);
      if (v61 == *a8)
        v63 = 0;
      else
        v63 = v62;
      _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_Lb0EEEvT1_S1D_S17_NS_15iterator_traitsIS1D_E15difference_typeEb(*a8, v61, v63, 1);
      if (*((_QWORD *)&v109 + 1) != (_QWORD)v109)
      {
        v64 = *(_QWORD *)(a6 + 24);
        if (!v64)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v64 + 48))(v64, v109 + 8);
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v103, 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v103, (uint64_t)"pending info  (", 15);
          v65 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"/", 1);
          v66 = (_QWORD *)std::ostream::operator<<();
          v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)") : ", 4);
          memset(v99, 0, sizeof(v99));
          std::vector<std::pair<float,std::vector<int>>>::__init_with_size[abi:ne180100]<std::pair<float,std::vector<int>>*,std::pair<float,std::vector<int>>*>(v99, v109, *((uint64_t *)&v109 + 1), (uint64_t)(*((_QWORD *)&v109 + 1) - v109) >> 5);
          v68 = *(_QWORD *)(a4 + 24);
          if (!v68)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v68 + 48))(&v100, v68, v99);
          if ((v102 & 0x80u) == 0)
            v69 = &v100;
          else
            v69 = v100;
          if ((v102 & 0x80u) == 0)
            v70 = v102;
          else
            v70 = v101;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v69, v70);
          if ((char)v102 < 0)
            operator delete(v100);
          v130[0] = v99;
          std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100](v130);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v103);
        }
      }
      if (a8[1] != *a8 && kaldi::g_kaldi_verbose_level >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v103, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v103, (uint64_t)"finished info (", 15);
        v71 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"/", 1);
        v72 = (_QWORD *)std::ostream::operator<<();
        v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)") : ", 4);
        memset(v98, 0, sizeof(v98));
        std::vector<std::pair<float,std::vector<int>>>::__init_with_size[abi:ne180100]<std::pair<float,std::vector<int>>*,std::pair<float,std::vector<int>>*>(v98, *a8, a8[1], (a8[1] - *a8) >> 5);
        v74 = *(_QWORD *)(a4 + 24);
        if (!v74)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v74 + 48))(&v100, v74, v98);
        if ((v102 & 0x80u) == 0)
          v75 = &v100;
        else
          v75 = v100;
        if ((v102 & 0x80u) == 0)
          v76 = v102;
        else
          v76 = v101;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)v75, v76);
        if ((char)v102 < 0)
          operator delete(v100);
        v130[0] = (void **)v98;
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100](v130);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v103);
      }
      std::vector<std::pair<float,std::vector<int>>>::__vdeallocate((uint64_t *)&v128);
      v128 = v109;
      v129 = v110;
      v110 = 0;
      v109 = 0uLL;
      if (v106)
      {
        v107 = (unint64_t)v106;
        operator delete(v106);
      }
      v18 = v94 + 1;
    }
    while (v94 + 1 != v92);
  }
  if ((int)v12 <= 0)
  {
    v79 = a8;
    v80 = a8[1];
  }
  else
  {
    v77 = 0;
    v78 = v12;
    v79 = a8;
    v80 = a8[1];
    v81 = 32 * v78;
    do
    {
      if (v93 <= (uint64_t)(v80 - *v79) >> 5)
        break;
      v82 = v128 + v77;
      if (v80 >= v79[2])
      {
        v83 = std::vector<std::pair<float,std::vector<int>>>::__push_back_slow_path<std::pair<float,std::vector<int>> const&>(v79, v82);
      }
      else
      {
        std::vector<std::pair<float,std::vector<int>>>::__construct_one_at_end[abi:ne180100]<std::pair<float,std::vector<int>> const&>((uint64_t)v79, v82);
        v83 = v80 + 32;
      }
      a8[1] = v83;
      v84 = *(_QWORD *)(a5 + 24);
      if (!v84)
        std::__throw_bad_function_call[abi:ne180100]();
      v85 = (*(float (**)(_QWORD, uint64_t))(*(_QWORD *)v84 + 48))(*(_QWORD *)(a5 + 24), v83 - 32);
      v79 = a8;
      v80 = a8[1];
      *(float *)(v80 - 32) = v85;
      v77 += 32;
    }
    while (v81 != v77);
  }
  v86 = 126 - 2 * __clz((uint64_t)(v80 - *v79) >> 5);
  if (v80 == *v79)
    v87 = 0;
  else
    v87 = v86;
  _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_Lb0EEEvT1_S1D_S17_NS_15iterator_traitsIS1D_E15difference_typeEb(*v79, v80, v87, 1);
  v88 = *(_QWORD *)(a6 + 24);
  if (!v88)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v88 + 48))(v88, *v79 + 8);
  v103 = &v109;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v111);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v114);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v116);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v120);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v124);
  v103 = &v128;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
}

void sub_1AD7E26E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31)
{
  uint64_t v31;

  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x230]);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x260]);
  kaldi::CuMatrix<float>::~CuMatrix(v31 - 240);
  kaldi::CuMatrix<float>::~CuMatrix(v31 - 192);
  a31 = (void *)(v31 - 144);
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

uint64_t quasar::AEDBeamSearchDecoder::AEDBeamSearchDecoder(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t i;
  _OWORD *v5;
  unsigned __int8 v7[24];
  _QWORD v8[4];

  v8[3] = *MEMORY[0x1E0C80C00];
  v3 = quasar::Decoder::Decoder(a1, a2);
  *(_QWORD *)v3 = &off_1E5D37828;
  *(_BYTE *)(v3 + 448) = 0;
  *(_DWORD *)(v3 + 452) = -1;
  *(_QWORD *)(v3 + 456) = 0x8000000080;
  *(_WORD *)(v3 + 464) = 1;
  std::string::basic_string[abi:ne180100]<0>(v7, "<?>");
  std::string::basic_string[abi:ne180100]<0>(v8, "<eps>");
  std::unordered_set<std::string>::unordered_set(a1 + 472, v7, 2);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v8[i + 2]) < 0)
      operator delete(*(void **)&v7[i * 8 + 24]);
  }
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 520), "▁");
  *(_QWORD *)(a1 + 656) = 0;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig::OnlineLatticeBiglmFasterDecoderConfig((kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig *)(a1 + 664));
  *(_QWORD *)(a1 + 824) = 0xCF000000CF000000;
  *(_BYTE *)(a1 + 832) = 0;
  v5[11] = 0u;
  v5[12] = 0u;
  v5[13] = 0u;
  v5[14] = 0u;
  *(_OWORD *)((char *)v5 + 233) = 0u;
  *(_DWORD *)(a1 + 916) = 5000;
  *(_BYTE *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 924) = 0u;
  *(_OWORD *)(a1 + 940) = 0u;
  *(_OWORD *)(a1 + 953) = 0u;
  *(_BYTE *)(a1 + 969) = 1;
  *(_QWORD *)(a1 + 972) = 60000;
  *(_DWORD *)(a1 + 980) = 500;
  *(_WORD *)(a1 + 984) = 0;
  *(_QWORD *)(a1 + 988) = 0x60000000BLL;
  *(_BYTE *)(a1 + 57) = 1;
  return a1;
}

void sub_1AD7E2A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  void **v19;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v15 + 648);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v15 + 632);
  if (*(char *)(v15 + 631) < 0)
    operator delete(*(void **)(v15 + 608));
  if (*(char *)(v15 + 607) < 0)
    operator delete(*(void **)(v15 + 584));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v18);
  if (*(char *)(v15 + 567) < 0)
    operator delete(*v19);
  if (*(char *)(v15 + 543) < 0)
    operator delete(*v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v16);
  quasar::Decoder::~Decoder((void **)v15);
  _Unwind_Resume(a1);
}

void quasar::AEDBeamSearchDecoder::~AEDBeamSearchDecoder(void **this)
{
  void **v2;

  *this = &off_1E5D37828;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 119));
  v2 = this + 116;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 911) < 0)
    operator delete(this[111]);
  if (*((char *)this + 887) < 0)
    operator delete(this[108]);
  if (*((char *)this + 863) < 0)
    operator delete(this[105]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 81));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 79));
  if (*((char *)this + 631) < 0)
    operator delete(this[76]);
  if (*((char *)this + 607) < 0)
    operator delete(this[73]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 71));
  if (*((char *)this + 567) < 0)
    operator delete(this[68]);
  if (*((char *)this + 543) < 0)
    operator delete(this[65]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 59));
  quasar::Decoder::~Decoder(this);
}

{
  quasar::AEDBeamSearchDecoder::~AEDBeamSearchDecoder(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::AEDBeamSearchDecoder::registerParams(quasar::AEDBeamSearchDecoder *this, quasar::SystemConfig *a2)
{
  void *v4[2];
  char v5;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "AED-beam-search-decoder");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 271, 0, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "symbol-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "symbol table (text format) filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 544, (uint64_t)v4, 1, 16, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "exit-without-search");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default false) disable beam search (for encoder-only energy measurement) ");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 448, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "encoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "the encoder portion of AED");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 584, (uint64_t)v4, 1, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "decoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "the decoder portion of AED");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 608, (uint64_t)v4, 1, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "separator");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default ▁) indictator of the start of a new word for BPE");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 520, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "num-frames-per-decoding-window");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default -1) read all frames if negative");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 452, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max-output-size-per-window");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default 128) maximum number of symbols to be output per decoding window");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 456, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max-history-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default 128) how many confirmed words from the previous window are used as the prompt of the current window");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 460, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "reset-candidate-pool-every-step");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default true, whisper's behavior), reset candidate pool at the beginning of every decoding step, no reset otherwise. Exit decoding when candidate pool is full");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 464, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "rejected-left-context-tokens");
  std::string::basic_string[abi:ne180100]<0>(v4, "List of tokens that don't work with left context. The decoder will reset the left context when it encounters one of these tokens.");
  quasar::SystemConfig::Register<std::unordered_set<std::string>>((uint64_t)a2, (const void **)__p, (uint64_t)this + 472, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "inter-utterance-left-context-max-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "Maximum size for inter-utterance left context");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 512, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "use-utterance-level-timestamp");
  std::string::basic_string[abi:ne180100]<0>(v4, "use utterance level timestamp to overwirte the word level timestamp");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 984, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "preserve-white-space");
  std::string::basic_string[abi:ne180100]<0>(v4, "Preserve white space from decoder, default is true");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 465, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "use-dynamic-shapes");
  std::string::basic_string[abi:ne180100]<0>(v4, "default false");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 985, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "subsampler-window-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default 11) the window size in the encoder for subsampling. Used to compute paddings when use-dynamic-shapes is True");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 988, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "subsampler-stride-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default 6) the stride size in the encoder for subsampling. Used to compute paddings when use-dynamic-shapes is True");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 992, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "utt-detect.");
  quasar::UttDetectConfig::registerParams((uint64_t)this + 664, a2, (const void **)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  *((_DWORD *)this + 128) = 4;
}

void sub_1AD7E333C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::Register<std::unordered_set<std::string>>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t *v15;
  uint64_t *v16;
  uint64_t **v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  void **v21;

  quasar::SystemConfig::Register(a1, a2, a3);
  quasar::SystemConfig::Version::Version(&v20, a6, a7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v21 = __p;
  v15 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1464), (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
  v15[7] = v20;
  if (v19 < 0)
    operator delete(__p[0]);
  quasar::SystemConfig::Version::Version(&v20, a8, a9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v21 = __p;
  v16 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1488), (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
  v16[7] = v20;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (!a5)
      return;
  }
  else if (!a5)
  {
    return;
  }
  __p[0] = (void *)(a1 + 816);
  v17 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1512), (const void **)(a1 + 816), (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v17, (const void **)__p, (uint64_t)__p);
  if (v19 < 0)
    operator delete(__p[0]);
}

void sub_1AD7E356C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::Register<unsigned int>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t *v15;
  uint64_t *v16;
  uint64_t **v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  void **v21;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  quasar::SystemConfig::Version::Version(&v20, a6, a7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v21 = __p;
  v15 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1464), (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
  v15[7] = v20;
  if (v19 < 0)
    operator delete(__p[0]);
  quasar::SystemConfig::Version::Version(&v20, a8, a9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v21 = __p;
  v16 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1488), (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
  v16[7] = v20;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (!a5)
      return;
  }
  else if (!a5)
  {
    return;
  }
  __p[0] = (void *)(a1 + 816);
  v17 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1512), (const void **)(a1 + 816), (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v17, (const void **)__p, (uint64_t)__p);
  if (v19 < 0)
    operator delete(__p[0]);
}

void sub_1AD7E3714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::UttDetectConfig::registerParams(uint64_t a1, quasar::SystemConfig *this, const void **a3)
{
  void *v6[2];
  char v7;
  std::string __p;
  std::string v9;

  quasar::SystemConfig::getPrefix(this, &v9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v9.__r_.__value_.__l.__data_, a3, (uint64_t)&__p);
  quasar::SystemConfig::setPrefix((std::string *)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig::Register(a1, (uint64_t)this);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  quasar::EndPointDecoderConfig::registerParams(a1 + 160, this, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "use-nnet");
  std::string::basic_string[abi:ne180100]<0>(v6, "Use nnet for utterance detection if true");
  quasar::SystemConfig::Register<BOOL>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 304, (uint64_t)v6, 1, 15, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "left-context");
  std::string::basic_string[abi:ne180100]<0>(v6, "Use left context for utterance detection if true");
  quasar::SystemConfig::Register<BOOL>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 305, (uint64_t)v6, 0, 15, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "hard-max-utt-length-ms");
  std::string::basic_string[abi:ne180100]<0>(v6, "If the utterance exceeds this length, force trigger the utterance detector. Ignored if <= 0. It is named 'hard' because there is a softer 'max-utt-length' config that does not trigger right away when exceeded.");
  quasar::SystemConfig::Register<int>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 308, (uint64_t)v6, 0, 108, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "utt-start-threshold");
  std::string::basic_string[abi:ne180100]<0>(v6, "If the speech activity detection model produce a score higher than threshold, we enable the decoder for graph/beam search. ");
  quasar::SystemConfig::Register<float>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 312, (uint64_t)v6, 0, 108, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "utt-start-silence-length-ms");
  std::string::basic_string[abi:ne180100]<0>(v6, "We include up to this much preceding silence when a new utterance start is detected. ");
  quasar::SystemConfig::Register<int>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 316, (uint64_t)v6, 0, 108, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  quasar::SystemConfig::setPrefix((std::string *)this, &v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_1AD7E3A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::AEDBeamSearchDecoder::finishInit(quasar::AEDBeamSearchDecoder *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *result;
  unint64_t v18;
  __int128 v19[17];
  unsigned __int8 *v20;
  std::__shared_weak_count *v21;

  quasar::ModelLoader::readSymbolTable(*((_QWORD *)this + 46), (uint64_t)this + 544, 4, 0, (uint64_t *)v19);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 568, v19);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v19[0] + 1);
  if (*((_QWORD *)&v19[0] + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v19[0] + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (_QWORD *)*((_QWORD *)this + 46);
  v20 = 0;
  v21 = 0;
  quasar::ModelLoader::readNeuralNetwork(v5, (uint64_t)this + 584, 1u, 1u, 1, &v20, (uint64_t *)v19);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 632, v19);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v19[0] + 1);
  if (*((_QWORD *)&v19[0] + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v19[0] + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::allocate_shared[abi:ne180100]<kaldi::quasar::CEDecoder,std::allocator<kaldi::quasar::CEDecoder>,std::string &,void>(v19);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 648, v19);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v19[0] + 1);
  if (*((_QWORD *)&v19[0] + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v19[0] + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  quasar::EndPointDecoderConfig::init((quasar::AEDBeamSearchDecoder *)((char *)this + 824));
  if (*((_DWORD *)this + 113) == -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, "num-frames-per-decoding-window only supports positive integers for now");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  v15 = (_QWORD *)kaldi::quasar::CEDecoder::StartOfPrevious(*((kaldi::quasar::CEDecoder **)this + 81));
  v16 = v15[1] - *v15;
  result = (_QWORD *)kaldi::quasar::CEDecoder::StartOfTranscript(*((kaldi::quasar::CEDecoder **)this + 81));
  v18 = ((uint64_t)(result[1] - *result) >> 2) + (v16 >> 2);
  if (v18 > *((int *)this + 115))
    *((_DWORD *)this + 115) = v18;
  return result;
}

void sub_1AD7E3CA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 - 56);
  _Unwind_Resume(a1);
}

uint64_t quasar::AEDBeamSearchDecoder::runImpl(uint64_t a1, uint64_t a2, uint64_t *a3, quasar::SpeechRequestData **a4)
{
  uint64_t *v4;
  BOOL v7;
  std::__shared_weak_count *end;
  unint64_t *p_size;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  char begin;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  const void *v35;
  kaldi::quasar::CEInferenceNet *v36;
  kaldi::quasar::CEInferenceNet *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::vector<std::wstring>::pointer v41;
  std::vector<std::wstring>::pointer v42;
  std::string::size_type v43;
  std::string::size_type size;
  __int128 v45;
  uint64_t v46;
  uint64_t Config;
  BOOL v48;
  int v49;
  int v50;
  int v51;
  unsigned int v52;
  int *v53;
  float SilencePosterior;
  unsigned int v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  BOOL v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  int v66;
  int v67;
  _QWORD *v68;
  int v69;
  int v70;
  int v71;
  kaldi::quasar::CEInferenceNet *v72;
  _QWORD *ComputeEngine;
  kaldi::quasar::ComputeEngineBufferItf *v74;
  std::string::size_type v75;
  uint64_t v76;
  std::string::size_type v77;
  kaldi::quasar::ComputeEngineBufferItf *v78;
  uint64_t v79;
  uint64_t i;
  kaldi::quasar::ComputeEngineBufferItf *v81;
  int v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  _DWORD *v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  _DWORD *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  int v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t (***v104)();
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  _QWORD *v108;
  std::string *v109;
  std::string::size_type v110;
  int *v111;
  int *v112;
  char *v113;
  char *v114;
  int *v115;
  char *v116;
  _BYTE *v117;
  uint64_t v118;
  int *v119;
  int *v120;
  int *j;
  std::vector<std::wstring>::pointer v122;
  std::vector<std::wstring>::pointer v123;
  int v124;
  std::string::size_type v125;
  std::string::size_type v126;
  void *v127;
  uint64_t v128;
  unint64_t v129;
  int64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  int v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  int *v138;
  int *v139;
  int v140;
  std::string *v141;
  __int128 *v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  int v147;
  void *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  kaldi::quasar::ComputeEngineBufferItf *v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  std::vector<std::wstring>::pointer v160;
  std::vector<std::wstring>::pointer v161;
  __int128 v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  int v166;
  kaldi::quasar::ComputeEngineBufferItf *v167;
  uint64_t v168;
  uint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  std::wstring *v176;
  std::wstring *v177;
  std::wstring *v178;
  std::wstring *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  int v184;
  unsigned int v185;
  unsigned int v187;
  unsigned int v188;
  void *v189;
  uint64_t v190;
  kaldi::quasar::ComputeEngineBufferItf *v191;
  uint64_t v192;
  std::string v193;
  uint64_t v194[2];
  kaldi::quasar::ComputeEngineBufferItf *v195;
  int64x2_t v196;
  __int128 v197;
  int v198;
  void *v199;
  void *v200;
  uint64_t v201;
  int v202;
  std::vector<std::wstring> v203;
  kaldi::quasar::ComputeEngineBufferItf *v204;
  kaldi::quasar::ComputeEngineBufferItf *v205;
  int32x2_t v206;
  std::wstring *v207;
  unsigned int v208;
  std::wstring *v209;
  std::wstring *v210;
  std::vector<std::wstring>::pointer v211;
  int v212;
  unsigned int (***v213)(_QWORD, int *, uint64_t, _QWORD, uint64_t, std::vector<std::wstring> *, void **, _QWORD, float, float, float, float, float, uint64_t, int *, _DWORD);
  void *v214;
  char *v215;
  uint64_t v216;
  kaldi::quasar::CEInferenceNet *v217;
  std::__shared_weak_count *v218;
  _BYTE v219[7];
  __int128 v220;
  BOOL v221;
  __int128 v222;
  __int128 v223;
  BOOL v224;
  void *v225;
  _BYTE *v226;
  uint64_t v227;
  uint64_t v228;
  std::__shared_weak_count *v229;
  uint64_t v230;
  std::__shared_weak_count *v231;
  std::vector<std::wstring> __p[2];
  void *v233[2];
  __int128 v234;
  void *v235[2];
  void *v236[2];
  __int128 v237;
  __int128 v238;
  void *v239[2];
  __int128 v240;
  void *v241[2];
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  std::string v247;
  uint64_t *k;
  void *v249[2];
  char v250;
  void *v251;
  std::__shared_weak_count *v252;
  uint64_t v253;
  void *v254[2];
  char v255;
  __int128 v256;
  char v257;
  _BYTE v258[24];
  _BYTE *v259;
  _QWORD v260[3];
  _QWORD *v261;
  uint64_t (**v262)();
  __int128 v263;
  uint64_t (***v264)();
  uint64_t v265;

  v4 = a3;
  v265 = *MEMORY[0x1E0C80C00];
  v7 = quasar::rescoring::AdapterModel::getFeaturizer(*(quasar::rescoring::AdapterModel **)(*a3 + 608)) == 0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a2 + 168), (uint64_t *)(a1 + 568));
  _ZNSt3__115allocate_sharedB8ne180100IN3fst11SymbolTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
  LODWORD(v193.__r_.__value_.__l.__data_) = 3;
  std::allocate_shared[abi:ne180100]<quasar::QsrTextSymbolTable,std::allocator<quasar::QsrTextSymbolTable>,std::shared_ptr<fst::SymbolTable>,quasar::TextEncoding,void>((uint64_t *)__p, (int *)&v193, &v230);
  end = (std::__shared_weak_count *)__p[0].__end_;
  if (__p[0].__end_)
  {
    p_size = &__p[0].__end_->__r_.__value_.__l.__size_;
    do
      v10 = __ldaxr(p_size);
    while (__stlxr(v10 - 1, p_size));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
      std::__shared_weak_count::__release_weak(end);
    }
  }
  v11 = v230;
  std::string::basic_string[abi:ne180100]<0>(__p, "<occupy-word-index-zero-to-prevent-meaningful-word-using-it>");
  quasar::QsrTextSymbolTable::AddSymbol(v11);
  if (SHIBYTE(__p[0].__end_cap_.__value_) < 0)
    operator delete(__p[0].__begin_);
  quasar::SymbolTableList::clear(*(quasar::SymbolTableList **)(*v4 + 472));
  v12 = *(uint64_t **)(*v4 + 472);
  v228 = v230;
  v229 = v231;
  if (v231)
  {
    p_shared_owners = (unint64_t *)&v231->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  quasar::SymbolTableList::addSymbolTable(v12, (unint64_t *)&v228, 0, -1);
  v15 = v229;
  if (v229)
  {
    v16 = (unint64_t *)&v229->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*v4 + 320, (__int128 *)__p);
  v18 = (std::__shared_weak_count *)__p[0].__end_;
  if (__p[0].__end_)
  {
    v19 = &__p[0].__end_->__r_.__value_.__l.__size_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*v4 + 152, (__int128 *)__p);
  v21 = (std::__shared_weak_count *)__p[0].__end_;
  if (__p[0].__end_)
  {
    v22 = &__p[0].__end_->__r_.__value_.__l.__size_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (a2 + 696 != a1 + 472)
  {
    *(_DWORD *)(a2 + 728) = *(_DWORD *)(a1 + 504);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((_QWORD *)(a2 + 696), *(uint64_t **)(a1 + 488), 0);
  }
  *(_QWORD *)(a2 + 688) = *(unsigned int *)(a1 + 512);
  v24 = *v4;
  *(_BYTE *)(*v4 + 1096) = *(_BYTE *)(a1 + 984);
  begin = *(_BYTE *)(a1 + 465);
  LOBYTE(__p[0].__begin_) = begin;
  if (*(char *)(a1 + 543) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__p[0].__end_, *(const std::string::value_type **)(a1 + 520), *(_QWORD *)(a1 + 528));
    v24 = *v4;
    begin = (char)__p[0].__begin_;
  }
  else
  {
    *(_OWORD *)&__p[0].__end_ = *(_OWORD *)(a1 + 520);
    __p[1].__begin_ = *(std::vector<std::wstring>::pointer *)(a1 + 536);
  }
  *(_BYTE *)(v24 + 1136) = begin;
  v26 = v24 + 1144;
  if (*(char *)(v24 + 1167) < 0)
    operator delete(*(void **)v26);
  *(_OWORD *)v26 = *(_OWORD *)&__p[0].__end_;
  *(_QWORD *)(v26 + 16) = __p[1].__begin_;
  v226 = 0;
  v225 = 0;
  v227 = 0;
  *(_QWORD *)&v223 = a1;
  *((_QWORD *)&v223 + 1) = a1;
  v224 = v7;
  *(_QWORD *)&v222 = a1;
  *((_QWORD *)&v222 + 1) = a1;
  v220 = v223;
  v221 = v7;
  v27 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a1 + 448))
  {
    v28 = 0xFFFFFFFFLL;
    do
    {
      v29 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v27 + 8))(v27, v28);
      v28 = (v28 + 1);
    }
    while ((v29 & 1) == 0);
    v30 = 1;
    goto LABEL_37;
  }
  v181 = *(_QWORD *)a2;
  v35 = *(const void **)(a1 + 632);
  if (v35
  {
    v37 = v36;
    v38 = *(std::__shared_weak_count **)(a1 + 640);
    v217 = v36;
    v218 = v38;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
  }
  else
  {
    v37 = 0;
    v218 = 0;
    v217 = 0;
  }
  v182 = v27;
  v215 = 0;
  v214 = 0;
  v216 = 0;
  quasar::SpeechRequestData::getLeftContext(*a4, (std::string *)__p);
  v41 = __p[0].__end_;
  v42 = __p[0].__begin_;
  v193.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v193);
  if (v41 != v42)
  {
    quasar::SpeechRequestData::getLeftContext(*a4, &v193);
    size = v193.__r_.__value_.__l.__size_;
    v43 = v193.__r_.__value_.__r.__words[0];
    v196.i64[0] = (uint64_t)&v214;
    while (v43 != size)
    {
      if (*(char *)(v43 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v43, *(_QWORD *)(v43 + 8));
      }
      else
      {
        v45 = *(_OWORD *)v43;
        __p[0].__end_cap_.__value_ = *(std::wstring **)(v43 + 16);
        *(_OWORD *)&__p[0].__begin_ = v45;
      }
      LODWORD(v256) = (*(uint64_t (**)(_QWORD, std::vector<std::wstring> *))(**(_QWORD **)(a1 + 568) + 96))(*(_QWORD *)(a1 + 568), __p);
      std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100](v196.i64, &v256);
      if (SHIBYTE(__p[0].__end_cap_.__value_) < 0)
        operator delete(__p[0].__begin_);
      v43 += 24;
    }
    __p[0].__begin_ = (std::vector<std::wstring>::pointer)&v193;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  quasar::EndPointer::createEndPointer((quasar::EndPointer *)(a1 + 824), (const quasar::EndPointDecoderConfig *)(a1 + 664), *(const kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig **)(a1 + 424), (const quasar::EndPointModelConfig *)*(unsigned __int8 *)(a1 + 968), 0, (uint64_t *)&v213);
  kaldi::quasar::InputShapeTemplate::InputShapeTemplate((kaldi::quasar::InputShapeTemplate *)&v211);
  v46 = v182;
  if (*(_BYTE *)(a1 + 985))
  {
    Config = kaldi::quasar::CEInferenceNet::GetConfig(v37);
    kaldi::quasar::InputShapeTemplate::InputShapeTemplate(__p, Config + 328);
    v211 = __p[0].__begin_;
    v212 = (int)__p[0].__end_;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "R,C");
    kaldi::quasar::InputShapeTemplate::InputShapeTemplate(&v193, __p);
    v211 = (std::vector<std::wstring>::pointer)v193.__r_.__value_.__r.__words[0];
    v212 = v193.__r_.__value_.__r.__words[1];
    if (SHIBYTE(__p[0].__end_cap_.__value_) < 0)
      operator delete(__p[0].__begin_);
  }
  kaldi::CuMatrix<float>::CuMatrix(&v206, *(unsigned int *)(a1 + 452), *(unsigned int *)(v181 + 24), 0, 0, 0);
  v205 = 0;
  v204 = 0;
  memset(&v203, 0, sizeof(v203));
  v202 = 0;
  v200 = 0;
  v199 = 0;
  v201 = 0;
  v198 = 0;
  v185 = *((_DWORD *)*a4 + 2);
  if (quasar::SpeechRequestData::isUtteranceDetectionEnabled(*a4))
    v48 = *(float *)(a1 + 976) == 0.0;
  else
    v48 = 1;
  v180 = a2;
  v49 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a2 + 16) + 24))(*(_QWORD *)(*(_QWORD *)a2 + 16));
  v187 = 0;
  v50 = 0;
  v184 = v49;
  v51 = *(_DWORD *)(a1 + 980) / v49;
  if (*(_DWORD *)(a1 + 452) - 1 < v51)
    v51 = *(_DWORD *)(a1 + 452) - 1;
  v175 = v51;
  v174 = v51 & ~(v51 >> 31);
  v197 = 0u;
  memset(&v196, 0, 32);
  v178 = *(std::wstring **)(MEMORY[0x1E0DE4F50] + 64);
  v179 = (std::wstring *)*MEMORY[0x1E0DE4F50];
  v177 = *(std::wstring **)(MEMORY[0x1E0DE4F50] + 72);
  v176 = (std::wstring *)(MEMORY[0x1E0DE4FB8] + 16);
  v52 = v185;
  v183 = v4;
  v53 = (int *)v181;
  while (1)
  {
    v188 = v52;
    if ((((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 8))(v46, v52 - 1) | v50) & 1) != 0)
      break;
    SilencePosterior = kaldi::OnlineFeatureMatrix::GetSilencePosterior((kaldi::OnlineFeatureMatrix *)v53, v188);
    if (v48)
      goto LABEL_78;
    if (SilencePosterior < *(float *)(a1 + 976))
    {
      v55 = v188;
      v185 = v188 - DWORD2(v197);
      if (*((_QWORD *)&v197 + 1))
      {
        v56 = 0;
        do
        {
          __p[0].__end_cap_.__value_ = (std::wstring *)(v208 | 0x100000000);
          LODWORD(__p[1].__begin_) = (_DWORD)v209;
          HIDWORD(__p[1].__begin_) = HIDWORD(v209) - (_DWORD)v209 * v56;
          __p[1].__end_ = v210;
          __p[0].__end_ = (std::wstring *)((char *)v207 + 4 * (int)v209 * v56);
          __p[0].__begin_ = (std::vector<std::wstring>::pointer)&unk_1E5D29D40;
          kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)__p, (char **)(*(_QWORD *)(v196.i64[1] + 8 * ((unint64_t)v197 / 0xAA))+ 24 * ((unint64_t)v197 % 0xAA)));
          __p[0].__begin_ = (std::vector<std::wstring>::pointer)&unk_1E5D29D40;
          memset(&__p[0].__end_, 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)__p);
          std::deque<kaldi::Vector<float>>::pop_front(&v196);
          ++v56;
        }
        while (*((_QWORD *)&v197 + 1));
LABEL_78:
        v55 = v188;
      }
      if (SilencePosterior > *(float *)(a1 + 804))
        v57 = v187 + 1;
      else
        v57 = 0;
      v187 = v57;
      v58 = v55 - v185;
      v59 = v58 * v184;
      if (quasar::SpeechRequestData::isUtteranceDetectionEnabled(*a4))
      {
        memset(__p, 0, 24);
        LODWORD(v173) = 0;
        HIDWORD(v173) = v184;
        if ((**v213)(v213, &v198, 1, v187, v58, __p, &v199, 0, 0.0, 0.0, SilencePosterior, 0.0, 0.0, v173, &v202, 0))
        {
          v193.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v193);
          goto LABEL_95;
        }
        v61 = *(_DWORD *)(a1 + 972);
        v193.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v193);
        v50 = 0;
        if (v61 < 1)
        {
          v46 = v182;
        }
        else
        {
          v62 = v59 <= v61;
          v46 = v182;
          if (!v62)
            goto LABEL_95;
        }
      }
      else
      {
        v50 = 0;
        v60 = *(_DWORD *)(a1 + 972);
        if (v60 >= 1 && v59 > v60)
        {
LABEL_95:
          if (quasar::gLogLevel >= 4)
          {
            v246 = 0u;
            v245 = 0u;
            v244 = 0u;
            v243 = 0u;
            v242 = 0u;
            *(_OWORD *)v241 = 0u;
            v240 = 0u;
            *(_OWORD *)v239 = 0u;
            v238 = 0u;
            v237 = 0u;
            *(_OWORD *)v235 = 0u;
            *(_OWORD *)v236 = 0u;
            *(_OWORD *)v233 = 0u;
            v234 = 0u;
            memset(__p, 0, sizeof(__p));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Utterance starting: ", 20);
            v63 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" start decoding: ", 17);
            v64 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"  detector force triggered because maximum number of frames is reached: ", 72);
            v65 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" or the utterance detection ep is triggered: ", 45);
            std::ostream::operator<<();
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
          }
          v50 = 1;
        }
      }
      v66 = (int)v58 % *(_DWORD *)(a1 + 452);
      __p[0].__end_cap_.__value_ = (std::wstring *)(v208 | 0x100000000);
      LODWORD(__p[1].__begin_) = (_DWORD)v209;
      HIDWORD(__p[1].__begin_) = HIDWORD(v209) - (_DWORD)v209 * v66;
      __p[1].__end_ = v210;
      __p[0].__end_ = (std::wstring *)((char *)v207 + 4 * (int)v209 * v66);
      __p[0].__begin_ = (std::vector<std::wstring>::pointer)&unk_1E5D29D40;
      kaldi::OnlineFeatureMatrix::GetFrame((kaldi::OnlineFeatureMatrix *)v53, v188, (uint64_t *)&v193);
      kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)__p, &v193.__r_.__value_.__l.__data_);
      __p[0].__begin_ = (std::vector<std::wstring>::pointer)&unk_1E5D29D40;
      v67 = v66 + 1;
      memset(&__p[0].__end_, 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)__p);
      if ((v50 & 1) != 0
        || v67 == *(_DWORD *)(a1 + 452)
        || (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v46 + 8))(v46, v188))
      {
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Running encoder after reading frame ", 36);
          v68 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" start frame: ", 14);
          std::ostream::operator<<();
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
        }
        if (*(_BYTE *)(a1 + 985))
        {
          v69 = *(_DWORD *)(a1 + 992);
          if (v67 % v69)
            v69 = v67 % v69;
          v70 = *(_DWORD *)(a1 + 988) + v67 - v69;
          if (*(_DWORD *)(a1 + 452) >= v70)
            v71 = v70;
          else
            v71 = *(_DWORD *)(a1 + 452);
        }
        else
        {
          v71 = *(_DWORD *)(a1 + 452);
        }
        kaldi::quasar::InputShapeTemplate::Get((kaldi::quasar::InputShapeTemplate *)&v211, v71, v53[6], &v256);
        v72 = v217;
        ComputeEngine = (_QWORD *)kaldi::quasar::CEInferenceNet::GetComputeEngine(v217);
        __p[0].__end_cap_.__value_ = (std::wstring *)__PAIR64__(v71, v208);
        __p[1].__begin_ = v209;
        __p[1].__end_ = v210;
        __p[0].__end_ = v207;
        __p[0].__begin_ = (std::vector<std::wstring>::pointer)&unk_1E5D29D40;
        v74 = v205;
        v205 = 0;
        v195 = v74;
        kaldi::quasar::CreateBufferFromMatrix(ComputeEngine, (uint64_t)__p, (uint64_t)&v256, &v195, (kaldi::quasar::ComputeEngineBufferItf **)&v193);
        v75 = v193.__r_.__value_.__r.__words[0];
        v193.__r_.__value_.__r.__words[0] = 0;
        v76 = (uint64_t)v205;
        v205 = (kaldi::quasar::ComputeEngineBufferItf *)v75;
        if (v76)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
          v77 = v193.__r_.__value_.__r.__words[0];
          v193.__r_.__value_.__r.__words[0] = 0;
          if (v77)
            (*(void (**)(std::string::size_type))(*(_QWORD *)v77 + 8))(v77);
        }
        v78 = v195;
        v195 = 0;
        if (v78)
          (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v78 + 8))(v78);
        __p[0].__begin_ = (std::vector<std::wstring>::pointer)&unk_1E5D29D40;
        memset(&__p[0].__end_, 0, 32);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)__p);
        kaldi::quasar::CEInferenceNet::Feedforward((uint64_t)v72, (uint64_t *)&v205, (uint64_t *)&v204, 0);
        kaldi::CuMatrixBase<float>::SetZero((uint64_t)&v206);
        v79 = *(_QWORD *)kaldi::quasar::CEDecoder::Engine(*(kaldi::quasar::CEDecoder **)(a1 + 648));
        kaldi::quasar::ComputeEngineBufferItf::GetShape(v204, (char **)__p);
        (*(void (**)(kaldi::quasar::ComputeEngineBufferItf **__return_ptr, uint64_t, std::vector<std::wstring> *))(*(_QWORD *)v79 + 56))(&v191, v79, __p);
        if (__p[0].__begin_)
        {
          __p[0].__end_ = __p[0].__begin_;
          operator delete(__p[0].__begin_);
        }
        for (i = 0; kaldi::quasar::ComputeEngineBufferItf::GetSize(v191) > i; ++i)
        {
          v81 = v191;
          (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(_QWORD *)v204 + 112))(v204, i);
          (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t))(*(_QWORD *)v81 + 104))(v81, i);
        }
        v226 = v225;
        if (v215 != v214)
        {
          v82 = *(_DWORD *)(a1 + 460);
          v83 = (uint64_t *)kaldi::quasar::CEDecoder::StartOfPrevious(*(kaldi::quasar::CEDecoder **)(a1 + 648));
          v85 = *v83;
          v84 = v83[1];
          v86 = (uint64_t *)kaldi::quasar::CEDecoder::StartOfTranscript(*(kaldi::quasar::CEDecoder **)(a1 + 648));
          v88 = *v86;
          v87 = v86[1];
          v89 = *(_DWORD **)kaldi::quasar::CEDecoder::StartOfPrevious(*(kaldi::quasar::CEDecoder **)(a1 + 648));
          v90 = kaldi::quasar::CEDecoder::StartOfPrevious(*(kaldi::quasar::CEDecoder **)(a1 + 648));
          std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<int const*>,std::__wrap_iter<int const*>,std::back_insert_iterator<std::vector<int>>,0>(v89, *(_DWORD **)(v90 + 8), (uint64_t)&v225);
          v91 = (int)(v82 - (((unint64_t)(v87 - v88) >> 2) + ((unint64_t)(v84 - v85) >> 2)));
          if (v91 >= (v215 - (_BYTE *)v214) >> 2)
            v92 = (char *)v214;
          else
            v92 = &v215[-4 * v91];
          std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<int const*>,std::__wrap_iter<int const*>,std::back_insert_iterator<std::vector<int>>,0>(v92, v215, (uint64_t)&v225);
        }
        v93 = *(_DWORD **)kaldi::quasar::CEDecoder::StartOfTranscript(*(kaldi::quasar::CEDecoder **)(a1 + 648));
        v94 = kaldi::quasar::CEDecoder::StartOfTranscript(*(kaldi::quasar::CEDecoder **)(a1 + 648));
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<int const*>,std::__wrap_iter<int const*>,std::back_insert_iterator<std::vector<int>>,0>(v93, *(_DWORD **)(v94 + 8), (uint64_t)&v225);
        v95 = *(std::__shared_weak_count **)(a1 + 656);
        v194[0] = *(_QWORD *)(a1 + 648);
        v194[1] = (uint64_t)v95;
        if (v95)
        {
          v96 = (unint64_t *)&v95->__shared_owners_;
          do
            v97 = __ldxr(v96);
          while (__stxr(v97 + 1, v96));
        }
        v98 = *(_DWORD *)(a1 + 456);
        v263 = v222;
        v264 = &v262;
        v260[0] = &off_1E5CFF6A0;
        v260[1] = &v225;
        v261 = v260;
        v262 = &off_1E5CFF5F0;
        v259 = 0;
        v99 = (char *)operator new(0x38uLL);
        *(_QWORD *)v99 = &off_1E5CFF648;
        *((_QWORD *)v99 + 1) = v180;
        *((_QWORD *)v99 + 2) = v183;
        *((_QWORD *)v99 + 3) = a4;
        *((_OWORD *)v99 + 2) = v220;
        v99[48] = v221;
        *(_DWORD *)(v99 + 49) = *(_DWORD *)v219;
        *((_DWORD *)v99 + 13) = *(_DWORD *)&v219[3];
        v259 = v99;
        kaldi::decode(v194, (uint64_t)&v225, (uint64_t *)&v191, (uint64_t)&v262, (uint64_t)v260, (uint64_t)v258, v98, (uint64_t *)v254, *(_BYTE *)(a1 + 464));
        v100 = v259;
        if (v259 == v258)
        {
          v100 = v258;
          v101 = 4;
LABEL_132:
          (*(void (**)(void))(*v100 + 8 * v101))();
        }
        else if (v259)
        {
          v101 = 5;
          goto LABEL_132;
        }
        v102 = v261;
        if (v261 == v260)
        {
          v102 = v260;
          v103 = 4;
LABEL_137:
          (*(void (**)(void))(*v102 + 8 * v103))();
        }
        else if (v261)
        {
          v103 = 5;
          goto LABEL_137;
        }
        v104 = v264;
        if (v264 == &v262)
        {
          v104 = &v262;
          v105 = 4;
LABEL_142:
          (*v104)[v105]();
        }
        else if (v264)
        {
          v105 = 5;
          goto LABEL_142;
        }
        if (v95)
        {
          v106 = (unint64_t *)&v95->__shared_owners_;
          do
            v107 = __ldaxr(v106);
          while (__stlxr(v107 - 1, v106));
          if (!v107)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
        if (kaldi::g_kaldi_verbose_level >= 2)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 2);
          v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"nbest: ", 7);
          quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3::operator()((uint64_t *)&v222, (uint64_t *)v254);
          if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v109 = &v193;
          else
            v109 = (std::string *)v193.__r_.__value_.__r.__words[0];
          if ((v193.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v110 = HIBYTE(v193.__r_.__value_.__r.__words[2]);
          else
            v110 = v193.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)v109, v110);
          if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v193.__r_.__value_.__l.__data_);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
        }
        v111 = (int *)*((_QWORD *)v254[0] + 2);
        v112 = (int *)(*((_QWORD *)v254[0] + 1) + v226 - (_BYTE *)v225);
        __p[0].__begin_ = (std::vector<std::wstring>::pointer)&v214;
        while (v112 != v111)
        {
          if (kaldi::quasar::CEDecoder::IsPrintable(*(kaldi::quasar::CEDecoder **)(a1 + 648), *v112))
            std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100]((uint64_t *)__p, v112);
          ++v112;
        }
        _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v247);
        v113 = (char *)v254[0];
        v114 = (char *)v254[1];
        if (v254[0] != v254[1])
        {
          do
          {
            v115 = (int *)*((_QWORD *)v113 + 1);
            if (v226 == v225)
            {
              v120 = (int *)*((_QWORD *)v113 + 2);
            }
            else
            {
              v116 = (char *)v115 + v226 - (_BYTE *)v225;
              v117 = (_BYTE *)*((_QWORD *)v113 + 2);
              v118 = v117 - v116;
              if (v117 != v116)
                memmove(*((void **)v113 + 1), v116, v117 - v116);
              v119 = (int *)*((_QWORD *)v113 + 1);
              v120 = (int *)((char *)v115 + v118);
              *((_QWORD *)v113 + 2) = v120;
              v115 = v119;
            }
            while (1)
            {
              if (v115 == v120)
                goto LABEL_178;
              if (!kaldi::quasar::CEDecoder::IsPrintable(*(kaldi::quasar::CEDecoder **)(a1 + 648), *v115))
                break;
              ++v115;
            }
            if (v115 == v120)
            {
LABEL_178:
              v115 = v120;
              goto LABEL_179;
            }
            for (j = v115 + 1; j != v120; ++j)
            {
              if (kaldi::quasar::CEDecoder::IsPrintable(*(kaldi::quasar::CEDecoder **)(a1 + 648), *j))
                *v115++ = *j;
            }
LABEL_179:
            if (v115 != *((int **)v113 + 2))
              *((_QWORD *)v113 + 2) = v115;
            quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2::operator()((uint64_t *)&v223, (int **)v113 + 1, __p);
            memset(&v193, 0, sizeof(v193));
            v122 = __p[0].__begin_;
            v123 = __p[0].__end_;
            while (v122 != v123)
            {
              v124 = quasar::QsrTextSymbolTable::Find(v230, (uint64_t)v122);
              if (v124 == -1)
                v124 = quasar::QsrTextSymbolTable::AddSymbol(v230);
              v125 = v193.__r_.__value_.__l.__size_;
              if (v193.__r_.__value_.__l.__size_ >= v193.__r_.__value_.__r.__words[2])
              {
                v127 = (void *)v193.__r_.__value_.__r.__words[0];
                v128 = (uint64_t)(v193.__r_.__value_.__l.__size_ - v193.__r_.__value_.__r.__words[0]) >> 2;
                v129 = v128 + 1;
                if ((unint64_t)(v128 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v130 = v193.__r_.__value_.__r.__words[2] - v193.__r_.__value_.__r.__words[0];
                if ((uint64_t)(v193.__r_.__value_.__r.__words[2] - v193.__r_.__value_.__r.__words[0]) >> 1 > v129)
                  v129 = v130 >> 1;
                if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFFCLL)
                  v131 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v131 = v129;
                if (v131)
                {
                  v132 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v193.__r_.__value_.__r.__words[2], v131);
                  v125 = v193.__r_.__value_.__l.__size_;
                  v127 = (void *)v193.__r_.__value_.__r.__words[0];
                }
                else
                {
                  v132 = 0;
                }
                v133 = &v132[4 * v128];
                *(_DWORD *)v133 = v124;
                v126 = (std::string::size_type)(v133 + 4);
                while ((void *)v125 != v127)
                {
                  v134 = *(_DWORD *)(v125 - 4);
                  v125 -= 4;
                  *((_DWORD *)v133 - 1) = v134;
                  v133 -= 4;
                }
                v193.__r_.__value_.__r.__words[0] = (std::string::size_type)v133;
                v193.__r_.__value_.__l.__size_ = v126;
                v193.__r_.__value_.__r.__words[2] = (std::string::size_type)&v132[4 * v131];
                if (v127)
                  operator delete(v127);
              }
              else
              {
                *(_DWORD *)v193.__r_.__value_.__l.__size_ = v124;
                v126 = v125 + 4;
              }
              v193.__r_.__value_.__l.__size_ = v126;
              ++v122;
            }
            kaldi::MakeLatticeFromLinear((_QWORD *)v113 + 1, (uint64_t *)&v193, &v251, 0.0, -*(float *)v113);
            fst::Union<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)v247.__r_.__value_.__l.__data_, (uint64_t)v251);
            v135 = v252;
            if (v252)
            {
              v136 = (unint64_t *)&v252->__shared_owners_;
              do
                v137 = __ldaxr(v136);
              while (__stlxr(v137 - 1, v136));
              if (!v137)
              {
                ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                std::__shared_weak_count::__release_weak(v135);
              }
            }
            if (v193.__r_.__value_.__r.__words[0])
            {
              v193.__r_.__value_.__l.__size_ = v193.__r_.__value_.__r.__words[0];
              operator delete(v193.__r_.__value_.__l.__data_);
            }
            v193.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v193);
            v113 += 32;
          }
          while (v113 != v114);
          if (v254[1] != v254[0])
          {
            memset(&v193, 0, sizeof(v193));
            v138 = (int *)*((_QWORD *)v254[0] + 1);
            v139 = (int *)*((_QWORD *)v254[0] + 2);
            v249[0] = &v193;
            if (v138 == v139)
            {
              v142 = 0;
              v141 = 0;
            }
            else
            {
              do
              {
                v140 = *v138;
                if (kaldi::quasar::CEDecoder::IsPrintable(*(kaldi::quasar::CEDecoder **)(a1 + 648), *v138))
                  (*(void (**)(std::vector<std::wstring> *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 568)
                                                                                                  + 88))(__p, *(_QWORD *)(a1 + 568), v140);
                else
                  std::string::basic_string[abi:ne180100]<0>(__p, "");
                std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]((std::vector<std::string> **)v249, (__int128 *)__p);
                if (SHIBYTE(__p[0].__end_cap_.__value_) < 0)
                  operator delete(__p[0].__begin_);
                ++v138;
              }
              while (v138 != v139);
              v142 = (__int128 *)v193.__r_.__value_.__l.__size_;
              v141 = (std::string *)v193.__r_.__value_.__r.__words[0];
            }
            std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::vector<std::string> *)&v203, (std::string *)v203.__end_, v141, v142, 0xAAAAAAAAAAAAAAABLL * (((char *)v142 - (char *)v141) >> 3));
            __p[0].__begin_ = (std::vector<std::wstring>::pointer)&v193;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          }
        }
        v4 = v183;
        v46 = v182;
        v53 = (int *)v181;
        v143 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v183 + 320) + 24))(*(_QWORD *)(*v183 + 320));
        v144 = *(_QWORD *)(*v183 + 320);
        if (v143 == -1)
          fst::Union<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(v144, (uint64_t)v247.__r_.__value_.__l.__data_);
        else
          fst::Concat<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(v144, (uint64_t)v247.__r_.__value_.__l.__data_);
        if (kaldi::g_kaldi_verbose_level >= 3)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v193, 3);
          v145 = *(_QWORD *)(*v183 + 320);
          fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(v249);
          fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>(v145, (uint64_t)v249, 1);
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          kaldi::WriteCompactLattice(&__p[0].__end_cap_.__value_, 0, (uint64_t)v249);
          std::stringbuf::str();
          __p[0].__begin_ = v179;
          *(std::vector<std::wstring>::pointer *)((char *)&__p[0].__begin_ + v179[-1].__r_.__value_.__r.__words[0]) = v178;
          __p[0].__end_cap_.__value_ = v177;
          __p[1].__begin_ = v176;
          if (SHIBYTE(v236[1]) < 0)
            operator delete(v235[1]);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1AF44D094](&v238);
          v249[0] = &unk_1E5D25800;
          v146 = v249[1];
          if (v249[1])
          {
            v147 = *((_DWORD *)v249[1] + 14) - 1;
            *((_DWORD *)v249[1] + 14) = v147;
            if (!v147)
              (*(void (**)(void *))(*(_QWORD *)v146 + 8))(v146);
          }
          if (v253 >= 0)
            v148 = &v251;
          else
            v148 = v251;
          if (v253 >= 0)
            v149 = HIBYTE(v253);
          else
            v149 = (uint64_t)v252;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v193, (uint64_t)v148, v149);
          if (SHIBYTE(v253) < 0)
            operator delete(v251);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v193);
        }
        v150 = (std::__shared_weak_count *)v247.__r_.__value_.__l.__size_;
        if (v247.__r_.__value_.__l.__size_)
        {
          v151 = (unint64_t *)(v247.__r_.__value_.__l.__size_ + 8);
          do
            v152 = __ldaxr(v151);
          while (__stlxr(v152 - 1, v151));
          if (!v152)
          {
            ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
            std::__shared_weak_count::__release_weak(v150);
          }
        }
        __p[0].__begin_ = (std::vector<std::wstring>::pointer)v254;
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        v153 = v191;
        v191 = 0;
        if (v153)
          (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v153 + 8))(v153);
        if ((_QWORD)v256)
        {
          *((_QWORD *)&v256 + 1) = v256;
          operator delete((void *)v256);
        }
      }
      else
      {
        v50 = 0;
      }
      v48 = 1;
      goto LABEL_249;
    }
    if (v175 >= 1)
    {
      if (*((_QWORD *)&v197 + 1) == v174)
        std::deque<kaldi::Vector<float>>::pop_front(&v196);
      kaldi::OnlineFeatureMatrix::GetFrame((kaldi::OnlineFeatureMatrix *)v53, v188, (uint64_t *)__p);
      std::deque<kaldi::Vector<float>>::emplace_back<kaldi::SubVector<float>>(&v196, (uint64_t)__p);
    }
    v48 = 0;
    v50 = 0;
LABEL_249:
    v52 = v188 + 1;
  }
  v154 = *v4;
  *(_DWORD *)(v154 + 576) = v188 - *((_DWORD *)*a4 + 2);
  *(_BYTE *)(v154 + 580) = 1;
  *(_DWORD *)(v154 + 1100) = v185 * v184;
  *(_DWORD *)(v154 + 1104) = v188 * v184;
  if ((v50 & 1) != 0)
    *(_WORD *)(v154 + 580) = 256;
  fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>(*(_QWORD *)(v154 + 320), *(_QWORD *)(v154 + 152), 1);
  kaldi::quasar::DeterminizeCompactLattice(*(_QWORD *)(*v4 + 152));
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v191);
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v189);
  kaldi::CompactLatticeShortestPath(*(_QWORD **)(*v4 + 152), (uint64_t)&v191, 0, (uint64_t *)(*v4 + 448));
  fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)&v191, (uint64_t)&v189, 1);
  v155 = *(unsigned int *)(a1 + 512);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v203.__end_ - (char *)v203.__begin_) >> 3) > v155)
  {
    memset(__p, 0, 24);
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::string *)__p, (__int128 *)&v203.__end_[-v155], (__int128 *)v203.__end_, v155);
    std::vector<std::string>::__vdeallocate(&v203);
    v203 = __p[0];
    memset(__p, 0, 24);
    v193.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v193);
  }
  v156 = *v4;
  v158 = *(_QWORD *)(*v4 + 96);
  v157 = *(_QWORD *)(*v4 + 104);
  v159 = *v4;
  if (v157 != v158)
  {
    do
      quasar::Token::~Token((void **)(v157 - 224));
    while (v157 != v158);
    v159 = *v4;
  }
  *(_QWORD *)(v156 + 104) = v158;
  v160 = v203.__begin_;
  v161 = v203.__end_;
  for (k = (uint64_t *)(v159 + 96); v160 != v161; ++v160)
  {
    if (SHIBYTE(v160->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v247, (const std::string::value_type *)v160->__r_.__value_.__l.__data_, v160->__r_.__value_.__l.__size_);
    }
    else
    {
      v162 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
      v247.__r_.__value_.__r.__words[2] = v160->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v247.__r_.__value_.__l.__data_ = v162;
    }
    if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v193, v247.__r_.__value_.__l.__data_, v247.__r_.__value_.__l.__size_);
    else
      v193 = v247;
    std::string::basic_string[abi:ne180100]<0>(&v256, "");
    std::string::basic_string[abi:ne180100]<0>(v254, "");
    v252 = 0;
    v251 = 0;
    v253 = 0;
    std::string::basic_string[abi:ne180100]<0>(v249, "");
    quasar::Token::Token((std::string *)__p, (__int128 *)&v193, 0, 0, 0, 1, 0, &v256, 0.0, (__int128 *)v254, (__int128 **)&v251, 0, (__int128 *)v249, 0, 0);
    if (v250 < 0)
      operator delete(v249[0]);
    v249[0] = &v251;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v249);
    if (v255 < 0)
      operator delete(v254[0]);
    if (v257 < 0)
      operator delete((void *)v256);
    if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v193.__r_.__value_.__l.__data_);
    std::back_insert_iterator<std::vector<quasar::Token>>::operator=[abi:ne180100](&k, (__int128 *)__p);
    if (SBYTE7(v242) < 0)
      operator delete(v241[0]);
    if (SBYTE7(v240) < 0)
      operator delete(v239[0]);
    v193.__r_.__value_.__r.__words[0] = (std::string::size_type)&v237 + 8;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v193);
    if (SBYTE7(v237) < 0)
      operator delete(v236[0]);
    v193.__r_.__value_.__r.__words[0] = (std::string::size_type)&v234 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v193);
    if (SBYTE7(v234) < 0)
      operator delete(v233[0]);
    if (SHIBYTE(__p[0].__end_cap_.__value_) < 0)
      operator delete(__p[0].__begin_);
    if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v247.__r_.__value_.__l.__data_);
  }
  v30 = quasar::Decoder::reportResults((uint64_t)&v189, v183, (uint64_t)a4, v180);
  v189 = &unk_1E5D25580;
  v163 = v190;
  if (v190)
  {
    v164 = *(_DWORD *)(v190 + 56) - 1;
    *(_DWORD *)(v190 + 56) = v164;
    if (!v164)
      (*(void (**)(uint64_t))(*(_QWORD *)v163 + 8))(v163);
  }
  v191 = (kaldi::quasar::ComputeEngineBufferItf *)&unk_1E5D25800;
  v165 = v192;
  if (v192)
  {
    v166 = *(_DWORD *)(v192 + 56) - 1;
    *(_DWORD *)(v192 + 56) = v166;
    if (!v166)
      (*(void (**)(uint64_t))(*(_QWORD *)v165 + 8))(v165);
  }
  std::deque<kaldi::Vector<float>>::~deque[abi:ne180100](&v196);
  if (v199)
  {
    v200 = v199;
    operator delete(v199);
  }
  __p[0].__begin_ = (std::vector<std::wstring>::pointer)&v203;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v167 = v204;
  v204 = 0;
  if (v167)
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v167 + 8))(v167);
  v168 = (uint64_t)v205;
  v205 = 0;
  if (v168)
    (*(void (**)(uint64_t))(*(_QWORD *)v168 + 8))(v168);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v206);
  v169 = (uint64_t)v213;
  v213 = 0;
  if (v169)
    (*(void (**)(uint64_t))(*(_QWORD *)v169 + 16))(v169);
  if (v214)
  {
    v215 = (char *)v214;
    operator delete(v214);
  }
  v170 = v218;
  if (v218)
  {
    v171 = (unint64_t *)&v218->__shared_owners_;
    do
      v172 = __ldaxr(v171);
    while (__stlxr(v172 - 1, v171));
    if (!v172)
    {
      ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
      std::__shared_weak_count::__release_weak(v170);
    }
  }
LABEL_37:
  if (v225)
  {
    v226 = v225;
    operator delete(v225);
  }
  v31 = v231;
  if (v231)
  {
    v32 = (unint64_t *)&v231->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  return v30;
}

void sub_1AD7E5664(_Unwind_Exception *a1)
{
  unint64_t v2;
  void *v3;
  void *v4;

  if (SLOBYTE(STACK[0x3B7]) < 0)
    operator delete((void *)STACK[0x3A0]);
  v2 = STACK[0x2E8];
  STACK[0x2E8] = 0;
  if (v2)
    (*(void (**)(unint64_t))(*(_QWORD *)v2 + 16))(v2);
  v3 = (void *)STACK[0x2F0];
  if (STACK[0x2F0])
  {
    STACK[0x2F8] = (unint64_t)v3;
    operator delete(v3);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x308]);
  v4 = (void *)STACK[0x368];
  if (STACK[0x368])
  {
    STACK[0x370] = (unint64_t)v4;
    operator delete(v4);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x390]);
  _Unwind_Resume(a1);
}

uint64_t std::deque<kaldi::Vector<float>>::pop_front(int64x2_t *a1)
{
  kaldi::Vector<float>::Destroy(*(_QWORD *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0xAAuLL)) + 24 * (a1[2].i64[0] % 0xAAuLL));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1AE13F780);
  return std::deque<kaldi::Vector<float>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<kaldi::Vector<float>>::emplace_back<kaldi::SubVector<float>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<kaldi::Vector<float>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA);
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  kaldi::Vector<float>::Resize((void **)v8, *(unsigned int *)(a2 + 8), 1);
  kaldi::VectorBase<float>::CopyFromVec(v8, (const void **)a2);
  v9 = a1[4];
  v10 = a1[5] + 1;
  a1[5] = v10;
  v11 = v9 + v10;
  v12 = a1[1];
  v13 = (_QWORD *)(v12 + 8 * (v11 / 0xAA));
  v14 = *v13 + 24 * (v11 % 0xAA);
  if (a1[2] == v12)
    v14 = 0;
  if (v14 == *v13)
    v14 = *(v13 - 1) + 4080;
  return v14 - 24;
}

uint64_t quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  std::string::size_type size;
  std::__wrap_iter<const char *> v12;
  std::__wrap_iter<const char *> v13;
  std::__shared_weak_count *cntrl;
  uint64_t *p_shared_owners;
  unint64_t v16;
  std::string *p_p;
  std::string::size_type v18;
  _QWORD *v19;
  uint64_t v20;
  std::string __p;
  _QWORD v23[2];
  _QWORD v24[11];
  char v25;
  uint64_t v26;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v27;
  std::string v28;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v23);
  LOBYTE(v27.__traits_.__loc_.__locale_) = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)&v27, 1);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"    ", 4);
      v7 = *v6;
      *(_DWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 8) = *(_DWORD *)((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 8) & 0xFFFFFEFB | 4;
      *(uint64_t *)((char *)v6 + *(_QWORD *)(v7 - 24) + 16) = 6;
      v8 = (_QWORD *)std::ostream::operator<<();
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" | ", 3);
      v10 = *a1;
      quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0::operator()(a1 + 1, (int **)(v4 + 8), (std::vector<std::string> *)&v27);
      kaldi::JoinVectorToString<std::string>((uint64_t *)&v27, "");
      v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
      std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(&v27.__traits_, v10 + 520, 0);
      memset(&v28, 0, sizeof(v28));
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12.__i_ = (std::__wrap_iter<const char *>::iterator_type)&__p;
      else
        v12.__i_ = (std::__wrap_iter<const char *>::iterator_type)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      v13.__i_ = &v12.__i_[size];
      std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v28, v12, v13, &v27, " ", 0);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v28;
      *((_BYTE *)&v28.__r_.__value_.__s + 23) = 0;
      v28.__r_.__value_.__s.__data_[0] = 0;
      cntrl = v27.__start_.__cntrl_;
      if (v27.__start_.__cntrl_)
      {
        p_shared_owners = &v27.__start_.__cntrl_->__shared_owners_;
        do
          v16 = __ldaxr((unint64_t *)p_shared_owners);
        while (__stlxr(v16 - 1, (unint64_t *)p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
          std::__shared_weak_count::__release_weak(cntrl);
        }
      }
      std::locale::~locale(&v27.__traits_.__loc_);
      kaldi::Trim(&__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v18 = __p.__r_.__value_.__l.__size_;
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)p_p, v18);
      LOBYTE(v27.__traits_.__loc_.__locale_) = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)&v27, 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v4 += 32;
    }
    while (v4 != v5);
  }
  std::stringbuf::str();
  v23[0] = *MEMORY[0x1E0DE4F50];
  v20 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v23 + *(_QWORD *)(v23[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v24[0] = v20;
  v24[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v25 < 0)
    operator delete((void *)v24[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v26);
}

void sub_1AD7E605C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2::operator()(uint64_t *a1@<X0>, int **a2@<X1>, std::vector<std::wstring> *a3@<X8>)
{
  uint64_t v5;
  std::string::size_type size;
  std::__wrap_iter<const char *> v7;
  std::__wrap_iter<const char *> v8;
  std::__shared_weak_count *cntrl;
  uint64_t *p_shared_owners;
  unint64_t v11;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v12;
  std::string v13;
  std::string __str;

  v5 = *a1;
  quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0::operator()(a1 + 1, a2, (std::vector<std::string> *)&v12);
  kaldi::JoinVectorToString<std::string>((uint64_t *)&v12, "");
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  if (*(_BYTE *)(v5 + 465))
  {
    quasar::wordPieceSequenceToWords(&__str, *((unsigned __int8 *)a1 + 16), (unsigned __int8 *)(v5 + 520), (uint64_t)&v12);
    std::vector<std::string>::__vdeallocate(a3);
    *(_OWORD *)&a3->__begin_ = *(_OWORD *)&v12.__traits_.__loc_.__locale_;
    a3->__end_cap_.__value_ = (std::wstring *)v12.__traits_.__col_;
    memset(&v12, 0, 24);
    v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(&v12.__traits_, v5 + 520, 0);
    memset(&v13, 0, sizeof(v13));
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7.__i_ = (std::__wrap_iter<const char *>::iterator_type)&__str;
    else
      v7.__i_ = (std::__wrap_iter<const char *>::iterator_type)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    v8.__i_ = &v7.__i_[size];
    std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v13, v7, v8, &v12, " ", 0);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str = v13;
    *((_BYTE *)&v13.__r_.__value_.__s + 23) = 0;
    v13.__r_.__value_.__s.__data_[0] = 0;
    cntrl = v12.__start_.__cntrl_;
    if (v12.__start_.__cntrl_)
    {
      p_shared_owners = &v12.__start_.__cntrl_->__shared_owners_;
      do
        v11 = __ldaxr((unint64_t *)p_shared_owners);
      while (__stlxr(v11 - 1, (unint64_t *)p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
        std::__shared_weak_count::__release_weak(cntrl);
      }
    }
    std::locale::~locale(&v12.__traits_.__loc_);
    kaldi::Trim(&__str);
    kaldi::SplitStringToVector(&__str, " ", 1, (uint64_t)a3);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1AD7E6280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale((std::locale *)&a9);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (*(char *)(v23 - 41) < 0)
    operator delete(*(void **)(v23 - 64));
  _Unwind_Resume(a1);
}

uint64_t fst::Union<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1, uint64_t a2)
{
  fst *v4;
  const fst::SymbolTable *v5;
  fst *v6;
  const fst::SymbolTable *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  fst *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD v27[2];
  int v28;
  void *__p;
  uint64_t v30;
  unint64_t v31;
  _DWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;

  v4 = (fst *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v5 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  if (!fst::CompatSymbols(v4, v5, (const fst::SymbolTable *)1)
    || (v6 = (fst *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1),
        v7 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2),
        !fst::CompatSymbols(v6, v7, (const fst::SymbolTable *)1)))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v20 = fst::LogMessage::LogMessage((fst *)&v35, (uint64_t)&__p);
    v21 = (_QWORD *)fst::cerr(v20);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Union: input/output symbol tables of 1st argument ", 50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"do not match input/output symbol tables of 2nd argument", 55);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v35);
    if (SHIBYTE(v31) < 0)
      operator delete(__p);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 4, 4);
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 0x2000000000, 1);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((_DWORD)result == -1)
  {
    if ((v11 & 4) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 4, 4);
    return result;
  }
  v13 = result;
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 1, 0))
  {
    v14 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    if (v9)
      v15 = v8;
    else
      v15 = v8 + 1;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 248))(a1, (v15 + v14));
  }
  v37 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v35);
LABEL_10:
  if (!v35)
  {
    if ((int)v37 >= v36)
      goto LABEL_40;
    goto LABEL_14;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35))
  {
LABEL_14:
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
    if (v35)
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
    else
      v17 = v37;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(&v34, a2, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 184))(a1, v16, &v34);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 256))(a1, v16, v18);
    v33 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 136))(a2, v17, &__p);
    while (__p)
    {
      if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
      {
        if (__p)
        {
          (*(void (**)(void))(*(_QWORD *)__p + 8))();
          goto LABEL_31;
        }
LABEL_29:
        if (v32)
          --*v32;
LABEL_31:
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 32))(v35);
        else
          ++v37;
        goto LABEL_10;
      }
      if (!__p)
        goto LABEL_23;
      v19 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
LABEL_24:
      v27[0] = *(_QWORD *)v19;
      v27[1] = *(_QWORD *)(v19 + 8);
      v28 = *(_DWORD *)(v19 + 16) + v8;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 208))(a1, v16, v27);
      if (__p)
        (*(void (**)(void *))(*(_QWORD *)__p + 40))(__p);
      else
        ++v33;
    }
    if (v33 >= v31)
      goto LABEL_29;
LABEL_23:
    v19 = v30 + 20 * v33;
    goto LABEL_24;
  }
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
LABEL_40:
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)v23 == -1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v13);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v11, 0x3FFFFFFF0004);
  }
  else
  {
    v24 = v23;
    if (v9)
    {
      __p = 0;
      v30 = 0;
      LODWORD(v31) = v13 + v8;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 208))(a1, v23, &__p);
    }
    else
    {
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v25);
      __p = 0;
      v30 = 0;
      LODWORD(v31) = v24;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 208))(a1, v25, &__p);
      __p = 0;
      v30 = 0;
      LODWORD(v31) = v13 + v8;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 208))(a1, v25, &__p);
    }
    v26 = fst::UnionProperties(v10, v11, 0);
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v26, 0x3FFFFFFF0007);
  }
}

void sub_1AD7E682C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *fst::Concat<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1, uint64_t a2)
{
  fst *v4;
  const fst::SymbolTable *v5;
  fst *v6;
  const fst::SymbolTable *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *result;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  fst *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  int v22;
  int32x2_t v23;
  __n128 v24;
  unint64_t v25;
  int32x2_t v26;
  _QWORD v27[2];
  int v28;
  void *__p;
  uint64_t v30;
  unint64_t v31;
  _DWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  float v38;
  int v39;

  v4 = (fst *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v5 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  if (!fst::CompatSymbols(v4, v5, (const fst::SymbolTable *)1)
    || (v6 = (fst *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1),
        v7 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2),
        !fst::CompatSymbols(v6, v7, (const fst::SymbolTable *)1)))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v17 = fst::LogMessage::LogMessage((fst *)&v35, (uint64_t)&__p);
    v18 = (_QWORD *)fst::cerr(v17);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Concat: input/output symbol tables of 1st argument ", 51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"do not match input/output symbol tables of 2nd argument", 55);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v35);
    if (SHIBYTE(v31) < 0)
      operator delete(__p);
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 4, 4);
  }
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result == -1)
  {
    if ((v9 & 4) != 0)
      return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 4, 4);
    return result;
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 1, 0))
  {
    v12 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 248))(a1, (v12 + v11));
  }
  v37 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v35);
LABEL_7:
  if (!v35)
  {
    if ((int)v37 >= v36)
      goto LABEL_37;
    goto LABEL_11;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35))
  {
LABEL_11:
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
    if (v35)
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 24))(v35);
    else
      v14 = v37;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(&v34, a2, v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 184))(a1, v13, &v34);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 256))(a1, v13, v15);
    v33 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 136))(a2, v14, &__p);
    while (__p)
    {
      if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
      {
        if (__p)
        {
          (*(void (**)(void))(*(_QWORD *)__p + 8))();
          goto LABEL_28;
        }
LABEL_26:
        if (v32)
          --*v32;
LABEL_28:
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 32))(v35);
        else
          ++v37;
        goto LABEL_7;
      }
      if (!__p)
        goto LABEL_20;
      v16 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
LABEL_21:
      v27[0] = *(_QWORD *)v16;
      v27[1] = *(_QWORD *)(v16 + 8);
      v28 = *(_DWORD *)(v16 + 16) + v11;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 208))(a1, v13, v27);
      if (__p)
        (*(void (**)(void *))(*(_QWORD *)__p + 40))(__p);
      else
        ++v33;
    }
    if (v33 >= v31)
      goto LABEL_26;
LABEL_20:
    v16 = v30 + 20 * v33;
    goto LABEL_21;
  }
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
LABEL_37:
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v20 = (int)result;
  if (v11 >= 1)
  {
    v21 = 0;
    v22 = (_DWORD)result + v11;
    v23 = vdup_n_s32(0x7F800000u);
    do
    {
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v35, a1, v21);
      LODWORD(v27[0]) = HIDWORD(v35);
      LODWORD(__p) = v35;
      v39 = 2139095040;
      v38 = INFINITY;
      v24.n128_u32[0] = v35;
      if (*(float *)&v35 != INFINITY || (v24.n128_u32[0] = v27[0], *(float *)v27 != v38))
      {
        v26 = v23;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, int32x2_t *, __n128))(*(_QWORD *)a1 + 184))(a1, v21, &v26, v24);
        if (v20 != -1)
        {
          __p = 0;
          v30 = v35;
          LODWORD(v31) = v22;
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 208))(a1, v21, &__p);
        }
      }
      v21 = (v21 + 1);
    }
    while (v11 != (_DWORD)v21);
  }
  if (v20 != -1)
  {
    v25 = fst::ConcatProperties(v8, v9, 0);
    return (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v25, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1AD7E6DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  int *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t result;
  int v26;
  uint64_t v27;
  void *v28;
  void *v29;
  _BYTE *v30;
  uint64_t v31;
  void **v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  int v37;
  _QWORD v38[3];
  _DWORD *v39;
  unint64_t v40;
  void **v41;
  void *__p;
  void *v43;
  uint64_t v44;
  uint64_t v45[3];
  void (**v46)(void **, uint64_t, _QWORD *);
  uint64_t v47;
  int v48;
  float v49;

  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v46);
  memset(v45, 0, sizeof(v45));
  if (a3)
  {
    fst::Factor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,int>(a1, (uint64_t)&v46, v45);
  }
  else
  {
    fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v32, a1);
    if (((uint64_t (*)(void ***))v32[14])(&v32))
    {
      v6 = ((uint64_t (*)(void ***))v32[14])(&v32);
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    }
    else
    {
      v7 = 0;
    }
    if (((uint64_t (*)(void ***))v32[15])(&v32))
    {
      v8 = ((uint64_t (*)(void ***))v32[15])(&v32);
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    }
    else
    {
      v9 = 0;
    }
    fst::ArcMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::InvertMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)&v32);
    ((void (*)(void ***, uint64_t))v32[35])(&v32, v9);
    ((void (*)(void ***, uint64_t))v32[36])(&v32, v7);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    fst::Factor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,int>((uint64_t)&v32, (uint64_t)&v46, v45);
    v32 = (void **)&unk_1E5D25580;
    v10 = v33;
    if (v33)
    {
      v11 = *((_DWORD *)v33 + 14) - 1;
      *((_DWORD *)v33 + 14) = v11;
      if (!v11)
        (*(void (**)(void *))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  fst::TopSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)&v46);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v12 = v47;
  v13 = *(_QWORD *)(v12 + 72) - *(_QWORD *)(v12 + 64);
  if ((int)(v13 >> 3) >= 1)
  {
    v14 = v13 >> 3;
    do
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
      LODWORD(v14) = v14 - 1;
    }
    while ((_DWORD)v14);
    v12 = v47;
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 176))(a2, *(unsigned int *)(v12 + 88));
  if ((int)(v13 >> 3) < 1)
    goto LABEL_47;
  v15 = 0;
  v27 = (v13 >> 3);
  do
  {
    v16 = *(unsigned int **)(*(_QWORD *)(v47 + 64) + 8 * v15);
    v17 = *v16;
    v18 = v16[1];
    LODWORD(v32) = *v16;
    LODWORD(v38[0]) = v18;
    v49 = INFINITY;
    if (*(float *)&v32 != INFINITY || *(float *)v38 != v49)
    {
      v32 = (void **)__PAIR64__(v18, v17);
      v34 = 0;
      v35 = 0;
      v33 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v33, 0, 0, 0);
      v41 = v32;
      v43 = 0;
      v44 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v33, (uint64_t)v34, ((_BYTE *)v34 - (_BYTE *)v33) >> 2);
      (*(void (**)(uint64_t, uint64_t, void ***))(*(_QWORD *)a2 + 184))(a2, v15, &v41);
      if (__p)
      {
        v43 = __p;
        operator delete(__p);
      }
      if (v33)
      {
        v34 = v33;
        operator delete(v33);
      }
    }
    v40 = 0;
    v46[17]((void **)&v46, v15, v38);
    while (1)
    {
      if (!v38[0])
      {
        if (v40 >= v38[2])
          goto LABEL_44;
        goto LABEL_34;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v38[0] + 24))(v38[0]))
        break;
      if (v38[0])
      {
        v19 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)v38[0] + 32))();
        goto LABEL_35;
      }
LABEL_34:
      v19 = (int *)(v38[1] + 20 * v40);
LABEL_35:
      LODWORD(v32) = 0;
      v20 = v19[2];
      v21 = v19[3];
      LODWORD(v32) = v20;
      v49 = INFINITY;
      v48 = 2139095040;
      v22 = v19[1];
      v23 = v45[0] + 24 * *v19;
      v28 = (void *)__PAIR64__(v21, v20);
      v30 = 0;
      v31 = 0;
      v29 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v29, *(const void **)v23, *(_QWORD *)(v23 + 8), (uint64_t)(*(_QWORD *)(v23 + 8) - *(_QWORD *)v23) >> 2);
      v24 = v19[4];
      LODWORD(v32) = v22;
      HIDWORD(v32) = v22;
      v33 = v28;
      v35 = 0;
      v36 = 0;
      v34 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v34, v29, (uint64_t)v30, (v30 - (_BYTE *)v29) >> 2);
      v37 = v24;
      if (v29)
      {
        v30 = v29;
        operator delete(v29);
      }
      (*(void (**)(uint64_t, uint64_t, void ***))(*(_QWORD *)a2 + 208))(a2, v15, &v32);
      if (v34)
      {
        v35 = v34;
        operator delete(v34);
      }
      if (v38[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v38[0] + 40))(v38[0]);
      else
        ++v40;
    }
    if (v38[0])
    {
      (*(void (**)(void))(*(_QWORD *)v38[0] + 8))();
      goto LABEL_46;
    }
LABEL_44:
    if (v39)
      --*v39;
LABEL_46:
    ++v15;
  }
  while (v15 != v27);
LABEL_47:
  v32 = (void **)v45;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v32);
  v46 = (void (**)(void **, uint64_t, _QWORD *))&unk_1E5D25580;
  result = v47;
  if (v47)
  {
    v26 = *(_DWORD *)(v47 + 56) - 1;
    *(_DWORD *)(v47 + 56) = v26;
    if (!v26)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1AD7E734C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  uint64_t v28;
  _DWORD *v30;
  int v31;

  a15 = v28 - 136;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  *(_QWORD *)(v28 - 112) = &unk_1E5D25580;
  v30 = *(_DWORD **)(v28 - 104);
  if (v30)
  {
    v31 = v30[14] - 1;
    v30[14] = v31;
    if (!v31)
      (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
  }
  _Unwind_Resume(a1);
}

void _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_Lb0EEEvT1_S1D_S17_NS_15iterator_traitsIS1D_E15difference_typeEb(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  __int128 v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  unint64_t v20;
  float *v21;
  float v22;
  float v23;
  float v24;
  float *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  void *v31;
  BOOL v32;
  __int128 v33;
  uint64_t v34;
  float v35;
  unint64_t v36;
  unint64_t v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  void *v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  int64_t v65;
  int64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  float v71;
  uint64_t v72;
  uint64_t v73;
  float v74;
  float *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  float v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  uint64_t v91;
  void *v92;
  unint64_t v93;
  unint64_t v94;
  float v95;
  uint64_t v96;
  float v97;
  float *v98;
  _QWORD *v99;
  void *v100;
  void *v101;
  __n128 *v103;
  uint64_t v104;
  float v105;
  float v106;
  unint64_t v107;
  __n128 *v108;
  void *v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __n128 v114;

uint64_t _ZNSt3__124__sort5_maybe_branchlessB8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_Li0EEEvT1_S1D_S1D_S1D_S1D_S17_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  result = _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEvT1_S1D_S1D_S1D_S17_(a1, a2, a3, a4);
  v11 = *(float *)a4;
  if (*(float *)a5 > *(float *)a4)
  {
    *(_DWORD *)a4 = *(_DWORD *)a5;
    *(float *)a5 = v11;
    v12 = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = *(_QWORD *)(a5 + 8);
    *(_QWORD *)(a5 + 8) = v12;
    v13 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(a5 + 16);
    *(_QWORD *)(a5 + 16) = v13;
    v14 = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(a4 + 24) = *(_QWORD *)(a5 + 24);
    *(_QWORD *)(a5 + 24) = v14;
    v15 = *(float *)a3;
    if (*(float *)a4 > *(float *)a3)
    {
      *(_DWORD *)a3 = *(_DWORD *)a4;
      *(float *)a4 = v15;
      v16 = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = v16;
      v17 = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
      *(_QWORD *)(a4 + 16) = v17;
      v18 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)(a4 + 24);
      *(_QWORD *)(a4 + 24) = v18;
      v19 = *(float *)a2;
      if (*(float *)a3 > *(float *)a2)
      {
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(float *)a3 = v19;
        v20 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
        *(_QWORD *)(a3 + 8) = v20;
        v21 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
        *(_QWORD *)(a3 + 16) = v21;
        v22 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
        *(_QWORD *)(a3 + 24) = v22;
        v23 = *(float *)a1;
        if (*(float *)a2 > *(float *)a1)
        {
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(float *)a2 = v23;
          v24 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a2 + 8) = v24;
          v25 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          *(_QWORD *)(a2 + 16) = v25;
          v26 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a2 + 24) = v26;
        }
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEjT1_S1D_S1D_S17_(uint64_t result, uint64_t a2, uint64_t a3)
{
  float v3;
  float v4;
  float v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = *(float *)a2;
  v4 = *(float *)result;
  v5 = *(float *)a3;
  if (*(float *)a2 > *(float *)result)
  {
    if (v5 <= v3)
    {
      *(float *)result = v3;
      *(float *)a2 = v4;
      v16 = *(_QWORD *)(result + 8);
      *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v16;
      v17 = *(_QWORD *)(result + 16);
      *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
      v6 = (uint64_t *)(a2 + 24);
      v18 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 16) = v17;
      v19 = *(_QWORD *)(result + 24);
      *(_QWORD *)(result + 24) = v18;
      *(_QWORD *)(a2 + 24) = v19;
      if (*(float *)a3 <= v4)
        return result;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(float *)a3 = v4;
      v20 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v20;
      v8 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
    }
    else
    {
      v6 = (uint64_t *)(result + 24);
      *(float *)result = v5;
      *(float *)a3 = v4;
      v7 = *(_QWORD *)(result + 8);
      *(_QWORD *)(result + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v7;
      v8 = *(_QWORD *)(result + 16);
      *(_QWORD *)(result + 16) = *(_QWORD *)(a3 + 16);
    }
    *(_QWORD *)(a3 + 16) = v8;
    v12 = (uint64_t *)(a3 + 24);
    goto LABEL_10;
  }
  if (v5 > v3)
  {
    *(float *)a2 = v5;
    *(float *)a3 = v3;
    v9 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = v9;
    v10 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v10;
    v12 = (uint64_t *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 24) = v11;
    v13 = *(float *)result;
    if (*(float *)a2 > *(float *)result)
    {
      *(_DWORD *)result = *(_DWORD *)a2;
      *(float *)a2 = v13;
      v14 = *(_QWORD *)(result + 8);
      *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v14;
      v15 = *(_QWORD *)(result + 16);
      *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = v15;
      v6 = (uint64_t *)(result + 24);
LABEL_10:
      v21 = *v6;
      *v6 = *v12;
      *v12 = v21;
    }
  }
  return result;
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEbT1_S1D_S17_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  __int128 v24;

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(float *)(a2 - 32);
      v7 = *(float *)a1;
      if (v6 > *(float *)a1)
      {
        *(float *)a1 = v6;
        *(float *)(a2 - 32) = v7;
        v8 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 24);
        *(_QWORD *)(a2 - 24) = v8;
        v9 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v9;
        v10 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v10;
      }
      return result;
    case 3:
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEjT1_S1D_S1D_S17_(a1, a1 + 32, a2 - 32);
      return 1;
    case 4:
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEvT1_S1D_S1D_S1D_S17_(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      _ZNSt3__124__sort5_maybe_branchlessB8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_Li0EEEvT1_S1D_S1D_S1D_S1D_S17_(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32);
      return 1;
    default:
      v11 = (float *)(a1 + 64);
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEjT1_S1D_S1D_S17_(a1, a1 + 32, a1 + 64);
      v12 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(float *)v12;
    if (*(float *)v12 > *v11)
    {
      v16 = *(_QWORD *)(v12 + 8);
      v24 = *(_OWORD *)(v12 + 16);
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 8) = 0;
      v17 = v13;
      v18 = *v11;
      while (1)
      {
        v19 = v17;
        v20 = a1 + v17;
        *(float *)(a1 + v17 + 96) = v18;
        std::vector<int>::__move_assign(a1 + v17 + 104, (__n128 *)(a1 + v17 + 72));
        if (v19 == -64)
          break;
        v18 = *(float *)(v20 + 32);
        v17 = v19 - 32;
        if (v15 <= v18)
        {
          v21 = a1 + v17 + 96;
          goto LABEL_12;
        }
      }
      v21 = a1;
LABEL_12:
      *(float *)v21 = v15;
      v22 = *(void **)(v20 + 72);
      if (v22)
      {
        *(_QWORD *)(v21 + 16) = v22;
        operator delete(v22);
        v23 = a1 + v19;
        *(_QWORD *)(v23 + 80) = 0;
        *(_QWORD *)(v23 + 88) = 0;
      }
      *(_QWORD *)(v20 + 72) = v16;
      *(_OWORD *)(v21 + 16) = v24;
      if (++v14 == 8)
        return v12 + 32 == a2;
    }
    v11 = (float *)v12;
    v13 += 32;
    v12 += 32;
    if (v12 == a2)
      return 1;
  }
}

uint64_t _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEvT1_S1D_S1D_S1D_S17_(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  result = _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZZN5kaldi6decodeENS_10shared_ptrINS2_6quasar9CEDecoderEEERKNS_6vectorIiNS_9allocatorIiEEEERKNS_10unique_ptrINS4_22ComputeEngineBufferItfENS_14default_deleteISE_EEEEiNS_8functionIFNS_12basic_stringIcNS_11char_traitsIcEENS8_IcEEEENS7_INS_4pairIfSA_EENS8_ISR_EEEEEEENSK_IFfRKSR_EEENSK_IFvSC_EEEibENK3__0clERST_EUlRKT_RKT0_E_PSR_EEjT1_S1D_S1D_S17_(a1, a2, a3);
  v9 = *(float *)a3;
  if (*(float *)a4 > *(float *)a3)
  {
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(float *)a4 = v9;
    v10 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v10;
    v11 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = v11;
    v12 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 24) = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(a4 + 24) = v12;
    v13 = *(float *)a2;
    if (*(float *)a3 > *(float *)a2)
    {
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(float *)a3 = v13;
      v14 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v14;
      v15 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = v15;
      v16 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = v16;
      v17 = *(float *)a1;
      if (*(float *)a2 > *(float *)a1)
      {
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(float *)a2 = v17;
        v18 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v18;
        v19 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v19;
        v20 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a2 + 24) = v20;
      }
    }
  }
  return result;
}

double kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig::OnlineLatticeBiglmFasterDecoderConfig(kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig *this)
{
  uint64_t v1;
  double result;

  kaldi::quasar::LatticeBiglmFasterTraceBackDecoderConfig::LatticeBiglmFasterTraceBackDecoderConfig(this);
  *(_QWORD *)(v1 + 100) = 0x3F4000003F333333;
  *(_OWORD *)(v1 + 108) = xmmword_1AE140EB0;
  *(_DWORD *)(v1 + 124) = 3;
  *(_QWORD *)(v1 + 128) = 0x3D4CCCCD3C23D70ALL;
  *(_BYTE *)(v1 + 136) = 0;
  *(_DWORD *)(v1 + 140) = 0;
  *(_BYTE *)(v1 + 144) = 0;
  *(_DWORD *)(v1 + 148) = 1077936128;
  *(_QWORD *)&result = 0xC800000002;
  *(_QWORD *)(v1 + 152) = 0xC800000002;
  return result;
}

double kaldi::quasar::LatticeBiglmFasterTraceBackDecoderConfig::LatticeBiglmFasterTraceBackDecoderConfig(kaldi::quasar::LatticeBiglmFasterTraceBackDecoderConfig *this)
{
  double result;

  *(_DWORD *)this = 1098907648;
  *(_QWORD *)((char *)this + 12) = 0x4120000000000000;
  *((_DWORD *)this + 5) = 25;
  *((_BYTE *)this + 24) = 1;
  *(_OWORD *)((char *)this + 28) = xmmword_1AE140EC0;
  *(_QWORD *)((char *)this + 44) = 0x2FAF0803A800000;
  *((_WORD *)this + 26) = 257;
  *((_BYTE *)this + 54) = 0;
  *((_DWORD *)this + 14) = 2139095039;
  *(_OWORD *)((char *)this + 60) = xmmword_1AE140ED0;
  *(_QWORD *)((char *)this + 76) = 0x7FFFFFFFFFFFFFFFLL;
  *((_WORD *)this + 42) = 0;
  *((_QWORD *)this + 11) = 0x7FFFFFFF43FA0000;
  *((_DWORD *)this + 24) = 2139095040;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)((char *)this + 4) = 0x7FFFFFFFLL;
  return result;
}

void kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  kaldi::quasar::LatticeBiglmFasterTraceBackDecoderConfig::Register(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "rt-min");
  std::string::basic_string[abi:ne180100]<0>(__p, "Approximate minimum decoding run time factor");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 100, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "rt-max");
  std::string::basic_string[abi:ne180100]<0>(__p, "Approximate maximum decoding run time factor");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 104, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "update-interval");
  std::string::basic_string[abi:ne180100]<0>(__p, "Beam update interval in frames");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 124, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "beam-update");
  std::string::basic_string[abi:ne180100]<0>(__p, "Beam update rate");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 128, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-beam-update");
  std::string::basic_string[abi:ne180100]<0>(__p, "Max beam update rate");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 132, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "inter-utt-sil");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum # of silence frames to trigger new utterance. The value will be also possibly used for computing the moving average of silence posteriors.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 112, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-utt-sil");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum # of silence frames to trigger end of speech while no speech presented");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 120, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "enable-avg-silpost");
  std::string::basic_string[abi:ne180100]<0>(__p, "To enable average silence posterior which is used for utterance detection.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 136, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "silence-posterior-threshold");
  std::string::basic_string[abi:ne180100]<0>(__p, "The threshold to trigger utterance detection with silence posterior.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 140, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-utt-length");
  std::string::basic_string[abi:ne180100]<0>(__p, "If the utterance becomes longer than this number of frames, shorter silence is acceptable as an utterance separator");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 116, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "enable-adaptive-inter-utt-sil");
  std::string::basic_string[abi:ne180100]<0>(__p, "To enable adaptive inter-utt-sil to trigger new utterance.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 144, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "adaptive-inter-utt-sil-rate");
  std::string::basic_string[abi:ne180100]<0>(__p, "The rate to compute the exponential decay factor for adaptive inter-utt-sil: exp(adaptive-inter-utt-sil-rate * (max-utt-length - current_utt_frames) / max-utt-length)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 148, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "adaptive-inter-utt-sil-min");
  std::string::basic_string[abi:ne180100]<0>(__p, "Minimum value for adaptive inter-utt-sil ");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 152, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "adaptive-inter-utt-sil-max");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum value for adaptive inter-utt-sil ");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 156, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1AD7E8928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void quasar::EndPointDecoderConfig::registerParams(uint64_t a1, quasar::SystemConfig *this, const void **a3)
{
  void *v6[2];
  char v7;
  std::string __p;
  std::string v9;

  quasar::SystemConfig::getPrefix(this, &v9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v9.__r_.__value_.__l.__data_, a3, (uint64_t)&__p);
  quasar::SystemConfig::setPrefix((std::string *)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "model-file");
  std::string::basic_string[abi:ne180100]<0>(v6, "Endpoint model file");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 40, (uint64_t)v6, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "model-feature-list");
  std::string::basic_string[abi:ne180100]<0>(v6, "sequence of features for endpoint model");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 64, (uint64_t)v6, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(v6, "model is memory mapped");
  quasar::SystemConfig::Register<BOOL>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 88, (uint64_t)v6, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "early-endpoint-threshold");
  std::string::basic_string[abi:ne180100]<0>(v6, "Threshold for early endpoint detection");
  quasar::SystemConfig::Register<float>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1, (uint64_t)v6, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "endpoint-threshold");
  std::string::basic_string[abi:ne180100]<0>(v6, "Threshold for final endpoint detection");
  quasar::SystemConfig::Register<float>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 4, (uint64_t)v6, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "enable-acoustic-endpointer");
  std::string::basic_string[abi:ne180100]<0>(v6, "use the threshold only for acoustic endpointer score and ignore every other EP features");
  quasar::SystemConfig::Register<BOOL>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 8, (uint64_t)v6, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "pause-threshold-list");
  std::string::basic_string[abi:ne180100]<0>(v6, "Comma-separated list for pause-threshold vector, which is used for determining the pause-counts vector that is an endpointer feature. pause-counts[n] is the number of interword pauses >= pause-threshold[n]. For example, pause-threshold=[3,30,100] and pauses of 90 frames and 100 frames will result in pause-counts=[2,2,1].");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 16, (uint64_t)v6, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "trailing-silence-limit");
  std::string::basic_string[abi:ne180100]<0>(v6, "An upper limit for trailing silence duration (milliseconds) after which recognizer should be forced to endpoint");
  quasar::SystemConfig::Register<int>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 92, (uint64_t)v6, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "pauses-as-BOOL");
  std::string::basic_string[abi:ne180100]<0>(v6, "Needs pause-threshold-list. If true, then pause-threshold vector is used to create a pause-counts vector,where pause-counts[n] is a BOOLean for asserting interword pauses >= pause-threshold[n]. For example, pause-threshold=[3,30,100] and pause of 90 frames will result in pause-counts=[1,1,0].");
  quasar::SystemConfig::Register<BOOL>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 96, (uint64_t)v6, 0, 22, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "extra-delay-ms");
  std::string::basic_string[abi:ne180100]<0>(v6, "Delaying the endpointer trigger decision by the given amount of time (in msec), when specified in recog request.");
  quasar::SystemConfig::Register<int>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 100, (uint64_t)v6, 0, 55, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  quasar::SystemConfig::setPrefix((std::string *)this, &v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_1AD7E8E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::LatticeBiglmFasterTraceBackDecoderConfig::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  kaldi::LatticeBiglmFasterDecoderConfig::Register(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-total-tokens");
  std::string::basic_string[abi:ne180100]<0>(__p, "Max total allocated tokens at any time.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 68, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-total-forward-links");
  std::string::basic_string[abi:ne180100]<0>(__p, "Max total allocated forward links at any time.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 72, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "state-min-arcs-cache");
  std::string::basic_string[abi:ne180100]<0>(__p, "Cache unpacked arcs for FST states with more than this many arcs");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 80, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "memoize-emitting-arcs");
  std::string::basic_string[abi:ne180100]<0>(__p, "Compute emitting arcs only one per frame. Speeds up decoding when acoustic model output is sparse.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 84, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "acoustic-cost-cutoff");
  std::string::basic_string[abi:ne180100]<0>(__p, "Pruning threshold for acoustic model costs as neg log prob; smaller prunes more aggressively");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 88, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "lm-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Pruning threshold for acoustic model costs as neg log prob; smaller prunes more aggressively");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 96, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "acoustic-max-active");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum number of scores to consider from the acoustic model");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 92, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1AD7E91F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void kaldi::LatticeBiglmFasterDecoderConfig::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  kaldi::LatticeFasterDecoderConfig::Register(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "small-lm-prune-beam-diff");
  std::string::basic_string[abi:ne180100]<0>(__p, "Pruning threshold for small LM before checking with big LM; smaller prunes more aggressively");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 56, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1AD7E92E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void kaldi::LatticeFasterDecoderConfig::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  fst::DeterminizeLatticePhonePrunedOptions::Register(a1 + 44, a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decoding beam.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-active");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decoder max active states.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 4, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "min-active");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decoder minimum #active states.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 8, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "min-active-v2");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decoder minimum #active states. V2 has a tighter bound and we will ignore v1 when v2 is provided.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 12, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "lattice-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Lattice generation beam");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 16, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "prune-interval");
  std::string::basic_string[abi:ne180100]<0>(__p, "Interval (in frames) at which to prune tokens");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 20, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "determinize-lattice");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, determinize the lattice (in a special sense, keeping only best pdf-sequence for each word-sequence).");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 24, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "beam-delta");
  std::string::basic_string[abi:ne180100]<0>(__p, "Increment used in decoding-- this parameter is obscure and relates to a speedup in the way the max-active constraint is applied.  Larger is more accurate.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 28, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "hash-ratio");
  std::string::basic_string[abi:ne180100]<0>(__p, "Setting used in decoder to control hash behavior");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 32, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "word-ins-penalty");
  std::string::basic_string[abi:ne180100]<0>(__p, "Word insertion penalty applied to each word");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 36, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1AD7E96E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void fst::DeterminizeLatticePhonePrunedOptions::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "delta");
  std::string::basic_string[abi:ne180100]<0>(__p, "Tolerance used in determinization");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-mem");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum approximate memory usage in determinization (real usage might be many times this).");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 4, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "phone-determinize");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, do an initial pass of determinization on both phones and words (see also --word-determinize)");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 8, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "word-determinize");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, do a second pass of determinization on words only (see also --phone-determinize)");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 9, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "minimize");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, push and minimize after determinization.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 10, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1AD7E9950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::JoinVectorToString<std::string>(uint64_t *a1, const char *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  _QWORD v15[2];
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v15);
  v4 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = v4 + v5;
      v8 = *(char *)(v7 + 23);
      if (v8 >= 0)
        v9 = v7;
      else
        v9 = *(_QWORD *)v7;
      if (v8 >= 0)
        v10 = *(unsigned __int8 *)(v7 + 23);
      else
        v10 = *(_QWORD *)(v7 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v9, v10);
      ++v6;
      v4 = *a1;
      v11 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
      if (v6 < v11)
      {
        v12 = strlen(a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)a2, v12);
        v4 = *a1;
        v11 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
      }
      v5 += 24;
    }
    while (v6 < v11);
  }
  std::stringbuf::str();
  v15[0] = *MEMORY[0x1E0DE4F50];
  v13 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v16[0] = v13;
  v16[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v18);
}

void sub_1AD7E9AFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_0::operator()(uint64_t *a1@<X0>, int **a2@<X1>, std::vector<std::string> *a3@<X8>)
{
  uint64_t v3;
  int *v4;
  int *v5;
  int v6;
  void *__p[2];
  char v8;
  std::vector<std::string> *i;

  v3 = *a1;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  a3->__begin_ = 0;
  v4 = *a2;
  v5 = a2[1];
  for (i = a3; v4 != v5; ++v4)
  {
    v6 = *v4;
    if (kaldi::quasar::CEDecoder::IsPrintable(*(kaldi::quasar::CEDecoder **)(v3 + 648), *v4))
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v3 + 568) + 88))(__p, *(_QWORD *)(v3 + 568), v6);
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "");
    std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](&i, (__int128 *)__p);
    if (v8 < 0)
      operator delete(__p[0]);
  }
}

void sub_1AD7E9BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0)
    operator delete(__p);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

std::vector<std::string> **std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](std::vector<std::string> **a1, __int128 *a2)
{
  std::vector<std::string> *v4;
  std::vector<std::string>::pointer end;
  std::vector<std::string> *v6;
  std::allocator<std::string> *p_end_cap;
  std::string *v8;
  std::string *value;
  __int128 v10;
  std::string *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  std::string *v16;
  std::string *v17;
  __int128 v18;
  std::__split_buffer<std::string> __v;

  v4 = *a1;
  end = (*a1)->__end_;
  v6 = *a1;
  value = v6->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&v6->__end_cap_;
  v8 = value;
  if (end >= value)
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v4->__begin_) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v4->__begin_) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v13;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v15)
      v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, v15);
    else
      v16 = 0;
    v17 = v16 + v12;
    __v.__first_ = v16;
    __v.__begin_ = v17;
    __v.__end_cap_.__value_ = &v16[v15];
    v18 = *a2;
    v17->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    __v.__end_ = v17 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(v4, &__v);
    v11 = v4->__end_;
    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
  }
  else
  {
    v10 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v11 = end + 1;
    v4->__end_ = end + 1;
  }
  v4->__end_ = v11;
  return a1;
}

void sub_1AD7E9D30(_Unwind_Exception *a1, std::__split_buffer<std::wstring> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::pair<float,std::vector<int>>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](a1, a2);
    v6 = a1[1];
    v7 = v6 + 32 * a2;
    v8 = 32 * a2;
    v9 = (_QWORD *)(v6 + 8);
    do
    {
      *((_DWORD *)v9 - 2) = *(_DWORD *)a3;
      v9[1] = 0;
      v9[2] = 0;
      *v9 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v9, *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 2);
      v9 += 4;
      v8 -= 32;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1AD7E9DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(12 * a2);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int *v15;
  int v16;
  int v17;
  int v18;
  float v19;
  uint64_t v20;
  int v21;
  int v22;
  float v23;
  unint64_t v24;
  unint64_t v25;
  float *v26;
  float v27;
  unint64_t v28;
  float v29;
  float *v30;
  int v31;
  int v32;
  int v33;
  float v34;
  float v35;
  BOOL v36;
  uint64_t v37;
  float v38;
  unint64_t v39;
  float v40;
  float *v41;
  unint64_t v42;
  float v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  float v49;
  float v50;
  float v51;
  float v52;
  int v53;
  int v54;
  float v55;
  float v56;
  int v57;
  int v58;
  float v59;
  float v60;
  int v61;
  int v62;
  int v63;
  int v64;
  float v65;
  int v66;
  int v67;
  float v68;
  int v69;
  int v70;
  _DWORD *v71;
  BOOL v73;
  uint64_t v74;
  unint64_t v75;
  _DWORD *v76;
  float v77;
  int v78;
  int v79;
  uint64_t v80;
  float *v81;
  uint64_t v82;
  int64_t v83;
  int64_t v84;
  int64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  float v89;
  float v90;
  int v91;
  int v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int64_t v96;
  int64_t v97;
  int v98;
  int v99;
  int v100;
  unint64_t v101;
  _DWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  float v108;
  float v109;
  int v110;
  int v111;
  unint64_t v112;
  float *v114;
  _DWORD *v115;
  float v116;
  int v117;
  int v118;
  float *v119;
  float *v120;
  int v121;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 2);
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v51 = *(float *)(a2 - 8);
        v52 = *(float *)(v8 + 4);
        if (v51 > v52)
        {
          v53 = *(_DWORD *)v8;
          *(_DWORD *)v8 = *(_DWORD *)(a2 - 12);
          *(_DWORD *)(a2 - 12) = v53;
          *(float *)(v8 + 4) = v51;
          *(float *)(a2 - 8) = v52;
          v54 = *(_DWORD *)(v8 + 8);
          *(_DWORD *)(v8 + 8) = *(_DWORD *)(a2 - 4);
          *(_DWORD *)(a2 - 4) = v54;
        }
        return result;
      case 3:
        return (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>((int *)v8, (int *)(v8 + 12), (int *)(a2 - 12));
      case 4:
        return (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>(v8, v8 + 12, v8 + 24, a2 - 12);
      case 5:
        result = (uint64_t)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>(v8, v8 + 12, v8 + 24, v8 + 36);
        v55 = *(float *)(a2 - 8);
        v56 = *(float *)(v8 + 40);
        if (v55 > v56)
        {
          v57 = *(_DWORD *)(v8 + 36);
          *(_DWORD *)(v8 + 36) = *(_DWORD *)(a2 - 12);
          *(_DWORD *)(a2 - 12) = v57;
          *(float *)(v8 + 40) = v55;
          *(float *)(a2 - 8) = v56;
          v58 = *(_DWORD *)(v8 + 44);
          *(_DWORD *)(v8 + 44) = *(_DWORD *)(a2 - 4);
          *(_DWORD *)(a2 - 4) = v58;
          v59 = *(float *)(v8 + 40);
          v60 = *(float *)(v8 + 28);
          if (v59 > v60)
          {
            v61 = *(_DWORD *)(v8 + 24);
            v63 = *(_DWORD *)(v8 + 32);
            v62 = *(_DWORD *)(v8 + 36);
            *(_DWORD *)(v8 + 24) = v62;
            *(float *)(v8 + 28) = v59;
            *(float *)(v8 + 40) = v60;
            v64 = *(_DWORD *)(v8 + 44);
            *(_DWORD *)(v8 + 32) = v64;
            *(_DWORD *)(v8 + 36) = v61;
            v65 = *(float *)(v8 + 16);
            *(_DWORD *)(v8 + 44) = v63;
            if (v59 > v65)
            {
              v66 = *(_DWORD *)(v8 + 12);
              *(_DWORD *)(v8 + 12) = v62;
              *(float *)(v8 + 16) = v59;
              *(float *)(v8 + 28) = v65;
              v67 = *(_DWORD *)(v8 + 20);
              *(_DWORD *)(v8 + 20) = v64;
              *(_DWORD *)(v8 + 24) = v66;
              *(_DWORD *)(v8 + 32) = v67;
              v68 = *(float *)(v8 + 4);
              if (v59 > v68)
              {
                v69 = *(_DWORD *)v8;
                *(_DWORD *)v8 = v62;
                *(float *)(v8 + 4) = v59;
                *(float *)(v8 + 16) = v68;
                v70 = *(_DWORD *)(v8 + 8);
                *(_DWORD *)(v8 + 8) = v64;
                *(_DWORD *)(v8 + 12) = v69;
                *(_DWORD *)(v8 + 20) = v70;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 287)
        {
          v71 = (_DWORD *)(v8 + 12);
          v73 = v8 == a2 || v71 == (_DWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v73)
            {
              v74 = 0;
              v75 = v8;
              do
              {
                v76 = v71;
                v77 = *(float *)(v75 + 16);
                if (v77 > *(float *)(v75 + 4))
                {
                  v78 = *v71;
                  v79 = *(_DWORD *)(v75 + 20);
                  v80 = v74;
                  while (1)
                  {
                    v81 = (float *)(v8 + v80);
                    v81[3] = *(float *)(v8 + v80);
                    v81[4] = *(float *)(v8 + v80 + 4);
                    v81[5] = *(float *)(v8 + v80 + 8);
                    if (!v80)
                      break;
                    v80 -= 12;
                    if (v77 <= *(v81 - 2))
                    {
                      v82 = v8 + v80 + 12;
                      goto LABEL_80;
                    }
                  }
                  v82 = v8;
LABEL_80:
                  *(_DWORD *)v82 = v78;
                  *(float *)(v82 + 4) = v77;
                  *(_DWORD *)(v82 + 8) = v79;
                }
                v71 = v76 + 3;
                v74 += 12;
                v75 = (unint64_t)v76;
              }
              while (v76 + 3 != (_DWORD *)a2);
            }
          }
          else if (!v73)
          {
            v114 = (float *)(v8 + 20);
            do
            {
              v115 = v71;
              v116 = *(float *)(v7 + 16);
              if (v116 > *(float *)(v7 + 4))
              {
                v117 = *v71;
                v118 = *(_DWORD *)(v7 + 20);
                v119 = v114;
                do
                {
                  v120 = v119;
                  *(v119 - 2) = *(v119 - 5);
                  *(v119 - 1) = *(v119 - 4);
                  v121 = *((_DWORD *)v119 - 3);
                  v119 -= 3;
                  *(_DWORD *)v120 = v121;
                }
                while (v116 > *(v120 - 7));
                *((_DWORD *)v119 - 2) = v117;
                *(v119 - 1) = v116;
                *(_DWORD *)v119 = v118;
              }
              v71 = v115 + 3;
              v114 += 3;
              v7 = (uint64_t)v115;
            }
            while (v115 + 3 != (_DWORD *)a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v83 = (unint64_t)(v10 - 2) >> 1;
            v84 = v83;
            do
            {
              v85 = v84;
              if (v83 >= v84)
              {
                v86 = (2 * v84) | 1;
                v87 = v8 + 12 * v86;
                if (2 * v85 + 2 < v10 && *(float *)(v87 + 4) > *(float *)(v87 + 16))
                {
                  v87 += 12;
                  v86 = 2 * v85 + 2;
                }
                v88 = v8 + 12 * v85;
                v89 = *(float *)(v87 + 4);
                v90 = *(float *)(v88 + 4);
                if (v89 <= v90)
                {
                  v91 = *(_DWORD *)v88;
                  v92 = *(_DWORD *)(v88 + 8);
                  do
                  {
                    v93 = v88;
                    v88 = v87;
                    *(_DWORD *)v93 = *(_DWORD *)v87;
                    *(float *)(v93 + 4) = v89;
                    *(_DWORD *)(v93 + 8) = *(_DWORD *)(v87 + 8);
                    if (v83 < v86)
                      break;
                    v94 = 2 * v86;
                    v86 = (2 * v86) | 1;
                    v87 = v8 + 12 * v86;
                    v95 = v94 + 2;
                    if (v95 < v10 && *(float *)(v87 + 4) > *(float *)(v87 + 16))
                    {
                      v87 += 12;
                      v86 = v95;
                    }
                    v89 = *(float *)(v87 + 4);
                  }
                  while (v89 <= v90);
                  *(_DWORD *)v88 = v91;
                  *(float *)(v88 + 4) = v90;
                  *(_DWORD *)(v88 + 8) = v92;
                }
              }
              v84 = v85 - 1;
            }
            while (v85);
            v96 = v9 / 0xCuLL;
            do
            {
              v97 = 0;
              v98 = *(_DWORD *)v8;
              v99 = *(_DWORD *)(v8 + 4);
              v100 = *(_DWORD *)(v8 + 8);
              v101 = v8;
              do
              {
                v102 = (_DWORD *)v101;
                v101 += 12 * v97 + 12;
                v103 = 2 * v97;
                result = (2 * v97) | 1;
                v97 = result;
                v104 = v103 + 2;
                if (v104 < v96 && *(float *)(v101 + 4) > *(float *)(v101 + 16))
                {
                  v101 += 12;
                  v97 = v104;
                }
                *v102 = *(_DWORD *)v101;
                v102[1] = *(_DWORD *)(v101 + 4);
                v102[2] = *(_DWORD *)(v101 + 8);
              }
              while (v97 <= (uint64_t)((unint64_t)(v96 - 2) >> 1));
              if (v101 == a2 - 12)
              {
                *(_DWORD *)v101 = v98;
                *(_DWORD *)(v101 + 4) = v99;
                *(_DWORD *)(v101 + 8) = v100;
              }
              else
              {
                *(_DWORD *)v101 = *(_DWORD *)(a2 - 12);
                *(_DWORD *)(v101 + 4) = *(_DWORD *)(a2 - 8);
                *(_DWORD *)(v101 + 8) = *(_DWORD *)(a2 - 4);
                *(_DWORD *)(a2 - 12) = v98;
                *(_DWORD *)(a2 - 8) = v99;
                *(_DWORD *)(a2 - 4) = v100;
                v105 = v101 - v8 + 12;
                if (v105 >= 13)
                {
                  v106 = (v105 / 0xCuLL - 2) >> 1;
                  v107 = v8 + 12 * v106;
                  v108 = *(float *)(v107 + 4);
                  v109 = *(float *)(v101 + 4);
                  if (v108 > v109)
                  {
                    v110 = *(_DWORD *)v101;
                    v111 = *(_DWORD *)(v101 + 8);
                    do
                    {
                      v112 = v101;
                      v101 = v107;
                      *(_DWORD *)v112 = *(_DWORD *)v107;
                      *(float *)(v112 + 4) = v108;
                      *(_DWORD *)(v112 + 8) = *(_DWORD *)(v107 + 8);
                      if (!v106)
                        break;
                      v106 = (v106 - 1) >> 1;
                      v107 = v8 + 12 * v106;
                      v108 = *(float *)(v107 + 4);
                    }
                    while (v108 > v109);
                    *(_DWORD *)v101 = v110;
                    *(float *)(v101 + 4) = v109;
                    *(_DWORD *)(v101 + 8) = v111;
                  }
                }
              }
              a2 -= 12;
            }
            while (v96-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (int *)(v8 + 12 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 < 0x601)
        {
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>((int *)(v7 + 12 * v11), (int *)v7, (int *)(a2 - 12));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>((int *)v7, (int *)(v7 + 12 * v11), (int *)(a2 - 12));
          v13 = 3 * v11;
          v14 = (int *)(v7 + 12 * v11 - 12);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>((int *)(v7 + 12), v14, (int *)(a2 - 24));
          v15 = (int *)(v7 + 12 + 4 * v13);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>((int *)(v7 + 24), v15, (int *)(a2 - 36));
          result = (uint64_t)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>(v14, v12, v15);
          v16 = *(_DWORD *)v7;
          *(_DWORD *)v7 = *v12;
          *v12 = v16;
          v17 = *(_DWORD *)(v7 + 4);
          *(_DWORD *)(v7 + 4) = v12[1];
          v12[1] = v17;
          v18 = *(_DWORD *)(v7 + 8);
          *(_DWORD *)(v7 + 8) = v12[2];
          v12[2] = v18;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v19 = *(float *)(v7 + 4);
          if (*(float *)(v7 - 8) > v19)
            goto LABEL_12;
          if (v19 <= *(float *)(a2 - 8))
          {
            v39 = v7 + 12;
            do
            {
              v8 = v39;
              if (v39 >= a2)
                break;
              v40 = *(float *)(v39 + 4);
              v39 += 12;
            }
            while (v19 <= v40);
          }
          else
          {
            v37 = v7;
            do
            {
              v8 = v37 + 12;
              v38 = *(float *)(v37 + 16);
              v37 += 12;
            }
            while (v19 <= v38);
          }
          v41 = (float *)a2;
          if (v8 < a2)
          {
            v42 = a2;
            do
            {
              v41 = (float *)(v42 - 12);
              v43 = *(float *)(v42 - 8);
              v42 -= 12;
            }
            while (v19 > v43);
          }
          v44 = *(_DWORD *)v7;
          v45 = *(_DWORD *)(v7 + 8);
          while (v8 < (unint64_t)v41)
          {
            v46 = *(_DWORD *)v8;
            *(float *)v8 = *v41;
            *(_DWORD *)v41 = v46;
            v47 = *(_DWORD *)(v8 + 4);
            *(float *)(v8 + 4) = v41[1];
            *((_DWORD *)v41 + 1) = v47;
            v48 = *(_DWORD *)(v8 + 8);
            *(float *)(v8 + 8) = v41[2];
            *((_DWORD *)v41 + 2) = v48;
            do
            {
              v49 = *(float *)(v8 + 16);
              v8 += 12;
            }
            while (v19 <= v49);
            do
            {
              v50 = *(v41 - 2);
              v41 -= 3;
            }
            while (v19 > v50);
          }
          if (v8 - 12 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v8 - 12);
            *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 - 8);
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 4);
          }
          a4 = 0;
          *(_DWORD *)(v8 - 12) = v44;
          *(float *)(v8 - 8) = v19;
          *(_DWORD *)(v8 - 4) = v45;
          continue;
        }
        v19 = *(float *)(v7 + 4);
LABEL_12:
        v20 = 0;
        v21 = *(_DWORD *)v7;
        v22 = *(_DWORD *)(v7 + 8);
        do
        {
          v23 = *(float *)(v7 + v20 + 16);
          v20 += 12;
        }
        while (v23 > v19);
        v24 = v7 + v20;
        v25 = a2;
        if (v20 == 12)
        {
          v28 = a2;
          while (v24 < v28)
          {
            v26 = (float *)(v28 - 12);
            v29 = *(float *)(v28 - 8);
            v28 -= 12;
            if (v29 > v19)
              goto LABEL_22;
          }
          v26 = (float *)v28;
        }
        else
        {
          do
          {
            v26 = (float *)(v25 - 12);
            v27 = *(float *)(v25 - 8);
            v25 -= 12;
          }
          while (v27 <= v19);
        }
LABEL_22:
        v8 = v24;
        if (v24 < (unint64_t)v26)
        {
          v30 = v26;
          do
          {
            v31 = *(_DWORD *)v8;
            *(float *)v8 = *v30;
            *(_DWORD *)v30 = v31;
            v32 = *(_DWORD *)(v8 + 4);
            *(float *)(v8 + 4) = v30[1];
            *((_DWORD *)v30 + 1) = v32;
            v33 = *(_DWORD *)(v8 + 8);
            *(float *)(v8 + 8) = v30[2];
            *((_DWORD *)v30 + 2) = v33;
            do
            {
              v34 = *(float *)(v8 + 16);
              v8 += 12;
            }
            while (v34 > v19);
            do
            {
              v35 = *(v30 - 2);
              v30 -= 3;
            }
            while (v35 <= v19);
          }
          while (v8 < (unint64_t)v30);
        }
        if (v8 - 12 != v7)
        {
          *(_DWORD *)v7 = *(_DWORD *)(v8 - 12);
          *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 - 8);
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 4);
        }
        *(_DWORD *)(v8 - 12) = v21;
        *(float *)(v8 - 8) = v19;
        *(_DWORD *)(v8 - 4) = v22;
        if (v24 < (unint64_t)v26)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *,false>(v7, v8 - 12, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v36 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>(v7, v8 - 12);
        result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>(v8, a2);
        if (!(_DWORD)result)
        {
          if (v36)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 12;
        if (!v36)
          goto LABEL_2;
        return result;
    }
  }
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>(int *result, int *a2, int *a3)
{
  float v3;
  float v4;
  float v5;
  int *v6;
  float v7;
  float v8;
  int v9;
  int *v10;
  float v11;
  float v12;
  float v13;
  int v14;
  int v15;
  float v16;
  float v17;
  int v18;

  v3 = *((float *)a2 + 1);
  v4 = *((float *)result + 1);
  v5 = *((float *)a3 + 1);
  if (v3 > v4)
  {
    v6 = result + 2;
    v7 = *(float *)result;
    if (v5 <= v3)
    {
      *result = *a2;
      *(float *)a2 = v7;
      *((float *)result + 1) = v3;
      v6 = a2 + 2;
      v14 = a2[2];
      *((float *)a2 + 1) = v4;
      v15 = result[2];
      result[2] = v14;
      a2[2] = v15;
      v16 = *((float *)a3 + 1);
      if (v16 <= v4)
        return result;
      v17 = *(float *)a2;
      *a2 = *a3;
      *(float *)a3 = v17;
      *((float *)a2 + 1) = v16;
    }
    else
    {
      *result = *a3;
      *(float *)a3 = v7;
      *((float *)result + 1) = v5;
    }
    *((float *)a3 + 1) = v4;
    v10 = a3 + 2;
    goto LABEL_10;
  }
  if (v5 > v3)
  {
    v8 = *(float *)a2;
    *a2 = *a3;
    *(float *)a3 = v8;
    v10 = a2 + 2;
    v9 = a2[2];
    *((float *)a2 + 1) = v5;
    *((float *)a3 + 1) = v3;
    a2[2] = a3[2];
    a3[2] = v9;
    v11 = *((float *)a2 + 1);
    v12 = *((float *)result + 1);
    if (v11 > v12)
    {
      v13 = *(float *)result;
      *result = *a2;
      *(float *)a2 = v13;
      *((float *)result + 1) = v11;
      *((float *)a2 + 1) = v12;
      v6 = result + 2;
LABEL_10:
      v18 = *v6;
      *v6 = *v10;
      *v10 = v18;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  float v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  int v22;
  int v23;
  float v24;
  float v25;
  int v26;
  int v27;
  int v28;
  int v29;
  float v30;
  int v31;
  int v32;
  float v33;
  int v34;
  int v35;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(float *)(a2 - 8);
      v7 = *(float *)(a1 + 4);
      if (v6 > v7)
      {
        v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)(a2 - 12);
        *(_DWORD *)(a2 - 12) = v8;
        *(float *)(a1 + 4) = v6;
        *(float *)(a2 - 8) = v7;
        v9 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v9;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>((int *)a1, (int *)(a1 + 12), (int *)(a2 - 12));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>(a1, a1 + 12, a1 + 24, a2 - 12);
      return 1;
    case 5uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>(a1, a1 + 12, a1 + 24, a1 + 36);
      v20 = *(float *)(a2 - 8);
      v21 = *(float *)(a1 + 40);
      if (v20 > v21)
      {
        v22 = *(_DWORD *)(a1 + 36);
        *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 - 12);
        *(_DWORD *)(a2 - 12) = v22;
        *(float *)(a1 + 40) = v20;
        *(float *)(a2 - 8) = v21;
        v23 = *(_DWORD *)(a1 + 44);
        *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 - 4);
        *(_DWORD *)(a2 - 4) = v23;
        v24 = *(float *)(a1 + 40);
        v25 = *(float *)(a1 + 28);
        if (v24 > v25)
        {
          v26 = *(_DWORD *)(a1 + 24);
          v28 = *(_DWORD *)(a1 + 32);
          v27 = *(_DWORD *)(a1 + 36);
          *(_DWORD *)(a1 + 24) = v27;
          *(float *)(a1 + 28) = v24;
          *(float *)(a1 + 40) = v25;
          v29 = *(_DWORD *)(a1 + 44);
          *(_DWORD *)(a1 + 32) = v29;
          *(_DWORD *)(a1 + 36) = v26;
          v30 = *(float *)(a1 + 16);
          *(_DWORD *)(a1 + 44) = v28;
          if (v24 > v30)
          {
            v31 = *(_DWORD *)(a1 + 12);
            *(_DWORD *)(a1 + 12) = v27;
            *(float *)(a1 + 16) = v24;
            *(float *)(a1 + 28) = v30;
            v32 = *(_DWORD *)(a1 + 20);
            *(_DWORD *)(a1 + 20) = v29;
            *(_DWORD *)(a1 + 24) = v31;
            *(_DWORD *)(a1 + 32) = v32;
            v33 = *(float *)(a1 + 4);
            if (v24 > v33)
            {
              v34 = *(_DWORD *)a1;
              *(_DWORD *)a1 = v27;
              *(float *)(a1 + 4) = v24;
              *(float *)(a1 + 16) = v33;
              v35 = *(_DWORD *)(a1 + 8);
              *(_DWORD *)(a1 + 8) = v29;
              *(_DWORD *)(a1 + 12) = v34;
              *(_DWORD *)(a1 + 20) = v35;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>((int *)a1, (int *)(a1 + 12), (int *)(a1 + 24));
      v11 = a1 + 36;
      if (a1 + 36 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(float *)(v11 + 4);
    if (v14 > *(float *)(v10 + 4))
    {
      v15 = *(_DWORD *)v11;
      v16 = *(_DWORD *)(v11 + 8);
      v17 = v12;
      while (1)
      {
        v18 = a1 + v17;
        *(_DWORD *)(v18 + 36) = *(_DWORD *)(a1 + v17 + 24);
        *(_DWORD *)(v18 + 40) = *(_DWORD *)(a1 + v17 + 28);
        *(_DWORD *)(v18 + 44) = *(_DWORD *)(a1 + v17 + 32);
        if (v17 == -24)
          break;
        v17 -= 12;
        if (v14 <= *(float *)(v18 + 16))
        {
          v19 = a1 + v17 + 36;
          goto LABEL_13;
        }
      }
      v19 = a1;
LABEL_13:
      *(_DWORD *)v19 = v15;
      *(float *)(v19 + 4) = v14;
      *(_DWORD *)(v19 + 8) = v16;
      if (++v13 == 8)
        return v11 + 12 == a2;
    }
    v10 = v11;
    v12 += 12;
    v11 += 12;
    if (v11 == a2)
      return 1;
  }
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *result;
  float v9;
  float v10;
  int v11;
  int v12;
  float v13;
  float v14;
  int v15;
  int v16;
  float v17;
  float v18;
  int v19;
  int v20;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::decode(std::shared_ptr<kaldi::quasar::CEDecoder>,std::vector<int> const&,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf> const&,int,std::function<std::string ()(std::vector<std::pair<float,std::vector<int>>>)>,std::function<float ()(std::pair<float,std::vector<int>> const&)>,std::function<void ()(std::vector<int> const&)>,int,BOOL)::$_1 &,std::tuple<int,float,int> *>((int *)a1, (int *)a2, (int *)a3);
  v9 = *(float *)(a4 + 4);
  v10 = *(float *)(a3 + 4);
  if (v9 > v10)
  {
    v11 = *(_DWORD *)a3;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v11;
    *(float *)(a3 + 4) = v9;
    *(float *)(a4 + 4) = v10;
    v12 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = v12;
    v13 = *(float *)(a3 + 4);
    v14 = *(float *)(a2 + 4);
    if (v13 > v14)
    {
      v15 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v15;
      *(float *)(a2 + 4) = v13;
      *(float *)(a3 + 4) = v14;
      v16 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v16;
      v17 = *(float *)(a2 + 4);
      v18 = *(float *)(a1 + 4);
      if (v17 > v18)
      {
        v19 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v19;
        *(float *)(a1 + 4) = v17;
        *(float *)(a2 + 4) = v18;
        v20 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = v20;
      }
    }
  }
  return result;
}

_QWORD *std::vector<std::pair<float,std::vector<int>>>::__construct_one_at_end[abi:ne180100]<float &,std::vector<int>&>(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)v4 = *a2;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 8) = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v4 + 8), *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  *(_QWORD *)(a1 + 8) = v4 + 32;
  return result;
}

void sub_1AD7EAB94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<float,std::vector<int>>>::__emplace_back_slow_path<float &,std::vector<int>&>(uint64_t *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_DWORD *)v13 = *a2;
  *((_QWORD *)v13 + 2) = 0;
  *((_QWORD *)v13 + 3) = 0;
  *((_QWORD *)v13 + 1) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v13 + 1, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  v17 += 32;
  std::vector<std::pair<float,std::vector<int>>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1AD7EAC88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<float,std::vector<int>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<float,std::vector<int>>>,std::reverse_iterator<std::pair<float,std::vector<int>>*>,std::reverse_iterator<std::pair<float,std::vector<int>>*>,std::reverse_iterator<std::pair<float,std::vector<int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<float,std::vector<int>>>,std::reverse_iterator<std::pair<float,std::vector<int>>*>,std::reverse_iterator<std::pair<float,std::vector<int>>*>,std::reverse_iterator<std::pair<float,std::vector<int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_DWORD *)(a3 - 32);
      a3 -= 32;
      *(_DWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<float,std::vector<int>>>,std::reverse_iterator<std::pair<float,std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<float,std::vector<int>>>,std::reverse_iterator<std::pair<float,std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::vector<std::pair<float,std::vector<int>>>::__init_with_size[abi:ne180100]<std::pair<float,std::vector<int>>*,std::pair<float,std::vector<int>>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<float,std::vector<int>>>,std::pair<float,std::vector<int>>*,std::pair<float,std::vector<int>>*,std::pair<float,std::vector<int>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1AD7EAE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<float,std::vector<int>>>,std::pair<float,std::vector<int>>*,std::pair<float,std::vector<int>>*,std::pair<float,std::vector<int>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_DWORD *)v4 = *(_DWORD *)v6;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 8) = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v4 + 8), *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 2);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<float,std::vector<int>>>,std::pair<float,std::vector<int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1AD7EAF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<float,std::vector<int>>>,std::pair<float,std::vector<int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<float,std::vector<int>>>,std::pair<float,std::vector<int>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::vector<std::pair<float,std::vector<int>>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *std::vector<std::pair<float,std::vector<int>>>::__construct_one_at_end[abi:ne180100]<std::pair<float,std::vector<int>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)v3 = *(_DWORD *)a2;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 8) = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v3 + 8), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 32;
  return result;
}

void sub_1AD7EAFE4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<float,std::vector<int>>>::__push_back_slow_path<std::pair<float,std::vector<int>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[32 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[32 * v9];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 1) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v11 + 1, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v15 += 32;
  std::vector<std::pair<float,std::vector<int>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1AD7EB0D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 24 * a3;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, a2, (uint64_t)a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_1AD7EB14C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::CEDecoder,std::allocator<kaldi::quasar::CEDecoder>,std::string &,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x1F8uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::CEDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<kaldi::quasar::CEDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD7EB1A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::CEDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<kaldi::quasar::CEDecoder>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D422C0;
  a1[1] = 0;
  kaldi::quasar::CEDecoder::CEDecoder(a1 + 3);
  return a1;
}

void sub_1AD7EB1F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D422C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D422C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEDecoder>::__on_zero_shared(uint64_t a1)
{
  kaldi::quasar::CEDecoder::~CEDecoder((kaldi::quasar::CEDecoder *)(a1 + 24));
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN3fst11SymbolTableENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x28uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN3fst11SymbolTableENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD7EB28C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN3fst11SymbolTableENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D40EA0;
  a1[1] = 0;
  fst::SymbolTable::SymbolTable((fst::SymbolTable *)(a1 + 3));
  return a1;
}

void sub_1AD7EB2D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::SymbolTable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40EA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::SymbolTable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40EA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::SymbolTable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::QsrTextSymbolTable,std::allocator<quasar::QsrTextSymbolTable>,std::shared_ptr<fst::SymbolTable>,quasar::TextEncoding,void>@<X0>(uint64_t *a1@<X1>, int *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0xA8uLL);
  result = std::__shared_ptr_emplace<quasar::QsrTextSymbolTable>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::SymbolTable>,quasar::TextEncoding,std::allocator<quasar::QsrTextSymbolTable>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1AD7EB390(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::QsrTextSymbolTable>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::SymbolTable>,quasar::TextEncoding,std::allocator<quasar::QsrTextSymbolTable>,0>(_QWORD *a1, uint64_t *a2, int *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E5D43328;
  a1[1] = 0;
  std::allocator<quasar::QsrTextSymbolTable>::construct[abi:ne180100]<quasar::QsrTextSymbolTable,std::shared_ptr<fst::SymbolTable>,quasar::TextEncoding>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1AD7EB3F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::QsrTextSymbolTable>::construct[abi:ne180100]<quasar::QsrTextSymbolTable,std::shared_ptr<fst::SymbolTable>,quasar::TextEncoding>(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  int v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v4 = *a3;
  v5 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = *a4;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 96) = v4;
  *(_QWORD *)(a2 + 104) = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_DWORD *)(a2 + 112) = v6;
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 120) = 0;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *(_DWORD *)(a2 + 112) = v6;
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 120) = 0;
  }
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x28uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEEC2B8ne180100IJESC_Li0EEESC_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD7EB4D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEEC2B8ne180100IJESC_Li0EEESC_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41370;
  a1[1] = 0;
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(a1 + 3);
  return a1;
}

void sub_1AD7EB524(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41370;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41370;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi_perform(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  unsigned __int8 **v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  void *v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  unint64_t v18;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(unsigned __int8 ***)(a1 + 16);
    if (v7)
    {
      v8 = (unint64_t)v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v12 = *v7;
      if (*v7)
      {
        v18 = v9.u32[0];
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v10 > 1)
          {
            if (v13 >= a2)
              v13 %= a2;
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == v8)
          {
            v7 = (unsigned __int8 **)v12;
          }
          else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
          {
            v14 = *(unsigned __int8 **)v12;
            if (*(_QWORD *)v12)
            {
              v15 = v12;
              while (1)
              {
                v16 = std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, v12 + 16, v14 + 16);
                v17 = *(unsigned __int8 **)v15;
                if (!v16)
                  break;
                v14 = *(unsigned __int8 **)v17;
                v15 = *(unsigned __int8 **)v15;
                if (!*(_QWORD *)v17)
                  goto LABEL_32;
              }
              v14 = *(unsigned __int8 **)v15;
              v17 = v15;
LABEL_32:
              v10 = v18;
            }
            else
            {
              v17 = v12;
            }
            *v7 = v14;
            *(_QWORD *)v17 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v13) = v12;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
            v7 = (unsigned __int8 **)v12;
            v8 = v13;
          }
          v12 = *v7;
        }
        while (*v7);
      }
    }
  }
  else
  {
    v11 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v11)
      operator delete(v11);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

unint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node<std::string const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  char *v8;
  _OWORD *v9;
  unint64_t result;

  v6 = a1 + 16;
  v7 = (char *)operator new(0x28uLL);
  v8 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 16) = 0;
  v9 = v7 + 16;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v7 + 16), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *v9 = *(_OWORD *)a2;
    *((_QWORD *)v7 + 4) = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)v9);
  *((_QWORD *)v8 + 1) = result;
  return result;
}

void sub_1AD7EB9BC(_Unwind_Exception *a1)
{
  void **v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

void fst::Factor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,int>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int *v6;
  int *v7;
  int v9;
  int *v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  std::vector<char>::pointer begin;
  char *v18;
  int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  float32x2_t *v27;
  __int32 v28;
  unint64_t i;
  float32x2_t *v30;
  unsigned int v31;
  std::vector<unsigned int>::pointer end;
  unsigned int *v33;
  std::vector<unsigned int>::pointer v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  unint64_t v38;
  char *v39;
  unsigned int *v40;
  unsigned int v41;
  std::vector<int>::pointer v42;
  int v43;
  int v44;
  __n128 v45;
  uint64_t v46;
  int v47;
  uint64_t **j;
  char *v49;
  uint64_t *v50;
  unint64_t v51;
  std::vector<int>::pointer v52;
  uint64_t v53;
  uint64_t v54[3];
  _DWORD *v55;
  uint64_t v56;
  float32x2_t v57;
  float32x2_t v58;
  int v59;
  void *__p;
  char *v61;
  unint64_t v62;
  _DWORD *v63;
  unint64_t v64;
  std::vector<unsigned int> v65;
  __int128 v66;
  __int128 v67;
  int v68;
  std::vector<int> v69;
  char *v70;
  std::vector<char> v71;
  char **v72;
  int *v73;
  int *v74;
  uint64_t v75;
  float v76;
  int v77;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) & 0x80000000) != 0)
    return;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v72 = (char **)&v73;
  fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DfsOrderVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a1, (uint64_t *)&v72, 0);
  v6 = v73;
  v7 = v73 + 1;
  if (v73 != v74 && v7 != v74)
  {
    v9 = *v73;
    v10 = v73 + 1;
    do
    {
      v12 = *v10++;
      v11 = v12;
      v13 = v9 < v12;
      if (v9 <= v12)
        v9 = v11;
      if (v13)
        v6 = v7;
      v7 = v10;
    }
    while (v10 != v74);
  }
  v14 = *v6;
  memset(&v71, 0, sizeof(v71));
  fst::GetStateProperties<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1, v14, &v71);
  v15 = v14 + 1;
  std::vector<BOOL>::vector(&v70, v15);
  if ((v14 & 0x80000000) == 0)
  {
    v16 = 0;
    begin = v71.__begin_;
    v18 = v70;
    do
    {
      v19 = begin[v16];
      v20 = 1 << v16;
      v21 = &v18[8 * (v16 >> 6)];
      if (v19 == 20 || v19 == 148)
        v22 = *(_QWORD *)v21 | v20;
      else
        v22 = *(_QWORD *)v21 & ~v20;
      *(_QWORD *)v21 = v22;
      ++v16;
    }
    while (v15 != v16);
  }
  std::vector<int>::vector(&v69, v15, &fst::kNoStateId);
  v66 = 0u;
  v67 = 0u;
  v68 = 1065353216;
  __p = 0;
  v61 = 0;
  v62 = 0;
  v54[0] = (uint64_t)&__p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>((uint64_t)&v66, (int **)&__p, (uint64_t)&std::piecewise_construct, v54)+ 10) = 0;
  if (__p)
  {
    v61 = (char *)__p;
    operator delete(__p);
  }
  v50 = a3;
  memset(&v65, 0, sizeof(v65));
  v23 = (char *)v73;
  if (v74 == v73)
  {
    v25 = 1;
    goto LABEL_83;
  }
  v24 = 0;
  v25 = 1;
  do
  {
    v26 = *(int *)&v23[4 * v24];
    if (((*(_QWORD *)&v70[(v26 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v26) & 1) != 0)
      goto LABEL_79;
    v51 = v24;
    v52 = v69.__begin_;
    if (v69.__begin_[v26] == -1)
      v52[v26] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
    v64 = 0;
    (*(void (**)(uint64_t, unint64_t, void **))(*(_QWORD *)a1 + 136))(a1, v26, &__p);
    while (1)
    {
      if (!__p)
      {
        if (v64 >= v62)
          goto LABEL_74;
LABEL_32:
        v27 = (float32x2_t *)&v61[20 * v64];
        goto LABEL_33;
      }
      if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
        break;
      if (!__p)
        goto LABEL_32;
      v27 = (float32x2_t *)(*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
LABEL_33:
      v57 = *v27;
      v58 = v27[1];
      v28 = v27[2].i32[0];
      v59 = v28;
      if (v57.i32[0])
      {
        std::vector<int>::resize(&v65, 1uLL);
        *v65.__begin_ = v57.i32[0];
        v28 = v59;
      }
      else
      {
        v65.__end_ = v65.__begin_;
      }
      for (i = v28; ((*(_QWORD *)&v70[(i >> 3) & 0x1FFFFFFFFFFFFFF8] >> i) & 1) != 0; i = v59)
      {
        v56 = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
        if (v54[0])
          v30 = (float32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v54[0] + 32))(v54[0]);
        else
          v30 = (float32x2_t *)(v54[1] + 20 * v56);
        v58 = vadd_f32(v58, v30[1]);
        v31 = v30->i32[0];
        if (v30->i32[0])
        {
          end = v65.__end_;
          if (v65.__end_ >= v65.__end_cap_.__value_)
          {
            v34 = v65.__begin_;
            v35 = v65.__end_ - v65.__begin_;
            v36 = v35 + 1;
            if ((unint64_t)(v35 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v37 = (char *)v65.__end_cap_.__value_ - (char *)v65.__begin_;
            if (((char *)v65.__end_cap_.__value_ - (char *)v65.__begin_) >> 1 > v36)
              v36 = v37 >> 1;
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
              v38 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v38 = v36;
            if (v38)
            {
              v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v65.__end_cap_, v38);
              v34 = v65.__begin_;
              end = v65.__end_;
              v31 = v30->i32[0];
            }
            else
            {
              v39 = 0;
            }
            v40 = (unsigned int *)&v39[4 * v35];
            *v40 = v31;
            v33 = v40 + 1;
            while (end != v34)
            {
              v41 = *--end;
              *--v40 = v41;
            }
            v65.__begin_ = v40;
            v65.__end_ = v33;
            v65.__end_cap_.__value_ = (unsigned int *)&v39[4 * v38];
            if (v34)
              operator delete(v34);
          }
          else
          {
            *v65.__end_ = v31;
            v33 = end + 1;
          }
          v65.__end_ = v33;
        }
        v59 = v30[2].i32[0];
        if (v54[0])
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v54[0] + 8))(v54[0]);
        }
        else if (v55)
        {
          --*v55;
        }
      }
      v42 = v69.__begin_;
      v43 = v69.__begin_[i];
      if (v43 == -1)
      {
        v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
        v42[i] = v43;
      }
      v59 = v43;
      if (std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::find<std::vector<int>>(&v66, (int **)&v65))
      {
        v54[0] = (uint64_t)&v65;
        v44 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>((uint64_t)&v66, (int **)&v65, (uint64_t)&std::piecewise_construct, v54)+ 10);
      }
      else
      {
        v54[0] = (uint64_t)&v65;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>((uint64_t)&v66, (int **)&v65, (uint64_t)&std::piecewise_construct, v54)+ 10) = v25;
        v44 = v25++;
      }
      v57.i32[0] = v44;
      (*(void (**)(uint64_t, _QWORD, float32x2_t *))(*(_QWORD *)a2 + 208))(a2, v52[v26], &v57);
      if (__p)
        (*(void (**)(void *))(*(_QWORD *)__p + 40))(__p);
      else
        ++v64;
    }
    if (__p)
    {
      (*(void (**)(void))(*(_QWORD *)__p + 8))();
      goto LABEL_76;
    }
LABEL_74:
    if (v63)
      --*v63;
LABEL_76:
    (*(void (**)(void **__return_ptr, uint64_t, unint64_t))(*(_QWORD *)a1 + 32))(&__p, a1, v26);
    v57.i32[0] = HIDWORD(__p);
    LODWORD(v54[0]) = (_DWORD)__p;
    v77 = 2139095040;
    v76 = INFINITY;
    v45.n128_u32[0] = __p;
    if (*(float *)&__p == INFINITY && (v45.n128_u32[0] = v57.i32[0], v57.f32[0] == v76))
    {
      v24 = v51;
    }
    else
    {
      v46 = v52[v26];
      (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t, __n128))(*(_QWORD *)a1 + 32))(&v53, a1, v26, v45);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 184))(a2, v46, &v53);
      v24 = v51;
    }
LABEL_79:
    ++v24;
    v23 = (char *)v73;
  }
  while (v24 < v74 - v73);
LABEL_83:
  v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 176))(a2, v69.__begin_[v47]);
  std::vector<std::vector<int>>::resize(a3, v25);
  for (j = (uint64_t **)v67; j; j = (uint64_t **)*j)
  {
    v49 = (char *)(*v50 + 24 * *((int *)j + 10));
    if (v49 != (char *)(j + 2))
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v49, (char *)j[2], (uint64_t)j[3], ((char *)j[3] - (char *)j[2]) >> 2);
  }
  if (v65.__begin_)
  {
    v65.__end_ = v65.__begin_;
    operator delete(v65.__begin_);
  }
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table((uint64_t)&v66);
  if (v69.__begin_)
  {
    v69.__end_ = v69.__begin_;
    operator delete(v69.__begin_);
  }
  if (v70)
    operator delete(v70);
  if (v71.__begin_)
  {
    v71.__end_ = v71.__begin_;
    operator delete(v71.__begin_);
  }
  if (v73)
  {
    v74 = v73;
    operator delete(v73);
  }
}

void sub_1AD7EC0B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36)
{
  uint64_t v36;
  void *v38;
  void *v39;
  void *v40;

  if (__p)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::~__hash_table((uint64_t)&a29);
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  v38 = *(void **)(v36 - 184);
  if (v38)
    operator delete(v38);
  v39 = *(void **)(v36 - 160);
  if (v39)
  {
    *(_QWORD *)(v36 - 152) = v39;
    operator delete(v39);
  }
  v40 = *(void **)(v36 - 128);
  if (v40)
  {
    *(_QWORD *)(v36 - 120) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(a1);
}

BOOL fst::TopSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1)
{
  uint64_t v2;
  int v3;
  _QWORD v5[3];
  unsigned __int8 v6;
  void *__p;
  void *v8;
  uint64_t v9;

  __p = 0;
  v8 = 0;
  v9 = 0;
  v6 = 0;
  v5[0] = &__p;
  v5[1] = &v6;
  fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(a1, (uint64_t)v5, 0);
  if (v6)
  {
    fst::StateSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1, &__p);
    v2 = 0x6800000000;
  }
  else
  {
    v2 = 0x8400000000;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v2, v2);
  v3 = v6;
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  return v3 != 0;
}

void sub_1AD7EC264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::GetStateProperties<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1, int a2, std::vector<char> *a3)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::vector<char>::pointer begin;
  _DWORD *v11;
  char v12;
  uint64_t v13;
  std::vector<char>::pointer v14;
  char v15;
  std::vector<char>::value_type __x[8];
  uint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  float v21;
  int v22;
  float v23;
  int v24;

  a3->__end_ = a3->__begin_;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((result & 0x80000000) != 0)
    return result;
  v7 = a2 + 1;
  __x[0] = 0;
  v8 = a3->__end_ - a3->__begin_;
  if (v7 <= v8)
  {
    if (v7 < v8)
      a3->__end_ = &a3->__begin_[v7];
  }
  else
  {
    std::vector<char>::__append(a3, v7 - v8, __x);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  a3->__begin_[(int)result] |= 2u;
  if (a2 < 0)
    return result;
  v9 = 0;
  do
  {
    begin = a3->__begin_;
    v20 = 0;
    (*(void (**)(uint64_t, uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 136))(a1, v9, __x);
    while (1)
    {
      if (!*(_QWORD *)__x)
      {
        if (v20 >= v18)
          goto LABEL_28;
        goto LABEL_14;
      }
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x))
        break;
      if (*(_QWORD *)__x)
      {
        v11 = (_DWORD *)(*(uint64_t (**)(void))(**(_QWORD **)__x + 32))();
        goto LABEL_15;
      }
LABEL_14:
      v11 = (_DWORD *)(v17 + 20 * v20);
LABEL_15:
      v12 = begin[v9];
      if (*v11)
      {
        v12 |= 0x80u;
        begin[v9] = v12;
      }
      if (v11[1])
      {
        v12 |= 0x40u;
        begin[v9] = v12;
      }
      v13 = (int)v11[4];
      v14 = a3->__begin_;
      if ((v12 & 0x10) != 0)
      {
        v12 |= 0x20u;
        begin[v9] = v12;
      }
      begin[v9] = v12 | 0x10;
      v15 = v14[v13];
      if ((v15 & 4) != 0)
      {
        v15 |= 8u;
        v14[v13] = v15;
      }
      v14[v13] = v15 | 4;
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 40))(*(_QWORD *)__x);
      else
        ++v20;
    }
    if (*(_QWORD *)__x)
    {
      (*(void (**)(void))(**(_QWORD **)__x + 8))();
      goto LABEL_30;
    }
LABEL_28:
    if (v19)
      --*v19;
LABEL_30:
    result = (uint64_t)(*(_QWORD *(**)(std::vector<char>::value_type *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(__x, a1, v9);
    v24 = *(_DWORD *)__x;
    v23 = *(float *)&__x[4];
    v22 = 2139095040;
    v21 = INFINITY;
    if (*(float *)__x != INFINITY || v23 != v21)
      begin[v9] |= 1u;
    ++v9;
  }
  while (v9 != v7);
  return result;
}

void sub_1AD7EC4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  else if (a13)
  {
    --*a13;
  }
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::DfsOrderVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v31;
  std::vector<char>::pointer end;
  char *v33;
  uint64_t v34;
  std::vector<char>::pointer v35;
  int64_t v36;
  int64_t v37;
  unint64_t v38;
  size_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  std::vector<char>::value_type v48[8];
  std::vector<char>::value_type __x[8];
  int v50;
  int v51;
  void *v52;
  _QWORD v53[6];
  _QWORD *v54;
  _OWORD v55[2];
  __int128 v56;
  std::vector<char> v57;

  v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v47 == -1)
    return;
  memset(&v57, 0, sizeof(v57));
  v56 = 0u;
  memset(v55, 0, sizeof(v55));
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MemoryPool(&v52, 64);
  v46 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v46)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v6 = (v47 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v57.__end_ - v57.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v57.__end_ - v57.__begin_))
      v57.__end_ = &v57.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v57, (int)v6 - (unint64_t)(v57.__end_ - v57.__begin_), __x);
  }
  v51 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v47 >= (int)v6)
    goto LABEL_95;
  v45 = a2;
  v7 = v47;
  do
  {
    v57.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v54;
    if (v54)
    {
      v54 = (_QWORD *)v54[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v53, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v48 = v8;
    std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::push_back(v55, v48);
    inited = fst::DfsOrderVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, v7);
LABEL_15:
    v10 = inited;
    while (*((_QWORD *)&v56 + 1))
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v55[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v56 + 1) + v56 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v56 + 1) + v56 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v57.__end_ - v57.__begin_;
      if (v57.__end_ - v57.__begin_ <= v12)
      {
        v6 = (v12 + 1);
        v48[0] = 0;
        if ((int)v6 <= v13)
        {
          if ((int)v6 < v13)
            v57.__end_ = &v57.__begin_[(int)v6];
        }
        else
        {
          std::vector<char>::__append(&v57, (int)v6 - v13, v48);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_32;
      v14 = v11[1];
      if (v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
          goto LABEL_32;
        v15 = v11[1];
        if (v15)
        {
          v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
          goto LABEL_29;
        }
LABEL_28:
        v16 = v11[2] + 20 * v11[5];
LABEL_29:
        v17 = *(int *)(v16 + 16);
        begin = v57.__begin_;
        v19 = v57.__end_ - v57.__begin_;
        if (v57.__end_ - v57.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v48[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v57.__end_ = &v57.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v57, (int)v6 - v19, v48);
            v17 = *(int *)(v16 + 16);
            begin = v57.__begin_;
          }
        }
        v25 = begin[v17];
        if (v25 != 1 && v25 != 2)
        {
          begin[v17] = 1;
          v27 = (uint64_t)v54;
          if (v54)
          {
            v54 = (_QWORD *)v54[6];
          }
          else
          {
            v27 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v53, 1);
            *(_QWORD *)(v27 + 48) = 0;
          }
          *(_DWORD *)v27 = *(_DWORD *)(v16 + 16);
          *(_QWORD *)(v27 + 40) = 0;
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
          *(_QWORD *)v48 = v27;
          std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::push_back(v55, v48);
          inited = fst::DfsOrderVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, *(_DWORD *)(v16 + 16));
          goto LABEL_15;
        }
        v26 = v11[1];
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
        else
          ++v11[5];
        v10 = 1;
      }
      else
      {
        if (v11[5] < v11[3])
          goto LABEL_28;
LABEL_32:
        v57.__begin_[v12] = 2;
        v20 = v11[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v11[4];
          if (v21)
            --*v21;
        }
        v11[6] = v54;
        v54 = v11;
        --*((_QWORD *)&v56 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v55, 1);
        if (!*((_QWORD *)&v56 + 1))
          break;
        v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v55[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v56 + 1) + v56 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v56 + 1) + v56 - 1) & 0x1FF));
        v23 = *(_QWORD *)(v22 + 8);
        if (v23 && ((*(void (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23), (v24 = *(_QWORD *)(v22 + 8)) != 0))
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
        else
          ++*(_QWORD *)(v22 + 40);
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v47)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v28 = &v57.__begin_[(int)v7];
      v29 = (int)v6 - (uint64_t)(int)v7;
      while (*v28++)
      {
        v7 = (v7 + 1);
        if (!--v29)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v46 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_64:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_70;
      }
    }
    else if (v51 >= v50)
    {
      continue;
    }
    v31 = v51;
LABEL_70:
    if (v31 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v51;
      goto LABEL_64;
    }
    end = v57.__end_;
    if (v57.__end_ >= v57.__end_cap_.__value_)
    {
      v34 = a3;
      v35 = v57.__begin_;
      v36 = v57.__end_ - v57.__begin_;
      v37 = v57.__end_ - v57.__begin_ + 1;
      if (v37 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v38 = v57.__end_cap_.__value_ - v57.__begin_;
      if (2 * (v57.__end_cap_.__value_ - v57.__begin_) > (unint64_t)v37)
        v37 = 2 * v38;
      if (v38 >= 0x3FFFFFFFFFFFFFFFLL)
        v39 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v39 = v37;
      if (v39)
        v40 = (char *)operator new(v39);
      else
        v40 = 0;
      v41 = &v40[v36];
      v42 = &v40[v36];
      *v42 = 0;
      v33 = v42 + 1;
      if (end != v35)
      {
        v43 = &end[~(unint64_t)v35];
        do
        {
          v44 = *--end;
          (v43--)[(_QWORD)v40] = v44;
        }
        while (end != v35);
        end = v57.__begin_;
        v41 = v40;
      }
      v57.__begin_ = v41;
      v57.__end_ = v33;
      v57.__end_cap_.__value_ = &v40[v39];
      a3 = v34;
      if (end)
        operator delete(end);
      a2 = v45;
    }
    else
    {
      *v57.__end_ = 0;
      v33 = end + 1;
    }
    v57.__end_ = v33;
    v6 = (v6 + 1);
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_95:
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v52 = &unk_1E5D198A0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::~MemoryArena(v53);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v52);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v55);
  if (v57.__begin_)
  {
    v57.__end_ = v57.__begin_;
    operator delete(v57.__begin_);
  }
}

void sub_1AD7ECB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D198A0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::DfsOrderVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(uint64_t *a1, int a2)
{
  uint64_t v3;
  _DWORD *v4;
  _QWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;

  v3 = *a1;
  v4 = *(_DWORD **)(*a1 + 8);
  v5 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v4 >= *v5)
  {
    v7 = *(_DWORD **)v3;
    v8 = ((uint64_t)v4 - *(_QWORD *)v3) >> 2;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = *v5 - (_QWORD)v7;
    if (v10 >> 1 > v9)
      v9 = v10 >> 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v5, v11);
      v7 = *(_DWORD **)v3;
      v4 = *(_DWORD **)(v3 + 8);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[4 * v8];
    v14 = &v12[4 * v11];
    *(_DWORD *)v13 = a2;
    v6 = v13 + 4;
    while (v4 != v7)
    {
      v15 = *--v4;
      *((_DWORD *)v13 - 1) = v15;
      v13 -= 4;
    }
    *(_QWORD *)v3 = v13;
    *(_QWORD *)(v3 + 8) = v6;
    *(_QWORD *)(v3 + 16) = v14;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *v4 = a2;
    v6 = v4 + 1;
  }
  *(_QWORD *)(v3 + 8) = v6;
  return 1;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(uint64_t a1, int **a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  int *v6;
  int *v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  size_t v16;
  unint64_t v17;
  const void *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t *v28;
  _QWORD *v29;

  v7 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v9 = *a2;
    do
    {
      v10 = *v9++;
      v8 = v10 + 7853 * v8;
    }
    while (v9 != v6);
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (!v11)
    goto LABEL_26;
  v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  v13 = v12.u32[0];
  if (v12.u32[0] > 1uLL)
  {
    v4 = v8;
    if (v8 >= v11)
      v4 = v8 % v11;
  }
  else
  {
    v4 = (v11 - 1) & v8;
  }
  v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (!v14)
    goto LABEL_26;
  v15 = (_QWORD *)*v14;
  if (!*v14)
    goto LABEL_26;
  v28 = a4;
  v16 = (char *)v6 - (char *)v7;
  do
  {
    v17 = v15[1];
    if (v17 == v8)
    {
      v18 = (const void *)v15[2];
      if (v15[3] - (_QWORD)v18 == v16 && !memcmp(v18, v7, v16))
        return v15;
      goto LABEL_24;
    }
    if (v13 > 1)
    {
      if (v17 >= v11)
        v17 %= v11;
    }
    else
    {
      v17 &= v11 - 1;
    }
    if (v17 != v4)
      break;
LABEL_24:
    v15 = (_QWORD *)*v15;
  }
  while (v15);
  a4 = v28;
LABEL_26:
  std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(a1, v8, a4, (uint64_t)&v29);
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v8 >= v11)
        v4 = v8 % v11;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v11 - 1) & v8;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *v29 = *v25;
    *v25 = v29;
  }
  else
  {
    *v29 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v29;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v29)
    {
      v26 = *(_QWORD *)(*v29 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11)
          v26 %= v11;
      }
      else
      {
        v26 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v29;
    }
  }
  v15 = v29;
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_1AD7ECF34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,int>,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = *a3;
  v8[3] = 0;
  v8[4] = 0;
  v8[2] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8 + 2, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 2);
  *((_DWORD *)v8 + 10) = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1AD7ECFD8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::vector<int>,int>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<std::vector<int>,int>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,int>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,int>>>::find<std::vector<int>>(_QWORD *a1, int **a2)
{
  int *v2;
  int *v3;
  unint64_t v4;
  int *v5;
  uint64_t v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;
  unint64_t v14;
  const void *v15;

  v3 = *a2;
  v2 = a2[1];
  if (*a2 == v2)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = *a2;
    do
    {
      v6 = *v5++;
      v4 = v6 + 7853 * v4;
    }
    while (v5 != v2);
  }
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v4;
    if (v4 >= *(_QWORD *)&v7)
      v10 = v4 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v4;
  }
  v11 = *(_QWORD **)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = (_QWORD *)*v11;
  if (*v11)
  {
    v13 = (char *)v2 - (char *)v3;
    do
    {
      v14 = v12[1];
      if (v4 == v14)
      {
        v15 = (const void *)v12[2];
        if (v12[3] - (_QWORD)v15 == v13 && !memcmp(v15, v3, v13))
          return v12;
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(_QWORD *)&v7)
            v14 %= *(_QWORD *)&v7;
        }
        else
        {
          v14 &= *(_QWORD *)&v7 - 1;
        }
        if (v14 != v10)
          return 0;
      }
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  return v12;
}

_QWORD *fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFstImpl(v4, a2);
  *a1 = &unk_1E5D28830;
  a1[1] = v4;
  return a1;
}

void sub_1AD7ED17C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::InvertMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  int32x2_t *v5;
  __int32 v6;
  int32x2_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  __int32 v11;
  uint64_t v12;

  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 280))(a1, 0);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 288))(a1, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result != -1)
  {
    v3 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
    if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) >= 1)
    {
      v4 = 0;
      do
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 296))(a1, v4, &v12);
        while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12))
        {
          v5 = (int32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
          v6 = v5[2].i32[0];
          v7 = v5[1];
          v10[0] = vrev64_s32(*v5);
          v10[1] = v7;
          v11 = v6;
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 88))(v12, v10);
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
        }
        if (v12)
          (*(void (**)(void))(*(_QWORD *)v12 + 8))();
        (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(v10, a1, v4);
        v9 = v10[0];
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 184))(a1, v4, &v9);
        v4 = (v4 + 1);
      }
      while ((int)v4 < (*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1));
    }
    v8 = fst::InvertProperties(v3);
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v8, 0x3FFFFFFF0007);
  }
  return result;
}

void sub_1AD7ED348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

void fst::StateSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t *v8;
  void **p_p;
  int32x2_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  fst *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  _DWORD *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  int v44;
  int v45;
  void *__p;
  void *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  void *v52[4];

  v4 = a2[1] - *a2;
  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1) != v4 >> 2)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(&v37, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(&v37, "ERROR");
    v31 = fst::LogMessage::LogMessage((fst *)v52, (uint64_t)&v37);
    v32 = (_QWORD *)fst::cerr(v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"StateSort: bad order vector size: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)v52);
    if (SHIBYTE(v39) < 0)
      operator delete(v37);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 4, 4);
    return;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) == -1)
    return;
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0xF3FFFFF0007, 0);
  v6 = (uint64_t)(a2[1] - *a2) >> 2;
  LOBYTE(v37) = 0;
  std::vector<BOOL>::vector(v52, v6, (unsigned __int8 *)&v37);
  v49 = 0;
  v50 = 0;
  v51 = 0;
  __p = 0;
  v47 = 0;
  v48 = 0;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 176))(a1, *(unsigned int *)(*a2 + 4 * v7));
  v33 = v5;
  v45 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v43);
  v8 = (uint64_t *)&v49;
  p_p = &__p;
  v10 = vdup_n_s32(0x7F800000u);
  while (1)
  {
    if (!v43)
    {
      if (v45 >= v44)
        goto LABEL_62;
      goto LABEL_9;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43))
      break;
    if (v43)
    {
      v11 = (*(uint64_t (**)(void))(*(_QWORD *)v43 + 24))();
      goto LABEL_10;
    }
LABEL_9:
    v11 = v45;
LABEL_10:
    v12 = v11;
    v13 = (unint64_t)v11 >> 6;
    v14 = 1 << v11;
    if (((1 << v11) & *((_QWORD *)v52[0] + v13)) == 0)
    {
      (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(&v42, a1, v11);
      v8[1] = *v8;
      v41 = 0;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 136))(a1, v12, &v37);
      while (1)
      {
        if (v37)
        {
          if ((*(unsigned int (**)(void *))(*(_QWORD *)v37 + 24))(v37))
          {
            if (v37)
            {
              (*(void (**)(void))(*(_QWORD *)v37 + 8))();
            }
            else
            {
LABEL_26:
              if (v40)
                --*v40;
            }
            v18 = v52[0];
            if ((v14 & *((_QWORD *)v52[0] + v13)) != 0)
            {
              v19 = v8;
              goto LABEL_30;
            }
            v20 = (void *)v10;
LABEL_35:
            v34 = v14;
            v35 = v13;
            v19 = (uint64_t *)p_p;
            p_p = (void **)v8;
            v21 = *(unsigned int *)(*a2 + 4 * v12);
            v12 = (int)v21;
            v13 = (unint64_t)(int)v21 >> 6;
            v22 = 1 << v21;
            if (((1 << v21) & v18[v13]) != 0)
              goto LABEL_36;
            (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v37, a1, v21);
            v20 = v37;
            v19[1] = *v19;
            v41 = 0;
            (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 136))(a1, v21, &v37);
LABEL_42:
            if (v37)
            {
              if ((*(unsigned int (**)(void *))(*(_QWORD *)v37 + 24))(v37))
              {
                if (v37)
                {
                  (*(void (**)(void))(*(_QWORD *)v37 + 8))();
                  goto LABEL_36;
                }
LABEL_56:
                if (v40)
                  --*v40;
LABEL_36:
                v36 = v42;
                (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 184))(a1, v21, &v36);
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, v21);
                v23 = (char *)*p_p;
                if (p_p[1] != *p_p)
                {
                  v24 = 0;
                  v25 = 0;
                  do
                  {
                    v26 = &v23[v24];
                    v37 = *(void **)v26;
                    v38 = *((_QWORD *)v26 + 1);
                    v27 = *((int *)v26 + 4);
                    LODWORD(v39) = v27;
                    LODWORD(v39) = *(_DWORD *)(*a2 + 4 * v27);
                    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 208))(a1, v21, &v37);
                    ++v25;
                    v23 = (char *)*p_p;
                    v24 += 20;
                  }
                  while (v25 < 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 2));
                }
                v18 = v52[0];
                *((_QWORD *)v52[0] + v35) |= v34;
                v42 = v20;
                v14 = 1 << v21;
                v8 = v19;
                if ((v22 & v18[v13]) != 0)
                {
LABEL_30:
                  v8 = v19;
                  break;
                }
                goto LABEL_35;
              }
              if (v37)
              {
                v28 = (*(uint64_t (**)(void))(*(_QWORD *)v37 + 32))();
LABEL_48:
                v29 = v19[1];
                if (v29 >= v19[2])
                {
                  v30 = std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const&>(v19, v28);
                }
                else
                {
                  *(_QWORD *)v29 = *(_QWORD *)v28;
                  *(_QWORD *)(v29 + 8) = *(_QWORD *)(v28 + 8);
                  *(_DWORD *)(v29 + 16) = *(_DWORD *)(v28 + 16);
                  v30 = v29 + 20;
                }
                v19[1] = v30;
                if (v37)
                  (*(void (**)(void *))(*(_QWORD *)v37 + 40))(v37);
                else
                  ++v41;
                goto LABEL_42;
              }
            }
            else if (v41 >= v39)
            {
              goto LABEL_56;
            }
            v28 = v38 + 20 * v41;
            goto LABEL_48;
          }
          if (v37)
          {
            v15 = (*(uint64_t (**)(void))(*(_QWORD *)v37 + 32))();
            goto LABEL_18;
          }
        }
        else if (v41 >= v39)
        {
          goto LABEL_26;
        }
        v15 = v38 + 20 * v41;
LABEL_18:
        v16 = v8[1];
        if (v16 >= v8[2])
        {
          v17 = std::vector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::__push_back_slow_path<fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const&>(v8, v15);
        }
        else
        {
          *(_QWORD *)v16 = *(_QWORD *)v15;
          *(_QWORD *)(v16 + 8) = *(_QWORD *)(v15 + 8);
          *(_DWORD *)(v16 + 16) = *(_DWORD *)(v15 + 16);
          v17 = v16 + 20;
        }
        v8[1] = v17;
        if (v37)
          (*(void (**)(void *))(*(_QWORD *)v37 + 40))(v37);
        else
          ++v41;
      }
    }
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 32))(v43);
    else
      ++v45;
  }
  if (v43)
    (*(void (**)(void))(*(_QWORD *)v43 + 8))();
LABEL_62:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, v33, 0x3FFFFFFF0007);
  if (__p)
  {
    v47 = __p;
    operator delete(__p);
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
  if (v52[0])
    operator delete(v52[0]);
}

void sub_1AD7ED998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  uint64_t v30;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v30 - 128));
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::vector<char>::pointer begin;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v33;
  std::vector<char>::pointer end;
  char *v35;
  std::vector<char>::pointer v36;
  int64_t v37;
  int64_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  char v46;
  uint64_t v47;
  int v48;
  std::vector<char>::value_type v49[8];
  std::vector<char>::value_type __x[8];
  int v51;
  int v52;
  void *v53;
  _QWORD v54[6];
  _QWORD *v55;
  _OWORD v56[2];
  __int128 v57;
  std::vector<char> v58;

  v6 = (_QWORD *)operator new();
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  *(_QWORD *)(a2 + 16) = v6;
  **(_BYTE **)(a2 + 8) = 1;
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v48 == -1)
  {
    fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
    return;
  }
  memset(&v58, 0, sizeof(v58));
  v57 = 0u;
  memset(v56, 0, sizeof(v56));
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MemoryPool(&v53, 64);
  v47 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v47)
    v7 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v7 = (v48 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v7 <= (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v7 < (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
      v58.__end_ = &v58.__begin_[(int)v7];
  }
  else
  {
    std::vector<char>::__append(&v58, (int)v7 - (unint64_t)(v58.__end_ - v58.__begin_), __x);
  }
  v52 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v48 >= (int)v7)
    goto LABEL_102;
  v8 = v48;
  v46 = a3;
  do
  {
    v58.__begin_[(int)v8] = 1;
    v9 = (uint64_t)v55;
    if (v55)
    {
      v55 = (_QWORD *)v55[6];
    }
    else
    {
      v9 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
      *(_QWORD *)(v9 + 48) = 0;
    }
    *(_DWORD *)v9 = v8;
    *(_QWORD *)(v9 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v8, v9 + 8);
    *(_QWORD *)v49 = v9;
    std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::push_back(v56, v49);
    v10 = *((_QWORD *)&v57 + 1);
    if (!*((_QWORD *)&v57 + 1))
    {
      v11 = 1;
      if ((a3 & 1) != 0)
        break;
      goto LABEL_62;
    }
    v11 = 1;
    do
    {
      v12 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                   + (((unint64_t)(v10 + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v10 + v57 - 1) & 0x1FF));
      v13 = *(int *)v12;
      v14 = v58.__end_ - v58.__begin_;
      if (v58.__end_ - v58.__begin_ <= v13)
      {
        v7 = v13 + 1;
        v49[0] = 0;
        if (v13 + 1 <= v14)
        {
          if (v13 + 1 < v14)
            v58.__end_ = &v58.__begin_[v7];
        }
        else
        {
          std::vector<char>::__append(&v58, v13 + 1 - v14, v49);
        }
      }
      if ((v11 & 1) != 0)
      {
        v15 = v12[1];
        if (v15)
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
          {
            v16 = v12[1];
            if (v16)
              v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
            else
LABEL_28:
              v17 = v12[2] + 20 * v12[5];
            v18 = *(int *)(v17 + 16);
            begin = v58.__begin_;
            v20 = v58.__end_ - v58.__begin_;
            if (v58.__end_ - v58.__begin_ <= v18)
            {
              v7 = (v18 + 1);
              v49[0] = 0;
              if ((int)v7 <= v20)
              {
                if ((int)v7 < v20)
                  v58.__end_ = &v58.__begin_[(int)v7];
              }
              else
              {
                std::vector<char>::__append(&v58, (int)v7 - v20, v49);
                v18 = *(int *)(v17 + 16);
                begin = v58.__begin_;
              }
            }
            v26 = begin[v18];
            if (v26 == 1)
            {
              **(_BYTE **)(a2 + 8) = 0;
              v28 = v12[1];
              if (v28)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
                v11 = 0;
              }
              else
              {
                v11 = 0;
                ++v12[5];
              }
            }
            else
            {
              if (v26 == 2)
              {
                v27 = v12[1];
                if (v27)
                  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
                else
                  ++v12[5];
              }
              else
              {
                begin[v18] = 1;
                v29 = (uint64_t)v55;
                if (v55)
                {
                  v55 = (_QWORD *)v55[6];
                }
                else
                {
                  v29 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
                  *(_QWORD *)(v29 + 48) = 0;
                }
                *(_DWORD *)v29 = *(_DWORD *)(v17 + 16);
                *(_QWORD *)(v29 + 40) = 0;
                (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
                *(_QWORD *)v49 = v29;
                std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::push_back(v56, v49);
              }
              v11 = 1;
            }
            goto LABEL_58;
          }
        }
        else if (v12[5] < v12[3])
        {
          goto LABEL_28;
        }
      }
      v58.__begin_[v13] = 2;
      v21 = v12[1];
      if (v21)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
      else
      {
        v22 = (_DWORD *)v12[4];
        if (v22)
          --*v22;
      }
      v12[6] = v55;
      v55 = v12;
      --*((_QWORD *)&v57 + 1);
      std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v56, 1);
      if (*((_QWORD *)&v57 + 1))
      {
        v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v57 + 1) + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v57 + 1) + v57 - 1) & 0x1FF));
        v24 = *(_QWORD *)(v23 + 8);
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
        v25 = *(_QWORD *)(v23 + 8);
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        else
          ++*(_QWORD *)(v23 + 40);
      }
      else
      {
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
      }
LABEL_58:
      v10 = *((_QWORD *)&v57 + 1);
    }
    while (*((_QWORD *)&v57 + 1));
    if ((a3 & 1) != 0)
      break;
LABEL_62:
    if ((_DWORD)v8 == v48)
      v8 = 0;
    else
      v8 = (v8 + 1);
    if ((int)v8 < (int)v7)
    {
      v30 = &v58.__begin_[(int)v8];
      v31 = (int)v7 - (uint64_t)(int)v8;
      while (*v30++)
      {
        v8 = (v8 + 1);
        if (!--v31)
        {
          v8 = v7;
          break;
        }
      }
    }
    if (v47 || (_DWORD)v8 != (_DWORD)v7)
      continue;
LABEL_72:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_78;
      }
    }
    else if (v52 >= v51)
    {
      continue;
    }
    v33 = v52;
LABEL_78:
    if (v33 != (_DWORD)v7)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v52;
      goto LABEL_72;
    }
    end = v58.__end_;
    if (v58.__end_ >= v58.__end_cap_.__value_)
    {
      v36 = v58.__begin_;
      v37 = v58.__end_ - v58.__begin_;
      v38 = v58.__end_ - v58.__begin_ + 1;
      if (v38 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v39 = v58.__end_cap_.__value_ - v58.__begin_;
      if (2 * (v58.__end_cap_.__value_ - v58.__begin_) > (unint64_t)v38)
        v38 = 2 * v39;
      if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
        v40 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
        v41 = (char *)operator new(v40);
      else
        v41 = 0;
      v42 = &v41[v37];
      v43 = &v41[v37];
      *v43 = 0;
      v35 = v43 + 1;
      if (end != v36)
      {
        v44 = &end[~(unint64_t)v36];
        do
        {
          v45 = *--end;
          (v44--)[(_QWORD)v41] = v45;
        }
        while (end != v36);
        end = v58.__begin_;
        v42 = v41;
      }
      v58.__begin_ = v42;
      v58.__end_ = v35;
      v58.__end_cap_.__value_ = &v41[v40];
      if (end)
        operator delete(end);
    }
    else
    {
      *v58.__end_ = 0;
      v35 = end + 1;
    }
    v58.__end_ = v35;
    v7 = (v7 + 1);
    a3 = v46;
  }
  while ((v11 & 1) != 0 && (int)v8 < (int)v7);
LABEL_102:
  fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v53 = &unk_1E5D198A0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::~MemoryArena(v54);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v53);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v56);
  if (v58.__begin_)
  {
    v58.__end_ = v58.__begin_;
    operator delete(v58.__begin_);
  }
}

void sub_1AD7EE158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D198A0;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4;
  _DWORD *v5;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = *a1;
  v5 = *(_DWORD **)(*a1 + 8);
  v6 = (_QWORD *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    v8 = *(_DWORD **)v4;
    v9 = ((uint64_t)v5 - *(_QWORD *)v4) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = *v6 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v6, v12);
      v8 = *(_DWORD **)v4;
      v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v5 != v8)
    {
      v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)v4 = v14;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v5 = *a2;
    v7 = v5 + 1;
  }
  *(_QWORD *)(v4 + 8) = v7;
  return a1;
}

uint64_t std::deque<kaldi::Vector<float>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0xAA];
    v7 = (uint64_t)*v6 + 24 * (v5 % 0xAA);
    v8 = (unint64_t)v2[(a1[5] + v5) / 0xAA] + 24 * ((a1[5] + v5) % 0xAA);
    if (v7 != v8)
    {
      do
      {
        kaldi::Vector<float>::Destroy(v7);
        v7 += 24;
        if (v7 - (_QWORD)*v6 == 4080)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 85;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 170;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<kaldi::Vector<float>>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0xAA)
    a2 = 1;
  if (v2 < 0x154)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 170;
  }
  return v4 ^ 1u;
}

void std::deque<kaldi::Vector<float>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1AD7EE744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_DWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<int const*>,std::__wrap_iter<int const*>,std::back_insert_iterator<std::vector<int>>,0>(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
    std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100](&v6, v3++);
  while (v3 != v4);
  return v4;
}

void std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3>,std::string ()(std::vector<std::pair<float,std::vector<int>>>)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3>,std::string ()(std::vector<std::pair<float,std::vector<int>>>)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E5CFF5F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3>,std::string ()(std::vector<std::pair<float,std::vector<int>>>)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5CFF5F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3>,std::string ()(std::vector<std::pair<float,std::vector<int>>>)>::operator()(uint64_t a1, uint64_t *a2)
{
  return quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3::operator()((uint64_t *)(a1 + 8), a2);
}

uint64_t std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3>,std::string ()(std::vector<std::pair<float,std::vector<int>>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_3>,std::string ()(std::vector<std::pair<float,std::vector<int>>>)>::target_type()
{
}

void std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_5,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_5>,float ()(std::pair<float,std::vector<int>> const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_5,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_5>,float ()(std::pair<float,std::vector<int>> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5CFF6A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_5,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_5>,float ()(std::pair<float,std::vector<int>> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5CFF6A0;
  a2[1] = v2;
  return result;
}

float std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_5,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_5>,float ()(std::pair<float,std::vector<int>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(float *)a2
       / (float)(unint64_t)(((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2)
                                 - ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - **(_QWORD **)(a1 + 8)) >> 2));
}

uint64_t std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_5,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_5>,float ()(std::pair<float,std::vector<int>> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_5,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_5>,float ()(std::pair<float,std::vector<int>> const&)>::target_type()
{
}

void std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4>,void ()(std::vector<int> const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4>,void ()(std::vector<int> const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = &off_1E5CFF648;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4>,void ()(std::vector<int> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E5CFF648;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4>,void ()(std::vector<int> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *__p;
  void *v7;
  uint64_t v8;
  void **v9[3];
  void **v10[3];
  void **v11[3];
  std::vector<std::wstring> v12;
  void ***v13;

  __p = 0;
  v7 = 0;
  v8 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 561))
  {
    quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2::operator()((uint64_t *)(a1 + 32), (int **)&__p, &v12);
    v3 = **(_QWORD **)(a1 + 16);
    v4 = *(_QWORD *)(v3 + 560);
    v5 = *(unsigned int *)(**(_QWORD **)(a1 + 24) + 12);
    memset(v11, 0, sizeof(v11));
    memset(v10, 0, sizeof(v10));
    memset(v9, 0, sizeof(v9));
    (*(void (**)(uint64_t, std::vector<std::wstring> *, uint64_t, uint64_t, _QWORD, _QWORD, void ***, void ***, void ***, _WORD, uint64_t))(*(_QWORD *)v4 + 24))(v4, &v12, v5, 1, 0, 0, v11, v10, v9, 0, v3 + 1136);
    v13 = v9;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
    v9[0] = (void **)v10;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v9);
    v10[0] = (void **)v11;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](v10);
    v11[0] = (void **)&v12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v11);
  }
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_1AD7EEB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v23 - 56) = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 56));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  a19 = &a22;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  a22 = v23 - 80;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4>,void ()(std::vector<int> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4,std::allocator<quasar::AEDBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4>,void ()(std::vector<int> const&)>::target_type()
{
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1AD7EEC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t **std::back_insert_iterator<std::vector<quasar::Token>>::operator=[abi:ne180100](uint64_t **a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = (*a1)[1];
  v5 = *a1;
  v7 = v5[2];
  v6 = (uint64_t)(v5 + 2);
  if (v4 >= v7)
  {
    v8 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token>(v3, a2);
  }
  else
  {
    std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,quasar::Token>(v6, v4, a2);
    v8 = v4 + 224;
  }
  v3[1] = v8;
  return a1;
}

uint64_t TChartInfo::TChartInfo(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)result = 0;
  *(_BYTE *)(result + 424) = 0;
  v3 = a2[3];
  *(_QWORD *)(result + 408) = v3;
  *(_QWORD *)(result + 416) = a3;
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 != 1)
  {
    v5 = result - 8;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 408) + 24) + v4 - 2))
      {
        *(_QWORD *)(v5 + 8 * v4) = 0;
      }
      else
      {
        *(_QWORD *)(v5 + 8 * v4) = a2[7];
        a2 = (_QWORD *)a2[6];
      }
      --v4;
    }
    while (v4 != 1);
  }
  return result;
}

uint64_t TParser::TParser(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  TAllocator *v7;

  *(_QWORD *)a1 = &unk_1E5D173A0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1E5D173C8;
  v6 = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  v7 = (TAllocator *)(a1 + 48);
  TAllocator::TAllocator((TAllocator *)(a1 + 48), 2048);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_BYTE *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  *(_QWORD *)(a1 + 24) = 10;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 16))(v6);
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a3;
  if (*(_QWORD *)(a1 + 48) >= 0x801uLL)
    TAllocator::clear(v7);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  return a1;
}

void sub_1AD7EEE00(_Unwind_Exception *a1)
{
  _QWORD *v1;
  TAllocator *v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v5 = (void *)v1[20];
  if (v5)
  {
    v1[21] = v5;
    operator delete(v5);
  }
  v6 = (void *)v1[17];
  if (v6)
  {
    v1[18] = v6;
    operator delete(v6);
  }
  v7 = (void *)v1[14];
  if (v7)
  {
    v1[15] = v7;
    operator delete(v7);
  }
  v8 = *v3;
  if (*v3)
  {
    v1[12] = v8;
    operator delete(v8);
  }
  TAllocator::clear(v2);
  _Unwind_Resume(a1);
}

void TParser::~TParser(TParser *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 20);
  if (v2)
  {
    *((_QWORD *)this + 21) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 17);
  if (v3)
  {
    *((_QWORD *)this + 18) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 14);
  if (v4)
  {
    *((_QWORD *)this + 15) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 11);
  if (v5)
  {
    *((_QWORD *)this + 12) = v5;
    operator delete(v5);
  }
  TAllocator::clear((TParser *)((char *)this + 48));
}

_QWORD *TParser::getCell(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a1 + 88);
  v7 = a1 + 88;
  if (a3 >= (*(_QWORD *)(a1 + 96) - v6) >> 3)
  {
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 88), 2 * (a3 + 1));
    v10 = 0;
    std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(v7, a3 + 1, &v10);
    goto LABEL_7;
  }
  result = *(_QWORD **)(v6 + 8 * a3);
  if (!result)
  {
LABEL_7:
    result = TAllocator::allocate((TAllocator *)(a1 + 48), 32);
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * a3);
    *result = a2;
    result[1] = 0;
    result[2] = 0;
    result[3] = v9;
    *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * a3) = result;
    return result;
  }
  while (*result != a2)
  {
    result = (_QWORD *)result[3];
    if (!result)
      goto LABEL_7;
  }
  return result;
}

_QWORD *TParser::addOpenProduction(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *result;

  v3 = a2[3];
  if (v3)
    v4 = (uint64_t *)(*(_QWORD *)(v3 + 16) + 8 * a2[4]);
  else
    v4 = a2 + 6;
  result = TParser::getCell(a1, *v4, a2[2] + a2[1]);
  *a2 = result[1];
  result[1] = a2;
  return result;
}

void TParser::addClosedProduction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *Cell;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *i;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  void **v27;
  void *__p[2];
  char v29;
  char v30;

  if (*(_QWORD *)(a1 + 40) && *(_QWORD *)(a2 + 24))
  {
    TChartInfo::TChartInfo((uint64_t)__p, (_QWORD *)a2, a1 + 48);
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), __p);
    if (v30)
      return;
    *(void **)(a2 + 40) = __p[0];
  }
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
    v5 = (uint64_t *)(*(_QWORD *)(v4 + 16) + 8 * *(_QWORD *)(a2 + 32));
  else
    v5 = (uint64_t *)(a2 + 48);
  Cell = TParser::getCell(a1, *v5, *(_QWORD *)(a2 + 8));
  v7 = (uint64_t *)Cell[2];
  if (v7)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = v7[2];
      v11 = *(_QWORD *)(a2 + 16);
      if (v10 < v11)
        break;
      if (v10 <= v11)
      {
        if (v7[5] == *(_QWORD *)(a2 + 40)
          || (v12 = *(_QWORD *)(a1 + 40)) != 0
          && ((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v12 + 32))(v12, v7, a2) & 1) != 0)
        {
          if (!*(_BYTE *)(a1 + 8))
            return;
          v20 = *(_QWORD *)(a2 + 8);
          v21 = *(_QWORD *)(a2 + 16);
          v22 = *(_QWORD *)(a2 + 24);
          if (v22)
            v23 = *(_QWORD *)(v22 + 16) + 8 * *(_QWORD *)(a2 + 32);
          else
            v23 = a2 + 48;
          loggableUnicode(*(unsigned int **)(*(_QWORD *)v23 + 16), __p);
          if (v29 >= 0)
            v27 = __p;
          else
            v27 = (void **)__p[0];
          tknPrintf("Warning: ignoring duplicate parse for token range [%llu,%llu] with symbol %s (rules %llu and %llu)\n", v26, v20, v21, v27, **(_QWORD **)(a2 + 24), *(_QWORD *)v7[3]);
          goto LABEL_46;
        }
        ++v9;
      }
      else
      {
        v8 = v7;
      }
      v7 = (uint64_t *)*v7;
    }
    while (v7);
    if (v9 > *(_QWORD *)(a1 + 24))
    {
      if (!*(_BYTE *)(a1 + 8))
        return;
      v13 = *(_QWORD *)(a2 + 24);
      if (v13)
        v14 = *(_QWORD *)(v13 + 16) + 8 * *(_QWORD *)(a2 + 32);
      else
        v14 = a2 + 48;
      loggableUnicode(*(unsigned int **)(*(_QWORD *)v14 + 16), __p);
      if (v29 >= 0)
        v25 = __p;
      else
        v25 = (void **)__p[0];
      tknPrintf("Warning: grammar over-generating symbol %s for token range [%llu,%llu]. Ignoring parse. (rule %llu)\n", v24, v25, *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), **(_QWORD **)(a2 + 24));
LABEL_46:
      if (v29 < 0)
        operator delete(__p[0]);
      return;
    }
    if (v8)
      goto LABEL_24;
  }
  v8 = Cell + 2;
LABEL_24:
  *(_QWORD *)a2 = *v8;
  *v8 = a2;
  for (i = (_QWORD *)Cell[1]; i; i = (_QWORD *)*i)
  {
    v16 = TAllocator::allocate((TAllocator *)(a1 + 48), 64);
    v17 = i[3];
    v16[3] = v17;
    v18 = i[4] + 1;
    while (*(unsigned __int8 *)(*(_QWORD *)(v17 + 24) + v18++))
      ;
    v16[4] = v18 - 1;
    *v16 = 0;
    v16[1] = i[1];
    v16[2] = *(_QWORD *)(a2 + 16) + i[2];
    v16[6] = i;
    v16[7] = a2;
    v16[5] = 0;
    ++*(_QWORD *)(a1 + 184);
    if (v17 && *(_QWORD *)(v17 + 8) != v18)
      TParser::addOpenProduction(a1, v16);
    else
      TParser::addClosedProduction(a1, v16);
  }
  TParser::startNewProductions((_QWORD *)a1, (_QWORD *)a2);
}

void sub_1AD7EF2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *TParser::startNewProductions(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD **v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v3 = result;
  v4 = a2[3];
  if (v4)
    v5 = (_QWORD **)(*(_QWORD *)(v4 + 16) + 8 * a2[4]);
  else
    v5 = (_QWORD **)(a2 + 6);
  v6 = (_QWORD *)**v5;
  if (!v6)
    return result;
  do
  {
    v7 = *(uint64_t **)(v3[11] + 8 * a2[1]);
    if (!v7)
      goto LABEL_20;
    while (1)
    {
      v8 = *v7;
      if (v7[1])
      {
        v9 = (_QWORD *)v3[4];
        if ((*(_BYTE *)(v8 + 8) & 4) == 0)
          break;
      }
      else
      {
        v9 = (_QWORD *)v3[4];
      }
      if (v8 == v9[1])
        break;
LABEL_12:
      v7 = (uint64_t *)v7[3];
      if (!v7)
        goto LABEL_20;
    }
    v10 = *(_QWORD *)(v8 + 24) + v9[8] * *(_QWORD *)(*(_QWORD *)(v6[2] + 8 * v6[1] - 8) + 24);
    if (((*(_QWORD *)(v9[15] + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      goto LABEL_12;
    v11 = TAllocator::allocate((TAllocator *)(v3 + 6), 64);
    v12 = 0;
    v11[3] = v6;
    v13 = v6[3];
    v14 = 1;
    do
    {
      v15 = v14;
      v16 = *(unsigned __int8 *)(v13 + v12++);
      ++v14;
    }
    while (v16);
    while (*(unsigned __int8 *)(v13 + v15++))
      ;
    v11[4] = v15 - 1;
    *(_OWORD *)(v11 + 1) = *(_OWORD *)(a2 + 1);
    *v11 = 0;
    v11[5] = 0;
    v11[6] = 0;
    v11[7] = a2;
    ++v3[23];
    if (v6[1] == v15)
      result = (_QWORD *)TParser::addClosedProduction(v3, v11);
    else
      result = TParser::addOpenProduction((uint64_t)v3, v11);
LABEL_20:
    v6 = (_QWORD *)v6[4];
  }
  while (v6);
  return result;
}

uint64_t TParser::getAllProductions(_QWORD *a1, uint64_t a2)
{
  _QWORD *Cell;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  ++a1[25];
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)(a1 + 11), 0);
  Cell = TParser::getCell((uint64_t)a1, *(_QWORD *)(a1[4] + 8), 0);
  v5 = a1[11];
  if (a1[12] != v5)
  {
    v6 = 0;
    do
    {
      if (*(_QWORD *)(v5 + 8 * v6))
      {
        std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)(a1 + 14), 0);
        std::vector<unsigned long>::resize((uint64_t)(a1 + 17), 0);
        std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)(a1 + 20), 0);
        (*(void (**)(uint64_t, unint64_t, _QWORD *, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)a2 + 16))(a2, v6, a1 + 14, a1 + 17, a1 + 20, a1 + 6);
        if (a1[14] != a1[15])
        {
          v7 = 0;
          do
          {
            v8 = TAllocator::allocate((TAllocator *)(a1 + 6), 64);
            v9 = *(_QWORD *)(a1[14] + 8 * v7);
            v8[2] = *(_QWORD *)(a1[17] + 8 * v7);
            v8[3] = 0;
            v8[4] = 0;
            v8[5] = 0;
            *v8 = 0;
            v8[1] = v6;
            v8[6] = v9;
            v8[7] = 0;
            v8[5] = *(_QWORD *)(a1[20] + 8 * v7);
            ++a1[23];
            TParser::addClosedProduction((uint64_t)a1, (uint64_t)v8);
            ++v7;
            v10 = a1[15] - a1[14];
          }
          while (v7 < v10 >> 3);
          a1[24] += v10 >> 3;
        }
      }
      ++v6;
      v5 = a1[11];
    }
    while (v6 < (a1[12] - v5) >> 3);
  }
  return Cell[2];
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

uint64_t *TParser::logChart(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *i;
  _QWORD *j;
  _QWORD *v8;
  _QWORD *k;
  _QWORD *m;
  _QWORD *v11;
  uint64_t n;
  _QWORD *ii;

  if (result[12] != result[11])
  {
    v3 = result;
    v4 = 0;
    do
    {
      v5 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": terminals\n", 12);
      for (i = *(_QWORD **)(v3[11] + 8 * v4); i; i = (_QWORD *)i[3])
      {
        if ((*(_BYTE *)(*i + 8) & 4) != 0)
        {
          for (j = (_QWORD *)i[2]; j; j = (_QWORD *)*j)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"    ", 4);
            TProduction::log((uint64_t)j, v3[5], a2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
          }
        }
      }
      v8 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": closed productions\n", 21);
      for (k = *(_QWORD **)(v3[11] + 8 * v4); k; k = (_QWORD *)k[3])
      {
        if ((*(_BYTE *)(*k + 8) & 4) == 0)
        {
          for (m = (_QWORD *)k[2]; m; m = (_QWORD *)*m)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"    ", 4);
            TProduction::log((uint64_t)m, v3[5], a2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
          }
        }
      }
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": open productions\n", 19);
      for (n = *(_QWORD *)(v3[11] + 8 * v4); n; n = *(_QWORD *)(n + 24))
      {
        for (ii = *(_QWORD **)(n + 8); ii; ii = (_QWORD *)*ii)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"    ", 4);
          TProduction::log((uint64_t)ii, v3[5], a2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
        }
      }
      result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"----\n", 5);
      ++v4;
    }
    while (v4 < (v3[12] - v3[11]) >> 3);
  }
  return result;
}

_QWORD *TProduction::log(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  char v22;
  char v23;
  char v24;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"span ", 5);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
    v7 = operator<<(a3, *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16)+ 8 * *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)- 8)+ 16));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" =", 2);
    if (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) != 1)
    {
      v8 = 0;
      do
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)" ", 1);
        if (v8 == *(_QWORD *)(a1 + 32))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)". ", 2);
        v9 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(*(_QWORD *)(v9 + 24) + v8))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"[", 1);
          v9 = *(_QWORD *)(a1 + 24);
        }
        v10 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 8 * v8);
        if ((*(_BYTE *)(v10 + 8) & 4) != 0)
        {
          v23 = 34;
          v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)&v23, 1);
          v12 = operator<<(v11, *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 8 * v8) + 16));
          v24 = 34;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v24, 1);
        }
        else
        {
          operator<<(a3, *(unsigned int **)(v10 + 16));
        }
        v13 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(*(_QWORD *)(v13 + 24) + v8))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)"]", 1);
          v13 = *(_QWORD *)(a1 + 24);
        }
        ++v8;
      }
      while (v8 < *(_QWORD *)(v13 + 8) - 1);
    }
    v14 = 1;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)" ", 1);
    v15 = *(_QWORD *)(a1 + 24);
    if (v15)
      v14 = *(_QWORD *)(a1 + 32) + 1 == *(_QWORD *)(v15 + 8);
    if (a2)
    {
      if (v14)
        (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 24))(a2, a1, a3);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)" // line ", 9);
    return (_QWORD *)std::ostream::operator<<();
  }
  else
  {
    v21 = 96;
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a3, (uint64_t)&v21, 1);
    v18 = *(_QWORD *)(a1 + 24);
    if (v18)
      v19 = *(_QWORD *)(v18 + 16) + 8 * *(_QWORD *)(a1 + 32);
    else
      v19 = a1 + 48;
    v20 = operator<<(v17, *(unsigned int **)(*(_QWORD *)v19 + 16));
    v22 = 96;
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v22, 1);
  }
}

void TParser::logTree(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, int a5, _QWORD *a6)
{
  const char *v12;
  size_t v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const std::string::value_type *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  const std::string::value_type *v30;
  std::string __p;
  _OWORD v32[25];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a4 + 23) < 0)
  {
    if (!*(_QWORD *)(a4 + 8))
      goto LABEL_9;
    v12 = *(const char **)a4;
  }
  else
  {
    v12 = (const char *)a4;
    if (!*(_BYTE *)(a4 + 23))
      goto LABEL_9;
  }
  v13 = strlen(v12);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"|\n", 2);
  v15 = (const char *)a4;
  if (*(char *)(a4 + 23) < 0)
    v15 = *(const char **)a4;
  v16 = strlen(v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)v15, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"|", 1);
LABEL_9:
  if ((*(_BYTE *)(a3 + 8) & 4) != 0)
  {
    v29 = operator<<(v28, *(unsigned int **)(a3 + 16));
    if (a2)
      goto LABEL_11;
LABEL_33:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"? // skipped", 12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"\n", 1);
    return;
  }
  operator<<(a6, *(unsigned int **)(a3 + 16));
  if (!a2)
    goto LABEL_33;
LABEL_11:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)" ", 1);
  v18 = *(_QWORD *)(a1 + 40);
  if (v18)
    (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v18 + 24))(v18, a2, a6);
  if (a2[3])
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)" // line ", 9);
    std::ostream::operator<<();
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a6, (uint64_t)"\n", 1);
  v19 = (_QWORD *)a2[3];
  if (v19)
  {
    memset(v32, 0, sizeof(v32));
    v20 = v19[1];
    v21 = v20 - 1;
    if (v20 == 1)
    {
      if (a5)
        v30 = "|  ";
      else
        v30 = "   ";
      std::string::append((std::string *)a4, v30);
    }
    else
    {
      v22 = v19[3];
      v23 = v20 - 2;
      do
      {
        *((_QWORD *)v32 + v23) = 0;
        if (!*(_BYTE *)(v22 + v23))
        {
          *((_QWORD *)v32 + v23) = a2[7];
          a2 = (_QWORD *)a2[6];
        }
        --v23;
      }
      while (v23 != -1);
      if (a5)
        v24 = "|  ";
      else
        v24 = "   ";
      std::string::append((std::string *)a4, v24);
      v25 = 0;
      do
      {
        v26 = *((_QWORD *)v32 + v25);
        v27 = *(_QWORD *)(v19[2] + 8 * v25);
        if (*(char *)(a4 + 23) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
        else
          __p = *(std::string *)a4;
        TParser::logTree(a1, v26, v27, &__p, ++v25 < v21, a6);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      while (v21 != v25);
    }
  }
}

void sub_1AD7EFDC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(exception_object);
}

void TParser::logTree(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *__p[2];
  char v10;

  if (a2)
  {
    v6 = a2[3];
    if (v6)
      v7 = (uint64_t *)(*(_QWORD *)(v6 + 16) + 8 * a2[4]);
    else
      v7 = a2 + 6;
    v8 = *v7;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TParser::logTree(a1, a2, v8, (uint64_t)__p, 0, a3);
    if (v10 < 0)
      operator delete(__p[0]);
  }
}

void sub_1AD7EFE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TProp<BOOL>::~TProp()
{
  JUMPOUT(0x1AF44D190);
}

void TProp<unsigned long>::~TProp()
{
  JUMPOUT(0x1AF44D190);
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

std::string *quasar::CircleRegion::CircleRegion(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = quasar::Location::UNDEFINED_COORDINATES;
  return this;
}

double quasar::CircleRegion::getMaxRadiusKm(quasar::CircleRegion *this)
{
  return *((double *)this + 3);
}

double quasar::CircleRegion::getLocation(quasar::CircleRegion *this)
{
  return *((double *)this + 4);
}

void quasar::CircleRegion::loadLatLon(quasar::CircleRegion *this, quasar::PTree *a2)
{
  double v4;
  quasar::Location *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v10;

  std::string::basic_string[abi:ne180100]<0>(__p, "lat");
  v4 = quasar::PTree::getAndEraseDouble((uint64_t)a2, (__int128 *)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lon");
  v6 = quasar::PTree::getAndEraseDouble((uint64_t)a2, (__int128 *)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  quasar::Location::known(v5, v4, v6);
  *((_QWORD *)this + 4) = v7;
  *((_QWORD *)this + 5) = v8;
}

void sub_1AD7F00E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::CircleRegion::loadAndEraseFromJson(quasar::CircleRegion *this, quasar::PTree *a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "max-radius-km");
  *((double *)this + 3) = quasar::PTree::getAndEraseDouble((uint64_t)a2, (__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  quasar::CircleRegion::loadLatLon(this, a2);
}

void sub_1AD7F0164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL quasar::CircleRegion::shouldLoad(quasar::CircleRegion *this, const quasar::PTree *a2)
{
  _BOOL8 v3;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  void *v9[2];
  char v10;

  std::string::basic_string[abi:ne180100]<0>(v9, "max-radius-km");
  if (quasar::PTree::getChildOptional((uint64_t)this, (uint64_t)v9))
  {
    v3 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "lat");
    if (quasar::PTree::getChildOptional((uint64_t)this, (uint64_t)v7))
    {
      v3 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "lon");
      v3 = quasar::PTree::getChildOptional((uint64_t)this, (uint64_t)__p) != 0;
      if (v6 < 0)
        operator delete(__p[0]);
    }
    if (v8 < 0)
      operator delete(v7[0]);
  }
  if (v10 < 0)
    operator delete(v9[0]);
  return v3;
}

void sub_1AD7F024C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::ContextDependency::Compute(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  unint64_t *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  void *__p;
  uint64_t *v35;
  uint64_t *v36;

  v8 = a2[1] - *a2;
  __p = 0;
  v35 = 0;
  v36 = 0;
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(&__p, ((v8 << 30) + 0x100000000) >> 32);
  v9 = (a3 << 32) | 0xFFFFFFFFLL;
  v10 = v35;
  if (v35 >= v36)
  {
    v12 = ((char *)v35 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v13 = ((char *)v36 - (_BYTE *)__p) >> 2;
    if (v13 <= v12 + 1)
      v13 = v12 + 1;
    if ((unint64_t)((char *)v36 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v36, v14);
    else
      v15 = 0;
    v16 = (uint64_t *)&v15[8 * v12];
    v17 = &v15[8 * v14];
    *v16 = v9;
    v11 = (unint64_t *)(v16 + 1);
    v19 = (char *)__p;
    v18 = (char *)v35;
    if (v35 != __p)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *--v16 = v20;
      }
      while (v18 != v19);
      v18 = (char *)__p;
    }
    __p = v16;
    v35 = (uint64_t *)v11;
    v36 = (uint64_t *)v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v35 = v9;
    v11 = (unint64_t *)(v10 + 1);
  }
  v35 = (uint64_t *)v11;
  if (*(int *)(a1 + 8) >= 1)
  {
    v21 = 0;
    v22 = *a2;
    do
    {
      v23 = v21 | ((unint64_t)*(unsigned int *)(v22 + 4 * v21) << 32);
      if (v11 >= (unint64_t *)v36)
      {
        v24 = ((char *)v11 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v24 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v25 = ((char *)v36 - (_BYTE *)__p) >> 2;
        if (v25 <= v24 + 1)
          v25 = v24 + 1;
        if ((unint64_t)((char *)v36 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
          v26 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v26 = v25;
        if (v26)
          v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v36, v26);
        else
          v27 = 0;
        v28 = (unint64_t *)&v27[8 * v24];
        *v28 = v23;
        v11 = v28 + 1;
        v30 = (char *)__p;
        v29 = (char *)v35;
        if (v35 != __p)
        {
          do
          {
            v31 = *((_QWORD *)v29 - 1);
            v29 -= 8;
            *--v28 = v31;
          }
          while (v29 != v30);
          v29 = (char *)__p;
        }
        __p = v28;
        v35 = (uint64_t *)v11;
        v36 = (uint64_t *)&v27[8 * v26];
        if (v29)
          operator delete(v29);
      }
      else
      {
        *v11++ = v23;
      }
      v35 = (uint64_t *)v11;
      v22 = *a2;
      ++v21;
    }
    while (v21 < *(int *)(a1 + 8));
  }
  v32 = (***(uint64_t (****)(_QWORD, void **, uint64_t))(a1 + 16))(*(_QWORD *)(a1 + 16), &__p, a4);
  if (__p)
  {
    v35 = (uint64_t *)__p;
    operator delete(__p);
  }
  return v32;
}

void sub_1AD7F04E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::ContextDependency::Read(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  void **v8;
  void **v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v14;
  _QWORD *v15;
  void **v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v19[34];
  void **v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
    *(_QWORD *)(a1 + 16) = 0;
  }
  kaldi::ExpectToken(a2, a3, "ContextDependency");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 8);
  kaldi::ReadBasicType<int>(a2, a3, a1 + 12);
  v20 = 0;
  v21 = 0;
  v22 = 0;
  kaldi::ReadToken(a2, a3, (uint64_t)&v20);
  v7 = HIBYTE(v22);
  if (SHIBYTE(v22) < 0)
  {
    if (v21 != 8)
      goto LABEL_15;
    v8 = v20;
  }
  else
  {
    if (HIBYTE(v22) != 8)
    {
LABEL_10:
      if (v7 != 5)
        goto LABEL_25;
      v9 = (void **)&v20;
      goto LABEL_17;
    }
    v8 = (void **)&v20;
  }
  if (*v8 == (void *)0x6874676E654C6F54)
  {
    v10 = kaldi::EventMap::Read(a2, a3);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
    kaldi::ReadToken(a2, a3, (uint64_t)&v20);
    v7 = HIBYTE(v22);
    if ((v22 & 0x8000000000000000) == 0)
      goto LABEL_10;
  }
  else if ((v22 & 0x8000000000000000) == 0)
  {
    goto LABEL_10;
  }
LABEL_15:
  if (v21 != 5)
    goto LABEL_25;
  v9 = v20;
LABEL_17:
  v11 = *(_DWORD *)v9;
  v12 = *((unsigned __int8 *)v9 + 4);
  if (v11 != 1682992980 || v12 != 102)
  {
LABEL_25:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Got unexpected token ", 21);
    if (v22 >= 0)
      v16 = (void **)&v20;
    else
      v16 = v20;
    if (v22 >= 0)
      v17 = HIBYTE(v22);
    else
      v17 = v21;
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" reading context-dependency object.", 35);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  v14 = kaldi::EventMap::Read(a2, a3);
  kaldi::ExpectToken(a2, a3, "EndContextDependency");
  *(_QWORD *)(a1 + 16) = v14;
  if (SHIBYTE(v22) < 0)
    operator delete(v20);
}

void sub_1AD7F0714(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 49) < 0)
    operator delete(*(void **)(v1 - 72));
  _Unwind_Resume(a1);
}

void kaldi::ContextDependency::EnumeratePairs(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v11;
  unint64_t *v12;
  unint64_t i;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  unint64_t *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int *v39;
  unint64_t *v40;
  int v41;
  unint64_t j;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  unint64_t *v49;
  char *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int *v66;
  int *v67;
  _BYTE *v68;
  unint64_t v69;
  int *v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  int v76;
  _DWORD *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v85;
  void *v86;
  int *v87;
  uint64_t v88;
  void *v89;
  int *v90;
  uint64_t v91;
  void *__p;
  unint64_t *v93;
  char *v94;
  void *v95;
  void *v96;
  uint64_t v97;

  v95 = 0;
  v96 = 0;
  v97 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v95, *(const void **)a5, *(_QWORD *)(a5 + 8), (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 2);
  __p = 0;
  v93 = 0;
  v94 = 0;
  v89 = 0;
  v90 = 0;
  v91 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  v11 = *(_DWORD *)(a1 + 8);
  v83 = a4;
  v12 = 0;
  if (v11)
  {
    for (i = 0; i < v11; ++i)
    {
      v14 = *(_DWORD *)(*(_QWORD *)a5 + 4 * i);
      if ((v14 & 0x80000000) == 0)
      {
        v15 = i | ((unint64_t)v14 << 32);
        if (v12 >= (unint64_t *)v94)
        {
          v16 = ((char *)v12 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v16 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v17 = (v94 - (_BYTE *)__p) >> 2;
          if (v17 <= v16 + 1)
            v17 = v16 + 1;
          if ((unint64_t)(v94 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v18 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v18 = v17;
          if (v18)
            v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v94, v18);
          else
            v19 = 0;
          v20 = (unint64_t *)&v19[8 * v16];
          *v20 = v15;
          v12 = v20 + 1;
          v22 = (char *)__p;
          v21 = (char *)v93;
          if (v93 != __p)
          {
            do
            {
              v23 = *((_QWORD *)v21 - 1);
              v21 -= 8;
              *--v20 = v23;
            }
            while (v21 != v22);
            v21 = (char *)__p;
          }
          __p = v20;
          v93 = v12;
          v94 = &v19[8 * v18];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *v12++ = v15;
        }
        v93 = v12;
        v11 = *(_DWORD *)(a1 + 8);
      }
    }
    v24 = v94;
    v25 = (a4 << 32) | 0xFFFFFFFFLL;
    if (v12 < (unint64_t *)v94)
    {
      *v12 = v25;
      v26 = v12 + 1;
      goto LABEL_39;
    }
  }
  else
  {
    v24 = 0;
    v25 = (a4 << 32) | 0xFFFFFFFFLL;
  }
  v27 = ((char *)v12 - (_BYTE *)__p) >> 3;
  if ((unint64_t)(v27 + 1) >> 61)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v28 = v24 - (_BYTE *)__p;
  v29 = v28 >> 2;
  if (v28 >> 2 <= (unint64_t)(v27 + 1))
    v29 = v27 + 1;
  if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
    v30 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v30 = v29;
  if (v30)
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v94, v30);
  else
    v31 = 0;
  v32 = (uint64_t *)&v31[8 * v27];
  v33 = &v31[8 * v30];
  *v32 = v25;
  v26 = (unint64_t *)(v32 + 1);
  v35 = (char *)__p;
  v34 = (char *)v93;
  if (v93 != __p)
  {
    do
    {
      v36 = *((_QWORD *)v34 - 1);
      v34 -= 8;
      *--v32 = v36;
    }
    while (v34 != v35);
    v34 = (char *)__p;
  }
  __p = v32;
  v93 = v26;
  v94 = v33;
  if (v34)
    operator delete(v34);
LABEL_39:
  v37 = 126 - 2 * __clz(((char *)v26 - (_BYTE *)__p) >> 3);
  v93 = v26;
  if (v26 == __p)
    v38 = 0;
  else
    v38 = v37;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *,false>((uint64_t)__p, (int *)v26, (uint64_t)&v85, v38, 1);
  (*(void (**)(_QWORD, void **, void **))(**(_QWORD **)(a1 + 16) + 8))(*(_QWORD *)(a1 + 16), &__p, &v89);
  std::__sort<std::__less<int,int> &,int *>();
  v39 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::__equal_to &>((int *)v89, v90);
  if (v90 != v39)
    v90 = v39;
  v40 = (unint64_t *)__p;
  v93 = (unint64_t *)__p;
  v41 = *(_DWORD *)(a1 + 8);
  if (v41)
  {
    for (j = 0; j < v41; ++j)
    {
      v43 = *(_DWORD *)(*(_QWORD *)a5 + 4 * j);
      if ((v43 & 0x80000000) == 0)
      {
        v44 = j | ((unint64_t)v43 << 32);
        if (v40 >= (unint64_t *)v94)
        {
          v45 = ((char *)v40 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v45 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v46 = (v94 - (_BYTE *)__p) >> 2;
          if (v46 <= v45 + 1)
            v46 = v45 + 1;
          if ((unint64_t)(v94 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v47 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v47 = v46;
          if (v47)
            v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v94, v47);
          else
            v48 = 0;
          v49 = (unint64_t *)&v48[8 * v45];
          *v49 = v44;
          v40 = v49 + 1;
          v51 = (char *)__p;
          v50 = (char *)v93;
          if (v93 != __p)
          {
            do
            {
              v52 = *((_QWORD *)v50 - 1);
              v50 -= 8;
              *--v49 = v52;
            }
            while (v50 != v51);
            v50 = (char *)__p;
          }
          __p = v49;
          v93 = v40;
          v94 = &v48[8 * v47];
          if (v50)
            operator delete(v50);
        }
        else
        {
          *v40++ = v44;
        }
        v93 = v40;
        v41 = *(_DWORD *)(a1 + 8);
      }
    }
  }
  v53 = (a3 << 32) | 0xFFFFFFFFLL;
  if (v40 >= (unint64_t *)v94)
  {
    v55 = ((char *)v40 - (_BYTE *)__p) >> 3;
    if ((unint64_t)(v55 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v56 = (v94 - (_BYTE *)__p) >> 2;
    if (v56 <= v55 + 1)
      v56 = v55 + 1;
    if ((unint64_t)(v94 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
      v57 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v57 = v56;
    if (v57)
      v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v94, v57);
    else
      v58 = 0;
    v59 = (uint64_t *)&v58[8 * v55];
    v60 = &v58[8 * v57];
    *v59 = v53;
    v54 = (unint64_t *)(v59 + 1);
    v62 = (char *)__p;
    v61 = (char *)v93;
    if (v93 != __p)
    {
      do
      {
        v63 = *((_QWORD *)v61 - 1);
        v61 -= 8;
        *--v59 = v63;
      }
      while (v61 != v62);
      v61 = (char *)__p;
    }
    __p = v59;
    v93 = v54;
    v94 = v60;
    if (v61)
      operator delete(v61);
  }
  else
  {
    *v40 = v53;
    v54 = v40 + 1;
  }
  v64 = 126 - 2 * __clz(((char *)v54 - (_BYTE *)__p) >> 3);
  v93 = v54;
  if (v54 == __p)
    v65 = 0;
  else
    v65 = v64;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *,false>((uint64_t)__p, (int *)v54, (uint64_t)&v85, v65, 1);
  (*(void (**)(_QWORD, void **, void **))(**(_QWORD **)(a1 + 16) + 8))(*(_QWORD *)(a1 + 16), &__p, &v86);
  std::__sort<std::__less<int,int> &,int *>();
  v66 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::__equal_to &>((int *)v86, v87);
  if (v87 != v66)
    v87 = v66;
  v68 = v89;
  v67 = v90;
  if ((char *)v90 - (_BYTE *)v89 == 4 || (char *)v66 - (_BYTE *)v86 == 4)
  {
    if (v90 != v89)
    {
      v69 = 0;
      v70 = (int *)v86;
      do
      {
        if (v66 == v70)
        {
          v66 = v70;
        }
        else
        {
          v71 = 0;
          do
          {
            v85 = *((unsigned int *)v89 + v69) | ((unint64_t)v70[v71] << 32);
            std::__hash_table<std::pair<int,int>,kaldi::PairHasher<int>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::__emplace_unique_key_args<std::pair<int,int>,std::pair<int,int>>(a6, (int *)&v85, &v85);
            ++v71;
            v70 = (int *)v86;
            v66 = v87;
          }
          while (v71 < ((char *)v87 - (_BYTE *)v86) >> 2);
          v68 = v89;
          v67 = v90;
        }
        ++v69;
      }
      while (v69 < ((char *)v67 - v68) >> 2);
    }
  }
  else
  {
    v72 = *(unsigned int *)(a1 + 8);
    v73 = v72 - 1;
    if ((int)v72 < 1)
    {
      v75 = 0;
      v78 = v83;
      v79 = a3;
    }
    else
    {
      v74 = 0;
      v75 = 0;
      v76 = *(_DWORD *)(a1 + 12);
      v77 = *(_DWORD **)a5;
      v78 = v83;
      v79 = a3;
      do
      {
        if (v76 >= 0)
          v80 = v76;
        else
          v80 = -v76;
        if (v77[v74] == -1 && v80 < v73)
        {
          v75 = v74;
          v73 = v80;
        }
        ++v74;
        --v76;
      }
      while (v72 != v74);
    }
    *((_DWORD *)v95 + v75) = 0;
    kaldi::ContextDependency::EnumeratePairs(a1, a2, v79, v78, &v95, a6);
    v81 = *a2;
    if (a2[1] != *a2)
    {
      v82 = 0;
      do
      {
        *((_DWORD *)v95 + v75) = *(_DWORD *)(v81 + 4 * v82);
        kaldi::ContextDependency::EnumeratePairs(a1, a2, v79, v78, &v95, a6);
        ++v82;
        v81 = *a2;
      }
      while (v82 < (a2[1] - *a2) >> 2);
    }
  }
  if (v86)
  {
    v87 = (int *)v86;
    operator delete(v86);
  }
  if (v89)
  {
    v90 = (int *)v89;
    operator delete(v89);
  }
  if (__p)
  {
    v93 = (unint64_t *)__p;
    operator delete(__p);
  }
  if (v95)
  {
    v96 = v95;
    operator delete(v95);
  }
}

void sub_1AD7F0E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  if (a19)
    operator delete(a19);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void kaldi::ContextDependency::GetPdfInfo(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  int *v6;
  int *v7;
  uint64_t v8;
  int v10;
  int *v11;
  int v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  std::vector<int>::pointer begin;
  uint64_t v25;
  unint64_t v26;
  int v27;
  _QWORD *i;
  char **v29;
  void **v30;
  char *v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  int *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  __int128 v52;
  __int128 v53;
  int v54;
  std::vector<int> v55;
  char v56;

  v6 = (int *)*a2;
  v7 = (int *)a2[1];
  v8 = *a2 + 4;
  if ((int *)*a2 != v7 && v8 != (_QWORD)v7)
  {
    v10 = *v6;
    v11 = (int *)(*a2 + 4);
    do
    {
      v13 = *v11++;
      v12 = v13;
      v14 = v10 < v13;
      if (v10 <= v13)
        v10 = v12;
      if (v14)
        v6 = (int *)v8;
      v8 = (uint64_t)v11;
    }
    while (v11 != v7);
  }
  std::vector<std::vector<std::vector<std::pair<int,int>>>>::resize(a4, *v6 + 1);
  std::vector<int>::vector(&v55, *(int *)(a1 + 8));
  v15 = *a2;
  if (a2[1] != *a2)
  {
    v16 = 0;
    v17 = *a3;
    do
    {
      v18 = *(int *)(v15 + 4 * v16);
      std::vector<std::vector<std::pair<int,int>>>::resize((uint64_t *)(*a4 + 24 * v18), (uint64_t)(*(_QWORD *)(v17 + 24 * v18 + 8) - *(_QWORD *)(v17 + 24 * v18)) >> 3);
      v17 = *a3;
      v19 = *(_QWORD *)(*a3 + 24 * (int)v18);
      if (*(_QWORD *)(*a3 + 24 * (int)v18 + 8) != v19)
      {
        v49 = v16;
        v20 = 0;
        do
        {
          v21 = (unsigned int *)(v19 + 8 * v20);
          v23 = *v21;
          v22 = v21[1];
          begin = v55.__begin_;
          if (v55.__end_ != v55.__begin_)
          {
            v25 = 0;
            v26 = v55.__end_ - v55.__begin_;
            if (v26 <= 1)
              v26 = 1;
            do
            {
              if (v25 == *(_DWORD *)(a1 + 12))
                v27 = v18;
              else
                v27 = -1;
              begin[v25++] = v27;
            }
            while (v26 != v25);
          }
          v52 = 0u;
          v53 = 0u;
          v54 = 1065353216;
          kaldi::ContextDependency::EnumeratePairs(a1, a2, v22, v23, (uint64_t)&v55, (uint64_t)&v52);
          for (i = (_QWORD *)v53; i; i = (_QWORD *)*i)
          {
            v29 = (char **)(*(_QWORD *)(*a4 + 24 * (int)v18) + 24 * v20);
            v30 = (void **)(v29 + 1);
            v31 = v29[1];
            v33 = v29 + 2;
            v32 = (unint64_t)v29[2];
            if ((unint64_t)v31 >= v32)
            {
              v35 = (v31 - *v29) >> 3;
              if ((unint64_t)(v35 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v36 = v32 - (_QWORD)*v29;
              v37 = v36 >> 2;
              if (v36 >> 2 <= (unint64_t)(v35 + 1))
                v37 = v35 + 1;
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
                v38 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v38 = v37;
              if (v38)
                v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v33, v38);
              else
                v39 = 0;
              v40 = &v39[8 * v35];
              *(_QWORD *)v40 = i[2];
              v34 = v40 + 8;
              v41 = (char *)*v30;
              v42 = *v29;
              if (*v30 != *v29)
              {
                do
                {
                  v43 = *((_QWORD *)v41 - 1);
                  v41 -= 8;
                  *((_QWORD *)v40 - 1) = v43;
                  v40 -= 8;
                }
                while (v41 != v42);
                v41 = *v29;
              }
              *v29 = v40;
              *v30 = v34;
              *v33 = &v39[8 * v38];
              if (v41)
                operator delete(v41);
            }
            else
            {
              *(_QWORD *)v31 = i[2];
              v34 = v31 + 8;
            }
            *v30 = v34;
          }
          v44 = (uint64_t *)(*(_QWORD *)(*a4 + 24 * (int)v18) + 24 * v20);
          v45 = *v44;
          v46 = (int *)v44[1];
          v47 = 126 - 2 * __clz(((uint64_t)v46 - *v44) >> 3);
          if (v46 == (int *)v45)
            v48 = 0;
          else
            v48 = v47;
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *,false>(v45, v46, (uint64_t)&v56, v48, 1);
          std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v52);
          ++v20;
          v17 = *a3;
          v19 = *(_QWORD *)(*a3 + 24 * (int)v18);
        }
        while (v20 < (*(_QWORD *)(*a3 + 24 * (int)v18 + 8) - v19) >> 3);
        v16 = v49;
      }
      ++v16;
      v15 = *a2;
    }
    while (v16 < (a2[1] - *a2) >> 2);
  }
  if (v55.__begin_)
  {
    v55.__end_ = v55.__begin_;
    operator delete(v55.__begin_);
  }
}

void sub_1AD7F115C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<std::vector<std::pair<int,int>>>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::vector<std::pair<int,int>>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<std::pair<int,int>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::pair<int,int>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void kaldi::ContextDependency::GetPdfInfo(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int *v23;
  unint64_t v24;
  uint64_t v25;
  int *v26;
  int *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char **v33;
  uint64_t *v34;
  void **v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  int *v52;
  unint64_t v53;
  uint64_t v54;
  int **v55;
  int *v56;
  int *v57;
  int *v58;
  int v60;
  int v61;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD v67[34];
  int *v68;
  int *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t *v72;
  unint64_t v73;

  v5 = a1;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  std::vector<std::vector<std::pair<int,int>>>::resize(a4, v6);
  v7 = *a2;
  if (a2[1] != *a2)
  {
    v8 = 0;
    do
    {
      v9 = *(unsigned int *)(v7 + 4 * v8);
      v10 = v71;
      v72 = v71;
      v11 = *(unsigned int *)(v5 + 12) | (unint64_t)(v9 << 32);
      if ((unint64_t)v71 >= v73)
      {
        v13 = (uint64_t)(v73 - (_QWORD)v71) >> 2;
        if (v13 <= 1)
          v13 = 1;
        if (v73 - (unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v73, v14);
        *v15 = v11;
        v12 = v15 + 1;
        v18 = v71;
        v17 = v72;
        v19 = (char *)v15;
        if (v72 != v71)
        {
          do
          {
            v20 = *--v17;
            *((_QWORD *)v19 - 1) = v20;
            v19 -= 8;
          }
          while (v17 != v18);
          v17 = v71;
        }
        v71 = (unint64_t *)v19;
        v72 = v15 + 1;
        v73 = (unint64_t)&v15[v16];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v71 = v11;
        v12 = v10 + 1;
      }
      v72 = v12;
      v66 = *(unsigned int *)(*a3 + 4 * (int)v9);
      if ((int)v66 >= 1)
      {
        v21 = 0;
        v64 = v9;
        v65 = v8;
        do
        {
          std::vector<std::pair<int,int>>::resize((uint64_t)&v71, 2uLL);
          v22 = (int *)v71;
          v23 = (int *)v72;
          v24 = 126 - 2 * __clz(v72 - v71);
          *(_DWORD *)v71 = *(_DWORD *)(v5 + 12);
          v22[1] = v9;
          v22[2] = -1;
          v22[3] = v21;
          if (v23 == v22)
            v25 = 0;
          else
            v25 = v24;
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *,false>((uint64_t)v22, v23, (uint64_t)v67, v25, 1);
          v68 = 0;
          v69 = 0;
          v70 = 0;
          (*(void (**)(_QWORD, unint64_t **, int **))(**(_QWORD **)(v5 + 16) + 8))(*(_QWORD *)(v5 + 16), &v71, &v68);
          std::__sort<std::__less<int,int> &,int *>();
          v26 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::__equal_to &>(v68, v69);
          v27 = v68;
          if (v69 != v26)
            v69 = v26;
          if (v68 == v26 && kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v67);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"ContextDependency::GetPdfInfo, no pdfs returned for position ", 61);
            v28 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" of phone ", 10);
            v29 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)".   Continuing but this is a serious error.", 43);
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v67);
            v27 = v68;
            v26 = v69;
          }
          v30 = v5;
          if (v26 != v27)
          {
            v31 = 0;
            v32 = (v21 << 32) | v9;
            do
            {
              v33 = (char **)(*a4 + 24 * v27[v31]);
              v35 = (void **)(v33 + 1);
              v34 = (uint64_t *)v33[1];
              v37 = v33 + 2;
              v36 = (unint64_t)v33[2];
              if ((unint64_t)v34 >= v36)
              {
                v39 = ((char *)v34 - *v33) >> 3;
                if ((unint64_t)(v39 + 1) >> 61)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v40 = v36 - (_QWORD)*v33;
                v41 = v40 >> 2;
                if (v40 >> 2 <= (unint64_t)(v39 + 1))
                  v41 = v39 + 1;
                if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
                  v42 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v42 = v41;
                if (v42)
                  v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v37, v42);
                else
                  v43 = 0;
                v44 = &v43[8 * v39];
                *(_QWORD *)v44 = v32;
                v38 = v44 + 8;
                v45 = (char *)*v35;
                v46 = *v33;
                if (*v35 != *v33)
                {
                  do
                  {
                    v47 = *((_QWORD *)v45 - 1);
                    v45 -= 8;
                    *((_QWORD *)v44 - 1) = v47;
                    v44 -= 8;
                  }
                  while (v45 != v46);
                  v45 = *v33;
                }
                *v33 = v44;
                *v35 = v38;
                *v37 = &v43[8 * v42];
                if (v45)
                  operator delete(v45);
              }
              else
              {
                *v34 = v32;
                v38 = v34 + 1;
              }
              *v35 = v38;
              ++v31;
              v27 = v68;
            }
            while (v31 < v69 - v68);
          }
          if (v27)
          {
            v69 = v27;
            operator delete(v27);
          }
          ++v21;
          v5 = v30;
          v9 = v64;
          v8 = v65;
        }
        while (v21 != v66);
      }
      ++v8;
      v7 = *a2;
    }
    while (v8 < (a2[1] - *a2) >> 2);
  }
  v48 = *a4;
  if (a4[1] != *a4)
  {
    v49 = 0;
    do
    {
      v50 = (uint64_t *)(v48 + 24 * v49);
      v51 = *v50;
      v52 = (int *)v50[1];
      v53 = 126 - 2 * __clz(((uint64_t)v52 - *v50) >> 3);
      if (v52 == (int *)v51)
        v54 = 0;
      else
        v54 = v53;
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *,false>(v51, v52, (uint64_t)v67, v54, 1);
      v48 = *a4;
      v55 = (int **)(*a4 + 24 * v49);
      v57 = *v55;
      v56 = v55[1];
      v58 = v57 + 2;
      if (v57 != v56 && v58 != v56)
      {
        v60 = *v57;
        do
        {
          v61 = *v58;
          if (v60 >= *v58 && (v61 < v60 || *(v58 - 1) >= v58[1]))
            break;
          v58 += 2;
          v60 = v61;
        }
        while (v58 != v56);
      }
      ++v49;
    }
    while (v49 < 0xAAAAAAAAAAAAAAABLL * ((a4[1] - v48) >> 3));
  }
  if (v71)
  {
    v72 = v71;
    operator delete(v71);
  }
}

void sub_1AD7F173C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;
  void *v18;

  v18 = *(void **)(v16 - 112);
  if (v18)
  {
    *(_QWORD *)(v16 - 104) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::ContextDependency::ContextWidth(kaldi::ContextDependency *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t kaldi::ContextDependency::CentralPosition(kaldi::ContextDependency *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t kaldi::ContextDependency::NumPdfs(kaldi::ContextDependency *this)
{
  uint64_t result;
  int v2;

  result = *((_QWORD *)this + 2);
  if (result)
  {
    v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
    if (v2 >= 0)
      return (v2 + 1);
    else
      return 0;
  }
  return result;
}

void kaldi::ContextDependency::~ContextDependency(kaldi::ContextDependency *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E5D2A4D0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  quasar::Bitmap::~Bitmap(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = off_1E5D2A4D0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1AF44D190);
}

_QWORD *kaldi::ContextDependency::Copy(kaldi::ContextDependency *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)operator new();
  v3 = *((_QWORD *)this + 1);
  v4 = kaldi::EventMap::Copy(*((kaldi::EventMap **)this + 2));
  *v2 = off_1E5D2A4D0;
  v2[1] = v3;
  v2[2] = v4;
  return v2;
}

void sub_1AD7F18D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A1C40319E9F20);
  _Unwind_Resume(a1);
}

uint64_t kaldi::EventMap::Copy(kaldi::EventMap *this)
{
  uint64_t v1;
  void *__p;
  void *v4;
  uint64_t v5;

  __p = 0;
  v4 = 0;
  v5 = 0;
  v1 = (*(uint64_t (**)(kaldi::EventMap *, void **))(*(_QWORD *)this + 24))(this, &__p);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
  return v1;
}

void sub_1AD7F1944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<int>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1AD7F19EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *,false>(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  int *v18;
  char v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;

  v8 = (int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v21 = *(a2 - 2);
        v22 = *v9;
        if (v21 < *v9 || v22 >= v21 && *(a2 - 1) < v9[1])
        {
          *v9 = v21;
          *(a2 - 2) = v22;
          v23 = v9[1];
          v9[1] = *(a2 - 1);
          *(a2 - 1) = v23;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v9, v9 + 2, a2 - 2);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v9, v9 + 2, v9 + 4, a2 - 2);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v9, a2);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v9 + 2, v15 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v15 - 2, v15, &v9[2 * v14 + 2]);
            v16 = *(_QWORD *)v9;
            *(_QWORD *)v9 = *(_QWORD *)v15;
            *(_QWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v17 = *(v9 - 2);
          if (v17 >= *v9 && (*v9 < v17 || *(v9 - 1) >= v9[1]))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,int> *,std::__less<void,void> &>(v9, a2);
            v9 = (int *)result;
            goto LABEL_19;
          }
LABEL_14:
          v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,int> *,std::__less<void,void> &>(v9, a2);
          if ((v19 & 1) == 0)
            goto LABEL_17;
          v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v9, v18);
          v9 = v18 + 2;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(v18 + 2, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v20)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *,false>(v8, v18, a3, -v11, a5 & 1);
            v9 = v18 + 2;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v18;
          if (v20)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *,std::pair<int,int> *>(v9, a2, a2, a3);
        return result;
    }
  }
}

_DWORD *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(_DWORD *result, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  _DWORD *v15;

  if (result == a2)
    return result;
  v2 = result + 2;
  if (result + 2 == a2)
    return result;
  v3 = 0;
  v4 = result;
  do
  {
    v5 = v4;
    v4 = v2;
    v6 = v5[2];
    v7 = *v5;
    if (v6 >= *v5 && (v7 < v6 || v5[3] >= v5[1]))
      goto LABEL_18;
    v9 = v5[2];
    v8 = v5[3];
    v10 = v5[1];
    v5[2] = v7;
    v4[1] = v10;
    v11 = result;
    if (v5 == result)
      goto LABEL_17;
    v12 = v3;
    while (1)
    {
      v13 = *(_DWORD *)((char *)result + v12 - 8);
      if (v13 <= v9)
        break;
      v14 = *(_DWORD *)((char *)result + v12 - 4);
LABEL_11:
      v5 -= 2;
      v15 = (_DWORD *)((char *)result + v12);
      *v15 = v13;
      v15[1] = v14;
      v12 -= 8;
      if (!v12)
      {
        v11 = result;
        goto LABEL_17;
      }
    }
    if (v13 >= v9)
    {
      v11 = (_DWORD *)((char *)result + v12);
      v14 = *(_DWORD *)((char *)result + v12 - 4);
      if (v14 <= v8)
        goto LABEL_17;
      goto LABEL_11;
    }
    v11 = v5;
LABEL_17:
    *v11 = v9;
    v11[1] = v8;
LABEL_18:
    v2 = v4 + 2;
    v3 += 8;
  }
  while (v4 + 2 != a2);
  return result;
}

int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(int *result, int *a2)
{
  int *v2;
  int *v3;
  int *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int *i;
  int v10;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = result + 1;
      do
      {
        v4 = result;
        result = v2;
        v5 = v4[2];
        v6 = *v4;
        if (v5 < *v4 || v6 >= v5 && v4[3] < v4[1])
        {
          v7 = *result;
          v8 = result[1];
          for (i = v3; ; i -= 2)
          {
            v10 = *i;
            i[1] = v6;
            i[2] = v10;
            v6 = *(i - 3);
            if (v6 <= v7 && (v6 < v7 || *(i - 2) <= v8))
              break;
          }
          *(i - 1) = v7;
          *i = v8;
        }
        v2 = result + 2;
        v3 += 2;
      }
      while (result + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(int *a1, int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  int *v6;
  int *v7;
  uint64_t v8;
  int v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  v3 = *a2;
  v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    v9 = *a3;
    if (*a3 >= v3 && (v3 < v9 || a3[1] >= a2[1]))
      return 0;
    *a2 = v9;
    *a3 = v3;
    v11 = a2 + 1;
    v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    v12 = *a2;
    v13 = *a1;
    if (*a2 >= *a1 && (v13 < v12 || *v11 >= a1[1]))
      return 1;
    *a1 = v12;
    v6 = a1 + 1;
    *a2 = v13;
    v8 = 2;
  }
  else
  {
    v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *a1 = v5;
      v6 = a1 + 1;
      *a3 = v4;
      v7 = a3 + 1;
      v8 = 1;
    }
    else
    {
      *a1 = v3;
      *a2 = v4;
      v14 = a1[1];
      a1[1] = a2[1];
      a2[1] = v14;
      v15 = *a3;
      v16 = *a2;
      if (*a3 >= *a2 && (v16 < v15 || a3[1] >= v14))
        return 1;
      *a2 = v15;
      *a3 = v16;
      v7 = a3 + 1;
      v8 = 2;
      v6 = a2 + 1;
    }
    v11 = v7;
  }
  v17 = *v6;
  *v6 = *v11;
  *v11 = v17;
  return v8;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,int> *,std::__less<void,void> &>(int *a1, int *a2)
{
  int v2;
  int v3;
  int v4;
  int *i;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;

  v3 = *a1;
  v2 = a1[1];
  v4 = *(a2 - 2);
  if (v4 <= *a1 && (v4 < v3 || *(a2 - 1) <= v2))
  {
    for (i = a1 + 2; i < a2 && *i <= v3 && (*i < v3 || i[1] <= v2); i += 2)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v7 = i[2];
      i += 2;
      v6 = v7;
    }
    while (v7 <= v3 && (v6 < v3 || i[1] <= v2));
  }
  if (i < a2)
  {
    for (a2 -= 2; v4 > v3 || v4 >= v3 && a2[1] > v2; a2 -= 2)
    {
      v8 = *(a2 - 2);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *i;
    v10 = *a2;
    do
    {
      *i = v10;
      *a2 = v9;
      v11 = i[1];
      i[1] = a2[1];
      a2[1] = v11;
      do
      {
        v12 = i[2];
        i += 2;
        v9 = v12;
      }
      while (v12 <= v3 && (v9 < v3 || i[1] <= v2));
      do
      {
        do
        {
          v13 = *(a2 - 2);
          a2 -= 2;
          v10 = v13;
          v14 = v13 < v3;
        }
        while (v13 > v3);
      }
      while (!v14 && a2[1] > v2);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v3;
  *(i - 1) = v2;
  return i;
}

_DWORD *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,int> *,std::__less<void,void> &>(int *a1, _DWORD *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v12;
  _DWORD *v13;
  _DWORD *v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  while (1)
  {
    v5 = a1[v2 + 2];
    if (v5 >= v3 && (v5 > v3 || a1[v2 + 3] >= v4))
      break;
    v2 += 2;
  }
  v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 4)
  {
    do
    {
      v8 = *(a2 - 2);
      a2 -= 2;
      v7 = v8;
    }
    while (v8 >= v3 && (v7 > v3 || a2[1] >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        v10 = *(a2 - 2);
        a2 -= 2;
        v9 = v10;
        if (v10 < v3)
          break;
        if (v9 > v3)
          goto LABEL_19;
      }
      while (a2[1] >= v4 && v6 < (unint64_t)a2);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    v13 = (_DWORD *)v6;
  }
  else
  {
    v12 = *a2;
    v13 = (_DWORD *)v6;
    v14 = a2;
    do
    {
      *v13 = v12;
      *v14 = v5;
      v15 = v13[1];
      v13[1] = v14[1];
      v14[1] = v15;
      do
      {
        do
        {
          v16 = v13[2];
          v13 += 2;
          v5 = v16;
          v17 = v16 <= v3;
        }
        while (v16 < v3);
      }
      while (v17 && v13[1] < v4);
      do
      {
        v18 = *(v14 - 2);
        v14 -= 2;
        v12 = v18;
      }
      while (v18 >= v3 && (v12 > v3 || v14[1] >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 2 != a1)
  {
    *a1 = *(v13 - 2);
    a1[1] = *(v13 - 1);
  }
  *(v13 - 2) = v3;
  *(v13 - 1) = v4;
  return v13 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(int *a1, int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  int v8;
  int *v9;
  int *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int *v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && *(a2 - 1) < a1[1])
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v9 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  do
  {
    v13 = *v9;
    if (*v10 >= *v9 && (v13 < *v10 || v10[1] >= v9[1]))
      goto LABEL_22;
    v14 = *v10;
    v15 = v10[1];
    *v10 = v13;
    v10[1] = v9[1];
    v16 = a1;
    if (v9 == a1)
      goto LABEL_21;
    v17 = v11;
    while (1)
    {
      v18 = (char *)a1 + v17;
      v19 = *(int *)((char *)a1 + v17 + 8);
      if (v19 > v14)
      {
        v20 = *((_DWORD *)v18 + 3);
        goto LABEL_17;
      }
      if (v19 < v14)
      {
        v16 = v9;
        goto LABEL_21;
      }
      v20 = *(int *)((char *)a1 + v17 + 12);
      if (v20 <= v15)
        break;
LABEL_17:
      v9 -= 2;
      *((_DWORD *)v18 + 4) = v19;
      *(int *)((char *)a1 + v17 + 20) = v20;
      v17 -= 8;
      if (v17 == -16)
      {
        v16 = a1;
        goto LABEL_21;
      }
    }
    v16 = (int *)((char *)a1 + v17 + 16);
LABEL_21:
    *v16 = v14;
    v16[1] = v15;
    if (++v12 == 8)
      return v10 + 2 == a2;
LABEL_22:
    v9 = v10;
    v11 += 8;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(int *a1, int *a2, int *a3, int *a4)
{
  uint64_t result;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && a4[1] < a3[1])
  {
    *a3 = v9;
    *a4 = v10;
    v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    v12 = *a3;
    v13 = *a2;
    if (*a3 < *a2 || v13 >= v12 && a3[1] < a2[1])
    {
      *a2 = v12;
      *a3 = v13;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      v15 = *a2;
      v16 = *a1;
      if (*a2 < *a1 || v16 >= v15 && a2[1] < a1[1])
      {
        *a1 = v15;
        *a2 = v16;
        v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  uint64_t result;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && a5[1] < a4[1])
  {
    *a4 = v11;
    *a5 = v12;
    v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    v14 = *a4;
    v15 = *a3;
    if (*a4 < *a3 || v15 >= v14 && a4[1] < a3[1])
    {
      *a3 = v14;
      *a4 = v15;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      v17 = *a3;
      v18 = *a2;
      if (*a3 < *a2 || v18 >= v17 && a3[1] < a2[1])
      {
        *a2 = v17;
        *a3 = v18;
        v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        v20 = *a2;
        v21 = *a1;
        if (*a2 < *a1 || v21 >= v20 && a2[1] < a1[1])
        {
          *a1 = v20;
          *a2 = v21;
          v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *,std::pair<int,int> *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  int *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int *v19;
  int v20;
  int v21;
  int *v22;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        v16 = *a1;
        if (*v14 < *a1 || v16 >= v15 && v14[1] < a1[1])
        {
          *v14 = v16;
          *a1 = v15;
          v17 = v14[1];
          v14[1] = a1[1];
          a1[1] = v17;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v18 = (unint64_t)v8 >> 3;
      v19 = a2 - 2;
      do
      {
        v21 = *a1;
        v20 = a1[1];
        v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(a1, a4, v18);
        if (v19 == v22)
        {
          *v22 = v21;
          v22[1] = v20;
        }
        else
        {
          *v22 = *v19;
          v22[1] = v19[1];
          *v19 = v21;
          v19[1] = v20;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>((uint64_t)a1, (uint64_t)(v22 + 2), a4, ((char *)(v22 + 2) - (char *)a1) >> 3);
        }
        v19 -= 2;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (int *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(_DWORD *)(result + 8 * v7 + 4) < v8[3])
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v11 = *v8;
      if (*v8 >= *a4 && (*a4 < v11 || v8[1] >= a4[1]))
      {
        v12 = *a4;
        v13 = a4[1];
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            v15 = 2 * v7;
            v7 = (2 * v7) | 1;
            v14 = (int *)(result + 8 * v7);
            v16 = v15 + 2;
            if (v16 < a3)
            {
              v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && *(_DWORD *)(result + 8 * v7 + 4) < v14[3])
              {
                v14 += 2;
                v7 = v16;
              }
            }
            v18 = *v14;
            if (*v14 < v12 || v18 <= v12 && v14[1] < v13)
              break;
            *v8 = v18;
            v8[1] = v14[1];
            v8 = v14;
            if (v5 < v7)
              goto LABEL_22;
          }
        }
        v14 = v8;
LABEL_22:
        *v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

_DWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(_DWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = result;
    v7 = v3 + 1;
    result += 2 * v3 + 2;
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = result[2];
      if (*result < v10 || v10 >= *result && v6[2 * v7 + 1] < result[3])
      {
        result += 2;
        v3 = v9;
      }
    }
    *v6 = *result;
    v6[1] = result[1];
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<int,int> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int *v11;
  unint64_t v12;
  int v13;
  int v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (int *)(result + 8 * (v4 >> 1));
    v7 = *v6;
    v8 = *(_DWORD *)(a2 - 8);
    if (*v6 < v8 || v8 >= v7 && *(_DWORD *)(result + 8 * v5 + 4) < *(_DWORD *)(a2 - 4))
    {
      v9 = *(_DWORD *)(a2 - 8);
      v10 = *(_DWORD *)(a2 - 4);
      *(_DWORD *)(a2 - 8) = v7;
      *(_DWORD *)(a2 - 4) = v6[1];
      if (v4 >= 2)
      {
        while (1)
        {
          v12 = v5 - 1;
          v5 = (v5 - 1) >> 1;
          v11 = (int *)(result + 8 * v5);
          v13 = *v11;
          if (*v11 >= v9)
          {
            if (v13 > v9)
              break;
            v14 = *(_DWORD *)(result + 8 * v5 + 4);
            if (v14 >= v10)
              break;
          }
          else
          {
            v14 = v11[1];
          }
          *v6 = v13;
          v6[1] = v14;
          v6 = (int *)(result + 8 * v5);
          if (v12 <= 1)
            goto LABEL_12;
        }
      }
      v11 = v6;
LABEL_12:
      *v11 = v9;
      v11[1] = v10;
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::pair<int,int>,kaldi::PairHasher<int>,std::equal_to<std::pair<int,int>>,std::allocator<std::pair<int,int>>>::__emplace_unique_key_args<std::pair<int,int>,std::pair<int,int>>(uint64_t a1, int *a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v6 = *a2;
  v7 = a2[1];
  v8 = v6 + 7853 * v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v6 + 7853 * v7;
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v6 && *((_DWORD *)v12 + 5) == v7)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *v12 = *v22;
LABEL_42:
    *v22 = v12;
    goto LABEL_43;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v23 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_1AD7F2CF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::vector<std::pair<int,int>>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<std::vector<std::pair<int,int>>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::~__split_buffer(&v15);
  }
}

void sub_1AD7F2E5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<std::pair<int,int>>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::pair<int,int>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::pair<int,int>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,int>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,int>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,int>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::pair<int,int>>>>,std::reverse_iterator<std::vector<std::vector<std::pair<int,int>>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::vector<std::pair<int,int>>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::vector<std::pair<int,int>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<std::pair<int,int>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_1AD7F31D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::pair<int,int>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<int,int>>>,std::reverse_iterator<std::vector<std::pair<int,int>>*>,std::reverse_iterator<std::vector<std::pair<int,int>>*>,std::reverse_iterator<std::vector<std::pair<int,int>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::pair<int,int>>>,std::reverse_iterator<std::vector<std::pair<int,int>>*>,std::reverse_iterator<std::vector<std::pair<int,int>>*>,std::reverse_iterator<std::vector<std::pair<int,int>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,int>>>,std::reverse_iterator<std::vector<std::pair<int,int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<int,int>>>,std::reverse_iterator<std::vector<std::pair<int,int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void quasar::getNormString(char *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  std::string *p_p;
  int v6;
  __int128 v7;
  int64_t size;
  _BYTE *v9;
  std::string *v10;
  _BYTE *v11;
  __int128 v12;
  void *v13[2];
  char v14;
  uint64_t v15[3];
  std::string __p;
  void **v17;

  v3 = *((_QWORD *)a1 + 1);
  if (a1[23] >= 0)
  {
    v4 = a1[23];
  }
  else
  {
    a1 = *(char **)a1;
    v4 = v3;
  }
  p_p = &__p;
  quasar::utf8::convertToLowerCaseOrEmpty(a1, v4, &__p);
  v6 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  v7 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (size >= 1)
  {
    v9 = (char *)p_p + size;
    v10 = p_p;
    do
    {
      v11 = memchr(v10, 92, size);
      if (!v11)
        break;
      if (*v11 == 92)
      {
        if (v11 == v9 || v11 - (_BYTE *)p_p == -1)
          break;
        std::string::basic_string[abi:ne180100]<0>(v13, "\\");
        quasar::splitStringSimple((uint64_t)&__p, (uint64_t *)v13, v15);
        if (*(char *)(v15[0] + 23) < 0)
        {
          std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v15[0], *(_QWORD *)(v15[0] + 8));
        }
        else
        {
          v12 = *(_OWORD *)v15[0];
          a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v15[0] + 16);
          *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v12;
        }
        v17 = (void **)v15;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v17);
        if (v14 < 0)
          operator delete(v13[0]);
        goto LABEL_22;
      }
      v10 = (std::string *)(v11 + 1);
      size = v9 - (_BYTE *)v10;
    }
    while (v9 - (_BYTE *)v10 >= 1);
  }
  if (v6 < 0)
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)v7, *((std::string::size_type *)&v7 + 1));
  else
    *a2 = __p;
LABEL_22:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1AD7F3494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  *(_QWORD *)(v23 - 56) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 56));
  if (a14 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

void quasar::strictAlignTokensToFirstSeenPartialResults(uint64_t *a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, std::vector<int> *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  std::string *v18;
  std::string::size_type size;
  _QWORD *v20;
  _QWORD *v21;
  std::string *v22;
  std::string::size_type v23;
  _QWORD *v24;
  uint64_t v25;
  std::string::size_type v26;
  std::string::size_type v27;
  char v28;
  std::string *v29;
  std::string *v30;
  int v31;
  std::vector<int>::pointer end;
  unint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  int *v37;
  unsigned int v38;
  unsigned int v39;
  _QWORD *v41;
  clockid_t v42;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  std::string v61;
  std::string v62;
  uint64_t v63[3];
  uint64_t v64[3];
  char v65;
  uint64_t v66;

  if (*a2 == a2[1])
  {
    a4->__begin_ = 0;
    a4->__end_ = 0;
    a4->__end_cap_.__value_ = 0;
  }
  else
  {
    v65 = 1;
    kaldi::Timer::Reset((kaldi::Timer *)v64, (clockid_t)a2);
    v66 = 0;
    std::vector<int>::vector(a4, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5), quasar::kResultIndexForUnalignedToken);
    v8 = *a1;
    v7 = a1[1];
    if (v7 != *a1)
    {
      v9 = 0;
      while (1)
      {
        v10 = (uint64_t *)(v8 + 24 * v9);
        v11 = -1227133513 * ((v10[1] - *v10) >> 5);
        if (v11 >= 1)
        {
          v12 = *a2;
          v13 = a2[1];
          v14 = 0x6DB6DB6DB6DB6DB7 * ((v13 - *a2) >> 5);
          if (v14 >= v11)
          {
            v15 = (v11 - 1);
            if (a4->__begin_[v15] == -1)
              break;
          }
        }
LABEL_46:
        if (0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 3) <= ++v9)
          goto LABEL_47;
      }
      memset(v63, 0, sizeof(v63));
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v63, v12, v13, v14);
      std::vector<quasar::Token>::resize(v63, v11);
      quasar::tokens2Str(v63, &v62);
      quasar::tokens2Str(v10, &v61);
      quasar::trim(&v62);
      quasar::trim(&v61);
      if (quasar::gLogLevel >= 6)
      {
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v44 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"[TTAW] partialIndex: ", 21);
        v16 = (_QWORD *)std::ostream::operator<<();
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", subFinalResult: ", 18);
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = &v62;
        else
          v18 = (std::string *)v62.__r_.__value_.__r.__words[0];
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
        else
          size = v62.__r_.__value_.__l.__size_;
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, size);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", partialResult: ", 17);
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v22 = &v61;
        else
          v22 = (std::string *)v61.__r_.__value_.__r.__words[0];
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
        else
          v23 = v61.__r_.__value_.__l.__size_;
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)".", 1);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v44);
      }
      v25 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      else
        v26 = v62.__r_.__value_.__l.__size_;
      v27 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      v28 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v27 = v61.__r_.__value_.__l.__size_;
      if (v26 == v27)
      {
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v29 = &v61;
        else
          v29 = (std::string *)v61.__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&v62.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((_BYTE *)&v62.__r_.__value_.__s + 23))
          {
            v30 = &v62;
            while (v30->__r_.__value_.__s.__data_[0] == v29->__r_.__value_.__s.__data_[0])
            {
              v30 = (std::string *)((char *)v30 + 1);
              v29 = (std::string *)((char *)v29 + 1);
              if (!--v25)
                goto LABEL_37;
            }
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        if (!memcmp(v62.__r_.__value_.__l.__data_, v29, v62.__r_.__value_.__l.__size_))
        {
LABEL_37:
          if (quasar::gLogLevel <= 5)
          {
            v31 = v9 + a3;
          }
          else
          {
            v59 = 0u;
            v60 = 0u;
            v57 = 0u;
            v58 = 0u;
            v55 = 0u;
            v56 = 0u;
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            v49 = 0u;
            v50 = 0u;
            v47 = 0u;
            v48 = 0u;
            v45 = 0u;
            v46 = 0u;
            v44 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"[TTAW] exact match, index = ", 28);
            v31 = v9 + a3;
            std::ostream::operator<<();
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v44);
          }
          a4->__begin_[v15] = v31;
          v28 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
        }
      }
LABEL_41:
      if (v28 < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      *(_QWORD *)&v44 = v63;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
      v8 = *a1;
      v7 = a1[1];
      goto LABEL_46;
    }
LABEL_47:
    end = a4->__end_;
    v33 = (unint64_t)((char *)end - (char *)a4->__begin_) >> 2;
    v34 = (v33 - 2);
    if ((int)v33 - 2 >= 0)
    {
      v35 = end - 1;
      v36 = v34 + 1;
      v37 = &a4->__begin_[v34];
      do
      {
        v38 = *v35;
        v35 = v37;
        if ((v38 & 0x80000000) == 0)
        {
          v39 = *v37;
          if (v39 == -1 || (v39 & 0x80000000) == 0 && v38 < v39)
            *v35 = v38;
        }
        v37 = v35 - 1;
      }
      while (v36-- > 1);
    }
    if (quasar::gLogLevel > 4)
    {
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v44 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v44, (uint64_t)"alignV1: finalResultSize=", 25);
      v41 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" time=", 6);
      kaldi::Timer::GetSeconds((kaldi::Timer *)5, v42);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v44);
    }
  }
}

void sub_1AD7F3960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  uint64_t v11;
  uint64_t v12;
  void *v14;

  if (*(char *)(v12 - 177) < 0)
    operator delete(*(void **)(v12 - 200));
  if (*(char *)(v12 - 153) < 0)
    operator delete(*(void **)(v12 - 176));
  a11 = (void **)(v12 - 152);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a11);
  v14 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(a1);
}

void std::vector<quasar::Token>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0x6DB6DB6DB6DB6DB7 * ((v3 - *a1) >> 5);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<quasar::Token>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 224 * a2;
    while (v3 != v7)
      quasar::Token::~Token((void **)(v3 - 224));
    a1[1] = v7;
  }
}

uint64_t quasar::alignTokensToFirstSeenPartialResultsV3@<X0>(unsigned __int8 ***a1@<X0>, unsigned __int8 **a2@<X1>, int a3@<W2>, std::vector<int> *a4@<X8>)
{
  unsigned __int8 **v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  void **v17;
  int v18;
  int v19;
  BOOL v20;
  unint64_t v21;
  char *v22;
  _DWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  int v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  void **v43;
  int v44;
  int v45;
  BOOL v46;
  unint64_t v47;
  char *v48;
  _DWORD *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  int v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  _QWORD *v62;
  _DWORD *v63;
  _DWORD *v64;
  char *v65;
  int v66;
  char *v67;
  int v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  std::vector<int>::pointer begin;
  char *v76;
  int v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  int v91;
  char *v92;
  int v93;
  char *v94;
  unint64_t v95;
  std::vector<int>::pointer v96;
  int *end;
  unint64_t v98;
  uint64_t v99;
  int v100;
  _QWORD *v101;
  clockid_t v102;
  unsigned __int8 ***v104;
  int v105;
  unsigned __int8 **v107;
  unsigned int v109;
  void *__p;
  char *v111;
  char *v112;
  void *v113;
  _DWORD *v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  _QWORD *v133;
  _QWORD *v134;
  unint64_t v135;
  void *v136[2];
  char v137;
  uint64_t v138[2];
  _OWORD v139[2];
  int v140;
  _OWORD *v141;
  _OWORD v142[2];
  int v143;
  uint64_t v144[3];
  char v145;
  uint64_t v146;

  v145 = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v144, (clockid_t)a2);
  v146 = 0;
  memset(v142, 0, sizeof(v142));
  v143 = 1065353216;
  v141 = v142;
  memset(v139, 0, sizeof(v139));
  v140 = 1065353216;
  v138[0] = (uint64_t)v139;
  v138[1] = (uint64_t)&v141;
  std::string::basic_string[abi:ne180100]<0>(v136, "<eps>");
  v105 = a3;
  v109 = quasar::alignTokensToFirstSeenPartialResultsV3(std::vector<std::vector<quasar::Token>> const&,std::vector<quasar::Token> const&,unsigned int)::$_1::operator()(v138, (unsigned __int8 *)v136);
  v133 = 0;
  v134 = 0;
  v135 = 0;
  v6 = *a1;
  v104 = a1;
  v107 = a1[1];
  if (*a1 == v107)
  {
    v7 = 0;
    v33 = 0;
    v32 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = v134;
      if ((unint64_t)v134 >= v135)
      {
        v10 = 0xAAAAAAAAAAAAAAABLL * (v134 - v133);
        v11 = v10 + 1;
        if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v135 - (_QWORD)v133) >> 3) > v11)
          v11 = 0x5555555555555556 * ((uint64_t)(v135 - (_QWORD)v133) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v135 - (_QWORD)v133) >> 3) >= 0x555555555555555)
          v12 = 0xAAAAAAAAAAAAAAALL;
        else
          v12 = v11;
        *(_QWORD *)&v118 = &v135;
        if (v12)
          v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v135, v12);
        else
          v13 = 0;
        v14 = &v13[24 * v10];
        *(_QWORD *)&v116 = v13;
        *((_QWORD *)&v116 + 1) = v14;
        *((_QWORD *)&v117 + 1) = &v13[24 * v12];
        *(_QWORD *)v14 = 0;
        *((_QWORD *)v14 + 1) = 0;
        *((_QWORD *)v14 + 2) = 0;
        *(_QWORD *)&v117 = v14 + 24;
        std::vector<std::vector<int>>::__swap_out_circular_buffer((uint64_t *)&v133, &v116);
        v9 = v134;
        std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v116);
      }
      else
      {
        *v134 = 0;
        v8[1] = 0;
        v9 = v8 + 3;
        v8[2] = 0;
      }
      v134 = v9;
      v16 = *v6;
      v15 = v6[1];
      if (*v6 != v15)
      {
        v17 = (void **)(v9 - 3);
        do
        {
          v18 = quasar::alignTokensToFirstSeenPartialResultsV3(std::vector<std::vector<quasar::Token>> const&,std::vector<quasar::Token> const&,unsigned int)::$_1::operator()(v138, v16);
          v19 = v18;
          v20 = v18 == v109;
          v22 = (char *)*(v9 - 2);
          v21 = *(v9 - 1);
          if ((unint64_t)v22 >= v21)
          {
            v24 = (char *)*v17;
            v25 = (v22 - (_BYTE *)*v17) >> 2;
            v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v27 = v21 - (_QWORD)v24;
            if (v27 >> 1 > v26)
              v26 = v27 >> 1;
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
              v28 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v28 = v26;
            if (v28)
            {
              v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v9 - 1), v28);
              v24 = (char *)*(v9 - 3);
              v22 = (char *)*(v9 - 2);
            }
            else
            {
              v29 = 0;
            }
            v30 = &v29[4 * v25];
            *(_DWORD *)v30 = v19;
            v23 = v30 + 4;
            while (v22 != v24)
            {
              v31 = *((_DWORD *)v22 - 1);
              v22 -= 4;
              *((_DWORD *)v30 - 1) = v31;
              v30 -= 4;
            }
            *(v9 - 3) = v30;
            *(v9 - 2) = v23;
            *(v9 - 1) = &v29[4 * v28];
            if (v24)
              operator delete(v24);
          }
          else
          {
            *(_DWORD *)v22 = v18;
            v23 = v22 + 4;
          }
          v7 |= v20;
          *(v9 - 2) = v23;
          v16 += 224;
        }
        while (v16 != v15);
      }
      v6 += 3;
    }
    while (v6 != v107);
    v33 = v134;
    v32 = v135;
    if ((unint64_t)v134 < v135)
    {
      *v134 = 0;
      v33[1] = 0;
      v33[2] = 0;
      v34 = v33 + 3;
      v134 = v33 + 3;
      goto LABEL_48;
    }
  }
  v35 = 0xAAAAAAAAAAAAAAABLL * (v33 - v133);
  v36 = v35 + 1;
  if (v35 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - (_QWORD)v133) >> 3);
  if (2 * v37 > v36)
    v36 = 2 * v37;
  if (v37 >= 0x555555555555555)
    v38 = 0xAAAAAAAAAAAAAAALL;
  else
    v38 = v36;
  *(_QWORD *)&v118 = &v135;
  if (v38)
    v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v135, v38);
  else
    v39 = 0;
  v40 = &v39[24 * v35];
  *(_QWORD *)&v116 = v39;
  *((_QWORD *)&v116 + 1) = v40;
  *((_QWORD *)&v117 + 1) = &v39[24 * v38];
  *(_QWORD *)v40 = 0;
  *((_QWORD *)v40 + 1) = 0;
  *((_QWORD *)v40 + 2) = 0;
  *(_QWORD *)&v117 = v40 + 24;
  std::vector<std::vector<int>>::__swap_out_circular_buffer((uint64_t *)&v133, &v116);
  v34 = v134;
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v116);
LABEL_48:
  v134 = v34;
  v42 = *a2;
  v41 = a2[1];
  if (*a2 != v41)
  {
    v43 = (void **)(v34 - 3);
    do
    {
      v44 = quasar::alignTokensToFirstSeenPartialResultsV3(std::vector<std::vector<quasar::Token>> const&,std::vector<quasar::Token> const&,unsigned int)::$_1::operator()(v138, v42);
      v45 = v44;
      v46 = v44 == v109;
      v48 = (char *)*(v34 - 2);
      v47 = *(v34 - 1);
      if ((unint64_t)v48 >= v47)
      {
        v50 = (char *)*v43;
        v51 = (v48 - (_BYTE *)*v43) >> 2;
        v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v53 = v47 - (_QWORD)v50;
        if (v53 >> 1 > v52)
          v52 = v53 >> 1;
        if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
          v54 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v54 = v52;
        if (v54)
        {
          v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v34 - 1), v54);
          v50 = (char *)*(v34 - 3);
          v48 = (char *)*(v34 - 2);
        }
        else
        {
          v55 = 0;
        }
        v56 = &v55[4 * v51];
        *(_DWORD *)v56 = v45;
        v49 = v56 + 4;
        while (v48 != v50)
        {
          v57 = *((_DWORD *)v48 - 1);
          v48 -= 4;
          *((_DWORD *)v56 - 1) = v57;
          v56 -= 4;
        }
        *(v34 - 3) = v56;
        *(v34 - 2) = v49;
        *(v34 - 1) = &v55[4 * v54];
        if (v50)
          operator delete(v50);
      }
      else
      {
        *(_DWORD *)v48 = v44;
        v49 = v48 + 4;
      }
      v7 |= v46;
      *(v34 - 2) = v49;
      v42 += 224;
    }
    while (v42 != v41);
  }
  if ((v7 & 1) != 0)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v116);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v116, (uint64_t)"Input contains epsilon. Skipping alignment and returning all unaligned", 70);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v116);
    }
    std::vector<int>::vector(a4, 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5), quasar::kResultIndexForUnalignedToken);
    goto LABEL_150;
  }
  std::vector<int>::vector(a4, (uint64_t)(v133[1] - *v133) >> 2);
  v113 = 0;
  v114 = 0;
  v115 = 0;
  v58 = v133;
  if (0xAAAAAAAAAAAAAAABLL * (v134 - v133) >= 2)
  {
    v59 = 0;
    v60 = &v112;
    v61 = 1;
    while (1)
    {
      v62 = &v58[3 * v61];
      kaldi::LevenshteinAlignmentWithPrefixOptimization<int>(&v58[3 * v59], v62, v109, (char **)&v113, 0);
      __p = 0;
      v111 = 0;
      v112 = 0;
      v64 = v113;
      v63 = v114;
      if (v113 != v114)
        break;
      v94 = 0;
      v65 = 0;
LABEL_134:
      v95 = (v65 - v94) >> 2;
      if (v95 != (uint64_t)(v58[3 * v61 + 1] - *v62) >> 2)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v116);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v116, (uint64_t)"newOrigins.size() == b.size()", 29);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v116);
      }
      if (&__p != (void **)a4)
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)a4, v94, (uint64_t)v65, v95);
        v94 = (char *)__p;
      }
      if (v94)
      {
        v111 = v94;
        operator delete(v94);
      }
      ++v59;
      ++v61;
      v58 = v133;
      if (0xAAAAAAAAAAAAAAABLL * (v134 - v133) <= v61)
        goto LABEL_140;
    }
    v65 = 0;
    v66 = 0;
    while (*v64 != v109)
    {
      v68 = v64[1];
      if (v68 != v109)
      {
        if (*v64 == v68)
        {
          begin = a4->__begin_;
          if (v66 >= (unint64_t)(a4->__end_ - a4->__begin_))
            std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
          if (v65 < v112)
          {
            *(_DWORD *)v65 = begin[v66];
            v67 = v65 + 4;
            goto LABEL_123;
          }
          v84 = (uint64_t)v60;
          v78 = (char *)__p;
          v85 = (v65 - (_BYTE *)__p) >> 2;
          v86 = v85 + 1;
          if ((unint64_t)(v85 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v87 = v112 - (_BYTE *)__p;
          if ((v112 - (_BYTE *)__p) >> 1 > v86)
            v86 = v87 >> 1;
          if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL)
            v88 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v88 = v86;
          if (v88)
          {
            v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v84, v88);
            v78 = (char *)__p;
            v65 = v111;
          }
          else
          {
            v89 = 0;
          }
          v92 = &v89[4 * v85];
          *(_DWORD *)v92 = begin[v66];
          v67 = v92 + 4;
          v60 = (_QWORD *)v84;
          while (v65 != v78)
          {
            v93 = *((_DWORD *)v65 - 1);
            v65 -= 4;
            *((_DWORD *)v92 - 1) = v93;
            v92 -= 4;
          }
          __p = v92;
          v111 = v67;
          v112 = &v89[4 * v88];
          if (!v78)
            goto LABEL_123;
LABEL_122:
          operator delete(v78);
          goto LABEL_123;
        }
        if (v65 < v112)
        {
          *(_DWORD *)v65 = v61;
          v67 = v65 + 4;
          goto LABEL_123;
        }
        v78 = (char *)__p;
        v79 = (v65 - (_BYTE *)__p) >> 2;
        v80 = v79 + 1;
        if ((unint64_t)(v79 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v81 = v112 - (_BYTE *)__p;
        if ((v112 - (_BYTE *)__p) >> 1 > v80)
          v80 = v81 >> 1;
        if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL)
          v82 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v82 = v80;
        if (v82)
        {
          v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v60, v82);
          v78 = (char *)__p;
          v65 = v111;
        }
        else
        {
          v83 = 0;
        }
        v90 = &v83[4 * v79];
        *(_DWORD *)v90 = v61;
        v67 = v90 + 4;
        while (v65 != v78)
        {
          v91 = *((_DWORD *)v65 - 1);
          v65 -= 4;
          *((_DWORD *)v90 - 1) = v91;
          v90 -= 4;
        }
        __p = v90;
        v111 = v67;
        v112 = &v83[4 * v82];
        if (v78)
          goto LABEL_122;
LABEL_123:
        v111 = v67;
        ++v66;
LABEL_124:
        v65 = v67;
        goto LABEL_125;
      }
      ++v66;
LABEL_125:
      v64 += 2;
      if (v64 == v63)
      {
        v94 = (char *)__p;
        v62 = &v58[3 * v61];
        goto LABEL_134;
      }
    }
    if (v65 >= v112)
    {
      v69 = (char *)__p;
      v70 = (v65 - (_BYTE *)__p) >> 2;
      v71 = v70 + 1;
      if ((unint64_t)(v70 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v72 = v112 - (_BYTE *)__p;
      if ((v112 - (_BYTE *)__p) >> 1 > v71)
        v71 = v72 >> 1;
      if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
        v73 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v73 = v71;
      if (v73)
      {
        v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v60, v73);
        v69 = (char *)__p;
        v65 = v111;
      }
      else
      {
        v74 = 0;
      }
      v76 = &v74[4 * v70];
      *(_DWORD *)v76 = v61;
      v67 = v76 + 4;
      while (v65 != v69)
      {
        v77 = *((_DWORD *)v65 - 1);
        v65 -= 4;
        *((_DWORD *)v76 - 1) = v77;
        v76 -= 4;
      }
      __p = v76;
      v111 = v67;
      v112 = &v74[4 * v73];
      if (v69)
        operator delete(v69);
    }
    else
    {
      *(_DWORD *)v65 = v61;
      v67 = v65 + 4;
    }
    v111 = v67;
    goto LABEL_124;
  }
LABEL_140:
  v96 = a4->__begin_;
  end = a4->__end_;
  if (a4->__begin_ != end)
  {
    v98 = 0xAAAAAAAAAAAAAAABLL * (v104[1] - *v104);
    do
    {
      v99 = *v96;
      if (v98 == v99)
        v100 = -1;
      else
        v100 = v99 + v105;
      *v96++ = v100;
    }
    while (v96 != end);
  }
  if (quasar::gLogLevel > 4)
  {
    v131 = 0u;
    v132 = 0u;
    v129 = 0u;
    v130 = 0u;
    v127 = 0u;
    v128 = 0u;
    v125 = 0u;
    v126 = 0u;
    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    v116 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v116);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v116, (uint64_t)"alignV3: finalResultSize=", 25);
    v101 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)" time=", 6);
    kaldi::Timer::GetSeconds((kaldi::Timer *)5, v102);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v116);
  }
  if (v113)
  {
    v114 = v113;
    operator delete(v113);
  }
LABEL_150:
  *(_QWORD *)&v116 = &v133;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v116);
  if (v137 < 0)
    operator delete(v136[0]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v139);
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v142);
}

uint64_t quasar::alignTokensToFirstSeenPartialResultsV3(std::vector<std::vector<quasar::Token>> const&,std::vector<quasar::Token> const&,unsigned int)::$_1::operator()(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  std::string __p;
  unsigned __int8 *v13;

  v4 = (uint64_t *)a1[1];
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)*v4, a2);
  if (v5)
  {
    if ((char)v5[63] < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v5 + 5), *((_QWORD *)v5 + 6));
    else
      __p = *(std::string *)(v5 + 40);
  }
  else
  {
    quasar::getNormString((char *)a2, &__p);
    v6 = *v4;
    v13 = a2;
    v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v13);
    std::string::operator=((std::string *)(v7 + 40), &__p);
  }
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)*a1, (unsigned __int8 *)&__p);
  if (!v8)
  {
    v9 = *a1;
    v13 = *(unsigned __int8 **)(*a1 + 24);
    v8 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::string&,unsigned long>(v9, (unsigned __int8 *)&__p, (uint64_t)&__p, &v13);
  }
  v10 = *((unsigned int *)v8 + 10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1AD7F467C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::LevenshteinAlignmentWithPrefixOptimization<int>(uint64_t *a1, _QWORD *a2, unsigned int a3, char **a4, int a5)
{
  char **v5;
  unsigned int v6;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  int v30;
  void *__p;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  _BYTE *v40;
  uint64_t v41;
  void *v42;
  uint64_t *v43;
  char *v44;
  void *__src;
  _QWORD v46[3];

  v5 = a4;
  v6 = a3;
  v46[2] = *MEMORY[0x1E0C80C00];
  if ((uint64_t)(a2[1] - *a2) >> 2 >= (unint64_t)((a1[1] - *a1) >> 2))
    v9 = (a1[1] - *a1) >> 2;
  else
    v9 = (uint64_t)(a2[1] - *a2) >> 2;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  if ((int)v9 < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    v30 = a5;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = *a1;
      if (v11 >= (a1[1] - *a1) >> 2 || v11 >= (uint64_t)(a2[1] - *a2) >> 2)
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      v13 = *(_DWORD *)(v12 + 4 * v11);
      if (v13 != *(_DWORD *)(*a2 + 4 * v11))
        break;
      if (v10 >= (uint64_t *)v44)
      {
        v14 = ((char *)v10 - (_BYTE *)v42) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = (v44 - (_BYTE *)v42) >> 2;
        if (v15 <= v14 + 1)
          v15 = v14 + 1;
        if ((unint64_t)(v44 - (_BYTE *)v42) >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v44, v16);
        v19 = (uint64_t *)&v17[8 * v14];
        *(_DWORD *)v19 = *(_DWORD *)(v12 + 4 * v11);
        *((_DWORD *)v19 + 1) = *(_DWORD *)(v12 + 4 * v11);
        v21 = (uint64_t *)v42;
        v20 = v43;
        v22 = v19;
        if (v43 != v42)
        {
          do
          {
            v23 = *--v20;
            *--v22 = v23;
          }
          while (v20 != v21);
          v20 = (uint64_t *)v42;
        }
        v10 = v19 + 1;
        v42 = v22;
        v43 = v19 + 1;
        v44 = &v17[8 * v18];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *(_DWORD *)v10 = v13;
        *((_DWORD *)v10++ + 1) = *(_DWORD *)(v12 + 4 * v11);
      }
      v43 = v10;
      if (++v11 == v9)
      {
        LODWORD(v11) = v9;
        break;
      }
    }
    v5 = a4;
    a5 = v30;
    v6 = a3;
  }
  v39 = 0;
  v40 = 0;
  v41 = 0;
  if (a5)
    __src = (void *)0x200000001;
  else
    __src = (void *)0x100000002;
  LODWORD(v46[0]) = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v39, (char *)&__src, (uint64_t)v46 + 4, 3uLL);
  v24 = a1[1];
  v25 = (const void *)(*a1 + 4 * v11);
  v46[0] = 0;
  v46[1] = 0;
  __src = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__src, v25, v24, (v24 - (uint64_t)v25) >> 2);
  v26 = a2[1];
  v27 = (const void *)(*a2 + 4 * v11);
  v37 = 0;
  v38 = 0;
  v36 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v36, v27, v26, (v26 - (uint64_t)v27) >> 2);
  __p = 0;
  v34 = 0;
  v35 = 0;
  std::vector<kaldi::LevenshteinOp::Value>::__init_with_size[abi:ne180100]<kaldi::LevenshteinOp::Value*,kaldi::LevenshteinOp::Value*>(&__p, v39, (uint64_t)v40, (v40 - (_BYTE *)v39) >> 2);
  v28 = kaldi::LevenshteinAlignment<int>((uint64_t *)&__src, (int **)&v36, v6, v5, (char *)&__p);
  if (__p)
  {
    v34 = __p;
    operator delete(__p);
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  if (__src)
  {
    v46[0] = __src;
    operator delete(__src);
  }
  std::vector<std::pair<int,int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<int,int>*>,std::__wrap_iter<std::pair<int,int>*>>((uint64_t)v5, (uint64_t)*v5, (uint64_t *)v42, v43, ((char *)v43 - (_BYTE *)v42) >> 3);
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  if (v42)
  {
    v43 = (uint64_t *)v42;
    operator delete(v42);
  }
  return v28;
}

void sub_1AD7F49D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::string&,unsigned long>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[3];

  v9 = (_QWORD *)(a1 + 24);
  v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node_hash<std::string&,unsigned long>(a1, v11, a3, a4, (uint64_t)v27);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v23);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12)
          v25 %= v12;
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  i = (unsigned __int8 *)v27[0];
  ++*v9;
  return i;
}

void sub_1AD7F4CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node_hash<std::string&,unsigned long>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char *v10;
  std::string *v11;

  v9 = a1 + 16;
  v10 = (char *)operator new(0x30uLL);
  *(_QWORD *)(a5 + 8) = v9;
  *(_QWORD *)a5 = v10;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = a2;
  v11 = (std::string *)(v10 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v10 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_DWORD *)v10 + 10) = *a4;
  *(_BYTE *)(a5 + 16) = 1;
}

void sub_1AD7F4D7C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_1AD7F5008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  *((_DWORD *)v8 + 10) = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1AD7F50B8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::vector<quasar::Token>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  quasar::Token *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  quasar::Token *v13;
  uint64_t v14;
  quasar::Token *v15;
  uint64_t v16;
  quasar::Token *v17;
  _QWORD v18[2];
  quasar::Token *v19;
  char *v20;
  uint64_t v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(quasar::Token **)(v4 - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - (uint64_t)v7) >> 5) >= a2)
  {
    if (a2)
    {
      v13 = (quasar::Token *)((char *)v7 + 224 * a2);
      v14 = 224 * a2;
      do
      {
        quasar::Token::Token(v7);
        v7 = (quasar::Token *)((char *)v7 + 224);
        v14 -= 224;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v7 - *a1) >> 5);
    v9 = v8 + a2;
    if (v8 + a2 > 0x124924924924924)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 5);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x92492492492492)
      v11 = 0x124924924924924;
    else
      v11 = v9;
    v21 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>(v4, v11);
    else
      v12 = 0;
    v15 = (quasar::Token *)&v12[224 * v8];
    v18[0] = v12;
    v18[1] = v15;
    v19 = v15;
    v20 = &v12[224 * v11];
    v16 = 224 * a2;
    v17 = (quasar::Token *)((char *)v15 + 224 * a2);
    do
    {
      quasar::Token::Token(v15);
      v15 = (quasar::Token *)((char *)v15 + 224);
      v16 -= 224;
    }
    while (v16);
    v19 = v17;
    std::vector<quasar::Token>::__swap_out_circular_buffer(a1, v18);
    std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)v18);
  }
}

void sub_1AD7F5238(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::LevenshteinAlignment<int>(uint64_t *a1, int **a2, unsigned int a3, char **a4, char *a5)
{
  unsigned int *v9;
  unsigned int *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  int *v17;
  int *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  std::vector<unsigned int>::size_type v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int *v35;
  _DWORD *v36;
  int *v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unsigned int *i;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int **v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void **p_src;
  int v86;
  uint64_t __src;
  int v88;
  _BYTE v89[276];

  *(_QWORD *)&v89[260] = *MEMORY[0x1E0C80C00];
  v9 = *(unsigned int **)a5;
  v10 = (unsigned int *)*((_QWORD *)a5 + 1);
  if (*(unsigned int **)a5 == v10)
  {
    __src = 0x100000000;
    v88 = 2;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a5, (char *)&__src, (uint64_t)v89, 3uLL);
    v9 = *(unsigned int **)a5;
    v10 = (unsigned int *)*((_QWORD *)a5 + 1);
  }
  if (v9 == v10)
    goto LABEL_97;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = a3;
  do
  {
    v15 = *v9;
    if (*v9 == 2)
    {
      ++v13;
    }
    else if (v15 == 1)
    {
      ++v12;
    }
    else
    {
      if (v15)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&__src, "Unexpected op in backtrace_precedence");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
      }
      ++v11;
    }
    ++v9;
  }
  while (v9 != v10);
  if (v11 != 1 || v12 != 1 || v13 != 1)
  {
LABEL_97:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__src, "numSubOrOk == 1 && numDel == 1 && numIns == 1");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
  }
  a4[1] = *a4;
  v83 = a1[1];
  v81 = *a1;
  v16 = (v83 - *a1) >> 2;
  v18 = *a2;
  v17 = a2[1];
  std::vector<std::vector<int>>::vector(&__src, v16 + 1);
  v80 = (unsigned int **)a5;
  v19 = 0;
  v20 = 0;
  v21 = v16;
  v82 = v17 - v18;
  v22 = v82 + 1;
  do
  {
    std::vector<int>::resize((std::vector<unsigned int> *)(__src + v19), v22);
    ++v20;
    v19 += 24;
  }
  while (v20 <= v16);
  v23 = 0;
  v24 = __src;
  v25 = *(int **)__src;
  if (v22 <= 1)
    v26 = 1;
  else
    v26 = v82 + 1;
  do
  {
    v25[v23] = v23;
    ++v23;
  }
  while (v26 != v23);
  if (v83 != v81)
  {
    v27 = *a1;
    v28 = *a2;
    v29 = 2;
    if (v22 <= 2)
      v30 = 2;
    else
      v30 = v82 + 1;
    if (v16 + 1 > 2)
      v29 = v16 + 1;
    v31 = *v25;
    v32 = v30 - 1;
    v33 = 1;
    do
    {
      ++v31;
      v34 = *(int **)(v24 + 24 * v33);
      *v34 = v31;
      if (v17 != v18)
      {
        v35 = v25 + 1;
        v36 = v34 + 1;
        v37 = v28;
        v38 = v32;
        v39 = v31;
        do
        {
          v40 = *(v35 - 1);
          v41 = *v37++;
          if (*(_DWORD *)(v27 + 4 * (v33 - 1)) != v41)
            ++v40;
          v43 = *v35++;
          v42 = v43;
          if (v39 >= v43)
            v39 = v42;
          if (v39 + 1 < v40)
            ++v39;
          else
            v39 = v40;
          *v36++ = v39;
          --v38;
        }
        while (v38);
      }
      ++v33;
      v25 = v34;
    }
    while (v33 != v29);
  }
  if (v83 != v81 || v17 != v18)
  {
    v45 = v17 - v18;
    while (1)
    {
      v46 = v45;
      if (v21)
      {
        if (!v45)
        {
          v45 = 0;
          v47 = v21 - 1;
LABEL_69:
          v58 = *(unsigned int *)(*a1 + 4 * v47);
          v21 = v47;
          goto LABEL_70;
        }
        v47 = v21 - 1;
        v48 = (_QWORD *)(__src + 24 * v21);
        v49 = *(v48 - 3);
        v50 = *(_DWORD *)(v49 + 4 * (v45 - 1));
        if (*(_DWORD *)(*a1 + 4 * (v21 - 1)) != (*a2)[v45 - 1])
          ++v50;
        LODWORD(p_src) = v50;
        v51 = *(_DWORD *)(v49 + 4 * v45);
        HIDWORD(p_src) = v51 + 1;
        v52 = *(_DWORD *)(*v48 + 4 * (v45 - 1));
        v86 = v52 + 1;
        if (v52 >= v51)
          v53 = v51 + 1;
        else
          v53 = v52 + 1;
        if (v53 >= v50)
          v53 = v50;
        for (i = *v80; ; ++i)
        {
          if (i == v80[1])
          {
            v47 = 0;
            v45 = 0;
            goto LABEL_68;
          }
          v55 = *i;
          if (*((_DWORD *)&p_src + v55) == v53)
            break;
        }
        if ((_DWORD)v55 == 1)
          v56 = v21 - 1;
        else
          v56 = v21;
        if ((_DWORD)v55 == 1)
          v57 = v45;
        else
          v57 = v45 - 1;
        if ((_DWORD)v55)
        {
          v47 = v56;
          v45 = v57;
        }
        else
        {
          --v45;
        }
      }
      else
      {
        v47 = 0;
        --v45;
      }
LABEL_68:
      v58 = v14;
      if (v47 != v21)
        goto LABEL_69;
LABEL_70:
      v59 = v14;
      if (v45 != v46)
        v59 = (*a2)[v45];
      v60 = v58 | (v59 << 32);
      v62 = (uint64_t *)a4[1];
      v61 = (unint64_t)a4[2];
      if ((unint64_t)v62 >= v61)
      {
        v63 = ((char *)v62 - *a4) >> 3;
        if ((unint64_t)(v63 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v64 = v61 - (_QWORD)*a4;
        v65 = v64 >> 2;
        if (v64 >> 2 <= (unint64_t)(v63 + 1))
          v65 = v63 + 1;
        if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
          v66 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v66 = v65;
        if (v66)
          v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a4 + 2), v66);
        else
          v67 = 0;
        v68 = &v67[8 * v63];
        *(_QWORD *)v68 = v60;
        v44 = v68 + 8;
        v70 = *a4;
        v69 = a4[1];
        if (v69 != *a4)
        {
          do
          {
            v71 = *((_QWORD *)v69 - 1);
            v69 -= 8;
            *((_QWORD *)v68 - 1) = v71;
            v68 -= 8;
          }
          while (v69 != v70);
          v69 = *a4;
        }
        *a4 = v68;
        a4[1] = v44;
        a4[2] = &v67[8 * v66];
        if (v69)
          operator delete(v69);
      }
      else
      {
        *v62 = v60;
        v44 = (char *)(v62 + 1);
      }
      a4[1] = v44;
      if (!(v21 | v45))
        goto LABEL_89;
    }
  }
  v44 = a4[1];
LABEL_89:
  v72 = *a4;
  v73 = v44 - *a4;
  if ((unint64_t)v73 >= 0x10)
  {
    v74 = v73 >> 3;
    v75 = (unint64_t)(v73 >> 3) >> 1;
    if (v75 <= 1)
      v75 = 1;
    v76 = &v72[8 * v74 - 8];
    do
    {
      v77 = *(_QWORD *)v72;
      *(_QWORD *)v72 = *(_QWORD *)v76;
      v72 += 8;
      *(_QWORD *)v76 = v77;
      v76 -= 8;
      --v75;
    }
    while (v75);
  }
  v78 = *(unsigned int *)(*(_QWORD *)(__src + 24 * v16) + 4 * v82);
  p_src = (void **)&__src;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&p_src);
  return v78;
}

void sub_1AD7F578C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<kaldi::LevenshteinOp::Value>::__init_with_size[abi:ne180100]<kaldi::LevenshteinOp::Value*,kaldi::LevenshteinOp::Value*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1AD7F5824(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<std::pair<int,int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<int,int>*>,std::__wrap_iter<std::pair<int,int>*>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void *__p;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;

  v5 = *(uint64_t **)a1;
  v6 = a2 - *(_QWORD *)a1;
  v7 = (uint64_t *)(*(_QWORD *)a1 + (v6 & 0xFFFFFFFFFFFFFFF8));
  if (a5 < 1)
    return v7;
  v9 = a3;
  v11 = v6 >> 3;
  v14 = *(_QWORD *)(a1 + 16);
  v12 = a1 + 16;
  v13 = v14;
  v15 = *(_QWORD *)(v12 - 8);
  if (a5 > (uint64_t)(v14 - v15) >> 3)
  {
    v16 = a5 + ((uint64_t)(v15 - (_QWORD)v5) >> 3);
    if (v16 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v17 = v13 - (_QWORD)v5;
    v18 = v17 >> 2;
    if (v17 >> 2 <= v16)
      v18 = v16;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    v45 = v12;
    if (v19)
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v12, v19);
    else
      v20 = 0;
    v36 = &v20[8 * v11];
    __p = v20;
    v42 = v36;
    v44 = &v20[8 * v19];
    v37 = 8 * a5;
    v38 = &v36[8 * a5];
    do
    {
      v39 = *v9++;
      *(_QWORD *)v36 = v39;
      v36 += 8;
      v37 -= 8;
    }
    while (v37);
    v43 = v38;
    v7 = std::vector<std::pair<int,int>>::__swap_out_circular_buffer((uint64_t **)a1, &__p, v7);
    if (v43 != v42)
      v43 += (v42 - v43 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v7;
  }
  v21 = (uint64_t)(v15 - (_QWORD)v7) >> 3;
  if (v21 >= a5)
  {
    v22 = &a3[a5];
    v23 = *(_QWORD **)(v12 - 8);
LABEL_18:
    v27 = &v7[a5];
    v28 = &v23[-a5];
    v29 = v23;
    if ((unint64_t)v28 < v15)
    {
      v29 = v23;
      do
      {
        v30 = *v28++;
        *v29++ = v30;
      }
      while ((unint64_t)v28 < v15);
    }
    *(_QWORD *)(a1 + 8) = v29;
    if (v23 != v27)
    {
      v31 = 8 * (v23 - v27);
      v32 = (_DWORD *)v23 - 1;
      v33 = (uint64_t)&v5[v11 - 1] + 4;
      do
      {
        *(v32 - 1) = *(_DWORD *)(v33 + v31 - 4);
        *v32 = *(_DWORD *)(v33 + v31);
        v32 -= 2;
        v31 -= 8;
      }
      while (v31);
    }
    if (v22 != a3)
    {
      v34 = v7;
      do
      {
        v35 = *v9++;
        *v34++ = v35;
      }
      while (v9 != v22);
    }
    return v7;
  }
  v22 = &a3[v21];
  v23 = *(_QWORD **)(v12 - 8);
  if (v22 != a4)
  {
    v24 = v22;
    v25 = *(_QWORD **)(v12 - 8);
    do
    {
      v26 = *v24++;
      *v25++ = v26;
      ++v23;
    }
    while (v24 != a4);
  }
  *(_QWORD *)(a1 + 8) = v23;
  if ((uint64_t)(v15 - (_QWORD)v7) >= 1)
    goto LABEL_18;
  return v7;
}

void sub_1AD7F5A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<std::pair<int,int>>::__swap_out_circular_buffer(uint64_t **a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;

  result = (uint64_t *)a2[1];
  v5 = *a1;
  v6 = result;
  if (*a1 != a3)
  {
    v7 = a3;
    v6 = (uint64_t *)a2[1];
    do
    {
      v8 = *--v7;
      *--v6 = v8;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = a1[1];
  v10 = (_QWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      v11 = *a3++;
      *v10++ = v11;
    }
    while (a3 != v9);
    v6 = (uint64_t *)a2[1];
  }
  a2[2] = v10;
  v12 = *a1;
  *a1 = v6;
  a2[1] = v12;
  v13 = a1[1];
  a1[1] = (uint64_t *)a2[2];
  a2[2] = v13;
  v14 = a1[2];
  a1[2] = (uint64_t *)a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

void TRegExpCompiler::TRegExpCompiler(TRegExpCompiler *this, const TLocaleInfo *a2)
{
  TAllocator *v4;
  TAllocator *v5;
  _QWORD *v6;

  *(_QWORD *)this = &off_1E5D16808;
  v4 = (TRegExpCompiler *)((char *)this + 232);
  v5 = (TRegExpCompiler *)((char *)this + 8);
  TFsa::TFsa((TRegExpCompiler *)((char *)this + 8));
  TAllocator::TAllocator(v4, 2048);
  *((_QWORD *)this + 34) = a2;
  v6 = TFsa::newState(v5, 0);
  TFsa::addExtremity((uint64_t)v5, (uint64_t)v6, 0);
}

void sub_1AD7F5B84(_Unwind_Exception *a1)
{
  TFsa *v1;

  TFsa::~TFsa(v1);
  _Unwind_Resume(a1);
}

void TRegExpCompiler::~TRegExpCompiler(TRegExpCompiler *this)
{
  *(_QWORD *)this = &off_1E5D16808;
  TAllocator::clear((TRegExpCompiler *)((char *)this + 232));
  TFsa::~TFsa((TRegExpCompiler *)((char *)this + 8));
}

{
  TRegExpCompiler::~TRegExpCompiler(this);
  JUMPOUT(0x1AF44D190);
}

_QWORD *TRegExpCompiler::mergeStateData(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  _QWORD *result;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  v3 = a2 + 1;
  v2 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
    return 0;
  v5 = 0;
  do
  {
    v6 = (_QWORD *)v2[4];
    if (v6)
      v5 += *v6;
    v7 = (_QWORD *)v2[1];
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = (_QWORD *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (_QWORD *)v2[2];
        v9 = *v8 == (_QWORD)v2;
        v2 = v8;
      }
      while (!v9);
    }
    v2 = v8;
  }
  while (v8 != v3);
  if (!v5)
    return 0;
  if ((unint64_t)(v5 + 1) >> 61)
    v10 = -1;
  else
    v10 = 8 * (v5 + 1);
  result = TAllocator::allocate((TAllocator *)(a1 + 232), v10);
  *result = v5;
  v12 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != v3)
  {
    v13 = 1;
    do
    {
      v14 = (unint64_t *)v12[4];
      if (v14 && *v14)
      {
        v15 = 0;
        do
        {
          v16 = v15 + 1;
          result[v13 + v15] = v14[v15 + 1];
          v15 = v16;
        }
        while (v16 < *v14);
        v13 += v16;
      }
      v17 = (_QWORD *)v12[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v12[2];
          v9 = *v18 == (_QWORD)v12;
          v12 = v18;
        }
        while (!v9);
      }
      v12 = v18;
    }
    while (v18 != v3);
  }
  return result;
}

_QWORD *TRegExpCompiler::compileCharacter(uint64_t a1, unsigned int **a2, int a3, uint64_t a4, uint64_t a5)
{
  _DWORD *v10;
  uint64_t v11;
  __int32 v12;
  __int32 v13;
  TAllocator *v14;
  _QWORD *v15;
  uint64_t v16;
  TAllocator *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *result;
  std::exception_vtbl *v23;
  _QWORD *exception;
  void *__p[2];
  char v26;
  std::exception v27[3];
  char v28;

  v10 = *a2;
  v11 = **a2;
  if ((_DWORD)v11 != 92)
    goto LABEL_12;
  v13 = v10[1];
  v12 = v13;
  *a2 = v10 + 1;
  if (!v13)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "search pattern not terminated");
    TException::TException(v27, (__int128 *)__p);
    v27[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
    if (v28 >= 0)
      v23 = (std::exception_vtbl *)&v27[1];
    else
      v23 = v27[1].__vftable;
    conditionalAssert((const char *)v23, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 336);
    TException::~TException(v27);
    if (v26 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v27, "search pattern not terminated");
    TException::TException(exception, (__int128 *)v27);
    *exception = &unk_1E5D16AB0;
  }
  if (wcschr((__int32 *)"a", v12))
  {
    v14 = (TAllocator *)(a1 + 8);
    v15 = TFsa::newState(v14, 0);
    TFsa::newTrans(v14, a4, (uint64_t)v15, 0xFFFFLL);
    if (**a2)
      v16 = **a2;
    else
      v16 = -1;
    v17 = v14;
    v18 = (uint64_t)v15;
LABEL_22:
    v19 = a5;
    goto LABEL_23;
  }
  v11 = **a2;
  if ((_DWORD)v11 == 116)
  {
    v17 = (TAllocator *)(a1 + 8);
    v18 = a4;
    v19 = a5;
    v16 = 9;
    goto LABEL_23;
  }
  if ((_DWORD)v11 == 114)
  {
    v17 = (TAllocator *)(a1 + 8);
    v18 = a4;
    v19 = a5;
    v16 = 13;
    goto LABEL_23;
  }
  if ((_DWORD)v11 != 110)
  {
LABEL_12:
    v20 = *(_QWORD *)(a1 + 272);
    if (a3 == 2)
    {
      v21 = *(_QWORD *)(v20 + 32);
      if (v21 && (unint64_t)(int)v11 < 0x10000)
        LODWORD(v11) = *(_DWORD *)(v21 + 4 * (int)v11);
    }
    else if (a3 == 1)
    {
      LODWORD(v11) = TLocaleInfo::toLower(v20, v11);
    }
    if ((_DWORD)v11)
      v16 = v11;
    else
      v16 = -1;
    v17 = (TAllocator *)(a1 + 8);
    v18 = a4;
    goto LABEL_22;
  }
  v17 = (TAllocator *)(a1 + 8);
  v18 = a4;
  v19 = a5;
  v16 = 10;
LABEL_23:
  result = TFsa::newTrans(v17, v18, v19, v16);
  ++*a2;
  return result;
}

void sub_1AD7F5F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

uint64_t TException::what(TException *this)
{
  uint64_t result;

  result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

_QWORD *TRegExpCompiler::compileRange(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v28;
  _QWORD *v29;
  std::exception_vtbl *v30;
  _QWORD *exception;
  __int128 __p;
  char v33;
  std::exception v34[3];
  char v35;
  _QWORD v36[33];

  v9 = a3;
  v10 = a2;
  v12 = *(_QWORD *)(a1 + 272);
  if (a4 == 2)
  {
    v15 = *(_QWORD *)(v12 + 32);
    v13 = a2;
    v14 = a3;
    if (v15)
    {
      v13 = a2;
      if ((unint64_t)(int)a2 < 0x10000)
        v13 = *(_DWORD *)(v15 + 4 * (int)a2);
      if ((unint64_t)(int)a3 >= 0x10000)
        v14 = a3;
      else
        v14 = *(_DWORD *)(v15 + 4 * (int)a3);
    }
  }
  else
  {
    v13 = a2;
    v14 = a3;
    if (a4 == 1)
    {
      v13 = TLocaleInfo::toLower(v12, a2);
      v14 = TLocaleInfo::toLower(*(_QWORD *)(a1 + 272), v9);
    }
  }
  if (v13 > v14)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"invalid [", 9);
    v28 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)",", 1);
    v29 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"] range", 7);
    std::stringbuf::str();
    TException::TException(v34, &__p);
    v34[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
    if (v35 >= 0)
      v30 = (std::exception_vtbl *)&v34[1];
    else
      v30 = v34[1].__vftable;
    conditionalAssert((const char *)v30, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 386);
    TException::~TException(v34);
    if (v33 < 0)
      operator delete((void *)__p);
    exception = __cxa_allocate_exception(0x20uLL);
    std::stringbuf::str();
    TException::TException(exception, (__int128 *)v34);
    *exception = &unk_1E5D16AB0;
  }
  v16 = TFsa::newState((TAllocator *)(a1 + 8), 0);
  TFsa::newTrans((TAllocator *)(a1 + 8), a5, (uint64_t)v16, 0xFFFFLL);
  v17 = TFsa::newState((TAllocator *)(a1 + 8), 0);
  TFsa::newTrans((TAllocator *)(a1 + 8), (uint64_t)v16, (uint64_t)v17, 114);
  v18 = TFsa::newState((TAllocator *)(a1 + 8), 0);
  v19 = *(_QWORD *)(a1 + 272);
  if (a4 == 2)
  {
    v22 = *(_QWORD *)(v19 + 32);
    if (v22 && (unint64_t)(int)v10 < 0x10000)
      LODWORD(v10) = *(_DWORD *)(v22 + 4 * (int)v10);
    if ((_DWORD)v10)
      v23 = v10;
    else
      v23 = -1;
    TFsa::newTrans((TAllocator *)(a1 + 8), (uint64_t)v17, (uint64_t)v18, v23);
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 272) + 32);
    if (v24 && (unint64_t)(int)v9 < 0x10000)
      LODWORD(v9) = *(_DWORD *)(v24 + 4 * (int)v9);
  }
  else if (a4 == 1)
  {
    v20 = TLocaleInfo::toLower(v19, v10);
    if (v20)
      v21 = v20;
    else
      v21 = -1;
    TFsa::newTrans((TAllocator *)(a1 + 8), (uint64_t)v17, (uint64_t)v18, v21);
    LODWORD(v9) = TLocaleInfo::toLower(*(_QWORD *)(a1 + 272), v9);
  }
  else
  {
    if ((_DWORD)v10)
      v25 = v10;
    else
      v25 = -1;
    TFsa::newTrans((TAllocator *)(a1 + 8), (uint64_t)v17, (uint64_t)v18, v25);
  }
  if ((_DWORD)v9)
    v26 = v9;
  else
    v26 = -1;
  return TFsa::newTrans((TAllocator *)(a1 + 8), (uint64_t)v18, a6, v26);
}

void sub_1AD7F632C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  void *v22;
  int v23;

  if (a20 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

_QWORD *TRegExpCompiler::compileNegatedSet(uint64_t a1, unsigned int **a2, int a3, uint64_t a4, uint64_t a5)
{
  TAllocator *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int *v16;
  _QWORD *v17;
  unsigned int *v18;
  uint64_t v19;

  v10 = (TAllocator *)(a1 + 8);
  v11 = TFsa::newState((TAllocator *)(a1 + 8), 0);
  TFsa::newTrans(v10, a4, (uint64_t)v11, 0xFFFFLL);
  v12 = TFsa::newState(v10, 0);
  TFsa::newTrans(v10, (uint64_t)v11, (uint64_t)v12, 110);
  v13 = TFsa::newState(v10, 0);
  TFsa::newTrans(v10, (uint64_t)v13, a5, 110);
  v14 = TFsa::newState(v10, 0);
  TFsa::newTrans(v10, (uint64_t)v14, (uint64_t)v13, 0xFFFFLL);
  v15 = *a2;
  v16 = *a2;
  while (*v16 != 93)
  {
    if (!*v16)
      return TFsa::newTrans(v10, (uint64_t)v12, (uint64_t)v14, -1);
LABEL_6:
    v17 = TFsa::newState(v10, 0);
    v18 = *a2;
    if ((*a2)[1] == 45 && (v19 = v18[2], (_DWORD)v19 != 93))
    {
      TRegExpCompiler::compileRange(a1, *v18, v19, a3, (uint64_t)v12, (uint64_t)v17);
      v16 = *a2 + 3;
      *a2 = v16;
      v12 = v17;
    }
    else
    {
      TRegExpCompiler::compileCharacter(a1, a2, a3, (uint64_t)v12, (uint64_t)v17);
      v16 = *a2;
      v12 = v17;
    }
  }
  if (v16 == v15)
    goto LABEL_6;
  return TFsa::newTrans(v10, (uint64_t)v12, (uint64_t)v14, -1);
}

_QWORD *TRegExpCompiler::compileSet(_QWORD *result, unsigned int **a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;

  v9 = (uint64_t)result;
  v10 = *a2;
  v11 = *a2;
  while (1)
  {
    v12 = *v11;
    if ((_DWORD)v12 == 93)
      break;
    if (!(_DWORD)v12)
      return result;
LABEL_6:
    if (v11[1] == 45 && (v13 = v11[2], (_DWORD)v13 != 93))
    {
      result = TRegExpCompiler::compileRange(v9, v12, v13, a3, a4, a5);
      v11 = *a2 + 3;
      *a2 = v11;
    }
    else
    {
      result = TRegExpCompiler::compileCharacter(v9, a2, a3, a4, a5);
      v11 = *a2;
    }
  }
  if (v11 == v10)
    goto LABEL_6;
  return result;
}

_QWORD *TRegExpCompiler::compile(_QWORD *a1, __int32 **a2, unsigned int a3, _QWORD *a4, uint64_t a5)
{
  TAllocator *v8;
  uint64_t v9;
  int *v10;
  __int32 v11;
  _QWORD *v12;
  __int32 *v13;
  __int32 v14;
  __int32 *v15;
  __int32 v16;
  __int32 v17;
  _QWORD *v18;
  uint64_t v19;
  __int32 *v20;
  __int32 v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v31;
  std::exception_vtbl *v32;
  TAllocator *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v37;
  _QWORD *v38;
  const char *v39;
  _QWORD *v40;
  const char *v41;
  _QWORD *v42;
  const char *v43;
  _QWORD *exception;
  uint64_t v45;
  TAllocator *v47;
  _QWORD *v48;
  std::exception v50;
  __int128 v51;
  _BYTE v52[7];
  char v53;
  char v54;
  unint64_t v55;
  __int128 v56;
  char v57;
  int v58[3];

  if (wcschr((__int32 *)"*", **a2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v56, "*+?{ follows nothing");
    TException::TException(&v50, &v56);
    v50.__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
    if (v53 >= 0)
      v43 = (const char *)&v51;
    else
      v43 = (const char *)v51;
    conditionalAssert(v43, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 468);
    TException::~TException(&v50);
    if (v57 < 0)
      operator delete((void *)v56);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v50, "*+?{ follows nothing");
    TException::TException(exception, (__int128 *)&v50);
    *exception = &unk_1E5D16AB0;
  }
  v8 = (TAllocator *)(a1 + 1);
  v47 = (TAllocator *)(a1 + 29);
  v45 = (uint64_t)a4;
  v48 = a1;
  while (1)
  {
    v9 = (uint64_t)a4;
    v10 = *a2;
    v11 = **a2;
    if (!v11 || v11 == 41)
      return TFsa::newTrans(v8, (uint64_t)a4, a5, -1);
    v12 = TFsa::newState(v8, 0);
    TFsa::newTrans(v8, (uint64_t)a4, (uint64_t)v12, -1);
    a4 = TFsa::newState(v8, 0);
    v13 = *a2;
    v14 = **a2;
    if (v14 == 91)
    {
      v16 = v13[1];
      *a2 = v13 + 1;
      if (v16 == 94)
      {
        *a2 = v13 + 2;
        TRegExpCompiler::compileNegatedSet((uint64_t)a1, (unsigned int **)a2, a3, (uint64_t)v12, (uint64_t)a4);
      }
      else
      {
        TRegExpCompiler::compileSet(a1, (unsigned int **)a2, a3, (uint64_t)v12, (uint64_t)a4);
      }
      v15 = *a2;
      if (**a2 != 93)
      {
        std::string::basic_string[abi:ne180100]<0>(&v56, "unmatched []");
        TException::TException(&v50, &v56);
        v50.__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
        if (v53 >= 0)
          v41 = (const char *)&v51;
        else
          v41 = (const char *)v51;
        conditionalAssert(v41, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 509);
        TException::~TException(&v50);
        if (v57 < 0)
          operator delete((void *)v56);
        v42 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v50, "unmatched []");
        TException::TException(v42, (__int128 *)&v50);
        *v42 = &unk_1E5D16AB0;
      }
      goto LABEL_22;
    }
    if (v14 == 40)
    {
      *a2 = v13 + 1;
      TRegExpCompiler::compile(a1, a2, a3, v12, a4);
      v15 = *a2;
      if (**a2 != 41)
      {
        std::string::basic_string[abi:ne180100]<0>(&v56, "unmatched ()");
        TException::TException(&v50, &v56);
        v50.__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
        if (v53 >= 0)
          v39 = (const char *)&v51;
        else
          v39 = (const char *)v51;
        conditionalAssert(v39, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 489);
        TException::~TException(&v50);
        if (v57 < 0)
          operator delete((void *)v56);
        v40 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v50, "unmatched ()");
        TException::TException(v40, (__int128 *)&v50);
        *v40 = &unk_1E5D16AB0;
      }
      goto LABEL_22;
    }
    if (wcschr((__int32 *)"*", v14))
    {
      std::string::basic_string[abi:ne180100]<0>(&v56, "nested *+?{");
      TException::TException(&v50, &v56);
      v50.__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
      if (v53 >= 0)
        v37 = (const char *)&v51;
      else
        v37 = (const char *)v51;
      conditionalAssert(v37, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 516);
      TException::~TException(&v50);
      if (v57 < 0)
        operator delete((void *)v56);
      v38 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v50, "nested *+?{");
      TException::TException(v38, (__int128 *)&v50);
      *v38 = &unk_1E5D16AB0;
    }
    v17 = **a2;
    if (v17 == 124)
    {
      TFsa::newTrans(v8, v9, a5, -1);
      a4 = TFsa::newState(v8, 0);
      TFsa::newTrans(v8, v45, (uint64_t)a4, -1);
      ++*a2;
    }
    else
    {
      if (wcschr((__int32 *)"^", v17))
      {
        v18 = TFsa::newState(v8, 0);
        TFsa::newTrans(v8, (uint64_t)v12, (uint64_t)v18, 0xFFFFLL);
        if (**a2)
          v19 = **a2;
        else
          v19 = -1;
        a1 = v48;
        TFsa::newTrans(v8, (uint64_t)v18, (uint64_t)a4, v19);
        v15 = *a2;
LABEL_22:
        v20 = v15 + 1;
        *a2 = v15 + 1;
        goto LABEL_23;
      }
      TRegExpCompiler::compileCharacter((uint64_t)a1, (unsigned int **)a2, a3, (uint64_t)v12, (uint64_t)a4);
      v20 = *a2;
LABEL_23:
      v21 = *v20;
      if (*v20 == 123)
      {
        *a2 = v20 + 1;
        v55 = 0;
        *(_QWORD *)&v56 = 0;
        parseRepetition((unsigned int **)a2, &v56, &v55);
        v50.__vftable = (std::exception_vtbl *)v52;
        v51 = xmmword_1AE1418C0;
        v54 = 1;
        v22 = v56;
        if ((unint64_t)v56 >= 2)
        {
          v23 = v56 - 1;
          do
          {
            TBuffer<wchar_t>::insert((uint64_t)&v50, *((unint64_t *)&v51 + 1), v10, v20 - v10);
            --v23;
          }
          while (v23);
        }
        v24 = v55;
        if (v55 == -1)
        {
          v27 = *((_QWORD *)&v51 + 1);
          if (v22)
          {
            TBuffer<wchar_t>::insert((uint64_t)&v50, *((unint64_t *)&v51 + 1), v10, v20 - v10);
            v27 = *((_QWORD *)&v51 + 1);
          }
          v58[0] = 42;
          TBuffer<wchar_t>::insert((uint64_t)&v50, v27, v58, 1uLL);
        }
        else if (v55 > v22)
        {
          if (!v22)
          {
            v58[0] = 63;
            TBuffer<wchar_t>::insert((uint64_t)&v50, *((unint64_t *)&v51 + 1), v58, 1uLL);
            *(_QWORD *)&v56 = 1;
            v22 = 1;
          }
          v25 = v24 - v22;
          if (v25)
          {
            v26 = v20 - v10;
            do
            {
              TBuffer<wchar_t>::insert((uint64_t)&v50, *((unint64_t *)&v51 + 1), v10, v26);
              v58[0] = 63;
              TBuffer<wchar_t>::insert((uint64_t)&v50, *((unint64_t *)&v51 + 1), v58, 1uLL);
              --v25;
            }
            while (v25);
          }
        }
        v28 = 0;
        v29 = *a2;
        while (v29[v28++])
          ;
        TBuffer<wchar_t>::insert((uint64_t)&v50, *((unint64_t *)&v51 + 1), v29, v28 - 1);
        if ((unint64_t)(*((_QWORD *)&v51 + 1) + 1) >> 62)
          v31 = -1;
        else
          v31 = 4 * (*((_QWORD *)&v51 + 1) + 1);
        a1 = v48;
        v20 = (__int32 *)TAllocator::allocate(v47, v31);
        if (*((_QWORD *)&v51 + 1) >= (unint64_t)v51)
        {
          if (v54)
          {
            v58[0] = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v50, *((unint64_t *)&v51 + 1), v58, 1uLL);
            v32 = v50.__vftable;
            --*((_QWORD *)&v51 + 1);
          }
          else
          {
            v32 = v50.__vftable;
            if ((_QWORD)v51)
              *((_DWORD *)v50.__vftable + v51 - 1) = 0;
          }
        }
        else
        {
          v32 = v50.__vftable;
          *((_DWORD *)&v50.~exception + *((_QWORD *)&v51 + 1)) = 0;
        }
        wcscpy(v20, (const __int32 *)v32);
        *a2 = v20;
        if (v54 && v50.__vftable != (std::exception_vtbl *)v52 && v50.__vftable)
        {
          MEMORY[0x1AF44D160]();
          v20 = *a2;
        }
        v21 = *v20;
      }
      switch(v21)
      {
        case '?':
          *a2 = v20 + 1;
          goto LABEL_60;
        case '+':
          *a2 = v20 + 1;
          v33 = v8;
          v34 = (uint64_t)a4;
          v35 = (uint64_t)v12;
          goto LABEL_61;
        case '*':
          *a2 = v20 + 1;
          TFsa::newTrans(v8, (uint64_t)a4, (uint64_t)v12, -1);
LABEL_60:
          v33 = v8;
          v34 = v9;
          v35 = (uint64_t)a4;
LABEL_61:
          TFsa::newTrans(v33, v34, v35, -1);
          break;
      }
    }
  }
}

void sub_1AD7F6E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  int v25;

  if (a24 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

uint64_t parseRepetition(unsigned int **a1, _QWORD *a2, _QWORD *a3)
{
  unsigned int v6;
  unsigned __int8 v7;
  unsigned int *v8;
  unsigned __int8 v9;
  uint64_t result;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned __int8 v15;
  unsigned int *v16;
  unsigned __int8 v17;
  std::exception_vtbl *v18;
  _QWORD *exception;
  TLocaleInfo *v20;
  std::exception_vtbl *v21;
  _QWORD *v22;
  TLocaleInfo *v23;
  std::exception_vtbl *v24;
  _QWORD *v25;
  std::exception_vtbl *v26;
  _QWORD *v27;
  _QWORD *v28;
  const char *v29;
  _QWORD *v30;
  TLocaleInfo *v31;
  TLocaleInfo *v32;
  std::exception_vtbl *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  const char *v37;
  _QWORD *v38;
  void *v39[2];
  char v40;
  void *__p[2];
  char v42;
  char v43;
  std::exception v44[3];
  char v45;

  *a2 = 0;
  *a3 = 0;
  v6 = **a1;
  {
    v20 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v20);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v20;
  }
  if ((int)v6 < 48
    || v6 >= 0x3A
    && (v6 < 0x660
     || TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v6) == -1))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "expected a digit after {");
    TException::TException(v44, (__int128 *)__p);
    v44[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
    if (v45 >= 0)
      v18 = (std::exception_vtbl *)&v44[1];
    else
      v18 = v44[1].__vftable;
    conditionalAssert((const char *)v18, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 264);
    TException::~TException(v44);
    if (v42 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v44, "expected a digit after {");
    TException::TException(exception, (__int128 *)v44);
    *exception = &unk_1E5D16AB0;
  }
  v8 = *a1;
  {
    v23 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v23);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v23;
  }
  result = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v8, a1);
  *a2 = result;
  v11 = *a1;
  v12 = **a1;
  if (v12 != 44)
  {
    if (v12 != 125)
    {
      if (!v12)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "search pattern not terminated");
        TException::TException(v44, (__int128 *)__p);
        v44[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
        if (v45 >= 0)
          v21 = (std::exception_vtbl *)&v44[1];
        else
          v21 = v44[1].__vftable;
        conditionalAssert((const char *)v21, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 270);
        TException::~TException(v44);
        if (v42 < 0)
          operator delete(__p[0]);
        v22 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v44, "search pattern not terminated");
        TException::TException(v22, (__int128 *)v44);
        *v22 = &unk_1E5D16AB0;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "invalid {} range");
      TException::TException(v44, (__int128 *)__p);
      v44[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
      if (v45 >= 0)
        v24 = (std::exception_vtbl *)&v44[1];
      else
        v24 = v44[1].__vftable;
      conditionalAssert((const char *)v24, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 285);
      TException::~TException(v44);
      if (v42 < 0)
        operator delete(__p[0]);
      v25 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v44, "invalid {} range");
      TException::TException(v25, (__int128 *)v44);
      *v25 = &unk_1E5D16AB0;
    }
    if (!(_DWORD)result)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "invalid {0} range");
      TException::TException(v44, (__int128 *)__p);
      v44[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
      if (v45 >= 0)
        v26 = (std::exception_vtbl *)&v44[1];
      else
        v26 = v44[1].__vftable;
      conditionalAssert((const char *)v26, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 276);
      TException::~TException(v44);
      if (v42 < 0)
        operator delete(__p[0]);
      v27 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v44, "invalid {0} range");
      TException::TException(v27, (__int128 *)v44);
      *v27 = &unk_1E5D16AB0;
    }
    *a3 = result;
LABEL_21:
    v14 = v11 + 1;
    goto LABEL_22;
  }
  v13 = v11[1];
  *a1 = v11 + 1;
  if (v13 != 125)
  {
    if ((v15 & 1) == 0
    {
      v31 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v31);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v31;
    }
    if ((int)v13 < 48
      || v13 >= 0x3A
      && (v13 < 0x660
       || TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v13) == -1))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"expected a digit after {", 24);
      v28 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)",", 1);
      std::stringbuf::str();
      TException::TException(__p, (__int128 *)v39);
      __p[0] = &unk_1E5D16AB0;
      if (v43 >= 0)
        v29 = (const char *)&__p[1];
      else
        v29 = (const char *)__p[1];
      conditionalAssert(v29, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 300);
      TException::~TException((std::exception *)__p);
      if (v40 < 0)
        operator delete(v39[0]);
      v30 = __cxa_allocate_exception(0x20uLL);
      std::stringbuf::str();
      TException::TException(v30, (__int128 *)__p);
      *v30 = &unk_1E5D16AB0;
    }
    v16 = *a1;
    if ((v17 & 1) == 0
    {
      v32 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v32);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v32;
    }
    result = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v16, a1);
    *a3 = result;
    v11 = *a1;
    if (**a1 != 125)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "search pattern not terminated");
      TException::TException(v44, (__int128 *)__p);
      v44[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
      if (v45 >= 0)
        v33 = (std::exception_vtbl *)&v44[1];
      else
        v33 = v44[1].__vftable;
      conditionalAssert((const char *)v33, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 306);
      TException::~TException(v44);
      if (v42 < 0)
        operator delete(__p[0]);
      v34 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v44, "search pattern not terminated");
      TException::TException(v34, (__int128 *)v44);
      *v34 = &unk_1E5D16AB0;
    }
    if (*a2 > (unint64_t)result)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"invalid {", 9);
      v35 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)",", 1);
      v36 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"} range", 7);
      std::stringbuf::str();
      TException::TException(__p, (__int128 *)v39);
      __p[0] = &unk_1E5D16AB0;
      if (v43 >= 0)
        v37 = (const char *)&__p[1];
      else
        v37 = (const char *)__p[1];
      conditionalAssert(v37, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 313);
      TException::~TException((std::exception *)__p);
      if (v40 < 0)
        operator delete(v39[0]);
      v38 = __cxa_allocate_exception(0x20uLL);
      std::stringbuf::str();
      TException::TException(v38, (__int128 *)__p);
      *v38 = &unk_1E5D16AB0;
    }
    goto LABEL_21;
  }
  *a3 = -1;
  v14 = v11 + 2;
LABEL_22:
  *a1 = v14;
  return result;
}

void sub_1AD7F772C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::exception a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  MEMORY[0x1AF44D190](v27, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

__int32 *TRegExpCompiler::compileFlags(uint64_t a1, __int32 **a2, uint64_t a3, uint64_t *a4, int *a5)
{
  __int32 *result;
  __int32 *v10;
  __int32 *v11;
  TAllocator *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  std::exception_vtbl *v18;
  _QWORD *exception;
  __int128 __p;
  char v21;
  std::exception v22[3];
  char v23;
  _QWORD v24[33];

  *a4 = a3;
  result = wcschr(*a2, 58);
  if (result)
  {
    v10 = result;
    v11 = *a2;
    if (result == *a2 || *(result - 1) != 92)
    {
      if (v11 < result)
      {
        v12 = (TAllocator *)(a1 + 8);
        do
        {
          v13 = *v11;
          switch((_DWORD)v13)
          {
            case 'z':
              v14 = 0;
              break;
            case 'i':
              v14 = 1;
              break;
            case 'c':
              v14 = 2;
              break;
            default:
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"invalid flag '", 14);
              v17 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"'", 1);
              std::stringbuf::str();
              TException::TException(v22, &__p);
              v22[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
              if (v23 >= 0)
                v18 = (std::exception_vtbl *)&v22[1];
              else
                v18 = v22[1].__vftable;
              conditionalAssert((const char *)v18, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 663);
              TException::~TException(v22);
              if (v21 < 0)
                operator delete((void *)__p);
              exception = __cxa_allocate_exception(0x20uLL);
              std::stringbuf::str();
              TException::TException(exception, (__int128 *)v22);
              *exception = &unk_1E5D16AB0;
          }
          *a5 = v14;
          v15 = TFsa::newState(v12, 0);
          TFsa::newTrans(v12, *a4, (uint64_t)v15, 0xFFFFLL);
          *a4 = (uint64_t)v15;
          v16 = TFsa::newState(v12, 0);
          result = (__int32 *)TFsa::newTrans(v12, *a4, (uint64_t)v16, v13);
          *a4 = (uint64_t)v16;
          v11 = *a2 + 1;
          *a2 = v11;
        }
        while (v11 < v10);
      }
      *a2 = v11 + 1;
    }
  }
  return result;
}

void sub_1AD7F7ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  void *v22;
  int v23;

  if (a20 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

void TRegExpCompiler::add(_QWORD *a1, __int32 *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::exception_vtbl *v9;
  _QWORD *exception;
  uint64_t v11[3];
  void *__p[2];
  char v13;
  std::exception v14[3];
  char v15;
  __int32 *v16;
  unsigned int v17;

  v17 = 0;
  v11[0] = 0;
  v16 = a2;
  v5 = (uint64_t *)a1[20];
  v6 = (uint64_t *)a1[21];
  if (v5 != v6)
  {
    while (!*v5)
    {
      if (++v5 == v6)
      {
        v5 = (uint64_t *)a1[21];
        break;
      }
    }
  }
  TRegExpCompiler::compileFlags((uint64_t)a1, &v16, *v5, v11, (int *)&v17);
  v7 = TFsa::newState((TAllocator *)(a1 + 1), 0);
  TRegExpCompiler::compile(a1, &v16, v17, (_QWORD *)v11[0], (uint64_t)v7);
  if (*v16)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "unmatched ()");
    TException::TException(v14, (__int128 *)__p);
    v14[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
    if (v15 >= 0)
      v9 = (std::exception_vtbl *)&v14[1];
    else
      v9 = v14[1].__vftable;
    conditionalAssert((const char *)v9, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/regexp.cpp", 697);
    TException::~TException(v14);
    if (v13 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "unmatched ()");
    TException::TException(exception, (__int128 *)v14);
    *exception = &unk_1E5D16AB0;
  }
  v8 = TAllocator::allocate((TAllocator *)(a1 + 29), 16);
  *v8 = 1;
  v8[1] = a3;
  v7[1] = v8;
  TFsa::addExtremity((uint64_t)(a1 + 1), (uint64_t)v7, 1u);
}

void sub_1AD7F7CD0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::exception a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  __break(1u);
}

void sub_1AD7F7ECC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  void *v22;
  int v23;

  if (a20 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v23)
  {
LABEL_6:
    std::ostringstream::~ostringstream((uint64_t)&a22);
    __cxa_end_catch();
    JUMPOUT(0x1AD7F7F5CLL);
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

uint64_t TRegExpCompiler::compressDfaRec(uint64_t result, uint64_t *a2, _QWORD **a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *i;
  _QWORD *v21;
  uint64_t v22;

  v6 = *a2;
  if (!*(_QWORD *)(*a6 + 8 * *a2))
  {
    v12 = result;
    v13 = *a3;
    v14 = (_QWORD *)*a5;
    *v13 = *a4;
    v13[1] = v14;
    v15 = *a3;
    *a3 += 2;
    *(_QWORD *)(*a6 + 8 * v6) = v15;
    v16 = (unint64_t *)a2[1];
    if (v16 && *v16)
    {
      v17 = 0;
      v18 = (_QWORD *)*a5;
      do
        *v18++ = v16[++v17];
      while (v17 < *v16);
      *a5 = v18;
    }
    v19 = *a4;
    result = TState::getTransCount((uint64_t)a2, 1u);
    *a4 += 16 * result;
    for (i = (_QWORD *)a2[3]; i; v19 += 16)
    {
      v21 = (_QWORD *)i[2];
      result = TRegExpCompiler::compressDfaRec(v12, v21, a3, a4, a5, a6);
      v22 = *(_QWORD *)(*a6 + 8 * *v21);
      *(_DWORD *)v19 = *i;
      *(_QWORD *)(v19 + 8) = v22;
      i = (_QWORD *)i[5];
    }
  }
  return result;
}

_QWORD *TRegExpCompiler::compressDfa(TRegExpCompiler *this, const TFsa *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t **v19;
  uint64_t **v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  void *__p;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;

  v4 = *((_QWORD *)a2 + 12);
  v5 = (_QWORD *)*((_QWORD *)a2 + 6);
  v6 = (_QWORD *)*((_QWORD *)a2 + 7);
  if (v5 != v6)
  {
    while (!*v5)
    {
      if (++v5 == v6)
        goto LABEL_13;
    }
  }
  if (v5 != v6)
  {
    v7 = 0;
LABEL_7:
    v8 = *(_QWORD **)(*v5 + 8);
    if (v8)
      v7 += *v8;
    v9 = v5 + 1;
    while (v9 != v6)
    {
      if (*v9++)
      {
        v5 = v9 - 1;
        goto LABEL_7;
      }
    }
  }
LABEL_13:
  v11 = *((_QWORD *)a2 + 5) + 1;
  v12 = (_QWORD *)operator new[]();
  *v12 = 16;
  v12[1] = v11;
  v13 = v12 + 2;
  v30 = v12 + 2;
  v14 = (_QWORD *)operator new[]();
  *v14 = 16;
  v14[1] = v4;
  v15 = v14 + 2;
  v29 = v14 + 2;
  v16 = operator new[]();
  v28 = v16;
  v17 = (_QWORD *)operator new();
  *v17 = v13;
  v17[1] = v15;
  v17[2] = v16;
  __p = 0;
  v26 = 0;
  v27 = 0;
  v18 = (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3;
  v24 = 0;
  std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize((uint64_t)&__p, v18, &v24);
  v19 = (uint64_t **)*((_QWORD *)a2 + 19);
  v20 = (uint64_t **)*((_QWORD *)a2 + 20);
  if (v19 != v20)
  {
    while (!*v19)
    {
      if (++v19 == v20)
      {
        v19 = (uint64_t **)*((_QWORD *)a2 + 20);
        break;
      }
    }
  }
  TRegExpCompiler::compressDfaRec((uint64_t)this, *v19, &v30, &v29, &v28, &__p);
  v21 = v30;
  v22 = v28;
  *v30 = v29;
  v21[1] = v22;
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  return v17;
}

void sub_1AD7F8288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *TRegExpCompiler::compile(TRegExpCompiler *this)
{
  _QWORD *v2;
  _BYTE v4[224];

  TFsa::TFsa((TFsa *)v4);
  TFsa::nfaToDfa((uint64_t)this + 8, (TFsa *)v4, (uint64_t)this);
  v2 = TRegExpCompiler::compressDfa(this, (const TFsa *)v4);
  TFsa::clear((TRegExpCompiler *)((char *)this + 8));
  TAllocator::clear((TRegExpCompiler *)((char *)this + 232));
  TFsa::~TFsa((TFsa *)v4);
  return v2;
}

void sub_1AD7F831C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TFsa::~TFsa((TFsa *)&a9);
  _Unwind_Resume(a1);
}

uint64_t TRegExpSearch::searchNegatedRange(uint64_t *a1, unint64_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t result;
  signed int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;

  result = *a1;
  v9 = *a3;
  if ((_DWORD)a4 == 2)
  {
    v10 = *(_QWORD *)(result + 32);
    if (v10 && (unint64_t)v9 < 0x10000)
      v9 = *(_DWORD *)(v10 + 4 * v9);
  }
  else if ((_DWORD)a4 == 1)
  {
    result = TLocaleInfo::toLower(result, *a3);
    v9 = result;
  }
  v11 = *a2;
  v12 = a2[2];
  while (v11 < v12)
  {
    v13 = *(unint64_t **)(v11 + 8);
    v14 = *v13;
    v15 = v13[2];
    if (*v13 < v15)
    {
      do
      {
        if (v9 < *(_DWORD *)v11 || v9 > *(_DWORD *)v14)
        {
          result = TRegExpSearch::searchNegated(a1, *(_QWORD *)(v14 + 8), a3, a4);
          v15 = v13[2];
        }
        v14 += 16;
      }
      while (v14 < v15);
      v12 = a2[2];
    }
    v11 += 16;
  }
  return result;
}

uint64_t TRegExpSearch::searchNegated(uint64_t *a1, unint64_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t result;
  signed int v9;
  uint64_t v10;
  unint64_t i;

  result = *a1;
  v9 = *a3;
  if ((_DWORD)a4 == 2)
  {
    v10 = *(_QWORD *)(result + 32);
    if (v10 && (unint64_t)v9 < 0x10000)
      v9 = *(_DWORD *)(v10 + 4 * v9);
  }
  else if ((_DWORD)a4 == 1)
  {
    result = TLocaleInfo::toLower(result, *a3);
    v9 = result;
  }
  for (i = *a2; i < a2[2]; i += 16)
  {
    if (*(_DWORD *)i == 0xFFFF)
    {
      result = TRegExpSearch::searchNegatedCommand((uint64_t)a1, *(unint64_t **)(i + 8), a3, a4);
    }
    else if (v9 != *(_DWORD *)i)
    {
      result = TRegExpSearch::searchNegated(a1, *(_QWORD *)(i + 8), a3, a4);
    }
  }
  return result;
}

uint64_t TRegExpSearch::searchNegatedCommand(uint64_t result, unint64_t *a2, unsigned int *a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t *v8;
  unsigned int *v9;
  int v10;

  v4 = *a2;
  if (*a2 < a2[2])
  {
    v8 = (uint64_t *)result;
    v9 = a3 + 1;
    do
    {
      v10 = *(_DWORD *)v4;
      if (*(_DWORD *)v4 == 114)
      {
        result = TRegExpSearch::searchNegatedRange(v8, *(unint64_t **)(v4 + 8), a3, a4);
      }
      else if (v10 == 110)
      {
        result = TRegExpSearch::search(v8, *(_QWORD *)(v4 + 8), v9, a4);
      }
      else
      {
        result = testCharClass(v10, *a3);
        if ((result & 1) == 0)
          result = TRegExpSearch::searchNegated(v8, *(_QWORD *)(v4 + 8), a3, a4);
      }
      v4 += 16;
    }
    while (v4 < a2[2]);
  }
  return result;
}

void TRegExpSearch::search(uint64_t a1, uint64_t *a2, unsigned int *a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *i;
  void **v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;

  while (1)
  {
    if ((*(_BYTE *)(a1 + 44) & 1) == 0 || !*a3)
    {
      for (i = (uint64_t *)a2[1]; (unint64_t)i < a2[3]; ++i)
      {
        *(_BYTE *)(a1 + 41) = 1;
        v12 = *(void ***)(a1 + 16);
        if (v12)
        {
          v14 = (char *)*v12;
          v13 = v12[1];
          v15 = *i;
          v16 = ((char *)v13 - (_BYTE *)*v12) / 24;
          if (v13 == *v12)
          {
LABEL_18:
            v19 = *(_QWORD *)(a1 + 32);
            v20 = (unint64_t)v12[2];
            if ((unint64_t)v13 >= v20)
            {
              v22 = v16 + 1;
              if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (_QWORD)v14) >> 3);
              if (2 * v23 > v22)
                v22 = 2 * v23;
              if (v23 >= 0x555555555555555)
                v24 = 0xAAAAAAAAAAAAAAALL;
              else
                v24 = v22;
              if (v24)
                v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(v12 + 2), v24);
              else
                v25 = 0;
              v26 = &v25[24 * v16];
              *(_QWORD *)v26 = v19;
              *((_QWORD *)v26 + 1) = a3;
              *((_QWORD *)v26 + 2) = v15;
              v28 = (char *)*v12;
              v27 = (char *)v12[1];
              v29 = v26;
              if (v27 != *v12)
              {
                do
                {
                  v30 = *(_OWORD *)(v27 - 24);
                  *((_QWORD *)v29 - 1) = *((_QWORD *)v27 - 1);
                  *(_OWORD *)(v29 - 24) = v30;
                  v29 -= 24;
                  v27 -= 24;
                }
                while (v27 != v28);
                v27 = (char *)*v12;
              }
              v21 = v26 + 24;
              *v12 = v29;
              v12[1] = v26 + 24;
              v12[2] = &v25[24 * v24];
              if (v27)
                operator delete(v27);
            }
            else
            {
              *v13 = v19;
              v13[1] = a3;
              v21 = v13 + 3;
              v13[2] = v15;
            }
            v12[1] = v21;
          }
          else
          {
            if (v16 <= 1)
              v17 = 1;
            else
              v17 = ((char *)v13 - (_BYTE *)*v12) / 24;
            v18 = v14 + 16;
            while (*v18 != v15 || *(v18 - 2) != *(_QWORD *)(a1 + 32) || *(v18 - 1) >= (unint64_t)a3)
            {
              v18 += 3;
              if (!--v17)
                goto LABEL_18;
            }
            *(v18 - 1) = a3;
            *v18 = v15;
          }
        }
      }
    }
    v7 = a2[2];
    v8 = *a2;
    v9 = v7 - *a2;
    if (v7 == *a2)
      break;
    if (*(_DWORD *)v8 == 0xFFFF)
    {
      TRegExpSearch::searchCommand(a1, *(unsigned int ***)(v8 + 8), a3, a4);
      v10 = 1;
    }
    else
    {
      v10 = 0;
    }
    v31 = v9 >> 4;
    v32 = *a3;
    if (!(_DWORD)v32 && v10 < v31)
    {
      *(_BYTE *)(a1 + 40) = 1;
      return;
    }
    v33 = *(_QWORD *)a1;
    if (a4 == 2)
    {
      v34 = *(_QWORD *)(v33 + 32);
      if (v34)
        v35 = (unint64_t)(int)v32 < 0x10000;
      else
        v35 = 0;
      if (v35)
        LODWORD(v32) = *(_DWORD *)(v34 + 4 * (int)v32);
    }
    else if (a4 == 1)
    {
      LODWORD(v32) = TLocaleInfo::toLower(v33, v32);
    }
    v36 = v31 - 1;
    if (v10 < v31)
    {
      v37 = *a2;
      do
      {
        v38 = (v36 + v10) >> 1;
        v39 = *(_DWORD *)(v37 + 16 * v38);
        if ((_DWORD)v32 == v39)
          break;
        if ((int)v32 > v39)
          v36 = v38 - 1;
        else
          v10 = v38 + 1;
      }
      while (v10 <= v36);
      v8 = v37 + 16 * v38;
    }
    if (v10 > v36)
      return;
    a2 = *(uint64_t **)(v8 + 8);
    ++a3;
  }
}

uint64_t testCharClass(int a1, int a2)
{
  uint64_t result;
  unsigned __int8 v5;
  int isLower;
  unsigned __int8 v7;
  unsigned __int8 v8;
  int DigitExtended;
  unsigned __int8 v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  int v25;
  int v26;
  int v27;
  TLocaleInfo *v28;
  TLocaleInfo *v29;
  TLocaleInfo *v30;
  TLocaleInfo *v31;
  TLocaleInfo *v32;
  TLocaleInfo *v33;
  TLocaleInfo *v34;
  TLocaleInfo *v35;
  TLocaleInfo *v36;
  TLocaleInfo *v37;
  TLocaleInfo *v38;
  TLocaleInfo *v39;
  TLocaleInfo *v40;
  TLocaleInfo *v41;

  result = 0;
  if (a1 <= 96)
  {
    switch(a1)
    {
      case 'L':
        if ((v5 & 1) == 0)
        {
          {
            v28 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v28);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v28;
          }
        }
        isLower = TLocaleInfo::isLower(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2);
        goto LABEL_53;
      case 'M':
      case 'N':
      case 'O':
      case 'Q':
      case 'R':
      case 'T':
      case 'V':
        return result;
      case 'P':
        if ((v14 & 1) == 0
        {
          v32 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v32);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v32;
        }
        isLower = TLocaleInfo::isPunct(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2);
        goto LABEL_53;
      case 'S':
        if ((v16 & 1) == 0
        {
          v34 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v34);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v34;
        }
        result = 0;
        if (a2 > 159)
        {
          if (a2 >= 12288)
          {
            if (a2 == 12288)
              return result;
            v26 = 65279;
          }
          else
          {
            if (a2 == 160)
              return result;
            v26 = 8203;
          }
          if (a2 == v26)
            return result;
        }
        else if (a2 <= 0x20 && ((1 << a2) & 0x100002600) != 0)
        {
          return result;
        }
        return 1;
      case 'U':
        if ((v12 & 1) == 0
        {
          v30 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v30);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v30;
        }
        isLower = TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2);
        goto LABEL_53;
      case 'W':
        if ((v18 & 1) == 0
        {
          v36 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v36);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v36;
        }
        v19 = TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
        if (a2 >= 48
          && (a2 < 0x3A
           || a2 >= 0x660
           && TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2) != -1))
        {
          return 0;
        }
        v20 = v19;
        goto LABEL_52;
      default:
        if (a1 != 65)
        {
          if (a1 != 68)
            return result;
          if ((v8 & 1) == 0
          {
            v38 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v38);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v38;
          }
          DigitExtended = a2 - 48;
          if (a2 >= 48)
          {
            if (a2 <= 0x39)
              return DigitExtended == -1;
            if (a2 >= 0x660)
            {
              DigitExtended = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2);
              return DigitExtended == -1;
            }
          }
          DigitExtended = -1;
          return DigitExtended == -1;
        }
        if ((v23 & 1) == 0
        {
          v40 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v40);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v40;
        }
        v20 = TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
LABEL_52:
        isLower = TLocaleInfo::isAlpha(v20, a2);
LABEL_53:
        result = isLower ^ 1u;
        break;
    }
    return result;
  }
  switch(a1)
  {
    case 'l':
      if ((v7 & 1) == 0
      {
        v29 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v29);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v29;
      }
      return TLocaleInfo::isLower(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2);
    case 'm':
    case 'n':
    case 'o':
    case 'q':
    case 'r':
    case 't':
    case 'v':
      return result;
    case 'p':
      if ((v15 & 1) == 0
      {
        v33 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v33);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v33;
      }
      return TLocaleInfo::isPunct(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2);
    case 's':
      if ((v17 & 1) == 0
      {
        v35 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v35);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v35;
      }
      result = 1;
      if (a2 <= 159)
      {
        if (a2 <= 0x20 && ((1 << a2) & 0x100002600) != 0)
          return result;
        return 0;
      }
      if (a2 >= 12288)
      {
        if (a2 == 12288)
          return result;
        v27 = 65279;
      }
      else
      {
        if (a2 == 160)
          return result;
        v27 = 8203;
      }
      if (a2 != v27)
        return 0;
      return result;
    case 'u':
      if ((v13 & 1) == 0
      {
        v31 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v31);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v31;
      }
      return TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2);
    case 'w':
      if ((v21 & 1) == 0
      {
        v37 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v37);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v37;
      }
      v22 = TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
      if (a2 < 48
        || a2 >= 0x3A
        && (a2 < 0x660
         || TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2) == -1))
      {
        v11 = v22;
        return TLocaleInfo::isAlpha(v11, a2);
      }
      return 1;
    default:
      if (a1 != 100)
      {
        if (a1 == 97)
        {
          if ((v10 & 1) == 0
          {
            v39 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v39);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v39;
          }
          v11 = TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo;
          return TLocaleInfo::isAlpha(v11, a2);
        }
        return result;
      }
      if ((v24 & 1) == 0
      {
        v41 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v41);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v41;
      }
      v25 = a2 - 48;
      if (a2 < 48)
        goto LABEL_62;
      if (a2 > 0x39)
      {
        if (a2 < 0x660)
LABEL_62:
          v25 = -1;
        else
          v25 = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2);
      }
      return v25 != -1;
  }
}

void sub_1AD7F90BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TRegExpSearch::searchRange(uint64_t *a1, unint64_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t result;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;

  result = *a1;
  v9 = *a3;
  if ((_DWORD)a4 == 2)
  {
    v10 = *(_QWORD *)(result + 32);
    if (v10 && (unint64_t)v9 < 0x10000)
      v9 = *(_DWORD *)(v10 + 4 * v9);
  }
  else if ((_DWORD)a4 == 1)
  {
    result = TLocaleInfo::toLower(result, *a3);
    v9 = result;
  }
  v11 = *a2;
  v12 = a2[2];
  if (*a2 < v12)
  {
    v13 = a3 + 1;
    do
    {
      if (v9 >= *(_DWORD *)v11)
      {
        v14 = *(unint64_t **)(v11 + 8);
        v15 = *v14;
        v16 = v14[2];
        if (*v14 < v16)
        {
          do
          {
            if (v9 <= *(_DWORD *)v15)
            {
              result = TRegExpSearch::search(a1, *(_QWORD *)(v15 + 8), v13, a4);
              v16 = v14[2];
            }
            v15 += 16;
          }
          while (v15 < v16);
          v12 = a2[2];
        }
      }
      v11 += 16;
    }
    while (v11 < v12);
  }
  return result;
}

uint64_t TRegExpSearch::searchCommand(uint64_t result, unsigned int **a2, unsigned int *a3, uint64_t a4)
{
  unsigned int *v4;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;

  v4 = *a2;
  if (*a2 < a2[2])
  {
    v8 = result;
    v9 = a3 + 1;
    while (1)
    {
      result = *v4;
      if ((int)result > 98)
        break;
      if ((_DWORD)result == 36)
      {
        if (!*a3)
          goto LABEL_15;
      }
      else
      {
        if ((_DWORD)result != 94)
          goto LABEL_16;
        if (*(unsigned int **)(v8 + 24) == a3)
        {
LABEL_15:
          v10 = *((_QWORD *)v4 + 1);
          v11 = v8;
          v12 = a3;
          goto LABEL_22;
        }
      }
LABEL_24:
      v4 += 4;
      if (v4 >= a2[2])
        return result;
    }
    switch((_DWORD)result)
    {
      case 'c':
        v10 = *((_QWORD *)v4 + 1);
        v11 = v8;
        v12 = a3;
        v13 = 2;
        break;
      case 'i':
        v10 = *((_QWORD *)v4 + 1);
        v11 = v8;
        v12 = a3;
        v13 = 1;
        break;
      case 'z':
        v10 = *((_QWORD *)v4 + 1);
        v11 = v8;
        v12 = a3;
        v13 = 0;
        break;
      default:
LABEL_16:
        if (!*a3)
        {
          *(_BYTE *)(v8 + 40) = 1;
          goto LABEL_24;
        }
        if ((_DWORD)result == 114)
        {
          result = TRegExpSearch::searchRange((uint64_t *)v8, *((unint64_t **)v4 + 1), a3, a4);
          goto LABEL_24;
        }
        if ((_DWORD)result == 110)
        {
          result = TRegExpSearch::searchNegated((uint64_t *)v8, *((unint64_t **)v4 + 1), a3, a4);
          goto LABEL_24;
        }
        if ((_DWORD)result != 46)
        {
          result = testCharClass(result, *a3);
          if (!(_DWORD)result)
            goto LABEL_24;
        }
        v10 = *((_QWORD *)v4 + 1);
        v11 = v8;
        v12 = v9;
LABEL_22:
        v13 = a4;
        break;
    }
    result = TRegExpSearch::search(v11, v10, v12, v13);
    goto LABEL_24;
  }
  return result;
}

BOOL TRegExpSearch::operator()(uint64_t a1, unsigned int *a2, int a3, uint64_t a4)
{
  char v4;
  unsigned int *v5;
  uint64_t v7;
  int v8;

  v4 = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a2;
  *(_WORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = a3;
  *(_QWORD *)(a1 + 32) = a2;
  if (!*a2)
    return 0;
  v5 = a2;
  do
  {
    TRegExpSearch::search(a1, **(uint64_t ***)(a1 + 8), v5, 0);
    if ((v4 & 2) != 0)
      break;
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(_DWORD *)(v7 + 4);
    v5 = (unsigned int *)(v7 + 4);
    *(_QWORD *)(a1 + 32) = v5;
  }
  while (v8);
  return *(_BYTE *)(a1 + 40) != 0;
}

BOOL TRegExpSearch::operator()(uint64_t a1, unsigned int *a2, int a3)
{
  char v3;
  unsigned int *v4;
  int v6;
  uint64_t v7;
  int v8;

  v3 = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  *(_WORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 44) = a3;
  *(_QWORD *)(a1 + 32) = a2;
  if (!*a2)
    return 0;
  v4 = a2;
  do
  {
    TRegExpSearch::search(a1, **(uint64_t ***)(a1 + 8), v4, 0);
    v6 = *(unsigned __int8 *)(a1 + 41);
    if (v3 & 2 | v6)
      break;
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(_DWORD *)(v7 + 4);
    v4 = (unsigned int *)(v7 + 4);
    *(_QWORD *)(a1 + 32) = v4;
  }
  while (v8);
  return v6 != 0;
}

_QWORD *TRegExp::TRegExp(_QWORD *result, uint64_t a2)
{
  result[1] = 0;
  result[2] = 0;
  *result = a2;
  return result;
}

void TRegExp::add(const TLocaleInfo **a1, __int32 *a2, uint64_t a3)
{
  TRegExpCompiler *v5;

  v5 = a1[1];
  if (!v5)
  {
    v5 = (TRegExpCompiler *)operator new();
    TRegExpCompiler::TRegExpCompiler(v5, *a1);
    a1[1] = v5;
  }
  TRegExpCompiler::add(v5, a2, a3);
}

void sub_1AD7F9548(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C406FA3447ALL);
  _Unwind_Resume(a1);
}

TRegExpCompiler *TRegExp::doneAdding(TRegExp *this)
{
  TRegExpCompiler *result;

  result = (TRegExpCompiler *)*((_QWORD *)this + 1);
  if (result)
  {
    *((_QWORD *)this + 2) = TRegExpCompiler::compile(result);
    result = (TRegExpCompiler *)*((_QWORD *)this + 1);
    if (result)
      result = (TRegExpCompiler *)(*(uint64_t (**)(TRegExpCompiler *))(*(_QWORD *)result + 8))(result);
    *((_QWORD *)this + 1) = 0;
  }
  return result;
}

uint64_t TRegExp::TRegExp(uint64_t a1, __int32 *a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a3;
  TRegExp::add((const TLocaleInfo **)a1, a2, 0);
  TRegExp::doneAdding((TRegExp *)a1);
  return a1;
}

void TRegExp::~TRegExp(TRegExp *this)
{
  uint64_t v2;
  TRegExpGraph *v3;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (TRegExpGraph *)*((_QWORD *)this + 2);
  if (v3)
  {
    TRegExpGraph::~TRegExpGraph(v3);
    MEMORY[0x1AF44D190]();
  }
}

BOOL TRegExp::match(_QWORD *a1, unsigned int *a2, int a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[6];

  v4 = a1[2];
  if (!v4)
    return 0;
  v6[0] = *a1;
  v6[1] = v4;
  return TRegExpSearch::operator()((uint64_t)v6, a2, a3, a4);
}

BOOL TRegExp::match(_QWORD *a1, unsigned int *a2, int a3)
{
  uint64_t v3;
  _QWORD v5[6];

  v3 = a1[2];
  if (!v3)
    return 0;
  v5[0] = *a1;
  v5[1] = v3;
  return TRegExpSearch::operator()((uint64_t)v5, a2, a3);
}

uint64_t TRegExp::stringToRegExp(uint64_t result, uint64_t a2, int a3, char a4)
{
  __int32 *v6;
  char *v7;
  __int32 v8;
  __int32 *v9;
  __int32 v10;
  int v11;

  v6 = (__int32 *)result;
  if (a3 == 1)
  {
    v7 = "i";
  }
  else
  {
    if (a3 != 2)
      goto LABEL_6;
    v7 = "c";
  }
  result = TBuffer<wchar_t>::assign(a2, (int *)v7);
LABEL_6:
  if ((a4 & 2) != 0)
  {
    v11 = 94;
    result = TBuffer<wchar_t>::insert(a2, *(_QWORD *)(a2 + 16), &v11, 1uLL);
  }
  v8 = *v6;
  if (*v6)
  {
    v9 = v6 + 1;
    do
    {
      if (wcschr((__int32 *)"?", v8))
      {
        v11 = 92;
        TBuffer<wchar_t>::insert(a2, *(_QWORD *)(a2 + 16), &v11, 1uLL);
      }
      v11 = *(v9 - 1);
      result = TBuffer<wchar_t>::insert(a2, *(_QWORD *)(a2 + 16), &v11, 1uLL);
      v10 = *v9++;
      v8 = v10;
    }
    while (v10);
  }
  if ((a4 & 1) != 0)
  {
    v11 = 36;
    return TBuffer<wchar_t>::insert(a2, *(_QWORD *)(a2 + 16), &v11, 1uLL);
  }
  return result;
}

void TSyntaxException::~TSyntaxException(std::exception *this)
{
  TException::~TException(this);
  JUMPOUT(0x1AF44D190);
}

_QWORD *TException::TException(_QWORD *a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = &unk_1E5D15960;
  v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void sub_1AD7F9834(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void TException::~TException(std::exception *this)
{
  TException::~TException(this);
  JUMPOUT(0x1AF44D190);
}

{
  this->__vftable = (std::exception_vtbl *)&unk_1E5D15960;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

uint64_t TLocaleInfo::isPunct(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  unsigned int v3;
  _BOOL4 v5;
  unsigned int v6;

  if ((int)a2 <= 255)
  {
    if (a2 - 33 < 0xF)
      return 1;
    result = 1;
    if (a2 - 91 > 0x24 || ((1 << (a2 - 91)) & 0x1F0000003FLL) == 0)
    {
      v5 = a2 - 161 < 0x1F || (a2 & 0xFFFFFFDF) == 215;
      return a2 - 58 < 7 || v5;
    }
    return result;
  }
  if (a2 < 0x5BE)
    return 0;
  if (a2 > 0x6E9)
  {
    v3 = a2 - 3631;
    if (a2 >= 0xE2F)
    {
      if (a2 <= 0xE5B)
      {
        if (v3 < 0x21 && ((0x100810001uLL >> v3) & 1) != 0)
          return 1;
        return a2 > 0xE59;
      }
      v6 = a2 >> 4;
      if (a2 >> 4 >= 0x201)
      {
        if (a2 >> 2 <= 0xC3E)
          return v6 < 0x267 || a2 - 12289 < 4 || a2 - 12294 < 0x17 || a2 == 12539;
        if (a2 >= 0xFF01)
        {
          if (v6 < 0xFF1)
            return 1;
          result = 1;
          if ((a2 - 65504 > 0xE || a2 == 65511)
            && (a2 - 65306 > 0x26 || ((1 << (a2 - 26)) & 0x7E0000007FLL) == 0))
          {
            return a2 - 65371 < 0xB;
          }
          return result;
        }
      }
    }
    return 0;
  }
  if (a2 - 1470 >= 0x37)
  {
    if (a2 - 1542 < 0xA)
      return 1;
  }
  else
  {
    result = 1;
    if (((0x60000000000125uLL >> (a2 + 66)) & 1) != 0 || a2 - 1542 < 0xA)
      return result;
  }
  result = 1;
  if (a2 - 1642 >= 4
    && (a2 - 1563 > 4 || ((1 << (a2 - 27)) & 0x19) == 0)
    && (a2 - 1748 > 0x15 || ((1 << (a2 + 44)) & 0x200401) == 0))
  {
    return 0;
  }
  return result;
}

void TRegExpGraph::~TRegExpGraph(TRegExpGraph *this)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)this)
    MEMORY[0x1AF44D160](*(_QWORD *)this - 16, 0x70C80105F9A77);
  v2 = *((_QWORD *)this + 1);
  if (v2)
    MEMORY[0x1AF44D160](v2 - 16, 0x1060C807B16006ELL);
  v3 = *((_QWORD *)this + 2);
  if (v3)
    MEMORY[0x1AF44D160](v3, 0x1000C8000313F17);
}

uint64_t TBuffer<wchar_t>::insert(uint64_t result, unint64_t a2, int *a3, unint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const void *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  _DWORD *v20;
  int v21;

  v6 = result;
  v7 = *(_QWORD *)(result + 16);
  if (v7 >= a2)
    v8 = a2;
  else
    v8 = *(_QWORD *)(result + 16);
  if (*(_BYTE *)(result + 1048))
  {
    v9 = v7 + a4;
    v10 = *(_QWORD *)(result + 8);
    if (v7 + a4 > v10 && v10 < 2 * v9)
    {
      *(_QWORD *)(result + 8) = (2 * v9) | 1;
      result = operator new[]();
      v11 = result;
      v12 = *(const void **)v6;
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
        result = (uint64_t)memmove((void *)result, *(const void **)v6, 4 * v7);
      if (v12 != (const void *)(v6 + 24) && v12)
      {
        result = MEMORY[0x1AF44D160](v12, 0x1000C8052888210);
        v7 = *(_QWORD *)(v6 + 16);
      }
      *(_QWORD *)v6 = v11;
    }
  }
  v13 = v8 + a4;
  v14 = *(_QWORD *)(v6 + 8);
  if (v8 < v7 && v13 < v14)
  {
    v16 = v7 + a4;
    if (v14 < v7 + a4)
      v16 = *(_QWORD *)(v6 + 8);
    v17 = v16 - v13;
    if (v17)
    {
      v18 = (_DWORD *)(*(_QWORD *)v6 + 4 * v16 - 4);
      do
      {
        *v18 = v18[-a4];
        --v18;
        --v17;
      }
      while (v17);
    }
  }
  v19 = v14 - v8;
  if (v14 > v8)
  {
    if (v19 >= a4)
      v19 = a4;
    if (v19)
    {
      v20 = (_DWORD *)(*(_QWORD *)v6 + 4 * v8);
      do
      {
        v21 = *a3++;
        *v20++ = v21;
        --v19;
      }
      while (v19);
    }
  }
  *(_QWORD *)(v6 + 16) = v7 + a4;
  if (v7 + a4 < v14)
    *(_DWORD *)(*(_QWORD *)v6 + 4 * (v7 + a4)) = 0;
  return result;
}

uint64_t TBuffer<wchar_t>::assign(uint64_t a1, int *a2)
{
  uint64_t v4;

  TBuffer<wchar_t>::resize(a1, 0);
  v4 = 0;
  while (a2[v4++])
    ;
  return TBuffer<wchar_t>::insert(a1, 0, a2, v4 - 1);
}

void TBuffer<wchar_t>::resize(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;

  if (*(_BYTE *)(a1 + 1048) && *(_QWORD *)(a1 + 8) < a2)
  {
    *(_QWORD *)(a1 + 8) = a2 + 1;
    v4 = (void *)operator new[]();
    v5 = v4;
    v6 = *(const void **)a1;
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      memmove(v4, *(const void **)a1, 4 * v7);
    if (v6 != (const void *)(a1 + 24) && v6)
      MEMORY[0x1AF44D160](v6, 0x1000C8052888210);
    *(_QWORD *)a1 = v5;
  }
  v8 = *(_QWORD *)(a1 + 16);
  if (v8 < a2)
  {
    v9 = a2;
    if (*(_BYTE *)(a1 + 1048)
      || ((v10 = *(_QWORD *)(a1 + 8), v10 >= a2) ? (v9 = a2) : (v9 = *(_QWORD *)(a1 + 8)),
          v8 < v10 ? (v11 = v9 == v8) : (v11 = 1),
          !v11))
    {
      bzero((void *)(*(_QWORD *)a1 + 4 * v8), 4 * (v9 - v8));
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
}

void quasar::SpeechRecognizerActiveConfiguration::all(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
  a1[32] = 0;
  a1[56] = 0;
  a1[64] = 0;
  a1[88] = 0;
  a1[96] = 0;
  a1[120] = 0;
  a1[128] = 0;
  a1[152] = 0;
  a1[160] = 0;
  a1[184] = 0;
  a1[192] = 0;
  a1[216] = 0;
  a1[224] = 0;
  a1[248] = 0;
}

void quasar::SpeechRecognizerActiveConfiguration::none(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  *(_BYTE *)(a1 + 24) = 1;
}

_QWORD *quasar::operator<<(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  const char *v6;
  uint64_t v7;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"[ ", 2);
  if (*(_BYTE *)(a2 + 24))
  {
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"samplingRateFilter", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" = {", 4);
    v6 = ",";
    v7 = 1;
    quasar::joinToStream<std::set<unsigned int>>((uint64_t)a1, (_QWORD *)a2, (uint64_t *)&v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"} ", 2);
  }
  v6 = "taskTypeFilter";
  v7 = 14;
  quasar::printOptionalSet<std::string>(a1, (uint64_t *)&v6, a2 + 32);
  v6 = "deviceIdFilter";
  v7 = 14;
  quasar::printOptionalSet<std::string>(a1, (uint64_t *)&v6, a2 + 64);
  v6 = "farFieldFilter";
  v7 = 14;
  quasar::printOptionalSet<BOOL>(a1, (uint64_t *)&v6, a2 + 96);
  v6 = "atypicalSpeechFilter";
  v7 = 20;
  quasar::printOptionalSet<BOOL>(a1, (uint64_t *)&v6, a2 + 128);
  v6 = "aneContextFilter";
  v7 = 16;
  quasar::printOptionalSet<std::string>(a1, (uint64_t *)&v6, a2 + 160);
  v6 = "cpuContextFilter";
  v7 = 16;
  quasar::printOptionalSet<std::string>(a1, (uint64_t *)&v6, a2 + 192);
  v6 = "gpuContextFilter";
  v7 = 16;
  quasar::printOptionalSet<std::string>(a1, (uint64_t *)&v6, a2 + 224);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]", 1);
  return a1;
}

{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v20[2];
  void *__p[2];
  unsigned __int8 v22;

  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{\"base\": ", 9);
  quasar::operator<<(v4, a2);
  v5 = *(unsigned __int8 *)(a2 + 95);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 80);
  if (v5)
  {
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"rawText\": \"", 12);
    v7 = *(char *)(a2 + 95);
    if (v7 >= 0)
      v8 = a2 + 72;
    else
      v8 = *(_QWORD *)(a2 + 72);
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a2 + 95);
    else
      v9 = *(_QWORD *)(a2 + 80);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\"", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"tmScore\": ", 13);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", \"lmScore\": ", 13);
  std::ostream::operator<<();
  if (*(_QWORD *)(a2 + 104) != *(_QWORD *)(a2 + 112))
  {
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"softAlignment\": [", 20);
    v20[0] = (uint64_t)",";
    v20[1] = 1;
    quasar::join<std::vector<float>>((uint64_t *)(a2 + 104), v20);
    if ((v22 & 0x80u) == 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if ((v22 & 0x80u) == 0)
      v14 = v22;
    else
      v14 = (uint64_t)__p[1];
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
    if ((char)v22 < 0)
      operator delete(__p[0]);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"id\": ", 8);
  v16 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", \"begin\": ", 11);
  v17 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", \"end\": ", 9);
  v18 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"}", 1);
  return a1;
}

{
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  void *p_p;
  uint64_t v20;
  uint64_t v22[2];
  void *__p;
  uint64_t v24;
  unsigned __int8 v25;

  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{\"base\": ", 9);
  quasar::operator<<(v4, a2);
  if (*(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"tokens\": [", 13);
    v22[0] = (uint64_t)",";
    v22[1] = 1;
    quasar::join<std::vector<quasar::TranslationTokenInternal>>((uint64_t *)(a2 + 136), v22);
    v6 = (v25 & 0x80u) == 0 ? &__p : (void **)__p;
    v7 = (v25 & 0x80u) == 0 ? v25 : v24;
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"]", 1);
    if ((char)v25 < 0)
      operator delete(__p);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"tmScore\": ", 13);
  v9 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", \"lmScore\": ", 13);
  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", \"hasSentencePieceIds\": ", 25);
  std::ostream::operator<<();
  v11 = *(unsigned __int8 *)(a2 + 191);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a2 + 176);
  if (v11)
  {
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"rawText\": \"", 14);
    v13 = *(char *)(a2 + 191);
    if (v13 >= 0)
      v14 = a2 + 168;
    else
      v14 = *(_QWORD *)(a2 + 168);
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a2 + 191);
    else
      v15 = *(_QWORD *)(a2 + 176);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\"", 1);
  }
  quasar::MetaInfo::json((quasar::MetaInfo::Impl **)(a2 + 192), (uint64_t)&__p);
  v17 = v25;
  if ((v25 & 0x80u) != 0)
    v17 = v24;
  if (v17)
  {
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"metaInfo\": ", 14);
    if ((v25 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v25 & 0x80u) == 0)
      v20 = v25;
    else
      v20 = v24;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)p_p, v20);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"}", 1);
  if ((char)v25 < 0)
    operator delete(__p);
  return a1;
}

{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *p_p;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  const char *v26;
  uint64_t v27;
  void *__p;
  uint64_t v29;
  unsigned __int8 v30;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{\"score\": ", 10);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", \"confidence\": ", 16);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", \"lowConfidence\": ", 19);
  std::ostream::operator<<();
  if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 24))
  {
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"tokens\": [", 13);
    v26 = ",";
    v27 = 1;
    quasar::join<std::vector<quasar::TranslationToken>>((uint64_t *)(a2 + 16), (uint64_t *)&v26);
    v7 = (v30 & 0x80u) == 0 ? &__p : (void **)__p;
    v8 = (v30 & 0x80u) == 0 ? v30 : v29;
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"]", 1);
    if ((char)v30 < 0)
      operator delete(__p);
  }
  v10 = *(unsigned __int8 *)(a2 + 63);
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a2 + 48);
  if (v10)
  {
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"metaInfo\": ", 14);
    v12 = *(char *)(a2 + 63);
    if (v12 >= 0)
      v13 = a2 + 40;
    else
      v13 = *(_QWORD *)(a2 + 40);
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(a2 + 63);
    else
      v14 = *(_QWORD *)(a2 + 48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
  }
  if (*(_BYTE *)(a2 + 88))
  {
    v15 = *(unsigned __int8 *)(a2 + 87);
    if ((v15 & 0x80u) != 0)
      v15 = *(_QWORD *)(a2 + 72);
    if (v15)
    {
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"romanization\": ", 18);
      v17 = *(char *)(a2 + 87);
      if (v17 >= 0)
        v18 = a2 + 64;
      else
        v18 = *(_QWORD *)(a2 + 64);
      if (v17 >= 0)
        v19 = *(unsigned __int8 *)(a2 + 87);
      else
        v19 = *(_QWORD *)(a2 + 72);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
    }
  }
  if (*(_BYTE *)(a2 + 120) && *(_QWORD *)(a2 + 96) != *(_QWORD *)(a2 + 104))
  {
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"alternativeSelectionSpans\": [", 32);
    v26 = ",";
    v27 = 1;
    quasar::join<std::vector<quasar::AlternativeSelectionSpan>>((uint64_t *)(a2 + 96), (uint64_t *)&v26);
    if ((v30 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v30 & 0x80u) == 0)
      v22 = v30;
    else
      v22 = v29;
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)p_p, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"]", 1);
    if ((char)v30 < 0)
      operator delete(__p);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"isFinal\": ", 13);
  v24 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"}", 1);
  return a1;
}

{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  void **v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v49[2];
  void *__p[2];
  unsigned __int8 v51;

  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Token(", 6);
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = a2;
  else
    v6 = *(_QWORD *)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)")", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)",", 1);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)",", 1);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)",", 1);
  v13 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)",", 1);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)",", 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)",", 1);
  v16 = (_QWORD *)std::ostream::operator<<();
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)",", 1);
  v18 = *(char *)(a2 + 71);
  if (v18 >= 0)
    v19 = a2 + 48;
  else
    v19 = *(_QWORD *)(a2 + 48);
  if (v18 >= 0)
    v20 = *(unsigned __int8 *)(a2 + 71);
  else
    v20 = *(_QWORD *)(a2 + 56);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)",", 1);
  v49[0] = (uint64_t)" ";
  v49[1] = 1;
  quasar::join<std::vector<std::string>>((uint64_t *)(a2 + 72), v49);
  if ((v51 & 0x80u) == 0)
    v23 = __p;
  else
    v23 = (void **)__p[0];
  if ((v51 & 0x80u) == 0)
    v24 = v51;
  else
    v24 = (uint64_t)__p[1];
  v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)",", 1);
  v27 = *(char *)(a2 + 119);
  if (v27 >= 0)
    v28 = a2 + 96;
  else
    v28 = *(_QWORD *)(a2 + 96);
  if (v27 >= 0)
    v29 = *(unsigned __int8 *)(a2 + 119);
  else
    v29 = *(_QWORD *)(a2 + 104);
  v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)",", 1);
  v31 = (_QWORD *)std::ostream::operator<<();
  v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)",", 1);
  v33 = *(char *)(a2 + 167);
  if (v33 >= 0)
    v34 = a2 + 144;
  else
    v34 = *(_QWORD *)(a2 + 144);
  if (v33 >= 0)
    v35 = *(unsigned __int8 *)(a2 + 167);
  else
    v35 = *(_QWORD *)(a2 + 152);
  v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
  v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)",", 1);
  v38 = quasar::operator<<(v37, *(_DWORD *)(a2 + 168));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)",", 1);
  v39 = (_QWORD *)std::ostream::operator<<();
  v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)",", 1);
  v41 = *(char *)(a2 + 199);
  if (v41 >= 0)
    v42 = a2 + 176;
  else
    v42 = *(_QWORD *)(a2 + 176);
  if (v41 >= 0)
    v43 = *(unsigned __int8 *)(a2 + 199);
  else
    v43 = *(_QWORD *)(a2 + 184);
  v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)",", 1);
  v45 = (_QWORD *)std::ostream::operator<<();
  v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)", ", 2);
  v47 = quasar::operator<<(v46);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)")", 1);
  if ((char)v51 < 0)
    operator delete(__p[0]);
  return a1;
}

{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v19[2];
  void *__p[2];
  unsigned __int8 v21;

  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\"id\": ", 6);
  v5 = (_QWORD *)std::ostream::operator<<();
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", \"text\": \"", 11);
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *(_QWORD *)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\", \"hasSpaceAfer\": ", 19);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", \"hasSpaceBefore\": ", 20);
  std::ostream::operator<<();
  if (*(_QWORD *)(a2 + 32) != *(_QWORD *)(a2 + 40))
  {
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"alignment\": [", 16);
    v19[0] = (uint64_t)",";
    v19[1] = 1;
    quasar::join<std::vector<int>>((uint64_t *)(a2 + 32), v19);
    if ((v21 & 0x80u) == 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if ((v21 & 0x80u) == 0)
      v14 = v21;
    else
      v14 = (uint64_t)__p[1];
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
    if ((char)v21 < 0)
      operator delete(__p[0]);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"confidence\": ", 16);
  v16 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", \"score\": ", 11);
  v17 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"}", 1);
  return a1;
}

{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void **v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v21[2];
  void *__p[2];
  unsigned __int8 v23;
  uint64_t v24[2];
  void *v25[2];
  unsigned __int8 v26;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{frame=", 7);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" finalActive=", 13);
  v5 = (_QWORD *)std::ostream::operator<<();
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" words=[", 8);
  v24[0] = (uint64_t)",";
  v24[1] = 1;
  quasar::join<std::vector<std::string>>((uint64_t *)(a2 + 8), v24);
  if ((v26 & 0x80u) == 0)
    v7 = v25;
  else
    v7 = (void **)v25[0];
  if ((v26 & 0x80u) == 0)
    v8 = v26;
  else
    v8 = (uint64_t)v25[1];
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"]", 1);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ids=[", 6);
  v21[0] = (uint64_t)",";
  v21[1] = 1;
  quasar::join<std::vector<int>>((uint64_t *)(a2 + 32), v21);
  if ((v23 & 0x80u) == 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if ((v23 & 0x80u) == 0)
    v13 = v23;
  else
    v13 = (uint64_t)__p[1];
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"]", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" trailingSilence=", 17);
  v16 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" silencePosterior=", 18);
  v17 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" allowTrigger=", 14);
  v18 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" chunkEnd=", 10);
  v19 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"}", 1);
  if ((char)v23 < 0)
    operator delete(__p[0]);
  if ((char)v26 < 0)
    operator delete(v25[0]);
  return a1;
}

{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  void **v19;
  uint64_t v20;
  _QWORD *v21;
  void *v23[2];
  char v24;
  void *__p[2];
  unsigned __int8 v26;

  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"Word(", 5);
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = a2;
  else
    v6 = *(_QWORD *)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)",", 1);
  v12 = *(_QWORD *)(a2 + 24);
  v11 = a2 + 24;
  v10 = v12;
  v13 = *(char *)(v11 + 23);
  if (v13 >= 0)
    v14 = v11;
  else
    v14 = v10;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(v11 + 23);
  else
    v15 = *(_QWORD *)(v11 + 8);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v14, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)",", 1);
  v17 = (_QWORD *)std::ostream::operator<<();
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)",", 1);
  std::string::basic_string[abi:ne180100]<0>(v23, "|");
  quasar::LmeDataFactoryBase::PronSet::toString((_QWORD *)(v11 + 32), 1, (uint64_t)v23);
  if ((v26 & 0x80u) == 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  if ((v26 & 0x80u) == 0)
    v20 = v26;
  else
    v20 = (uint64_t)__p[1];
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)")", 1);
  if ((char)v26 < 0)
    operator delete(__p[0]);
  if (v24 < 0)
    operator delete(v23[0]);
  return a1;
}

{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14[2];
  void *__p[2];
  unsigned __int8 v16;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{", 1);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"sourceRange\": ", 15);
  quasar::operator<<(v4);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"projectionRange\": ", 21);
  quasar::operator<<(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = (uint64_t **)(a2 + 16);
  if (v6 != v7)
  {
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", \"alternatives\": [", 19);
    v14[0] = (uint64_t)",";
    v14[1] = 1;
    quasar::join<std::vector<quasar::AlternativeSelectionSpan::Alternative>>(v8, v14);
    if ((v16 & 0x80u) == 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    if ((v16 & 0x80u) == 0)
      v11 = v16;
    else
      v11 = (uint64_t)__p[1];
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"]", 1);
    if ((char)v16 < 0)
      operator delete(__p[0]);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"}", 1);
  return a1;
}

{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{\"definition\": \"", 16);
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = a2;
  else
    v6 = *(_QWORD *)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\"}", 2);
  return a1;
}

_QWORD *quasar::printOptionalSet<std::string>(_QWORD *result, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6[2];

  if (*(_BYTE *)(a3 + 24))
  {
    v4 = result;
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(result, *a2, a2[1]);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" = {", 4);
    v6[0] = (uint64_t)",";
    v6[1] = 1;
    quasar::joinToStream<std::set<std::string>>(v4, (_QWORD *)a3, v6);
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"} ", 2);
  }
  return result;
}

_QWORD *quasar::printOptionalSet<BOOL>(_QWORD *result, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6[2];

  if (*(_BYTE *)(a3 + 24))
  {
    v4 = result;
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(result, *a2, a2[1]);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" = {", 4);
    v6[0] = (uint64_t)",";
    v6[1] = 1;
    quasar::joinToStream<std::set<BOOL>>((uint64_t)v4, (_QWORD *)a3, v6);
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"} ", 2);
  }
  return result;
}

uint64_t quasar::joinToStream<std::set<unsigned int>>(uint64_t result, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v6 = (_QWORD *)result;
    v7 = 1;
    do
    {
      if ((v7 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      result = std::ostream::operator<<();
      v8 = (_QWORD *)v4[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v4[2];
          v10 = *v9 == (_QWORD)v4;
          v4 = v9;
        }
        while (!v10);
      }
      v7 = 0;
      v4 = v9;
    }
    while (v9 != v3);
  }
  return result;
}

_QWORD *quasar::joinToStream<std::set<std::string>>(_QWORD *result, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;

  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v6 = result;
    v7 = 1;
    do
    {
      if ((v7 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      v8 = *((char *)v4 + 55);
      if (v8 >= 0)
        v9 = (uint64_t)(v4 + 4);
      else
        v9 = v4[4];
      if (v8 >= 0)
        v10 = *((unsigned __int8 *)v4 + 55);
      else
        v10 = v4[5];
      result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v9, v10);
      v11 = (_QWORD *)v4[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)v4[2];
          v13 = *v12 == (_QWORD)v4;
          v4 = v12;
        }
        while (!v13);
      }
      v7 = 0;
      v4 = v12;
    }
    while (v12 != v3);
  }
  return result;
}

uint64_t quasar::joinToStream<std::set<BOOL>>(uint64_t result, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  v3 = a2 + 1;
  v4 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v6 = (_QWORD *)result;
    v7 = 1;
    do
    {
      if ((v7 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      result = std::ostream::operator<<();
      v8 = (_QWORD *)v4[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v4[2];
          v10 = *v9 == (_QWORD)v4;
          v4 = v9;
        }
        while (!v10);
      }
      v7 = 0;
      v4 = v9;
    }
    while (v9 != v3);
  }
  return result;
}

uint64_t quasar::PSRAudioProcessor::PSRAudioProcessor(uint64_t a1, quasar::SystemConfig *a2, uint64_t a3, unsigned int a4, uint64_t *a5)
{
  _QWORD *v8;
  char **v9;
  uint64_t Ptree;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t i;
  __int128 v17;
  size_t v18;
  std::string *v19;
  const void *v20;
  std::string *v21;
  std::string::size_type size;
  std::string *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  char **v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  std::string v63;
  std::string __p;
  __int128 v65;
  std::string v66;
  __int128 v67;
  char v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _BYTE v72[41];
  int v73;
  char v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  int v81;
  std::string v82;
  std::string v83;
  char v84;
  unsigned int v85;

  *(_OWORD *)(a1 + 16) = 0u;
  v8 = (_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = 0u;
  v9 = (char **)(a1 + 32);
  v85 = a4;
  v60 = (char **)(a1 + 56);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if (*a5)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)a1, a5);
  }
  else
  {
    std::allocate_shared[abi:ne180100]<quasar::RecogAudioBuffer,std::allocator<quasar::RecogAudioBuffer>,unsigned int const&,void>(&v85, &v67);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1, &v67);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
    if (*((_QWORD *)&v67 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  Ptree = quasar::SystemConfig::getPtree((uint64_t)a2, a3);
  v81 = *(_DWORD *)Ptree;
  if (*(char *)(Ptree + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v82, *(const std::string::value_type **)(Ptree + 8), *(_QWORD *)(Ptree + 16));
  }
  else
  {
    v11 = *(_OWORD *)(Ptree + 8);
    v82.__r_.__value_.__r.__words[2] = *(_QWORD *)(Ptree + 24);
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v11;
  }
  memset(&v83, 0, sizeof(v83));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v83, *(_QWORD *)(Ptree + 32), *(_QWORD *)(Ptree + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(Ptree + 40) - *(_QWORD *)(Ptree + 32)) >> 3));
  v84 = *(_BYTE *)(Ptree + 56);
  v79 = 0;
  v80 = 0;
  LODWORD(v67) = v85;
  *((_QWORD *)&v67 + 1) = 0;
  v68 = 0;
  v73 = 0;
  v74 = 0;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  memset(v72, 0, sizeof(v72));
  v75 = 0u;
  v76 = 0u;
  v77 = 0;
  v78 = 1;
  v15 = quasar::PTree::begin((quasar::PTree *)&v81);
  for (i = quasar::PTree::end((quasar::PTree *)&v81); v15 != i; v15 += 88)
  {
    if (*(char *)(v15 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v66, *(const std::string::value_type **)v15, *(_QWORD *)(v15 + 8));
    }
    else
    {
      v17 = *(_OWORD *)v15;
      v66.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 16);
      *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v17;
    }
    if (*(char *)(a3 + 23) >= 0)
      v18 = *(unsigned __int8 *)(a3 + 23);
    else
      v18 = *(_QWORD *)(a3 + 8);
    std::string::basic_string[abi:ne180100]((uint64_t)&v63, v18 + 1);
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v63;
    else
      v19 = (std::string *)v63.__r_.__value_.__r.__words[0];
    if (v18)
    {
      if (*(char *)(a3 + 23) >= 0)
        v20 = (const void *)a3;
      else
        v20 = *(const void **)a3;
      memmove(v19, v20, v18);
    }
    *(_WORD *)((char *)&v19->__r_.__value_.__l.__data_ + v18) = 46;
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &v66;
    else
      v21 = (std::string *)v66.__r_.__value_.__r.__words[0];
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
    else
      size = v66.__r_.__value_.__l.__size_;
    v23 = std::string::append(&v63, (const std::string::value_type *)v21, size);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    quasar::FeatureExtractorSimpleFactory::createFeatureExtractor(&__p, &v65);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    quasar::FeatureExtractor::init((quasar::FeatureExtractor *)v65, a2);
    std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100](v9, &v65);
    v25 = v65;
    if (*(_QWORD *)a1)
      v26 = *(_QWORD *)a1 + 16;
    else
      v26 = 0;
    v61 = v79;
    v62 = v80;
    if (v80)
    {
      p_shared_owners = (unint64_t *)&v80->__shared_owners_;
      do
        v28 = __ldxr(p_shared_owners);
      while (__stxr(v28 + 1, p_shared_owners));
    }
    quasar::FeatureExtractor::createOnlineFeInput(v25, v26, &v61);
    v29 = v62;
    if (v62)
    {
      v30 = (unint64_t *)&v62->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100](v60, (__int128 *)&__p);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v79, (uint64_t *)(*(_QWORD *)(a1 + 64) - 16));
    v32 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v33 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
    if (*((_QWORD *)&v65 + 1))
    {
      v36 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v8, &v79);
  if (SHIBYTE(v77) < 0)
    operator delete((void *)v76);
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
  if (*((_QWORD *)&v75 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = *(std::__shared_weak_count **)&v72[32];
  if (*(_QWORD *)&v72[32])
  {
    v42 = (unint64_t *)(*(_QWORD *)&v72[32] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v66.__r_.__value_.__r.__words[0] = (std::string::size_type)v72;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v66);
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
  if (*((_QWORD *)&v71 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
  if (*((_QWORD *)&v69 + 1))
  {
    v51 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = *((_QWORD *)&v67 + 1);
  if (*((_QWORD *)&v67 + 1))
  {
    v54 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53);
  }
  v56 = v80;
  if (v80)
  {
    v57 = (unint64_t *)&v80->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  quasar::PTree::~PTree((quasar::PTree *)&v81);
  return a1;
}

void sub_1AD7FA89C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35)
{
  uint64_t v35;
  uint64_t v36;

  a35 = a11;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v36);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v35);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

void quasar::FeatureExtractorArgs::~FeatureExtractorArgs(void **this)
{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t v4;
  void **v5;

  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 16));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 12));
  v5 = this + 9;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 7));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 5));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 3));
  v2 = (unint64_t *)this[1];
  if (v2)
  {
    v3 = v2 + 1;
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
      (*(void (**)(unint64_t *))(*v2 + 16))(v2);
  }
}

uint64_t quasar::PSRAudioProcessor::compute(uint64_t a1, uint64_t a2)
{
  uint64_t (***v4)(_QWORD, _OWORD *);
  uint64_t v5;
  _OWORD v7[3];
  _OWORD v8[3];
  _BYTE v9[40];
  _BYTE v10[40];
  _BYTE v11[40];
  _BYTE v12[40];
  _BYTE v13[40];

  kaldi::Matrix<float>::Matrix((uint64_t)v13);
  kaldi::Matrix<float>::Matrix((uint64_t)v12);
  kaldi::Matrix<float>::Matrix((uint64_t)v11);
  kaldi::Matrix<float>::Matrix((uint64_t)v10);
  kaldi::Matrix<float>::Matrix((uint64_t)v9);
  kaldi::OnlineFeatInputItfIO::OnlineFeatInputItfIO(v8, a2, (uint64_t)v13, (uint64_t)v12, (uint64_t)v11, (uint64_t)v10, (uint64_t)v9);
  v4 = *(uint64_t (****)(_QWORD, _OWORD *))(a1 + 16);
  v7[0] = v8[0];
  v7[1] = v8[1];
  v7[2] = v8[2];
  v5 = (**v4)(v4, v7);
  kaldi::Matrix<float>::~Matrix((uint64_t)v9);
  kaldi::Matrix<float>::~Matrix((uint64_t)v10);
  kaldi::Matrix<float>::~Matrix((uint64_t)v11);
  kaldi::Matrix<float>::~Matrix((uint64_t)v12);
  kaldi::Matrix<float>::~Matrix((uint64_t)v13);
  return v5;
}

void sub_1AD7FAC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  kaldi::Matrix<float>::~Matrix((uint64_t)&a27);
  kaldi::Matrix<float>::~Matrix(v27 - 152);
  kaldi::Matrix<float>::~Matrix(v27 - 112);
  kaldi::Matrix<float>::~Matrix(v27 - 72);
  _Unwind_Resume(a1);
}

uint64_t quasar::PSRAudioProcessor::frameDurationMs(quasar::PSRAudioProcessor *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
}

void std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::RecogAudioBuffer,std::allocator<quasar::RecogAudioBuffer>,unsigned int const&,void>@<X0>(unsigned int *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x160uLL);
  result = std::__shared_ptr_emplace<quasar::RecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<unsigned int const&,std::allocator<quasar::RecogAudioBuffer>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AD7FAD5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::RecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<unsigned int const&,std::allocator<quasar::RecogAudioBuffer>,0>(_QWORD *a1, unsigned int *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E5D42F00;
  a1[1] = 0;
  std::allocator<quasar::RecogAudioBuffer>::construct[abi:ne180100]<quasar::RecogAudioBuffer,unsigned int const&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1AD7FADBC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RecogAudioBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42F00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::RecogAudioBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42F00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::RecogAudioBuffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<quasar::RecogAudioBuffer>::construct[abi:ne180100]<quasar::RecogAudioBuffer,unsigned int const&>(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  void *__p[2];
  char v11;

  v4 = *a3;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  _ZNSt3__115allocate_sharedB8ne180100IKN5kaldi5TimerENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v8);
  quasar::RecogAudioBuffer::RecogAudioBuffer(a2, v4, 120, 0, 1, (__int128 *)__p, &v8, 120, 0, 4000);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v11 < 0)
    operator delete(__p[0]);
}

void sub_1AD7FAEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IKN5kaldi5TimerENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  clockid_t v3;
  uint64_t result;

  v2 = (char *)operator new(0x40uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIKN5kaldi5TimerENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_((uint64_t)v2, v3);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_1AD7FAF44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__120__shared_ptr_emplaceIKN5kaldi5TimerENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(uint64_t a1, clockid_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E5D40B90;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  kaldi::Timer::Reset((kaldi::Timer *)(a1 + 24), a2);
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_1AD7FAF9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::Timer const>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40B90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::Timer const>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40B90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL compressed_filename_p(const char *a1)
{
  unsigned int v2;

  v2 = strlen(a1);
  return v2 >= 3uLL && strcmp(&a1[v2 - 2], ".Z") == 0;
}

uint64_t gzipped_filename_p(const char *a1)
{
  unint64_t v2;

  v2 = strlen(a1);
  if (v2 >= 4)
  {
    if (!strcmp(&a1[v2 - 3], ".gz"))
      return 1;
    return strcmp(&a1[v2 - 2], ".z") == 0;
  }
  if (v2 == 3)
    return strcmp(&a1[v2 - 2], ".z") == 0;
  return 0;
}

BOOL bzipped_filename_p(const char *a1)
{
  unsigned int v2;

  v2 = strlen(a1);
  return v2 >= 5uLL && strcmp(&a1[v2 - 4], ".bz2") == 0;
}

BOOL sevenzipped_filename_p(const char *a1)
{
  unsigned int v2;

  v2 = strlen(a1);
  return v2 >= 4uLL && strcmp(&a1[v2 - 3], ".7z") == 0;
}

BOOL xz_filename_p(const char *a1)
{
  unsigned int v2;

  v2 = strlen(a1);
  return v2 >= 4uLL && strcmp(&a1[v2 - 3], ".xz") == 0;
}

FILE *srilm_zopen(const char *a1, const char *a2)
{
  int v4;
  const char *v5;
  int v6;
  char *v7;
  int v8;
  char *v9;
  int v10;
  int v12;
  int v13;
  int v14;
  const char *v15;
  char __str[1124];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!strcmp(a1, "-"))
  {
    v6 = *(unsigned __int8 *)a2;
    if (v6 != 97 && v6 != 119)
    {
      if (v6 != 114)
        return 0;
      v7 = &srilm_zopen_stdin_used;
      if (srilm_zopen_stdin_used == 1)
      {
        if ((srilm_zopen_stdin_warning & 1) != 0)
        {
LABEL_11:
          v8 = 0;
          goto LABEL_19;
        }
        fwrite("warning: '-' used multiple times for input\n", 0x2BuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
        v7 = &srilm_zopen_stdin_warning;
      }
      *v7 = 1;
      goto LABEL_11;
    }
    v9 = &srilm_zopen_stdout_used;
    if (srilm_zopen_stdout_used == 1)
    {
      if ((srilm_zopen_stdout_warning & 1) != 0)
      {
LABEL_18:
        v8 = 1;
LABEL_19:
        v10 = dup(v8);
        if ((v10 & 0x80000000) == 0)
          return fdopen(v10, a2);
        return 0;
      }
      fwrite("warning: '-' used multiple times for output\n", 0x2CuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      v9 = &srilm_zopen_stdout_warning;
    }
    *v9 = 1;
    goto LABEL_18;
  }
  if (compressed_filename_p(a1))
  {
    v4 = 0;
    v5 = "exec compress -c";
  }
  else if (gzipped_filename_p(a1))
  {
    v4 = 0;
    v5 = "exec gzip -c";
  }
  else if (bzipped_filename_p(a1))
  {
    v4 = 0;
    v5 = "exec bzip2";
  }
  else if (sevenzipped_filename_p(a1))
  {
    v4 = 1;
    v5 = "exec 7z a -si";
  }
  else
  {
    if (!xz_filename_p(a1))
      return fopen(a1, a2);
    v4 = 0;
    v5 = "exec xz";
  }
  v12 = *(unsigned __int8 *)a2;
  if (v12 == 119)
  {
    v14 = open(a1, 513, 438);
    if ((v14 & 0x80000000) == 0)
    {
      close(v14);
      if (v4)
      {
        unlink(a1);
        v15 = "%s;%s %s";
      }
      else
      {
        v15 = "%s;%s >%s";
      }
      snprintf(__str, 0x464uLL, v15, ":", v5, a1);
      return popen(__str, a2);
    }
    return 0;
  }
  if (v12 != 114)
    return 0;
  v13 = open(a1, 0);
  if (v13 < 0)
    return 0;
  close(v13);
  snprintf(__str, 0x464uLL, "%s;%s %s");
  return popen(__str, a2);
}

uint64_t zclose(FILE *a1)
{
  int v2;
  uint64_t v4;
  uint64_t v6;
  stat v7;

  memset(&v7, 0, sizeof(v7));
  v2 = fileno(a1);
  if (fstat(v2, &v7) < 0)
    return 0xFFFFFFFFLL;
  if ((v7.st_mode & 0xF000) != 0x1000 || !fileno(a1) || fileno(a1) == 1)
    return fclose(a1);
  v6 = pclose(a1);
  if ((_DWORD)v6 == 13)
    return 0;
  v4 = v6;
  if ((_DWORD)v6 == -1)
    return ferror(a1);
  if (!*__error())
    *__error() = 5;
  return v4;
}

quasar::artifact::AppLmArtifact *quasar::artifact::LoadLmHandleFromArtifact@<X0>(__int128 *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  quasar::artifact::AppLmArtifact *v6;
  quasar::artifact::AppLmArtifactLifeCycleStage *LifeCycleStage;
  int isTextNormalized;
  uint64_t v9;
  quasar::artifact::AppLmArtifact *result;
  uint64_t v11;
  quasar::artifact::AppLmArtifact *v12;

  v6 = (quasar::artifact::AppLmArtifact *)operator new();
  quasar::artifact::AppLmArtifact::AppLmArtifact(v6);
  LifeCycleStage = quasar::artifact::AppLmArtifact::getLifeCycleStage(v6);
  isTextNormalized = quasar::artifact::AppLmArtifactLifeCycleStage::isTextNormalized(LifeCycleStage);
  v9 = *a2;
  if (isTextNormalized)
  {
    *a2 = 0;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v9 = *a2;
    }
  }
  v11 = v9;
  v12 = v6;
  *a2 = 0;
  quasar::artifact::LoadLmHandleFromArtifact(&v12, a1, &v11, a3);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  result = v12;
  if (v12)
    return (quasar::artifact::AppLmArtifact *)(*(uint64_t (**)(quasar::artifact::AppLmArtifact *))(*(_QWORD *)v12 + 8))(v12);
  return result;
}

void sub_1AD7FB6DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void quasar::artifact::LoadLmHandleFromArtifact(quasar::artifact::AppLmArtifact **a1@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  quasar::artifact::AppLmArtifactLifeCycleStage *LifeCycleStage;
  quasar::artifact::AppLmArtifactLifeCycleStages *v9;
  int v10;
  uint64_t v11;
  quasar::artifact::AppLmArtifactLifeCycleStages *v12;
  quasar::artifact::AppLmArtifact *v13;
  int isAdaptableToSystemConfig;
  _QWORD *v15;
  quasar::PTree *v16;
  uint64_t String;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  quasar::artifact::AppLmArtifactLifeCycleStages *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  quasar::artifact::AppLmArtifact *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  quasar::artifact::AppLmArtifact *v33;
  quasar::artifact::AppLmArtifactLifeCycleStage *v34;
  quasar::artifact::AppLmArtifactLifeCycleStages *v35;
  int v36;
  uint64_t v37;
  quasar::artifact::AppLmArtifact *v38;
  _BOOL4 hasInfo;
  _BOOL4 v40;
  quasar::artifact::AppLmArtifact *v41;
  float v42;
  quasar::artifact::AppLmArtifact *v43;
  void *__p[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  quasar::artifact::AppLmArtifact *v62;
  quasar::artifact::AppLmArtifact *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67[2];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;

  LifeCycleStage = quasar::artifact::AppLmArtifact::getLifeCycleStage(*a1);
  v9 = (quasar::artifact::AppLmArtifactLifeCycleStages *)quasar::artifact::AppLmArtifactLifeCycleStage::operator int((uint64_t)LifeCycleStage);
  v10 = (int)v9;
  v11 = quasar::artifact::AppLmArtifactLifeCycleStages::get(v9);
  v12 = (quasar::artifact::AppLmArtifactLifeCycleStages *)quasar::artifact::AppLmArtifactLifeCycleStage::operator int(v11 + 320);
  if (v10 == (_DWORD)v12)
  {
    v13 = *a1;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    *(_OWORD *)__p = 0u;
    v45 = 0u;
    LODWORD(v46) = 1065353216;
    quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v67, (uint64_t)a2, (uint64_t *)&v64, (uint64_t)__p);
    isAdaptableToSystemConfig = quasar::artifact::AppLmArtifact::isAdaptableToSystemConfig(v13, (const quasar::SystemConfig *)v67);
    quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v67);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
    __p[0] = &v64;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (isAdaptableToSystemConfig)
    {
      quasar::artifact::AppLmArtifact::getLmHandle(*a1, 0.0, a4);
    }
    else
    {
      if (quasar::gLogLevel >= 1)
      {
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        *(_OWORD *)v67 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"Decoding ready artifact not compatible with speech model (datapack) version", 75);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v67);
      }
      *a4 = 0;
    }
    return;
  }
  if (quasar::gLogLevel >= 2)
  {
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    *(_OWORD *)v67 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v67);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"Artifact in ", 12);
    v16 = quasar::artifact::AppLmArtifact::getLifeCycleStage(*a1);
    String = quasar::PTree::getString(v16);
    v18 = *(char *)(String + 23);
    if (v18 >= 0)
      v19 = String;
    else
      v19 = *(_QWORD *)String;
    if (v18 >= 0)
      v20 = *(unsigned __int8 *)(String + 23);
    else
      v20 = *(_QWORD *)(String + 8);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v19, v20);
    v22 = (quasar::artifact::AppLmArtifactLifeCycleStages *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" stage will be transformed to ", 30);
    v23 = quasar::artifact::AppLmArtifactLifeCycleStages::get(v22);
    v24 = quasar::PTree::getString((quasar::PTree *)(v23 + 320));
    v25 = *(char *)(v24 + 23);
    if (v25 >= 0)
      v26 = v24;
    else
      v26 = *(_QWORD *)v24;
    if (v25 >= 0)
      v27 = *(unsigned __int8 *)(v24 + 23);
    else
      v27 = *(_QWORD *)(v24 + 8);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v26, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" stage", 6);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v67);
  }
  v29 = *a1;
  *a1 = 0;
  v62 = v29;
  v30 = quasar::artifact::AppLmArtifactLifeCycleStages::get(v12);
  v31 = *a3;
  *a3 = 0;
  v61 = v31;
  std::string::basic_string[abi:ne180100]<0>(v67, "app-lm.data");
  std::string::basic_string[abi:ne180100]<0>(__p, "app-lm.NGRAM");
  quasar::artifact::TransitionArtifact(&v62, (quasar::artifact *)(v30 + 320), a2, &v61, (uint64_t)v67, 1, &v63);
  if (SBYTE7(v45) < 0)
    operator delete(__p[0]);
  if (SBYTE7(v68) < 0)
    operator delete(v67[0]);
  v32 = v61;
  v61 = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = v62;
  v62 = 0;
  if (v33)
    (*(void (**)(quasar::artifact::AppLmArtifact *))(*(_QWORD *)v33 + 8))(v33);
  if (!v63
    || (v34 = quasar::artifact::AppLmArtifact::getLifeCycleStage(v63),
        v35 = (quasar::artifact::AppLmArtifactLifeCycleStages *)quasar::artifact::AppLmArtifactLifeCycleStage::operator int((uint64_t)v34),
        v36 = (int)v35,
        v37 = quasar::artifact::AppLmArtifactLifeCycleStages::get(v35),
        v36 != quasar::artifact::AppLmArtifactLifeCycleStage::operator int(v37 + 320)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v67);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"transformedArtifact != nullptr && transformedArtifact->getLifeCycleStage() == AppLmArtifactLifeCycleStages::get().DECODING_READY", 128);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v67);
  }
  v64 = 0;
  v65 = 0;
  v66 = 0;
  *(_OWORD *)__p = 0u;
  v45 = 0u;
  LODWORD(v46) = 1065353216;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v67, (uint64_t)a2, (uint64_t *)&v64, (uint64_t)__p);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  __p[0] = &v64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if ((quasar::artifact::AppLmArtifact::isAdaptableToSystemConfig(v63, (const quasar::SystemConfig *)v67) & 1) == 0)
  {
    if (quasar::gLogLevel >= 1)
    {
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Artifact transformed to decoding readiness not compatible with speech model (datapack) version", 94);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
    *a4 = 0;
    goto LABEL_44;
  }
  v38 = v63;
  std::string::basic_string[abi:ne180100]<0>(__p, "language-model-weight");
  hasInfo = quasar::artifact::Artifact::hasInfo((uint64_t)v38, (const void **)__p);
  v40 = hasInfo;
  if (SBYTE7(v45) < 0)
  {
    operator delete(__p[0]);
    if (v40)
      goto LABEL_31;
  }
  else if (hasInfo)
  {
LABEL_31:
    v41 = v63;
    std::string::basic_string[abi:ne180100]<0>(&v64, "language-model-weight");
    quasar::artifact::Artifact::getInfo((uint64_t)v41, (uint64_t)&v64, (std::string *)__p);
    v42 = std::stof((const std::string *)__p, 0);
    if (SBYTE7(v45) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v66) < 0)
      operator delete(v64);
    quasar::artifact::AppLmArtifact::getLmHandle(v63, v42, a4);
    goto LABEL_44;
  }
  quasar::artifact::AppLmArtifact::getLmHandle(v63, 0.0, a4);
LABEL_44:
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v67);
  v43 = v63;
  v63 = 0;
  if (v43)
    (*(void (**)(quasar::artifact::AppLmArtifact *))(*(_QWORD *)v43 + 8))(v43);
}

_QWORD *quasar::artifact::GetTargetLmeTagForAddingCustomProns@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "\\unknown-first");
}

void quasar::artifact::GetTargetLmeForAddingCustomProns(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  quasar::PTree *Ptree;
  uint64_t String;
  __int128 v5;
  void *__p[2];
  __int128 v7;
  int v8;
  uint64_t v9[3];
  _BYTE v10[1544];

  memset(v9, 0, sizeof(v9));
  *(_OWORD *)__p = 0u;
  v7 = 0u;
  v8 = 1065353216;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v10, a1, v9, (uint64_t)__p);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  __p[0] = v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "app-lm.data.oov-replacement");
  Ptree = (quasar::PTree *)quasar::SystemConfig::getPtree((uint64_t)v10, (uint64_t)__p);
  String = quasar::PTree::getString(Ptree);
  if (*(char *)(String + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)String, *(_QWORD *)(String + 8));
  }
  else
  {
    v5 = *(_OWORD *)String;
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(String + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
  }
  if (SBYTE7(v7) < 0)
    operator delete(__p[0]);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v10);
}

void sub_1AD7FBE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a21);
  _Unwind_Resume(a1);
}

uint64_t std::default_delete<quasar::CustomPronData>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void **v4;

  if (a2)
  {
    v4 = (void **)(a2 + 56);
    std::vector<quasar::AppLmData::Oov>::__destroy_vector::operator()[abi:ne180100](&v4);
    v4 = (void **)(a2 + 32);
    std::vector<quasar::AppLmData::Oov>::__destroy_vector::operator()[abi:ne180100](&v4);
    if (*(char *)(a2 + 31) < 0)
      operator delete(*(void **)(a2 + 8));
    return MEMORY[0x1AF44D190](a2, 0x1032C40BCD9A066);
  }
  return result;
}

void ***std::unique_ptr<std::vector<std::string>>::reset[abi:ne180100](void ***result, void **a2)
{
  void **v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (void ***)MEMORY[0x1AF44D190](v2, 0x20C40960023A9);
  }
  return result;
}

void quasar::artifact::ConstructIdentifier(const void **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  size_t v6;
  std::string *p_p;
  const void *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string __p;

  if (*((char *)a1 + 23) >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (size_t)a1[1];
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v6 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a1 + 23) >= 0)
      v8 = a1;
    else
      v8 = *a1;
    memmove(p_p, v8, v6);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v6) = 58;
  v9 = *(char *)(a2 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a2;
  else
    v10 = *(const std::string::value_type **)a2;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a2 + 23);
  else
    v11 = *(_QWORD *)(a2 + 8);
  v12 = std::string::append(&__p, v10, v11);
  *a3 = *v12;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1AD7FC04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::artifact::CreateEmptyArtifact(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  std::string __p;

  quasar::artifact::ConstructIdentifier(a1, a2, &__p);
  v4 = operator new();
  quasar::artifact::AppLmArtifact::AppLmArtifact(v4);
  *a3 = v4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1AD7FC0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  MEMORY[0x1AF44D190](v15, 0x10B3C40549B666DLL);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void quasar::artifact::CreatePhraseCountsArtifact(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p[2];
  char v16;

  quasar::artifact::CreateEmptyArtifact(a1, a2, a5);
  v8 = *a5;
  std::string::basic_string[abi:ne180100]<0>(__p, "phrase-count");
  v9 = *a3;
  *a3 = 0;
  v14 = v9;
  quasar::artifact::Artifact::setContentFromInputStream(v8, (uint64_t)__p, &v14, 0);
  v10 = v14;
  v14 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v16 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "custom-prons");
  v11 = *a4;
  *a4 = 0;
  v13 = v11;
  quasar::artifact::Artifact::setContentFromInputStream(v8, (uint64_t)__p, &v13, 0);
  v12 = v13;
  v13 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (v16 < 0)
    operator delete(__p[0]);
}

void sub_1AD7FC204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _QWORD *v17;
  uint64_t v18;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a17 < 0)
    operator delete(__p);
  *v17 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::artifact::CreatePhraseCountsArtifact@<X0>(const void **a1@<X0>, uint64_t a2@<X1>, kaldi::quasar::Vocab *a3@<X3>, kaldi::quasar::Vocab *a4@<X4>, uint64_t *a5@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::ios_base *v13;
  _QWORD *v14;
  std::ios_base *v15;
  uint64_t result;
  _QWORD *v19;
  _QWORD *v20;
  std::string __p;

  v8 = (_QWORD *)operator new();
  v9 = MEMORY[0x1E0DE4FA8];
  v10 = MEMORY[0x1E0DE4FA8] + 64;
  v8[53] = MEMORY[0x1E0DE4FA8] + 64;
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *v8 = v12;
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v12 - 24)) = v11;
  v8[1] = 0;
  v13 = (std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24));
  std::ios_base::init(v13, v8 + 2);
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  *v8 = v9 + 24;
  v8[53] = v10;
  MEMORY[0x1AF44CA64](v8 + 2);
  kaldi::quasar::Vocab::OOvWord(a3, &__p);
  std::ifstream::open();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v14 = (_QWORD *)operator new();
  v14[53] = v9 + 64;
  *v14 = v12;
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v12 - 24)) = v11;
  v14[1] = 0;
  v15 = (std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24));
  std::ios_base::init(v15, v14 + 2);
  v15[1].__vftable = 0;
  v15[1].__fmtflags_ = -1;
  *v14 = v9 + 24;
  v14[53] = v9 + 64;
  MEMORY[0x1AF44CA64](v14 + 2);
  kaldi::quasar::Vocab::OOvWord(a4, &__p);
  std::ifstream::open();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v19 = v14;
  v20 = v8;
  quasar::artifact::CreatePhraseCountsArtifact(a1, a2, (uint64_t *)&v20, (uint64_t *)&v19, a5);
  if (v19)
    (*(void (**)(_QWORD *))(*v19 + 8))(v19);
  result = (uint64_t)v20;
  if (v20)
    return (*(uint64_t (**)(_QWORD *))(*v20 + 8))(v20);
  return result;
}

void sub_1AD7FC454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  _Unwind_Resume(exception_object);
}

void quasar::artifact::TransitionArtifact(quasar::artifact::AppLmArtifact **a1@<X0>, quasar::artifact *a2@<X1>, __int128 *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, int a6@<W6>, quasar::artifact::AppLmArtifact **a7@<X8>)
{
  quasar::artifact::AppLmArtifactLifeCycleStage *LifeCycleStage;
  const quasar::artifact::AppLmArtifactLifeCycleStage *v15;
  const quasar::artifact::AppLmArtifactLifeCycleStage *v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  quasar::artifact::AppLmArtifact *v27;
  quasar::artifact::AppLmArtifactLifeCycleStages *v28;
  int v29;
  uint64_t v30;
  quasar::artifact::AppLmArtifact *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  quasar::artifact::AppLmArtifactLifeCycleStages *v35;
  int v36;
  uint64_t v37;
  quasar::AppLmData *v38;
  quasar::artifact::AppLmArtifact *v39;
  const quasar::artifact::AppLmArtifactLifeCycleStage *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  quasar::artifact::AppLmArtifactLifeCycleStages *v44;
  int v45;
  uint64_t v46;
  __int128 *v47;
  __int128 *i;
  __int128 v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _BYTE *v53;
  quasar::artifact::AppLmArtifact *v54;
  quasar::artifact::AppLmArtifact *v55;
  const quasar::artifact::AppLmArtifactLifeCycleStage *v56;
  quasar::artifact::AppLmArtifact *v57;
  quasar::artifact::AppLmArtifact *v58;
  __int128 *SpeechModelInfo;
  quasar::artifact::AppLmArtifactLifeCycleStage *v60;
  const quasar::artifact::AppLmArtifactLifeCycleStage *v61;
  quasar::artifact::AppLmArtifact *v62;
  _QWORD *v63;
  quasar::artifact::AppLmArtifactLifeCycleStage *v64;
  _QWORD *v65;
  quasar::artifact::AppLmArtifactLifeCycleStages *v66;
  int v67;
  uint64_t v68;
  quasar::artifact::AppLmArtifact *v69;
  unint64_t *v70;
  unint64_t v71;
  quasar::LmData *v72;
  uint64_t v73;
  quasar::artifact::AppLmArtifact *v74;
  char v75;
  uint64_t v76;
  quasar::NgramLmModel2 *v77;
  quasar::artifact::AppLmArtifact *v78;
  BOOL v79;
  uint64_t v80;
  __int128 *v81;
  __int128 *j;
  __int128 v83;
  void *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  _QWORD *v92;
  _BYTE *v93;
  _BYTE *v94;
  quasar::artifact::AppLmArtifact *v95;
  quasar::artifact::AppLmArtifact *v96;
  __int128 *v97;
  quasar::artifact::AppLmArtifact *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  quasar::AppLmData *v102;
  _QWORD *v103;
  _QWORD *v104;
  int v105;
  void **v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  _BYTE v110[32];
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  std::string v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  char v130[8];
  uint64_t v131;
  std::string v132;
  uint64_t v133;
  __int128 *v134;
  __int128 *v135;
  __int128 v136;
  uint64_t v137;
  _QWORD v138[4];
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  quasar::AppLmData *v159;

  LifeCycleStage = quasar::artifact::AppLmArtifact::getLifeCycleStage(*a1);
  if ((quasar::artifact::IsValidLifeCycle(LifeCycleStage, v15) & 1) == 0)
  {
    if (quasar::gLogLevel >= 1)
    {
      v156 = 0u;
      v157 = 0u;
      v154 = 0u;
      v155 = 0u;
      v152 = 0u;
      v153 = 0u;
      v150 = 0u;
      v151 = 0u;
      v148 = 0u;
      v149 = 0u;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v142 = 0u;
      v143 = 0u;
      v141 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v141);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v141, (uint64_t)"Artifact is in incorrect life cycle stage (", 43);
      v23 = quasar::artifact::operator<<(v22, (uint64_t)LifeCycleStage);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)").", 2);
      goto LABEL_10;
    }
LABEL_11:
    *a7 = 0;
    return;
  }
  if ((quasar::artifact::IsValidLifeCycle(a2, v16) & 1) == 0)
  {
    if (quasar::gLogLevel >= 1)
    {
      v156 = 0u;
      v157 = 0u;
      v154 = 0u;
      v155 = 0u;
      v152 = 0u;
      v153 = 0u;
      v150 = 0u;
      v151 = 0u;
      v148 = 0u;
      v149 = 0u;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v142 = 0u;
      v143 = 0u;
      v141 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v141);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v141, (uint64_t)"Target life cycle stage is invalid (", 36);
      v25 = quasar::artifact::operator<<(v24, (uint64_t)a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)").", 2);
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  v105 = a6;
  v17 = quasar::artifact::AppLmArtifactLifeCycleStage::operator int((uint64_t)a2);
  if (v17 < (int)quasar::artifact::AppLmArtifactLifeCycleStage::operator int((uint64_t)LifeCycleStage))
  {
    if (quasar::gLogLevel >= 1)
    {
      v156 = 0u;
      v157 = 0u;
      v154 = 0u;
      v155 = 0u;
      v152 = 0u;
      v153 = 0u;
      v150 = 0u;
      v151 = 0u;
      v148 = 0u;
      v149 = 0u;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v142 = 0u;
      v143 = 0u;
      v141 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v141);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v141, (uint64_t)"Unable to revert during the life cycle (from ", 45);
      v19 = quasar::artifact::operator<<(v18, (uint64_t)LifeCycleStage);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" to ", 4);
      v21 = quasar::artifact::operator<<(v20, (uint64_t)a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)").", 2);
LABEL_10:
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v141);
      goto LABEL_11;
    }
    goto LABEL_11;
  }
  v26 = quasar::artifact::AppLmArtifactLifeCycleStage::operator int((uint64_t)a2);
  if (v26 == quasar::artifact::AppLmArtifactLifeCycleStage::operator int((uint64_t)LifeCycleStage))
  {
    v27 = *a1;
    *a1 = 0;
    *a7 = v27;
    return;
  }
  v28 = (quasar::artifact::AppLmArtifactLifeCycleStages *)quasar::artifact::AppLmArtifactLifeCycleStage::operator int((uint64_t)LifeCycleStage);
  v29 = (int)v28;
  v30 = quasar::artifact::AppLmArtifactLifeCycleStages::get(v28);
  if (v29 >= (int)quasar::artifact::AppLmArtifactLifeCycleStage::operator int(v30 + 320))
  {
    if (quasar::gLogLevel < 1)
      goto LABEL_11;
    v156 = 0u;
    v157 = 0u;
    v154 = 0u;
    v155 = 0u;
    v152 = 0u;
    v153 = 0u;
    v150 = 0u;
    v151 = 0u;
    v148 = 0u;
    v149 = 0u;
    v146 = 0u;
    v147 = 0u;
    v144 = 0u;
    v145 = 0u;
    v142 = 0u;
    v143 = 0u;
    v141 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v141);
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v141, (uint64_t)"Unable to transform artifact beyond ", 36);
    v43 = quasar::artifact::operator<<(v42, (uint64_t)LifeCycleStage);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)".", 1);
    goto LABEL_10;
  }
  v31 = *a1;
  quasar::filesystem::Path::Path(&v141, a3);
  v32 = *a4;
  *a4 = 0;
  v158 = v32;
  quasar::artifact::AppLmArtifact::loadAppLmData(v31, (kaldi::quasar::Vocab *)&v141, &v158, a5, (uint64_t *)&v159);
  v33 = v158;
  v158 = 0;
  v34 = v105;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  *(_QWORD *)&v141 = &unk_1E5D343A0;
  if (SHIBYTE(v142) < 0)
    operator delete(*((void **)&v141 + 1));
  v128 = 0uLL;
  v129 = 0;
  memset(v110, 0, sizeof(v110));
  LODWORD(v111) = 1065353216;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)&v141, (uint64_t)a3, (uint64_t *)&v128, (uint64_t)v110);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v110);
  *(_QWORD *)v110 = &v128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v110);
  std::allocate_shared[abi:ne180100]<quasar::NgramSrilmCountConfig,std::allocator<quasar::NgramSrilmCountConfig>,quasar::SystemConfig &,std::string const&,void>(v110);
  v140 = *(_OWORD *)v110;
  v35 = (quasar::artifact::AppLmArtifactLifeCycleStages *)quasar::artifact::AppLmArtifactLifeCycleStage::operator int((uint64_t)a2);
  v36 = (int)v35;
  v37 = quasar::artifact::AppLmArtifactLifeCycleStages::get(v35);
  if (v36 == quasar::artifact::AppLmArtifactLifeCycleStage::operator int(v37 + 192))
  {
    v38 = v159;
    v39 = *a1;
    std::string::basic_string[abi:ne180100]<0>(v110, "phrase-count");
    quasar::artifact::Artifact::openContentForWriting((uint64_t)v39, (uint64_t)v110, 1, &v139);
    quasar::LmData::serialize((uint64_t)v38, 0, (uint64_t)&v139);
    v41 = v139;
    v139 = 0;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
    if ((v110[23] & 0x80000000) != 0)
      operator delete(*(void **)v110);
LABEL_55:
    if ((quasar::artifact::IsLifeCycleWithProcessedText(LifeCycleStage, v40) & 1) == 0
      && quasar::artifact::IsLifeCycleWithProcessedText(a2, v56))
    {
      v57 = *a1;
      std::string::basic_string[abi:ne180100]<0>(v110, "tokenizer-datapack-version");
      quasar::artifact::Artifact::hasInfo((uint64_t)v57, (const void **)v110);
      if ((v110[23] & 0x80000000) != 0)
        operator delete(*(void **)v110);
      v58 = *a1;
      std::string::basic_string[abi:ne180100]<0>(v110, "tokenizer-datapack-version");
      SpeechModelInfo = (__int128 *)quasar::SystemConfig::getSpeechModelInfo((quasar::SystemConfig *)&v141);
      quasar::artifact::Artifact::setInfo((uint64_t)v58, (uint64_t)v110, SpeechModelInfo);
      if ((v110[23] & 0x80000000) != 0)
        operator delete(*(void **)v110);
    }
    if (v34)
      (*(void (**)(quasar::artifact::AppLmArtifact *))(*(_QWORD *)*a1 + 24))(*a1);
    v60 = quasar::artifact::AppLmArtifact::getLifeCycleStage(*a1);
    if ((quasar::artifact::IsValidLifeCycle(v60, v61) & 1) != 0)
    {
      v62 = *a1;
      *a1 = 0;
      *a7 = v62;
    }
    else
    {
      if (quasar::gLogLevel >= 1)
      {
        v124 = 0u;
        v125 = 0u;
        v122 = 0u;
        v123 = 0u;
        v120 = 0u;
        v121 = 0u;
        v118 = 0u;
        v119 = 0u;
        v116 = 0u;
        v117 = 0u;
        v115 = 0u;
        v113 = 0u;
        v114 = 0u;
        v111 = 0u;
        v112 = 0u;
        memset(v110, 0, sizeof(v110));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v110);
        v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"Artifact transitioned into invalid life cycle stage (", 53);
        v64 = quasar::artifact::AppLmArtifact::getLifeCycleStage(*a1);
        v65 = quasar::artifact::operator<<(v63, (uint64_t)v64);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)").", 2);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v110);
      }
      *a7 = 0;
    }
    goto LABEL_136;
  }
  v44 = (quasar::artifact::AppLmArtifactLifeCycleStages *)quasar::artifact::AppLmArtifactLifeCycleStage::operator int((uint64_t)a2);
  v45 = (int)v44;
  v46 = quasar::artifact::AppLmArtifactLifeCycleStages::get(v44);
  if (v45 == quasar::artifact::AppLmArtifactLifeCycleStage::operator int(v46 + 256))
  {
    boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::basic_ptree(v138);
    boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::basic_ptree(&v136);
    quasar::AppLmData::getOrderedOovs(v159, &v134);
    v47 = v134;
    for (i = v135; v47 != i; v47 = (__int128 *)((char *)v47 + 56))
    {
      if (*((char *)v47 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v110, *(const std::string::value_type **)v47, *((_QWORD *)v47 + 1));
      }
      else
      {
        v49 = *v47;
        *(_QWORD *)&v110[16] = *((_QWORD *)v47 + 2);
        *(_OWORD *)v110 = v49;
      }
      std::set<std::string>::set[abi:ne180100]((uint64_t *)&v110[24], (const void ***)v47 + 3);
      LODWORD(v112) = *((_DWORD *)v47 + 12);
      memset(&v132, 0, sizeof(v132));
      v50 = operator new();
      v51 = operator new(0x60uLL);
      *(_QWORD *)(v50 + 8) = v51;
      v51[7] = 0;
      v51[8] = v51 + 7;
      v51[9] = v51 + 7;
      v51[10] = v51 + 10;
      v51[11] = v51 + 10;
      *(_QWORD *)(v50 + 24) = 0;
      v133 = v50;
      std::string::basic_string[abi:ne180100]<0>(&v128, "");
      v130[0] = 46;
      v52 = (uint64_t)&v128;
      if (v129 < 0)
        v52 = v128;
      v131 = v52;
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put<std::string,boost::property_tree::id_translator<std::string>>((uint64_t)&v132, (uint64_t *)&v128, (uint64_t)v110);
      v34 = v105;
      if (SHIBYTE(v129) < 0)
        operator delete((void *)v128);
      std::pair<char const*,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<char const(&)[1],boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>&,0>((uint64_t)&v126, (uint64_t)"", (__int128 *)&v132);
      std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<char const*,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(&v128, (uint64_t)&v126);
      boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert(v137 + 16, *(_QWORD *)(v137 + 8), &v128);
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v130);
      if (SHIBYTE(v129) < 0)
        operator delete((void *)v128);
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v126.__r_.__value_.__l.__size_);
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v132);
      std::__tree<std::string>::destroy((uint64_t)&v110[24], (char *)v111);
      if ((v110[23] & 0x80000000) != 0)
        operator delete(*(void **)v110);
    }
    *(_QWORD *)v110 = &v134;
    std::vector<quasar::AppLmData::Oov>::__destroy_vector::operator()[abi:ne180100]((void ***)v110);
    std::string::basic_string[abi:ne180100]<0>(v110, "oov");
    v110[24] = 46;
    if (v110[23] >= 0)
      v53 = v110;
    else
      v53 = *(_BYTE **)v110;
    *(_QWORD *)&v111 = v53;
    boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::add_child((uint64_t)v138, (uint64_t *)v110, &v136);
    if ((v110[23] & 0x80000000) != 0)
      operator delete(*(void **)v110);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v110);
    boost::property_tree::json_parser::write_json<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(&v110[16], (uint64_t)v138, 1);
    v54 = *a1;
    std::string::basic_string[abi:ne180100]<0>(&v128, "oov");
    std::stringbuf::str();
    quasar::artifact::Artifact::setContent((uint64_t **)v54, (const void **)&v128, (__int128 *)&v126, 0);
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v126.__r_.__value_.__l.__data_);
    if (SHIBYTE(v129) < 0)
      operator delete((void *)v128);
    v55 = *a1;
    std::string::basic_string[abi:ne180100]<0>(&v128, "ngram-count");
    quasar::generateNgramCountsStr((uint64_t ***)&v140, v159, &v126);
    quasar::artifact::Artifact::setContent((uint64_t **)v55, (const void **)&v128, (__int128 *)&v126, 0);
    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v126.__r_.__value_.__l.__data_);
    if (SHIBYTE(v129) < 0)
      operator delete((void *)v128);
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v110);
    boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v136);
    boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v138);
    goto LABEL_55;
  }
  v66 = (quasar::artifact::AppLmArtifactLifeCycleStages *)quasar::artifact::AppLmArtifactLifeCycleStage::operator int((uint64_t)a2);
  v67 = (int)v66;
  v68 = quasar::artifact::AppLmArtifactLifeCycleStages::get(v66);
  if (v67 != quasar::artifact::AppLmArtifactLifeCycleStage::operator int(v68 + 320))
  {
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v116 = 0u;
    v117 = 0u;
    v115 = 0u;
    v113 = 0u;
    v114 = 0u;
    v111 = 0u;
    v112 = 0u;
    memset(v110, 0, sizeof(v110));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v110);
    v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"Unable to transform artifact to ", 32);
    v104 = quasar::artifact::operator<<(v103, (uint64_t)a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)" stage.", 7);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v110);
  }
  v69 = *a1;
  std::string::basic_string[abi:ne180100]<0>(v110, "asr-datapack-version");
  quasar::artifact::Artifact::hasInfo((uint64_t)v69, (const void **)v110);
  if ((v110[23] & 0x80000000) != 0)
    operator delete(*(void **)v110);
  v128 = v140;
  if (*((_QWORD *)&v140 + 1))
  {
    v70 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = v159;
  std::string::basic_string[abi:ne180100]<0>(v110, "");
  quasar::trainOrAdaptNgramSrilmModel((const std::string **)&v128, v72, (const void **)v110, 0, &v109);
  if ((v110[23] & 0x80000000) != 0)
    operator delete(*(void **)v110);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v128);
  v73 = v109;
  if (!(_QWORD)v109)
    goto LABEL_133;
  v74 = *a1;
  std::string::basic_string[abi:ne180100]<0>(v110, "language-model-fst");
  quasar::artifact::Artifact::openContentForWriting((uint64_t)v74, (uint64_t)v110, 0, &v108);
  v75 = quasar::NgramLmModel2::writeFst(v73, &v108);
  v76 = v108;
  v108 = 0;
  if (v76)
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
  if ((v110[23] & 0x80000000) != 0)
    operator delete(*(void **)v110);
  if ((v75 & 1) != 0)
  {
    v77 = (quasar::NgramLmModel2 *)v109;
    v78 = *a1;
    std::string::basic_string[abi:ne180100]<0>(v110, "language-model-arpa");
    quasar::artifact::Artifact::openContentForWriting((uint64_t)v78, (uint64_t)v110, 0, &v107);
    v79 = quasar::NgramLmModel2::writeArpa(v77, &v107);
    v80 = v107;
    v107 = 0;
    if (v80)
      (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
    if ((v110[23] & 0x80000000) != 0)
      operator delete(*(void **)v110);
    if (v79)
    {
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::basic_ptree(v138);
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::basic_ptree(&v136);
      quasar::artifact::AppLmArtifact::loadOovs(*a1, (uint64_t *)&v106);
      quasar::AppLmData::getOrderedOovs(v159, &v134);
      v81 = v134;
      for (j = v135; v81 != j; v81 = (__int128 *)((char *)v81 + 56))
      {
        if (*((char *)v81 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v110, *(const std::string::value_type **)v81, *((_QWORD *)v81 + 1));
        }
        else
        {
          v83 = *v81;
          *(_QWORD *)&v110[16] = *((_QWORD *)v81 + 2);
          *(_OWORD *)v110 = v83;
        }
        std::set<std::string>::set[abi:ne180100]((uint64_t *)&v110[24], (const void ***)v81 + 3);
        LODWORD(v112) = *((_DWORD *)v81 + 12);
        if (!v106
          || (v84 = (void *)std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>((uint64_t)*v106, (uint64_t)v106[1], (unsigned __int8 **)v110), v84 == v106[1]))
        {
          memset(&v132, 0, sizeof(v132));
          v85 = operator new();
          v86 = operator new(0x60uLL);
          *(_QWORD *)(v85 + 8) = v86;
          v86[7] = 0;
          v86[8] = v86 + 7;
          v86[9] = v86 + 7;
          v86[10] = v86 + 10;
          v86[11] = v86 + 10;
          *(_QWORD *)(v85 + 24) = 0;
          v133 = v85;
          std::string::basic_string[abi:ne180100]<0>(&v128, "");
          v130[0] = 46;
          v87 = (uint64_t)&v128;
          if (v129 < 0)
            v87 = v128;
          v131 = v87;
          boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put<std::string,boost::property_tree::id_translator<std::string>>((uint64_t)&v132, (uint64_t *)&v128, (uint64_t)v110);
          if (SHIBYTE(v129) < 0)
            operator delete((void *)v128);
          std::pair<char const*,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<char const(&)[1],boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>&,0>((uint64_t)&v126, (uint64_t)"", (__int128 *)&v132);
          std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<char const*,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(&v128, (uint64_t)&v126);
          boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert(v137 + 16, *(_QWORD *)(v137 + 8), &v128);
          boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v130);
          if (SHIBYTE(v129) < 0)
            operator delete((void *)v128);
          boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v126.__r_.__value_.__l.__size_);
          boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v132);
        }
        std::__tree<std::string>::destroy((uint64_t)&v110[24], (char *)v111);
        if ((v110[23] & 0x80000000) != 0)
          operator delete(*(void **)v110);
      }
      *(_QWORD *)v110 = &v134;
      std::vector<quasar::AppLmData::Oov>::__destroy_vector::operator()[abi:ne180100]((void ***)v110);
      if (v106)
      {
        v89 = (uint64_t)*v106;
        v88 = v106[1];
        if (*v106 != v88)
        {
          do
          {
            if (*(char *)(v89 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)v89, *(_QWORD *)(v89 + 8));
            }
            else
            {
              v90 = *(_OWORD *)v89;
              v132.__r_.__value_.__r.__words[2] = *(_QWORD *)(v89 + 16);
              *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v90;
            }
            memset(&v126, 0, sizeof(v126));
            v91 = operator new();
            v92 = operator new(0x60uLL);
            *(_QWORD *)(v91 + 8) = v92;
            v92[7] = 0;
            v92[8] = v92 + 7;
            v92[9] = v92 + 7;
            v92[10] = v92 + 10;
            v92[11] = v92 + 10;
            *(_QWORD *)(v91 + 24) = 0;
            v127 = v91;
            std::string::basic_string[abi:ne180100]<0>(v110, "");
            v110[24] = 46;
            v93 = v110;
            if (v110[23] < 0)
              v93 = *(_BYTE **)v110;
            *(_QWORD *)&v111 = v93;
            boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put<std::string,boost::property_tree::id_translator<std::string>>((uint64_t)&v126, (uint64_t *)v110, (uint64_t)&v132);
            if ((v110[23] & 0x80000000) != 0)
              operator delete(*(void **)v110);
            std::pair<char const*,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<char const(&)[1],boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>&,0>((uint64_t)&v128, (uint64_t)"", (__int128 *)&v126);
            std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<char const*,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(v110, (uint64_t)&v128);
            boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert(v137 + 16, *(_QWORD *)(v137 + 8), (__int128 *)v110);
            boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v110[24]);
            if ((v110[23] & 0x80000000) != 0)
              operator delete(*(void **)v110);
            boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v128 + 8);
            boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v126);
            if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v132.__r_.__value_.__l.__data_);
            v89 += 24;
          }
          while ((void *)v89 != v88);
        }
      }
      std::string::basic_string[abi:ne180100]<0>(v110, "oov");
      v110[24] = 46;
      if (v110[23] >= 0)
        v94 = v110;
      else
        v94 = *(_BYTE **)v110;
      *(_QWORD *)&v111 = v94;
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::add_child((uint64_t)v138, (uint64_t *)v110, &v136);
      v34 = v105;
      if ((v110[23] & 0x80000000) != 0)
        operator delete(*(void **)v110);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v110);
      boost::property_tree::json_parser::write_json<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(&v110[16], (uint64_t)v138, 1);
      v95 = *a1;
      std::string::basic_string[abi:ne180100]<0>(&v128, "oov");
      std::stringbuf::str();
      quasar::artifact::Artifact::setContent((uint64_t **)v95, (const void **)&v128, (__int128 *)&v126, 1);
      if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v126.__r_.__value_.__l.__data_);
      if (SHIBYTE(v129) < 0)
        operator delete((void *)v128);
      v96 = *a1;
      std::string::basic_string[abi:ne180100]<0>(&v128, "asr-datapack-version");
      v97 = (__int128 *)quasar::SystemConfig::getSpeechModelInfo((quasar::SystemConfig *)&v141);
      quasar::artifact::Artifact::setInfo((uint64_t)v96, (uint64_t)&v128, v97);
      if (SHIBYTE(v129) < 0)
        operator delete((void *)v128);
      v98 = *a1;
      std::string::basic_string[abi:ne180100]<0>(&v128, "language-model-weight");
      std::to_string(&v126, *(float *)(v140 + 8));
      quasar::artifact::Artifact::setInfo((uint64_t)v98, (uint64_t)&v128, (__int128 *)&v126);
      if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v126.__r_.__value_.__l.__data_);
      if (SHIBYTE(v129) < 0)
        operator delete((void *)v128);
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)v110);
      std::unique_ptr<std::vector<std::string>>::reset[abi:ne180100](&v106, 0);
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v136);
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)v138);
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v109);
      goto LABEL_55;
    }
    if (quasar::gLogLevel >= 1)
    {
      v124 = 0u;
      v125 = 0u;
      v122 = 0u;
      v123 = 0u;
      v120 = 0u;
      v121 = 0u;
      v118 = 0u;
      v119 = 0u;
      v116 = 0u;
      v117 = 0u;
      v115 = 0u;
      v113 = 0u;
      v114 = 0u;
      v111 = 0u;
      v112 = 0u;
      memset(v110, 0, sizeof(v110));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v110);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"Something went wrong while serializing the ARPA model.", 54);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v110);
    }
  }
  else
  {
LABEL_133:
    if (quasar::gLogLevel >= 1)
    {
      v124 = 0u;
      v125 = 0u;
      v122 = 0u;
      v123 = 0u;
      v120 = 0u;
      v121 = 0u;
      v118 = 0u;
      v119 = 0u;
      v116 = 0u;
      v117 = 0u;
      v115 = 0u;
      v113 = 0u;
      v114 = 0u;
      v111 = 0u;
      v112 = 0u;
      memset(v110, 0, sizeof(v110));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v110);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"Something went wrong while serializing the FST model.", 53);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v110);
    }
  }
  *a7 = 0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v109);
LABEL_136:
  v99 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
  if (*((_QWORD *)&v140 + 1))
  {
    v100 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&v141);
  v102 = v159;
  v159 = 0;
  if (v102)
    (*(void (**)(quasar::AppLmData *))(*(_QWORD *)v102 + 8))(v102);
}

void sub_1AD7FD6C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    JUMPOUT(0x1AD7FD6D4);
  JUMPOUT(0x1AD7FD6E8);
}

void sub_1AD7FD714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x240]);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&STACK[0x250]);
  v7 = *(_QWORD *)(v6 - 104);
  *(_QWORD *)(v6 - 104) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  JUMPOUT(0x1AD7FDB1CLL);
}

void sub_1AD7FD71C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  char a73;

  if (a58 < 0)
    operator delete(__p);
  if (a66 < 0)
    operator delete(a61);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a17);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&a73);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&STACK[0x218]);
  JUMPOUT(0x1AD7FDABCLL);
}

void sub_1AD7FD76C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  uint64_t a73;
  uint64_t v73;
  uint64_t v74;

  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&a73);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&STACK[0x218]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x240]);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&STACK[0x250]);
  v74 = *(_QWORD *)(v73 - 104);
  *(_QWORD *)(v73 - 104) = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  JUMPOUT(0x1AD7FDB1CLL);
}

void sub_1AD7FD7C4()
{
  JUMPOUT(0x1AD7FDAB4);
}

void sub_1AD7FD7D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;

  a17 = (uint64_t)&a69;
  std::vector<quasar::AppLmData::Oov>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  JUMPOUT(0x1AD7FD908);
}

void sub_1AD7FD878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a73;

  if (a58 < 0)
    operator delete(__p);
  if (a73 < 0)
    JUMPOUT(0x1AD7FD904);
  JUMPOUT(0x1AD7FD908);
}

void sub_1AD7FD934()
{
  unint64_t v0;

  v0 = STACK[0x238];
  STACK[0x238] = 0;
  if (v0)
    (*(void (**)(unint64_t))(*(_QWORD *)v0 + 8))(v0);
  JUMPOUT(0x1AD7FD958);
}

void sub_1AD7FD954(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x240]);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&STACK[0x250]);
  v23 = *(_QWORD *)(v22 - 104);
  *(_QWORD *)(v22 - 104) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  JUMPOUT(0x1AD7FDB1CLL);
}

void sub_1AD7FD970(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  JUMPOUT(0x1AD7FD864);
}

void sub_1AD7FD988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x240]);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&STACK[0x250]);
  v9 = *(_QWORD *)(v8 - 104);
  *(_QWORD *)(v8 - 104) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  JUMPOUT(0x1AD7FDB1CLL);
}

void sub_1AD7FD998()
{
  JUMPOUT(0x1AD7FDAC4);
}

void sub_1AD7FD9A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  JUMPOUT(0x1AD7FDACCLL);
}

void sub_1AD7FD9BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 112);
  *(_QWORD *)(v1 - 112) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  quasar::artifact::TransitionArtifact((uint64_t)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_1AD7FD9E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;

  __p = &a69;
  std::vector<quasar::AppLmData::Oov>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  JUMPOUT(0x1AD7FDAACLL);
}

void sub_1AD7FDAE8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x240]);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&STACK[0x250]);
  v1 = *(_QWORD *)(v2 - 104);
  *(_QWORD *)(v2 - 104) = 0;
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1AD7FDAF0(_Unwind_Exception *a1)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_1AD7FDB00(_Unwind_Exception *a1)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&STACK[0x250]);
  _Unwind_Resume(a1);
}

void sub_1AD7FDB10()
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&STACK[0x250]);
  JUMPOUT(0x1AD7FDB1CLL);
}

_QWORD *boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::basic_ptree(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v2 = operator new();
  v3 = operator new(0x60uLL);
  *(_QWORD *)(v2 + 8) = v3;
  v3[7] = 0;
  v3[8] = v3 + 7;
  v3[9] = v3 + 7;
  v3[10] = v3 + 10;
  v3[11] = v3 + 10;
  *(_QWORD *)(v2 + 24) = 0;
  a1[3] = v2;
  return a1;
}

void sub_1AD7FDB9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x1020C402FC1992ELL);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::~pair(uint64_t a1)
{
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

unint64_t *boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::add_child(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  _BOOL4 v6;
  std::string *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  std::string __p;
  uint64_t v13;
  std::string v14;
  std::string v15;
  char v16;
  char *v17;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v15, (const std::string::value_type *)*a2, a2[1]);
    v6 = *((char *)a2 + 23) < 0;
  }
  else
  {
    v6 = 0;
    v15 = *(std::string *)a2;
  }
  v16 = *((_BYTE *)a2 + 24);
  v7 = &v15;
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if (v6)
    v8 = (uint64_t *)*a2;
  else
    v8 = a2;
  v17 = (char *)v7 + a2[4] - (_QWORD)v8;
  v9 = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::force_path(a1, (uint64_t)&v15);
  boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>::reduce((uint64_t *)&v15, &v14);
  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string&,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>> const&,0>(&__p, (__int128 *)&v14, a3);
  v10 = boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert(*(_QWORD *)(v9 + 24) + 16, *(_QWORD *)(*(_QWORD *)(v9 + 24) + 8), (__int128 *)&__p);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v10 + 3;
}

void sub_1AD7FDD3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::~pair((uint64_t)&a9);
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

void boost::property_tree::json_parser::write_json<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  __int128 __p;
  uint64_t v4;

  __p = 0uLL;
  v4 = 0;
  boost::property_tree::json_parser::write_json_internal<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(a1, a2, &__p, a3);
  if (SHIBYTE(v4) < 0)
    operator delete((void *)__p);
}

void sub_1AD7FDDC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<char const*,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<char const(&)[1],boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>&,0>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  uint64_t v6;

  *(_QWORD *)a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v5;
  }
  v6 = operator new();
  boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::multi_index_container(v6, *((_QWORD *)a3 + 3));
  *(_QWORD *)(a1 + 32) = v6;
  return a1;
}

void sub_1AD7FDE68(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;

  MEMORY[0x1AF44D190](v3, 0x1020C402FC1992ELL);
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(a1);
}

uint64_t boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::multi_index_container(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = operator new(0x60uLL);
  *(_QWORD *)(a1 + 24) = 0;
  boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::copy_construct_from(a1, a2);
  return a1;
}

void sub_1AD7FDEE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::copy_construct_from(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t i;
  uint64_t v9;
  _QWORD v11[8];
  char v12;

  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 8);
  v11[1] = v4;
  v11[3] = v4;
  if (v4)
  {
    if (v4 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = operator new(16 * v4);
  }
  else
  {
    v7 = 0;
  }
  v11[4] = v7;
  v11[5] = 0;
  v11[6] = v5;
  v11[7] = v6;
  v12 = 0;
  for (i = *(_QWORD *)(v5 + 88); ; i = *(_QWORD *)(v9 + 88))
  {
    v9 = i ? i - 80 : 0;
    if (v9 == v5)
      break;
    boost::multi_index::detail::copy_map<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::clone<boost::multi_index::detail::copy_map_value_copier>((uint64_t)v11, v9);
  }
  boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::copy_(a1 + 16, a2 + 16, v11);
  v12 = 1;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return boost::multi_index::detail::copy_map<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::~copy_map((uint64_t)v11);
}

void sub_1AD7FDFBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::multi_index::detail::copy_map<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::~copy_map((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::copy_(unint64_t result, uint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(a2 - 8);
  v4 = *(_QWORD *)(result - 8);
  v5 = a3[5];
  do
  {
    v6 = *(_QWORD *)(v3 + 88);
    if (v6)
      v3 = v6 - 80;
    else
      v3 = 0;
    v7 = a3 + 7;
    if (a3[6] != v3)
    {
      v8 = (_QWORD *)a3[4];
      if (v5)
      {
        v9 = v5;
        do
        {
          v10 = v9 >> 1;
          v11 = &v8[2 * (v9 >> 1)];
          v13 = *v11;
          v12 = v11 + 2;
          v9 += ~(v9 >> 1);
          if (v13 < v3)
            v8 = v12;
          else
            v9 = v10;
        }
        while (v9);
      }
      v7 = v8 + 1;
    }
    v14 = *v7;
    *(_QWORD *)(v4 + 88) = v14 + 80;
    *(_QWORD *)(v14 + 80) = v4 + 80;
    v4 = v14;
  }
  while (v3 != *(_QWORD *)(a2 - 8));
  return boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::copy_(result, a2, a3);
}

void boost::multi_index::detail::copy_map<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::clone<boost::multi_index::detail::copy_map_value_copier>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  std::string *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;

  v3 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * *(_QWORD *)(a1 + 40));
  *v3 = a2;
  v4 = (std::string *)operator new(0x60uLL);
  v3[1] = v4;
  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100](v4);
  v5 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 40) = v5;
  if (v5 == *(_QWORD *)(a1 + 8))
  {
    v6 = 126 - 2 * __clz(v5);
    if (v5)
      v7 = v6;
    else
      v7 = 0;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,false>(*(unint64_t **)(a1 + 32), (unint64_t *)(*(_QWORD *)(a1 + 32) + 16 * v5), (uint64_t)&v8, v7, 1);
  }
}

void sub_1AD7FE0FC(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  operator delete(*(void **)(*(_QWORD *)(v1 + 32) + 16 * *(_QWORD *)(v1 + 40) + 8));
  __cxa_rethrow();
}

void sub_1AD7FE118(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  std::string::size_type v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  v6 = operator new();
  boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::multi_index_container(v6, *((_QWORD *)a2 + 6));
  this[2].__r_.__value_.__r.__words[0] = v6;
  return this;
}

void sub_1AD7FE1D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,false>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  __int128 *v16;
  char v17;
  BOOL v18;
  __int128 *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;

unint64_t *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(unint64_t *result, unint64_t *a2)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = v4[2];
        if (v6 < *v4)
        {
          v7 = v4[3];
          v8 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v8 + 16) = *(_OWORD *)((char *)result + v8);
            if (!v8)
              break;
            v9 = *(unint64_t *)((char *)result + v8 - 16);
            v8 -= 16;
            if (v6 >= v9)
            {
              v10 = (unint64_t *)((char *)result + v8 + 16);
              goto LABEL_10;
            }
          }
          v10 = result;
LABEL_10:
          *v10 = v6;
          v10[1] = v7;
        }
        v2 = v5 + 2;
        v3 += 16;
        v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(__int128 *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = *a2;
  v4 = *a3;
  if (*a2 < *(_QWORD *)a1)
  {
    if (v4 < v3)
    {
      v5 = *a1;
      *a1 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v5;
      return 1;
    }
    v8 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v8;
    if (*a3 >= *a2)
      return 1;
    v9 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v9;
    return 2;
  }
  if (v4 < v3)
  {
    v6 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v6;
    if (*a2 >= *(_QWORD *)a1)
      return 1;
    v7 = *a1;
    *a1 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v7;
    return 2;
  }
  return 0;
}

unint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,std::__less<void,void> &>(unint64_t *a1, unint64_t *a2)
{
  __int128 v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v11;

  v2 = *(_OWORD *)a1;
  v3 = *a1;
  if (*a1 >= *(a2 - 2))
  {
    v6 = a1 + 2;
    do
    {
      v4 = v6;
      if (v6 >= a2)
        break;
      v6 += 2;
    }
    while (v3 >= *v4);
  }
  else
  {
    v4 = a1;
    do
    {
      v5 = v4[2];
      v4 += 2;
    }
    while (v3 >= v5);
  }
  if (v4 < a2)
  {
    do
    {
      v7 = *(a2 - 2);
      a2 -= 2;
    }
    while (v3 < v7);
  }
  while (v4 < a2)
  {
    v11 = *(_OWORD *)v4;
    *(_OWORD *)v4 = *(_OWORD *)a2;
    *(_OWORD *)a2 = v11;
    do
    {
      v8 = v4[2];
      v4 += 2;
    }
    while (v3 >= v8);
    do
    {
      v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (v3 < v9);
  }
  if (v4 - 2 != a1)
    *(_OWORD *)a1 = *((_OWORD *)v4 - 1);
  *((_OWORD *)v4 - 1) = v2;
  return v4;
}

__int128 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,std::__less<void,void> &>(__int128 *a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  unint64_t v4;
  unint64_t v5;
  __int128 *v6;
  __int128 *v7;
  unint64_t v8;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;

  v2 = 0;
  v3 = *a1;
  v4 = *(_QWORD *)a1;
  do
    v5 = *(_QWORD *)&a1[++v2];
  while (v5 < v4);
  v6 = &a1[v2];
  v7 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v6 >= a2)
        break;
      v9 = *((_QWORD *)a2-- - 2);
    }
    while (v9 >= v4);
  }
  else
  {
    do
      v8 = *((_QWORD *)a2-- - 2);
    while (v8 >= v4);
  }
  if (v6 < a2)
  {
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      v12 = *v10;
      *v10 = *v11;
      *v11 = v12;
      do
        v13 = *((_QWORD *)v10++ + 2);
      while (v13 < v4);
      do
        v14 = *((_QWORD *)v11-- - 2);
      while (v14 >= v4);
    }
    while (v10 < v11);
    v7 = v10 - 1;
  }
  if (v7 != a1)
    *a1 = *v7;
  *v7 = v3;
  return v7;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;

  v4 = ((uint64_t)a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 2);
      if (*(a2 - 2) < *(_QWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((__int128 *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    if (*v9 < *v8)
    {
      v13 = v9[1];
      v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_QWORD *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = (unint64_t *)a1;
LABEL_12:
      *v16 = v12;
      v16[1] = v13;
      if (++v11 == 8)
        return v9 + 2 == a2;
    }
    v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(__int128 *a1, unint64_t *a2, unint64_t *a3, _OWORD *a4)
{
  __n128 result;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(a1, a2, a3);
  if (*(_QWORD *)a4 < *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < *a2)
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < *(_QWORD *)a1)
      {
        result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(__int128 *a1, unint64_t *a2, unint64_t *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(a1, a2, a3, a4).n128_u64[0];
  if (a5->n128_u64[0] < a4->n128_u64[0])
  {
    result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (a4->n128_u64[0] < *a3)
    {
      result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (*a3 < *a2)
      {
        result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (*a2 < *(_QWORD *)a1)
        {
          result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

unint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  __int128 v30;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (*v14 < *a1)
        {
          v15 = *(_OWORD *)v14;
          *(_OWORD *)v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      do
      {
        v17 = 0;
        v30 = *(_OWORD *)a1;
        v18 = a1;
        do
        {
          v19 = &v18[2 * v17 + 2];
          v20 = (2 * v17) | 1;
          v21 = 2 * v17 + 2;
          if (v21 < v16 && *v19 < v19[2])
          {
            v19 += 2;
            v20 = v21;
          }
          *(_OWORD *)v18 = *(_OWORD *)v19;
          v18 = v19;
          v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(_OWORD *)v19 = v30;
        }
        else
        {
          *(_OWORD *)v19 = *(_OWORD *)v6;
          *(_OWORD *)v6 = v30;
          v22 = (char *)v19 - (char *)a1 + 16;
          if (v22 >= 17)
          {
            v23 = (((unint64_t)v22 >> 4) - 2) >> 1;
            v24 = &a1[2 * v23];
            v25 = *v19;
            if (*v24 < *v19)
            {
              v26 = v19[1];
              do
              {
                v27 = v19;
                v19 = v24;
                *(_OWORD *)v27 = *(_OWORD *)v24;
                if (!v23)
                  break;
                v23 = (v23 - 1) >> 1;
                v24 = &a1[2 * v23];
              }
              while (*v24 < v25);
              *v19 = v25;
              v19[1] = v26;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>> *>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (unint64_t *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        if (*v8 < v8[2])
        {
          v10 = v8[2];
          v8 += 2;
          v7 = v9;
        }
      }
      v11 = *a4;
      if (v10 >= *a4)
      {
        v12 = a4[1];
        do
        {
          v13 = a4;
          a4 = v8;
          *(_OWORD *)v13 = *(_OWORD *)v8;
          if (v5 < v7)
            break;
          v14 = (2 * v7) | 1;
          v8 = (unint64_t *)(result + 16 * v14);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v15 = *v8;
            v7 = v14;
          }
          else
          {
            v15 = *v8;
            if (*v8 >= v8[2])
            {
              v7 = v14;
            }
            else
            {
              v15 = v8[2];
              v8 += 2;
            }
          }
        }
        while (v15 >= v11);
        *a4 = v11;
        a4[1] = v12;
      }
    }
  }
  return result;
}

unint64_t boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::copy_(unint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  _QWORD *v52;
  unint64_t v53;

  v3 = *(_QWORD *)(a2 - 8);
  v4 = *(_QWORD *)(v3 + 56);
  v5 = *(_QWORD *)(result - 8);
  v6 = (unint64_t *)(v5 + 56);
  if (v4 > 1)
  {
    *v6 = *v6 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v3 + 56) & 1;
    v7 = *(_QWORD *)(v3 + 56);
    v8 = (v7 & 0xFFFFFFFFFFFFFFFELL) - 56;
    v9 = (v7 & 0xFFFFFFFFFFFFFFFELL) == 0;
    v10 = v4 & 1;
    if (v9)
      v11 = 0;
    else
      v11 = v8;
    v12 = a3[6];
    if (v12 == v11)
    {
      v19 = a3 + 7;
    }
    else
    {
      v13 = (_QWORD *)a3[4];
      v14 = a3[5];
      while (v14)
      {
        v15 = v14 >> 1;
        v16 = &v13[2 * (v14 >> 1)];
        v18 = *v16;
        v17 = v16 + 2;
        v14 += ~(v14 >> 1);
        if (v18 < v11)
          v13 = v17;
        else
          v14 = v15;
      }
      v19 = v13 + 1;
    }
    *v6 = v10 | (*v19 + 56);
    v20 = *(_QWORD *)(v3 + 64);
    v21 = v20 - 56;
    if (!v20)
      v21 = 0;
    if (v12 == v21)
    {
      v28 = a3 + 7;
    }
    else
    {
      v22 = (_QWORD *)a3[4];
      v23 = a3[5];
      while (v23)
      {
        v24 = v23 >> 1;
        v25 = &v22[2 * (v23 >> 1)];
        v27 = *v25;
        v26 = v25 + 2;
        v23 += ~(v23 >> 1);
        if (v27 < v21)
          v22 = v26;
        else
          v23 = v24;
      }
      v28 = v22 + 1;
    }
    *(_QWORD *)(v5 + 64) = *v28 + 56;
    v29 = *(_QWORD *)(*(_QWORD *)(a2 - 8) + 72);
    if (v29)
      v30 = v29 - 56;
    else
      v30 = 0;
    if (a3[6] == v30)
    {
      v38 = a3 + 7;
      v32 = a3[5];
    }
    else
    {
      v31 = (_QWORD *)a3[4];
      v32 = a3[5];
      if (v32)
      {
        v33 = a3[5];
        do
        {
          v34 = v33 >> 1;
          v35 = &v31[2 * (v33 >> 1)];
          v37 = *v35;
          v36 = v35 + 2;
          v33 += ~(v33 >> 1);
          if (v37 < v30)
            v31 = v36;
          else
            v33 = v34;
        }
        while (v33);
      }
      v38 = v31 + 1;
    }
    *(_QWORD *)(*(_QWORD *)(result - 8) + 72) = *v38 + 56;
    if (v32)
    {
      v39 = (_QWORD *)a3[4];
      v40 = &v39[2 * v32];
      do
      {
        v42 = *v39;
        v41 = (_QWORD *)v39[1];
        v43 = (_QWORD *)(*v39 + 56);
        v44 = v41 + 7;
        v45 = *v43 & 1;
        result = v41[7] & 0xFFFFFFFFFFFFFFFELL | v45;
        v41[7] = result;
        v46 = *v43 & 0xFFFFFFFFFFFFFFFELL;
        if (v46)
        {
          v47 = a3 + 7;
          if (a3[6] != v46 - 56)
          {
            v48 = (_QWORD *)a3[4];
            v49 = a3[5];
            while (v49)
            {
              v50 = v49 >> 1;
              v51 = &v48[2 * (v49 >> 1)];
              v53 = *v51;
              v52 = v51 + 2;
              v49 += ~(v49 >> 1);
              if (v53 < v46 - 56)
                v48 = v52;
              else
                v49 = v50;
            }
            v47 = v48 + 1;
          }
          result = *v47;
          *v44 = v45 | (result + 56);
          if (*(_QWORD **)(v46 + 8) == v43)
          {
            *(_QWORD *)(result + 64) = v44;
          }
          else if (*(_QWORD **)(v46 + 16) == v43)
          {
            *(_QWORD *)(result + 72) = v44;
          }
        }
        else
        {
          *v44 = v45;
        }
        if (!*(_QWORD *)(v42 + 64))
          v41[8] = 0;
        if (!*(_QWORD *)(v42 + 72))
          v41[9] = 0;
        v39 += 2;
      }
      while (v39 != v40);
    }
  }
  else
  {
    *(_QWORD *)(v5 + 56) = 0;
    *(_QWORD *)(v5 + 64) = v6;
    *(_QWORD *)(*(_QWORD *)(result - 8) + 72) = *(_QWORD *)(result - 8) + 56;
  }
  return result;
}

uint64_t boost::multi_index::detail::copy_map<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::~copy_map(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;

  if (!*(_BYTE *)(a1 + 64) && *(_QWORD *)(a1 + 40))
  {
    v2 = 0;
    v3 = 8;
    do
    {
      std::allocator_traits<std::allocator<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>>>::destroy[abi:ne180100]<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,void,void>(a1, *(_QWORD *)(*(_QWORD *)(a1 + 32) + v3));
      operator delete(*(void **)(*(_QWORD *)(a1 + 32) + v3));
      ++v2;
      v3 += 16;
    }
    while (v2 < *(_QWORD *)(a1 + 40));
  }
  if (*(_QWORD *)(a1 + 24))
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void std::allocator_traits<std::allocator<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>>>>>::destroy[abi:ne180100]<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,void,void>(uint64_t a1, uint64_t a2)
{
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(a2 + 24);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

_QWORD *std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<char const*,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(_QWORD *a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  uint64_t v6;

  v4 = (std::string *)std::string::basic_string[abi:ne180100]<0>(a1, *(char **)a2);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4 + 1, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v4[1].__r_.__value_.__l.__data_ = v5;
  }
  v6 = operator new();
  boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::multi_index_container(v6, *(_QWORD *)(a2 + 32));
  a1[6] = v6;
  return a1;
}

void sub_1AD7FF208(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::NgramSrilmCountConfig,std::allocator<quasar::NgramSrilmCountConfig>,quasar::SystemConfig &,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x110uLL);
  result = std::__shared_ptr_emplace<quasar::NgramSrilmCountConfig>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string const&,std::allocator<quasar::NgramSrilmCountConfig>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD7FF2A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::NgramSrilmCountConfig>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string const&,std::allocator<quasar::NgramSrilmCountConfig>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43B08;
  a1[1] = 0;
  quasar::NgramSrilmCountConfig::NgramSrilmCountConfig(a1 + 3);
  return a1;
}

void sub_1AD7FF2F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::NgramSrilmCountConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43B08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::NgramSrilmCountConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43B08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::NgramSrilmCountConfig>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(uint64_t a1)
{
  uint64_t v2;

  v2 = boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::~multi_index_container(*(_QWORD *)(a1 + 24));
  MEMORY[0x1AF44D190](v2, 0x1020C402FC1992ELL);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::~multi_index_container(uint64_t a1)
{
  boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::delete_all_nodes_(a1 + 16);
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::delete_all_nodes_(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 - 8);
  v2 = *(_QWORD *)(v1 + 88);
  if (v2)
    v3 = v2 - 80;
  else
    v3 = 0;
  if (v3 != v1)
  {
    v5 = a1 - 16;
    do
    {
      v6 = *(_QWORD *)(v3 + 88);
      if (v6)
        v7 = v6 - 80;
      else
        v7 = 0;
      boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::delete_node_(v5, v3);
      v3 = v7;
    }
    while (v7 != *(_QWORD *)(a1 - 8));
  }
}

void boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::delete_node_(uint64_t a1, uint64_t a2)
{
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(a2 + 24);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  operator delete((void *)a2);
}

std::string *boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put<std::string,boost::property_tree::id_translator<std::string>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::string *v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;

  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child_optional(a1, (uint64_t)a2, (uint64_t *)&v13);
  if (v13)
  {
    boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put_value<std::string,boost::property_tree::id_translator<std::string>>(v13, a3);
    return v13;
  }
  else
  {
    v10 = 0uLL;
    v11 = 0;
    v7 = operator new();
    v8 = operator new(0x60uLL);
    *(_QWORD *)(v7 + 8) = v8;
    v8[7] = 0;
    v8[8] = v8 + 7;
    v8[9] = v8 + 7;
    v8[10] = v8 + 10;
    v8[11] = v8 + 10;
    *(_QWORD *)(v7 + 24) = 0;
    v12 = v7;
    v6 = (std::string *)boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put_child(a1, a2, &v10);
    boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v10);
    boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put_value<std::string,boost::property_tree::id_translator<std::string>>(v6, a3);
  }
  return v6;
}

void sub_1AD7FF550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child_optional(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _BOOL4 v6;
  std::string *p_p;
  const std::string::value_type *v8;
  std::string __p;
  char v10;
  char *v11;

  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v6 = *(char *)(a2 + 23) < 0;
  }
  else
  {
    v6 = 0;
    __p = *(std::string *)a2;
  }
  v10 = *(_BYTE *)(a2 + 24);
  p_p = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v6)
    v8 = *(const std::string::value_type **)a2;
  else
    v8 = (const std::string::value_type *)a2;
  v11 = (char *)p_p + *(_QWORD *)(a2 + 32) - (_QWORD)v8;
  *a3 = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::walk_path(a1, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1AD7FF64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put_value<std::string,boost::property_tree::id_translator<std::string>>(std::string *this, uint64_t a2)
{
  std::string __p;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  std::string::operator=(this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1AD7FF71C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(exception_object);
}

unint64_t *boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::put_child(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  _BOOL4 v6;
  std::string *v7;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;
  unint64_t *v11;
  std::string __p;
  uint64_t v14;
  std::string v15;
  std::string v16;
  char v17;
  char *v18;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v16, (const std::string::value_type *)*a2, a2[1]);
    v6 = *((char *)a2 + 23) < 0;
  }
  else
  {
    v6 = 0;
    v16 = *(std::string *)a2;
  }
  v17 = *((_BYTE *)a2 + 24);
  v7 = &v16;
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
  if (v6)
    v8 = (uint64_t *)*a2;
  else
    v8 = a2;
  v18 = (char *)v7 + a2[4] - (_QWORD)v8;
  v9 = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::force_path(a1, (uint64_t)&v16);
  boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>::reduce((uint64_t *)&v16, &v15);
  v10 = boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::find<std::string>(*(_QWORD *)(v9 + 24) + 16, (const void **)&v15.__r_.__value_.__l.__data_);
  if (*(const void ***)(*(_QWORD *)(v9 + 24) + 8) == v10)
  {
    std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string&,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>> const&,0>(&__p, (__int128 *)&v15, a3);
    v11 = boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert(*(_QWORD *)(v9 + 24) + 16, *(_QWORD *)(*(_QWORD *)(v9 + 24) + 8), (__int128 *)&__p)+ 3;
    boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v14);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v11 = (unint64_t *)boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::operator=((uint64_t)(v10 + 3), (uint64_t)a3);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v11;
}

void sub_1AD7FF8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::~pair((uint64_t)&a9);
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::walk_path(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  const void **v6;
  std::string __p;

  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = a2;
  else
    v4 = *(_QWORD *)a2;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a2 + 32) != v4 + v3)
  {
    boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>::reduce((uint64_t *)a2, &__p);
    v6 = boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::find<std::string>(*(_QWORD *)(a1 + 24) + 16, (const void **)&__p.__r_.__value_.__l.__data_);
    if (*(const void ***)(*(_QWORD *)(a1 + 24) + 8) == v6)
      a1 = 0;
    else
      a1 = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::walk_path(v6 + 3, a2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1AD7FF99C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>::reduce(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  std::string v11;
  char v12;
  std::string __p;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = (char *)a1[4];
  if (*((char *)a1 + 23) < 0)
  {
    v6 = (uint64_t *)*a1;
    v5 = a1[1];
  }
  else
  {
    v5 = *((unsigned __int8 *)a1 + 23);
    v6 = a1;
  }
  v7 = (char *)v6 + v5;
  v8 = (char *)memchr((void *)a1[4], *((char *)a1 + 24), (char *)v6 + v5 - v4);
  if (v8)
    v7 = v8;
  std::string::__init_with_size[abi:ne180100]<char *,char *>(&v11, v4, v7, v7 - v4);
  a1[4] = (uint64_t)v7;
  if (*((char *)a1 + 23) < 0)
  {
    v10 = (uint64_t *)*a1;
    v9 = a1[1];
  }
  else
  {
    v9 = *((unsigned __int8 *)a1 + 23);
    v10 = a1;
  }
  if (v7 != (char *)v10 + v9)
    a1[4] = (uint64_t)(v7 + 1);
  v12 = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    __p = v11;
  v12 = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a2, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (v12 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *a2 = __p;
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1AD7FFB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 && a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void boost::property_tree::ptree_error::~ptree_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1AF44D190);
}

const void **boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v5;
  const void **v6;
  const void **v7;

  v2 = *(_QWORD *)(a1 - 8);
  v3 = *(_QWORD *)(v2 + 56) & 0xFFFFFFFFFFFFFFFELL;
  if (v3)
  {
    v5 = a1 + 1;
    v6 = *(const void ***)(a1 - 8);
    do
    {
      while (1)
      {
        v7 = (const void **)(v3 - 56);
        if (std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 - 56), a2))
          break;
        v3 = *(_QWORD *)(v3 + 8);
        v6 = v7;
        if (!v3)
          goto LABEL_7;
      }
      v3 = *(_QWORD *)(v3 + 16);
    }
    while (v3);
    v7 = v6;
LABEL_7:
    if (v7 != (const void **)v2 && !std::less<std::string>::operator()[abi:ne180100](v5, a2, v7))
      return v7;
  }
  return (const void **)v2;
}

uint64_t boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::force_path(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  std::string __p;
  uint64_t v19;
  std::string v20;

  v4 = *(_BYTE **)(a2 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    v8 = *(_QWORD *)a2;
    v5 = *(_QWORD *)(a2 + 8);
    v6 = (_BYTE *)(*(_QWORD *)a2 + v5);
    v7 = v6 - v4;
  }
  else
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
    v6 = (_BYTE *)(a2 + v5);
    v7 = a2 + v5 - (_QWORD)v4;
    v8 = a2;
  }
  v9 = memchr(v4, *(char *)(a2 + 24), v7);
  if (v9)
    v10 = v9;
  else
    v10 = v6;
  if (v10 != (void *)(v8 + v5))
  {
    boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>::reduce((uint64_t *)a2, &v20);
    v11 = (char *)boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::find<std::string>(*(_QWORD *)(a1 + 24) + 16, (const void **)&v20.__r_.__value_.__l.__data_);
    if (*(char **)(*(_QWORD *)(a1 + 24) + 8) == v11)
    {
      v15 = 0uLL;
      v16 = 0;
      v12 = operator new();
      v13 = operator new(0x60uLL);
      *(_QWORD *)(v12 + 8) = v13;
      v13[7] = 0;
      v13[8] = v13 + 7;
      v13[9] = v13 + 7;
      v13[10] = v13 + 10;
      v13[11] = v13 + 10;
      *(_QWORD *)(v12 + 24) = 0;
      v17 = v12;
      std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string&,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(&__p, (__int128 *)&v20, &v15);
      v11 = (char *)boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert(*(_QWORD *)(a1 + 24) + 16, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), (__int128 *)&__p);
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v19);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v15);
    }
    a1 = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::force_path(v11 + 24, a2);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1AD7FFDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::~pair((uint64_t)&a13);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&a9);
  if (*(char *)(v13 - 49) < 0)
    operator delete(*(void **)(v13 - 72));
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::string::size_type v5;
  __int128 v6;
  uint64_t v7;
  std::string v9;
  uint64_t v10;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v9 = *(std::string *)a2;
  v4 = operator new();
  boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::multi_index_container(v4, *(_QWORD *)(a2 + 24));
  v5 = v9.__r_.__value_.__r.__words[2];
  v6 = *(_OWORD *)&v9.__r_.__value_.__l.__data_;
  *(_OWORD *)&v9.__r_.__value_.__l.__data_ = *(_OWORD *)a1;
  *(_OWORD *)a1 = v6;
  v7 = *(_QWORD *)(a1 + 24);
  v9.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  v10 = v7;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v9);
  return a1;
}

void sub_1AD7FFEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1AF44D190](v14, 0x1020C402FC1992ELL);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string&,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  std::string::size_type v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  v7 = operator new();
  boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::multi_index_container(v7, *((_QWORD *)a3 + 3));
  this[2].__r_.__value_.__r.__words[0] = v7;
  return this;
}

void sub_1AD7FFF94(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100]<std::string&,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>> const&,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  std::string::size_type v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  v7 = operator new();
  boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::multi_index_container(v7, *((_QWORD *)a3 + 3));
  this[2].__r_.__value_.__r.__words[0] = v7;
  return this;
}

void sub_1AD800094(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unint64_t *boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t *result;
  char v6;
  _QWORD *v7;
  unint64_t v8;

  result = boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::insert_<boost::multi_index::detail::lvalue_tag>(a1 - 16, a3);
  if (v6)
  {
    if (*(_QWORD *)(a1 - 8) != a2)
    {
      *(_QWORD *)(result[10] + 8) = result[11];
      *(_QWORD *)result[11] = result[10];
      v8 = *(_QWORD *)(a2 + 80);
      v7 = (_QWORD *)(a2 + 80);
      result[10] = v8;
      result[11] = (unint64_t)v7;
      *v7 = result + 10;
      *(_QWORD *)(result[10] + 8) = result + 10;
    }
  }
  return result;
}

unint64_t *boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t a1, __int128 *a2)
{
  unint64_t *result;
  unint64_t *v4;

  v4 = 0;
  result = boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert_<boost::multi_index::detail::lvalue_tag>(a1 + 16, a2, &v4);
  if (result == v4)
    ++*(_QWORD *)(a1 + 24);
  return result;
}

unint64_t *boost::multi_index::detail::sequenced_index<boost::multi_index::detail::nth_layer<1,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::vector0<mpl_::na>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t a1, __int128 *a2, unint64_t **a3)
{
  unint64_t *result;
  _QWORD *v6;
  unint64_t v7;

  result = boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::insert_<boost::multi_index::detail::lvalue_tag>(a1, a2, a3);
  if (result == *a3)
  {
    v6 = *(_QWORD **)(a1 - 8);
    v7 = v6[10];
    v6 += 10;
    result[10] = v7;
    result[11] = (unint64_t)v6;
    *v6 = result + 10;
    *(_QWORD *)(result[10] + 8) = result + 10;
  }
  return result;
}

unint64_t *boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t a1, __int128 *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unint64_t *v10;

  v9 = 0;
  if ((boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::link_point(a1, (const void **)a2, (uint64_t)&v9) & 1) != 0)
  {
    v6 = boost::multi_index::detail::index_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::insert_(a1, a2, (uint64_t)a3);
    v7 = v6;
    if (v6 == *a3)
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link(v6 + 56, v9, v10, (unint64_t *)(*(_QWORD *)(a1 - 8) + 56));
  }
  else if (v10)
  {
    return v10 - 7;
  }
  else
  {
    return 0;
  }
  return (unint64_t *)v7;
}

uint64_t boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::link_point(uint64_t a1, const void **a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 - 8);
  v5 = *(_QWORD *)(v4 + 56) & 0xFFFFFFFFFFFFFFFELL;
  if (v5)
  {
    v7 = a1 + 1;
    do
    {
      v4 = v5 - 56;
      v8 = std::less<std::string>::operator()[abi:ne180100](v7, a2, (const void **)(v5 - 56));
      if (v8)
        v9 = 64;
      else
        v9 = 72;
      v5 = *(_QWORD *)(v4 + v9);
    }
    while (v5);
    LODWORD(v5) = !v8;
  }
  *(_DWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v4 + 56;
  return 1;
}

uint64_t boost::multi_index::detail::index_base<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::insert_(uint64_t a1, __int128 *a2, uint64_t a3)
{
  std::string *v5;

  v5 = (std::string *)operator new(0x60uLL);
  *(_QWORD *)a3 = v5;
  std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100](v5, a2);
  return *(_QWORD *)a3;
}

void sub_1AD800340(void *a1)
{
  void **v1;

  __cxa_begin_catch(a1);
  operator delete(*v1);
  __cxa_rethrow();
}

void sub_1AD800354(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link(unint64_t a1, int a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *v4;
  unint64_t *v5;
  uint64_t v6;
  unint64_t *v8;

  if (a2)
  {
    a3[2] = a1;
    v4 = a4 + 2;
    v5 = (unint64_t *)a4[2];
  }
  else
  {
    a3[1] = a1;
    if (a3 == a4)
    {
      *a3 = *a3 & 1 | a1;
      v4 = a3 + 2;
LABEL_8:
      *v4 = a1;
      goto LABEL_9;
    }
    v4 = a4 + 1;
    v5 = (unint64_t *)a4[1];
  }
  if (v5 == a3)
    goto LABEL_8;
LABEL_9:
  v6 = *(_QWORD *)a1 & 1 | (unint64_t)a3;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = v6;
  v8 = a4;
  return boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rebalance((unint64_t *)a1, &v8);
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rebalance(unint64_t *result, unint64_t **a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t i;
  unint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t *v17;

  v2 = result;
  v3 = *result & 0xFFFFFFFFFFFFFFFELL;
  *result = v3;
  v4 = *a2;
  v5 = **a2 & 0xFFFFFFFFFFFFFFFELL;
  if ((unint64_t *)v5 != result)
  {
    v6 = (unint64_t *)(*result & 0xFFFFFFFFFFFFFFFELL);
    for (i = *v6; (*v6 & 1) == 0; i = *v6)
    {
      v9 = *(unint64_t **)((i & 0xFFFFFFFFFFFFFFFELL) + 8);
      if (v9 == v6)
      {
        v9 = *(unint64_t **)((i & 0xFFFFFFFFFFFFFFFELL) + 16);
        if (!v9 || (*(_BYTE *)v9 & 1) != 0)
        {
          if (v2 == (unint64_t *)v6[2])
          {
            v17 = v4;
            boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_left(v6, &v17);
            v4 = *a2;
            v11 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
            v2 = v6;
          }
          else
          {
            v11 = v6;
            v6 = v2;
          }
          *v11 |= 1uLL;
          *(_QWORD *)(*(_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
          v13 = (unint64_t *)(*(_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL);
          v16 = v4;
          result = boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_right(v13, &v16);
          goto LABEL_17;
        }
      }
      else if (!v9 || (*(_BYTE *)v9 & 1) != 0)
      {
        if (v2 == (unint64_t *)v6[1])
        {
          v15 = v4;
          boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_right(v6, &v15);
          v4 = *a2;
          v10 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
          v2 = v6;
        }
        else
        {
          v10 = v6;
          v6 = v2;
        }
        *v10 |= 1uLL;
        *(_QWORD *)(*(_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
        v12 = (unint64_t *)(*(_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL);
        v14 = v4;
        result = boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_left(v12, &v14);
        goto LABEL_17;
      }
      *v6 = i | 1;
      *v9 |= 1uLL;
      *(_QWORD *)(*(_QWORD *)(*v2 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
      v2 = (unint64_t *)(*(_QWORD *)(*v2 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL);
LABEL_17:
      v4 = *a2;
      v5 = **a2 & 0xFFFFFFFFFFFFFFFELL;
      if (v2 == (unint64_t *)v5)
        goto LABEL_20;
      v6 = (unint64_t *)(*v2 & 0xFFFFFFFFFFFFFFFELL);
    }
    v2 = (unint64_t *)v5;
LABEL_20:
    v3 = *v2;
  }
  *v2 = v3 | 1;
  return result;
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_left(unint64_t *result, unint64_t **a2)
{
  unint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;

  v2 = result[2];
  result[2] = *(_QWORD *)(v2 + 8);
  v3 = *(unint64_t **)(v2 + 8);
  if (v3)
    *v3 = *v3 & 1 | (unint64_t)result;
  *(_QWORD *)v2 = *result & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v2 & 1;
  if ((unint64_t *)(**a2 & 0xFFFFFFFFFFFFFFFELL) == result)
  {
    **a2 = **a2 & 1 | v2;
    v4 = *result;
  }
  else
  {
    v4 = *result;
    v5 = *result & 0xFFFFFFFFFFFFFFFELL;
    if (*(unint64_t **)(v5 + 8) == result)
      *(_QWORD *)(v5 + 8) = v2;
    else
      *(_QWORD *)(v5 + 16) = v2;
  }
  *(_QWORD *)(v2 + 8) = result;
  *result = v4 & 1 | v2;
  return result;
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_right(unint64_t *result, unint64_t **a2)
{
  unint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;

  v2 = result[1];
  result[1] = *(_QWORD *)(v2 + 16);
  v3 = *(unint64_t **)(v2 + 16);
  if (v3)
    *v3 = *v3 & 1 | (unint64_t)result;
  *(_QWORD *)v2 = *result & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v2 & 1;
  if ((unint64_t *)(**a2 & 0xFFFFFFFFFFFFFFFELL) == result)
  {
    **a2 = **a2 & 1 | v2;
    v4 = *result;
  }
  else
  {
    v4 = *result;
    v5 = *result & 0xFFFFFFFFFFFFFFFELL;
    if (*(unint64_t **)(v5 + 16) == result)
      *(_QWORD *)(v5 + 16) = v2;
    else
      *(_QWORD *)(v5 + 8) = v2;
  }
  *(_QWORD *)(v2 + 16) = result;
  *result = v4 & 1 | v2;
  return result;
}

uint64_t boost::property_tree::json_parser::write_json_internal<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(_QWORD *a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  const std::locale::facet *v8;
  uint64_t result;
  const char *v10;
  const char *v11;
  uint64_t v12;
  _QWORD v13[3];
  std::locale v14;

  if ((boost::property_tree::json_parser::verify_json<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(a2, 0) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "ptree contains data that cannot be represented in JSON format");
    boost::property_tree::file_parser_error::file_parser_error((uint64_t)&v14, (uint64_t)v13, a3, 0);
    v14.__locale_ = (std::locale::__imp *)&unk_1E5D297D0;
    v10 = "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Develop"
          "er/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/boost/property_tree/"
          "json_parser/detail/write.hpp";
    v11 = "void boost::property_tree::json_parser::write_json_internal(std::basic_ostream<typename Ptree::key_type::value"
          "_type> &, const Ptree &, const std::string &, BOOL) [Ptree = boost::property_tree::basic_ptree<std::string, std::string>]";
    v12 = 159;
    boost::throw_exception<boost::property_tree::json_parser::json_parser_error>((uint64_t)&v14, (uint64_t)&v10);
  }
  boost::property_tree::json_parser::write_json_helper<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(a1, a2, 0, a4);
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v8 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v14);
  std::ostream::put();
  result = std::ostream::flush();
  if (*(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32))
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "write error");
    boost::property_tree::file_parser_error::file_parser_error((uint64_t)&v14, (uint64_t)v13, a3, 0);
    v14.__locale_ = (std::locale::__imp *)&unk_1E5D297D0;
    v10 = "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Develop"
          "er/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/boost/property_tree/"
          "json_parser/detail/write.hpp";
    v11 = "void boost::property_tree::json_parser::write_json_internal(std::basic_ostream<typename Ptree::key_type::value"
          "_type> &, const Ptree &, const std::string &, BOOL) [Ptree = boost::property_tree::basic_ptree<std::string, std::string>]";
    v12 = 163;
    boost::throw_exception<boost::property_tree::json_parser::json_parser_error>((uint64_t)&v14, (uint64_t)&v10);
  }
  return result;
}

void sub_1AD800898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::runtime_error a19)
{
  boost::property_tree::file_parser_error::~file_parser_error(&a19);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::json_parser::verify_json<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(uint64_t a1, int a2)
{
  std::string::size_type size;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string __p;

  if (!a2)
  {
    boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>(a1, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (size)
      return 0;
  }
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>(a1, &__p);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)&__p.__r_.__value_.__s + 23) || !*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24))
      goto LABEL_17;
    return 0;
  }
  if (__p.__r_.__value_.__l.__size_)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v5)
      return 0;
  }
  else
  {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_17:
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v8 = *(_QWORD *)(v7 + 88);
  if (v8)
    v9 = v8 - 80;
  else
    v9 = 0;
  if (v9 == v7)
    return 1;
  v10 = (a2 + 1);
  do
  {
    result = boost::property_tree::json_parser::verify_json<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(v9 + 24, v10);
    if (!(_DWORD)result)
      break;
    v11 = *(_QWORD *)(v9 + 88);
    v9 = v11 ? v11 - 80 : 0;
  }
  while (v9 != *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8));
  return result;
}

void boost::throw_exception<boost::property_tree::json_parser::json_parser_error>(uint64_t a1, uint64_t a2)
{
  void *exception;

  exception = __cxa_allocate_exception(0x78uLL);
  boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>::wrapexcept(exception, a1, a2);
}

void sub_1AD800A3C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::property_tree::json_parser::write_json_helper<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string *p_p;
  std::string::size_type size;
  std::string::value_type v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26;
  uint64_t v27;
  _QWORD *v28;
  std::string *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::string *v36;
  uint64_t v37;
  _QWORD *v38;
  std::string *v39;
  std::string::size_type v40;
  _QWORD *v41;
  int v42;
  std::string v43;
  std::string __p;

  if (a3 < 1)
  {
LABEL_42:
    __p.__r_.__value_.__s.__data_[0] = 123;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
    if ((_DWORD)a4)
    {
      __p.__r_.__value_.__s.__data_[0] = 10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
    }
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
    v23 = *(_QWORD *)(v22 + 88);
    if (v23)
      v24 = v23 - 80;
    else
      v24 = 0;
    v42 = 4 * a3;
    if (v24 == v22)
    {
LABEL_81:
      if ((_DWORD)a4)
      {
        std::string::basic_string[abi:ne180100](&__p, v42, 32);
        v36 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        v37 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(__p.__r_.__value_.__r.__words[2])
            : __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v36, v37);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v21 = 125;
      goto LABEL_91;
    }
    v25 = (a3 + 1);
    while (1)
    {
      if ((_DWORD)a4)
      {
        std::string::basic_string[abi:ne180100](&__p, v42 + 4, 32);
        v26 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        v27 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(__p.__r_.__value_.__r.__words[2])
            : __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v26, v27);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      __p.__r_.__value_.__s.__data_[0] = 34;
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
      boost::property_tree::json_parser::create_escapes<char>(v24, &__p);
      v29 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      v30 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(__p.__r_.__value_.__r.__words[2])
          : __p.__r_.__value_.__l.__size_;
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
      v43.__r_.__value_.__s.__data_[0] = 34;
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)&v43, 1);
      v43.__r_.__value_.__s.__data_[0] = 58;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)&v43, 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        break;
      if ((_DWORD)a4)
        goto LABEL_66;
LABEL_67:
      boost::property_tree::json_parser::write_json_helper<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(a1, v24 + 24, v25, a4);
      v33 = *(_QWORD *)(v24 + 88);
      if (v33)
        v34 = v33 - 80;
      else
        v34 = 0;
      if (v34 != *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8))
      {
        __p.__r_.__value_.__s.__data_[0] = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
      }
      if ((_DWORD)a4)
      {
        __p.__r_.__value_.__s.__data_[0] = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
      }
      v35 = *(_QWORD *)(v24 + 88);
      if (v35)
        v24 = v35 - 80;
      else
        v24 = 0;
      if (v24 == *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8))
        goto LABEL_81;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!(_DWORD)a4)
      goto LABEL_67;
LABEL_66:
    __p.__r_.__value_.__s.__data_[0] = 32;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
    goto LABEL_67;
  }
  v8 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(v8 + 24))
  {
    memset(&__p, 0, sizeof(__p));
    v9 = boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::count<std::string,std::less<std::string>>(v8 + 16, (const void **)&__p.__r_.__value_.__l.__data_, v8 + 17);
    v10 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v9 == v10)
    {
      __p.__r_.__value_.__s.__data_[0] = 91;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
      if ((_DWORD)a4)
      {
        __p.__r_.__value_.__s.__data_[0] = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
      }
      v11 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
      v12 = *(_QWORD *)(v11 + 88);
      if (v12)
        v13 = v12 - 80;
      else
        v13 = 0;
      if (v13 != v11)
      {
        do
        {
          if ((_DWORD)a4)
          {
            std::string::basic_string[abi:ne180100](&__p, 4 * a3 + 4, 32);
            v14 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__p
                : (std::string *)__p.__r_.__value_.__r.__words[0];
            v15 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? HIBYTE(__p.__r_.__value_.__r.__words[2])
                : __p.__r_.__value_.__l.__size_;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v14, v15);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          boost::property_tree::json_parser::write_json_helper<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(a1, v13 + 24, (a3 + 1), a4);
          v16 = *(_QWORD *)(v13 + 88);
          if (v16)
            v17 = v16 - 80;
          else
            v17 = 0;
          if (v17 != *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8))
          {
            __p.__r_.__value_.__s.__data_[0] = 44;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
          }
          if ((_DWORD)a4)
          {
            __p.__r_.__value_.__s.__data_[0] = 10;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
          }
          v18 = *(_QWORD *)(v13 + 88);
          if (v18)
            v13 = v18 - 80;
          else
            v13 = 0;
        }
        while (v13 != *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8));
      }
      if ((_DWORD)a4)
      {
        std::string::basic_string[abi:ne180100](&__p, 4 * a3, 32);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v21 = 93;
LABEL_91:
      __p.__r_.__value_.__s.__data_[0] = v21;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&__p, 1);
      return;
    }
    goto LABEL_42;
  }
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>(a2, &v43);
  boost::property_tree::json_parser::create_escapes<char>((uint64_t)&v43, &__p);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  v43.__r_.__value_.__s.__data_[0] = 34;
  v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)&v43, 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v39 = &__p;
  else
    v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v40 = __p.__r_.__value_.__l.__size_;
  v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
  v43.__r_.__value_.__s.__data_[0] = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)&v43, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1AD800F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_value<std::string,boost::property_tree::id_translator<std::string>>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string __p;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a2, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *a2 = __p;
  }
}

void sub_1AD80105C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10)
  {
    if (a16 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 80) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 88));
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>::wrapexcept(uint64_t a1, uint64_t a2, int8x16_t *a3)
{
  __int128 v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;

  *(_QWORD *)a1 = &unk_1E5D29898;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)a2);
  *(_QWORD *)(a1 + 8) = &unk_1E5D29848;
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 24) = v6;
  }
  v7 = (std::string *)(a1 + 48);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *(_QWORD *)a1 = &unk_1E5D29368;
  *(_QWORD *)(a1 + 8) = &unk_1E5D29398;
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 80) = &unk_1E5D293C0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 112) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 96) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

void sub_1AD8011C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::runtime_error *v2;
  void **v3;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v3);
  std::runtime_error::~runtime_error(v2);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>::wrapexcept(v2, a1);
  boost::exception_detail::copy_boost_exception(v2 + 80, a1 + 80);
  return v2;
}

void sub_1AD801244(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x78uLL);
  boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>::wrapexcept(exception, a1);
}

void sub_1AD8012BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 80) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 88));
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 72) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 80));
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)a1);
}

{
  *(_QWORD *)(a1 + 72) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 80));
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)a1);
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)(a1 - 9));
}

{
  *a1 = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  boost::property_tree::file_parser_error::~file_parser_error((std::runtime_error *)(a1 - 9));
  JUMPOUT(0x1AF44D190);
}

void boost::property_tree::json_parser::json_parser_error::~json_parser_error(std::runtime_error *this)
{
  boost::property_tree::file_parser_error::~file_parser_error(this);
  JUMPOUT(0x1AF44D190);
}

void boost::property_tree::file_parser_error::~file_parser_error(std::runtime_error *this)
{
  boost::property_tree::file_parser_error::~file_parser_error(this);
  JUMPOUT(0x1AF44D190);
}

{
  this->__vftable = (std::runtime_error_vtbl *)&unk_1E5D29848;
  if (SHIBYTE(this[3].__imp_.__imp_) < 0)
    operator delete((void *)this[2].__imp_.__imp_);
  if (SHIBYTE(this[2].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::runtime_error::~runtime_error(this);
}

uint64_t boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  *(_QWORD *)a1 = &unk_1E5D29898;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &unk_1E5D29848;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v4;
  }
  v5 = (std::string *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 8) = &unk_1E5D297D0;
  *(_QWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 80) = &unk_1E5D29AE0;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v8;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  v9 = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v9;
  *(_QWORD *)a1 = &unk_1E5D29368;
  *(_QWORD *)(a1 + 8) = &unk_1E5D29398;
  *(_QWORD *)(a1 + 80) = &unk_1E5D293C0;
  return a1;
}

void sub_1AD8015F8(_Unwind_Exception *a1)
{
  std::runtime_error *v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v2 + 47) < 0)
    operator delete(*v3);
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::file_parser_error::file_parser_error(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string v12;

  boost::property_tree::file_parser_error::format_what(a2, (const char *)a3, a4);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v12);
  *(_QWORD *)a1 = &unk_1E5D297F8;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &unk_1E5D29848;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v8 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 16) = v8;
  }
  v9 = (std::string *)(a1 + 40);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  *(_QWORD *)(a1 + 64) = a4;
  return a1;
}

void sub_1AD801720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;

  if (*(char *)(v15 + 39) < 0)
    operator delete(*v16);
  std::runtime_error::~runtime_error((std::runtime_error *)v15);
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::file_parser_error::format_what(uint64_t a1, const char *a2, uint64_t a3)
{
  size_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  _QWORD v15[11];
  char v16;
  uint64_t v17;
  char v18;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  if (a2[23] < 0)
  {
    if (*((_QWORD *)a2 + 1))
      a2 = *(const char **)a2;
    else
      a2 = "<unspecified file>";
  }
  else if (!a2[23])
  {
    a2 = "<unspecified file>";
  }
  v6 = strlen(a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)a2, v6);
  if (a3)
  {
    v18 = 40;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v18, 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v18 = 41;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v18, 1);
  }
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)": ", 2);
  v9 = *(char *)(a1 + 23);
  if (v9 >= 0)
    v10 = a1;
  else
    v10 = *(_QWORD *)a1;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a1 + 23);
  else
    v11 = *(_QWORD *)(a1 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
  std::stringbuf::str();
  v14[0] = *MEMORY[0x1E0DE4F50];
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v15[0] = v12;
  v15[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v17);
}

void sub_1AD8018D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void boost::property_tree::json_parser::create_escapes<char>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  int v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = *(char *)(a1 + 23);
  if (v3 >= 0)
    v4 = (_BYTE *)a1;
  else
    v4 = *(_BYTE **)a1;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 23);
  else
    v5 = *(_QWORD *)(a1 + 8);
  for (; v5; --v5)
  {
    v6 = *v4;
    if (v6 <= 0x5C && (v6 - 48) >= 0x2Cu && (v6 & 0xFE) != 0x20 && (v6 - 35) >= 0xCu)
    {
      if (*v4 <= 0x21u)
      {
        switch(*v4)
        {
          case 8:
            std::string::push_back(a2, 92);
            LOBYTE(v6) = 98;
            goto LABEL_28;
          case 9:
            std::string::push_back(a2, 92);
            LOBYTE(v6) = 116;
            goto LABEL_28;
          case 0xA:
            std::string::push_back(a2, 92);
            LOBYTE(v6) = 110;
            goto LABEL_28;
          case 0xC:
            std::string::push_back(a2, 92);
            LOBYTE(v6) = 102;
            goto LABEL_28;
          case 0xD:
            std::string::push_back(a2, 92);
            LOBYTE(v6) = 114;
            goto LABEL_28;
          default:
            goto LABEL_31;
        }
      }
      switch((_DWORD)v6)
      {
        case '"':
          std::string::push_back(a2, 92);
          LOBYTE(v6) = 34;
          break;
        case '/':
          std::string::push_back(a2, 92);
          LOBYTE(v6) = 47;
          break;
        case '\\':
          LOBYTE(v6) = 92;
          std::string::push_back(a2, 92);
          break;
        default:
LABEL_31:
          std::string::push_back(a2, 92);
          std::string::push_back(a2, 117);
          std::string::push_back(a2, 48);
          std::string::push_back(a2, 48);
          std::string::push_back(a2, a0123456789abcd[v6 >> 4]);
          std::string::push_back(a2, a0123456789abcd[v6 & 0xF]);
          goto LABEL_29;
      }
    }
LABEL_28:
    std::string::push_back(a2, v6);
LABEL_29:
    ++v4;
  }
}

void sub_1AD801AC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::count<std::string,std::less<std::string>>(uint64_t a1, const void **a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;

  v3 = boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::equal_range<std::string,std::less<std::string>>(a1, a2, a3);
  if (v3 == v4)
    return 0;
  v5 = v4;
  v6 = 0;
  do
  {
    ++v6;
    v8 = v3 + 56;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v8);
    if (v8)
      v3 = v8 - 56;
    else
      v3 = 0;
  }
  while (v3 != v5);
  return v6;
}

unint64_t boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>,boost::multi_index::detail::nth_layer<2,std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>,boost::mpl::v_item<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_non_unique_tag,boost::multi_index::detail::null_augment_policy>::equal_range<std::string,std::less<std::string>>(uint64_t a1, const void **a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  _BOOL4 v9;
  unint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 - 8);
  v4 = *(_QWORD *)(v3 + 56) & 0xFFFFFFFFFFFFFFFELL;
  if (!v4)
    return v3;
  while (1)
  {
    v7 = v4;
    while (1)
    {
      v8 = v7 - 56;
      if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(v7 - 56), a2))
        break;
      v7 = *(_QWORD *)(v7 + 16);
      if (!v7)
        return v3;
    }
    v9 = std::less<std::string>::operator()[abi:ne180100](a3, a2, (const void **)(v7 - 56));
    v4 = *(_QWORD *)(v7 + 8);
    if (!v9)
      break;
    v3 = v7 - 56;
    if (!v4)
      return v8;
  }
  if (v4)
  {
    do
    {
      while (1)
      {
        v11 = v4 - 56;
        if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(v4 - 56), a2))
          break;
        v4 = *(_QWORD *)(v4 + 16);
        if (!v4)
          goto LABEL_17;
      }
      v4 = *(_QWORD *)(v4 + 8);
      v8 = v11;
    }
    while (v4);
  }
  else
  {
LABEL_17:
    v11 = v8;
  }
  v12 = *(_QWORD *)(v7 + 16);
  if (!v12)
    return v11;
  do
  {
    while (!std::less<std::string>::operator()[abi:ne180100](a3, a2, (const void **)(v12 - 56)))
    {
      v12 = *(_QWORD *)(v12 + 16);
      if (!v12)
        return v11;
    }
    v12 = *(_QWORD *)(v12 + 8);
  }
  while (v12);
  return v11;
}

uint64_t boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *(_QWORD **)result;
  v2 = *(_QWORD *)(*(_QWORD *)result + 16);
  if (v2)
  {
    do
    {
      *(_QWORD *)result = v2;
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2);
  }
  else
  {
    v3 = (_QWORD *)(*v1 & 0xFFFFFFFFFFFFFFFELL);
    if (v1 == (_QWORD *)v3[2])
    {
      do
      {
        v5 = v3;
        *(_QWORD *)result = v3;
        v3 = (_QWORD *)(*v3 & 0xFFFFFFFFFFFFFFFELL);
      }
      while (v5 == (_QWORD *)v3[2]);
      v4 = (_QWORD *)v5[2];
    }
    else
    {
      v4 = 0;
    }
    if (v4 != v3)
      *(_QWORD *)result = v3;
  }
  return result;
}

void quasar::makeNbestElement(uint64_t *a1@<X0>, _QWORD *a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int __src;
  _QWORD v13[4];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v17[168];

  kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)a3);
  v6 = *a1;
  if (a1[1] != *a1)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      memset(v13, 0, 24);
      v14 = 0u;
      v15 = 0u;
      v16 = 0u;
      memset(v17, 0, 156);
      __src = *(_DWORD *)(v6 + 4 * v8);
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(&v17[8], (char *)&__src, (uint64_t)v13, 1uLL);
      v9 = *a2 + v7;
      if ((char *)v9 != &v17[56])
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(&v17[56], *(char **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 2);
      v10 = a3[1];
      if (v10 >= a3[2])
      {
        v11 = std::vector<kaldi::quasar::TranslationUtil::PathElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::PathElement const&>((uint64_t *)a3, (const kaldi::quasar::TranslationUtil::PathElement *)v13);
      }
      else
      {
        kaldi::quasar::TranslationUtil::PathElement::PathElement((std::string *)a3[1], (const kaldi::quasar::TranslationUtil::PathElement *)v13);
        v11 = v10 + 240;
        a3[1] = v10 + 240;
      }
      a3[1] = v11;
      kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)v13);
      ++v8;
      v6 = *a1;
      v7 += 24;
    }
    while (v8 < (a1[1] - *a1) >> 2);
  }
}

void sub_1AD801E1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  kaldi::quasar::TranslationUtil::NbestElement *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *((_QWORD *)v2 + 1) = v3;
  kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)va);
  kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v2);
  _Unwind_Resume(a1);
}

_QWORD *quasar::PDecForceAlignOptions::options@<X0>(quasar::PDecForceAlignOptions *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = operator new(0x70uLL);
  a2[2] = result + 14;
  *result = (char *)this + 176;
  result[1] = (char *)this + 16;
  result[2] = (char *)this + 336;
  result[3] = (char *)this + 480;
  result[4] = (char *)this + 624;
  result[5] = (char *)this + 784;
  result[6] = (char *)this + 928;
  result[7] = (char *)this + 1072;
  result[8] = (char *)this + 1232;
  result[9] = (char *)this + 1712;
  result[10] = (char *)this + 1856;
  result[11] = (char *)this + 2144;
  result[12] = (char *)this + 2000;
  result[13] = (char *)this + 1392;
  *a2 = result;
  a2[1] = result + 14;
  return result;
}

uint64_t quasar::PDecForceAlignBlock::init(quasar::PDecForceAlignBlock *this)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v6;
  int v7;
  __int128 *v8;
  int v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 *v20;
  int v21;
  int v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  quasar::PDecModelVersionChecker *v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  __int128 *v58;

  v2 = (_QWORD *)((char *)this + 184);
  v3 = quasar::OptionValue<std::string>::value((_QWORD *)this + 23);
  v4 = *(char *)(v3 + 23);
  if (v4 < 0)
  {
    if (*(_QWORD *)(v3 + 8) != 5)
      goto LABEL_10;
    v3 = *(_QWORD *)v3;
  }
  else if (v4 != 5)
  {
    goto LABEL_10;
  }
  if (*(_DWORD *)v3 != 1684824427 || *(_BYTE *)(v3 + 4) != 105)
  {
LABEL_10:
    v6 = quasar::OptionValue<std::string>::value(v2);
    v7 = *(char *)(v6 + 23);
    if (v7 < 0)
    {
      if (*(_QWORD *)(v6 + 8) != 8)
        goto LABEL_43;
      v6 = *(_QWORD *)v6;
    }
    else if (v7 != 8)
    {
LABEL_43:
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v37);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"Unknown model type: ", 20);
      v36 = quasar::OptionValue<std::string>::value(v2);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v35, v36);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v37);
    }
    if (*(_QWORD *)v6 != 0x6F73736572707365)
      goto LABEL_43;
    v8 = (__int128 *)quasar::OptionValue<std::string>::value((_QWORD *)this + 3);
    v9 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value((_QWORD *)this + 43);
    v10 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value((_QWORD *)this + 215);
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 310);
    v54 = *((_QWORD *)this + 309);
    v55 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    kaldi::quasar::TMTools::GetModel<kaldi::quasar::Encdec>(v8, v9 != 0, v10 != 0, 1, (uint64_t)&v54, (uint64_t *)&v37);
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::shared_ptr<kaldi::quasar::Encdec>>>::__assign_alt[abi:ne180100]<1ul,std::shared_ptr<kaldi::quasar::Encdec>,std::shared_ptr<kaldi::quasar::Encdec>>((uint64_t)this + 2416, (uint64_t)this + 2416, &v37);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = v55;
    if (v55)
    {
      v18 = (unint64_t *)&v55->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      goto LABEL_27;
    }
    goto LABEL_41;
  }
  v20 = (__int128 *)quasar::OptionValue<std::string>::value((_QWORD *)this + 3);
  v21 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value((_QWORD *)this + 43);
  v22 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value((_QWORD *)this + 215);
  v23 = (std::__shared_weak_count *)*((_QWORD *)this + 310);
  v56 = *((_QWORD *)this + 309);
  v57 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  kaldi::quasar::TMTools::GetModel<kaldi::quasar::TorchEncoderDecoder>(v20, v21 != 0, v22 != 0, (uint64_t)&v56, (uint64_t *)&v37);
  v26 = v57;
  if (v57)
  {
    v27 = (unint64_t *)&v57->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (quasar::PDecModelVersionChecker *)quasar::PDecModelVersionChecker::PDecModelVersionChecker(&v58, v37);
  quasar::PDecModelVersionChecker::checkVersion(v29, *((_DWORD *)this + 4));
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::shared_ptr<kaldi::quasar::Encdec>>>::__assign_alt[abi:ne180100]<0ul,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>&>((uint64_t)this + 2416, (_QWORD *)this + 302, (uint64_t *)&v37);
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v19 = __ldaxr(v30);
    while (__stlxr(v19 - 1, v30));
LABEL_27:
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_41:
  v31 = quasar::OptionValue<std::string>::value((_QWORD *)this + 155);
  *(_QWORD *)&v37 = quasar::OptionValue<std::string>::value((_QWORD *)this + 195);
  *((_QWORD *)&v37 + 1) = v31;
  *(_QWORD *)&v38 = this;
  v32 = *((unsigned int *)this + 608);
  if ((_DWORD)v32 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v58 = &v37;
  result = ((uint64_t (*)(__int128 **, char *))off_1E5D46D18[v32])(&v58, (char *)this + 2416);
  *((_QWORD *)this + 305) = result;
  *((_DWORD *)this + 612) = v34;
  return result;
}

void sub_1AD802230(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 - 56);
  _Unwind_Resume(a1);
}

void sub_1AD802264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&a9);
}

void kaldi::quasar::TMTools::GetModel<kaldi::quasar::TorchEncoderDecoder>(__int128 *a1@<X0>, int a2@<W1>, char a3@<W2>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t **v9;
  uint64_t **v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  kaldi::quasar::TorchEncoderDecoder *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  __int128 *v26;

  if ((a3 & 1) == 0)
  {
    std::allocate_shared[abi:ne180100]<kaldi::quasar::TorchEncoderDecoder,std::allocator<kaldi::quasar::TorchEncoderDecoder>,std::string const&,BOOL &,BOOL &,void>(a5);
    kaldi::quasar::TorchEncoderDecoder::Read(*a5, (uint64_t)a1, a2);
    return;
  }
  if (*(_QWORD *)a4)
    v9 = (uint64_t **)kaldi::quasar::TMTools::ModelSharing::Cache<kaldi::quasar::TorchEncoderDecoder>(*(uint64_t ***)a4);
  else
    v9 = (uint64_t **)kaldi::quasar::TorchEncoderDecoder::ModelFileMap(0);
  v10 = v9;
  v26 = a1;
  v11 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (const void **)a1, (uint64_t)&std::piecewise_construct, &v26);
  *a5 = 0;
  a5[1] = 0;
  v12 = (std::__shared_weak_count *)v11[8];
  if (v12)
  {
    v13 = std::__shared_weak_count::lock(v12);
    a5[1] = (uint64_t)v13;
    if (v13)
    {
      v14 = v11[7];
      *a5 = v14;
      if (v14)
        return;
    }
    else if (*a5)
    {
      return;
    }
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)a5);
  v15 = (kaldi::quasar::TorchEncoderDecoder *)operator new();
  kaldi::quasar::TorchEncoderDecoder::TorchEncoderDecoder(v15);
  std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>::shared_ptr[abi:ne180100]<kaldi::quasar::TorchEncoderDecoder,void>(a5, (uint64_t)v15);
  kaldi::quasar::TorchEncoderDecoder::Read(*a5, (uint64_t)a1, a2);
  v16 = *(std::__shared_weak_count **)(a4 + 8);
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v26 = a1;
  v20 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (const void **)a1, (uint64_t)&std::piecewise_construct, &v26);
  v22 = *a5;
  v21 = a5[1];
  if (v21)
  {
    v23 = (unint64_t *)(v21 + 16);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = (std::__shared_weak_count *)v20[8];
  v20[7] = v22;
  v20[8] = v21;
  if (v25)
    std::__shared_weak_count::__release_weak(v25);
}

void sub_1AD802448(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40C769EB58);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TMTools::GetModel<kaldi::quasar::Encdec>(__int128 *a1@<X0>, int a2@<W1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t **v11;
  uint64_t **v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t **v31;
  std::__shared_weak_count *v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  __int128 *v35;

  v34 = a3;
  v33 = a4;
  if ((a3 & 1) == 0)
  {
    std::allocate_shared[abi:ne180100]<kaldi::quasar::Encdec,std::allocator<kaldi::quasar::Encdec>,std::string const&,BOOL &,BOOL &,void>((uint64_t)a1, &v33, &v34, a6);
    kaldi::quasar::Encdec::Read(*a6, (uint64_t)a1, a2);
    return;
  }
  if (*(_QWORD *)a5)
    v11 = (uint64_t **)kaldi::quasar::TMTools::ModelSharing::Cache<kaldi::quasar::Encdec>(*(uint64_t ***)a5);
  else
    v11 = (uint64_t **)kaldi::quasar::Encdec::ModelFileMap(0);
  v12 = v11;
  v35 = a1;
  v13 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, (const void **)a1, (uint64_t)&std::piecewise_construct, &v35);
  *a6 = 0;
  a6[1] = 0;
  v14 = (std::__shared_weak_count *)v13[8];
  if (v14)
  {
    v15 = std::__shared_weak_count::lock(v14);
    a6[1] = (uint64_t)v15;
    if (v15)
    {
      v16 = v13[7];
      *a6 = v16;
      if (v16)
        return;
    }
    else if (*a6)
    {
      return;
    }
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)a6);
  v17 = operator new();
  kaldi::quasar::Encdec::Encdec(v17, a1, a4, 1);
  std::shared_ptr<kaldi::quasar::Encdec>::shared_ptr[abi:ne180100]<kaldi::quasar::Encdec,void>(a6, v17);
  kaldi::quasar::Encdec::Read(*a6, (uint64_t)a1, a2);
  v18 = *a6;
  v19 = *(std::__shared_weak_count **)(a5 + 8);
  v31 = *(uint64_t ***)a5;
  v32 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(v18 + 536), (uint64_t *)&v31);
  v22 = v32;
  if (v32)
  {
    v23 = (unint64_t *)&v32->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v35 = a1;
  v25 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, (const void **)a1, (uint64_t)&std::piecewise_construct, &v35);
  v27 = *a6;
  v26 = a6[1];
  if (v26)
  {
    v28 = (unint64_t *)(v26 + 16);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = (std::__shared_weak_count *)v25[8];
  v25[7] = v27;
  v25[8] = v26;
  if (v30)
    std::__shared_weak_count::__release_weak(v30);
}

void sub_1AD802674(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B2C40E49A1260);
  _Unwind_Resume(a1);
}

_QWORD *std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, a2, v3);
}

uint64_t `virtual thunk to'quasar::PDecForceAlignBlock::init(quasar::PDecForceAlignBlock *this)
{
  return quasar::PDecForceAlignBlock::init((quasar::PDecForceAlignBlock *)((char *)this
                                                                         + *(_QWORD *)(*(_QWORD *)this - 88)));
}

void quasar::PDecForceAlignBlock::processBody(quasar::PDecForceAlignBlock *this)
{
  quasar::PDecForceAlignBlock *v1;
  quasar::ProcessingInput *v2;
  _QWORD *Value;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  char *v10;
  void *v11;
  char *v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  const quasar::TranslationPhraseInternal *v33;
  uint64_t v34;
  uint64_t v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  int v48;
  std::vector<std::wstring>::pointer end;
  std::wstring *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  std::vector<std::wstring>::pointer v69;
  float *v70;
  float *v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  float v76;
  float v77;
  std::wstring::size_type v78;
  uint64_t v79;
  std::vector<std::wstring>::pointer v80;
  std::wstring::size_type size;
  std::wstring::size_type v82;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  quasar::TranslationPhraseInternal **v88;
  _QWORD *v89;
  _QWORD *v90;
  void *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t *v97;
  unint64_t v98;
  _QWORD *v99;
  quasar::ProcessingInput *v100;
  void *v101[2];
  char v102;
  std::string v103[2];
  void *v104;
  char v105;
  char v106;
  char v107;
  void *v108;
  float *v109;
  uint64_t v110;
  void *v111[3];
  void *v112;
  void *v113;
  uint64_t v114;
  void *v115;
  char *v116;
  char *v117;
  void *v118;
  std::string *v119;
  unint64_t v120;
  std::vector<std::wstring> v121;
  std::vector<std::wstring> v122;
  uint64_t v123;
  std::string *v124;
  unint64_t v125;
  void *__p[2];
  char *v127;
  void *v128[2];
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;

  v1 = this;
  v145 = *MEMORY[0x1E0C80C00];
  v2 = (quasar::PDecForceAlignBlock *)((char *)this + 2304);
  Value = (_QWORD *)quasar::ProcessingInput::getValue((quasar::PDecForceAlignBlock *)((char *)this + 2304));
  if (*Value == Value[1])
  {
    v143 = 0u;
    v144 = 0u;
    v141 = 0u;
    v142 = 0u;
    v139 = 0u;
    v140 = 0u;
    v137 = 0u;
    v138 = 0u;
    v135 = 0u;
    v136 = 0u;
    v133 = 0u;
    v134 = 0u;
    v131 = 0u;
    v132 = 0u;
    v129 = 0u;
    v130 = 0u;
    *(_OWORD *)v128 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v128);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v128, "PDecForceAlignBlock 'source' input must not be empty");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v128);
  }
  __p[0] = 0;
  __p[1] = 0;
  v127 = 0;
  v123 = 0;
  v124 = 0;
  v125 = 0;
  v4 = quasar::ProcessingInput::getValue(v2);
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 136);
  for (i = *(_QWORD *)(*(_QWORD *)v4 + 144); v6 != i; v6 += 136)
  {
    v7 = v124;
    if ((unint64_t)v124 >= v125)
    {
      v9 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v123, (__int128 *)v6);
    }
    else
    {
      if (*(char *)(v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v124, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
      }
      else
      {
        v8 = *(_OWORD *)v6;
        v124->__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
      }
      v9 = v7 + 1;
    }
    v124 = v9;
    if (*(_DWORD *)(v6 + 64) == -1 && *(_BYTE *)quasar::OptionValue<BOOL>::value((_QWORD *)v1 + 233))
    {
      v143 = 0u;
      v144 = 0u;
      v141 = 0u;
      v142 = 0u;
      v139 = 0u;
      v140 = 0u;
      v137 = 0u;
      v138 = 0u;
      v135 = 0u;
      v136 = 0u;
      v133 = 0u;
      v134 = 0u;
      v131 = 0u;
      v132 = 0u;
      v129 = 0u;
      v130 = 0u;
      *(_OWORD *)v128 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v128);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)"Option 'use-sentencepiece-ids' require vocabulary IDs set in 'input phrase'.", 76);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v128);
    }
    v10 = (char *)__p[1];
    if (__p[1] >= v127)
    {
      v12 = (char *)__p[0];
      v13 = ((char *)__p[1] - (char *)__p[0]) >> 2;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v15 = v127 - (char *)__p[0];
      if ((v127 - (char *)__p[0]) >> 1 > v14)
        v14 = v15 >> 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
        v16 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v127, v16);
        v12 = (char *)__p[0];
        v10 = (char *)__p[1];
      }
      else
      {
        v17 = 0;
      }
      v18 = &v17[4 * v13];
      *(_DWORD *)v18 = *(_DWORD *)(v6 + 64);
      v11 = v18 + 4;
      while (v10 != v12)
      {
        v19 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v18 - 1) = v19;
        v18 -= 4;
      }
      __p[0] = v18;
      __p[1] = v11;
      v127 = &v17[4 * v16];
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_DWORD *)__p[1] = *(_DWORD *)(v6 + 64);
      v11 = v10 + 4;
    }
    __p[1] = v11;
  }
  memset(&v122, 0, sizeof(v122));
  v20 = (_QWORD *)((char *)v1 + 1864);
  if (*(_BYTE *)quasar::OptionValue<BOOL>::value((_QWORD *)v1 + 233))
  {
    v21 = *((unsigned int *)v1 + 608);
    if ((_DWORD)v21 == -1)
      std::__throw_bad_variant_access[abi:ne180100]();
    v103[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v128;
    v22 = ((uint64_t (*)(std::string *, char *))off_1E5D46D28[v21])(v103, (char *)v1 + 2416);
    v23 = quasar::OptionValue<std::string>::value((_QWORD *)v1 + 135);
    v24 = quasar::OptionValue<std::string>::value((_QWORD *)v1 + 155);
    kaldi::quasar::MultiLangDecorator::Apply((uint64_t)v1 + 2440, (uint64_t)__p, v23, v24, v22, (uint64_t)v128);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = *(_OWORD *)v128;
    v127 = (char *)v129;
  }
  else
  {
    v103[0].__r_.__value_.__r.__words[0] = (std::string::size_type)" ";
    v103[0].__r_.__value_.__l.__size_ = 1;
    quasar::join<std::vector<std::string>>(&v123, (uint64_t *)v103);
    v25 = quasar::OptionValue<std::string>::value((_QWORD *)v1 + 135);
    v26 = quasar::OptionValue<std::string>::value((_QWORD *)v1 + 155);
    kaldi::quasar::MultiLangDecorator::Apply((uint64_t)v1 + 2440, (uint64_t)v128, v25, v26, v103);
    std::string::basic_string[abi:ne180100]<0>(&v118, " ");
    quasar::split((uint64_t)v103, (uint64_t *)&v118, 0, (uint64_t)&v121);
    std::vector<std::string>::__vdeallocate(&v122);
    v122 = v121;
    memset(&v121, 0, sizeof(v121));
    v115 = &v121;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
    if (SHIBYTE(v120) < 0)
      operator delete(v118);
    if (SHIBYTE(v103[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103[0].__r_.__value_.__l.__data_);
    if (SBYTE7(v129) < 0)
      operator delete(v128[0]);
  }
  memset(&v121, 0, sizeof(v121));
  v27 = (void *)quasar::OptionValue<std::string>::value((_QWORD *)v1 + 175);
  v128[0] = v27;
  v28 = *((unsigned int *)v1 + 608);
  if ((_DWORD)v28 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v91 = v27;
  v103[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v128;
  v97 = (uint64_t *)((char *)v1 + 2416);
  ((void (*)(std::string *))off_1E5D46D38[v28])(v103);
  v29 = 0;
  v99 = (_QWORD *)((char *)v1 + 632);
  v100 = (quasar::PDecForceAlignBlock *)((char *)v1 + 2360);
  v89 = (_QWORD *)((char *)v1 + 936);
  v90 = (_QWORD *)((char *)v1 + 792);
  v95 = (_QWORD *)((char *)v1 + 2152);
  v96 = (_QWORD *)((char *)v1 + 488);
  v93 = (_QWORD *)((char *)v1 + 1560);
  v94 = (_QWORD *)((char *)v1 + 2008);
  v92 = (_QWORD *)((char *)v1 + 1240);
  while (1)
  {
    v30 = *(int *)quasar::OptionValue<int>::value(v96);
    v31 = (_QWORD *)quasar::ProcessingInput::getValue(v100);
    v32 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v31[1] - *v31) >> 3);
    if (v32 >= v30)
      v32 = v30;
    if (v32 <= v29)
      break;
    v98 = v29;
    v33 = (const quasar::TranslationPhraseInternal *)(*(_QWORD *)quasar::ProcessingInput::getValue(v100) + 200 * v29);
    v118 = 0;
    v119 = 0;
    v120 = 0;
    v115 = 0;
    v116 = 0;
    v117 = 0;
    v34 = *((_QWORD *)v33 + 17);
    v35 = *((_QWORD *)v33 + 18);
    while (v34 != v35)
    {
      v36 = v119;
      if ((unint64_t)v119 >= v120)
      {
        v38 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v118, (__int128 *)v34);
      }
      else
      {
        if (*(char *)(v34 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v119, *(const std::string::value_type **)v34, *(_QWORD *)(v34 + 8));
        }
        else
        {
          v37 = *(_OWORD *)v34;
          v119->__r_.__value_.__r.__words[2] = *(_QWORD *)(v34 + 16);
          *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
        }
        v38 = v36 + 1;
      }
      v119 = v38;
      v39 = v116;
      if (v116 >= v117)
      {
        v41 = (char *)v115;
        v42 = (v116 - (_BYTE *)v115) >> 2;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v44 = v117 - (_BYTE *)v115;
        if ((v117 - (_BYTE *)v115) >> 1 > v43)
          v43 = v44 >> 1;
        if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
          v45 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v45 = v43;
        if (v45)
        {
          v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v117, v45);
          v41 = (char *)v115;
          v39 = v116;
        }
        else
        {
          v46 = 0;
        }
        v47 = &v46[4 * v42];
        *(_DWORD *)v47 = *(_DWORD *)(v34 + 64);
        v40 = v47 + 4;
        while (v39 != v41)
        {
          v48 = *((_DWORD *)v39 - 1);
          v39 -= 4;
          *((_DWORD *)v47 - 1) = v48;
          v47 -= 4;
        }
        v115 = v47;
        v116 = v40;
        v117 = &v46[4 * v45];
        if (v41)
          operator delete(v41);
      }
      else
      {
        *(_DWORD *)v116 = *(_DWORD *)(v34 + 64);
        v40 = v39 + 4;
      }
      v116 = v40;
      if (*(_DWORD *)(v34 + 64) == -1)
      {
        if (*(_BYTE *)quasar::OptionValue<BOOL>::value(v20))
        {
          v143 = 0u;
          v144 = 0u;
          v141 = 0u;
          v142 = 0u;
          v139 = 0u;
          v140 = 0u;
          v137 = 0u;
          v138 = 0u;
          v135 = 0u;
          v136 = 0u;
          v133 = 0u;
          v134 = 0u;
          v131 = 0u;
          v132 = 0u;
          v129 = 0u;
          v130 = 0u;
          *(_OWORD *)v128 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v128);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)"Option 'use-sentencepiece-ids' require vocabulary IDs set in 'input phrase'.", 76);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v128);
        }
      }
      v34 += 136;
    }
    end = v121.__end_;
    if (v121.__end_ >= v121.__end_cap_.__value_)
    {
      v50 = (std::wstring *)std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>((uint64_t *)&v121, v33);
    }
    else
    {
      quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)v121.__end_, v33);
      v50 = (std::vector<std::wstring>::pointer)((char *)end + 200);
    }
    v121.__end_ = v50;
    v112 = 0;
    v113 = 0;
    v114 = 0;
    memset(v111, 0, sizeof(v111));
    v108 = 0;
    v109 = 0;
    v110 = 0;
    v107 = 1;
    if (*((_DWORD *)v1 + 608) == 1)
    {
      v51 = (_BYTE *)quasar::OptionValue<BOOL>::value(v20);
      v52 = *v97;
      if (*v51)
      {
        v53 = quasar::OptionValue<std::string>::value(v99);
        v54 = *(unsigned int *)quasar::OptionValue<int>::value(v90);
        v55 = *(unsigned int *)quasar::OptionValue<int>::value(v89);
        v128[1] = 0;
        *(_QWORD *)&v129 = 0;
        v128[0] = &v128[1];
        kaldi::quasar::Encdec::ConstrainSoftmax(v52, v53, v54, v55, (int **)__p, (int **)&v115, v128);
        std::__tree<int>::destroy((uint64_t)v128, (_QWORD *)v128[1]);
      }
      else
      {
        v58 = quasar::OptionValue<std::string>::value(v99);
        v59 = *(unsigned int *)quasar::OptionValue<int>::value(v90);
        v60 = (unsigned int *)quasar::OptionValue<int>::value(v89);
        kaldi::quasar::Encdec::ConstrainSoftmax(v52, v58, v59, *v60, (__int128 **)&v122, (__int128 **)&v118);
      }
      v107 = 0;
    }
    else
    {
      v56 = quasar::OptionValue<std::string>::value(v99);
      v57 = *(unsigned __int8 *)(v56 + 23);
      if ((v57 & 0x80u) != 0)
        v57 = *(_QWORD *)(v56 + 8);
      if (v57 && quasar::gLogLevel >= 2)
      {
        v143 = 0u;
        v144 = 0u;
        v141 = 0u;
        v142 = 0u;
        v139 = 0u;
        v140 = 0u;
        v137 = 0u;
        v138 = 0u;
        v135 = 0u;
        v136 = 0u;
        v133 = 0u;
        v134 = 0u;
        v131 = 0u;
        v132 = 0u;
        v129 = 0u;
        v130 = 0u;
        *(_OWORD *)v128 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v128);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)"Ignoring shortlisting configuration for kaldi models, running with full readout layer", 85);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v128);
      }
    }
    v61 = (unsigned int *)v1;
    v62 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value(v95);
    v63 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value(v94);
    v64 = quasar::OptionValue<std::string>::value(v93);
    v65 = quasar::OptionValue<std::string>::value(v92);
    v66 = quasar::OptionValue<std::string>::value(v99);
    v67 = *(_BYTE *)quasar::OptionValue<BOOL>::value(v20);
    v128[0] = &v122;
    v128[1] = &v118;
    *(_QWORD *)&v129 = __p;
    *((_QWORD *)&v129 + 1) = &v115;
    *(_QWORD *)&v130 = &v112;
    *((_QWORD *)&v130 + 1) = v111;
    *(_QWORD *)&v131 = &v108;
    BYTE8(v131) = v63;
    BYTE9(v131) = v62;
    *(_QWORD *)&v132 = v64;
    *((_QWORD *)&v132 + 1) = v65;
    *(_QWORD *)&v133 = &v107;
    BYTE8(v133) = v67;
    *(_QWORD *)&v134 = v91;
    *((_QWORD *)&v134 + 1) = v66;
    v68 = v61[608];
    if ((_DWORD)v68 == -1)
      std::__throw_bad_variant_access[abi:ne180100]();
    v103[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v128;
    ((void (*)(std::string *, uint64_t *))off_1E5D46D48[v68])(v103, v97);
    v69 = v121.__end_;
    v70 = (float *)v108;
    v71 = v109;
    v72 = ((char *)v109 - (_BYTE *)v108) >> 2;
    if (v63
       - 0xF0F0F0F0F0F0F0FLL
       * ((uint64_t)(v121.__end_[-3].__r_.__value_.__r.__words[2] - v121.__end_[-3].__r_.__value_.__l.__size_) >> 3) != v72
      && quasar::gLogLevel >= 1)
    {
      v143 = 0u;
      v144 = 0u;
      v141 = 0u;
      v142 = 0u;
      v139 = 0u;
      v140 = 0u;
      v137 = 0u;
      v138 = 0u;
      v135 = 0u;
      v136 = 0u;
      v133 = 0u;
      v134 = 0u;
      v131 = 0u;
      v132 = 0u;
      v129 = 0u;
      v130 = 0u;
      *(_OWORD *)v128 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v128);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)"Inconsistent alignment dimension ", 33);
      v73 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" expecting ", 11);
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v128);
      v70 = (float *)v108;
      v71 = v109;
      v69 = v121.__end_;
      v72 = ((char *)v109 - (_BYTE *)v108) >> 2;
    }
    if (v71 == v70)
    {
      v76 = 0.0;
    }
    else
    {
      v74 = 0;
      v75 = v72 - 1;
      if (v72 <= 1)
        v72 = 1;
      v76 = 0.0;
      do
      {
        v77 = *v70;
        if (!(_DWORD)v63 || v75)
        {
          v78 = v69[-3].__r_.__value_.__l.__size_ + v74;
          *(float *)(v78 + 60) = v77;
          *(float *)(v78 + 96) = *v70;
        }
        v76 = v76 + v77;
        v74 += 136;
        --v75;
        ++v70;
        --v72;
      }
      while (v72);
    }
    *(float *)&v69[-9].__r_.__value_.__s.__data_[4] = v76;
    *(float *)&v69[-2].__r_.__value_.__s.__data_[2] = v76;
    if (!v62)
    {
      v79 = v61[608];
      if ((_DWORD)v79 == -1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v103[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v128;
      if (((unsigned int (*)(std::string *, uint64_t *))off_1E5D46D58[v79])(v103, v97))
      {
        quasar::makeNbestElement((uint64_t *)&v112, v111, (unint64_t *)v128);
        memset(v103, 0, 24);
        v104 = v103;
        v105 = 0;
        v103[0].__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x110uLL);
        v103[0].__r_.__value_.__l.__size_ = v103[0].__r_.__value_.__r.__words[0];
        v103[0].__r_.__value_.__r.__words[2] = v103[0].__r_.__value_.__r.__words[0] + 272;
        v103[0].__r_.__value_.__l.__size_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::NbestElement>,kaldi::quasar::TranslationUtil::NbestElement const*,kaldi::quasar::TranslationUtil::NbestElement const*,kaldi::quasar::TranslationUtil::NbestElement*>((uint64_t)&v103[0].__r_.__value_.__r.__words[2], (uint64_t)v128, (uint64_t)&v145, (uint64_t)v103[0].__r_.__value_.__l.__data_);
        kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v128);
        kaldi::quasar::TranslationUtil::ComputeBackwardAlignments((uint64_t)v103);
        kaldi::quasar::TranslationUtil::MergeAlignments((uint64_t)v103);
        v80 = v121.__end_;
        size = v121.__end_[-3].__r_.__value_.__l.__size_;
        v82 = v121.__end_[-3].__r_.__value_.__r.__words[2];
        if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v82 - size) >> 3) != 0xEEEEEEEEEEEEEEEFLL
                                                                  * ((uint64_t)(*(_QWORD *)(v103[0].__r_.__value_.__r.__words[0]
                                                                                         + 8)
                                                                             - *(_QWORD *)v103[0].__r_.__value_.__l.__data_) >> 4)
          && quasar::gLogLevel >= 1)
        {
          v143 = 0u;
          v144 = 0u;
          v141 = 0u;
          v142 = 0u;
          v139 = 0u;
          v140 = 0u;
          v137 = 0u;
          v138 = 0u;
          v135 = 0u;
          v136 = 0u;
          v133 = 0u;
          v134 = 0u;
          v131 = 0u;
          v132 = 0u;
          v129 = 0u;
          v130 = 0u;
          *(_OWORD *)v128 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v128);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v128, (uint64_t)"Inconsistent alignment dimension!", 33);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v128);
          v80 = v121.__end_;
          size = v121.__end_[-3].__r_.__value_.__l.__size_;
          v82 = v121.__end_[-3].__r_.__value_.__r.__words[2];
        }
        if (v82 != size)
        {
          v84 = 0;
          v85 = 0;
          v86 = 32;
          do
          {
            v87 = *(_QWORD *)v103[0].__r_.__value_.__l.__data_ + v84;
            if (v87 + 88 != size + v86)
            {
              std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(size + v86), *(char **)(v87 + 88), *(_QWORD *)(v87 + 96), (uint64_t)(*(_QWORD *)(v87 + 96) - *(_QWORD *)(v87 + 88)) >> 2);
              v80 = v121.__end_;
            }
            ++v85;
            size = v80[-3].__r_.__value_.__l.__size_;
            v84 += 240;
            v86 += 136;
          }
          while (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v80[-3].__r_.__value_.__r.__words[2] - size) >> 3) > v85);
        }
        v128[0] = v103;
        std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100]((void ***)v128);
      }
    }
    quasar::PTree::PTree((quasar::PTree *)v128);
    std::string::basic_string[abi:ne180100]<0>(&v104, (char *)quasar::FORCEALIGN_SOURCE_META);
    v88 = (quasar::TranslationPhraseInternal **)quasar::ProcessingInput::getValue(v2);
    quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)v101, *v88);
    quasar::PTree::PTree(v103, v101);
    v1 = (quasar::PDecForceAlignBlock *)v61;
    quasar::PTree::putChild((uint64_t)v128, (uint64_t)&v104, (uint64_t)v103, 1);
    quasar::PTree::~PTree((quasar::PTree *)v103);
    if (v102 < 0)
      operator delete(v101[0]);
    if (v106 < 0)
      operator delete(v104);
    std::string::basic_string[abi:ne180100]<0>(&v104, (char *)quasar::FORCEALIGN_TARGET_META);
    quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)v101, v33);
    quasar::PTree::PTree(v103, v101);
    quasar::PTree::putChild((uint64_t)v128, (uint64_t)&v104, (uint64_t)v103, 1);
    quasar::PTree::~PTree((quasar::PTree *)v103);
    if (v102 < 0)
      operator delete(v101[0]);
    if (v106 < 0)
      operator delete(v104);
    quasar::MetaInfo::update((quasar::MetaInfo::Impl **)&v121.__end_[-1].__r_.__value_.__r.__words[2], (const quasar::PTree *)v128);
    quasar::PTree::~PTree((quasar::PTree *)v128);
    if (v108)
    {
      v109 = (float *)v108;
      operator delete(v108);
    }
    v128[0] = v111;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v128);
    if (v112)
    {
      v113 = v112;
      operator delete(v112);
    }
    if (v115)
    {
      v116 = (char *)v115;
      operator delete(v115);
    }
    v128[0] = &v118;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v128);
    v29 = v98 + 1;
  }
  quasar::ProcessingBlock::send((uint64_t)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), (uint64_t)&v121, 0);
  v128[0] = &v121;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)v128);
  v128[0] = &v122;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v128);
  v128[0] = &v123;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v128);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1AD803630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a69);
  JUMPOUT(0x1AD80367CLL);
}

void sub_1AD8036B0(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1AD803738);
}

void sub_1AD8036C0()
{
  JUMPOUT(0x1AD8036D8);
}

void sub_1AD8036D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  void *a65;
  uint64_t a66;
  uint64_t a69;

  if (__p)
    operator delete(__p);
  a69 = (uint64_t)&a52;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a69);
  a69 = (uint64_t)&a55;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&a69);
  a69 = (uint64_t)&a59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a69);
  a69 = (uint64_t)&a62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a69);
  if (a65)
  {
    a66 = (uint64_t)a65;
    operator delete(a65);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::MultiLangDecorator::Apply(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char *v14;
  char *v15;
  char *v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  char **v27;
  void *__p;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::string v34[12];

  if (!*(_BYTE *)a1)
  {
    v9 = *(unsigned __int8 *)(a3 + 23);
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a3 + 8);
    if (v9)
    {
      if (kaldi::g_kaldi_verbose_level < 5)
        goto LABEL_36;
    }
    else
    {
      v24 = *(unsigned __int8 *)(a4 + 23);
      if ((v24 & 0x80u) != 0)
        v24 = *(_QWORD *)(a4 + 8);
      if (v24)
        v25 = kaldi::g_kaldi_verbose_level < 5;
      else
        v25 = 1;
      if (v25)
        goto LABEL_36;
    }
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v34, 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"model does not require the use of src/tar tags", 46);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v34);
LABEL_36:
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)a6, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    return;
  }
  if (*(_DWORD *)(a1 + 4) == 3)
  {
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)a6, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  }
  else
  {
    if (!a5)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v34, "Apply tags to ID sequence require a tag symbol table in MultiLangDecorator!");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v34);
    }
    kaldi::quasar::MultiLangDecorator::GetTags(a1, a3, a4, (uint64_t)v34);
    v31 = 0;
    v32 = 0;
    v33 = 0;
    kaldi::SplitStringToVector(v34, " ", 1, (uint64_t)&v31);
    v27 = (char **)a2;
    __p = 0;
    v29 = 0;
    v30 = 0;
    v11 = v31;
    v12 = v32;
    if (v31 == v32)
    {
      v15 = 0;
    }
    else
    {
      do
      {
        v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 96))(a5, v11) - 1;
        v14 = v29;
        if ((unint64_t)v29 >= v30)
        {
          v16 = (char *)__p;
          v17 = (v29 - (_BYTE *)__p) >> 2;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v19 = v30 - (_QWORD)__p;
          if ((uint64_t)(v30 - (_QWORD)__p) >> 1 > v18)
            v18 = v19 >> 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v30, v20);
            v16 = (char *)__p;
            v14 = v29;
          }
          else
          {
            v21 = 0;
          }
          v22 = &v21[4 * v17];
          *(_DWORD *)v22 = v13;
          v15 = v22 + 4;
          while (v14 != v16)
          {
            v23 = *((_DWORD *)v14 - 1);
            v14 -= 4;
            *((_DWORD *)v22 - 1) = v23;
            v22 -= 4;
          }
          __p = v22;
          v29 = v15;
          v30 = (unint64_t)&v21[4 * v20];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *(_DWORD *)v29 = v13;
          v15 = v14 + 4;
        }
        v29 = v15;
        v11 += 24;
      }
      while (v11 != v12);
    }
    *(_QWORD *)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    *(_QWORD *)(a6 + 16) = 0;
    if ((*(_DWORD *)(a1 + 4) | 2) == 2)
    {
      std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)a6, 0, (char *)__p, v15, (v15 - (_BYTE *)__p) >> 2);
      v26 = *(_QWORD *)(a6 + 8);
    }
    else
    {
      v26 = 0;
    }
    std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)a6, v26, *v27, v27[1], (v27[1] - *v27) >> 2);
    if ((*(_DWORD *)(a1 + 4) - 1) <= 1)
      std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)a6, *(_QWORD *)(a6 + 8), (char *)__p, v29, (v29 - (_BYTE *)__p) >> 2);
    if (__p)
    {
      v29 = (char *)__p;
      operator delete(__p);
    }
    __p = &v31;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (SHIBYTE(v34[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34[0].__r_.__value_.__l.__data_);
  }
}

void kaldi::quasar::MultiLangDecorator::Apply(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  int v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  const std::string::value_type *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  const std::string::value_type *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  void *v31;
  uint64_t v32;
  unsigned __int8 v33;
  _QWORD v34[2];
  _QWORD v35[11];
  char v36;
  uint64_t v37;

  if (!*(_BYTE *)a1)
  {
    v16 = *(unsigned __int8 *)(a3 + 23);
    if ((v16 & 0x80u) != 0)
      v16 = *(_QWORD *)(a3 + 8);
    if (v16)
    {
      if (kaldi::g_kaldi_verbose_level < 5)
      {
LABEL_56:
        if (*(char *)(a2 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(a5, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)&a5->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
          a5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
        }
        return;
      }
    }
    else
    {
      v29 = *(unsigned __int8 *)(a4 + 23);
      if ((v29 & 0x80u) != 0)
        v29 = *(_QWORD *)(a4 + 8);
      if (v29)
        v30 = kaldi::g_kaldi_verbose_level < 5;
      else
        v30 = 1;
      if (v30)
        goto LABEL_56;
    }
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v34, 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"model does not require the use of src/tar tags", 46);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v34);
    goto LABEL_56;
  }
  kaldi::quasar::MultiLangDecorator::GetTags(a1, a3, a4, (uint64_t)&v31);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v34);
  v8 = *(_DWORD *)(a1 + 4);
  if (v8)
  {
    if (v8 == 1)
    {
      v12 = v35;
      v17 = *(char *)(a2 + 23);
      if (v17 >= 0)
        v14 = (const std::string::value_type *)a2;
      else
        v14 = *(const std::string::value_type **)a2;
      if (v17 >= 0)
        v15 = *(unsigned __int8 *)(a2 + 23);
      else
        v15 = *(_QWORD *)(a2 + 8);
      goto LABEL_28;
    }
    if (v8 == 2)
    {
      if ((v33 & 0x80u) == 0)
        v9 = &v31;
      else
        v9 = v31;
      if ((v33 & 0x80u) == 0)
        v10 = v33;
      else
        v10 = v32;
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v9, v10);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
      v13 = *(char *)(a2 + 23);
      if (v13 >= 0)
        v14 = (const std::string::value_type *)a2;
      else
        v14 = *(const std::string::value_type **)a2;
      if (v13 >= 0)
        v15 = *(unsigned __int8 *)(a2 + 23);
      else
        v15 = *(_QWORD *)(a2 + 8);
LABEL_28:
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
      v20 = v33;
      v21 = v32;
      v22 = (v33 & 0x80u) != 0;
      if ((v33 & 0x80u) == 0)
        v23 = (const std::string::value_type *)&v31;
      else
        v23 = (const std::string::value_type *)v31;
      goto LABEL_42;
    }
    v19 = v35;
  }
  else
  {
    if ((v33 & 0x80u) == 0)
      v24 = &v31;
    else
      v24 = v31;
    if ((v33 & 0x80u) == 0)
      v25 = v33;
    else
      v25 = v32;
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v24, v25);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" ", 1);
  }
  v20 = *(unsigned __int8 *)(a2 + 23);
  v21 = *(_QWORD *)(a2 + 8);
  v22 = (v20 & 0x80u) != 0;
  if ((v20 & 0x80u) == 0)
    v23 = (const std::string::value_type *)a2;
  else
    v23 = *(const std::string::value_type **)a2;
LABEL_42:
  if (v22)
    v27 = v21;
  else
    v27 = v20;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v23, v27);
  std::stringbuf::str();
  v34[0] = *MEMORY[0x1E0DE4F50];
  v28 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v35[0] = v28;
  v35[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v36 < 0)
    operator delete((void *)v35[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](&v37);
  if ((char)v33 < 0)
    operator delete(v31);
}

void sub_1AD803DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a15);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'quasar::PDecForceAlignBlock::processBody(quasar::PDecForceAlignBlock *this)
{
  quasar::PDecForceAlignBlock::processBody((quasar::PDecForceAlignBlock *)((char *)this - 2296));
}

void quasar::PDecForceAlignBlock::setContextProvider(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = (std::__shared_weak_count *)a2[1];
  v17 = *a2;
  v18 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  quasar::ConfiguredProcessingBlock<quasar::PDecForceAlignOptions>::setContextProvider(a1, &v17);
  v7 = v18;
  if (v18)
  {
    v8 = (unint64_t *)&v18->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(_QWORD *)(*a2 + 24);
  *(_QWORD *)&v16 = *(_QWORD *)(*a2 + 16);
  *((_QWORD *)&v16 + 1) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 2472, &v16);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1AD803EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::ConfiguredProcessingBlock<quasar::PDecForceAlignOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15;
  uint64_t *v16;

  v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  (**v3)(&v15);
  v4 = v15;
  v5 = v16;
  if (v15 != v16)
  {
    do
    {
      v6 = *v4;
      v7 = a2[1];
      v13 = *a2;
      v14 = (std::__shared_weak_count *)v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      quasar::OptionValueBase::setContextProvider(v6, &v13);
      v10 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      ++v4;
    }
    while (v4 != v5);
    v4 = v15;
  }
  if (v4)
  {
    v16 = v4;
    operator delete(v4);
  }
}

void sub_1AD803FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void `virtual thunk to'quasar::PDecForceAlignBlock::setContextProvider(_QWORD *a1, _QWORD *a2)
{
  quasar::PDecForceAlignBlock::setContextProvider((uint64_t)a1 + *(_QWORD *)(*a1 - 72), a2);
}

uint64_t quasar::PDecForceAlignBlock::minConfigVersion(quasar::PDecForceAlignBlock *this)
{
  return 162;
}

uint64_t `virtual thunk to'quasar::PDecForceAlignBlock::minConfigVersion(quasar::PDecForceAlignBlock *this)
{
  return 162;
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::PDecForceAlignOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::PDecForceAlignOptions>::setContextProvider(_QWORD *a1, uint64_t *a2)
{
  quasar::ConfiguredProcessingBlock<quasar::PDecForceAlignOptions>::setContextProvider((uint64_t)a1 + *(_QWORD *)(*a1 - 72), a2);
}

uint64_t `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::PDecForceAlignOptions>::getOptions(_QWORD *a1)
{
  return (uint64_t)a1 + *(_QWORD *)(*a1 - 104) + 8;
}

void quasar::PDecForceAlignBlock::~PDecForceAlignBlock(quasar::PDecForceAlignBlock *this)
{
  uint64_t v1;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 2488));
}

{
  uint64_t v1;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 2488));
  JUMPOUT(0x1AF44D190);
}

const char *quasar::PDecForceAlignBlock::blockType(quasar::PDecForceAlignBlock *this)
{
  return "PDecForceAlignBlock";
}

_QWORD *quasar::PDecForceAlignBlock::inputs@<X0>(quasar::PDecForceAlignBlock *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = operator new(0x10uLL);
  a2[1] = result + 2;
  a2[2] = result + 2;
  *result = (char *)this + 2304;
  result[1] = (char *)this + 2360;
  *a2 = result;
  return result;
}

_QWORD *`non-virtual thunk to'quasar::PDecForceAlignBlock::inputs@<X0>(quasar::PDecForceAlignBlock *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = operator new(0x10uLL);
  a2[1] = result + 2;
  a2[2] = result + 2;
  *result = (char *)this + 8;
  result[1] = (char *)this + 64;
  *a2 = result;
  return result;
}

void `non-virtual thunk to'quasar::PDecForceAlignBlock::~PDecForceAlignBlock(char **this)
{
  quasar::ProcessingBlock::~ProcessingBlock(this + 24);
}

{
  quasar::ProcessingBlock::~ProcessingBlock(this + 24);
  JUMPOUT(0x1AF44D190);
}

void `virtual thunk to'quasar::PDecForceAlignBlock::~PDecForceAlignBlock(quasar::PDecForceAlignBlock *this)
{
  uint64_t v1;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 2488));
}

{
  char **v1;

  v1 = (char **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  quasar::ProcessingBlock::~ProcessingBlock(v1 + 311);
  JUMPOUT(0x1AF44D190);
}

const char *`virtual thunk to'quasar::PDecForceAlignBlock::blockType(quasar::PDecForceAlignBlock *this)
{
  return "PDecForceAlignBlock";
}

kaldi::quasar::TranslationUtil::NbestElement *kaldi::quasar::TranslationUtil::NbestElement::NbestElement(kaldi::quasar::TranslationUtil::NbestElement *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(int32x4_t *)((char *)this + 24) = vdupq_n_s32(0x7F800000u);
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 8, "{}");
  *((_BYTE *)this + 88) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_BYTE *)this + 240) = 0;
  *((_QWORD *)this + 31) = (char *)this + 256;
  return this;
}

void sub_1AD8042F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)(v4 - 240));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void kaldi::quasar::TranslationUtil::PathElement::~PathElement(kaldi::quasar::TranslationUtil::PathElement *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void **v8;

  v2 = (void *)*((_QWORD *)this + 26);
  if (v2)
  {
    *((_QWORD *)this + 27) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 23);
  if (v3)
  {
    *((_QWORD *)this + 24) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 20);
  if (v4)
  {
    *((_QWORD *)this + 21) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 17);
  if (v5)
  {
    *((_QWORD *)this + 18) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 14);
  if (v6)
  {
    *((_QWORD *)this + 15) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 11);
  if (v7)
  {
    *((_QWORD *)this + 12) = v7;
    operator delete(v7);
  }
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  v8 = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(kaldi::quasar::TranslationUtil::NbestElement *this)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  std::__tree<std::string>::destroy((uint64_t)this + 248, *((char **)this + 32));
  v2 = (void *)*((_QWORD *)this + 27);
  if (v2)
  {
    *((_QWORD *)this + 28) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 24);
  if (v3)
  {
    *((_QWORD *)this + 25) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 21);
  if (v4)
  {
    *((_QWORD *)this + 22) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  v5 = (void **)this;
  std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100](&v5);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<quasar::PDecForceAlignBlock::init(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::__variant_detail::_Trait<kaldi::Encdec>> &>(uint64_t **a1, _QWORD **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *size;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::string __p;
  std::string v13;

  v3 = (*a1)[1];
  v4 = (*a1)[2];
  v5 = **a1;
  quasar::OptionValue<std::string>::value((_QWORD *)(v4 + 632));
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SelectModel(a2, v5, v3, &v13);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v4 + 2456, (__int128 *)&v13);
  size = (std::__shared_weak_count *)v13.__r_.__value_.__l.__size_;
  if (v13.__r_.__value_.__l.__size_)
  {
    v7 = (unint64_t *)(v13.__r_.__value_.__l.__size_ + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v9 = *a2;
  if (*((char *)*a2 + 3951) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, (const std::string::value_type *)v9[491], v9[492]);
    v9 = *a2;
  }
  else
  {
    v13 = *(std::string *)(v9 + 491);
  }
  if (*((char *)v9 + 3975) < 0)
    std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v9[494], v9[495]);
  else
    __p = *(std::string *)(v9 + 494);
  v10 = kaldi::quasar::ToAddTag((uint64_t)&v13);
  kaldi::quasar::ToTagFormat(&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return (v10 << 32) | 1;
}

void sub_1AD804630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<quasar::PDecForceAlignBlock::init(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::__variant_detail::_Trait<kaldi::Encdec>> &>(std::string::size_type **a1, uint64_t *a2)
{
  std::string::size_type v3;
  std::string::size_type v4;
  std::string::size_type v5;
  std::__shared_weak_count *size;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string __p;
  std::string v13;

  v3 = (*a1)[1];
  v4 = (*a1)[2];
  v5 = **a1;
  quasar::OptionValue<std::string>::value((_QWORD *)(v4 + 632));
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::SelectModel(a2, v5, v3, 0, &v13);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v4 + 2456, (__int128 *)&v13);
  size = (std::__shared_weak_count *)v13.__r_.__value_.__l.__size_;
  if (v13.__r_.__value_.__l.__size_)
  {
    v7 = (unint64_t *)(v13.__r_.__value_.__l.__size_ + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v9 = *a2;
  if (*(char *)(*a2 + 2407) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)(v9 + 2384), *(_QWORD *)(v9 + 2392));
    v9 = *a2;
  }
  else
  {
    v13 = *(std::string *)(v9 + 2384);
  }
  if (*(char *)(v9 + 2431) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v9 + 2408), *(_QWORD *)(v9 + 2416));
  else
    __p = *(std::string *)(v9 + 2408);
  v10 = kaldi::quasar::ToAddTag((uint64_t)&v13);
  kaldi::quasar::ToTagFormat(&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return (v10 << 32) | 1;
}

void sub_1AD8047B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SelectModel(_QWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  int64_t v39;
  uint64_t v40;
  _BYTE *v41;
  void *v42;
  _BYTE *v43;
  std::string::size_type v44;
  char v45;
  int64_t v46;
  uint64_t v47;
  _BYTE *v48;
  void *v49;
  _BYTE *v50;
  std::string::size_type v51;
  _QWORD *v52;
  std::string *v53;
  std::string::size_type size;
  _QWORD *v55;
  _QWORD *v56;
  std::string *v57;
  std::string::size_type v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  std::string *v63;
  std::string::size_type v64;
  _QWORD *v65;
  _QWORD *v66;
  std::string *v67;
  std::string::size_type v68;
  _QWORD *v69;
  std::string *v70;
  std::string::size_type v71;
  _QWORD *v72;
  _QWORD *v73;
  std::string *v74;
  std::string::size_type v75;
  _QWORD *v76;
  std::string v77;
  std::string v78;
  __int128 v79[17];

  v6 = (uint64_t)*a1;
  if (*(_BYTE *)(v6 + 3924))
  {
    v8 = *(unsigned __int8 *)(a3 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_QWORD *)(a3 + 8);
    if (!v8)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v79);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v79, "No tar tag specified but required by model!");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v79);
    }
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v79, 3);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"Select models for ", 18);
      v11 = *(char *)(a2 + 23);
      if (v11 >= 0)
        v12 = a2;
      else
        v12 = *(_QWORD *)a2;
      if (v11 >= 0)
        v13 = *(unsigned __int8 *)(a2 + 23);
      else
        v13 = *(_QWORD *)(a2 + 8);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"-", 1);
      v16 = *(char *)(a3 + 23);
      if (v16 >= 0)
        v17 = a3;
      else
        v17 = *(_QWORD *)a3;
      if (v16 >= 0)
        v18 = *(unsigned __int8 *)(a3 + 23);
      else
        v18 = *(_QWORD *)(a3 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v79);
      v6 = (uint64_t)*a1;
    }
    kaldi::quasar::TorchEncoderDecoder::SelectModel((_QWORD *)v6, (__int128 *)a3, a4);
    if (*a4)
    {
      if (kaldi::g_kaldi_verbose_level >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v79, 3);
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"Selected: ", 10);
        v20 = *(char *)(a2 + 23);
        if (v20 >= 0)
          v21 = a2;
        else
          v21 = *(_QWORD *)a2;
        if (v20 >= 0)
          v22 = *(unsigned __int8 *)(a2 + 23);
        else
          v22 = *(_QWORD *)(a2 + 8);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"-", 1);
        v25 = *(char *)(a3 + 23);
        if (v25 >= 0)
          v26 = a3;
        else
          v26 = *(_QWORD *)a3;
        if (v25 >= 0)
          v27 = *(unsigned __int8 *)(a3 + 23);
        else
          v27 = *(_QWORD *)(a3 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v79);
      }
    }
    else
    {
      if (kaldi::g_kaldi_verbose_level >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v79, 3);
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"Models for ", 11);
        v29 = *(char *)(a2 + 23);
        if (v29 >= 0)
          v30 = a2;
        else
          v30 = *(_QWORD *)a2;
        if (v29 >= 0)
          v31 = *(unsigned __int8 *)(a2 + 23);
        else
          v31 = *(_QWORD *)(a2 + 8);
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
        v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"-", 1);
        v34 = *(char *)(a3 + 23);
        if (v34 >= 0)
          v35 = a3;
        else
          v35 = *(_QWORD *)a3;
        if (v34 >= 0)
          v36 = *(unsigned __int8 *)(a3 + 23);
        else
          v36 = *(_QWORD *)(a3 + 8);
        v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" not found", 10);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v79);
      }
      v38 = *(_BYTE *)(a2 + 23);
      if (v38 >= 0)
        v39 = *(unsigned __int8 *)(a2 + 23);
      else
        v39 = *(_QWORD *)(a2 + 8);
      if (v38 >= 0)
        v40 = a2;
      else
        v40 = *(_QWORD *)a2;
      v41 = (_BYTE *)(v40 + v39);
      if (v39 >= 1)
      {
        v42 = (void *)v40;
        do
        {
          v43 = memchr(v42, 95, v39);
          if (!v43)
            break;
          if (*v43 == 95)
            goto LABEL_61;
          v42 = v43 + 1;
          v39 = v41 - (_BYTE *)v42;
        }
        while (v41 - (_BYTE *)v42 > 0);
      }
      v43 = v41;
LABEL_61:
      if (v43 == v41)
        v44 = -1;
      else
        v44 = (std::string::size_type)&v43[-v40];
      std::string::basic_string(&v78, (const std::string *)a2, 0, v44, (std::allocator<char> *)v79);
      v45 = *(_BYTE *)(a3 + 23);
      if (v45 >= 0)
        v46 = *(unsigned __int8 *)(a3 + 23);
      else
        v46 = *(_QWORD *)(a3 + 8);
      if (v45 >= 0)
        v47 = a3;
      else
        v47 = *(_QWORD *)a3;
      v48 = (_BYTE *)(v47 + v46);
      if (v46 >= 1)
      {
        v49 = (void *)v47;
        do
        {
          v50 = memchr(v49, 95, v46);
          if (!v50)
            break;
          if (*v50 == 95)
            goto LABEL_76;
          v49 = v50 + 1;
          v46 = v48 - (_BYTE *)v49;
        }
        while (v48 - (_BYTE *)v49 > 0);
      }
      v50 = v48;
LABEL_76:
      if (v50 == v48)
        v51 = -1;
      else
        v51 = (std::string::size_type)&v50[-v47];
      std::string::basic_string(&v77, (const std::string *)a3, 0, v51, (std::allocator<char> *)v79);
      if (kaldi::g_kaldi_verbose_level >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v79, 3);
        v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"Try to find models for ", 23);
        if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = &v78;
        else
          v53 = (std::string *)v78.__r_.__value_.__r.__words[0];
        if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v78.__r_.__value_.__r.__words[2]);
        else
          size = v78.__r_.__value_.__l.__size_;
        v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, size);
        v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"-", 1);
        if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v57 = &v77;
        else
          v57 = (std::string *)v77.__r_.__value_.__r.__words[0];
        if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v58 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
        else
          v58 = v77.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v57, v58);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v79);
      }
      kaldi::quasar::TorchEncoderDecoder::SelectModel(*a1, (__int128 *)&v77, v79);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a4, v79);
      v59 = (std::__shared_weak_count *)*((_QWORD *)&v79[0] + 1);
      if (*((_QWORD *)&v79[0] + 1))
      {
        v60 = (unint64_t *)(*((_QWORD *)&v79[0] + 1) + 8);
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      if (!*a4)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v79);
        v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"Models for ", 11);
        if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v70 = &v78;
        else
          v70 = (std::string *)v78.__r_.__value_.__r.__words[0];
        if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v71 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
        else
          v71 = v78.__r_.__value_.__l.__size_;
        v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v70, v71);
        v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"-", 1);
        if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v74 = &v77;
        else
          v74 = (std::string *)v77.__r_.__value_.__r.__words[0];
        if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v75 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
        else
          v75 = v77.__r_.__value_.__l.__size_;
        v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)v74, v75);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" not found!", 11);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v79);
      }
      if (kaldi::g_kaldi_verbose_level >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v79, 3);
        v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"Selected: ", 10);
        if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v63 = &v78;
        else
          v63 = (std::string *)v78.__r_.__value_.__r.__words[0];
        if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v64 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
        else
          v64 = v78.__r_.__value_.__l.__size_;
        v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)v63, v64);
        v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"-", 1);
        if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v67 = &v77;
        else
          v67 = (std::string *)v77.__r_.__value_.__r.__words[0];
        if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v68 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
        else
          v68 = v77.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, v68);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v79);
      }
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
}

void sub_1AD804D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  JUMPOUT(0x1AD804D84);
}

void sub_1AD804DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  JUMPOUT(0x1AD804DB8);
}

void sub_1AD804DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  JUMPOUT(0x1AD804DD0);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::SelectModel(uint64_t *a1@<X0>, std::string::size_type a2@<X1>, std::string::size_type a3@<X2>, int a4@<W4>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v9;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char v40;
  int64_t v41;
  std::string::size_type v42;
  _BYTE *v43;
  void *v44;
  _BYTE *v45;
  std::string::size_type v46;
  char v47;
  int64_t v48;
  std::string::size_type v49;
  _BYTE *v50;
  void *v51;
  _BYTE *v52;
  std::string::size_type v53;
  _QWORD *v54;
  std::string *v55;
  std::string::size_type size;
  _QWORD *v57;
  _QWORD *v58;
  std::string *v59;
  std::string::size_type v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  std::string *v65;
  std::string::size_type v66;
  _QWORD *v67;
  _QWORD *v68;
  std::string *v69;
  std::string::size_type v70;
  _QWORD *v71;
  std::string *v72;
  std::string::size_type v73;
  _QWORD *v74;
  _QWORD *v75;
  std::string *v76;
  std::string::size_type v77;
  _QWORD *v78;
  std::string v79;
  std::string v80;
  __int128 v81[17];

  v7 = *a1;
  if (*(_QWORD *)(v7 + 408))
  {
    v9 = *(unsigned __int8 *)(a3 + 23);
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a3 + 8);
    if (!v9)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v81);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v81, "No tar tag specified but required by model!");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v81);
    }
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v81, 3);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"Select models for ", 18);
      v13 = *(char *)(a2 + 23);
      if (v13 >= 0)
        v14 = a2;
      else
        v14 = *(_QWORD *)a2;
      if (v13 >= 0)
        v15 = *(unsigned __int8 *)(a2 + 23);
      else
        v15 = *(_QWORD *)(a2 + 8);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"-", 1);
      v18 = *(char *)(a3 + 23);
      if (v18 >= 0)
        v19 = a3;
      else
        v19 = *(_QWORD *)a3;
      if (v18 >= 0)
        v20 = *(unsigned __int8 *)(a3 + 23);
      else
        v20 = *(_QWORD *)(a3 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v81);
      v7 = *a1;
    }
    kaldi::quasar::Encdec::SelectModel(v7, a2, a3, a4, a5);
    if (*a5)
    {
      if (kaldi::g_kaldi_verbose_level >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v81, 3);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"Selected: ", 10);
        v22 = *(char *)(a2 + 23);
        if (v22 >= 0)
          v23 = a2;
        else
          v23 = *(_QWORD *)a2;
        if (v22 >= 0)
          v24 = *(unsigned __int8 *)(a2 + 23);
        else
          v24 = *(_QWORD *)(a2 + 8);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"-", 1);
        v27 = *(char *)(a3 + 23);
        if (v27 >= 0)
          v28 = a3;
        else
          v28 = *(_QWORD *)a3;
        if (v27 >= 0)
          v29 = *(unsigned __int8 *)(a3 + 23);
        else
          v29 = *(_QWORD *)(a3 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v81);
      }
    }
    else
    {
      if (kaldi::g_kaldi_verbose_level >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v81, 3);
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"Models for ", 11);
        v31 = *(char *)(a2 + 23);
        if (v31 >= 0)
          v32 = a2;
        else
          v32 = *(_QWORD *)a2;
        if (v31 >= 0)
          v33 = *(unsigned __int8 *)(a2 + 23);
        else
          v33 = *(_QWORD *)(a2 + 8);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"-", 1);
        v36 = *(char *)(a3 + 23);
        if (v36 >= 0)
          v37 = a3;
        else
          v37 = *(_QWORD *)a3;
        if (v36 >= 0)
          v38 = *(unsigned __int8 *)(a3 + 23);
        else
          v38 = *(_QWORD *)(a3 + 8);
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v37, v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" not found", 10);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v81);
      }
      v40 = *(_BYTE *)(a2 + 23);
      if (v40 >= 0)
        v41 = *(unsigned __int8 *)(a2 + 23);
      else
        v41 = *(_QWORD *)(a2 + 8);
      if (v40 >= 0)
        v42 = a2;
      else
        v42 = *(_QWORD *)a2;
      v43 = (_BYTE *)(v42 + v41);
      if (v41 >= 1)
      {
        v44 = (void *)v42;
        do
        {
          v45 = memchr(v44, 95, v41);
          if (!v45)
            break;
          if (*v45 == 95)
            goto LABEL_61;
          v44 = v45 + 1;
          v41 = v43 - (_BYTE *)v44;
        }
        while (v43 - (_BYTE *)v44 > 0);
      }
      v45 = v43;
LABEL_61:
      if (v45 == v43)
        v46 = -1;
      else
        v46 = (std::string::size_type)&v45[-v42];
      std::string::basic_string(&v80, (const std::string *)a2, 0, v46, (std::allocator<char> *)v81);
      v47 = *(_BYTE *)(a3 + 23);
      if (v47 >= 0)
        v48 = *(unsigned __int8 *)(a3 + 23);
      else
        v48 = *(_QWORD *)(a3 + 8);
      if (v47 >= 0)
        v49 = a3;
      else
        v49 = *(_QWORD *)a3;
      v50 = (_BYTE *)(v49 + v48);
      if (v48 >= 1)
      {
        v51 = (void *)v49;
        do
        {
          v52 = memchr(v51, 95, v48);
          if (!v52)
            break;
          if (*v52 == 95)
            goto LABEL_76;
          v51 = v52 + 1;
          v48 = v50 - (_BYTE *)v51;
        }
        while (v50 - (_BYTE *)v51 > 0);
      }
      v52 = v50;
LABEL_76:
      if (v52 == v50)
        v53 = -1;
      else
        v53 = (std::string::size_type)&v52[-v49];
      std::string::basic_string(&v79, (const std::string *)a3, 0, v53, (std::allocator<char> *)v81);
      if (kaldi::g_kaldi_verbose_level >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v81, 3);
        v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"Try to find models for ", 23);
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v55 = &v80;
        else
          v55 = (std::string *)v80.__r_.__value_.__r.__words[0];
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v80.__r_.__value_.__r.__words[2]);
        else
          size = v80.__r_.__value_.__l.__size_;
        v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v55, size);
        v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"-", 1);
        if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v59 = &v79;
        else
          v59 = (std::string *)v79.__r_.__value_.__r.__words[0];
        if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v60 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
        else
          v60 = v79.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)v59, v60);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v81);
      }
      kaldi::quasar::Encdec::SelectModel(*a1, (std::string::size_type)&v80, (std::string::size_type)&v79, a4, v81);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a5, v81);
      v61 = (std::__shared_weak_count *)*((_QWORD *)&v81[0] + 1);
      if (*((_QWORD *)&v81[0] + 1))
      {
        v62 = (unint64_t *)(*((_QWORD *)&v81[0] + 1) + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      if (!*a5)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v81);
        v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"Models for ", 11);
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v72 = &v80;
        else
          v72 = (std::string *)v80.__r_.__value_.__r.__words[0];
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v73 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
        else
          v73 = v80.__r_.__value_.__l.__size_;
        v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v72, v73);
        v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"-", 1);
        if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v76 = &v79;
        else
          v76 = (std::string *)v79.__r_.__value_.__r.__words[0];
        if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v77 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
        else
          v77 = v79.__r_.__value_.__l.__size_;
        v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)v76, v77);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)" not found!", 11);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v81);
      }
      if (kaldi::g_kaldi_verbose_level >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v81, 3);
        v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"Selected: ", 10);
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v65 = &v80;
        else
          v65 = (std::string *)v80.__r_.__value_.__r.__words[0];
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v66 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
        else
          v66 = v80.__r_.__value_.__l.__size_;
        v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v65, v66);
        v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"-", 1);
        if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v69 = &v79;
        else
          v69 = (std::string *)v79.__r_.__value_.__r.__words[0];
        if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v70 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
        else
          v70 = v79.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)v69, v70);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v81);
      }
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
  }
}

void sub_1AD805368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  JUMPOUT(0x1AD805378);
}

void sub_1AD80539C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  JUMPOUT(0x1AD8053ACLL);
}

void sub_1AD8053B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  JUMPOUT(0x1AD8053C4);
}

void kaldi::quasar::Encdec::SelectModel(uint64_t a1@<X0>, std::string::size_type a2@<X1>, std::string::size_type a3@<X2>, int a4@<W4>, _QWORD *a5@<X8>)
{
  _QWORD *v9;
  int v10;
  const std::string::value_type *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  char v25;
  std::__shared_weak_count *size;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  int v48;
  const std::string::value_type *v49;
  std::string::size_type v50;
  std::string *v51;
  __int128 v52;
  uint64_t *v53;
  _QWORD *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  std::string::size_type v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  _OWORD *v75;
  uint64_t v76;
  _OWORD *v77;
  __int128 v78;
  unint64_t *v79;
  unint64_t v80;
  _QWORD *v81;
  std::string::size_type v82;
  uint64_t i;
  std::string *v84;
  char v85;
  std::string v86;
  std::string v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    if (kaldi::quasar::Encdec::SelectSubmodelsToCompile(a1, (const void **)a2, a3))
    {
      if (kaldi::g_kaldi_verbose_level >= 5)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v87, 5);
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"Selected langpair for compilation only: ", 40);
        v10 = *(char *)(a2 + 23);
        if (v10 >= 0)
          v11 = (const std::string::value_type *)a2;
        else
          v11 = *(const std::string::value_type **)a2;
        if (v10 >= 0)
          v12 = *(unsigned __int8 *)(a2 + 23);
        else
          v12 = *(_QWORD *)(a2 + 8);
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"-", 1);
        v15 = *(char *)(a3 + 23);
        if (v15 >= 0)
          v16 = a3;
        else
          v16 = *(_QWORD *)a3;
        if (v15 >= 0)
          v17 = *(unsigned __int8 *)(a3 + 23);
        else
          v17 = *(_QWORD *)(a3 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v87);
      }
      v18 = operator new(0x30uLL);
      v18[2] = 0;
      *v18 = &unk_1E5D454A0;
      v18[1] = 0;
      v18[4] = 0;
      v18[5] = 0;
      v18[3] = 0;
      *a5 = v18 + 3;
      a5[1] = v18;
      return;
    }
    goto LABEL_76;
  }
  v19 = *(_QWORD *)(a1 + 2240);
  if (v19)
    kaldi::quasar::Shortlist::LoadLanguagePair(v19);
  if (!kaldi::quasar::Encdec::LoadSubmodels(a1, a2, a3))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      *(_OWORD *)&v87.__r_.__value_.__l.__data_ = 0uLL;
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 184, (__int128 *)&v87);
      size = (std::__shared_weak_count *)v87.__r_.__value_.__l.__size_;
      if (v87.__r_.__value_.__l.__size_)
      {
        v27 = (unint64_t *)(v87.__r_.__value_.__l.__size_ + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      *(_OWORD *)&v87.__r_.__value_.__l.__data_ = 0uLL;
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 216, (__int128 *)&v87);
      v29 = (std::__shared_weak_count *)v87.__r_.__value_.__l.__size_;
      if (v87.__r_.__value_.__l.__size_)
      {
        v30 = (unint64_t *)(v87.__r_.__value_.__l.__size_ + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      *(_OWORD *)&v87.__r_.__value_.__l.__data_ = 0uLL;
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 232, (__int128 *)&v87);
      v32 = (std::__shared_weak_count *)v87.__r_.__value_.__l.__size_;
      if (!v87.__r_.__value_.__l.__size_)
        goto LABEL_76;
      v33 = (unint64_t *)(v87.__r_.__value_.__l.__size_ + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
    }
    else
    {
      v35 = *(_QWORD *)(a1 + 272);
      *(_OWORD *)&v87.__r_.__value_.__l.__data_ = 0uLL;
      v36 = *(std::__shared_weak_count **)(v35 + 64);
      if (v36)
      {
        v87.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v36);
        if (v87.__r_.__value_.__l.__size_)
          v87.__r_.__value_.__r.__words[0] = *(_QWORD *)(v35 + 56);
      }
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 184, (__int128 *)&v87);
      v37 = (std::__shared_weak_count *)v87.__r_.__value_.__l.__size_;
      if (v87.__r_.__value_.__l.__size_)
      {
        v38 = (unint64_t *)(v87.__r_.__value_.__l.__size_ + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      if (*(_QWORD *)(a1 + 312))
      {
        v40 = *(_QWORD *)(a1 + 296);
        *(_OWORD *)&v87.__r_.__value_.__l.__data_ = 0uLL;
        v41 = *(std::__shared_weak_count **)(v40 + 64);
        if (v41)
        {
          v87.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v41);
          if (v87.__r_.__value_.__l.__size_)
            v87.__r_.__value_.__r.__words[0] = *(_QWORD *)(v40 + 56);
        }
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 216, (__int128 *)&v87);
        v42 = (std::__shared_weak_count *)v87.__r_.__value_.__l.__size_;
        if (v87.__r_.__value_.__l.__size_)
        {
          v43 = (unint64_t *)(v87.__r_.__value_.__l.__size_ + 8);
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
      }
      if (!*(_QWORD *)(a1 + 336))
        goto LABEL_76;
      v45 = *(_QWORD *)(a1 + 320);
      *(_OWORD *)&v87.__r_.__value_.__l.__data_ = 0uLL;
      v46 = *(std::__shared_weak_count **)(v45 + 64);
      if (v46)
      {
        v87.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v46);
        if (v87.__r_.__value_.__l.__size_)
          v87.__r_.__value_.__r.__words[0] = *(_QWORD *)(v45 + 56);
      }
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 232, (__int128 *)&v87);
      v32 = (std::__shared_weak_count *)v87.__r_.__value_.__l.__size_;
      if (!v87.__r_.__value_.__l.__size_)
        goto LABEL_76;
      v47 = (unint64_t *)(v87.__r_.__value_.__l.__size_ + 8);
      do
        v34 = __ldaxr(v47);
      while (__stlxr(v34 - 1, v47));
    }
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
LABEL_76:
    *a5 = 0;
    a5[1] = 0;
    return;
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, 45, (uint64_t)&v87);
  v20 = *(char *)(a3 + 23);
  if (v20 >= 0)
    v21 = (const std::string::value_type *)a3;
  else
    v21 = *(const std::string::value_type **)a3;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(a3 + 23);
  else
    v22 = *(_QWORD *)(a3 + 8);
  v23 = std::string::append(&v87, v21, v22);
  v24 = v23->__r_.__value_.__r.__words[0];
  v86.__r_.__value_.__r.__words[0] = v23->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
  v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 959) < 0)
    operator delete(*(void **)(a1 + 936));
  *(_QWORD *)(a1 + 936) = v24;
  *(_QWORD *)(a1 + 944) = v86.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 951) = *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 7);
  *(_BYTE *)(a1 + 959) = v25;
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  if (*(_QWORD *)(a1 + 480))
  {
    if (*(_BYTE *)(a1 + 1521))
    {
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v87, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v87 = *(std::string *)a2;
    }
    else
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, 45, (uint64_t)&v86);
      v48 = *(char *)(a3 + 23);
      if (v48 >= 0)
        v49 = (const std::string::value_type *)a3;
      else
        v49 = *(const std::string::value_type **)a3;
      if (v48 >= 0)
        v50 = *(unsigned __int8 *)(a3 + 23);
      else
        v50 = *(_QWORD *)(a3 + 8);
      v51 = std::string::append(&v86, v49, v50);
      v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v87.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v86.__r_.__value_.__l.__data_);
    }
    v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
    v53 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 464), (const void **)&v87.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v86);
    std::string::operator=((std::string *)(a1 + 912), (const std::string *)(v53 + 7));
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v87.__r_.__value_.__l.__data_);
  }
  if (kaldi::g_kaldi_verbose_level >= 5)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v87, 5);
    v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"Selected and loaded langpair: ", 30);
    v55 = *(char *)(a2 + 23);
    if (v55 >= 0)
      v56 = a2;
    else
      v56 = *(_QWORD *)a2;
    if (v55 >= 0)
      v57 = *(unsigned __int8 *)(a2 + 23);
    else
      v57 = *(_QWORD *)(a2 + 8);
    v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, v56, v57);
    v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"-", 1);
    v60 = *(char *)(a3 + 23);
    if (v60 >= 0)
      v61 = a3;
    else
      v61 = *(_QWORD *)a3;
    if (v60 >= 0)
      v62 = *(unsigned __int8 *)(a3 + 23);
    else
      v62 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, v61, v62);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v87);
  }
  v63 = *(_QWORD *)(a1 + 160);
  v87.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 152);
  v87.__r_.__value_.__l.__size_ = v63;
  if (v63)
  {
    v64 = (unint64_t *)(v63 + 8);
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
  v66 = *(_QWORD *)(a1 + 192);
  v87.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 184);
  v88 = v66;
  if (v66)
  {
    v67 = (unint64_t *)(v66 + 8);
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
  v69 = *(_QWORD *)(a1 + 224);
  v89 = *(_QWORD *)(a1 + 216);
  v90 = v69;
  if (v69)
  {
    v70 = (unint64_t *)(v69 + 8);
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *(_QWORD *)(a1 + 240);
  v91 = *(_QWORD *)(a1 + 232);
  v92 = v72;
  if (v72)
  {
    v73 = (unint64_t *)(v72 + 8);
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
  }
  memset(&v86, 0, sizeof(v86));
  v84 = &v86;
  v85 = 0;
  v75 = operator new(0x40uLL);
  v76 = 0;
  v86.__r_.__value_.__r.__words[0] = (std::string::size_type)v75;
  v86.__r_.__value_.__l.__size_ = (std::string::size_type)v75;
  v86.__r_.__value_.__r.__words[2] = (std::string::size_type)(v75 + 4);
  v77 = v75;
  do
  {
    v78 = *((_OWORD *)&v87.__r_.__value_.__l.__data_ + v76);
    *v77 = v78;
    if (*((_QWORD *)&v78 + 1))
    {
      v79 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
      do
        v80 = __ldxr(v79);
      while (__stxr(v80 + 1, v79));
    }
    ++v76;
    ++v77;
  }
  while (v76 != 4);
  v86.__r_.__value_.__l.__size_ = (std::string::size_type)v77;
  v81 = operator new(0x30uLL);
  v81[2] = 0;
  *v81 = &unk_1E5D457B0;
  v81[1] = 0;
  v81[3] = v75;
  v82 = v86.__r_.__value_.__r.__words[2];
  v81[4] = v77;
  v81[5] = v82;
  memset(&v86, 0, sizeof(v86));
  *a5 = v81 + 3;
  a5[1] = v81;
  v84 = &v86;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
  for (i = 48; i != -16; i -= 16)
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v87 + i);
}

void sub_1AD805A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  size_t v5;
  uint64_t result;
  char *v7;
  const void *v8;
  char *v9;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  result = std::string::basic_string[abi:ne180100](a3, v5 + 1);
  if (*(char *)(result + 23) >= 0)
    v7 = (char *)result;
  else
    v7 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v8 = a1;
    else
      v8 = *a1;
    result = (uint64_t)memmove(v7, v8, v5);
  }
  v9 = &v7[v5];
  *v9 = a2;
  v9[1] = 0;
  return result;
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D454A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D454A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<std::string>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D457B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D457B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineItf>>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<quasar::PDecForceAlignBlock::processBody(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::__variant_detail::_Trait<kaldi::Encdec>> const&>(uint64_t a1, kaldi::quasar::TorchEncoderDecoder **a2)
{
  return kaldi::quasar::TorchEncoderDecoder::InputSymbols(*a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<quasar::PDecForceAlignBlock::processBody(void)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::__variant_detail::_Trait<kaldi::Encdec>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a2 + 552);
}

void kaldi::quasar::MultiLangDecorator::GetTags(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  std::string *v16;
  std::string::size_type v17;
  char v18;
  std::string::size_type v19;
  void *v20;
  std::string *v21;
  __int128 v22;
  int v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string *v26;
  __int128 v27;
  int v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  std::string::size_type v32;
  char v33;
  uint64_t v34;
  std::string v35;
  std::string v36;
  std::string v37;
  _QWORD v38[3];

  v38[2] = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a1 + 8);
  if ((v8 & 0xFFFFFFFE) == 2)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a2 + 8);
    if (v9)
    {
      v10 = *(unsigned __int8 *)(a3 + 23);
      if ((v10 & 0x80u) != 0)
        v10 = *(_QWORD *)(a3 + 8);
      if (v10)
        v11 = 1;
      else
        v11 = kaldi::g_kaldi_verbose_level <= -2;
      if (v11)
        goto LABEL_33;
    }
    else if (kaldi::g_kaldi_verbose_level < -1)
    {
      goto LABEL_33;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"A Both type TagFormat requires non-empty source and target tags", 63);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
    v8 = *(_DWORD *)(a1 + 8);
  }
  if (!v8)
  {
    v12 = *(unsigned __int8 *)(a2 + 23);
    if ((v12 & 0x80u) != 0)
      v12 = *(_QWORD *)(a2 + 8);
    if (v12)
      v13 = 1;
    else
      v13 = kaldi::g_kaldi_verbose_level <= -2;
    if (v13)
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      goto LABEL_34;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"SrcTag cannot be empty for TagFormat::Src", 41);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
    v8 = *(_DWORD *)(a1 + 8);
  }
  if (v8 != 1)
    goto LABEL_33;
  v14 = *(unsigned __int8 *)(a3 + 23);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a3 + 8);
  if (v14)
    v15 = 1;
  else
    v15 = kaldi::g_kaldi_verbose_level <= -2;
  if (!v15)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"TarTag cannot be empty for TagFormat::Tar", 41);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
    v8 = *(_DWORD *)(a1 + 8);
LABEL_33:
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    switch(v8)
    {
      case 0:
      case 1:
        goto LABEL_34;
      case 2:
        std::operator+<char>();
        v21 = std::string::append(&v35, "-");
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v37.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        v23 = *(char *)(a3 + 23);
        if (v23 >= 0)
          v24 = (const std::string::value_type *)a3;
        else
          v24 = *(const std::string::value_type **)a3;
        if (v23 >= 0)
          v25 = *(unsigned __int8 *)(a3 + 23);
        else
          v25 = *(_QWORD *)(a3 + 8);
        goto LABEL_51;
      case 3:
        std::operator+<char>();
        v26 = std::string::append(&v35, "> <tar-");
        v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v37.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        v28 = *(char *)(a3 + 23);
        if (v28 >= 0)
          v24 = (const std::string::value_type *)a3;
        else
          v24 = *(const std::string::value_type **)a3;
        if (v28 >= 0)
          v25 = *(unsigned __int8 *)(a3 + 23);
        else
          v25 = *(_QWORD *)(a3 + 8);
LABEL_51:
        v29 = std::string::append(&v37, v24, v25);
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v36.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        v31 = std::string::append(&v36, ">");
        v32 = v31->__r_.__value_.__r.__words[0];
        v38[0] = v31->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v38 + 7) = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
        v33 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(a4 + 23) < 0)
          operator delete(*(void **)a4);
        v34 = v38[0];
        *(_QWORD *)a4 = v32;
        *(_QWORD *)(a4 + 8) = v34;
        *(_QWORD *)(a4 + 15) = *(_QWORD *)((char *)v38 + 7);
        *(_BYTE *)(a4 + 23) = v33;
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v36.__r_.__value_.__l.__data_);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return;
        v20 = (void *)v35.__r_.__value_.__r.__words[0];
        break;
      default:
        MEMORY[0x1AF44C914](a4, "");
        return;
    }
    goto LABEL_59;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
LABEL_34:
  std::operator+<char>();
  v16 = std::string::append(&v36, ">");
  v17 = v16->__r_.__value_.__r.__words[0];
  v37.__r_.__value_.__r.__words[0] = v16->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v37.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
  v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  v19 = v37.__r_.__value_.__r.__words[0];
  *(_QWORD *)a4 = v17;
  *(_QWORD *)(a4 + 8) = v19;
  *(_QWORD *)(a4 + 15) = *(std::string::size_type *)((char *)v37.__r_.__value_.__r.__words + 7);
  *(_BYTE *)(a4 + 23) = v18;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
  {
    v20 = (void *)v36.__r_.__value_.__r.__words[0];
LABEL_59:
    operator delete(v20);
  }
}

void sub_1AD8060A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v22 - 73) < 0)
    operator delete(*(void **)(v22 - 96));
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<quasar::PDecForceAlignBlock::processBody(void)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::__variant_detail::_Trait<kaldi::Encdec>> const&>(uint64_t **a1, _QWORD **a2)
{
  kaldi::quasar::TorchEncoderDecoder::Start(*a2, (clockid_t)1u, **a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<quasar::PDecForceAlignBlock::processBody(void)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::__variant_detail::_Trait<kaldi::Encdec>> const&>(const std::string ***a1, uint64_t *a2)
{
  kaldi::quasar::Encdec::Start(*a2, 1, **a1);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<quasar::PDecForceAlignBlock::processBody(void)::$_2> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::__variant_detail::_Trait<kaldi::Encdec>> const&>(uint64_t *a1, _QWORD **a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v3 = *a1;
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SelectModel(a2, *(_QWORD *)(*a1 + 64), *(_QWORD *)(*a1 + 72), &v25);
  v4 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *a2;
  if (*(_BYTE *)(v3 + 88))
  {
    if (*((_BYTE *)*a2 + 3925))
    {
      kaldi::quasar::TMTools::AlignAndScore<kaldi::quasar::TorchEncoderDecoder>((uint64_t)v7, *(uint64_t **)(v3 + 16), *(_QWORD **)(v3 + 24), *(_QWORD *)(v3 + 32), *(uint64_t **)(v3 + 40), *(_QWORD *)(v3 + 48), *(unsigned __int8 *)(v3 + 56), *(_BYTE *)(v3 + 57), **(_BYTE **)(v3 + 80), *(_QWORD *)(v3 + 96), 1u);
      return;
    }
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
LABEL_14:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v8);
  }
  if (*((_BYTE *)*a2 + 3925))
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    goto LABEL_14;
  }
  kaldi::quasar::TMTools::AlignAndScore<kaldi::quasar::TorchEncoderDecoder>((uint64_t)v7, *(__int128 ***)v3, *(__int128 ***)(v3 + 8), *(_QWORD *)(v3 + 32), *(uint64_t **)(v3 + 40), *(_QWORD *)(v3 + 48), *(unsigned __int8 *)(v3 + 56), *(_BYTE *)(v3 + 57), **(_BYTE **)(v3 + 80), *(_QWORD *)(v3 + 96));
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<quasar::PDecForceAlignBlock::processBody(void)::$_2> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::__variant_detail::_Trait<kaldi::Encdec>> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v3 = *a1;
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::SelectModel(a2, *(_QWORD *)(*a1 + 64), *(_QWORD *)(*a1 + 72), 0, &v25);
  v4 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = *a2;
  if (*(_BYTE *)(v3 + 88))
  {
    if (*(_BYTE *)(*a2 + 2461))
    {
      kaldi::quasar::TMTools::AlignAndScore<kaldi::quasar::Encdec>(v7, *(uint64_t **)(v3 + 16), *(_QWORD **)(v3 + 24), *(_QWORD *)(v3 + 32), *(uint64_t **)(v3 + 40), *(_QWORD *)(v3 + 48), *(unsigned __int8 *)(v3 + 56), *(_BYTE *)(v3 + 57), **(_BYTE **)(v3 + 80), *(const std::string **)(v3 + 96), 1u);
      return;
    }
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
LABEL_14:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v8);
  }
  if (*(_BYTE *)(*a2 + 2461))
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    goto LABEL_14;
  }
  kaldi::quasar::TMTools::AlignAndScore<kaldi::quasar::Encdec>(v7, *(__int128 ***)v3, *(__int128 ***)(v3 + 8), *(_QWORD *)(v3 + 32), *(uint64_t **)(v3 + 40), *(_QWORD *)(v3 + 48), *(unsigned __int8 *)(v3 + 56), *(_BYTE *)(v3 + 57), **(_BYTE **)(v3 + 80), *(const std::string **)(v3 + 96));
}

void kaldi::quasar::TMTools::AlignAndScore<kaldi::quasar::TorchEncoderDecoder>(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7, char a8, char a9, uint64_t a10, unsigned __int8 a11)
{
  _QWORD *v18;
  void **v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  void **v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  float *v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  float v38;
  uint64_t v39;
  float v40;
  int SoftmaxIdx;
  float v43;
  int Type;
  float v45;
  float v46;
  unint64_t v47;
  float *v48;
  float *v49;
  float *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  float *v56;
  int v57;
  int v58;
  int v59;
  int BestAlignment;
  int v61;
  unint64_t v62;
  _DWORD *v63;
  _DWORD *v64;
  _DWORD *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  int v72;
  unint64_t v73;
  uint64_t v74;
  int32x2_t v76;
  float *v77;
  int32x2_t v78;
  __int128 v79;
  __int128 v80;
  char v81;
  int32x2_t v82;
  __int128 v83;
  __int128 v84;
  char v85;
  void *__p;
  void *v87;
  uint64_t v88;
  void **v89;
  uint64_t v90;
  uint64_t v91;

  v89 = 0;
  v90 = 0;
  v91 = 0;
  kaldi::JoinVectorToString<int>(a2, " ", (uint64_t)&v89);
  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 1);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Source symbol sequence : ", 25);
    if (v91 >= 0)
      v19 = (void **)&v89;
    else
      v19 = v89;
    if (v91 >= 0)
      v20 = HIBYTE(v91);
    else
      v20 = v90;
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" (length: ", 10);
    v22 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)")", 1);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  kaldi::JoinVectorToString<int>(a3, " ", (uint64_t)&v89);
  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 1);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Target symbol sequence : ", 25);
    if (v91 >= 0)
      v24 = (void **)&v89;
    else
      v24 = v89;
    if (v91 >= 0)
      v25 = HIBYTE(v91);
    else
      v25 = v90;
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" (length: ", 10);
    v27 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" excluding </s> symbol: ", 24);
    kaldi::quasar::TorchEncoderDecoder::EosTargetId((kaldi::quasar::TorchEncoderDecoder *)a1);
    v28 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)")", 1);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  v83 = 0u;
  v84 = 0u;
  v82 = (int32x2_t)&unk_1E5D34170;
  v85 = 0;
  kaldi::CuMatrix<float>::Resize(&v82, (unint64_t)(a2[1] - *a2) >> 2, 1, 0, 0);
  v29 = *a2;
  v30 = a2[1];
  v31 = v30 - *a2;
  if (v30 != *a2)
  {
    v32 = 0;
    v33 = v31 >> 2;
    v34 = (float *)v83;
    if (v33 <= 1)
      v33 = 1;
    v35 = 4 * (int)v84;
    do
    {
      *v34 = (float)(*(_DWORD *)(v29 + 4 * v32++) + a11 - 1);
      v34 = (float *)((char *)v34 + v35);
    }
    while (v33 != v32);
  }
  if ((a9 & 1) != 0)
    std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)(a1 + 3664), 0);
  kaldi::quasar::TorchEncoderDecoder::ResetHistoryState((kaldi::quasar::TorchEncoderDecoder *)a1, 1);
  kaldi::quasar::TorchEncoderDecoder::Start((_QWORD *)a1, _CLOCK_MONOTONIC_RAW, a10);
  kaldi::quasar::TorchEncoderDecoder::StartFeedforward(a1, (uint64_t)&v82, 0, 0);
  v79 = 0u;
  v80 = 0u;
  v78 = (int32x2_t)&unk_1E5D34170;
  v81 = 0;
  kaldi::CuMatrix<float>::CuMatrix(&v76, 1, 1, 0, 0, 0);
  v36 = kaldi::quasar::TorchEncoderDecoder::BosTargetId((kaldi::quasar::TorchEncoderDecoder *)a1);
  *v77 = (float)(v36 - 1);
  if (a3[1] - *a3 != -4)
  {
    v37 = 0;
    do
    {
      v38 = *v77;
      kaldi::quasar::TorchEncoderDecoder::Feedforward(a1, &v76, &v78, 0);
      if (v37 >= (uint64_t)(a3[1] - *a3) >> 2)
        v39 = kaldi::quasar::TorchEncoderDecoder::EosTargetId((kaldi::quasar::TorchEncoderDecoder *)a1)
            - 1;
      else
        v39 = *(_DWORD *)(*a3 + 4 * v37) + a11 - 1;
      *v77 = (float)(int)v39;
      if (a6)
      {
        if ((_DWORD)v39 != kaldi::quasar::TorchEncoderDecoder::EosTargetId((kaldi::quasar::TorchEncoderDecoder *)a1)
                          - 1
          || a7 != 0)
        {
          SoftmaxIdx = v39;
          if (*(_QWORD *)(a1 + 3664))
            SoftmaxIdx = kaldi::quasar::TorchEncoderDecoder::GetSoftmaxIdx((kaldi::quasar::Shortlist **)a1, v39);
          v43 = *(float *)(v79 + 4 * SoftmaxIdx);
          Type = quasar::getType((quasar *)a1, v40);
          v45 = logf(v43);
          if (!Type)
            v45 = v43;
          v46 = -v45;
          v48 = *(float **)(a6 + 8);
          v47 = *(_QWORD *)(a6 + 16);
          if ((unint64_t)v48 >= v47)
          {
            v50 = *(float **)a6;
            v51 = ((uint64_t)v48 - *(_QWORD *)a6) >> 2;
            v52 = v51 + 1;
            if ((unint64_t)(v51 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v53 = v47 - (_QWORD)v50;
            if (v53 >> 1 > v52)
              v52 = v53 >> 1;
            if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
              v54 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v54 = v52;
            if (v54)
            {
              v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a6 + 16, v54);
              v50 = *(float **)a6;
              v48 = *(float **)(a6 + 8);
            }
            else
            {
              v55 = 0;
            }
            v56 = (float *)&v55[4 * v51];
            *v56 = v46;
            v49 = v56 + 1;
            while (v48 != v50)
            {
              v57 = *((_DWORD *)v48-- - 1);
              *((_DWORD *)v56-- - 1) = v57;
            }
            *(_QWORD *)a6 = v56;
            *(_QWORD *)(a6 + 8) = v49;
            *(_QWORD *)(a6 + 16) = &v55[4 * v54];
            if (v50)
              operator delete(v50);
          }
          else
          {
            *v48 = v46;
            v49 = v48 + 1;
          }
          *(_QWORD *)(a6 + 8) = v49;
        }
      }
      if (*(_BYTE *)(a1 + 3923))
      {
        v58 = kaldi::quasar::TorchEncoderDecoder::BosTargetId((kaldi::quasar::TorchEncoderDecoder *)a1);
        v59 = (int)v38 + 1;
      }
      else
      {
        v58 = kaldi::quasar::TorchEncoderDecoder::EosTargetId((kaldi::quasar::TorchEncoderDecoder *)a1);
        v59 = v39 + 1;
      }
      if (v59 != v58 && (a8 & 1) == 0)
      {
        if (*(_BYTE *)(a1 + 3922))
        {
          BestAlignment = kaldi::quasar::TorchEncoderDecoder::GetBestAlignment((kaldi::quasar::TorchEncoderDecoder *)a1, 0);
          v61 = BestAlignment;
          v63 = *(_DWORD **)(a4 + 8);
          v62 = *(_QWORD *)(a4 + 16);
          if ((unint64_t)v63 >= v62)
          {
            v65 = *(_DWORD **)a4;
            v66 = ((uint64_t)v63 - *(_QWORD *)a4) >> 2;
            v67 = v66 + 1;
            if ((unint64_t)(v66 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v68 = v62 - (_QWORD)v65;
            if (v68 >> 1 > v67)
              v67 = v68 >> 1;
            if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
              v69 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v69 = v67;
            if (v69)
            {
              v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 16, v69);
              v65 = *(_DWORD **)a4;
              v63 = *(_DWORD **)(a4 + 8);
            }
            else
            {
              v70 = 0;
            }
            v71 = &v70[4 * v66];
            *(_DWORD *)v71 = v61;
            v64 = v71 + 4;
            while (v63 != v65)
            {
              v72 = *--v63;
              *((_DWORD *)v71 - 1) = v72;
              v71 -= 4;
            }
            *(_QWORD *)a4 = v71;
            *(_QWORD *)(a4 + 8) = v64;
            *(_QWORD *)(a4 + 16) = &v70[4 * v69];
            if (v65)
              operator delete(v65);
          }
          else
          {
            *v63 = BestAlignment;
            v64 = v63 + 1;
          }
          *(_QWORD *)(a4 + 8) = v64;
          __p = 0;
          v87 = 0;
          v88 = 0;
          kaldi::quasar::TorchEncoderDecoder::GetAlignmentProbabilities(a1, (uint64_t)&__p, 0);
          v73 = a5[1];
          if (v73 >= a5[2])
          {
            v74 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(a5, (uint64_t)&__p);
          }
          else
          {
            std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)a5, (uint64_t)&__p);
            v74 = v73 + 24;
          }
          a5[1] = v74;
          if (__p)
          {
            v87 = __p;
            operator delete(__p);
          }
        }
        else if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"model trained with supervised alignment required for alignment", 62);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        }
      }
      ++v37;
    }
    while (((uint64_t)(a3[1] - *a3) >> 2) + 1 > v37);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v76);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v78);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v82);
  if (SHIBYTE(v91) < 0)
    operator delete(v89);
}

void sub_1AD806B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  uint64_t v31;

  if (*(char *)(v31 - 105) < 0)
    operator delete(*(void **)(v31 - 128));
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TMTools::AlignAndScore<kaldi::quasar::TorchEncoderDecoder>(uint64_t a1, __int128 **a2, __int128 **a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7, char a8, char a9, uint64_t a10)
{
  void *__p;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  kaldi::quasar::TorchEncoderDecoder::Symbolize(a1, a2, (uint64_t)&v20, 0, 0);
  __p = 0;
  v18 = 0;
  v19 = 0;
  kaldi::quasar::TorchEncoderDecoder::Symbolize(a1, a3, (uint64_t)&__p, 1, 0);
  kaldi::quasar::TMTools::AlignAndScore<kaldi::quasar::TorchEncoderDecoder>(a1, (uint64_t *)&v20, &__p, a4, a5, a6, a7, a8, a9, a10, 0);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
}

void sub_1AD806CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::JoinVectorToString<int>(_QWORD *a1, const char *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD v14[11];
  char v15;
  uint64_t v16;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v13);
  if (a1[1] != *a1)
  {
    v6 = 0;
    do
    {
      std::ostream::operator<<();
      ++v6;
      v7 = a1[1] - *a1;
      if (v6 < v7 >> 2)
      {
        v8 = strlen(a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)a2, v8);
        v7 = a1[1] - *a1;
      }
    }
    while (v6 < v7 >> 2);
  }
  std::stringbuf::str();
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(_OWORD *)a3 = v11;
  *(_QWORD *)(a3 + 16) = v12;
  v13[0] = *MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v14[0] = v9;
  v14[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v15 < 0)
    operator delete((void *)v14[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v16);
}

void sub_1AD806E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1AD806E9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1AD806FA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void kaldi::quasar::TMTools::AlignAndScore<kaldi::quasar::Encdec>(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7, char a8, char a9, const std::string *a10, unsigned __int8 a11)
{
  _QWORD *v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void **v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  float *v33;
  uint64_t v34;
  unint64_t v35;
  int *v36;
  float v37;
  unint64_t v38;
  BOOL v39;
  _DWORD *v40;
  int v41;
  uint64_t v42;
  int SoftmaxIdx;
  float v45;
  int v46;
  float v47;
  float v48;
  unint64_t v49;
  float *v50;
  float *v51;
  float *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  float *v58;
  int v59;
  int v60;
  int v61;
  int *v62;
  int v63;
  unint64_t v64;
  int *v65;
  _DWORD *v66;
  int *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  int *v73;
  int v74;
  unint64_t v75;
  uint64_t v76;
  int32x2_t v79;
  float *v80;
  int32x2_t v81;
  __int128 v82;
  __int128 v83;
  char v84;
  int32x2_t v85;
  __int128 v86;
  __int128 v87;
  char v88;
  void *__p;
  void *v90;
  uint64_t v91;
  void **v92;
  uint64_t v93;
  uint64_t v94;

  v92 = 0;
  v93 = 0;
  v94 = 0;
  kaldi::JoinVectorToString<int>(a2, " ", (uint64_t)&v92);
  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 1);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Source symbol sequence : ", 25);
    if (v94 >= 0)
      v18 = (void **)&v92;
    else
      v18 = v92;
    if (v94 >= 0)
      v19 = HIBYTE(v94);
    else
      v19 = v93;
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" (length: ", 10);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)")", 1);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  kaldi::JoinVectorToString<int>(a3, " ", (uint64_t)&v92);
  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 1);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Target symbol sequence : ", 25);
    if (v94 >= 0)
      v23 = (void **)&v92;
    else
      v23 = v92;
    if (v94 >= 0)
      v24 = HIBYTE(v94);
    else
      v24 = v93;
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" (length: ", 10);
    v26 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" excluding </s> symbol: ", 24);
    v27 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)")", 1);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  v86 = 0u;
  v87 = 0u;
  v85 = (int32x2_t)&unk_1E5D34170;
  v88 = 0;
  kaldi::CuMatrix<float>::Resize(&v85, (unint64_t)(a2[1] - *a2) >> 2, 1, 0, 0);
  v28 = *a2;
  v29 = a2[1];
  v30 = v29 - *a2;
  if (v29 != *a2)
  {
    v31 = 0;
    v32 = v30 >> 2;
    v33 = (float *)v86;
    if (v32 <= 1)
      v32 = 1;
    v34 = 4 * (int)v87;
    do
    {
      *v33 = (float)(*(_DWORD *)(v28 + 4 * v31++) + a11 - 1);
      v33 = (float *)((char *)v33 + v34);
    }
    while (v32 != v31);
  }
  if ((a9 & 1) != 0)
  {
    *(_BYTE *)(a1 + 1509) = 0;
    std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)(a1 + 2248), 0);
  }
  kaldi::quasar::Encdec::ResetHistoryState((kaldi::quasar::Encdec *)a1);
  kaldi::quasar::Encdec::Start(a1, 4, a10);
  kaldi::quasar::Encdec::StartFeedforward(a1, (uint64_t)&v85, 0, 0);
  v82 = 0u;
  v83 = 0u;
  v81 = (int32x2_t)&unk_1E5D34170;
  v84 = 0;
  kaldi::CuMatrix<float>::CuMatrix(&v79, 1, 1, 0, 0, 0);
  *v80 = (float)(*(_DWORD *)(a1 + 824) - 1);
  if (a3[1] - *a3 != -4)
  {
    v35 = 0;
    v36 = (int *)(a1 + 828);
    do
    {
      v37 = *v80;
      kaldi::quasar::Encdec::Feedforward(a1, (uint64_t)&v79, &v81);
      v38 = (uint64_t)(a3[1] - *a3) >> 2;
      v39 = v38 > v35;
      if (v38 > v35)
        v40 = (_DWORD *)(*a3 + 4 * v35);
      else
        v40 = (_DWORD *)(a1 + 828);
      if (v39)
        v41 = a11 ^ 1;
      else
        v41 = 1;
      v42 = (*v40 - v41);
      *v80 = (float)(int)v42;
      if (a6)
      {
        if ((_DWORD)v42 != *v36 - 1 || a7 != 0)
        {
          if (*(_BYTE *)(a1 + 1509))
            SoftmaxIdx = kaldi::quasar::Encdec::GetSoftmaxIdx((kaldi::quasar::Shortlist **)a1, v42);
          else
            SoftmaxIdx = v42;
          v45 = *(float *)(v82 + 4 * SoftmaxIdx);
          v46 = *(unsigned __int8 *)(a1 + 1519);
          v47 = logf(v45);
          if (!v46)
            v47 = v45;
          v48 = -v47;
          v50 = *(float **)(a6 + 8);
          v49 = *(_QWORD *)(a6 + 16);
          if ((unint64_t)v50 >= v49)
          {
            v52 = *(float **)a6;
            v53 = ((uint64_t)v50 - *(_QWORD *)a6) >> 2;
            v54 = v53 + 1;
            if ((unint64_t)(v53 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v55 = v49 - (_QWORD)v52;
            if (v55 >> 1 > v54)
              v54 = v55 >> 1;
            if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
              v56 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v56 = v54;
            if (v56)
            {
              v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a6 + 16, v56);
              v52 = *(float **)a6;
              v50 = *(float **)(a6 + 8);
            }
            else
            {
              v57 = 0;
            }
            v58 = (float *)&v57[4 * v53];
            *v58 = v48;
            v51 = v58 + 1;
            while (v50 != v52)
            {
              v59 = *((_DWORD *)v50-- - 1);
              *((_DWORD *)v58-- - 1) = v59;
            }
            *(_QWORD *)a6 = v58;
            *(_QWORD *)(a6 + 8) = v51;
            *(_QWORD *)(a6 + 16) = &v57[4 * v56];
            if (v52)
              operator delete(v52);
          }
          else
          {
            *v50 = v48;
            v51 = v50 + 1;
          }
          *(_QWORD *)(a6 + 8) = v51;
        }
      }
      if (*(_BYTE *)(a1 + 2165))
      {
        v60 = (int)v37 + 1;
        v61 = *(_DWORD *)(a1 + 824);
      }
      else
      {
        v60 = v42 + 1;
        v61 = *v36;
      }
      if (v60 != v61 && (a8 & 1) == 0)
      {
        if (*(_BYTE *)(a1 + 2164))
        {
          v62 = *(int **)(a1 + 2168);
          if (v62 == *(int **)(a1 + 2176))
            v63 = -1;
          else
            v63 = *v62;
          v65 = *(int **)(a4 + 8);
          v64 = *(_QWORD *)(a4 + 16);
          if ((unint64_t)v65 >= v64)
          {
            v67 = *(int **)a4;
            v68 = ((uint64_t)v65 - *(_QWORD *)a4) >> 2;
            v69 = v68 + 1;
            if ((unint64_t)(v68 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v70 = v64 - (_QWORD)v67;
            if (v70 >> 1 > v69)
              v69 = v70 >> 1;
            if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
              v71 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v71 = v69;
            if (v71)
            {
              v72 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 16, v71);
              v67 = *(int **)a4;
              v65 = *(int **)(a4 + 8);
            }
            else
            {
              v72 = 0;
            }
            v73 = (int *)&v72[4 * v68];
            *v73 = v63;
            v66 = v73 + 1;
            while (v65 != v67)
            {
              v74 = *--v65;
              *--v73 = v74;
            }
            *(_QWORD *)a4 = v73;
            *(_QWORD *)(a4 + 8) = v66;
            *(_QWORD *)(a4 + 16) = &v72[4 * v71];
            if (v67)
              operator delete(v67);
          }
          else
          {
            *v65 = v63;
            v66 = v65 + 1;
          }
          *(_QWORD *)(a4 + 8) = v66;
          __p = 0;
          v90 = 0;
          v91 = 0;
          kaldi::quasar::Encdec::GetAlignmentProbabilities(a1, (uint64_t)&__p, 0);
          v75 = a5[1];
          if (v75 >= a5[2])
          {
            v76 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(a5, (uint64_t)&__p);
          }
          else
          {
            std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)a5, (uint64_t)&__p);
            v76 = v75 + 24;
          }
          a5[1] = v76;
          if (__p)
          {
            v90 = __p;
            operator delete(__p);
          }
        }
        else if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"model trained with supervised alignment required for alignment", 62);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        }
      }
      ++v35;
    }
    while (((uint64_t)(a3[1] - *a3) >> 2) + 1 > v35);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v79);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v81);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v85);
  if (SHIBYTE(v94) < 0)
    operator delete(v92);
}

void sub_1AD8076C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  uint64_t v31;

  if (*(char *)(v31 - 105) < 0)
    operator delete(*(void **)(v31 - 128));
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TMTools::AlignAndScore<kaldi::quasar::Encdec>(uint64_t a1, __int128 **a2, __int128 **a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7, char a8, char a9, const std::string *a10)
{
  void *__p;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  kaldi::quasar::Encdec::Symbolize(a1, a2, (uint64_t)&v20, 0, 0);
  __p = 0;
  v18 = 0;
  v19 = 0;
  kaldi::quasar::Encdec::Symbolize(a1, a3, (uint64_t)&__p, 1, 0);
  kaldi::quasar::TMTools::AlignAndScore<kaldi::quasar::Encdec>(a1, (uint64_t *)&v20, &__p, a4, a5, a6, a7, a8, a9, a10, 0);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
}

void sub_1AD807854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::Encdec::GetAlignmentProbabilities(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  int v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  _QWORD v20[4];
  _QWORD v21[2];
  int v22;

  v3 = *(_DWORD *)(a1 + 2208);
  if (v3 >= 1)
  {
    v5 = *(_QWORD *)(a1 + 2200) + 4 * *(_DWORD *)(a1 + 2216) * a3;
    v6 = *(_QWORD *)(a1 + 2224);
    v20[0] = &unk_1E5D29D70;
    v20[1] = v5;
    v20[3] = v6;
    v20[2] = v3;
    kaldi::CuVector<float>::CuVector(v21, v20);
    if (v22 >= 1)
    {
      v7 = 0;
      v8 = (_QWORD *)(a2 + 16);
      v9 = *(_DWORD **)(a2 + 8);
      do
      {
        v10 = *(_DWORD *)(v21[1] + 4 * v7);
        if ((unint64_t)v9 >= *v8)
        {
          v12 = *(_DWORD **)a2;
          v13 = ((uint64_t)v9 - *(_QWORD *)a2) >> 2;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v15 = *v8 - (_QWORD)v12;
          if (v15 >> 1 > v14)
            v14 = v15 >> 1;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v16 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v16);
            v12 = *(_DWORD **)a2;
            v9 = *(_DWORD **)(a2 + 8);
          }
          else
          {
            v17 = 0;
          }
          v18 = &v17[4 * v13];
          *(_DWORD *)v18 = v10;
          v11 = v18 + 4;
          while (v9 != v12)
          {
            v19 = *--v9;
            *((_DWORD *)v18 - 1) = v19;
            v18 -= 4;
          }
          *(_QWORD *)a2 = v18;
          *(_QWORD *)(a2 + 8) = v11;
          *(_QWORD *)(a2 + 16) = &v17[4 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *v9 = v10;
          v11 = v9 + 1;
        }
        *(_QWORD *)(a2 + 8) = v11;
        ++v7;
        v9 = v11;
      }
      while (v7 < v22);
    }
    v21[0] = &unk_1E5D341C8;
    kaldi::CuVector<float>::Destroy((uint64_t)v21);
  }
}

void sub_1AD807A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<quasar::PDecForceAlignBlock::processBody(void)::$_3> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::__variant_detail::_Trait<kaldi::Encdec>> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(*(_QWORD *)a2 + 3922);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<quasar::PDecForceAlignBlock::processBody(void)::$_3> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::__variant_detail::_Trait<kaldi::Encdec>> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(*(_QWORD *)a2 + 2164);
}

void quasar::PDecForceAlignBlock::~PDecForceAlignBlock(quasar::PDecForceAlignBlock *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[5];
  *((_QWORD *)this + 287) = a2[6];
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2472);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2456);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::shared_ptr<kaldi::quasar::Encdec>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 2416);
  v6 = (void **)((char *)this + 2392);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 2383) < 0)
    operator delete(*((void **)this + 295));
  v6 = (void **)((char *)this + 2336);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 2327) < 0)
    operator delete(*((void **)this + 288));
  v5 = a2[1];
  *(_QWORD *)this = v5;
  *(_QWORD *)((char *)this + *(_QWORD *)(v5 - 24)) = a2[2];
  quasar::PDecForceAlignOptions::~PDecForceAlignOptions((quasar::PDecForceAlignBlock *)((char *)this + 8));
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::shared_ptr<kaldi::quasar::Encdec>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E5D46D68[v2])(&v4, a1);
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_10shared_ptrIN5kaldi6quasar19TorchEncoderDecoderEEENS8_INSA_6EncdecEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_10shared_ptrIN5kaldi6quasar19TorchEncoderDecoderEEENS8_INSA_6EncdecEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2);
}

void quasar::PDecForceAlignOptions::~PDecForceAlignOptions(quasar::PDecForceAlignOptions *this)
{
  *(_QWORD *)this = &off_1E5D386A0;
  *((_QWORD *)this + 268) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 2264, *((char **)this + 284));
  *((_QWORD *)this + 268) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2232);
  if (*((char *)this + 2223) < 0)
    operator delete(*((void **)this + 275));
  if (*((char *)this + 2199) < 0)
    operator delete(*((void **)this + 272));
  if (*((char *)this + 2175) < 0)
    operator delete(*((void **)this + 269));
  *((_QWORD *)this + 250) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 2120, *((char **)this + 266));
  *((_QWORD *)this + 250) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2088);
  if (*((char *)this + 2079) < 0)
    operator delete(*((void **)this + 257));
  if (*((char *)this + 2055) < 0)
    operator delete(*((void **)this + 254));
  if (*((char *)this + 2031) < 0)
    operator delete(*((void **)this + 251));
  *((_QWORD *)this + 232) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 1976, *((char **)this + 248));
  *((_QWORD *)this + 232) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1944);
  if (*((char *)this + 1935) < 0)
    operator delete(*((void **)this + 239));
  if (*((char *)this + 1911) < 0)
    operator delete(*((void **)this + 236));
  if (*((char *)this + 1887) < 0)
    operator delete(*((void **)this + 233));
  *((_QWORD *)this + 214) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 1832, *((char **)this + 230));
  *((_QWORD *)this + 214) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1800);
  if (*((char *)this + 1791) < 0)
    operator delete(*((void **)this + 221));
  if (*((char *)this + 1767) < 0)
    operator delete(*((void **)this + 218));
  if (*((char *)this + 1743) < 0)
    operator delete(*((void **)this + 215));
  *((_QWORD *)this + 194) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1688, *((_QWORD **)this + 212));
  if (*((char *)this + 1679) < 0)
    operator delete(*((void **)this + 207));
  *((_QWORD *)this + 194) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1640);
  if (*((char *)this + 1631) < 0)
    operator delete(*((void **)this + 201));
  if (*((char *)this + 1607) < 0)
    operator delete(*((void **)this + 198));
  if (*((char *)this + 1583) < 0)
    operator delete(*((void **)this + 195));
  *((_QWORD *)this + 174) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1528, *((_QWORD **)this + 192));
  if (*((char *)this + 1519) < 0)
    operator delete(*((void **)this + 187));
  *((_QWORD *)this + 174) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1480);
  if (*((char *)this + 1471) < 0)
    operator delete(*((void **)this + 181));
  if (*((char *)this + 1447) < 0)
    operator delete(*((void **)this + 178));
  if (*((char *)this + 1423) < 0)
    operator delete(*((void **)this + 175));
  *((_QWORD *)this + 154) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1368, *((_QWORD **)this + 172));
  if (*((char *)this + 1359) < 0)
    operator delete(*((void **)this + 167));
  *((_QWORD *)this + 154) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1320);
  if (*((char *)this + 1311) < 0)
    operator delete(*((void **)this + 161));
  if (*((char *)this + 1287) < 0)
    operator delete(*((void **)this + 158));
  if (*((char *)this + 1263) < 0)
    operator delete(*((void **)this + 155));
  *((_QWORD *)this + 134) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 1208, *((_QWORD **)this + 152));
  if (*((char *)this + 1199) < 0)
    operator delete(*((void **)this + 147));
  *((_QWORD *)this + 134) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1160);
  if (*((char *)this + 1151) < 0)
    operator delete(*((void **)this + 141));
  if (*((char *)this + 1127) < 0)
    operator delete(*((void **)this + 138));
  if (*((char *)this + 1103) < 0)
    operator delete(*((void **)this + 135));
  *((_QWORD *)this + 116) = &unk_1E5D348D0;
  std::__tree<std::string>::destroy((uint64_t)this + 1048, *((char **)this + 132));
  *((_QWORD *)this + 116) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1016);
  if (*((char *)this + 1007) < 0)
    operator delete(*((void **)this + 123));
  if (*((char *)this + 983) < 0)
    operator delete(*((void **)this + 120));
  if (*((char *)this + 959) < 0)
    operator delete(*((void **)this + 117));
  *((_QWORD *)this + 98) = &unk_1E5D348D0;
  std::__tree<std::string>::destroy((uint64_t)this + 904, *((char **)this + 114));
  *((_QWORD *)this + 98) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 872);
  if (*((char *)this + 863) < 0)
    operator delete(*((void **)this + 105));
  if (*((char *)this + 839) < 0)
    operator delete(*((void **)this + 102));
  if (*((char *)this + 815) < 0)
    operator delete(*((void **)this + 99));
  *((_QWORD *)this + 78) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 760, *((_QWORD **)this + 96));
  if (*((char *)this + 751) < 0)
    operator delete(*((void **)this + 91));
  *((_QWORD *)this + 78) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 712);
  if (*((char *)this + 703) < 0)
    operator delete(*((void **)this + 85));
  if (*((char *)this + 679) < 0)
    operator delete(*((void **)this + 82));
  if (*((char *)this + 655) < 0)
    operator delete(*((void **)this + 79));
  *((_QWORD *)this + 60) = &unk_1E5D348D0;
  std::__tree<std::string>::destroy((uint64_t)this + 600, *((char **)this + 76));
  *((_QWORD *)this + 60) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 568);
  if (*((char *)this + 559) < 0)
    operator delete(*((void **)this + 67));
  if (*((char *)this + 535) < 0)
    operator delete(*((void **)this + 64));
  if (*((char *)this + 511) < 0)
    operator delete(*((void **)this + 61));
  *((_QWORD *)this + 42) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 456, *((char **)this + 58));
  *((_QWORD *)this + 42) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 424);
  if (*((char *)this + 415) < 0)
    operator delete(*((void **)this + 49));
  if (*((char *)this + 391) < 0)
    operator delete(*((void **)this + 46));
  if (*((char *)this + 367) < 0)
    operator delete(*((void **)this + 43));
  *((_QWORD *)this + 22) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 312, *((_QWORD **)this + 40));
  if (*((char *)this + 303) < 0)
    operator delete(*((void **)this + 35));
  *((_QWORD *)this + 22) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  if (*((char *)this + 255) < 0)
    operator delete(*((void **)this + 29));
  if (*((char *)this + 231) < 0)
    operator delete(*((void **)this + 26));
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
  *((_QWORD *)this + 2) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 152, *((_QWORD **)this + 20));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  *((_QWORD *)this + 2) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

uint64_t std::vector<kaldi::quasar::TranslationUtil::PathElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::PathElement const&>(uint64_t *a1, const kaldi::quasar::TranslationUtil::PathElement *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  std::string *v14;
  std::string *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x111111111111111)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xEEEEEEEEEEEEEEEFLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x88888888888888)
    v9 = 0x111111111111111;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (std::string *)&v10[240 * v4];
  v16 = &v10[240 * v9];
  kaldi::quasar::TranslationUtil::PathElement::PathElement(v14, a2);
  v15 = v14 + 10;
  std::vector<kaldi::quasar::TranslationUtil::PathElement>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<kaldi::quasar::TranslationUtil::PathElement>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1AD808204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::TranslationUtil::PathElement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *kaldi::quasar::TranslationUtil::PathElement::PathElement(std::string *this, const kaldi::quasar::TranslationUtil::PathElement *a2)
{
  __int128 v4;
  int v5;
  __int128 v6;
  std::string::size_type v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_DWORD *)a2 + 6);
  this[1].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[1].__r_.__value_.__l.__data_) = v5;
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 32), *((__int128 **)a2 + 4), *((__int128 **)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3));
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 56);
    this[3].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 9);
    *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = v6;
  }
  v7 = *((_QWORD *)a2 + 10);
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__l.__size_ = v7;
  this[4].__r_.__value_.__r.__words[0] = 0;
  this[4].__r_.__value_.__l.__size_ = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[3].__r_.__value_.__r.__words[2], *((const void **)a2 + 11), *((_QWORD *)a2 + 12), (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 2);
  this[4].__r_.__value_.__r.__words[2] = 0;
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[4].__r_.__value_.__r.__words[2], *((const void **)a2 + 14), *((_QWORD *)a2 + 15), (uint64_t)(*((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14)) >> 2);
  this[5].__r_.__value_.__r.__words[2] = 0;
  this[6].__r_.__value_.__r.__words[0] = 0;
  this[6].__r_.__value_.__l.__size_ = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&this[5].__r_.__value_.__r.__words[2], *((const void **)a2 + 17), *((_QWORD *)a2 + 18), (uint64_t)(*((_QWORD *)a2 + 18) - *((_QWORD *)a2 + 17)) >> 2);
  this[6].__r_.__value_.__r.__words[2] = 0;
  this[7].__r_.__value_.__r.__words[0] = 0;
  this[7].__r_.__value_.__l.__size_ = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[6].__r_.__value_.__r.__words[2], *((const void **)a2 + 20), *((_QWORD *)a2 + 21), (uint64_t)(*((_QWORD *)a2 + 21) - *((_QWORD *)a2 + 20)) >> 2);
  this[7].__r_.__value_.__r.__words[2] = 0;
  this[8].__r_.__value_.__r.__words[0] = 0;
  this[8].__r_.__value_.__l.__size_ = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&this[7].__r_.__value_.__r.__words[2], *((const void **)a2 + 23), *((_QWORD *)a2 + 24), (uint64_t)(*((_QWORD *)a2 + 24) - *((_QWORD *)a2 + 23)) >> 2);
  this[8].__r_.__value_.__r.__words[2] = 0;
  this[9].__r_.__value_.__r.__words[0] = 0;
  this[9].__r_.__value_.__l.__size_ = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&this[8].__r_.__value_.__r.__words[2], *((const void **)a2 + 26), *((_QWORD *)a2 + 27), (uint64_t)(*((_QWORD *)a2 + 27) - *((_QWORD *)a2 + 26)) >> 2);
  LODWORD(this[9].__r_.__value_.__r.__words[2]) = *((_DWORD *)a2 + 58);
  return this;
}

void sub_1AD8083BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

void sub_1AD808474()
{
  JUMPOUT(0x1AD80845CLL);
}

uint64_t std::vector<kaldi::quasar::TranslationUtil::PathElement>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>,std::reverse_iterator<kaldi::quasar::TranslationUtil::PathElement*>,std::reverse_iterator<kaldi::quasar::TranslationUtil::PathElement*>,std::reverse_iterator<kaldi::quasar::TranslationUtil::PathElement*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x111111111111112)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(240 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>,std::reverse_iterator<kaldi::quasar::TranslationUtil::PathElement*>,std::reverse_iterator<kaldi::quasar::TranslationUtil::PathElement*>,std::reverse_iterator<kaldi::quasar::TranslationUtil::PathElement*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  std::string *v12;

  v10 = 0;
  v11 = a7 - 240;
  while (a3 + v10 != a5)
  {
    v12 = (std::string *)(v11 + v10);
    v10 -= 240;
    kaldi::quasar::TranslationUtil::PathElement::PathElement(v12, (const kaldi::quasar::TranslationUtil::PathElement *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<kaldi::quasar::TranslationUtil::PathElement>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 240;
    kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)(i - 240));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t kaldi::quasar::TMTools::ModelSharing::Cache<kaldi::quasar::TorchEncoderDecoder>(uint64_t **a1)
{
  _QWORD *v2;
  _OWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  void *__p[2];
  char v8;
  uint64_t *v9;
  void **v10;

  std::string::basic_string[abi:ne180100]<0>(__p, (char *)((unint64_t)"N5kaldi6quasar19TorchEncoderDecoderE" & 0x7FFFFFFFFFFFFFFFLL));
  v2 = (_QWORD *)operator new();
  v2[3] = 0;
  v2[2] = 0;
  *v2 = &unk_1E5CFEFE0;
  v2[1] = v2 + 2;
  v6 = v2;
  v10 = __p;
  v9 = (uint64_t *)&v6;
  v3 = std::__tree<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<std::unique_ptr<kaldi::quasar::TMTools::ModelCache<kaldi::quasar::TorchEncoderDecoder>> &&>>(a1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v10, &v9);
  v4 = v6;
  v6 = 0;
  if (v4)
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  if (v8 < 0)
    operator delete(__p[0]);
  return *((_QWORD *)v3 + 7) + 8;
}

void sub_1AD8086E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::TorchEncoderDecoder,std::allocator<kaldi::quasar::TorchEncoderDecoder>,std::string const&,BOOL &,BOOL &,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x1060uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::TorchEncoderDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,BOOL &,std::allocator<kaldi::quasar::TorchEncoderDecoder>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD80877C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::TorchEncoderDecoder>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,BOOL &,std::allocator<kaldi::quasar::TorchEncoderDecoder>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41FE8;
  a1[1] = 0;
  kaldi::quasar::TorchEncoderDecoder::TorchEncoderDecoder((kaldi::quasar::TorchEncoderDecoder *)(a1 + 3));
  return a1;
}

void sub_1AD8087D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::TorchEncoderDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41FE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::TorchEncoderDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41FE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::TorchEncoderDecoder>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_OWORD *std::__tree<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<std::unique_ptr<kaldi::quasar::TMTools::ModelCache<kaldi::quasar::TorchEncoderDecoder>> &&>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4, uint64_t **a5)
{
  void **v8;
  _OWORD *v9;
  uint64_t **v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  char v17;
  uint64_t v18;

  v8 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v18, a2);
  v9 = *v8;
  if (!*v8)
  {
    v10 = (uint64_t **)v8;
    v9 = operator new(0x40uLL);
    v16[1] = a1 + 1;
    v11 = *a4;
    v12 = *a5;
    v13 = *((_QWORD *)*a4 + 2);
    v9[2] = **a4;
    *((_QWORD *)v9 + 6) = v13;
    v11[1] = 0;
    v11[2] = 0;
    *v11 = 0;
    v14 = *v12;
    *v12 = 0;
    *((_QWORD *)v9 + 7) = v14;
    v17 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v18, v10, (uint64_t *)v9);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,void *>>>>::reset[abi:ne180100]((uint64_t)v16, 0);
  }
  return v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t kaldi::quasar::TMTools::ModelCache<kaldi::quasar::TorchEncoderDecoder>::~ModelCache(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E5CFEFE0;
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void kaldi::quasar::TMTools::ModelCache<kaldi::quasar::TorchEncoderDecoder>::~ModelCache(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E5CFEFE0;
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy(a1 + 8, *(_QWORD **)(a1 + 16));
  JUMPOUT(0x1AF44D190);
}

void std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,0>(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1AD808BC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

_QWORD *std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>::shared_ptr[abi:ne180100]<kaldi::quasar::TorchEncoderDecoder,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5D45D60;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1AD808C78(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<kaldi::quasar::TorchEncoderDecoder *,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>::__shared_ptr_default_delete<kaldi::quasar::TorchEncoderDecoder,kaldi::quasar::TorchEncoderDecoder>,std::allocator<kaldi::quasar::TorchEncoderDecoder>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::TorchEncoderDecoder *,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>::__shared_ptr_default_delete<kaldi::quasar::TorchEncoderDecoder,kaldi::quasar::TorchEncoderDecoder>,std::allocator<kaldi::quasar::TorchEncoderDecoder>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::TorchEncoderDecoder *,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>::__shared_ptr_default_delete<kaldi::quasar::TorchEncoderDecoder,kaldi::quasar::TorchEncoderDecoder>,std::allocator<kaldi::quasar::TorchEncoderDecoder>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::__variant_detail::__assignment<std::__variant_detail::__traits<std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::shared_ptr<kaldi::quasar::Encdec>>>::__assign_alt[abi:ne180100]<0ul,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>&>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  if (*(_DWORD *)(a1 + 16))
    return (_QWORD *)std::__variant_detail::__assignment<std::__variant_detail::__traits<std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::shared_ptr<kaldi::quasar::Encdec>>>::__emplace[abi:ne180100]<0ul,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>&>(a1, a3);
  else
    return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](a2, a3);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::shared_ptr<kaldi::quasar::Encdec>>>::__emplace[abi:ne180100]<0ul,std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>&>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  char v9;

  v4 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E5D46D68[v4])(&v9, a1);
  *(_DWORD *)(a1 + 16) = -1;
  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_DWORD *)(a1 + 16) = 0;
  return a1;
}

uint64_t kaldi::quasar::TMTools::ModelSharing::Cache<kaldi::quasar::Encdec>(uint64_t **a1)
{
  _QWORD *v2;
  _OWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  void *__p[2];
  char v8;
  uint64_t *v9;
  void **v10;

  std::string::basic_string[abi:ne180100]<0>(__p, (char *)(0x80000001AE18E0ECLL & 0x7FFFFFFFFFFFFFFFLL));
  v2 = (_QWORD *)operator new();
  v2[3] = 0;
  v2[2] = 0;
  *v2 = &unk_1E5CFF000;
  v2[1] = v2 + 2;
  v6 = v2;
  v10 = __p;
  v9 = (uint64_t *)&v6;
  v3 = std::__tree<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<std::unique_ptr<kaldi::quasar::TMTools::ModelCache<kaldi::quasar::TorchEncoderDecoder>> &&>>(a1, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v10, &v9);
  v4 = v6;
  v6 = 0;
  if (v4)
    (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  if (v8 < 0)
    operator delete(__p[0]);
  return *((_QWORD *)v3 + 7) + 8;
}

void sub_1AD808E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::Encdec,std::allocator<kaldi::quasar::Encdec>,std::string const&,BOOL &,BOOL &,void>@<X0>(uint64_t a1@<X1>, unsigned __int8 *a2@<X2>, unsigned __int8 *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x9B8uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::Encdec>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,BOOL &,std::allocator<kaldi::quasar::Encdec>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1AD808F24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::Encdec>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,BOOL &,std::allocator<kaldi::quasar::Encdec>,0>(_QWORD *a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  a1[2] = 0;
  *a1 = &unk_1E5D421E0;
  a1[1] = 0;
  kaldi::quasar::Encdec::Encdec(a1 + 3, a2, *a3, *a4);
  return a1;
}

void sub_1AD808F78(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::Encdec>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D421E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::Encdec>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D421E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<kaldi::quasar::Encdec>::__on_zero_shared(uint64_t a1)
{
  kaldi::quasar::Encdec::~Encdec((kaldi::quasar::Encdec *)(a1 + 24));
}

void kaldi::quasar::Encdec::~Encdec(kaldi::quasar::Encdec *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;

  v7 = (void **)((char *)this + 2432);
  std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (*((char *)this + 2431) < 0)
    operator delete(*((void **)this + 301));
  if (*((char *)this + 2407) < 0)
    operator delete(*((void **)this + 298));
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)this + 281, 0);
  v2 = *((_QWORD *)this + 280);
  *((_QWORD *)this + 280) = 0;
  if (v2)
    std::default_delete<kaldi::quasar::Shortlist>::operator()[abi:ne180100]((uint64_t)this + 2240, v2);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 2192);
  v3 = (void *)*((_QWORD *)this + 271);
  if (v3)
  {
    *((_QWORD *)this + 272) = v3;
    operator delete(v3);
  }
  v7 = (void **)((char *)this + 2080);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 2056);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 2032);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (*((char *)this + 2031) < 0)
    operator delete(*((void **)this + 251));
  if (*((char *)this + 2007) < 0)
    operator delete(*((void **)this + 248));
  if (*((char *)this + 1983) < 0)
    operator delete(*((void **)this + 245));
  if (*((char *)this + 1959) < 0)
    operator delete(*((void **)this + 242));
  if (*((char *)this + 1935) < 0)
    operator delete(*((void **)this + 239));
  if (*((char *)this + 1911) < 0)
    operator delete(*((void **)this + 236));
  if (*((char *)this + 1887) < 0)
    operator delete(*((void **)this + 233));
  if (*((char *)this + 1863) < 0)
    operator delete(*((void **)this + 230));
  if (*((char *)this + 1839) < 0)
    operator delete(*((void **)this + 227));
  if (*((char *)this + 1815) < 0)
    operator delete(*((void **)this + 224));
  if (*((char *)this + 1791) < 0)
    operator delete(*((void **)this + 221));
  if (*((char *)this + 1767) < 0)
    operator delete(*((void **)this + 218));
  if (*((char *)this + 1743) < 0)
    operator delete(*((void **)this + 215));
  v7 = (void **)((char *)this + 1696);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  if (*((char *)this + 1695) < 0)
    operator delete(*((void **)this + 209));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 1648, *((_QWORD **)this + 207));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 1624, *((_QWORD **)this + 204));
  v7 = (void **)((char *)this + 1600);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 1576);
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 1552);
  std::vector<std::pair<std::string,std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 1528);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v7);
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::Encdec *)((char *)this + 1128));
  std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy((uint64_t)this + 1104, *((_QWORD **)this + 139));
  if (*((char *)this + 1079) < 0)
    operator delete(*((void **)this + 132));
  if (*((char *)this + 1055) < 0)
    operator delete(*((void **)this + 129));
  if (*((char *)this + 1031) < 0)
    operator delete(*((void **)this + 126));
  if (*((char *)this + 1007) < 0)
    operator delete(*((void **)this + 123));
  if (*((char *)this + 983) < 0)
    operator delete(*((void **)this + 120));
  if (*((char *)this + 959) < 0)
    operator delete(*((void **)this + 117));
  if (*((char *)this + 935) < 0)
    operator delete(*((void **)this + 114));
  v7 = (void **)((char *)this + 880);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  v4 = (void *)*((_QWORD *)this + 107);
  if (v4)
  {
    *((_QWORD *)this + 108) = v4;
    operator delete(v4);
  }
  kaldi::quasar::BPE::~BPE((kaldi::quasar::Encdec *)((char *)this + 568));
  v5 = *((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 536);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 520);
  std::__tree<std::__value_type<std::string,std::map<std::string,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,int>>>>::destroy((uint64_t)this + 496, *((_QWORD **)this + 63));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 464, *((_QWORD **)this + 59));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 440, *((_QWORD **)this + 56));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 416, *((_QWORD **)this + 53));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 392, *((_QWORD **)this + 50));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 368, *((_QWORD **)this + 47));
  v7 = (void **)((char *)this + 344);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v7);
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy((uint64_t)this + 320, *((_QWORD **)this + 41));
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy((uint64_t)this + 296, *((_QWORD **)this + 38));
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy((uint64_t)this + 272, *((_QWORD **)this + 35));
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy((uint64_t)this + 248, *((_QWORD **)this + 32));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 200);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 184);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 168);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 152);
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void std::vector<std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<kaldi::quasar::Shortlist>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
    v4 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1AF44D190);
  }
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy(a1, *a2);
    std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy(a1, a2[1]);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void kaldi::quasar::BPE::~BPE(kaldi::quasar::BPE *this)
{
  void **v2;

  if (*((char *)this + 239) < 0)
    operator delete(*((void **)this + 27));
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  if (*((char *)this + 183) < 0)
    operator delete(*((void **)this + 20));
  if (*((char *)this + 159) < 0)
    operator delete(*((void **)this + 17));
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 88);
  v2 = (void **)((char *)this + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 24);
  std::__tree<std::string>::destroy((uint64_t)this, *((char **)this + 1));
}

uint64_t kaldi::quasar::TMTools::ModelCache<kaldi::quasar::Encdec>::~ModelCache(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E5CFF000;
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void kaldi::quasar::TMTools::ModelCache<kaldi::quasar::Encdec>::~ModelCache(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E5CFF000;
  std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::destroy(a1 + 8, *(_QWORD **)(a1 + 16));
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::shared_ptr<kaldi::quasar::Encdec>::shared_ptr[abi:ne180100]<kaldi::quasar::Encdec,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5D45E40;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1AD8096C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<kaldi::quasar::Encdec>::reset[abi:ne180100]((kaldi::quasar::Encdec **)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<kaldi::quasar::Encdec *,std::shared_ptr<kaldi::quasar::Encdec>::__shared_ptr_default_delete<kaldi::quasar::Encdec,kaldi::quasar::Encdec>,std::allocator<kaldi::quasar::Encdec>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

kaldi::quasar::Encdec *std::__shared_ptr_pointer<kaldi::quasar::Encdec *,std::shared_ptr<kaldi::quasar::Encdec>::__shared_ptr_default_delete<kaldi::quasar::Encdec,kaldi::quasar::Encdec>,std::allocator<kaldi::quasar::Encdec>>::__on_zero_shared(uint64_t a1)
{
  kaldi::quasar::Encdec *result;

  result = *(kaldi::quasar::Encdec **)(a1 + 24);
  if (result)
  {
    kaldi::quasar::Encdec::~Encdec(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::Encdec *,std::shared_ptr<kaldi::quasar::Encdec>::__shared_ptr_default_delete<kaldi::quasar::Encdec,kaldi::quasar::Encdec>,std::allocator<kaldi::quasar::Encdec>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

kaldi::quasar::Encdec *std::unique_ptr<kaldi::quasar::Encdec>::reset[abi:ne180100](kaldi::quasar::Encdec **a1, kaldi::quasar::Encdec *a2)
{
  kaldi::quasar::Encdec *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    kaldi::quasar::Encdec::~Encdec(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::shared_ptr<kaldi::quasar::Encdec>>>::__assign_alt[abi:ne180100]<1ul,std::shared_ptr<kaldi::quasar::Encdec>,std::shared_ptr<kaldi::quasar::Encdec>>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  if (*(_DWORD *)(a1 + 16) == 1)
    return std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a2, a3);
  else
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::shared_ptr<kaldi::quasar::Encdec>>>::__emplace[abi:ne180100]<1ul,std::shared_ptr<kaldi::quasar::Encdec>>(a1, (uint64_t)a3);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>,std::shared_ptr<kaldi::quasar::Encdec>>>::__emplace[abi:ne180100]<1ul,std::shared_ptr<kaldi::quasar::Encdec>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v6;

  v4 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))off_1E5D46D68[v4])(&v6, a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  return a1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::NbestElement>,kaldi::quasar::TranslationUtil::NbestElement const*,kaldi::quasar::TranslationUtil::NbestElement const*,kaldi::quasar::TranslationUtil::NbestElement*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)(a4 + v7), (const kaldi::quasar::TranslationUtil::NbestElement *)(a2 + v7));
      v7 += 272;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1AD809898(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 272;
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)(v4 + v2));
      v2 -= 272;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

kaldi::quasar::TranslationUtil::NbestElement *kaldi::quasar::TranslationUtil::NbestElement::NbestElement(kaldi::quasar::TranslationUtil::NbestElement *this, const kaldi::quasar::TranslationUtil::NbestElement *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<kaldi::quasar::TranslationUtil::PathElement>::__init_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>(this, *(_QWORD *)a2, *((_QWORD *)a2 + 1), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 4));
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v4 = *((_OWORD *)a2 + 4);
    *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
    *((_OWORD *)this + 4) = v4;
  }
  *((_BYTE *)this + 88) = *((_BYTE *)a2 + 88);
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 4, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 6);
    *((_QWORD *)this + 14) = *((_QWORD *)a2 + 14);
    *((_OWORD *)this + 6) = v5;
  }
  if (*((char *)a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 5, *((const std::string::value_type **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 120);
    *((_QWORD *)this + 17) = *((_QWORD *)a2 + 17);
    *(_OWORD *)((char *)this + 120) = v6;
  }
  if (*((char *)a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 6, *((const std::string::value_type **)a2 + 18), *((_QWORD *)a2 + 19));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 9);
    *((_QWORD *)this + 20) = *((_QWORD *)a2 + 20);
    *((_OWORD *)this + 9) = v7;
  }
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 21, *((const void **)a2 + 21), *((_QWORD *)a2 + 22), (uint64_t)(*((_QWORD *)a2 + 22) - *((_QWORD *)a2 + 21)) >> 2);
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 24, *((const void **)a2 + 24), *((_QWORD *)a2 + 25), (uint64_t)(*((_QWORD *)a2 + 25) - *((_QWORD *)a2 + 24)) >> 2);
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)this + 27, *((const void **)a2 + 27), *((_QWORD *)a2 + 28), (uint64_t)(*((_QWORD *)a2 + 28) - *((_QWORD *)a2 + 27)) >> 2);
  *((_BYTE *)this + 240) = *((_BYTE *)a2 + 240);
  std::map<std::string,double>::map[abi:ne180100]((uint64_t *)this + 31, (const void ***)a2 + 31);
  return this;
}

void sub_1AD809A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void **v13;

  if (*(char *)(v10 + 143) < 0)
    operator delete(*v13);
  if (*(char *)(v10 + 119) < 0)
    operator delete(*v12);
  if (*(char *)(v10 + 87) < 0)
    operator delete(*v11);
  a10 = (void **)v10;
  std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<kaldi::quasar::TranslationUtil::PathElement>::__init_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<kaldi::quasar::TranslationUtil::PathElement>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>,kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1AD809BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<kaldi::quasar::TranslationUtil::PathElement>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x111111111111112)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[240 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>,kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      kaldi::quasar::TranslationUtil::PathElement::PathElement((std::string *)(a4 + v7), (const kaldi::quasar::TranslationUtil::PathElement *)(a2 + v7));
      v7 += 240;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1AD809C84(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 240;
    do
    {
      kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)(v4 + v2));
      v2 -= 240;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)(v4 - 272));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

kaldi::nnet1::LayerNorm *kaldi::nnet1::LayerNorm::LayerNorm(kaldi::nnet1::LayerNorm *this, const kaldi::nnet1::LayerNorm *a2)
{
  char *v4;

  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = &off_1E5D325C8;
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_BYTE *)this + 52) = *((_BYTE *)a2 + 52);
  *((_QWORD *)this + 7) = &unk_1E5D341C8;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = &unk_1E5D341C8;
  v4 = (char *)this + 88;
  *((_QWORD *)this + 12) = 0;
  kaldi::CuVector<float>::operator=((uint64_t)this + 56, (uint64_t)a2 + 56);
  kaldi::CuVector<float>::operator=((uint64_t)v4, (uint64_t)a2 + 88);
  return this;
}

void sub_1AD809DB8(_Unwind_Exception *a1)
{
  kaldi::nnet1::Component *v1;
  _QWORD *v2;
  _QWORD *v3;

  kaldi::CuVector<float>::~CuVector(v3);
  kaldi::CuVector<float>::~CuVector(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LayerNorm::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  float v17;
  _QWORD v18[2];
  int v19;
  _QWORD v20[4];
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *(unsigned int *)(a2 + 20);
  v27 = 0;
  v28 = 0;
  v25 = &unk_1E5D341C8;
  v26 = 0;
  kaldi::CuVector<float>::Resize((uint64_t)&v25, v6, 0);
  if (*(int *)(a2 + 20) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * (int)v7;
      v9 = *(_DWORD *)(a2 + 16);
      v10 = *(_QWORD *)(a2 + 32);
      v21 = &unk_1E5D29D70;
      v22 = v8;
      v24 = v10;
      v23 = v9;
      v11 = kaldi::CuVectorBase<float>::Sum((uint64_t)&v21);
      *(float *)(v26 + 4 * v7++) = v11 / (float)(int)v23;
    }
    while (v7 < *(int *)(a2 + 20));
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a3, a2, 111);
  kaldi::CuMatrixBase<float>::AddVecToCols(a3, (uint64_t)&v25, -1.0, 1.0);
  v12 = *(unsigned int *)(a2 + 20);
  v23 = 0;
  v24 = 0;
  v21 = &unk_1E5D341C8;
  v22 = 0;
  kaldi::CuVector<float>::Resize((uint64_t)&v21, v12, 0);
  if (*(int *)(a2 + 20) >= 1)
  {
    v13 = 0;
    do
    {
      v14 = *(_QWORD *)(a3 + 8) + 4 * *(_DWORD *)(a3 + 24) * (int)v13;
      v15 = *(_DWORD *)(a3 + 16);
      v16 = *(_QWORD *)(a3 + 32);
      v20[0] = &unk_1E5D29D70;
      v20[1] = v14;
      v20[3] = v16;
      v20[2] = v15;
      kaldi::CuVector<float>::CuVector(v18, v20);
      kaldi::CuVectorBase<float>::MulElements((uint64_t)v18, (uint64_t)v20);
      v17 = kaldi::CuVectorBase<float>::Sum((uint64_t)v18);
      *(float *)(v22 + 4 * v13) = 1.0
                                / (float)(*(float *)(a1 + 48) + sqrtf(v17 / (float)(v19 - *(unsigned __int8 *)(a1 + 52))));
      v18[0] = &unk_1E5D341C8;
      kaldi::CuVector<float>::Destroy((uint64_t)v18);
      ++v13;
    }
    while (v13 < *(int *)(a2 + 20));
  }
  kaldi::CuMatrixBase<float>::MulRowsVec(a3, (uint64_t)&v21);
  kaldi::CuMatrixBase<float>::MulColsVec(a3, a1 + 56);
  kaldi::CuMatrixBase<float>::AddVecToRows(a3, a1 + 88, 1.0, 1.0);
  v21 = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)&v21);
  v25 = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)&v25);
}

void sub_1AD809FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LayerNorm::Info(kaldi::nnet1::LayerNorm *this)
{
  void *p_p;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD v11[2];
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v11);
  kaldi::WriteToken(v12, 0, "<Epsilon>");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
  std::ostream::operator<<();
  kaldi::WriteToken(v12, 0, "<UnbiasedVar>");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
  std::ostream::operator<<();
  kaldi::WriteToken(v12, 0, "<Gamma>");
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 56);
  if ((v10 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v10 & 0x80u) == 0)
    v3 = v10;
  else
    v3 = v9;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)p_p, v3);
  if ((char)v10 < 0)
    operator delete(__p);
  kaldi::WriteToken(v12, 0, "<Beta>");
  kaldi::nnet1::MomentStatistics<float>((uint64_t)this + 88);
  if ((v10 & 0x80u) == 0)
    v4 = &__p;
  else
    v4 = __p;
  if ((v10 & 0x80u) == 0)
    v5 = v10;
  else
    v5 = v9;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v4, v5);
  if ((char)v10 < 0)
    operator delete(__p);
  std::stringbuf::str();
  v11[0] = *MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v12[0] = v6;
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v14);
}

void sub_1AD80A1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LayerNorm::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  float *v8;
  char v9;
  __int128 *v10;
  uint64_t v12;
  BOOL v13;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  _QWORD *v24;
  __int128 *p_p;
  uint64_t v26;
  char *v27;
  __int128 __p;
  uint64_t v29;
  _QWORD v30[36];

  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v30, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Reading LayerNorm component", 27);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v30);
  }
  __p = 0uLL;
  v29 = 0;
  v6 = a1 + 88;
  v7 = a1 + 56;
  v27 = (char *)(a1 + 52);
  v8 = (float *)(a1 + 48);
  while (1)
  {
    if (kaldi::Peek(a2, a3) != 60)
    {
      v9 = HIBYTE(v29);
      goto LABEL_62;
    }
    kaldi::ReadToken(a2, a3, (uint64_t)&__p);
    v9 = HIBYTE(v29);
    if ((SHIBYTE(v29) & 0x80000000) == 0)
      break;
    v12 = *((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1) == 9
      && (*(_QWORD *)__p == 0x6E6F6C697370453CLL ? (v13 = *(_BYTE *)(__p + 8) == 62) : (v13 = 0), v13))
    {
LABEL_35:
      kaldi::ReadBasicType<float>(a2, a3, v8);
    }
    else if (*((_QWORD *)&__p + 1) == 13)
    {
      if (*(_QWORD *)__p != 0x65736169626E553CLL || *(_QWORD *)(__p + 5) != 0x3E72615664657361)
      {
        v12 = *((_QWORD *)&__p + 1);
        goto LABEL_23;
      }
LABEL_53:
      kaldi::ReadBasicType<BOOL>(a2, a3, v27);
    }
    else
    {
LABEL_23:
      if (v12 == 7)
      {
        v15 = *(_DWORD *)__p == 1835091772 && *(_DWORD *)(__p + 3) == 1046572397;
        v16 = v7;
        if (v15)
          goto LABEL_52;
        v12 = *((_QWORD *)&__p + 1);
      }
      if (v12 != 6)
        goto LABEL_55;
      v17 = *(_DWORD *)__p == 1952793148 && *(_WORD *)(__p + 4) == 15969;
      v16 = v6;
      if (!v17)
      {
        v12 = *((_QWORD *)&__p + 1);
LABEL_55:
        if (v12 == 12)
        {
          v10 = (__int128 *)__p;
          goto LABEL_57;
        }
LABEL_67:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Unrecognized token ", 19);
        if (v29 >= 0)
          p_p = &__p;
        else
          p_p = (__int128 *)__p;
        if (v29 >= 0)
          v26 = HIBYTE(v29);
        else
          v26 = *((_QWORD *)&__p + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)p_p, v26);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v30);
      }
LABEL_52:
      kaldi::CuVector<float>::Read(v16, a2, a3);
    }
  }
  v10 = &__p;
  switch(HIBYTE(v29))
  {
    case 6:
      goto LABEL_47;
    case 7:
      goto LABEL_42;
    case 9:
      if ((_QWORD)__p != 0x6E6F6C697370453CLL || BYTE8(__p) != 62)
        goto LABEL_67;
      goto LABEL_35;
    case 0xC:
      goto LABEL_57;
    case 0xD:
      if ((_QWORD)__p == 0x65736169626E553CLL && *(_QWORD *)((char *)&__p + 5) == 0x3E72615664657361)
        goto LABEL_53;
      if (HIBYTE(v29) == 6)
        goto LABEL_47;
      if (HIBYTE(v29) == 7)
      {
LABEL_42:
        v19 = (_DWORD)__p == 1835091772 && *(_DWORD *)((char *)&__p + 3) == 1046572397;
        v16 = v7;
        if (!v19)
        {
          if (HIBYTE(v29) != 6)
            goto LABEL_67;
LABEL_47:
          v20 = (_DWORD)__p == 1952793148 && WORD2(__p) == 15969;
          v16 = v6;
          if (!v20)
            goto LABEL_67;
        }
        goto LABEL_52;
      }
      if (HIBYTE(v29) != 12)
        goto LABEL_67;
      v10 = &__p;
LABEL_57:
      v21 = *(_QWORD *)v10;
      v22 = *((_DWORD *)v10 + 2);
      if (v21 != 0x6E6F706D6F432F3CLL || v22 != 1047817829)
        goto LABEL_67;
LABEL_62:
      if (v9 < 0)
        operator delete((void *)__p);
      return;
    default:
      goto LABEL_67;
  }
}

void sub_1AD80A5B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::nnet1::LayerNorm::WriteData(uint64_t a1, _QWORD *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<Epsilon>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<UnbiasedVar>");
  kaldi::WriteBasicType<BOOL>(a2, a3, *(unsigned __int8 *)(a1 + 52));
  kaldi::WriteToken(a2, a3, "<Gamma>");
  kaldi::CuVectorBase<float>::Write(a1 + 56, a2, a3);
  kaldi::WriteToken(a2, a3, "<Beta>");
  kaldi::CuVectorBase<float>::Write(a1 + 88, a2, a3);
  return kaldi::WriteToken(a2, a3, "</Component>");
}

void kaldi::nnet1::LayerNorm::~LayerNorm(kaldi::nnet1::LayerNorm *this)
{
  kaldi::nnet1::LayerNorm::~LayerNorm(this);
  JUMPOUT(0x1AF44D190);
}

{
  *(_QWORD *)this = &off_1E5D325C8;
  *((_QWORD *)this + 11) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 88);
  *((_QWORD *)this + 7) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 56);
  kaldi::nnet1::Component::~Component(this);
}

kaldi::nnet1::LayerNorm *kaldi::nnet1::LayerNorm::Copy(kaldi::nnet1::LayerNorm *this)
{
  kaldi::nnet1::LayerNorm *v2;

  v2 = (kaldi::nnet1::LayerNorm *)operator new();
  kaldi::nnet1::LayerNorm::LayerNorm(v2, this);
  return v2;
}

void sub_1AD80A710(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C40D558B94DLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::LayerNorm::GetType(kaldi::nnet1::LayerNorm *this)
{
  return 290;
}

uint64_t loggableFileObject(uint64_t *a1)
{
  uint64_t v2;
  const char *v3;
  size_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int *v7;
  void **v8;
  size_t v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  _QWORD v14[11];
  char v15;
  uint64_t v16;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  v2 = *a1;
  if (*a1)
  {
    v3 = (const char *)(v2 + 48);
    if (*(char *)(v2 + 71) < 0)
      v3 = *(const char **)v3;
  }
  else
  {
    v3 = "[dynamic object]";
  }
  v4 = strlen(v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" (", 2);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") : ", 4);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" attribute '", 12);
  v7 = (unsigned int *)a1[1];
  v8 = __p;
  loggableUnicode(v7, __p);
  if (v13 < 0)
    v8 = (void **)__p[0];
  v9 = strlen((const char *)v8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"' : ", 4);
  if (v13 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v14[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v14[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v15 < 0)
    operator delete((void *)v14[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v16);
}

void sub_1AD80A914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t TFileObject::verify(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5;
  void **v6;
  char v7;
  uint64_t v10;
  uint64_t v12;
  void **v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  void **v24;
  unint64_t v25;
  unint64_t *v26;
  int v27;
  void **v28;
  uint64_t v29;
  void **v30;
  void **v31;
  void *v33[2];
  char v34;
  void *v35[2];
  char v36;
  void *__p[2];
  char v38;

  if (*(_DWORD *)(a1 + 40))
  {
    loggableFileObject((uint64_t *)a1);
    if (v38 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    tknPrintf("Error: %sBad attribute declaration, expected an object\n", v5, v6);
    if (v38 < 0)
      operator delete(__p[0]);
    v7 = 1;
    return v7 & 1;
  }
  v10 = *(_QWORD *)(a1 + 24);
  if (v10)
    a4 = 1;
  if ((a4 & 1) == 0)
  {
    loggableFileObject((uint64_t *)a1);
    v13 = v38 >= 0 ? __p : (void **)__p[0];
    tknPrintf("Error: %sObject has no attributes\n", v12, v13);
    if (v38 < 0)
      operator delete(__p[0]);
  }
  v7 = a4 ^ 1;
  LOBYTE(v35[0]) = 0;
  std::vector<BOOL>::vector(__p, a3, (unsigned __int8 *)v35);
  if (*(_QWORD *)a1)
    v14 = *(_QWORD *)(*(_QWORD *)a1 + 72);
  else
    v14 = 0;
  if (v10)
  {
    while (1)
    {
      v15 = 0;
      if (a3)
        break;
LABEL_44:
      if (v15 == a3)
      {
LABEL_45:
        loggableFileObject((uint64_t *)v10);
        v24 = v35;
        if (v36 < 0)
          v24 = (void **)v35[0];
        tknPrintf("Error: %sInvalid attribute\n", v23, v24);
        if (v36 < 0)
          operator delete(v35[0]);
        v7 = 1;
      }
      v10 = *(_QWORD *)(v10 + 16);
      if (!v10)
        goto LABEL_51;
    }
    v16 = (unint64_t *)(a2 + 24);
    while (wcscmp(*(const __int32 **)(v10 + 8), (const __int32 *)*(v16 - 3)))
    {
      ++v15;
      v16 += 4;
      if (a3 == v15)
        goto LABEL_45;
    }
    if ((*((_QWORD *)__p[0] + (v15 >> 6)) & (1 << v15)) != 0 && (*(_BYTE *)(v16 - 2) & 1) == 0)
    {
      loggableFileObject((uint64_t *)v10);
      v18 = v35;
      if (v36 < 0)
        v18 = (void **)v35[0];
      tknPrintf("Error: %sRedefinition\n", v17, v18);
LABEL_40:
      if (v36 < 0)
        operator delete(v35[0]);
      v7 = 1;
      goto LABEL_43;
    }
    if (v14)
    {
      if (v14 < *(v16 - 1))
      {
        loggableFileObject((uint64_t *)v10);
        v20 = v35;
        if (v36 < 0)
          v20 = (void **)v35[0];
        tknPrintf("Error: %sAttribute not supported in file version %lld; file version must be at least %lld\n",
          v19,
          v20,
          v14,
          *(v16 - 1));
        goto LABEL_40;
      }
      if (v14 > *v16)
      {
        loggableFileObject((uint64_t *)v10);
        v22 = v35;
        if (v36 < 0)
          v22 = (void **)v35[0];
        tknPrintf("Error: %sAttribute not supported in file version %lld; file version may not be greater than %lld\n",
          v21,
          v22,
          v14,
          *v16);
        goto LABEL_40;
      }
    }
LABEL_43:
    *((_QWORD *)__p[0] + (v15 >> 6)) |= 1 << v15;
    goto LABEL_44;
  }
LABEL_51:
  if (a3)
  {
    v25 = 0;
    v26 = (unint64_t *)(a2 + 16);
    do
    {
      if (((*(_QWORD *)((char *)__p[0] + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v25) & 1) == 0
        && (*(_BYTE *)(v26 - 1) & 2) == 0
        && (!v14 || v14 >= *v26 && v14 <= v26[1]))
      {
        loggableFileObject((uint64_t *)a1);
        v27 = v36;
        v28 = (void **)v35[0];
        loggableUnicode((unsigned int *)*(v26 - 2), v33);
        if (v27 >= 0)
          v30 = v35;
        else
          v30 = v28;
        if (v34 >= 0)
          v31 = v33;
        else
          v31 = (void **)v33[0];
        tknPrintf("Error: %sMissing declaration of '%s'\n", v29, v30, v31);
        if (v34 < 0)
          operator delete(v33[0]);
        if (v36 < 0)
          operator delete(v35[0]);
        v7 = 1;
      }
      ++v25;
      v26 += 4;
    }
    while (a3 != v25);
  }
  if (__p[0])
    operator delete(__p[0]);
  return v7 & 1;
}

void sub_1AD80ACE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TFileObject::verify(TFileObject *this, char a2, char a3)
{
  int v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  void *__p[2];
  char v13;

  v3 = *((_DWORD *)this + 10);
  if (v3)
  {
    if (v3 != 2 || (a2 & 1) != 0)
    {
      v8 = 0;
      if (**((_DWORD **)this + 3) || (a3 & 1) != 0)
        return v8;
      loggableFileObject((uint64_t *)this);
      if (v13 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      tknPrintf("Error: %sEmpty string not allowed here\n", v9, v10);
    }
    else
    {
      loggableFileObject((uint64_t *)this);
      if (v13 >= 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      tknPrintf("Error: %sRegExp not supported here\n", v4, v5);
    }
  }
  else
  {
    loggableFileObject((uint64_t *)this);
    if (v13 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    tknPrintf("Error: %sBad attribute declaration, expected a string\n", v6, v7);
  }
  if (v13 < 0)
    operator delete(__p[0]);
  return 1;
}

void sub_1AD80AE50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TFileObject::getAttribute(uint64_t a1, __int32 *a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 24); i; i = *(_QWORD *)(i + 16))
  {
    if (!wcscmp(*(const __int32 **)(i + 8), a2))
      break;
  }
  return i;
}

void TFileObject::collectAttributes(uint64_t a1, __int32 *a2, void **a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    v6 = (uint64_t)(a3 + 2);
    do
    {
      if (!wcscmp(*(const __int32 **)(v3 + 8), a2))
      {
        v8 = a3[1];
        v7 = (unint64_t)a3[2];
        if ((unint64_t)v8 >= v7)
        {
          v10 = ((char *)v8 - (_BYTE *)*a3) >> 3;
          if ((unint64_t)(v10 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v11 = v7 - (_QWORD)*a3;
          v12 = v11 >> 2;
          if (v11 >> 2 <= (unint64_t)(v10 + 1))
            v12 = v10 + 1;
          if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
            v13 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v13 = v12;
          if (v13)
            v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v6, v13);
          else
            v14 = 0;
          v15 = &v14[8 * v10];
          *(_QWORD *)v15 = v3;
          v9 = v15 + 8;
          v17 = (char *)*a3;
          v16 = (char *)a3[1];
          if (v16 != *a3)
          {
            do
            {
              v18 = *((_QWORD *)v16 - 1);
              v16 -= 8;
              *((_QWORD *)v15 - 1) = v18;
              v15 -= 8;
            }
            while (v16 != v17);
            v16 = (char *)*a3;
          }
          *a3 = v15;
          a3[1] = v9;
          a3[2] = &v14[8 * v13];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *v8 = v3;
          v9 = v8 + 1;
        }
        a3[1] = v9;
      }
      v3 = *(_QWORD *)(v3 + 16);
    }
    while (v3);
  }
}

void TFileObjectParser::TFileObjectParser(TFileObjectParser *this, const TLocaleInfo **a2)
{
  TAllocator *v4;
  TRegExp **v5;
  const TLocaleInfo *v6;
  const TFileObject *Objects;
  _QWORD *v8;
  std::exception_vtbl *v9;
  _QWORD *exception;
  std::exception v11[3];
  char v12;
  __int128 v13;
  char v14;

  v4 = (TFileObjectParser *)((char *)this + 8);
  TAllocator::TAllocator((TFileObjectParser *)((char *)this + 8), 2048);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *(_QWORD *)this = 0;
  if (TInputStream::verifyVersion((TInputStream *)a2, "ObjectFormatVersion", 1uLL, 1uLL, 1uLL))
  {
    std::string::basic_string[abi:ne180100]<0>(&v13, "");
    TException::TException(v11, &v13);
    v11[0].__vftable = (std::exception_vtbl *)&unk_1E5D16668;
    if (v12 >= 0)
      v9 = (std::exception_vtbl *)&v11[1];
    else
      v9 = v11[1].__vftable;
    conditionalAssert((const char *)v9, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/objectparser.cpp", 247);
    TException::~TException(v11);
    if (v14 < 0)
      operator delete((void *)v13);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v11, "");
    TException::TException(exception, (__int128 *)v11);
    *exception = &unk_1E5D16668;
  }
  v5 = (TRegExp **)TLexerLexicon::TLexerLexicon((TLexerLexicon *)&v13, a2[22]);
  initLexicon(v5);
  TLexer::TLexer((TLexer *)v11, (TInputStream *)a2, 1uLL, (const TLexerLexicon *)&v13, 0);
  if (*((char *)a2 + 39) >= 0)
    v6 = (const TLocaleInfo *)(a2 + 2);
  else
    v6 = a2[2];
  MEMORY[0x1AF44C914]((char *)this + 48, v6);
  *((_QWORD *)this + 9) = a2[12];
  Objects = TFileObjectParser::loadObjects(this, (TLexer *)v11);
  v8 = TAllocator::allocate(v4, 48);
  *((_DWORD *)v8 + 10) = 0;
  v8[3] = Objects;
  v8[4] = 0;
  *v8 = this;
  v8[1] = &dword_1AE141DD8;
  v8[2] = 0;
  *(_QWORD *)this = v8;
  TLexer::~TLexer((TLexer *)v11);
  TLexerLexicon::~TLexerLexicon((TLexerLexicon *)&v13);
}

void sub_1AD80B190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  TAllocator *v16;
  void **v17;
  void *v18;
  int v19;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v15 + 71) < 0)
        operator delete(*v17);
      TAllocator::clear(v16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

TRegExpCompiler *initLexicon(TRegExp **a1)
{
  TLexerLexicon::addLiteral((uint64_t)a1, (uint64_t)"=", 5);
  TLexerLexicon::addLiteral((uint64_t)a1, (uint64_t)"{", 6);
  TLexerLexicon::addLiteral((uint64_t)a1, (uint64_t)"}", 7);
  TLexerLexicon::addLiteral((uint64_t)a1, (uint64_t)"(", 8);
  TLexerLexicon::addLiteral((uint64_t)a1, (uint64_t)")", 9);
  TLexerLexicon::addString(a1, 39, 3, 2);
  TLexerLexicon::addString(a1, 96, 4, 0);
  TLexerLexicon::addString(a1, 34, 2, 1);
  TLexerLexicon::addRegExp((uint64_t)a1, (__int32 *)"[", 1);
  return TLexerLexicon::doneAdding(a1);
}

const TFileObject *TFileObjectParser::loadObjects(TFileObjectParser *this, TLexer *a2)
{
  const TFileObject *v4;
  const TFileObject *i;
  const TFileObject *Object;
  const TFileObject *v7;

  if (*((_QWORD *)a2 + 3) < (unint64_t)((uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3))
  {
    v4 = 0;
    i = 0;
    while (1)
    {
      Object = TFileObjectParser::makeObject((uint64_t)this, a2, &dword_1AE141DD8);
      if (i)
      {
        *((_QWORD *)v4 + 2) = Object;
        v7 = Object;
        Object = v4;
        if (v7)
          goto LABEL_5;
      }
      else
      {
        v7 = (const TFileObject *)*((_QWORD *)Object + 2);
        for (i = Object; v7; v7 = (const TFileObject *)*((_QWORD *)v7 + 2))
LABEL_5:
          Object = v7;
      }
      v4 = Object;
      if (*((_QWORD *)a2 + 3) >= (unint64_t)((uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 3))
        return i;
    }
  }
  return 0;
}

_QWORD *TFileObjectParser::TFileObjectParser(_QWORD *a1, uint64_t a2, uint64_t a3, const TLocaleInfo *a4)
{
  TAllocator *v7;
  TRegExp **v8;
  const TFileObject *Objects;
  _QWORD *v10;
  _BYTE v12[112];
  _BYTE v13[56];

  v7 = (TAllocator *)(a1 + 1);
  TAllocator::TAllocator((TAllocator *)(a1 + 1), 2048);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  *a1 = 0;
  v8 = (TRegExp **)TLexerLexicon::TLexerLexicon((TLexerLexicon *)v13, a4);
  initLexicon(v8);
  TLexer::TLexer(v12, a2, 1, v13, 0);
  MEMORY[0x1AF44C914](a1 + 6, "[dynamic text object]");
  a1[9] = 1;
  Objects = TFileObjectParser::loadObjects((TFileObjectParser *)a1, (TLexer *)v12);
  v10 = TAllocator::allocate(v7, 48);
  *((_DWORD *)v10 + 10) = 0;
  v10[3] = Objects;
  v10[4] = 0;
  *v10 = a1;
  v10[1] = &dword_1AE141DD8;
  v10[2] = 0;
  *a1 = v10;
  TLexer::~TLexer((TLexer *)v12);
  TLexerLexicon::~TLexerLexicon((TLexerLexicon *)v13);
  return a1;
}

void sub_1AD80B4BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  TAllocator *v3;
  void **v4;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  TLexer::~TLexer((TLexer *)va);
  TLexerLexicon::~TLexerLexicon((TLexerLexicon *)(v5 - 104));
  if (*(char *)(v2 + 71) < 0)
    operator delete(*v4);
  TAllocator::clear(v3);
  _Unwind_Resume(a1);
}

void TFileObjectParser::~TFileObjectParser(void **this)
{
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  TAllocator::clear((TAllocator *)(this + 1));
}

__n128 TFileObjectParser::instantiateObject(TFileObjectParser *this, const TFileObject *a2, const TFileObject *a3)
{
  int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int *v11;
  __int32 *v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  int v17;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t i;
  int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  __n128 result;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  std::exception_vtbl *v38;
  uint64_t v39;
  std::exception *v40;
  void **v41;
  std::exception_vtbl *v42;
  _QWORD *exception;
  std::exception v44[2];
  char v45;
  char v46;
  void *__p[2];
  char v48;
  __int32 *v49;
  __int128 v50;
  uint64_t v51;
  char v52;
  __int32 __s2[256];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)a2 + 10);
  if (!v6)
  {
    v23 = *((_QWORD *)a2 + 3);
    if (!v23)
    {
      v7 = 0;
LABEL_58:
      v34 = TAllocator::allocate((TFileObjectParser *)((char *)this + 8), 48);
      v36 = *((_QWORD *)a2 + 4);
      *((_DWORD *)v34 + 10) = 0;
      v34[4] = v36;
      goto LABEL_59;
    }
    i = 0;
    v7 = 0;
    v25 = 0;
    while (!wcscmp(*(const __int32 **)(v23 + 8), (const __int32 *)"I"))
    {
LABEL_49:
      v23 = *(_QWORD *)(v23 + 16);
      if (!v23)
        goto LABEL_58;
    }
    v26 = TFileObjectParser::instantiateObject(this, (const TFileObject *)v23, a3);
    if (v7)
    {
      *(_QWORD *)(i + 16) = v26;
      v28 = v26;
      if (v26)
        goto LABEL_47;
    }
    else
    {
      v28 = *(_QWORD *)(v26 + 16);
      v7 = (_QWORD *)v26;
      for (i = v26; v28; v28 = *(_QWORD *)(v28 + 16))
LABEL_47:
        i = v28;
    }
    v25 |= v27 & 1;
    goto LABEL_49;
  }
  if (v6 != 3)
  {
    v29 = TAllocator::allocate((TFileObjectParser *)((char *)this + 8), 48);
    *((_DWORD *)v29 + 10) = *((_DWORD *)a2 + 10);
    result = *(__n128 *)a2;
    *(_OWORD *)v29 = *(_OWORD *)a2;
    v29[4] = *((_QWORD *)a2 + 4);
    v29[2] = *((_QWORD *)a2 + 2);
    v31 = *((_QWORD *)a2 + 3);
    v29[2] = 0;
    v29[3] = v31;
    return result;
  }
  v7 = (_QWORD *)*((_QWORD *)a2 + 3);
  v8 = *((_QWORD *)a3 + 3);
  if (v8)
  {
    v9 = 0;
    do
    {
      v49 = __s2;
      v50 = xmmword_1AE1418C0;
      v52 = 0;
      TBuffer<wchar_t>::assign((uint64_t)&v49, dword_1AE141DDC);
      v10 = 0;
      v11 = *(int **)(v8 + 8);
      while (v11[v10++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)&v49, *((unint64_t *)&v50 + 1), v11, v10 - 1);
      LODWORD(v44[0].__vftable) = 41;
      TBuffer<wchar_t>::insert((uint64_t)&v49, *((unint64_t *)&v50 + 1), (int *)v44, 1uLL);
      if (*((_QWORD *)&v50 + 1) >= (unint64_t)v50)
      {
        if (v52)
        {
          LODWORD(v44[0].__vftable) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v49, *((unint64_t *)&v50 + 1), (int *)v44, 1uLL);
          --*((_QWORD *)&v50 + 1);
        }
        else if ((_QWORD)v50)
        {
          v49[(_QWORD)v50 - 1] = 0;
        }
      }
      else
      {
        v49[*((_QWORD *)&v50 + 1)] = 0;
      }
      if (!*(_DWORD *)(v8 + 40) && !wcscmp(__s2, (const __int32 *)v7))
      {
        v7 = *(_QWORD **)(v8 + 24);
        if (v7)
        {
          v19 = 0;
          v9 = 0;
          do
          {
            v20 = TAllocator::allocate((TFileObjectParser *)((char *)this + 8), 48);
            *((_DWORD *)v20 + 10) = *((_DWORD *)v7 + 10);
            *(_OWORD *)v20 = *(_OWORD *)v7;
            v20[4] = v7[4];
            v20[2] = v7[2];
            v21 = v7[3];
            v20[2] = 0;
            v20[3] = v21;
            if (v9)
            {
              v19[2] = v20;
              do
              {
                v22 = v20;
                v20 = (_QWORD *)v20[2];
              }
              while (v20);
              v20 = v22;
            }
            else
            {
              v9 = v20;
            }
            v7 = (_QWORD *)v7[2];
            v19 = v20;
          }
          while (v7);
        }
        else
        {
          v9 = 0;
        }
        v17 = 0;
      }
      else
      {
        v13 = wcsstr((__int32 *)v7, __s2);
        if (v13)
        {
          if (!*(_DWORD *)(v8 + 40))
          {
            loggableFileObject((uint64_t *)a2);
            v37 = v45;
            v38 = v44[0].__vftable;
            loggableFileObject((uint64_t *)v8);
            v40 = v44;
            if (v37 < 0)
              v40 = (std::exception *)v38;
            if (v48 >= 0)
              v41 = __p;
            else
              v41 = (void **)__p[0];
            tknPrintf("Error: %s%sCannot instantiate\n", v39, v40, v41);
            if (v48 < 0)
              operator delete(__p[0]);
            if (v45 < 0)
              operator delete(v44[0].__vftable);
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            TException::TException(v44, (__int128 *)__p);
            v44[0].__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
            if (v46 >= 0)
              v42 = (std::exception_vtbl *)&v44[1];
            else
              v42 = v44[1].__vftable;
            conditionalAssert((const char *)v42, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/objectparser.cpp", 366);
            TException::~TException(v44);
            if (v48 < 0)
              operator delete(__p[0]);
            exception = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v44, "");
            TException::TException(exception, (__int128 *)v44);
            *exception = &unk_1E5D16BC8;
          }
          v14 = wcslen(__s2);
          wcscpy(__s2, (const __int32 *)v7);
          wcscpy((__int32 *)((char *)__s2 + (char *)v13 - (char *)v7), *(const __int32 **)(v8 + 24));
          wcscat(__s2, &v13[v14]);
          v15 = wcslen(__s2);
          if ((v15 + 1) >> 62)
            v16 = -1;
          else
            v16 = 4 * (v15 + 1);
          v7 = TAllocator::allocate((TFileObjectParser *)((char *)this + 8), v16);
          wcscpy((__int32 *)v7, __s2);
        }
        v17 = 1;
      }
      if (v52)
      {
        if (v49 != (__int32 *)&v51 && v49 != 0)
          MEMORY[0x1AF44D160]();
      }
      if (!v17)
        break;
      v8 = *(_QWORD *)(v8 + 16);
    }
    while (v8);
    if (v9)
    {
      v32 = TAllocator::allocate((TFileObjectParser *)((char *)this + 8), 48);
      v33 = *((_QWORD *)a2 + 4);
      *((_DWORD *)v32 + 10) = 0;
      v32[4] = v33;
      result = *(__n128 *)a2;
      *(_OWORD *)v32 = *(_OWORD *)a2;
      v32[2] = 0;
      v32[3] = v9;
      return result;
    }
  }
  v34 = TAllocator::allocate((TFileObjectParser *)((char *)this + 8), 48);
  v35 = *((_QWORD *)a2 + 4);
  *((_DWORD *)v34 + 10) = *((_DWORD *)a2 + 10);
  v34[4] = v35;
LABEL_59:
  result = *(__n128 *)a2;
  *(_OWORD *)v34 = *(_OWORD *)a2;
  v34[2] = 0;
  v34[3] = v7;
  return result;
}

void sub_1AD80BA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  int v27;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0)
    {
LABEL_6:
      if (LOBYTE(STACK[0x488]))
      {
        if (a26 != a12 && a26 != 0)
          MEMORY[0x1AF44D160]();
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

const TFileObject *TFileObjectParser::instantiateObject(TFileObjectParser *this, const TFileObject *a2)
{
  const TFileObject **v4;
  unint64_t v5;
  const TFileObject *i;
  const TFileObject *v7;
  const TFileObject *v8;
  char v9;
  const TFileObject *v10;
  uint64_t v12;
  void **v13;
  const char *v14;
  _QWORD *exception;
  void *v16[2];
  char v17;
  void *__p[2];
  char v19;
  char v20;
  const TFileObject **v21;
  const TFileObject **v22;
  uint64_t v23;

  v21 = 0;
  v22 = 0;
  v23 = 0;
  TFileObject::collectAttributes((uint64_t)a2, (__int32 *)"I", (void **)&v21);
  v4 = v21;
  if (v21 != v22)
  {
    v5 = 0;
    i = 0;
    v7 = 0;
    while (1)
    {
      TFileObjectParser::instantiateObject(this, a2, v4[v5]);
      if ((v9 & 1) == 0)
      {
        loggableFileObject((uint64_t *)a2);
        if (v19 >= 0)
          v13 = __p;
        else
          v13 = (void **)__p[0];
        tknPrintf("Error: %sNothing to instantiate\n", v12, v13);
        if (v19 < 0)
          operator delete(__p[0]);
        std::string::basic_string[abi:ne180100]<0>(v16, "");
        TException::TException(__p, (__int128 *)v16);
        __p[0] = &unk_1E5D16BC8;
        if (v20 >= 0)
          v14 = (const char *)&__p[1];
        else
          v14 = (const char *)__p[1];
        conditionalAssert(v14, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/objectparser.cpp", 441);
        TException::~TException((std::exception *)__p);
        if (v17 < 0)
          operator delete(v16[0]);
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        TException::TException(exception, (__int128 *)__p);
        *exception = &unk_1E5D16BC8;
      }
      if (v7)
      {
        *((_QWORD *)i + 2) = v8;
        v10 = v8;
        if (v8)
          goto LABEL_6;
      }
      else
      {
        v10 = (const TFileObject *)*((_QWORD *)v8 + 2);
        v7 = v8;
        for (i = v8; v10; v10 = (const TFileObject *)*((_QWORD *)v10 + 2))
LABEL_6:
          i = v10;
      }
      ++v5;
      v4 = v21;
      if (v5 >= v22 - v21)
        goto LABEL_12;
    }
  }
  v7 = a2;
LABEL_12:
  if (v4)
  {
    v22 = v4;
    operator delete(v4);
  }
  return v7;
}

void sub_1AD80BD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25)
{
  void *v25;
  int v26;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      if (a24)
        operator delete(a24);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

const TFileObject *TFileObjectParser::makeObject(uint64_t a1, TLexer *a2, __int32 *a3)
{
  uint64_t Token;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  __int32 *v16;
  _QWORD *v17;
  _QWORD *j;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t i;
  size_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t Object;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  std::exception_vtbl *v45;
  uint64_t v46;
  std::exception *v47;
  void **v48;
  std::exception_vtbl *v49;
  _QWORD *v50;
  uint64_t v51;
  void *v52;
  std::exception_vtbl *v53;
  _QWORD *exception;
  uint64_t v55;
  void *v56;
  std::exception_vtbl *v57;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  std::exception_vtbl *v61;
  _QWORD *v62;
  void *__p[2];
  char v64;
  std::exception v65[2];
  char v66;
  char v67;

  Token = nextToken(a2, (uint64_t)a2);
  v8 = Token;
  v9 = *(_QWORD *)Token;
  if (*(_QWORD *)Token == 1)
  {
    v10 = wcslen(*(const __int32 **)(Token + 8));
    if ((v10 + 1) >> 62)
      v11 = -1;
    else
      v11 = 4 * (v10 + 1);
    a3 = (__int32 *)TAllocator::allocate((TAllocator *)(a1 + 8), v11);
    wcscpy(a3, *(const __int32 **)(v8 + 8));
    if (*(_QWORD *)nextToken(a2, v12) != 5)
    {
      loggableToken((uint64_t)a2);
      if (v66 >= 0)
        v52 = v65;
      else
        v52 = v65[0].__vftable;
      tknPrintf("Error: %sSyntax error, missing '='\n", v51, v52);
      if (v66 < 0)
        operator delete(v65[0].__vftable);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      TException::TException(v65, (__int128 *)__p);
      v65[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
      if (v67 >= 0)
        v53 = (std::exception_vtbl *)&v65[1];
      else
        v53 = v65[1].__vftable;
      conditionalAssert((const char *)v53, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/objectparser.cpp", 488);
      TException::~TException(v65);
      if (v64 < 0)
        operator delete(__p[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v65, "");
      TException::TException(exception, (__int128 *)v65);
      *exception = &unk_1E5D16AB0;
    }
    v8 = nextToken(a2, v13);
    v9 = *(_QWORD *)v8;
  }
  switch(v9)
  {
    case 2:
      v14 = wcslen(*(const __int32 **)(v8 + 8));
      if ((v14 + 1) >> 62)
        v15 = -1;
      else
        v15 = 4 * (v14 + 1);
      v16 = (__int32 *)TAllocator::allocate((TAllocator *)(a1 + 8), v15);
      wcscpy(v16, *(const __int32 **)(v8 + 8));
      v17 = TAllocator::allocate((TAllocator *)(a1 + 8), 48);
      j = v17;
      v19 = *(_QWORD *)(v8 + 16);
      v20 = 3;
      goto LABEL_33;
    case 3:
      v33 = wcslen(*(const __int32 **)(v8 + 8));
      if ((v33 + 1) >> 62)
        v34 = -1;
      else
        v34 = 4 * (v33 + 1);
      v16 = (__int32 *)TAllocator::allocate((TAllocator *)(a1 + 8), v34);
      wcscpy(v16, *(const __int32 **)(v8 + 8));
      v17 = TAllocator::allocate((TAllocator *)(a1 + 8), 48);
      j = v17;
      v19 = *(_QWORD *)(v8 + 16);
      v20 = 1;
      goto LABEL_33;
    case 4:
      v28 = wcslen(*(const __int32 **)(v8 + 8));
      if ((v28 + 1) >> 62)
        v29 = -1;
      else
        v29 = 4 * (v28 + 1);
      v16 = (__int32 *)TAllocator::allocate((TAllocator *)(a1 + 8), v29);
      wcscpy(v16, *(const __int32 **)(v8 + 8));
      v17 = TAllocator::allocate((TAllocator *)(a1 + 8), 48);
      j = v17;
      v19 = *(_QWORD *)(v8 + 16);
      v20 = 2;
LABEL_33:
      *((_DWORD *)v17 + 10) = v20;
      v17[3] = v16;
      v17[4] = v19;
      *v17 = a1;
      v17[1] = a3;
      v17[2] = 0;
      return (const TFileObject *)j;
    case 6:
      v30 = (_QWORD *)nextToken(a2, v7);
      if (*v30 == 7)
      {
        v31 = v30;
        i = 0;
        goto LABEL_48;
      }
      v36 = 0;
      i = 0;
      while (1)
      {
        v37 = *((_QWORD *)a2 + 3);
        if (v37)
          *((_QWORD *)a2 + 3) = v37 - 1;
        Object = TFileObjectParser::makeObject(a1, a2, &unk_1AE141DD8);
        v40 = Object;
        if (i)
        {
          *(_QWORD *)(v36 + 16) = Object;
          v41 = Object;
          v40 = v36;
          if (Object)
            goto LABEL_43;
        }
        else
        {
          v41 = *(_QWORD *)(Object + 16);
          for (i = Object; v41; v41 = *(_QWORD *)(v41 + 16))
LABEL_43:
            v40 = v41;
        }
        v42 = (_QWORD *)nextToken(a2, v39);
        v36 = v40;
        if (*v42 == 7)
        {
          v31 = v42;
LABEL_48:
          j = TAllocator::allocate((TAllocator *)(a1 + 8), 48);
          v43 = v31[2];
          *((_DWORD *)j + 10) = 0;
          j[3] = i;
          j[4] = v43;
          *j = a1;
          j[1] = a3;
          j[2] = 0;
          return TFileObjectParser::instantiateObject((TFileObjectParser *)a1, (const TFileObject *)j);
        }
      }
    case 8:
      v21 = nextToken(a2, v7);
      j = 0;
      v22 = 0;
      while (2)
      {
        if (*(_QWORD *)v21 != 9)
        {
          if (*(_QWORD *)v21 == 1)
          {
            loggableToken((uint64_t)a2);
            v44 = v66;
            v45 = v65[0].__vftable;
            loggableUnicode(*(unsigned int **)(v21 + 8), __p);
            if (v44 >= 0)
              v47 = v65;
            else
              v47 = (std::exception *)v45;
            if (v64 >= 0)
              v48 = __p;
            else
              v48 = (void **)__p[0];
            tknPrintf("Error: %sUnexpected attribute name '%s' in assignment list\n", v46, v47, v48);
            if (v64 < 0)
              operator delete(__p[0]);
            if (v66 < 0)
              operator delete(v65[0].__vftable);
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            TException::TException(v65, (__int128 *)__p);
            v65[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
            if (v67 >= 0)
              v49 = (std::exception_vtbl *)&v65[1];
            else
              v49 = v65[1].__vftable;
            conditionalAssert((const char *)v49, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/objectparser.cpp", 524);
            TException::~TException(v65);
            if (v64 < 0)
              operator delete(__p[0]);
            v50 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(v65, "");
            TException::TException(v50, (__int128 *)v65);
            *v50 = &unk_1E5D16AB0;
          }
          v23 = *((_QWORD *)a2 + 3);
          if (v23)
            *((_QWORD *)a2 + 3) = v23 - 1;
          v24 = TFileObjectParser::makeObject(a1, a2, a3);
          v26 = v24;
          if (j)
          {
            *(_QWORD *)(v22 + 16) = v24;
            v27 = v24;
            v26 = v22;
            if (v24)
              goto LABEL_19;
          }
          else
          {
            v27 = *(_QWORD *)(v24 + 16);
            for (j = (_QWORD *)v24; v27; v27 = *(_QWORD *)(v27 + 16))
LABEL_19:
              v26 = v27;
          }
          v21 = nextToken(a2, v25);
          v22 = v26;
          continue;
        }
        break;
      }
      if (!j)
      {
        loggableToken((uint64_t)a2);
        if (v66 >= 0)
          v56 = v65;
        else
          v56 = v65[0].__vftable;
        tknPrintf("Error: %sAssignment list is empty\n", v55, v56);
        if (v66 < 0)
          operator delete(v65[0].__vftable);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        TException::TException(v65, (__int128 *)__p);
        v65[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
        if (v67 >= 0)
          v57 = (std::exception_vtbl *)&v65[1];
        else
          v57 = v65[1].__vftable;
        conditionalAssert((const char *)v57, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/objectparser.cpp", 536);
        TException::~TException(v65);
        if (v64 < 0)
          operator delete(__p[0]);
        v58 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v65, "");
        TException::TException(v58, (__int128 *)v65);
        *v58 = &unk_1E5D16AB0;
      }
      if (!*((_DWORD *)j + 10))
        return TFileObjectParser::instantiateObject((TFileObjectParser *)a1, (const TFileObject *)j);
      return (const TFileObject *)j;
    default:
      loggableToken((uint64_t)a2);
      if (v66 >= 0)
        v60 = v65;
      else
        v60 = v65[0].__vftable;
      tknPrintf("Error: %sSyntax error\n", v59, v60);
      if (v66 < 0)
        operator delete(v65[0].__vftable);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      TException::TException(v65, (__int128 *)__p);
      v65[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
      if (v67 >= 0)
        v61 = (std::exception_vtbl *)&v65[1];
      else
        v61 = v65[1].__vftable;
      conditionalAssert((const char *)v61, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/objectparser.cpp", 571);
      TException::~TException(v65);
      if (v64 < 0)
        operator delete(__p[0]);
      v62 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v65, "");
      TException::TException(v62, (__int128 *)v65);
      *v62 = &unk_1E5D16AB0;
  }
}

void sub_1AD80C590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

uint64_t nextToken(TLexer *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  TLexer *v6;
  std::exception_vtbl *v7;
  _QWORD *exception;
  int v9;
  std::exception_vtbl *v10;
  uint64_t v11;
  std::exception *v12;
  void **v13;
  std::exception_vtbl *v14;
  _QWORD *v15;
  void *__p[2];
  char v17;
  std::exception v18[2];
  char v19;
  char v20;

  v2 = *((_QWORD *)a1 + 3);
  v3 = *((_QWORD *)a1 + 11);
  if (v2 >= (*((_QWORD *)a1 + 12) - v3) >> 3)
  {
    if (*((char *)a1 + 23) >= 0)
      v6 = a1;
    else
      v6 = *(TLexer **)a1;
    tknPrintf("Error: %s : Unexpected end of file\n", a2, v6);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v18, (__int128 *)__p);
    v18[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
    if (v20 >= 0)
      v7 = (std::exception_vtbl *)&v18[1];
    else
      v7 = v18[1].__vftable;
    conditionalAssert((const char *)v7, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/objectparser.cpp", 457);
    TException::~TException(v18);
    if (v17 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v18, "");
    TException::TException(exception, (__int128 *)v18);
    *exception = &unk_1E5D16AB0;
  }
  *((_QWORD *)a1 + 3) = v2 + 1;
  v4 = *(_QWORD *)(v3 + 8 * v2);
  if (v4 && *(_QWORD *)v4 == -1)
  {
    loggableToken((uint64_t)a1);
    v9 = v19;
    v10 = v18[0].__vftable;
    loggableUnicode(*(unsigned int **)(v4 + 8), __p);
    if (v9 >= 0)
      v12 = v18;
    else
      v12 = (std::exception *)v10;
    if (v17 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    tknPrintf("Error: %sSyntax error, found unexpected token '%s'\n", v11, v12, v13);
    if (v17 < 0)
      operator delete(__p[0]);
    if (v19 < 0)
      operator delete(v18[0].__vftable);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v18, (__int128 *)__p);
    v18[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
    if (v20 >= 0)
      v14 = (std::exception_vtbl *)&v18[1];
    else
      v14 = v18[1].__vftable;
    conditionalAssert((const char *)v14, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/objectparser.cpp", 465);
    TException::~TException(v18);
    if (v17 < 0)
      operator delete(__p[0]);
    v15 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v18, "");
    TException::TException(v15, (__int128 *)v18);
    *v15 = &unk_1E5D16AB0;
  }
  return *(_QWORD *)(v3 + 8 * v2);
}

{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  TLexer *v6;
  std::exception_vtbl *v7;
  _QWORD *exception;
  int v9;
  std::exception_vtbl *v10;
  uint64_t v11;
  std::exception *v12;
  void **v13;
  std::exception_vtbl *v14;
  _QWORD *v15;
  void *__p[2];
  char v17;
  std::exception v18[2];
  char v19;
  char v20;

  v2 = *((_QWORD *)a1 + 3);
  v3 = *((_QWORD *)a1 + 11);
  if (v2 >= (*((_QWORD *)a1 + 12) - v3) >> 3)
  {
    if (*((char *)a1 + 23) >= 0)
      v6 = a1;
    else
      v6 = *(TLexer **)a1;
    tknPrintf("Error: %s : Unexpected end of file\n", a2, v6);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v18, (__int128 *)__p);
    v18[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
    if (v20 >= 0)
      v7 = (std::exception_vtbl *)&v18[1];
    else
      v7 = v18[1].__vftable;
    conditionalAssert((const char *)v7, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 211);
    TException::~TException(v18);
    if (v17 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v18, "");
    TException::TException(exception, (__int128 *)v18);
    *exception = &unk_1E5D16AB0;
  }
  *((_QWORD *)a1 + 3) = v2 + 1;
  v4 = *(_QWORD *)(v3 + 8 * v2);
  if (v4 && *(_QWORD *)v4 == -1)
  {
    loggableToken((uint64_t)a1);
    v9 = v19;
    v10 = v18[0].__vftable;
    loggableUnicode(*(unsigned int **)(v4 + 8), __p);
    if (v9 >= 0)
      v12 = v18;
    else
      v12 = (std::exception *)v10;
    if (v17 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    tknPrintf("Error: %sFound unexpected token '%s'\n", v11, v12, v13);
    if (v17 < 0)
      operator delete(__p[0]);
    if (v19 < 0)
      operator delete(v18[0].__vftable);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v18, (__int128 *)__p);
    v18[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
    if (v20 >= 0)
      v14 = (std::exception_vtbl *)&v18[1];
    else
      v14 = v18[1].__vftable;
    conditionalAssert((const char *)v14, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/gramcomp.cpp", 219);
    TException::~TException(v18);
    if (v17 < 0)
      operator delete(__p[0]);
    v15 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v18, "");
    TException::TException(v15, (__int128 *)v18);
    *v15 = &unk_1E5D16AB0;
  }
  return *(_QWORD *)(v3 + 8 * v2);
}

void sub_1AD80C8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;

  if (a23 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

void TDataException::~TDataException(std::exception *this)
{
  TException::~TException(this);
  JUMPOUT(0x1AF44D190);
}

void TLexer::~TLexer(TLexer *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  TAllocator::clear((TLexer *)((char *)this + 32));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void TSemanticException::~TSemanticException(std::exception *this)
{
  TException::~TException(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::HwcnConfidence::HwcnConfidence(uint64_t a1, __int128 *a2)
{
  uint64_t v3;

  v3 = quasar::Decoder::Decoder(a1, a2);
  *(_QWORD *)v3 = &off_1E5D35168;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  kaldi::SilencePhoneSet::SilencePhoneSet((kaldi::SilencePhoneSet *)(v3 + 480));
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_DWORD *)(a1 + 696) = 100;
  *(_QWORD *)(a1 + 808) = 0;
  *(_QWORD *)(a1 + 824) = 0;
  *(_QWORD *)(a1 + 816) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_BYTE *)(a1 + 800) = 0;
  *(_DWORD *)(a1 + 832) = 1;
  *(_BYTE *)(a1 + 836) = 0;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_QWORD *)(a1 + 888) = 0;
  _ZNSt3__115allocate_sharedB8ne180100IN6marisa4TrieENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((_QWORD *)(a1 + 896));
  _ZNSt3__115allocate_sharedB8ne180100IN5kaldi6MatrixIfEENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_((_QWORD *)(a1 + 912));
  *(_QWORD *)(a1 + 928) = 0;
  *(_BYTE *)(a1 + 936) = 1;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_DWORD *)(a1 + 976) = 0;
  return a1;
}

void sub_1AD80CAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;
  kaldi::SilencePhoneSet *v13;
  uint64_t v14;
  void **v15;
  void **v16;
  uint64_t v17;
  uint64_t v19;

  v17 = v14;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v17);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v12 + 880);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v12 + 864);
  if (*(char *)(v12 + 863) < 0)
    operator delete(*v16);
  if (*(char *)(v12 + 831) < 0)
    operator delete(*(void **)(v12 + 808));
  if (*(char *)(v12 + 799) < 0)
    operator delete(*(void **)(v12 + 776));
  if (*(char *)(v12 + 775) < 0)
    operator delete(*(void **)(v12 + 752));
  if (*(char *)(v12 + 751) < 0)
    operator delete(*(void **)(v12 + 728));
  if (*(char *)(v12 + 727) < 0)
    operator delete(*(void **)(v12 + 704));
  if (*(char *)(v12 + 695) < 0)
    operator delete(*(void **)(v12 + 672));
  if (*(char *)(v12 + 671) < 0)
    operator delete(*(void **)(v12 + 648));
  if (*(char *)(v12 + 647) < 0)
    operator delete(*(void **)(v12 + 624));
  if (*(char *)(v12 + 623) < 0)
    operator delete(*(void **)(v12 + 600));
  if (*(char *)(v12 + 599) < 0)
    operator delete(*(void **)(v12 + 576));
  if (*(char *)(v12 + 575) < 0)
    operator delete(*v15);
  kaldi::SilencePhoneSet::~SilencePhoneSet(v13);
  a12 = (void **)(v12 + 456);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a12);
  v19 = *(_QWORD *)(v12 + 448);
  *(_QWORD *)(v12 + 448) = 0;
  if (v19)
    std::default_delete<kaldi::quasar::LatticeRnn>::operator()[abi:ne180100](v12 + 448, v19);
  quasar::Decoder::~Decoder((void **)v12);
  _Unwind_Resume(a1);
}

void kaldi::SilencePhoneSet::~SilencePhoneSet(kaldi::SilencePhoneSet *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
    operator delete(v3);
}

void quasar::HwcnConfidence::finishInit(quasar::HwcnConfidence *this)
{
  quasar::HwcnConfidence::initLatticeRnn(this);
  quasar::HwcnConfidence::initOtherStuff(this);
}

void quasar::HwcnConfidence::initLatticeRnn(quasar::HwcnConfidence *this)
{
  uint64_t v2;
  uint64_t v3;
  void *__p[2];
  char v5;

  v2 = operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  kaldi::quasar::LatticeRnn::LatticeRnn(v2, (char *)this + 552, (char *)this + 576, (char *)this + 600, __p, (char *)this + 624, 1);
  if (v5 < 0)
    operator delete(__p[0]);
  v3 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = v2;
  if (v3)
    std::default_delete<kaldi::quasar::LatticeRnn>::operator()[abi:ne180100]((uint64_t)this + 448, v3);
}

void sub_1AD80CD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1AF44D190](v15, 0x10B0C40310220B6);
  _Unwind_Resume(a1);
}

void quasar::HwcnConfidence::initOtherStuff(quasar::HwcnConfidence *this)
{
  std::locale::__imp *locale;
  unint64_t *v3;
  unint64_t v4;
  kaldi::Input *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  unsigned __int8 v8;
  std::locale::__imp *v9;
  unint64_t *v10;
  unint64_t v11;
  std::locale::__imp *v12;
  unint64_t *v13;
  unint64_t v14;
  int32x2_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  const std::string::value_type **v20;
  std::string::size_type v21;
  std::locale::__imp *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  void **v26;
  uint64_t v27;
  std::string v28;
  std::locale v29[2];
  void *v30[2];
  __int128 v31;
  void *__p[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[15];
  char v50;
  std::vector<unsigned int> v51;

  quasar::ModelLoader::readWordBoundaryInfo(*((_QWORD **)this + 46), (unsigned int *)this + 232, (uint64_t)this + 752, (uint64_t)this + 776, (uint64_t *)v29);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 944, (__int128 *)v29);
  locale = v29[1].__locale_;
  if (v29[1].__locale_)
  {
    v3 = (unint64_t *)((char *)v29[1].__locale_ + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)locale);
    }
  }
  memset(&v51, 0, sizeof(v51));
  v50 = 0;
  v5 = (kaldi::Input *)kaldi::Input::Input(v49, (char *)this + 672, &v50);
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v6 = (_QWORD *)kaldi::Input::Stream(v5);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
  v7 = std::locale::use_facet(v29, MEMORY[0x1E0DE4A90]);
  v8 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(v29);
  std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v6, (uint64_t)&v46, v8);
  if ((kaldi::SplitStringToIntegers<int>((uint64_t)&v46, ":", 1, &v51) & 1) == 0)
  {
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    *(_OWORD *)__p = 0u;
    v33 = 0u;
    *(_OWORD *)v30 = 0u;
    v31 = 0u;
    *(_OWORD *)&v29[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Invalid silence-phones string ", 30);
    if (v48 >= 0)
      v26 = (void **)&v46;
    else
      v26 = v46;
    if (v48 >= 0)
      v27 = HIBYTE(v48);
    else
      v27 = v47;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v29);
  }
  kaldi::SilencePhoneSet::SilencePhoneSet(v29, &v51);
  *((_DWORD *)this + 120) = v29[0].__locale_;
  *((std::locale *)this + 61) = v29[1];
  *((_WORD *)this + 248) = v30[0];
  std::vector<BOOL>::operator=((void **)this + 63, (uint64_t)&v30[1]);
  if ((std::locale *)((char *)this + 480) != v29)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 528, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v30[1])
    operator delete(v30[1]);
  if (SHIBYTE(v48) < 0)
    operator delete(v46);
  kaldi::Input::~Input((kaldi::Input *)v49);
  if (v51.__begin_)
  {
    v51.__end_ = v51.__begin_;
    operator delete(v51.__begin_);
  }
  if (*((char *)this + 727) < 0)
  {
    if (!*((_QWORD *)this + 89))
      goto LABEL_27;
  }
  else if (!*((_BYTE *)this + 727))
  {
    goto LABEL_27;
  }
  quasar::readMemMappedLockedFile((uint64_t)this + 704, v29);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 864, (__int128 *)v29);
  v9 = v29[1].__locale_;
  if (v29[1].__locale_)
  {
    v10 = (unint64_t *)((char *)v29[1].__locale_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)v9 + 16))(v9);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v9);
    }
  }
  marisa::Trie::map(*((marisa::grimoire::trie::LoudsTrie ***)this + 112), *(const void **)(*((_QWORD *)this + 108) + 8), *(_QWORD *)(*((_QWORD *)this + 108) + 24));
LABEL_27:
  if (*((char *)this + 751) < 0)
  {
    if (!*((_QWORD *)this + 92))
      goto LABEL_37;
  }
  else if (!*((_BYTE *)this + 751))
  {
    goto LABEL_37;
  }
  quasar::readMemMappedLockedFile((uint64_t)this + 728, v29);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 880, (__int128 *)v29);
  v12 = v29[1].__locale_;
  if (v29[1].__locale_)
  {
    v13 = (unint64_t *)((char *)v29[1].__locale_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)v12 + 16))(v12);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v12);
    }
  }
  kaldi::Input::Input(v29, (char *)this + 728, 0);
  v15 = (int32x2_t *)*((_QWORD *)this + 114);
  v16 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v29);
  kaldi::Matrix<float>::Read(v15, v16, 1, 0, *(_QWORD *)(*((_QWORD *)this + 110) + 8));
  kaldi::Input::Close((kaldi::Input *)v29);
  kaldi::Input::~Input((kaldi::Input *)v29);
LABEL_37:
  quasar::HwcnConfidence::initArcFeatExtractors((const std::string *)this);
  v17 = (uint64_t *)*((_QWORD *)this + 57);
  v18 = (uint64_t *)*((_QWORD *)this + 58);
  while (v17 != v18)
  {
    v19 = *v17;
    v17 += 2;
    *((_DWORD *)this + 244) += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
  }
  v20 = (const std::string::value_type **)((char *)this + 808);
  if (*((char *)this + 831) < 0)
  {
    v21 = *((_QWORD *)this + 102);
    if (!v21)
      goto LABEL_47;
    std::string::__init_copy_ctor_external(&v28, *v20, v21);
  }
  else
  {
    if (!*((_BYTE *)this + 831))
      goto LABEL_47;
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)v20;
    v28.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 103);
  }
  *((_DWORD *)this + 208) = kaldi::WordHypLattice::StringToCriteria((uint64_t *)&v28);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
LABEL_47:
  if (*((char *)this + 863) < 0)
  {
    if (!*((_QWORD *)this + 106))
      return;
  }
  else if (!*((_BYTE *)this + 863))
  {
    return;
  }
  std::allocate_shared[abi:ne180100]<quasar::CalibrationMap,std::allocator<quasar::CalibrationMap>,std::string &,void>((uint64_t)this + 840, v29);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 960, (__int128 *)v29);
  v22 = v29[1].__locale_;
  if (v29[1].__locale_)
  {
    v23 = (unint64_t *)((char *)v29[1].__locale_ + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)v22 + 16))(v22);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v22);
    }
  }
}

void sub_1AD80D1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::locale a16)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::SplitStringToIntegers<int>(uint64_t a1, const char *a2, int a3, std::vector<unsigned int> *a4)
{
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  unsigned int *begin;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *__endptr;

  if (*(char *)(a1 + 23) >= 0)
    v5 = (_BYTE *)a1;
  else
    v5 = *(_BYTE **)a1;
  if (*v5)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    kaldi::SplitStringToVector((const std::string *)a1, a2, a3, (uint64_t)&v14);
    std::vector<int>::resize(a4, 0xAAAAAAAAAAAAAAABLL * ((v15 - v14) >> 3));
    v6 = v14;
    if (v15 == v14)
    {
LABEL_13:
      v12 = 1;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = (const char *)(v6 + v7);
        if (*(char *)(v6 + v7 + 23) < 0)
          v9 = *(const char **)v9;
        __endptr = 0;
        v10 = strtoll(v9, &__endptr, 10);
        if (__endptr == v9 || *__endptr)
          break;
        begin = a4->__begin_;
        if (v10 != (int)v10)
          goto LABEL_16;
        begin[v8++] = v10;
        v6 = v14;
        v7 += 24;
        if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((v15 - v14) >> 3))
          goto LABEL_13;
      }
      begin = a4->__begin_;
LABEL_16:
      a4->__end_ = begin;
      v12 = 0;
    }
    __endptr = (char *)&v14;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__endptr);
  }
  else
  {
    a4->__end_ = a4->__begin_;
    return 1;
  }
  return v12;
}

void sub_1AD80D3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::HwcnConfidence::initArcFeatExtractors(const std::string *this)
{
  uint64_t size;
  std::string::pointer data;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v10;
  int *v13;
  _QWORD *v16;
  void *v17;
  void *v18;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  void *__p[2];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;

  size = this[19].__r_.__value_.__l.__size_;
  data = this[19].__r_.__value_.__l.__data_;
  while ((std::string::pointer)size != data)
    size = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](size - 16);
  this[19].__r_.__value_.__l.__size_ = (std::string::size_type)data;
  std::string::basic_string[abi:ne180100]<0>(__p, ",");
  quasar::splitAndTrimNoEmpty(this + 27, (char *)__p, &v82);
  if (SBYTE7(v65) < 0)
    operator delete(__p[0]);
  v4 = v82;
  v5 = v83;
  while (v4 != v5)
  {
    v81 = 0uLL;
    v6 = *(unsigned __int8 *)(v4 + 23);
    if ((v6 & 0x80) == 0)
    {
      v7 = (uint64_t *)v4;
      switch(*(_BYTE *)(v4 + 23))
      {
        case 6:
          if (*(_DWORD *)v4 == 1281315657 && *(_WORD *)(v4 + 4) == 17741)
            goto LABEL_43;
          if (v6 != 6)
            goto LABEL_140;
          if (*(_DWORD *)v4 != 1598377292 || *(_WORD *)(v4 + 4) != 17481)
            goto LABEL_38;
          goto LABEL_93;
        case 7:
          goto LABEL_77;
        case 0xA:
          if (*(_QWORD *)v4 == 0x424D455F44524F57 && *(_WORD *)(v4 + 8) == 17477)
            goto LABEL_83;
          if (*(_QWORD *)v4 == 0x4E4F48505F4D554ELL && *(_WORD *)(v4 + 8) == 21317)
            goto LABEL_149;
          if (v6 == 7)
            goto LABEL_77;
          if (v6 != 10)
            goto LABEL_140;
LABEL_66:
          if (*(_QWORD *)v4 == 0x4F435F4850415247 && *(_WORD *)(v4 + 8) == 21587)
            goto LABEL_153;
          if (v6 != 10)
            goto LABEL_140;
          if (*(_QWORD *)v4 != 0x4D4152465F4D554ELL || *(_WORD *)(v4 + 8) != 21317)
            goto LABEL_140;
          goto LABEL_159;
        case 0xC:
LABEL_49:
          if (*(_QWORD *)v4 == 0x5F545345425F4E49 && *(_DWORD *)(v4 + 8) == 1213481296)
            goto LABEL_148;
          if (v6 == 10)
            goto LABEL_66;
          if (v6 != 7)
            goto LABEL_140;
LABEL_77:
          if (*(_DWORD *)v4 != 1130316609 || *(_DWORD *)(v4 + 3) != 1414745923)
            goto LABEL_140;
          goto LABEL_146;
        case 0xD:
          goto LABEL_136;
        case 0x10:
          if (*(_QWORD *)v4 != 0x5F54534F435F4341 || *(_QWORD *)(v4 + 8) != 0x4445485355504E55)
          {
            v7 = (uint64_t *)v4;
            switch(*(_BYTE *)(v4 + 23))
            {
              case 7:
                goto LABEL_77;
              case 0xA:
                goto LABEL_66;
              case 0xC:
                goto LABEL_49;
              case 0xD:
                goto LABEL_136;
              default:
                goto LABEL_140;
            }
          }
          goto LABEL_147;
        default:
          goto LABEL_140;
      }
    }
    v10 = *(_QWORD *)(v4 + 8);
    if (v10 == 6)
    {
      if (**(_DWORD **)v4 == 1281315657 && *(_WORD *)(*(_QWORD *)v4 + 4) == 17741)
      {
LABEL_43:
        v16 = operator new(0x20uLL);
        v16[1] = 0;
        v16[2] = 0;
        v18 = &unk_1E5D357C0;
        v17 = &unk_1E5D42B80;
        goto LABEL_160;
      }
      v10 = *(_QWORD *)(v4 + 8);
      if (v10 == 6)
      {
        v13 = *(int **)v4;
        if (**(_DWORD **)v4 == 1598377292 && *(_WORD *)(*(_QWORD *)v4 + 4) == 17481)
        {
LABEL_93:
          v16 = operator new(0x20uLL);
          v16[1] = 0;
          v16[2] = 0;
          v18 = &unk_1E5D35820;
          v17 = &unk_1E5D42BF0;
          goto LABEL_160;
        }
        if ((v6 & 0x80) == 0)
        {
          if (v6 != 6)
            goto LABEL_140;
LABEL_38:
          if (*(_DWORD *)v4 != 1398756169 || *(_WORD *)(v4 + 4) != 19529)
          {
LABEL_140:
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v4, "LIN_POSTERIOR"))
            {
              v45 = operator new(0x20uLL);
              v45[1] = 0;
              v45[2] = 0;
              *v45 = &unk_1E5D43BB0;
              v45[3] = &unk_1E5D38960;
              __p[0] = v45 + 3;
              __p[1] = v45;
              std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&v81, (__int128 *)__p);
              std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)__p);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v4, "LIN_AC_POSTERIOR"))
            {
              v46 = operator new(0x20uLL);
              v46[1] = 0;
              v46[2] = 0;
              *v46 = &unk_1E5D44908;
              v46[3] = &unk_1E5D3A5C0;
              __p[0] = v46 + 3;
              __p[1] = v46;
              std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&v81, (__int128 *)__p);
              std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)__p);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v4, "LOG_AC_POSTERIOR"))
            {
              v47 = operator new(0x20uLL);
              v47[1] = 0;
              v47[2] = 0;
              *v47 = &unk_1E5D44940;
              v47[3] = &unk_1E5D3A5F8;
              __p[0] = v47 + 3;
              __p[1] = v47;
              std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&v81, (__int128 *)__p);
              std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)__p);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v4, "AC_COST_COLLAPSED_1"))
            {
              v48 = operator new(0x20uLL);
              v48[1] = 0;
              v48[2] = 0;
              *v48 = &unk_1E5D44BA8;
              v48[3] = &unk_1E5D3AE10;
              __p[0] = v48 + 3;
              __p[1] = v48;
              std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&v81, (__int128 *)__p);
              std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)__p);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v4, "LIN_POSTERIOR_1"))
            {
              v50 = operator new(0x20uLL);
              v50[1] = 0;
              v50[2] = 0;
              *v50 = &unk_1E5D43E50;
              v50[3] = &unk_1E5D38F20;
              __p[0] = v50 + 3;
              __p[1] = v50;
              std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&v81, (__int128 *)__p);
              std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)__p);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v4, "LOG_POSTERIOR_1"))
            {
              v52 = operator new(0x20uLL);
              v52[1] = 0;
              v52[2] = 0;
              *v52 = &unk_1E5D43E88;
              v52[3] = &unk_1E5D38F58;
              __p[0] = v52 + 3;
              __p[1] = v52;
              std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&v81, (__int128 *)__p);
              std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)__p);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v4, "AC_COST_2"))
            {
              v56 = operator new(0x20uLL);
              v56[1] = 0;
              v56[2] = 0;
              *v56 = &unk_1E5D43E18;
              v56[3] = &unk_1E5D38EE8;
              __p[0] = v56 + 3;
              __p[1] = v56;
              std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&v81, (__int128 *)__p);
              std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)__p);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v4, "AC_COST_UNPUSHED_2"))
            {
              v57 = operator new(0x20uLL);
              v57[1] = 0;
              v57[2] = 0;
              *v57 = &unk_1E5D449B0;
              v57[3] = &unk_1E5D3AA38;
              __p[0] = v57 + 3;
              __p[1] = v57;
              std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&v81, (__int128 *)__p);
              std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)__p);
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v4, "LIN_AC_POSTERIOR_2"))
            {
              v58 = operator new(0x20uLL);
              v58[1] = 0;
              v58[2] = 0;
              *v58 = &unk_1E5D449E8;
              v58[3] = &unk_1E5D3AA70;
              __p[0] = v58 + 3;
              __p[1] = v58;
              std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&v81, (__int128 *)__p);
              std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)__p);
            }
            else
            {
              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v4, "LOG_AC_POSTERIOR_2"))
              {
                v79 = 0u;
                v80 = 0u;
                v77 = 0u;
                v78 = 0u;
                v75 = 0u;
                v76 = 0u;
                v73 = 0u;
                v74 = 0u;
                v71 = 0u;
                v72 = 0u;
                v69 = 0u;
                v70 = 0u;
                v67 = 0u;
                v68 = 0u;
                v65 = 0u;
                v66 = 0u;
                *(_OWORD *)__p = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown feature type: ", 22);
                v61 = *(char *)(v4 + 23);
                if (v61 >= 0)
                  v62 = v4;
                else
                  v62 = *(_QWORD *)v4;
                if (v61 >= 0)
                  v63 = *(unsigned __int8 *)(v4 + 23);
                else
                  v63 = *(_QWORD *)(v4 + 8);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, v62, v63);
                quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
              }
              v59 = operator new(0x20uLL);
              v59[1] = 0;
              v59[2] = 0;
              *v59 = &unk_1E5D44A20;
              v59[3] = &unk_1E5D3AAA8;
              __p[0] = v59 + 3;
              __p[1] = v59;
              std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&v81, (__int128 *)__p);
              std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)__p);
            }
            goto LABEL_162;
          }
LABEL_156:
          v16 = operator new(0x28uLL);
          v16[1] = 0;
          v16[2] = 0;
          *v16 = &unk_1E5D42BB8;
          v16[3] = &unk_1E5D357F0;
          v51 = v16 + 3;
          v16[4] = this + 20;
LABEL_161:
          *(_QWORD *)&v81 = v51;
          *((_QWORD *)&v81 + 1) = v16;
          goto LABEL_162;
        }
        v33 = *v13;
        v34 = *((unsigned __int16 *)v13 + 2);
        if (v33 == 1398756169 && v34 == 19529)
          goto LABEL_156;
        v10 = *(_QWORD *)(v4 + 8);
      }
    }
    else if (v10 == 10 && **(_QWORD **)v4 == 0x424D455F44524F57 && *(_WORD *)(*(_QWORD *)v4 + 8) == 17477)
    {
LABEL_83:
      std::allocate_shared[abi:ne180100]<quasar::WlatArcFeWordEmbedding,std::allocator<quasar::WlatArcFeWordEmbedding>,std::shared_ptr<marisa::Trie> &,std::shared_ptr<kaldi::Matrix<float>> &,void>((uint64_t *)&this[37].__r_.__value_.__l.__size_, this[38].__r_.__value_.__r.__words, __p);
      v26 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
      v81 = v26;
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldaxr(p_shared_owners);
        while (__stlxr(v29 - 1, p_shared_owners));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v31 = (unint64_t *)((char *)__p[1] + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      goto LABEL_162;
    }
    if (v10 == 10)
    {
      if (**(_QWORD **)v4 == 0x4E4F48505F4D554ELL && *(_WORD *)(*(_QWORD *)v4 + 8) == 21317)
      {
LABEL_149:
        v16 = operator new(0x20uLL);
        v16[1] = 0;
        v16[2] = 0;
        v18 = &unk_1E5D36E50;
        v17 = &unk_1E5D434E8;
        goto LABEL_160;
      }
      v10 = *(_QWORD *)(v4 + 8);
    }
    if (v10 == 16)
    {
      if (**(_QWORD **)v4 == 0x5F54534F435F4341 && *(_QWORD *)(*(_QWORD *)v4 + 8) == 0x4445485355504E55)
      {
LABEL_147:
        v16 = operator new(0x20uLL);
        v16[1] = 0;
        v16[2] = 0;
        v18 = &unk_1E5D3A590;
        v17 = &unk_1E5D448D0;
        goto LABEL_160;
      }
      v10 = *(_QWORD *)(v4 + 8);
    }
    if (v10 == 12)
    {
      if (**(_QWORD **)v4 == 0x5F545345425F4E49 && *(_DWORD *)(*(_QWORD *)v4 + 8) == 1213481296)
      {
LABEL_148:
        v16 = operator new(0x20uLL);
        v16[1] = 0;
        v16[2] = 0;
        v18 = &unk_1E5D377F8;
        v17 = &unk_1E5D436E0;
        goto LABEL_160;
      }
      v10 = *(_QWORD *)(v4 + 8);
    }
    if (v10 == 7)
    {
      if (**(_DWORD **)v4 == 1130316609 && *(_DWORD *)(*(_QWORD *)v4 + 3) == 1414745923)
      {
LABEL_146:
        v16 = operator new(0x20uLL);
        v16[1] = 0;
        v16[2] = 0;
        v18 = &unk_1E5D38930;
        v17 = &unk_1E5D43B78;
LABEL_160:
        *v16 = v17;
        v16[3] = v18;
        v51 = v16 + 3;
        goto LABEL_161;
      }
      v10 = *(_QWORD *)(v4 + 8);
    }
    if (v10 == 10)
    {
      if (**(_QWORD **)v4 == 0x4F435F4850415247 && *(_WORD *)(*(_QWORD *)v4 + 8) == 21587)
      {
LABEL_153:
        v16 = operator new(0x20uLL);
        v16[1] = 0;
        v16[2] = 0;
        v18 = &unk_1E5D36DF0;
        v17 = &unk_1E5D43478;
        goto LABEL_160;
      }
      v10 = *(_QWORD *)(v4 + 8);
      if (v10 == 10)
      {
        if (**(_QWORD **)v4 == 0x4D4152465F4D554ELL && *(_WORD *)(*(_QWORD *)v4 + 8) == 21317)
        {
LABEL_159:
          v16 = operator new(0x20uLL);
          v16[1] = 0;
          v16[2] = 0;
          v18 = &unk_1E5D36E20;
          v17 = &unk_1E5D434B0;
          goto LABEL_160;
        }
        if ((v6 & 0x80) == 0)
          goto LABEL_140;
      }
    }
    if (v10 != 13)
      goto LABEL_140;
    v7 = *(uint64_t **)v4;
LABEL_136:
    v42 = *v7;
    v43 = *(uint64_t *)((char *)v7 + 5);
    if (v42 != 0x54534F505F474F4CLL || v43 != 0x524F49524554534FLL)
      goto LABEL_140;
    v49 = operator new(0x20uLL);
    v49[1] = 0;
    v49[2] = 0;
    *v49 = &unk_1E5D43BE8;
    v49[3] = &unk_1E5D38990;
    __p[0] = v49 + 3;
    __p[1] = v49;
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&v81, (__int128 *)__p);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)__p);
LABEL_162:
    std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100](&this[19].__r_.__value_.__l.__data_, &v81);
    v53 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
    if (*((_QWORD *)&v81 + 1))
    {
      v54 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v4 += 24;
  }
  __p[0] = &v82;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1AD80E0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v56 - 144);
  __p = (void *)(v56 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::HwcnConfidence::runImpl(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  float v11;
  float **v12;
  uint64_t v13;
  uint64_t i;
  int v15;
  const std::string::value_type *v16;
  int v17;
  int v18;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  void **v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  uint64_t v39[2];
  void *__p[2];
  unsigned __int8 v41;
  uint64_t v42;
  std::string *v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  _QWORD v52[4];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _QWORD *v70;
  std::__shared_weak_count *v71;

  *(_BYTE *)(a2 + 553) = *(_BYTE *)(a1 + 800);
  *(_DWORD *)(a2 + 556) = *(_DWORD *)(a1 + 832);
  *(_BYTE *)(a2 + 560) = *(_BYTE *)(a1 + 836);
  quasar::HwcnConfidence::getHwcn(a1, (uint64_t *)a2, a3, (uint64_t *)&v70);
  if (!v70)
  {
    if (quasar::gLogLevel < 4)
      goto LABEL_54;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v53 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v53);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v53, (uint64_t)"Lattice is null. Doing nothing", 30);
LABEL_53:
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v53);
    goto LABEL_54;
  }
  if (v70[3] == v70[2])
  {
    if (quasar::gLogLevel < 4)
      goto LABEL_54;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v53 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v53);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v53, (uint64_t)"Lattice is empty. Doing nothing", 31);
    goto LABEL_53;
  }
  quasar::WlatArcFeatureExtractor::runArcFeatureExtraction((uint64_t)v70, *(unsigned int *)(a1 + 976), a1 + 456);
  v52[0] = &unk_1E5D341C8;
  memset(&v52[1], 0, 24);
  kaldi::quasar::LatticeRnn::Run(*(_QWORD *)(a1 + 448), v70, v52);
  v7 = v70;
  v8 = (uint64_t *)v70[5];
  v9 = (uint64_t *)v70[6];
  if (v8 != v9)
  {
    do
    {
      v10 = *v8;
      v11 = **(float **)(*v8 + 432);
      v12 = *(float ***)(a1 + 960);
      if (v12)
        v11 = quasar::CalibrationMap::map(v12, v11);
      *(double *)(v10 + 32) = v11;
      ++v8;
    }
    while (v8 != v9);
    v7 = v70;
  }
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v45 = 0;
  kaldi::WordHypLattice::GetBestMeanConfPath(v7, (uint64_t)&v49, &v46, &v45);
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v13 = v46;
  for (i = v47; v13 != i; v13 += 24)
  {
    v15 = *(char *)(v13 + 23);
    if (v15 < 0)
    {
      if (*(_QWORD *)(v13 + 8) != 3)
        goto LABEL_18;
      v16 = *(const std::string::value_type **)v13;
    }
    else
    {
      v16 = (const std::string::value_type *)v13;
      if (v15 != 3)
        goto LABEL_18;
    }
    v17 = *(unsigned __int16 *)v16;
    v18 = *((unsigned __int8 *)v16 + 2);
    if (v17 != 16188 || v18 != 62)
    {
LABEL_18:
      std::string::basic_string[abi:ne180100]<0>(&v53, "~w00");
      std::string::basic_string[abi:ne180100]<0>(__p, " ");
      quasar::replaceAll(v13, (uint64_t)&v53, (char *)__p);
      if ((char)v41 < 0)
        operator delete(__p[0]);
      if (SBYTE7(v54) < 0)
        operator delete((void *)v53);
      v20 = v43;
      if ((unint64_t)v43 >= v44)
      {
        v22 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v42, (__int128 *)v13);
      }
      else
      {
        if (*(char *)(v13 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v43, *(const std::string::value_type **)v13, *(_QWORD *)(v13 + 8));
        }
        else
        {
          v21 = *(_OWORD *)v13;
          v43->__r_.__value_.__r.__words[2] = *(_QWORD *)(v13 + 16);
          *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
        }
        v22 = v20 + 1;
      }
      v43 = v22;
    }
  }
  if (quasar::gLogLevel > 3)
  {
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v53 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v53);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v53, (uint64_t)"Best conf result sessionId: ", 28);
    v24 = *(_QWORD *)(*(_QWORD *)a4 + 24);
    v27 = *(_QWORD *)(v24 + 128);
    v25 = v24 + 128;
    v26 = v27;
    v28 = *(char *)(v25 + 23);
    if (v28 >= 0)
      v29 = v25;
    else
      v29 = v26;
    if (v28 >= 0)
      v30 = *(unsigned __int8 *)(v25 + 23);
    else
      v30 = *(_QWORD *)(v25 + 8);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v29, v30);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" result: ", 9);
    v39[0] = (uint64_t)" ";
    v39[1] = 1;
    quasar::join<std::vector<std::string>>(&v42, v39);
    if ((v41 & 0x80u) == 0)
      v33 = __p;
    else
      v33 = (void **)__p[0];
    if ((v41 & 0x80u) == 0)
      v34 = v41;
    else
      v34 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
    if ((char)v41 < 0)
      operator delete(__p[0]);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v53);
  }
  *(_QWORD *)&v53 = &v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
  *(_QWORD *)&v53 = &v46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(*a3 + 208), (uint64_t *)&v70);
  v52[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v52);
LABEL_54:
  v35 = v71;
  if (v71)
  {
    p_shared_owners = (unint64_t *)&v71->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  return 0;
}

void sub_1AD80E5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a32);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v37 - 112);
  _Unwind_Resume(a1);
}

void quasar::HwcnConfidence::getHwcn(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  quasar::StopWatch *v8;
  clockid_t v9;
  uint64_t v10;
  kaldi::TransitionModel *v11;
  uint64_t v12;
  int v13;
  const kaldi::WordHypLattice *v14;
  uint64_t v15;
  kaldi::WordHypLattice *v16;
  clockid_t v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _OWORD v29[17];
  __int128 v30;
  _BYTE v31[24];
  int v32;

  v8 = quasar::StopWatch::StopWatch((quasar::StopWatch *)v31, (clockid_t)a2);
  quasar::StopWatch::resume(v8, v9);
  v30 = 0uLL;
  v10 = *a3;
  v11 = (kaldi::TransitionModel *)a2[10];
  v12 = a2[21];
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a2 + 16) + 32))(*(_QWORD *)(*a2 + 16));
  quasar::DecoderChainOutput::getWordHypLattice(v10, v11, a2 + 27, v12, v13, a2[23], a4);
  v14 = (const kaldi::WordHypLattice *)*a4;
  if (*a4 && *((_QWORD *)v14 + 2) != *((_QWORD *)v14 + 3))
  {
    if (*((_BYTE *)a2 + 553))
    {
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v30, a4);
    }
    else
    {
      std::allocate_shared[abi:ne180100]<kaldi::WordHypLattice,std::allocator<kaldi::WordHypLattice>,kaldi::WordHypLattice&,void>(v14, v29);
      v22 = v29[0];
      v29[0] = 0uLL;
      v23 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
      v30 = v22;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldaxr(p_shared_owners);
        while (__stlxr(v25 - 1, p_shared_owners));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = (std::__shared_weak_count *)*((_QWORD *)&v29[0] + 1);
      if (*((_QWORD *)&v29[0] + 1))
      {
        v27 = (unint64_t *)(*((_QWORD *)&v29[0] + 1) + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
    v15 = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)a4);
    quasar::HwcnConfidence::setPiPhoneStr(v15, (uint64_t)a2, v30);
    quasar::mergeNodes((quasar *)v30, (kaldi::WordHypLattice *)*(unsigned int *)(a1 + 696), 0);
    quasar::setNormWords((quasar *)v30, v16);
    quasar::mergeArcs((quasar *)v30, 0);
    if (v32)
      kaldi::Timer::GetSeconds((kaldi::Timer *)5, v17);
    if (quasar::gLogLevel >= 5)
    {
      memset(v29, 0, sizeof(v29));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Obtained HWCN in ", 17);
      v18 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" s", 2);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v29);
    }
    *(_OWORD *)a4 = v30;
    v30 = 0uLL;
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  *(_QWORD *)&v29[0] = v31;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v29);
}

void sub_1AD80E94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v10 - 192);
  a9 = (void **)(v10 - 176);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

float quasar::CalibrationMap::map(float **this, float result)
{
  float *v2;
  float *v3;
  unint64_t v4;
  float *v5;
  unint64_t v6;
  float *v7;
  float *v8;
  float v9;

  v2 = *this;
  v3 = this[1];
  if (*this != v3)
  {
    v4 = ((char *)v3 - (char *)v2) >> 3;
    v5 = *this;
    do
    {
      v6 = v4 >> 1;
      v7 = &v5[2 * (v4 >> 1)];
      v9 = *v7;
      v8 = v7 + 2;
      v4 += ~(v4 >> 1);
      if (v9 > result)
        v4 = v6;
      else
        v5 = v8;
    }
    while (v4);
    if (v5 == v3)
    {
      v2 = v3 - 2;
    }
    else if (v5 != v2)
    {
      v2 = v5;
      if (vabds_f32(result, *(v5 - 2)) < vabds_f32(result, *v5))
        v2 = v5 - 2;
    }
    return v2[1];
  }
  return result;
}

void quasar::HwcnConfidence::registerParams(quasar::HwcnConfidence *this, quasar::SystemConfig *a2)
{
  quasar::HwcnConfidence::registerOtherParams(this, a2);
  quasar::HwcnConfidence::registerModelFiles(this, a2);
}

void quasar::HwcnConfidence::registerOtherParams(quasar::HwcnConfidence *this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  kaldi::WordBoundaryInfoNewOpts::Register((uint64_t)this + 928, (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "model-feature-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "Comma-separated list of arc features. Example: \"BAG_OF_PHONES,KEYWORD:hey,KEYWORD:Siri,LM_SCORE,AC_SCORE,NUM_FRAMES,LOG_POSTERIOR,LIN_POSTERIOR\"");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 648, (uint64_t)__p, 1, 141, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "sil-phone-csl-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing colon-separated list of silence phones.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 672, (uint64_t)__p, 1, 141, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "node-merge-tol-ms");
  std::string::basic_string[abi:ne180100]<0>(__p, "Node merging tolerance in ms");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 696, (uint64_t)__p, 1, 141, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "word-emb-marisa-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "MARISA trie file for word embedding lookup");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 704, (uint64_t)__p, 0, 141, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "word-emb-mat-flt32-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Kaldi binary matrix file (float32) that stores word embeddings");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 728, (uint64_t)__p, 0, 141, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "word-boundary-int-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Word boundary file with format <integer-phone-id> [begin|end|singleton|internal|nonword]");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 752, (uint64_t)__p, 1, 141, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "unpronounced-word-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing newline-separated list of words with no pronunciation.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 776, (uint64_t)__p, 0, 141, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "nbest-is-primary");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, write these confidence values, along with the HWCN nbest, to the main ASR output (resultChoices) so it can be used by downstream clients instead of the secondary ASR output (resultChoicesV2) that is only used for offline experimentation.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 800, (uint64_t)__p, 0, 259, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "nbest-criteria");
  std::string::basic_string[abi:ne180100]<0>(__p, "Type of nbest. One of MeanConfPath|TotalCostPath. (Default: MeanConfPath). MeanConfPath: paths with highest mean confidence. TotalCostPath: paths with lowest total cost (the usual ASR objective when confidence isn't present).");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 808, (uint64_t)__p, 0, 259, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "nbest-preserve-top-result");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, confidence will try not to change the top result. (Default: false).");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 836, (uint64_t)__p, 0, 259, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "calibration-map-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Text file with 2 columns of numbers. Lines must be sorted by the first column. Each confidence score will be mapped to the 2nd-column value of the line with the 1st-column value that is closest to the score. All values in the file (both columns) should be in the range 0-1 (not 0-1000). ");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 840, (uint64_t)__p, 0, 259, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1AD80EF24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::HwcnConfidence::registerModelFiles(quasar::HwcnConfidence *this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "transform-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "See LatticeRnn in nnet/lattice-rnn.h");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 552, (uint64_t)__p, 1, 141, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "forward-model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "See LatticeRnn in nnet/lattice-rnn.h");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 576, (uint64_t)__p, 1, 141, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "backward-model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "See LatticeRnn in nnet/lattice-rnn.h");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 600, (uint64_t)__p, 1, 141, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "arc-output-model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "See LatticeRnn in nnet/lattice-rnn.h");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 624, (uint64_t)__p, 1, 141, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1AD80F180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::HwcnConfidence::setPiPhoneStr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  kaldi::SilencePhoneSet *v6;
  uint64_t v7;
  unsigned __int16 *v8;
  int v9;
  int v10;
  int v11;
  int *v13;
  int *v14;
  int v15;
  std::string::size_type size;
  std::string *p_str;
  unsigned __int8 *v18;
  std::string *v19;
  std::string *v20;
  std::string *v21;
  unsigned __int8 *v22;
  int v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string v27;
  std::string v28;
  std::string __str;
  uint64_t v30;
  std::string *v31;
  unint64_t v32;
  char v33;

  v3 = *(uint64_t **)(a3 + 40);
  v4 = *(uint64_t **)(a3 + 48);
  if (v3 == v4)
    return;
  v6 = (kaldi::SilencePhoneSet *)(a2 + 96);
  do
  {
    v7 = *v3;
    v8 = *(unsigned __int16 **)(*v3 + 80);
    if (*(_QWORD *)(*v3 + 88) - (_QWORD)v8 == 24)
    {
      v9 = *((char *)v8 + 23);
      if (v9 < 0)
      {
        if (*((_QWORD *)v8 + 1) == 3)
        {
          v8 = *(unsigned __int16 **)v8;
LABEL_9:
          v10 = *v8;
          v11 = *((unsigned __int8 *)v8 + 2);
          if (v10 == 26995 && v11 == 108)
          {
            MEMORY[0x1AF44C914](v7 + 216, "sil");
            goto LABEL_47;
          }
        }
      }
      else if (v9 == 3)
      {
        goto LABEL_9;
      }
    }
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v13 = *(int **)(v7 + 104);
    v14 = *(int **)(v7 + 112);
    if (v13 == v14)
      goto LABEL_46;
    do
    {
      v15 = *v13;
      (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a2 + 168) + 88))(&__str, *(_QWORD *)(a2 + 168), *v13);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          size = __str.__r_.__value_.__l.__size_;
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          if (!__str.__r_.__value_.__l.__size_)
            goto LABEL_30;
          goto LABEL_19;
        }
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else
      {
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        v28 = __str;
      }
      p_str = &__str;
      if (!size)
        goto LABEL_30;
LABEL_19:
      v18 = (unsigned __int8 *)p_str + size;
      v19 = p_str;
      v20 = (std::string *)v18;
      do
      {
        v21 = v19;
        v22 = (unsigned __int8 *)v19;
        while (1)
        {
          v23 = *v22++;
          if (v23 == 95)
            break;
          v21 = (std::string *)v22;
          if (v22 == v18)
          {
            v21 = v20;
            goto LABEL_25;
          }
        }
        v19 = (std::string *)((char *)&v21->__r_.__value_.__l.__data_ + 1);
        v20 = v21;
      }
      while (v22 != v18);
LABEL_25:
      if (v21 != (std::string *)v18 && (char *)v21 - (char *)p_str != -1)
      {
        std::string::basic_string(&v27, &__str, 0, (char *)v21 - (char *)p_str, (std::allocator<char> *)&v33);
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28.__r_.__value_.__l.__data_);
        v28 = v27;
      }
LABEL_30:
      if (!kaldi::SilencePhoneSet::isSilencePhone(v6, v15))
      {
        v24 = v31;
        if ((unint64_t)v31 >= v32)
        {
          v26 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v30, (__int128 *)&v28);
        }
        else
        {
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v31, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
          }
          else
          {
            v25 = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
            v31->__r_.__value_.__r.__words[2] = v28.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
          }
          v26 = v24 + 1;
        }
        v31 = v26;
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      ++v13;
    }
    while (v13 != v14);
    v7 = *v3;
LABEL_46:
    kaldi::JoinVectorToString(&v30, " ", 1, (__int128 *)(v7 + 216));
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
LABEL_47:
    ++v3;
  }
  while (v3 != v4);
}

void sub_1AD80F45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26)
{
  a19 = &a25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

void quasar::StopWatch::resume(quasar::StopWatch *this, clockid_t a2)
{
  _OWORD v2[17];

  if (*((_DWORD *)this + 6))
  {
    memset(v2, 0, sizeof(v2));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "StopWatch is already running.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v2);
  }
  *((_DWORD *)this + 6) = 1;
  kaldi::Timer::Reset((quasar::StopWatch *)((char *)this + 32), a2);
}

uint64_t quasar::HwcnConfidence::affectsRecognitionResults(quasar::HwcnConfidence *this)
{
  return 1;
}

uint64_t quasar::HwcnConfidence::supportsEager(quasar::HwcnConfidence *this)
{
  return 1;
}

void quasar::HwcnConfidence::~HwcnConfidence(void **this)
{
  quasar::HwcnConfidence::~HwcnConfidence(this);
  JUMPOUT(0x1AF44D190);
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  void **v5;

  *this = &off_1E5D35168;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 120));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 118));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 114));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 112));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 110));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 108));
  if (*((char *)this + 863) < 0)
    operator delete(this[105]);
  if (*((char *)this + 831) < 0)
    operator delete(this[101]);
  if (*((char *)this + 799) < 0)
    operator delete(this[97]);
  if (*((char *)this + 775) < 0)
    operator delete(this[94]);
  if (*((char *)this + 751) < 0)
    operator delete(this[91]);
  if (*((char *)this + 727) < 0)
    operator delete(this[88]);
  if (*((char *)this + 695) < 0)
    operator delete(this[84]);
  if (*((char *)this + 671) < 0)
    operator delete(this[81]);
  if (*((char *)this + 647) < 0)
    operator delete(this[78]);
  if (*((char *)this + 623) < 0)
    operator delete(this[75]);
  if (*((char *)this + 599) < 0)
    operator delete(this[72]);
  if (*((char *)this + 575) < 0)
    operator delete(this[69]);
  v2 = this[66];
  if (v2)
  {
    this[67] = v2;
    operator delete(v2);
  }
  v3 = this[63];
  if (v3)
    operator delete(v3);
  v5 = this + 57;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v4 = (uint64_t)this[56];
  this[56] = 0;
  if (v4)
    std::default_delete<kaldi::quasar::LatticeRnn>::operator()[abi:ne180100]((uint64_t)(this + 56), v4);
  quasar::Decoder::~Decoder(this);
}

quasar::StopWatch *quasar::StopWatch::StopWatch(quasar::StopWatch *this, clockid_t a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 56) = 1;
  kaldi::Timer::Reset((quasar::StopWatch *)((char *)this + 32), a2);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  quasar::StopWatch::reset((uint64_t)this);
  return this;
}

void sub_1AD80F5D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::StopWatch::reset(uint64_t this)
{
  _OWORD v1[17];

  if (*(_DWORD *)(this + 24))
  {
    memset(v1, 0, sizeof(v1));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "StopWatch is still running.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v1);
  }
  *(_QWORD *)(this + 72) = 0;
  *(_QWORD *)(this + 80) = 0;
  return this;
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN6marisa4TrieENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x20uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN6marisa4TrieENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD80F80C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN6marisa4TrieENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D423A0;
  a1[1] = 0;
  marisa::Trie::Trie(a1 + 3);
  return a1;
}

void sub_1AD80F858(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<marisa::Trie>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D423A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<marisa::Trie>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D423A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<marisa::Trie>::__on_zero_shared(uint64_t a1)
{
  marisa::Trie::~Trie((marisa::Trie *)(a1 + 24));
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN5kaldi6MatrixIfEENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x40uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN5kaldi6MatrixIfEENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD80F8F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN5kaldi6MatrixIfEENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41CD8;
  a1[1] = 0;
  kaldi::Matrix<float>::Matrix((uint64_t)(a1 + 3));
  return a1;
}

void sub_1AD80F940(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::Matrix<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41CD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::Matrix<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41CD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::Matrix<float>>::__on_zero_shared(uint64_t a1)
{
  return kaldi::Matrix<float>::~Matrix(a1 + 24);
}

void std::default_delete<kaldi::quasar::LatticeRnn>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(a2 + 1504));
    kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(a2 + 1128));
    kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(a2 + 752));
    kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(a2 + 376));
    kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)a2);
    JUMPOUT(0x1AF44D190);
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::CalibrationMap,std::allocator<quasar::CalibrationMap>,std::string &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<quasar::CalibrationMap>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<quasar::CalibrationMap>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AD80FA48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::CalibrationMap>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<quasar::CalibrationMap>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D428A8;
  a1[1] = 0;
  quasar::CalibrationMap::CalibrationMap((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1AD80FA94(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::CalibrationMap>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D428A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::CalibrationMap>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D428A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::CalibrationMap>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t quasar::CalibrationMap::CalibrationMap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::locale::id *v5;
  const std::locale::facet *v6;
  unsigned __int8 v7;
  _QWORD *v8;
  float v9;
  float v10;
  float v11;
  unint64_t v12;
  float *v13;
  _DWORD *v14;
  float *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  float *v21;
  float *v22;
  uint64_t v23;
  _QWORD *v25;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  const std::string *v32;
  const std::string *v33;
  std::string __p;
  std::locale v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD v52[2];
  _BYTE v53[408];
  _QWORD v54[21];

  v54[19] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::ifstream::basic_ifstream(v52);
  v4 = v52[0];
  if ((v53[*(_QWORD *)(v52[0] - 24) + 16] & 5) != 0)
  {
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    *(_OWORD *)&v35[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v35);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Failed to open mapping file: ", 29);
    v29 = *(char *)(a2 + 23);
    if (v29 >= 0)
      v30 = a2;
    else
      v30 = *(_QWORD *)a2;
    if (v29 >= 0)
      v31 = *(unsigned __int8 *)(a2 + 23);
    else
      v31 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v35);
  }
  memset(&__p, 0, sizeof(__p));
  v5 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(_QWORD *)(v4 - 24)));
    v6 = std::locale::use_facet(v35, v5);
    v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(v35);
    v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v52, (uint64_t)&__p, v7);
    if ((*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) != 0)
      break;
    std::string::basic_string[abi:ne180100]<0>(v35, " ");
    quasar::splitAndTrimNoEmpty(&__p, (char *)v35, &v32);
    if (SBYTE7(v36) < 0)
      operator delete(v35[0].__locale_);
    if (v32 != v33)
    {
      if ((char *)v33 - (char *)v32 != 48)
      {
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        *(_OWORD *)&v35[0].__locale_ = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v35);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Calibration file line does not have 2 columns: ", 47);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)p_p, size);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v35);
      }
      v9 = std::stof(v32, 0);
      v10 = std::stof(v32 + 1, 0);
      v11 = v10;
      v13 = *(float **)(a1 + 8);
      v12 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v13 >= v12)
      {
        v15 = *(float **)a1;
        v16 = ((uint64_t)v13 - *(_QWORD *)a1) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v18 = v12 - (_QWORD)v15;
        if (v18 >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 16, v19);
          v15 = *(float **)a1;
          v13 = *(float **)(a1 + 8);
        }
        else
        {
          v20 = 0;
        }
        v21 = (float *)&v20[8 * v16];
        *v21 = v9;
        v21[1] = v11;
        v22 = v21;
        if (v13 != v15)
        {
          do
          {
            v23 = *((_QWORD *)v13 - 1);
            v13 -= 2;
            *((_QWORD *)v22 - 1) = v23;
            v22 -= 2;
          }
          while (v13 != v15);
          v15 = *(float **)a1;
        }
        v14 = v21 + 2;
        *(_QWORD *)a1 = v22;
        *(_QWORD *)(a1 + 8) = v21 + 2;
        *(_QWORD *)(a1 + 16) = &v20[8 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v13 = v9;
        v13[1] = v10;
        v14 = v13 + 2;
      }
      *(_QWORD *)(a1 + 8) = v14;
    }
    v35[0].__locale_ = (std::locale::__imp *)&v32;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v35);
    v4 = v52[0];
  }
  quasar::CalibrationMap::init((float **)a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v52[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v52 + *(_QWORD *)(v52[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1AF44CA70](v53);
  std::istream::~istream();
  MEMORY[0x1AF44D094](v54);
  return a1;
}

void sub_1AD80FECC(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1AD80FF58);
}

void sub_1AD80FEDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a15);
  JUMPOUT(0x1AD80FF30);
}

void sub_1AD80FF00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  JUMPOUT(0x1AD80FF30);
}

void sub_1AD80FF1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15)
{
  std::locale::~locale(&a15);
  JUMPOUT(0x1AD80FF30);
}

void sub_1AD80FF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  uint64_t v52;
  void *v54;

  if (a17 < 0)
    operator delete(__p);
  std::ifstream::~ifstream(&a52);
  v54 = *(void **)v52;
  if (*(_QWORD *)v52)
  {
    *(_QWORD *)(v52 + 8) = v54;
    operator delete(v54);
  }
  _Unwind_Resume(a1);
}

float **quasar::CalibrationMap::init(float **this)
{
  float *v1;
  float *v2;
  uint64_t v3;
  unint64_t v4;
  float *v5;
  float v6;
  float v7;
  unint64_t v8;
  float v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v1 = *this;
  v2 = this[1];
  if (*this == v2)
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v10 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v10, "Calibration file has no entries");
    goto LABEL_12;
  }
  v3 = (char *)v2 - (char *)v1;
  if ((unint64_t)v3 >= 9)
  {
    v4 = v3 >> 3;
    if (v4 <= 2)
      v4 = 2;
    v6 = *v1;
    v5 = v1 + 3;
    v7 = v6;
    v8 = v4 - 1;
    while (1)
    {
      v9 = *(v5 - 1);
      if (v9 < v7 || v7 >= v9 && *v5 < *(v5 - 2))
        break;
      v5 += 2;
      v7 = v9;
      if (!--v8)
        return this;
    }
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v10 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v10, "Calibration is not sorted by first column");
LABEL_12:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v10);
  }
  return this;
}

void sub_1AD810070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&a9);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::WlatArcFeWordEmbedding,std::allocator<quasar::WlatArcFeWordEmbedding>,std::shared_ptr<marisa::Trie> &,std::shared_ptr<kaldi::Matrix<float>> &,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<quasar::WlatArcFeWordEmbedding>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<marisa::Trie> &,std::shared_ptr<kaldi::Matrix<float>> &,std::allocator<quasar::WlatArcFeWordEmbedding>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1AD8100D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::WlatArcFeWordEmbedding>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<marisa::Trie> &,std::shared_ptr<kaldi::Matrix<float>> &,std::allocator<quasar::WlatArcFeWordEmbedding>,0>(_QWORD *a1, uint64_t *a2, _QWORD *a3)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43EC0;
  a1[1] = 0;
  quasar::WlatArcFeWordEmbedding::WlatArcFeWordEmbedding(a1 + 3, a2, a3);
  return a1;
}

void sub_1AD81011C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeWordEmbedding>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43EC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeWordEmbedding>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43EC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeWordEmbedding>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeIsLme>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42B80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeIsLme>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42B80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeIsLme>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLmeId>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42BF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLmeId>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42BF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeLmeId>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeIsSil>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42BB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeIsSil>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42BB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeIsSil>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeNumPhones>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D434E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeNumPhones>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D434E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeNumPhones>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCostUnpushed>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D448D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCostUnpushed>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D448D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCostUnpushed>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeInBestPath>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D436E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeInBestPath>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D436E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeInBestPath>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCost>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43B78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCost>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43B78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCost>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeGraphCost>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43478;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeGraphCost>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43478;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeGraphCost>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeNumFrames>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D434B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeNumFrames>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D434B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeNumFrames>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLogPosterior>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43BE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLogPosterior>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43BE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeLogPosterior>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLinPosterior>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43BB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLinPosterior>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43BB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeLinPosterior>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLinAcousticPosterior>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44908;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLinAcousticPosterior>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44908;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeLinAcousticPosterior>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLogAcousticPosterior>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44940;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLogAcousticPosterior>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44940;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeLogAcousticPosterior>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCostCollapsed1>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44BA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCostCollapsed1>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44BA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCostCollapsed1>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLinPosterior1>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43E50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLinPosterior1>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43E50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeLinPosterior1>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLogPosterior1>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43E88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLogPosterior1>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43E88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeLogPosterior1>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCost2>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43E18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCost2>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43E18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCost2>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCostUnpushed2>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D449B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCostUnpushed2>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D449B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeAcousticCostUnpushed2>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLinAcousticPosterior2>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D449E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLinAcousticPosterior2>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D449E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeLinAcousticPosterior2>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLogAcousticPosterior2>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44A20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WlatArcFeLogAcousticPosterior2>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44A20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::WlatArcFeLogAcousticPosterior2>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::WordHypLattice,std::allocator<kaldi::WordHypLattice>,kaldi::WordHypLattice&,void>@<X0>(const kaldi::WordHypLattice *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x70uLL);
  result = std::__shared_ptr_emplace<kaldi::WordHypLattice>::__shared_ptr_emplace[abi:ne180100]<kaldi::WordHypLattice&,std::allocator<kaldi::WordHypLattice>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1AD8108AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::WordHypLattice>::__shared_ptr_emplace[abi:ne180100]<kaldi::WordHypLattice&,std::allocator<kaldi::WordHypLattice>,0>(_QWORD *a1, const kaldi::WordHypLattice *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D415D8;
  a1[1] = 0;
  kaldi::WordHypLattice::WordHypLattice((kaldi::WordHypLattice *)(a1 + 3), a2);
  return a1;
}

void sub_1AD8108F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::WordHypLattice>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D415D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::WordHypLattice>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D415D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<kaldi::WordHypLattice>::__on_zero_shared(uint64_t a1)
{
  kaldi::WordHypLattice::~WordHypLattice((kaldi::WordHypLattice *)(a1 + 24));
}

void sub_1AD8109EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1AD810B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1AD811078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::random_device a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

std::random_device *std::random_device::random_device[abi:ne180100](std::random_device *a1)
{
  std::string __token;

  std::string::basic_string[abi:ne180100]<0>(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__token.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1AD811128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<float>::__append(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  int v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 2)
  {
    if (a2)
    {
      v16 = 4 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 2);
    if (v11 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 2;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[4 * v12];
    v19 = &v18[4 * a2];
    v20 = 4 * a2;
    v21 = v18;
    do
    {
      *(_DWORD *)v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    v22 = &v15[4 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 4)
    {
      v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void std::vector<unsigned long>::__append(void **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  uint64_t v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 3)
  {
    if (a2)
    {
      v16 = 8 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 3);
    if (v11 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 3;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 2 > v11)
      v11 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[8 * v12];
    v19 = &v18[8 * a2];
    v20 = 8 * a2;
    v21 = v18;
    do
    {
      *(_QWORD *)v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    v22 = &v15[8 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 8)
    {
      v25 = *((_QWORD *)i - 1);
      *((_QWORD *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

uint64_t std::uniform_int_distribution<unsigned long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE v10[64];

  result = a3[1];
  v4 = result - *a3;
  if (result != *a3)
  {
    v5 = v4 + 1;
    if (v4 == -1)
    {
      std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, 0x40uLL);
      return std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)v10);
    }
    else
    {
      v7 = __clz(v5);
      v8 = 63;
      if (((v5 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        v8 = 64;
      std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, v8 - v7);
      do
        v9 = std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)v10);
      while (v9 >= v5);
      return *a3 + v9;
    }
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if ((a3 & 0x1F) != 0)
    v3 = (a3 >> 5) + 1;
  else
    v3 = a3 >> 5;
  v4 = a3 / v3;
  *(_QWORD *)(result + 16) = a3 / v3;
  *(_QWORD *)(result + 24) = v3;
  v5 = (-1 << (a3 / v3)) & 0x100000000;
  if (a3 / v3 >= 0x40)
    v5 = 0;
  *(_QWORD *)(result + 40) = v5;
  if ((v5 ^ 0x100000000) > v5 / v3)
  {
    ++v3;
    v4 = a3 / v3;
    *(_QWORD *)(result + 16) = a3 / v3;
    *(_QWORD *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      v6 = 0;
      *(_QWORD *)(result + 32) = v3 + v4 * v3 - a3;
      *(_QWORD *)(result + 40) = 0;
      goto LABEL_13;
    }
    *(_QWORD *)(result + 40) = (-1 << v4) & 0x100000000;
  }
  *(_QWORD *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 > 0x3E)
    v6 = 0;
  else
    v6 = 0x80000000uLL >> v4 << (v4 + 1);
LABEL_13:
  *(_QWORD *)(result + 48) = v6;
  v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4)
    v7 = 0;
  if (v4 >= 0x1F)
    v8 = -1;
  else
    v8 = 0xFFFFFFFF >> ~(_BYTE)v4;
  *(_DWORD *)(result + 56) = v7;
  *(_DWORD *)(result + 60) = v8;
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8;
  unint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      do
        v4 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
      while (*(_QWORD *)(a1 + 40) <= (unint64_t)v4);
      v5 = *(_QWORD *)(a1 + 16);
      if (v5 >= 0x40)
        v6 = 0;
      else
        v6 = v2 << v5;
      v2 = v6 + (*(_DWORD *)(a1 + 56) & v4);
      ++v3;
      v7 = *(_QWORD *)(a1 + 32);
    }
    while (v3 < v7);
  }
  else
  {
    v2 = 0;
    v7 = 0;
  }
  for (; v7 < *(_QWORD *)(a1 + 24); ++v7)
  {
    do
      v8 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
    while (*(_QWORD *)(a1 + 48) <= (unint64_t)v8);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9 >= 0x3F)
      v10 = 0;
    else
      v10 = v2 << (v9 + 1);
    v2 = v10 + (*(_DWORD *)(a1 + 60) & v8);
  }
  return v2;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i;
  size_t v2;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3;

  i = this->__i_;
  v2 = (i + 1) % 0x270;
  v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)i << 15) & 0xEFC60000 ^ i ^ ((((_DWORD)i << 15) & 0xEFC60000 ^ i) >> 18);
}

uint64_t quasar::tennessee::Serialize(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  _OWORD v4[17];

  result = std::ostream::write();
  if (*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
  {
    memset(v4, 0, sizeof(v4));
    quasar::QuasarExceptionMessage::QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v4);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v4);
  }
  return result;
}

int **quasar::EndpointerRequestFilter::EndpointerRequestFilter(int **a1, const std::string *a2)
{
  const std::string *v4;
  const std::string *i;
  int v6;
  int v7;
  unint64_t v8;
  int *v9;
  int *v10;
  int *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int *v17;
  int v18;
  void *__p[2];
  char v21;
  const std::string *v22;
  const std::string *v23;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "|");
  quasar::splitAndTrimNoEmpty(a2, (char *)__p, &v22);
  if (v21 < 0)
    operator delete(__p[0]);
  v4 = v22;
  for (i = v23; v4 != i; ++v4)
  {
    v6 = std::stoi(v4, 0, 10);
    v7 = v6;
    v9 = a1[1];
    v8 = (unint64_t)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = *a1;
      v12 = v9 - *a1;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v14 = v8 - (_QWORD)v11;
      if (v14 >> 1 > v13)
        v13 = v14 >> 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
        v15 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 2), v15);
        v11 = *a1;
        v9 = a1[1];
      }
      else
      {
        v16 = 0;
      }
      v17 = (int *)&v16[4 * v12];
      *v17 = v7;
      v10 = v17 + 1;
      while (v9 != v11)
      {
        v18 = *--v9;
        *--v17 = v18;
      }
      *a1 = v17;
      a1[1] = v10;
      a1[2] = (int *)&v16[4 * v15];
      if (v11)
        operator delete(v11);
    }
    else
    {
      *v9 = v6;
      v10 = v9 + 1;
    }
    a1[1] = v10;
  }
  __p[0] = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return a1;
}

void sub_1AD8119E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;
  void *v17;

  if (a14 < 0)
    operator delete(__p);
  v17 = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)(v15 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

void quasar::HybridEndpointConfig::registerParams(quasar::HybridEndpointConfig *this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Endpoint model file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 456, (uint64_t)__p, 0, 36, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "model-feature-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "sequence of features for endpoint model");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 480, (uint64_t)__p, 0, 36, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "model is memory mapped");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 504, (uint64_t)__p, 0, 36, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "endpoint-threshold");
  std::string::basic_string[abi:ne180100]<0>(__p, "Threshold for final endpoint detection");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this, (uint64_t)__p, 0, 36, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "trailing-silence-limit");
  std::string::basic_string[abi:ne180100]<0>(__p, "An upper limit for trailing silence duration (milliseconds) after which recognizer should be forced to endpoint");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 4, (uint64_t)__p, 0, 36, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "only-use-acoustic-endpointer");
  std::string::basic_string[abi:ne180100]<0>(__p, "Only use acoustic endpointer score when it is enabled");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 452, (uint64_t)__p, 0, 36, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "extra-delay-ms");
  std::string::basic_string[abi:ne180100]<0>(__p, "delaying the endpointer trigger decision by th given amount of time (in msec), when specified.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 448, (uint64_t)__p, 0, 55, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "silence-posterior-nfhat-limit");
  std::string::basic_string[abi:ne180100]<0>(__p, "An upper limit for silence posterior NFHat estimate (milliseconds) after which recognizer should be forced to endpoint");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 8, (uint64_t)__p, 0, 66, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "server-features-latency-clamp-begin");
  std::string::basic_string[abi:ne180100]<0>(__p, "Starting point (in milliseconds) for ServerFeaturesLatency Clamp. ServerFeaturesLatency will be clamped at this value for the duration of clamp i.e [serverFeaturesLatencyClampBeginMs, serverFeaturesLatencyClampEndMs]");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 12, (uint64_t)__p, 0, 66, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "server-features-latency-clamp-end");
  std::string::basic_string[abi:ne180100]<0>(__p, "Ending point (in milliseconds) for ServerFeaturesLatency Clamp. ServerFeaturesLatency will be allowed to update after this point i.e it will not be clamped anymore");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 16, (uint64_t)__p, 0, 66, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1AD811E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::HybridEndpointConfig::init(quasar::HybridEndpointConfig *this)
{
  _OWORD v3[17];

  quasar::EndpointConfigHelper::initModels((uint64_t)this + 456, (uint64_t)this + 24, *((unsigned __int8 *)this + 504));
  quasar::EndpointConfigHelper::initFeatures((uint64_t)this + 480, (uint64_t)this + 400);
  if (*(float *)this < 0.0 || *(float *)this > 1.0)
  {
    memset(v3, 0, sizeof(v3));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "endpoint-threshold needs to be configured to a value between 0-1");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v3);
  }
}

uint64_t quasar::HybridEndpointConfig::HybridEndpointConfig(uint64_t a1, const std::string *a2)
{
  *(_DWORD *)a1 = -1082130432;
  *(_OWORD *)(a1 + 4) = xmmword_1AE142620;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 24));
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  quasar::EndpointerRequestFilter::EndpointerRequestFilter((int **)(a1 + 424), a2);
  *(_DWORD *)(a1 + 448) = 0;
  *(_BYTE *)(a1 + 452) = 0;
  *(_BYTE *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  return a1;
}

void sub_1AD812038(_Unwind_Exception *a1)
{
  uint64_t v1;
  kaldi::nnet1::Nnet *v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 408) = v5;
    operator delete(v5);
  }
  kaldi::nnet1::Nnet::~Nnet(v2);
  _Unwind_Resume(a1);
}

void quasar::HybridEndpointConfig::~HybridEndpointConfig(void **this)
{
  void *v2;
  void *v3;

  if (*((char *)this + 503) < 0)
    operator delete(this[60]);
  if (*((char *)this + 479) < 0)
    operator delete(this[57]);
  v2 = this[53];
  if (v2)
  {
    this[54] = v2;
    operator delete(v2);
  }
  v3 = this[50];
  if (v3)
  {
    this[51] = v3;
    operator delete(v3);
  }
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(this + 3));
}

void quasar::EagerResultAcceptConfig::registerParams(quasar::EagerResultAcceptConfig *this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Endpoint model file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 400, (uint64_t)__p, 0, 36, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "model-feature-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "sequence of features for endpoint model");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 424, (uint64_t)__p, 0, 36, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "model is memory mapped");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 448, (uint64_t)__p, 0, 36, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1AD812230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::EagerResultAcceptConfig::~EagerResultAcceptConfig(void **this)
{
  void *v2;

  if (*((char *)this + 447) < 0)
    operator delete(this[53]);
  if (*((char *)this + 423) < 0)
    operator delete(this[50]);
  v2 = this[47];
  if (v2)
  {
    this[48] = v2;
    operator delete(v2);
  }
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)this);
}

void quasar::DefaultServerEndpointFeatsConfig::registerParams(quasar::DefaultServerEndpointFeatsConfig *this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, quasar::EP_NUM_OF_WORDS_STR[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "num-of-words default");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 24, (uint64_t)__p, 0, 51, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, quasar::EP_NUM_TRAILING_SIL_STR[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "trailing-silence-duration default");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 28, (uint64_t)__p, 0, 51, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, quasar::EP_EOS_LIKELIHOOD_STR[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "eos-likelihood default");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 32, (uint64_t)__p, 0, 51, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, quasar::EP_SILENCE_POSTERIOR_STR[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "silence-posterior default");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 36, (uint64_t)__p, 0, 51, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1AD8124AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t *quasar::DefaultServerEndpointFeatsConfig::init(uint64_t **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v7;
  uint64_t v8;

  v2 = *((unsigned int *)this + 6);
  v7 = quasar::EP_NUM_OF_WORDS_STR[0];
  v8 = v2;
  std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_impl<std::pair<char const*,int>>(this, (uint64_t)&v7);
  v3 = *((unsigned int *)this + 7);
  v7 = quasar::EP_NUM_TRAILING_SIL_STR[0];
  v8 = v3;
  std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_impl<std::pair<char const*,int>>(this, (uint64_t)&v7);
  v4 = *((unsigned int *)this + 8);
  v7 = quasar::EP_EOS_LIKELIHOOD_STR[0];
  v8 = v4;
  std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_impl<std::pair<char const*,float>>(this, (uint64_t)&v7);
  v5 = *((unsigned int *)this + 9);
  v7 = quasar::EP_SILENCE_POSTERIOR_STR[0];
  v8 = v5;
  return std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_impl<std::pair<char const*,float>>(this, (uint64_t)&v7);
}

uint64_t quasar::HybridEndpointer::HybridEndpointer(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  _BOOL4 hasParam;
  uint64_t Ptree;
  __int128 v10;
  unint64_t v11;
  const std::string *v12;
  uint64_t i;
  quasar::HybridEndpointConfig *v14;
  std::string *v15;
  __int128 v16;
  _BOOL4 v17;
  _BOOL4 v18;
  uint64_t SpeechModelInfo;
  _BOOL4 v20;
  _BOOL4 v21;
  quasar::DefaultServerEndpointFeatsConfig *v23;
  quasar::EagerResultAcceptConfig *v24;
  std::string v25;
  _BYTE __p[32];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  std::string v42;
  std::string v43[65];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v24 = (quasar::EagerResultAcceptConfig *)(a1 + 32);
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 32));
  *(_OWORD *)(a1 + 465) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 488) = a1 + 496;
  *(_QWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 0x3F7F6849410FD70ALL;
  *(_QWORD *)(a1 + 528) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 536) = 850045863;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 589) = 0u;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v43);
  v23 = (quasar::DefaultServerEndpointFeatsConfig *)(a1 + 488);
  memset(&v42, 0, sizeof(v42));
  memset(__p, 0, sizeof(__p));
  LODWORD(v27) = 1065353216;
  LODWORD(a2) = quasar::SystemConfig::readJsonFile((uint64_t)v43, a2, (uint64_t *)&v42, (uint64_t)__p, 0, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  *(_QWORD *)__p = &v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if ((_DWORD)a2 == 2)
  {
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v27 = 0u;
    memset(__p, 0, sizeof(__p));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Hybrid endpointer created with incorrect version", 48);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "hybrid-endpoint");
  hasParam = quasar::SystemConfig::hasParam((uint64_t)v43, (uint64_t)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (!hasParam)
  {
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v27 = 0u;
    memset(__p, 0, sizeof(__p));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Missing hybrid endpointer config", 32);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&v42, "hybrid-endpoint");
  Ptree = quasar::SystemConfig::getPtree((uint64_t)v43, (uint64_t)&v42);
  *(_DWORD *)__p = *(_DWORD *)Ptree;
  if (*(char *)(Ptree + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__p[8], *(const std::string::value_type **)(Ptree + 8), *(_QWORD *)(Ptree + 16));
  }
  else
  {
    v10 = *(_OWORD *)(Ptree + 8);
    *(_QWORD *)&__p[24] = *(_QWORD *)(Ptree + 24);
    *(_OWORD *)&__p[8] = v10;
  }
  v27 = 0uLL;
  *(_QWORD *)&v28 = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)&v27, *(_QWORD *)(Ptree + 32), *(_QWORD *)(Ptree + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(Ptree + 40) - *(_QWORD *)(Ptree + 32)) >> 3));
  BYTE8(v28) = *(_BYTE *)(Ptree + 56);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  v11 = quasar::PTree::size((quasar::PTree *)__p);
  std::vector<quasar::HybridEndpointConfig>::reserve((uint64_t *)a1, v11);
  v12 = (const std::string *)quasar::PTree::begin((quasar::PTree *)__p);
  for (i = quasar::PTree::end((quasar::PTree *)__p);
        v12 != (const std::string *)i;
        v12 = (const std::string *)((char *)v12 + 88))
  {
    v14 = (quasar::HybridEndpointConfig *)std::vector<quasar::HybridEndpointConfig>::emplace<std::string const&>((uint64_t *)a1, *(_QWORD *)(a1 + 8), v12);
    std::operator+<char>();
    v15 = std::string::append(&v25, ".");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    quasar::SystemConfig::setPrefix(v43, &v42);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    quasar::HybridEndpointConfig::registerParams(v14, (quasar::SystemConfig *)v43);
    std::operator+<char>();
    quasar::SystemConfig::readPtree((uint64_t)v43, (uint64_t)&v42, 0, 0);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    quasar::HybridEndpointConfig::init(v14);
  }
  quasar::PTree::~PTree((quasar::PTree *)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "eager-result-acceptance");
  v17 = quasar::SystemConfig::hasParam((uint64_t)v43, (uint64_t)__p);
  v18 = v17;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (v18)
      goto LABEL_20;
  }
  else if (v17)
  {
LABEL_20:
    std::string::basic_string[abi:ne180100]<0>(__p, "eager-result-acceptance.");
    quasar::SystemConfig::setPrefix(v43, (const std::string *)__p);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    quasar::EagerResultAcceptConfig::registerParams(v24, (quasar::SystemConfig *)v43);
    std::string::basic_string[abi:ne180100]<0>(__p, "eager-result-acceptance");
    quasar::SystemConfig::readPtree((uint64_t)v43, (uint64_t)__p, 0, 0);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    quasar::EndpointConfigHelper::initModels(a1 + 432, (uint64_t)v24, *(unsigned __int8 *)(a1 + 480));
    quasar::EndpointConfigHelper::initFeatures(a1 + 456, a1 + 408);
    goto LABEL_28;
  }
  if (quasar::gLogLevel >= 2)
  {
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v27 = 0u;
    memset(__p, 0, sizeof(__p));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Missing eager-result-acceptance config", 38);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
  }
LABEL_28:
  SpeechModelInfo = quasar::SystemConfig::getSpeechModelInfo((quasar::SystemConfig *)v43);
  std::to_string((std::string *)__p, *(_DWORD *)(SpeechModelInfo + 268));
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = *(_OWORD *)__p;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)&__p[16];
  *(_QWORD *)(a1 + 528) = 0xBFF0000000000000;
  *(_BYTE *)(a1 + 604) = a3;
  std::string::basic_string[abi:ne180100]<0>(__p, "default-server-ep-features");
  v20 = quasar::SystemConfig::hasParam((uint64_t)v43, (uint64_t)__p);
  v21 = v20;
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v21)
      goto LABEL_38;
  }
  else if (!v20)
  {
    goto LABEL_38;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "default-server-ep-features.");
  quasar::SystemConfig::setPrefix(v43, (const std::string *)__p);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  quasar::DefaultServerEndpointFeatsConfig::registerParams(v23, (quasar::SystemConfig *)v43);
  std::string::basic_string[abi:ne180100]<0>(__p, "default-server-ep-features");
  quasar::SystemConfig::readPtree((uint64_t)v43, (uint64_t)__p, 0, 0);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
LABEL_38:
  quasar::DefaultServerEndpointFeatsConfig::init((uint64_t **)v23);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v43);
  return a1;
}

void sub_1AD812B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::mutex *v23;
  char **v24;
  uint64_t v25;
  void **v26;
  void **v27[207];

  if (a22 < 0)
    operator delete(__p);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v27);
  std::mutex::~mutex(v23);
  std::__tree<std::string>::destroy(v25, *v24);
  quasar::EagerResultAcceptConfig::~EagerResultAcceptConfig(v26);
  std::vector<quasar::HybridEndpointConfig>::__destroy_vector::operator()[abi:ne180100](v27);
  _Unwind_Resume(a1);
}

void sub_1AD812BF0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a23 < 0)
    operator delete(__p);
  if (a59 < 0)
    operator delete(a54);
  JUMPOUT(0x1AD812CECLL);
}

void sub_1AD812C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    JUMPOUT(0x1AD812C64);
  JUMPOUT(0x1AD812C68);
}

void sub_1AD812C20()
{
  JUMPOUT(0x1AD812C68);
}

void sub_1AD812C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  JUMPOUT(0x1AD812C68);
}

void sub_1AD812C44()
{
  JUMPOUT(0x1AD812CF4);
}

void sub_1AD812C4C()
{
  JUMPOUT(0x1AD812D10);
}

void sub_1AD812C90(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a19 < 0)
    operator delete(__p);
  JUMPOUT(0x1AD812CDCLL);
}

void sub_1AD812CD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  quasar::PTree::~PTree((quasar::PTree *)va);
  JUMPOUT(0x1AD812CE8);
}

uint64_t std::vector<quasar::HybridEndpointConfig>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 9)
  {
    if (a2 >> 55)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::HybridEndpointConfig>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + (v6 << 9);
    std::vector<quasar::HybridEndpointConfig>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<quasar::HybridEndpointConfig>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1AD812DA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::HybridEndpointConfig>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::HybridEndpointConfig>::emplace<std::string const&>(uint64_t *a1, uint64_t a2, const std::string *a3)
{
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v21;
  uint64_t v22;
  uint64_t v23[47];
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int v28;
  char v29;
  std::string v30;
  std::string v31;
  char v32;
  uint64_t v33;

  v4 = a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = (a2 - *a1) >> 9;
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  if (v6 >= v11)
  {
    v16 = ((uint64_t)(v6 - v7) >> 9) + 1;
    if (v16 >> 55)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v17 = v10 - v7;
    if (v17 >> 8 > v16)
      v16 = v17 >> 8;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFE00)
      v18 = 0x7FFFFFFFFFFFFFLL;
    else
      v18 = v16;
    v23[1] = v9;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::HybridEndpointConfig>>(v9, v18);
    else
      v19 = 0;
    *(_QWORD *)&v21 = v19;
    *((_QWORD *)&v21 + 1) = &v19[512 * v8];
    v22 = *((_QWORD *)&v21 + 1);
    v23[0] = (uint64_t)&v19[512 * v18];
    std::__split_buffer<quasar::HybridEndpointConfig>::emplace_back<std::string const&>((__int128 **)&v21, a3);
    v4 = std::vector<quasar::HybridEndpointConfig>::__swap_out_circular_buffer(a1, &v21, v4);
    std::__split_buffer<quasar::HybridEndpointConfig>::~__split_buffer((uint64_t)&v21);
  }
  else if (a2 == v6)
  {
    quasar::HybridEndpointConfig::HybridEndpointConfig(a2, a3);
    a1[1] = v4 + 512;
  }
  else
  {
    v33 = v9;
    quasar::HybridEndpointConfig::HybridEndpointConfig((uint64_t)&v21, a3);
    std::vector<quasar::HybridEndpointConfig>::__move_range((uint64_t)a1, v4, a1[1], v4 + 512);
    v12 = v21;
    *(_DWORD *)(v4 + 16) = v22;
    *(_OWORD *)v4 = v12;
    kaldi::nnet1::Nnet::operator=((kaldi::nnet1::Nnet *)(v7 + (v8 << 9) + 24), v23);
    if ((__int128 *)v4 != &v21)
    {
      v13 = v7 + (v8 << 9);
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v13 + 400), v24, v25, (v25 - (uint64_t)v24) >> 2);
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v13 + 424), v26, v27, (v27 - (uint64_t)v26) >> 2);
    }
    v14 = v28;
    v15 = v7 + (v8 << 9);
    *(_BYTE *)(v15 + 452) = v29;
    *(_DWORD *)(v15 + 448) = v14;
    std::string::operator=((std::string *)(v15 + 456), &v30);
    std::string::operator=((std::string *)(v15 + 480), &v31);
    *(_BYTE *)(v15 + 504) = v32;
    quasar::HybridEndpointConfig::~HybridEndpointConfig((void **)&v21);
  }
  return v4;
}

void sub_1AD812F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v11 + 8) = v10;
  _Unwind_Resume(exception_object);
}

void quasar::HybridEndpointer::~HybridEndpointer(quasar::HybridEndpointer *this)
{
  void **v2;

  std::mutex::~mutex((std::mutex *)((char *)this + 536));
  std::__tree<std::string>::destroy((uint64_t)this + 488, *((char **)this + 62));
  quasar::EagerResultAcceptConfig::~EagerResultAcceptConfig((void **)this + 4);
  v2 = (void **)this;
  std::vector<quasar::HybridEndpointConfig>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t *quasar::HybridEndpointer::defaultServerEndpointFeatures@<X0>(const void ***this@<X0>, uint64_t *a2@<X8>)
{
  return std::map<std::string,float>::map[abi:ne180100](a2, this + 61);
}

void quasar::HybridEndpointer::updateEndpointThreshold(quasar::HybridEndpointer *this, float a2)
{
  std::mutex *v4;

  if (a2 > 0.0)
  {
    v4 = (std::mutex *)((char *)this + 536);
    std::mutex::lock((std::mutex *)((char *)this + 536));
    *((float *)this + 150) = a2;
    std::mutex::unlock(v4);
  }
}

void quasar::HybridEndpointer::updateEndpointDelayedTriggerSwitch(quasar::HybridEndpointer *this, char a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)((char *)this + 536);
  std::mutex::lock((std::mutex *)((char *)this + 536));
  *((_BYTE *)this + 604) = a2;
  std::mutex::unlock(v4);
}

BOOL quasar::HybridEndpointer::configureForRequest(quasar::HybridEndpointer *this, __int32 a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  __int32 *v7;
  __int32 *v8;
  __int32 *v9;
  _BOOL8 v10;
  _OWORD v12[17];

  v4 = (std::mutex *)((char *)this + 536);
  std::mutex::lock((std::mutex *)((char *)this + 536));
  *((_QWORD *)this + 3) = 0;
  v5 = *(_QWORD *)this;
  v6 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this == v6)
  {
    v10 = 0;
LABEL_10:
    if (quasar::gLogLevel >= 2)
    {
      memset(v12, 0, sizeof(v12));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"No available endpointer for samplingRate = ", 43);
      std::ostream::operator<<();
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v12);
    }
  }
  else
  {
    do
    {
      v7 = *(__int32 **)(v5 + 432);
      v8 = wmemchr(*(__int32 **)(v5 + 424), a2, ((uint64_t)v7 - *(_QWORD *)(v5 + 424)) >> 2);
      if (v8)
        v9 = v8;
      else
        v9 = v7;
      if (v9 != *(__int32 **)(v5 + 432))
      {
        *((_QWORD *)this + 3) = v5;
        *((_DWORD *)this + 150) = *(_DWORD *)v5;
        v10 = 1;
        goto LABEL_13;
      }
      v5 += 512;
    }
    while (v5 != v6);
    v10 = *((_QWORD *)this + 3) != 0;
    if (!v10)
      goto LABEL_10;
  }
LABEL_13:
  std::mutex::unlock(v4);
  return v10;
}

void sub_1AD8131D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

BOOL quasar::HybridEndpointer::evalEndPoint(uint64_t a1, float *a2, int a3, int a4, unsigned int **a5, int a6, double **a7, _DWORD *a8, double a9, float a10, float a11, float a12, float a13, float a14, float a15, float a16)
{
  std::mutex *v32;
  unint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  double *v36;
  double *v37;
  double *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  double v44;
  double *v45;
  double *v46;
  double *v47;
  double *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  double *v54;
  uint64_t v55;
  double v56;
  double *v57;
  double *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  double *v64;
  char *v65;
  uint64_t v66;
  double v68;
  double v69;
  float v70;
  float v71;
  _QWORD *v72;
  int32x2_t v73;
  __int128 v74;
  __int128 v75;
  char v76;
  _QWORD v77[5];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  double *v95;
  double *v96;

  v32 = (std::mutex *)(a1 + 536);
  std::mutex::lock((std::mutex *)(a1 + 536));
  v34 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v34 + 452))
  {
    v35 = *(float *)(a1 + 600) < a11;
  }
  else
  {
    *a8 = 0;
    if ((float)*(unsigned int *)(v34 + 16) > a16)
    {
      LODWORD(v33) = *(_DWORD *)(v34 + 12);
      a16 = fmin(a16, (double)v33);
    }
    if (*(_DWORD *)(v34 + 4) <= a4 || (float)*(unsigned int *)(v34 + 8) <= a15)
    {
      v44 = (double)a4;
      v45 = a7[2];
      v46 = a7[1];
      if (v46 >= v45)
      {
        v48 = *a7;
        v49 = v46 - *a7;
        v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v51 = (char *)v45 - (char *)v48;
        if (v51 >> 2 > v50)
          v50 = v51 >> 2;
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
          v52 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v52 = v50;
        if (v52)
        {
          v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a7 + 2), v52);
          v48 = *a7;
          v46 = a7[1];
        }
        else
        {
          v53 = 0;
        }
        v54 = (double *)&v53[8 * v49];
        v45 = (double *)&v53[8 * v52];
        *v54 = v44;
        v47 = v54 + 1;
        while (v46 != v48)
        {
          v55 = *((_QWORD *)v46-- - 1);
          *((_QWORD *)v54-- - 1) = v55;
        }
        *a7 = v54;
        a7[1] = v47;
        a7[2] = v45;
        if (v48)
        {
          operator delete(v48);
          v45 = a7[2];
        }
      }
      else
      {
        *v46 = v44;
        v47 = v46 + 1;
      }
      a7[1] = v47;
      v56 = a15;
      if (v47 >= v45)
      {
        v58 = *a7;
        v59 = v47 - *a7;
        v60 = v59 + 1;
        if ((unint64_t)(v59 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v61 = (char *)v45 - (char *)v58;
        if (v61 >> 2 > v60)
          v60 = v61 >> 2;
        if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
          v62 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v62 = v60;
        if (v62)
        {
          v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a7 + 2), v62);
          v58 = *a7;
          v47 = a7[1];
        }
        else
        {
          v63 = 0;
        }
        v64 = (double *)&v63[8 * v59];
        v65 = &v63[8 * v62];
        *v64 = v56;
        v57 = v64 + 1;
        while (v47 != v58)
        {
          v66 = *((_QWORD *)v47-- - 1);
          *((_QWORD *)v64-- - 1) = v66;
        }
        *a7 = v64;
        a7[1] = v57;
        a7[2] = (double *)v65;
        if (v58)
          operator delete(v58);
      }
      else
      {
        *v47 = v56;
        v57 = v47 + 1;
      }
      a7[1] = v57;
      v35 = 1;
    }
    else
    {
      if (*(_BYTE *)(a1 + 604))
        *a8 = *(_DWORD *)(v34 + 448);
      quasar::EndpointConfigHelper::computeFeats(v34 + 400, a3, a4, a5, a6, &v95, a10, a12, a13, a14, a15, a16);
      v37 = v95;
      v36 = v96;
      if ((int)kaldi::nnet1::Nnet::InputDim((kaldi::nnet1::Nnet *)(*(_QWORD *)(a1 + 24) + 24)) != v36 - v37)
      {
        v93 = 0u;
        v94 = 0u;
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v78 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v78);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78, (uint64_t)"Feature dim=", 12);
        v72 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)" does not match model dim=", 26);
        kaldi::nnet1::Nnet::InputDim((kaldi::nnet1::Nnet *)(*(_QWORD *)(a1 + 24) + 24));
        std::ostream::operator<<();
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v78);
      }
      kaldi::Matrix<float>::Matrix((uint64_t)v77, 1, (unint64_t)((char *)v96 - (char *)v95) >> 3, 0, 0);
      v38 = v95;
      if (v96 != v95)
      {
        v39 = 0;
        v40 = v96 - v95;
        v41 = v77[0];
        if (v40 <= 1)
          v40 = 1;
        do
        {
          v42 = v38[v39];
          *(float *)(v41 + 4 * v39++) = v42;
        }
        while (v40 != v39);
      }
      v74 = 0u;
      v75 = 0u;
      v73 = (int32x2_t)&unk_1E5D34170;
      v76 = 0;
      v43 = *(_QWORD *)(a1 + 24);
      kaldi::CuMatrix<float>::CuMatrix<float>(&v78, v77, 111, 0);
      kaldi::nnet1::Nnet::Feedforward((uint64_t *)(v43 + 24), (uint64_t)&v78, &v73, -1, 0);
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v78);
      if (HIDWORD(v74) == 1 || DWORD2(v74) == 1)
      {
        if (quasar::gLogLevel >= 6)
        {
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          v79 = 0u;
          v80 = 0u;
          v78 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v78);
          kaldi::MatrixBase<float>::Write(v77, &v78, 0, 0);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78, (uint64_t)", ep-nnet-value=", 16);
          std::ostream::operator<<();
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v78);
        }
        *a2 = *(float *)v74;
      }
      else if (quasar::gLogLevel >= 1)
      {
        v93 = 0u;
        v94 = 0u;
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v78 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v78);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78, (uint64_t)"Nnet output for endpointing is incorrect", 40);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v78);
      }
      v68 = *(double *)(a1 + 528);
      v69 = v68;
      if (v68 > -1.0)
        v69 = v68 + (double)*(int *)(*(_QWORD *)(a1 + 24) + 448);
      if (v69 <= 0.0 || v69 > a9)
      {
        v70 = *a2;
        v71 = *(float *)(a1 + 600);
        if (*(_BYTE *)(a1 + 604))
        {
          v35 = 0;
          if (v68 == -1.0 && v70 >= v71)
          {
            v35 = 0;
            *(double *)(a1 + 528) = a9;
          }
        }
        else
        {
          if (&v95 != a7 && v70 >= v71)
          {
            std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)a7, (char *)v95, (uint64_t)v96, v96 - v95);
            v70 = *a2;
            v71 = *(float *)(a1 + 600);
          }
          v35 = v70 >= v71;
        }
      }
      else
      {
        if (&v95 != a7)
          std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)a7, (char *)v95, (uint64_t)v96, v96 - v95);
        v35 = 1;
      }
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v73);
      kaldi::Matrix<float>::~Matrix((uint64_t)v77);
      if (v95)
      {
        v96 = v95;
        operator delete(v95);
      }
    }
  }
  std::mutex::unlock(v32);
  return v35;
}

void sub_1AD813850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  JUMPOUT(0x1AD813864);
}

void sub_1AD813860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::Matrix<float>::~Matrix((uint64_t)va1);
  v5 = *(void **)(v3 - 168);
  if (v5)
  {
    *(_QWORD *)(v3 - 160) = v5;
    operator delete(v5);
  }
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_1AD813894()
{
  JUMPOUT(0x1AD8138A0);
}

uint64_t quasar::HybridEndpointer::acceptEagerResult(_QWORD *a1, int a2, int a3, unsigned int **a4, int a5, char *a6, float a7, float a8, float a9, float a10, float a11, float a12)
{
  kaldi::nnet1::Nnet *v13;
  _BYTE *v14;
  _BYTE *v15;
  double *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  _QWORD *v23;
  int32x2_t v24;
  __int128 v25;
  __int128 v26;
  char v27;
  _QWORD v28[5];
  void *__p;
  _BYTE *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  if (a1[52] != a1[51])
  {
    v13 = (kaldi::nnet1::Nnet *)(a1 + 4);
    quasar::EndpointConfigHelper::computeFeats((uint64_t)(a1 + 51), a2, a3, a4, a5, (double **)&__p, a7, a8, a9, a10, a11, a12);
    v15 = __p;
    v14 = v30;
    if ((int)kaldi::nnet1::Nnet::InputDim(v13) != (v14 - v15) >> 3)
    {
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v31 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Feature dim=", 12);
      v23 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" does not match model dim=", 26);
      kaldi::nnet1::Nnet::InputDim(v13);
      std::ostream::operator<<();
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v31);
    }
    kaldi::Matrix<float>::Matrix((uint64_t)v28, 1, (unint64_t)(v30 - (_BYTE *)__p) >> 3, 0, 0);
    v16 = (double *)__p;
    if (v30 != __p)
    {
      v17 = 0;
      v18 = (v30 - (_BYTE *)__p) >> 3;
      v19 = v28[0];
      if (v18 <= 1)
        v18 = 1;
      do
      {
        v20 = v16[v17];
        *(float *)(v19 + 4 * v17++) = v20;
      }
      while (v18 != v17);
    }
    v26 = 0u;
    v25 = 0u;
    v24 = (int32x2_t)&unk_1E5D34170;
    v27 = 0;
    kaldi::CuMatrix<float>::CuMatrix<float>(&v31, v28, 111, 0);
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)v13, (uint64_t)&v31, &v24, -1, 0);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v31);
    if (HIDWORD(v25) == 1 || DWORD2(v25) == 1)
    {
      if (quasar::gLogLevel >= 6)
      {
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v31 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
        kaldi::MatrixBase<float>::Write(v28, &v31, 0, 0);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)", nnet-output=", 14);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v31);
      }
      if (*(float *)v25 >= 0.99)
      {
        if (&__p != (void **)a6)
          std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(a6, (char *)__p, (uint64_t)v30, (v30 - (_BYTE *)__p) >> 3);
        v21 = 1;
        goto LABEL_21;
      }
    }
    else if (quasar::gLogLevel >= 4)
    {
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v31 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Nnet output for recognitionResult validation is incorrect", 57);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v31);
    }
    v21 = 0;
LABEL_21:
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v24);
    kaldi::Matrix<float>::~Matrix((uint64_t)v28);
    if (__p)
    {
      v30 = __p;
      operator delete(__p);
    }
    return v21;
  }
  if (quasar::gLogLevel >= 2)
  {
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v31 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"EagerResultAccept not configured", 32);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v31);
  }
  return 0;
}

void sub_1AD813C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  JUMPOUT(0x1AD813C7CLL);
}

uint64_t *std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_impl<std::pair<char const*,int>>(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  void **v5;
  uint64_t v7;
  void *__p;
  uint64_t v9;

  std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__construct_node<std::pair<char const*,int>>((uint64_t)a1, a2, (uint64_t)&__p);
  v3 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v7, (const void **)__p + 4);
  v4 = *v3;
  if (*v3)
  {
    v5 = (void **)__p;
    __p = 0;
    if (v5)
      std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100]((uint64_t)&v9, v5);
  }
  else
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v7, v3, (uint64_t *)__p);
    return (uint64_t *)__p;
  }
  return v4;
}

void sub_1AD813D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

float std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__construct_node<std::pair<char const*,int>>@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  float *v6;
  float result;

  v5 = a1 + 8;
  v6 = (float *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v6 + 4, *(char **)a2);
  result = (float)*(int *)(a2 + 8);
  v6[14] = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1AD813DC8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_unique_impl<std::pair<char const*,float>>(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  void **v5;
  uint64_t v7;
  void *__p;
  uint64_t v9;

  std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__construct_node<std::pair<char const*,float>>((uint64_t)a1, a2, (uint64_t)&__p);
  v3 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v7, (const void **)__p + 4);
  v4 = *v3;
  if (*v3)
  {
    v5 = (void **)__p;
    __p = 0;
    if (v5)
      std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100]((uint64_t)&v9, v5);
  }
  else
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v7, v3, (uint64_t *)__p);
    return (uint64_t *)__p;
  }
  return v4;
}

void sub_1AD813E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

float std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__construct_node<std::pair<char const*,float>>@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  float *v6;
  float result;

  v5 = a1 + 8;
  v6 = (float *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v6 + 4, *(char **)a2);
  result = *(float *)(a2 + 8);
  v6[14] = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1AD813EF8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::vector<quasar::HybridEndpointConfig>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        quasar::HybridEndpointConfig::~HybridEndpointConfig(v4 - 64);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<quasar::HybridEndpointConfig>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::HybridEndpointConfig>,std::reverse_iterator<quasar::HybridEndpointConfig*>,std::reverse_iterator<quasar::HybridEndpointConfig*>,std::reverse_iterator<quasar::HybridEndpointConfig*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::HybridEndpointConfig>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 55)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a2 << 9);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::HybridEndpointConfig>,std::reverse_iterator<quasar::HybridEndpointConfig*>,std::reverse_iterator<quasar::HybridEndpointConfig*>,std::reverse_iterator<quasar::HybridEndpointConfig*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  quasar::HybridEndpointConfig *v12;

  v10 = 0;
  v11 = a7 - 512;
  while (a3 + v10 != a5)
  {
    v12 = (quasar::HybridEndpointConfig *)(v11 + v10);
    v10 -= 512;
    quasar::HybridEndpointConfig::HybridEndpointConfig(v12, (const quasar::HybridEndpointConfig *)(v10 + a3));
  }
  return a6;
}

quasar::HybridEndpointConfig *quasar::HybridEndpointConfig::HybridEndpointConfig(quasar::HybridEndpointConfig *this, const quasar::HybridEndpointConfig *a2)
{
  __int128 v4;
  int v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  v4 = *(_OWORD *)a2;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *(_OWORD *)this = v4;
  kaldi::nnet1::Nnet::Nnet((quasar::HybridEndpointConfig *)((char *)this + 24), (const quasar::HybridEndpointConfig *)((char *)a2 + 24));
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 0;
  std::vector<quasar::EndpointConfigHelper::EndPointFeatType>::__init_with_size[abi:ne180100]<quasar::EndpointConfigHelper::EndPointFeatType*,quasar::EndpointConfigHelper::EndPointFeatType*>((_QWORD *)this + 50, *((const void **)a2 + 50), *((_QWORD *)a2 + 51), (uint64_t)(*((_QWORD *)a2 + 51) - *((_QWORD *)a2 + 50)) >> 2);
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)this + 53, *((const void **)a2 + 53), *((_QWORD *)a2 + 54), (uint64_t)(*((_QWORD *)a2 + 54) - *((_QWORD *)a2 + 53)) >> 2);
  v5 = *((_DWORD *)a2 + 112);
  *((_BYTE *)this + 452) = *((_BYTE *)a2 + 452);
  *((_DWORD *)this + 112) = v5;
  if (*((char *)a2 + 479) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 19, *((const std::string::value_type **)a2 + 57), *((_QWORD *)a2 + 58));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 456);
    *((_QWORD *)this + 59) = *((_QWORD *)a2 + 59);
    *(_OWORD *)((char *)this + 456) = v6;
  }
  v7 = (std::string *)((char *)this + 480);
  if (*((char *)a2 + 503) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 60), *((_QWORD *)a2 + 61));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 30);
    *((_QWORD *)this + 62) = *((_QWORD *)a2 + 62);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *((_BYTE *)this + 504) = *((_BYTE *)a2 + 504);
  return this;
}

void sub_1AD8141C4(_Unwind_Exception *a1)
{
  kaldi::nnet1::Nnet *v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;

  if (*(char *)(v2 + 479) < 0)
    operator delete(*v5);
  v7 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 432) = v7;
    operator delete(v7);
  }
  v8 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 408) = v8;
    operator delete(v8);
  }
  kaldi::nnet1::Nnet::~Nnet(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<quasar::EndpointConfigHelper::EndPointFeatType>::__init_with_size[abi:ne180100]<quasar::EndpointConfigHelper::EndPointFeatType*,quasar::EndpointConfigHelper::EndPointFeatType*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1AD81427C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1AD8142F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<quasar::HybridEndpointConfig>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 512;
    quasar::HybridEndpointConfig::~HybridEndpointConfig((void **)(i - 512));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<quasar::HybridEndpointConfig>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  quasar::HybridEndpointConfig *v8;
  const quasar::HybridEndpointConfig *v10;
  char v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = (quasar::HybridEndpointConfig *)v6;
  if (v7 < a3)
  {
    v10 = (const quasar::HybridEndpointConfig *)(a2 + v6 - a4);
    v8 = *(quasar::HybridEndpointConfig **)(a1 + 8);
    do
    {
      quasar::HybridEndpointConfig::HybridEndpointConfig(v8, v10);
      v10 = (const quasar::HybridEndpointConfig *)((char *)v10 + 512);
      v8 = (quasar::HybridEndpointConfig *)((char *)v8 + 512);
    }
    while ((unint64_t)v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::HybridEndpointConfig *,quasar::HybridEndpointConfig *,quasar::HybridEndpointConfig *>((uint64_t)&v12, a2, v7, v6);
}

void sub_1AD8143F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<quasar::HybridEndpointConfig>::emplace_back<std::string const&>(__int128 **a1, const std::string *a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  unint64_t v13;
  uint64_t v14;
  __int128 *v15;
  quasar::HybridEndpointConfig *v16;
  uint64_t v17;
  char *v18;
  const quasar::HybridEndpointConfig *v19;
  uint64_t v20;
  quasar::HybridEndpointConfig *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t result;
  __int128 *v26;
  int64x2_t v27;
  char *v28;
  __int128 *v29;

  v4 = a1[2];
  if (v4 == a1[3])
  {
    v5 = a1[1];
    v6 = (char *)v5 - (char *)*a1;
    if (v5 <= *a1)
    {
      if (v4 == *a1)
        v13 = 1;
      else
        v13 = ((char *)v4 - (char *)*a1) >> 8;
      v14 = (uint64_t)a1[4];
      v29 = a1[4];
      v15 = (__int128 *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::HybridEndpointConfig>>(v14, v13);
      v16 = (quasar::HybridEndpointConfig *)&v15[32 * (v13 >> 2)];
      v26 = v15;
      v27.i64[0] = (uint64_t)v16;
      v18 = (char *)&v15[32 * v17];
      v27.i64[1] = (uint64_t)v16;
      v28 = v18;
      v19 = (const quasar::HybridEndpointConfig *)a1[1];
      v20 = (char *)a1[2] - (char *)v19;
      if (v20)
      {
        v21 = (quasar::HybridEndpointConfig *)((char *)v16 + (v20 & 0xFFFFFFFFFFFFFE00));
        v22 = v20 >> 9 << 9;
        do
        {
          quasar::HybridEndpointConfig::HybridEndpointConfig(v16, v19);
          v16 = (quasar::HybridEndpointConfig *)((char *)v16 + 512);
          v19 = (const quasar::HybridEndpointConfig *)((char *)v19 + 512);
          v22 -= 512;
        }
        while (v22);
        v15 = v26;
        v16 = (quasar::HybridEndpointConfig *)v27.i64[0];
        v23 = *(int64x2_t *)(a1 + 1);
        v18 = v28;
      }
      else
      {
        v23 = vdupq_n_s64((unint64_t)v19);
        v21 = v16;
      }
      v26 = *a1;
      *a1 = v15;
      a1[1] = (__int128 *)v16;
      v27 = v23;
      v24 = (char *)a1[3];
      a1[2] = (__int128 *)v21;
      a1[3] = (__int128 *)v18;
      v28 = v24;
      std::__split_buffer<quasar::HybridEndpointConfig>::~__split_buffer((uint64_t)&v26);
      v4 = a1[2];
    }
    else
    {
      v7 = v6 >> 9;
      v8 = v6 >> 9 < -1;
      v9 = (v6 >> 9) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = v10 >> 1;
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::HybridEndpointConfig *,quasar::HybridEndpointConfig *,quasar::HybridEndpointConfig *>((uint64_t)&v26, v5, v4, (uint64_t)&v5[-32 * (v10 >> 1)]);
      v4 = v12;
      a1[1] -= 32 * v11;
      a1[2] = v12;
    }
  }
  result = quasar::HybridEndpointConfig::HybridEndpointConfig((uint64_t)v4, a2);
  a1[2] += 32;
  return result;
}

void sub_1AD814540(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::HybridEndpointConfig>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::HybridEndpointConfig>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::HybridEndpointConfig>,std::reverse_iterator<quasar::HybridEndpointConfig*>,std::reverse_iterator<quasar::HybridEndpointConfig*>,std::reverse_iterator<quasar::HybridEndpointConfig*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::HybridEndpointConfig>,quasar::HybridEndpointConfig*,quasar::HybridEndpointConfig*,quasar::HybridEndpointConfig*>(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::HybridEndpointConfig *,quasar::HybridEndpointConfig *,quasar::HybridEndpointConfig *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int v12;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      v9 = a3 + v7;
      v10 = *(_OWORD *)(a3 + v7 - 512);
      v11 = a4 + v7 - 512;
      *(_DWORD *)(v11 + 16) = *(_DWORD *)(a3 + v7 - 496);
      *(_OWORD *)v11 = v10;
      kaldi::nnet1::Nnet::operator=((kaldi::nnet1::Nnet *)(a4 + v7 - 488), (uint64_t *)(a3 + v7 - 488));
      if (a3 != a4)
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v8 - 112), *(char **)(v9 - 112), *(_QWORD *)(v9 - 104), (uint64_t)(*(_QWORD *)(v9 - 104) - *(_QWORD *)(v9 - 112)) >> 2);
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v8 - 88), *(char **)(v9 - 88), *(_QWORD *)(v9 - 80), (uint64_t)(*(_QWORD *)(v9 - 80) - *(_QWORD *)(v9 - 88)) >> 2);
      }
      v12 = *(_DWORD *)(v9 - 64);
      *(_BYTE *)(v8 - 60) = *(_BYTE *)(v9 - 60);
      *(_DWORD *)(v8 - 64) = v12;
      std::string::operator=((std::string *)(v8 - 56), (const std::string *)(v9 - 56));
      std::string::operator=((std::string *)(v8 - 32), (const std::string *)(v9 - 32));
      *(_BYTE *)(v8 - 8) = *(_BYTE *)(v9 - 8);
      v7 -= 512;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

__int128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::HybridEndpointConfig *,quasar::HybridEndpointConfig *,quasar::HybridEndpointConfig *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 *v6;
  __int128 v7;
  int v8;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    v7 = *v5;
    *(_DWORD *)(a4 + 16) = *((_DWORD *)v5 + 4);
    *(_OWORD *)a4 = v7;
    kaldi::nnet1::Nnet::operator=((kaldi::nnet1::Nnet *)(a4 + 24), (uint64_t *)v5 + 3);
    if ((__int128 *)a4 != v5)
    {
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a4 + 400), *((char **)v5 + 50), *((_QWORD *)v5 + 51), (uint64_t)(*((_QWORD *)v5 + 51) - *((_QWORD *)v5 + 50)) >> 2);
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a4 + 424), *((char **)v5 + 53), *((_QWORD *)v5 + 54), (uint64_t)(*((_QWORD *)v5 + 54) - *((_QWORD *)v5 + 53)) >> 2);
    }
    v8 = *((_DWORD *)v5 + 112);
    *(_BYTE *)(a4 + 452) = *((_BYTE *)v5 + 452);
    *(_DWORD *)(a4 + 448) = v8;
    std::string::operator=((std::string *)(a4 + 456), (const std::string *)v5 + 19);
    std::string::operator=((std::string *)(a4 + 480), (const std::string *)v5 + 20);
    *(_BYTE *)(a4 + 504) = *((_BYTE *)v5 + 504);
    a4 += 512;
    v5 += 32;
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::HybridEndpointConfig>,quasar::HybridEndpointConfig*,quasar::HybridEndpointConfig*,quasar::HybridEndpointConfig*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      quasar::HybridEndpointConfig::HybridEndpointConfig((quasar::HybridEndpointConfig *)(a4 + v7), (const quasar::HybridEndpointConfig *)(a2 + v7));
      v7 += 512;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1AD81481C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 512;
    do
    {
      quasar::HybridEndpointConfig::~HybridEndpointConfig((void **)(v4 + v2));
      v2 -= 512;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,float>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,float>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,float>,std::__tree_node<std::__value_type<std::string,float>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1AD81487C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,float>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,float>,std::__tree_node<std::__value_type<std::string,float>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,float> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,float> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  const void **v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__construct_node<std::pair<std::string const,float> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

float std::__tree<std::__value_type<std::string,float>,std::__map_value_compare<std::string,std::__value_type<std::string,float>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,float>>>::__construct_node<std::pair<std::string const,float> const&>@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  float result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  }
  result = *(float *)(a2 + 24);
  *((float *)v6 + 14) = result;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1AD814A20(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,double>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

quasar::SystemConfig *quasar::SpeechRecognizerConfig::SpeechRecognizerConfig(quasar::SystemConfig *a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5, const quasar::DecoderOptions *a6)
{
  quasar::SystemConfig *v12;
  std::runtime_error *exception;

  v12 = quasar::SystemConfig::SystemConfig(a1);
  *((_WORD *)v12 + 804) = 0;
  *(_OWORD *)((char *)v12 + 1576) = 0u;
  *(_OWORD *)((char *)v12 + 1592) = 0u;
  *(_OWORD *)((char *)v12 + 1544) = 0u;
  *(_OWORD *)((char *)v12 + 1560) = 0u;
  *((_DWORD *)v12 + 403) = 27;
  if (quasar::SystemConfig::readJsonFile((uint64_t)v12, a2, a3, a4, a5, 0) == 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unsupported config file version");
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1E5D38E98;
  }
  quasar::SpeechRecognizerConfig::Initialize(a1, a6);
  return a1;
}

void sub_1AD814B18(_Unwind_Exception *a1)
{
  quasar::SystemConfig *v1;
  uint64_t v2;
  void *v3;

  __cxa_free_exception(v3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 1592);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 1576);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 1560);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  quasar::SystemConfig::~SystemConfig(v1);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizerConfig::Initialize(quasar::SpeechRecognizerConfig *this, const quasar::DecoderOptions *a2)
{
  char *v4;
  uint64_t ModelLoader;
  char *v6;
  char *v7;
  quasar::PTree *PtreeOptional;
  uint64_t String;
  __int128 v10;
  quasar::Geography *v11;
  quasar::ModelLoader *v12;
  std::string::size_type i;
  std::string::size_type v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *SpeechModelInfo;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  void *v36;
  _QWORD *v37;
  void **v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  std::string *v42;
  std::string::size_type size;
  _QWORD *v44;
  void *exception;
  void *__p[2];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t ConfigFileVersion;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  std::string v68;
  void *v69[2];
  unsigned __int8 v70;
  quasar::Geography *v71;
  std::__shared_weak_count *v72;
  char *v73;
  std::__shared_weak_count *v74;
  quasar::EndPointModelConfig *v75;
  std::__shared_weak_count *v76;
  std::string *v77;
  std::__shared_weak_count *v78;

  std::string::basic_string[abi:ne180100]<0>(__p, "misc-shared.");
  quasar::SystemConfig::setPrefix((std::string *)this, (const std::string *)__p);
  if (SBYTE7(v47) < 0)
    operator delete(__p[0]);
  v4 = (char *)operator new(0x68uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E5D42E58;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_DWORD *)v4 + 18) = 4000;
  v4[76] = 0;
  *((_QWORD *)v4 + 11) = 0;
  *((_QWORD *)v4 + 12) = 0;
  *((_QWORD *)v4 + 10) = 0;
  v78 = (std::__shared_weak_count *)v4;
  *(_OWORD *)(v4 + 24) = 0u;
  v77 = (std::string *)(v4 + 24);
  quasar::MiscSharedConfig::registerParams((quasar::MiscSharedConfig *)(v4 + 24), this);
  std::string::basic_string[abi:ne180100]<0>(__p, "misc-shared");
  quasar::SystemConfig::readPtree((uint64_t)this, (uint64_t)__p, 1u, 0);
  if (SBYTE7(v47) < 0)
    operator delete(__p[0]);
  quasar::MiscSharedConfig::init(v77);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)this + 193, (uint64_t *)&v77);
  if (v77[2].__r_.__value_.__s.__data_[4])
  {
    ModelLoader = quasar::SystemConfig::getModelLoader(this);
    quasar::ModelLoader::makeMilANEReadyOnLowEnd(ModelLoader);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "endpoint.");
  quasar::SystemConfig::setPrefix((std::string *)this, (const std::string *)__p);
  if (SBYTE7(v47) < 0)
    operator delete(__p[0]);
  v6 = (char *)operator new(0x88uLL);
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &unk_1E5D43558;
  *((_QWORD *)v6 + 1) = 0;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  v75 = (quasar::EndPointModelConfig *)(v6 + 24);
  v76 = (std::__shared_weak_count *)v6;
  quasar::EndPointModelConfig::registerParams((quasar::EndPointModelConfig *)(v6 + 24), this);
  std::string::basic_string[abi:ne180100]<0>(__p, "endpoint");
  quasar::SystemConfig::readPtree((uint64_t)this, (uint64_t)__p, 1u, 0);
  if (SBYTE7(v47) < 0)
    operator delete(__p[0]);
  quasar::EndPointModelConfig::init(v75, *((const std::string **)this + 193));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)this + 195, (uint64_t *)&v75);
  std::string::basic_string[abi:ne180100]<0>(__p, "eager.");
  quasar::SystemConfig::setPrefix((std::string *)this, (const std::string *)__p);
  if (SBYTE7(v47) < 0)
    operator delete(__p[0]);
  v7 = (char *)operator new(0x38uLL);
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &unk_1E5D42480;
  *((_QWORD *)v7 + 1) = 0;
  *((_DWORD *)v7 + 6) = 1062836634;
  *(_QWORD *)(v7 + 28) = 0x700000007;
  *((_DWORD *)v7 + 9) = 1063675494;
  *(_OWORD *)(v7 + 40) = xmmword_1AE142640;
  v73 = v7 + 24;
  v74 = (std::__shared_weak_count *)v7;
  quasar::EagerConfig::Register((quasar::EagerConfig *)(v7 + 24), this);
  std::string::basic_string[abi:ne180100]<0>(__p, "eager");
  quasar::SystemConfig::readPtree((uint64_t)this, (uint64_t)__p, 1u, 0);
  if (SBYTE7(v47) < 0)
    operator delete(__p[0]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)this + 197, (uint64_t *)&v73);
  _ZNSt3__115allocate_sharedB8ne180100IN6quasar9GeographyENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v71);
  std::string::basic_string[abi:ne180100]<0>(v69, "geo-config-file");
  PtreeOptional = (quasar::PTree *)quasar::SystemConfig::getPtreeOptional((uint64_t)this, (uint64_t)v69);
  if (PtreeOptional)
  {
    quasar::SystemConfig::Version::Version(&v65, 37, 0);
    __p[0] = (void *)quasar::SystemConfig::getConfigFileVersion(this);
    if (quasar::SystemConfig::Version::operator<(__p, &v65))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"The ", 4);
      if ((v70 & 0x80u) == 0)
        v38 = v69;
      else
        v38 = (void **)v69[0];
      if ((v70 & 0x80u) == 0)
        v39 = v70;
      else
        v39 = (uint64_t)v69[1];
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v38, v39);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" field available since version ", 31);
      quasar::SystemConfig::Version::str((quasar::SystemConfig::Version *)&v65, &v68);
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = &v68;
      else
        v42 = (std::string *)v68.__r_.__value_.__r.__words[0];
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
      else
        size = v68.__r_.__value_.__l.__size_;
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)". Please upgrade config.", 24);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      exception = __cxa_allocate_exception(0x20uLL);
      std::stringbuf::str();
      quasar::PTree::Error::Error(exception, &v68);
    }
    String = quasar::PTree::getString(PtreeOptional);
    if (*(char *)(String + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)String, *(_QWORD *)(String + 8));
    }
    else
    {
      v10 = *(_OWORD *)String;
      *(_QWORD *)&v47 = *(_QWORD *)(String + 16);
      *(_OWORD *)__p = v10;
    }
    v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D35C68;
    v11 = v71;
    v12 = (quasar::ModelLoader *)quasar::SystemConfig::getModelLoader(this);
    quasar::Geography::loadFromFile(v11, (__int128 *)__p, v12, (uint64_t)&v68);
    quasar::BitmapLoaderImpl::~BitmapLoaderImpl((quasar::BitmapLoaderImpl *)&v68);
    if (SBYTE7(v47) < 0)
      operator delete(__p[0]);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)this + 199, (uint64_t *)&v71);
  std::string::basic_string[abi:ne180100]<0>(__p, "feature-read.");
  quasar::SystemConfig::setPrefix((std::string *)this, (const std::string *)__p);
  if (SBYTE7(v47) < 0)
    operator delete(__p[0]);
  kaldi::OnlineFeatureMatrixOptions::Register((uint64_t)this + 1612, (uint64_t)this);
  std::string::basic_string[abi:ne180100]<0>(__p, "feature-read");
  quasar::SystemConfig::readPtree((uint64_t)this, (uint64_t)__p, 0, 0);
  if (SBYTE7(v47) < 0)
    operator delete(__p[0]);
  quasar::collectRecogInfoFromSysConfigHelper(this, (uint64_t *)&v68);
  v65 = 0;
  v66 = 0;
  v67 = 0;
  std::vector<quasar::RecogRequestFilter>::reserve(&v65, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v68.__r_.__value_.__l.__size_ - v68.__r_.__value_.__r.__words[0]) >> 3));
  v14 = v68.__r_.__value_.__l.__size_;
  for (i = v68.__r_.__value_.__r.__words[0]; i != v14; i += 88)
  {
    ConfigFileVersion = quasar::SystemConfig::getConfigFileVersion(this);
    quasar::RecogRequestFilter::RecogRequestFilter(__p);
    v15 = v66;
    if (v66 >= v67)
    {
      v16 = std::vector<quasar::RecogRequestFilter>::__push_back_slow_path<quasar::RecogRequestFilter>(&v65, (__int128 *)__p);
    }
    else
    {
      std::allocator<quasar::RecogRequestFilter>::construct[abi:ne180100]<quasar::RecogRequestFilter,quasar::RecogRequestFilter>((uint64_t)&v67, v66, (__int128 *)__p);
      v16 = v15 + 216;
    }
    v66 = v16;
    quasar::RecogRequestFilter::~RecogRequestFilter((quasar::RecogRequestFilter *)__p);
  }
  SpeechModelInfo = (_QWORD *)quasar::SystemConfig::getSpeechModelInfo(this);
  if ((quasar::RecogRequestFilter::validateFilters(SpeechModelInfo, &v65) & 1) == 0)
  {
    v36 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "No recognizer component for certain combinations.");
    quasar::PTree::Error::Error(v36, __p);
  }
  *((_WORD *)this + 804) = *(_WORD *)a2;
  if (quasar::gLogLevel >= 5)
  {
    quasar::SystemConfig::getFullListOfParams(this, (uint64_t)&ConfigFileVersion);
    v18 = ConfigFileVersion;
    v19 = v64;
    if (ConfigFileVersion != v64)
    {
      v20 = quasar::gLogLevel;
      do
      {
        if (v20 >= 5)
        {
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v21 = *(char *)(v18 + 23);
          if (v21 >= 0)
            v22 = v18;
          else
            v22 = *(_QWORD *)v18;
          if (v21 >= 0)
            v23 = *(unsigned __int8 *)(v18 + 23);
          else
            v23 = *(_QWORD *)(v18 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, v22, v23);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
          v20 = quasar::gLogLevel;
        }
        v18 += 24;
      }
      while (v18 != v19);
    }
    __p[0] = &ConfigFileVersion;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  __p[0] = &v65;
  std::vector<quasar::RecogRequestFilter>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v68;
  std::vector<std::pair<std::string,quasar::PTree>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if ((char)v70 < 0)
    operator delete(v69[0]);
  v24 = v72;
  if (v72)
  {
    p_shared_owners = (unint64_t *)&v72->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v74;
  if (v74)
  {
    v28 = (unint64_t *)&v74->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v76;
  if (v76)
  {
    v31 = (unint64_t *)&v76->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v78;
  if (v78)
  {
    v34 = (unint64_t *)&v78->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_1AD81532C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;
  uint64_t v16;

  if (*(char *)(v16 - 153) < 0)
  {
    operator delete(*(void **)(v16 - 176));
    if ((v15 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&__p);
      if (*(char *)(v16 - 129) < 0)
        operator delete(*(void **)(v16 - 152));
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v16 - 128);
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v16 - 112);
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v16 - 96);
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v16 - 80);
      _Unwind_Resume(a1);
    }
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

quasar::SpeechRecognizerConfig *quasar::SpeechRecognizerConfig::SpeechRecognizerConfig(quasar::SpeechRecognizerConfig *this, const quasar::SystemConfig *a2, const quasar::DecoderOptions *a3)
{
  uint64_t v5;

  v5 = quasar::SystemConfig::SystemConfig(this, a2, 1, 1);
  *(_WORD *)(v5 + 1608) = 0;
  *(_OWORD *)(v5 + 1576) = 0u;
  *(_OWORD *)(v5 + 1592) = 0u;
  *(_OWORD *)(v5 + 1544) = 0u;
  *(_OWORD *)(v5 + 1560) = 0u;
  *(_DWORD *)(v5 + 1612) = 27;
  quasar::SpeechRecognizerConfig::Initialize((quasar::SpeechRecognizerConfig *)v5, a3);
  return this;
}

void sub_1AD8155C0(_Unwind_Exception *a1)
{
  quasar::SystemConfig *v1;
  uint64_t v2;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 1592);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 1576);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 1560);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  quasar::SystemConfig::~SystemConfig(v1);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizerConfig::~SpeechRecognizerConfig(quasar::SpeechRecognizerConfig *this)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1592);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1576);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1560);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1544);
  quasar::SystemConfig::~SystemConfig(this);
}

void quasar::MiscSharedConfig::registerParams(quasar::MiscSharedConfig *this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "voice-trigger-phrase");
  std::string::basic_string[abi:ne180100]<0>(__p, "VoiceTrigger phrase as space separated list of tokens as recognized by the decoder");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 56, (uint64_t)__p, 0, 172, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "voice-trigger-phrases");
  std::string::basic_string[abi:ne180100]<0>(__p, "VoiceTrigger phrases as comma/space separated list of tokens as recognized by the decoder");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this, (uint64_t)__p, 0, 172, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "lead-buffer-leeway");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of samples the primary buffer is allowed to fall behind secondary buffers");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 48, (uint64_t)__p, 0, 237, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "mil-is-ane-ready-on-low-end-device-v2");
  std::string::basic_string[abi:ne180100]<0>(__p, "(default false) set this field to true if MIL in the datapack has all the lowend support");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 52, (uint64_t)__p, 0, 261, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1AD81581C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::MiscSharedConfig::init(std::string *this)
{
  int v2;
  uint64_t v3;
  uint64_t i;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  std::string::size_type size;
  std::string::size_type v10;
  uint64_t *data;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  void *__p[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  void **v32[2];
  char v33;
  uint64_t v34;
  uint64_t v35;

  v2 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if (v2 < 0)
  {
    if (this->__r_.__value_.__l.__size_)
      goto LABEL_8;
  }
  else if (*((_BYTE *)&this->__r_.__value_.__s + 23))
  {
    goto LABEL_8;
  }
  if ((this[3].__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
    if (!this[3].__r_.__value_.__s.__data_[7])
      goto LABEL_8;
    goto LABEL_7;
  }
  if (this[2].__r_.__value_.__r.__words[2])
  {
LABEL_7:
    std::string::operator=(this, (std::string *)((char *)this + 56));
    LOBYTE(v2) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
LABEL_8:
  if ((v2 & 0x80) != 0)
  {
    if (!this->__r_.__value_.__l.__size_)
      return;
  }
  else if (!(_BYTE)v2)
  {
    return;
  }
  quasar::toLower((uint64_t)this, (uint64_t)__p);
  std::string::basic_string[abi:ne180100]<0>(v32, ",");
  quasar::splitAndTrimNoEmpty((const std::string *)__p, (char *)v32, &v34);
  if (v33 < 0)
    operator delete(v32[0]);
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  v3 = v34;
  for (i = v35; v3 != i; v3 += 24)
  {
    if (quasar::gLogLevel >= 5)
    {
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"trigger phrase: ", 16);
      v6 = *(char *)(v3 + 23);
      if (v6 >= 0)
        v7 = v3;
      else
        v7 = *(_QWORD *)v3;
      if (v6 >= 0)
        v8 = *(unsigned __int8 *)(v3 + 23);
      else
        v8 = *(_QWORD *)(v3 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v16 = 0;
    quasar::splitStringToTokens(v3, (uint64_t *)__p);
    size = this[1].__r_.__value_.__l.__size_;
    if (size >= this[1].__r_.__value_.__r.__words[2])
    {
      v10 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&this[1], (uint64_t *)__p);
    }
    else
    {
      std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)&this[1], (uint64_t *)__p);
      v10 = size + 24;
    }
    this[1].__r_.__value_.__l.__size_ = v10;
    v32[0] = __p;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v32);
  }
  data = (uint64_t *)this[1].__r_.__value_.__l.__data_;
  v12 = (uint64_t *)this[1].__r_.__value_.__l.__size_;
  v13 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v12 - data));
  if (v12 == data)
    v14 = 0;
  else
    v14 = v13;
  std::__introsort<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*,false>(data, v12, (uint64_t)v32, v14, 1);
  if (quasar::gLogLevel >= 5)
  {
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"num of trigger phrases: ", 24);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  __p[0] = &v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1AD815B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  __p = (void *)(v14 - 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::EndPointModelConfig::registerParams(quasar::EndPointModelConfig *this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Endpointing model file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this, (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "feature-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "List of features");
  quasar::SystemConfig::Register<std::vector<std::string>>((uint64_t)a2, (const void **)v6, (uint64_t)this + 24, (uint64_t)__p, 0, 14, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "voice-trigger-phrase");
  std::string::basic_string[abi:ne180100]<0>(__p, "VoiceTrigger phrase as space separated list of tokens as recognized by the decoder");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 88, (uint64_t)__p, 0, 93, 0, 171, 0);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1AD815CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::EndPointModelConfig::init(quasar::EndPointModelConfig *this, const std::string *a2)
{
  std::string::size_type size;
  void *v5;
  const std::string::value_type **v6;
  std::string::size_type v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char v11[23];
  char v12;
  std::string *p_str;
  std::string __str;
  __int128 v15;

  *(_QWORD *)&v15 = *MEMORY[0x1E0C80C00];
  size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a2->__r_.__value_.__l.__size_;
  if (size)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, ",");
    quasar::splitAndTrimNoEmpty(a2, v11, &__str);
    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)((char *)this + 64));
    *(std::string *)((char *)this + 64) = __str;
    p_str = &__str;
    memset(&__str, 0, sizeof(__str));
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_str);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_14;
    v5 = *(void **)v11;
    goto LABEL_13;
  }
  v6 = (const std::string::value_type **)((char *)this + 88);
  if (*((char *)this + 111) < 0)
  {
    v7 = *((_QWORD *)this + 12);
    if (!v7)
      goto LABEL_14;
    std::string::__init_copy_ctor_external(&__str, *v6, v7);
  }
  else
  {
    if (!*((_BYTE *)this + 111))
      goto LABEL_14;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)v6;
    __str.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 13);
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::wstring> *)((char *)this + 64), &__str, &v15, 1uLL);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    v5 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_13:
    operator delete(v5);
  }
LABEL_14:
  if (*((char *)this + 23) < 0)
  {
    if (!*((_QWORD *)this + 1))
      return;
  }
  else if (!*((_BYTE *)this + 23))
  {
    return;
  }
  _ZNSt3__115allocate_sharedB8ne180100IN5kaldi5nnet14NnetENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&__str);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 48, (__int128 *)&__str);
  v8 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v9 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  kaldi::nnet1::Nnet::Read(*((_QWORD *)this + 6), (uint64_t)this);
}

void sub_1AD815ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::Version::str(quasar::SystemConfig::Version *this@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *p_p;
  std::string::size_type size;
  std::string *v8;
  std::string __p;
  std::string v10;
  std::string v11;

  std::to_string(&v10, *(_DWORD *)this);
  v4 = std::string::append(&v10, ".");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *((_DWORD *)this + 1));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = std::string::append(&v11, (const std::string::value_type *)p_p, size);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
}

void sub_1AD815FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void quasar::PTree::Error::~Error(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_1E5D3B8F8;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
}

{
  this->__vftable = (std::exception_vtbl *)off_1E5D3B8F8;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::OnlineFeatureMatrixOptions::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "batch-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of feature vectors processed w/o interruption");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1AD8160F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::RecogRequestFilter>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x84BDA12F684BDA13 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x12F684BDA12F685)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::RecogRequestFilter>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 216 * v6;
    std::vector<quasar::RecogRequestFilter>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<quasar::RecogRequestFilter>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1AD8161D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::RecogRequestFilter>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::SpeechRecognizerConfig::UnsupportedVersionError::~UnsupportedVersionError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v11, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  v15 += 24;
  std::vector<std::vector<quasar::Token>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer(v14);
  return v12;
}

void sub_1AD816320(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::Token>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t *v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(_QWORD *a1, _QWORD *a2)
{
  void **v2;
  void **v3;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  void **v16[11];

  if (a1 != a2)
  {
    v16[9] = v2;
    v16[10] = v3;
    v6 = a1 + 3;
    if (a1 + 3 != a2)
    {
      v7 = 0;
      v8 = a1;
      do
      {
        v9 = v6;
        v10 = v8[4];
        if (0x6DB6DB6DB6DB6DB7 * ((v10 - v8[3]) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                                            * ((uint64_t)(v8[1] - *v8) >> 5)))
        {
          *(_QWORD *)&v14 = v8[3];
          *((_QWORD *)&v14 + 1) = v10;
          v15 = v8[5];
          v9[1] = 0;
          v9[2] = 0;
          *v9 = 0;
          v11 = v7;
          while (1)
          {
            v12 = (char *)a1 + v11;
            std::vector<quasar::Token>::__vdeallocate((void **)((char *)a1 + v11 + 24));
            *(_OWORD *)(v12 + 24) = *(_OWORD *)v12;
            *((_QWORD *)v12 + 5) = *((_QWORD *)v12 + 2);
            *((_QWORD *)v12 + 1) = 0;
            *((_QWORD *)v12 + 2) = 0;
            *(_QWORD *)v12 = 0;
            if (!v11)
              break;
            v11 -= 24;
            if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v14 + 1) - v14) >> 5) <= (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)v12 - 2) - *((_QWORD *)v12 - 3)) >> 5)))
            {
              v13 = (uint64_t)a1 + v11 + 24;
              goto LABEL_10;
            }
          }
          v13 = (uint64_t)a1;
LABEL_10:
          std::vector<quasar::Token>::__vdeallocate((void **)v13);
          *(_OWORD *)v13 = v14;
          *(_QWORD *)(v13 + 16) = v15;
          v15 = 0;
          v14 = 0uLL;
          v16[0] = (void **)&v14;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v16);
        }
        v6 = v9 + 3;
        v7 += 24;
        v8 = v9;
      }
      while (v9 + 3 != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(_QWORD *a1, _QWORD *a2)
{
  void **v2;
  void **v3;
  void **v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *v8;
  void **v9;
  uint64_t v10;
  __int128 v11;
  void *v12;
  void **v13[9];

  if (a1 != a2)
  {
    v13[7] = v2;
    v13[8] = v3;
    v5 = (void **)a1;
    v6 = a1 + 3;
    if (a1 + 3 != a2)
    {
      do
      {
        v7 = v6;
        v8 = v5[4];
        if (0x6DB6DB6DB6DB6DB7 * ((v8 - (_BYTE *)v5[3]) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                                                    * (((_BYTE *)v5[1] - (_BYTE *)*v5) >> 5)))
        {
          *(_QWORD *)&v11 = v5[3];
          *((_QWORD *)&v11 + 1) = v8;
          v12 = v5[5];
          v7[1] = 0;
          v7[2] = 0;
          *v7 = 0;
          do
          {
            v9 = v5;
            std::vector<quasar::Token>::__vdeallocate(v5 + 3);
            *(_OWORD *)(v5 + 3) = *(_OWORD *)v5;
            v5[5] = v5[2];
            v5[1] = 0;
            v5[2] = 0;
            *v5 = 0;
            v10 = (uint64_t)*(v5 - 3);
            v5 -= 3;
          }
          while (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v11 + 1) - v11) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7 * (((uint64_t)*(v9 - 2) - v10) >> 5)));
          std::vector<quasar::Token>::__vdeallocate(v5 + 3);
          *(_OWORD *)(v5 + 3) = v11;
          v5[5] = v12;
          v11 = 0uLL;
          v12 = 0;
          v13[0] = (void **)&v11;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v13);
        }
        v6 = v7 + 3;
        v5 = (void **)v7;
      }
      while (v7 + 3 != a2);
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *a2;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5);
  v5 = *a1;
  v6 = *a3;
  v7 = 0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5);
  if (v4 <= 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5))
  {
    if (v7 <= v4)
      return 0;
    *a2 = v6;
    *a3 = v3;
    v12 = a2[1];
    a2[1] = a3[1];
    a3[1] = v12;
    v10 = a2 + 2;
    v13 = a2[2];
    a2[2] = a3[2];
    a3[2] = v13;
    v14 = *a1;
    if (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5)))
    {
      *a1 = *a2;
      *a2 = v14;
      v15 = a1[1];
      a1[1] = a2[1];
      a2[1] = v15;
      v8 = a1 + 2;
LABEL_9:
      result = 2;
      goto LABEL_10;
    }
  }
  else
  {
    if (v7 > v4)
    {
      v8 = a1 + 2;
      *a1 = v6;
      *a3 = v5;
      v9 = a1[1];
      a1[1] = a3[1];
      a3[1] = v9;
      v10 = a3 + 2;
      result = 1;
LABEL_10:
      v20 = *v8;
      *v8 = *v10;
      *v10 = v20;
      return result;
    }
    *a1 = v3;
    *a2 = v5;
    v16 = a1[1];
    a1[1] = a2[1];
    a2[1] = v16;
    v8 = a2 + 2;
    v17 = a1[2];
    a1[2] = a2[2];
    a2[2] = v17;
    v18 = *a2;
    if (0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5)))
    {
      *a2 = *a3;
      *a3 = v18;
      v19 = a2[1];
      a2[1] = a3[1];
      a3[1] = v19;
      v10 = a3 + 2;
      goto LABEL_9;
    }
  }
  return 1;
}

void **std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<quasar::Token> *,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token>&,std::vector<quasar::Token>&)#1} &>(uint64_t a1, void **a2)
{
  _BYTE *v3;
  void *v4;
  void *v5;
  unint64_t v6;
  void **v7;
  _BYTE *v8;
  _BYTE *v9;
  void **v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v22;
  __int128 v23;
  void **v24;

  v22 = *(_BYTE **)a1;
  v3 = v22;
  v23 = *(_OWORD *)(a1 + 8);
  v4 = (void *)v23;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v5 = v4;
  v6 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v4 - v3) >> 5);
  if (v6 <= 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)*(a2 - 2) - (_BYTE *)*(a2 - 3)) >> 5))
  {
    v10 = (void **)(a1 + 24);
    do
    {
      v7 = v10;
      if (v10 >= a2)
        break;
      v11 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v10[1] - (_BYTE *)*v10) >> 5);
      v10 += 3;
    }
    while (v6 <= v11);
  }
  else
  {
    v7 = (void **)a1;
    do
    {
      v8 = v7[3];
      v9 = v7[4];
      v7 += 3;
    }
    while (v6 <= 0x6DB6DB6DB6DB6DB7 * ((v9 - v8) >> 5));
  }
  if (v7 < a2)
  {
    do
    {
      v12 = (uint64_t)*(a2 - 3);
      v13 = (uint64_t)*(a2 - 2);
      a2 -= 3;
    }
    while (v6 > 0x6DB6DB6DB6DB6DB7 * ((v13 - v12) >> 5));
  }
  if (v7 < a2)
  {
    v14 = *v7;
    v15 = *a2;
    do
    {
      *v7 = v15;
      *a2 = v14;
      v16 = v7[1];
      v7[1] = a2[1];
      a2[1] = v16;
      v17 = v7[2];
      v7[2] = a2[2];
      a2[2] = v17;
      v3 = v22;
      v5 = (void *)v23;
      v18 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v23 - (_QWORD)v22) >> 5);
      do
      {
        v14 = v7[3];
        v19 = v7[4];
        v7 += 3;
      }
      while (v18 <= 0x6DB6DB6DB6DB6DB7 * ((v19 - (_BYTE *)v14) >> 5));
      do
      {
        v15 = *(a2 - 3);
        v20 = (uint64_t)*(a2 - 2);
        a2 -= 3;
      }
      while (v18 > 0x6DB6DB6DB6DB6DB7 * ((v20 - (uint64_t)v15) >> 5));
    }
    while (v7 < a2);
  }
  if (v7 - 3 != (void **)a1)
  {
    std::vector<quasar::Token>::__vdeallocate((void **)a1);
    *(_OWORD *)a1 = *(_OWORD *)(v7 - 3);
    *(_QWORD *)(a1 + 16) = *(v7 - 1);
    *(v7 - 3) = 0;
    *(v7 - 2) = 0;
    *(v7 - 1) = 0;
  }
  std::vector<quasar::Token>::__vdeallocate(v7 - 3);
  *(v7 - 3) = v3;
  *(v7 - 2) = v5;
  *(v7 - 1) = (void *)*((_QWORD *)&v23 + 1);
  v22 = 0;
  v23 = 0uLL;
  v24 = (void **)&v22;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v24);
  return v7;
}

void **std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<quasar::Token> *,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token>&,std::vector<quasar::Token>&)#1} &>(uint64_t a1, void **a2)
{
  uint64_t v4;
  _BYTE *v5;
  void *v6;
  void *v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void **v17;
  void **v18;
  void *v19;
  void *v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v25;
  __int128 v26;
  void **v27;

  v4 = 0;
  v25 = *(_BYTE **)a1;
  v5 = v25;
  v26 = *(_OWORD *)(a1 + 8);
  v6 = (void *)v26;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v7 = v6;
  v8 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v6 - v5) >> 5);
  do
  {
    v9 = *(void **)(a1 + v4 + 24);
    v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + v4 + 32) - (_QWORD)v9) >> 5);
    v4 += 24;
  }
  while (v10 > v8);
  v11 = a1 + v4;
  if (v4 == 24)
  {
    do
    {
      if (v11 >= (unint64_t)a2)
        break;
      v14 = (uint64_t)*(a2 - 3);
      v15 = (uint64_t)*(a2 - 2);
      a2 -= 3;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((v15 - v14) >> 5) <= v8);
  }
  else
  {
    do
    {
      v12 = (uint64_t)*(a2 - 3);
      v13 = (uint64_t)*(a2 - 2);
      a2 -= 3;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((v13 - v12) >> 5) <= v8);
  }
  if (v11 >= (unint64_t)a2)
  {
    v17 = (void **)(a1 + v4);
  }
  else
  {
    v16 = *a2;
    v17 = (void **)(a1 + v4);
    v18 = a2;
    do
    {
      *v17 = v16;
      *v18 = v9;
      v19 = v17[1];
      v17[1] = v18[1];
      v18[1] = v19;
      v20 = v17[2];
      v17[2] = v18[2];
      v18[2] = v20;
      v5 = v25;
      v7 = (void *)v26;
      v21 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v26 - (_QWORD)v25) >> 5);
      do
      {
        v9 = v17[3];
        v22 = v17[4];
        v17 += 3;
      }
      while (0x6DB6DB6DB6DB6DB7 * ((v22 - (_BYTE *)v9) >> 5) > v21);
      do
      {
        v16 = *(v18 - 3);
        v23 = (uint64_t)*(v18 - 2);
        v18 -= 3;
      }
      while (0x6DB6DB6DB6DB6DB7 * ((v23 - (uint64_t)v16) >> 5) <= v21);
    }
    while (v17 < v18);
  }
  if (v17 - 3 != (void **)a1)
  {
    std::vector<quasar::Token>::__vdeallocate((void **)a1);
    *(_OWORD *)a1 = *(_OWORD *)(v17 - 3);
    *(_QWORD *)(a1 + 16) = *(v17 - 1);
    *(v17 - 3) = 0;
    *(v17 - 2) = 0;
    *(v17 - 1) = 0;
  }
  std::vector<quasar::Token>::__vdeallocate(v17 - 3);
  *(v17 - 3) = v5;
  *(v17 - 2) = v7;
  *(v17 - 1) = (void *)*((_QWORD *)&v26 + 1);
  v25 = 0;
  v26 = 0uLL;
  v27 = (void **)&v25;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v27);
  return v17 - 3;
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(uint64_t *a1, uint64_t *a2)
{
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;
  void **v20;

  v4 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      v5 = *(a2 - 3);
      v6 = *a1;
      if (0x6DB6DB6DB6DB6DB7 * ((*(a2 - 2) - v5) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                                             * ((a1[1] - *a1) >> 5)))
      {
        *a1 = v5;
        *(a2 - 3) = v6;
        v7 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v7;
        v8 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return v4;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(a1, a1 + 3, a2 - 3);
      return v4;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(a1, a1 + 3, a1 + 6, a2 - 3);
      return v4;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return v4;
    default:
      v9 = a1 + 6;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(a1, a1 + 3, a1 + 6);
      v10 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = v10[1];
    if (0x6DB6DB6DB6DB6DB7 * ((v13 - *v10) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v9[1] - *v9) >> 5)))
      break;
LABEL_14:
    v9 = v10;
    v11 += 24;
    v10 += 3;
    if (v10 == a2)
      return 1;
  }
  *(_QWORD *)&v18 = *v10;
  *((_QWORD *)&v18 + 1) = v13;
  v19 = v10[2];
  *v10 = 0;
  v10[1] = 0;
  v10[2] = 0;
  v14 = v11;
  while (1)
  {
    v15 = (char *)a1 + v14;
    std::vector<quasar::Token>::__vdeallocate((void **)((char *)a1 + v14 + 72));
    *(_OWORD *)(v15 + 72) = *((_OWORD *)v15 + 3);
    *((_QWORD *)v15 + 11) = *((_QWORD *)v15 + 8);
    *((_QWORD *)v15 + 7) = 0;
    *((_QWORD *)v15 + 8) = 0;
    *((_QWORD *)v15 + 6) = 0;
    if (v14 == -48)
      break;
    v14 -= 24;
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v18 + 1) - v18) >> 5) <= (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                                                                  * ((uint64_t)(*((_QWORD *)v15 + 4) - *((_QWORD *)v15 + 3)) >> 5)))
    {
      v16 = (uint64_t)a1 + v14 + 72;
      goto LABEL_12;
    }
  }
  v16 = (uint64_t)a1;
LABEL_12:
  std::vector<quasar::Token>::__vdeallocate((void **)v16);
  *(_OWORD *)v16 = v18;
  *(_QWORD *)(v16 + 16) = v19;
  v19 = 0;
  v18 = 0uLL;
  if (++v12 != 8)
  {
    v20 = (void **)&v18;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v20);
    goto LABEL_14;
  }
  v4 = v10 + 3 == a2;
  v20 = (void **)&v18;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v20);
  return v4;
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(a1, a2, a3);
  v9 = *a3;
  if (0x6DB6DB6DB6DB6DB7 * ((a4[1] - *a4) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5)))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    v11 = a3[2];
    a3[2] = a4[2];
    a4[2] = v11;
    v12 = *a2;
    if (0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5)))
    {
      *a2 = *a3;
      *a3 = v12;
      v13 = a2[1];
      a2[1] = a3[1];
      a3[1] = v13;
      v14 = a2[2];
      a2[2] = a3[2];
      a3[2] = v14;
      v15 = *a1;
      if (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5)))
      {
        *a1 = *a2;
        *a2 = v15;
        v16 = a1[1];
        a1[1] = a2[1];
        a2[1] = v16;
        v17 = a1[2];
        a1[2] = a2[2];
        a2[2] = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(a1, a2, a3, a4);
  v11 = *a4;
  if (0x6DB6DB6DB6DB6DB7 * ((a5[1] - *a5) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a4[1] - *a4) >> 5)))
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = a4[1];
    a4[1] = a5[1];
    a5[1] = v12;
    v13 = a4[2];
    a4[2] = a5[2];
    a5[2] = v13;
    v14 = *a3;
    if (0x6DB6DB6DB6DB6DB7 * ((a4[1] - *a4) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5)))
    {
      *a3 = *a4;
      *a4 = v14;
      v15 = a3[1];
      a3[1] = a4[1];
      a4[1] = v15;
      v16 = a3[2];
      a3[2] = a4[2];
      a4[2] = v16;
      v17 = *a2;
      if (0x6DB6DB6DB6DB6DB7 * ((a3[1] - *a3) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5)))
      {
        *a2 = *a3;
        *a3 = v17;
        v18 = a2[1];
        a2[1] = a3[1];
        a3[1] = v18;
        v19 = a2[2];
        a2[2] = a3[2];
        a3[2] = v19;
        v20 = *a1;
        if (0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5)))
        {
          *a1 = *a2;
          *a2 = v20;
          v21 = a1[1];
          a1[1] = a2[1];
          a2[1] = v21;
          v22 = a1[2];
          a1[2] = a2[2];
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*,std::vector<quasar::Token>*>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) / 24;
    if (a2 - a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (void **)(a1 + 24 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(a1, a4, v9, v12);
        v12 -= 3;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if ((uint64_t *)v6 != a3)
    {
      v14 = (uint64_t *)v6;
      do
      {
        v15 = *v14;
        if (0x6DB6DB6DB6DB6DB7 * ((v14[1] - *v14) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                                              * ((uint64_t)(*(_QWORD *)(a1 + 8)
                                                                                         - *(_QWORD *)a1) >> 5)))
        {
          *v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          v16 = v14[1];
          v14[1] = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v16;
          v17 = v14[2];
          v14[2] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v17;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(a1, a4, v9, (void **)a1);
        }
        v14 += 3;
      }
      while (v14 != a3);
      v13 = (uint64_t)a3;
    }
    if (v8 >= 25)
    {
      v18 = v8 / 0x18uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1},std::vector<quasar::Token>*>(a1, v6, a4, v18);
        v6 -= 24;
      }
      while (v18-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  void **v4;
  void **v5;
  unint64_t v6;
  void **v7;
  uint64_t v9;
  uint64_t v11;
  void **v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  _BYTE *v16;
  void *v17;
  void **v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  _BYTE *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void **v29[13];

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v29[11] = v4;
    v29[12] = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v11 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v12 = (void **)(a1 + 24 * v11);
      if (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2 >= a3)
      {
        v16 = *v12;
      }
      else
      {
        v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 24 * v11 + 8) - (_QWORD)*v12) >> 5);
        v14 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v12[4] - (_BYTE *)v12[3]) >> 5);
        v15 = v13 > v14;
        if (v13 <= v14)
          v16 = *v12;
        else
          v16 = v12[3];
        if (v15)
        {
          v12 += 3;
          v11 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
        }
      }
      v17 = a4[1];
      if (0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v12[1] - v16) >> 5) <= (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                                                     * (((_BYTE *)v17 - (_BYTE *)*a4) >> 5)))
      {
        v26 = *a4;
        v27 = v17;
        v28 = a4[2];
        *a4 = 0;
        a4[1] = 0;
        a4[2] = 0;
        while (1)
        {
          v18 = v12;
          std::vector<quasar::Token>::__vdeallocate(v7);
          *(_OWORD *)v7 = *(_OWORD *)v18;
          v7[2] = v18[2];
          *v18 = 0;
          v18[1] = 0;
          v18[2] = 0;
          if (v9 < v11)
            break;
          v19 = (2 * v11) | 1;
          v12 = (void **)(a1 + 24 * v19);
          if (2 * v11 + 2 >= a3)
          {
            v23 = *v12;
            v11 = (2 * v11) | 1;
          }
          else
          {
            v20 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 24 * v19 + 8) - (_QWORD)*v12) >> 5);
            v21 = 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v12[4] - (_BYTE *)v12[3]) >> 5);
            v22 = v20 > v21;
            if (v20 <= v21)
              v23 = *v12;
            else
              v23 = v12[3];
            if (v22)
            {
              v12 += 3;
              v11 = 2 * v11 + 2;
            }
            else
            {
              v11 = (2 * v11) | 1;
            }
          }
          v25 = v26;
          v24 = v27;
          v7 = v18;
          if (0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v12[1] - v23) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                                                        * (((_BYTE *)v27 - (_BYTE *)v26) >> 5)))
            goto LABEL_25;
        }
        v25 = v26;
        v24 = v27;
LABEL_25:
        std::vector<quasar::Token>::__vdeallocate(v18);
        *v18 = v25;
        v18[1] = v24;
        v18[2] = v28;
        v26 = 0;
        v27 = 0;
        v28 = 0;
        v29[0] = &v26;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v29);
      }
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1},std::vector<quasar::Token>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v7;
  __int128 v8;
  void *v9;
  void **v10;

  if (a4 >= 2)
  {
    v8 = *(_OWORD *)a1;
    v9 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    v7 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>((void **)a1, a3, a4);
    std::vector<quasar::Token>::__vdeallocate(v7);
    if (v7 == (void **)(a2 - 24))
    {
      *(_OWORD *)v7 = v8;
      v7[2] = v9;
      v8 = 0uLL;
      v9 = 0;
    }
    else
    {
      *(_OWORD *)v7 = *(_OWORD *)(a2 - 24);
      v7[2] = *(void **)(a2 - 8);
      *(_QWORD *)(a2 - 24) = 0;
      *(_QWORD *)(a2 - 16) = 0;
      *(_QWORD *)(a2 - 8) = 0;
      std::vector<quasar::Token>::__vdeallocate((void **)(a2 - 24));
      *(_OWORD *)(a2 - 24) = v8;
      *(_QWORD *)(a2 - 8) = v9;
      v9 = 0;
      v8 = 0uLL;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(a1, (uint64_t)(v7 + 3), a3, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - a1 + 24) >> 3));
    }
    v10 = (void **)&v8;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v10);
  }
}

void sub_1AD817978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void **std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = v5 + 1;
    v9 = &a1[3 * v5 + 3];
    v10 = (2 * v5) | 1;
    v11 = 2 * v5 + 2;
    if (v11 < a3
      && 0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[3 * v8 + 1] - (_BYTE *)*v9) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v9[4] - (_BYTE *)v9[3]) >> 5)))
    {
      v9 += 3;
      v10 = v11;
    }
    std::vector<quasar::Token>::__vdeallocate(a1);
    *(_OWORD *)a1 = *(_OWORD *)v9;
    a1[2] = v9[2];
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
    a1 = v9;
    v5 = v10;
  }
  while (v10 <= v7);
  return v9;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,quasar::MiscSharedConfig::init(void)::{lambda(std::vector<quasar::Token> &,std::vector<quasar::Token> &)#1} &,std::vector<quasar::Token>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v4;
  void **v5;
  unint64_t v6;
  unint64_t v8;
  void **v9;
  void *v10;
  void **v11;
  void **v12;
  void *v13;
  _BYTE *v14;
  void *v15;
  void *v16;
  void **v17[11];

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v17[9] = v4;
    v17[10] = v5;
    v8 = v6 >> 1;
    v9 = (void **)(a1 + 24 * (v6 >> 1));
    v10 = *(void **)(a2 - 16);
    v11 = (void **)(a2 - 24);
    if (0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v9[1] - (_BYTE *)*v9) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                                                          * (((uint64_t)v10
                                                                                            - *(_QWORD *)(a2 - 24)) >> 5)))
    {
      v14 = *(_BYTE **)(a2 - 24);
      v15 = v10;
      v16 = *(void **)(a2 - 8);
      *v11 = 0;
      *(_QWORD *)(a2 - 16) = 0;
      *(_QWORD *)(a2 - 8) = 0;
      do
      {
        v12 = v9;
        std::vector<quasar::Token>::__vdeallocate(v11);
        *(_OWORD *)v11 = *(_OWORD *)v12;
        v11[2] = v12[2];
        *v12 = 0;
        v12[1] = 0;
        v12[2] = 0;
        v13 = v15;
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (void **)(a1 + 24 * v8);
        v11 = v12;
      }
      while (0x6DB6DB6DB6DB6DB7 * (((_BYTE *)v9[1] - (_BYTE *)*v9) >> 5) > (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                                                               * (((_BYTE *)v15 - v14) >> 5)));
      std::vector<quasar::Token>::__vdeallocate(v12);
      *v12 = v14;
      v12[1] = v13;
      v12[2] = v16;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17[0] = (void **)&v14;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v17);
    }
  }
}

void quasar::SystemConfig::Register<std::vector<std::string>>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t *v15;
  uint64_t *v16;
  uint64_t **v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  void **v21;

  quasar::SystemConfig::Register(a1, a2, a3);
  quasar::SystemConfig::Version::Version(&v20, a6, a7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v21 = __p;
  v15 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1464), (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
  v15[7] = v20;
  if (v19 < 0)
    operator delete(__p[0]);
  quasar::SystemConfig::Version::Version(&v20, a8, a9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v21 = __p;
  v16 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1488), (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
  v16[7] = v20;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (!a5)
      return;
  }
  else if (!a5)
  {
    return;
  }
  __p[0] = (void *)(a1 + 816);
  v17 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1512), (const void **)(a1 + 816), (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v17, (const void **)__p, (uint64_t)__p);
  if (v19 < 0)
    operator delete(__p[0]);
}

void sub_1AD817D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(std::vector<std::wstring> *this, std::string *__str, __int128 *a3, unint64_t a4)
{
  std::__compressed_pair<std::wstring *> *p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::wstring *v12;
  std::string *v13;
  std::wstring *v14;
  std::wstring *v15;
  std::vector<std::wstring>::pointer end;

  p_end_cap = &this->__end_cap_;
  begin = (std::string *)this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    v12 = (std::wstring *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)p_end_cap, (__int128 *)__str, a3, (std::string *)this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    v12 = (std::wstring *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)p_end_cap, (__int128 *)v13, a3, (std::string *)this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_1AD817EB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1AD817EBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN5kaldi5nnet14NnetENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x190uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN5kaldi5nnet14NnetENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD817EF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN5kaldi5nnet14NnetENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41C68;
  a1[1] = 0;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 3));
  return a1;
}

void sub_1AD817F44(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::nnet1::Nnet>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41C68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::nnet1::Nnet>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41C68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<kaldi::nnet1::Nnet>::__on_zero_shared(uint64_t a1)
{
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(a1 + 24));
}

void quasar::RecogRequestFilter::~RecogRequestFilter(quasar::RecogRequestFilter *this)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  v5 = (void **)((char *)this + 192);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)((char *)this + 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)((char *)this + 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 12);
  if (v3)
    operator delete(v3);
  v5 = (void **)((char *)this + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void std::__shared_ptr_emplace<quasar::MiscSharedConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42E58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::MiscSharedConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42E58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::MiscSharedConfig>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<quasar::MiscSharedConfig>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<quasar::MiscSharedConfig>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  if (*(char *)(a2 + 79) < 0)
    operator delete(*(void **)(a2 + 56));
  v3 = (void **)(a2 + 24);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::__shared_ptr_emplace<quasar::EndPointModelConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43558;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::EndPointModelConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43558;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::EndPointModelConfig>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<quasar::EndPointModelConfig>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<quasar::EndPointModelConfig>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  if (*(char *)(a2 + 111) < 0)
    operator delete(*(void **)(a2 + 88));
  v3 = (void **)(a2 + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 48);
  v3 = (void **)(a2 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::__shared_ptr_emplace<quasar::EagerConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42480;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::EagerConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42480;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN6quasar9GeographyENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xB0uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN6quasar9GeographyENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD818280(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN6quasar9GeographyENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D452E0;
  a1[1] = 0;
  quasar::Geography::Geography((quasar::Geography *)(a1 + 3));
  return a1;
}

void sub_1AD8182CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::Geography>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D452E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::Geography>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D452E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::Geography>::__on_zero_shared(uint64_t a1)
{
  char v2;

  return std::allocator<quasar::Geography>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

uint64_t std::allocator<quasar::Geography>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t result;
  void **v4;

  v4 = (void **)(a2 + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 104);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(a2 + 80, *(_QWORD **)(a2 + 88));
  std::__tree<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>>>::destroy(a2 + 56, *(_QWORD **)(a2 + 64));
  v4 = (void **)(a2 + 32);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 16);
  result = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (result)
    return MEMORY[0x1AF44D190](result, 0x1000C4052888210);
  return result;
}

void std::__tree<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>>>::destroy(a1, a2[1]);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 5));
    operator delete(a2);
  }
}

void std::vector<quasar::RecogRequestFilter>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        quasar::RecogRequestFilter::~RecogRequestFilter((quasar::RecogRequestFilter *)(v4 - 216));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<quasar::RecogRequestFilter>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (__int128 *)*a1;
  v4 = (__int128 *)a1[1];
  v6 = a2[1];
  if (v4 != (__int128 *)*a1)
  {
    do
    {
      v6 -= 216;
      v4 = (__int128 *)((char *)v4 - 216);
      std::allocator<quasar::RecogRequestFilter>::construct[abi:ne180100]<quasar::RecogRequestFilter,quasar::RecogRequestFilter>((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::RecogRequestFilter>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x12F684BDA12F685)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(216 * a2);
}

__n128 std::allocator<quasar::RecogRequestFilter>::construct[abi:ne180100]<quasar::RecogRequestFilter,quasar::RecogRequestFilter>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v3 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = *(__int128 *)((char *)a3 + 24);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)a3 + 5);
  *((_QWORD *)a3 + 3) = 0;
  *((_QWORD *)a3 + 4) = 0;
  *((_QWORD *)a3 + 5) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = a3[3];
  *(_QWORD *)(a2 + 64) = *((_QWORD *)a3 + 8);
  *((_QWORD *)a3 + 6) = 0;
  *((_QWORD *)a3 + 7) = 0;
  *((_QWORD *)a3 + 8) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = *(__int128 *)((char *)a3 + 72);
  *(_QWORD *)(a2 + 88) = *((_QWORD *)a3 + 11);
  *((_QWORD *)a3 + 10) = 0;
  *((_QWORD *)a3 + 11) = 0;
  *((_QWORD *)a3 + 9) = 0;
  v4 = *((_QWORD *)a3 + 13);
  *(_QWORD *)(a2 + 96) = *((_QWORD *)a3 + 12);
  *(_QWORD *)(a2 + 104) = v4;
  *(_QWORD *)(a2 + 112) = *((_QWORD *)a3 + 14);
  *((_QWORD *)a3 + 13) = 0;
  *((_QWORD *)a3 + 14) = 0;
  *((_QWORD *)a3 + 12) = 0;
  v5 = *((_QWORD *)a3 + 16);
  *(_QWORD *)(a2 + 120) = *((_QWORD *)a3 + 15);
  *(_QWORD *)(a2 + 128) = v5;
  *(_QWORD *)(a2 + 136) = *((_QWORD *)a3 + 17);
  *((_QWORD *)a3 + 15) = 0;
  *((_QWORD *)a3 + 16) = 0;
  *((_QWORD *)a3 + 17) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_OWORD *)(a2 + 144) = a3[9];
  *(_QWORD *)(a2 + 160) = *((_QWORD *)a3 + 20);
  *((_QWORD *)a3 + 18) = 0;
  *((_QWORD *)a3 + 19) = 0;
  *((_QWORD *)a3 + 20) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_OWORD *)(a2 + 168) = *(__int128 *)((char *)a3 + 168);
  *(_QWORD *)(a2 + 184) = *((_QWORD *)a3 + 23);
  *((_QWORD *)a3 + 21) = 0;
  *((_QWORD *)a3 + 22) = 0;
  *((_QWORD *)a3 + 23) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  result = (__n128)a3[12];
  *(__n128 *)(a2 + 192) = result;
  *(_QWORD *)(a2 + 208) = *((_QWORD *)a3 + 26);
  *((_QWORD *)a3 + 24) = 0;
  *((_QWORD *)a3 + 25) = 0;
  *((_QWORD *)a3 + 26) = 0;
  return result;
}

uint64_t std::__split_buffer<quasar::RecogRequestFilter>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 216;
    quasar::RecogRequestFilter::~RecogRequestFilter((quasar::RecogRequestFilter *)(i - 216));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<quasar::RecogRequestFilter>::__push_back_slow_path<quasar::RecogRequestFilter>(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x12F684BDA12F684)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x97B425ED097B426 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x97B425ED097B426 * ((a1[2] - *a1) >> 3);
  if (0x84BDA12F684BDA13 * ((a1[2] - *a1) >> 3) >= 0x97B425ED097B42)
    v6 = 0x12F684BDA12F684;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::RecogRequestFilter>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[216 * v3];
  v13 = &v7[216 * v6];
  std::allocator<quasar::RecogRequestFilter>::construct[abi:ne180100]<quasar::RecogRequestFilter,quasar::RecogRequestFilter>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 216;
  std::vector<quasar::RecogRequestFilter>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<quasar::RecogRequestFilter>::~__split_buffer((uint64_t)&v10);
  return v8;
}

void sub_1AD8187DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::RecogRequestFilter>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1AD818B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *__p)
{
  _Block_object_dispose(&STACK[0x708], 8);
  __p = a11;
  std::vector<quasar::SystemConfig>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<quasar::SystemConfig>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::vector<quasar::SystemConfig>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  BOOL v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 1544;
      do
      {
        (*(void (**)(char *))(*(_QWORD *)v6 + 48))(v6);
        v7 = v6 == v2;
        v6 -= 1544;
      }
      while (!v7);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<quasar::SystemConfig>::__push_back_slow_path<quasar::SystemConfig const&>(uint64_t *a1, const quasar::SystemConfig *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  quasar::SystemConfig *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x70BF015390948F41 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2A721291E81FD5)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x70BF015390948F41 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x15390948F40FEALL)
    v9 = 0x2A721291E81FD5;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::SystemConfig>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (quasar::SystemConfig *)&v10[1544 * v4];
  v16 = &v10[1544 * v9];
  quasar::SystemConfig::SystemConfig(v14, a2, 1, 1);
  v15 = (char *)v14 + 1544;
  std::vector<quasar::SystemConfig>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::SystemConfig>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1AD818F04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::SystemConfig>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::SystemConfig>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::SystemConfig>,std::reverse_iterator<quasar::SystemConfig*>,std::reverse_iterator<quasar::SystemConfig*>,std::reverse_iterator<quasar::SystemConfig*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::SystemConfig>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2A721291E81FD6)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(1544 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::SystemConfig>,std::reverse_iterator<quasar::SystemConfig*>,std::reverse_iterator<quasar::SystemConfig*>,std::reverse_iterator<quasar::SystemConfig*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  quasar::SystemConfig *v12;

  v10 = 0;
  v11 = a7 - 1544;
  while (a3 + v10 != a5)
  {
    v12 = (quasar::SystemConfig *)(v11 + v10);
    v10 -= 1544;
    quasar::SystemConfig::SystemConfig(v12, (const quasar::SystemConfig *)(v10 + a3), 1, 1);
  }
  return a6;
}

uint64_t std::__split_buffer<quasar::SystemConfig>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 1544;
    (*(void (**)(uint64_t))(*(_QWORD *)(i - 1544) + 48))(i - 1544);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::TranslatorCompiler,std::allocator<quasar::TranslatorCompiler>,std::vector<quasar::SystemConfig> &,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x28uLL);
  result = std::__shared_ptr_emplace<quasar::TranslatorCompiler>::__shared_ptr_emplace[abi:ne180100]<std::vector<quasar::SystemConfig> &,std::allocator<quasar::TranslatorCompiler>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1AD81910C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::TranslatorCompiler>::__shared_ptr_emplace[abi:ne180100]<std::vector<quasar::SystemConfig> &,std::allocator<quasar::TranslatorCompiler>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43408;
  a1[1] = 0;
  quasar::TranslatorCompiler::TranslatorCompiler(a1 + 3);
  return a1;
}

void sub_1AD819158(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::TranslatorCompiler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43408;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::TranslatorCompiler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43408;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::TranslatorCompiler>::__on_zero_shared(uint64_t a1)
{
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 24);
}

void fst::ShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, int a6, char a7, float a8)
{
  _DWORD v16[5];
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  char v22;
  float v23;
  int v24;
  _QWORD v25[9];
  void *v26;
  void *v27;
  uint64_t v28;

  v26 = 0;
  v27 = 0;
  v28 = 0;
  fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)v25, a1, (uint64_t)&v26);
  *(_QWORD *)v16 = v25;
  *(_QWORD *)&v16[3] = 0x3A800000FFFFFFFFLL;
  v17 = 0;
  v18 = a3;
  v19 = a4;
  v20 = 0;
  v21 = a5;
  v22 = a7;
  v23 = a8;
  v24 = a6;
  fst::ShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, a2, (uint64_t)&v26, (uint64_t)v16);
  fst::AutoQueue<int>::~AutoQueue(v25);
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
}

void sub_1AD819298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  void *v9;
  va_list va;

  va_start(va, a7);
  fst::AutoQueue<int>::~AutoQueue((uint64_t *)va);
  v9 = *(void **)(v7 - 104);
  if (v9)
  {
    *(_QWORD *)(v7 - 96) = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

void std::vector<int>::push_back[abi:ne180100](uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_DWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v4, v12);
      v8 = *(_DWORD **)a1;
      v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

_QWORD *fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ComposeFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D268B8;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(*(_QWORD *)(a1 + 8));
}

float fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(*(uint64_t **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  int v3;

  if (!*(_BYTE *)(a1 + 60))
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 4))
    {
      *(_BYTE *)(a1 + 60) = 1;
    }
    else if (!*(_BYTE *)(a1 + 60))
    {
      v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
      if (v3 != -1)
      {
        *(_DWORD *)(a1 + 64) = v3;
        *(_BYTE *)(a1 + 60) = 1;
        if (*(_DWORD *)(a1 + 68) <= v3)
          *(_DWORD *)(a1 + 68) = v3 + 1;
      }
    }
  }
  return *(unsigned int *)(a1 + 64);
}

float fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t *a1, uint64_t a2)
{
  float v4;
  char *MutableState;
  uint64_t v6;
  uint64_t v7;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasFinal((uint64_t)a1, a2) & 1) == 0)
  {
    v4 = (*(float (**)(uint64_t *, uint64_t))(*a1 + 72))(a1, a2);
    MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(a1[15], a2);
    *(float *)MutableState = v4;
    *((_DWORD *)MutableState + 12) |= 9u;
  }
  v6 = a1[15];
  if (*(_DWORD *)(v6 + 76) == (_DWORD)a2)
    v7 = v6 + 80;
  else
    v7 = *(_QWORD *)(v6 + 8) + 8 * ((int)a2 + 1);
  return **(float **)v7;
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(_QWORD *, uint64_t))(*a1 + 48))(a1, a2);
  v4 = a1[15];
  if (*(_DWORD *)(v4 + 76) == (_DWORD)a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * ((int)a2 + 1);
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)v5 + 32) - *(_QWORD *)(*(_QWORD *)v5 + 24)) >> 4;
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(_QWORD *, uint64_t))(*a1 + 48))(a1, a2);
  v4 = a1[15];
  if (*(_DWORD *)(v4 + 76) == (_DWORD)a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * ((int)a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 8);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs((uint64_t)a1, a2) & 1) == 0)(*(void (**)(_QWORD *, uint64_t))(*a1 + 48))(a1, a2);
  v4 = a1[15];
  if (*(_DWORD *)(v4 + 76) == (_DWORD)a2)
    v5 = v4 + 80;
  else
    v5 = *(_QWORD *)(v4 + 8) + 8 * ((int)a2 + 1);
  return *(_QWORD *)(*(_QWORD *)v5 + 16);
}

uint64_t **std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((_QWORD *)v11 + 4) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v9;
  _BYTE v10[8];
  uint64_t v11;
  __int128 v12;
  _BYTE v13[25];

  v6 = fst::LookAheadMatchType<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2);
  if (v6)
  {
    v7 = *(_QWORD *)(a3 + 8);
    v10[0] = *(_BYTE *)a3;
    v11 = v7;
    v12 = 0u;
    memset(v13, 0, sizeof(v13));
    if (v6 == 1)
      return fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>(a1, a2, (uint64_t)v10);
    else
      return fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(a1, a2, (uint64_t)v10);
  }
  else
  {
    v9 = *(_QWORD *)(a3 + 8);
    v10[0] = *(_BYTE *)a3;
    v11 = v9;
    v12 = 0u;
    memset(v13, 0, sizeof(v13));
    return fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>(a1, a2, (uint64_t)v10);
  }
}

void fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ComposeFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D268B8;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFst(v4, a1, a2);
  return v4;
}

void sub_1AD81998C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitStateIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E5D1FF28;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 24))(a1);
  *(_QWORD *)v4 = &unk_1E5D1BFA8;
  *a2 = v4;
  return result;
}

void sub_1AD819A30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitMatcher(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8), a1, a2);
}

uint64_t fst::LookAheadMatchType<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[2];

  fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookAheadMatcher((uint64_t)v6, a1, 1);
  fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookAheadMatcher((uint64_t)v5, a2, 0);
  v3 = fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v6, v5);
  if (v5[0])
    (*(void (**)(_QWORD))(*(_QWORD *)v5[0] + 8))(v5[0]);
  if (v6[0])
    (*(void (**)(_QWORD))(*(_QWORD *)v6[0] + 8))(v6[0]);
  return v3;
}

void sub_1AD819AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

uint64_t fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(_QWORD *a1, _QWORD *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  v4 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 24))(*a1, 0);
  v5 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 24))(*a2, 0);
  if (v4 == 1 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 48))(*a1) & 0x20) != 0)
    return 1;
  if (!v5 && ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2) & 0x10) != 0)
    return 0;
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 48))(*a1) & 0x20) == 0
    || (v6 = *a1,
        v7 = *(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 24),
        v8 = 1,
        v7(v6, 1) != 1))
  {
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2) & 0x10) == 0
      || (*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 24))(*a2, 1))
    {
      return 3;
    }
    return 0;
  }
  return v8;
}

uint64_t fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookAheadMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v6;
  int32x2_t *v7;

  v3 = a3;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, a3);
  *(_QWORD *)a1 = v6;
  if (!v6)
  {
    v7 = (int32x2_t *)operator new();
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SortedMatcher(v7, a2, v3, 1);
    *(_QWORD *)a1 = v7;
  }
  *(_BYTE *)(a1 + 8) = 0;
  return a1;
}

void sub_1AD819CB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

int32x2_t *fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SortedMatcher(int32x2_t *a1, uint64_t a2, __int32 a3, __int32 a4)
{
  __int32 v7;
  fst *v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  *a1 = (int32x2_t)&unk_1E5D1BCA8;
  a1[1] = (int32x2_t)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  a1[2].i32[0] = -1;
  a1[3] = 0;
  a1[4].i32[0] = a3;
  a1[4].i32[1] = a4;
  a1[5].i32[0] = -1;
  a1[6] = 0;
  *(_OWORD *)a1[7].i8 = xmmword_1AE142840;
  a1[9].i8[2] = 0;
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MemoryPool(&a1[10], 1);
  v7 = a1[4].i32[0];
  if (v7 && v7 != 3)
  {
    if (v7 == 1)
    {
      a1[7] = vrev64_s32(a1[7]);
    }
    else
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v8 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
      if (v12 < 0)
        operator delete(__p[0]);
      a1[4].i32[0] = 3;
      a1[9].i8[2] = 1;
    }
  }
  return a1;
}

void sub_1AD819E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  quasar::Bitmap *v19;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *(_QWORD *)(v18 + 80) = &unk_1E5D19648;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::~MemoryArena((_QWORD *)(v18 + 88));
  quasar::Bitmap::~Bitmap(v19);
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D19648;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D19648;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~SortedMatcher(_QWORD *a1)
{
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~SortedMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SortedMatcher(v4, a1, a2);
  return v4;
}

void sub_1AD819F3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 3)
    return 3;
  if (v2)
    v6 = 0x40000000;
  else
    v6 = 0x10000000;
  v7 = *(_QWORD *)(a1 + 8);
  if (v2)
    v8 = 3221225472;
  else
    v8 = 805306368;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v7, v8, a2);
  if ((v9 & v6) != 0)
    return *(unsigned int *)(a1 + 32);
  v10 = 0x80000000;
  if (!v2)
    v10 = 0x20000000;
  if ((v9 & v10) != 0)
    return 3;
  else
    return 4;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 74))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Flags()
{
  return 0;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Next_(uint64_t result)
{
  uint64_t *v1;

  if (*(_BYTE *)(result + 72))
  {
    *(_BYTE *)(result + 72) = 0;
  }
  else
  {
    v1 = *(uint64_t **)(result + 24);
    result = *v1;
    if (*v1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    else
      ++v1[4];
  }
  return result;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::MatcherBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Final_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, a2);
}

_QWORD *fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D19648;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1AD81A0EC(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Size()
{
  return 40;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A600;
  a1[1] = 48 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1AD81A1D4(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A600;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::Size()
{
  return 48;
}

_QWORD *fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~SortedMatcher(_QWORD *a1)
{
  _QWORD *v2;
  _DWORD *v3;
  uint64_t v4;

  *a1 = &unk_1E5D1BCA8;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    if (*v2)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    }
    else
    {
      v3 = (_DWORD *)v2[3];
      if (v3)
        --*v3;
    }
    v2[5] = a1[17];
    a1[17] = v2;
  }
  v4 = a1[1];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  a1[10] = &unk_1E5D19648;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::~MemoryArena(a1 + 11);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(a1 + 10));
  return a1;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SortedMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = &unk_1E5D1BCA8;
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), a3);
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MemoryPool((_QWORD *)(a1 + 80), 1);
  return a1;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void *__p[2];
  char v10;
  char v11;

  if (*(_DWORD *)(result + 16) != (_DWORD)a2)
  {
    v3 = result;
    *(_DWORD *)(result + 16) = a2;
    if (*(_DWORD *)(result + 32) == 3)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v4 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
      v5 = (_QWORD *)fst::cerr(v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
      if (v10 < 0)
        operator delete(__p[0]);
      *(_BYTE *)(v3 + 74) = 1;
    }
    v6 = *(_QWORD **)(v3 + 24);
    if (v6)
    {
      fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reinit(v6, *(_QWORD *)(v3 + 8), a2);
      v7 = *(_QWORD **)(v3 + 24);
    }
    else
    {
      v7 = *(_QWORD **)(v3 + 136);
      if (v7)
      {
        *(_QWORD *)(v3 + 136) = v7[5];
      }
      else
      {
        v7 = (_QWORD *)fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::Allocate((_QWORD *)(v3 + 88), 1);
        v7[5] = 0;
      }
      v8 = *(_QWORD *)(v3 + 8);
      v7[4] = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v8 + 136))(v8, a2, v7);
      *(_QWORD *)(v3 + 24) = v7;
    }
    if (*v7)
      (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 80))(*v7, 16, 16);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 8) + 40))(*(_QWORD *)(v3 + 8), a2);
    *(_QWORD *)(v3 + 48) = result;
    *(_DWORD *)(v3 + 68) = a2;
  }
  return result;
}

void sub_1AD81A52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reinit(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  _DWORD *v8;

  v6 = *a1;
  if (!v6)
    goto LABEL_5;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a3);
  if ((result & 1) != 0)
    return result;
  if (*a1)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
  }
  else
  {
LABEL_5:
    v8 = (_DWORD *)a1[3];
    if (v8)
      --*v8;
  }
  a1[4] = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, a3, a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Link>::Allocate(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v2 = a1;
  v3 = 48 * a2;
  v4 = a1[1];
  if (192 * a2 <= v4)
  {
    v9 = v2[2];
    if (v9 + v3 <= v4)
    {
      v10 = *(_QWORD *)(v2[4] + 16);
    }
    else
    {
      v10 = operator new[]();
      v2[2] = 0;
      v11 = operator new(0x18uLL);
      v9 = 0;
      v12 = (_QWORD *)v2[4];
      v13 = v2[5];
      *v11 = v2 + 3;
      v11[1] = v12;
      v11[2] = v10;
      *v12 = v11;
      v2[4] = v11;
      v2[5] = v13 + 1;
    }
    v5 = v10 + v9;
    v8 = v9 + v3;
  }
  else
  {
    v5 = operator new[]();
    v6 = operator new(0x18uLL);
    v7 = v2[3];
    v2 += 3;
    v6[1] = v2;
    v6[2] = v5;
    *v6 = v7;
    *(_QWORD *)(v7 + 8) = v6;
    *v2 = v6;
    v8 = v2[2] + 1;
  }
  v2[2] = v8;
  return v5;
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(uint64_t a1, int a2)
{
  _BOOL8 result;
  int v4;

  *(_BYTE *)(a1 + 73) = 1;
  if (*(_BYTE *)(a1 + 74))
  {
    result = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 40) = -1;
  }
  else
  {
    *(_BYTE *)(a1 + 72) = a2 == 0;
    if (a2 == -1)
      v4 = 0;
    else
      v4 = a2;
    *(_DWORD *)(a1 + 40) = v4;
    return (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Search(a1) & 1) != 0
        || *(_BYTE *)(a1 + 72) != 0;
  }
  return result;
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Search(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  int v25;
  _QWORD *v26;
  uint64_t result;
  uint64_t *v28;
  _QWORD *v29;
  unint64_t v30;

  v2 = **(_QWORD **)(a1 + 24);
  if (v2)
  {
    if (*(_DWORD *)(a1 + 32))
      v3 = 2;
    else
      v3 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 80))(v2, v3, 15);
  }
  if (*(_DWORD *)(a1 + 40) < *(_DWORD *)(a1 + 36))
  {
    v4 = *(_QWORD **)(a1 + 24);
    if (*v4)
      (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 56))(*v4);
    else
      v4[4] = 0;
    while (1)
    {
      v19 = *(_QWORD **)(a1 + 24);
      if (*v19)
      {
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v19 + 24))(*v19) & 1) != 0)
          return 0;
      }
      else if (v19[4] >= v19[2])
      {
        return 0;
      }
      v20 = *(uint64_t **)(a1 + 24);
      v21 = *v20;
      if (*(_DWORD *)(a1 + 32))
      {
        v22 = v21 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21) : v20[1] + 16 * v20[4];
        v23 = (_DWORD *)(v22 + 4);
      }
      else
      {
        v23 = (_DWORD *)(v21 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21) : v20[1] + 16 * v20[4]);
      }
      v24 = *(_DWORD *)(a1 + 40);
      v25 = *v23 <= v24 ? 0 : 7;
      if (*v23 == v24)
        v25 = 1;
      if (v25)
        break;
      v26 = *(_QWORD **)(a1 + 24);
      if (*v26)
        (*(void (**)(_QWORD))(*(_QWORD *)*v26 + 40))(*v26);
      else
        ++v26[4];
    }
    result = 0;
    if (v25 == 1)
      return 1;
    return result;
  }
  v5 = *(_QWORD *)(a1 + 48);
  if (!v5)
  {
    v6 = 0;
LABEL_68:
    v28 = *(uint64_t **)(a1 + 24);
    result = *v28;
    if (*v28)
    {
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)result + 64))(result, v6);
      return 0;
    }
    else
    {
      v28[4] = v6;
    }
    return result;
  }
  v6 = 0;
  while (1)
  {
    v7 = (v5 + v6) >> 1;
    v8 = *(_QWORD **)(a1 + 24);
    if (*v8)
      (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v8 + 64))(*v8, (v5 + v6) >> 1);
    else
      v8[4] = v7;
    v9 = *(uint64_t **)(a1 + 24);
    v10 = *v9;
    if (*(_DWORD *)(a1 + 32))
    {
      v11 = v10 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10) : v9[1] + 16 * v9[4];
      v12 = (_DWORD *)(v11 + 4);
    }
    else
    {
      v12 = (_DWORD *)(v10 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10) : v9[1] + 16 * v9[4]);
    }
    v13 = *(_DWORD *)(a1 + 40);
    if (*v12 <= v13)
      break;
    v5 = (v5 + v6) >> 1;
LABEL_25:
    if (v6 >= v5)
      goto LABEL_68;
  }
  if (*v12 < v13)
  {
    v6 = v7 + 1;
    goto LABEL_25;
  }
  while (v7 > v6)
  {
    v14 = *(_QWORD **)(a1 + 24);
    --v7;
    if (*v14)
      (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v14 + 64))(*v14, v7);
    else
      v14[4] = v7;
    v15 = *(uint64_t **)(a1 + 24);
    v16 = *v15;
    if (*(_DWORD *)(a1 + 32))
    {
      if (v16)
        v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
      else
        v17 = v15[1] + 16 * v15[4];
      v18 = (_DWORD *)(v17 + 4);
    }
    else if (v16)
    {
      v18 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
    }
    else
    {
      v18 = (_DWORD *)(v15[1] + 16 * v15[4]);
    }
    if (*v18 != *(_DWORD *)(a1 + 40))
    {
      v29 = *(_QWORD **)(a1 + 24);
      v30 = v7 + 1;
      if (*v29)
        (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)*v29 + 64))(*v29, v30);
      else
        v29[4] = v30;
      return 1;
    }
  }
  return 1;
}

BOOL fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Done(uint64_t a1)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;

  if (*(_BYTE *)(a1 + 72))
    return 0;
  v3 = *(_QWORD **)(a1 + 24);
  if (*v3)
  {
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3) & 1) != 0)
      return 1;
  }
  else if (v3[4] >= v3[2])
  {
    return 1;
  }
  if (!*(_BYTE *)(a1 + 73))
    return 0;
  v4 = *(_DWORD *)(a1 + 32);
  v5 = **(_QWORD **)(a1 + 24);
  if (v5)
  {
    if (v4)
      v6 = 2;
    else
      v6 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, v6, 15);
    v4 = *(_DWORD *)(a1 + 32);
  }
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *v7;
  if (v4)
  {
    if (v8)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    else
      v9 = v7[1] + 16 * v7[4];
    v10 = (_DWORD *)(v9 + 4);
  }
  else if (v8)
  {
    v10 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
  }
  else
  {
    v10 = (_DWORD *)(v7[1] + 16 * v7[4]);
  }
  return *v10 != *(_DWORD *)(a1 + 40);
}

uint64_t fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(uint64_t a1)
{
  _QWORD *v3;

  if (*(_BYTE *)(a1 + 72))
    return a1 + 56;
  v3 = *(_QWORD **)(a1 + 24);
  if (*v3
    && ((*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v3 + 80))(*v3, 15, 15),
        v3 = *(_QWORD **)(a1 + 24),
        *v3))
  {
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 32))(*v3);
  }
  else
  {
    return v3[1] + 16 * v3[4];
  }
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v6, a1, a2, a3);
  return v6;
}

void sub_1AD81AC48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  *(_QWORD *)fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1E5D1D820;
  v8 = *(__int128 **)(a4 + 40);
  if (!v8)
  {
    v8 = (__int128 *)operator new();
    fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SequenceComposeFilter((uint64_t)v8, a2, a3, *(_QWORD **)(a4 + 24), *(_QWORD **)(a4 + 32));
  }
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *v8;
  *(_OWORD *)(a1 + 144) = *v8;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v9 + 32))(*(_QWORD *)v9);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v10 = *(_QWORD **)(a4 + 48);
  if (!v10)
  {
    v10 = (_QWORD *)operator new();
    v10[1] = v10;
    v10[2] = v10;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v10 + 3), 0, v10 + 1, v10 + 2);
    v10[10] = 0;
    v10[11] = 0;
    v10[12] = 0;
  }
  *(_QWORD *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3)
    *(_QWORD *)(a1 + 8) |= 4uLL;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), v11);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), v12);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::ComposeProperties(v13, v14) & 0x3FFFFFFF0004;
  return a1;
}

void sub_1AD81AE2C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;

  v7 = (_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(a1, a4);
  *v7 = &unk_1E5D206A8;
  fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitBase((uint64_t)v7, a2, a3);
  return a1;
}

void sub_1AD81AEE4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetMatchType(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  BOOL v8;
  int v9;
  fst *v11;
  _QWORD *v12;
  fst *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *__p[2];
  char v17;
  char v18;

  if (((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 144) + 48))(**(_QWORD **)(a1 + 144)) & 1) != 0
    && (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 1) != 1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v13 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    v14 = (_QWORD *)fst::cerr(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"ComposeFst: 1st argument requires matching but cannot.", 54);
  }
  else if (((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 48))(**(_QWORD **)(a1 + 152)) & 1) != 0
         && (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v2 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    v3 = (_QWORD *)fst::cerr(v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ComposeFst: 2nd argument requires matching but cannot.", 54);
  }
  else
  {
    v4 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 0);
    v5 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 0);
    if (v5)
      v6 = 0;
    else
      v6 = v4 == 1;
    if (v6)
      v7 = 2;
    else
      v7 = 1;
    v8 = v4 == 1;
    if (v4 == 1)
      v9 = v7;
    else
      v9 = 0;
    if (v8 || v5 == 0)
      goto LABEL_36;
    v9 = 1;
    if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 1) == 1)goto LABEL_36;
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 1))
    {
      v9 = 0;
      goto LABEL_36;
    }
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v11 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    v12 = (_QWORD *)fst::cerr(v11);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: 1st argument cannot match on output labels ", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"and 2nd argument cannot match on input labels (sort?).", 54);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v18);
  if (v17 < 0)
    operator delete(__p[0]);
  v9 = 3;
LABEL_36:
  *(_DWORD *)(a1 + 184) = v9;
}

void sub_1AD81B188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 40))(**(_QWORD **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 40))(**(_QWORD **)(a1 + 152), 0) & 4) != 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(v2, a1);
  return v2;
}

void sub_1AD81B310(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Expand(_QWORD *a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;

  v4 = (unsigned int *)(*(_QWORD *)(a1[22] + 80) + 12 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = a1[17];
  v16 = *((_BYTE *)v4 + 8);
  fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v7, v5, v6, &v16);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    v9 = a1[20];
    v8 = a1[21];
    v10 = (_QWORD *)a1[19];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v6;
    v14 = v5;
    v15 = 1;
  }
  else
  {
    v8 = a1[20];
    v9 = a1[21];
    v10 = (_QWORD *)a1[18];
    v11 = (uint64_t)a1;
    v12 = a2;
    v13 = v5;
    v14 = v6;
    v15 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v11, v12, v8, v13, v9, v14, v10, v15);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 144) + 24))(**(_QWORD **)(a1 + 144), 0) != a3
    || (*(unsigned int (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 152) + 24))(**(_QWORD **)(a1 + 152), 0) != a3)
  {
    return 0;
  }
  v6 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v6, a2, a1, a3);
  return v6;
}

void sub_1AD81B48C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  char v5;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    if ((_DWORD)result != -1)
    {
      v4 = __PAIR64__(result, v3);
      v5 = 0;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(a1[22], (uint64_t *)&v4, 1);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  float v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 80);
  v5 = (unsigned int *)(v4 + 12 * a2);
  v6 = *v5;
  v10 = (*(float (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 144) + 96))(**(_QWORD **)(a1 + 144), v6);
  if (v10 != INFINITY)
  {
    v7 = v5[1];
    v8 = (*(float (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 96))(**(_QWORD **)(a1 + 152), v7);
    v10 = v8;
    if (v8 != INFINITY)
    {
      v9 = *(_QWORD *)(a1 + 136);
      LOBYTE(v10) = *(_BYTE *)(v4 + 12 * a2 + 8);
      fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(v9, v6, v7, &v10);
    }
  }
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[8];
  uint64_t v9;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B720;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = v4;
  if (!v4)
  {
    v5 = operator new();
    v6 = *(_QWORD *)(a2 + 8);
    v8[0] = *(_BYTE *)a2;
    v9 = v6;
    fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GCCacheStore(v5, (uint64_t)v8);
    v4 = *(_QWORD *)(a2 + 16);
  }
  *(_QWORD *)(a1 + 120) = v5;
  *(_BYTE *)(a1 + 128) = v4 == 0;
  return a1;
}

{
  uint64_t v4;
  unint64_t v5;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B720;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 8);
  v4 = operator new();
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorCacheStore((_QWORD *)v4, (_BYTE *)a2);
  v5 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(v4 + 72) = v5 == 0;
  *(_DWORD *)(v4 + 76) = -1;
  *(_QWORD *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 88) = *(_BYTE *)a2;
  if (v5 <= 0x1FA0)
    v5 = 8096;
  *(_QWORD *)(v4 + 96) = v5;
  *(_BYTE *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v4;
  *(_BYTE *)(a1 + 128) = 1;
  return a1;
}

void sub_1AD81B754(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  MEMORY[0x1AF44D190](v2, 0x10A0C407A9BBF1FLL);
  v4 = *(void **)(v1 + 72);
  if (v4)
    operator delete(v4);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitBase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst *v6;
  const fst::SymbolTable *v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__str, "compose");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v6 = (fst *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 112))(a3);
  v7 = (const fst::SymbolTable *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  if (!fst::CompatSymbols(v6, v7, (const fst::SymbolTable *)1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(&__str, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(&__str, "ERROR");
    v8 = fst::LogMessage::LogMessage((fst *)&v16, (uint64_t)&__str);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ComposeFst: output symbol table of 1st argument ", 48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"does not match input symbol table of 2nd argument", 49);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v16);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v12 = *(_QWORD *)(a1 + 40);
  if (v12 != v11)
  {
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (v11)
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
    else
      v13 = 0;
    *(_QWORD *)(a1 + 40) = v13;
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 120))(a3);
  result = *(_QWORD *)(a1 + 48);
  if (result != v14)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (v14)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    else
      result = 0;
    *(_QWORD *)(a1 + 48) = result;
  }
  return result;
}

void sub_1AD81B964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a12);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *a1 = &unk_1E5D1B720;
  v2 = (_QWORD *)a1[15];
  if (v2)
  {
    v3 = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~VectorCacheStore(v2);
    MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  }
  v4 = (void *)a1[9];
  if (v4)
    operator delete(v4);
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitMatcher()
{
  return 0;
}

void fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(_QWORD *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GCCacheStore(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 32;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 32;
  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Clear((_QWORD *)a1);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 72) = v4 == 0;
  *(_DWORD *)(a1 + 76) = -1;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)a2;
  if (v4 <= 0x1FA0)
    v4 = 8096;
  *(_QWORD *)(a1 + 96) = v4;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  return a1;
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Clear(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;

  v2 = a1[2];
  if (v2 != a1[1])
  {
    v3 = 0;
    v2 = a1[1];
    do
    {
      fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Destroy(*(_QWORD **)(v2 + 8 * v3++));
      v2 = a1[1];
    }
    while (v3 < (a1[2] - v2) >> 3);
  }
  a1[2] = v2;
  return std::__list_imp<char *>::clear(a1 + 4);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~VectorCacheStore(_QWORD *a1)
{
  void *v2;

  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Clear(a1);
  std::__list_imp<char *>::clear(a1 + 4);
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v6;

  v6 = a4;
  if (!a4)
  {
    v6 = (_QWORD *)operator new();
    fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Matcher(v6, a2, 1);
  }
  *(_QWORD *)a1 = v6;
  if (!a5)
  {
    a5 = (_QWORD *)operator new();
    fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Matcher(a5, a3, 0);
    v6 = *(_QWORD **)a1;
  }
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
  *(_QWORD *)(a1 + 24) = -1;
  *(_BYTE *)(a1 + 32) = -1;
  return a1;
}

void sub_1AD81BC14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

_QWORD *fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Matcher(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  __int32 v3;
  uint64_t v6;
  int32x2_t *v7;

  v3 = a3;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, a3);
  *a1 = v6;
  if (!v6)
  {
    v7 = (int32x2_t *)operator new();
    fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SortedMatcher(v7, a2, v3, 1);
    *a1 = v7;
  }
  return a1;
}

void sub_1AD81BCC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set(uint64_t a1, size_t a2, _QWORD *a3, _QWORD *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 48) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1AD81BD28(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &unk_1E5D1D820;
  v2 = a1[17];
  if (v2)
  {
    v3 = fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SequenceComposeFilter(v2);
    MEMORY[0x1AF44D190](v3, 0x1060C40AD892F49);
  }
  v4 = a1[22];
  if (v4)
  {
    v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(_QWORD *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1AF44D190](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~SequenceComposeFilter(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1AF44D190](v2, 0x20C4093837F09);
  }
  v3 = *(_QWORD **)(a1 + 8);
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1AF44D190](v3, 0x20C4093837F09);
  }
  return a1;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
  _QWORD **v4;
  __int128 v5;
  uint64_t v6;

  *fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase((_QWORD *)a1, a2) = &unk_1E5D1D820;
  v4 = (_QWORD **)operator new();
  fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SequenceComposeFilter(v4, *(_QWORD ***)(a2 + 136), 1);
  *(_QWORD *)(a1 + 136) = v4;
  v5 = *(_OWORD *)v4;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)v4;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v5 + 32))(*(_QWORD *)v5);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 152) + 32))(**(_QWORD **)(a1 + 152));
  v6 = operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(v6, *(_QWORD *)(a2 + 176));
  *(_QWORD *)(a1 + 176) = v6;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

void sub_1AD81BF20(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl((uint64_t)a1, a2, 1u);
  *(_QWORD *)v4 = &unk_1E5D206A8;
  std::string::operator=((std::string *)(v4 + 16), (const std::string *)(a2 + 16));
  a1[1] = a1[1] & 0xFFFFC0000000FFFFLL | (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 0x3FFFFFFF0004;
  v5 = *(_QWORD *)(a2 + 40);
  v6 = a1[5];
  if (v6 != v5)
  {
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v5)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    else
      v7 = 0;
    a1[5] = v7;
  }
  v8 = *(_QWORD *)(a2 + 48);
  v9 = a1[6];
  if (v9 != v8)
  {
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v8)
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    else
      v10 = 0;
    a1[6] = v10;
  }
  return a1;
}

void sub_1AD81C064(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheBaseImpl(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  _BYTE v12[8];
  uint64_t v13;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B720;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 112);
  v12[0] = *(_BYTE *)(a1 + 104);
  v13 = v7;
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GCCacheStore(v6, (uint64_t)v12);
  *(_QWORD *)(a1 + 120) = v6;
  if (*(_BYTE *)(a2 + 128))
    v8 = 1;
  else
    v8 = a3 ^ 1;
  *(_BYTE *)(a1 + 128) = v8;
  if (((a3 ^ 1) & 1) == 0)
  {
    v9 = *(_QWORD *)(a2 + 120);
    fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::operator=(v6, v9);
    v10 = *(_OWORD *)(v9 + 88);
    *(_OWORD *)(v6 + 104) = *(_OWORD *)(v9 + 104);
    *(_OWORD *)(v6 + 88) = v10;
    *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    std::vector<BOOL>::operator=((void **)(a1 + 72), a2 + 72);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  }
  return a1;
}

void sub_1AD81C1B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  if (*v2)
    operator delete(*v2);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  char *MutableState;

  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::CopyStates((_QWORD *)a1, a2);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1)
      MutableState = 0;
    else
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
  }
  return a1;
}

void fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::CopyStates(_QWORD *a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Clear(a1);
  v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a2 + 16) != v5)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 8 * v6);
      if (v7)
      {
        v8 = operator new(0x38uLL);
        fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheState((uint64_t)v8, v7);
        if (*(_BYTE *)a1)
        {
          v9 = operator new(0x18uLL);
          v9[4] = v6;
          v10 = a1[4];
          *(_QWORD *)v9 = v10;
          *((_QWORD *)v9 + 1) = a1 + 4;
          *(_QWORD *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        v8 = 0;
      }
      v12 = (_QWORD *)a1[2];
      v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)*v4;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        else
          v18 = 0;
        v19 = &v18[8 * v14];
        *(_QWORD *)v19 = v8;
        v13 = v19 + 8;
        v21 = (char *)a1[1];
        v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *((_QWORD *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12 = v8;
        v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      v5 = *(_QWORD *)(a2 + 8);
    }
    while (v6 < (*(_QWORD *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheState(uint64_t a1, uint64_t a2)
{
  const void *v4;
  uint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(const void **)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const*>,std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const*>>((_QWORD *)(a1 + 24), v4, v5, (v5 - (uint64_t)v4) >> 4);
  *(_QWORD *)(a1 + 48) = *(unsigned int *)(a2 + 48);
  return a1;
}

_QWORD *std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const*>,std::__wrap_iter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1AD81C4AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD **fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SequenceComposeFilter(_QWORD **a1, _QWORD **a2, uint64_t a3)
{
  *a1 = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(*a2, a3);
  a1[1] = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(a2[1], a3);
  a1[2] = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)**a1 + 32))(**a1);
  a1[3] = (_QWORD *)-1;
  *((_BYTE *)a1 + 32) = -1;
  return a1;
}

_QWORD *fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  *v4 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, a2);
  return v4;
}

void sub_1AD81C598(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::CompactHashBiTable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *i;

  *(_QWORD *)(a1 + 8) = a1;
  *(_QWORD *)(a1 + 16) = a1;
  v4 = a1 + 24;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set(a1 + 24, *(_QWORD *)(a2 + 48), (_QWORD *)(a1 + 8), (_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>::__init_with_size[abi:ne180100]<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>*,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>*>((char *)(a1 + 80), *(uint64_t **)(a2 + 80), *(uint64_t **)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2));
  for (i = *(int **)(a2 + 40); i; i = *(int **)i)
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v4, i + 4, i + 4);
  return a1;
}

void sub_1AD81C650(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

char *std::vector<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>::__init_with_size[abi:ne180100]<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>*,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
      *(_QWORD *)v7 = v8;
      v7 += 12;
      a2 = (uint64_t *)((char *)a2 + 12);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1AD81C6DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1555555555555556)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

void *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  unsigned int v7;
  uint64_t v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = *a2;
  if (*a2 < -1)
  {
    v10 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 32);
    if (v7 == -1)
      v9 = *(int **)(v8 + 104);
    else
      v9 = (int *)(*(_QWORD *)(v8 + 80) + 12 * v7);
    v10 = *v9 + 7853 * v9[1] + 7867 * *((char *)v9 + 8);
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v10;
      if (v10 >= v11)
        v3 = v10 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if (fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual::operator()((uint64_t *)(a1 + 48), *((_DWORD *)i + 4), *a2))
          {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  *((_DWORD *)i + 4) = *a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 40);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)i = *v24;
LABEL_44:
    *v24 = i;
    goto LABEL_45;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11)
        v25 %= v11;
    }
    else
    {
      v25 &= v11 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1AD81C9B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (a2 < -1 || a3 < -1)
  {
    return a2 == a3;
  }
  else
  {
    v3 = *a1;
    if (a2 == -1)
      v4 = *(_QWORD *)(v3 + 104);
    else
      v4 = *(_QWORD *)(v3 + 80) + 12 * a2;
    if (a3 == -1)
      v6 = *(_QWORD *)(v3 + 104);
    else
      v6 = *(_QWORD *)(v3 + 80) + 12 * a3;
    if (v4 == v6)
      return 1;
    if (*(_DWORD *)v4 != *(_DWORD *)v6 || *(_DWORD *)(v4 + 4) != *(_DWORD *)(v6 + 4))
      return 0;
    return *(unsigned __int8 *)(v4 + 8) == *(unsigned __int8 *)(v6 + 8);
  }
}

void fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(uint64_t a1, uint64_t a2, int a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v9;

  if (*(_DWORD *)(a1 + 24) != (_DWORD)a2 || *(_DWORD *)(a1 + 28) != a3 || *a4 != *(_BYTE *)(a1 + 32))
  {
    *(_DWORD *)(a1 + 24) = a2;
    *(_DWORD *)(a1 + 28) = a3;
    *(_BYTE *)(a1 + 32) = *a4;
    v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a2);
    v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16), a2);
    v9 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2) == INFINITY
      && v6 == v7;
    *(_BYTE *)(a1 + 33) = v9;
    *(_BYTE *)(a1 + 34) = v7 == 0;
  }
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  fst *v11;
  _QWORD *v12;
  void *__p[2];
  char v14;
  char v15;

  v3 = *(_DWORD *)(a1 + 184);
  if (!v3)
    return 1;
  if (v3 == 1)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 144) + 104))(**(_QWORD **)(a1 + 144));
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 152) + 104))(**(_QWORD **)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v12 = (_QWORD *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1)
    return 0;
  return v8 == -1 || v7 <= v8;
}

void sub_1AD81CC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, int a8)
{
  unsigned int *v14;
  _QWORD v15[3];
  _DWORD *v16;
  unint64_t v17;
  unsigned int v18[4];

  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a7 + 56))(*a7, a4);
  v18[0] = a8 - 1;
  v18[1] = a8 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v18, a8);
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a5 + 136))(a5, a6, v15);
  while (1)
  {
    if (!v15[0])
    {
      if (v17 >= v15[2])
        goto LABEL_13;
LABEL_7:
      v14 = (unsigned int *)(v15[1] + 16 * v17);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v15[0] + 24))(v15[0]))
      break;
    if (!v15[0])
      goto LABEL_7;
    v14 = (unsigned int *)(*(uint64_t (**)(void))(*(_QWORD *)v15[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a7, v14, a8);
    if (v15[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 40))(v15[0]);
    else
      ++v17;
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(_QWORD *)v15[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v16)
    --*v16;
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1AD81CE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int a2, _QWORD *a3, unsigned int *a4, int a5)
{
  unsigned int *v10;
  uint64_t result;
  __int128 v12;
  unsigned __int8 *v13;
  char v14;
  unsigned __int8 *v15;
  char v16;
  int v17;
  char v18;
  unsigned int *v19;
  __int128 *v20;
  int v21;
  char v22;
  char v23;
  __int128 v24;
  __int128 v25;

  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v10);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
    if ((result & 1) == 0)
    {
      do
      {
        v12 = *(_OWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
        v24 = *(_OWORD *)a4;
        v25 = v12;
        if (a5)
        {
          v13 = *(unsigned __int8 **)(a1 + 136);
          if (DWORD1(v24) != -1)
          {
            if ((_DWORD)v25 == -1)
            {
              v17 = v13[32];
              if (v17)
                v18 = -1;
              else
                v18 = 0;
              v23 = v18;
              if (v17)
                goto LABEL_35;
            }
            else
            {
              if (DWORD1(v24))
                v14 = 0;
              else
                v14 = -1;
              v23 = v14;
              if (!DWORD1(v24))
                goto LABEL_35;
            }
LABEL_28:
            v19 = (unsigned int *)&v24;
            v20 = &v25;
LABEL_34:
            fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(a1, a2, v19, (uint64_t)v20, &v23);
            goto LABEL_35;
          }
          if (!v13[33])
          {
            v23 = v13[34] ^ 1;
            goto LABEL_28;
          }
        }
        else
        {
          v15 = *(unsigned __int8 **)(a1 + 136);
          if (DWORD1(v25) != -1)
          {
            if ((_DWORD)v24 == -1)
            {
              v21 = v15[32];
              if (v21)
                v22 = -1;
              else
                v22 = 0;
              v23 = v22;
              if (v21)
                goto LABEL_35;
            }
            else
            {
              if (DWORD1(v25))
                v16 = 0;
              else
                v16 = -1;
              v23 = v16;
              if (!DWORD1(v25))
                goto LABEL_35;
            }
LABEL_33:
            v19 = (unsigned int *)&v25;
            v20 = &v24;
            goto LABEL_34;
          }
          if (!v15[33])
          {
            v23 = v15[34] ^ 1;
            goto LABEL_33;
          }
        }
LABEL_35:
        (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
      }
      while (!(_DWORD)result);
    }
  }
  return result;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::AddArc(uint64_t a1, int a2, unsigned int *a3, uint64_t a4, char *a5)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  float v10;
  float v11;
  float v12;
  unsigned int Id;
  char *MutableState;
  __int128 v16;
  uint64_t v17;
  char v18;

  v7 = *(_DWORD *)(a4 + 12);
  LODWORD(v17) = a3[3];
  HIDWORD(v17) = v7;
  v18 = *a5;
  v8 = *a3;
  v9 = *(_DWORD *)(a4 + 4);
  v10 = *((float *)a3 + 2);
  v11 = NAN;
  if (v10 != -INFINITY)
  {
    v12 = *(float *)(a4 + 8);
    if (v12 != -INFINITY)
    {
      if (v12 == INFINITY || v10 == INFINITY)
        v11 = INFINITY;
      else
        v11 = v10 + v12;
    }
  }
  Id = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(_QWORD **)(a1 + 176), &v17, 1);
  *(_QWORD *)&v16 = __PAIR64__(v9, v8);
  *((_QWORD *)&v16 + 1) = __PAIR64__(Id, LODWORD(v11));
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v16);
}

uint64_t fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(_QWORD *a1, uint64_t *a2, int a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;

  a1[13] = a2;
  v6 = (uint64_t)(a1 + 3);
  v7 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::find<int>(a1 + 3, &fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::kCurrentKey);
  if (v7)
    return *((unsigned int *)v7 + 4);
  if (!a3)
    return 0xFFFFFFFFLL;
  v9 = a1[10];
  v10 = a1[11];
  v11 = (uint64_t)(v10 - v9) / 12;
  v26 = v11;
  v12 = a1[12];
  if (v10 >= v12)
  {
    if ((unint64_t)(v11 + 1) > 0x1555555555555555)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v9) >> 2);
    v16 = 2 * v15;
    if (2 * v15 <= v11 + 1)
      v16 = v11 + 1;
    if (v15 >= 0xAAAAAAAAAAAAAAALL)
      v17 = 0x1555555555555555;
    else
      v17 = v16;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<int,float,int>>>((uint64_t)(a1 + 12), v17);
    else
      v18 = 0;
    v19 = &v18[12 * v11];
    v20 = &v18[12 * v17];
    v21 = *a2;
    *((_DWORD *)v19 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v19 = v21;
    v14 = v19 + 12;
    v23 = (_DWORD *)a1[10];
    v22 = (_DWORD *)a1[11];
    if (v22 != v23)
    {
      do
      {
        v24 = *(_QWORD *)(v22 - 3);
        v22 -= 3;
        v25 = v22[2];
        *(_QWORD *)(v19 - 12) = v24;
        v19 -= 12;
        *((_DWORD *)v19 + 2) = v25;
      }
      while (v22 != v23);
      v22 = (_DWORD *)a1[10];
    }
    a1[10] = v19;
    a1[11] = v14;
    a1[12] = v20;
    if (v22)
      operator delete(v22);
  }
  else
  {
    v13 = *a2;
    *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v10 = v13;
    v14 = (char *)(v10 + 12);
  }
  a1[11] = v14;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v6, (int *)&v26, &v26);
  return v26;
}

uint64_t *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::find<int>(_QWORD *a1, int *a2)
{
  unsigned int v3;
  uint64_t v4;
  int *v5;
  unint64_t v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  unint64_t v14;

  v3 = *a2;
  if (*a2 < -1)
  {
    v6 = 0;
  }
  else
  {
    v4 = a1[4];
    if (v3 == -1)
      v5 = *(int **)(v4 + 104);
    else
      v5 = (int *)(*(_QWORD *)(v4 + 80) + 12 * v3);
    v6 = *v5 + 7853 * v5[1] + 7867 * *((char *)v5 + 8);
  }
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v11 = *(uint64_t ***)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = *v11;
  if (*v11)
  {
    v13 = a1 + 6;
    do
    {
      v14 = v12[1];
      if (v14 == v6)
      {
        if (fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::HashEqual::operator()(v13, *((_DWORD *)v12 + 4), *a2))
        {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(_QWORD *)&v7)
            v14 %= *(_QWORD *)&v7;
        }
        else
        {
          v14 &= *(_QWORD *)&v7 - 1;
        }
        if (v14 != v10)
          return 0;
      }
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  return v12;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_QWORD *)a1 = &unk_1E5D1F800;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = a4;
  *(_QWORD *)(a1 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a3 + 144), 0);
  *(_QWORD *)(a1 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a3 + 152), 0);
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_1AE142840;
  *(_BYTE *)(a1 + 84) = 0;
  if (a4 == 1)
    *(_QWORD *)(a1 + 52) = 0xFFFFFFFF00000000;
  return a1;
}

void fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(v4, a1, a2);
  return v4;
}

void sub_1AD81D464(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Type(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32));
  if ((_DWORD)result != 3)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
    if ((_DWORD)result != 3)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != 4|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2), (_DWORD)result != 4))
        {
          if ((*(unsigned int (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 32) + 24))(**(_QWORD **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(a1 + 40) + 24))(**(_QWORD **)(a1 + 40), a2);
          if ((_DWORD)result != *(_DWORD *)(a1 + 28))
            return 3;
        }
      }
    }
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 84))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::SetState_(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;

  if (*(_DWORD *)(result + 24) != a2)
  {
    v2 = result;
    *(_DWORD *)(result + 24) = a2;
    v3 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 176) + 80) + 12 * a2);
    v4 = v3[1];
    (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(result + 32) + 56))(**(_QWORD **)(result + 32), *v3);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(***(_QWORD ***)(v2 + 40) + 56))(**(_QWORD **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Find_(uint64_t a1, uint64_t a2)
{
  _QWORD **v2;
  _QWORD **v3;

  *(_BYTE *)(a1 + 48) = (_DWORD)a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if ((_DWORD)a2)
    {
      v2 = (_QWORD **)(a1 + 40);
      v3 = (_QWORD **)(a1 + 32);
      return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
    }
  }
  else if ((_DWORD)a2)
  {
    v2 = (_QWORD **)(a1 + 32);
    v3 = (_QWORD **)(a1 + 40);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *v2, *v3);
  }
  return 1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Done_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)
    || !(*(unsigned int (**)(_QWORD))(***(_QWORD ***)(a1 + 32) + 72))(**(_QWORD **)(a1 + 32)))
  {
    return 0;
  }
  else
  {
    return (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 40) + 72))(**(_QWORD **)(a1 + 40));
  }
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
    return a1 + 52;
  else
    return a1 + 68;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Next_(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;

  if (*(_BYTE *)(result + 48))
  {
    *(_BYTE *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      v2 = *(_QWORD **)(result + 32);
      v1 = *(_QWORD **)(result + 40);
    }
    else
    {
      v1 = *(_QWORD **)(result + 32);
      v2 = *(_QWORD **)(result + 40);
    }
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(result, v1, v2);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::~ComposeFstMatcher(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &unk_1E5D1F800;
  v2 = (_QWORD *)a1[4];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1AF44D190](v2, 0x20C4093837F09);
  }
  v3 = (_QWORD *)a1[5];
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1AF44D190](v3, 0x20C4093837F09);
  }
  return a1;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::ComposeFstMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  fst *v6;
  _QWORD *v7;
  void *__p[2];
  char v10;
  char v11;

  *(_QWORD *)a1 = &unk_1E5D1F800;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = -1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a2 + 32), a3);
  *(_QWORD *)(a1 + 40) = fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(*(_QWORD **)(a2 + 40), a3);
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 52) = xmmword_1AE142840;
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  if ((_DWORD)a3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v6 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    v7 = (_QWORD *)fst::cerr(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ComposeFstMatcher: safe copy not supported", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 84) = 1;
  }
  if (*(_DWORD *)(a1 + 28) == 1)
    *(int32x2_t *)(a1 + 52) = vrev64_s32(*(int32x2_t *)(a1 + 52));
  return a1;
}

void sub_1AD81D95C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindLabel<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  int v8;
  uint64_t v9;
  unsigned int *v10;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 64))(*a3);
  if ((_DWORD)result)
  {
    v8 = *(_DWORD *)(a1 + 28);
    v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
    v10 = (unsigned int *)(v9 + 4);
    if (v8)
      v10 = (unsigned int *)v9;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a4 + 64))(*a4, *v10);
    return fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a3, a4);
  }
  return result;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::FindNext<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;

  while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2)
       || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3))
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2) & 1) == 0)
      {
        do
        {
          v6 = *(_DWORD *)(a1 + 28);
          v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
          v8 = (unsigned int *)(v7 + 4);
          if (v6)
            v8 = (unsigned int *)v7;
          if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 64))(*a3, *v8) & 1) != 0)
            break;
          (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 88))(*a2);
        }
        while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2));
      }
    }
    while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3) & 1) == 0)
    {
      v9 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 80))(*a2);
      v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 80))(*a3);
      (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3);
      v11 = *(_DWORD *)(a1 + 28);
      v12 = v11 == 0;
      if (v11)
        v13 = (uint64_t *)v10;
      else
        v13 = (uint64_t *)v9;
      v14 = *v13;
      v15 = v13[1];
      if (v12)
        v16 = (uint64_t *)v10;
      else
        v16 = (uint64_t *)v9;
      if (fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(a1, *(unsigned int *)(a1 + 24), v14, v15, *v16, v16[1]))return 1;
    }
  }
  return 0;
}

uint64_t fst::ComposeFstMatcher<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::MatchArc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  float v9;
  unint64_t v12;
  char v13;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(unsigned __int8 **)(v6 + 136);
  if (HIDWORD(a3) == -1)
  {
    if (!v7[33])
    {
      LOBYTE(v7) = v7[34] ^ 1;
      goto LABEL_8;
    }
    return 0;
  }
  if ((_DWORD)a5 == -1)
  {
    v8 = 0;
    LODWORD(v7) = v7[32];
    if ((_DWORD)v7)
      return v8;
    goto LABEL_8;
  }
  LOBYTE(v7) = 0;
  if (!HIDWORD(a3))
    return 0;
LABEL_8:
  v12 = __PAIR64__(HIDWORD(a6), HIDWORD(a4));
  v13 = (char)v7;
  *(_DWORD *)(a1 + 68) = a3;
  *(_DWORD *)(a1 + 72) = HIDWORD(a5);
  v9 = NAN;
  if (*(float *)&a4 != -INFINITY && *(float *)&a6 != -INFINITY)
  {
    v9 = INFINITY;
    if (*(float *)&a6 != INFINITY && *(float *)&a4 != INFINITY)
      v9 = *(float *)&a4 + *(float *)&a6;
  }
  *(float *)(a1 + 76) = v9;
  v8 = 1;
  *(_DWORD *)(a1 + 80) = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>,(fst::HSType)1>::FindId(*(_QWORD **)(v6 + 176), (uint64_t *)&v12, 1);
  return v8;
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComposeFstImpl<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v6, a1, a2, a3);
  return v6;
}

void sub_1AD81DCEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComposeFstImpl<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  *(_QWORD *)fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1E5D1D8E0;
  v8 = *(_QWORD *)(a4 + 40);
  if (!v8)
  {
    v8 = operator new();
    fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelsComposeFilter(v8, a2, a3, *(_QWORD *)(a4 + 24), *(_QWORD **)(a4 + 32));
  }
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *(_QWORD **)(v8 + 120);
  *(_QWORD *)(a1 + 144) = v8 + 120;
  *(_QWORD *)(a1 + 152) = v8 + 200;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 32))(*v9);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(****(_QWORD ****)(a1 + 152) + 32))(***(_QWORD ***)(a1 + 152));
  v10 = *(_QWORD **)(a4 + 48);
  if (!v10)
  {
    v10 = (_QWORD *)operator new();
    v10[1] = v10;
    v10[2] = v10;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v10 + 3), 0, v10 + 1, v10 + 2);
    v10[10] = 0;
    v10[11] = 0;
    v10[12] = 0;
  }
  *(_QWORD *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3)
    *(_QWORD *)(a1 + 8) |= 4uLL;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 144) + 40))(***(_QWORD ***)(a1 + 144), v11);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 152) + 40))(***(_QWORD ***)(a1 + 152), v12);
  v15 = fst::ComposeProperties(v13, v14);
  v16 = *(_DWORD *)(*(_QWORD *)(a1 + 136) + 40);
  v17 = v15 | 4;
  if (v16 != 3)
    v17 = v15;
  v18 = v16 == 1;
  v19 = 0x3FFCCC300004;
  if (v18)
    v19 = 0x3FFC330C0004;
  *(_QWORD *)(a1 + 8) = v17 & v19 | *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL;
  return a1;
}

void sub_1AD81DF0C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::SetMatchType(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  BOOL v8;
  int v9;
  fst *v11;
  _QWORD *v12;
  fst *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *__p[2];
  char v17;
  char v18;

  if (((*(uint64_t (**)(_QWORD))(****(_QWORD ****)(a1 + 144) + 48))(***(_QWORD ***)(a1 + 144)) & 1) != 0
    && (*(unsigned int (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 144) + 24))(***(_QWORD ***)(a1 + 144), 1) != 1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v13 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    v14 = (_QWORD *)fst::cerr(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"ComposeFst: 1st argument requires matching but cannot.", 54);
  }
  else if (((*(uint64_t (**)(_QWORD))(****(_QWORD ****)(a1 + 152) + 48))(***(_QWORD ***)(a1 + 152)) & 1) != 0
         && (*(unsigned int (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 152) + 24))(***(_QWORD ***)(a1 + 152), 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v2 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    v3 = (_QWORD *)fst::cerr(v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ComposeFst: 2nd argument requires matching but cannot.", 54);
  }
  else
  {
    v4 = (*(uint64_t (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 144) + 24))(***(_QWORD ***)(a1 + 144), 0);
    v5 = (*(uint64_t (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 152) + 24))(***(_QWORD ***)(a1 + 152), 0);
    if (v5)
      v6 = 0;
    else
      v6 = v4 == 1;
    if (v6)
      v7 = 2;
    else
      v7 = 1;
    v8 = v4 == 1;
    if (v4 == 1)
      v9 = v7;
    else
      v9 = 0;
    if (v8 || v5 == 0)
      goto LABEL_36;
    v9 = 1;
    if ((*(unsigned int (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 144) + 24))(***(_QWORD ***)(a1 + 144), 1) == 1)goto LABEL_36;
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 152) + 24))(***(_QWORD ***)(a1 + 152), 1))
    {
      v9 = 0;
      goto LABEL_36;
    }
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v11 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    v12 = (_QWORD *)fst::cerr(v11);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: 1st argument cannot match on output labels ", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"and 2nd argument cannot match on input labels (sort?).", 54);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v18);
  if (v17 < 0)
    operator delete(__p[0]);
  v9 = 3;
LABEL_36:
  *(_DWORD *)(a1 + 184) = v9;
}

void sub_1AD81E220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  char v4;

  if ((a2 & 4) != 0)
  {
    if ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 144) + 40))(***(_QWORD ***)(a1 + 144), 0) & 4) != 0|| (v4 = (*(uint64_t (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 152) + 40))(***(_QWORD ***)(a1 + 152), 0), *(_DWORD *)(*(_QWORD *)(a1 + 136) + 40) == 3)|| (v4 & 4) != 0)
    {
      *(_QWORD *)(a1 + 8) |= 4uLL;
    }
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComposeFstImpl(v2, a1);
  return v2;
}

void sub_1AD81E3C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Expand(_QWORD *a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  v4 = (unsigned int *)(*(_QWORD *)(a1[22] + 80) + 20 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = a1[17];
  v8 = *((_QWORD *)v4 + 1);
  LODWORD(v4) = v4[4];
  v17 = v8;
  v18 = (int)v4;
  fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::SetState(v7, v5, v6, &v17);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    v10 = a1[20];
    v9 = a1[21];
    v11 = (_DWORD *)a1[19];
    v12 = (uint64_t)a1;
    v13 = a2;
    v14 = v6;
    v15 = v5;
    v16 = 1;
  }
  else
  {
    v9 = a1[20];
    v10 = a1[21];
    v11 = (_DWORD *)a1[18];
    v12 = (uint64_t)a1;
    v13 = a2;
    v14 = v5;
    v15 = v6;
    v16 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(v12, v13, v9, v14, v10, v15, v11, v16);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 144) + 24))(***(_QWORD ***)(a1 + 144), 0) == a3)(*(void (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 152) + 24))(***(_QWORD ***)(a1 + 152), 0);
  return 0;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  __int128 v5;
  int v6;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    v4 = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    result = 0xFFFFFFFFLL;
    if (v4 != -1)
    {
      v5 = __PAIR64__(v4, v3);
      v6 = -1;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::FindId(a1[22], &v5, 1);
    }
  }
  return result;
}

float fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4;
  int *v5;
  int v6;
  float result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  float v15;
  float v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 80);
  v5 = (int *)(v4 + 20 * a2);
  v6 = *v5;
  result = (*(float (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 144) + 96))(***(_QWORD ***)(a1 + 144), *v5);
  v16 = result;
  *(float *)&v13 = result;
  v17 = 2139095040;
  if (result != INFINITY)
  {
    v8 = v5[1];
    result = (*(float (**)(_QWORD, uint64_t, float, float))(****(_QWORD ****)(a1 + 152) + 96))(***(_QWORD ***)(a1 + 152), v8, result, result);
    v15 = result;
    *(float *)&v13 = result;
    v17 = 2139095040;
    if (result != INFINITY)
    {
      v9 = *(_QWORD *)(a1 + 136);
      v10 = v4 + 20 * a2;
      v11 = *(_QWORD *)(v10 + 8);
      LODWORD(v10) = *(_DWORD *)(v10 + 16);
      v13 = v11;
      v14 = v10;
      fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::SetState(v9, v6, v8, &v13);
      fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterFinal(*(_QWORD *)(a1 + 136), &v16);
      result = NAN;
      if (v16 != -INFINITY)
      {
        result = NAN;
        if (v15 != -INFINITY)
        {
          result = INFINITY;
          if (v15 != INFINITY && v16 != INFINITY)
            return v16 + v15;
        }
      }
    }
  }
  return result;
}

uint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelsComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD **v6;
  int v7;
  int v8;

  v6 = (_QWORD **)fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter(a1, a2, a3, a4, a5);
  *((_BYTE *)v6 + 84) = 127;
  *((_DWORD *)v6 + 20) = -2147483393;
  v6[11] = (_QWORD *)0x7F800000FFLL;
  *((_DWORD *)v6 + 24) = -1;
  *(_QWORD *)(a1 + 104) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v6 + 32))(**v6);
  *(_QWORD *)(a1 + 112) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 32))(**(_QWORD **)(a1 + 8));
  if (*(_DWORD *)(a1 + 40) == 1)
    v7 = 1;
  else
    v7 = 2;
  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MultiEpsMatcher(a1 + 120, *(_QWORD *)(a1 + 104), 1, v7, *(_QWORD *)a1, 0);
  if (*(_DWORD *)(a1 + 40) == 1)
    v8 = 2;
  else
    v8 = 1;
  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MultiEpsMatcher(a1 + 200, *(_QWORD *)(a1 + 112), 0, v8, *(_QWORD *)(a1 + 8), 0);
  return a1;
}

void sub_1AD81E7BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD **v6;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  fst *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void *__p[2];
  char v20;
  char v21;

  v6 = (_QWORD **)fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AltSequenceComposeFilter(a1, a2, a3, a4, a5);
  v7 = fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(*v6, *(_QWORD **)(a1 + 8));
  *(_DWORD *)(a1 + 40) = v7;
  v8 = *(_BYTE **)(a1 + 8);
  *(_QWORD *)(a1 + 48) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(*(_BYTE **)a1, 0);
  *(_QWORD *)(a1 + 56) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(v8, 0);
  *(_DWORD *)(a1 + 64) = v7;
  v9 = **(_QWORD **)(a1 + 8 * (*(_DWORD *)(a1 + 40) != 1));
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
  if (*(_DWORD *)(a1 + 40) == 3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v10 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)__p);
    v11 = (_QWORD *)fst::cerr(v10);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"LookAheadComposeFilter: 1st argument cannot ", 44);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"match/look-ahead on output labels and 2nd argument ", 51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"cannot match/look-ahead on input labels.", 40);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
    if (v20 < 0)
      operator delete(__p[0]);
  }
  v14 = 56;
  if (*(_DWORD *)(a1 + 64) == 1)
    v15 = 48;
  else
    v15 = 56;
  v16 = *(_BYTE **)(a1 + v15);
  if (*(_DWORD *)(a1 + 64) != 1)
    v14 = 48;
  v17 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + v14) + 32))(**(_QWORD **)(a1 + v14));
  if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookAheadCheck(v16))
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)v16 + 112))(*(_QWORD *)v16, v17, 0);
  return a1;
}

void sub_1AD81E978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v18 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AltSequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v10;

  v6 = a4;
  if (!a4)
  {
    v6 = operator new();
    fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookAheadMatcher(v6, a2, 1);
  }
  *(_QWORD *)a1 = v6;
  if (!a5)
  {
    v10 = operator new();
    fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookAheadMatcher(v10, a3, 0);
    a5 = (_QWORD *)v10;
  }
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a5 + 32))(*a5);
  *(_QWORD *)(a1 + 24) = -1;
  *(_BYTE *)(a1 + 32) = -1;
  return a1;
}

void sub_1AD81EA98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

uint64_t fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  *(_QWORD *)v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)a1 + 16))(*(_QWORD *)a1, a2);
  *(_BYTE *)(v4 + 8) = a1[8];
  return v4;
}

void sub_1AD81EB28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

uint64_t fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookAheadCheck(_BYTE *a1)
{
  int v2;
  fst *v3;
  _QWORD *v4;
  void *__p[2];
  char v7;
  char v8;

  if (!a1[8])
  {
    v2 = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 48))() & 0x30;
    a1[8] = v2 != 0;
    if (!v2)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v3 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
      v4 = (_QWORD *)fst::cerr(v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"LookAheadMatcher: No look-ahead matcher defined", 47);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
      if (v7 < 0)
        operator delete(__p[0]);
    }
  }
  return a1[8];
}

void sub_1AD81EC18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1AF44D190](v2, 0x1020C405F07FB98);
  }
  v3 = *(_QWORD **)(a1 + 8);
  if (v3)
  {
    if (*v3)
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    MEMORY[0x1AF44D190](v3, 0x1020C405F07FB98);
  }
  return a1;
}

uint64_t fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MultiEpsMatcher(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, char a6)
{
  uint64_t v11;
  char v13;
  int v14;
  int v15;

  v11 = a5;
  if (!a5)
  {
    v11 = operator new();
    fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookAheadMatcher(v11, a2, a3);
  }
  *(_QWORD *)a1 = v11;
  *(_DWORD *)(a1 + 8) = a4;
  if (a5)
    v13 = a6;
  else
    v13 = 1;
  *(_BYTE *)(a1 + 12) = v13;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_QWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 48) = 0;
  if ((_DWORD)a3)
    v14 = 0;
  else
    v14 = -1;
  if ((_DWORD)a3)
    v15 = -1;
  else
    v15 = 0;
  *(_DWORD *)(a1 + 60) = v14;
  *(_DWORD *)(a1 + 64) = v15;
  *(_QWORD *)(a1 + 68) = 0xFFFFFFFF00000000;
  return a1;
}

void sub_1AD81ED9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

uint64_t fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(uint64_t a1)
{
  _QWORD *v2;

  if (*(_BYTE *)(a1 + 12))
  {
    v2 = *(_QWORD **)a1;
    if (*(_QWORD *)a1)
    {
      if (*v2)
        (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
      MEMORY[0x1AF44D190](v2, 0x1020C405F07FB98);
    }
  }
  std::__tree<int>::destroy(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set(uint64_t a1, size_t a2, _QWORD *a3, _QWORD *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 48) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1AD81EE6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &unk_1E5D1D8E0;
  v2 = a1[17];
  if (v2)
  {
    fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2 + 200);
    fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2 + 120);
    fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v2 + 48);
    v3 = fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v2);
    MEMORY[0x1AF44D190](v3, 0x1060C40F6F5CAE4);
  }
  v4 = a1[22];
  if (v4)
  {
    v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(_QWORD *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1AF44D190](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase((_QWORD *)a1, a2) = &unk_1E5D1D8E0;
  v4 = operator new();
  fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelsComposeFilter(v4, *(_QWORD *)(a2 + 136), 1);
  v5 = *(_QWORD **)(v4 + 120);
  *(_QWORD *)(a1 + 136) = v4;
  *(_QWORD *)(a1 + 144) = v4 + 120;
  *(_QWORD *)(a1 + 152) = v4 + 200;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 32))(*v5);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(****(_QWORD ****)(a1 + 152) + 32))(***(_QWORD ***)(a1 + 152));
  v6 = operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::CompactHashBiTable(v6, *(_QWORD *)(a2 + 176));
  *(_QWORD *)(a1 + 176) = v6;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

void sub_1AD81F000(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelsComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v4;
  int v5;
  int v6;

  v4 = (_QWORD **)fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter(a1, a2, a3);
  *((_BYTE *)v4 + 84) = 127;
  *((_DWORD *)v4 + 20) = -2147483393;
  v4[11] = (_QWORD *)0x7F800000FFLL;
  *((_DWORD *)v4 + 24) = -1;
  *(_QWORD *)(a1 + 104) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v4 + 32))(**v4);
  *(_QWORD *)(a1 + 112) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 32))(**(_QWORD **)(a1 + 8));
  if (*(_DWORD *)(a1 + 40) == 1)
    v5 = 1;
  else
    v5 = 2;
  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MultiEpsMatcher(a1 + 120, *(_QWORD *)(a1 + 104), 1, v5, *(_QWORD *)a1, 0);
  if (*(_DWORD *)(a1 + 40) == 1)
    v6 = 2;
  else
    v6 = 1;
  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MultiEpsMatcher(a1 + 200, *(_QWORD *)(a1 + 112), 0, v6, *(_QWORD *)(a1 + 8), 0);
  return a1;
}

void sub_1AD81F120(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;

  v5 = fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AltSequenceComposeFilter(a1, (_BYTE **)a2, a3);
  v6 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v5 + 40) = v6;
  v7 = *(_BYTE **)(a1 + 8);
  *(_QWORD *)(a1 + 48) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(*(_BYTE **)v5, 0);
  *(_QWORD *)(a1 + 56) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(v7, 0);
  *(_DWORD *)(a1 + 64) = v6;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v8 = 56;
  if (v6 == 1)
    v9 = 48;
  else
    v9 = 56;
  v10 = *(_BYTE **)(a1 + v9);
  if (v6 != 1)
    v8 = 48;
  v11 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + v8) + 32))(**(_QWORD **)(a1 + v8));
  if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookAheadCheck(v10))
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)v10 + 112))(*(_QWORD *)v10, v11, 1);
  return a1;
}

void sub_1AD81F214(_Unwind_Exception *a1)
{
  uint64_t v1;

  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AltSequenceComposeFilter(uint64_t a1, _BYTE **a2, uint64_t a3)
{
  _QWORD *v6;

  *(_QWORD *)a1 = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(*a2, a3);
  v6 = (_QWORD *)fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(a2[1], a3);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
  *(_QWORD *)(a1 + 24) = -1;
  *(_BYTE *)(a1 + 32) = -1;
  return a1;
}

uint64_t fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::CompactHashBiTable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *i;

  *(_QWORD *)(a1 + 8) = a1;
  *(_QWORD *)(a1 + 16) = a1;
  v4 = a1 + 24;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set(a1 + 24, *(_QWORD *)(a2 + 48), (_QWORD *)(a1 + 8), (_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>::__init_with_size[abi:ne180100]<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>*,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>*>((char *)(a1 + 80), *(__int128 **)(a2 + 80), *(__int128 **)(a2 + 88), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2));
  for (i = *(int **)(a2 + 40); i; i = *(int **)i)
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v4, i + 4, i + 4);
  return a1;
}

void sub_1AD81F338(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

char *std::vector<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>::__init_with_size[abi:ne180100]<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>*,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_DWORD *)(v7 + 16) = *((_DWORD *)a2 + 4);
      *(_OWORD *)v7 = v8;
      v7 += 20;
      a2 = (__int128 *)((char *)a2 + 20);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1AD81F3C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xCCCCCCCCCCCCCCDLL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[20 * v4];
  return result;
}

void *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  void *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc::operator()((uint64_t *)(a1 + 32), *a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(void **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual::operator()((uint64_t *)(a1 + 48), *((_DWORD *)i + 4), *a2))
          {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v8;
  *((_DWORD *)i + 4) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 40);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v23 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1AD81F660(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc::operator()(uint64_t *a1, int a2)
{
  uint64_t v2;
  int *v3;

  if (a2 < -1)
    return 0;
  v2 = *a1;
  if (a2 == -1)
    v3 = *(int **)(v2 + 104);
  else
    v3 = (int *)(*(_QWORD *)(v2 + 80) + 20 * a2);
  return *v3
       + 7853 * v3[1]
       + 7867
       * (v3[4] ^ __ROR8__((*((_QWORD *)v3 + 1) >> 8) ^ __ROR8__((char)*((_QWORD *)v3 + 1), 59), 59));
}

BOOL fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (a2 < -1 || a3 < -1)
    return a2 == a3;
  v3 = *a1;
  if (a2 == -1)
    v4 = *(_QWORD *)(v3 + 104);
  else
    v4 = *(_QWORD *)(v3 + 80) + 20 * a2;
  if (a3 == -1)
    v6 = *(_QWORD *)(v3 + 104);
  else
    v6 = *(_QWORD *)(v3 + 80) + 20 * a3;
  return fst::operator==(v4, v6);
}

BOOL fst::operator==(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
    return 1;
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
      && fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>::operator==((unsigned __int8 *)(a1 + 8), (unsigned __int8 *)(a2 + 8));
}

BOOL fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *(float *)(a1 + 1) == *(float *)(a2 + 1) && *((_DWORD *)a1 + 2) == *((_DWORD *)a2 + 2);
}

void fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::SetState(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t (*v6)(void);
  int v7;
  _QWORD *v8;

  v5 = *a4;
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a4 + 2);
  *(_QWORD *)(a1 + 88) = v5;
  LODWORD(v5) = *(_DWORD *)a4;
  *(_BYTE *)(a1 + 84) = *((_BYTE *)a4 + 4);
  *(_DWORD *)(a1 + 80) = v5;
  fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(a1, a2, a3, a4);
  if ((*(_BYTE *)(a1 + 72) & 0x80) != 0)
  {
    if (*(_DWORD *)(a1 + 40) == 1)
      v6 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 104) + 40);
    else
      v6 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 112) + 40);
    *(_QWORD *)(a1 + 280) = v6();
    v7 = *(_DWORD *)(a1 + 96);
    std::__tree<int>::destroy(a1 + 136, *(_QWORD **)(a1 + 144));
    *(_QWORD *)(a1 + 136) = a1 + 144;
    *(_QWORD *)(a1 + 144) = 0;
    v8 = *(_QWORD **)(a1 + 224);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = -1;
    std::__tree<int>::destroy(a1 + 216, v8);
    *(_QWORD *)(a1 + 216) = a1 + 224;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = -1;
    if (v7 != -1)
    {
      fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddMultiEpsLabel(a1 + 120, v7);
      fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddMultiEpsLabel(a1 + 200, v7);
    }
  }
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  fst *v11;
  _QWORD *v12;
  void *__p[2];
  char v14;
  char v15;

  v3 = *(_DWORD *)(a1 + 184);
  if (!v3)
    return 1;
  if (v3 == 1)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD))(****(_QWORD ****)(a1 + 144) + 104))(***(_QWORD ***)(a1 + 144));
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 152) + 104))(***(_QWORD ***)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v12 = (_QWORD *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1)
    return 0;
  return v8 == -1 || v7 <= v8;
}

void sub_1AD81F9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7, int a8)
{
  int v12;
  int *v15;
  _QWORD v16[3];
  _DWORD *v17;
  unint64_t v18;
  int v19[4];

  v12 = a4;
  (*(void (**)(_QWORD, uint64_t))(***(_QWORD ***)a7 + 56))(**(_QWORD **)a7, a4);
  a7[18] = v12;
  v19[0] = a8 - 1;
  v19[1] = a8 << 31 >> 31;
  v19[2] = 0;
  v19[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, a7, v19, a8);
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a5 + 136))(a5, a6, v16);
  while (1)
  {
    if (!v16[0])
    {
      if (v18 >= v16[2])
        goto LABEL_13;
LABEL_7:
      v15 = (int *)(v16[1] + 16 * v18);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v16[0] + 24))(v16[0]))
      break;
    if (!v16[0])
      goto LABEL_7;
    v15 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)v16[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, a7, v15, a8);
    if (v16[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v16[0] + 40))(v16[0]);
    else
      ++v18;
  }
  if (v16[0])
  {
    (*(void (**)(void))(*(_QWORD *)v16[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v17)
    --*v17;
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1AD81FBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddMultiEpsLabel(uint64_t a1, int a2)
{
  fst *v2;
  _QWORD *v3;
  void *__p[2];
  char v5;
  char v6;

  if (a2)
  {
    fst::CompactSet<int,-1>::Insert(a1 + 16, a2);
  }
  else
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v2 = fst::LogMessage::LogMessage((fst *)&v6, (uint64_t)__p);
    v3 = (_QWORD *)fst::cerr(v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"MultiEpsMatcher: Bad multi-eps label: 0", 39);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v6);
    if (v5 < 0)
      operator delete(__p[0]);
  }
}

void sub_1AD81FC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(uint64_t a1, int a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v9;

  if (*(_DWORD *)(a1 + 24) != a2 || *(_DWORD *)(a1 + 28) != (_DWORD)a3 || *a4 != *(_BYTE *)(a1 + 32))
  {
    *(_DWORD *)(a1 + 24) = a2;
    *(_DWORD *)(a1 + 28) = a3;
    *(_BYTE *)(a1 + 32) = *a4;
    v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16), a3);
    v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16), a3);
    v9 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a3) == INFINITY
      && v6 == v7;
    *(_BYTE *)(a1 + 33) = v9;
    *(_BYTE *)(a1 + 34) = v7 == 0;
  }
}

uint64_t **fst::CompactSet<int,-1>::Insert(uint64_t a1, int a2)
{
  uint64_t **result;
  int v4;
  int v5;
  int v7;
  int v9;

  v9 = a2;
  result = std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)a1, &v9, &v9);
  v4 = *(_DWORD *)(a1 + 24);
  v5 = v9;
  if (v4 == -1 || v9 < v4)
    *(_DWORD *)(a1 + 24) = v9;
  v7 = *(_DWORD *)(a1 + 28);
  if (v7 == -1 || v7 < v5)
    *(_DWORD *)(a1 + 28) = v5;
  return result;
}

uint64_t **std::__tree<int>::__emplace_unique_key_args<int,int const&>(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, int a2, _BYTE *a3, int *a4, int a5)
{
  int *v10;
  uint64_t result;
  __int128 *v12;
  __int128 v13;
  unint64_t v14;
  int v15;
  unsigned int *v17;
  __int128 *v18;
  unint64_t v19;
  int v20;
  unint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;
  int v26;
  float v27;

  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(a3, *v10);
  if ((_DWORD)result && !a3[76])
  {
    do
    {
      v12 = (__int128 *)(a3 + 60);
      if (!a3[56])
        v12 = (__int128 *)(*(uint64_t (**)(_QWORD))(***(_QWORD ***)a3 + 80))(**(_QWORD **)a3);
      v13 = *v12;
      v24 = *(_OWORD *)a4;
      v25 = v13;
      if (a5)
      {
        v14 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(_QWORD *)(a1 + 136), (uint64_t)&v24, (uint64_t)&v25);
        v22 = v14;
        v23 = v15;
        if ((_BYTE)v14 == 0xFF)
        {
          LODWORD(v27) = v14 >> 8;
          v26 = 2139095040;
          if (v27 == INFINITY && v15 == -1)
            goto LABEL_21;
        }
        v17 = (unsigned int *)&v24;
        v18 = &v25;
      }
      else
      {
        v19 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(_QWORD *)(a1 + 136), (uint64_t)&v25, (uint64_t)&v24);
        v22 = v19;
        v23 = v20;
        if ((_BYTE)v19 == 0xFF)
        {
          LODWORD(v27) = v19 >> 8;
          v26 = 2139095040;
          if (v27 == INFINITY && v20 == -1)
            goto LABEL_21;
        }
        v17 = (unsigned int *)&v25;
        v18 = &v24;
      }
      fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::AddArc(a1, a2, v17, (uint64_t)v18, (uint64_t)&v22);
LABEL_21:
      result = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next((uint64_t)a3);
    }
    while (!a3[76]);
  }
  return result;
}

uint64_t fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(_BYTE *a1, int a2)
{
  _BYTE *v3;
  uint64_t (*v4)(void);
  uint64_t result;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  v3 = a1 + 24;
  *((_QWORD *)a1 + 6) = a1 + 24;
  a1[56] = 0;
  if (a2 == -1)
  {
    if ((a1[8] & 1) != 0)
    {
      v6 = (_QWORD *)*((_QWORD *)a1 + 2);
      while (1)
      {
        *((_QWORD *)a1 + 6) = v6;
        if (v6 == (_QWORD *)v3)
          break;
        v7 = (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)a1 + 64))(**(_QWORD **)a1, *((unsigned int *)v6 + 7));
        v8 = (_QWORD *)*((_QWORD *)a1 + 6);
        if ((v7 & 1) != 0)
        {
          if (v8 == (_QWORD *)v3)
            break;
          result = 1;
          goto LABEL_11;
        }
        v9 = (_QWORD *)v8[1];
        if (v9)
        {
          do
          {
            v6 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v6 = (_QWORD *)v8[2];
            v10 = *v6 == (_QWORD)v8;
            v8 = v6;
          }
          while (!v10);
        }
      }
    }
    v4 = *(uint64_t (**)(void))(***(_QWORD ***)a1 + 64);
    goto LABEL_10;
  }
  if (!a2)
  {
    v4 = *(uint64_t (**)(void))(***(_QWORD ***)a1 + 64);
LABEL_10:
    result = v4();
    goto LABEL_11;
  }
  if ((a1[8] & 2) == 0 || v3 == (_BYTE *)fst::CompactSet<int,-1>::Find((uint64_t)(a1 + 16), a2))
  {
    v4 = *(uint64_t (**)(void))(***(_QWORD ***)a1 + 64);
    goto LABEL_10;
  }
  result = 1;
  a1[56] = 1;
LABEL_11:
  a1[76] = result ^ 1;
  return result;
}

unint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  char v13;
  int v14;
  float v15;

  v3 = a3;
  v4 = a2;
  if ((*(_BYTE *)(a1 + 72) & 0x80) == 0)
  {
    v6 = fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(a1, a2, a3);
    goto LABEL_3;
  }
  v8 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v8 != -1)
  {
    if (*(_DWORD *)(a1 + 40) != 1)
    {
      a2 = a3;
      a3 = v4;
    }
    v6 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::PushedLabelFilterArc(a1, a2, a3, v8);
    goto LABEL_17;
  }
  v6 = fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(a1, a2, a3);
  v12 = v6;
  v13 = BYTE4(v6);
  if ((_BYTE)v6 == 0xFF)
  {
    LODWORD(v15) = v6 >> 8;
    v14 = 2139095040;
    if (v15 == INFINITY)
    {
      v7 = 0;
      v6 = 0x7F800000FFLL;
      return v7 & 0xFFFFFF0000000000 | v6 & 0xFFFFFFFFFFLL;
    }
  }
  if (*(_BYTE *)(a1 + 76))
  {
    if (*(_DWORD *)(a1 + 40) == 1)
    {
      v9 = v4;
      v10 = v3;
    }
    else
    {
      v9 = v3;
      v10 = v4;
    }
    v6 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelFilterArc(a1, v9, v10, &v12);
LABEL_17:
    v7 = v6 & 0xFFFFFF0000000000;
    return v7 & 0xFFFFFF0000000000 | v6 & 0xFFFFFFFFFFLL;
  }
LABEL_3:
  v7 = 0;
  return v7 & 0xFFFFFF0000000000 | v6 & 0xFFFFFFFFFFLL;
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::AddArc(uint64_t a1, int a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  float v10;
  float v11;
  float v12;
  unsigned int Id;
  char *MutableState;
  __int128 v16;
  __int128 v17;
  int v18;

  v7 = *(_DWORD *)(a4 + 12);
  LODWORD(v17) = a3[3];
  DWORD1(v17) = v7;
  *((_QWORD *)&v17 + 1) = *(_QWORD *)a5;
  v18 = *(_DWORD *)(a5 + 8);
  v8 = *a3;
  v9 = *(_DWORD *)(a4 + 4);
  v10 = *((float *)a3 + 2);
  v11 = NAN;
  if (v10 != -INFINITY)
  {
    v12 = *(float *)(a4 + 8);
    if (v12 != -INFINITY)
    {
      if (v12 == INFINITY || v10 == INFINITY)
        v11 = INFINITY;
      else
        v11 = v10 + v12;
    }
  }
  Id = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::FindId(*(_QWORD **)(a1 + 176), &v17, 1);
  *(_QWORD *)&v16 = __PAIR64__(v9, v8);
  *((_QWORD *)&v16 + 1) = __PAIR64__(Id, LODWORD(v11));
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::PushArc(MutableState, &v16);
}

uint64_t fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next(uint64_t result)
{
  _QWORD **v1;
  char v2;
  _QWORD **v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;

  v1 = (_QWORD **)result;
  if (*(_BYTE *)(result + 56))
  {
    v2 = 1;
LABEL_3:
    *((_BYTE *)v1 + 76) = v2;
  }
  else
  {
    (*(void (**)(_QWORD))(***(_QWORD ***)result + 88))(**(_QWORD **)result);
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v1 + 72))(**v1);
    *((_BYTE *)v1 + 76) = result;
    if ((_DWORD)result)
    {
      v3 = v1 + 3;
      v4 = v1[6];
      if (v4 != v1 + 3)
      {
        v5 = (_QWORD *)v4[1];
        if (v5)
        {
          do
          {
            v6 = v5;
            v5 = (_QWORD *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            v6 = (_QWORD *)v4[2];
            v7 = *v6 == (_QWORD)v4;
            v4 = v6;
          }
          while (!v7);
        }
        while (1)
        {
          v1[6] = v6;
          if (v6 == v3)
            goto LABEL_19;
          result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)**v1 + 64))(**v1, *((unsigned int *)v6 + 7));
          v8 = v1[6];
          if ((result & 1) != 0)
            break;
          v9 = (_QWORD *)v8[1];
          if (v9)
          {
            do
            {
              v6 = v9;
              v9 = (_QWORD *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              v6 = (_QWORD *)v8[2];
              v7 = *v6 == (_QWORD)v8;
              v8 = v6;
            }
            while (!v7);
          }
        }
        if (v8 == v3)
        {
LABEL_19:
          result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)**v1 + 64))(**v1, 0xFFFFFFFFLL);
          v2 = result ^ 1;
          goto LABEL_3;
        }
        *((_BYTE *)v1 + 76) = 0;
      }
    }
  }
  return result;
}

uint64_t fst::CompactSet<int,-1>::Find(uint64_t a1, int a2)
{
  int v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = v2 != -1 && v2 <= a2;
  if (!v3 || *(_DWORD *)(a1 + 28) < a2)
    return a1 + 8;
  v7 = *(_QWORD *)(a1 + 8);
  v5 = a1 + 8;
  v6 = v7;
  if (!v7)
    return v5;
  v4 = v5;
  do
  {
    v8 = *(_DWORD *)(v6 + 28);
    v9 = v8 < a2;
    if (v8 >= a2)
      v10 = (uint64_t *)v6;
    else
      v10 = (uint64_t *)(v6 + 8);
    if (!v9)
      v4 = v6;
    v6 = *v10;
  }
  while (*v10);
  if (v4 == v5 || *(_DWORD *)(v4 + 28) > a2)
    return v5;
  return v4;
}

unint64_t fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  _BYTE *v10;
  float v11;
  float v13;
  float v14;
  float v15;
  int v16;
  float v17;
  float v18;

  v5 = fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(a1, a2, (_DWORD *)a3);
  if (v5 == 0xFF)
  {
    v7 = 2139095040;
    goto LABEL_11;
  }
  v6 = v5;
  if ((*(_BYTE *)(a1 + 72) & 0x40) == 0)
  {
    v7 = 0;
    return v6 | (unint64_t)(v7 << 8);
  }
  v8 = 0.0;
  if (*(_BYTE *)(a1 + 76))
  {
    v9 = 56;
    if (*(_DWORD *)(a1 + 64) == 1)
      v9 = 48;
    v10 = *(_BYTE **)(a1 + v9);
    if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookAheadCheck(v10))
      v8 = *(float *)(*(_QWORD *)v10 + 8);
  }
  v11 = *(float *)(a1 + 81);
  v7 = 2139095040;
  if (v8 == INFINITY)
  {
LABEL_11:
    v6 = -1;
    return v6 | (unint64_t)(v7 << 8);
  }
  v13 = *(float *)(a3 + 8);
  v14 = NAN;
  if (v13 != -INFINITY && v8 != -INFINITY)
  {
    if (v8 == INFINITY || v13 == INFINITY)
    {
      v14 = INFINITY;
      if ((LODWORD(v11) & 0x7FFFFFFFu) >= 0x7F800000)
        v14 = NAN;
    }
    else
    {
      v15 = v8 + v13;
      v14 = NAN;
      if (v15 != -INFINITY)
      {
        v16 = LODWORD(v11) & 0x7FFFFFFF;
        v14 = NAN;
        v17 = v15 - v11;
        if (v15 == INFINITY)
          v17 = INFINITY;
        if (v16 <= 2139095039)
          v14 = v17;
      }
    }
  }
  *(float *)(a3 + 8) = v14;
  v18 = floorf((float)(v8 * 1024.0) + 0.5) * 0.00097656;
  if ((LODWORD(v8) & 0x7FFFFFFFu) >= 0x7F800000)
    v18 = v8;
  v7 = LODWORD(v18);
  return v6 | (unint64_t)(v7 << 8);
}

uint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::PushedLabelFilterArc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  _BOOL4 v7;
  uint64_t v9;
  int v10;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;

  v4 = 0x7F800000FFLL;
  v5 = *(_DWORD *)(a1 + 40);
  v6 = v5 != 1;
  v7 = v5 == 1;
  if (*(_DWORD *)(a3 + 4 * v6) == -1)
  {
    v9 = 4 * v7;
    v10 = *(_DWORD *)(a2 + v9);
    if (v10 == (_DWORD)a4)
    {
      v4 = 0;
      *(_DWORD *)(a2 + v9) = 0;
    }
    else if (!v10)
    {
      if (*(_QWORD *)(a1 + 280) == 1)
        return *(_QWORD *)(a1 + 88);
      v13 = *(_DWORD *)(a1 + 64) == 1 ? 48 : 56;
      (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + v13) + 56))(**(_QWORD **)(a1 + v13), *(unsigned int *)(a2 + 12));
      v14 = *(_DWORD *)(a1 + 64) == 1 ? 48 : 56;
      v15 = *(_BYTE **)(a1 + v14);
      if (!fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookAheadCheck(v15)
        || (*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)v15 + 120))(*(_QWORD *)v15, a4))
      {
        return *(_QWORD *)(a1 + 88);
      }
    }
  }
  return v4;
}

unint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelFilterArc(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  float v16;
  int v17;
  float v18;
  float v19;
  BOOL v20;
  float v21;

  if (*(_DWORD *)(a3 + 4 * (*(_DWORD *)(a1 + 40) == 1)))
    return *a4 | ((unint64_t)*((unsigned __int8 *)a4 + 4) << 32);
  v9 = 4 * (*(_DWORD *)(a1 + 40) == 1);
  if (*(_DWORD *)(a2 + v9))
  {
    if ((*(_BYTE *)(a1 + 73) & 4) != 0)
      return *a4 | ((unint64_t)*((unsigned __int8 *)a4 + 4) << 32);
  }
  v10 = 56;
  if (*(_DWORD *)(a1 + 64) == 1)
    v10 = 48;
  v11 = *(_BYTE **)(a1 + v10);
  if (!fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookAheadCheck(v11))
    return *a4 | ((unint64_t)*((unsigned __int8 *)a4 + 4) << 32);
  v12 = *(_QWORD *)v11;
  v13 = *(_DWORD *)(*(_QWORD *)v11 + 24);
  if (v13 == -1)
    return *a4 | ((unint64_t)*((unsigned __int8 *)a4 + 4) << 32);
  v14 = *(_DWORD *)(v12 + 12);
  v15 = *(_DWORD *)(v12 + 16);
  v16 = *(float *)(v12 + 20);
  if (*(_DWORD *)(a1 + 40) == 1)
    v17 = *(_DWORD *)(v12 + 12);
  else
    v17 = *(_DWORD *)(v12 + 16);
  *(_DWORD *)(a2 + v9) = v17;
  *(_DWORD *)a3 = v14;
  *(_DWORD *)(a3 + 4) = v15;
  v18 = *(float *)(a3 + 8);
  v19 = NAN;
  if (v18 != -INFINITY && v16 != -INFINITY)
  {
    v19 = INFINITY;
    v20 = v18 == INFINITY || v16 == INFINITY;
    v21 = v16 + v18;
    if (!v20)
      v19 = v21;
  }
  *(float *)(a3 + 8) = v19;
  *(_DWORD *)(a3 + 12) = v13;
  return *a4 | ((unint64_t)*((unsigned __int8 *)a4 + 4) << 32);
}

uint64_t fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _DWORD *v3;
  int v4;
  unsigned __int8 v5;
  int v6;
  BOOL v7;
  unsigned __int8 v8;
  unsigned __int8 v10;

  v3 = (_DWORD *)a2;
  *(_BYTE *)(a1 + 76) = 0;
  if (*a3 == -1)
  {
    if (!*(_BYTE *)(a1 + 33))
    {
      v5 = *(_BYTE *)(a1 + 34) ^ 1;
      goto LABEL_7;
    }
    return 255;
  }
  v4 = *(_DWORD *)(a2 + 4);
  if (v4 == -1)
  {
    v6 = *(unsigned __int8 *)(a1 + 32);
    v7 = v6 == 1;
    if (v6 == 1)
      v8 = -1;
    else
      v8 = 0;
    v10 = v8;
    if (!v7)
      goto LABEL_14;
    return 255;
  }
  if (!v4)
    return 255;
  v5 = 0;
LABEL_7:
  v10 = v5;
LABEL_14:
  if (*(_DWORD *)(a1 + 40) != 1)
  {
    a2 = (uint64_t)a3;
    a3 = v3;
  }
  return fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadFilterArc(a1, a2, (uint64_t)a3, &v10);
}

uint64_t fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadFilterArc(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v7 = *(_DWORD *)(a1 + 72);
  if (*(_DWORD *)(a2 + 4 * (*(_DWORD *)(a1 + 40) == 1)))
  {
    if ((v7 & 0x100) == 0)
      return *a4;
  }
  else if ((v7 & 0x200) == 0)
  {
    return *a4;
  }
  *(_BYTE *)(a1 + 76) = 1;
  if (*(_DWORD *)(a1 + 64) == 1)
    v8 = 48;
  else
    v8 = 56;
  (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + v8) + 56))(**(_QWORD **)(a1 + v8), *(unsigned int *)(a2 + 12));
  v9 = *(_DWORD *)(a1 + 64);
  v10 = v9 == 1;
  if (v9 == 1)
    v11 = 48;
  else
    v11 = 56;
  v12 = *(_BYTE **)(a1 + v11);
  if (v10)
    v13 = 56;
  else
    v13 = 48;
  v14 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + v13) + 32))(**(_QWORD **)(a1 + v13));
  v15 = *(unsigned int *)(a3 + 12);
  if (!fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookAheadCheck(v12)
    || (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)v12 + 128))(*(_QWORD *)v12, v14, v15))
  {
    return *a4;
  }
  return 255;
}

uint64_t fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::FindId(_QWORD *a1, __int128 *a2, int a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  char *v22;
  char *v23;
  __int128 v24;
  unsigned int v25;

  a1[13] = a2;
  v6 = (uint64_t)(a1 + 3);
  v7 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::find<int>(a1 + 3, &fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::kCurrentKey);
  if (v7)
    return *((unsigned int *)v7 + 4);
  if (!a3)
    return 0xFFFFFFFFLL;
  v9 = a1[10];
  v10 = a1[11];
  v11 = (uint64_t)(v10 - v9) / 20;
  v25 = v11;
  v12 = a1[12];
  if (v10 >= v12)
  {
    if ((unint64_t)(v11 + 1) > 0xCCCCCCCCCCCCCCCLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - v9) >> 2);
    v16 = 2 * v15;
    if (2 * v15 <= v11 + 1)
      v16 = v11 + 1;
    if (v15 >= 0x666666666666666)
      v17 = 0xCCCCCCCCCCCCCCCLL;
    else
      v17 = v16;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)(a1 + 12), v17);
    else
      v18 = 0;
    v19 = &v18[20 * v11];
    v20 = &v18[20 * v17];
    v21 = *a2;
    *((_DWORD *)v19 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)v19 = v21;
    v14 = v19 + 20;
    v23 = (char *)a1[10];
    v22 = (char *)a1[11];
    if (v22 != v23)
    {
      do
      {
        v24 = *(_OWORD *)(v22 - 20);
        *((_DWORD *)v19 - 1) = *((_DWORD *)v22 - 1);
        *(_OWORD *)(v19 - 20) = v24;
        v19 -= 20;
        v22 -= 20;
      }
      while (v22 != v23);
      v22 = (char *)a1[10];
    }
    a1[10] = v19;
    a1[11] = v14;
    a1[12] = v20;
    if (v22)
      operator delete(v22);
  }
  else
  {
    v13 = *a2;
    *(_DWORD *)(v10 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)v10 = v13;
    v14 = (char *)(v10 + 20);
  }
  a1[11] = v14;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v6, (int *)&v25, &v25);
  return v25;
}

uint64_t *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::find<int>(_QWORD *a1, int *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  unint64_t v13;

  v4 = fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc::operator()(a1 + 4, *a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = a1 + 6;
    do
    {
      v13 = v11[1];
      if (v13 == v6)
      {
        if (fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual::operator()(v12, *((_DWORD *)v11 + 4), *a2))
        {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterFinal(uint64_t a1, float *a2)
{
  uint64_t result;

  result = fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterFinal(a1, a2);
  if ((*(_BYTE *)(a1 + 72) & 0x80) != 0 && *a2 != INFINITY && *(_DWORD *)(a1 + 96) != -1)
    *a2 = INFINITY;
  return result;
}

uint64_t fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterFinal(uint64_t result, float *a2)
{
  float v2;
  float v3;

  if ((*(_BYTE *)(result + 72) & 0x40) != 0)
  {
    v2 = *a2;
    if (*a2 != INFINITY)
    {
      v3 = NAN;
      if (v2 != -INFINITY)
      {
        if ((*(_DWORD *)(result + 81) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          v3 = INFINITY;
          if (v2 != INFINITY)
            v3 = v2 - *(float *)(result + 81);
        }
        else
        {
          v3 = NAN;
        }
      }
      *a2 = v3;
    }
  }
  return result;
}

uint64_t fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CreateBase2<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComposeFstImpl<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v6, a1, a2, a3);
  return v6;
}

void sub_1AD820E68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComposeFstImpl<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  *(_QWORD *)fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase(a1, a2, a3, a4) = &unk_1E5D1D880;
  v8 = *(_QWORD *)(a4 + 40);
  if (!v8)
  {
    v8 = operator new();
    fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelsComposeFilter(v8, a2, a3, *(_QWORD **)(a4 + 24), *(_QWORD *)(a4 + 32));
  }
  *(_QWORD *)(a1 + 136) = v8;
  v9 = *(_QWORD **)(v8 + 120);
  *(_QWORD *)(a1 + 144) = v8 + 120;
  *(_QWORD *)(a1 + 152) = v8 + 200;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 32))(*v9);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(****(_QWORD ****)(a1 + 152) + 32))(***(_QWORD ***)(a1 + 152));
  v10 = *(_QWORD **)(a4 + 48);
  if (!v10)
  {
    v10 = (_QWORD *)operator new();
    v10[1] = v10;
    v10[2] = v10;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashFunc,fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v10 + 3), 0, v10 + 1, v10 + 2);
    v10[10] = 0;
    v10[11] = 0;
    v10[12] = 0;
  }
  *(_QWORD *)(a1 + 176) = v10;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::SetMatchType(a1);
  if (*(_DWORD *)(a1 + 184) == 3)
    *(_QWORD *)(a1 + 8) |= 4uLL;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a3 + 64))(a3, 0x3FFFFFFF0007, 0);
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 144) + 40))(***(_QWORD ***)(a1 + 144), v11);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 152) + 40))(***(_QWORD ***)(a1 + 152), v12);
  v15 = fst::ComposeProperties(v13, v14);
  v16 = *(_DWORD *)(*(_QWORD *)(a1 + 136) + 40);
  v17 = v15 | 4;
  if (v16 != 3)
    v17 = v15;
  v18 = v16 == 1;
  v19 = 0x3FFCCC300004;
  if (v18)
    v19 = 0x3FFC330C0004;
  *(_QWORD *)(a1 + 8) = v17 & v19 | *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL;
  return a1;
}

void sub_1AD821088(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Properties(uint64_t a1, uint64_t a2)
{
  char v4;

  if ((a2 & 4) != 0)
  {
    if ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 160) + 64))(*(_QWORD *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 168) + 64))(*(_QWORD *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 144) + 40))(***(_QWORD ***)(a1 + 144), 0) & 4) != 0|| (v4 = (*(uint64_t (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 152) + 40))(***(_QWORD ***)(a1 + 152), 0), *(_DWORD *)(*(_QWORD *)(a1 + 136) + 40) == 3)|| (v4 & 4) != 0)
    {
      *(_QWORD *)(a1 + 8) |= 4uLL;
    }
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComposeFstImpl(v2, a1);
  return v2;
}

void sub_1AD82122C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::Expand(_QWORD *a1, int a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  v4 = (unsigned int *)(*(_QWORD *)(a1[22] + 80) + 20 * a2);
  v5 = *v4;
  v6 = v4[1];
  v7 = a1[17];
  v8 = *((_QWORD *)v4 + 1);
  LODWORD(v4) = v4[4];
  v17 = v8;
  v18 = (int)v4;
  fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::SetState(v7, v5, v6, &v17);
  if (fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchInput((uint64_t)a1, v5, v6))
  {
    v10 = a1[20];
    v9 = a1[21];
    v11 = (_DWORD *)a1[19];
    v12 = (uint64_t)a1;
    v13 = a2;
    v14 = v6;
    v15 = v5;
    v16 = 1;
  }
  else
  {
    v9 = a1[20];
    v10 = a1[21];
    v11 = (_DWORD *)a1[18];
    v12 = (uint64_t)a1;
    v13 = a2;
    v14 = v5;
    v15 = v6;
    v16 = 0;
  }
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(v12, v13, v9, v14, v10, v15, v11, v16);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::InitMatcher(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 144) + 24))(***(_QWORD ***)(a1 + 144), 0) == a3)(*(void (**)(_QWORD, _QWORD))(****(_QWORD ****)(a1 + 152) + 24))(***(_QWORD ***)(a1 + 152), 0);
  return 0;
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComputeStart(_QWORD **a1)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  __int128 v5;
  int v6;

  result = (*(uint64_t (**)(_QWORD *))(*a1[20] + 24))(a1[20]);
  if ((_DWORD)result != -1)
  {
    v3 = result;
    v4 = (*(uint64_t (**)(_QWORD *))(*a1[21] + 24))(a1[21]);
    result = 0xFFFFFFFFLL;
    if (v4 != -1)
    {
      v5 = __PAIR64__(v4, v3);
      v6 = -1;
      return fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::FindId(a1[22], &v5, 1);
    }
  }
  return result;
}

float fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComputeFinal(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  float result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  float v15;
  float v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 80);
  v5 = (unsigned int *)(v4 + 20 * a2);
  v6 = *v5;
  result = (*(float (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 144) + 96))(***(_QWORD ***)(a1 + 144), v6);
  v16 = result;
  *(float *)&v13 = result;
  v17 = 2139095040;
  if (result != INFINITY)
  {
    v8 = v5[1];
    result = (*(float (**)(_QWORD, uint64_t, float, float))(****(_QWORD ****)(a1 + 152) + 96))(***(_QWORD ***)(a1 + 152), v8, result, result);
    v15 = result;
    *(float *)&v13 = result;
    v17 = 2139095040;
    if (result != INFINITY)
    {
      v9 = *(_QWORD *)(a1 + 136);
      v10 = v4 + 20 * a2;
      v11 = *(_QWORD *)(v10 + 8);
      LODWORD(v10) = *(_DWORD *)(v10 + 16);
      v13 = v11;
      v14 = v10;
      fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::SetState(v9, v6, v8, &v13);
      fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterFinal(*(_QWORD *)(a1 + 136), &v16);
      result = NAN;
      if (v16 != -INFINITY)
      {
        result = NAN;
        if (v15 != -INFINITY)
        {
          result = INFINITY;
          if (v15 != INFINITY && v16 != INFINITY)
            return v16 + v15;
        }
      }
    }
  }
  return result;
}

uint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelsComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  _QWORD **v6;
  int v7;
  int v8;

  v6 = (_QWORD **)fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter(a1, a2, a3, a4, a5);
  *((_BYTE *)v6 + 84) = 127;
  *((_DWORD *)v6 + 20) = -2147483393;
  v6[11] = (_QWORD *)0x7F800000FFLL;
  *((_DWORD *)v6 + 24) = -1;
  *(_QWORD *)(a1 + 104) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v6 + 32))(**v6);
  *(_QWORD *)(a1 + 112) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 32))(**(_QWORD **)(a1 + 8));
  if (*(_DWORD *)(a1 + 40) == 1)
    v7 = 1;
  else
    v7 = 2;
  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MultiEpsMatcher(a1 + 120, *(_QWORD *)(a1 + 104), 1, v7, *(_QWORD *)a1, 0);
  if (*(_DWORD *)(a1 + 40) == 1)
    v8 = 2;
  else
    v8 = 1;
  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MultiEpsMatcher(a1 + 200, *(_QWORD *)(a1 + 112), 0, v8, *(_QWORD *)(a1 + 8), 0);
  return a1;
}

void sub_1AD821628(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  _QWORD **v6;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  fst *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void *__p[2];
  char v20;
  char v21;

  v6 = (_QWORD **)fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SequenceComposeFilter(a1, a2, a3, a4, a5);
  v7 = fst::LookAheadMatchType<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(*v6, *(_QWORD **)(a1 + 8));
  *(_DWORD *)(a1 + 40) = v7;
  v8 = *(_BYTE **)(a1 + 8);
  *(_QWORD *)(a1 + 48) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(*(_BYTE **)a1, 0);
  *(_QWORD *)(a1 + 56) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(v8, 0);
  *(_DWORD *)(a1 + 64) = v7;
  v9 = **(_QWORD **)(a1 + 8 * (*(_DWORD *)(a1 + 40) != 1));
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
  if (*(_DWORD *)(a1 + 40) == 3)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v10 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)__p);
    v11 = (_QWORD *)fst::cerr(v10);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"LookAheadComposeFilter: 1st argument cannot ", 44);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"match/look-ahead on output labels and 2nd argument ", 51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"cannot match/look-ahead on input labels.", 40);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v21);
    if (v20 < 0)
      operator delete(__p[0]);
  }
  v14 = 56;
  if (*(_DWORD *)(a1 + 64) == 1)
    v15 = 48;
  else
    v15 = 56;
  v16 = *(_BYTE **)(a1 + v15);
  if (*(_DWORD *)(a1 + 64) != 1)
    v14 = 48;
  v17 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + v14) + 32))(**(_QWORD **)(a1 + v14));
  if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookAheadCheck(v16))
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)v16 + 112))(*(_QWORD *)v16, v17, 0);
  return a1;
}

void sub_1AD8217E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v18 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SequenceComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v6;

  v6 = a4;
  if (!a4)
  {
    v6 = (_QWORD *)operator new();
    fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookAheadMatcher((uint64_t)v6, a2, 1);
  }
  *(_QWORD *)a1 = v6;
  if (!a5)
  {
    a5 = operator new();
    fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookAheadMatcher(a5, a3, 0);
    v6 = *(_QWORD **)a1;
  }
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
  *(_QWORD *)(a1 + 24) = -1;
  *(_BYTE *)(a1 + 32) = -1;
  return a1;
}

void sub_1AD821904(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::~ComposeFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &unk_1E5D1D880;
  v2 = a1[17];
  if (v2)
  {
    fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2 + 200);
    fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2 + 120);
    fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v2 + 48);
    v3 = fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v2);
    MEMORY[0x1AF44D190](v3, 0x1060C40F6F5CAE4);
  }
  v4 = a1[22];
  if (v4)
  {
    v5 = *(void **)(v4 + 80);
    if (v5)
    {
      *(_QWORD *)(v4 + 88) = v5;
      operator delete(v5);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 + 24);
    MEMORY[0x1AF44D190](v4, 0x10E0C406D28CB5CLL);
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::ComposeFstImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFstImplBase((_QWORD *)a1, a2) = &unk_1E5D1D880;
  v4 = operator new();
  fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelsComposeFilter(v4, *(_QWORD *)(a2 + 136), 1);
  v5 = *(_QWORD **)(v4 + 120);
  *(_QWORD *)(a1 + 136) = v4;
  *(_QWORD *)(a1 + 144) = v4 + 120;
  *(_QWORD *)(a1 + 152) = v4 + 200;
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 32))(*v5);
  *(_QWORD *)(a1 + 168) = (*(uint64_t (**)(_QWORD))(****(_QWORD ****)(a1 + 152) + 32))(***(_QWORD ***)(a1 + 152));
  v6 = operator new();
  fst::CompactHashBiTable<int,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,std::equal_to<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>,(fst::HSType)1>::CompactHashBiTable(v6, *(_QWORD *)(a2 + 176));
  *(_QWORD *)(a1 + 176) = v6;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  return a1;
}

void sub_1AD821AB4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10E0C406D28CB5CLL);
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheBaseImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelsComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v4;
  int v5;
  int v6;

  v4 = (_QWORD **)fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter(a1, a2, a3);
  *((_BYTE *)v4 + 84) = 127;
  *((_DWORD *)v4 + 20) = -2147483393;
  v4[11] = (_QWORD *)0x7F800000FFLL;
  *((_DWORD *)v4 + 24) = -1;
  *(_QWORD *)(a1 + 104) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)**v4 + 32))(**v4);
  *(_QWORD *)(a1 + 112) = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 8) + 32))(**(_QWORD **)(a1 + 8));
  if (*(_DWORD *)(a1 + 40) == 1)
    v5 = 1;
  else
    v5 = 2;
  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MultiEpsMatcher(a1 + 120, *(_QWORD *)(a1 + 104), 1, v5, *(_QWORD *)a1, 0);
  if (*(_DWORD *)(a1 + 40) == 1)
    v6 = 2;
  else
    v6 = 1;
  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::MultiEpsMatcher(a1 + 200, *(_QWORD *)(a1 + 112), 0, v6, *(_QWORD *)(a1 + 8), 0);
  return a1;
}

void sub_1AD821BD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~MultiEpsMatcher(v2);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1 + 48);
  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadComposeFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  int v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;

  v5 = fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SequenceComposeFilter((uint64_t *)a1, (_BYTE **)a2, a3);
  v6 = *(_DWORD *)(a2 + 40);
  *((_DWORD *)v5 + 10) = v6;
  v7 = *(_BYTE **)(a1 + 8);
  *(_QWORD *)(a1 + 48) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy((_BYTE *)*v5, 0);
  *(_QWORD *)(a1 + 56) = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(v7, 0);
  *(_DWORD *)(a1 + 64) = v6;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  v8 = 56;
  if (v6 == 1)
    v9 = 48;
  else
    v9 = 56;
  v10 = *(_BYTE **)(a1 + v9);
  if (v6 != 1)
    v8 = 48;
  v11 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + v8) + 32))(**(_QWORD **)(a1 + v8));
  if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookAheadCheck(v10))
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)v10 + 112))(*(_QWORD *)v10, v11, 1);
  return a1;
}

void sub_1AD821CC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  fst::LookAheadSelector<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::~LookAheadSelector(v1);
  _Unwind_Resume(a1);
}

uint64_t *fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SequenceComposeFilter(uint64_t *a1, _BYTE **a2, uint64_t a3)
{
  *a1 = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(*a2, a3);
  a1[1] = fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Copy(a2[1], a3);
  a1[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)*a1 + 32))(*(_QWORD *)*a1);
  a1[3] = -1;
  *((_BYTE *)a1 + 32) = -1;
  return a1;
}

void fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::SetState(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t (*v6)(void);
  int v7;
  _QWORD *v8;

  v5 = *a4;
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a4 + 2);
  *(_QWORD *)(a1 + 88) = v5;
  LODWORD(v5) = *(_DWORD *)a4;
  *(_BYTE *)(a1 + 84) = *((_BYTE *)a4 + 4);
  *(_DWORD *)(a1 + 80) = v5;
  fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::SetState(a1, a2, a3, a4);
  if ((*(_BYTE *)(a1 + 72) & 0x80) != 0)
  {
    if (*(_DWORD *)(a1 + 40) == 1)
      v6 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 104) + 40);
    else
      v6 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 112) + 40);
    *(_QWORD *)(a1 + 280) = v6();
    v7 = *(_DWORD *)(a1 + 96);
    std::__tree<int>::destroy(a1 + 136, *(_QWORD **)(a1 + 144));
    *(_QWORD *)(a1 + 136) = a1 + 144;
    *(_QWORD *)(a1 + 144) = 0;
    v8 = *(_QWORD **)(a1 + 224);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = -1;
    std::__tree<int>::destroy(a1 + 216, v8);
    *(_QWORD *)(a1 + 216) = a1 + 224;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 240) = -1;
    if (v7 != -1)
    {
      fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddMultiEpsLabel(a1 + 120, v7);
      fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddMultiEpsLabel(a1 + 200, v7);
    }
  }
}

BOOL fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  fst *v11;
  _QWORD *v12;
  void *__p[2];
  char v14;
  char v15;

  v3 = *(_DWORD *)(a1 + 184);
  if (!v3)
    return 1;
  if (v3 == 1)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD))(****(_QWORD ****)(a1 + 144) + 104))(***(_QWORD ***)(a1 + 144));
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(****(_QWORD ****)(a1 + 152) + 104))(***(_QWORD ***)(a1 + 152), a3);
  if (v7 == -1 && v8 == -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v11 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v12 = (_QWORD *)fst::cerr(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"ComposeFst: both sides can't require match", 42);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
    return 1;
  }
  if (v7 == -1)
    return 0;
  return v8 == -1 || v7 <= v8;
}

void sub_1AD821F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7, int a8)
{
  int v12;
  int *v15;
  _QWORD v16[3];
  _DWORD *v17;
  unint64_t v18;
  int v19[4];

  v12 = a4;
  (*(void (**)(_QWORD, uint64_t))(***(_QWORD ***)a7 + 56))(**(_QWORD **)a7, a4);
  a7[18] = v12;
  v19[0] = a8 - 1;
  v19[1] = a8 << 31 >> 31;
  v19[2] = 0;
  v19[3] = a6;
  fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, a7, v19, a8);
  v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a5 + 136))(a5, a6, v16);
  while (1)
  {
    if (!v16[0])
    {
      if (v18 >= v16[2])
        goto LABEL_13;
LABEL_7:
      v15 = (int *)(v16[1] + 16 * v18);
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v16[0] + 24))(v16[0]))
      break;
    if (!v16[0])
      goto LABEL_7;
    v15 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)v16[0] + 32))();
LABEL_8:
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(a1, a2, a7, v15, a8);
    if (v16[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v16[0] + 40))(v16[0]);
    else
      ++v18;
  }
  if (v16[0])
  {
    (*(void (**)(void))(*(_QWORD *)v16[0] + 8))();
    goto LABEL_15;
  }
LABEL_13:
  if (v17)
    --*v17;
LABEL_15:
  fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetArcs(a1, a2);
}

void sub_1AD822144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::MatchArc<fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(uint64_t a1, int a2, _BYTE *a3, int *a4, int a5)
{
  int *v10;
  uint64_t result;
  __int128 *v12;
  __int128 v13;
  unint64_t v14;
  int v15;
  unsigned int *v17;
  __int128 *v18;
  unint64_t v19;
  int v20;
  unint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;
  int v26;
  float v27;

  v10 = a4 + 1;
  if (!a5)
    v10 = a4;
  result = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Find(a3, *v10);
  if ((_DWORD)result && !a3[76])
  {
    do
    {
      v12 = (__int128 *)(a3 + 60);
      if (!a3[56])
        v12 = (__int128 *)(*(uint64_t (**)(_QWORD))(***(_QWORD ***)a3 + 80))(**(_QWORD **)a3);
      v13 = *v12;
      v24 = *(_OWORD *)a4;
      v25 = v13;
      if (a5)
      {
        v14 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(_QWORD *)(a1 + 136), (uint64_t)&v24, (uint64_t)&v25);
        v22 = v14;
        v23 = v15;
        if ((_BYTE)v14 == 0xFF)
        {
          LODWORD(v27) = v14 >> 8;
          v26 = 2139095040;
          if (v27 == INFINITY && v15 == -1)
            goto LABEL_21;
        }
        v17 = (unsigned int *)&v24;
        v18 = &v25;
      }
      else
      {
        v19 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(*(_QWORD *)(a1 + 136), (uint64_t)&v25, (uint64_t)&v24);
        v22 = v19;
        v23 = v20;
        if ((_BYTE)v19 == 0xFF)
        {
          LODWORD(v27) = v19 >> 8;
          v26 = 2139095040;
          if (v27 == INFINITY && v20 == -1)
            goto LABEL_21;
        }
        v17 = (unsigned int *)&v25;
        v18 = &v24;
      }
      fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>,fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::PairFilterState<fst::PairFilterState<fst::IntegerFilterState<signed char>,fst::WeightFilterState<fst::TropicalWeightTpl<float>>>,fst::IntegerFilterState<int>>>>>>>::AddArc(a1, a2, v17, (uint64_t)v18, (uint64_t)&v22);
LABEL_21:
      result = fst::MultiEpsMatcher<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next((uint64_t)a3);
    }
    while (!a3[76]);
  }
  return result;
}

unint64_t fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  char v13;
  int v14;
  float v15;

  v3 = a3;
  v4 = a2;
  if ((*(_BYTE *)(a1 + 72) & 0x80) == 0)
  {
    v6 = fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(a1, a2, a3);
    goto LABEL_3;
  }
  v8 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v8 != -1)
  {
    if (*(_DWORD *)(a1 + 40) != 1)
    {
      a2 = a3;
      a3 = v4;
    }
    v6 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::PushedLabelFilterArc(a1, a2, a3, v8);
    goto LABEL_17;
  }
  v6 = fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(a1, a2, a3);
  v12 = v6;
  v13 = BYTE4(v6);
  if ((_BYTE)v6 == 0xFF)
  {
    LODWORD(v15) = v6 >> 8;
    v14 = 2139095040;
    if (v15 == INFINITY)
    {
      v7 = 0;
      v6 = 0x7F800000FFLL;
      return v7 & 0xFFFFFF0000000000 | v6 & 0xFFFFFFFFFFLL;
    }
  }
  if (*(_BYTE *)(a1 + 76))
  {
    if (*(_DWORD *)(a1 + 40) == 1)
    {
      v9 = v4;
      v10 = v3;
    }
    else
    {
      v9 = v3;
      v10 = v4;
    }
    v6 = fst::PushLabelsComposeFilter<fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::PushLabelFilterArc(a1, v9, v10, &v12);
LABEL_17:
    v7 = v6 & 0xFFFFFF0000000000;
    return v7 & 0xFFFFFF0000000000 | v6 & 0xFFFFFFFFFFLL;
  }
LABEL_3:
  v7 = 0;
  return v7 & 0xFFFFFF0000000000 | v6 & 0xFFFFFFFFFFLL;
}

unint64_t fst::PushWeightsComposeFilter<fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  unsigned __int8 v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  _BYTE *v10;
  float v11;
  float v13;
  float v14;
  float v15;
  int v16;
  float v17;
  float v18;

  v5 = fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(a1, a2, (_DWORD *)a3);
  if (v5 == 0xFF)
  {
    v7 = 2139095040;
    goto LABEL_11;
  }
  v6 = v5;
  if ((*(_BYTE *)(a1 + 72) & 0x40) == 0)
  {
    v7 = 0;
    return v6 | (unint64_t)(v7 << 8);
  }
  v8 = 0.0;
  if (*(_BYTE *)(a1 + 76))
  {
    v9 = 56;
    if (*(_DWORD *)(a1 + 64) == 1)
      v9 = 48;
    v10 = *(_BYTE **)(a1 + v9);
    if (fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::LookAheadCheck(v10))
      v8 = *(float *)(*(_QWORD *)v10 + 8);
  }
  v11 = *(float *)(a1 + 81);
  v7 = 2139095040;
  if (v8 == INFINITY)
  {
LABEL_11:
    v6 = -1;
    return v6 | (unint64_t)(v7 << 8);
  }
  v13 = *(float *)(a3 + 8);
  v14 = NAN;
  if (v13 != -INFINITY && v8 != -INFINITY)
  {
    if (v8 == INFINITY || v13 == INFINITY)
    {
      v14 = INFINITY;
      if ((LODWORD(v11) & 0x7FFFFFFFu) >= 0x7F800000)
        v14 = NAN;
    }
    else
    {
      v15 = v8 + v13;
      v14 = NAN;
      if (v15 != -INFINITY)
      {
        v16 = LODWORD(v11) & 0x7FFFFFFF;
        v14 = NAN;
        v17 = v15 - v11;
        if (v15 == INFINITY)
          v17 = INFINITY;
        if (v16 <= 2139095039)
          v14 = v17;
      }
    }
  }
  *(float *)(a3 + 8) = v14;
  v18 = floorf((float)(v8 * 1024.0) + 0.5) * 0.00097656;
  if ((LODWORD(v8) & 0x7FFFFFFFu) >= 0x7F800000)
    v18 = v8;
  v7 = LODWORD(v18);
  return v6 | (unint64_t)(v7 << 8);
}

uint64_t fst::LookAheadComposeFilter<fst::SequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::FilterArc(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _DWORD *v3;
  int v4;
  unsigned __int8 v5;
  int v6;
  unsigned __int8 v7;
  unsigned __int8 v9;

  v3 = (_DWORD *)a2;
  *(_BYTE *)(a1 + 76) = 0;
  v4 = *(_DWORD *)(a2 + 4);
  if (v4 == -1)
  {
    if (*(_BYTE *)(a1 + 33))
      return 255;
    v9 = *(_BYTE *)(a1 + 34) ^ 1;
  }
  else if (*a3 == -1)
  {
    v6 = *(unsigned __int8 *)(a1 + 32);
    if (*(_BYTE *)(a1 + 32))
      v7 = -1;
    else
      v7 = 0;
    v9 = v7;
    if (v6)
      return 255;
  }
  else
  {
    if (v4)
      v5 = 0;
    else
      v5 = -1;
    v9 = v5;
    if (!v4)
      return 255;
  }
  if (*(_DWORD *)(a1 + 40) != 1)
  {
    a2 = (uint64_t)a3;
    a3 = v3;
  }
  return fst::LookAheadComposeFilter<fst::AltSequenceComposeFilter<fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::LookAheadMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,(fst::MatchType)2>::LookAheadFilterArc(a1, a2, (uint64_t)a3, &v9);
}

_QWORD *fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFst(_QWORD *a1, uint64_t a2, int a3)
{
  _DWORD *v4;
  _DWORD *v5;
  int v6;

  *a1 = &unk_1E5D19270;
  a1[1] = 0;
  v4 = *(_DWORD **)(a2 + 8);
  if (a3)
  {
    v4 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 40))(*(_QWORD *)(a2 + 8));
    v5 = (_DWORD *)a1[1];
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  else
  {
    ++v4[14];
  }
  a1[1] = v4;
  return a1;
}

void sub_1AD822714(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &unk_1E5D268B8;
  v3 = v1[1];
  if (v3)
    fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFst(v3);
  _Unwind_Resume(exception_object);
}

void fst::StateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~StateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Next_(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~CacheStateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Done(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  char *v20;
  unint64_t v21;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68))
    return 0;
  v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
    return 1;
  v6 = v5;
  do
  {
    fst::ArcIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ArcIterator(&v20, *(_QWORD *)(a1 + 8), v6);
    v7 = v21;
    v8 = *((_QWORD *)v20 + 3);
    v9 = *((_QWORD *)v20 + 4) - v8;
    v10 = *(_QWORD *)(a1 + 16);
    if (v21 < v9 >> 4)
    {
      v11 = v9 >> 4;
      v12 = *(_DWORD *)(v10 + 68);
      v13 = (int *)(v8 + 16 * v21 + 12);
      do
      {
        v15 = *v13;
        v13 += 4;
        v14 = v15;
        if (v12 <= v15)
        {
          v12 = v14 + 1;
          *(_DWORD *)(v10 + 68) = v14 + 1;
        }
        ++v7;
      }
      while (v11 != v7);
      v21 = v11;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    v16 = *(_DWORD *)(a1 + 24);
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(_DWORD *)(v17 + 68);
    --*((_DWORD *)v20 + 13);
    v4 = v16 >= v18;
    if (v16 < v18)
      break;
    v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v17);
  }
  while ((int)v6 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68));
  return v4;
}

void sub_1AD8228A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  --*(_DWORD *)(a9 + 52);
  _Unwind_Resume(a1);
}

char **fst::ArcIterator<fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::ArcIterator(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *MutableState;

  v6 = *(_QWORD *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::GetMutableState(*(_QWORD *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 13);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(*(_QWORD *)(a2 + 8), a3) & 1) == 0)(*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 48))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1AD82292C(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(*(_QWORD *)v1 + 52);
  _Unwind_Resume(a1);
}

uint64_t fst::ComposeFstImplBase<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasArcs(a1, a2) & 1) == 0)(*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, a2);
  return fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(a1, a2, a3);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(result + 120);
  if (*(_DWORD *)(v3 + 76) == a2)
    v4 = (uint64_t *)(v3 + 80);
  else
    v4 = (uint64_t *)(*(_QWORD *)(v3 + 8) + 8 * (a2 + 1));
  v5 = *v4;
  v8 = *(_DWORD *)(v5 + 52);
  v6 = (_DWORD *)(v5 + 52);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 7);
  v10 = (*(_QWORD *)(v6 - 5) - v9) >> 4;
  if (*(_QWORD *)(v6 - 5) == v9)
    v9 = 0;
  *a3 = 0;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v6;
  *v6 = v7 + 1;
  return result;
}

void fst::ShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  float *v17;
  float v18;
  float *v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  BOOL v25;
  float v26;
  float v27;
  BOOL v29;
  int v30;
  uint64_t v31;
  int v32;
  _BYTE *v33;
  char *v34;
  _BYTE *v35;
  int64_t v36;
  uint64_t v37;
  int v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  _BYTE v43[12];
  char v44;
  uint64_t v45;
  uint64_t v46;
  void *__p;
  void *v48;
  uint64_t v49;
  float v50;
  void *v51;
  uint64_t v52;

  v8 = *(_QWORD *)(a4 + 24);
  if (v8 == 1 && *(_BYTE *)(a4 + 35) == 0)
  {
    v41 = 0;
    v42 = 0;
    *(_QWORD *)v43 = 0;
    LODWORD(__p) = 0;
    if (fst::SingleShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, (char **)a3, (uint64_t *)a4, &__p, (__n128 **)&v41))fst::SingleShortestPathBacktrace<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v41, __p);
    else
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    if (v41)
    {
      v42 = v41;
      operator delete(v41);
    }
  }
  else if (v8)
  {
    if (*(_BYTE *)(a4 + 33)
      || (fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, (_QWORD *)a3, a4), v10 = *(char **)a3, *(_QWORD *)(a3 + 8) - *(_QWORD *)a3 != 4)|| *(float *)v10 < -INFINITY|| *(float *)v10 > -INFINITY)
    {
      fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::VectorFst(&v51);
      fst::Reverse<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, (uint64_t *)&v51, 1);
      v50 = INFINITY;
      v11 = **(_QWORD **)(v52 + 64);
      v13 = *(_QWORD *)(v11 + 24);
      v12 = *(_QWORD *)(v11 + 32);
      v14 = *(char **)a3;
      if (v12 != v13)
      {
        v15 = (v12 - v13) >> 4;
        v16 = (uint64_t)(*(_QWORD *)(a3 + 8) - (_QWORD)v14) >> 2;
        if (v15 <= 1)
          v15 = 1;
        v17 = (float *)(v13 + 12);
        v18 = INFINITY;
        v19 = (float *)(v13 + 12);
        do
        {
          v20 = *(int *)v19;
          v19 += 4;
          v21 = v20 - 1;
          if (v16 > v20 - 1)
          {
            v22 = *(v17 - 1);
            v23 = NAN;
            if (v22 != -INFINITY)
            {
              v24 = *(float *)&v14[4 * v21];
              v23 = NAN;
              if (v24 != -INFINITY)
              {
                v23 = INFINITY;
                v25 = v24 == INFINITY || v22 == INFINITY;
                v26 = v22 + v24;
                if (!v25)
                  v23 = v26;
              }
            }
            if (v18 >= v23)
              v27 = v23;
            else
              v27 = v18;
            v29 = v18 == -INFINITY || v23 == -INFINITY;
            v18 = NAN;
            if (!v29)
              v18 = v27;
            v50 = v18;
          }
          v17 = v19;
          --v15;
        }
        while (v15);
      }
      std::vector<fst::TropicalWeightTpl<float>>::insert(a3, v14, (int *)&v50);
      if (*(_BYTE *)(a4 + 32))
      {
        __p = 0;
        v48 = 0;
        v49 = 0;
        v30 = *(_DWORD *)(a4 + 16);
        LOBYTE(v41) = FLAGS_fst_default_cache_gc;
        v42 = (void *)FLAGS_fst_default_cache_gc_limit;
        *(_DWORD *)v43 = v30;
        *(_QWORD *)&v43[4] = 0;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::IntegerFilterState<signed char>>>(&v39, (uint64_t)&v51, a3, (uint64_t)&__p, (uint64_t)&v41);
        fst::NShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)&v39, a2, (uint64_t *)&__p, v8, *(_DWORD *)(a4 + 40), *(unsigned __int8 *)(a4 + 35), *(float *)(a4 + 16), *(float *)(a4 + 36));
        v39 = &unk_1E5D27268;
        v31 = v40;
        if (v40)
        {
          v32 = *(_DWORD *)(v40 + 56) - 1;
          *(_DWORD *)(v40 + 56) = v32;
          if (!v32)
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        }
        if (__p)
        {
          v48 = __p;
          operator delete(__p);
        }
      }
      else
      {
        fst::NShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)&v51, a2, (uint64_t *)a3, v8, *(_DWORD *)(a4 + 40), *(unsigned __int8 *)(a4 + 35), *(float *)(a4 + 16), *(float *)(a4 + 36));
      }
      v34 = *(char **)a3;
      v33 = *(_BYTE **)(a3 + 8);
      v35 = (_BYTE *)(*(_QWORD *)a3 + 4);
      v36 = v33 - v35;
      if (v33 != v35)
        memmove(*(void **)a3, v35, v33 - v35);
      *(_QWORD *)(a3 + 8) = &v34[v36];
      v51 = &unk_1E5D24B80;
      v37 = v52;
      if (v52)
      {
        v38 = *(_DWORD *)(v52 + 56) - 1;
        *(_DWORD *)(v52 + 56) = v38;
        if (!v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    }
  }
}

void sub_1AD822D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;
  _DWORD *v20;
  int v21;

  *(_QWORD *)(v18 - 64) = &unk_1E5D24B80;
  v20 = *(_DWORD **)(v18 - 56);
  if (v20)
  {
    v21 = v20[14] - 1;
    v20[14] = v21;
    if (!v21)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int *v9;
  int *v10;
  int *v11;
  int v12;
  int *v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  fst *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  fst *v26;
  _QWORD *v27;
  uint64_t v28;
  fst *v29;
  _QWORD *v30;
  uint64_t v31;
  fst *v32;
  _QWORD *v33;
  uint64_t v34;
  fst *v35;
  _QWORD *v36;
  fst *v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  fst *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  fst *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  fst *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  fst *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  void *__p[2];
  char v59;
  char v60;
  __int16 v61;
  void *v62[3];
  uint64_t v63[2];
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;

  *(_DWORD *)(a1 + 8) = 7;
  *(_BYTE *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v6 = (_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = &unk_1E5D239D8;
  v7 = (_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v8 & 0x4000000000) != 0 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) == -1)
  {
    v21 = operator new();
    *(_DWORD *)(v21 + 8) = 5;
    *(_BYTE *)(v21 + 12) = 0;
    *(_QWORD *)v21 = &unk_1E5D1EEB0;
    *(_QWORD *)(v21 + 16) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v21 + 32) = 0;
    *(_QWORD *)(v21 + 40) = 0;
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(a1 + 16) = v21;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v63, "INFO");
    v22 = fst::LogMessage::LogMessage((fst *)v62, (uint64_t)v63);
    v23 = (_QWORD *)fst::cerr(v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"AutoQueue: using state-order discipline", 39);
  }
  else if ((v8 & 0x800000000) != 0)
  {
    v25 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v25, a2);
    *(_QWORD *)(a1 + 16) = v25;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v63, "INFO");
    v26 = fst::LogMessage::LogMessage((fst *)v62, (uint64_t)v63);
    v27 = (_QWORD *)fst::cerr(v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"AutoQueue: using top-order discipline", 37);
  }
  else
  {
    if ((v8 & 0x200000000) == 0)
    {
      v66 = 0;
      v63[0] = (uint64_t)v7;
      v63[1] = 0;
      v64 = 0;
      v65 = &v66;
      fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, v63, 0);
      v9 = *(int **)(a1 + 48);
      v10 = *(int **)(a1 + 56);
      if (v9 != v10)
      {
        v11 = v9 + 1;
        if (v9 + 1 != v10)
        {
          v12 = *v9;
          v13 = v9 + 1;
          do
          {
            v15 = *v13++;
            v14 = v15;
            v16 = v12 < v15;
            if (v12 <= v15)
              v12 = v14;
            if (v16)
              v9 = v11;
            v11 = v13;
          }
          while (v13 != v10);
        }
      }
      v17 = *v9;
      v18 = *v9 + 1;
      std::vector<fst::QueueType>::vector(v62, v18);
      if (a3)
      {
        v19 = operator new();
        v20 = (_QWORD *)operator new();
        *v20 = a3;
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
      v61 = 0;
      fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NaturalLess<fst::TropicalWeightTpl<float>>>(a2, v7, (uint64_t)v62, v19, &v61, (_BYTE *)&v61 + 1);
      if (HIBYTE(v61))
      {
        v31 = operator new();
        *(_DWORD *)(v31 + 8) = 2;
        *(_BYTE *)(v31 + 12) = 0;
        *(_OWORD *)(v31 + 16) = 0u;
        *(_OWORD *)(v31 + 32) = 0u;
        *(_OWORD *)(v31 + 48) = 0u;
        *(_QWORD *)v31 = &unk_1E5D27B60;
        *(_QWORD *)(a1 + 16) = v31;
        if (FLAGS_v < 2)
          goto LABEL_52;
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v32 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
        v33 = (_QWORD *)fst::cerr(v32);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_30:
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v60);
        if (v59 < 0)
          operator delete(__p[0]);
LABEL_52:
        if (v20)
          MEMORY[0x1AF44D190](v20, 0x60C40B37CB4BBLL);
        if (v19)
          MEMORY[0x1AF44D190](v19, 0xC400A2AC0F1);
        v24 = v62[0];
        if (v62[0])
        {
          v62[1] = v62[0];
          goto LABEL_58;
        }
        return a1;
      }
      if ((_BYTE)v61)
      {
        v34 = operator new();
        fst::TopOrderQueue<int>::TopOrderQueue(v34, (uint64_t)v7);
        *(_QWORD *)(a1 + 16) = v34;
        if (FLAGS_v < 2)
          goto LABEL_52;
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v35 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
        v36 = (_QWORD *)fst::cerr(v35);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"AutoQueue: using top-order discipline", 37);
        goto LABEL_30;
      }
      if (FLAGS_v >= 2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v37 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
        v38 = (_QWORD *)fst::cerr(v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"AutoQueue: using SCC meta-discipline", 36);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v60);
        if (v59 < 0)
          operator delete(__p[0]);
      }
      std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v6, v18);
      if (v17 < 0)
      {
LABEL_51:
        v56 = operator new();
        *(_DWORD *)(v56 + 8) = 6;
        *(_BYTE *)(v56 + 12) = 0;
        *(_QWORD *)v56 = &unk_1E5D22CF0;
        *(_QWORD *)(v56 + 16) = v6;
        *(_QWORD *)(v56 + 24) = v7;
        *(_QWORD *)(v56 + 32) = 0xFFFFFFFF00000000;
        *(_QWORD *)(v56 + 48) = 0;
        *(_QWORD *)(v56 + 56) = 0;
        *(_QWORD *)(v56 + 40) = 0;
        *(_QWORD *)(a1 + 16) = v56;
        goto LABEL_52;
      }
      v39 = 0;
      while (1)
      {
        v40 = *((_DWORD *)v62[0] + v39);
        if (v40 == 3)
        {
          v44 = operator new();
          *(_DWORD *)(v44 + 8) = 3;
          *(_BYTE *)(v44 + 12) = 0;
          *(_QWORD *)v44 = &unk_1E5D21710;
          *(_OWORD *)(v44 + 16) = *(_OWORD *)v20;
          *(_OWORD *)(v44 + 32) = 0u;
          *(_OWORD *)(v44 + 48) = 0u;
          *(_OWORD *)(v44 + 64) = 0u;
          *(_OWORD *)(v44 + 80) = 0u;
          *(_OWORD *)(v44 + 92) = 0u;
          *(_QWORD *)(v44 + 120) = 0;
          *(_QWORD *)(v44 + 128) = 0;
          *(_QWORD *)(v44 + 112) = 0;
          *(_QWORD *)(*v6 + 8 * v39) = v44;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v45 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v46 = (_QWORD *)fst::cerr(v45);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"AutoQueue: SCC #", 16);
            v47 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": using shortest-first discipline", 33);
            goto LABEL_48;
          }
        }
        else if (v40 == 2)
        {
          v48 = operator new();
          *(_DWORD *)(v48 + 8) = 2;
          *(_BYTE *)(v48 + 12) = 0;
          *(_OWORD *)(v48 + 16) = 0u;
          *(_OWORD *)(v48 + 32) = 0u;
          *(_OWORD *)(v48 + 48) = 0u;
          *(_QWORD *)v48 = &unk_1E5D27B60;
          *(_QWORD *)(*v6 + 8 * v39) = v48;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v49 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v50 = (_QWORD *)fst::cerr(v49);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"AutoQueue: SCC #", 16);
            v51 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)": using LIFO disciplle", 22);
            goto LABEL_48;
          }
        }
        else if (v40)
        {
          v52 = operator new();
          *(_DWORD *)(v52 + 8) = 1;
          *(_BYTE *)(v52 + 12) = 0;
          *(_OWORD *)(v52 + 16) = 0u;
          *(_OWORD *)(v52 + 32) = 0u;
          *(_OWORD *)(v52 + 48) = 0u;
          *(_QWORD *)v52 = &unk_1E5D23A28;
          *(_QWORD *)(*v6 + 8 * v39) = v52;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v53 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v54 = (_QWORD *)fst::cerr(v53);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"AutoQueue: SCC #", 16);
            v55 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)": using FIFO disciplle", 22);
LABEL_48:
            fst::LogMessage::~LogMessage((fst::LogMessage *)&v60);
            if (v59 < 0)
              operator delete(__p[0]);
          }
        }
        else
        {
          *(_QWORD *)(*v6 + 8 * v39) = 0;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v41 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v42 = (_QWORD *)fst::cerr(v41);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"AutoQueue: SCC #", 16);
            v43 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": using trivial discipline", 26);
            goto LABEL_48;
          }
        }
        if (v18 == ++v39)
          goto LABEL_51;
      }
    }
    v28 = operator new();
    *(_DWORD *)(v28 + 8) = 2;
    *(_BYTE *)(v28 + 12) = 0;
    *(_OWORD *)(v28 + 16) = 0u;
    *(_OWORD *)(v28 + 32) = 0u;
    *(_OWORD *)(v28 + 48) = 0u;
    *(_QWORD *)v28 = &unk_1E5D27B60;
    *(_QWORD *)(a1 + 16) = v28;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v63, "INFO");
    v29 = fst::LogMessage::LogMessage((fst *)v62, (uint64_t)v63);
    v30 = (_QWORD *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"AutoQueue: using LIFO discipline", 32);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)v62);
  if (SHIBYTE(v64) < 0)
  {
    v24 = (void *)v63[0];
LABEL_58:
    operator delete(v24);
  }
  return a1;
}

void sub_1AD823618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, int a17, char a18, char a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  void **v29;
  void **v30;
  void *v32;
  void *v33;

  if (a16 < 0)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  v32 = *v30;
  if (*v30)
  {
    *(_QWORD *)(v28 + 56) = v32;
    operator delete(v32);
  }
  v33 = *v29;
  if (*v29)
  {
    *(_QWORD *)(v28 + 32) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::NaturalLess<fst::TropicalWeightTpl<float>>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _BYTE *a5, _BYTE *a6)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  float *v19;
  int v20;
  float v21;
  float v22;
  _QWORD v25[3];
  _DWORD *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  float v32;

  *a5 = 1;
  *a6 = 1;
  v10 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v10)
  {
    v11 = v10 >> 2;
    if (v11 <= 1)
      v11 = 1;
    bzero(*(void **)a3, 4 * v11);
  }
  v30 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v28);
  while (1)
  {
    result = v28;
    if (!v28)
    {
      if ((int)v30 >= v29)
        return result;
LABEL_11:
      v14 = v30;
      goto LABEL_12;
    }
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
    result = v28;
    if (v13)
      break;
    if (!v28)
      goto LABEL_11;
    v14 = (*(uint64_t (**)(void))(*(_QWORD *)v28 + 24))();
LABEL_12:
    v27 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v14, v25);
    v15 = (int)v14;
    while (1)
    {
      if (!v25[0])
      {
        if (v27 >= v25[2])
          goto LABEL_38;
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v25[0] + 24))(v25[0]))
        break;
      if (v25[0])
      {
        v16 = (*(uint64_t (**)(void))(*(_QWORD *)v25[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      v16 = v25[1] + 16 * v27;
LABEL_19:
      v17 = *(int *)(*a2 + 4 * v15);
      if ((_DWORD)v17 == *(_DWORD *)(*a2 + 4 * *(int *)(v16 + 12)))
      {
        v18 = *(_DWORD **)a3;
        if (!a4
          || (v19 = (float *)(v16 + 8),
              v32 = 0.0,
              fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(a4, (float *)(v16 + 8), &v32)))
        {
          v20 = 1;
          goto LABEL_23;
        }
        if ((v18[v17] | 2) == 2)
        {
          v32 = 0.0;
          v22 = *v19;
          v32 = *v19;
          v31 = 2139095040;
          if (v32 == INFINITY || (v32 = v22, v31 = 0, v22 == 0.0))
            v20 = 2;
          else
            v20 = 3;
LABEL_23:
          v18[v17] = v20;
        }
        *a5 = 0;
      }
      v32 = 0.0;
      v21 = *(float *)(v16 + 8);
      v32 = v21;
      v31 = 2139095040;
      if (v21 != INFINITY)
      {
        v32 = v21;
        v31 = 0;
        if (v21 != 0.0)
          *a6 = 0;
      }
      if (v25[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v25[0] + 40))(v25[0]);
      else
        ++v27;
    }
    if (v25[0])
    {
      (*(void (**)(void))(*(_QWORD *)v25[0] + 8))();
      goto LABEL_40;
    }
LABEL_38:
    if (v26)
      --*v26;
LABEL_40:
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
    else
      ++v30;
  }
  if (v28)
    return (*(uint64_t (**)(void))(*(_QWORD *)v28 + 8))();
  return result;
}

void sub_1AD823A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  _Unwind_Resume(exception_object);
}

uint64_t fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2)
{
  std::vector<int> *v3;
  fst *v4;
  _QWORD *v5;
  void *__p[2];
  char v8;
  char v9;
  _QWORD v10[3];
  char v11;

  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &unk_1E5D1CC68;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 24) = 0u;
  v3 = (std::vector<int> *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v11 = 0;
  v10[0] = a1 + 24;
  v10[1] = &v11;
  fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, (uint64_t)v10, 0);
  if (!v11)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v9, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"TopOrderQueue: fst is not acyclic.", 34);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v9);
    if (v8 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 12) = 1;
  }
  std::vector<int>::resize(v3, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2, &fst::kNoStateId);
  return a1;
}

void sub_1AD823BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  void **v19;
  void **v20;
  void *v22;
  void *v23;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  v22 = *v19;
  if (*v19)
  {
    *(_QWORD *)(v18 + 56) = v22;
    operator delete(v22);
  }
  v23 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::vector<char>::pointer begin;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v33;
  std::vector<char>::pointer end;
  char *v35;
  std::vector<char>::pointer v36;
  int64_t v37;
  int64_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  char v46;
  uint64_t v47;
  int v48;
  std::vector<char>::value_type v49[8];
  std::vector<char>::value_type __x[8];
  int v51;
  int v52;
  void *v53;
  _QWORD v54[6];
  _QWORD *v55;
  _OWORD v56[2];
  __int128 v57;
  std::vector<char> v58;

  v6 = (_QWORD *)operator new();
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  *(_QWORD *)(a2 + 16) = v6;
  **(_BYTE **)(a2 + 8) = 1;
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v48 == -1)
  {
    fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
    return;
  }
  memset(&v58, 0, sizeof(v58));
  v57 = 0u;
  memset(v56, 0, sizeof(v56));
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MemoryPool(&v53, 64);
  v47 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v47)
    v7 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v7 = (v48 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v7 <= (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v7 < (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
      v58.__end_ = &v58.__begin_[(int)v7];
  }
  else
  {
    std::vector<char>::__append(&v58, (int)v7 - (unint64_t)(v58.__end_ - v58.__begin_), __x);
  }
  v52 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v48 >= (int)v7)
    goto LABEL_102;
  v8 = v48;
  v46 = a3;
  do
  {
    v58.__begin_[(int)v8] = 1;
    v9 = (uint64_t)v55;
    if (v55)
    {
      v55 = (_QWORD *)v55[6];
    }
    else
    {
      v9 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
      *(_QWORD *)(v9 + 48) = 0;
    }
    *(_DWORD *)v9 = v8;
    *(_QWORD *)(v9 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v8, v9 + 8);
    *(_QWORD *)v49 = v9;
    std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::push_back(v56, v49);
    v10 = *((_QWORD *)&v57 + 1);
    if (!*((_QWORD *)&v57 + 1))
    {
      v11 = 1;
      if ((a3 & 1) != 0)
        break;
      goto LABEL_62;
    }
    v11 = 1;
    do
    {
      v12 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                   + (((unint64_t)(v10 + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v10 + v57 - 1) & 0x1FF));
      v13 = *(int *)v12;
      v14 = v58.__end_ - v58.__begin_;
      if (v58.__end_ - v58.__begin_ <= v13)
      {
        v7 = v13 + 1;
        v49[0] = 0;
        if (v13 + 1 <= v14)
        {
          if (v13 + 1 < v14)
            v58.__end_ = &v58.__begin_[v7];
        }
        else
        {
          std::vector<char>::__append(&v58, v13 + 1 - v14, v49);
        }
      }
      if ((v11 & 1) != 0)
      {
        v15 = v12[1];
        if (v15)
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
          {
            v16 = v12[1];
            if (v16)
              v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
            else
LABEL_28:
              v17 = v12[2] + 16 * v12[5];
            v18 = *(int *)(v17 + 12);
            begin = v58.__begin_;
            v20 = v58.__end_ - v58.__begin_;
            if (v58.__end_ - v58.__begin_ <= v18)
            {
              v7 = (v18 + 1);
              v49[0] = 0;
              if ((int)v7 <= v20)
              {
                if ((int)v7 < v20)
                  v58.__end_ = &v58.__begin_[(int)v7];
              }
              else
              {
                std::vector<char>::__append(&v58, (int)v7 - v20, v49);
                v18 = *(int *)(v17 + 12);
                begin = v58.__begin_;
              }
            }
            v26 = begin[v18];
            if (v26 == 1)
            {
              **(_BYTE **)(a2 + 8) = 0;
              v28 = v12[1];
              if (v28)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
                v11 = 0;
              }
              else
              {
                v11 = 0;
                ++v12[5];
              }
            }
            else
            {
              if (v26 == 2)
              {
                v27 = v12[1];
                if (v27)
                  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
                else
                  ++v12[5];
              }
              else
              {
                begin[v18] = 1;
                v29 = (uint64_t)v55;
                if (v55)
                {
                  v55 = (_QWORD *)v55[6];
                }
                else
                {
                  v29 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
                  *(_QWORD *)(v29 + 48) = 0;
                }
                *(_DWORD *)v29 = *(_DWORD *)(v17 + 12);
                *(_QWORD *)(v29 + 40) = 0;
                (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
                *(_QWORD *)v49 = v29;
                std::deque<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::push_back(v56, v49);
              }
              v11 = 1;
            }
            goto LABEL_58;
          }
        }
        else if (v12[5] < v12[3])
        {
          goto LABEL_28;
        }
      }
      v58.__begin_[v13] = 2;
      v21 = v12[1];
      if (v21)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
      else
      {
        v22 = (_DWORD *)v12[4];
        if (v22)
          --*v22;
      }
      v12[6] = v55;
      v55 = v12;
      --*((_QWORD *)&v57 + 1);
      std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v56, 1);
      if (*((_QWORD *)&v57 + 1))
      {
        v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v57 + 1) + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v57 + 1) + v57 - 1) & 0x1FF));
        v24 = *(_QWORD *)(v23 + 8);
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
        v25 = *(_QWORD *)(v23 + 8);
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        else
          ++*(_QWORD *)(v23 + 40);
      }
      else
      {
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
      }
LABEL_58:
      v10 = *((_QWORD *)&v57 + 1);
    }
    while (*((_QWORD *)&v57 + 1));
    if ((a3 & 1) != 0)
      break;
LABEL_62:
    if ((_DWORD)v8 == v48)
      v8 = 0;
    else
      v8 = (v8 + 1);
    if ((int)v8 < (int)v7)
    {
      v30 = &v58.__begin_[(int)v8];
      v31 = (int)v7 - (uint64_t)(int)v8;
      while (*v30++)
      {
        v8 = (v8 + 1);
        if (!--v31)
        {
          v8 = v7;
          break;
        }
      }
    }
    if (v47 || (_DWORD)v8 != (_DWORD)v7)
      continue;
LABEL_72:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_78;
      }
    }
    else if (v52 >= v51)
    {
      continue;
    }
    v33 = v52;
LABEL_78:
    if (v33 != (_DWORD)v7)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v52;
      goto LABEL_72;
    }
    end = v58.__end_;
    if (v58.__end_ >= v58.__end_cap_.__value_)
    {
      v36 = v58.__begin_;
      v37 = v58.__end_ - v58.__begin_;
      v38 = v58.__end_ - v58.__begin_ + 1;
      if (v38 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v39 = v58.__end_cap_.__value_ - v58.__begin_;
      if (2 * (v58.__end_cap_.__value_ - v58.__begin_) > (unint64_t)v38)
        v38 = 2 * v39;
      if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
        v40 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
        v41 = (char *)operator new(v40);
      else
        v41 = 0;
      v42 = &v41[v37];
      v43 = &v41[v37];
      *v43 = 0;
      v35 = v43 + 1;
      if (end != v36)
      {
        v44 = &end[~(unint64_t)v36];
        do
        {
          v45 = *--end;
          (v44--)[(_QWORD)v41] = v45;
        }
        while (end != v36);
        end = v58.__begin_;
        v42 = v41;
      }
      v58.__begin_ = v42;
      v58.__end_ = v35;
      v58.__end_cap_.__value_ = &v41[v40];
      if (end)
        operator delete(end);
    }
    else
    {
      *v58.__end_ = 0;
      v35 = end + 1;
    }
    v58.__end_ = v35;
    v7 = (v7 + 1);
    a3 = v46;
  }
  while ((v11 & 1) != 0 && (int)v8 < (int)v7);
LABEL_102:
  fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v53 = &unk_1E5D198C8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::~MemoryArena(v54);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v53);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v56);
  if (v58.__begin_)
  {
    v58.__end_ = v58.__begin_;
    operator delete(v58.__begin_);
  }
}

void sub_1AD82431C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D198C8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

BOOL fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(uint64_t a1, float *a2, float *a3)
{
  float v3;
  float v4;

  v3 = *a2;
  v4 = NAN;
  if (*a2 != -INFINITY)
  {
    v4 = NAN;
    if (*a3 != -INFINITY)
    {
      if (v3 >= *a3)
        v4 = *a3;
      else
        v4 = *a2;
    }
  }
  return v4 == v3 && v3 != *a3;
}

_QWORD *fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::~ShortestFirstQueue(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E5D21710;
  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::~Heap(a1 + 2);
  return a1;
}

void fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::~ShortestFirstQueue(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E5D21710;
  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::~Heap(a1 + 2);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Head_(uint64_t a1)
{
  return **(unsigned int **)(a1 + 80);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Enqueue_(uint64_t a1, int a2)
{
  int v3;

  v3 = a2;
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Insert(a1 + 16, &v3);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Dequeue_(uint64_t a1)
{
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Pop(a1 + 16);
}

BOOL fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Empty_(uint64_t a1)
{
  return *(_DWORD *)(a1 + 104) == 0;
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Clear_(uint64_t result)
{
  *(_DWORD *)(result + 104) = 0;
  return result;
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Insert(uint64_t a1, int *a2)
{
  int *v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  int *v15;
  char *v16;
  int v17;
  unint64_t v18;
  char *v19;
  _DWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  int v41;
  int v42;

  v5 = a1 + 64;
  v4 = *(int **)(a1 + 64);
  v6 = *(int *)(v5 + 24);
  v7 = *(int **)(v5 + 8);
  v8 = v7 - v4;
  if (v8 <= v6)
  {
    v9 = *(_QWORD *)(a1 + 80);
    if ((unint64_t)v7 >= v9)
    {
      if ((v8 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v11 = v9 - (_QWORD)v4;
      v12 = (uint64_t)(v9 - (_QWORD)v4) >> 1;
      if (v12 <= v8 + 1)
        v12 = v8 + 1;
      if (v11 >= 0x7FFFFFFFFFFFFFFCLL)
        v13 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 80, v13);
        v4 = *(int **)(a1 + 64);
        v7 = *(int **)(a1 + 72);
      }
      else
      {
        v14 = 0;
      }
      v15 = (int *)&v14[4 * v8];
      v16 = &v14[4 * v13];
      *v15 = *a2;
      v10 = v15 + 1;
      while (v7 != v4)
      {
        v17 = *--v7;
        *--v15 = v17;
      }
      *(_QWORD *)(a1 + 64) = v15;
      *(_QWORD *)(a1 + 72) = v10;
      *(_QWORD *)(a1 + 80) = v16;
      if (v4)
        operator delete(v4);
    }
    else
    {
      *v7 = *a2;
      v10 = v7 + 1;
    }
    v18 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 72) = v10;
    v19 = *(char **)(a1 + 24);
    if ((unint64_t)v19 >= v18)
    {
      v21 = *(char **)(a1 + 16);
      v22 = (v19 - v21) >> 2;
      if ((unint64_t)(v22 + 1) >> 62)
        goto LABEL_53;
      v23 = v18 - (_QWORD)v21;
      v24 = (uint64_t)(v18 - (_QWORD)v21) >> 1;
      if (v24 <= v22 + 1)
        v24 = v22 + 1;
      if (v23 >= 0x7FFFFFFFFFFFFFFCLL)
        v25 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      if (v25)
      {
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 32, v25);
        v21 = *(char **)(a1 + 16);
        v19 = *(char **)(a1 + 24);
      }
      else
      {
        v26 = 0;
      }
      v27 = &v26[4 * v22];
      v28 = &v26[4 * v25];
      *(_DWORD *)v27 = *(_DWORD *)(a1 + 88);
      v20 = v27 + 4;
      while (v19 != v21)
      {
        v29 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *((_DWORD *)v27 - 1) = v29;
        v27 -= 4;
      }
      *(_QWORD *)(a1 + 16) = v27;
      *(_QWORD *)(a1 + 24) = v20;
      *(_QWORD *)(a1 + 32) = v28;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_DWORD *)v19 = *(_DWORD *)(a1 + 88);
      v20 = v19 + 4;
    }
    v30 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 24) = v20;
    v31 = *(char **)(a1 + 48);
    if ((unint64_t)v31 < v30)
    {
      *(_DWORD *)v31 = *(_DWORD *)(a1 + 88);
      v32 = v31 + 4;
LABEL_51:
      *(_QWORD *)(a1 + 48) = v32;
      goto LABEL_52;
    }
    v33 = *(char **)(a1 + 40);
    v34 = (v31 - v33) >> 2;
    if (!((unint64_t)(v34 + 1) >> 62))
    {
      v35 = v30 - (_QWORD)v33;
      v36 = (uint64_t)(v30 - (_QWORD)v33) >> 1;
      if (v36 <= v34 + 1)
        v36 = v34 + 1;
      if (v35 >= 0x7FFFFFFFFFFFFFFCLL)
        v37 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v37 = v36;
      if (v37)
      {
        v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v37);
        v33 = *(char **)(a1 + 40);
        v31 = *(char **)(a1 + 48);
      }
      else
      {
        v38 = 0;
      }
      v39 = &v38[4 * v34];
      v40 = &v38[4 * v37];
      *(_DWORD *)v39 = *(_DWORD *)(a1 + 88);
      v32 = v39 + 4;
      while (v31 != v33)
      {
        v41 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v39 - 1) = v41;
        v39 -= 4;
      }
      *(_QWORD *)(a1 + 40) = v39;
      *(_QWORD *)(a1 + 48) = v32;
      *(_QWORD *)(a1 + 56) = v40;
      if (v33)
        operator delete(v33);
      goto LABEL_51;
    }
LABEL_53:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  v4[v6] = *a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * *(int *)(*(_QWORD *)(a1 + 40) + 4 * *(int *)(a1 + 88))) = *(_DWORD *)(a1 + 88);
LABEL_52:
  v42 = *(_DWORD *)(a1 + 88);
  *(_DWORD *)(a1 + 88) = v42 + 1;
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Insert(a1, a2, v42);
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Insert(uint64_t a1, int *a2, int a3)
{
  unsigned int v3;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = a3;
  if (a3 >= 1)
  {
    v6 = *(_QWORD *)(a1 + 64);
    while (1)
    {
      v7 = v3 - 1;
      v8 = (v3 - 1) >> 1;
      if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(a1 + 8, (float *)(**(_QWORD **)a1 + 4 * *(int *)(v6 + 4 * v8)), (float *)(**(_QWORD **)a1 + 4 * *a2)))
      {
        break;
      }
      v9 = *(_QWORD *)(a1 + 40);
      v10 = *(int *)(v9 + 4 * v3);
      v11 = *(int *)(v9 + 4 * v8);
      *(_DWORD *)(v9 + 4 * v3) = v11;
      v12 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)(v12 + 4 * v11) = v3;
      *(_DWORD *)(v9 + 4 * v8) = v10;
      *(_DWORD *)(v12 + 4 * v10) = v8;
      v6 = *(_QWORD *)(a1 + 64);
      LODWORD(v10) = *(_DWORD *)(v6 + 4 * v3);
      *(_DWORD *)(v6 + 4 * v3) = *(_DWORD *)(v6 + 4 * v8);
      *(_DWORD *)(v6 + 4 * v8) = v10;
      v3 = v7 >> 1;
      if (v7 <= 1)
        return *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * (int)v8);
    }
  }
  LODWORD(v8) = v3;
  return *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * (int)v8);
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Pop(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_DWORD **)(a1 + 64);
  v2 = *v1;
  v3 = *(int *)(a1 + 88) - 1;
  v4 = *(int **)(a1 + 40);
  v5 = *v4;
  v6 = v4[v3];
  *v4 = v6;
  v7 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(v7 + 4 * v6) = 0;
  v4[v3] = v5;
  *(_DWORD *)(v7 + 4 * v5) = v3;
  LODWORD(v4) = *v1;
  *v1 = v1[v3];
  v1[v3] = (_DWORD)v4;
  --*(_DWORD *)(a1 + 88);
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Heapify(a1, 0);
  return v2;
}

BOOL fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::TropicalWeightTpl<float>>>,false>::Heapify(_BOOL8 result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  v4 = result + 8;
  while (1)
  {
    v5 = (2 * (_DWORD)a2) | 1u;
    if ((int)v5 >= *(_DWORD *)(v3 + 88)
      || !(result = fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(v4, (float *)(**(_QWORD **)v3 + 4 * *(int *)(*(_QWORD *)(v3 + 64) + 4 * (int)v5)), (float *)(**(_QWORD **)v3 + 4 * *(int *)(*(_QWORD *)(v3 + 64) + 4 * (int)a2)))))
    {
      v5 = a2;
    }
    v6 = 2 * a2 + 2;
    if ((signed int)v6 < *(_DWORD *)(v3 + 88))
    {
      result = fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()(v4, (float *)(**(_QWORD **)v3 + 4 * *(int *)(*(_QWORD *)(v3 + 64) + 4 * (int)v6)), (float *)(**(_QWORD **)v3 + 4 * *(int *)(*(_QWORD *)(v3 + 64) + 4 * (int)v5)));
      if (result)
        v5 = v6;
      else
        v5 = v5;
    }
    if ((_DWORD)v5 == (_DWORD)a2)
      break;
    v7 = *(_QWORD *)(v3 + 40);
    v8 = *(int *)(v7 + 4 * (int)a2);
    v9 = *(int *)(v7 + 4 * (int)v5);
    *(_DWORD *)(v7 + 4 * (int)a2) = v9;
    v10 = *(_QWORD *)(v3 + 16);
    *(_DWORD *)(v10 + 4 * v9) = a2;
    *(_DWORD *)(v7 + 4 * (int)v5) = v8;
    *(_DWORD *)(v10 + 4 * v8) = v5;
    v11 = *(_QWORD *)(v3 + 64);
    LODWORD(v8) = *(_DWORD *)(v11 + 4 * (int)a2);
    *(_DWORD *)(v11 + 4 * (int)a2) = *(_DWORD *)(v11 + 4 * (int)v5);
    *(_DWORD *)(v11 + 4 * (int)v5) = v8;
    a2 = v5;
  }
  return result;
}

uint64_t fst::SingleShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, char **a2, uint64_t *a3, _DWORD *a4, __n128 **a5)
{
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  char *v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  int v23;
  unint64_t v24;
  __n128 *v25;
  char *v26;
  __n128 *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  __n128 *v34;
  unint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  fst *v39;
  _QWORD *v40;
  fst *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  int v52;
  unint64_t v53;
  __n128 *v54;
  char *v55;
  __n128 *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  __n128 *v62;
  char *v63;
  float v64;
  float v65;
  float v66;
  float v67;
  BOOL v68;
  float v69;
  float v70;
  char v73;
  void *v74;
  float *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  int v84;
  unint64_t v85;
  __n128 *v86;
  char *v87;
  __n128 *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  unint64_t v98;
  unint64_t v99;
  float v100;
  float v101;
  BOOL v102;
  float v103;
  float v104;
  float v105;
  BOOL v107;
  float v108;
  float v109;
  float v110;
  BOOL v112;
  float v113;
  int v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v120;
  uint64_t v123;
  uint64_t v124;
  void *__p[2];
  unint64_t v126;
  _DWORD *v127;
  unint64_t v128;
  void *v129[3];
  float v130;
  float v131;

  a5[1] = *a5;
  *a4 = -1;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) == -1)
    return 1;
  memset(v129, 0, sizeof(v129));
  v8 = *a3;
  v9 = *((unsigned int *)a3 + 3);
  if ((_DWORD)v9 == -1)
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  a2[1] = *a2;
  (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 16) + 56))(*(_QWORD *)(v8 + 16));
  if (a3[3] != 1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v39 = fst::LogMessage::LogMessage((fst *)&v131, (uint64_t)__p);
    v40 = (_QWORD *)fst::cerr(v39);
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"SingleShortestPath: for nshortest > 1, use ShortestPath", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" instead", 8);
LABEL_61:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v131);
    if (SHIBYTE(v126) < 0)
      operator delete(__p[0]);
    goto LABEL_198;
  }
  LODWORD(__p[0]) = 0;
  LODWORD(__p[0]) = *((_DWORD *)a3 + 9);
  v131 = INFINITY;
  v10.n128_u32[0] = (unsigned __int32)__p[0];
  if (*(float *)__p != INFINITY || *((_DWORD *)a3 + 10) != -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v41 = fst::LogMessage::LogMessage((fst *)&v131, (uint64_t)__p);
    v42 = (_QWORD *)fst::cerr(v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"SingleShortestPath: weight and state thresholds not applicable", 62);
    goto LABEL_61;
  }
  v123 = v8;
  v120 = a3;
  v11 = *a2;
  v12 = a2[1];
  v13 = (v12 - *a2) >> 2;
  if (v13 < (int)v9)
  {
    v14 = a2 + 2;
    do
    {
      if ((unint64_t)v12 >= *v14)
      {
        if ((v13 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v16 = *v14 - (_QWORD)v11;
        v17 = v16 >> 1;
        if (v16 >> 1 <= v13 + 1)
          v17 = v13 + 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v18 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18)
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v18);
        else
          v19 = 0;
        v20 = &v19[4 * v13];
        *(_DWORD *)v20 = 2139095040;
        v15 = v20 + 4;
        v22 = *a2;
        v21 = a2[1];
        if (v21 != *a2)
        {
          do
          {
            v23 = *((_DWORD *)v21 - 1);
            v21 -= 4;
            *((_DWORD *)v20 - 1) = v23;
            v20 -= 4;
          }
          while (v21 != v22);
          v21 = *a2;
        }
        *a2 = v20;
        a2[1] = v15;
        a2[2] = &v19[4 * v18];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *(_DWORD *)v12 = 2139095040;
        v15 = v12 + 4;
      }
      a2[1] = v15;
      LOBYTE(__p[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)v129, __p);
      v25 = a5[1];
      v24 = (unint64_t)a5[2];
      if ((unint64_t)v25 >= v24)
      {
        v27 = *a5;
        v28 = v25 - *a5;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v30 = v24 - (_QWORD)v27;
        if (v30 >> 3 > v29)
          v29 = v30 >> 3;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
          v31 = 0xFFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v31);
          v27 = *a5;
          v25 = a5[1];
        }
        else
        {
          v32 = 0;
        }
        v33 = &v32[16 * v28];
        *(_DWORD *)v33 = -1;
        *((_QWORD *)v33 + 1) = -1;
        v34 = (__n128 *)v33;
        if (v25 != v27)
        {
          do
          {
            v10 = v25[-1];
            v34[-1] = v10;
            --v34;
            --v25;
          }
          while (v25 != v27);
          v27 = *a5;
        }
        v26 = v33 + 16;
        *a5 = v34;
        a5[1] = (__n128 *)(v33 + 16);
        a5[2] = (__n128 *)&v32[16 * v31];
        if (v27)
          operator delete(v27);
      }
      else
      {
        v25->n128_u32[0] = -1;
        v25->n128_u64[1] = -1;
        v26 = (char *)&v25[1];
      }
      a5[1] = (__n128 *)v26;
      v11 = *a2;
      v12 = a2[1];
      v13 = (v12 - *a2) >> 2;
    }
    while (v13 < (int)v9);
  }
  v36 = a2 + 2;
  v35 = (unint64_t)a2[2];
  if ((unint64_t)v12 >= v35)
  {
    if ((v13 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v44 = v35 - (_QWORD)v11;
    v45 = v44 >> 1;
    if (v44 >> 1 <= v13 + 1)
      v45 = v13 + 1;
    if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
      v46 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v46 = v45;
    if (v46)
      v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v46);
    else
      v47 = 0;
    v48 = &v47[4 * v13];
    v49 = &v47[4 * v46];
    *(_DWORD *)v48 = 0;
    v37 = v48 + 4;
    v51 = *a2;
    v50 = a2[1];
    if (v50 != *a2)
    {
      do
      {
        v52 = *((_DWORD *)v50 - 1);
        v50 -= 4;
        *((_DWORD *)v48 - 1) = v52;
        v48 -= 4;
      }
      while (v50 != v51);
      v50 = *a2;
    }
    *a2 = v48;
    a2[1] = v37;
    a2[2] = v49;
    if (v50)
      operator delete(v50);
  }
  else
  {
    *(_DWORD *)v12 = 0;
    v37 = v12 + 4;
  }
  a2[1] = v37;
  v53 = (unint64_t)a5[2];
  v54 = a5[1];
  if ((unint64_t)v54 >= v53)
  {
    v56 = *a5;
    v57 = v54 - *a5;
    v58 = v57 + 1;
    if ((unint64_t)(v57 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v59 = v53 - (_QWORD)v56;
    if (v59 >> 3 > v58)
      v58 = v59 >> 3;
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF0)
      v60 = 0xFFFFFFFFFFFFFFFLL;
    else
      v60 = v58;
    if (v60)
    {
      v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v60);
      v56 = *a5;
      v54 = a5[1];
    }
    else
    {
      v61 = 0;
    }
    v62 = (__n128 *)&v61[16 * v57];
    v63 = &v61[16 * v60];
    v62->n128_u32[0] = -1;
    v62->n128_u64[1] = -1;
    v55 = (char *)&v62[1];
    if (v54 != v56)
    {
      do
      {
        v10 = v54[-1];
        v62[-1] = v10;
        --v62;
        --v54;
      }
      while (v54 != v56);
      v56 = *a5;
    }
    *a5 = v62;
    a5[1] = (__n128 *)v55;
    a5[2] = (__n128 *)v63;
    if (v56)
      operator delete(v56);
  }
  else
  {
    v54->n128_u32[0] = -1;
    v54->n128_u64[1] = -1;
    v55 = (char *)&v54[1];
  }
  a5[1] = (__n128 *)v55;
  (*(void (**)(_QWORD, uint64_t, __n128))(**(_QWORD **)(v8 + 16) + 24))(*(_QWORD *)(v8 + 16), v9, v10);
  LOBYTE(__p[0]) = 1;
  std::vector<BOOL>::push_back((uint64_t)v129, __p);
  v64 = INFINITY;
  while (1)
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v123 + 16) + 48))(*(_QWORD *)(v123 + 16)) & 1) != 0)
    {
LABEL_202:
      v38 = 1;
      break;
    }
    v124 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v123 + 16) + 16))(*(_QWORD *)(v123 + 16));
    (*(void (**)(_QWORD))(**(_QWORD **)(v123 + 16) + 32))(*(_QWORD *)(v123 + 16));
    *(_QWORD *)((char *)v129[0] + (((unint64_t)(int)v124 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v124);
    v65 = *(float *)&(*a2)[4 * (int)v124];
    LODWORD(__p[0]) = (*(float (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v131 = INFINITY;
    if (*(float *)__p == INFINITY)
      goto LABEL_110;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v124);
    v67 = NAN;
    if (v65 != -INFINITY && v66 != -INFINITY)
    {
      v67 = INFINITY;
      v68 = v66 == INFINITY || v65 == INFINITY;
      v69 = v65 + v66;
      if (!v68)
        v67 = v69;
    }
    if (v64 >= v67)
      v70 = v67;
    else
      v70 = v64;
    if (v67 == -INFINITY || v64 == -INFINITY)
      v70 = NAN;
    *(float *)__p = v64;
    v131 = v70;
    if (v64 != v70)
    {
      *a4 = v124;
      v64 = v70;
    }
    v38 = 0;
    if (v64 == -INFINITY)
      break;
    if (*((_BYTE *)v120 + 34))
      goto LABEL_202;
LABEL_110:
    v128 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 136))(a1, v124, __p);
    while (1)
    {
      if (!__p[0])
      {
        if (v128 >= v126)
        {
          v114 = 0;
          goto LABEL_195;
        }
        goto LABEL_116;
      }
      v73 = (*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 24))(__p[0]);
      v74 = __p[0];
      if ((v73 & 1) != 0)
        break;
      if (__p[0])
      {
        v75 = (float *)(*(uint64_t (**)(void))(*(_QWORD *)__p[0] + 32))();
        goto LABEL_150;
      }
LABEL_116:
      v75 = (float *)((char *)__p[1] + 16 * v128);
LABEL_150:
      while (1)
      {
        v96 = *a2;
        v97 = a2[1];
        v98 = (v97 - *a2) >> 2;
        v99 = *((int *)v75 + 3);
        if (v98 > v99)
          break;
        if ((unint64_t)v97 >= *v36)
        {
          if ((v98 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v77 = *v36 - (_QWORD)v96;
          v78 = v77 >> 1;
          if (v77 >> 1 <= v98 + 1)
            v78 = v98 + 1;
          if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL)
            v79 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v79 = v78;
          if (v79)
            v80 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v79);
          else
            v80 = 0;
          v81 = &v80[4 * v98];
          *(_DWORD *)v81 = 2139095040;
          v76 = v81 + 4;
          v83 = *a2;
          v82 = a2[1];
          if (v82 != *a2)
          {
            do
            {
              v84 = *((_DWORD *)v82 - 1);
              v82 -= 4;
              *((_DWORD *)v81 - 1) = v84;
              v81 -= 4;
            }
            while (v82 != v83);
            v82 = *a2;
          }
          *a2 = v81;
          a2[1] = v76;
          a2[2] = &v80[4 * v79];
          if (v82)
            operator delete(v82);
        }
        else
        {
          *(_DWORD *)v97 = 2139095040;
          v76 = v97 + 4;
        }
        a2[1] = v76;
        LOBYTE(v131) = 0;
        std::vector<BOOL>::push_back((uint64_t)v129, &v131);
        v86 = a5[1];
        v85 = (unint64_t)a5[2];
        if ((unint64_t)v86 >= v85)
        {
          v88 = *a5;
          v89 = v86 - *a5;
          v90 = v89 + 1;
          if ((unint64_t)(v89 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v91 = v85 - (_QWORD)v88;
          if (v91 >> 3 > v90)
            v90 = v91 >> 3;
          if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF0)
            v92 = 0xFFFFFFFFFFFFFFFLL;
          else
            v92 = v90;
          if (v92)
          {
            v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v92);
            v88 = *a5;
            v86 = a5[1];
          }
          else
          {
            v93 = 0;
          }
          v94 = &v93[16 * v89];
          *(_DWORD *)v94 = -1;
          *((_QWORD *)v94 + 1) = -1;
          v95 = v94;
          if (v86 != v88)
          {
            do
            {
              *((__n128 *)v95 - 1) = v86[-1];
              v95 -= 16;
              --v86;
            }
            while (v86 != v88);
            v88 = *a5;
          }
          v87 = v94 + 16;
          *a5 = (__n128 *)v95;
          a5[1] = (__n128 *)(v94 + 16);
          a5[2] = (__n128 *)&v93[16 * v92];
          if (v88)
            operator delete(v88);
        }
        else
        {
          v86->n128_u32[0] = -1;
          v86->n128_u64[1] = -1;
          v87 = (char *)&v86[1];
        }
        a5[1] = (__n128 *)v87;
      }
      v100 = NAN;
      if (v65 != -INFINITY)
      {
        v101 = v75[2];
        v100 = NAN;
        if (v101 != -INFINITY)
        {
          v100 = INFINITY;
          v102 = v101 == INFINITY || v65 == INFINITY;
          v103 = v65 + v101;
          if (!v102)
            v100 = v103;
        }
      }
      v104 = *(float *)&v96[4 * v99];
      if (v104 >= v100)
        v105 = v100;
      else
        v105 = *(float *)&v96[4 * v99];
      v107 = v100 == -INFINITY || v104 == -INFINITY;
      v108 = NAN;
      if (!v107)
        v108 = v105;
      v131 = 0.0;
      v131 = *(float *)&v96[4 * v99];
      v130 = v108;
      if (v131 != v108)
      {
        v109 = *(float *)&v96[4 * v99];
        if (v109 >= v100)
          v110 = v100;
        else
          v110 = *(float *)&v96[4 * v99];
        v112 = v100 == -INFINITY || v109 == -INFINITY;
        v113 = NAN;
        if (!v112)
          v113 = v110;
        *(float *)&v96[4 * v99] = v113;
        v114 = 1;
        v74 = __p[0];
        if (v113 == -INFINITY)
          goto LABEL_192;
        if (__p[0])
          v115 = (*(uint64_t (**)(void))(*(_QWORD *)__p[0] + 48))();
        else
          v115 = v128;
        v116 = *((int *)v75 + 3);
        v117 = (uint64_t)&(*a5)[v116];
        *(_DWORD *)v117 = v124;
        *(_QWORD *)(v117 + 8) = v115;
        v118 = **(_QWORD **)(v123 + 16);
        if (((*(_QWORD *)((char *)v129[0] + ((v116 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v116) & 1) != 0)
        {
          (*(void (**)(void))(v118 + 40))();
        }
        else
        {
          (*(void (**)(void))(v118 + 24))();
          *(_QWORD *)((char *)v129[0] + (((unint64_t)*((int *)v75 + 3) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *((_DWORD *)v75 + 3);
        }
      }
      if (__p[0])
        (*(void (**)(void *))(*(_QWORD *)__p[0] + 40))(__p[0]);
      else
        ++v128;
    }
    v114 = 0;
LABEL_192:
    if (v74)
    {
      (*(void (**)(void *))(*(_QWORD *)v74 + 8))(v74);
      goto LABEL_197;
    }
LABEL_195:
    if (v127)
      --*v127;
LABEL_197:
    if (v114)
    {
LABEL_198:
      v38 = 0;
      break;
    }
  }
  if (v129[0])
    operator delete(v129[0]);
  return v38;
}

void sub_1AD825510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22)
{
  uint64_t v22;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v22 - 100));
  if (a19 < 0)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(a1);
}

uint64_t fst::SingleShortestPathBacktrace<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  int v21;
  int v22;
  _QWORD v23[3];
  _DWORD *v24;
  uint64_t v25;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 280))(a2, v8);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 288))(a2, v9);
  if ((_DWORD)a4 != -1)
  {
    v10 = -1;
    v11 = -1;
    v12 = a4;
    while (1)
    {
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
      if (v11 != -1)
        break;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 184))(a2, v13);
LABEL_15:
      v11 = v12;
      v10 = v13;
      v12 = *(unsigned int *)(*a3 + 16 * (int)v12);
      if ((_DWORD)v12 == -1)
        goto LABEL_18;
    }
    v25 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v12, v23);
    v14 = *(_QWORD *)(*a3 + 16 * v11 + 8);
    if (v23[0])
    {
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v23[0] + 64))(v23[0], v14);
      if (v23[0])
      {
        v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v23[0] + 32))(v23[0]);
        goto LABEL_11;
      }
      v14 = v25;
    }
    else
    {
      v25 = *(_QWORD *)(*a3 + 16 * v11 + 8);
    }
    v15 = v23[1] + 16 * v14;
LABEL_11:
    v16 = *(_DWORD *)(v15 + 8);
    v20 = *(_QWORD *)v15;
    v21 = v16;
    v22 = v10;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 208))(a2, v13, &v20);
    if (v23[0])
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v23[0] + 8))(v23[0]);
    }
    else if (v24)
    {
      --*v24;
    }
    goto LABEL_15;
  }
  v13 = 0xFFFFFFFFLL;
LABEL_18:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v13);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 4, 0))
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v18 = fst::ShortestPathProperties(v17, 0);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, v18, 0x3FFFFFFF0007);
}

void sub_1AD825874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _DWORD *a15)
{
  if (a12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  }
  else if (a15)
  {
    --*a15;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  _QWORD v6[3];
  int v7;
  char v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[2];

  v6[0] = a1;
  v6[1] = a2;
  v6[2] = *(_QWORD *)a3;
  v7 = *(_DWORD *)(a3 + 16);
  v8 = *(_BYTE *)(a3 + 20);
  v9 = 0;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  memset(v13, 0, 29);
  a2[1] = *a2;
  fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ShortestDistance(v6, *(_DWORD *)(a3 + 12));
  if (BYTE12(v13[1]))
  {
    a2[1] = *a2;
    v5 = 2143289344;
    std::vector<fst::TropicalWeightTpl<float>>::resize((uint64_t)a2, 1uLL, &v5);
  }
  return fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ShortestDistanceState(v6);
}

void sub_1AD825948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ShortestDistanceState((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t fst::Reverse<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void **v13;
  uint64_t v14;
  float v15;
  int v16;
  unsigned int v17;
  int *v18;
  unint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  __n128 v27;
  __n128 v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  char v33;
  int v34;
  float v35;
  BOOL v36;
  float v37;
  int v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _DWORD *v50;
  unint64_t v51;
  void **p_p;
  uint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  void *__p;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;

  (*(void (**)(uint64_t *))(*a2 + 224))(a2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 280))(a2, v6);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 288))(a2, v7);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0))
  {
    v8 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
    (*(void (**)(uint64_t *, _QWORD))(*a2 + 248))(a2, (v8 + 1));
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v10 = 0;
  v60 = 0;
  if ((a3 & 1) != 0)
    goto LABEL_57;
  LODWORD(v54) = 0;
  (*(void (**)(uint64_t, void ***))(*(_QWORD *)a1 + 128))(a1, &p_p);
  v11 = 0xFFFFFFFFLL;
  while (1)
  {
    if (p_p)
    {
      v12 = (*((uint64_t (**)(void **))*p_p + 2))(p_p);
      v13 = p_p;
      if ((v12 & 1) != 0)
        goto LABEL_22;
      if (p_p)
      {
        v14 = (*((uint64_t (**)(void))*p_p + 3))();
        goto LABEL_11;
      }
    }
    else if ((int)v54 >= (int)v53)
    {
      goto LABEL_24;
    }
    v14 = v54;
LABEL_11:
    v15 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v14);
    *(float *)&v47 = v15;
    LODWORD(__p) = 2139095040;
    v16 = 2 * ((_DWORD)v11 != -1);
    v17 = (_DWORD)v11 == -1 ? v14 : -1;
    if (v15 == INFINITY)
    {
      v16 = 4;
      v11 = v11;
    }
    else
    {
      v11 = v17;
    }
    if ((v16 | 4) != 4)
      break;
    if (p_p)
      (*((void (**)(void **))*p_p + 4))(p_p);
    else
      LODWORD(v54) = v54 + 1;
  }
  v13 = p_p;
LABEL_22:
  if (v13)
    (*((void (**)(void **))*v13 + 1))(v13);
LABEL_24:
  if ((_DWORD)v11 != -1)
  {
    LODWORD(p_p) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v11);
    LODWORD(v47) = 0;
    if (*(float *)&p_p == 0.0)
    {
      v24 = 0;
      v46 = 0;
      goto LABEL_58;
    }
    __p = 0;
    v58 = 0;
    v59 = 0;
    p_p = &__p;
    v53 = 0;
    v54 = 0;
    v55 = &v60;
    fst::DfsVisit<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SccVisitor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, (uint64_t *)&p_p, 0);
    v18 = (int *)__p;
    if (__p != v58)
    {
      v19 = 0;
      do
      {
        v20 = *v18++;
        if (v20 == *((_DWORD *)__p + (int)v11))
          ++v19;
      }
      while (v18 != v58);
      if (v19 > 1)
        goto LABEL_52;
    }
    v51 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v11, &v47);
    while (2)
    {
      while (2)
      {
        if (v47)
        {
          v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 24))(v47);
          v22 = v47;
          if ((v21 & 1) != 0)
            goto LABEL_46;
          if (v47)
          {
            v23 = (*(uint64_t (**)(void))(*(_QWORD *)v47 + 32))();
            v22 = v47;
            if (*(_DWORD *)(v23 + 12) == (_DWORD)v11)
            {
              v11 = 0xFFFFFFFFLL;
LABEL_46:
              if (v22)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
                goto LABEL_50;
              }
LABEL_48:
              if (v50)
                --*v50;
LABEL_50:
              if ((_DWORD)v11 != -1)
              {
                v10 = 0x2000000000;
                goto LABEL_53;
              }
LABEL_52:
              v10 = 0;
              v11 = 0xFFFFFFFFLL;
LABEL_53:
              if (__p)
              {
                v58 = __p;
                operator delete(__p);
              }
              if ((_DWORD)v11 != -1)
              {
                v46 = v10;
                v24 = 0;
                goto LABEL_58;
              }
              goto LABEL_57;
            }
            if (v47)
            {
              (*(void (**)(void))(*(_QWORD *)v47 + 40))();
              continue;
            }
            goto LABEL_41;
          }
        }
        else if (v51 >= v49)
        {
          goto LABEL_48;
        }
        break;
      }
      if (*(_DWORD *)(v48 + 16 * v51 + 12) == (_DWORD)v11)
      {
        v11 = 0xFFFFFFFFLL;
        goto LABEL_48;
      }
LABEL_41:
      ++v51;
      continue;
    }
  }
  v10 = 0;
LABEL_57:
  v46 = v10;
  v11 = (*(uint64_t (**)(uint64_t *))(*a2 + 200))(a2);
  v24 = 1;
LABEL_58:
  LODWORD(v49) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v47);
  while (2)
  {
    if (!v47)
    {
      if ((int)v49 >= (int)v48)
        goto LABEL_108;
      goto LABEL_64;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47))
    {
      if (v47)
      {
        v25 = (*(uint64_t (**)(void))(*(_QWORD *)v47 + 24))();
LABEL_65:
        v26 = v25 + v24;
        while ((*(int (**)(uint64_t *))(*a2 + 160))(a2) <= v26)
          (*(void (**)(uint64_t *))(*a2 + 200))(a2);
        if ((_DWORD)v25 == (_DWORD)v9)
          (*(void (**)(uint64_t *, _QWORD, float))(*a2 + 184))(a2, (v25 + v24), 0.0);
        v27.n128_f32[0] = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v25);
        LODWORD(p_p) = v27.n128_u32[0];
        LODWORD(__p) = 2139095040;
        v28.n128_u32[0] = v27.n128_u32[0];
        v29 = v24 ^ 1;
        if (v27.n128_f32[0] == INFINITY)
          v29 = 1;
        if ((v29 & 1) == 0)
        {
          p_p = 0;
          LODWORD(v53) = v27.n128_u32[0];
          HIDWORD(v53) = v25 + v24;
          v27.n128_f64[0] = (*(double (**)(uint64_t *, _QWORD, void ***))(*a2 + 208))(a2, 0, &p_p);
        }
        v56 = 0;
        (*(void (**)(uint64_t, uint64_t, void ***, __n128, __n128))(*(_QWORD *)a1 + 136))(a1, v25, &p_p, v27, v28);
LABEL_75:
        if (p_p)
        {
          if ((*((unsigned int (**)(void **))*p_p + 3))(p_p))
          {
            if (p_p)
            {
              (*((void (**)(void))*p_p + 1))();
              goto LABEL_103;
            }
LABEL_101:
            if (v55)
              --*(_DWORD *)v55;
LABEL_103:
            if (v47)
              (*(void (**)(uint64_t))(*(_QWORD *)v47 + 32))(v47);
            else
              LODWORD(v49) = v49 + 1;
            continue;
          }
          if (p_p)
          {
            v30 = (*((uint64_t (**)(void))*p_p + 4))();
LABEL_81:
            v31 = (*(_DWORD *)(v30 + 12) + v24);
            v32 = *(float *)(v30 + 8);
            if ((_DWORD)v31 == (_DWORD)v11)
              v33 = v24;
            else
              v33 = 1;
            if ((v33 & 1) != 0)
            {
              v34 = *(_DWORD *)(v30 + 8);
            }
            else
            {
              v35 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v11);
              v34 = 2143289344;
              if (v35 != -INFINITY && v32 != -INFINITY)
              {
                v34 = 2139095040;
                v36 = v35 == INFINITY || v32 == INFINITY;
                v37 = v32 + v35;
                if (!v36)
                  *(float *)&v34 = v37;
              }
            }
            __p = *(void **)v30;
            v58 = (_DWORD *)__PAIR64__(v26, v34);
            while (1)
            {
              v38 = (*(uint64_t (**)(uint64_t *))(*a2 + 160))(a2);
              v39 = *a2;
              if (v38 > (int)v31)
                break;
              (*(void (**)(uint64_t *))(v39 + 200))(a2);
            }
            (*(void (**)(uint64_t *, uint64_t, void **))(v39 + 208))(a2, v31, &__p);
            if (p_p)
              (*((void (**)(void **))*p_p + 5))(p_p);
            else
              ++v56;
            goto LABEL_75;
          }
        }
        else if (v56 >= v54)
        {
          goto LABEL_101;
        }
        v30 = v53 + 16 * v56;
        goto LABEL_81;
      }
LABEL_64:
      v25 = v49;
      goto LABEL_65;
    }
    break;
  }
  if (v47)
    (*(void (**)(void))(*(_QWORD *)v47 + 8))();
LABEL_108:
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 176))(a2, v11);
  if ((_DWORD)v11 == (_DWORD)v9)
    v40 = v24;
  else
    v40 = 1;
  if ((v40 & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v9);
    (*(void (**)(uint64_t *, uint64_t))(*a2 + 184))(a2, v9);
  }
  v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  v42 = v60 | v41;
  v43 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*a2 + 64))(a2, 0x3FFFFFFF0007, 0) | v46;
  v44 = fst::ReverseProperties(v42, v24);
  return (*(uint64_t (**)(uint64_t *, unint64_t, uint64_t))(*a2 + 192))(a2, v43 | v44, 0x3FFFFFFF0007);
}

void sub_1AD8260D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int *std::vector<fst::TropicalWeightTpl<float>>::insert(uint64_t a1, char *__src, int *a3)
{
  int *v3;
  int *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _DWORD *v11;
  int v12;
  int *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int *v19;
  int *v20;
  unint64_t v21;
  unint64_t v22;
  int *v23;
  uint64_t v24;
  std::__split_buffer<int> __v;

  v3 = a3;
  v4 = (int *)__src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(int **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 2) + 1;
    if (v14 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = __src - (char *)v13;
    v16 = (__src - (char *)v13) >> 2;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 1 > v14)
      v14 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    __v.__end_cap_.__value_ = (std::allocator<int> *)(a1 + 16);
    if (v18)
      v19 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[v16];
    __v.__first_ = v19;
    __v.__begin_ = v20;
    __v.__end_ = v20;
    __v.__end_cap_.__value_ = &v19[v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 1;
        v23 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v8, v22);
        v20 = (int *)((char *)v23 + (v22 & 0xFFFFFFFFFFFFFFFCLL));
        __v.__first_ = v23;
        __v.__begin_ = v20;
        __v.__end_cap_.__value_ = &v23[v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= v21 >> 1;
        __v.__begin_ = v20;
      }
    }
    *v20 = *v3;
    __v.__end_ = v20 + 1;
    v4 = std::vector<int>::__swap_out_circular_buffer((std::vector<int> *)a1, &__v, v4);
    if (__v.__end_ != __v.__begin_)
      __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
                                                     + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_)
      operator delete(__v.__first_);
  }
  else if (__src == v6)
  {
    *(_DWORD *)__src = *a3;
    *(_QWORD *)(a1 + 8) = __src + 4;
  }
  else
  {
    v9 = __src + 4;
    v10 = v6 - 4;
    v11 = *(_DWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_DWORD *)v10;
      v10 += 4;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-4 * ((v6 - v9) >> 2)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += *(_QWORD *)(a1 + 8) > (unint64_t)v3;
    *v4 = *v3;
  }
  return v4;
}

void sub_1AD8263C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::NShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, int a5, int a6, float a7, float a8)
{
  float v8;
  fst *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  unint64_t i;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  unint64_t *v34;
  char *v35;
  uint64_t v36;
  int v37;
  char *v38;
  float v39;
  float v40;
  BOOL v41;
  float v42;
  char *v43;
  int *v44;
  int v45;
  int *v46;
  int *v47;
  uint64_t v48;
  float *v49;
  float v50;
  float v51;
  float v52;
  int v53;
  float v54;
  float v55;
  BOOL v56;
  float v57;
  unint64_t v58;
  char *v59;
  char *v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  int v68;
  _BYTE *v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  int v79;
  unint64_t v80;
  uint64_t v82;
  float v83;
  __n128 *v85;
  uint64_t v86;
  __n128 v87;
  BOOL v88;
  float v89;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t *v100;
  unint64_t *v101;
  char *v102;
  uint64_t v103;
  int *v104;
  int *v105;
  int *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  int *v112;
  int v113;
  float v114;
  unsigned __int32 v115;
  float v116;
  BOOL v118;
  unint64_t v119;
  unint64_t v120;
  BOOL v121;
  int v122;
  unint64_t v123;
  __n128 v124;
  uint64_t *v125[2];
  int v126;
  float v127;
  uint64_t *v128[2];
  int v129;
  float v130;
  __n128 v131;
  void *v132;
  unint64_t v133;
  unint64_t v134;
  _DWORD *v135;
  unint64_t v136;
  uint64_t *v137[2];
  int v138;
  float v139;
  void *__p;
  char *v141;
  char *v142;
  float v143;
  int v144;
  char v145;
  char *v146;
  char *v147;
  char *v148;
  int *v149;
  int *v150;
  unint64_t v151;
  unint64_t *v152;
  unint64_t *v153;
  char *v154;
  float v155[3];

  v155[0] = a8;
  if (!a4)
    return;
  if (a6 && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 0x400000000, 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(&v132, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(&v132, "ERROR");
    v16 = fst::LogMessage::LogMessage((fst *)&v152, (uint64_t)&v132);
    v17 = (_QWORD *)fst::cerr(v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"NShortestPath: FST has a cycle and include_final_ties was set to true. This is not currently supported.", 103);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v152);
    if (SHIBYTE(v134) < 0)
      operator delete(v132);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    return;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 280))(a2, v18);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 288))(a2, v19);
  v152 = 0;
  v153 = 0;
  v154 = 0;
  v149 = 0;
  v150 = 0;
  v151 = 0;
  v146 = 0;
  v147 = 0;
  v148 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) == -1)
    goto LABEL_215;
  v22 = *a3;
  v21 = a3[1];
  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) >= (unint64_t)((v21 - v22) >> 2)
    || (v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1),
        v24 = *a3,
        LODWORD(v132) = 0,
        LODWORD(v132) = *(_DWORD *)(v24 + 4 * v23),
        LODWORD(__p) = 2139095040,
        v20.n128_u32[0] = v132,
        *(float *)&v132 == INFINITY)
    || (v131.n128_u32[0] = 0,
        fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)&v145, v155, (float *)&v131))
    || !a5)
  {
LABEL_215:
    if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __n128))(*(_QWORD *)a1 + 64))(a1, 4, 0, v20))
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
  }
  else
  {
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v25);
    v144 = 0;
    v144 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
    (*(void (**)(uint64_t, float))(*(_QWORD *)a2 + 184))(a2, 0.0);
    v122 = a5;
    v26 = (char *)v152;
    v27 = (char *)v153;
    for (i = v153 - v152; i <= v144; i = (v27 - (char *)v152) >> 3)
    {
      if (v27 >= v154)
      {
        if ((i + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v29 = v154 - v26;
        v30 = v29 >> 2;
        if (v29 >> 2 <= i + 1)
          v30 = i + 1;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v30;
        if (v31)
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v154, v31);
        else
          v32 = 0;
        v33 = &v32[8 * i];
        *(_QWORD *)v33 = 0x7F800000FFFFFFFFLL;
        v27 = v33 + 8;
        v35 = (char *)v152;
        v34 = v153;
        if (v153 != v152)
        {
          do
          {
            v36 = *--v34;
            *((_QWORD *)v33 - 1) = v36;
            v33 -= 8;
          }
          while (v34 != (unint64_t *)v35);
          v34 = v152;
        }
        v152 = (unint64_t *)v33;
        v153 = (unint64_t *)v27;
        v154 = &v32[8 * v31];
        if (v34)
          operator delete(v34);
      }
      else
      {
        *(_QWORD *)v27 = 0x7F800000FFFFFFFFLL;
        v27 += 8;
      }
      v153 = (unint64_t *)v27;
      v26 = (char *)v152;
    }
    v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v38 = (char *)&v152[v144];
    *(_DWORD *)v38 = v37;
    *((_DWORD *)v38 + 1) = 0;
    std::vector<int>::push_back[abi:ne180100]((uint64_t)&v149, &v144);
    v39 = *(float *)(*a3 + 4 * (*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1));
    v40 = NAN;
    if (v39 != -INFINITY)
    {
      v40 = NAN;
      if (v155[0] != -INFINITY)
      {
        v40 = INFINITY;
        v41 = v155[0] == INFINITY || v39 == INFINITY;
        v42 = v39 + v155[0];
        if (!v41)
          v40 = v42;
      }
    }
    v143 = v40;
    __p = 0;
    v141 = 0;
    v142 = 0;
    v44 = v149;
    v43 = (char *)v150;
    if (v149 != v150)
    {
      v121 = 0;
      do
      {
        v137[0] = (uint64_t *)&v152;
        v137[1] = a3;
        v138 = -1;
        v139 = a7;
        if (v43 - (char *)v44 >= 5)
        {
          v45 = *v44;
          v46 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>(v44, v137, (unint64_t)(v43 - (char *)v44) >> 2);
          v47 = (int *)(v43 - 4);
          if (v43 - 4 == (char *)v46)
          {
            *v46 = v45;
          }
          else
          {
            *v46 = *v47;
            *v47 = v45;
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>((uint64_t)v44, (uint64_t)(v46 + 1), v137, v46 + 1 - v44);
          }
        }
        v48 = *(v150 - 1);
        v49 = (float *)&v152[v48];
        v50 = v49[1];
        v51 = *v49;
        v123 = *(int *)v49;
        v52 = v50;
        --v150;
        if (v51 == NAN)
        {
          v54 = 0.0;
          v53 = v122;
        }
        else
        {
          v53 = v122;
          if (v123 >= (a3[1] - *a3) >> 2)
          {
            v54 = INFINITY;
          }
          else
          {
            v54 = *(float *)(*a3 + 4 * v123);
            v55 = NAN;
            if (v54 == -INFINITY)
              goto LABEL_51;
          }
        }
        v55 = NAN;
        if (v50 != -INFINITY)
        {
          v55 = INFINITY;
          v56 = v54 == INFINITY || v50 == INFINITY;
          v57 = v54 + v50;
          if (!v56)
            v55 = v57;
        }
LABEL_51:
        *(float *)&v132 = v55;
        if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)&v145, &v143, (float *)&v132)
          || v53 != -1 && (*(int (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2) >= v53)
        {
          goto LABEL_190;
        }
        v58 = v123 + 1;
        v59 = v146;
        v60 = v147;
        v61 = (v147 - v146) >> 2;
        while (v61 <= v58)
        {
          if (v60 >= v148)
          {
            v63 = v61 + 1;
            if ((v61 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v64 = v148 - v59;
            if ((v148 - v59) >> 1 > v63)
              v63 = v64 >> 1;
            if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL)
              v65 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v65 = v63;
            if (v65)
            {
              v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v148, v65);
              v59 = v146;
              v60 = v147;
            }
            else
            {
              v66 = 0;
            }
            v67 = &v66[4 * v61];
            *(_DWORD *)v67 = 0;
            v62 = v67 + 4;
            while (v60 != v59)
            {
              v68 = *((_DWORD *)v60 - 1);
              v60 -= 4;
              *((_DWORD *)v67 - 1) = v68;
              v67 -= 4;
            }
            v146 = v67;
            v147 = v62;
            v148 = &v66[4 * v65];
            if (v59)
            {
              operator delete(v59);
              v59 = v146;
            }
            else
            {
              v59 = v67;
            }
          }
          else
          {
            *(_DWORD *)v60 = 0;
            v62 = v60 + 4;
          }
          v147 = v62;
          v61 = (v62 - v59) >> 2;
          v60 = v62;
        }
        if (a6)
        {
          v69 = __p;
          v70 = v141;
          v71 = (v141 - (_BYTE *)__p) >> 2;
          if (v71 <= v58)
          {
            do
            {
              if (v70 >= v142)
              {
                if ((v71 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v72 = v142 - v69;
                v73 = v72 >> 1;
                if (v72 >> 1 <= v71 + 1)
                  v73 = v71 + 1;
                if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL)
                  v74 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v74 = v73;
                if (v74)
                  v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v142, v74);
                else
                  v75 = 0;
                v76 = &v75[4 * v71];
                *(_DWORD *)v76 = 2139095040;
                v70 = v76 + 4;
                v78 = (char *)__p;
                v77 = v141;
                if (v141 != __p)
                {
                  do
                  {
                    v79 = *((_DWORD *)v77 - 1);
                    v77 -= 4;
                    *((_DWORD *)v76 - 1) = v79;
                    v76 -= 4;
                  }
                  while (v77 != v78);
                  v77 = (char *)__p;
                }
                __p = v76;
                v141 = v70;
                v142 = &v75[4 * v74];
                if (v77)
                  operator delete(v77);
              }
              else
              {
                *(_DWORD *)v70 = 2139095040;
                v70 += 4;
              }
              v141 = v70;
              v69 = __p;
              v71 = (v70 - (_BYTE *)__p) >> 2;
            }
            while (v71 <= v58);
            ++*(_DWORD *)&v146[4 * v58];
            if ((_DWORD)v123 != -1)
            {
LABEL_97:
              v80 = *(int *)&v146[4 * v58];
              if (v80 == a4)
              {
                *((float *)__p + v58) = v50;
              }
              else if (v80 > a4)
              {
                v83 = *((float *)__p + v58);
                if (v83 > (float)(v50 + 0.00097656) || (float)(v83 + 0.00097656) < v50)
                  goto LABEL_190;
              }
LABEL_118:
              v136 = 0;
              (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
              while (2)
              {
                if (v132)
                {
                  if ((*(unsigned int (**)(void *))(*(_QWORD *)v132 + 24))(v132))
                  {
                    if (v132)
                    {
                      (*(void (**)(void))(*(_QWORD *)v132 + 8))();
                      goto LABEL_178;
                    }
LABEL_176:
                    if (v135)
                      --*v135;
LABEL_178:
                    v114 = (*(float (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 32))(a1, v123);
                    *(float *)&v132 = v114;
                    v131.n128_u32[0] = 2139095040;
                    if (v114 != INFINITY)
                    {
                      v131.n128_u32[0] = 0;
                      v115 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
                      v116 = INFINITY;
                      if (v52 != INFINITY)
                        v116 = v114 + v52;
                      v118 = v114 == -INFINITY || v52 == -INFINITY;
                      v131.n128_u32[0] = v115;
                      if (v118)
                        v116 = NAN;
                      LODWORD(v132) = -1;
                      *((float *)&v132 + 1) = v116;
                      std::vector<std::pair<int,fst::TropicalWeightTpl<float>>>::push_back[abi:ne180100]((void **)&v152, &v132);
                      v132 = 0;
                      v133 = __PAIR64__(v48, LODWORD(v114));
                      (*(void (**)(uint64_t, _QWORD, void **))(*(_QWORD *)a2 + 208))(a2, v131.n128_u32[0], &v132);
                      std::vector<int>::push_back[abi:ne180100]((uint64_t)&v149, &v131);
                      v125[0] = (uint64_t *)&v152;
                      v125[1] = a3;
                      v126 = -1;
                      v127 = a7;
                      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>((uint64_t)v149, (uint64_t)v150, v125, v150 - v149);
                    }
                    goto LABEL_190;
                  }
                  if (v132)
                  {
                    v85 = (__n128 *)(*(uint64_t (**)(void))(*(_QWORD *)v132 + 32))();
LABEL_125:
                    v131 = *v85;
                    v124 = v131;
                    v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
                    v87 = v124;
                    v87.n128_u32[0] = v124.n128_u32[2];
                    v88 = v124.n128_f32[2] == INFINITY || v52 == INFINITY;
                    v89 = v124.n128_f32[2] + v52;
                    if (v88)
                      v89 = INFINITY;
                    v91 = v124.n128_f32[2] == -INFINITY || v52 == -INFINITY;
                    v92 = v131.n128_u32[3];
                    if (v91)
                      v93 = 2143289344;
                    else
                      v93 = LODWORD(v89);
                    v94 = v153;
                    if (v153 >= (unint64_t *)v154)
                    {
                      v96 = v153 - v152;
                      if ((unint64_t)(v96 + 1) >> 61)
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      v97 = (v154 - (char *)v152) >> 2;
                      if (v97 <= v96 + 1)
                        v97 = v96 + 1;
                      if ((unint64_t)(v154 - (char *)v152) >= 0x7FFFFFFFFFFFFFF8)
                        v98 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v98 = v97;
                      if (v98)
                        v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v154, v98);
                      else
                        v99 = 0;
                      v100 = (uint64_t *)&v99[8 * v96];
                      *v100 = v92 | (v93 << 32);
                      v95 = (unint64_t *)(v100 + 1);
                      v102 = (char *)v152;
                      v101 = v153;
                      if (v153 != v152)
                      {
                        do
                        {
                          v103 = *--v101;
                          *--v100 = v103;
                        }
                        while (v101 != (unint64_t *)v102);
                        v101 = v152;
                      }
                      v152 = (unint64_t *)v100;
                      v153 = v95;
                      v154 = &v99[8 * v98];
                      if (v101)
                        operator delete(v101);
                    }
                    else
                    {
                      *v153 = v131.n128_u32[3] | (unint64_t)(v93 << 32);
                      v95 = v94 + 1;
                    }
                    v153 = v95;
                    v131.n128_u32[3] = v48;
                    (*(void (**)(uint64_t, uint64_t, __n128 *, __n128))(*(_QWORD *)a2 + 208))(a2, v86, &v131, v87);
                    v104 = v150;
                    if ((unint64_t)v150 >= v151)
                    {
                      v106 = v149;
                      v107 = v150 - v149;
                      v108 = v107 + 1;
                      if ((unint64_t)(v107 + 1) >> 62)
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      v109 = v151 - (_QWORD)v149;
                      if ((uint64_t)(v151 - (_QWORD)v149) >> 1 > v108)
                        v108 = v109 >> 1;
                      if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFFCLL)
                        v110 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v110 = v108;
                      if (v110)
                      {
                        v111 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v151, v110);
                        v106 = v149;
                        v104 = v150;
                      }
                      else
                      {
                        v111 = 0;
                      }
                      v112 = (int *)&v111[4 * v107];
                      *v112 = v86;
                      v105 = v112 + 1;
                      while (v104 != v106)
                      {
                        v113 = *--v104;
                        *--v112 = v113;
                      }
                      v149 = v112;
                      v150 = v105;
                      v151 = (unint64_t)&v111[4 * v110];
                      if (v106)
                        operator delete(v106);
                    }
                    else
                    {
                      *v150 = v86;
                      v105 = v104 + 1;
                    }
                    v150 = v105;
                    v128[0] = (uint64_t *)&v152;
                    v128[1] = a3;
                    v129 = -1;
                    v130 = a7;
                    std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::TropicalWeightTpl<float>> &,std::__wrap_iter<int *>>((uint64_t)v149, (uint64_t)v105, v128, v105 - v149);
                    if (v132)
                      (*(void (**)(void *))(*(_QWORD *)v132 + 40))(v132);
                    else
                      ++v136;
                    continue;
                  }
                }
                else if (v136 >= v134)
                {
                  goto LABEL_176;
                }
                break;
              }
              v85 = (__n128 *)(v133 + 16 * v136);
              goto LABEL_125;
            }
          }
          else
          {
            ++*(_DWORD *)&v59[4 * v58];
            if ((_DWORD)v123 != -1)
              goto LABEL_97;
          }
        }
        else
        {
          ++*(_DWORD *)&v59[4 * v58];
          if ((_DWORD)v123 != -1)
          {
            if (*(int *)&v146[4 * v58] > a4)
              goto LABEL_190;
            goto LABEL_118;
          }
        }
        if (v121 && ((float)(v8 + 0.00097656) < v50 || v8 > (float)(v50 + 0.00097656)))
          break;
        v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
        v132 = 0;
        LODWORD(v133) = 0;
        HIDWORD(v133) = v48;
        (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 208))(a2, v82, &v132);
        if (v121)
        {
          v121 = 1;
          goto LABEL_190;
        }
        v121 = *(int *)&v146[4 * v58] == a4;
        if (*(_DWORD *)&v146[4 * v58] == a4)
        {
          v8 = v50;
          if ((a6 & 1) == 0)
            break;
        }
LABEL_190:
        v44 = v149;
        v43 = (char *)v150;
      }
      while (v149 != v150);
    }
    fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a2);
    if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 4, 0))
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    v119 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
    v120 = fst::ShortestPathProperties(v119, 0);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, v120, 0x3FFFFFFF0007);
    if (__p)
    {
      v141 = (char *)__p;
      operator delete(__p);
    }
  }
  if (v146)
  {
    v147 = v146;
    operator delete(v146);
  }
  if (v149)
  {
    v150 = v149;
    operator delete(v149);
  }
  if (v152)
  {
    v153 = v152;
    operator delete(v152);
  }
}

void sub_1AD827160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
  uint64_t v43;
  void *v45;
  void *v46;
  void *v47;

  v45 = *(void **)(v43 - 200);
  if (v45)
  {
    *(_QWORD *)(v43 - 192) = v45;
    operator delete(v45);
  }
  v46 = *(void **)(v43 - 176);
  if (v46)
  {
    *(_QWORD *)(v43 - 168) = v46;
    operator delete(v46);
  }
  v47 = *(void **)(v43 - 152);
  if (v47)
  {
    *(_QWORD *)(v43 - 144) = v47;
    operator delete(v47);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~DeterminizeFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D27268;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D24B80;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ShortestDistance(_QWORD *a1, int a2)
{
  unint64_t v4;
  void **v5;
  _DWORD *v6;
  void **v7;
  char *v8;
  unint64_t v9;
  char **v10;
  unint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;
  unint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  int v32;
  char *v33;
  char *v34;
  unint64_t v35;
  _QWORD *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  int v43;
  char **v44;
  _QWORD *v45;
  int v46;
  void **v47;
  void **v48;
  _DWORD *v49;
  char *v50;
  unint64_t i;
  unint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  int v61;
  unint64_t v62;
  _DWORD *v63;
  _DWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  int v73;
  uint64_t v74;
  float v75;
  uint64_t v76;
  uint64_t v77;
  void **v78;
  void **v79;
  _DWORD *v80;
  char *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _DWORD *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  int v93;
  unint64_t v94;
  _DWORD *v95;
  _DWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  int v105;
  char *v106;
  char *v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  int v116;
  char *v117;
  char *v118;
  float v119;
  float v120;
  BOOL v121;
  float v122;
  float v123;
  float v124;
  float v127;
  float v129;
  float v130;
  BOOL v132;
  float v133;
  uint64_t v134;
  char v135;
  uint64_t result;
  _BYTE *v137;
  uint64_t v138;
  _QWORD v139[3];
  _DWORD *v140;
  unint64_t v141;
  int v142;

  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1) == -1)
  {
    result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, 4, 0);
    if (!result)
      return result;
    v137 = (char *)a1 + 116;
    goto LABEL_224;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 56))(*(_QWORD *)(a1[2] + 16));
  if (!*((_BYTE *)a1 + 33))
  {
    *(_QWORD *)(a1[1] + 8) = *(_QWORD *)a1[1];
    a1[6] = a1[5];
    a1[9] = 0;
  }
  if (a2 == -1)
    a2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  v4 = a2;
  v5 = (void **)a1[1];
  v7 = v5 + 1;
  v6 = v5[1];
  v8 = (char *)*v5;
  v9 = ((char *)v6 - (_BYTE *)*v5) >> 2;
  if (v9 <= a2)
  {
    v10 = (char **)(a1 + 5);
    do
    {
      v11 = (unint64_t)v5[2];
      if ((unint64_t)v6 >= v11)
      {
        if ((v9 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v13 = v11 - (_QWORD)v8;
        v14 = v13 >> 1;
        if (v13 >> 1 <= v9 + 1)
          v14 = v9 + 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v5 + 2), v15);
        else
          v16 = 0;
        v17 = &v16[4 * v9];
        *(_DWORD *)v17 = 2139095040;
        v12 = v17 + 4;
        v18 = (char *)*v7;
        v19 = (char *)*v5;
        if (*v7 != *v5)
        {
          do
          {
            v20 = *((_DWORD *)v18 - 1);
            v18 -= 4;
            *((_DWORD *)v17 - 1) = v20;
            v17 -= 4;
          }
          while (v18 != v19);
          v18 = (char *)*v5;
        }
        *v5 = v17;
        *v7 = v12;
        v5[2] = &v16[4 * v15];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v6 = 2139095040;
        v12 = v6 + 1;
      }
      *v7 = v12;
      v22 = (_DWORD *)a1[6];
      v21 = a1[7];
      if ((unint64_t)v22 >= v21)
      {
        v24 = ((char *)v22 - *v10) >> 2;
        if ((unint64_t)(v24 + 1) >> 62)
LABEL_229:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v25 = v21 - (_QWORD)*v10;
        v26 = v25 >> 1;
        if (v25 >> 1 <= (unint64_t)(v24 + 1))
          v26 = v24 + 1;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
          v27 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v27 = v26;
        if (v27)
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 7), v27);
        else
          v28 = 0;
        v29 = &v28[4 * v24];
        *(_DWORD *)v29 = 2139095040;
        v23 = v29 + 4;
        v31 = (char *)a1[5];
        v30 = (char *)a1[6];
        if (v30 != v31)
        {
          do
          {
            v32 = *((_DWORD *)v30 - 1);
            v30 -= 4;
            *((_DWORD *)v29 - 1) = v32;
            v29 -= 4;
          }
          while (v30 != v31);
          v30 = *v10;
        }
        a1[5] = v29;
        a1[6] = v23;
        a1[7] = &v28[4 * v27];
        if (v30)
          operator delete(v30);
      }
      else
      {
        *v22 = 2139095040;
        v23 = v22 + 1;
      }
      a1[6] = v23;
      LOBYTE(v139[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), v139);
      v5 = (void **)a1[1];
      v7 = v5 + 1;
      v6 = v5[1];
      v8 = (char *)*v5;
      v9 = ((char *)v6 - (_BYTE *)*v5) >> 2;
    }
    while (v9 <= v4);
  }
  if (*((_BYTE *)a1 + 33))
  {
    v33 = (char *)a1[11];
    v34 = (char *)a1[12];
    v35 = (v34 - v33) >> 2;
    if (v35 <= v4)
    {
      v36 = a1 + 13;
      do
      {
        if ((unint64_t)v34 >= *v36)
        {
          v38 = v35 + 1;
          if ((v35 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v39 = *v36 - (_QWORD)v33;
          if (v39 >> 1 > v38)
            v38 = v39 >> 1;
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
            v40 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v40 = v38;
          if (v40)
          {
            v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v40);
            v33 = (char *)a1[11];
            v34 = (char *)a1[12];
          }
          else
          {
            v41 = 0;
          }
          v42 = &v41[4 * v35];
          *(_DWORD *)v42 = -1;
          v37 = v42 + 4;
          while (v34 != v33)
          {
            v43 = *((_DWORD *)v34 - 1);
            v34 -= 4;
            *((_DWORD *)v42 - 1) = v43;
            v42 -= 4;
          }
          a1[11] = v42;
          a1[12] = v37;
          a1[13] = &v41[4 * v40];
          if (v33)
          {
            operator delete(v33);
            v33 = (char *)a1[11];
          }
          else
          {
            v33 = v42;
          }
        }
        else
        {
          *(_DWORD *)v34 = -1;
          v37 = v34 + 4;
        }
        a1[12] = v37;
        v35 = (v37 - v33) >> 2;
        v34 = v37;
      }
      while (v35 <= v4);
      v8 = *(char **)a1[1];
    }
    *(_DWORD *)&v33[4 * v4] = *((_DWORD *)a1 + 28);
  }
  *(_DWORD *)&v8[4 * v4] = 0;
  v44 = (char **)(a1 + 5);
  *(_DWORD *)(a1[5] + 4 * v4) = 0;
  *(_QWORD *)(a1[8] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)(a1[2] + 16) + 24))(*(_QWORD *)(a1[2] + 16), v4);
  v45 = a1 + 13;
  v137 = (char *)a1 + 116;
  v138 = (uint64_t)(a1 + 7);
  do
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 48))(*(_QWORD *)(a1[2] + 16)) & 1) != 0)
      goto LABEL_220;
    v46 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 16))(*(_QWORD *)(a1[2] + 16));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 32))(*(_QWORD *)(a1[2] + 16));
    v47 = (void **)a1[1];
    v48 = v47 + 1;
    v49 = v47[1];
    v50 = (char *)*v47;
    for (i = ((char *)v49 - (_BYTE *)*v47) >> 2; i <= v46; i = ((char *)v49 - (_BYTE *)*v47) >> 2)
    {
      v52 = (unint64_t)v47[2];
      if ((unint64_t)v49 >= v52)
      {
        if ((i + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v54 = v52 - (_QWORD)v50;
        v55 = v54 >> 1;
        if (v54 >> 1 <= i + 1)
          v55 = i + 1;
        if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
          v56 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v56 = v55;
        if (v56)
          v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v47 + 2), v56);
        else
          v57 = 0;
        v58 = &v57[4 * i];
        *(_DWORD *)v58 = 2139095040;
        v53 = v58 + 4;
        v59 = (char *)*v48;
        v60 = (char *)*v47;
        if (*v48 != *v47)
        {
          do
          {
            v61 = *((_DWORD *)v59 - 1);
            v59 -= 4;
            *((_DWORD *)v58 - 1) = v61;
            v58 -= 4;
          }
          while (v59 != v60);
          v59 = (char *)*v47;
        }
        *v47 = v58;
        *v48 = v53;
        v47[2] = &v57[4 * v56];
        if (v59)
          operator delete(v59);
      }
      else
      {
        *v49 = 2139095040;
        v53 = v49 + 1;
      }
      *v48 = v53;
      v63 = (_DWORD *)a1[6];
      v62 = a1[7];
      if ((unint64_t)v63 >= v62)
      {
        v65 = ((char *)v63 - *v44) >> 2;
        if ((unint64_t)(v65 + 1) >> 62)
          goto LABEL_229;
        v66 = v62 - (_QWORD)*v44;
        v67 = v66 >> 1;
        if (v66 >> 1 <= (unint64_t)(v65 + 1))
          v67 = v65 + 1;
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
          v68 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v68 = v67;
        if (v68)
          v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v138, v68);
        else
          v69 = 0;
        v70 = &v69[4 * v65];
        *(_DWORD *)v70 = 2139095040;
        v64 = v70 + 4;
        v72 = (char *)a1[5];
        v71 = (char *)a1[6];
        if (v71 != v72)
        {
          do
          {
            v73 = *((_DWORD *)v71 - 1);
            v71 -= 4;
            *((_DWORD *)v70 - 1) = v73;
            v70 -= 4;
          }
          while (v71 != v72);
          v71 = *v44;
        }
        a1[5] = v70;
        a1[6] = v64;
        a1[7] = &v69[4 * v68];
        if (v71)
          operator delete(v71);
      }
      else
      {
        *v63 = 2139095040;
        v64 = v63 + 1;
      }
      a1[6] = v64;
      LOBYTE(v139[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), v139);
      v47 = (void **)a1[1];
      v48 = v47 + 1;
      v49 = v47[1];
      v50 = (char *)*v47;
    }
    if (*((_BYTE *)a1 + 32))
    {
      LODWORD(v139[0]) = (*(float (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v46);
      v142 = 2139095040;
      if (*(float *)v139 != INFINITY)
      {
LABEL_220:
        ++*((_DWORD *)a1 + 28);
        result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, 4, 0);
        if (!result)
          return result;
LABEL_224:
        *v137 = 1;
        return result;
      }
    }
    *(_QWORD *)(a1[8] + (((unint64_t)v46 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v46);
    v74 = a1[5];
    v75 = *(float *)(v74 + 4 * v46);
    *(_DWORD *)(v74 + 4 * v46) = 2139095040;
    v76 = *a1;
    v141 = 0;
    (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v76 + 136))(v76, v46, v139);
    while (1)
    {
      if (v139[0])
      {
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v139[0] + 24))(v139[0]) & 1) != 0)
          goto LABEL_212;
        if (v139[0])
        {
          v77 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v139[0] + 32))(v139[0]);
          goto LABEL_109;
        }
      }
      else if (v141 >= v139[2])
      {
LABEL_212:
        v135 = 1;
        goto LABEL_214;
      }
      v77 = v139[1] + 16 * v141;
LABEL_109:
      v78 = (void **)a1[1];
      v79 = v78 + 1;
      v80 = v78[1];
      v81 = (char *)*v78;
      v82 = ((char *)v80 - (_BYTE *)*v78) >> 2;
      if (v82 <= *(int *)(v77 + 12))
      {
        do
        {
          v84 = (unint64_t)v78[2];
          if ((unint64_t)v80 >= v84)
          {
            if ((v82 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v86 = v84 - (_QWORD)v81;
            v87 = v86 >> 1;
            if (v86 >> 1 <= v82 + 1)
              v87 = v82 + 1;
            if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
              v88 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v88 = v87;
            if (v88)
              v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v78 + 2), v88);
            else
              v89 = 0;
            v90 = &v89[4 * v82];
            *(_DWORD *)v90 = 2139095040;
            v85 = v90 + 4;
            v91 = (char *)*v79;
            v92 = (char *)*v78;
            if (*v79 != *v78)
            {
              do
              {
                v93 = *((_DWORD *)v91 - 1);
                v91 -= 4;
                *((_DWORD *)v90 - 1) = v93;
                v90 -= 4;
              }
              while (v91 != v92);
              v91 = (char *)*v78;
            }
            *v78 = v90;
            *v79 = v85;
            v78[2] = &v89[4 * v88];
            if (v91)
              operator delete(v91);
          }
          else
          {
            *v80 = 2139095040;
            v85 = v80 + 1;
          }
          *v79 = v85;
          v95 = (_DWORD *)a1[6];
          v94 = a1[7];
          if ((unint64_t)v95 >= v94)
          {
            v97 = ((char *)v95 - *v44) >> 2;
            if ((unint64_t)(v97 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v98 = v94 - (_QWORD)*v44;
            v99 = v98 >> 1;
            if (v98 >> 1 <= (unint64_t)(v97 + 1))
              v99 = v97 + 1;
            if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL)
              v100 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v100 = v99;
            if (v100)
              v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v138, v100);
            else
              v101 = 0;
            v102 = &v101[4 * v97];
            *(_DWORD *)v102 = 2139095040;
            v96 = v102 + 4;
            v104 = (char *)a1[5];
            v103 = (char *)a1[6];
            if (v103 != v104)
            {
              do
              {
                v105 = *((_DWORD *)v103 - 1);
                v103 -= 4;
                *((_DWORD *)v102 - 1) = v105;
                v102 -= 4;
              }
              while (v103 != v104);
              v103 = *v44;
            }
            a1[5] = v102;
            a1[6] = v96;
            a1[7] = &v101[4 * v100];
            if (v103)
              operator delete(v103);
          }
          else
          {
            *v95 = 2139095040;
            v96 = v95 + 1;
          }
          a1[6] = v96;
          LOBYTE(v142) = 0;
          std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v142);
          v78 = (void **)a1[1];
          v79 = v78 + 1;
          v80 = v78[1];
          v81 = (char *)*v78;
          v82 = ((char *)v80 - (_BYTE *)*v78) >> 2;
          v83 = *(int *)(v77 + 12);
        }
        while (v82 <= v83);
      }
      else
      {
        LODWORD(v83) = *(_DWORD *)(v77 + 12);
      }
      if (*((_BYTE *)a1 + 33))
      {
        v106 = (char *)a1[11];
        v107 = (char *)a1[12];
        v108 = (v107 - v106) >> 2;
        if (v108 <= (int)v83)
        {
          do
          {
            if ((unint64_t)v107 >= *v45)
            {
              v111 = v108 + 1;
              if ((v108 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v112 = *v45 - (_QWORD)v106;
              if (v112 >> 1 > v111)
                v111 = v112 >> 1;
              if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL)
                v113 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v113 = v111;
              if (v113)
              {
                v114 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v113);
                v106 = (char *)a1[11];
                v107 = (char *)a1[12];
              }
              else
              {
                v114 = 0;
              }
              v115 = &v114[4 * v108];
              *(_DWORD *)v115 = -1;
              v110 = v115 + 4;
              while (v107 != v106)
              {
                v116 = *((_DWORD *)v107 - 1);
                v107 -= 4;
                *((_DWORD *)v115 - 1) = v116;
                v115 -= 4;
              }
              a1[11] = v115;
              a1[12] = v110;
              a1[13] = &v114[4 * v113];
              if (v106)
              {
                operator delete(v106);
                v106 = (char *)a1[11];
              }
              else
              {
                v106 = v115;
              }
            }
            else
            {
              *(_DWORD *)v107 = -1;
              v110 = v107 + 4;
            }
            a1[12] = v110;
            v108 = (v110 - v106) >> 2;
            LODWORD(v83) = *(_DWORD *)(v77 + 12);
            v107 = v110;
          }
          while (v108 <= (int)v83);
          v109 = (int)v83;
          v78 = (void **)a1[1];
        }
        else
        {
          v109 = (int)v83;
        }
        if (*(_DWORD *)&v106[4 * v109] != *((_DWORD *)a1 + 28))
        {
          *((_DWORD *)*v78 + v109) = 2139095040;
          *(_DWORD *)(a1[5] + 4 * *(int *)(v77 + 12)) = 2139095040;
          v83 = *(int *)(v77 + 12);
          *(_QWORD *)(a1[8] + ((v83 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v83);
          *(_DWORD *)(a1[11] + 4 * v83) = *((_DWORD *)a1 + 28);
          v78 = (void **)a1[1];
          LODWORD(v83) = *(_DWORD *)(v77 + 12);
        }
      }
      v117 = (char *)*v78;
      v118 = *v44;
      v119 = NAN;
      if (v75 != -INFINITY)
      {
        v120 = *(float *)(v77 + 8);
        v119 = NAN;
        if (v120 != -INFINITY)
        {
          v119 = INFINITY;
          v121 = v120 == INFINITY || v75 == INFINITY;
          v122 = v75 + v120;
          if (!v121)
            v119 = v122;
        }
      }
      v123 = *(float *)&v117[4 * (int)v83];
      if (v123 >= v119)
        v124 = v119;
      else
        v124 = *(float *)&v117[4 * (int)v83];
      if (v119 == -INFINITY || v123 == -INFINITY)
        v124 = NAN;
      v127 = *((float *)a1 + 7);
      if (v124 > (float)(v123 + v127) || v123 > (float)(v127 + v124))
        break;
LABEL_209:
      if (v139[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v139[0] + 40))(v139[0]);
      else
        ++v141;
    }
    *(float *)&v117[4 * (int)v83] = v124;
    v129 = *(float *)&v118[4 * (int)v83];
    if (v129 >= v119)
      v130 = v119;
    else
      v130 = *(float *)&v118[4 * (int)v83];
    v132 = v119 == -INFINITY || v129 == -INFINITY;
    v133 = NAN;
    if (!v132)
      v133 = v130;
    *(float *)&v118[4 * (int)v83] = v133;
    if (*(float *)&v117[4 * (int)v83] != -INFINITY && (v133 < -INFINITY || v133 > -INFINITY))
    {
      v134 = **(_QWORD **)(a1[2] + 16);
      if (((*(_QWORD *)(a1[8] + (((unint64_t)*(int *)(v77 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> *(_DWORD *)(v77 + 12)) & 1) != 0)
      {
        (*(void (**)(void))(v134 + 40))();
      }
      else
      {
        (*(void (**)(void))(v134 + 24))();
        *(_QWORD *)(a1[8] + (((unint64_t)*(int *)(v77 + 12) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << *(_DWORD *)(v77 + 12);
      }
      goto LABEL_209;
    }
    v135 = 0;
    *v137 = 1;
LABEL_214:
    result = v139[0];
    if (v139[0])
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v139[0] + 8))(v139[0]);
    }
    else if (v140)
    {
      --*v140;
    }
  }
  while ((v135 & 1) != 0);
  return result;
}

void sub_1AD827EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _DWORD *a16)
{
  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  }
  else if (a16)
  {
    --*a16;
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::TropicalWeightTpl<float>>::resize(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<fst::TropicalWeightTpl<float>>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<fst::TropicalWeightTpl<float>>::__append(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 2)
  {
    if (a2)
    {
      v16 = 4 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 2);
    if (v11 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 2;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[4 * v12];
    v19 = &v18[4 * a2];
    v20 = 4 * a2;
    v21 = v18;
    do
    {
      *(_DWORD *)v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    v22 = &v15[4 * v14];
    v24 = (char *)*a1;
    v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        v25 = *((_DWORD *)v23 - 1);
        v23 -= 4;
        *((_DWORD *)v18 - 1) = v25;
        v18 -= 4;
      }
      while (v23 != v24);
      v23 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

_QWORD *fst::ShortestDistanceState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~ShortestDistanceState(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[11];
  if (v2)
  {
    a1[12] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[8];
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  return a1;
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::VectorFst(_QWORD *a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::VectorFstImpl(v2);
  *a1 = &unk_1E5D27E30;
  a1[1] = v2;
  return a1;
}

void sub_1AD82813C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D24B80;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 88);
}

float fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Final(uint64_t a1, int a2)
{
  return **(float **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NumArcs(uint64_t a1, int a2)
{
  return (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 32)
                 - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 24)) >> 4;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 8);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 16);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  fst::ArcBuffer<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetFromFst<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a3, a1, a2, a4, 2);
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1E5D27E30;
  result[1] = v3;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  *a3 = 0;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 8 * a2) + 24);
  v4 = *v5;
  v6 = (v5[1] - *v5) >> 4;
  if (v5[1] == *v5)
    v4 = 0;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

