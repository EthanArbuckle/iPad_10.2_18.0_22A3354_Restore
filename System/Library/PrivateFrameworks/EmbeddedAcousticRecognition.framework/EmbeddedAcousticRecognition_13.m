void sub_1ADD4FDC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::deque<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::~deque[abi:ne180100]((_QWORD *)(v1 - 208));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_1ADD4FDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _DWORD *a16)
{
  uint64_t v16;

  if (a13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  }
  else if (a16)
  {
    --*a16;
  }
  std::deque<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::~deque[abi:ne180100](v16 - 208);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v16 - 160);
  _Unwind_Resume(a1);
}

void fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::ConvertToMinimal(uint64_t a1, unsigned int **a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v6;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 == v4)
  {
    v6 = *a2;
  }
  else
  {
    v6 = *a2;
    do
    {
      if (fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::IsIsymbolOrFinal(a1, *v3))
      {
        *(_OWORD *)v6 = *(_OWORD *)v3;
        *((_QWORD *)v6 + 2) = *((_QWORD *)v3 + 2);
        v6 += 6;
      }
      v3 += 6;
    }
    while (v3 != v4);
    v3 = *a2;
  }
  std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::resize((uint64_t)a2, 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v3) >> 3));
}

uint64_t std::vector<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1ADD4FFE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

double std::deque<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  double result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  result = *(double *)(a2 + 16);
  *(double *)(v8 + 16) = result;
  ++a1[5];
  return result;
}

uint64_t fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Compare(int a1, float *a2, uint64_t *a3, float *a4, uint64_t *a5)
{
  float v5;
  float v6;
  float v7;
  float v8;
  uint64_t v9;
  int v11;
  std::vector<unsigned int>::pointer begin;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  std::vector<unsigned int>::pointer v17;
  signed int v18;
  unsigned int v19;
  signed int v20;
  BOOL v21;
  std::vector<unsigned int> v22;
  std::vector<unsigned int> v23;

  v5 = *a2;
  v6 = *a2 + a2[1];
  v7 = *a4;
  v8 = *a4 + a4[1];
  if (v6 < v8)
    return 1;
  if (v6 > v8)
    return 0xFFFFFFFFLL;
  if (v5 < v7)
    return 1;
  if (v5 > v7)
    return 0xFFFFFFFFLL;
  if (a3 == a5)
    return 0;
  memset(&v23, 0, sizeof(v23));
  memset(&v22, 0, sizeof(v22));
  v11 = a1 + 240;
  fst::LatticeStringRepository<int>::ConvertToVector(a1 + 240, a3, &v23);
  fst::LatticeStringRepository<int>::ConvertToVector(v11, a5, &v22);
  begin = v23.__begin_;
  v13 = (unint64_t)((char *)v23.__end_ - (char *)v23.__begin_) >> 2;
  v14 = (unint64_t)((char *)v22.__end_ - (char *)v22.__begin_) >> 2;
  if ((int)v13 > (int)v14)
  {
    v9 = 0xFFFFFFFFLL;
    goto LABEL_22;
  }
  if ((int)v13 < (int)v14)
  {
    v9 = 1;
    goto LABEL_22;
  }
  if ((int)v13 < 1)
  {
    v9 = 0;
LABEL_22:
    if (!v22.__begin_)
      goto LABEL_24;
    goto LABEL_23;
  }
  v16 = ((unint64_t)((char *)v23.__end_ - (char *)v23.__begin_) >> 2);
  v17 = v22.__begin_;
  while (1)
  {
    v19 = *begin++;
    v18 = v19;
    v20 = *v17++;
    v21 = v18 <= v20;
    if (v18 < v20)
      break;
    if (!v21)
    {
      v9 = 1;
      goto LABEL_23;
    }
    if (!--v16)
    {
      v9 = 0;
      goto LABEL_23;
    }
  }
  v9 = 0xFFFFFFFFLL;
LABEL_23:
  v22.__end_ = v22.__begin_;
  operator delete(v22.__begin_);
  begin = v23.__begin_;
LABEL_24:
  if (begin)
  {
    v23.__end_ = begin;
    operator delete(begin);
  }
  return v9;
}

void sub_1ADD501EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

void std::deque<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADD504E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 85;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 170;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

uint64_t fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::IsIsymbolOrFinal(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  __n128 v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char v15;
  std::vector<char>::value_type __x[8];
  uint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  float v21;
  int v22;
  float v23;
  float v24;

  v4 = *(_QWORD *)(a1 + 216);
  v5 = (uint64_t *)(a1 + 216);
  v6 = *(_QWORD *)(a1 + 224) - v4;
  v7 = (int)a2;
  if (v6 <= (int)a2)
  {
    v8 = (int)a2 + 1;
    __x[0] = 0;
    if (v8 <= v6)
    {
      if ((int)a2 + 1 < v6)
        *(_QWORD *)(a1 + 224) = v4 + v8;
    }
    else
    {
      std::vector<char>::__append((std::vector<char> *)(a1 + 216), v8 - v6, __x);
      v4 = *v5;
    }
  }
  v9 = *(unsigned __int8 *)(v4 + v7);
  if (v9 == 1)
    return 0;
  if (v9 == 2)
    return 1;
  *(_BYTE *)(v4 + v7) = 1;
  (*(void (**)(std::vector<char>::value_type *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 56) + 32))(__x, *(_QWORD *)(a1 + 56), a2);
  v24 = *(float *)__x;
  v23 = *(float *)&__x[4];
  v22 = 2139095040;
  v21 = INFINITY;
  v10.n128_u32[0] = *(_DWORD *)__x;
  if (*(float *)__x != INFINITY || (v10.n128_f32[0] = v23, v23 != v21))
    *(_BYTE *)(*v5 + v7) = 2;
  v11 = *(_QWORD *)(a1 + 56);
  v20 = 0;
  (*(void (**)(uint64_t, uint64_t, std::vector<char>::value_type *, __n128))(*(_QWORD *)v11 + 136))(v11, a2, __x, v10);
  while (*(_QWORD *)__x)
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x) & 1) != 0)
      goto LABEL_26;
    if (!*(_QWORD *)__x)
      goto LABEL_17;
    v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
LABEL_18:
    if (*(_DWORD *)v13)
    {
      v24 = 0.0;
      v24 = *(float *)(v13 + 8);
      v23 = 0.0;
      v23 = *(float *)(v13 + 12);
      v22 = 2139095040;
      v21 = INFINITY;
      v12.n128_f32[0] = v24;
      if (v24 != INFINITY || (v12.n128_f32[0] = v23, v23 != v21))
      {
        v15 = 0;
        *(_BYTE *)(*v5 + v7) = 2;
        goto LABEL_27;
      }
    }
    if (*(_QWORD *)__x)
      (*(void (**)(_QWORD))(**(_QWORD **)__x + 40))(*(_QWORD *)__x);
    else
      ++v20;
  }
  if (v20 < v18)
  {
LABEL_17:
    v13 = v17 + 20 * v20;
    goto LABEL_18;
  }
LABEL_26:
  v15 = 1;
LABEL_27:
  if (*(_QWORD *)__x)
  {
    (*(void (**)(_QWORD, __n128))(**(_QWORD **)__x + 8))(*(_QWORD *)__x, v12);
  }
  else if (v19)
  {
    --*v19;
  }
  if ((v15 & 1) != 0)
    return fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::IsIsymbolOrFinal(a1, a2);
  return 1;
}

void sub_1ADD50818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (a10)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  else if (a13)
  {
    --*a13;
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::__init_with_size[abi:ne180100]<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element*,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element*>(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *(_OWORD *)v7 = *(_OWORD *)a2;
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(a2 + 16);
      v7 += 24;
      a2 += 24;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1ADD508B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>>,std::reverse_iterator<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>*>,std::reverse_iterator<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>*>,std::reverse_iterator<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>>,std::reverse_iterator<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>*>,std::reverse_iterator<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>*>,std::reverse_iterator<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>>,std::reverse_iterator<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>>,std::reverse_iterator<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::ProcessFinal(uint64_t a1, int a2)
{
  float32x2_t **v2;
  float32x2_t *v3;
  float32x2_t *v4;
  char v6;
  uint64_t *v7;
  float32x2_t v9;
  uint64_t *v10;
  int32x2_t v11;
  char **v12;
  unint64_t v13;
  void **v14;
  unint64_t v15;
  char **v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  float32x2_t v29;
  float32x2_t v30;
  int32x2_t v31;
  float v32;
  int v33;
  float v34;

  v2 = *(float32x2_t ***)(*(_QWORD *)a1 + 8 * a2);
  v31 = vdup_n_s32(0x7F800000u);
  v3 = *v2;
  v4 = v2[1];
  if (*v2 == v4)
    return;
  v6 = 0;
  v7 = 0;
  do
  {
    (*(void (**)(float32x2_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 56) + 32))(&v29, *(_QWORD *)(a1 + 56), v3->u32[0]);
    v9 = vadd_f32(v3[2], v29);
    v30 = v9;
    v10 = (uint64_t *)v3[1];
    v34 = v9.f32[1];
    v29.i32[0] = v9.i32[0];
    v33 = 2139095040;
    v32 = INFINITY;
    if (v9.f32[0] != INFINITY || v34 != v32)
    {
      if ((v6 & 1) == 0)
        goto LABEL_8;
      if (fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Compare(a1, (float *)&v30, v10, (float *)&v31, v7) == 1)
      {
        v9 = v30;
LABEL_8:
        v31 = (int32x2_t)v9;
        v6 = 1;
        v7 = v10;
        goto LABEL_10;
      }
      v6 = 1;
    }
LABEL_10:
    v3 += 3;
  }
  while (v3 != v4);
  if ((v6 & 1) != 0)
  {
    v11 = v31;
    v12 = (char **)(*(_QWORD *)(a1 + 24) + 24 * a2);
    v14 = (void **)(v12 + 1);
    v13 = (unint64_t)v12[1];
    v16 = v12 + 2;
    v15 = (unint64_t)v12[2];
    if (v13 >= v15)
    {
      v18 = (uint64_t)(v13 - (_QWORD)*v12) >> 5;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 59)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v20 = v15 - (_QWORD)*v12;
      if (v20 >> 4 > v19)
        v19 = v20 >> 4;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0)
        v21 = 0x7FFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)v16, v21);
      v23 = &v22[32 * v18];
      v25 = &v22[32 * v24];
      *(_DWORD *)v23 = 0;
      *((_QWORD *)v23 + 1) = v7;
      *((_DWORD *)v23 + 4) = -1;
      *(int32x2_t *)(v23 + 20) = v11;
      v17 = v23 + 32;
      v26 = (char *)*v14;
      v27 = *v12;
      if (*v14 != *v12)
      {
        do
        {
          v28 = *((_OWORD *)v26 - 2);
          *((_DWORD *)v23 - 4) = *((_DWORD *)v26 - 4);
          *((_OWORD *)v23 - 2) = v28;
          *(_QWORD *)(v23 - 12) = *(_QWORD *)(v26 - 12);
          v23 -= 32;
          v26 -= 32;
        }
        while (v26 != v27);
        v26 = *v12;
      }
      *v12 = v23;
      *v14 = v17;
      *v16 = v25;
      if (v26)
        operator delete(v26);
    }
    else
    {
      *(_DWORD *)v13 = 0;
      *(_QWORD *)(v13 + 8) = v7;
      *(_DWORD *)(v13 + 16) = -1;
      v17 = (void *)(v13 + 32);
      *(int32x2_t *)(v13 + 20) = v11;
    }
    *v14 = v17;
    ++*(_DWORD *)(a1 + 48);
  }
}

void fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::ProcessTransitions(uint64_t a1, int a2)
{
  uint64_t *v3;
  float32x2_t **v4;
  float32x2_t *v5;
  float32x2_t *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  float32x2_t *v10;
  __int32 v11;
  int v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  int *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char *v23;
  _OWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  float v35;
  __int128 v36;
  float32x2_t v37;
  void *__p;
  char *v39;
  char *v40;
  _DWORD *v41;
  unint64_t v42;
  float v43;
  int v44;
  float v45;

  v3 = (uint64_t *)(a1 + 192);
  v4 = *(float32x2_t ***)(*(_QWORD *)a1 + 8 * a2);
  v5 = *v4;
  v6 = v4[1];
  if (*v4 == v6)
    goto LABEL_26;
  do
  {
    v7 = *(_QWORD *)(a1 + 56);
    v8 = v5->u32[0];
    v42 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v7 + 136))(v7, v8, &__p);
    while (1)
    {
      if (!__p)
      {
        if (v42 >= (unint64_t)v40)
          goto LABEL_23;
LABEL_8:
        v10 = (float32x2_t *)&v39[20 * v42];
        goto LABEL_9;
      }
      if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
        break;
      if (!__p)
        goto LABEL_8;
      v10 = (float32x2_t *)(*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
LABEL_9:
      if (v10->i32[0])
      {
        v35 = 0.0;
        v35 = v10[1].f32[0];
        v45 = 0.0;
        v45 = v10[1].f32[1];
        v44 = 2139095040;
        v43 = INFINITY;
        if (v35 != INFINITY || (v9.n128_f32[0] = v45, v45 != v43))
        {
          v36 = 0uLL;
          v37 = 0;
          v11 = v10[2].i32[0];
          v35 = v10->f32[0];
          LODWORD(v36) = v11;
          v37 = vadd_f32(v5[2], v10[1]);
          v12 = v10->i32[1];
          v13 = (uint64_t *)v5[1];
          if (v12)
            v13 = fst::LatticeStringRepository<int>::Successor((uint64_t **)(a1 + 240), (uint64_t)v13, v12);
          *((_QWORD *)&v36 + 1) = v13;
          v14 = *(_QWORD *)(a1 + 200);
          if (v14 >= *(_QWORD *)(a1 + 208))
          {
            v15 = std::vector<std::pair<int,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::__push_back_slow_path<std::pair<int,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element> const&>(v3, (uint64_t)&v35);
          }
          else
          {
            *(float *)v14 = v35;
            v9.n128_u64[1] = *((_QWORD *)&v36 + 1);
            *(_OWORD *)(v14 + 8) = v36;
            v9.n128_u64[0] = (unint64_t)v37;
            *(float32x2_t *)(v14 + 24) = v37;
            v15 = v14 + 32;
          }
          *(_QWORD *)(a1 + 200) = v15;
        }
      }
      if (__p)
        (*(void (**)(void *, __n128))(*(_QWORD *)__p + 40))(__p, v9);
      else
        ++v42;
    }
    if (__p)
    {
      (*(void (**)(void))(*(_QWORD *)__p + 8))();
      goto LABEL_25;
    }
LABEL_23:
    if (v41)
      --*v41;
LABEL_25:
    v5 += 3;
  }
  while (v5 != v6);
LABEL_26:
  v16 = *(int **)(a1 + 192);
  v17 = *(int **)(a1 + 200);
  v18 = 126 - 2 * __clz(((char *)v17 - (char *)v16) >> 5);
  if (v17 == v16)
    v19 = 0;
  else
    v19 = v18;
  std::__introsort<std::_ClassicAlgPolicy,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element> *,false>(v16, v17, (uint64_t)&__p, v19, 1);
  v20 = *(_QWORD *)(a1 + 192);
  v21 = *(_QWORD *)(a1 + 200);
  __p = 0;
  v39 = 0;
  v40 = 0;
  while (v20 != v21)
  {
    v22 = *(_DWORD *)v20;
    v23 = (char *)__p;
    v39 = (char *)__p;
    while (*(_DWORD *)v20 == v22)
    {
      v24 = (_OWORD *)(v20 + 8);
      if (v23 >= v40)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * ((v23 - (_BYTE *)__p) >> 3);
        v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((v40 - (_BYTE *)__p) >> 3) > v26)
          v26 = 0x5555555555555556 * ((v40 - (_BYTE *)__p) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v40 - (_BYTE *)__p) >> 3) >= 0x555555555555555)
          v27 = 0xAAAAAAAAAAAAAAALL;
        else
          v27 = v26;
        v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v40, v27);
        v30 = &v28[24 * v25];
        *(_OWORD *)v30 = *v24;
        *((_QWORD *)v30 + 2) = *(_QWORD *)(v20 + 24);
        v32 = (char *)__p;
        v31 = v39;
        v33 = v30;
        if (v39 != __p)
        {
          do
          {
            *(_OWORD *)(v33 - 24) = *(_OWORD *)(v31 - 24);
            *((_QWORD *)v33 - 1) = *((_QWORD *)v31 - 1);
            v33 -= 24;
            v31 -= 24;
          }
          while (v31 != v32);
          v31 = (char *)__p;
        }
        v23 = v30 + 24;
        __p = v33;
        v39 = v30 + 24;
        v40 = &v28[24 * v29];
        if (v31)
          operator delete(v31);
      }
      else
      {
        *(_OWORD *)v23 = *v24;
        *((_QWORD *)v23 + 2) = *(_QWORD *)(v20 + 24);
        v23 += 24;
      }
      v39 = v23;
      v20 += 32;
      if (v20 == v21)
      {
        v20 = v21;
        break;
      }
    }
    fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::ProcessTransition(a1, a2, v22, (float **)&__p);
  }
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 192);
  if (__p)
  {
    v39 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1ADD5100C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::ProcessTransition(uint64_t a1, int a2, int a3, float **a4)
{
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  float32x2_t v11;
  char **v12;
  unint64_t v13;
  void **v14;
  unint64_t v15;
  char **v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  _QWORD *v29;
  float32x2_t v30;
  float32x2_t v31;
  uint64_t *v32;

  fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::MakeSubsetUnique(a1, a4);
  v32 = 0;
  fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::NormalizeSubset(a1, a4, (uint64_t)&v31, &v32);
  v29 = 0;
  v8 = fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::InitialToStateId(a1, (uint64_t *)a4, (unint64_t *)&v30, &v29);
  v9 = fst::LatticeStringRepository<int>::Concatenate((uint64_t **)(a1 + 240), v32, v29);
  v10 = v9;
  v32 = v9;
  v11 = vadd_f32(v31, v30);
  v31 = v11;
  v12 = (char **)(*(_QWORD *)(a1 + 24) + 24 * a2);
  v14 = (void **)(v12 + 1);
  v13 = (unint64_t)v12[1];
  v16 = v12 + 2;
  v15 = (unint64_t)v12[2];
  if (v13 >= v15)
  {
    v18 = (uint64_t)(v13 - (_QWORD)*v12) >> 5;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v20 = v15 - (_QWORD)*v12;
    if (v20 >> 4 > v19)
      v19 = v20 >> 4;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0)
      v21 = 0x7FFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)v16, v21);
    v23 = &v22[32 * v18];
    v25 = &v22[32 * v24];
    *(_DWORD *)v23 = a3;
    *((_QWORD *)v23 + 1) = v10;
    *((_DWORD *)v23 + 4) = v8;
    *(float32x2_t *)(v23 + 20) = v11;
    v17 = v23 + 32;
    v26 = (char *)*v14;
    v27 = *v12;
    if (*v14 != *v12)
    {
      do
      {
        v28 = *((_OWORD *)v26 - 2);
        *((_DWORD *)v23 - 4) = *((_DWORD *)v26 - 4);
        *((_OWORD *)v23 - 2) = v28;
        *(_QWORD *)(v23 - 12) = *(_QWORD *)(v26 - 12);
        v23 -= 32;
        v26 -= 32;
      }
      while (v26 != v27);
      v26 = *v12;
    }
    *v12 = v23;
    *v14 = v17;
    *v16 = v25;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *(_DWORD *)v13 = a3;
    *(_QWORD *)(v13 + 8) = v9;
    *(_DWORD *)(v13 + 16) = v8;
    v17 = (void *)(v13 + 32);
    *(float32x2_t *)(v13 + 20) = v11;
  }
  *v14 = v17;
  ++*(_DWORD *)(a1 + 48);
}

uint64_t std::vector<std::pair<int,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::__push_back_slow_path<std::pair<int,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v19 = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  v11 = &v10[32 * v4];
  __p = v10;
  v16 = v11;
  v18 = &v10[32 * v12];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  v17 = v11 + 32;
  std::vector<std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::__swap_out_circular_buffer(a1, &__p);
  v13 = a1[1];
  if (v17 != v16)
    v17 += (v16 - v17 + 31) & 0xFFFFFFFFFFFFFFE0;
  if (__p)
    operator delete(__p);
  return v13;
}

void sub_1ADD51310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element> *,false>(int *a1, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  char v20;
  BOOL v21;
  int v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_DWORD *)(a2 - 32);
      v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1 || v6 <= v7 && *(_DWORD *)(a2 - 24) < *(_DWORD *)(a1 + 8))
      {
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a2 - 32) = v7;
        v8 = *(_OWORD *)(a1 + 8);
        v9 = *(_QWORD *)(a1 + 24);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a2 - 24) = v8;
        *(_QWORD *)(a2 - 8) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((int *)a1, (int *)(a1 + 32), (int *)(a2 - 32));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>(a1, a1 + 32, a1 + 64, a1 + 96, (int *)(a2 - 32));
      return 1;
    default:
      v10 = a1 + 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::PairComparator &,std::pair<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> *>((int *)a1, (int *)(a1 + 32), (int *)(a1 + 64));
      v11 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  do
  {
    v14 = *(_DWORD *)v11;
    if (*(_DWORD *)v11 >= *(_DWORD *)v10)
    {
      if (v14 > *(_DWORD *)v10)
        goto LABEL_20;
      v15 = *(_DWORD *)(v11 + 8);
      if (v15 >= *(_DWORD *)(v10 + 8))
        goto LABEL_20;
    }
    else
    {
      v15 = *(_DWORD *)(v11 + 8);
    }
    v22 = *(_QWORD *)(v11 + 12);
    v23 = *(_DWORD *)(v11 + 20);
    v16 = *(_QWORD *)(v11 + 24);
    *(_DWORD *)v11 = *(_DWORD *)v10;
    v17 = (_DWORD *)(v10 + 8);
    *(_OWORD *)(v11 + 8) = *(_OWORD *)(v10 + 8);
    *(_QWORD *)(v11 + 24) = *(_QWORD *)(v10 + 24);
    if (v10 == a1)
    {
LABEL_15:
      v10 = a1;
    }
    else
    {
      v18 = v12;
      while (1)
      {
        v19 = a1 + v18;
        v20 = *(_DWORD *)(a1 + v18 + 32);
        if (v14 >= v20)
        {
          if (v14 > v20)
            goto LABEL_16;
          v21 = a1 + v18;
          if (v15 >= *(_DWORD *)(a1 + v18 + 40))
            break;
        }
        v17 = (_DWORD *)(v10 - 24);
        v10 -= 32;
        *(_DWORD *)(v19 + 64) = v20;
        *(_OWORD *)(v19 + 72) = *(_OWORD *)(v19 + 40);
        *(_QWORD *)(v19 + 88) = *(_QWORD *)(v19 + 56);
        v18 -= 32;
        if (v18 == -64)
        {
          v17 = (_DWORD *)(a1 + 8);
          goto LABEL_15;
        }
      }
      v17 = (_DWORD *)(v21 + 72);
      v10 = v21 + 64;
    }
LABEL_16:
    *(_DWORD *)v10 = v14;
    *v17 = v15;
    *(_QWORD *)(v10 + 12) = v22;
    *(_DWORD *)(v10 + 20) = v23;
    *(_QWORD *)(v10 + 24) = v16;
    if (++v13 == 8)
      return v11 + 32 == a2;
LABEL_20:
    v10 = v11;
    v12 += 32;
    v11 += 32;
  }
  while (v11 != a2);
  return 1;
}

void fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::MakeSubsetUnique(int a1, float **a2)
{
  float *v3;
  float *v4;
  unint64_t v6;
  float *v7;
  float *v8;
  float *v9;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 == v4)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = *a2;
    while (1)
    {
      if (v3 != v7)
      {
        *(_OWORD *)v7 = *(_OWORD *)v3;
        *((_QWORD *)v7 + 2) = *((_QWORD *)v3 + 2);
      }
      if (v3 + 6 == v4)
        break;
      v8 = v3 + 10;
      while (*((_DWORD *)v8 - 4) == *(_DWORD *)v7)
      {
        if (fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Compare(a1, v8, *((uint64_t **)v8 - 1), v7 + 4, *((uint64_t **)v7 + 1)) == 1)
        {
          *((_QWORD *)v7 + 1) = *((_QWORD *)v8 - 1);
          *((_QWORD *)v7 + 2) = *(_QWORD *)v8;
        }
        v9 = v8 + 2;
        v8 += 6;
        if (v9 == v4)
          goto LABEL_14;
      }
      v7 += 6;
      ++v6;
      v3 = v8 - 4;
      if (v8 - 4 == v4)
        goto LABEL_16;
    }
LABEL_14:
    ++v6;
  }
LABEL_16:
  std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::resize((uint64_t)a2, v6);
}

void fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::NormalizeSubset(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t **v9;
  unint64_t v10;
  float v11;
  float v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  _QWORD *v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int *begin;
  unint64_t v31;
  uint64_t *v32;
  uint64_t **v33;
  uint64_t **v35;
  std::vector<unsigned int> v36;
  _QWORD v37[35];

  v6 = *a2;
  v7 = a2[1];
  if (*a2 == v7)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"[empty subset]", 14);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
    }
    *a4 = 0;
    *(int32x2_t *)a3 = vdup_n_s32(0x7F800000u);
  }
  else
  {
    memset(&v36, 0, sizeof(v36));
    v9 = (uint64_t **)(a1 + 240);
    fst::LatticeStringRepository<int>::ConvertToVector(a1 + 240, *(uint64_t **)(v6 + 8), &v36);
    v10 = (v7 - v6) / 24;
    v12 = *(float *)(*a2 + 16);
    v11 = *(float *)(*a2 + 20);
    v35 = a4;
    if (v10 >= 2)
    {
      v13 = 0;
      v14 = v10 - 1;
      do
      {
        v15 = *a2 + v13;
        v16 = *(float *)(v15 + 40);
        v17 = *(float *)(v15 + 44);
        if ((float)(v12 + v11) >= (float)(v16 + v17))
        {
          if ((float)(v12 + v11) > (float)(v16 + v17) || (v12 >= v16 ? (v18 = v12 <= v16) : (v18 = 1), !v18))
          {
            v11 = *(float *)(v15 + 44);
            v12 = *(float *)(v15 + 40);
          }
        }
        fst::LatticeStringRepository<int>::ReduceToCommonPrefix((int)v9, *(uint64_t **)(v15 + 32), &v36);
        v13 += 24;
        --v14;
      }
      while (v14);
    }
    v19 = 0;
    v20 = v36.__end_ - v36.__begin_;
    if (v10 <= 1)
      v21 = 1;
    else
      v21 = v10;
    v22 = *a2;
    do
    {
      v23 = *(float *)(v22 + v19 + 16) - v12;
      v24 = *(float *)(v22 + v19 + 20) - v11;
      if (v23 == -INFINITY || v24 == -INFINITY)
      {
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v37);
          v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"LatticeWeightTpl::Divide, NaN or invalid number produced. ", 58);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"[dividing by zero?]  Returning zero.", 36);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v37);
          v22 = *a2;
        }
        v24 = INFINITY;
        v23 = INFINITY;
      }
      else
      {
        v27 = v23 == INFINITY;
        if (v24 == INFINITY)
          v27 = 1;
        if (v27)
        {
          v24 = INFINITY;
          v23 = INFINITY;
        }
      }
      v28 = v22 + v19;
      *(float *)(v28 + 16) = v23;
      *(float *)(v28 + 20) = v24;
      v29 = fst::LatticeStringRepository<int>::RemovePrefix(v9, *(uint64_t **)(v28 + 8), v20);
      v22 = *a2;
      *(_QWORD *)(*a2 + v19 + 8) = v29;
      v19 += 24;
      --v21;
    }
    while (v21);
    begin = v36.__begin_;
    if (v36.__end_ == v36.__begin_)
    {
      v32 = 0;
      v33 = v35;
    }
    else
    {
      v31 = 0;
      v32 = 0;
      v33 = v35;
      do
      {
        v32 = fst::LatticeStringRepository<int>::Successor(v9, (uint64_t)v32, begin[v31++]);
        begin = v36.__begin_;
      }
      while (v31 < v36.__end_ - v36.__begin_);
    }
    *v33 = v32;
    *(float *)a3 = v12;
    *(float *)(a3 + 4) = v11;
    if (begin)
    {
      v36.__end_ = begin;
      operator delete(begin);
    }
  }
}

void sub_1ADD51D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a14);
  _Unwind_Resume(a1);
}

uint64_t fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::InitialToStateId(uint64_t a1, uint64_t *a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v16;
  __int128 v17;
  unint64_t v18;
  void *__p;
  void *v20;
  uint64_t v21;
  uint64_t *v22[34];
  float v23;
  int v24;

  v8 = a1 + 128;
  v22[0] = a2;
  v9 = std::__hash_table<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::find<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*>((_QWORD *)(a1 + 128), v22);
  if (v9)
  {
    v10 = v9;
    *a3 = (unint64_t)v9[5];
    *a4 = v9[4];
    LODWORD(v22[0]) = 0;
    LODWORD(v22[0]) = *((_DWORD *)v9 + 10);
    LODWORD(__p) = 0;
    LODWORD(__p) = *((_DWORD *)v9 + 11);
    LODWORD(v17) = 2139095040;
    LODWORD(v16) = 2139095040;
    if (*(float *)v22 == INFINITY && *(float *)&__p == *(float *)&v16 && kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Zero weight!", 12);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    }
    return *((unsigned int *)v10 + 6);
  }
  else
  {
    __p = 0;
    v20 = 0;
    v21 = 0;
    std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::__init_with_size[abi:ne180100]<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element*,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element*>((char *)&__p, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
    fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::EpsilonClosure(a1, (uint64_t *)&__p);
    fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::ConvertToMinimal(a1, (unsigned int **)&__p);
    fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::NormalizeSubset(a1, &__p, (uint64_t)&v18, (uint64_t **)&v17 + 1);
    v11 = fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::MinimalToStateId((uint64_t **)a1, (uint64_t *)&__p);
    v12 = v18;
    *a3 = v18;
    *a4 = *((_QWORD *)&v17 + 1);
    LODWORD(v16) = HIDWORD(v12);
    LODWORD(v22[0]) = v12;
    v24 = 2139095040;
    v23 = INFINITY;
    if (*(float *)&v12 == INFINITY && *(float *)&v16 == v23 && kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Zero weight!", 12);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    }
    v13 = operator new();
    *(_QWORD *)v13 = 0;
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::__init_with_size[abi:ne180100]<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element*,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element*>((char *)v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
    v16 = (uint64_t *)v13;
    LODWORD(v17) = v11;
    v22[0] = (uint64_t *)&v16;
    v14 = (char *)std::__hash_table<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::__emplace_unique_key_args<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::piecewise_construct_t const&,std::tuple<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const* const&>,std::tuple<>>(v8, &v16, (uint64_t)&std::piecewise_construct, v22);
    *(_OWORD *)(v14 + 24) = v17;
    *((_QWORD *)v14 + 5) = v18;
    *(_DWORD *)(a1 + 52) -= 1431655765 * ((unint64_t)(v16[1] - *v16) >> 3);
    if (__p)
    {
      v20 = __p;
      operator delete(__p);
    }
  }
  return v11;
}

void sub_1ADD52014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a16);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::MinimalToStateId(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  int v34;
  void *__p;
  void *v37;
  uint64_t v38;
  uint64_t *v39;

  v4 = (uint64_t)(a1 + 11);
  __p = a2;
  v5 = std::__hash_table<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::find<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*>(a1 + 11, (uint64_t **)&__p);
  if (v5)
    return *((unsigned int *)v5 + 6);
  v7 = (char *)a1[3];
  v8 = (char *)a1[4];
  v9 = operator new();
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = 0;
  std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::__init_with_size[abi:ne180100]<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element*,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element*>((char *)v9, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v39 = (uint64_t *)v9;
  v10 = (unint64_t)a1[2];
  v11 = a1[1];
  if ((unint64_t)v11 >= v10)
  {
    v13 = v11 - *a1;
    if ((unint64_t)(v13 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = v10 - (_QWORD)*a1;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v13 + 1))
      v15 = v13 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v16);
    else
      v17 = 0;
    v18 = (uint64_t *)&v17[8 * v13];
    v19 = &v17[8 * v16];
    *v18 = v9;
    v12 = (char *)(v18 + 1);
    v21 = (char *)*a1;
    v20 = (char *)a1[1];
    if (v20 != (char *)*a1)
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *--v18 = v22;
      }
      while (v20 != v21);
      v20 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = (uint64_t *)v12;
    a1[2] = (uint64_t *)v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v11 = v9;
    v12 = (char *)(v11 + 1);
  }
  a1[1] = (uint64_t *)v12;
  *((_DWORD *)a1 + 13) -= 1431655765 * ((unint64_t)(v39[1] - *v39) >> 3);
  __p = 0;
  v37 = 0;
  v38 = 0;
  std::vector<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>>::push_back[abi:ne180100]((uint64_t *)a1 + 3, (uint64_t)&__p);
  v6 = -1431655765 * ((unint64_t)(v8 - v7) >> 3);
  if (__p)
  {
    v37 = __p;
    operator delete(__p);
  }
  __p = &v39;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int>>>::__emplace_unique_key_args<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::piecewise_construct_t const&,std::tuple<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*&&>,std::tuple<>>(v4, &v39, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)+ 6) = v6;
  v23 = (unint64_t)a1[23];
  v24 = (char *)a1[22];
  if ((unint64_t)v24 >= v23)
  {
    v26 = (char *)a1[21];
    v27 = (v24 - v26) >> 2;
    if ((unint64_t)(v27 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v28 = v23 - (_QWORD)v26;
    v29 = (uint64_t)(v23 - (_QWORD)v26) >> 1;
    if (v29 <= v27 + 1)
      v29 = v27 + 1;
    if (v28 >= 0x7FFFFFFFFFFFFFFCLL)
      v30 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v30 = v29;
    if (v30)
    {
      v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 23), v30);
      v26 = (char *)a1[21];
      v24 = (char *)a1[22];
    }
    else
    {
      v31 = 0;
    }
    v32 = &v31[4 * v27];
    v33 = &v31[4 * v30];
    *(_DWORD *)v32 = v6;
    v25 = v32 + 4;
    while (v24 != v26)
    {
      v34 = *((_DWORD *)v24 - 1);
      v24 -= 4;
      *((_DWORD *)v32 - 1) = v34;
      v32 -= 4;
    }
    a1[21] = (uint64_t *)v32;
    a1[22] = (uint64_t *)v25;
    a1[23] = (uint64_t *)v33;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *(_DWORD *)v24 = v6;
    v25 = v24 + 4;
  }
  a1[22] = (uint64_t *)v25;
  return v6;
}

void sub_1ADD52320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::RebuildRepository(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *i;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  void *__p;
  uint64_t *v59;
  char *v60;
  char v61;

  __p = 0;
  v59 = 0;
  v60 = 0;
  v2 = a1[3];
  v3 = a1[4];
  if (v3 == v2)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(v2 + 24 * v5);
      if (*(_QWORD *)(v2 + 24 * v5 + 8) != v6)
      {
        v7 = 0;
        do
        {
          v8 = (uint64_t *)(v6 + 32 * v7 + 8);
          if (v4 >= (uint64_t *)v60)
          {
            v9 = ((char *)v4 - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v9 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v10 = (v60 - (_BYTE *)__p) >> 2;
            if (v10 <= v9 + 1)
              v10 = v9 + 1;
            if ((unint64_t)(v60 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
              v11 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v11 = v10;
            if (v11)
              v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v60, v11);
            else
              v12 = 0;
            v13 = (uint64_t *)&v12[8 * v9];
            *v13 = *v8;
            v4 = v13 + 1;
            v15 = (uint64_t *)__p;
            v14 = v59;
            if (v59 != __p)
            {
              do
              {
                v16 = *--v14;
                *--v13 = v16;
              }
              while (v14 != v15);
              v14 = (uint64_t *)__p;
            }
            __p = v13;
            v59 = v4;
            v60 = &v12[8 * v11];
            if (v14)
              operator delete(v14);
          }
          else
          {
            *v4++ = *v8;
          }
          v59 = v4;
          ++v7;
          v2 = a1[3];
          v17 = (uint64_t *)(v2 + 24 * v5);
          v6 = *v17;
        }
        while (v7 < (v17[1] - *v17) >> 5);
        v3 = a1[4];
      }
      ++v5;
    }
    while (v5 < 0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 3));
  }
  v18 = *a1;
  v19 = a1[1];
  if (v19 != *a1)
  {
    v20 = 0;
    do
    {
      v21 = **(_QWORD **)(v18 + 8 * v20);
      if (*(_QWORD *)(*(_QWORD *)(v18 + 8 * v20) + 8) != v21)
      {
        v22 = 0;
        do
        {
          v23 = (uint64_t *)(v21 + 24 * v22 + 8);
          if (v4 >= (uint64_t *)v60)
          {
            v24 = ((char *)v4 - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v24 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v25 = (v60 - (_BYTE *)__p) >> 2;
            if (v25 <= v24 + 1)
              v25 = v24 + 1;
            if ((unint64_t)(v60 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
              v26 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v26 = v25;
            if (v26)
              v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v60, v26);
            else
              v27 = 0;
            v28 = (uint64_t *)&v27[8 * v24];
            *v28 = *v23;
            v4 = v28 + 1;
            v30 = (uint64_t *)__p;
            v29 = v59;
            if (v59 != __p)
            {
              do
              {
                v31 = *--v29;
                *--v28 = v31;
              }
              while (v29 != v30);
              v29 = (uint64_t *)__p;
            }
            __p = v28;
            v59 = v4;
            v60 = &v27[8 * v26];
            if (v29)
              operator delete(v29);
          }
          else
          {
            *v4++ = *v23;
          }
          v59 = v4;
          ++v22;
          v18 = *a1;
          v32 = *(uint64_t **)(*a1 + 8 * v20);
          v21 = *v32;
        }
        while (v22 < 0xAAAAAAAAAAAAAAABLL * ((v32[1] - *v32) >> 3));
        v19 = a1[1];
      }
      ++v20;
    }
    while (v20 < (v19 - v18) >> 3);
  }
  for (i = (_QWORD *)a1[18]; i; i = (_QWORD *)*i)
  {
    v34 = (uint64_t *)i[2];
    v57 = i[4];
    v35 = *v34;
    if (v34[1] != *v34)
    {
      v36 = 0;
      do
      {
        v37 = (uint64_t *)(v35 + 24 * v36 + 8);
        if (v4 >= (uint64_t *)v60)
        {
          v38 = ((char *)v4 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v38 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v39 = (v60 - (_BYTE *)__p) >> 2;
          if (v39 <= v38 + 1)
            v39 = v38 + 1;
          if ((unint64_t)(v60 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v40 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v40 = v39;
          if (v40)
            v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v60, v40);
          else
            v41 = 0;
          v42 = (uint64_t *)&v41[8 * v38];
          *v42 = *v37;
          v4 = v42 + 1;
          v44 = (uint64_t *)__p;
          v43 = v59;
          if (v59 != __p)
          {
            do
            {
              v45 = *--v43;
              *--v42 = v45;
            }
            while (v43 != v44);
            v43 = (uint64_t *)__p;
          }
          __p = v42;
          v59 = v4;
          v60 = &v41[8 * v40];
          if (v43)
            operator delete(v43);
        }
        else
        {
          *v4++ = *v37;
        }
        v59 = v4;
        ++v36;
        v35 = *v34;
      }
      while (v36 < 0xAAAAAAAAAAAAAAABLL * ((v34[1] - *v34) >> 3));
    }
    if (v4 >= (uint64_t *)v60)
    {
      v46 = ((char *)v4 - (_BYTE *)__p) >> 3;
      if ((unint64_t)(v46 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v47 = (v60 - (_BYTE *)__p) >> 2;
      if (v47 <= v46 + 1)
        v47 = v46 + 1;
      if ((unint64_t)(v60 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
        v48 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v48 = v47;
      if (v48)
        v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v60, v48);
      else
        v49 = 0;
      v50 = (uint64_t *)&v49[8 * v46];
      *v50 = v57;
      v4 = v50 + 1;
      v52 = (uint64_t *)__p;
      v51 = v59;
      if (v59 != __p)
      {
        do
        {
          v53 = *--v51;
          *--v50 = v53;
        }
        while (v51 != v52);
        v51 = (uint64_t *)__p;
      }
      __p = v50;
      v59 = v4;
      v60 = &v49[8 * v48];
      if (v51)
        operator delete(v51);
    }
    else
    {
      *v4++ = v57;
    }
    v59 = v4;
  }
  v54 = 126 - 2 * __clz(((char *)v4 - (_BYTE *)__p) >> 3);
  if (v4 == __p)
    v55 = 0;
  else
    v55 = v54;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**,false>((uint64_t)__p, (unint64_t *)v4, (uint64_t)&v61, v55, 1);
  v56 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<fst::LatticeStringRepository<int>::Entry const**>,std::__wrap_iter<fst::LatticeStringRepository<int>::Entry const**>,std::__equal_to &>((uint64_t *)__p, v59);
  if (v59 != v56)
    v59 = v56;
  fst::LatticeStringRepository<int>::Rebuild((uint64_t)(a1 + 30), (uint64_t ***)&__p);
  if (__p)
  {
    v59 = (uint64_t *)__p;
    operator delete(__p);
  }
}

void sub_1ADD52880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::FreeMostMemory(uint64_t a1)
{
  uint64_t v2;
  _QWORD *i;
  uint64_t v4;
  void *v5;
  _QWORD *j;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    *(_QWORD *)(a1 + 56) = 0;
  }
  for (i = *(_QWORD **)(a1 + 104); i; i = (_QWORD *)*i)
  {
    v4 = i[2];
    if (v4)
    {
      v5 = *(void **)v4;
      if (*(_QWORD *)v4)
      {
        *(_QWORD *)(v4 + 8) = v5;
        operator delete(v5);
      }
      MEMORY[0x1AF44D190](v4, 0x20C40960023A9);
    }
  }
  v13 = 0u;
  v14 = 0u;
  v15 = 0x3A8000003F800000;
  std::__hash_table<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>>>::swap((uint64_t)&v13, a1 + 88);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v13);
  for (j = *(_QWORD **)(a1 + 144); j; j = (_QWORD *)*j)
  {
    v7 = j[2];
    if (v7)
    {
      v8 = *(void **)v7;
      if (*(_QWORD *)v7)
      {
        *(_QWORD *)(v7 + 8) = v8;
        operator delete(v8);
      }
      MEMORY[0x1AF44D190](v7, 0x20C40960023A9);
    }
  }
  v13 = 0u;
  v14 = 0u;
  v15 = 0x3A8000003F800000;
  std::__hash_table<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>>>::swap((uint64_t)&v13, a1 + 128);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v13);
  v9 = *(void **)a1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  if (v9)
    operator delete(v9);
  v10 = *(void **)(a1 + 216);
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  if (v10)
    operator delete(v10);
  v11 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  if (v11)
    operator delete(v11);
  v12 = *(void **)(a1 + 192);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  if (v12)
    operator delete(v12);
}

uint64_t fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::~LatticeDeterminizer(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v7;

  fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::FreeMostMemory(a1);
  fst::LatticeStringRepository<int>::~LatticeStringRepository((_QWORD *)(a1 + 240));
  v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 192);
  if (v3)
  {
    *(_QWORD *)(a1 + 200) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 168);
  if (v4)
  {
    *(_QWORD *)(a1 + 176) = v4;
    operator delete(v4);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 128);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 88);
  v7 = (void **)(a1 + 24);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v5 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>> &,fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WeightType &,void>@<X0>(uint64_t *a1@<X1>, int *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x88uLL);
  result = std::__shared_ptr_emplace<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>> &,fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WeightType &,std::allocator<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADD52B10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>> &,fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WeightType &,std::allocator<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,0>(_QWORD *a1, uint64_t *a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D410D0;
  fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InterpolateDeterministicOnDemandFst((uint64_t)(a1 + 3), a2, *a3, 1);
  return a1;
}

void sub_1ADD52B64(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>,std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>,fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,std::vector<int> const&,void>@<X0>(uint64_t (****a1)(_QWORD)@<X1>, unsigned int **a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::__shared_ptr_emplace[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,std::vector<int> const&,std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADD52BC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>::__shared_ptr_emplace[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,std::vector<int> const&,std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>,0>(_QWORD *a1, uint64_t (****a2)(_QWORD), unsigned int **a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D41140;
  fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::LeftContextDeterministicOnDemandFst((uint64_t)(a1 + 3), *a2, a3);
  return a1;
}

void sub_1ADD52C14(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void NgramProbArrayTrie::~NgramProbArrayTrie(NgramProbArrayTrie *this)
{
  *(_QWORD *)this = &unk_1E5D16BA8;
  Trie<unsigned int,ZeroArray<double>>::~Trie((char *)this + 24);
}

{
  *(_QWORD *)this = &unk_1E5D16BA8;
  Trie<unsigned int,ZeroArray<double>>::~Trie((char *)this + 24);
  JUMPOUT(0x1AF44D190);
}

void BayesMix::BayesMix(BayesMix *this, Vocab *a2, LM *a3, LM *a4, int a5, double a6, double a7)
{
  uint64_t v14;
  int *v15;
  uint64_t v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  std::locale v19;

  LM::LM(this, a2);
  *(_QWORD *)v14 = &off_1E5D177B0;
  *(_DWORD *)(v14 + 152) = 2;
  *(_QWORD *)(v14 + 160) = 0x200000000;
  v15 = (int *)(v14 + 160);
  *(_QWORD *)(v14 + 168) = 0;
  *(_DWORD *)(v14 + 176) = 0;
  Array<double>::alloc(v14 + 160, 1, 0);
  v16 = Array<double>::operator[](v15, 0);
  *((_QWORD *)this + 26) = 0x200000000;
  *((_QWORD *)this + 23) = v16;
  *((_DWORD *)this + 48) = a5;
  *((double *)this + 25) = a7;
  *((_QWORD *)this + 27) = 0;
  *((_DWORD *)this + 56) = 0;
  Array<LM *>::alloc((uint64_t)this + 208, 1, 0);
  *((_WORD *)this + 116) = 0;
  NgramProbArrayTrie::NgramProbArrayTrie((BayesMix *)((char *)this + 240), a2, a5, 2);
  if (a6 < 0.0 || a6 > 1.0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"warning: mixture prior out of range: ", 37);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
    v18 = std::locale::use_facet(&v19, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
    std::locale::~locale(&v19);
    std::ostream::put();
    a6 = 0.5;
    std::ostream::flush();
  }
  *(_QWORD *)Array<LM *>::operator[]((int *)this + 52, 0) = a3;
  *(_QWORD *)Array<LM *>::operator[]((int *)this + 52, 1) = a4;
  *(double *)Array<double>::operator[](v15, 0) = a6;
  *(double *)Array<double>::operator[](v15, 1) = 1.0 - a6;
}

void sub_1ADD52E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  LM *v10;
  uint64_t v12;
  uint64_t v13;

  std::locale::~locale(&a10);
  *((_QWORD *)v10 + 30) = &unk_1E5D16BA8;
  Trie<unsigned int,ZeroArray<double>>::~Trie((char *)v10 + 264);
  v12 = *((_QWORD *)v10 + 27);
  if (v12)
    MEMORY[0x1AF44D160](v12, 0x20C8093837F09);
  v13 = *((_QWORD *)v10 + 21);
  if (v13)
    MEMORY[0x1AF44D160](v13, 0x1000C8000313F17);
  LM::~LM(v10);
  _Unwind_Resume(a1);
}

void BayesMix::~BayesMix(BayesMix *this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E5D177B0;
  if (*((_BYTE *)this + 232) && *((_DWORD *)this + 38))
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)Array<LM *>::operator[]((int *)this + 52, v2);
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      ++v2;
    }
    while (v2 < *((unsigned int *)this + 38));
  }
  *((_QWORD *)this + 30) = &unk_1E5D16BA8;
  Trie<unsigned int,ZeroArray<double>>::~Trie((char *)this + 264);
  v4 = *((_QWORD *)this + 27);
  if (v4)
    MEMORY[0x1AF44D160](v4, 0x20C8093837F09);
  v5 = *((_QWORD *)this + 21);
  if (v5)
    MEMORY[0x1AF44D160](v5, 0x1000C8000313F17);
  LM::~LM(this);
}

{
  BayesMix::~BayesMix(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t BayesMix::readMixLMs(BayesMix *this, File *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  File *v6;
  File *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char **v14;
  unsigned int v15;
  double v16;
  unsigned int v17;
  const char *v18;
  char *v19;
  ClassNgram *v20;
  uint64_t v21;
  SubVocab *v22;
  LMClient *v23;
  unsigned int v24;
  double v25;
  uint64_t result;
  _QWORD *v27;
  int v28;
  unint64_t v29;
  double *v30;
  _QWORD *v31;
  _QWORD *v32;
  size_t v33;
  _QWORD *v34;
  _QWORD *v35;
  size_t v36;
  _QWORD *v37;
  _QWORD *v38;
  size_t v39;
  _QWORD *v40;
  const std::locale::facet *v41;
  _QWORD *v42;
  _QWORD *v43;
  size_t v44;
  _QWORD *v45;
  const std::locale::facet *v46;
  _QWORD *v47;
  _QWORD *v48;
  size_t v49;
  _QWORD *v50;
  const std::locale::facet *v51;
  _QWORD *v52;
  size_t v53;
  _QWORD *v54;
  const std::locale::facet *v55;
  unsigned int v56;
  std::locale v57;
  const char *v58[13];
  uint64_t v59;
  char *__s;
  char *__s1;
  double v62;
  unsigned int v63;
  std::locale v64;
  int v65;
  const char *v66;
  unsigned int *v67;
  const char *v68;
  int v69;
  const char *v70;
  double *v71;
  const char *v72;
  int v73;
  const char *v74;
  char **p_s1;
  const char *v76;
  int v77;
  const char *v78;
  char **p_s;
  const char *v80;
  int v81;
  const char *v82;
  char *v83;
  const char *v84;
  int v85;
  const char *v86;
  uint64_t *v87;
  const char *v88;
  char v89[16];
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;

  v2 = MEMORY[0x1E0C80A78](this, a2);
  v4 = v3;
  v56 = v5;
  v7 = v6;
  v8 = v2;
  v121 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(v2 + 232))
  {
    if (*(_DWORD *)(v2 + 152))
    {
      v9 = 0;
      do
      {
        v10 = *(_QWORD *)Array<LM *>::operator[]((int *)(v8 + 208), v9);
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        ++v9;
      }
      while (v9 < *(unsigned int *)(v8 + 152));
    }
    *(_BYTE *)(v8 + 232) = 0;
  }
  v11 = *(_QWORD *)(v8 + 216);
  if (v11)
    MEMORY[0x1AF44D160](v11, 0x20C8093837F09);
  *(_QWORD *)(v8 + 220) = 0;
  *(_QWORD *)(v8 + 212) = 0;
  v12 = *(_QWORD *)(v8 + 168);
  if (v12)
    MEMORY[0x1AF44D160](v12, 0x1000C8000313F17);
  *(_QWORD *)(v8 + 172) = 0;
  *(_QWORD *)(v8 + 164) = 0;
  NgramProbArrayTrie::clear((NgramProbArrayTrie *)(v8 + 240));
  *(_BYTE *)(v8 + 233) = 0;
  v13 = File::getline(v7);
  if (!v13)
  {
    *(_DWORD *)(v8 + 152) = 0;
    result = 1;
    *(_DWORD *)(v8 + 260) = 1;
    *(_BYTE *)(v8 + 232) = 1;
    return result;
  }
  v15 = 0;
  v16 = 0.0;
  do
  {
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    v115 = 0u;
    v116 = 0u;
    v113 = 0u;
    v114 = 0u;
    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    *(_OWORD *)v89 = 0u;
    v90 = 0u;
    v17 = Vocab::parseWords((Vocab *)v13, v89, (const char **)0xC351, v14);
    if (v17 >= 0xC351)
    {
      v27 = File::position((const char **)v7, MEMORY[0x1E0DE4A50]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"too many words in line\n", 23);
      return 0;
    }
    if (!v17)
      goto LABEL_43;
    v18 = *(const char **)v89;
    v63 = 3;
    __s1 = "ARPA";
    v62 = 1.0;
    v59 = 0;
    __s = 0;
    v65 = -2;
    v66 = "order";
    v67 = &v63;
    v68 = "lm ngram order";
    v69 = -5;
    v70 = "weight";
    v71 = &v62;
    v72 = "lm prior weight";
    v73 = -3;
    v74 = "type";
    p_s1 = &__s1;
    v76 = "lm type";
    v77 = -3;
    v78 = "classes";
    p_s = &__s;
    v80 = "class definitions";
    v81 = 1;
    v82 = "simple-classes";
    v83 = (char *)&v59 + 4;
    v84 = "use unique class model";
    v85 = 1;
    v86 = "cache-served-ngrams";
    v87 = &v59;
    v88 = "enable client side caching";
    if (Opt_Parse(v17, (const char **)v89, (unint64_t)&v65, 6, 4u) != 1)
    {
      v31 = File::position((const char **)v7, MEMORY[0x1E0DE4A50]);
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"allowed options for mixture LM ", 31);
      v33 = strlen(v18);
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v18, v33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" are\n", 5);
      Opt_PrintUsage(0, (uint64_t)&v65, 6);
      return 0;
    }
    v19 = __s1;
    if (!strcmp(__s1, "ARPA"))
    {
      if (__s)
      {
        v22 = (SubVocab *)operator new();
        SubVocab::SubVocab(v22, *(Vocab **)(v8 + 24), 0);
        if (__s)
        {
          if (HIDWORD(v59))
          {
            v20 = (ClassNgram *)operator new();
            ClassNgram::ClassNgram(v20, *(Vocab **)(v8 + 24), v22, v63);
            *(_QWORD *)v20 = &unk_1E5D16858;
            *((_BYTE *)v20 + 289) = 0;
          }
          else
          {
            v20 = (ClassNgram *)operator new();
            ClassNgram::ClassNgram(v20, *(Vocab **)(v8 + 24), v22, v63);
          }
LABEL_36:
          File::File((File *)v58, v18, "r", 1);
          if (!(*(unsigned int (**)(ClassNgram *, const char **, _QWORD))(*(_QWORD *)v20 + 240))(v20, v58, v56))
          {
            v42 = File::position(v58, MEMORY[0x1E0DE4A50]);
            v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"error in ngram lm", 17);
            v44 = strlen(v18);
            v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v18, v44);
            std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(_QWORD *)(*v45 - 24)));
            v46 = std::locale::use_facet(&v57, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10);
            std::locale::~locale(&v57);
            std::ostream::put();
            std::ostream::flush();
            (*(void (**)(ClassNgram *))(*(_QWORD *)v20 + 8))(v20);
            if (v22)
              (*(void (**)(SubVocab *))(*(_QWORD *)v22 + 8))(v22);
            goto LABEL_64;
          }
          if (__s)
          {
            File::File((File *)&v57, __s, "r", 1);
            if (!(*(unsigned int (**)(ClassNgram *, std::locale *))(*(_QWORD *)v20 + 520))(v20, &v57))
            {
              v47 = File::position(v58, MEMORY[0x1E0DE4A50]);
              v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"error in class defintions lm", 28);
              v49 = strlen(__s);
              v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)__s, v49);
              std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(_QWORD *)(*v50 - 24)));
              v51 = std::locale::use_facet(&v64, MEMORY[0x1E0DE4A90]);
              ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
              std::locale::~locale(&v64);
              std::ostream::put();
              std::ostream::flush();
              (*(void (**)(ClassNgram *))(*(_QWORD *)v20 + 8))(v20);
              if (v22)
                (*(void (**)(SubVocab *))(*(_QWORD *)v22 + 8))(v22);
              File::~File((File *)&v57);
              goto LABEL_64;
            }
            File::~File((File *)&v57);
          }
          goto LABEL_41;
        }
      }
      else
      {
        v22 = 0;
      }
      v20 = (ClassNgram *)operator new();
      Ngram::Ngram(v20, *(Vocab **)(v8 + 24), v63);
      goto LABEL_36;
    }
    if (v4)
    {
      if (strcmp(v19, "MAXENT"))
        goto LABEL_56;
LABEL_20:
      File::File((File *)v58, v18, "r", 1);
      v20 = (ClassNgram *)operator new();
      MEModel::MEModel(v20, *(Vocab **)(v8 + 24), 3u);
      if ((*(unsigned int (**)(ClassNgram *, const char **, _QWORD))(*(_QWORD *)v20 + 240))(v20, v58, v56))
      {
        if (v4)
        {
          v21 = (*(uint64_t (**)(ClassNgram *))(*(_QWORD *)v20 + 336))(v20);
          (*(void (**)(ClassNgram *))(*(_QWORD *)v20 + 8))(v20);
          v20 = (ClassNgram *)v21;
        }
        goto LABEL_41;
      }
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"error in maxent lm ", 19);
      v39 = strlen(v18);
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v18, v39);
      std::ios_base::getloc((const std::ios_base *)((char *)v40 + *(_QWORD *)(*v40 - 24)));
      v41 = std::locale::use_facet(&v57, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
      std::locale::~locale(&v57);
      std::ostream::put();
      std::ostream::flush();
      goto LABEL_58;
    }
    if (!strcmp(v19, "COUNTLM"))
    {
      File::File((File *)v58, v18, "r", 1);
      v20 = (ClassNgram *)operator new();
      NgramCountLM::NgramCountLM(v20, *(Vocab **)(v8 + 24), v63);
      if (!(*(unsigned int (**)(ClassNgram *, const char **, _QWORD))(*(_QWORD *)v20 + 240))(v20, v58, v56))
      {
        v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"error in count-lm ", 18);
        v53 = strlen(v18);
        v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v18, v53);
        std::ios_base::getloc((const std::ios_base *)((char *)v54 + *(_QWORD *)(*v54 - 24)));
        v55 = std::locale::use_facet(&v57, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
        std::locale::~locale(&v57);
        std::ostream::put();
        std::ostream::flush();
LABEL_58:
        (*(void (**)(ClassNgram *))(*(_QWORD *)v20 + 8))(v20);
LABEL_64:
        File::~File((File *)v58);
        return 0;
      }
LABEL_41:
      File::~File((File *)v58);
      goto LABEL_42;
    }
    if (!strcmp(v19, "MAXENT"))
      goto LABEL_20;
    if (strcmp(v19, "LMCLIENT"))
    {
LABEL_56:
      v35 = File::position((const char **)v7, MEMORY[0x1E0DE4A50]);
      v36 = strlen(__s1);
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)__s1, v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" is not a valid LM type\n", 24);
      return 0;
    }
    v23 = (LMClient *)operator new();
    v20 = v23;
    if ((_DWORD)v59)
      v24 = v63;
    else
      v24 = 0;
    LMClient::LMClient(v23, *(Vocab **)(v8 + 24), v18, v63, v24);
LABEL_42:
    *(_QWORD *)Array<LM *>::operator[]((int *)(v8 + 208), v15) = v20;
    v25 = v62;
    *(double *)Array<double>::operator[]((int *)(v8 + 160), v15) = v25;
    v16 = v16 + v62;
    ++v15;
LABEL_43:
    v13 = File::getline(v7);
  }
  while (v13);
  *(_DWORD *)(v8 + 152) = v15;
  if (v15 <= 1)
    v28 = 1;
  else
    v28 = v15;
  *(_DWORD *)(v8 + 260) = v28;
  result = 1;
  *(_BYTE *)(v8 + 232) = 1;
  if (v15)
  {
    v29 = 0;
    do
    {
      v30 = (double *)Array<double>::operator[]((int *)(v8 + 160), v29);
      *v30 = *v30 / v16;
      ++v29;
    }
    while (v29 < *(unsigned int *)(v8 + 152));
    return 1;
  }
  return result;
}

void sub_1ADD53998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,std::locale a44)
{
  std::locale::~locale(&a13);
  File::~File((File *)&a26);
  _Unwind_Resume(a1);
}

int *BayesMix::findPriors(BayesMix *this, Vocab *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  _QWORD *PrefixTrie;
  uint64_t v9;
  int *v10;
  int v12;

  if (!*((_BYTE *)this + 233))
    return (int *)((char *)this + 160);
  v4 = Vocab::length((uint64_t)a2, (const unsigned int *)a2);
  v5 = *((_DWORD *)this + 48);
  if (v4 >= v5)
    v6 = v5;
  else
    v6 = v4;
  v7 = *((_DWORD *)a2 + v6);
  *((_DWORD *)a2 + v6) = -1;
  v12 = 0;
  PrefixTrie = Trie<unsigned int,ZeroArray<double>>::findPrefixTrie((_DWORD **)this + 33, (unsigned int *)a2, &v12);
  if (!*((_DWORD *)this + 38))
  {
LABEL_9:
    *((_DWORD *)a2 + v6) = v7;
    return (int *)((char *)this + 160);
  }
  v9 = 0;
  v10 = (int *)(PrefixTrie + 1);
  while (*(double *)Array<double>::operator[](v10, v9) == 0.0)
  {
    if (++v9 >= (unint64_t)*((unsigned int *)this + 38))
      goto LABEL_9;
  }
  *((_DWORD *)a2 + v6) = v7;
  return v10;
}

void sub_1ADD53B6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  *(_DWORD *)(v1 + 4 * v2) = v3;
  _Unwind_Resume(a1);
}

float BayesMix::wordProb(uint64_t a1, uint64_t a2, Vocab *a3)
{
  int v6;
  int v7;
  int *Priors;
  int *v9;
  unint64_t v10;
  double v11;
  char v12;
  _QWORD *v13;
  float v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  _QWORD *v19;
  double v20;
  double v21;
  unint64_t v22;
  double *v23;
  double v24;
  _QWORD *v25;
  unsigned int v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  unsigned int v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  int v34;
  int v35;
  double v36;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _DWORD v41[2];
  uint64_t v42;
  int v43;

  v6 = *(_DWORD *)(a1 + 152);
  v41[0] = 0;
  v41[1] = v6;
  v42 = 0;
  v43 = 0;
  if (v6)
  {
    Array<double>::alloc((uint64_t)v41, v6 - 1, 0);
    v7 = *(_DWORD *)(a1 + 152);
    LODWORD(v38) = 0;
    HIDWORD(v38) = v7;
    v39 = 0;
    v40 = 0;
    if (v7)
      Array<double>::alloc((uint64_t)&v38, v7 - 1, 0);
  }
  else
  {
    v38 = 0;
    v39 = 0;
    v40 = 0;
  }
  Priors = BayesMix::findPriors((BayesMix *)a1, a3);
  if (!*(_DWORD *)(a1 + 152))
  {
LABEL_21:
    LODWORD(v10) = 0;
    v11 = 0.0;
    goto LABEL_22;
  }
  v9 = Priors;
  v10 = 0;
  v11 = 0.0;
  v12 = 1;
  do
  {
    v13 = (_QWORD *)Array<LM *>::operator[]((int *)(a1 + 208), v10);
    v14 = (*(float (**)(_QWORD, uint64_t, Vocab *))(*(_QWORD *)*v13 + 48))(*v13, a2, a3);
    v15 = 0.0;
    if (v14 != -INFINITY)
      v15 = exp(v14 * 2.30258509);
    *(double *)(v42 + 8 * ((int)v10 - v41[0])) = v15;
    v16 = (double *)Array<double>::operator[](v9, v10);
    v17 = *v16;
    *(double *)(v39 + 8 * ((int)v10 - (int)v38)) = *v16;
    v18 = *(double *)(a1 + 200);
    if (v18 > 0.0)
    {
      v19 = (_QWORD *)Array<LM *>::operator[]((int *)(a1 + 208), v10);
      v20 = v18
          * (*(float (**)(_QWORD, Vocab *, _QWORD))(*(_QWORD *)*v19 + 104))(*v19, a3, *(unsigned int *)(a1 + 192));
      v21 = 0.0;
      if (v20 != -INFINITY)
        v21 = exp(v20 * 2.30258509);
      v17 = v21 * *(double *)(v39 + 8 * ((int)v10 - (int)v38));
      *(double *)(v39 + 8 * ((int)v10 - (int)v38)) = v17;
    }
    if (v17 != 0.0)
      v12 = 0;
    v11 = v11 + v17;
    ++v10;
    v22 = *(unsigned int *)(a1 + 152);
  }
  while (v10 < v22);
  if (v12)
  {
    if ((_DWORD)v22)
    {
      v10 = 0;
      v11 = 0.0;
      do
      {
        v23 = (double *)Array<double>::operator[](v9, v10);
        v24 = *v23;
        *(double *)(v39 + 8 * ((int)v10 - (int)v38)) = *v23;
        v11 = v11 + v24;
        ++v10;
      }
      while (v10 < *(unsigned int *)(a1 + 152));
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_22:
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1)
    && !*(_BYTE *)(a1 + 8)
    && (Debug::debugAll > 1 || *(_DWORD *)(a1 + 12) >= 2u)
    && *(_DWORD *)(a1 + 192))
  {
    v25 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"[post=", 6);
    if ((_DWORD)v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      std::ostream::operator<<();
    }
    if (*(_DWORD *)(a1 + 152) >= 2u)
    {
      v26 = 1;
      do
      {
        v27 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)",", 1);
        std::ostream::operator<<();
        ++v26;
      }
      while (v26 < *(_DWORD *)(a1 + 152));
    }
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"]", 1);
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1)
    && !*(_BYTE *)(a1 + 8)
    && (Debug::debugAll > 2 || *(_DWORD *)(a1 + 12) >= 3u))
  {
    v29 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"[probs=", 7);
    if ((_DWORD)v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      std::ostream::operator<<();
    }
    if (*(_DWORD *)(a1 + 152) >= 2u)
    {
      v30 = 1;
      do
      {
        v31 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)",", 1);
        std::ostream::operator<<();
        ++v30;
      }
      while (v30 < *(_DWORD *)(a1 + 152));
    }
    v32 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"]", 1);
  }
  v33 = *(_DWORD *)(a1 + 152);
  if (v33)
  {
    v34 = -(int)v38;
    v35 = -v41[0];
    v36 = 0.0;
    do
    {
      v36 = v36 + *(double *)(v39 + 8 * v34++) * *(double *)(v42 + 8 * v35++);
      --v33;
    }
    while (v33);
  }
  else
  {
    v36 = 0.0;
    if (!v39)
      goto LABEL_49;
  }
  MEMORY[0x1AF44D160](v39, 0x1000C8000313F17);
LABEL_49:
  if (v42)
    MEMORY[0x1AF44D160](v42, 0x1000C8000313F17);
  return log10(v36 / v11);
}

void sub_1ADD5403C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    MEMORY[0x1AF44D160](a13, 0x1000C8000313F17);
  _Unwind_Resume(exception_object);
}

uint64_t BayesMix::contextID(BayesMix *this, unsigned int a2, const unsigned int *a3, unsigned int *a4)
{
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v14;

  if (*((_DWORD *)this + 38))
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = (int *)((char *)this + 208);
    do
    {
      v14 = 0;
      v11 = (_QWORD *)Array<LM *>::operator[](v10, v7);
      v12 = (*(uint64_t (**)(_QWORD, const unsigned int *, unsigned int *))(*(_QWORD *)*v11 + 200))(*v11, a3, &v14);
      if (v14 > v8)
      {
        v9 = v12;
        v8 = v14;
      }
      ++v7;
    }
    while (v7 < *((unsigned int *)this + 38));
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  *a4 = v8;
  return v9;
}

BOOL BayesMix::isNonWord(BayesMix *this, uint64_t a2)
{
  unint64_t v4;
  int *v5;
  _QWORD *v6;
  int v7;
  _BOOL8 result;

  if (!*((_DWORD *)this + 38))
    return 0;
  v4 = 0;
  v5 = (int *)((char *)this + 208);
  do
  {
    v6 = (_QWORD *)Array<LM *>::operator[](v5, v4);
    v7 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 232))(*v6, a2);
    result = v7 != 0;
    if (v7)
      break;
    ++v4;
  }
  while (v4 < *((unsigned int *)this + 38));
  return result;
}

uint64_t BayesMix::setState(uint64_t this, const char *a2)
{
  uint64_t v3;
  unint64_t v4;
  int *v5;
  _QWORD *v6;

  if (*(_DWORD *)(this + 152))
  {
    v3 = this;
    v4 = 0;
    v5 = (int *)(this + 208);
    do
    {
      v6 = (_QWORD *)Array<LM *>::operator[](v5, v4);
      this = (*(uint64_t (**)(_QWORD, const char *))(*(_QWORD *)*v6 + 152))(*v6, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(v3 + 152));
  }
  return this;
}

BOOL BayesMix::addUnkWords(BayesMix *this)
{
  unint64_t v2;
  int *v3;
  _QWORD *v4;
  int v5;
  _BOOL8 result;

  if (!*((_DWORD *)this + 38))
    return 0;
  v2 = 0;
  v3 = (int *)((char *)this + 208);
  do
  {
    v4 = (_QWORD *)Array<LM *>::operator[](v3, v2);
    v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 224))(*v4);
    result = v5 != 0;
    if (v5)
      break;
    ++v2;
  }
  while (v2 < *((unsigned int *)this + 38));
  return result;
}

uint64_t BayesMix::running(BayesMix *this, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  int *v6;
  _QWORD *v7;

  v2 = *((unsigned __int8 *)this + 147);
  *((_BYTE *)this + 147) = a2;
  if (*((_DWORD *)this + 38))
  {
    v5 = 0;
    v6 = (int *)((char *)this + 208);
    do
    {
      v7 = (_QWORD *)Array<LM *>::operator[](v6, v5);
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v7 + 272))(*v7, a2);
      ++v5;
    }
    while (v5 < *((unsigned int *)this + 38));
  }
  return v2;
}

_DWORD *BayesMix::debugme(_DWORD *this, uint64_t a2)
{
  _DWORD *v3;
  unint64_t v4;
  _QWORD *v5;

  v3 = this;
  if (this[38])
  {
    v4 = 0;
    do
    {
      v5 = (_QWORD *)Array<LM *>::operator[](v3 + 52, v4);
      this = (_DWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 16))(*v5, a2);
      ++v4;
    }
    while (v4 < v3[38]);
  }
  v3[3] = a2;
  return this;
}

uint64_t BayesMix::dout(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;

  if (*(_DWORD *)(a1 + 152))
  {
    v4 = 0;
    do
    {
      v5 = (_QWORD *)Array<LM *>::operator[]((int *)(a1 + 208), v4);
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 32))(*v5, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(a1 + 152));
  }
  *(_QWORD *)(a1 + 16) = a2;
  return a2;
}

uint64_t BayesMix::prefetchingNgrams(BayesMix *this)
{
  unint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  unsigned int v6;

  if (!*((_DWORD *)this + 38))
    return 0;
  v2 = 0;
  LODWORD(v3) = 0;
  v4 = (int *)((char *)this + 208);
  do
  {
    v5 = (_QWORD *)Array<LM *>::operator[](v4, v2);
    v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 296))(*v5);
    if (v6 <= v3)
      v3 = v3;
    else
      v3 = v6;
    ++v2;
  }
  while (v2 < *((unsigned int *)this + 38));
  return v3;
}

uint64_t BayesMix::prefetchNgrams(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  _QWORD *v7;

  v2 = *(unsigned int *)(result + 152);
  if (!(_DWORD)v2)
    return 1;
  v4 = result;
  v5 = 0;
  v6 = (int *)(result + 208);
  LOBYTE(result) = 1;
  do
  {
    if ((_BYTE)result)
    {
      v7 = (_QWORD *)Array<LM *>::operator[](v6, v5);
      result = (*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*v7 + 304))(*v7, a2) != 0;
      v2 = *(unsigned int *)(v4 + 152);
    }
    else
    {
      result = 0;
    }
    ++v5;
  }
  while (v5 < v2);
  return result;
}

{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  _QWORD *v7;

  v2 = *(unsigned int *)(result + 152);
  if (!(_DWORD)v2)
    return 1;
  v4 = result;
  v5 = 0;
  v6 = (int *)(result + 208);
  LOBYTE(result) = 1;
  do
  {
    if ((_BYTE)result)
    {
      v7 = (_QWORD *)Array<LM *>::operator[](v6, v5);
      result = (*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*v7 + 312))(*v7, a2) != 0;
      v2 = *(unsigned int *)(v4 + 152);
    }
    else
    {
      result = 0;
    }
    ++v5;
  }
  while (v5 < v2);
  return result;
}

{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  _QWORD *v7;

  v2 = *(unsigned int *)(result + 152);
  if (!(_DWORD)v2)
    return 1;
  v4 = result;
  v5 = 0;
  v6 = (int *)(result + 208);
  LOBYTE(result) = 1;
  do
  {
    if ((_BYTE)result)
    {
      v7 = (_QWORD *)Array<LM *>::operator[](v6, v5);
      result = (*(unsigned int (**)(_QWORD, uint64_t))(*(_QWORD *)*v7 + 320))(*v7, a2) != 0;
      v2 = *(unsigned int *)(v4 + 152);
    }
    else
    {
      result = 0;
    }
    ++v5;
  }
  while (v5 < v2);
  return result;
}

uint64_t BayesMix::read(BayesMix *this, File *a2)
{
  return BayesMix::readMixLMs(this, a2);
}

void SubVocab::SubVocab(SubVocab *this, Vocab *a2, int a3)
{
  _QWORD *v6;
  Vocab *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;

  Vocab::Vocab(this, 0, -2);
  *v6 = &off_1E5D17A70;
  v6[12] = a2;
  Vocab::setOutputVocab(a2, v7);
  if (a3)
  {
    v8 = (unsigned int *)(*(uint64_t (**)(Vocab *))(*(_QWORD *)a2 + 88))(a2);
    *((_DWORD *)this + 16) = (*(uint64_t (**)(SubVocab *, _QWORD))(*(_QWORD *)this + 360))(this, *v8);
    v9 = (unsigned int *)(*(uint64_t (**)(Vocab *))(*(_QWORD *)a2 + 104))(a2);
    *((_DWORD *)this + 17) = (*(uint64_t (**)(SubVocab *, _QWORD))(*(_QWORD *)this + 360))(this, *v9);
    v10 = (unsigned int *)(*(uint64_t (**)(Vocab *))(*(_QWORD *)a2 + 120))(a2);
    *((_DWORD *)this + 18) = (*(uint64_t (**)(SubVocab *, _QWORD))(*(_QWORD *)this + 360))(this, *v10);
    v11 = (unsigned int *)(*(uint64_t (**)(Vocab *))(*(_QWORD *)a2 + 136))(a2);
    *((_DWORD *)this + 19) = (*(uint64_t (**)(SubVocab *, _QWORD))(*(_QWORD *)this + 360))(this, *v11);
    *((_BYTE *)this + 80) = *(_BYTE *)(*(uint64_t (**)(Vocab *))(*(_QWORD *)a2 + 152))(a2);
  }
  else
  {
    (*(void (**)(SubVocab *, _QWORD))(*(_QWORD *)this + 64))(this, *((unsigned int *)this + 16));
    (*(void (**)(SubVocab *, _QWORD))(*(_QWORD *)this + 64))(this, *((unsigned int *)this + 17));
    (*(void (**)(SubVocab *, _QWORD))(*(_QWORD *)this + 64))(this, *((unsigned int *)this + 18));
    (*(void (**)(SubVocab *, _QWORD))(*(_QWORD *)this + 64))(this, *((unsigned int *)this + 19));
  }
}

void sub_1ADD547D4(_Unwind_Exception *a1)
{
  Vocab *v1;

  Vocab::~Vocab(v1);
  _Unwind_Resume(a1);
}

uint64_t SubVocab::addWord(SubVocab *this, const char *a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, const char *))(**((_QWORD **)this + 12) + 16))(*((_QWORD *)this + 12), a2);
  if ((_DWORD)result != -1)
    return (*(uint64_t (**)(SubVocab *, uint64_t))(*(_QWORD *)this + 360))(this, result);
  return result;
}

uint64_t SubVocab::addWord(SubVocab *this, uint64_t a2)
{
  char *v4;
  char *v5;
  _QWORD *v6;
  uint64_t InternalKey;
  uint64_t v8;
  char v10;
  char v11;

  v4 = (char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 32))(*((_QWORD *)this + 12));
  if (!v4)
    return 0xFFFFFFFFLL;
  v5 = v4;
  v10 = 0;
  v6 = LHash<char const*,unsigned int>::insert((_QWORD *)this + 1, v4, &v10);
  if (!v10)
  {
    *(_DWORD *)v6 = a2;
    v11 = 0;
    InternalKey = LHash<char const*,unsigned int>::getInternalKey((_DWORD **)this + 1, v5, &v11);
    *(_QWORD *)Array<char const*>::operator[]((int *)this + 4, a2) = InternalKey;
    v8 = *((unsigned int *)this + 10);
    if (v8 < a2)
    {
      do
        *(_QWORD *)Array<char const*>::operator[]((int *)this + 4, v8++) = 0;
      while (a2 != v8);
      LODWORD(v8) = *((_DWORD *)this + 10);
    }
    if ((int)a2 + 1 > v8)
      *((_DWORD *)this + 10) = a2 + 1;
  }
  return a2;
}

void SubVocab::~SubVocab(SubVocab *this)
{
  Vocab::~Vocab(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t SubVocab::unkIsWord(SubVocab *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 152))(*((_QWORD *)this + 12));
}

uint64_t SubVocab::toLower(SubVocab *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 160))(*((_QWORD *)this + 12));
}

BOOL SubVocab::isNonEvent(SubVocab *this, uint64_t a2)
{
  return Vocab::isNonEvent(this, a2)
      || (*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)this + 12) + 176))(*((_QWORD *)this + 12), a2) != 0;
}

uint64_t SubVocab::metaTag(SubVocab *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 216))(*((_QWORD *)this + 12));
}

uint64_t SubVocab::isMetaTag(SubVocab *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 224))(*((_QWORD *)this + 12));
}

uint64_t SubVocab::typeOfMetaTag(SubVocab *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 232))(*((_QWORD *)this + 12));
}

uint64_t SubVocab::metaTagOfType(SubVocab *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 240))(*((_QWORD *)this + 12));
}

_DWORD *quasar::GeoVersionChecker::GeoVersionChecker(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_DWORD *quasar::GeoVersionChecker::enforceVersion(_DWORD *result, uint64_t a2, int a3, int a4, uint64_t a5)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _OWORD v16[17];

  if (*result < a3 || *result > a4)
  {
    memset(v16, 0, sizeof(v16));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    v7 = *(char *)(a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *(_QWORD *)a2;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a2 + 23);
    else
      v9 = *(_QWORD *)(a2 + 8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" in geo config version ", 23);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", upgrade to latest version (or version ", 40);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"..", 2);
    v13 = (_QWORD *)std::ostream::operator<<();
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)") ", 2);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v14, a5);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v16);
  }
  return result;
}

BOOL quasar::GeoVersionChecker::checkVersion(_DWORD *a1, int a2, int a3)
{
  return *a1 >= a2 && *a1 <= a3;
}

uint64_t quasar::createJSONResultRecognitionResultIterator@<X0>(kaldi::quasar::Vocab *a1@<X0>, const void ***a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = quasar::JSONRecognitionResultIterator::JSONRecognitionResultIterator(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_1ADD54B7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40B1B69422);
  _Unwind_Resume(a1);
}

uint64_t quasar::JSONRecognitionResultIterator::JSONRecognitionResultIterator(uint64_t a1, kaldi::quasar::Vocab *a2, const void ***a3)
{
  std::string __p;

  *(_QWORD *)a1 = &unk_1E5D39A70;
  std::set<std::string>::set[abi:ne180100]((uint64_t *)(a1 + 8), a3);
  *(_QWORD *)a1 = &unk_1E5D3A398;
  kaldi::quasar::Vocab::OOvWord(a2, &__p);
  std::ifstream::basic_ifstream((_QWORD *)(a1 + 32));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_DWORD *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  std::istream::peek();
  return a1;
}

void sub_1ADD54C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void **v18;
  uint64_t v19;
  void **v20;

  v20 = v18;
  quasar::RecognitionResultIterator::Record::~Record(v20);
  std::ifstream::~ifstream(v17);
  *(_QWORD *)v15 = v19 + 16;
  std::__tree<std::string>::destroy(v16, *(char **)(v15 + 16));
  _Unwind_Resume(a1);
}

void quasar::RecognitionResultIterator::Record::~Record(void **this)
{
  void **v2;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 6));
  v2 = this + 3;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

BOOL quasar::JSONRecognitionResultIterator::hasNext(quasar::JSONRecognitionResultIterator *this)
{
  return (*((_BYTE *)this + *(_QWORD *)(*((_QWORD *)this + 4) - 24) + 64) & 2) == 0;
}

char *quasar::JSONRecognitionResultIterator::next(quasar::JSONRecognitionResultIterator *this)
{
  _QWORD *v2;
  const std::ios_base *v3;
  const std::locale::facet *v4;
  unsigned __int8 v5;
  quasar::PTree *Child;
  const std::string *String;
  char *v8;
  quasar *v9;
  uint64_t ChildOptional;
  quasar *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v16[2];
  char v17;
  void *__p[2];
  uint64_t v19;
  std::locale v20;
  uint64_t v21;
  void *v22;
  char v23;
  uint64_t v24;
  _BYTE v25[64];
  std::string v26;
  void **v27;

  v2 = (_QWORD *)((char *)this + 32);
  v3 = (const std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 4) - 24) + 32);
  if ((v3->__rdstate_ & 2) != 0)
    return 0;
  memset(&v26, 0, sizeof(v26));
  std::ios_base::getloc(v3);
  v4 = std::locale::use_facet(&v20, MEMORY[0x1E0DE4A90]);
  v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v20);
  std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v2, (uint64_t)&v26, v5);
  std::istream::peek();
  quasar::PTree::PTree((quasar::PTree *)v25);
  std::istringstream::basic_istringstream[abi:ne180100](&v20, &v26, 8);
  quasar::PTree::readJson((uint64_t)v25, &v20);
  std::string::basic_string[abi:ne180100]<0>(__p, "utterance-id");
  Child = (quasar::PTree *)quasar::PTree::getChild((uint64_t)v25, (__int128 *)__p);
  String = (const std::string *)quasar::PTree::getString(Child);
  v8 = (char *)this + 608;
  std::string::operator=((std::string *)((char *)this + 608), String);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "final-result");
  v9 = (quasar *)quasar::PTree::getChild((uint64_t)v25, (__int128 *)v16);
  quasar::ptreeToSlice(v9, (uint64_t *)__p);
  std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)this + 79);
  *(_OWORD *)((char *)this + 632) = *(_OWORD *)__p;
  *((_QWORD *)this + 81) = v19;
  __p[1] = 0;
  v19 = 0;
  __p[0] = 0;
  v27 = __p;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "feature-matrix");
  ChildOptional = quasar::PTree::getChildOptional((uint64_t)v25, (uint64_t)__p);
  v11 = (quasar *)ChildOptional;
  if (SHIBYTE(v19) < 0)
  {
    operator delete(__p[0]);
    if (!v11)
      goto LABEL_13;
  }
  else if (!ChildOptional)
  {
    goto LABEL_13;
  }
  quasar::ptreeToFeatureMatrix(v11, (uint64_t *)__p);
  std::shared_ptr<kaldi::FeatureMatrixItf>::operator=[abi:ne180100]<kaldi::FeatureMatrixItf,std::default_delete<kaldi::FeatureMatrixItf>,void>((_QWORD *)this + 82, (uint64_t *)__p);
  v12 = __p[0];
  __p[0] = 0;
  if (v12)
    (*(void (**)(void *))(*(_QWORD *)v12 + 8))(v12);
LABEL_13:
  std::string::basic_string[abi:ne180100]<0>(__p, "num-frames");
  v13 = quasar::PTree::getChildOptional((uint64_t)v25, (uint64_t)__p);
  v14 = v13;
  if ((SHIBYTE(v19) & 0x80000000) == 0)
  {
    if (!v13)
      goto LABEL_18;
    goto LABEL_17;
  }
  operator delete(__p[0]);
  if (v14)
LABEL_17:
    *((_DWORD *)this + 168) = quasar::PTree::getInt<int>(v14);
LABEL_18:
  v20.__locale_ = (std::locale::__imp *)*MEMORY[0x1E0DE4F58];
  *(std::locale *)((char *)&v20 + *((_QWORD *)v20.__locale_ - 3)) = *(std::locale *)(MEMORY[0x1E0DE4F58] + 24);
  v21 = MEMORY[0x1E0DE4FB8] + 16;
  if (v23 < 0)
    operator delete(v22);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1AF44D094](&v24);
  quasar::PTree::~PTree((quasar::PTree *)v25);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  return v8;
}

void sub_1ADD54FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::locale a23)
{
  uint64_t v23;

  std::istringstream::~istringstream((uint64_t)&a23);
  quasar::PTree::~PTree((quasar::PTree *)(v23 - 144));
  if (*(char *)(v23 - 57) < 0)
    operator delete(*(void **)(v23 - 80));
  _Unwind_Resume(a1);
}

BOOL quasar::RecognitionResultIterator::shouldConsiderUtterance(uint64_t a1, const void **a2)
{
  return !*(_QWORD *)(a1 + 24)
      || a1 + 16 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 8, a2);
}

void quasar::JSONRecognitionResultIterator::~JSONRecognitionResultIterator(quasar::JSONRecognitionResultIterator *this)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  *(_QWORD *)this = &unk_1E5D3A398;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 656);
  v4 = (void **)((char *)this + 632);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 631) < 0)
    operator delete(*((void **)this + 76));
  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *((_QWORD *)this + 4) = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 32) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1AF44CA70]((char *)this + 48);
  std::istream::~istream();
  MEMORY[0x1AF44D094]((char *)this + 456);
  *(_QWORD *)this = &unk_1E5D39A70;
  std::__tree<std::string>::destroy((uint64_t)this + 8, *((char **)this + 2));
}

{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  *(_QWORD *)this = &unk_1E5D3A398;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 656);
  v4 = (void **)((char *)this + 632);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 631) < 0)
    operator delete(*((void **)this + 76));
  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *((_QWORD *)this + 4) = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 32) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1AF44CA70]((char *)this + 48);
  std::istream::~istream();
  MEMORY[0x1AF44D094]((char *)this + 456);
  *(_QWORD *)this = &unk_1E5D39A70;
  std::__tree<std::string>::destroy((uint64_t)this + 8, *((char **)this + 2));
  MEMORY[0x1AF44D190](this, 0x10F3C40B1B69422);
}

_QWORD *std::shared_ptr<kaldi::FeatureMatrixItf>::operator=[abi:ne180100]<kaldi::FeatureMatrixItf,std::default_delete<kaldi::FeatureMatrixItf>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1E5D45C80;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void std::__shared_ptr_pointer<kaldi::FeatureMatrixItf  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<kaldi::FeatureMatrixItf  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::FeatureMatrixItf  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1ADD554A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v29;
  void *v30;
  _QWORD *v31;
  const char *v32;
  size_t v33;

  if (a2 == 1)
  {
    v29 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 1)
    {
      v30 = v29;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"EAR Initialization failed for custom-lm, error:", 47);
      v32 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v30 + 16))(v30);
      v33 = strlen(v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
    }
    __cxa_end_catch();
    JUMPOUT(0x1ADD55478);
  }

  _Unwind_Resume(a1);
}

void sub_1ADD558A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  _Block_object_dispose(&a23, 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__9(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__9(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void sub_1ADD55AE0(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::wstring> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  void *v15;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a15);
  if (a14 < 0)
    operator delete(__pa);

  _Unwind_Resume(__p);
}

quasar::CustomLMBuilder *std::unique_ptr<quasar::CustomLMBuilder>::reset[abi:ne180100](quasar::CustomLMBuilder **a1, quasar::CustomLMBuilder *a2)
{
  quasar::CustomLMBuilder *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::CustomLMBuilder::~CustomLMBuilder(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

void quasar::CustomLMBuilder::~CustomLMBuilder(quasar::CustomLMBuilder *this)
{
  uint64_t v2;
  void **v3;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  v2 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void **)((char *)this + 232);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  quasar::PTree::~PTree((quasar::CustomLMBuilder *)((char *)this + 136));
  if (*((char *)this + 135) < 0)
    operator delete(*((void **)this + 14));
  if (*((char *)this + 111) < 0)
    operator delete(*((void **)this + 11));
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void sub_1ADD55D34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1ADD55FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void sub_1ADD560BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1ADD56268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1ADD5669C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1ADD567AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)EARPSRAudioProcessor;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::PSRAudioProcessor,std::allocator<quasar::PSRAudioProcessor>,quasar::SystemConfig &,std::string,unsigned long &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x68uLL);
  result = std::__shared_ptr_emplace<quasar::PSRAudioProcessor>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string,unsigned long &,std::allocator<quasar::PSRAudioProcessor>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1ADD56904(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::PSRAudioProcessor>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string,unsigned long &,std::allocator<quasar::PSRAudioProcessor>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  char v6;

  a1[2] = 0;
  *a1 = &unk_1E5D43088;
  a1[1] = 0;
  std::allocator<quasar::PSRAudioProcessor>::construct[abi:ne180100]<quasar::PSRAudioProcessor,quasar::SystemConfig &,std::string,unsigned long &>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1ADD5696C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::PSRAudioProcessor>::construct[abi:ne180100]<quasar::PSRAudioProcessor,quasar::SystemConfig &,std::string,unsigned long &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  quasar::PSRAudioProcessor::PSRAudioProcessor(a2, a3, a4, *a5);
}

void sub_1ADD569F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *quasar::tennessee::memory_mapping::operator<<(_QWORD *a1, int a2)
{
  const char *v3;
  uint64_t v4;

  if (a2 == 2)
  {
    v3 = "MEMORY_BUFFER";
    v4 = 13;
  }
  else if (a2 == 1)
  {
    v3 = "MEMORY_MAP";
    v4 = 10;
  }
  else
  {
    v3 = "UNKNOWN";
    v4 = 7;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
  return a1;
}

uint64_t quasar::tennessee::memory_mapping::VirtualMemoryFile::VirtualMemoryFile(uint64_t a1, uint64_t a2, int a3, unint64_t a4, off_t a5)
{
  unint64_t v5;
  const char *v11;
  int v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  size_t v22;
  void *v23;
  void *v24;
  _QWORD *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  *(_DWORD *)(a1 + 8) = a3;
  *(_QWORD *)a1 = &off_1E5D3C400;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v5 = a4 - a5;
  if (a4 <= a5)
    goto LABEL_25;
  v11 = *(char *)(a2 + 23) >= 0 ? (const char *)a2 : *(const char **)a2;
  v12 = open(v11, 0);
  if (v12 <= 0)
    goto LABEL_25;
  v13 = v12;
  if (quasar::gLogLevel >= 4)
  {
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v27 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Loading ", 8);
    v15 = v14;
    v16 = *(unsigned __int8 *)(a2 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = (_BYTE *)a2;
    else
      v17 = *(_BYTE **)a2;
    if ((v16 & 0x80u) != 0)
      v16 = *(_QWORD *)(a2 + 8);
    std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(v14, v17, &v17[v16], 0x22u, 0x5Cu);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" using ", 7);
    v19 = quasar::tennessee::memory_mapping::operator<<(v18, a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)".", 1);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v27);
  }
  v20 = *(_DWORD *)(a1 + 8);
  if (v20 == 2)
  {
    if (a5 >= 1 && lseek(v13, a5, 0) != a5)
      goto LABEL_25;
    *(_QWORD *)(a1 + 32) = v5;
    if ((a4 & 0x8000000000000000) != 0)
      goto LABEL_25;
    v24 = (void *)operator new[]();
    *(_QWORD *)(a1 + 16) = v24;
    if (read(v13, v24, *(_QWORD *)(a1 + 32)) != *(_QWORD *)(a1 + 32))
      goto LABEL_25;
  }
  else if (v20 == 1)
  {
    v21 = sysconf(29);
    v22 = a5 % v21 + a4;
    *(_QWORD *)(a1 + 24) = a5 % v21;
    *(_QWORD *)(a1 + 32) = v22;
    v23 = mmap(0, v22, 1, 1, v13, a5 / v21 * v21);
    *(_QWORD *)(a1 + 16) = v23;
    if (v23 == (void *)-1)
      goto LABEL_25;
  }
  else if (quasar::gLogLevel >= -1)
  {
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v27 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Unsupported mode: ", 18);
    quasar::tennessee::memory_mapping::operator<<(v26, *(_DWORD *)(a1 + 8));
LABEL_26:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v27);
  }
  if (close(v13))
  {
LABEL_25:
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v27 = 0u;
    quasar::QuasarExceptionMessage::QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v27);
    goto LABEL_26;
  }
  return a1;
}

void sub_1ADD56D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&a9);
}

void sub_1ADD56D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  _Unwind_Resume(a1);
}

void quasar::tennessee::memory_mapping::VirtualMemoryFile::~VirtualMemoryFile(quasar::tennessee::memory_mapping::VirtualMemoryFile *this)
{
  int v1;
  uint64_t v2;
  _OWORD v3[17];

  *(_QWORD *)this = &off_1E5D3C400;
  v1 = *((_DWORD *)this + 2);
  if (v1 == 2)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      MEMORY[0x1AF44D160](v2, 0x1000C8077774924);
  }
  else if (v1 == 1)
  {
    if (munmap(*((void **)this + 2), *((_QWORD *)this + 4)))
    {
      memset(v3, 0, sizeof(v3));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v3);
    }
  }
}

{
  quasar::tennessee::memory_mapping::VirtualMemoryFile::~VirtualMemoryFile(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::tennessee::memory_mapping::VirtualMemoryFile::Data(quasar::tennessee::memory_mapping::VirtualMemoryFile *this)
{
  return *((_QWORD *)this + 2) + *((_QWORD *)this + 3);
}

_QWORD *quasar::rescoring::PreItnTokenExtractor::PreItnTokenExtractor(_QWORD *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t i;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v19;
  std::__shared_weak_count *v20;
  void *__p[2];
  char v22;
  _QWORD v23[4];

  v23[3] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "\\CS-");
  std::string::basic_string[abi:ne180100]<0>(v23, "\\PM-");
  std::set<std::string>::set[abi:ne180100]((uint64_t)a1, (const void **)__p, 2);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v23[i + 2]) < 0)
      operator delete((void *)v23[i]);
  }
  v7 = operator new(0x30uLL);
  v7[2] = 0;
  *v7 = &unk_1E5D42D40;
  v7[1] = 0;
  v7[4] = 0;
  v7[5] = 0;
  v7[3] = 0;
  a1[5] = *a3;
  a1[3] = v7 + 3;
  a1[4] = v7;
  v8 = a3[1];
  a1[6] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "•|\\(|\\)|\"|\\[|\\]|\\{|\\}|®|,|;|\\?|\\!|\\\\");
  quasar::BasicTextSanitizer::BasicTextSanitizer((quasar::TextSanitizer *)(a1 + 7), (uint64_t *)__p);
  if (v22 < 0)
    operator delete(__p[0]);
  v11 = (uint64_t *)a1[3];
  v12 = a2[1];
  v19 = *a2;
  v20 = (std::__shared_weak_count *)v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  quasar::SymbolTableList::addSymbolTable(v11, &v19, 0, -1);
  v15 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return a1;
}

void sub_1ADD56FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  quasar::BasicTextSanitizer *v20;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  quasar::BasicTextSanitizer::~BasicTextSanitizer(v20);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v18);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v19);
  std::__tree<std::string>::destroy(v17, *(char **)(v17 + 8));
  _Unwind_Resume(a1);
}

void quasar::rescoring::PreItnTokenExtractor::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *__p[2];
  char v17;
  std::string __s;
  void *v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __s = *(std::string *)a2;
  std::string::basic_string[abi:ne180100]<0>(v19, "~w00");
  std::string::basic_string[abi:ne180100]<0>(__p, " ");
  quasar::replaceAll((uint64_t)&__s, (uint64_t)v19, (char *)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v20) < 0)
    operator delete(v19[0]);
  v15 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, " ");
  v6 = operator new(0x20uLL);
  *v6 = &off_1E5D3FC40;
  v6[1] = a3;
  v6[2] = a1;
  v6[3] = &v15;
  *((_QWORD *)&v20 + 1) = v6;
  quasar::splitAndTrimNoEmpty(&__s, (char *)__p, (uint64_t)v19);
  v7 = (void **)*((_QWORD *)&v20 + 1);
  if (*((void ***)&v20 + 1) == v19)
  {
    v8 = 4;
    v7 = v19;
  }
  else
  {
    if (!*((_QWORD *)&v20 + 1))
      goto LABEL_13;
    v8 = 5;
  }
  (*((void (**)(void))*v7 + v8))();
LABEL_13:
  if (v17 < 0)
    operator delete(__p[0]);
  if (v15 && quasar::gLogLevel >= 4)
  {
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    *(_OWORD *)v19 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Text '", 6);
    v10 = *(char *)(a2 + 23);
    if (v10 >= 0)
      v11 = a2;
    else
      v11 = *(_QWORD *)a2;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(a2 + 23);
    else
      v12 = *(_QWORD *)(a2 + 8);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"' contains ", 11);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" OOVs.", 6);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v19);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_1ADD572C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29)
{
  _Unwind_Resume(exception_object);
}

BOOL quasar::rescoring::PreItnTokenExtractor::matchesAnyUnallowedTokenPrefix(_QWORD *a1, const void **a2)
{
  _QWORD *v4;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t *v7;
  uint64_t v8;
  const void *v9;
  int v10;
  const void *v11;
  const void **v12;
  unsigned __int8 *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;

  v4 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    do
    {
      v6 = std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)(v5 + 32), a2);
      v7 = (uint64_t *)(v5 + 8);
      if (!v6)
      {
        v7 = (uint64_t *)v5;
        v4 = (_QWORD *)v5;
      }
      v5 = *v7;
    }
    while (*v7);
  }
  if (v4 == (_QWORD *)*a1)
    return 0;
  v8 = *((unsigned __int8 *)v4 + 55);
  if ((v8 & 0x80u) == 0)
    v9 = (const void *)*((unsigned __int8 *)v4 + 55);
  else
    v9 = (const void *)v4[5];
  v10 = *((char *)a2 + 23);
  if (v10 >= 0)
    v11 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v11 = a2[1];
  if (v9 != v11)
    goto LABEL_22;
  v12 = (const void **)(v4 + 4);
  if (v10 >= 0)
    v13 = (unsigned __int8 *)a2;
  else
    v13 = (unsigned __int8 *)*a2;
  if ((v8 & 0x80) == 0)
  {
    if (*((_BYTE *)v4 + 55))
    {
      while (*(unsigned __int8 *)v12 == *v13)
      {
        v12 = (const void **)((char *)v12 + 1);
        ++v13;
        if (!--v8)
          return 1;
      }
      goto LABEL_22;
    }
    return 1;
  }
  if (!memcmp(*v12, v13, v4[5]))
    return 1;
LABEL_22:
  v14 = (_QWORD *)*v4;
  if (*v4)
  {
    do
    {
      v15 = v14;
      v14 = (_QWORD *)v14[1];
    }
    while (v14);
  }
  else
  {
    do
    {
      v15 = (_QWORD *)v4[2];
      v16 = *v15 == (_QWORD)v4;
      v4 = v15;
    }
    while (v16);
  }
  if (v10 >= 0)
    v17 = (unsigned __int8 *)a2;
  else
    v17 = (unsigned __int8 *)*a2;
  v20 = (unsigned __int8 *)v15[4];
  v19 = (unsigned __int8 *)(v15 + 4);
  v18 = v20;
  v21 = (char)v19[23];
  if (v21 >= 0)
    v18 = v19;
  v22 = *((_QWORD *)v19 + 1);
  if (v21 >= 0)
    v22 = v21;
  if (v11 && v22)
  {
    v23 = v22 - 1;
    v24 = (uint64_t)v11 - 1;
    v25 = v18;
    while (*v17 == *v25)
    {
      ++v25;
      if (v24)
      {
        ++v17;
        v26 = v23--;
        --v24;
        if (v26)
          continue;
      }
      return v25 == &v18[v22];
    }
    return 0;
  }
  v25 = v18;
  return v25 == &v18[v22];
}

void std::__function::__func<quasar::rescoring::PreItnTokenExtractor::operator()(std::string const&,std::vector<std::string> *)::$_0,std::allocator<quasar::rescoring::PreItnTokenExtractor::operator()(std::string const&,std::vector<std::string> *)::$_0>,void ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::rescoring::PreItnTokenExtractor::operator()(std::string const&,std::vector<std::string> *)::$_0,std::allocator<quasar::rescoring::PreItnTokenExtractor::operator()(std::string const&,std::vector<std::string> *)::$_0>,void ()(std::string const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E5D3FC40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<quasar::rescoring::PreItnTokenExtractor::operator()(std::string const&,std::vector<std::string> *)::$_0,std::allocator<quasar::rescoring::PreItnTokenExtractor::operator()(std::string const&,std::vector<std::string> *)::$_0>,void ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3FC40;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<quasar::rescoring::PreItnTokenExtractor::operator()(std::string const&,std::vector<std::string> *)::$_0,std::allocator<quasar::rescoring::PreItnTokenExtractor::operator()(std::string const&,std::vector<std::string> *)::$_0>,void ()(std::string const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  int64_t size;
  std::string *v8;
  _BYTE *v9;
  std::string *v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  std::string::size_type v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  std::string *v33;
  std::string::size_type v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  std::string *v48;
  std::string::size_type v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  std::string *v55;
  std::string::size_type v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  std::string *v61;
  std::string::size_type v62;
  _QWORD *v63;
  void *__p[2];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  std::string v84;

  if (!quasar::rescoring::PreItnTokenExtractor::matchesAnyUnallowedTokenPrefix(*(_QWORD **)(a1 + 16), (const void **)a2))
  {
    if (quasar::SymbolTableList::strToSymbolId(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), a2) == -1)
    {
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&v84, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v84 = *(std::string *)a2;
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v84.__r_.__value_.__r.__words[2]);
      else
        size = v84.__r_.__value_.__l.__size_;
      if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v8 = &v84;
      else
        v8 = (std::string *)v84.__r_.__value_.__r.__words[0];
      if (size >= 1)
      {
        v9 = (char *)v8 + size;
        v10 = v8;
        do
        {
          v11 = memchr(v10, 92, size);
          if (!v11)
            break;
          if (*v11 == 92)
          {
            if (v11 != v9 && v11 - (_BYTE *)v8 != -1)
              std::string::erase(&v84, v11 - (_BYTE *)v8, 0xFFFFFFFFFFFFFFFFLL);
            break;
          }
          v10 = (std::string *)(v11 + 1);
          size = v9 - (_BYTE *)v10;
        }
        while (v9 - (_BYTE *)v10 >= 1);
      }
      if (quasar::SymbolTableList::strToSymbolId(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), (uint64_t)&v84) == -1)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "_");
        std::string::basic_string[abi:ne180100]<0>(&v81, " ");
        quasar::replaceAll((uint64_t)&v84, (uint64_t)__p, (char *)&v81);
        if (SHIBYTE(v83) < 0)
          operator delete(v81);
        if (SBYTE7(v65) < 0)
          operator delete(__p[0]);
        __p[0] = 0;
        __p[1] = 0;
        *(_QWORD *)&v65 = 0;
        if (quasar::TextSanitizer::sanitize(*(_QWORD *)(a1 + 16) + 56, (uint64_t)&v84, (uint64_t)__p) != 1)
          std::string::operator=(&v84, (const std::string *)__p);
        if (SBYTE7(v65) < 0)
          operator delete(__p[0]);
        v15 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
        if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v15 = v84.__r_.__value_.__l.__size_;
        if (v15)
        {
          v16 = *(uint64_t **)(a1 + 8);
          v17 = *v16;
          v18 = v16[1];
          v19 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
          if (v19)
          {
            if (quasar::gLogLevel >= 4)
            {
              v79 = 0u;
              v80 = 0u;
              v77 = 0u;
              v78 = 0u;
              v75 = 0u;
              v76 = 0u;
              v73 = 0u;
              v74 = 0u;
              v71 = 0u;
              v72 = 0u;
              v69 = 0u;
              v70 = 0u;
              v67 = 0u;
              v68 = 0u;
              v65 = 0u;
              v66 = 0u;
              *(_OWORD *)__p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Token '", 7);
              v21 = *(char *)(a2 + 23);
              if (v21 >= 0)
                v22 = a2;
              else
                v22 = *(_QWORD *)a2;
              if (v21 >= 0)
                v23 = *(unsigned __int8 *)(a2 + 23);
              else
                v23 = *(_QWORD *)(a2 + 8);
              v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"' is OOV.", 9);
              quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
              v19 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
            }
            v81 = 0;
            v82 = 0;
            v83 = 0;
            if (((*(uint64_t (**)(uint64_t, std::string *, uint64_t **))(*(_QWORD *)v19 + 16))(v19, &v84, &v81) & 1) == 0)
            {
              v79 = 0u;
              v80 = 0u;
              v77 = 0u;
              v78 = 0u;
              v75 = 0u;
              v76 = 0u;
              v73 = 0u;
              v74 = 0u;
              v71 = 0u;
              v72 = 0u;
              v69 = 0u;
              v70 = 0u;
              v67 = 0u;
              v68 = 0u;
              v65 = 0u;
              v66 = 0u;
              *(_OWORD *)__p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Tokenizer failed to tokenize '", 30);
              if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v55 = &v84;
              else
                v55 = (std::string *)v84.__r_.__value_.__r.__words[0];
              if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v56 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
              else
                v56 = v84.__r_.__value_.__l.__size_;
              v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v55, v56);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"'.", 2);
              quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
            }
            if (v82 - (_QWORD)v81 != 32)
            {
              v79 = 0u;
              v80 = 0u;
              v77 = 0u;
              v78 = 0u;
              v75 = 0u;
              v76 = 0u;
              v73 = 0u;
              v74 = 0u;
              v71 = 0u;
              v72 = 0u;
              v69 = 0u;
              v70 = 0u;
              v67 = 0u;
              v68 = 0u;
              v65 = 0u;
              v66 = 0u;
              *(_OWORD *)__p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Tokenizer returned ", 19);
              v58 = (_QWORD *)std::ostream::operator<<();
              v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" hypotheses, ", 13);
              v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"instead of expected singleton for '", 35);
              if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v61 = &v84;
              else
                v61 = (std::string *)v84.__r_.__value_.__r.__words[0];
              if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v62 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
              else
                v62 = v84.__r_.__value_.__l.__size_;
              v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v61, v62);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"'.", 2);
              quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
            }
            v25 = *v81;
            v26 = v81[1];
            if (*v81 != v26)
            {
              do
              {
                if (quasar::gLogLevel >= 4)
                {
                  v79 = 0u;
                  v80 = 0u;
                  v77 = 0u;
                  v78 = 0u;
                  v75 = 0u;
                  v76 = 0u;
                  v73 = 0u;
                  v74 = 0u;
                  v71 = 0u;
                  v72 = 0u;
                  v69 = 0u;
                  v70 = 0u;
                  v67 = 0u;
                  v68 = 0u;
                  v65 = 0u;
                  v66 = 0u;
                  *(_OWORD *)__p = 0u;
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                  v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Extracted token '", 17);
                  v28 = *(char *)(v25 + 23);
                  if (v28 >= 0)
                    v29 = v25;
                  else
                    v29 = *(_QWORD *)v25;
                  if (v28 >= 0)
                    v30 = *(unsigned __int8 *)(v25 + 23);
                  else
                    v30 = *(_QWORD *)(v25 + 8);
                  v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v29, v30);
                  v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"' from '", 8);
                  if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v33 = &v84;
                  else
                    v33 = (std::string *)v84.__r_.__value_.__r.__words[0];
                  if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v34 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
                  else
                    v34 = v84.__r_.__value_.__l.__size_;
                  v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"'.", 2);
                  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
                }
                std::string::basic_string[abi:ne180100]<0>(__p, " ");
                quasar::splitAndTrimNoEmpty((const std::string *)v25, (char *)__p, *(_QWORD *)(a1 + 8));
                if (SBYTE7(v65) < 0)
                  operator delete(__p[0]);
                v25 += 32;
              }
              while (v25 != v26);
            }
            __p[0] = &v81;
            std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(__p, " ");
            quasar::splitAndTrimNoEmpty(&v84, (char *)__p, *(_QWORD *)(a1 + 8));
            if (SBYTE7(v65) < 0)
              operator delete(__p[0]);
            if (quasar::gLogLevel >= 4)
            {
              v79 = 0u;
              v80 = 0u;
              v77 = 0u;
              v78 = 0u;
              v75 = 0u;
              v76 = 0u;
              v73 = 0u;
              v74 = 0u;
              v71 = 0u;
              v72 = 0u;
              v69 = 0u;
              v70 = 0u;
              v67 = 0u;
              v68 = 0u;
              v65 = 0u;
              v66 = 0u;
              *(_OWORD *)__p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Token '", 7);
              v43 = *(char *)(a2 + 23);
              if (v43 >= 0)
                v44 = a2;
              else
                v44 = *(_QWORD *)a2;
              if (v43 >= 0)
                v45 = *(unsigned __int8 *)(a2 + 23);
              else
                v45 = *(_QWORD *)(a2 + 8);
              v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, v44, v45);
              v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"' is OOV and was converted to '", 31);
              if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v48 = &v84;
              else
                v48 = (std::string *)v84.__r_.__value_.__r.__words[0];
              if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v49 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
              else
                v49 = v84.__r_.__value_.__l.__size_;
              v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v48, v49);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"'.", 2);
              quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
            }
          }
          v51 = (v18 - v17) / 24;
          v52 = **(_QWORD **)(a1 + 8);
          if (v51 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - v52) >> 3))
          {
            v53 = 24 * v51;
            do
            {
              if (quasar::SymbolTableList::strToSymbolId(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24), v52 + v53) == -1)
                ++**(_QWORD **)(a1 + 24);
              ++v51;
              v52 = **(_QWORD **)(a1 + 8);
              v53 += 24;
            }
            while (v51 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - v52) >> 3));
          }
        }
        else if (quasar::gLogLevel >= 4)
        {
          v79 = 0u;
          v80 = 0u;
          v77 = 0u;
          v78 = 0u;
          v75 = 0u;
          v76 = 0u;
          v73 = 0u;
          v74 = 0u;
          v71 = 0u;
          v72 = 0u;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v65 = 0u;
          v66 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Token '", 7);
          v38 = *(char *)(a2 + 23);
          if (v38 >= 0)
            v39 = a2;
          else
            v39 = *(_QWORD *)a2;
          if (v38 >= 0)
            v40 = *(unsigned __int8 *)(a2 + 23);
          else
            v40 = *(_QWORD *)(a2 + 8);
          v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v39, v40);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"' was converted to the empty string.", 36);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
        }
      }
      else
      {
        v12 = *(_QWORD *)(a1 + 8);
        v13 = *(_QWORD *)(v12 + 8);
        if (v13 >= *(_QWORD *)(v12 + 16))
        {
          v36 = std::vector<std::string>::__emplace_back_slow_path<std::string&>(*(uint64_t **)(a1 + 8), (__int128 *)&v84);
        }
        else
        {
          if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)(v12 + 8), v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
          }
          else
          {
            v14 = *(_OWORD *)&v84.__r_.__value_.__l.__data_;
            *(_QWORD *)(v13 + 16) = *((_QWORD *)&v84.__r_.__value_.__l + 2);
            *(_OWORD *)v13 = v14;
          }
          v36 = v13 + 24;
          *(_QWORD *)(v12 + 8) = v13 + 24;
        }
        *(_QWORD *)(v12 + 8) = v36;
      }
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v84.__r_.__value_.__l.__data_);
    }
    else
    {
      v4 = *(uint64_t **)(a1 + 8);
      v5 = v4[1];
      if (v5 >= v4[2])
      {
        v6 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v4, (__int128 *)a2);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v4, (__int128 *)a2);
        v6 = v5 + 24;
      }
      v4[1] = v6;
    }
  }
}

void sub_1ADD57D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  __p = (void *)(v16 - 136);
  std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v16 - 89) < 0)
    operator delete(*(void **)(v16 - 112));
  _Unwind_Resume(a1);
}

void sub_1ADD57DDC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (a16 < 0)
    operator delete(__p);
  __p = (void *)(v16 - 136);
  std::vector<quasar::TextTokenizer::TokenString>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  JUMPOUT(0x1ADD57E18);
}

void sub_1ADD57DF4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

void sub_1ADD57DFC(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  JUMPOUT(0x1ADD57E08);
}

uint64_t std::__function::__func<quasar::rescoring::PreItnTokenExtractor::operator()(std::string const&,std::vector<std::string> *)::$_0,std::allocator<quasar::rescoring::PreItnTokenExtractor::operator()(std::string const&,std::vector<std::string> *)::$_0>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::rescoring::PreItnTokenExtractor::operator()(std::string const&,std::vector<std::string> *)::$_0,std::allocator<quasar::rescoring::PreItnTokenExtractor::operator()(std::string const&,std::vector<std::string> *)::$_0>,void ()(std::string const&)>::target_type()
{
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
  return v13;
}

void sub_1ADD57F84(_Unwind_Exception *a1, std::__split_buffer<std::wstring> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a10);
  _Unwind_Resume(a1);
}

_QWORD *quasar::QsrTextSymbolTable::Register(quasar::QsrTextSymbolTable *this, quasar::SystemConfig *a2, int a3, int a4, int a5, int a6)
{
  uint64_t *ModelLoaderPtr;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;

  std::string::basic_string[abi:ne180100]<0>(v16, "word-syms-marisa-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Base word symbol table in MARISA trie format (overrides other format files)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v16, (uint64_t)this, (uint64_t)__p, 0, a3, a4, a5, a6);
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "word-syms-map-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Base word symbol table mappable format filename (overrides text and binary format file)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v16, (uint64_t)this + 24, (uint64_t)__p, 0, a3, a4, a5, a6);
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "word-syms-binary-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Base word symbol table binary format filename (overrides text format file)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v16, (uint64_t)this + 48, (uint64_t)__p, 0, a3, a4, a5, a6);
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "word-syms-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Base word symbol table text format filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v16, (uint64_t)this + 72, (uint64_t)__p, 0, a3, a4, a5, a6);
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  ModelLoaderPtr = (uint64_t *)quasar::SystemConfig::getModelLoaderPtr(a2);
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)this + 16, ModelLoaderPtr);
}

void sub_1ADD58194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::QsrTextSymbolTable::init(const std::string *this, const quasar::SystemConfig::Version *a2, char a3, int a4, int a5)
{
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  std::string v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  if (!this[5].__r_.__value_.__l.__size_)
  {
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v18, "Model loader is deallocated");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v18);
  }
  std::string::basic_string[abi:ne180100]<0>(&v17, "");
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    if (this->__r_.__value_.__l.__size_)
      goto LABEL_4;
  }
  else if (*((_BYTE *)&this->__r_.__value_.__s + 23))
  {
LABEL_4:
    std::string::operator=(&v17, this);
    v10 = 1;
LABEL_17:
    quasar::ModelLoader::readSymbolTable(this[5].__r_.__value_.__l.__size_, (uint64_t)&v17, v10, a4, (uint64_t *)&v18);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&this[4], &v18);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
    if (!*((_QWORD *)&v18 + 1))
      goto LABEL_21;
    v12 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if ((a3 & 1) != 0)
        goto LABEL_22;
    }
    else
    {
LABEL_21:
      if ((a3 & 1) != 0)
      {
LABEL_22:
        v14 = 3;
LABEL_27:
        LODWORD(this[4].__r_.__value_.__r.__words[2]) = v14;
        v15 = 1;
        goto LABEL_28;
      }
    }
    quasar::SystemConfig::Version::Version(&v18, 79, 0);
    if (quasar::SystemConfig::Version::operator>=(a2, &v18))
      v14 = 3;
    else
      v14 = 2;
    goto LABEL_27;
  }
  if (SHIBYTE(this[1].__r_.__value_.__r.__words[2]) < 0)
  {
    if (this[1].__r_.__value_.__l.__size_)
      goto LABEL_8;
  }
  else if (*((_BYTE *)&this[1].__r_.__value_.__s + 23))
  {
LABEL_8:
    std::string::operator=(&v17, this + 1);
    v10 = 2;
    goto LABEL_17;
  }
  if (SHIBYTE(this[2].__r_.__value_.__r.__words[2]) < 0)
  {
    if (this[2].__r_.__value_.__l.__size_)
      goto LABEL_12;
  }
  else if (*((_BYTE *)&this[2].__r_.__value_.__s + 23))
  {
LABEL_12:
    std::string::operator=(&v17, this + 2);
    v10 = 3;
    goto LABEL_17;
  }
  if (SHIBYTE(this[3].__r_.__value_.__r.__words[2]) < 0)
  {
    if (this[3].__r_.__value_.__l.__size_)
      goto LABEL_16;
  }
  else if (*((_BYTE *)&this[3].__r_.__value_.__s + 23))
  {
LABEL_16:
    std::string::operator=(&v17, this + 3);
    v10 = 4;
    goto LABEL_17;
  }
  if (a5)
  {
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"No word symbol table file specified.", 36);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v18);
  }
  v15 = 0;
LABEL_28:
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return v15;
}

void sub_1ADD58464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::QsrTextSymbolTable::AddSymbol(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 32))(*(_QWORD *)(a1 + 96));
  if ((result & 0x8000000000000000) == 0)
    result += *(_QWORD *)(a1 + 120);
  return result;
}

void quasar::QsrTextSymbolTable::Find(quasar::QsrTextSymbolTable *this@<X0>, _QWORD *a2@<X8>)
{
  quasar::QsrText *v4;
  uint64_t v5;
  char v6;
  char v7;
  _QWORD *v8;
  __int128 *v9;
  uint64_t v10;
  _OWORD v11[17];
  __int128 v12;
  uint64_t v13;

  v4 = (quasar::QsrText *)(*(_QWORD *(**)(__int128 *__return_ptr))(**((_QWORD **)this + 12) + 88))(&v12);
  if (*((_DWORD *)this + 28) == 2)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v5 = quasar::QsrText::SingletonInstance(v4);
    v6 = quasar::QsrText::hatToQsrToken(v5, (uint64_t)&v12, (uint64_t)a2);
    if (quasar::gLogLevel < 1)
      v7 = 1;
    else
      v7 = v6;
    if ((v7 & 1) == 0)
    {
      memset(v11, 0, sizeof(v11));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Failed to convert HatText token to QsrText token:", 49);
      if (v13 >= 0)
        v9 = &v12;
      else
        v9 = (__int128 *)v12;
      if (v13 >= 0)
        v10 = HIBYTE(v13);
      else
        v10 = *((_QWORD *)&v12 + 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v11);
    }
  }
  else
  {
    *(_OWORD *)a2 = v12;
    a2[2] = v13;
    v13 = 0;
    v12 = 0uLL;
  }
  if (SHIBYTE(v13) < 0)
    operator delete((void *)v12);
}

void sub_1ADD585DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  if (*(char *)(v2 - 33) < 0)
    operator delete(*(void **)(v2 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t quasar::QsrTextSymbolTable::Find(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  char v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v15[17];
  void *v16[2];
  uint64_t v17;

  if (*(_DWORD *)(a1 + 112) == 2)
  {
    v16[0] = 0;
    v16[1] = 0;
    v17 = 0;
    v4 = quasar::QsrText::SingletonInstance((quasar::QsrText *)a1);
    v5 = quasar::QsrText::qsrSubTokenToHatToken(v4, a2, (uint64_t)v16, 1);
    if (quasar::gLogLevel < 1)
      v6 = 1;
    else
      v6 = v5;
    if ((v6 & 1) == 0)
    {
      memset(v15, 0, sizeof(v15));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Failed to convert QsrText token to HatText token:", 49);
      v8 = *(char *)(a2 + 23);
      if (v8 >= 0)
        v9 = a2;
      else
        v9 = *(_QWORD *)a2;
      if (v8 >= 0)
        v10 = *(unsigned __int8 *)(a2 + 23);
      else
        v10 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v15);
    }
    v11 = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(a1 + 96) + 96))(*(_QWORD *)(a1 + 96), v16);
    v12 = v11;
    if ((v11 & 0x8000000000000000) == 0)
      v12 = *(_QWORD *)(a1 + 120) + v11;
    if (SHIBYTE(v17) < 0)
      operator delete(v16[0]);
  }
  else
  {
    v13 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 96) + 96))(*(_QWORD *)(a1 + 96), a2);
    v12 = v13;
    if ((v13 & 0x8000000000000000) == 0)
      return *(_QWORD *)(a1 + 120) + v13;
  }
  return v12;
}

void sub_1ADD58758(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 33) < 0)
    operator delete(*(void **)(v1 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t quasar::QsrTextSymbolTable::Find(quasar::QsrTextSymbolTable *this, char *a2)
{
  uint64_t v4;
  char v5;
  char v6;
  _QWORD *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  void *v30[2];
  uint64_t v31;

  if (*((_DWORD *)this + 28) == 2)
  {
    v30[0] = 0;
    v30[1] = 0;
    v31 = 0;
    v4 = quasar::QsrText::SingletonInstance(this);
    std::string::basic_string[abi:ne180100]<0>(__p, a2);
    v5 = quasar::QsrText::qsrSubTokenToHatToken(v4, (uint64_t)__p, (uint64_t)v30, 1);
    if (SBYTE7(v14) < 0)
      operator delete(__p[0]);
    if (quasar::gLogLevel < 1)
      v6 = 1;
    else
      v6 = v5;
    if ((v6 & 1) == 0)
    {
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to convert QsrText token to HatText token:", 49);
      v8 = strlen(a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)a2, v8);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
    v9 = (*(uint64_t (**)(_QWORD, void **))(**((_QWORD **)this + 12) + 96))(*((_QWORD *)this + 12), v30);
    v10 = v9;
    if ((v9 & 0x8000000000000000) == 0)
      v10 = *((_QWORD *)this + 15) + v9;
    if (SHIBYTE(v31) < 0)
      operator delete(v30[0]);
  }
  else
  {
    v11 = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 12) + 104))(*((_QWORD *)this + 12), a2);
    v10 = v11;
    if ((v11 & 0x8000000000000000) == 0)
      return *((_QWORD *)this + 15) + v11;
  }
  return v10;
}

void sub_1ADD588EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 - 33) < 0)
    operator delete(*(void **)(v14 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t quasar::QsrTextSymbolTable::NumSymbols(quasar::QsrTextSymbolTable *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 120))(*((_QWORD *)this + 12));
}

uint64_t quasar::QsrTextSymbolTable::GetNthKey(quasar::QsrTextSymbolTable *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 128))(*((_QWORD *)this + 12));
  if ((result & 0x8000000000000000) == 0)
    result += *((_QWORD *)this + 15);
  return result;
}

uint64_t quasar::QsrTextSymbolTable::Write(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  char v4;
  int v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  quasar::QsrText *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  quasar::QsrText *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  void *__p[2];
  uint64_t v28;
  char v29;
  uint64_t v30;
  void *v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  if (*(_QWORD *)(a1 + 120))
  {
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    *(_OWORD *)v31 = 0u;
    v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, "Calling Write() when offset is nonzero is unsupported");
    goto LABEL_48;
  }
  v4 = a4;
  v7 = *(_DWORD *)(a1 + 112);
  if (v7 != a3)
  {
    if (a3 == 3 && v7 == 2)
    {
      fst::SymbolTable::SymbolTable((fst::SymbolTable *)&v29);
      v10 = *(_QWORD *)(a1 + 96);
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 120))(v10);
      v12 = (quasar::QsrText *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 128))(v10, 0);
      if (v11)
      {
        v13 = (uint64_t)v12;
        v14 = 0;
        do
        {
          v31[0] = 0;
          v31[1] = 0;
          *(_QWORD *)&v32 = 0;
          v15 = quasar::QsrText::SingletonInstance(v12);
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v10 + 88))(__p, v10, v13);
          v16 = quasar::QsrText::hatToQsrToken(v15, (uint64_t)__p, (uint64_t)v31);
          v17 = v16;
          if (SHIBYTE(v28) < 0)
          {
            operator delete(__p[0]);
            if ((v17 & 1) == 0)
            {
LABEL_13:
              (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v10 + 88))(__p, v10, v13);
              if (SBYTE7(v32) < 0)
                operator delete(v31[0]);
              *(_OWORD *)v31 = *(_OWORD *)__p;
              *(_QWORD *)&v32 = v28;
            }
          }
          else if ((v16 & 1) == 0)
          {
            goto LABEL_13;
          }
          fst::SymbolTable::MutateCheck((std::string *)&v29);
          v12 = (quasar::QsrText *)fst::SymbolTableImpl::AddSymbol(v30, (uint64_t)v31, v13);
          if (SBYTE7(v32) < 0)
            operator delete(v31[0]);
          if (++v14 < v11)
          {
            v12 = (quasar::QsrText *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 128))(v10, v14);
            v13 = (uint64_t)v12;
          }
        }
        while (v11 != v14);
      }
      if ((v4 & 1) != 0)
        goto LABEL_40;
      goto LABEL_43;
    }
    if (a3 == 2 && v7 == 3)
    {
      fst::SymbolTable::SymbolTable((fst::SymbolTable *)&v29);
      v18 = *(_QWORD *)(a1 + 96);
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 120))(v18);
      v20 = (quasar::QsrText *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 128))(v18, 0);
      if (!v19)
      {
LABEL_39:
        if ((v4 & 1) != 0)
        {
LABEL_40:
          v26 = fst::SymbolTableImpl::Write(v30, a2);
LABEL_45:
          fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&v29);
          return v26;
        }
LABEL_43:
        fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)v31);
        v26 = fst::SymbolTable::WriteText((uint64_t)&v29, (uint64_t)a2, (uint64_t)v31);
        if (SHIBYTE(v32) < 0)
          operator delete(v31[1]);
        goto LABEL_45;
      }
      v21 = (uint64_t)v20;
      v22 = 0;
      while (1)
      {
        v31[0] = 0;
        v31[1] = 0;
        *(_QWORD *)&v32 = 0;
        v23 = quasar::QsrText::SingletonInstance(v20);
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v18 + 88))(__p, v18, v21);
        v24 = quasar::QsrText::qsrSubTokenToHatToken(v23, (uint64_t)__p, (uint64_t)v31, 1);
        v25 = v24;
        if (SHIBYTE(v28) < 0)
        {
          operator delete(__p[0]);
          if ((v25 & 1) == 0)
          {
LABEL_31:
            (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v18 + 88))(__p, v18, v21);
            if (SBYTE7(v32) < 0)
              operator delete(v31[0]);
            *(_OWORD *)v31 = *(_OWORD *)__p;
            *(_QWORD *)&v32 = v28;
          }
        }
        else if ((v24 & 1) == 0)
        {
          goto LABEL_31;
        }
        fst::SymbolTable::MutateCheck((std::string *)&v29);
        v20 = (quasar::QsrText *)fst::SymbolTableImpl::AddSymbol(v30, (uint64_t)v31, v21);
        if (SBYTE7(v32) < 0)
          operator delete(v31[0]);
        if (++v22 < v19)
        {
          v20 = (quasar::QsrText *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 128))(v18, v22);
          v21 = (uint64_t)v20;
        }
        if (v19 == v22)
          goto LABEL_39;
      }
    }
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    *(_OWORD *)v31 = 0u;
    v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, "Programming error: Invalid output encoding");
LABEL_48:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v31);
  }
  v8 = *(_QWORD *)(a1 + 96);
  if (a4)
    return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 72))(v8, a2);
  fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)v31);
  v26 = (*(uint64_t (**)(uint64_t, _QWORD *, void **))(*(_QWORD *)v8 + 80))(v8, a2, v31);
  if (SHIBYTE(v32) < 0)
    operator delete(v31[1]);
  return v26;
}

void sub_1ADD58DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&a16);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::GlobalAttentionComponent::GlobalAttentionComponent(kaldi::nnet1::GlobalAttentionComponent *this, int a2, int a3)
{
  double result;

  *((_DWORD *)this + 220) = a2;
  *((_DWORD *)this + 221) = a3;
  *((_WORD *)this + 444) = 0;
  *((_QWORD *)this + 112) = 0;
  *((_QWORD *)this + 114) = 0;
  *((_QWORD *)this + 113) = 0;
  *((_QWORD *)this + 115) = &off_1E5D2D150;
  *((_OWORD *)this + 58) = xmmword_1AE13F660;
  *((_QWORD *)this + 118) = 0x3BF800000;
  *((_DWORD *)this + 238) = 1;
  *((_WORD *)this + 478) = 0;
  *((_BYTE *)this + 958) = 0;
  *((_QWORD *)this + 1) = -1;
  *(_QWORD *)this = &off_1E5D2F830;
  *((_QWORD *)this + 109) = &off_1E5D2FA38;
  result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 6) = &unk_1E5D34170;
  *((_BYTE *)this + 88) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 12) = &unk_1E5D34170;
  *((_BYTE *)this + 136) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_QWORD *)this + 18) = &unk_1E5D34170;
  *((_BYTE *)this + 184) = 0;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_QWORD *)this + 24) = &unk_1E5D34170;
  *((_BYTE *)this + 232) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 30) = &unk_1E5D34170;
  *((_BYTE *)this + 280) = 0;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((_QWORD *)this + 36) = &unk_1E5D34170;
  *((_BYTE *)this + 328) = 0;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((_QWORD *)this + 42) = &unk_1E5D34170;
  *((_BYTE *)this + 376) = 0;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *((_QWORD *)this + 48) = &unk_1E5D34170;
  *((_BYTE *)this + 424) = 0;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *((_QWORD *)this + 54) = &unk_1E5D34170;
  *((_BYTE *)this + 472) = 0;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *((_QWORD *)this + 60) = &unk_1E5D34170;
  *((_BYTE *)this + 520) = 0;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *((_QWORD *)this + 66) = &unk_1E5D34170;
  *((_BYTE *)this + 568) = 0;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((_QWORD *)this + 72) = &unk_1E5D34170;
  *((_BYTE *)this + 616) = 0;
  *((_QWORD *)this + 80) = 0;
  *((_QWORD *)this + 79) = 0;
  *((_QWORD *)this + 81) = 0;
  *((_QWORD *)this + 78) = &unk_1E5D341C8;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *((_QWORD *)this + 82) = &unk_1E5D34170;
  *((_BYTE *)this + 696) = 0;
  *((_QWORD *)this + 90) = 0;
  *((_QWORD *)this + 89) = 0;
  *((_QWORD *)this + 91) = 0;
  *((_QWORD *)this + 88) = &unk_1E5D341C8;
  *((_QWORD *)this + 94) = 0;
  *((_QWORD *)this + 93) = 0;
  *((_QWORD *)this + 95) = 0;
  *((_QWORD *)this + 92) = &unk_1E5D341C8;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *((_QWORD *)this + 96) = &unk_1E5D34170;
  *((_BYTE *)this + 808) = 0;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_DWORD *)this + 216) = -1;
  *((_BYTE *)this + 868) = 0;
  return result;
}

kaldi::nnet1::GlobalAttentionComponent *kaldi::nnet1::GlobalAttentionComponent::GlobalAttentionComponent(kaldi::nnet1::GlobalAttentionComponent *this, const kaldi::nnet1::GlobalAttentionComponent *a2)
{
  int32x2_t *v4;
  int32x2_t *v5;
  int32x2_t *v6;
  int32x2_t *v7;
  int32x2_t *v8;
  int32x2_t *v9;
  int32x2_t *v10;
  int32x2_t *v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int32x2_t *v18;
  int32x2_t *v19;
  int32x2_t *v20;
  int32x2_t *v21;
  int32x2_t *v22;
  int32x2_t *v23;

  *((_QWORD *)this + 110) = *(_QWORD *)((char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 24) + 8);
  *((_WORD *)this + 444) = 0;
  *((_QWORD *)this + 112) = 0;
  *((_QWORD *)this + 114) = 0;
  *((_QWORD *)this + 113) = 0;
  *((_QWORD *)this + 115) = &off_1E5D2D150;
  *((_OWORD *)this + 58) = xmmword_1AE13F660;
  *((_DWORD *)this + 236) = -1082130432;
  *(_QWORD *)((char *)this + 948) = 0x100000003;
  *((_WORD *)this + 478) = 0;
  *((_BYTE *)this + 958) = 0;
  *((_QWORD *)this + 1) = -1;
  *(_QWORD *)this = &off_1E5D2F830;
  *((_QWORD *)this + 109) = &off_1E5D2FA38;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 6) = &unk_1E5D34170;
  v23 = (int32x2_t *)((char *)this + 48);
  *((_BYTE *)this + 88) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 12) = &unk_1E5D34170;
  v4 = (int32x2_t *)((char *)this + 96);
  *((_BYTE *)this + 136) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_QWORD *)this + 18) = &unk_1E5D34170;
  v5 = (int32x2_t *)((char *)this + 144);
  *((_BYTE *)this + 184) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_QWORD *)this + 24) = &unk_1E5D34170;
  v6 = (int32x2_t *)((char *)this + 192);
  *((_BYTE *)this + 232) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 30) = &unk_1E5D34170;
  *((_BYTE *)this + 280) = 0;
  v21 = (int32x2_t *)((char *)this + 288);
  v22 = (int32x2_t *)((char *)this + 240);
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((_QWORD *)this + 36) = &unk_1E5D34170;
  *((_BYTE *)this + 328) = 0;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((_QWORD *)this + 42) = &unk_1E5D34170;
  *((_BYTE *)this + 376) = 0;
  v19 = (int32x2_t *)((char *)this + 384);
  v20 = (int32x2_t *)((char *)this + 336);
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *((_QWORD *)this + 48) = &unk_1E5D34170;
  *((_BYTE *)this + 424) = 0;
  v18 = (int32x2_t *)((char *)this + 432);
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *((_QWORD *)this + 54) = &unk_1E5D34170;
  *((_BYTE *)this + 472) = 0;
  v7 = (int32x2_t *)((char *)this + 480);
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *((_QWORD *)this + 60) = &unk_1E5D34170;
  *((_BYTE *)this + 520) = 0;
  v8 = (int32x2_t *)((char *)this + 528);
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *((_QWORD *)this + 66) = &unk_1E5D34170;
  *((_BYTE *)this + 568) = 0;
  v9 = (int32x2_t *)((char *)this + 576);
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((_QWORD *)this + 72) = &unk_1E5D34170;
  *((_BYTE *)this + 616) = 0;
  v17 = (char *)this + 624;
  *((_QWORD *)this + 80) = 0;
  *((_QWORD *)this + 81) = 0;
  *((_QWORD *)this + 78) = &unk_1E5D341C8;
  *((_QWORD *)this + 79) = 0;
  v10 = (int32x2_t *)((char *)this + 656);
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *((_QWORD *)this + 82) = &unk_1E5D34170;
  *((_BYTE *)this + 696) = 0;
  *((_QWORD *)this + 90) = 0;
  *((_QWORD *)this + 89) = 0;
  *((_QWORD *)this + 91) = 0;
  *((_QWORD *)this + 88) = &unk_1E5D341C8;
  v15 = (char *)this + 736;
  v16 = (char *)this + 704;
  *((_QWORD *)this + 94) = 0;
  *((_QWORD *)this + 93) = 0;
  *((_QWORD *)this + 95) = 0;
  *((_QWORD *)this + 92) = &unk_1E5D341C8;
  v11 = (int32x2_t *)((char *)this + 768);
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *((_QWORD *)this + 96) = &unk_1E5D34170;
  *((_BYTE *)this + 808) = 0;
  v13 = (char *)this + 840;
  v14 = (char *)this + 816;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 2) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 16))(*((_QWORD *)a2 + 2));
  *((_QWORD *)this + 3) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 3) + 16))(*((_QWORD *)a2 + 3));
  *((_QWORD *)this + 4) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 4) + 16))(*((_QWORD *)a2 + 4));
  *((_QWORD *)this + 5) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 5) + 16))(*((_QWORD *)a2 + 5));
  kaldi::CuMatrix<float>::operator=(v23, (int32x2_t *)a2 + 6);
  kaldi::CuMatrix<float>::operator=(v4, (int32x2_t *)a2 + 12);
  kaldi::CuMatrix<float>::operator=(v5, (int32x2_t *)a2 + 18);
  kaldi::CuMatrix<float>::operator=(v6, (int32x2_t *)a2 + 24);
  kaldi::CuMatrix<float>::operator=(v22, (int32x2_t *)a2 + 30);
  kaldi::CuMatrix<float>::operator=(v21, (int32x2_t *)a2 + 36);
  kaldi::CuMatrix<float>::operator=(v20, (int32x2_t *)a2 + 42);
  kaldi::CuMatrix<float>::operator=(v19, (int32x2_t *)a2 + 48);
  kaldi::CuMatrix<float>::operator=(v18, (int32x2_t *)a2 + 54);
  kaldi::CuMatrix<float>::operator=(v7, (int32x2_t *)a2 + 60);
  kaldi::CuMatrix<float>::operator=(v8, (int32x2_t *)a2 + 66);
  kaldi::CuMatrix<float>::operator=(v9, (int32x2_t *)a2 + 72);
  kaldi::CuVector<float>::operator=((uint64_t)v17, (uint64_t)a2 + 624);
  kaldi::CuMatrix<float>::operator=(v10, (int32x2_t *)a2 + 82);
  kaldi::CuVector<float>::operator=((uint64_t)v16, (uint64_t)a2 + 704);
  kaldi::CuVector<float>::operator=((uint64_t)v15, (uint64_t)a2 + 736);
  kaldi::CuMatrix<float>::operator=(v11, (int32x2_t *)a2 + 96);
  if (this != a2)
  {
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>((uint64_t)v14, *((_QWORD *)a2 + 102), *((_QWORD *)a2 + 103), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 103) - *((_QWORD *)a2 + 102)) >> 3));
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v13, *((char **)a2 + 105), *((_QWORD *)a2 + 106), (uint64_t)(*((_QWORD *)a2 + 106) - *((_QWORD *)a2 + 105)) >> 2);
  }
  *((_DWORD *)this + 216) = *((_DWORD *)a2 + 216);
  *((_BYTE *)this + 868) = *((_BYTE *)a2 + 868);
  return this;
}

void sub_1ADD59438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, kaldi::nnet1::UpdatableComponent *a10, void **a11, uint64_t a12, _QWORD *a13, _QWORD *a14, _QWORD *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  quasar::Bitmap *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v32;

  v32 = *a11;
  if (*a11)
  {
    *((_QWORD *)v21 + 106) = v32;
    operator delete(v32);
  }
  *(_QWORD *)(v30 - 88) = a12;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 88));
  kaldi::CuMatrix<float>::~CuMatrix(v23);
  kaldi::CuVector<float>::~CuVector(a13);
  kaldi::CuVector<float>::~CuVector(a14);
  kaldi::CuMatrix<float>::~CuMatrix(v27);
  kaldi::CuVector<float>::~CuVector(a15);
  kaldi::CuMatrix<float>::~CuMatrix(v22);
  kaldi::CuMatrix<float>::~CuMatrix(v29);
  kaldi::CuMatrix<float>::~CuMatrix(v28);
  kaldi::CuMatrix<float>::~CuMatrix(a16);
  kaldi::CuMatrix<float>::~CuMatrix(a17);
  kaldi::CuMatrix<float>::~CuMatrix(a18);
  kaldi::CuMatrix<float>::~CuMatrix(a19);
  kaldi::CuMatrix<float>::~CuMatrix(a20);
  kaldi::CuMatrix<float>::~CuMatrix(v26);
  kaldi::CuMatrix<float>::~CuMatrix(v25);
  kaldi::CuMatrix<float>::~CuMatrix(v24);
  kaldi::CuMatrix<float>::~CuMatrix(a21);
  quasar::Bitmap::~Bitmap(v21);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GlobalAttentionComponent::~GlobalAttentionComponent(kaldi::nnet1::GlobalAttentionComponent *this, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void **v9;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24)) = a2[3];
  v4 = *((_QWORD *)this + 2);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 3);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 4);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 5);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = (void *)*((_QWORD *)this + 105);
  if (v8)
  {
    *((_QWORD *)this + 106) = v8;
    operator delete(v8);
  }
  v9 = (void **)((char *)this + 816);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v9);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 768);
  *((_QWORD *)this + 92) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 736);
  *((_QWORD *)this + 88) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 704);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 656);
  *((_QWORD *)this + 78) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 624);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 576);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 528);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 480);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 432);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 384);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 336);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 288);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 240);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 192);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 144);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 96);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 48);
  quasar::Bitmap::~Bitmap(this);
}

void kaldi::nnet1::GlobalAttentionComponent::~GlobalAttentionComponent(kaldi::nnet1::GlobalAttentionComponent *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 872));
}

{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 872));
  JUMPOUT(0x1AF44D190);
}

void `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::~GlobalAttentionComponent(kaldi::nnet1::GlobalAttentionComponent *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 872));
}

{
  kaldi::nnet1::GlobalAttentionComponent::~GlobalAttentionComponent((kaldi::nnet1::GlobalAttentionComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::Copy(kaldi::nnet1::GlobalAttentionComponent *this)
{
  kaldi::nnet1::GlobalAttentionComponent *v2;

  v2 = (kaldi::nnet1::GlobalAttentionComponent *)operator new();
  kaldi::nnet1::GlobalAttentionComponent::GlobalAttentionComponent(v2, this);
  return (uint64_t)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
}

void sub_1ADD59778(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40813A3384);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::Copy(kaldi::nnet1::GlobalAttentionComponent *this)
{
  return kaldi::nnet1::GlobalAttentionComponent::Copy((kaldi::nnet1::GlobalAttentionComponent *)((char *)this
                                                                                               + *(_QWORD *)(*(_QWORD *)this - 32)));
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::GetType(kaldi::nnet1::GlobalAttentionComponent *this)
{
  return 282;
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::GetType(kaldi::nnet1::GlobalAttentionComponent *this)
{
  return 282;
}

void kaldi::nnet1::GlobalAttentionComponent::InitData(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  char *v5;
  _QWORD *v6;
  BOOL v8;
  uint64_t v9;
  void *v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  void **v15;
  void *v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  kaldi::nnet1::Component *v23;
  const void *v24;
  void *v25;
  kaldi::nnet1::Component *v26;
  const void *v27;
  void *v28;
  kaldi::nnet1::Component *v29;
  const void *v30;
  void *v31;
  kaldi::nnet1::Component *v32;
  const void *v33;
  void *v34;
  _QWORD *v35;
  void **v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  void *p_p;
  uint64_t v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  void *v47;
  uint64_t v48;
  _QWORD *v49;
  void *v50;
  uint64_t v51;
  uint64_t v54;
  void *__p;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[34];
  void *v59[4];

  memset(v59, 0, 24);
  v4 = a2 + 4;
  v5 = (char *)a1 + 12;
  v6 = a1 + 1;
  while (1)
  {
    if ((*((_BYTE *)v4 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
      goto LABEL_44;
    kaldi::ReadToken(a2, 0, (uint64_t)v59);
    if (SHIBYTE(v59[2]) < 0)
      break;
    if (HIBYTE(v59[2]) == 15)
    {
      v14 = v59[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v59 + 7) == (void *)0x3E736E6F69746E65;
      v9 = (uint64_t)v5;
      if (!v14)
      {
LABEL_35:
        if (HIBYTE(v59[2]) == 12)
        {
          v15 = v59;
          goto LABEL_39;
        }
        goto LABEL_65;
      }
    }
    else
    {
      if (HIBYTE(v59[2]) != 22)
        goto LABEL_35;
      v8 = v59[0] == (void *)0x53656372756F533CLL
        && v59[1] == (void *)0x656D694465746174
        && *(void **)((char *)&v59[1] + 6) == (void *)0x3E6E6F69736E656DLL;
      v9 = (uint64_t)v6;
      if (!v8)
        goto LABEL_65;
    }
LABEL_34:
    kaldi::ReadBasicType<int>(a2, 0, v9);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v10 = v59[1];
  if (v59[1] != (void *)15)
  {
    if (v59[1] != (void *)22)
      goto LABEL_37;
    v11 = *(_QWORD *)v59[0] == 0x53656372756F533CLL && *((_QWORD *)v59[0] + 1) == 0x656D694465746174;
    v12 = v11 && *(_QWORD *)((char *)v59[0] + 14) == 0x3E6E6F69736E656DLL;
    v9 = (uint64_t)v6;
    if (!v12)
      goto LABEL_37;
    goto LABEL_34;
  }
  v13 = *(_QWORD *)v59[0] == 0x6574744178614D3CLL && *(_QWORD *)((char *)v59[0] + 7) == 0x3E736E6F69746E65;
  v9 = (uint64_t)v5;
  if (v13)
    goto LABEL_34;
  v10 = v59[1];
LABEL_37:
  if (v10 != (void *)12)
    goto LABEL_65;
  v15 = (void **)v59[0];
LABEL_39:
  v16 = *v15;
  v17 = *((_DWORD *)v15 + 2);
  if (v16 != (void *)0x6E6F706D6F432F3CLL || v17 != 1047817829)
  {
LABEL_65:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v58);
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Unknown token ", 14);
    if (SHIBYTE(v59[2]) >= 0)
      v36 = v59;
    else
      v36 = (void **)v59[0];
    if (SHIBYTE(v59[2]) >= 0)
      v37 = HIBYTE(v59[2]);
    else
      v37 = (uint64_t)v59[1];
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
    v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" (SourceStateDimension|MaxAttentions)", 37);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v58);
  }
LABEL_44:
  v19 = a1[2];
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = a1[3];
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = a1[4];
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = a1[5];
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  __p = 0;
  v56 = 0;
  v57 = 0;
  v54 = 0;
  kaldi::ExpectToken(a2, 0, "<SourceDotTransform>");
  kaldi::ReadToken(a2, 0, (uint64_t)&__p);
  v23 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
  kaldi::ExpectToken(a2, 0, "<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v54 + 4);
  kaldi::ExpectToken(a2, 0, "<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v54);
  v24 = (const void *)kaldi::nnet1::Component::NewComponentOfType(v23, HIDWORD(v54), v54);
  if (!v24)
  {
    a1[2] = 0;
LABEL_73:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v58);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"this is not an updatable component, you used ", 45);
    if (v57 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v57 >= 0)
      v42 = HIBYTE(v57);
    else
      v42 = v56;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)p_p, v42);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v58);
  }
  a1[2] = v25;
  if (!v25)
    goto LABEL_73;
  (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v25 + 96))(v25, a2, a3);
  kaldi::ExpectToken(a2, 0, "<TargetDotTransform>");
  kaldi::ReadToken(a2, 0, (uint64_t)&__p);
  v26 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
  kaldi::ExpectToken(a2, 0, "<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v54 + 4);
  kaldi::ExpectToken(a2, 0, "<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v54);
  v27 = (const void *)kaldi::nnet1::Component::NewComponentOfType(v26, HIDWORD(v54), v54);
  if (!v27)
  {
    a1[3] = 0;
LABEL_81:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v58);
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"this is not an updatable component, you used ", 45);
    if (v57 >= 0)
      v44 = &__p;
    else
      v44 = __p;
    if (v57 >= 0)
      v45 = HIBYTE(v57);
    else
      v45 = v56;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v44, v45);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v58);
  }
  a1[3] = v28;
  if (!v28)
    goto LABEL_81;
  (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v28 + 96))(v28, a2, a3);
  kaldi::ExpectToken(a2, 0, "<SourceAddTransform>");
  kaldi::ReadToken(a2, 0, (uint64_t)&__p);
  v29 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
  kaldi::ExpectToken(a2, 0, "<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v54 + 4);
  kaldi::ExpectToken(a2, 0, "<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v54);
  v30 = (const void *)kaldi::nnet1::Component::NewComponentOfType(v29, HIDWORD(v54), v54);
  if (!v30)
  {
    a1[4] = 0;
LABEL_89:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v58);
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"this is not an updatable component, you used ", 45);
    if (v57 >= 0)
      v47 = &__p;
    else
      v47 = __p;
    if (v57 >= 0)
      v48 = HIBYTE(v57);
    else
      v48 = v56;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v58);
  }
  a1[4] = v31;
  if (!v31)
    goto LABEL_89;
  (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v31 + 96))(v31, a2, a3);
  kaldi::ExpectToken(a2, 0, "<TargetAddTransform>");
  kaldi::ReadToken(a2, 0, (uint64_t)&__p);
  v32 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&__p);
  kaldi::ExpectToken(a2, 0, "<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v54 + 4);
  kaldi::ExpectToken(a2, 0, "<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v54);
  v33 = (const void *)kaldi::nnet1::Component::NewComponentOfType(v32, HIDWORD(v54), v54);
  if (!v33)
  {
    a1[5] = 0;
LABEL_97:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v58);
    v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"this is not an updatable component, you used ", 45);
    if (v57 >= 0)
      v50 = &__p;
    else
      v50 = __p;
    if (v57 >= 0)
      v51 = HIBYTE(v57);
    else
      v51 = v56;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v58);
  }
  a1[5] = v34;
  if (!v34)
    goto LABEL_97;
  (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v34 + 96))(v34, a2, a3);
  kaldi::nnet1::GlobalAttentionComponent::Check((uint64_t)a1);
  if (SHIBYTE(v57) < 0)
    operator delete(__p);
  if (SHIBYTE(v59[2]) < 0)
    operator delete(v59[0]);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::Check(uint64_t this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD v17[34];

  if (!*(_BYTE *)(this + 868))
  {
    if (*(int *)(this + 12) < 1 || (v1 = *(_DWORD *)(this + 8), v1 <= 0))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"component is not initialized, max attention is ", 47);
      v9 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", source state dimension is ", 28);
      std::ostream::operator<<();
    }
    else
    {
      v2 = *(_QWORD *)(this + 16);
      if (v1 == *(_DWORD *)(v2 + 8))
      {
        v3 = *(_QWORD *)(this + 32);
        if (v1 == *(_DWORD *)(v3 + 8))
        {
          v4 = this + *(_QWORD *)(*(_QWORD *)this - 24);
          v5 = *(_DWORD *)(v4 + 8);
          v6 = *(_QWORD *)(this + 24);
          if (v5 == *(_DWORD *)(v6 + 8))
          {
            v7 = *(_QWORD *)(this + 40);
            if (v5 == *(_DWORD *)(v7 + 8))
            {
              if (*(_DWORD *)(v2 + 12) == *(_DWORD *)(v6 + 12))
              {
                v8 = *(_DWORD *)(v3 + 12);
                if (v8 == *(_DWORD *)(v7 + 12))
                {
                  if (*(_DWORD *)(v4 + 12) == v8)
                  {
                    *(_BYTE *)(this + 868) = 1;
                    return this;
                  }
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"the source/target add transform has output dim ", 47);
                  v16 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" , but the component has output dim ", 36);
                  std::ostream::operator<<();
                }
                else
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"the source and target add transform has different output dim ", 61);
                  v15 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" vs ", 4);
                  std::ostream::operator<<();
                }
              }
              else
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"the source and target dot transform has different output dim ", 61);
                v14 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" vs ", 4);
                std::ostream::operator<<();
              }
            }
            else
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"the component has input dim ", 28);
              v13 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" , but the target add transform has input dim ", 46);
              std::ostream::operator<<();
            }
          }
          else
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"the component has input dim ", 28);
            v12 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" , but the target dot transform has input dim ", 46);
            std::ostream::operator<<();
          }
        }
        else
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"source state dimension is ", 26);
          v11 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" , but the source add transform has input dim ", 46);
          std::ostream::operator<<();
        }
      }
      else
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"source state dimension is ", 26);
        v10 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" , but the source dot transform has input dim ", 46);
        std::ostream::operator<<();
      }
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  return this;
}

void `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::InitData(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  kaldi::nnet1::GlobalAttentionComponent::InitData((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 112)), a2, a3);
}

void kaldi::nnet1::GlobalAttentionComponent::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  BOOL v8;
  uint64_t v9;
  void *v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  void **v15;
  void *v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  void *v24;
  const void *v25;
  void *v26;
  const void *v27;
  void *v28;
  const void *v29;
  void *v30;
  _QWORD *v31;
  void **v32;
  uint64_t v33;
  void *__p[3];
  _QWORD v36[35];

  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Reading attention model", 23);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v36);
  }
  memset(__p, 0, sizeof(__p));
  while (1)
  {
    if (kaldi::Peek(a2, a3) != 60)
      goto LABEL_46;
    kaldi::ReadToken(a2, a3, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0)
      break;
    if (HIBYTE(__p[2]) == 15)
    {
      v14 = __p[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)__p + 7) == (void *)0x3E736E6F69746E65;
      v9 = (uint64_t)a1 + 12;
      if (!v14)
      {
LABEL_37:
        if (HIBYTE(__p[2]) == 12)
        {
          v15 = __p;
          goto LABEL_41;
        }
        goto LABEL_65;
      }
    }
    else
    {
      if (HIBYTE(__p[2]) != 22)
        goto LABEL_37;
      v8 = __p[0] == (void *)0x53656372756F533CLL
        && __p[1] == (void *)0x656D694465746174
        && *(void **)((char *)&__p[1] + 6) == (void *)0x3E6E6F69736E656DLL;
      v9 = (uint64_t)(a1 + 1);
      if (!v8)
        goto LABEL_65;
    }
LABEL_36:
    kaldi::ReadBasicType<int>(a2, a3, v9);
  }
  v10 = __p[1];
  if (__p[1] != (void *)15)
  {
    if (__p[1] != (void *)22)
      goto LABEL_39;
    v11 = *(_QWORD *)__p[0] == 0x53656372756F533CLL && *((_QWORD *)__p[0] + 1) == 0x656D694465746174;
    v12 = v11 && *(_QWORD *)((char *)__p[0] + 14) == 0x3E6E6F69736E656DLL;
    v9 = (uint64_t)(a1 + 1);
    if (!v12)
      goto LABEL_39;
    goto LABEL_36;
  }
  v13 = *(_QWORD *)__p[0] == 0x6574744178614D3CLL && *(_QWORD *)((char *)__p[0] + 7) == 0x3E736E6F69746E65;
  v9 = (uint64_t)a1 + 12;
  if (v13)
    goto LABEL_36;
  v10 = __p[1];
LABEL_39:
  if (v10 != (void *)12)
    goto LABEL_65;
  v15 = (void **)__p[0];
LABEL_41:
  v16 = *v15;
  v17 = *((_DWORD *)v15 + 2);
  if (v16 != (void *)0x6E6F706D6F432F3CLL || v17 != 1047817829)
  {
LABEL_65:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Unrecognized token ", 19);
    if (SHIBYTE(__p[2]) >= 0)
      v32 = __p;
    else
      v32 = (void **)__p[0];
    if (SHIBYTE(__p[2]) >= 0)
      v33 = HIBYTE(__p[2]);
    else
      v33 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
  }
LABEL_46:
  v19 = a1[2];
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = a1[3];
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = a1[4];
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = a1[5];
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  kaldi::ExpectToken(a2, a3, "<SourceDotTransform>");
  v23 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v23)
  {
    a1[2] = 0;
LABEL_73:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"read source dot transform failed", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
  }
  a1[2] = v24;
  if (!v24)
    goto LABEL_73;
  kaldi::ExpectToken(a2, a3, "</Component>");
  kaldi::ExpectToken(a2, a3, "<TargetDotTransform>");
  v25 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v25)
  {
    a1[3] = 0;
LABEL_75:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"read target dot transform failed", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
  }
  a1[3] = v26;
  if (!v26)
    goto LABEL_75;
  kaldi::ExpectToken(a2, a3, "</Component>");
  kaldi::ExpectToken(a2, a3, "<SourceAddTransform>");
  v27 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v27)
  {
    a1[4] = 0;
LABEL_77:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"read source add transform failed", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
  }
  a1[4] = v28;
  if (!v28)
    goto LABEL_77;
  kaldi::ExpectToken(a2, a3, "</Component>");
  kaldi::ExpectToken(a2, a3, "<TargetAddTransform>");
  v29 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v29)
  {
    a1[5] = 0;
LABEL_79:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"read target dot transform failed", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v36);
  }
  a1[5] = v30;
  if (!v30)
    goto LABEL_79;
  kaldi::ExpectToken(a2, a3, "</Component>");
  kaldi::nnet1::GlobalAttentionComponent::Check((uint64_t)a1);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
}

void sub_1ADD5A820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::GlobalAttentionComponent::ReadData((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 176)), a2, a3, a4);
}

_QWORD *kaldi::nnet1::GlobalAttentionComponent::WriteConfig(int a1, _QWORD *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<SourceStateDimension>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxAttentions>");
  kaldi::WriteBasicType<int>(a2, a3);
  return kaldi::WriteToken(a2, a3, "</Component>");
}

_QWORD *`virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::WriteConfig(_QWORD *a1, _QWORD *a2, int a3)
{
  return kaldi::nnet1::GlobalAttentionComponent::WriteConfig(a1 + *(_QWORD *)(*a1 - 184), a2, a3);
}

_QWORD *kaldi::nnet1::GlobalAttentionComponent::WriteData(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t *))(*a1 + 96))(a1);
  kaldi::WriteToken(a2, a3, "<SourceDotTransform>");
  kaldi::nnet1::Component::Write(a1[2], a2, a3, a4);
  kaldi::WriteToken(a2, a3, "</Component>");
  kaldi::WriteToken(a2, a3, "<TargetDotTransform>");
  kaldi::nnet1::Component::Write(a1[3], a2, a3, a4);
  kaldi::WriteToken(a2, a3, "</Component>");
  kaldi::WriteToken(a2, a3, "<SourceAddTransform>");
  kaldi::nnet1::Component::Write(a1[4], a2, a3, a4);
  kaldi::WriteToken(a2, a3, "</Component>");
  kaldi::WriteToken(a2, a3, "<TargetAddTransform>");
  kaldi::nnet1::Component::Write(a1[5], a2, a3, a4);
  return kaldi::WriteToken(a2, a3, "</Component>");
}

_QWORD *`virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::WriteData(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::GlobalAttentionComponent::WriteData((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 120)), a2, a3, a4);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::NumParams(kaldi::nnet1::GlobalAttentionComponent *this)
{
  int v2;
  int v3;
  int v4;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 176))(*((_QWORD *)this + 2));
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 176))(*((_QWORD *)this + 3)) + v2;
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 176))(*((_QWORD *)this + 4));
  return v3 + v4 + (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 5) + 176))(*((_QWORD *)this + 5));
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::NumParams(kaldi::nnet1::GlobalAttentionComponent *this)
{
  return kaldi::nnet1::GlobalAttentionComponent::NumParams((kaldi::nnet1::GlobalAttentionComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 192)));
}

void kaldi::nnet1::GlobalAttentionComponent::GetParams(_QWORD **a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = ((uint64_t (*)(_QWORD **))(*a1)[14])(a1);
  kaldi::Vector<float>::Resize(a2, v4, 1);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  (*(void (**)(_QWORD *, const void **))(*a1[2] + 184))(a1[2], &v11);
  v9 = 0;
  v10 = 0;
  v8 = (char *)*a2;
  LODWORD(v9) = v12;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v8, &v11);
  v5 = (int)v12;
  (*(void (**)(_QWORD *, const void **))(*a1[3] + 184))(a1[3], &v11);
  v9 = 0;
  v10 = 0;
  v8 = (char *)*a2 + 4 * v5;
  LODWORD(v9) = v12;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v8, &v11);
  v6 = v12;
  (*(void (**)(_QWORD *, const void **))(*a1[4] + 184))(a1[4], &v11);
  LODWORD(v5) = v6 + v5;
  v9 = 0;
  v10 = 0;
  v8 = (char *)*a2 + 4 * (int)v5;
  LODWORD(v9) = v12;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v8, &v11);
  v7 = v12;
  (*(void (**)(_QWORD *, const void **))(*a1[5] + 184))(a1[5], &v11);
  v9 = 0;
  v10 = 0;
  v8 = (char *)*a2 + 4 * v7 + 4 * (int)v5;
  LODWORD(v9) = v12;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v8, &v11);
  kaldi::Vector<float>::Destroy((uint64_t)&v11);
}

void sub_1ADD5ABF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::GetParams(_QWORD *a1, void **a2)
{
  kaldi::nnet1::GlobalAttentionComponent::GetParams((_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 200)), a2);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::SetParams(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1[2];
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4);
  v14 = 0;
  v15 = 0;
  v13 = *a2;
  LODWORD(v14) = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 192))(v4, &v13);
  LODWORD(v4) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[2] + 176))(a1[2]);
  v6 = a1[3];
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6);
  v14 = 0;
  v15 = 0;
  v13 = *a2 + 4 * (int)v4;
  LODWORD(v14) = v7;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 192))(v6, &v13);
  LODWORD(v6) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[3] + 176))(a1[3]) + v4;
  v8 = a1[4];
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 176))(v8);
  v14 = 0;
  v15 = 0;
  v13 = *a2 + 4 * (int)v6;
  LODWORD(v14) = v9;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 192))(v8, &v13);
  LODWORD(v6) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[4] + 176))(a1[4]) + v6;
  v10 = a1[5];
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 176))(v10);
  v14 = 0;
  v15 = 0;
  v13 = *a2 + 4 * (int)v6;
  LODWORD(v14) = v11;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 192))(v10, &v13);
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[5] + 176))(a1[5]);
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::SetParams(_QWORD *a1, uint64_t *a2)
{
  return kaldi::nnet1::GlobalAttentionComponent::SetParams((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 208)), a2);
}

float kaldi::nnet1::GlobalAttentionComponent::SumParams(kaldi::nnet1::GlobalAttentionComponent *this)
{
  float v2;
  float v3;
  float v4;

  v2 = (*(float (**)(_QWORD))(**((_QWORD **)this + 2) + 208))(*((_QWORD *)this + 2));
  v3 = v2 + (*(float (**)(_QWORD))(**((_QWORD **)this + 3) + 208))(*((_QWORD *)this + 3));
  v4 = v3 + (*(float (**)(_QWORD))(**((_QWORD **)this + 4) + 208))(*((_QWORD *)this + 4));
  return v4 + (*(float (**)(_QWORD))(**((_QWORD **)this + 5) + 208))(*((_QWORD *)this + 5));
}

float `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::SumParams(kaldi::nnet1::GlobalAttentionComponent *this)
{
  return kaldi::nnet1::GlobalAttentionComponent::SumParams((kaldi::nnet1::GlobalAttentionComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 224)));
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::PerturbParams(kaldi::nnet1::GlobalAttentionComponent *this, float a2)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 216))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD, float))(**((_QWORD **)this + 3) + 216))(*((_QWORD *)this + 3), a2);
  (*(void (**)(_QWORD, float))(**((_QWORD **)this + 4) + 216))(*((_QWORD *)this + 4), a2);
  return (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 5) + 216))(*((_QWORD *)this + 5), a2);
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::PerturbParams(kaldi::nnet1::GlobalAttentionComponent *this, float a2)
{
  return kaldi::nnet1::GlobalAttentionComponent::PerturbParams((kaldi::nnet1::GlobalAttentionComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 232)), a2);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::Info(kaldi::nnet1::GlobalAttentionComponent *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  void **v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void **v23;
  uint64_t v24;
  void *__p[2];
  unsigned __int8 v27;
  void *v28[2];
  unsigned __int8 v29;
  void *v30[2];
  unsigned __int8 v31;
  void *v32[2];
  unsigned __int8 v33;
  _QWORD v34[11];
  char v35;
  uint64_t v36;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v34);
  (*(void (**)(kaldi::nnet1::GlobalAttentionComponent *, _QWORD *, _QWORD))(*(_QWORD *)this + 96))(this, v34, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"\n## Source Dot Transform: input-dim ", 36);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", output-dim ", 13);
  v3 = (_QWORD *)std::ostream::operator<<();
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 2) + 64))(v32);
  if ((v33 & 0x80u) == 0)
    v5 = v32;
  else
    v5 = (void **)v32[0];
  if ((v33 & 0x80u) == 0)
    v6 = v33;
  else
    v6 = (uint64_t)v32[1];
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n## Target Dot Transform: input-dim ", 36);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", output-dim ", 13);
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 3) + 64))(v30);
  if ((v31 & 0x80u) == 0)
    v11 = v30;
  else
    v11 = (void **)v30[0];
  if ((v31 & 0x80u) == 0)
    v12 = v31;
  else
    v12 = (uint64_t)v30[1];
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n## Source Add Transform: input-dim ", 36);
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", output-dim ", 13);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 4) + 64))(v28);
  if ((v29 & 0x80u) == 0)
    v17 = v28;
  else
    v17 = (void **)v28[0];
  if ((v29 & 0x80u) == 0)
    v18 = v29;
  else
    v18 = (uint64_t)v28[1];
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n## Target Add Transform: input-dim ", 36);
  v20 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", output-dim ", 13);
  v21 = (_QWORD *)std::ostream::operator<<();
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 5) + 64))(__p);
  if ((v27 & 0x80u) == 0)
    v23 = __p;
  else
    v23 = (void **)__p[0];
  if ((v27 & 0x80u) == 0)
    v24 = v27;
  else
    v24 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
  if ((char)v27 < 0)
    operator delete(__p[0]);
  if ((char)v29 < 0)
    operator delete(v28[0]);
  if ((char)v31 < 0)
    operator delete(v30[0]);
  if ((char)v33 < 0)
    operator delete(v32[0]);
  std::stringbuf::str();
  v34[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v34[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v35 < 0)
    operator delete((void *)v34[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v36);
}

void sub_1ADD5B1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::Info(kaldi::nnet1::GlobalAttentionComponent *this)
{
  return kaldi::nnet1::GlobalAttentionComponent::Info((kaldi::nnet1::GlobalAttentionComponent *)((char *)this
                                                                                               + *(_QWORD *)(*(_QWORD *)this - 80)));
}

void kaldi::nnet1::GlobalAttentionComponent::InfoGradient(kaldi::nnet1::GlobalAttentionComponent *this@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  void *__p[2];
  unsigned __int8 v20;
  void *v21[2];
  unsigned __int8 v22;
  void *v23[2];
  unsigned __int8 v24;
  void *v25[2];
  unsigned __int8 v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;

  (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 2) + 72))(&v27);
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 3) + 72))(v25);
  if ((v26 & 0x80u) == 0)
    v4 = v25;
  else
    v4 = (void **)v25[0];
  if ((v26 & 0x80u) == 0)
    v5 = v26;
  else
    v5 = (std::string::size_type)v25[1];
  v6 = std::string::append(&v27, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 4) + 72))(v23);
  if ((v24 & 0x80u) == 0)
    v8 = v23;
  else
    v8 = (void **)v23[0];
  if ((v24 & 0x80u) == 0)
    v9 = v24;
  else
    v9 = (std::string::size_type)v23[1];
  v10 = std::string::append(&v28, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 5) + 72))(v21);
  if ((v22 & 0x80u) == 0)
    v12 = v21;
  else
    v12 = (void **)v21[0];
  if ((v22 & 0x80u) == 0)
    v13 = v22;
  else
    v13 = (std::string::size_type)v21[1];
  v14 = std::string::append(&v29, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "\n");
  if ((v20 & 0x80u) == 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if ((v20 & 0x80u) == 0)
    v17 = v20;
  else
    v17 = (std::string::size_type)__p[1];
  v18 = std::string::append(&v30, (const std::string::value_type *)v16, v17);
  *a2 = *v18;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((char)v20 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if ((char)v22 < 0)
    operator delete(v21[0]);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if ((char)v24 < 0)
    operator delete(v23[0]);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if ((char)v26 < 0)
    operator delete(v25[0]);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
}

void sub_1ADD5B458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v45 - 41) < 0)
    operator delete(*(void **)(v45 - 64));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v45 - 73) < 0)
    operator delete(*(void **)(v45 - 96));
  if (a27 < 0)
    operator delete(a22);
  if (a45 < 0)
    operator delete(a40);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::InfoGradient(kaldi::nnet1::GlobalAttentionComponent *this@<X0>, std::string *a2@<X8>)
{
  kaldi::nnet1::GlobalAttentionComponent::InfoGradient((kaldi::nnet1::GlobalAttentionComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88)), a2);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::SetTrainOptions(kaldi::nnet1::GlobalAttentionComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  char *v4;
  __int128 v5;

  v4 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v5 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)(v4 + 71) = *(_OWORD *)((char *)a2 + 23);
  *(_OWORD *)(v4 + 56) = v5;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 264))(*((_QWORD *)this + 2));
  (*(void (**)(_QWORD, const kaldi::nnet1::NnetTrainOptions *))(**((_QWORD **)this + 3) + 264))(*((_QWORD *)this + 3), a2);
  (*(void (**)(_QWORD, const kaldi::nnet1::NnetTrainOptions *))(**((_QWORD **)this + 4) + 264))(*((_QWORD *)this + 4), a2);
  return (*(uint64_t (**)(_QWORD, const kaldi::nnet1::NnetTrainOptions *))(**((_QWORD **)this + 5) + 264))(*((_QWORD *)this + 5), a2);
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::SetTrainOptions(kaldi::nnet1::GlobalAttentionComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  return kaldi::nnet1::GlobalAttentionComponent::SetTrainOptions((kaldi::nnet1::GlobalAttentionComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 280)), a2);
}

void kaldi::nnet1::GlobalAttentionComponent::SetSourceStates(uint64_t a1, int32x2_t *a2, char **a3)
{
  char *v6;
  char *v7;
  char *v8;
  int v9;
  char *v10;
  int v11;
  void *__p;
  void *v13;
  uint64_t v14;

  kaldi::nnet1::GlobalAttentionComponent::Check(a1);
  v7 = *a3;
  v6 = a3[1];
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 384), a2);
  if ((char **)(a1 + 840) != a3)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 840), *a3, (uint64_t)a3[1], (a3[1] - *a3) >> 2);
  v8 = *a3 + 4;
  v9 = *(_DWORD *)*a3;
  *(_DWORD *)(a1 + 864) = v9;
  v10 = a3[1];
  while (v8 != v10)
  {
    v11 = *(_DWORD *)v8;
    if (*(_DWORD *)v8 > v9)
    {
      *(_DWORD *)(a1 + 864) = v11;
      v9 = v11;
    }
    v8 += 4;
  }
  kaldi::nnet1::Component::Propagate(*(_DWORD **)(a1 + 16), a1 + 384, (int32x2_t *)(a1 + 48), 0);
  kaldi::nnet1::Component::Propagate(*(_DWORD **)(a1 + 32), a1 + 384, (int32x2_t *)(a1 + 144), 0);
  __p = 0;
  v13 = 0;
  v14 = 0;
  std::vector<std::vector<int>>::assign((uint64_t *)(a1 + 816), (int)((v6 - v7) >> 2), (uint64_t)&__p);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
}

void sub_1ADD5B6BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<int>>::assign(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  char *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;

  v6 = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= a2)
  {
    v13 = (a1[1] - (uint64_t)v6) / 24;
    if (v13 >= a2)
      v14 = a2;
    else
      v14 = (a1[1] - (uint64_t)v6) / 24;
    for (; v14; --v14)
    {
      if (v6 != (char *)a3)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v6, *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v6 += 24;
    }
    if (a2 <= v13)
    {
      v18 = a1[1];
      v19 = *a1 + 24 * a2;
      if (v18 != v19)
      {
        v20 = a1[1];
        do
        {
          v22 = *(void **)(v20 - 24);
          v20 -= 24;
          v21 = v22;
          if (v22)
          {
            *(_QWORD *)(v18 - 16) = v21;
            operator delete(v21);
          }
          v18 = v20;
        }
        while (v20 != v19);
      }
      a1[1] = v19;
    }
    else
    {
      v15 = (_QWORD *)a1[1];
      v16 = &v15[3 * (a2 - v13)];
      v17 = -24 * v13 + 24 * a2;
      do
      {
        *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v15, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
        v15 += 3;
        v17 -= 24;
      }
      while (v17);
      a1[1] = (uint64_t)v16;
    }
  }
  else
  {
    std::vector<std::vector<int>>::__vdeallocate(a1);
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v7 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
    if (v7 <= a2)
      v7 = a2;
    if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
      v8 = 0xAAAAAAAAAAAAAAALL;
    else
      v8 = v7;
    std::vector<std::string>::__vallocate[abi:ne180100](a1, v8);
    v9 = (_QWORD *)a1[1];
    v10 = 3 * a2;
    v11 = &v9[3 * a2];
    v12 = 8 * v10;
    do
    {
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v9, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v9 += 3;
      v12 -= 24;
    }
    while (v12);
    a1[1] = (uint64_t)v11;
  }
}

void sub_1ADD5B8AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::GetSourceDiffs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::GlobalAttentionComponent::Check(a1);
  return kaldi::CuMatrix<float>::Swap(a1 + 432, a4);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::GetCurrentAlignment(uint64_t a1, std::vector<unsigned int> *this)
{
  int v4;
  std::vector<unsigned int>::pointer begin;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = -1431655765 * ((uint64_t)(*(_QWORD *)(a1 + 824) - *(_QWORD *)(a1 + 816)) >> 3);
  std::vector<int>::resize(this, v4);
  if (v4 >= 1)
  {
    begin = this->__begin_;
    v6 = v4;
    v7 = (uint64_t *)(*(_QWORD *)(a1 + 816) + 8);
    do
    {
      v8 = *v7;
      v7 += 3;
      *begin++ = *(_DWORD *)(v8 - 4);
      --v6;
    }
    while (v6);
  }
  return 1;
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::GetOverallAlignment(uint64_t a1, uint64_t a2)
{
  if (a1 + 816 != a2)
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(a2, *(_QWORD *)(a1 + 816), *(_QWORD *)(a1 + 824), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 824) - *(_QWORD *)(a1 + 816)) >> 3));
  return 1;
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::SetSourceVectorDimension(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 8) != a2)
  {
    *(_DWORD *)(this + 8) = a2;
    *(_BYTE *)(this + 868) = 0;
  }
  return this;
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::SetMaxAttentions(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 12) != a2)
  {
    *(_DWORD *)(this + 12) = a2;
    *(_BYTE *)(this + 868) = 0;
  }
  return this;
}

void kaldi::nnet1::GlobalAttentionComponent::PropagateFnc(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  int32x2_t v5;
  int32x2_t v6;
  uint64_t v7;
  __int32 v8;
  const void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int32 v15;
  __int32 v16;
  uint64_t v17;
  int v18;
  int32x2_t v19;
  __int32 v20;
  uint64_t v21;
  int v22;
  int32x2_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int **v32;
  unint64_t v33;
  _QWORD *v34;
  int *v35;
  int *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  int *v42;
  int v43;
  float v44;
  float *v45;
  int v46;
  uint64_t v47;
  float v48;
  uint64_t v49;
  float *v50;
  uint64_t v51;
  uint64_t v52;
  __int32 v53;
  uint64_t v54;
  int v55;
  int32x2_t v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  __int32 v61;
  uint64_t v62;
  int v63;
  int32x2_t v64;
  uint64_t v65;
  unsigned int v66;
  __int32 v67;
  uint64_t v68;
  unsigned int v69;
  int32x2_t v70;
  int v71;
  unsigned int v73;
  int32x2_t *v74;
  int v75;
  int v76;
  uint64_t v77;
  _QWORD v78[4];
  _QWORD v79[4];
  void *v80;
  __int128 v81;
  __int128 v82;
  void *v83;
  __int128 v84;
  __int128 v85;
  void *v86;
  __int128 v87;
  __int128 v88;
  int32x2_t v89[2];
  int v90;
  void *v91[4];

  kaldi::nnet1::GlobalAttentionComponent::Check((uint64_t)a1);
  v5 = a1[106];
  v6 = a1[105];
  v7 = *(unsigned int *)(a2 + 20);
  v8 = a1[50].i32[1];
  kaldi::nnet1::Component::Propagate(*(_DWORD **)&a1[3], a2, a1 + 12, 0);
  kaldi::nnet1::Component::Propagate(*(_DWORD **)&a1[5], a2, a1 + 24, 0);
  v9 = (const void **)&a1[78];
  kaldi::CuVector<float>::Resize((uint64_t)&a1[78], a1[50].u32[1], 0);
  v10 = a1[50].u32[1];
  memset(v91, 0, 24);
  kaldi::Vector<float>::Resize(v91, v10, 1);
  kaldi::Matrix<float>::Matrix((uint64_t)v89);
  v11 = *(_QWORD *)&v5 - *(_QWORD *)&v6;
  v12 = (*(_QWORD *)&v5 - *(_QWORD *)&v6) >> 2;
  v73 = v8 / (int)v12;
  kaldi::CuMatrix<float>::Resize(a1 + 60, v7, (v8 / (int)v12), 1, 0);
  v71 = (int)v7 / (int)v12;
  if ((int)v7 / (int)v12 >= 1)
  {
    v75 = 0;
    v74 = a1 + 72;
    v13 = (int)(v11 >> 2);
    v77 = ((unint64_t)v11 >> 2);
    do
    {
      kaldi::CuMatrix<float>::operator=(v74, a1 + 6);
      v76 = v75 * v12;
      if (a1[108].i32[0] >= 1)
      {
        v14 = 0;
        v15 = 0;
        do
        {
          v16 = a1[75].i32[0];
          v17 = *(_QWORD *)&a1[73] + 4 * v16 * v14;
          v18 = a1[75].i32[1] - v16 * v14;
          v19 = a1[76];
          DWORD2(v87) = a1[74].i32[0];
          HIDWORD(v87) = v12;
          *(_QWORD *)&v88 = __PAIR64__(v18, v16);
          *((int32x2_t *)&v88 + 1) = v19;
          v86 = &unk_1E5D29D40;
          *(_QWORD *)&v87 = v17;
          v20 = a1[15].i32[0];
          v21 = *(_QWORD *)&a1[13] + 4 * v20 * v76;
          v22 = a1[15].i32[1] - v20 * v76;
          v23 = a1[16];
          DWORD2(v84) = a1[14].i32[0];
          HIDWORD(v84) = v12;
          *(_QWORD *)&v85 = __PAIR64__(v22, v20);
          *((int32x2_t *)&v85 + 1) = v23;
          v83 = &unk_1E5D29D40;
          *(_QWORD *)&v84 = v21;
          kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v86, (uint64_t)&v83);
          v83 = &unk_1E5D29D40;
          v84 = 0u;
          v85 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v83);
          v86 = &unk_1E5D29D40;
          v87 = 0u;
          v88 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v86);
          ++v15;
          v14 += v12;
        }
        while (v15 < a1[108].i32[0]);
      }
      kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v9, (uint64_t)v74, 1.0, 0.0);
      kaldi::CuVectorBase<float>::CopyToVec<float>(v9, (uint64_t)v91);
      kaldi::Matrix<float>::Resize(v89, v12, v73, 0, 0);
      if ((int)v12 >= 1)
      {
        v24 = 0;
        do
        {
          v25 = *(unsigned int *)(*(_QWORD *)&a1[105] + 4 * v24);
          if ((int)v25 < 1)
          {
            v27 = -1;
            v28 = -INFINITY;
          }
          else
          {
            v26 = 0;
            v27 = -1;
            v28 = -INFINITY;
            v29 = v24;
            do
            {
              if (*((float *)v91[0] + v29) > v28)
              {
                v27 = v26;
                v28 = *((float *)v91[0] + v29);
              }
              ++v26;
              v29 += v13;
            }
            while ((_DWORD)v25 != v26);
          }
          v30 = *(_QWORD *)&a1[102] + 24 * v24;
          v32 = (int **)(v30 + 8);
          v31 = *(int **)(v30 + 8);
          v34 = (_QWORD *)(v30 + 16);
          v33 = *(_QWORD *)(v30 + 16);
          if ((unint64_t)v31 >= v33)
          {
            v36 = *(int **)v30;
            v37 = ((uint64_t)v31 - *(_QWORD *)v30) >> 2;
            v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v39 = v33 - (_QWORD)v36;
            if (v39 >> 1 > v38)
              v38 = v39 >> 1;
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
              v40 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v40 = v38;
            if (v40)
            {
              v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v34, v40);
              v31 = *v32;
              v36 = *(int **)v30;
            }
            else
            {
              v41 = 0;
            }
            v42 = (int *)&v41[4 * v37];
            *v42 = v27;
            v35 = v42 + 1;
            while (v31 != v36)
            {
              v43 = *--v31;
              *--v42 = v43;
            }
            *(_QWORD *)v30 = v42;
            *v32 = v35;
            *v34 = &v41[4 * v40];
            if (v36)
              operator delete(v36);
          }
          else
          {
            *v31 = v27;
            v35 = v31 + 1;
          }
          *v32 = v35;
          if ((int)v25 >= 1)
          {
            v44 = 0.0;
            v45 = (float *)v91[0];
            v46 = v25;
            v47 = v24;
            do
            {
              v48 = expf(v45[v47] - v28);
              v45[v47] = v48;
              v44 = v44 + v48;
              v47 += v13;
              --v46;
            }
            while (v46);
            v49 = 0;
            v50 = (float *)v91[0];
            v51 = *(_QWORD *)v89 + 4 * v90 * (int)v24;
            v52 = v24;
            do
            {
              *(float *)(v51 + 4 * v49++) = (float)(1.0 / v44) * v50[v52];
              v52 += v13;
            }
            while (v25 != v49);
          }
          ++v24;
        }
        while (v24 != v77);
      }
      v53 = a1[63].i32[0];
      v54 = *(_QWORD *)&a1[61] + 4 * v53 * v76;
      v55 = a1[63].i32[1] - v53 * v76;
      v56 = a1[64];
      DWORD2(v87) = a1[62].i32[0];
      HIDWORD(v87) = v12;
      *(_QWORD *)&v88 = __PAIR64__(v55, v53);
      *((int32x2_t *)&v88 + 1) = v56;
      v86 = &unk_1E5D29D40;
      *(_QWORD *)&v87 = v54;
      kaldi::CuMatrixBase<float>::CopyFromMat((uint64_t)&v86, (int *)v89, 111);
      v57 = *(_DWORD *)(a3 + 24);
      v58 = *(_QWORD *)(a3 + 8) + 4 * (int)(v57 * v76);
      v59 = *(_DWORD *)(a3 + 28) - v57 * v76;
      v60 = *(_QWORD *)(a3 + 32);
      DWORD2(v84) = *(_DWORD *)(a3 + 16);
      HIDWORD(v84) = v12;
      *(_QWORD *)&v85 = __PAIR64__(v59, v57);
      *((_QWORD *)&v85 + 1) = v60;
      v83 = &unk_1E5D29D40;
      *(_QWORD *)&v84 = v58;
      v61 = a1[27].i32[0];
      v62 = *(_QWORD *)&a1[25] + 4 * v61 * v76;
      v63 = a1[27].i32[1] - v61 * v76;
      v64 = a1[28];
      DWORD2(v81) = a1[26].i32[0];
      HIDWORD(v81) = v12;
      *(_QWORD *)&v82 = __PAIR64__(v63, v61);
      *((int32x2_t *)&v82 + 1) = v64;
      v80 = &unk_1E5D29D40;
      *(_QWORD *)&v81 = v62;
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v83, (uint64_t)&v80, 111);
      v80 = &unk_1E5D29D40;
      v81 = 0u;
      v82 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v80);
      v9 = (const void **)&a1[78];
      if ((int)v12 >= 1)
      {
        v65 = 0;
        do
        {
          v66 = *(_DWORD *)(*(_QWORD *)&a1[105] + 4 * v65);
          v79[0] = &unk_1E5D29D70;
          v79[1] = v84 + 4 * (int)v85 * (int)v65;
          v79[3] = *((_QWORD *)&v85 + 1);
          v79[2] = DWORD2(v84);
          v67 = a1[21].i32[0];
          v68 = *(_QWORD *)&a1[19] + 4 * v67 * (int)v65;
          v69 = a1[21].i32[1] - v67 * v65;
          v70 = a1[22];
          DWORD2(v81) = a1[20].i32[0];
          HIDWORD(v81) = v66 * v12;
          *(_QWORD *)&v82 = __PAIR64__(v69, v67);
          *((int32x2_t *)&v82 + 1) = v70;
          v80 = &unk_1E5D29D40;
          *(_QWORD *)&v81 = v68;
          if (v12 >= 2)
            kaldi::CuMatrixBase<float>::SetStride((uint64_t)&v80, v67 * v12);
          v78[0] = &unk_1E5D29D70;
          v78[1] = v87 + 4 * (int)v88 * (int)v65;
          v78[3] = *((_QWORD *)&v88 + 1);
          v78[2] = v66;
          kaldi::CuVectorBase<float>::AddMatVec((uint64_t)v79, (uint64_t)&v80, CblasTrans, (uint64_t)v78, 1.0, 1.0);
          v80 = &unk_1E5D29D40;
          v81 = 0u;
          v82 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v80);
          ++v65;
        }
        while (v77 != v65);
      }
      v83 = &unk_1E5D29D40;
      v84 = 0u;
      v85 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v83);
      v86 = &unk_1E5D29D40;
      v87 = 0u;
      v88 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v86);
      ++v75;
    }
    while (v75 != v71);
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)v89);
  kaldi::Vector<float>::Destroy((uint64_t)v91);
}

void sub_1ADD5C040(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::Matrix<float>::~Matrix(v1 - 184);
  kaldi::Vector<float>::Destroy(v1 - 144);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  kaldi::nnet1::GlobalAttentionComponent::PropagateFnc((int32x2_t *)((char *)a1 + *(_QWORD *)(*a1 - 128)), a2, a3);
}

void kaldi::nnet1::GlobalAttentionComponent::BackpropagateFnc(int32x2_t *a1, uint64_t a2, uint64_t a3, int32x2_t *a4, uint64_t a5)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int32 v13;
  uint64_t v14;
  unsigned int v15;
  int32x2_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int32x2_t v20;
  uint64_t v21;
  int32x2_t v22;
  __int32 v23;
  uint64_t v24;
  unsigned int v25;
  int32x2_t v26;
  uint64_t v27;
  unsigned __int32 v28;
  int32x2_t v29;
  uint64_t v30;
  __int32 v31;
  uint64_t v32;
  unsigned int v33;
  int32x2_t v34;
  uint64_t v35;
  unsigned int v36;
  int32x2_t v37;
  __int32 v38;
  uint64_t v39;
  unsigned int v40;
  int32x2_t v41;
  uint64_t v42;
  unsigned __int32 v43;
  int32x2_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  int v49;
  uint64_t v51;
  int32x2_t *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  int32x2_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  int32x2_t v60;
  void *v61;
  __int128 v62;
  __int128 v63;

  kaldi::nnet1::GlobalAttentionComponent::Check((uint64_t)a1);
  v7 = *(_QWORD *)&a1[106] - *(_QWORD *)&a1[105];
  v8 = v7 >> 2;
  v9 = (*(_DWORD *)(a2 + 20) / (int)(v7 >> 2));
  kaldi::CuMatrix<float>::Resize(a1 + 30, a1[50].u32[1], *(unsigned int *)(*(_QWORD *)&a1[2] + 12), 0, 0);
  v46 = a2;
  kaldi::CuMatrix<float>::Resize(a1 + 36, *(unsigned int *)(a2 + 20), *(unsigned int *)(*(_QWORD *)&a1[3] + 12), 0, 0);
  kaldi::CuMatrix<float>::Resize(a1 + 42, a1[50].u32[1], *(unsigned int *)(*(_QWORD *)&a1[4] + 12), 0, 0);
  if ((int)v9 >= 1)
  {
    v49 = 0;
    v10 = 0;
    v51 = (uint64_t)&a1[92];
    v52 = a1 + 82;
    do
    {
      v48 = v10;
      if ((int)v8 >= 1)
      {
        v11 = 0;
        do
        {
          v12 = *(unsigned int *)(*(_QWORD *)&a1[105] + 4 * v11);
          kaldi::CuVector<float>::Resize((uint64_t)&a1[88], v12, 1);
          v13 = a1[21].i32[0];
          v14 = *(_QWORD *)&a1[19] + 4 * v13 * (int)v11;
          v15 = a1[21].i32[1] - v13 * v11;
          v16 = a1[22];
          DWORD2(v62) = a1[20].i32[0];
          HIDWORD(v62) = v12 * v8;
          *(_QWORD *)&v63 = __PAIR64__(v15, v13);
          *((int32x2_t *)&v63 + 1) = v16;
          v61 = &unk_1E5D29D40;
          *(_QWORD *)&v62 = v14;
          if (v8 >= 2)
            kaldi::CuMatrixBase<float>::SetStride((uint64_t)&v61, v13 * v8);
          v17 = v49 + v11;
          v18 = *(_QWORD *)&a4[1] + 4 * a4[3].i32[0] * (v49 + (int)v11);
          v19 = a4[2].u32[0];
          v20 = a4[4];
          v57 = &unk_1E5D29D70;
          v58 = v18;
          v60 = v20;
          v59 = v19;
          kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&a1[88], (uint64_t)&v61, CblasNoTrans, (uint64_t)&v57, 1.0, 0.0);
          v61 = &unk_1E5D29D40;
          v62 = 0u;
          v63 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v61);
          v21 = *(_QWORD *)&a1[61] + 4 * a1[63].i32[0] * (v49 + (int)v11);
          v22 = a1[64];
          v57 = &unk_1E5D29D70;
          v58 = v21;
          v60 = v22;
          v59 = v12;
          kaldi::CuMatrix<float>::Resize(v52, v12, v12, 0, 0);
          kaldi::CuMatrixBase<float>::AddToDiag((uint64_t)v52, (uint64_t)&v57, 1.0, 0.0);
          kaldi::CuMatrixBase<float>::AddVecVec((uint64_t)v52, (uint64_t)&v57, (uint64_t)&v57, -1.0, 1.0);
          kaldi::CuVector<float>::Resize(v51, v12, 1);
          kaldi::CuVectorBase<float>::AddMatVec(v51, (uint64_t)v52, CblasNoTrans, (uint64_t)&a1[88], 1.0, 0.0);
          v23 = a1[33].i32[0];
          v24 = *(_QWORD *)&a1[31] + 4 * v23 * (int)v11;
          v25 = a1[33].i32[1] - v23 * v11;
          v26 = a1[34];
          DWORD2(v62) = a1[32].i32[0];
          HIDWORD(v62) = v12 * v8;
          *(_QWORD *)&v63 = __PAIR64__(v25, v23);
          *((int32x2_t *)&v63 + 1) = v26;
          v61 = &unk_1E5D29D40;
          *(_QWORD *)&v62 = v24;
          if (v8 >= 2)
            kaldi::CuMatrixBase<float>::SetStride((uint64_t)&v61, v23 * v8);
          v27 = *(_QWORD *)&a1[13] + 4 * a1[15].i32[0] * v17;
          v28 = a1[14].u32[0];
          v29 = a1[16];
          v53 = &unk_1E5D29D70;
          v54 = v27;
          v56 = v29;
          v55 = v28;
          kaldi::CuMatrixBase<float>::AddVecVec((uint64_t)&v61, v51, (uint64_t)&v53, 1.0, 1.0);
          v61 = &unk_1E5D29D40;
          v62 = 0u;
          v63 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v61);
          v31 = a1[45].i32[0];
          v32 = *(_QWORD *)&a1[43] + 4 * v31 * (int)v11;
          v33 = a1[45].i32[1] - v31 * v11;
          v34 = a1[46];
          DWORD2(v62) = a1[44].i32[0];
          HIDWORD(v62) = v12 * v8;
          *(_QWORD *)&v63 = __PAIR64__(v33, v31);
          *((int32x2_t *)&v63 + 1) = v34;
          v61 = &unk_1E5D29D40;
          *(_QWORD *)&v62 = v32;
          if (v8 >= 2)
            kaldi::CuMatrixBase<float>::SetStride(v30, v31 * v8);
          v35 = *(_QWORD *)&a4[1] + 4 * a4[3].i32[0] * v17;
          v36 = a4[2].u32[0];
          v37 = a4[4];
          v53 = &unk_1E5D29D70;
          v54 = v35;
          v56 = v37;
          v55 = v36;
          kaldi::CuMatrixBase<float>::AddVecVec((uint64_t)&v61, (uint64_t)&v57, (uint64_t)&v53, 1.0, 1.0);
          v61 = &unk_1E5D29D40;
          v62 = 0u;
          v63 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v61);
          kaldi::CuMatrix<float>::Resize(a1 + 96, v12, *(unsigned int *)(*(_QWORD *)&a1[3] + 12), 0, 0);
          v38 = a1[9].i32[0];
          v39 = *(_QWORD *)&a1[7] + 4 * v38 * (int)v11;
          v40 = a1[9].i32[1] - v38 * v11;
          v41 = a1[10];
          DWORD2(v62) = a1[8].i32[0];
          HIDWORD(v62) = v12 * v8;
          *(_QWORD *)&v63 = __PAIR64__(v40, v38);
          *((int32x2_t *)&v63 + 1) = v41;
          v61 = &unk_1E5D29D40;
          *(_QWORD *)&v62 = v39;
          if (v8 >= 2)
            kaldi::CuMatrixBase<float>::SetStride((uint64_t)&v61, v38 * v8);
          kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&a1[96], (uint64_t)v52, CblasNoTrans, (uint64_t)&v61, CblasNoTrans, 1.0, 0.0);
          v61 = &unk_1E5D29D40;
          v62 = 0u;
          v63 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v61);
          v42 = *(_QWORD *)&a1[37] + 4 * a1[39].i32[0] * v17;
          v43 = a1[38].u32[0];
          v44 = a1[40];
          v61 = &unk_1E5D29D70;
          *(_QWORD *)&v62 = v42;
          *(int32x2_t *)&v63 = v44;
          *((_QWORD *)&v62 + 1) = v43;
          kaldi::CuVectorBase<float>::AddMatVec(v45, (uint64_t)&a1[96], CblasTrans, (uint64_t)&a1[88], 1.0, 1.0);
          ++v11;
        }
        while ((v7 >> 2) != v11);
      }
      v10 = v48 + 1;
      v49 += v8;
    }
    while (v48 + 1 != v9);
  }
  kaldi::CuMatrix<float>::Resize(a1 + 66, *(unsigned int *)(v46 + 20), *(unsigned int *)(*(_QWORD *)&a1[5] + 8), 0, 0);
  (*(void (**)(_QWORD, uint64_t, int32x2_t *, int32x2_t *, int32x2_t *, _QWORD))(**(_QWORD **)&a1[5] + 128))(*(_QWORD *)&a1[5], v46, a1 + 24, a4, a1 + 66, 0);
  (*(void (**)(_QWORD, uint64_t, int32x2_t *, int32x2_t *, uint64_t, _QWORD))(**(_QWORD **)&a1[3] + 128))(*(_QWORD *)&a1[3], v46, a1 + 12, a1 + 36, a5, 0);
  kaldi::CuMatrixBase<float>::AddMat(a5, (uint64_t)&a1[66], 111, 1.0, 1.0);
  kaldi::CuMatrix<float>::Resize(a1 + 66, a1[50].u32[1], *(unsigned int *)(*(_QWORD *)&a1[4] + 8), 0, 0);
  kaldi::CuMatrix<float>::Resize(a1 + 54, a1[50].u32[1], *(unsigned int *)(*(_QWORD *)&a1[4] + 8), 0, 0);
  (*(void (**)(_QWORD, int32x2_t *, int32x2_t *, int32x2_t *, int32x2_t *, _QWORD))(**(_QWORD **)&a1[4]
                                                                                             + 128))(*(_QWORD *)&a1[4], a1 + 48, a1 + 18, a1 + 42, a1 + 66, 0);
  (*(void (**)(_QWORD, int32x2_t *, int32x2_t *, int32x2_t *, int32x2_t *, _QWORD))(**(_QWORD **)&a1[2]
                                                                                             + 128))(*(_QWORD *)&a1[2], a1 + 48, a1 + 6, a1 + 30, a1 + 54, 0);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)&a1[54], (uint64_t)&a1[66], 111, 1.0, 1.0);
}

void sub_1ADD5C758(_Unwind_Exception *a1)
{
  _OWORD *v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = &unk_1E5D29D40;
  *v1 = 0u;
  v1[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v2 - 128));
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::BackpropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, int32x2_t *a4, uint64_t a5)
{
  kaldi::nnet1::GlobalAttentionComponent::BackpropagateFnc((int32x2_t *)((char *)a1 + *(_QWORD *)(*a1 - 144)), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::SetGradientNormalization(_QWORD **a1, uint64_t a2, float a3)
{
  (*(void (**)(_QWORD *))(*a1[2] + 240))(a1[2]);
  (*(void (**)(_QWORD *, uint64_t, float))(*a1[3] + 240))(a1[3], a2, a3);
  (*(void (**)(_QWORD *, uint64_t, float))(*a1[4] + 240))(a1[4], a2, a3);
  return (*(uint64_t (**)(_QWORD *, uint64_t, float))(*a1[5] + 240))(a1[5], a2, a3);
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::SetGradientNormalization(_QWORD *a1, uint64_t a2, float a3)
{
  return kaldi::nnet1::GlobalAttentionComponent::SetGradientNormalization((_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 256)), a2, a3);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::AccumGradients(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  kaldi::nnet1::GlobalAttentionComponent::Check((uint64_t)a1);
  (*(void (**)(_QWORD *, _QWORD **, _QWORD **, uint64_t, uint64_t))(*a1[2] + 232))(a1[2], a1 + 48, a1 + 30, a4, a5);
  (*(void (**)(_QWORD *, uint64_t, _QWORD **, uint64_t, uint64_t))(*a1[3] + 232))(a1[3], a2, a1 + 36, a4, a5);
  (*(void (**)(_QWORD *, _QWORD **, _QWORD **, uint64_t, uint64_t))(*a1[4] + 232))(a1[4], a1 + 48, a1 + 42, a4, a5);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*a1[5] + 232))(a1[5], a2, a3, a4, a5);
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::AccumGradients(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return kaldi::nnet1::GlobalAttentionComponent::AccumGradients((_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 248)), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::GlobalAttentionComponent::UpdateWeights(kaldi::nnet1::GlobalAttentionComponent *this, void *a2, uint64_t a3)
{
  kaldi::nnet1::GlobalAttentionComponent::Check((uint64_t)this);
  (*(void (**)(_QWORD, void *, uint64_t))(**((_QWORD **)this + 2) + 256))(*((_QWORD *)this + 2), a2, a3);
  (*(void (**)(_QWORD, void *, uint64_t))(**((_QWORD **)this + 3) + 256))(*((_QWORD *)this + 3), a2, a3);
  (*(void (**)(_QWORD, void *, uint64_t))(**((_QWORD **)this + 4) + 256))(*((_QWORD *)this + 4), a2, a3);
  return (*(uint64_t (**)(_QWORD, void *, uint64_t))(**((_QWORD **)this + 5) + 256))(*((_QWORD *)this + 5), a2, a3);
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::UpdateWeights(kaldi::nnet1::GlobalAttentionComponent *this, void *a2, uint64_t a3)
{
  return kaldi::nnet1::GlobalAttentionComponent::UpdateWeights((kaldi::nnet1::GlobalAttentionComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 272)), a2, a3);
}

void kaldi::nnet1::GlobalAttentionComponent::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8;
  const void *v9;
  _QWORD **v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  int32x2_t v17;
  __int128 v18;
  __int128 v19;
  char v20;
  int32x2_t v21[6];
  const void *v22;
  uint64_t v23;
  uint64_t v24;

  v22 = 0;
  v23 = 0;
  v24 = 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  kaldi::Vector<float>::Resize(a4, v8, 1);
  v9 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  if (v9)
  else
    v10 = 0;
  kaldi::CuMatrix<float>::CuMatrix(v21, *(unsigned int *)(a2 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  v18 = 0u;
  v19 = 0u;
  v17 = (int32x2_t)&unk_1E5D34170;
  v20 = 0;
  kaldi::nnet1::Component::Backpropagate((_QWORD **)((char *)v10 + *(*v10 - 3)), a2, (uint64_t)v21, a3, &v17, 0);
  v11 = a1 + 384;
  (*(void (**)(_QWORD *, uint64_t, _QWORD **, const void **))(*v10[2] + 224))(v10[2], v11, v10 + 30, &v22);
  v15 = 0;
  v16 = 0;
  v14 = (char *)*a4;
  LODWORD(v15) = v23;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v14, &v22);
  v12 = (int)v23;
  (*(void (**)(_QWORD *, uint64_t, _QWORD **, const void **))(*v10[3] + 224))(v10[3], a2, v10 + 36, &v22);
  v15 = 0;
  v16 = 0;
  v14 = (char *)*a4 + 4 * v12;
  LODWORD(v15) = v23;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v14, &v22);
  v13 = v23;
  (*(void (**)(_QWORD *, uint64_t, _QWORD **, const void **))(*v10[4] + 224))(v10[4], v11, v10 + 42, &v22);
  LODWORD(v11) = v13 + v12;
  v15 = 0;
  v16 = 0;
  v14 = (char *)*a4 + 4 * v13 + 4 * (int)v12;
  LODWORD(v15) = v23;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v14, &v22);
  LODWORD(v12) = v23;
  (*(void (**)(_QWORD *, uint64_t, uint64_t, const void **))(*v10[5] + 224))(v10[5], a2, a3, &v22);
  v15 = 0;
  v16 = 0;
  v14 = (char *)*a4 + 4 * (int)v12 + 4 * (int)v11;
  LODWORD(v15) = v23;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v14, &v22);
  ((void (*)(_QWORD **))(*v10)[1])(v10);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v17);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v21);
  kaldi::Vector<float>::Destroy((uint64_t)&v22);
}

void sub_1ADD5CC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  kaldi::Vector<float>::Destroy(v4 - 88);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::GlobalAttentionComponent::GetGradient(_QWORD *a1, uint64_t a2, uint64_t a3, void **a4)
{
  kaldi::nnet1::GlobalAttentionComponent::GetGradient((uint64_t)a1 + *(_QWORD *)(*a1 - 240), a2, a3, a4);
}

uint64_t EARCSpeechRecognizerCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _EARSpeechRecognizer *v8;

  v8 = [_EARSpeechRecognizer alloc];
  if (a2 && a3 && a4)
    return (uint64_t)-[_EARSpeechRecognizer initWithConfiguration:withGeneralVoc:withLexiconEnh:withItnEnh:](v8, "initWithConfiguration:withGeneralVoc:withLexiconEnh:withItnEnh:", a1, a2, a3, a4);
  else
    return (uint64_t)-[_EARSpeechRecognizer initWithConfiguration:](v8, "initWithConfiguration:", a1);
}

uint64_t EARCSpeechRecognizerSetUserProfileData(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setUserProfileData:", a2);
}

uint64_t EARCSpeechRecognizerUpdateUserProfileData(void *a1, const char *a2)
{
  return objc_msgSend(a1, "updateUserProfileData:", a2);
}

uint64_t EARCSpeechRecognizerSetJitProfileData(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setJitProfileData:", a2);
}

uint64_t EARCSpeechRecognizerUpdateJitProfileData(void *a1, const char *a2)
{
  return objc_msgSend(a1, "updateJitProfileData:", a2);
}

uint64_t EARCSpeechRecognizerSetLeftContext(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setLeftContext:", a2);
}

uint64_t EARCSpeechRecognizerSetLeftContextText(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setLeftContextText:", a2);
}

uint64_t EARCSpeechRecognizerSetDetectUtterances(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setDetectUtterances:", (_DWORD)a2 != 0);
}

uint64_t EARCSpeechRecognizerSetEnableVoiceCommands(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setEnableVoiceCommands:", (_DWORD)a2 != 0);
}

uint64_t EARCSpeechRecognitionTokenHasSpaceAfter(void *a1)
{
  return objc_msgSend(a1, "hasSpaceAfter");
}

uint64_t EARCSpeechRecognizerCreateRecognitionBuffer(void *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  EARCSpeechRecognitionResultStreamGlue *v9;
  uint64_t v10;

  v9 = -[EARCSpeechRecognitionResultStreamGlue initWithStream:]([EARCSpeechRecognitionResultStreamGlue alloc], "initWithStream:", a5);
  objc_msgSend(a1, "runRecognitionWithResultStream:language:task:samplingRate:", v9, a2, a3, a4);
  v10 = objc_claimAutoreleasedReturnValue();

  return v10;
}

uint64_t EARCSpeechRecognizerSetConcatenateUtterances(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setConcatenateUtterances:", (_DWORD)a2 != 0);
}

uint64_t EARCSpeechRecognizerSetRecognizeEagerCandidates(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setRecognizeEagerCandidates:", (_DWORD)a2 != 0);
}

uint64_t EARCSpeechRecognizerSetFarField(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setFarField:", (_DWORD)a2 != 0);
}

uint64_t EARCSpeechRecognizerSetHighPriority(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setHighPriority:", (_DWORD)a2 != 0);
}

uint64_t EARCSpeechRecognizerSetRecognitionReplacements(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setRecognitionReplacements:", a2);
}

uint64_t EARCSpeechRecognizerSetRecognitionConfidenceSubtraction(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setRecognitionConfidenceSubtraction:", a2);
}

uint64_t EARCSpeechRecognizerSetInputOrigin(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setInputOrigin:", a2);
}

uint64_t EARCSpeechRecognizerSetDeviceId(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setDeviceId:", a2);
}

uint64_t EARCSpeechRecognizerSetRefTranscriptForErrorBlaming(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setRefTranscriptForErrorBlaming:", a2);
}

uint64_t EARCSpeechRecognizerSetBluetoothDeviceId(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setBluetoothDeviceId:", a2);
}

uint64_t EARCSpeechRecognizerSetUserId(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setUserId:", a2);
}

uint64_t EARCSpeechRecognizerSetSessionId(void *a1, const char *a2)
{
  return objc_msgSend(a1, "setSessionId:", a2);
}

uint64_t EARCSpeechRecognitionAudioBufferAddAudioSampleData(void *a1, const char *a2)
{
  return objc_msgSend(a1, "addAudioSampleData:", a2);
}

uint64_t EARCSpeechRecognitionAudioBufferAddAudioSamples(void *a1, const char *a2, uint64_t a3)
{
  return objc_msgSend(a1, "addAudioSamples:count:", a2, a3);
}

_EARWordPart *EARCWordPartCreate(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return -[_EARWordPart initWithOrthography:pronunciations:tagName:frequency:]([_EARWordPart alloc], "initWithOrthography:pronunciations:tagName:frequency:", a1, a2, a3, a4);
}

uint64_t EARCWordPartGetFrequency(void *a1)
{
  return objc_msgSend(a1, "frequency");
}

_EARUserProfileBuilder *EARCUserProfileCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return -[_EARUserProfileBuilder initWithConfiguration:language:sdapiOverrides:generalVoc:emptyVoc:pgVoc:lexiconEnh:tokenEnh:paramsetHolder:]([_EARUserProfileBuilder alloc], "initWithConfiguration:language:sdapiOverrides:generalVoc:emptyVoc:pgVoc:lexiconEnh:tokenEnh:paramsetHolder:", a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t EARCUserProfileAddWord(void *a1, const char *a2, uint64_t a3)
{
  return objc_msgSend(a1, "addWordWithParts:templateName:", a2, a3);
}

uint64_t EARCUserProfileCopyDataProfile(void *a1)
{
  objc_msgSend(a1, "dataProfile");
  return objc_claimAutoreleasedReturnValue();
}

uint64_t EARCUserProfileCopyPronunciationsForOrthography(void *a1, uint64_t a2)
{
  objc_msgSend(a1, "pronunciationsForOrthography:", a2);
  return objc_claimAutoreleasedReturnValue();
}

uint64_t EARCUserProfileReadDataProfile(void *a1, const char *a2)
{
  return objc_msgSend(a1, "readUserProfile:", a2);
}

uint64_t EARCUserProfileCopySanitizedString(void *a1, uint64_t a2)
{
  objc_msgSend(a1, "sanitizedStringWithString:", a2);
  return objc_claimAutoreleasedReturnValue();
}

_EARCommandTagger *EARCCommandTaggerCreate(uint64_t a1, uint64_t a2)
{
  return -[_EARCommandTagger initWithConfiguration:usage:]([_EARCommandTagger alloc], "initWithConfiguration:usage:", a1, a2);
}

uint64_t EARCCommandTaggingTokensForTag(void *a1, const char *a2)
{
  return objc_msgSend(a1, "tokensForTag:", a2);
}

uint64_t EARCCommandTaggerCreateCommandTaggingResults(void *a1, uint64_t a2, uint64_t a3)
{
  objc_msgSend(a1, "commandTaggingFromRecognitionResult:activeCommands:", a2, a3);
  return objc_claimAutoreleasedReturnValue();
}

uint64_t EARCCommandTaggerGetParameterTagForIndex(void *a1, const char *a2)
{
  return objc_msgSend(a1, "parameterTagForIndex:", a2);
}

uint64_t EARCCommandTaggerGetCommandPhraseForIndex(void *a1, const char *a2)
{
  return objc_msgSend(a1, "commandPhraseTagForIndex:", a2);
}

uint64_t EARCCommandTaggerIsParameterTag(void *a1, uint64_t a2)
{
  return objc_msgSend(a1, "isParameterTag:", a2);
}

uint64_t EARCCommandTaggerIsCommandPhraseTag(void *a1, uint64_t a2)
{
  return objc_msgSend(a1, "isCommandPhraseTag:", a2);
}

void ReverseArray(void *a1)
{
  id v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  id v7;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v7 = v1;
    v3 = objc_msgSend(v1, "count");
    v2 = v7;
    if (v3 >= 2)
    {
      v4 = 0;
      v5 = v3 >> 1;
      v6 = v3 - 1;
      do
      {
        objc_msgSend(v2, "exchangeObjectAtIndex:withObjectAtIndex:", v4, v6);
        v2 = v7;
        ++v4;
        --v6;
      }
      while (v5 != v4);
    }
  }

}

double kaldi::nnet1::RecurrentAttentionBaseComponent::RecurrentAttentionBaseComponent(kaldi::nnet1::RecurrentAttentionBaseComponent *this, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  uint64_t v5;

  v2 = a2[1];
  *(_QWORD *)this = v2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v2 - 24)) = a2[2];
  *((_QWORD *)this + 2) = off_1E5D2E5C8;
  *((_QWORD *)this + 1) = -1;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = &unk_1E5D2C5B0;
  *((_DWORD *)this + 14) = 1;
  v3 = a2[3];
  *((_QWORD *)this + 2) = v3;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 16) = a2[4];
  *(_OWORD *)((char *)this + 72) = xmmword_1AE13F660;
  *((_DWORD *)this + 22) = -1082130432;
  *(_QWORD *)((char *)this + 92) = 0x100000003;
  *((_WORD *)this + 50) = 0;
  *((_BYTE *)this + 102) = 0;
  *((_QWORD *)this + 8) = &off_1E5D305B8;
  *((_QWORD *)this + 13) = &unk_1E5D305D8;
  *((_QWORD *)this + 14) = 0x100000001;
  result = 0.0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_QWORD *)this + 21) = 0;
  v5 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v5 - 24)) = a2[5];
  *((_QWORD *)this + 2) = a2[6];
  return result;
}

kaldi::nnet1::GlobalRecurrentAttention *kaldi::nnet1::GlobalRecurrentAttention::GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this, int a2, int a3)
{
  kaldi::nnet1::Nnet *v4;

  *((_DWORD *)this + 170) = a2;
  *((_DWORD *)this + 171) = a3;
  *((_WORD *)this + 344) = 0;
  *((_QWORD *)this + 87) = 0;
  *((_QWORD *)this + 89) = 0;
  *((_QWORD *)this + 88) = 0;
  *((_QWORD *)this + 84) = off_1E5D2E4A0;
  *((_QWORD *)this + 90) = &off_1E5D2D150;
  *(_OWORD *)((char *)this + 728) = xmmword_1AE13F660;
  *((_QWORD *)this + 93) = 0x3BF800000;
  *((_DWORD *)this + 188) = 1;
  *((_WORD *)this + 378) = 0;
  *((_BYTE *)this + 758) = 0;
  kaldi::nnet1::RecurrentAttentionBaseComponent::RecurrentAttentionBaseComponent(this, (uint64_t *)&off_1E5D14F78);
  *(_QWORD *)this = &off_1E5D2FB68;
  *((_QWORD *)this + 84) = &off_1E5D2FE58;
  *((_QWORD *)this + 2) = &off_1E5D2FCB0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  v4 = (kaldi::nnet1::Nnet *)operator new();
  kaldi::nnet1::Nnet::Nnet(v4);
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_QWORD *)this + 24) = v4;
  *((_QWORD *)this + 25) = &unk_1E5D34170;
  *((_BYTE *)this + 240) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_QWORD *)this + 31) = &unk_1E5D34170;
  *((_BYTE *)this + 288) = 0;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_QWORD *)this + 37) = &unk_1E5D34170;
  *((_BYTE *)this + 336) = 0;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_QWORD *)this + 43) = &unk_1E5D34170;
  *((_BYTE *)this + 384) = 0;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_QWORD *)this + 49) = &unk_1E5D34170;
  *((_BYTE *)this + 432) = 0;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_QWORD *)this + 55) = &unk_1E5D34170;
  *((_BYTE *)this + 480) = 0;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_QWORD *)this + 61) = &unk_1E5D34170;
  *((_BYTE *)this + 528) = 0;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_QWORD *)this + 67) = &unk_1E5D34170;
  *((_BYTE *)this + 576) = 0;
  *((_QWORD *)this + 76) = 0;
  *((_QWORD *)this + 74) = 0;
  *((_QWORD *)this + 75) = 0;
  *((_QWORD *)this + 73) = &unk_1E5D341C8;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((_DWORD *)this + 166) = -1;
  *((_BYTE *)this + 668) = 0;
  return this;
}

void sub_1ADD5E51C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x1AF44D190](v3, 0x10B0C4082B712C9);
  kaldi::nnet1::RecurrentAttentionBaseComponent::~RecurrentAttentionBaseComponent((kaldi::nnet1::RecurrentAttentionBaseComponent *)v1, (uint64_t)&off_1E5D14F78);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 672));
  _Unwind_Resume(a1);
}

kaldi::nnet1::GlobalRecurrentAttention *kaldi::nnet1::GlobalRecurrentAttention::GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this, const kaldi::nnet1::GlobalRecurrentAttention *a2)
{
  _QWORD v5[35];

  *((_QWORD *)this + 85) = *(_QWORD *)((char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 24) + 8);
  *((_WORD *)this + 344) = 0;
  *((_QWORD *)this + 89) = 0;
  *((_QWORD *)this + 88) = 0;
  *((_QWORD *)this + 87) = 0;
  *((_QWORD *)this + 84) = off_1E5D2E4A0;
  *((_QWORD *)this + 90) = &off_1E5D2D150;
  *(_OWORD *)((char *)this + 728) = xmmword_1AE13F660;
  *((_DWORD *)this + 186) = -1082130432;
  *(_QWORD *)((char *)this + 748) = 0x100000003;
  *((_WORD *)this + 378) = 0;
  *((_BYTE *)this + 758) = 0;
  kaldi::nnet1::RecurrentAttentionBaseComponent::RecurrentAttentionBaseComponent(this, (uint64_t *)&off_1E5D14F78);
  *(_QWORD *)this = &off_1E5D2FB68;
  *((_QWORD *)this + 84) = &off_1E5D2FE58;
  *((_QWORD *)this + 2) = &off_1E5D2FCB0;
  *((_QWORD *)this + 25) = &unk_1E5D34170;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_BYTE *)this + 240) = 0;
  *((_QWORD *)this + 31) = &unk_1E5D34170;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_BYTE *)this + 288) = 0;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_QWORD *)this + 37) = &unk_1E5D34170;
  *((_BYTE *)this + 336) = 0;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_QWORD *)this + 43) = &unk_1E5D34170;
  *((_BYTE *)this + 384) = 0;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_QWORD *)this + 49) = &unk_1E5D34170;
  *((_BYTE *)this + 432) = 0;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_QWORD *)this + 55) = &unk_1E5D34170;
  *((_BYTE *)this + 480) = 0;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_QWORD *)this + 61) = &unk_1E5D34170;
  *((_BYTE *)this + 528) = 0;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_QWORD *)this + 67) = &unk_1E5D34170;
  *((_BYTE *)this + 576) = 0;
  *((_QWORD *)this + 75) = 0;
  *((_QWORD *)this + 74) = 0;
  *((_QWORD *)this + 76) = 0;
  *((_QWORD *)this + 73) = &unk_1E5D341C8;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 22) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 22) + 16))(*((_QWORD *)a2 + 22));
  *((_QWORD *)this + 23) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 23) + 16))(*((_QWORD *)a2 + 23));
  kaldi::CuMatrix<float>::operator=((int32x2_t *)this + 25, (int32x2_t *)a2 + 25);
  kaldi::CuMatrix<float>::operator=((int32x2_t *)this + 31, (int32x2_t *)a2 + 31);
  kaldi::CuMatrix<float>::operator=((int32x2_t *)this + 37, (int32x2_t *)a2 + 37);
  kaldi::CuMatrix<float>::operator=((int32x2_t *)this + 55, (int32x2_t *)a2 + 55);
  kaldi::CuMatrix<float>::operator=((int32x2_t *)this + 61, (int32x2_t *)a2 + 61);
  kaldi::CuMatrix<float>::operator=((int32x2_t *)this + 67, (int32x2_t *)a2 + 67);
  kaldi::CuVector<float>::operator=((uint64_t)this + 584, (uint64_t)a2 + 584);
  if (this != a2)
  {
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>((uint64_t)this + 616, *((_QWORD *)a2 + 77), *((_QWORD *)a2 + 78), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 78) - *((_QWORD *)a2 + 77)) >> 3));
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 640, *((char **)a2 + 80), *((_QWORD *)a2 + 81), (uint64_t)(*((_QWORD *)a2 + 81) - *((_QWORD *)a2 + 80)) >> 2);
  }
  *((_DWORD *)this + 166) = *((_DWORD *)a2 + 166);
  *((_BYTE *)this + 668) = 0;
  if ((kaldi::nnet1::Nnet::IsRnn(*((kaldi::nnet1::Nnet **)this + 24)) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"it doesn't make sense to use a non-reccurent network here", 57);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  (*(void (**)(kaldi::nnet1::GlobalRecurrentAttention *))(*(_QWORD *)this + 296))(this);
  return this;
}

void sub_1ADD5E848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;

  v20 = *v15;
  if (*v15)
  {
    v12[81] = v20;
    operator delete(v20);
  }
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  kaldi::CuVector<float>::~CuVector(v19);
  kaldi::CuMatrix<float>::~CuMatrix(v18);
  kaldi::CuMatrix<float>::~CuMatrix(v17);
  kaldi::CuMatrix<float>::~CuMatrix(v16);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)(v12 + 49));
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)(v12 + 43));
  kaldi::CuMatrix<float>::~CuMatrix(a11);
  kaldi::CuMatrix<float>::~CuMatrix(v14);
  kaldi::CuMatrix<float>::~CuMatrix(v13);
  kaldi::nnet1::RecurrentAttentionBaseComponent::~RecurrentAttentionBaseComponent((kaldi::nnet1::RecurrentAttentionBaseComponent *)v12, (uint64_t)&off_1E5D14F78);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v12 + 84));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  kaldi::nnet1::Nnet *v7;
  void *v8;
  void **v9;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[8];
  *((_QWORD *)this + 2) = a2[9];
  v5 = *((_QWORD *)this + 22);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 23);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (kaldi::nnet1::Nnet *)*((_QWORD *)this + 24);
  if (v7)
  {
    kaldi::nnet1::Nnet::~Nnet(v7);
    MEMORY[0x1AF44D190]();
  }
  v8 = (void *)*((_QWORD *)this + 80);
  if (v8)
  {
    *((_QWORD *)this + 81) = v8;
    operator delete(v8);
  }
  v9 = (void **)((char *)this + 616);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v9);
  *((_QWORD *)this + 73) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 584);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 536);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 488);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 440);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 392);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 344);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 296);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 248);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 200);
  kaldi::nnet1::RecurrentAttentionBaseComponent::~RecurrentAttentionBaseComponent(this, (uint64_t)(a2 + 1));
}

void kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 672));
}

{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 672));
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this + 656));
}

{
  kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this - 16));
}

void `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 672));
}

{
  kaldi::nnet1::GlobalRecurrentAttention::~GlobalRecurrentAttention((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::Copy(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  kaldi::nnet1::GlobalRecurrentAttention *v2;

  v2 = (kaldi::nnet1::GlobalRecurrentAttention *)operator new();
  kaldi::nnet1::GlobalRecurrentAttention::GlobalRecurrentAttention(v2, this);
  return (uint64_t)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
}

void sub_1ADD5EB30(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40F96FF2AFLL);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::Copy(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  return kaldi::nnet1::GlobalRecurrentAttention::Copy((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this
                                                                                               + *(_QWORD *)(*(_QWORD *)this - 32)));
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::GetType(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  return 283;
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::GetType(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  return 283;
}

void kaldi::nnet1::GlobalRecurrentAttention::InitData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v8;
  uint64_t v9;
  void *v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  void **v15;
  void *v16;
  int v17;
  kaldi::nnet1::Component *v19;
  const void *v20;
  void *v21;
  kaldi::nnet1::Component *v22;
  const void *v23;
  void *v24;
  const std::locale::facet *v25;
  unsigned __int8 v26;
  size_t v27;
  char v28;
  size_t v29;
  char *v30;
  char *v31;
  int v32;
  size_t v33;
  std::string *v34;
  const void *v35;
  _QWORD *v36;
  void **v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  uint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  std::string __p[11];
  void *v50;
  size_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  std::locale v57;
  uint64_t v58;
  void *v59;
  char v60;
  uint64_t v61;
  void *v62[3];

  memset(v62, 0, sizeof(v62));
  v4 = a2 + 4;
  v5 = a1 + 12;
  v6 = a1 + 8;
  while (1)
  {
    if ((*((_BYTE *)v4 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
      goto LABEL_44;
    kaldi::ReadToken(a2, 0, (uint64_t)v62);
    if (SHIBYTE(v62[2]) < 0)
      break;
    if (HIBYTE(v62[2]) == 15)
    {
      v14 = v62[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v62 + 7) == (void *)0x3E736E6F69746E65;
      v9 = v5;
      if (!v14)
      {
LABEL_35:
        if (HIBYTE(v62[2]) == 12)
        {
          v15 = v62;
          goto LABEL_39;
        }
        goto LABEL_78;
      }
    }
    else
    {
      if (HIBYTE(v62[2]) != 22)
        goto LABEL_35;
      v8 = v62[0] == (void *)0x53656372756F533CLL
        && v62[1] == (void *)0x656D694465746174
        && *(void **)((char *)&v62[1] + 6) == (void *)0x3E6E6F69736E656DLL;
      v9 = v6;
      if (!v8)
        goto LABEL_78;
    }
LABEL_34:
    kaldi::ReadBasicType<int>(a2, 0, v9);
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v10 = v62[1];
  if (v62[1] != (void *)15)
  {
    if (v62[1] != (void *)22)
      goto LABEL_37;
    v11 = *(_QWORD *)v62[0] == 0x53656372756F533CLL && *((_QWORD *)v62[0] + 1) == 0x656D694465746174;
    v12 = v11 && *(_QWORD *)((char *)v62[0] + 14) == 0x3E6E6F69736E656DLL;
    v9 = v6;
    if (!v12)
      goto LABEL_37;
    goto LABEL_34;
  }
  v13 = *(_QWORD *)v62[0] == 0x6574744178614D3CLL && *(_QWORD *)((char *)v62[0] + 7) == 0x3E736E6F69746E65;
  v9 = v5;
  if (v13)
    goto LABEL_34;
  v10 = v62[1];
LABEL_37:
  if (v10 != (void *)12)
    goto LABEL_78;
  v15 = (void **)v62[0];
LABEL_39:
  v16 = *v15;
  v17 = *((_DWORD *)v15 + 2);
  if (v16 != (void *)0x6E6F706D6F432F3CLL || v17 != 1047817829)
  {
LABEL_78:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v57);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"Unknown token ", 14);
    if (SHIBYTE(v62[2]) >= 0)
      v37 = v62;
    else
      v37 = (void **)v62[0];
    if (SHIBYTE(v62[2]) >= 0)
      v38 = HIBYTE(v62[2]);
    else
      v38 = (uint64_t)v62[1];
    v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" (SourceStateDimension|MaxAttentions)", 37);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v57);
  }
LABEL_44:
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v53 = 0;
  kaldi::ExpectToken(a2, 0, "<SourceDotTransform>");
  kaldi::ReadToken(a2, 0, (uint64_t)&v54);
  v19 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v54);
  kaldi::ExpectToken(a2, 0, "<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v53 + 4);
  kaldi::ExpectToken(a2, 0, "<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v53);
  v20 = (const void *)kaldi::nnet1::Component::NewComponentOfType(v19, HIDWORD(v53), v53);
  if (!v20)
  {
    *(_QWORD *)(a1 + 176) = 0;
LABEL_86:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v57);
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"cannot initialize source dot transform from ", 44);
    if (v56 >= 0)
      v42 = &v54;
    else
      v42 = v54;
    if (v56 >= 0)
      v43 = HIBYTE(v56);
    else
      v43 = v55;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v57);
  }
  *(_QWORD *)(a1 + 176) = v21;
  if (!v21)
    goto LABEL_86;
  (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v21 + 96))(v21, a2, a3);
  kaldi::ExpectToken(a2, 0, "<TargetDotTransform>");
  kaldi::ReadToken(a2, 0, (uint64_t)&v54);
  v22 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v54);
  kaldi::ExpectToken(a2, 0, "<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v53 + 4);
  kaldi::ExpectToken(a2, 0, "<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v53);
  v23 = (const void *)kaldi::nnet1::Component::NewComponentOfType(v22, HIDWORD(v53), v53);
  if (!v23)
  {
    *(_QWORD *)(a1 + 184) = 0;
LABEL_94:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v57);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"cannot initialize target dot transform from ", 44);
    if (v56 >= 0)
      v45 = &v54;
    else
      v45 = v54;
    if (v56 >= 0)
      v46 = HIBYTE(v56);
    else
      v46 = v55;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v57);
  }
  *(_QWORD *)(a1 + 184) = v24;
  if (!v24)
    goto LABEL_94;
  (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v24 + 96))(v24, a2, a3);
  v50 = 0;
  v51 = 0;
  v52 = 0;
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v25 = std::locale::use_facet(&v57, MEMORY[0x1E0DE4A90]);
  v26 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
  std::locale::~locale(&v57);
  std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v50, v26);
  v27 = HIBYTE(v52);
  v28 = HIBYTE(v52);
  v30 = (char *)v50;
  v29 = v51;
  v31 = (char *)v50 + v51;
  if (v52 >= 0)
  {
    v31 = (char *)&v50 + HIBYTE(v52);
    v30 = (char *)&v50;
  }
  if (v30 != v31)
  {
    do
    {
      v32 = *v30;
      if (v32 == 124)
        LOBYTE(v32) = 10;
      *v30++ = v32;
    }
    while (v30 != v31);
    v27 = HIBYTE(v52);
    v29 = v51;
    v28 = HIBYTE(v52);
  }
  if (v28 >= 0)
    v33 = v27;
  else
    v33 = v29;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v33 + 1);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = __p;
  else
    v34 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  if (v33)
  {
    if (v52 >= 0)
      v35 = &v50;
    else
      v35 = v50;
    memmove(v34, v35, v33);
  }
  *(_WORD *)((char *)&v34->__r_.__value_.__l.__data_ + v33) = 10;
  std::istringstream::basic_istringstream[abi:ne180100](&v57, __p, 8);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  kaldi::nnet1::Nnet::Init(*(kaldi::nnet1::Nnet **)(a1 + 192), (uint64_t *)&v57, a3);
  kaldi::nnet1::Nnet::ValidateNnet(*(kaldi::nnet1::Nnet **)(a1 + 192));
  if ((kaldi::nnet1::Nnet::IsRnn(*(kaldi::nnet1::Nnet **)(a1 + 192)) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"it doesn't make sense to use a non-recurrent network here", 57);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
  v57.__locale_ = (std::locale::__imp *)*MEMORY[0x1E0DE4F58];
  *(std::locale *)((char *)&v57 + *((_QWORD *)v57.__locale_ - 3)) = *(std::locale *)(MEMORY[0x1E0DE4F58] + 24);
  v58 = MEMORY[0x1E0DE4FB8] + 16;
  if (v60 < 0)
    operator delete(v59);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1AF44D094](&v61);
  if (SHIBYTE(v52) < 0)
    operator delete(v50);
  if (SHIBYTE(v56) < 0)
    operator delete(v54);
  if (SHIBYTE(v62[2]) < 0)
    operator delete(v62[0]);
}

void `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::InitData(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  kaldi::nnet1::GlobalRecurrentAttention::InitData((uint64_t)a1 + *(_QWORD *)(*a1 - 112), a2, a3);
}

void kaldi::nnet1::GlobalRecurrentAttention::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  BOOL v10;
  uint64_t v11;
  void *v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  void **v17;
  void *v18;
  int v19;
  const void *v21;
  void *v22;
  const void *v23;
  void *v24;
  _QWORD *v25;
  void **v26;
  uint64_t v27;
  _QWORD v29[34];
  void *v30[4];

  memset(v30, 0, 24);
  v7 = a1 + 12;
  v8 = a1 + 8;
  while (1)
  {
    if (kaldi::Peek(a2, a3) != 60)
      goto LABEL_44;
    kaldi::ReadToken(a2, a3, (uint64_t)v30);
    if (SHIBYTE(v30[2]) < 0)
      break;
    if (HIBYTE(v30[2]) == 15)
    {
      v16 = v30[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v30 + 7) == (void *)0x3E736E6F69746E65;
      v11 = v7;
      if (!v16)
      {
LABEL_35:
        if (HIBYTE(v30[2]) == 12)
        {
          v17 = v30;
          goto LABEL_39;
        }
        goto LABEL_52;
      }
    }
    else
    {
      if (HIBYTE(v30[2]) != 22)
        goto LABEL_35;
      v10 = v30[0] == (void *)0x53656372756F533CLL
         && v30[1] == (void *)0x656D694465746174
         && *(void **)((char *)&v30[1] + 6) == (void *)0x3E6E6F69736E656DLL;
      v11 = v8;
      if (!v10)
        goto LABEL_52;
    }
LABEL_34:
    kaldi::ReadBasicType<int>(a2, a3, v11);
  }
  v12 = v30[1];
  if (v30[1] != (void *)15)
  {
    if (v30[1] != (void *)22)
      goto LABEL_37;
    v13 = *(_QWORD *)v30[0] == 0x53656372756F533CLL && *((_QWORD *)v30[0] + 1) == 0x656D694465746174;
    v14 = v13 && *(_QWORD *)((char *)v30[0] + 14) == 0x3E6E6F69736E656DLL;
    v11 = v8;
    if (!v14)
      goto LABEL_37;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)v30[0] == 0x6574744178614D3CLL && *(_QWORD *)((char *)v30[0] + 7) == 0x3E736E6F69746E65;
  v11 = v7;
  if (v15)
    goto LABEL_34;
  v12 = v30[1];
LABEL_37:
  if (v12 != (void *)12)
    goto LABEL_52;
  v17 = (void **)v30[0];
LABEL_39:
  v18 = *v17;
  v19 = *((_DWORD *)v17 + 2);
  if (v18 != (void *)0x6E6F706D6F432F3CLL || v19 != 1047817829)
  {
LABEL_52:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Unrecognized token ", 19);
    if (SHIBYTE(v30[2]) >= 0)
      v26 = v30;
    else
      v26 = (void **)v30[0];
    if (SHIBYTE(v30[2]) >= 0)
      v27 = HIBYTE(v30[2]);
    else
      v27 = (uint64_t)v30[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
LABEL_44:
  kaldi::ExpectToken(a2, a3, "<SourceDotTransform>");
  v21 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v21)
  {
    *(_QWORD *)(a1 + 176) = 0;
LABEL_60:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"read source dot transform failed", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
  *(_QWORD *)(a1 + 176) = v22;
  if (!v22)
    goto LABEL_60;
  kaldi::ExpectToken(a2, a3, "</Component>");
  kaldi::ExpectToken(a2, a3, "<TargetDotTransform>");
  v23 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (!v23)
  {
    *(_QWORD *)(a1 + 184) = 0;
LABEL_62:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"read target dot transform failed", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
  *(_QWORD *)(a1 + 184) = v24;
  if (!v24)
    goto LABEL_62;
  kaldi::ExpectToken(a2, a3, "</Component>");
  kaldi::nnet1::Nnet::Read(*(uint64_t ***)(a1 + 192), a2, a3, a4);
  kaldi::nnet1::Nnet::ValidateNnet(*(kaldi::nnet1::Nnet **)(a1 + 192));
  if ((kaldi::nnet1::Nnet::IsRnn(*(kaldi::nnet1::Nnet **)(a1 + 192)) & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"it doesn't make sense to use a non-reccurent network here", 57);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
  if (SHIBYTE(v30[2]) < 0)
    operator delete(v30[0]);
}

void sub_1ADD5F6C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::GlobalRecurrentAttention::ReadData((uint64_t)a1 + *(_QWORD *)(*a1 - 176), a2, a3, a4);
}

_QWORD *kaldi::nnet1::GlobalRecurrentAttention::WriteConfig(int a1, _QWORD *a2, int a3)
{
  kaldi::WriteToken(a2, a3, "<SourceStateDimension>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxAttentions>");
  kaldi::WriteBasicType<int>(a2, a3);
  return kaldi::WriteToken(a2, a3, "</Component>");
}

_QWORD *`virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::WriteConfig(_QWORD *a1, _QWORD *a2, int a3)
{
  return kaldi::nnet1::GlobalRecurrentAttention::WriteConfig(a1 + *(_QWORD *)(*a1 - 184), a2, a3);
}

_QWORD *kaldi::nnet1::GlobalRecurrentAttention::WriteData(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  kaldi::WriteToken(a2, a3, "<SourceDotTransform>");
  kaldi::nnet1::Component::Write(*(_QWORD *)(a1 + 176), a2, a3, a4);
  kaldi::WriteToken(a2, a3, "</Component>");
  kaldi::WriteToken(a2, a3, "<TargetDotTransform>");
  kaldi::nnet1::Component::Write(*(_QWORD *)(a1 + 184), a2, a3, a4);
  kaldi::WriteToken(a2, a3, "</Component>");
  return kaldi::nnet1::Nnet::Write(*(uint64_t **)(a1 + 192), a2, a3, a4);
}

_QWORD *`virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::WriteData(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::GlobalRecurrentAttention::WriteData((uint64_t)a1 + *(_QWORD *)(*a1 - 120), a2, a3, a4);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::NumParams(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  int v2;
  int v3;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 22) + 176))(*((_QWORD *)this + 22));
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 23) + 176))(*((_QWORD *)this + 23)) + v2;
  return v3 + kaldi::nnet1::Nnet::NumParams(*((kaldi::nnet1::Nnet **)this + 24));
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::NumParams(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  char *v1;
  int v2;
  int v3;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 192);
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v1 + 22) + 176))(*((_QWORD *)v1 + 22));
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v1 + 23) + 176))(*((_QWORD *)v1 + 23)) + v2;
  return v3 + kaldi::nnet1::Nnet::NumParams(*((kaldi::nnet1::Nnet **)v1 + 24));
}

void kaldi::nnet1::GlobalRecurrentAttention::GetParams(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 1);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 176) + 184))(*(_QWORD *)(a1 + 176), &v10);
  v8 = 0;
  v9 = 0;
  v7 = (char *)*a2;
  LODWORD(v8) = v11;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v7, (const void **)&v10);
  v5 = (int)v11;
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 184) + 184))(*(_QWORD *)(a1 + 184), &v10);
  v8 = 0;
  v9 = 0;
  v7 = (char *)*a2 + 4 * v5;
  LODWORD(v8) = v11;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v7, (const void **)&v10);
  v6 = v11;
  kaldi::nnet1::Nnet::GetParams(*(kaldi::nnet1::Nnet **)(a1 + 192), &v10);
  v8 = 0;
  v9 = 0;
  v7 = (char *)*a2 + 4 * v6 + 4 * (int)v5;
  LODWORD(v8) = v11;
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v7, (const void **)&v10);
  kaldi::Vector<float>::Destroy((uint64_t)&v10);
}

void sub_1ADD5FA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::GetParams(_QWORD *a1, void **a2)
{
  kaldi::nnet1::GlobalRecurrentAttention::GetParams((uint64_t)a1 + *(_QWORD *)(*a1 - 200), a2);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetParams(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  kaldi::nnet1::Nnet *v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 176);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 176))(v4);
  v12 = 0;
  v13 = 0;
  v11 = *a2;
  LODWORD(v12) = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 192))(v4, &v11);
  LODWORD(v4) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 176))(*(_QWORD *)(a1 + 176));
  v6 = *(_QWORD *)(a1 + 184);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 176))(v6);
  v12 = 0;
  v13 = 0;
  v11 = *a2 + 4 * (int)v4;
  LODWORD(v12) = v7;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 192))(v6, &v11);
  LODWORD(v6) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 176))(*(_QWORD *)(a1 + 184)) + v4;
  v8 = *(kaldi::nnet1::Nnet **)(a1 + 192);
  v9 = kaldi::nnet1::Nnet::NumParams(v8);
  v12 = 0;
  v13 = 0;
  v11 = *a2 + 4 * (int)v6;
  LODWORD(v12) = v9;
  kaldi::nnet1::Nnet::SetParams(v8, &v11);
  return kaldi::nnet1::Nnet::NumParams(*(kaldi::nnet1::Nnet **)(a1 + 192));
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetParams(_QWORD *a1, uint64_t *a2)
{
  return kaldi::nnet1::GlobalRecurrentAttention::SetParams((uint64_t)a1 + *(_QWORD *)(*a1 - 208), a2);
}

float kaldi::nnet1::GlobalRecurrentAttention::SumParams(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  float v2;
  float v3;

  v2 = (*(float (**)(_QWORD))(**((_QWORD **)this + 22) + 208))(*((_QWORD *)this + 22));
  v3 = v2 + (*(float (**)(_QWORD))(**((_QWORD **)this + 23) + 208))(*((_QWORD *)this + 23));
  return v3 + kaldi::nnet1::Nnet::SumParams(*((kaldi::nnet1::Nnet **)this + 24));
}

float `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SumParams(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  char *v1;
  float v2;
  float v3;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 224);
  v2 = (*(float (**)(_QWORD))(**((_QWORD **)v1 + 22) + 208))(*((_QWORD *)v1 + 22));
  v3 = v2 + (*(float (**)(_QWORD))(**((_QWORD **)v1 + 23) + 208))(*((_QWORD *)v1 + 23));
  return v3 + kaldi::nnet1::Nnet::SumParams(*((kaldi::nnet1::Nnet **)v1 + 24));
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::PerturbParams(kaldi::nnet1::GlobalRecurrentAttention *this, float a2)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 22) + 216))(*((_QWORD *)this + 22));
  return (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 23) + 216))(*((_QWORD *)this + 23), a2);
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::PerturbParams(kaldi::nnet1::GlobalRecurrentAttention *this, float a2)
{
  char *v3;

  v3 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 232);
  (*(void (**)(_QWORD))(**((_QWORD **)v3 + 22) + 216))(*((_QWORD *)v3 + 22));
  return (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)v3 + 23) + 216))(*((_QWORD *)v3 + 23), a2);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::Info(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v19;
  void *v20[2];
  unsigned __int8 v21;
  void *v22[2];
  unsigned __int8 v23;
  _QWORD v24[11];
  char v25;
  uint64_t v26;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
  (*(void (**)(kaldi::nnet1::GlobalRecurrentAttention *, _QWORD *, _QWORD))(*(_QWORD *)this + 96))(this, v24, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\n## Source Dot Transform: input-dim ", 36);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", output-dim ", 13);
  v3 = (_QWORD *)std::ostream::operator<<();
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 22) + 64))(v22);
  if ((v23 & 0x80u) == 0)
    v5 = v22;
  else
    v5 = (void **)v22[0];
  if ((v23 & 0x80u) == 0)
    v6 = v23;
  else
    v6 = (uint64_t)v22[1];
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\n## Target Dot Transform: input-dim ", 36);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", output-dim ", 13);
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\n", 1);
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 23) + 64))(v20);
  if ((v21 & 0x80u) == 0)
    v11 = v20;
  else
    v11 = (void **)v20[0];
  if ((v21 & 0x80u) == 0)
    v12 = v21;
  else
    v12 = (uint64_t)v20[1];
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\n## Internal recurrent network info ", 36);
  kaldi::nnet1::Nnet::Info((uint64_t *)__p, *((kaldi::nnet1::Nnet **)this + 24));
  if ((v19 & 0x80u) == 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v16 = v19;
  else
    v16 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  if ((char)v21 < 0)
    operator delete(v20[0]);
  if ((char)v23 < 0)
    operator delete(v22[0]);
  std::stringbuf::str();
  v24[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v24 + *(_QWORD *)(v24[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v24[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v25 < 0)
    operator delete((void *)v24[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v26);
}

void sub_1ADD5FEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  std::ostringstream::~ostringstream((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::Info(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  return kaldi::nnet1::GlobalRecurrentAttention::Info((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this
                                                                                               + *(_QWORD *)(*(_QWORD *)this - 80)));
}

void kaldi::nnet1::GlobalRecurrentAttention::InfoGradient(kaldi::nnet1::GlobalRecurrentAttention *this@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  void *__p[2];
  unsigned __int8 v16;
  void *v17[2];
  unsigned __int8 v18;
  void *v19[2];
  unsigned __int8 v20;
  std::string v21;
  std::string v22;
  std::string v23;

  (*(void (**)(std::string *__return_ptr))(**((_QWORD **)this + 22) + 72))(&v21);
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 23) + 72))(v19);
  if ((v20 & 0x80u) == 0)
    v4 = v19;
  else
    v4 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v5 = v20;
  else
    v5 = (std::string::size_type)v19[1];
  v6 = std::string::append(&v21, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::Nnet::InfoGradient(*((kaldi::nnet1::Nnet **)this + 24), v17);
  if ((v18 & 0x80u) == 0)
    v8 = v17;
  else
    v8 = (void **)v17[0];
  if ((v18 & 0x80u) == 0)
    v9 = v18;
  else
    v9 = (std::string::size_type)v17[1];
  v10 = std::string::append(&v22, (const std::string::value_type *)v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "\n");
  if ((v16 & 0x80u) == 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if ((v16 & 0x80u) == 0)
    v13 = v16;
  else
    v13 = (std::string::size_type)__p[1];
  v14 = std::string::append(&v23, (const std::string::value_type *)v12, v13);
  *a2 = *v14;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if ((char)v16 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if ((char)v18 < 0)
    operator delete(v17[0]);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_1ADD600EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v38 - 41) < 0)
    operator delete(*(void **)(v38 - 64));
  if (a20 < 0)
    operator delete(a15);
  if (a38 < 0)
    operator delete(a33);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::InfoGradient(kaldi::nnet1::GlobalRecurrentAttention *this@<X0>, std::string *a2@<X8>)
{
  kaldi::nnet1::GlobalRecurrentAttention::InfoGradient((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88)), a2);
}

void kaldi::nnet1::GlobalRecurrentAttention::SetTrainOptions(kaldi::nnet1::GlobalRecurrentAttention *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  char *v4;
  __int128 v5;

  v4 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v5 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)(v4 + 71) = *(_OWORD *)((char *)a2 + 23);
  *(_OWORD *)(v4 + 56) = v5;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 22) + 264))(*((_QWORD *)this + 22));
  (*(void (**)(_QWORD, const kaldi::nnet1::NnetTrainOptions *))(**((_QWORD **)this + 23) + 264))(*((_QWORD *)this + 23), a2);
  kaldi::nnet1::Nnet::SetTrainOptions(*((kaldi::nnet1::Nnet **)this + 24), a2, 0);
}

void `non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetTrainOptions(kaldi::nnet1::GlobalRecurrentAttention *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::GlobalRecurrentAttention::SetTrainOptions((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this - 16), a2);
}

void `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetTrainOptions(kaldi::nnet1::GlobalRecurrentAttention *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  kaldi::nnet1::GlobalRecurrentAttention::SetTrainOptions((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 280)), a2);
}

int32x2_t *kaldi::nnet1::GlobalRecurrentAttention::SetSourceStates(uint64_t a1, int32x2_t *a2, char **a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  int v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v20;
  __int128 v21;
  __int128 v22;
  _BYTE __p[40];

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
  v7 = *a3;
  v6 = a3[1];
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 296), a2);
  if ((char **)(a1 + 640) != a3)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 640), *a3, (uint64_t)a3[1], (a3[1] - *a3) >> 2);
  v8 = v6 - v7;
  v9 = *a3 + 4;
  v10 = *(_DWORD *)*a3;
  *(_DWORD *)(a1 + 664) = v10;
  v11 = a3[1];
  while (v9 != v11)
  {
    v12 = *(_DWORD *)v9;
    if (*(_DWORD *)v9 > v10)
    {
      *(_DWORD *)(a1 + 664) = v12;
      v10 = v12;
    }
    v9 += 4;
  }
  kaldi::nnet1::Component::Propagate(*(_DWORD **)(a1 + 176), a1 + 296, (int32x2_t *)(a1 + 200), 0);
  memset(__p, 0, 24);
  std::vector<std::vector<int>>::assign((uint64_t *)(a1 + 616), (int)(v8 >> 2), (uint64_t)__p);
  if (*(_QWORD *)__p)
  {
    *(_QWORD *)&__p[8] = *(_QWORD *)__p;
    operator delete(*(void **)__p);
  }
  v13 = kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(a1 + 192));
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 344), (unint64_t)v8 >> 2, v13, 0, 0);
  v14 = *(_QWORD *)(a1 + 352);
  v15 = *(_DWORD *)(a1 + 372);
  v16 = *(_QWORD *)(a1 + 376);
  *(_DWORD *)&__p[16] = *(_DWORD *)(a1 + 8);
  *(_QWORD *)&__p[20] = *(_QWORD *)(a1 + 364);
  *(_DWORD *)&__p[28] = v15;
  *(_QWORD *)&__p[32] = v16;
  *(_QWORD *)__p = &unk_1E5D29D40;
  *(_QWORD *)&__p[8] = v14;
  v17 = *(_QWORD *)(a1 + 304);
  v18 = *(_QWORD *)(a1 + 328);
  DWORD2(v21) = *(_DWORD *)(a1 + 312);
  HIDWORD(v21) = (unint64_t)v8 >> 2;
  *(_QWORD *)&v22 = *(_QWORD *)(a1 + 320);
  *((_QWORD *)&v22 + 1) = v18;
  v20 = &unk_1E5D29D40;
  *(_QWORD *)&v21 = v17;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)__p, (uint64_t)&v20, 111);
  v20 = &unk_1E5D29D40;
  v21 = 0u;
  v22 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v20);
  *(_QWORD *)__p = &unk_1E5D29D40;
  memset(&__p[8], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)__p);
  kaldi::nnet1::Nnet::ResetHistoryStateIfExists(*(_QWORD *)(a1 + 192));
  return kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>(*(uint64_t **)(a1 + 192), (int32x2_t *)(a1 + 344), (int32x2_t *)(a1 + 392), 0);
}

void sub_1ADD603E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  _OWORD *v15;
  void *v16;
  _OWORD *v17;

  *v17 = 0u;
  v17[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  __p = v16;
  *v15 = 0u;
  v15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::GetSourceDiffs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
  return kaldi::CuMatrix<float>::Swap(a1 + 440, a4);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::GetCurrentAlignment(uint64_t a1, std::vector<unsigned int> *this)
{
  int v4;
  std::vector<unsigned int>::pointer begin;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = -1431655765 * ((uint64_t)(*(_QWORD *)(a1 + 624) - *(_QWORD *)(a1 + 616)) >> 3);
  std::vector<int>::resize(this, v4);
  if (v4 >= 1)
  {
    begin = this->__begin_;
    v6 = v4;
    v7 = (uint64_t *)(*(_QWORD *)(a1 + 616) + 8);
    do
    {
      v8 = *v7;
      v7 += 3;
      *begin++ = *(_DWORD *)(v8 - 4);
      --v6;
    }
    while (v6);
  }
  return 1;
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::GetOverallAlignment(uint64_t a1, uint64_t a2)
{
  if (a1 + 616 != a2)
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>(a2, *(_QWORD *)(a1 + 616), *(_QWORD *)(a1 + 624), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 624) - *(_QWORD *)(a1 + 616)) >> 3));
  return 1;
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetSourceVectorDimension(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 8) != a2)
  {
    *(_DWORD *)(this + 8) = a2;
    *(_BYTE *)(this + 668) = 0;
  }
  return this;
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetMaxAttentions(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 12) != a2)
  {
    *(_DWORD *)(this + 12) = a2;
    *(_BYTE *)(this + 668) = 0;
  }
  return this;
}

void kaldi::nnet1::GlobalRecurrentAttention::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  int **v26;
  unint64_t v27;
  _QWORD *v28;
  int *v29;
  int *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  int *v36;
  int v37;
  float v38;
  float *v39;
  int v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  float *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  int v67;
  uint64_t v69;
  unsigned int v70;
  int32x2_t *v71;
  const void **v72;
  int v73;
  int32x2_t *v74;
  uint64_t v75;
  int32x2_t *v76;
  _QWORD v77[4];
  void *v78;
  __int128 v79;
  __int128 v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  _QWORD v86[4];
  int32x2_t v87[2];
  int v88;
  void *v89[4];

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
  v5 = *(_QWORD *)(a1 + 648) - *(_QWORD *)(a1 + 640);
  v6 = v5 >> 2;
  v69 = a2;
  LODWORD(a2) = *(_DWORD *)(a2 + 20);
  v7 = *(unsigned int *)(a1 + 316);
  v8 = ((int)v7 / (int)(v5 >> 2));
  v72 = (const void **)(a1 + 584);
  kaldi::CuVector<float>::Resize(a1 + 584, v7, 0);
  v70 = v8;
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 488), v5 >> 2, v8, 1, 0);
  v9 = *(unsigned int *)(a1 + 316);
  memset(v89, 0, 24);
  kaldi::Vector<float>::Resize(v89, v9, 1);
  kaldi::Matrix<float>::Matrix((uint64_t)v87);
  v67 = (int)a2 / (int)(v5 >> 2);
  if (v67 >= 1)
  {
    v73 = 0;
    v71 = (int32x2_t *)(a1 + 536);
    v74 = (int32x2_t *)(a1 + 392);
    v76 = (int32x2_t *)(a1 + 248);
    v10 = (int)((uint64_t)v5 >> 2);
    v11 = (v5 >> 2);
    v75 = v11;
    do
    {
      kaldi::CuMatrix<float>::operator=(v71, (int32x2_t *)(a1 + 200));
      kaldi::nnet1::Component::Propagate(*(_DWORD **)(a1 + 184), (uint64_t)v74, v76, 0);
      if (*(int *)(a1 + 664) >= 1)
      {
        v12 = 0;
        v13 = 0;
        do
        {
          v14 = *(_DWORD *)(a1 + 560);
          v15 = *(_QWORD *)(a1 + 544) + 4 * (int)(v14 * v12);
          v16 = *(_DWORD *)(a1 + 564) - v14 * v12;
          v17 = *(_QWORD *)(a1 + 568);
          LODWORD(v86[1]) = *(_DWORD *)(a1 + 552);
          HIDWORD(v86[1]) = v6;
          v86[2] = __PAIR64__(v16, v14);
          v86[3] = v17;
          v85 = &unk_1E5D29D40;
          v86[0] = v15;
          kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v85, (uint64_t)v76);
          v85 = &unk_1E5D29D40;
          memset(v86, 0, sizeof(v86));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v85);
          ++v13;
          v12 += v6;
        }
        while (v13 < *(_DWORD *)(a1 + 664));
      }
      kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v72, (uint64_t)v71, 1.0, 0.0);
      kaldi::CuVectorBase<float>::CopyToVec<float>(v72, (uint64_t)v89);
      kaldi::Matrix<float>::Resize(v87, v6, v70, 0, 0);
      if ((int)v6 >= 1)
      {
        v18 = 0;
        do
        {
          v19 = *(unsigned int *)(*(_QWORD *)(a1 + 640) + 4 * v18);
          if ((int)v19 < 1)
          {
            v21 = -1;
            v22 = -INFINITY;
          }
          else
          {
            v20 = 0;
            v21 = -1;
            v22 = -INFINITY;
            v23 = v18;
            do
            {
              if (*((float *)v89[0] + v23) > v22)
              {
                v21 = v20;
                v22 = *((float *)v89[0] + v23);
              }
              ++v20;
              v23 += v10;
            }
            while ((_DWORD)v19 != v20);
          }
          v24 = *(_QWORD *)(a1 + 616) + 24 * v18;
          v26 = (int **)(v24 + 8);
          v25 = *(int **)(v24 + 8);
          v28 = (_QWORD *)(v24 + 16);
          v27 = *(_QWORD *)(v24 + 16);
          if ((unint64_t)v25 >= v27)
          {
            v30 = *(int **)v24;
            v31 = ((uint64_t)v25 - *(_QWORD *)v24) >> 2;
            v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v33 = v27 - (_QWORD)v30;
            if (v33 >> 1 > v32)
              v32 = v33 >> 1;
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
              v34 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v34 = v32;
            if (v34)
            {
              v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v28, v34);
              v25 = *v26;
              v30 = *(int **)v24;
            }
            else
            {
              v35 = 0;
            }
            v36 = (int *)&v35[4 * v31];
            *v36 = v21;
            v29 = v36 + 1;
            while (v25 != v30)
            {
              v37 = *--v25;
              *--v36 = v37;
            }
            *(_QWORD *)v24 = v36;
            *v26 = v29;
            *v28 = &v35[4 * v34];
            if (v30)
              operator delete(v30);
          }
          else
          {
            *v25 = v21;
            v29 = v25 + 1;
          }
          *v26 = v29;
          v11 = v75;
          if ((int)v19 >= 1)
          {
            v38 = 0.0;
            v39 = (float *)v89[0];
            v40 = v19;
            v41 = v18;
            do
            {
              v42 = expf(v39[v41] - v22);
              v39[v41] = v42;
              v38 = v38 + v42;
              v41 += v10;
              --v40;
            }
            while (v40);
            v43 = 0;
            v44 = (float *)v89[0];
            v45 = *(_QWORD *)v87 + 4 * v88 * (int)v18;
            v46 = v18;
            do
            {
              *(float *)(v45 + 4 * v43++) = (float)(1.0 / v38) * v44[v46];
              v46 += v10;
            }
            while (v19 != v43);
          }
          ++v18;
        }
        while (v18 != v75);
      }
      kaldi::CuMatrixBase<float>::CopyFromMat(a1 + 488, (int *)v87, 111);
      if ((int)v6 >= 1)
      {
        v47 = 0;
        do
        {
          v48 = *(_DWORD *)(*(_QWORD *)(a1 + 640) + 4 * v47);
          v49 = *(_DWORD *)(a1 + 364);
          v50 = *(_QWORD *)(a1 + 352);
          v51 = *(_QWORD *)(a1 + 376);
          LODWORD(v86[1]) = *(_DWORD *)(a1 + 8);
          HIDWORD(v86[1]) = v49;
          v86[2] = *(_QWORD *)(a1 + 368);
          v86[3] = v51;
          v85 = &unk_1E5D29D40;
          v86[0] = v50;
          v81 = &unk_1E5D29D70;
          v82 = v50 + 4 * LODWORD(v86[2]) * (int)v47;
          v84 = v51;
          v83 = LODWORD(v86[1]);
          v52 = *(_DWORD *)(a1 + 320);
          v53 = *(_QWORD *)(a1 + 304) + 4 * (int)(v52 * v47);
          v54 = *(_DWORD *)(a1 + 324) - v52 * v47;
          v55 = *(_QWORD *)(a1 + 328);
          DWORD2(v79) = *(_DWORD *)(a1 + 312);
          HIDWORD(v79) = v48 * v6;
          *(_QWORD *)&v80 = __PAIR64__(v54, v52);
          *((_QWORD *)&v80 + 1) = v55;
          v78 = &unk_1E5D29D40;
          *(_QWORD *)&v79 = v53;
          if (v6 >= 2)
            kaldi::CuMatrixBase<float>::SetStride((uint64_t)&v78, v52 * v6);
          v56 = *(_QWORD *)(a1 + 496) + 4 * *(_DWORD *)(a1 + 512) * (int)v47;
          v57 = *(_QWORD *)(a1 + 520);
          v77[0] = &unk_1E5D29D70;
          v77[1] = v56;
          v77[3] = v57;
          v77[2] = v48;
          kaldi::CuVectorBase<float>::AddMatVec((uint64_t)&v81, (uint64_t)&v78, CblasTrans, (uint64_t)v77, 1.0, 0.0);
          v78 = &unk_1E5D29D40;
          v79 = 0u;
          v80 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v78);
          v81 = &unk_1E5D29D70;
          v82 = 0;
          LODWORD(v83) = 0;
          v84 = 0;
          v85 = &unk_1E5D29D40;
          memset(v86, 0, sizeof(v86));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v85);
          ++v47;
        }
        while (v11 != v47);
      }
      v58 = *(unsigned int *)(a1 + 8);
      v59 = *(_QWORD *)(a1 + 352) + 4 * v58;
      LODWORD(v58) = *(_DWORD *)(a1 + 372) - v58;
      v60 = *(_QWORD *)(a1 + 376);
      LODWORD(v86[1]) = *(_DWORD *)(a1 + 8 + *(_QWORD *)(*(_QWORD *)a1 - 24));
      *(_QWORD *)((char *)&v86[1] + 4) = *(_QWORD *)(a1 + 364);
      HIDWORD(v86[2]) = v58;
      v86[3] = v60;
      v85 = &unk_1E5D29D40;
      v86[0] = v59;
      LODWORD(v59) = *(_DWORD *)(v69 + 24);
      v61 = *(_QWORD *)(v69 + 8) + 4 * (int)v59 * v73 * (int)v6;
      LODWORD(v60) = *(_DWORD *)(v69 + 28) - v59 * v73 * v6;
      v62 = *(_QWORD *)(v69 + 32);
      DWORD2(v79) = *(_DWORD *)(v69 + 16);
      HIDWORD(v79) = v6;
      *(_QWORD *)&v80 = __PAIR64__(v60, v59);
      *((_QWORD *)&v80 + 1) = v62;
      v78 = &unk_1E5D29D40;
      *(_QWORD *)&v79 = v61;
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v85, (uint64_t)&v78, 111);
      v78 = &unk_1E5D29D40;
      v79 = 0u;
      v80 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v78);
      v85 = &unk_1E5D29D40;
      memset(v86, 0, sizeof(v86));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v85);
      kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>(*(uint64_t **)(a1 + 192), (int32x2_t *)(a1 + 344), v74, 0);
      v63 = *(_DWORD *)(a3 + 24);
      v64 = *(_QWORD *)(a3 + 8) + 4 * (int)(v63 * v73 * v6);
      v65 = *(_DWORD *)(a3 + 28) - v63 * v73 * v6;
      v66 = *(_QWORD *)(a3 + 32);
      LODWORD(v86[1]) = *(_DWORD *)(a3 + 16);
      HIDWORD(v86[1]) = v6;
      v86[2] = __PAIR64__(v65, v63);
      v86[3] = v66;
      v85 = &unk_1E5D29D40;
      v86[0] = v64;
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v85, (uint64_t)v74, 111);
      v85 = &unk_1E5D29D40;
      memset(v86, 0, sizeof(v86));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v85);
      ++v73;
    }
    while (v73 != v67);
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)v87);
  kaldi::Vector<float>::Destroy((uint64_t)v89);
}

void sub_1ADD60BE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::Vector<float>::Destroy(v1 - 144);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  kaldi::nnet1::GlobalRecurrentAttention::PropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 128), a2, a3);
}

void kaldi::nnet1::GlobalRecurrentAttention::BackpropagateFnc()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "not implemented yet");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::BackpropagateFnc()
{
  kaldi::nnet1::GlobalRecurrentAttention::BackpropagateFnc();
}

_QWORD *kaldi::nnet1::GlobalRecurrentAttention::SetGradientNormalization(_QWORD **a1, uint64_t a2, float a3)
{
  (*(void (**)(_QWORD *))(*a1[22] + 240))(a1[22]);
  (*(void (**)(_QWORD *, uint64_t, float))(*a1[23] + 240))(a1[23], a2, a3);
  return kaldi::nnet1::Nnet::SetGradientNormalization(a1[24], a2, 0, 0, a3);
}

_QWORD *`virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetGradientNormalization(_QWORD *a1, uint64_t a2, float a3)
{
  return kaldi::nnet1::GlobalRecurrentAttention::SetGradientNormalization((_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 256)), a2, a3);
}

void kaldi::nnet1::GlobalRecurrentAttention::AccumGradients()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "not implemented yet");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::AccumGradients()
{
  kaldi::nnet1::GlobalRecurrentAttention::AccumGradients();
}

void kaldi::nnet1::GlobalRecurrentAttention::UpdateWeights(kaldi::nnet1::GlobalRecurrentAttention *this, void *a2, uint64_t a3)
{
  (*(void (**)(kaldi::nnet1::GlobalRecurrentAttention *))(*(_QWORD *)this + 296))(this);
  (*(void (**)(_QWORD, void *, uint64_t))(**((_QWORD **)this + 22) + 256))(*((_QWORD *)this + 22), a2, a3);
  (*(void (**)(_QWORD, void *, uint64_t))(**((_QWORD **)this + 23) + 256))(*((_QWORD *)this + 23), a2, a3);
  kaldi::nnet1::Nnet::Update(*((const void ****)this + 24), a2, a3);
}

void `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::UpdateWeights(kaldi::nnet1::GlobalRecurrentAttention *this, void *a2, uint64_t a3)
{
  kaldi::nnet1::GlobalRecurrentAttention::UpdateWeights((kaldi::nnet1::GlobalRecurrentAttention *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 272)), a2, a3);
}

void kaldi::nnet1::GlobalRecurrentAttention::GetGradient()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "not implemented yet");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void `virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::GetGradient()
{
  kaldi::nnet1::GlobalRecurrentAttention::GetGradient();
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::HistoryStateSize(kaldi::nnet1::Nnet **this)
{
  (*((void (**)(kaldi::nnet1::Nnet **))*this + 37))(this);
  return kaldi::nnet1::Nnet::HistoryStateSize(this[24]);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::HistoryStateSize(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  kaldi::nnet1::Nnet **v1;

  v1 = (kaldi::nnet1::Nnet **)((char *)this - 16);
  (*(void (**)(char *))(*((_QWORD *)this - 2) + 296))((char *)this - 16);
  return kaldi::nnet1::Nnet::HistoryStateSize(v1[24]);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::ResetHistoryState(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t *))(*a1 + 296))(a1);
  return kaldi::nnet1::Nnet::ResetHistoryStateIfExists(a1[24], a2, a3, a4);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::ResetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a1 - 16;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 - 16) + 296))(a1 - 16);
  return kaldi::nnet1::Nnet::ResetHistoryStateIfExists(*(_QWORD *)(v7 + 192), a2, a3, a4);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::ResetHistoryState(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  (*(void (**)(kaldi::nnet1::GlobalRecurrentAttention *))(*(_QWORD *)this + 296))(this);
  return kaldi::nnet1::Nnet::ResetHistoryStateIfExists(*((_QWORD *)this + 24));
}

uint64_t `non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::ResetHistoryState(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  char *v1;

  v1 = (char *)this - 16;
  (*(void (**)(char *))(*((_QWORD *)this - 2) + 296))((char *)this - 16);
  return kaldi::nnet1::Nnet::ResetHistoryStateIfExists(*((_QWORD *)v1 + 24));
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::GetHistoryState(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t *))(*a1 + 296))(a1);
  return kaldi::nnet1::Nnet::GetHistoryState(a1[24], a2, a3);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::GetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = a1 - 16;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 - 16) + 296))(a1 - 16);
  return kaldi::nnet1::Nnet::GetHistoryState(*(_QWORD *)(v5 + 192), a2, a3);
}

void kaldi::nnet1::GlobalRecurrentAttention::GetHistoryState(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t *))(*a1 + 296))(a1);
  kaldi::nnet1::Nnet::GetHistoryState(a1[24], a2, a3, a4);
}

void `non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::GetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a1 - 16;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 - 16) + 296))(a1 - 16);
  kaldi::nnet1::Nnet::GetHistoryState(*(_QWORD *)(v7 + 192), a2, a3, a4);
}

void kaldi::nnet1::GlobalRecurrentAttention::SetHistoryState(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t *))(*a1 + 296))(a1);
  kaldi::nnet1::Nnet::SetHistoryState(a1[24], a2, a3);
}

void `non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = a1 - 16;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 - 16) + 296))(a1 - 16);
  kaldi::nnet1::Nnet::SetHistoryState(*(_QWORD *)(v5 + 192), a2, a3);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetHistoryState(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(uint64_t *))(*a1 + 296))(a1);
  return kaldi::nnet1::Nnet::SetHistoryState(a1[24], a2, a3, a4);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = a1 - 16;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 - 16) + 296))(a1 - 16);
  return kaldi::nnet1::Nnet::SetHistoryState(*(_QWORD *)(v7 + 192), a2, a3, a4);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::SetInternalBoundary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::nnet1::Nnet::SetInternalBoundary(*(_QWORD *)(a1 + 192), a2, a3);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::SetInternalBoundary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return kaldi::nnet1::Nnet::SetInternalBoundary(*(_QWORD *)(a1 + 176), a2, a3);
}

uint64_t kaldi::nnet1::GlobalRecurrentAttention::Check(uint64_t this)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD v16[34];

  if (!*(_BYTE *)(this + 668))
  {
    v1 = this;
    if (*(int *)(this + 12) < 1 || (v2 = *(_DWORD *)(this + 8), v2 <= 0))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"component is not initialized, max attention is ", 47);
      v7 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", source state dimension is ", 28);
      std::ostream::operator<<();
    }
    else if (v2 == *(_DWORD *)(*(_QWORD *)(this + 176) + 8))
    {
      v3 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(this + 192));
      v4 = *(_QWORD *)(v1 + 184);
      if (v3 == *(_DWORD *)(v4 + 8))
      {
        if (*(_DWORD *)(*(_QWORD *)(v1 + 176) + 12) == *(_DWORD *)(v4 + 12))
        {
          v5 = *(_DWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 8) + *(_DWORD *)(v1 + 8);
          if (v5 == kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(v1 + 192)))
          {
            v6 = *(_DWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 12);
            this = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(v1 + 192));
            if (v6 == (_DWORD)this)
            {
              *(_BYTE *)(v1 + 668) = 1;
              return this;
            }
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"the internal network has output dim ", 36);
            kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(v1 + 192));
            v15 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" , but the component has output dim ", 36);
            std::ostream::operator<<();
          }
          else
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"the internal network takes input dimension ", 43);
            kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(v1 + 192));
            v11 = (_QWORD *)std::ostream::operator<<();
            v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" , that is not equal the sum of ", 32);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"source vector dimension ", 24);
            v13 = (_QWORD *)std::ostream::operator<<();
            v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" and ", 5);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"target input network dim ", 25);
            std::ostream::operator<<();
          }
        }
        else
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"the source and target dot transform has different output dim ", 61);
          v10 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" vs ", 4);
          std::ostream::operator<<();
        }
      }
      else
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"the internal recurrent network has output dim ", 46);
        kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(v1 + 192));
        v9 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" , but the target dot transform has input dim ", 46);
        std::ostream::operator<<();
      }
    }
    else
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"source state dimension is ", 26);
      v8 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" , but the source dot transform has input dim ", 46);
      std::ostream::operator<<();
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  return this;
}

uint64_t `non-virtual thunk to'kaldi::nnet1::GlobalRecurrentAttention::Check(kaldi::nnet1::GlobalRecurrentAttention *this)
{
  return kaldi::nnet1::GlobalRecurrentAttention::Check((uint64_t)this - 16);
}

uint64_t TLocaleInfo::composeCharacter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int *v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;

  if ((int)a3 < 768)
  {
LABEL_2:
    if (a3 == 3634 && (_DWORD)a2 == 3661)
      return 3635;
    else
      return 0;
  }
  if (a3 >= 0x370)
  {
    if (a3 > 0xE30)
    {
      if (a3 > 0xE4E)
        goto LABEL_2;
      if (a3 > 0xE33)
      {
        if (a3 - 3655 >= 0xFFFFFFF4)
          goto LABEL_2;
      }
      else if (a3 != 3633)
      {
        goto LABEL_2;
      }
    }
    else
    {
      if (a3 == 1600)
        return a2;
      if (a3 < 0x64B)
        goto LABEL_2;
      if (a3 < 0x660 || (a3 & 0xFFFFFFFB) == 0x670)
        return a2;
      if (a3 != 2364 || *(_QWORD *)(a1 + 72) <= 3uLL)
        goto LABEL_2;
      if ((a2 - 2356) >= 0xFFFFFFE1)
        return s_szTableNuktaComposition0915to0933[(a2 - 2325)];
    }
    return 0;
  }
  if (a3 > 0x345)
    return 0;
  v4 = (int *)*(&s_szTableCharacterComposition0300to0345 + a3 - 768);
  if (!v4)
    return 0;
  v5 = *v4 - 1;
  if (*v4 < 1)
    return 0;
  if (*v4 == 1)
  {
    v6 = 0;
LABEL_36:
    if (*(int *)((char *)v4 + ((4 * v6) | 4)) == (_DWORD)a2)
      return v4[v6 + 2];
    return 0;
  }
  v7 = 0;
  while (1)
  {
    v8 = (v5 + v7) | 1;
    v9 = v4[v8];
    if (v9 == (_DWORD)a2)
      return v4[v8 + 1];
    v10 = (v5 + v7) / 2;
    if (v9 >= (int)a2)
      v5 = v10 - 1;
    else
      v7 = v10 + 1;
    if (v7 >= v5)
    {
      v6 = 2 * v7;
      goto LABEL_36;
    }
  }
}

uint64_t TLocaleInfo::splitDiacritic(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;

  if ((int)a2 <= 191)
  {
    if (a2 == 105 && *(_BYTE *)(a1 + 80))
      return 0x30700000131;
    return a2;
  }
  if (a2 <= 0x233)
    return s_szTableBaseCharacter00C0to0233[a2 - 192] | ((unint64_t)s_szTableDiacritic00C0to0233[a2 - 192] << 32);
  v3 = a2 - 902;
  if (a2 < 0x386)
    return a2;
  if (a2 <= 0x3D4)
  {
    v4 = (unsigned int *)&s_szTableBaseCharacter0386to03D4;
    v5 = (unsigned int *)&s_szTableDiacritic0386to03D4;
    return v4[v3] | ((unint64_t)v5[v3] << 32);
  }
  v3 = a2 - 1024;
  if (a2 < 0x400)
    return a2;
  if (a2 <= 0x4F9)
  {
    v4 = (unsigned int *)&s_szTableBaseCharacter0400to04F9;
    v5 = (unsigned int *)&s_szTableDiacritic0400to04F9;
    return v4[v3] | ((unint64_t)v5[v3] << 32);
  }
  v6 = a2 - 2345;
  if (a2 < 0x929)
    return a2;
  if (a2 > 0x95F)
  {
    v3 = a2 - 7680;
    if (a2 - 7680 <= 0x1FC)
    {
      v4 = (unsigned int *)&s_szTableBaseCharacter1E00to1FFC;
      v5 = (unsigned int *)&s_szTableDiacritic1E00to1FFC;
      return v4[v3] | ((unint64_t)v5[v3] << 32);
    }
    return a2;
  }
  if (a2 < 0x958)
  {
    if (v6 <= 0xB && ((1 << v6) & 0x901) != 0)
    {
      v7 = a2 - 1;
      return v7 | 0x93C00000000;
    }
    return a2;
  }
  v7 = s_szTableNuktaBaseCharacter0958to095F[a2 - 2392];
  return v7 | 0x93C00000000;
}

unint64_t TLocaleInfo::decomposeCharacter(uint64_t a1, int a2, uint64_t *a3)
{
  unsigned int v4;
  unint64_t v6;
  unint64_t result;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  int *v14;
  int v15;
  int v16;
  int v17;

  v4 = a2;
  v6 = a3[2];
  v16 = a2;
  TBuffer<wchar_t>::insert((uint64_t)a3, v6, &v16, 1uLL);
  result = TLocaleInfo::splitDiacritic(a1, v4);
  if (v4)
  {
    v8 = HIDWORD(result);
    if (HIDWORD(result))
    {
      if (HIDWORD(result) != v4)
      {
        LODWORD(v9) = 0;
        do
        {
          v10 = v4;
          v4 = result;
          v17 = v8;
          TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v17, 1uLL);
          result = TLocaleInfo::splitDiacritic(a1, v4);
          v9 = (v9 + 1);
          if (v10 == v4)
            break;
          v8 = HIDWORD(result);
          if (!HIDWORD(result))
            break;
        }
        while (v4 != HIDWORD(result));
        if ((_DWORD)v9)
        {
          v11 = *a3;
          if ((_DWORD)v9 != 1)
          {
            v12 = v9 >> 1;
            v13 = (int *)(v11 + 4 * v6 + 4);
            v14 = (int *)(v11 + 4 * (v6 + v9));
            do
            {
              v15 = *v13;
              *v13++ = *v14;
              *v14-- = v15;
              --v12;
            }
            while (v12);
          }
          *(_DWORD *)(v11 + 4 * v6) = v4;
        }
      }
    }
  }
  return result;
}

uint64_t TLocaleInfo::removeDiacritics(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  do
  {
    v3 = a2;
    a2 = TLocaleInfo::splitDiacritic(a1, a2);
  }
  while ((_DWORD)v3 != (_DWORD)a2);
  return v3;
}

uint64_t TLocaleInfo::isKtivMenukad(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;
  uint64_t result;
  unsigned int v5;

  while (1)
  {
    v2 = *a2;
    if ((int)*a2 <= 8202)
    {
      if (v2 == 32 || v2 == 160)
        goto LABEL_21;
      if (!v2)
        return 0;
    }
    else
    {
      if (v2 == 8203)
        goto LABEL_21;
      if (v2 == 12288 || v2 == 65279)
        goto LABEL_21;
    }
    if ((int)v2 < 1425)
      return 0;
    if (v2 < 0x5F5)
      break;
    if (v2 - 64285 >= 0x33)
      return 0;
    result = 1;
    if (v2 >> 5 < 0x7D9 || v2 - 64298 < 0x25)
      return result;
LABEL_21:
    ++a2;
  }
  if (v2 >= 0x5AF)
  {
    if (v2 <= 0x5C7)
    {
      result = 1;
      v5 = v2 - 1470;
      if (v5 > 8 || ((1 << v5) & 0x125) == 0)
        return result;
    }
    goto LABEL_21;
  }
  return 1;
}

uint64_t TLocaleInfo::ktivMenukadToKtivMaleh(uint64_t a1, int *a2, _QWORD *a3)
{
  unint64_t v5;
  char v6;
  int v7;
  BOOL v8;
  unint64_t v9;
  __int32 v10;
  int32x4_t v11;
  unsigned int v12;
  int32x4_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v19;

  v5 = a3[2];
  v6 = 1;
  while (1)
  {
    v7 = *a2;
    if (*a2 <= 8202)
    {
      if (v7 == 32 || v7 == 160)
        goto LABEL_11;
      if (!v7)
        goto LABEL_78;
    }
    else
    {
      v8 = v7 == 8203 || v7 == 65279;
      if (v8 || v7 == 12288)
      {
LABEL_11:
        v19 = *a2;
        v6 = 1;
        TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v19, 1uLL);
        goto LABEL_12;
      }
    }
    if (v7 < 1425)
      goto LABEL_78;
    if (v7 >= 0x5F5)
      break;
    if (v7 >= 0x5AF)
    {
      if (v7 > 0x5C7)
        goto LABEL_23;
      if ((v7 & 0xFFFFFFFE) == 0x5BA)
      {
        v9 = a3[2];
        if (v9 <= v5 || *(_DWORD *)(*a3 + 4 * v9 - 4) == 1493)
          goto LABEL_73;
LABEL_49:
        v19 = 1493;
LABEL_72:
        TBuffer<wchar_t>::insert((uint64_t)a3, v9, &v19, 1uLL);
        goto LABEL_73;
      }
      v6 = 0;
      if ((v7 - 1460) > 0x12)
        goto LABEL_12;
      if (((1 << (v7 + 76)) & 0x49400) != 0)
        goto LABEL_52;
      if (v7 != 1460)
        goto LABEL_12;
      v9 = a3[2];
      if (v9 > v5 && *(_DWORD *)(*a3 + 4 * v9 - 4) != 1497)
      {
        v15 = a2[1];
        if (!v15 || v15 != 1456 && a2[2] != 1456)
          goto LABEL_44;
      }
    }
LABEL_73:
    v6 = 0;
LABEL_12:
    ++a2;
  }
  if ((v7 - 64285) < 0x33)
  {
LABEL_23:
    if (v7 > 64284)
    {
      if (v7 <= 64286)
      {
        if (v7 != 64285)
          goto LABEL_73;
        goto LABEL_42;
      }
      if (v7 == 64287)
        goto LABEL_45;
      if (v7 == 64313)
      {
LABEL_42:
        v9 = a3[2];
        if (!(v6 & 1 | (v9 <= v5)))
        {
          v10 = *(_DWORD *)(*a3 + 4 * v9 - 4);
          v11.i32[0] = v10 & 0xFFFFFFFB;
          v11.i32[1] = v10;
          v11.i32[2] = v10;
          v11.i32[3] = v10 & 0xFFFFFFFD;
          v12 = a2[1];
          v13 = vdupq_n_s32(v12);
          if ((vmaxvq_u8((uint8x16_t)vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v11, (int32x4_t)xmmword_1AE174420), (int16x8_t)vceqq_s32(v13, (int32x4_t)xmmword_1AE174410)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqq_s32(v13, (int32x4_t)xmmword_1AE174430), (int16x8_t)vceqq_s32(v13, (int32x4_t)xmmword_1AE174440)))) & 1) == 0&& v12 != 64309&& v12 != 64313)
          {
            v19 = 1497;
            TBuffer<wchar_t>::insert((uint64_t)a3, v9, &v19, 1uLL);
            v9 = a3[2];
          }
        }
LABEL_44:
        v19 = 1497;
        goto LABEL_72;
      }
      if (v7 != 64309)
        goto LABEL_39;
    }
    else
    {
      if (v7 > 1519)
      {
        if (v7 == 1520)
        {
LABEL_69:
          v14 = 1493;
          v19 = 1493;
          TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v19, 1uLL);
          goto LABEL_70;
        }
        if (v7 == 1521)
        {
          v19 = 1493;
          TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v19, 1uLL);
          v19 = 1497;
LABEL_71:
          v9 = a3[2];
          goto LABEL_72;
        }
        if (v7 != 1522)
        {
LABEL_39:
          if (v7 >= 0xFB2A)
          {
            if (v7 > 0xFB2D)
            {
              if (v7 > 0xFB30)
              {
                if (v7 > 0xFB4A)
                {
                  switch(v7)
                  {
                    case 64331:
                      goto LABEL_69;
                    case 64332:
                      v7 = 1489;
                      goto LABEL_52;
                    case 64333:
                      v7 = 1499;
                      goto LABEL_52;
                    case 64334:
                      v7 = 1492;
                      goto LABEL_52;
                    case 64335:
                      v19 = 1488;
                      TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v19, 1uLL);
                      v7 = 1500;
                      goto LABEL_52;
                    default:
                      goto LABEL_52;
                  }
                }
                v7 -= 62816;
              }
              else
              {
                v7 = 1488;
              }
            }
            else
            {
              v7 = 1513;
            }
          }
LABEL_52:
          v19 = v7;
          goto LABEL_71;
        }
LABEL_45:
        v14 = 1497;
        v19 = 1497;
        TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], &v19, 1uLL);
LABEL_70:
        v19 = v14;
        goto LABEL_71;
      }
      if (v7 != 1493)
      {
        if (v7 != 1497)
          goto LABEL_39;
        goto LABEL_42;
      }
    }
    v9 = a3[2];
    if (!(v6 & 1 | (v9 <= v5)) && *(_DWORD *)(*a3 + 4 * v9 - 4) != 1493)
    {
      v19 = 1493;
      TBuffer<wchar_t>::insert((uint64_t)a3, v9, &v19, 1uLL);
      v9 = a3[2];
    }
    goto LABEL_49;
  }
LABEL_78:
  v16 = 0;
  while (a2[v16++])
    ;
  return TBuffer<wchar_t>::insert((uint64_t)a3, a3[2], a2, v16 - 1);
}

uint64_t TLocaleInfo::getDigitExtended(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t result;
  unsigned int v5;
  int v6;
  unsigned int v7;

  if ((int)a2 >= 65296)
  {
    v2 = a2 - 65296;
    v3 = a2 >= 0xFF1A;
    goto LABEL_3;
  }
  result = a2 - 1632;
  if ((int)a2 < 1632)
    return 0xFFFFFFFFLL;
  if (a2 <= 0x669)
    return result;
  result = a2 - 1776;
  if (a2 < 0x6F0)
    return 0xFFFFFFFFLL;
  if (a2 <= 0x6F9)
    return result;
  result = a2 - 1984;
  if (a2 < 0x7C0)
    return 0xFFFFFFFFLL;
  if (a2 <= 0x7C9)
    return result;
  result = a2 - 2406;
  if (a2 < 0x966)
    return 0xFFFFFFFFLL;
  if (a2 <= 0x96F)
    return result;
  result = a2 - 2534;
  if (a2 < 0x9E6)
    return 0xFFFFFFFFLL;
  if (a2 <= 0x9EF)
    return result;
  result = a2 - 2662;
  if (a2 < 0xA66)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xA6F)
    return result;
  result = a2 - 2790;
  if (a2 < 0xAE6)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xAEF)
    return result;
  result = a2 - 2918;
  if (a2 < 0xB66)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xB6F)
    return result;
  result = a2 - 3046;
  if (a2 < 0xBE6)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xBEF)
    return result;
  result = a2 - 3174;
  if (a2 < 0xC66)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xC6F)
    return result;
  result = a2 - 3302;
  if (a2 < 0xCE6)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xCEF)
    return result;
  result = a2 - 3430;
  if (a2 < 0xD66)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xD6F)
    return result;
  result = a2 - 3664;
  if (a2 < 0xE50)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xE59)
    return result;
  result = a2 - 3792;
  if (a2 < 0xED0)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xED9)
    return result;
  result = a2 - 3872;
  if (a2 < 0xF20)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xF29)
    return result;
  if (a2 >> 6 < 0x41)
    return 0xFFFFFFFFLL;
  v5 = a2 >> 1;
  if (a2 >> 1 <= 0x824)
  {
    v6 = -4160;
    return a2 + v6;
  }
  v7 = a2 >> 4;
  if (a2 >> 4 < 0x109)
    return 0xFFFFFFFFLL;
  if (v5 <= 0x84C)
  {
    v6 = -4240;
    return a2 + v6;
  }
  if (a2 < 0x1369)
    return 0xFFFFFFFFLL;
  if (v5 <= 0x9B8)
  {
    v6 = -4968;
    return a2 + v6;
  }
  if (a2 >> 5 < 0xBF)
    return 0xFFFFFFFFLL;
  if (v5 <= 0xBF4)
  {
    v6 = -6112;
    return a2 + v6;
  }
  if (v7 < 0x181)
    return 0xFFFFFFFFLL;
  if (v5 <= 0xC0C)
  {
    v6 = -6160;
    return a2 + v6;
  }
  if (v5 < 0xCA3)
    return 0xFFFFFFFFLL;
  if (v7 <= 0x194)
  {
    v6 = -6470;
    return a2 + v6;
  }
  if (v7 < 0x19D)
    return 0xFFFFFFFFLL;
  if (v5 <= 0xCEC)
  {
    v6 = -6608;
    return a2 + v6;
  }
  if (a2 == 6618)
    return 1;
  if (a2 >> 7 < 0x35)
    return 0xFFFFFFFFLL;
  if (v5 <= 0xD44)
  {
    v6 = -6784;
    return a2 + v6;
  }
  if (v7 < 0x1A9)
    return 0xFFFFFFFFLL;
  if (v5 <= 0xD4C)
  {
    v6 = -6800;
    return a2 + v6;
  }
  if (v7 < 0x1B5)
    return 0xFFFFFFFFLL;
  if (v5 <= 0xDAC)
  {
    v6 = -6992;
    return a2 + v6;
  }
  if (v7 < 0x1BB)
    return 0xFFFFFFFFLL;
  if (v5 <= 0xDDC)
  {
    v6 = -7088;
    return a2 + v6;
  }
  if (a2 >> 6 < 0x71)
    return 0xFFFFFFFFLL;
  if (v5 <= 0xE24)
  {
    v6 = -7232;
    return a2 + v6;
  }
  if (v7 < 0x1C5)
    return 0xFFFFFFFFLL;
  if (v5 <= 0xE2C)
  {
    v6 = -7248;
    return a2 + v6;
  }
  if (a2 >> 5 < 0x531)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xA629)
  {
    v6 = -42528;
    return a2 + v6;
  }
  if (v7 < 0xA8D)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xA8D9)
  {
    v6 = -43216;
    return a2 + v6;
  }
  if (a2 >> 8 < 0xA9)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xA909)
  {
    v6 = -43264;
    return a2 + v6;
  }
  if (v7 < 0xA9D)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xA9D9)
  {
    v6 = -43472;
    return a2 + v6;
  }
  if (v7 < 0xAA5)
    return 0xFFFFFFFFLL;
  if (a2 <= 0xAA59)
  {
    v6 = -43600;
    return a2 + v6;
  }
  v2 = a2 - 44016;
  v3 = a2 - 44016 >= 0xA;
LABEL_3:
  if (v3)
    return 0xFFFFFFFFLL;
  else
    return v2;
}

uint64_t TLocaleInfo::stringToUInt(uint64_t DigitExtended, unsigned int *a2, unsigned int **a3)
{
  unsigned int *v4;
  unsigned int *i;
  signed int v6;
  uint64_t v9;
  unsigned int v10;
  int v11;

  v4 = a2;
  for (i = a2 + 1; ; ++i)
  {
    v6 = *(i - 1);
    if (v6 > 159)
      break;
    if (v6 > 0x20 || ((1 << v6) & 0x100002600) == 0)
      goto LABEL_18;
LABEL_17:
    ;
  }
  if (v6 >= 12288)
  {
    if (v6 != 65279 && v6 != 12288)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (v6 == 160 || v6 == 8203)
    goto LABEL_17;
LABEL_18:
  v9 = (v6 - 48);
  if (v6 < 48
    || v6 > 0x39
    && (v6 < 0x660
     || (DigitExtended = TLocaleInfo::getDigitExtended(DigitExtended, v6),
         v9 = DigitExtended,
         (_DWORD)DigitExtended == -1)))
  {
    v9 = 0;
  }
  else
  {
    v10 = *i;
    if ((int)*i >= 48)
    {
      v4 = i;
      while (1)
      {
        if (v10 > 0x39)
        {
          if (v10 < 0x660)
            goto LABEL_31;
          DigitExtended = TLocaleInfo::getDigitExtended(DigitExtended, v10);
          if ((_DWORD)DigitExtended == -1)
            goto LABEL_31;
        }
        else
        {
          DigitExtended = v10 - 48;
        }
        v9 = (DigitExtended + 10 * v9);
        v11 = v4[1];
        ++v4;
        v10 = v11;
        if (v11 <= 47)
          goto LABEL_31;
      }
    }
    v4 = i;
  }
LABEL_31:
  *a3 = v4;
  return v9;
}

uint64_t TLocaleInfo::stringToUInt(uint64_t a1, unsigned int *a2, BOOL *a3)
{
  uint64_t result;
  unsigned int *v6;
  int v7;
  unsigned int *v10;

  v10 = 0;
  LODWORD(result) = TLocaleInfo::stringToInt(a1, a2, &v10);
  v6 = v10;
  if (v10 == a2)
  {
    result = 0;
    *a3 = 1;
    return result;
  }
  while (1)
  {
    v7 = *v6;
    if ((int)*v6 > 159)
      break;
    if (v7 > 0x20 || ((1 << v7) & 0x100002600) == 0)
      goto LABEL_18;
LABEL_17:
    ++v6;
  }
  if (v7 >= 12288)
  {
    if (v7 != 65279 && v7 != 12288)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (v7 == 160 || v7 == 8203)
    goto LABEL_17;
LABEL_18:
  *a3 = v7 != 0;
  if (v7)
    return 0;
  else
    return result;
}

uint64_t TLocaleInfo::stringToInt(uint64_t DigitExtended, unsigned int *a2, unsigned int **a3)
{
  unsigned int *i;
  int v6;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  int v12;
  int v13;
  uint64_t result;

  for (i = a2 + 1; ; ++i)
  {
    v6 = *(i - 1);
    if (v6 <= 159)
      break;
    if (v6 >= 12288)
    {
      if (v6 != 65279 && v6 != 12288)
        goto LABEL_17;
    }
    else if (v6 != 160 && v6 != 8203)
    {
      goto LABEL_17;
    }
LABEL_14:
    ;
  }
  if (v6 > 0x2D)
    goto LABEL_17;
  if (((1 << v6) & 0x100002600) != 0)
    goto LABEL_14;
  if (((1 << v6) & 0x280000000000) != 0)
  {
    v8 = *i;
    goto LABEL_18;
  }
LABEL_17:
  --i;
  v8 = v6;
  v6 = 0;
LABEL_18:
  v9 = v8 - 48;
  if ((int)v8 < 48
    || v8 > 0x39
    && (v8 < 0x660
     || (DigitExtended = TLocaleInfo::getDigitExtended(DigitExtended, v8),
         v9 = DigitExtended,
         (_DWORD)DigitExtended == -1)))
  {
    result = 0;
    *a3 = a2;
  }
  else
  {
    v12 = i[1];
    v11 = i + 1;
    v10 = v12;
    if (v12 >= 48)
    {
      do
      {
        if (v10 > 0x39)
        {
          if (v10 < 0x660)
            break;
          DigitExtended = TLocaleInfo::getDigitExtended(DigitExtended, v10);
          if ((_DWORD)DigitExtended == -1)
            break;
        }
        else
        {
          DigitExtended = v10 - 48;
        }
        v9 = DigitExtended + 10 * v9;
        v13 = v11[1];
        ++v11;
        v10 = v13;
      }
      while (v13 > 47);
    }
    *a3 = v11;
    if (v6 == 45)
      return -v9;
    else
      return v9;
  }
  return result;
}

BOOL TLocaleInfo::stringToBool(uint64_t DigitExtended, uint64_t a2, _QWORD *a3)
{
  unsigned int *i;
  signed int v6;
  unsigned int v9;
  unsigned int v10;
  _BOOL8 result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  signed int *v15;

  for (i = (unsigned int *)(a2 + 4); ; ++i)
  {
    v6 = *(i - 1);
    if (v6 > 159)
      break;
    if (v6 > 0x20 || ((1 << v6) & 0x100002600) == 0)
      goto LABEL_18;
LABEL_17:
    ;
  }
  if (v6 >= 12288)
  {
    if (v6 != 65279 && v6 != 12288)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (v6 == 160 || v6 == 8203)
    goto LABEL_17;
LABEL_18:
  *a3 = i - 1;
  v9 = v6 - 48;
  if (v6 < 48
    || v6 > 0x39
    && (v6 < 0x660
     || (DigitExtended = TLocaleInfo::getDigitExtended(DigitExtended, v6),
         v9 = DigitExtended,
         (_DWORD)DigitExtended == -1)))
  {
    v12 = wcsncasecmp((const __int32 *)i - 1, dword_1AE176B44, 4uLL);
    v13 = *a3;
    if ((_DWORD)v12 || (TLocaleInfo::isAlpha(v12, *(_DWORD *)(v13 + 16)) & 1) != 0)
    {
      v14 = wcsncasecmp((const __int32 *)v13, dword_1AE176B58, 5uLL);
      if ((_DWORD)v14)
        goto LABEL_32;
      v15 = (signed int *)(*a3 + 20);
      if ((TLocaleInfo::isAlpha(v14, *v15) & 1) != 0)
        goto LABEL_32;
      result = 0;
      *a3 = v15;
    }
    else
    {
      *a3 = v13 + 16;
      return 1;
    }
  }
  else
  {
    if (v9 <= 1)
    {
      v10 = *i;
      if ((int)*i < 48
        || v10 >= 0x3A && (v10 < 0x660 || TLocaleInfo::getDigitExtended(DigitExtended, v10) == -1))
      {
        *a3 = i;
        return v9 != 0;
      }
    }
LABEL_32:
    result = 0;
    *a3 = a2;
  }
  return result;
}

uint64_t TLocaleInfo::isAlpha(uint64_t a1, signed int a2)
{
  uint64_t result;
  uint64_t v3;
  _DWORD *v4;
  _BOOL4 v5;
  unsigned int v6;
  _BOOL4 v7;
  _BOOL4 v9;
  _BOOL4 v11;
  _BOOL4 v13;
  _BOOL4 v15;
  unsigned int v16;

  result = 0;
  if (BYTE1(a2) <= 0x1Du)
  {
    switch(BYTE1(a2))
    {
      case 0:
        v11 = (a2 & 0xFFFFFFC0) == 0xC0 && (a2 & 0xFFFFFFDF) != 215;
        return (a2 & 0xFFFFFFDF) - 65 < 0x1A || v11;
      case 1:
        v3 = a2 - 256;
        if (s_szTableLowercase0100to024F[v3] != a2)
          return 1;
        v4 = s_szTableUppercase0100to0292;
        return v4[v3] != a2;
      case 2:
        if (a2 > 658)
          return 0;
        v3 = a2 - 256;
        if (s_szTableUppercase0100to0292[v3] != a2)
          return 1;
        if (a2 > 591)
          return 0;
        v4 = s_szTableLowercase0100to024F;
        break;
      case 3:
        v3 = (a2 - 880);
        if (a2 < 880)
          return 0;
        if (s_szTableLowercase0370to03FF[v3] != a2)
          return 1;
        v4 = &s_szTableUppercase0370to03FF;
        return v4[v3] != a2;
      case 4:
      case 5:
        result = 1;
        if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1AE174480, (uint32x4_t)vaddq_s32(vdupq_n_s32(a2), (int32x4_t)xmmword_1AE174470)))) & 1) == 0)
        {
          v5 = (a2 - 1329) < 0x26 || (a2 - 1377) < 0x26;
          if (a2 == 1231)
            v5 = 1;
          v6 = a2 == 1216 || v5;
          if ((a2 - 1024) >= 0x60)
            return v6;
          else
            return 1;
        }
        return result;
      case 0x10:
        return (a2 - 4256) < 0x26;
      default:
        return result;
    }
    return v4[v3] != a2;
  }
  if (BYTE1(a2) > 0x2Cu)
  {
    if (BYTE1(a2) <= 0xA6u)
    {
      v7 = (a2 - 42560) < 0x2E || (a2 - 42624) < 0x18;
      if (BYTE1(a2) != 166)
        v7 = 0;
      if (BYTE1(a2) == 45)
        return a2 < 11558;
      else
        return v7;
    }
    if (BYTE1(a2) != 167)
    {
      v9 = (a2 - 65313) < 0x1A || (a2 - 65345) < 0x1A;
      return BYTE1(a2) == 255 && v9;
    }
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1AE174460, (uint32x4_t)vaddq_s32(vdupq_n_s32(a2), (int32x4_t)xmmword_1AE174450)))) & 1) == 0)
    {
      if ((a2 - 42877) >= 0x10)
        return 0;
      else
        return (0xC001u >> (a2 - 125)) & 1;
    }
    return 1;
  }
  if (BYTE1(a2) > 0x20u)
  {
    if (BYTE1(a2) == 33)
    {
      result = 1;
      if ((a2 - 8526) > 0x36 || ((1 << (a2 - 78)) & 0x60000000000001) == 0)
        return a2 == 8498;
      return result;
    }
    if (BYTE1(a2) != 44)
      return result;
    if (a2 >> 5 != 355)
    {
      v15 = a2 != 11311 && (a2 - 11264) < 0x5F;
      v16 = (a2 - 11499) < 4 || v15;
      if ((a2 - 11392) >= 0xF)
        return v16;
      else
        return 1;
    }
    v3 = (a2 - 11360);
    if (s_szTableLowercase2C60to2C7F[v3] == a2)
    {
      v4 = &s_szTableUppercase2C60to2C76;
      return v4[v3] != a2;
    }
    return 1;
  }
  if (BYTE1(a2) == 30)
  {
    v13 = a2 == 7838 || a2 == 7835;
    return (a2 - 7840) < 0xFFFFFFF6 || v13;
  }
  else if (BYTE1(a2) == 31)
  {
    if (a2 > 8188)
      return 0;
    v3 = a2 - 7936;
    if (s_szTableLowercase1F00to1FFC[v3] == a2)
    {
      if (a2 <= 8179)
      {
        v4 = &s_szTableUppercase1F00to1FF3;
        return v4[v3] != a2;
      }
      return 0;
    }
    return 1;
  }
  return result;
}

uint64_t TLocaleInfo::stringToBool(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t result;
  int *v6;
  int v7;
  int *v10;

  v10 = 0;
  LODWORD(result) = TLocaleInfo::stringToBool(a1, a2, &v10);
  v6 = v10;
  if (v10 == (int *)a2)
  {
    result = 0;
    *a3 = 1;
    return result;
  }
  while (1)
  {
    v7 = *v6;
    if (*v6 > 159)
      break;
    if (v7 > 0x20 || ((1 << v7) & 0x100002600) == 0)
      goto LABEL_18;
LABEL_17:
    ++v6;
  }
  if (v7 >= 12288)
  {
    if (v7 != 65279 && v7 != 12288)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (v7 == 160 || v7 == 8203)
    goto LABEL_17;
LABEL_18:
  *a3 = v7 != 0;
  if (v7)
    return 0;
  else
    return result;
}

uint64_t TLocaleInfo::toNarrow(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v3;

  if ((_DWORD)a2 == 12288)
    return 32;
  result = a2;
  if ((int)a2 >= 65281)
  {
    if (a2 > 0xFF5E)
    {
      switch((int)a2)
      {
        case 65504:
          result = 162;
          break;
        case 65505:
          result = 163;
          break;
        case 65506:
          result = 172;
          break;
        case 65507:
          result = 175;
          break;
        case 65508:
          result = 166;
          break;
        case 65509:
          result = 165;
          break;
        case 65510:
          result = 8361;
          break;
        default:
          if ((_DWORD)a2 == 65376)
            v3 = 10630;
          else
            v3 = a2;
          if ((_DWORD)a2 == 65375)
            result = 10629;
          else
            result = v3;
          break;
      }
    }
    else
    {
      return (a2 - 65248);
    }
  }
  return result;
}

uint64_t TLocaleInfo::normalizeWidth(uint64_t a1, uint64_t a2)
{
  if ((a2 - 65377) > 0x7B)
    return TLocaleInfo::toNarrow(a1, a2);
  else
    return s_szTableNormalizeWidthFF61toFFDC[(a2 - 65377)];
}

uint64_t TLocaleInfo::isUpper(uint64_t a1, int a2)
{
  uint64_t result;
  _BOOL4 v4;
  _BOOL4 v5;
  BOOL v6;
  _BOOL4 v9;
  int v10;
  int v11;
  _DWORD *v12;
  _BOOL4 v13;
  _BOOL4 v14;

  result = 0;
  if (BYTE1(a2) > 0x1Du)
  {
    if (BYTE1(a2) <= 0x2Bu)
    {
      if (BYTE1(a2) == 30)
      {
        if (a2 >> 5 >= 0xF5)
          v13 = (a2 & 1) == 0;
        else
          v13 = a2 == 7838;
        if (a2 <= 7829)
          return (a2 & 1) == 0;
        else
          return v13;
      }
      if (BYTE1(a2) != 31)
      {
        v5 = a2 == 8498 || a2 == 8579;
        v6 = BYTE1(a2) == 33;
        return v6 && v5;
      }
      if (a2 > 8188)
        return 0;
      v10 = s_szTableLowercase1F00to1FFC[a2 - 7936];
      return v10 != a2;
    }
    if (BYTE1(a2) <= 0xA6u)
    {
      if (BYTE1(a2) != 44)
      {
        v4 = (a2 - 42624) <= 0x17 && (a2 & 1) == 0;
        if ((a2 - 42560) <= 0x2D)
          v5 = (a2 & 1) == 0;
        else
          v5 = v4;
        v6 = BYTE1(a2) == 166;
        return v6 && v5;
      }
      if (a2 >> 5 != 355)
      {
        if ((a2 - 11499) <= 3)
          v14 = (a2 & 1) == 0;
        else
          v14 = (a2 - 11264) < 0x2F;
        if ((a2 - 11392) <= 0xE)
          return (a2 & 1) == 0;
        else
          return v14;
      }
      v11 = a2 - 11360;
      v12 = s_szTableLowercase2C60to2C7F;
LABEL_50:
      v10 = v12[v11];
      return v10 != a2;
    }
    if (BYTE1(a2) != 167)
    {
      v5 = (a2 - 65313) < 0x1A;
      v6 = BYTE1(a2) == 255;
      return v6 && v5;
    }
    if ((a2 - 42786) > 0xD && (a2 - 42802) > 0x3D)
    {
      if ((a2 - 42873) <= 3)
        return (a2 & 1) == 0;
      if ((a2 - 42878) > 9)
        return a2 == 42877 || a2 == 42891;
    }
    return a2 & 1;
  }
  switch(BYTE1(a2))
  {
    case 0:
      v9 = a2 != 215 && (a2 - 192) < 0x1F;
      return (a2 - 65) < 0x1A || v9;
    case 1:
      goto LABEL_44;
    case 2:
      if (a2 > 591)
        return 0;
LABEL_44:
      v10 = s_szTableLowercase0100to024F[a2 - 256];
      return v10 != a2;
    case 3:
      v11 = a2 - 880;
      if (a2 < 880)
        return 0;
      v12 = s_szTableLowercase0370to03FF;
      goto LABEL_50;
    case 4:
    case 5:
      if ((a2 - 1120) <= 0x21 || (a2 - 1162) <= 0x35)
        return (a2 & 1) == 0;
      if ((a2 - 1217) <= 0xD)
        return a2 & 1;
      if ((a2 - 1232) <= 0x55)
        return (a2 & 1) == 0;
      result = 1;
      if (a2 != 1216)
        result = (a2 - 1024) < 0x30 || (a2 - 1329) < 0x26;
      break;
    case 0x10:
      return (a2 - 4256) < 0x26;
    default:
      return result;
  }
  return result;
}

uint64_t TLocaleInfo::isLower(uint64_t a1, int a2)
{
  uint64_t result;
  BOOL v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD *v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  int v11;
  _BOOL4 v14;

  if (BYTE1(a2) <= 0x1Eu)
  {
    switch(BYTE1(a2))
    {
      case 0:
        v14 = a2 != 247 && (a2 - 223) < 0x21;
        return (a2 - 97) < 0x1A || v14;
      case 1:
        goto LABEL_41;
      case 2:
        if (a2 > 658)
          return 0;
LABEL_41:
        v11 = s_szTableUppercase0100to0292[a2 - 256];
        return v11 != a2;
      case 3:
        v6 = a2 - 880;
        if (a2 < 880)
          return 0;
        v7 = &s_szTableUppercase0370to03FF;
        goto LABEL_57;
      case 4:
      case 5:
        if ((a2 - 1120) <= 0x21 || (a2 - 1162) <= 0x35)
          return a2 & 1;
        if ((a2 - 1217) <= 0xD)
          return (a2 & 1) == 0;
        if ((a2 - 1232) <= 0x55)
          return a2 & 1;
        result = 1;
        if (a2 == 1231 || (a2 - 1072) < 0x30)
          return result;
        v3 = (a2 - 1377) >= 0x26;
        break;
      default:
        if (a2 >> 5 >= 0xF5)
          v10 = a2 & 1;
        else
          v10 = a2 == 7835;
        if (a2 <= 7829)
          v8 = a2 & 1;
        else
          v8 = v10;
        v9 = BYTE1(a2) == 30;
        goto LABEL_37;
    }
    return !v3;
  }
  if (BYTE1(a2) <= 0x2Cu)
  {
    switch(BYTE1(a2))
    {
      case 0x1Fu:
        if (a2 <= 8179)
        {
          v11 = s_szTableUppercase1F00to1FF3[a2 - 7936];
          return v11 != a2;
        }
        break;
      case 0x21u:
        return a2 == 8526 || a2 == 8580;
      case 0x2Cu:
        v6 = a2 - 11360;
        if ((a2 - 11360) > 0x16)
        {
          if ((a2 - 11392) > 0xE && (a2 - 11499) > 3)
          {
            v3 = (a2 - 11312) >= 0x2F;
            return !v3;
          }
          return a2 & 1;
        }
        v7 = &s_szTableUppercase2C60to2C76;
LABEL_57:
        v11 = v7[v6];
        return v11 != a2;
    }
    return 0;
  }
  if (BYTE1(a2) > 0xA6u)
  {
    if (BYTE1(a2) != 167)
    {
      v8 = (a2 - 65345) < 0x1A;
      v9 = BYTE1(a2) == 255;
LABEL_37:
      if (v9)
        return v8;
      else
        return 0;
    }
    if ((a2 - 42786) > 0xD && (a2 - 42802) > 0x3D)
    {
      if ((a2 - 42873) <= 3)
        return (a2 & 1) == 0;
      if ((a2 - 42878) > 9)
        return a2 == 42892;
    }
    return a2 & 1;
  }
  if ((a2 - 42624) <= 0x17)
    v4 = a2 & 1;
  else
    v4 = 0;
  if ((a2 - 42560) <= 0x2D)
    v5 = a2 & 1;
  else
    v5 = v4;
  if (BYTE1(a2) != 166)
    v5 = 0;
  if (BYTE1(a2) == 45)
    return a2 < 11558;
  else
    return v5;
}

uint64_t TLocaleInfo::toLower(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  _DWORD *v5;

  v2 = a2;
  if ((int)a2 <= 127)
  {
    if ((_DWORD)a2 == 73 && *(_BYTE *)(a1 + 80))
      return 305;
    else
      return __tolower(a2);
  }
  if (!TLocaleInfo::isUpper(a1, a2))
    return v2;
  if (BYTE1(v2) <= 0x1Du)
  {
    switch(BYTE1(v2))
    {
      case 0:
        if ((_DWORD)v2 != 215 && (v2 - 192) <= 0x1E)
          return (v2 + 32);
        return v2;
      case 1:
        return s_szTableLowercase0100to024F[(int)v2 - 256];
      case 2:
        if (v2 <= 0x24F)
          return s_szTableLowercase0100to024F[(int)v2 - 256];
        return v2;
      case 3:
        v4 = v2 - 880;
        if (v2 < 0x370)
          return v2;
        v5 = s_szTableLowercase0370to03FF;
        return v5[v4];
      case 4:
      case 5:
        if ((v2 - 1120) <= 0x21 || (v2 - 1162) <= 0x35)
          return v2 | 1;
        if ((v2 - 1217) <= 0xD)
          return (v2 & 1) + v2;
        if ((v2 - 1232) <= 0x55)
          return v2 | 1;
        if ((v2 & 0xFFFFFFF0) == 0x400)
          return (v2 + 80);
        if ((v2 - 1040) <= 0x1F)
          return (v2 + 32);
        if ((_DWORD)v2 == 1216)
          return 1231;
        if ((v2 - 1329) <= 0x25)
          return (v2 + 48);
        return v2;
      case 0x10:
        if ((v2 - 4256) <= 0x25)
          return (v2 + 7264);
        return v2;
      default:
        return v2;
    }
  }
  if (BYTE1(v2) <= 0x2Bu)
  {
    switch(BYTE1(v2))
    {
      case 0x1Eu:
        if (v2 >> 1 <= 0xF4A || v2 >> 5 >= 0xF5)
          return v2 | 1;
        if ((_DWORD)v2 == 7838)
          return 223;
        break;
      case 0x1Fu:
        if (v2 <= 0x1FFC)
          return s_szTableLowercase1F00to1FFC[(int)v2 - 7936];
        break;
      case 0x21u:
        if ((_DWORD)v2 == 8498)
        {
          return 8526;
        }
        else if ((_DWORD)v2 == 8579)
        {
          return 8580;
        }
        break;
    }
  }
  else if (BYTE1(v2) > 0xA6u)
  {
    if (BYTE1(v2) == 167)
    {
      if ((v2 - 42786) <= 0xD || (v2 - 42802) <= 0x3D)
        return (v2 & 1) + v2;
      if ((v2 - 42873) <= 3)
        return v2 | 1;
      if ((v2 - 42878) <= 9)
        return (v2 & 1) + v2;
      if ((_DWORD)v2 == 42877)
      {
        return 7545;
      }
      else if ((_DWORD)v2 == 42891)
      {
        return 42892;
      }
    }
    else if (BYTE1(v2) == 255 && (v2 - 65313) <= 0x19)
    {
      return (v2 + 32);
    }
  }
  else
  {
    if (BYTE1(v2) != 44)
    {
      if (BYTE1(v2) != 166 || (v2 - 42560) > 0x2D && (v2 - 42624) > 0x17)
        return v2;
      return v2 | 1;
    }
    if (v2 >> 5 == 355)
    {
      v4 = v2 - 11360;
      v5 = s_szTableLowercase2C60to2C7F;
      return v5[v4];
    }
    else
    {
      if ((v2 - 11392) <= 0xE || (v2 - 11499) <= 3)
        return v2 | 1;
      if ((v2 - 11264) <= 0x2E)
        return (v2 + 48);
    }
  }
  return v2;
}

double TLocaleInfo::stringToFloat(uint64_t a1, __int32 *a2, BOOL *a3)
{
  double v4;
  std::wstring __p;
  _QWORD v7[12];
  char v8;
  void (__cdecl **v9)(std::wistringstream *__hidden);
  double v10;

  v10 = 0.0;
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, a2);
  std::wistringstream::basic_istringstream[abi:ne180100]((uint64_t)v7, &__p, 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  MEMORY[0x1AF44CB60](v7, &v10);
  *a3 = (*(_DWORD *)((_BYTE *)&v7[4] + *(_QWORD *)(v7[0] - 24)) & 7) != 2;
  v4 = v10;
  if (v8 < 0)
    operator delete((void *)v7[10]);
  std::wstreambuf::~wstreambuf();
  std::wistream::~wistream();
  MEMORY[0x1AF44D0A0](&v9);
  return v4;
}

void sub_1ADD63568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::wistringstream::~wistringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t std::wistringstream::basic_istringstream[abi:ne180100](uint64_t a1, const std::wstring *a2, int a3)
{
  uint64_t v6;

  *(_QWORD *)(a1 + 120) = &unk_1E5D05A28;
  v6 = a1 + 16;
  *(_QWORD *)a1 = &unk_1E5D05A00;
  *(_QWORD *)(a1 + 8) = 0;
  std::ios_base::init((std::ios_base *)(a1 + 120), (void *)(a1 + 16));
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  std::wstringbuf::basic_stringbuf[abi:ne180100](v6, a2, a3 | 8);
  return a1;
}

void sub_1ADD6362C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::wistream::~wistream();
  MEMORY[0x1AF44D0A0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::wistringstream::~wistringstream(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 120;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::wstreambuf::~wstreambuf();
  std::wistream::~wistream();
  MEMORY[0x1AF44D0A0](v2);
  return a1;
}

uint64_t TLocaleInfo::stringToULong(uint64_t a1, uint64_t a2, BOOL *a3, int a4)
{
  unsigned int *i;
  int v7;
  unsigned __int8 v8;
  BOOL v9;
  unsigned int v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned int v19;
  TLocaleInfo *v20;
  TLocaleInfo *v21;
  int v22;
  unsigned __int8 v23;
  uint64_t result;
  TLocaleInfo *v27;
  TLocaleInfo *v28;
  TLocaleInfo *v29;
  TLocaleInfo *v30;

  for (i = (unsigned int *)(a2 + 4); ; ++i)
  {
    v7 = *(i - 1);
    {
      v29 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v29);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v29;
    }
    if (v7 > 159)
      break;
    v9 = v7 > 0x20 || ((1 << v7) & 0x100002600) == 0;
    if (v9)
      goto LABEL_21;
LABEL_18:
    ;
  }
  if (v7 >= 12288)
  {
    if (v7 != 65279 && v7 != 12288)
      goto LABEL_21;
    goto LABEL_18;
  }
  if (v7 == 160 || v7 == 8203)
    goto LABEL_18;
LABEL_21:
  v11 = *(i - 1);
  if (!a4)
  {
    if ((v12 & 1) == 0
    {
      v28 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v28);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v28;
    }
    v13 = v11 - 48;
    if ((int)v11 >= 48)
    {
      if (v11 <= 0x39)
        goto LABEL_34;
      if (v11 >= 0x660)
      {
        LODWORD(v13) = TLocaleInfo::getDigitExtended(v13, v11);
        goto LABEL_33;
      }
    }
LABEL_83:
    result = 0;
    *a3 = 1;
    return result;
  }
  {
    v27 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v27);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v27;
  }
  LODWORD(v13) = v11 - 48;
  if ((int)v11 < 48)
    goto LABEL_83;
  if (v11 <= 0x39)
    goto LABEL_34;
  if (v11 < 0x41)
    goto LABEL_83;
  if (v11 <= 0x46)
  {
    LODWORD(v13) = v11 - 55;
    goto LABEL_34;
  }
  if (v11 - 97 >= 6)
    goto LABEL_83;
  LODWORD(v13) = v11 - 87;
LABEL_33:
  if ((_DWORD)v13 == -1)
    goto LABEL_83;
LABEL_34:
  v14 = (int)v13;
  v15 = *i;
  if (!*i)
    goto LABEL_59;
  if (a4)
    v16 = 16;
  else
    v16 = 10;
  while (2)
  {
    if (a4)
    {
      if ((v17 & 1) == 0
      {
        v20 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v20);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v20;
      }
      LODWORD(v18) = v15 - 48;
      if ((int)v15 < 48)
        break;
      if (v15 <= 0x39)
        goto LABEL_53;
      if (v15 < 0x41)
        break;
      if (v15 <= 0x46)
      {
        LODWORD(v18) = v15 - 55;
        goto LABEL_53;
      }
      if (v15 - 97 >= 6)
        break;
      LODWORD(v18) = v15 - 87;
      goto LABEL_52;
    }
    if ((v17 & 1) == 0
    {
      v21 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v21);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v21;
    }
    v18 = v15 - 48;
    if ((int)v15 >= 48)
    {
      if (v15 <= 0x39)
      {
LABEL_53:
        v14 = v14 * v16 + (int)v18;
        v19 = i[1];
        ++i;
        v15 = v19;
        if (!v19)
          break;
        continue;
      }
      if (v15 < 0x660)
        break;
      LODWORD(v18) = TLocaleInfo::getDigitExtended(v18, v15);
LABEL_52:
      if ((_DWORD)v18 == -1)
        break;
      goto LABEL_53;
    }
    break;
  }
LABEL_59:
  while (2)
  {
    v22 = *i;
    if ((v23 & 1) == 0
    {
      v30 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v30);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v30;
    }
    if (v22 <= 159)
    {
      if (v22 > 0x20 || ((1 << v22) & 0x100002600) == 0)
        goto LABEL_78;
      goto LABEL_75;
    }
    if (v22 >= 12288)
    {
      if (v22 != 65279 && v22 != 12288)
        goto LABEL_78;
LABEL_75:
      ++i;
      continue;
    }
    break;
  }
  if (v22 == 160 || v22 == 8203)
    goto LABEL_75;
LABEL_78:
  v9 = *i == 0;
  *a3 = *i != 0;
  if (v9)
    return v14;
  else
    return 0;
}

void sub_1ADD63AE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TLocaleInfo::valueToString(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  int v12;
  int v13;

  v5 = a2;
  if (a4)
    v6 = 16;
  else
    v6 = 10;
  if (v6 <= a2)
  {
    v7 = 1;
    v8 = a2;
    do
    {
      v8 /= v6;
      v7 *= v6;
    }
    while (v6 <= v8);
    if (v7)
    {
      do
      {
        if (v5 / v7 >= 0xA)
          v9 = 55;
        else
          v9 = 48;
        v12 = v9 + v5 / v7;
        TBuffer<wchar_t>::insert(a3, *(_QWORD *)(a3 + 16), &v12, 1uLL);
        v5 %= v7;
        v7 /= v6;
      }
      while (v7 > 1);
    }
  }
  if (v5 >= 0xA)
    v10 = 55;
  else
    v10 = 48;
  v13 = v10 + v5;
  return TBuffer<wchar_t>::insert(a3, *(_QWORD *)(a3 + 16), &v13, 1uLL);
}

void `virtual thunk to'std::wistringstream::~wistringstream(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (v1[103] < 0)
    operator delete(*((void **)v1 + 10));
  std::wstreambuf::~wstreambuf();
  std::wistream::~wistream();
  JUMPOUT(0x1AF44D0A0);
}

{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (v1[103] < 0)
    operator delete(*((void **)v1 + 10));
  std::wstreambuf::~wstreambuf();
  std::wistream::~wistream();
  MEMORY[0x1AF44D0A0](v1 + 120);
  JUMPOUT(0x1AF44D190);
}

void std::wistringstream::~wistringstream(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 120;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::wstreambuf::~wstreambuf();
  std::wistream::~wistream();
  MEMORY[0x1AF44D0A0](v1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::wstringbuf::~wstringbuf(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  return std::wstreambuf::~wstreambuf();
}

void std::wstringbuf::~wstringbuf(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  std::wstreambuf::~wstreambuf();
  JUMPOUT(0x1AF44D190);
}

std::wstringbuf::pos_type *__cdecl std::wstringbuf::seekoff(std::wstringbuf::pos_type *__return_ptr retstr, std::wstringbuf::pos_type *this, std::wstringbuf::off_type a3, std::ios_base::seekdir __way, std::ios_base::openmode __wch)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  std::streamoff v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(&this->__st_._mbstateL + 11);
  v6 = *(&this->__st_._mbstateL + 6);
  if (v5 < v6)
  {
    *(&this->__st_._mbstateL + 11) = v6;
    v5 = v6;
  }
  if ((__wch & 0x18) == 0 || __way == cur && (__wch & 0x18) == 0x18)
    goto LABEL_14;
  if (!v5)
  {
    v8 = 0;
    if (__way)
      goto LABEL_10;
LABEL_17:
    v11 = __way;
    goto LABEL_21;
  }
  v7 = &this->__st_._mbstateL + 8;
  if (this->__st_.__mbstate8[87] < 0)
    v7 = (uint64_t *)*v7;
  v8 = (uint64_t)(v5 - (_QWORD)v7) >> 2;
  if (__way == beg)
    goto LABEL_17;
LABEL_10:
  if (__way == end)
  {
    v11 = v8;
    goto LABEL_21;
  }
  if (__way != cur)
  {
LABEL_14:
    v10 = -1;
    goto LABEL_15;
  }
  if ((__wch & 8) != 0)
    v9 = *(&this->__st_._mbstateL + 3) - *(&this->__st_._mbstateL + 2);
  else
    v9 = v6 - *(&this->__st_._mbstateL + 5);
  v11 = v9 >> 2;
LABEL_21:
  v10 = -1;
  v12 = v11 + a3;
  if (v12 >= 0
    && v8 >= v12
    && (!v12 || ((__wch & 8) == 0 || *(&this->__st_._mbstateL + 3)) && ((__wch & 0x10) == 0 || v6)))
  {
    if ((__wch & 8) != 0)
    {
      *(&this->__st_._mbstateL + 3) = *(&this->__st_._mbstateL + 2) + 4 * v12;
      *(&this->__st_._mbstateL + 4) = v5;
    }
    if ((__wch & 0x10) != 0)
      *(&this->__st_._mbstateL + 6) = *(&this->__st_._mbstateL + 5) + 4 * v12;
    v10 = v12;
  }
LABEL_15:
  *((_OWORD *)&retstr->__st_._mbstateL + 6) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 7) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 4) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 5) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 2) = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 3) = 0u;
  *(_OWORD *)retstr->__st_.__mbstate8 = 0u;
  *((_OWORD *)&retstr->__st_._mbstateL + 1) = 0u;
  retstr->__off_ = v10;
  return this;
}

std::wstringbuf::pos_type *__cdecl std::wstringbuf::seekpos(std::wstringbuf::pos_type *__return_ptr retstr, std::wstringbuf *this, std::wstringbuf::pos_type *__sp, std::ios_base::openmode __wch)
{
  return (std::wstringbuf::pos_type *)((std::wstringbuf::pos_type *(*)(std::wstringbuf::pos_type *__return_ptr))this->seekoff)(retstr);
}

std::wstringbuf::int_type std::wstringbuf::underflow(std::wstringbuf *this)
{
  std::wstreambuf::char_type *hm;
  std::wstreambuf::char_type *nout;
  std::wstreambuf::char_type *einp;
  std::wstreambuf::char_type *ninp;

  hm = this->__hm_;
  nout = this->__nout_;
  if (hm < nout)
  {
    this->__hm_ = nout;
    hm = nout;
  }
  if ((this->__mode_ & 8) == 0)
    return -1;
  einp = this->__einp_;
  if (einp < hm)
  {
    this->__einp_ = hm;
    einp = hm;
  }
  ninp = this->__ninp_;
  if (ninp < einp)
    return *ninp;
  else
    return -1;
}

std::wstringbuf::int_type std::wstringbuf::pbackfail(std::wstringbuf *this, std::wstringbuf::int_type __c)
{
  std::wstreambuf::char_type *hm;
  std::wstreambuf::char_type *nout;
  std::wstreambuf::char_type *ninp;
  std::wstreambuf::char_type *v5;

  hm = this->__hm_;
  nout = this->__nout_;
  if (hm < nout)
  {
    this->__hm_ = nout;
    hm = nout;
  }
  ninp = this->__ninp_;
  if (this->__binp_ < ninp)
  {
    if (__c == -1)
    {
      __c = 0;
      v5 = ninp - 1;
      goto LABEL_10;
    }
    if ((this->__mode_ & 0x10) != 0 || *(ninp - 1) == __c)
    {
      *(ninp - 1) = __c;
      v5 = ninp - 1;
LABEL_10:
      this->__ninp_ = v5;
      this->__einp_ = hm;
      return __c;
    }
  }
  return -1;
}

std::wstringbuf::int_type std::wstringbuf::overflow(std::wstringbuf *this, std::wstringbuf::int_type __c)
{
  uint64_t v2;
  std::wstreambuf::char_type *ninp;
  std::wstreambuf::char_type *binp;
  std::wstreambuf::char_type *eout;
  std::wstreambuf::char_type *nout;
  std::wstringbuf::char_type *hm;
  std::wstreambuf::char_type *bout;
  std::wstringbuf::char_type *v10;
  std::wstringbuf::string_type *p_str;
  std::wstring::size_type v12;
  std::wstring::size_type size;
  std::wstringbuf::string_type *v14;

  if (__c == -1)
  {
    LODWORD(v2) = 0;
    return v2;
  }
  v2 = *(_QWORD *)&__c;
  binp = this->__binp_;
  ninp = this->__ninp_;
  nout = this->__nout_;
  eout = this->__eout_;
  if (nout != eout)
  {
    hm = this->__hm_;
    goto LABEL_14;
  }
  if ((this->__mode_ & 0x10) == 0)
  {
    LODWORD(v2) = -1;
    return v2;
  }
  bout = this->__bout_;
  v10 = this->__hm_;
  p_str = &this->__str_;
  std::wstring::push_back(&this->__str_, 0);
  if (SHIBYTE(this->__str_.__r_.__value_.__r.__words[2]) < 0)
    v12 = (this->__str_.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  else
    v12 = 4;
  std::wstring::resize(&this->__str_, v12, 0);
  if (SHIBYTE(this->__str_.__r_.__value_.__r.__words[2]) < 0)
  {
    p_str = (std::wstringbuf::string_type *)this->__str_.__r_.__value_.__l.__data_;
    size = this->__str_.__r_.__value_.__l.__size_;
  }
  else
  {
    size = HIBYTE(this->__str_.__r_.__value_.__r.__words[2]);
  }
  eout = (std::wstreambuf::char_type *)((char *)p_str + 4 * size);
  nout = (std::wstreambuf::char_type *)((char *)p_str + 4 * (nout - bout));
  this->__bout_ = (std::wstreambuf::char_type *)p_str;
  this->__nout_ = nout;
  this->__eout_ = eout;
  hm = (std::wstringbuf::char_type *)((char *)p_str + 4 * (v10 - bout));
LABEL_14:
  if (nout + 1 >= hm)
    hm = nout + 1;
  this->__hm_ = hm;
  if ((this->__mode_ & 8) != 0)
  {
    v14 = &this->__str_;
    if (SHIBYTE(this->__str_.__r_.__value_.__r.__words[2]) < 0)
      v14 = (std::wstringbuf::string_type *)v14->__r_.__value_.__r.__words[0];
    this->__binp_ = (std::wstreambuf::char_type *)v14;
    this->__ninp_ = (std::wstreambuf::char_type *)((char *)v14 + 4 * (ninp - binp));
    this->__einp_ = hm;
  }
  if (nout != eout)
  {
    this->__nout_ = nout + 1;
    *nout = v2;
    return v2;
  }
  return ((uint64_t (*)(std::wstringbuf *, uint64_t))this->overflow)(this, v2);
}

void sub_1ADD641C0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1ADD640B0);
}

uint64_t std::wstringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::wstring *a2, int a3)
{
  uint64_t v6;

  v6 = std::wstreambuf::basic_streambuf();
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::wstring::operator=((std::wstring *)(v6 + 64), a2);
  std::wstringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_1ADD64238(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::wstreambuf::~wstreambuf();
  _Unwind_Resume(a1);
}

void std::wstringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::wstring *v2;
  char v3;
  std::wstring *v4;
  unint64_t v5;
  int v6;
  char *v7;
  std::wstring::size_type v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::wstring *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::wstring **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    v7 = (char *)v4 + 4 * v5;
    *(_QWORD *)(a1 + 88) = v7;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v7;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + 4 * v5;
    v8 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 4;
    std::wstring::resize(v2, v8, 0);
    v9 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + 4 * v9;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v10 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v11 = (v10 + ((v5 - 0x80000000 - v10) >> 1)) >> 30;
        v4 = (std::wstring *)((char *)v4 + 0x1FFFFFFFCLL * v11 + 0x1FFFFFFFCLL);
        v5 = v5 - 0x7FFFFFFF - 0x7FFFFFFF * v11;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + 4 * v5;
    }
  }
}

BOOL WebCore::isCharacterSmartReplaceExempt(WebCore *this, int a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  uint64_t *v6;

  {
    WebCore::getSmartSet(BOOL)::preSmartSet = WebCore::getSmartSetImpl((WebCore *)1);
  }
  {
    WebCore::getSmartSet(BOOL)::postSmartSet = WebCore::getSmartSetImpl(0);
  }
  v6 = &WebCore::getSmartSet(BOOL)::preSmartSet;
  if (!a2)
    v6 = &WebCore::getSmartSet(BOOL)::postSmartSet;
  return MEMORY[0x1AF44E918](*v6, this) != 0;
}

void sub_1ADD64434(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t WebCore::getSmartSetImpl(WebCore *this)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::runtime_error *exception;
  void *__p;
  char v8;
  void *__dst;
  char v10;
  int v11;

  v1 = (int)this;
  v11 = 0;
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(&__dst, (char *)L"[[:WSpace:] [\\u000A\\u000B\\u000C\\u000D\\u0085]]");
  v2 = uset_openPattern();
  if (v11 >= 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to create uset with patterns: white space and new line");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = v2;
  MEMORY[0x1AF44E900](v2, 4352, 4607);
  MEMORY[0x1AF44E900](v3, 11904, 12255);
  MEMORY[0x1AF44E900](v3, 12272, 12735);
  MEMORY[0x1AF44E900](v3, 12800, 42191);
  MEMORY[0x1AF44E900](v3, 44032, 55215);
  MEMORY[0x1AF44E900](v3, 63744, 64095);
  MEMORY[0x1AF44E900](v3, 65072, 65103);
  MEMORY[0x1AF44E900](v3, 65280, 65519);
  MEMORY[0x1AF44E900](v3, 0x20000, 173782);
  MEMORY[0x1AF44E900](v3, 194560, 195101);
  if (v1)
  {
    WebCore::addAllCodePoints(v3, (uint64_t *)&__p);
  }
  else
  {
    std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(&__p, ")");
    WebCore::addAllCodePoints(v3, (uint64_t *)&__p);
    if (v8 < 0)
      operator delete(__p);
    std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(&__p, "[");
    v4 = uset_openPattern();
    MEMORY[0x1AF44E8F4](v3, v4);
    uset_close();
  }
  if (v8 < 0)
    operator delete(__p);
  if (v10 < 0)
    operator delete(__dst);
  return v3;
}

void sub_1ADD646B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  __cxa_free_exception(v21);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

uint64_t WebCore::addAllCodePoints(uint64_t result, uint64_t *a2)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;

  v2 = *((char *)a2 + 23) < 0;
  v3 = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = a2[1];
  if (v3)
  {
    v5 = result;
    v6 = 0;
    do
    {
      if (v2)
        v7 = (uint64_t *)*a2;
      else
        v7 = a2;
      result = MEMORY[0x1AF44E8E8](v5, *((unsigned __int16 *)v7 + v6++));
      v2 = *((char *)a2 + 23) < 0;
      v8 = *((unsigned __int8 *)a2 + 23);
      if ((v8 & 0x80u) != 0)
        v8 = a2[1];
    }
    while (v6 < v8);
  }
  return result;
}

_BYTE *std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(_BYTE *__dst, char *__src)
{
  uint64_t v4;
  size_t v5;
  int v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  if (!*(_WORD *)__src)
  {
    v7 = 0;
    __dst[23] = 0;
    goto LABEL_9;
  }
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = *(unsigned __int16 *)&__src[v5 + 2];
    v5 += 2;
    --v4;
  }
  while (v6);
  v7 = -v4;
  if ((unint64_t)-v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v7 >= 0xB)
  {
    v9 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + 4;
    if ((v7 | 3) != 0xB)
      v9 = v7 | 3;
    v8 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>((uint64_t)__dst, v9 + 1);
    *((_QWORD *)__dst + 1) = v7;
    *((_QWORD *)__dst + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)__dst = v8;
    goto LABEL_13;
  }
  __dst[23] = v7;
  v8 = __dst;
  if (v4)
  {
LABEL_13:
    memmove(v8, __src, v5);
    goto LABEL_14;
  }
  v7 = 0;
LABEL_9:
  v8 = __dst;
LABEL_14:
  *((_WORD *)v8 + v7) = 0;
  return __dst;
}

void quasar::ConvertLocaleToThreeLetterLocale(const void **a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  __int128 v7;
  uint64_t ISO3Language;
  uint64_t ISO3Country;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char v31[8];
  _QWORD *v32;
  __int128 v33;
  _OWORD v34[2];
  _QWORD v35[4];
  __int128 v36;
  _QWORD v37[4];
  __int128 v38;
  _QWORD v39[6];
  _QWORD v40[6];
  _QWORD v41[6];
  _QWORD v42[8];

  v42[7] = *MEMORY[0x1E0C80C00];
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[8],0>(&v33, "ar_AE", "ara-XWW");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[8],0>(v35, "zh_CN", "cmn-CHN");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[8],0>(v37, "zh_TW", "cmn-TWN");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[8],0>(v39, "nb_NO", "nor-NOR");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[8],0>(v40, "zh_HK", "yue-HKG");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[8],0>(v41, "zh_MO", "yue-MAC");
  std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[8],0>(v42, "ms_MY", "zlm-MYS");
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t)v31, (const void **)&v33, 7);
  v4 = 21;
  do
  {
    v5 = (void **)&v34[v4 - 1];
    if (*((char *)&v34[v4 - 1] - 1) < 0)
      operator delete(*(v5 - 3));
    if (*((char *)v5 - 25) < 0)
      operator delete(*(v5 - 6));
    v4 -= 3;
  }
  while (v4 * 16);
  if (&v32 == (_QWORD **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)v31, a1))
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    ISO3Language = uloc_getISO3Language();
    ISO3Country = uloc_getISO3Country();
    if (ISO3Language)
    {
      v10 = ISO3Country;
      if (ISO3Country)
      {
        MEMORY[0x1AF44C914](&v28, ISO3Language);
        MEMORY[0x1AF44C914](&v25, v10);
      }
    }
    v11 = HIBYTE(v30);
    if (v30 < 0)
      v11 = v29;
    if (!v11)
      goto LABEL_39;
    v12 = HIBYTE(v27);
    if (v27 < 0)
      v12 = v26;
    if (!v12)
    {
LABEL_39:
      memset(v41, 0, 32);
      memset(v40, 0, sizeof(v40));
      memset(v39, 0, sizeof(v39));
      v38 = 0u;
      v36 = 0u;
      memset(v37, 0, sizeof(v37));
      memset(v35, 0, sizeof(v35));
      v33 = 0u;
      memset(v34, 0, sizeof(v34));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Unable to resolve 3-letter locale for ", 38);
      v21 = *((char *)a1 + 23);
      if (v21 >= 0)
        v22 = (uint64_t)a1;
      else
        v22 = (uint64_t)*a1;
      if (v21 >= 0)
        v23 = *((unsigned __int8 *)a1 + 23);
      else
        v23 = (uint64_t)a1[1];
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)".", 1);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v33);
    }
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v33);
    if (v30 >= 0)
      v13 = &v28;
    else
      v13 = v28;
    if (v30 >= 0)
      v14 = HIBYTE(v30);
    else
      v14 = v29;
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v13, v14);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"-", 1);
    if (v27 >= 0)
      v17 = &v25;
    else
      v17 = v25;
    if (v27 >= 0)
      v18 = HIBYTE(v27);
    else
      v18 = v26;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
    std::stringbuf::str();
    *(_QWORD *)&v33 = *MEMORY[0x1E0DE4F50];
    v19 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)&v34[-1] + *(_QWORD *)(v33 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    *(_QWORD *)&v34[0] = v19;
    *((_QWORD *)&v34[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if (SHIBYTE(v37[1]) < 0)
      operator delete(*((void **)&v36 + 1));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1AF44D094](&v38);
    if (SHIBYTE(v27) < 0)
      operator delete(v25);
    if (SHIBYTE(v30) < 0)
      operator delete(v28);
  }
  else
  {
    v6 = std::map<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::at((uint64_t)v31, a1);
    if (*(char *)(v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
    }
    else
    {
      v7 = *(_OWORD *)v6;
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v7;
    }
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v31, v32);
}

void sub_1ADD64C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void quasar::Locale::fromInternalShortIdentifier(uint64_t a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _OWORD v10[17];
  __int128 *v11[3];

  quasar::splitAndTrimNoEmpty((const std::string *)a1, a2, v11);
  if ((__int128 *)((char *)v11[1] - (char *)v11[0]) != (__int128 *)48)
  {
    memset(v10, 0, sizeof(v10));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Identifier '", 12);
    v6 = *(char *)(a1 + 23);
    if (v6 >= 0)
      v7 = a1;
    else
      v7 = *(_QWORD *)a1;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a1 + 23);
    else
      v8 = *(_QWORD *)(a1 + 8);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"' does not parse into two elements.", 35);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v10);
  }
  quasar::Locale::Locale(a3, v11[0], (__int128 *)((char *)v11[0] + 24));
  *(_QWORD *)&v10[0] = v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v10);
}

void sub_1ADD64E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  a9 = (void **)(v9 - 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *quasar::Locale::Locale(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1ADD64EAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::Locale::toInternalShortIdentifier(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  _QWORD v21[11];
  char v22;
  uint64_t v23;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v20);
  v4 = *(char *)(a1 + 23);
  if (v4 >= 0)
    v5 = a1;
  else
    v5 = *(_QWORD *)a1;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_QWORD *)(a1 + 8);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v5, v6);
  v8 = *(char *)(a2 + 23);
  if (v8 >= 0)
    v9 = a2;
  else
    v9 = *(_QWORD *)a2;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
  v14 = *(_QWORD *)(a1 + 24);
  v13 = a1 + 24;
  v12 = v14;
  v15 = *(char *)(v13 + 23);
  if (v15 >= 0)
    v16 = v13;
  else
    v16 = v12;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(v13 + 23);
  else
    v17 = *(_QWORD *)(v13 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v16, v17);
  std::stringbuf::str();
  v20[0] = *MEMORY[0x1E0DE4F50];
  v18 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v21[0] = v18;
  v21[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v22 < 0)
    operator delete((void *)v21[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v23);
}

void sub_1ADD64FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::Locale::toInternalLongIdentifier(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void *v4[2];
  char v5;
  void *__p;
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v4, "_");
  quasar::Locale::toInternalShortIdentifier(a1, (uint64_t)v4);
  quasar::ConvertLocaleToThreeLetterLocale((const void **)&__p, a2);
  if (v7 < 0)
    operator delete(__p);
  if (v5 < 0)
    operator delete(v4[0]);
}

void sub_1ADD65064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

BOOL quasar::Locale::isCompatible(quasar::Locale *this, const Locale *data)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t size;
  int v5;
  const Locale *v6;
  quasar::Locale *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t var0;
  int v12;
  const void **v13;
  unsigned __int8 *v14;
  int *p_var0;
  unsigned __int8 *v16;
  int *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v24;
  _BOOL8 result;

  v2 = *((unsigned __int8 *)this + 23);
  if ((v2 & 0x80u) == 0)
    v3 = *((unsigned __int8 *)this + 23);
  else
    v3 = *((_QWORD *)this + 1);
  size = *((unsigned __int8 *)&data->var0.__r_.__value_.var0.var1 + 23);
  v5 = (char)size;
  if ((size & 0x80u) != 0)
    size = data->var0.__r_.__value_.var0.var1.__size_;
  if (v3 != size)
    return 0;
  v6 = data;
  if (v5 < 0)
    data = (const Locale *)data->var0.__r_.__value_.var0.var1.__data_;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)this, data, *((_QWORD *)this + 1)))
      return 0;
  }
  else if (*((_BYTE *)this + 23))
  {
    v8 = this;
    while (*(unsigned __int8 *)v8 == data->var0.__r_.__value_.var0.var0.__data_[0])
    {
      v8 = (quasar::Locale *)((char *)v8 + 1);
      data = (const Locale *)((char *)data + 1);
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  v9 = *((unsigned __int8 *)this + 47);
  if ((v9 & 0x80u) == 0)
    v10 = *((unsigned __int8 *)this + 47);
  else
    v10 = *((_QWORD *)this + 4);
  var0 = v6[1].var0.__r_.__value_.var0.var0.__data_[7];
  v12 = (char)var0;
  if ((var0 & 0x80u) != 0)
    var0 = v6->var0.var0;
  if (v10 != var0)
    return 0;
  v13 = (const void **)((char *)this + 24);
  v16 = *(unsigned __int8 **)&v6->var0.__r_.var0;
  p_var0 = &v6->var0.__r_.var0;
  v14 = v16;
  if (v12 >= 0)
    v17 = p_var0;
  else
    v17 = (int *)v14;
  if ((v9 & 0x80) != 0)
    return memcmp(*v13, v17, *((_QWORD *)this + 4)) == 0;
  if (!*((_BYTE *)this + 47))
    return 1;
  v18 = v9 - 1;
  do
  {
    v20 = *(unsigned __int8 *)v13;
    v13 = (const void **)((char *)v13 + 1);
    v19 = v20;
    v22 = *(unsigned __int8 *)v17;
    v17 = (int *)((char *)v17 + 1);
    v21 = v22;
    v24 = v18-- != 0;
    result = v19 == v21;
  }
  while (v19 == v21 && v24);
  return result;
}

BOOL quasar::Locale::operator!=(quasar::Locale *a1, const Locale *a2)
{
  return !quasar::Locale::isCompatible(a1, a2);
}

uint64_t std::map<std::string,std::string>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 48 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)a1, v4, a2, (__int128 *)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_1ADD65240(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *LHash<unsigned int,Trie<unsigned int,double>>::~LHash(_QWORD *a1)
{
  LHash<unsigned int,Trie<unsigned int,unsigned long>>::clear(a1, 0);
  return a1;
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,double>>::LHashIter(uint64_t a1, _DWORD **a2, uint64_t a3)
{
  _DWORD *v4;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = 0;
  if (v4)
  {
    *(_DWORD *)(a1 + 12) = *v4 >> 5;
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = 0;
    LHashIter<unsigned int,Trie<unsigned int,double>>::sortKeys(a1);
  }
  else
  {
    *(_DWORD *)(a1 + 12) = 0;
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,double>>::sortKeys(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  int v16;
  _BYTE v18[24];
  uint64_t v19;

  v2 = **(_DWORD **)a1 & 0x1F;
  v3 = operator new[]();
  v4 = v3;
  v5 = 0;
  v6 = 0;
  v7 = (int *)(*(_QWORD *)a1 + 24);
  do
  {
    v8 = *v7;
    v7 += 6;
    if (v8 != -1)
      *(_DWORD *)(v3 + 4 * v6++) = v5;
    ++v5;
  }
  while (!(v5 >> v2));
  if (*(_QWORD *)(a1 + 16))
  {
    v9 = *(unsigned int *)(a1 + 12);
    LHashIter<unsigned int,double>::LHashIter((uint64_t)v18, a1);
    v10 = 126 - 2 * __clz(v9);
    if ((_DWORD)v9)
      v11 = v10;
    else
      v11 = 0;
    std::__introsort<std::_ClassicAlgPolicy,LHashIter<unsigned int,Trie<unsigned int,double>> &,unsigned int *,false>(v4, (unsigned int *)(v4 + 4 * v9), (uint64_t)v18, v11, 1);
    if (v19)
      MEMORY[0x1AF44D160](v19, 0x1000C8052888210);
    v19 = 0;
  }
  v12 = (_DWORD *)operator new[]();
  *(_QWORD *)(a1 + 24) = v12;
  v13 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v13)
  {
    v14 = *(_DWORD **)a1;
    v15 = (int *)v4;
    do
    {
      v16 = *v15++;
      *v12++ = v14[6 * v16 + 6];
      --v13;
    }
    while (v13);
  }
  return MEMORY[0x1AF44D160](v4, 0x1000C8052888210);
}

void sub_1ADD65428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x1AF44D160](a12, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,double>>::init(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    result = MEMORY[0x1AF44D160](result, 0x1000C8052888210);
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  if (*(_QWORD *)a1)
  {
    *(_DWORD *)(a1 + 12) = **(_DWORD **)a1 >> 5;
    return LHashIter<unsigned int,Trie<unsigned int,double>>::sortKeys(a1);
  }
  else
  {
    *(_DWORD *)(a1 + 12) = 0;
  }
  return result;
}

uint64_t LHashIter<unsigned int,Trie<unsigned int,double>>::next(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;

  v2 = *(_DWORD **)a1;
  if (!*(_QWORD *)a1)
    return 0;
  v10 = 0;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 12))
    return 0;
  v9 = v2;
  v7 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate(&v9, *(_DWORD *)(v7 + 4 * v4), &v10);
  v8 = *(_QWORD *)a1 + 24 * v10;
  result = v8 + 8;
  *a2 = *(_DWORD *)(v8 + 24);
  return result;
}

void sub_1ADD6553C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LHash<unsigned int,Trie<unsigned int,double>>::~LHash(&a9);
  _Unwind_Resume(a1);
}

_DWORD **Trie<unsigned int,double>::~Trie(_DWORD **a1)
{
  int v3;
  _BYTE v4[24];
  uint64_t v5;

  LHashIter<unsigned int,Trie<unsigned int,double>>::LHashIter((uint64_t)v4, a1, 0);
  v3 = 0;
  while (LHashIter<unsigned int,Trie<unsigned int,double>>::next((uint64_t)v4, &v3))
    Trie<unsigned int,double>::~Trie();
  if (v5)
    MEMORY[0x1AF44D160](v5, 0x1000C8052888210);
  LHash<unsigned int,Trie<unsigned int,unsigned long>>::clear(a1, 0);
  return a1;
}

uint64_t Trie<unsigned int,double>::remove(unsigned int **a1, unsigned int *a2, _QWORD *a3)
{
  uint64_t v4;
  __int128 v6;

  v6 = 0uLL;
  v4 = Trie<unsigned int,double>::removeTrie(a1, a2, &v6);
  if (a3)
    *a3 = *((_QWORD *)&v6 + 1);
  Trie<unsigned int,double>::~Trie((_DWORD **)&v6);
  return v4;
}

void sub_1ADD65628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  Trie<unsigned int,double>::~Trie(&a9);
  _Unwind_Resume(a1);
}

uint64_t Trie<unsigned int,double>::removeTrie(unsigned int **a1, unsigned int *a2, _OWORD *a3)
{
  unsigned int v4;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  __int128 v11;

  if (!a2)
    return 0;
  v4 = *a2;
  if (v4 == -1)
    return 0;
  v8 = a2[1];
  v7 = a2 + 1;
  if (v8 != -1)
  {
    LODWORD(v11) = 0;
    if (LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate(a1, v4, &v11))
      return Trie<unsigned int,double>::removeTrie(&(*a1)[6 * v11 + 2], v7, a3);
    return 0;
  }
  if (!a3)
  {
    v11 = 0uLL;
    if (LHash<unsigned int,Trie<unsigned int,unsigned long>>::remove(a1, v4, &v11))
    {
      Trie<unsigned int,double>::~Trie((_DWORD **)&v11);
      v9 = 1;
    }
    else
    {
      v9 = 0;
    }
    Trie<unsigned int,double>::~Trie((_DWORD **)&v11);
    return v9;
  }
  return LHash<unsigned int,Trie<unsigned int,unsigned long>>::remove(a1, v4, a3);
}

void sub_1ADD65724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  Trie<unsigned int,double>::~Trie(&a9);
  _Unwind_Resume(a1);
}

uint64_t Trie<unsigned int,double>::memStats(_DWORD **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  _BYTE v7[24];
  uint64_t v8;

  *a2 += 8;
  LHash<unsigned int,Trie<unsigned int,unsigned long>>::memStats(a1, a2);
  LHashIter<unsigned int,Trie<unsigned int,double>>::LHashIter((uint64_t)v7, a1, 0);
  v6 = 0;
  while (1)
  {
    v4 = LHashIter<unsigned int,Trie<unsigned int,double>>::next((uint64_t)v7, &v6);
    if (!v4)
      break;
    *a2 -= 16;
    Trie<unsigned int,double>::memStats(v4, a2);
  }
  result = v8;
  if (v8)
    return MEMORY[0x1AF44D160](v8, 0x1000C8052888210);
  return result;
}

void sub_1ADD657C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    MEMORY[0x1AF44D160](a14, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t TrieIter2<unsigned int,double>::TrieIter2(uint64_t a1, _DWORD **a2, _DWORD *a3, int a4, uint64_t a5)
{
  _DWORD *v6;

  v6 = a3;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  LHashIter<unsigned int,Trie<unsigned int,double>>::LHashIter(a1 + 32, a2, a5);
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (!a4)
    goto LABEL_4;
  if (a4 == 1)
  {
    ++v6;
LABEL_4:
    *v6 = -1;
  }
  return a1;
}

uint64_t TrieIter2<unsigned int,double>::init(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = TrieIter2<unsigned int,unsigned int>::~TrieIter2(v2);
    MEMORY[0x1AF44D190](v3, 0x10F0C40A7879D68);
  }
  *(_QWORD *)(a1 + 64) = 0;
  result = LHashIter<unsigned int,Trie<unsigned int,double>>::init(a1 + 32);
  *(_BYTE *)(a1 + 72) = 0;
  return result;
}

uint64_t TrieIter2<unsigned int,double>::next(uint64_t a1)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  _DWORD **v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_DWORD *)(a1 + 16);
  if (v2)
  {
    if (v2 == 1)
    {
      return LHashIter<unsigned int,Trie<unsigned int,double>>::next(a1 + 32, *(_DWORD **)(a1 + 8));
    }
    else
    {
      v4 = *(_QWORD *)(a1 + 64);
      if (v4)
        goto LABEL_9;
      while (1)
      {
        result = LHashIter<unsigned int,Trie<unsigned int,double>>::next(a1 + 32, *(_DWORD **)(a1 + 8));
        if (!result)
          break;
        v5 = (_DWORD **)result;
        v4 = operator new();
        TrieIter2<unsigned int,double>::TrieIter2(v4, v5, (_DWORD *)(*(_QWORD *)(a1 + 8) + 4), *(_DWORD *)(a1 + 16) - 1, *(_QWORD *)(a1 + 24));
        *(_QWORD *)(a1 + 64) = v4;
LABEL_9:
        result = TrieIter2<unsigned int,double>::next(v4);
        if (result)
          break;
        v6 = *(_QWORD *)(a1 + 64);
        if (v6)
        {
          v7 = TrieIter2<unsigned int,unsigned int>::~TrieIter2(v6);
          MEMORY[0x1AF44D190](v7, 0x10F0C40A7879D68);
        }
        *(_QWORD *)(a1 + 64) = 0;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 72))
  {
    return 0;
  }
  else
  {
    *(_BYTE *)(a1 + 72) = 1;
    return *(_QWORD *)a1;
  }
  return result;
}

void sub_1ADD659A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F0C40A7879D68);
  _Unwind_Resume(a1);
}

void NgramCounts<double>::NgramCounts(LMStats *a1, Vocab *a2, int a3)
{
  uint64_t v4;

  LMStats::LMStats(a1, a2);
  *(_QWORD *)v4 = &unk_1E5D15A18;
  *(_BYTE *)(v4 + 152) = 0;
  *(_DWORD *)(v4 + 156) = a3;
  *(_QWORD *)(v4 + 160) = 0;
  *(_QWORD *)(v4 + 168) = 0;
}

void NgramCounts<double>::~NgramCounts(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D15A18;
  Trie<unsigned int,double>::~Trie((_DWORD **)a1 + 20);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D15A18;
  Trie<unsigned int,double>::~Trie((_DWORD **)a1 + 20);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t NgramCounts<double>::countSentence(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)a1 + 104))(a1, 1.0);
}

{
  return (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)a1 + 136))(a1, 1.0);
}

uint64_t NgramCounts<double>::countSentence(uint64_t a1, uint64_t a2, char *a3)
{
  double v6;

  v6 = 0.0;
  if (sscanf(a3, "%lf", &v6) == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, double))(*(_QWORD *)a1 + 104))(a1, a2, v6);
  else
    return 0;
}

uint64_t NgramCounts<double>::countSentence(uint64_t a1, uint64_t a2, double a3)
{
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;

  v6 = (_QWORD *)_ZTW20countSentenceWidsTLS();
  v7 = (void *)*v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = malloc_type_calloc(0xC353uLL, 4uLL, 0x100004052888210uLL);
    *v8 = v7;
  }
  v9 = *(uint64_t **)(a1 + 24);
  v10 = *v9;
  if (*(_BYTE *)(a1 + 32))
  {
    v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v10 + 256))(*(_QWORD *)(a1 + 24), a2, (uint64_t)v7 + 4, 50001);
  }
  else
  {
    v12 = (unsigned int *)(*(uint64_t (**)(_QWORD))(v10 + 88))(*(_QWORD *)(a1 + 24));
    v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD))(*v9 + 272))(v9, a2, (uint64_t)v7 + 4, 50001, *v12);
  }
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, double))(*(_QWORD *)a1 + 128))(a1, v7, v11, a3);
}

{
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;

  v6 = (_QWORD *)_ZTW20countSentenceWidsTLS();
  v7 = (void *)*v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = malloc_type_calloc(0xC353uLL, 4uLL, 0x100004052888210uLL);
    *v8 = v7;
  }
  v9 = *(uint64_t **)(a1 + 24);
  v10 = *v9;
  if (*(_BYTE *)(a1 + 32))
  {
    v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v10 + 264))(*(_QWORD *)(a1 + 24), a2, (uint64_t)v7 + 4, 50001);
  }
  else
  {
    v12 = (unsigned int *)(*(uint64_t (**)(_QWORD))(v10 + 88))(*(_QWORD *)(a1 + 24));
    v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD))(*v9 + 280))(v9, a2, (uint64_t)v7 + 4, 50001, *v12);
  }
  return (*(uint64_t (**)(uint64_t, void *, uint64_t, double))(*(_QWORD *)a1 + 128))(a1, v7, v11, a3);
}

uint64_t NgramCounts<double>::countSentence(uint64_t a1, uint64_t *a2, double a3)
{
  _QWORD *v6;
  _DWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = (_QWORD *)_ZTW20countSentenceWidsTLS();
  v7 = (_DWORD *)*v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = malloc_type_calloc(0xC353uLL, 4uLL, 0x100004052888210uLL);
    *v8 = v7;
  }
  v9 = 0;
  v10 = *a2;
  v11 = (a2[1] - *a2) >> 2;
  while (v11 != v9)
  {
    v7[v9 + 1] = *(_DWORD *)(v10 + 4 * v9);
    if (++v9 == 50000)
      return (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)a1 + 128))(a1, a3);
  }
  v7[(v11 + 1)] = -1;
  return (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)a1 + 128))(a1, a3);
}

uint64_t NgramCounts<double>::countSentenceHelper(uint64_t a1, _DWORD *a2, unsigned int a3, double a4)
{
  BOOL v9;
  unsigned int v10;
  int v11;
  int v12;
  _DWORD *v13;
  int v14;

  if (a3 == 50001)
    return 0;
  if (*(_BYTE *)(a1 + 32))
    v9 = 1;
  else
    v9 = a3 == 0;
  if (!v9)
  {
    v10 = 1;
    do
    {
      v11 = a2[v10];
      if (v11 == *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24)))
        *(double *)(a1 + 72) = *(double *)(a1 + 72) + 1.0;
      ++v10;
    }
    while (v10 <= a3);
  }
  if (*(_BYTE *)(a1 + 33)
    && (v12 = a2[1],
        v12 != *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 104))(*(_QWORD *)(a1 + 24))))
  {
    *a2 = *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 104))(*(_QWORD *)(a1 + 24));
    v13 = a2;
  }
  else
  {
    v13 = a2 + 1;
  }
  if (*(_BYTE *)(a1 + 34))
  {
    v14 = a2[a3];
    if (v14 != *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 120))(*(_QWORD *)(a1 + 24)))
    {
      a2[a3 + 1] = *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 120))(*(_QWORD *)(a1 + 24));
      a2[a3 + 2] = -1;
    }
  }
  return (*(uint64_t (**)(uint64_t, _DWORD *, double))(*(_QWORD *)a1 + 136))(a1, v13, a4);
}

uint64_t NgramCounts<double>::countSentence(uint64_t a1, int *a2, double a3)
{
  int *v3;
  uint64_t v6;
  int v7;
  int v8;

  v3 = a2;
  if (*a2 == -1)
  {
    v6 = 0;
    v7 = -1;
  }
  else
  {
    LODWORD(v6) = 0;
    do
    {
      NgramCounts<double>::incrementCounts(a1, (uint64_t)a2, 1u, a3);
      v6 = (v6 + 1);
      a2 = &v3[v6];
    }
    while (*a2 != -1);
    v7 = *v3;
  }
  *(double *)(a1 + 64) = *(double *)(a1 + 64) + (double)v6;
  if (v7 == *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 104))(*(_QWORD *)(a1 + 24)))
    *(double *)(a1 + 64) = *(double *)(a1 + 64) + -1.0;
  if ((_DWORD)v6)
  {
    v8 = v3[(v6 - 1)];
    if (v8 == *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 120))(*(_QWORD *)(a1 + 24)))
      *(double *)(a1 + 64) = *(double *)(a1 + 64) + -1.0;
  }
  *(double *)(a1 + 56) = *(double *)(a1 + 56) + 1.0;
  return v6;
}

uint64_t NgramCounts<double>::incrementCounts(uint64_t result, uint64_t a2, unsigned int a3, double a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  char v10;

  if (*(_DWORD *)(result + 156))
  {
    v6 = result;
    v7 = 0;
    result += 160;
    v8 = a3;
    do
    {
      v9 = *(_DWORD *)(a2 + 4 * v7);
      if (v9 == -1)
        break;
      v10 = 0;
      result = LHash<unsigned int,Trie<unsigned int,unsigned long>>::insert((_QWORD *)result, v9, &v10);
      if (!v10)
        *(_DWORD *)result = 0;
      if (++v7 >= v8)
        *(double *)(result + 8) = *(double *)(result + 8) + a4;
    }
    while (v7 < *(unsigned int *)(v6 + 156));
  }
  return result;
}

uint64_t NgramCounts<double>::read(uint64_t a1, File *a2)
{
  return NgramCounts<double>::read(a1, a2, *(_DWORD *)(a1 + 156), 0);
}

uint64_t NgramCounts<double>::read(uint64_t a1, File *this, unsigned int a3, uint64_t a4)
{
  char *v8;
  unsigned int i;
  uint64_t Binary;
  _BYTE v12[104];
  char *v13;
  unsigned int v14[101];
  char v15[808];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v8 = File::getline(this);
  if (v8)
  {
    memset(v15, 0, 512);
    v13 = 0;
    if (!strcmp(v8, "SRILM_BINARY_COUNTS_001\n"))
    {
      File::File((File *)v12, *(const char **)this, "rb", 1);
      Binary = NgramCounts<double>::readBinary(a1, (File *)v12, a3, a4);
      File::~File((File *)v12);
      return Binary;
    }
    File::ungetline((uint64_t)this);
    for (i = NgramCounts<double>::readNgram(this, v15, (const char **)0x65, &v13);
          i;
          i = NgramCounts<double>::readNgram(this, v15, (const char **)0x65, &v13))
    {
      NgramCounts<double>::updateCounts(a1, i, a3, a4, (uint64_t)v15, v14, *(double *)&v13);
    }
  }
  return 1;
}

void sub_1ADD66208(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  File::~File((File *)va);
  _Unwind_Resume(a1);
}

uint64_t NgramCounts<double>::readBinary(uint64_t a1, File *this, int a3, uint64_t a4)
{
  char *v8;
  _QWORD *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v14;
  _QWORD *v15;
  int *v16;
  char *v17;
  size_t v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  off_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  std::locale v26;

  v8 = File::getline(this);
  if (!v8 || strcmp(v8, "SRILM_BINARY_COUNTS_001\n"))
  {
    v9 = File::position((const char **)this, MEMORY[0x1E0DE4A50]);
    v10 = "bad binary format\n";
    v11 = 18;
LABEL_4:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    return 0;
  }
  v14 = File::getline(this);
  v25 = 0;
  if (sscanf(v14, "maxorder %u", &v25) != 1)
  {
    v9 = File::position((const char **)this, MEMORY[0x1E0DE4A50]);
    v10 = "could not read ngram order\n";
    v11 = 27;
    goto LABEL_4;
  }
  v22 = 0;
  v23 = 0;
  v24 = 0;
  if ((*(unsigned int (**)(_QWORD, File *, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 24) + 336))(*(_QWORD *)(a1 + 24), this, &v22, a4))
  {
    v21 = File::ftell(this);
    if ((v21 & 0x8000000000000000) == 0)
    {
      v12 = NgramCounts<double>::readBinaryNode(a1, (_DWORD **)(a1 + 160), a3, v25, this, &v21, a4, (int *)&v22);
      goto LABEL_13;
    }
    v15 = File::position((const char **)this, MEMORY[0x1E0DE4A50]);
    v16 = __error();
    v17 = srilm_ts_strerror(*v16);
    v18 = strlen(v17);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
    std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
    v20 = std::locale::use_facet(&v26, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
    std::locale::~locale(&v26);
    std::ostream::put();
    std::ostream::flush();
  }
  v12 = 0;
LABEL_13:
  if (v23)
    MEMORY[0x1AF44D160](v23, 0x1000C8052888210);
  return v12;
}

void sub_1ADD66400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  std::locale::~locale((std::locale *)(v13 - 40));
  if (a13)
    MEMORY[0x1AF44D160](a13, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

Vocab *NgramCounts<double>::readNgram(File *a1, char *a2, const char **a3, char **a4)
{
  Vocab *result;
  _QWORD *v9;
  _QWORD *v10;

  result = (Vocab *)File::getline(a1);
  if (result)
  {
    result = (Vocab *)NgramCounts<double>::parseNgram(result, a2, a3, a4);
    if (!(_DWORD)result)
    {
      v9 = File::position((const char **)a1, MEMORY[0x1E0DE4A50]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"malformed N-gram count or more than ", 36);
      v10 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" words per line\n", 16);
      return 0;
    }
  }
  return result;
}

uint64_t NgramCounts<double>::updateCounts(uint64_t result, unsigned int a2, unsigned int a3, int a4, uint64_t a5, unsigned int *a6, double a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int *v17;
  _DWORD **v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (a2 <= a3)
  {
    v21 = v10;
    v22 = v9;
    v23 = v7;
    v24 = v8;
    v14 = result;
    if (a4)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, unsigned int *, uint64_t))(**(_QWORD **)(result + 24) + 288))(*(_QWORD *)(result + 24), a5, a6, 100);
      if (!(_DWORD)result)
        return result;
    }
    else
    {
      v15 = *(uint64_t **)(result + 24);
      v16 = *v15;
      if (*(_BYTE *)(result + 32))
      {
        (*(void (**)(_QWORD, uint64_t, unsigned int *, uint64_t))(v16 + 256))(*(_QWORD *)(result + 24), a5, a6, 100);
      }
      else
      {
        v17 = (unsigned int *)(*(uint64_t (**)(_QWORD))(v16 + 88))(*(_QWORD *)(result + 24));
        (*(void (**)(uint64_t *, uint64_t, unsigned int *, uint64_t, _QWORD))(*v15 + 272))(v15, a5, a6, 100, *v17);
      }
    }
    v18 = (_DWORD **)(v14 + 160);
    if (*(_BYTE *)(v14 + 152))
    {
      v19 = 0;
      result = Trie<unsigned int,unsigned int>::findTrie(v18, a6, &v19);
      if (!result)
        return result;
    }
    else
    {
      v20 = 0;
      result = (uint64_t)Trie<unsigned int,unsigned long>::insertTrie(v18, a6, &v20);
    }
    *(double *)(result + 8) = *(double *)(result + 8) + a7;
  }
  return result;
}

uint64_t NgramCounts<double>::read(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t *v8;
  double v9;
  unsigned int Ngram;
  char v11;
  uint64_t v12;
  uint64_t *v14;
  unsigned int v15[101];
  _OWORD v16[50];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  memset(v16, 0, 512);
  while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v8 = *(uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v14 = v8;
    v9 = (double)*v8;
    if (v8[10] == v8[11])
    {
      Ngram = NgramCounts<unsigned long>::readNgram(v8 + 4, (uint64_t ***)v16, 0x65u);
      if (!Ngram)
      {
        v11 = 0;
        goto LABEL_8;
      }
      NgramCounts<double>::updateCounts(a1, Ngram, a3, a4, (uint64_t)v16, v15, v9);
    }
    else
    {
      NgramCounts<double>::updateCounts(a1, a3, a4, v8 + 10, v15, (double)*v8);
    }
    v11 = 1;
LABEL_8:
    v12 = (uint64_t)v14;
    v14 = 0;
    if (v12)
      std::default_delete<quasar::lm::TokenStringAndCount const>::operator()[abi:ne180100]((uint64_t)&v14, v12);
    if ((v11 & 1) == 0)
      return 1;
  }
  return 1;
}

void sub_1ADD66748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v10;

  v10 = a9;
  a9 = 0;
  if (v10)
    std::default_delete<quasar::lm::TokenStringAndCount const>::operator()[abi:ne180100]((uint64_t)&a9, v10);
  _Unwind_Resume(exception_object);
}

uint64_t NgramCounts<double>::updateCounts(uint64_t result, unsigned int a2, int a3, _QWORD *a4, unsigned int *a5, double a6)
{
  uint64_t v8;
  _DWORD **v9;
  char v10;
  char v11;

  if (a2 >= (unint64_t)((uint64_t)(a4[1] - *a4) >> 2))
  {
    v8 = result;
    result = (*(uint64_t (**)(_QWORD, _QWORD *, unsigned int *, uint64_t, BOOL))(**(_QWORD **)(result + 24)
                                                                                        + 296))(*(_QWORD *)(result + 24), a4, a5, 100, a3 != 0);
    if ((_DWORD)result)
    {
      v9 = (_DWORD **)(v8 + 160);
      if (*(_BYTE *)(v8 + 152))
      {
        v10 = 0;
        result = Trie<unsigned int,unsigned int>::findTrie(v9, a5, &v10);
        if (!result)
          return result;
      }
      else
      {
        v11 = 0;
        result = (uint64_t)Trie<unsigned int,unsigned long>::insertTrie(v9, a5, &v11);
      }
      *(double *)(result + 8) = *(double *)(result + 8) + a6;
    }
  }
  return result;
}

uint64_t NgramCounts<double>::readGoogle(uint64_t a1, char *__s, unsigned int a3, unsigned int a4)
{
  size_t v5;
  size_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int i;
  char *v20;
  char *v21;
  uint64_t v22;
  char **v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Vocab *v29;
  uint64_t v30;
  const char **v31;
  _QWORD *v32;
  _QWORD *v33;
  size_t v34;
  _QWORD *v35;
  const std::locale::facet *v36;
  void ***v37;
  uint64_t v38;
  _QWORD *v39;
  char v40;
  std::locale v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  const char *v49[13];
  int v50;
  _BYTE v51[12];
  int v52;
  std::locale v53;

  v5 = strlen(__s);
  *(_DWORD *)&v51[8] = 0;
  v52 = 0;
  v6 = v5 + 20;
  v50 = 0;
  *(_QWORD *)v51 = (v5 + 20);
  if ((_DWORD)v5 == -20)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    Array<char>::alloc((uint64_t)&v50, v5 + 19, 0);
    v7 = *(_QWORD *)&v51[4];
    v8 = v50;
  }
  snprintf((char *)(v7 - v8), v6, "%s/1gms/vocab%s", __s, ".gz");
  File::File((File *)v49, (const char *)(*(_QWORD *)&v51[4] - v50), "r", 0);
  if (File::error((File *)v49))
  {
    snprintf((char *)(*(_QWORD *)&v51[4] - v50), v6, "%s/1gms/vocab", __s);
    File::reopen((File *)v49, (const char *)(*(_QWORD *)&v51[4] - v50), "r");
  }
  if (!File::error((File *)v49))
  {
    if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll || *(_DWORD *)(a1 + 12)))
    {
      v9 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"reading ", 8);
      v11 = strlen((const char *)(*(_QWORD *)&v51[4] - v50));
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, *(_QWORD *)&v51[4] - v50, v11);
      std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
      v13 = std::locale::use_facet(&v45, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      std::locale::~locale(&v45);
      std::ostream::put();
      std::ostream::flush();
    }
    v14 = NgramCounts<double>::read(a1, (File *)v49, 1u, a4);
    File::~File((File *)v49);
    if (!v14)
      goto LABEL_52;
    if (a3 < 2)
    {
      v15 = 1;
      goto LABEL_53;
    }
    v16 = 2;
    while (1)
    {
      snprintf((char *)(*(_QWORD *)&v51[4] - v50), v6, "%s/%dgms/%dgm.idx", __s, v16, v16);
      File::File((File *)v49, (const char *)(*(_QWORD *)&v51[4] - v50), "r", 0);
      if (File::error((File *)v49))
        break;
      v17 = 0;
      v18 = v16 + 1;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      for (i = -1; ; ++i)
      {
        v20 = File::getline((File *)v49);
        if (!v20)
          break;
        v21 = strdup(v20);
        v22 = operator new[]();
        *(_QWORD *)v22 = v21;
        if (Vocab::parseWords((Vocab *)v21, (char *)(v22 + 8), (const char **)(v16 + 2), v23) != v18)
        {
          v39 = File::position(v49, MEMORY[0x1E0DE4A50]);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"malformed index entry\n", 22);
          goto LABEL_43;
        }
        v24 = (_QWORD *)Array<char const**>::operator[]((int *)&v46, v17++);
        *v24 = v22;
      }
      if (File::error((File *)v49))
      {
        perror((const char *)(*(_QWORD *)&v51[4] - v50));
      }
      else
      {
        if (!v17)
        {
LABEL_38:
          v15 = 1;
          goto LABEL_44;
        }
        v25 = 0;
        while (1)
        {
          v26 = *(_QWORD *)&v51[4];
          v27 = v50;
          v28 = Array<char const**>::operator[]((int *)&v46, v25);
          snprintf((char *)(v26 - v27), v6, "%s/%dgms/%s", __s, v16, *(const char **)(*(_QWORD *)v28 + 8));
          File::File((File *)&v45, (const char *)(*(_QWORD *)&v51[4] - v50), "r", 0);
          if (File::error((File *)&v45))
            break;
          if (!a4
            || ((v29 = *(Vocab **)(a1 + 24), v30 = *(_QWORD *)Array<char const**>::operator[]((int *)&v46, v25),
                                             i != v25)
              ? (v31 = (const char **)(*(_QWORD *)Array<char const**>::operator[]((int *)&v46, v25 + 1) + 16))
              : (v31 = 0),
                Vocab::ngramsInRange(v29, (const char **)(v30 + 16), v31)))
          {
            if (!*(_BYTE *)(a1 + 8) && (Debug::debugAll || *(_DWORD *)(a1 + 12)))
            {
              v32 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
              v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"reading ", 8);
              v34 = strlen((const char *)(*(_QWORD *)&v51[4] - v50));
              v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, *(_QWORD *)&v51[4] - v50, v34);
              std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(_QWORD *)(*v35 - 24)));
              v36 = std::locale::use_facet(&v53, MEMORY[0x1E0DE4A90]);
              ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
              std::locale::~locale(&v53);
              std::ostream::put();
              std::ostream::flush();
            }
            if (!NgramCounts<double>::read(a1, (File *)&v45, v16, a4))
              goto LABEL_42;
          }
          if (File::error((File *)&v45))
            break;
          v37 = (void ***)Array<char const**>::operator[]((int *)&v46, v25);
          free(**v37);
          v38 = *(_QWORD *)Array<char const**>::operator[]((int *)&v46, v25);
          if (v38)
            MEMORY[0x1AF44D160](v38, 0x50C80EE9192B6);
          File::~File((File *)&v45);
          if (v17 == ++v25)
            goto LABEL_38;
        }
        perror((const char *)(*(_QWORD *)&v51[4] - v50));
LABEL_42:
        File::~File((File *)&v45);
      }
LABEL_43:
      v15 = 0;
LABEL_44:
      if (v47)
        MEMORY[0x1AF44D160](v47, 0x80C80B8603338);
      File::~File((File *)v49);
      if (v18 <= a3)
        v40 = v15;
      else
        v40 = 0;
      ++v16;
      if ((v40 & 1) == 0)
        goto LABEL_53;
    }
  }
  perror((const char *)(*(_QWORD *)&v51[4] - v50));
  File::~File((File *)v49);
LABEL_52:
  v15 = 0;
LABEL_53:
  if (*(_QWORD *)&v51[4])
    MEMORY[0x1AF44D160](*(_QWORD *)&v51[4], 0x1000C8077774924);
  return v15;
}

void sub_1ADD66E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t v33;

  std::locale::~locale(&a15);
  File::~File((File *)&a31);
  v33 = *(_QWORD *)(v31 - 112);
  if (v33)
    MEMORY[0x1AF44D160](v33, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t NgramCounts<double>::readMinCounts(double *a1, File *this, unsigned int a3, uint64_t a4, int a5)
{
  char *v10;
  _QWORD *v11;
  Vocab *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v19;
  unsigned int v20;
  _DWORD **v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *i;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _BYTE v34[404];
  _OWORD v35[51];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v10 = File::getline(this);
  if (v10)
  {
    if (!strcmp(v10, "SRILM_BINARY_COUNTS_001\n"))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"binary format not yet support in readMinCounts\n", 47);
      return 0;
    }
    File::ungetline((uint64_t)this);
    memset(v35, 0, 512);
    v11 = (_QWORD *)operator new[]();
    *v11 = 8;
    v13 = (uint64_t)(v11 + 2);
    v26 = v11;
    v11[1] = a3;
    v14 = v11 + 1;
    if (a3)
    {
      bzero(v11 + 2, 8 * a3);
      LODWORD(v31) = 0;
      HIDWORD(v31) = a3;
      v32 = 0;
      v33 = 0;
      Array<char>::alloc((uint64_t)&v31, a3 - 1, 0);
      LODWORD(v28) = 0;
      HIDWORD(v28) = a3;
      v29 = 0;
      v30 = 0;
      Array<unsigned int *>::alloc((uint64_t)&v28, a3 - 1, 0);
      v15 = 0;
      do
      {
        v16 = operator new[]();
        v17 = v15 - v28;
        *(_QWORD *)(v29 + 8 * (v15 - (int)v28)) = v16;
        **(_DWORD **)(v29 + 8 * v17) = -1;
        *(_BYTE *)(v32 + v15 - (int)v31) = 0;
        ++v15;
      }
      while (a3 != v15);
    }
    else
    {
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 0;
    }
    Vocab::setCompareVocab(0, v12);
    for (i = 0;
          ;
          NgramCounts<double>::updateCountsMinCounts(a1, v19, a3, a4, a5, (uint64_t)v35, (Vocab *)v34, v29 - 8 * (int)v28, *(double *)&i, v32 - (int)v31, v13))
    {
      v19 = NgramCounts<double>::readNgram(this, (char *)v35, (const char **)0x65, &i);
      if (!v19)
        break;
    }
    if (a3)
    {
      v20 = a3 - 1;
      v21 = (_DWORD **)&v26[a3 + 1];
      do
      {
        v22 = v29;
        v23 = v28;
        if (*(_BYTE *)(v32 + (int)(v20 - v31)))
        {
          NgramCounts<double>::addCounts((uint64_t)a1, *(unsigned int **)(v29 + 8 * (int)(v20 - v28)), v21);
          v22 = v29;
          v23 = v28;
        }
        v24 = *(_QWORD *)(v22 + 8 * (int)(v20 - v23));
        if (v24)
          MEMORY[0x1AF44D160](v24, 0x1000C8052888210);
        --v21;
        --v20;
      }
      while (v20 != -1);
    }
    if (*v14)
    {
      v25 = *v14;
      do
        LHash<unsigned int,double>::clear(&v14[v25--], 0);
      while (v25 * 8);
    }
    MEMORY[0x1AF44D160](v26, 0x80C80B8603338);
    if (v29)
      MEMORY[0x1AF44D160](v29, 0x10C80436913F5);
    if (v32)
      MEMORY[0x1AF44D160](v32, 0x1000C8077774924);
  }
  return 1;
}

void sub_1ADD67210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18)
    MEMORY[0x1AF44D160](a18, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

double *NgramCounts<double>::updateCountsMinCounts(double *result, unsigned int a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, Vocab *a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int *v21;

  if (a2 <= a3)
  {
    v17 = (uint64_t)result;
    if ((double)*(unint64_t *)(a4 + 8 * (a2 - 1)) <= a9)
    {
      v18 = 0xFFFFFFFFLL;
      if (a5)
      {
LABEL_7:
        result = (double *)(*(uint64_t (**)(_QWORD, uint64_t, Vocab *, uint64_t))(**(_QWORD **)(v17 + 24) + 288))(*(_QWORD *)(v17 + 24), a6, a7, 100);
        if (!(_DWORD)result)
          return result;
        return NgramCounts<double>::updateMinCountsHelper(v17, a2, (const unsigned int *)v18, a7, a8, a10, a11, a9);
      }
    }
    else
    {
      if (!a9)
        return result;
      result = (double *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)result + 3) + 240))(*((_QWORD *)result + 3));
      v18 = (uint64_t)result;
      if ((_DWORD)result == -1)
        return result;
      if (a5)
        goto LABEL_7;
    }
    v19 = *(uint64_t **)(v17 + 24);
    v20 = *v19;
    if (*(_BYTE *)(v17 + 32))
    {
      (*(void (**)(_QWORD, uint64_t, Vocab *, uint64_t))(v20 + 256))(*(_QWORD *)(v17 + 24), a6, a7, 100);
    }
    else
    {
      v21 = (unsigned int *)(*(uint64_t (**)(_QWORD))(v20 + 88))(*(_QWORD *)(v17 + 24));
      (*(void (**)(uint64_t *, uint64_t, Vocab *, uint64_t, _QWORD))(*v19 + 272))(v19, a6, a7, 100, *v21);
    }
    return NgramCounts<double>::updateMinCountsHelper(v17, a2, (const unsigned int *)v18, a7, a8, a10, a11, a9);
  }
  return result;
}

uint64_t NgramCounts<double>::addCounts(uint64_t a1, unsigned int *a2, _DWORD **a3)
{
  int v4;
  _DWORD **v5;
  uint64_t result;
  _QWORD *v7;
  double *v8;
  double v9;
  uint64_t v10;
  unsigned int v11;
  _BYTE v12[24];
  uint64_t v13;
  char v14;

  v4 = *(unsigned __int8 *)(a1 + 152);
  v5 = (_DWORD **)(a1 + 160);
  v12[0] = 0;
  if (v4)
    result = Trie<unsigned int,unsigned int>::findTrie(v5, a2, v12);
  else
    result = (uint64_t)Trie<unsigned int,unsigned long>::insertTrie(v5, a2, v12);
  v7 = (_QWORD *)result;
  if (result)
  {
    LHashIter<unsigned int,double>::LHashIter((uint64_t)v12, a3, 0);
    v11 = 0;
    while (1)
    {
      v8 = (double *)LHashIter<unsigned int,double>::next((uint64_t)v12, &v11);
      if (!v8)
        break;
      v9 = *v8;
      v14 = 0;
      v10 = LHash<unsigned int,Trie<unsigned int,unsigned long>>::insert(v7, v11, &v14);
      if (!v14)
        *(_DWORD *)v10 = 0;
      *(double *)(v10 + 8) = v9 + *(double *)(v10 + 8);
    }
    result = v13;
    if (v13)
      return MEMORY[0x1AF44D160](v13, 0x1000C8052888210);
  }
  return result;
}

void sub_1ADD674B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    MEMORY[0x1AF44D160](a13, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t NgramCounts<double>::readMinCounts(double *a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  uint64_t v10;
  size_t v11;
  _QWORD *v12;
  Vocab *v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  double v20;
  unsigned int Ngram;
  char v22;
  uint64_t v23;
  unsigned int v24;
  _DWORD **v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _BYTE v39[404];
  _OWORD v40[51];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = 8 * a3;
  memset(v40, 0, 512);
  v12 = (_QWORD *)operator new[]();
  *v12 = 8;
  v14 = (uint64_t)(v12 + 2);
  v31 = v12;
  v12[1] = v10;
  v15 = v12 + 1;
  if (a3)
  {
    bzero(v12 + 2, v11);
    LODWORD(v36) = 0;
    HIDWORD(v36) = a3;
    v37 = 0;
    v38 = 0;
    Array<char>::alloc((uint64_t)&v36, a3 - 1, 0);
    LODWORD(v33) = 0;
    HIDWORD(v33) = a3;
    v34 = 0;
    v35 = 0;
    Array<unsigned int *>::alloc((uint64_t)&v33, a3 - 1, 0);
    v16 = 0;
    do
    {
      v17 = operator new[]();
      v18 = v16 - v33;
      *(_QWORD *)(v34 + 8 * (v16 - (int)v33)) = v17;
      **(_DWORD **)(v34 + 8 * v18) = -1;
      *(_BYTE *)(v37 + v16 - (int)v36) = 0;
      ++v16;
    }
    while (a3 != v16);
  }
  else
  {
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
  }
  Vocab::setCompareVocab(0, v13);
  while ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    v19 = *(uint64_t **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v32 = v19;
    v20 = (double)*v19;
    if (v19[10] == v19[11])
    {
      Ngram = NgramCounts<unsigned long>::readNgram(v19 + 4, (uint64_t ***)v40, 0x65u);
      if (!Ngram)
      {
        v22 = 0;
        goto LABEL_13;
      }
      NgramCounts<double>::updateCountsMinCounts(a1, Ngram, a3, a4, a5, (uint64_t)v40, (Vocab *)v39, v34 - 8 * (int)v33, v20, v37 - (int)v36, v14);
    }
    else
    {
      NgramCounts<double>::updateCountsMinCounts(a1, a3, a4, a5, v19 + 10, (Vocab *)v39, v34 - 8 * (int)v33, v37 - (int)v36, v20, v14);
    }
    v22 = 1;
LABEL_13:
    v23 = (uint64_t)v32;
    v32 = 0;
    if (v23)
      std::default_delete<quasar::lm::TokenStringAndCount const>::operator()[abi:ne180100]((uint64_t)&v32, v23);
    if ((v22 & 1) == 0)
      break;
  }
  if (a3)
  {
    v24 = a3 - 1;
    v25 = (_DWORD **)&v31[a3 + 1];
    do
    {
      v26 = v34;
      v27 = v33;
      if (*(_BYTE *)(v37 + (int)(v24 - v36)))
      {
        NgramCounts<double>::addCounts((uint64_t)a1, *(unsigned int **)(v34 + 8 * (int)(v24 - v33)), v25);
        v26 = v34;
        v27 = v33;
      }
      v28 = *(_QWORD *)(v26 + 8 * (int)(v24 - v27));
      if (v28)
        MEMORY[0x1AF44D160](v28, 0x1000C8052888210);
      --v25;
      --v24;
    }
    while (v24 != -1);
  }
  if (*v15)
  {
    v29 = *v15;
    do
      LHash<unsigned int,double>::clear(&v15[v29--], 0);
    while (v29 * 8);
  }
  MEMORY[0x1AF44D160](v31, 0x80C80B8603338);
  if (v34)
    MEMORY[0x1AF44D160](v34, 0x10C80436913F5);
  if (v37)
    MEMORY[0x1AF44D160](v37, 0x1000C8077774924);
  return 1;
}

void sub_1ADD6789C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18)
    MEMORY[0x1AF44D160](a18, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

double *NgramCounts<double>::updateCountsMinCounts(double *result, unsigned int a2, uint64_t a3, int a4, _QWORD *a5, Vocab *a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10)
{
  unint64_t v10;
  uint64_t v17;
  uint64_t v18;

  v10 = (uint64_t)(a5[1] - *a5) >> 2;
  if (v10 <= a2)
  {
    v17 = (uint64_t)result;
    if ((double)*(unint64_t *)(a3 + 8 * (v10 - 1)) <= a9)
    {
      v18 = 0xFFFFFFFFLL;
    }
    else
    {
      if (!a9)
        return result;
      result = (double *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)result + 3) + 240))(*((_QWORD *)result + 3));
      v18 = (uint64_t)result;
      if ((_DWORD)result == -1)
        return result;
    }
    result = (double *)(*(uint64_t (**)(_QWORD, _QWORD *, Vocab *, uint64_t, BOOL))(**(_QWORD **)(v17 + 24)
                                                                                           + 296))(*(_QWORD *)(v17 + 24), a5, a6, 100, a4 != 0);
    if ((_DWORD)result)
      return NgramCounts<double>::updateMinCountsHelper(v17, (a5[1] - *a5) >> 2, (const unsigned int *)v18, a6, a7, a8, a10, a9);
  }
  return result;
}

uint64_t NgramCounts<double>::write(uint64_t a1, File *a2)
{
  return NgramCounts<double>::write(a1, a2, *(_DWORD *)(a1 + 156), 0);
}

uint64_t NgramCounts<double>::write(uint64_t a1, File *a2, unsigned int a3, unsigned int a4)
{
  char **v8;
  char *v9;
  char **v10;

  v8 = (char **)_ZTW14writeBufferTLS();
  v9 = *v8;
  if (!*v8)
  {
    v10 = v8;
    v9 = (char *)malloc_type_calloc(0x2710uLL, 1uLL, 0x100004077774924uLL);
    *v10 = v9;
  }
  return NgramCounts<double>::writeNode(a1, (_DWORD **)(a1 + 160), a2, v9, v9, 1u, a3, a4);
}

uint64_t NgramCounts<double>::writeNode(uint64_t a1, _DWORD **a2, File *a3, const char *a4, char *a5, unsigned int a6, unsigned int a7, unsigned int a8)
{
  uint64_t (*v14)(Vocab *, uint64_t);
  BOOL v15;
  int v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  char *v20;
  _QWORD *v21;
  size_t v22;
  _QWORD *v23;
  size_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t result;
  int v30;
  _BYTE v31[24];
  uint64_t v32;
  unsigned int v33;

  if (a8)
    v14 = Vocab::compareIndex(*(Vocab **)(a1 + 24));
  else
    v14 = 0;
  v33 = 0;
  LHashIter<unsigned int,Trie<unsigned int,double>>::LHashIter((uint64_t)v31, a2, (uint64_t)v14);
  if (a7)
    v15 = a6 == a7;
  else
    v15 = 1;
  v16 = v15;
  v30 = v16;
  while (!File::error(a3))
  {
    v17 = LHashIter<unsigned int,Trie<unsigned int,double>>::next((uint64_t)v31, &v33);
    if (!v17)
      break;
    v18 = (const char *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v33);
    v19 = v18;
    if (v18)
    {
      v20 = &a5[strlen(v18)];
      if (v20 + 1 <= a4 + 10000)
      {
        strcpy(a5, v19);
        if (v30)
        {
          snprintf(ctsBuffer, 0x64uLL, "%lg", *(double *)(v17 + 8));
          File::fprintf(a3, "%s\t%s\n", a4, ctsBuffer);
        }
        if (a7 - 1 >= a6)
        {
          *v20 = 32;
          NgramCounts<double>::writeNode(a1, v17, a3, a4, v20 + 1, a6 + 1, a7, a8);
        }
      }
      else
      {
        *a5 = 48;
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"ngram [", 7);
        v22 = strlen(a4);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)a4, v22);
        v24 = strlen(v19);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v19, v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"] exceeds write buffer\n", 23);
      }
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"undefined word index ", 21);
      v26 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\n", 1);
    }
  }
  result = v32;
  if (v32)
    return MEMORY[0x1AF44D160](v32, 0x1000C8052888210);
  return result;
}

void sub_1ADD67D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17)
    MEMORY[0x1AF44D160](a17, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t NgramCounts<double>::writeBinary(uint64_t a1, File *this, uint64_t a3)
{
  int v6;
  _QWORD *v8;
  int *v9;
  char *v10;
  size_t v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  off_t v14;
  std::locale v15;

  File::fprintf(this, "%s", "SRILM_BINARY_COUNTS_001\n");
  v6 = a3;
  if (!(_DWORD)a3)
    v6 = *(_DWORD *)(a1 + 156);
  File::fprintf(this, "maxorder %u\n", v6);
  (*(void (**)(_QWORD, File *, _QWORD))(**(_QWORD **)(a1 + 24) + 344))(*(_QWORD *)(a1 + 24), this, 0);
  v14 = File::ftell(this);
  if ((v14 & 0x8000000000000000) == 0)
    return NgramCounts<double>::writeBinaryNode(a1, (_DWORD **)(a1 + 160), 1u, a3, this, &v14);
  v8 = File::position((const char **)this, MEMORY[0x1E0DE4A50]);
  v9 = __error();
  v10 = srilm_ts_strerror(*v9);
  v11 = strlen(v10);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, v11);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  v13 = std::locale::use_facet(&v15, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  return 0;
}

void sub_1ADD67E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12)
{
  std::locale::~locale(&a12);
  _Unwind_Resume(a1);
}

uint64_t NgramCounts<double>::writeBinaryNode(uint64_t a1, _DWORD **a2, unsigned int a3, uint64_t a4, File *a5, off_t *a6)
{
  unsigned int v11;
  uint64_t result;
  int v13;
  unsigned int v14;
  off_t v15;
  BOOL v16;
  char v17;
  off_t v18;
  uint64_t v19;
  unsigned int v20;
  double v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  int *v31;
  char *v32;
  size_t v33;
  _QWORD *v34;
  const std::locale::facet *v35;
  char v37;
  unsigned int v38;
  std::locale v39[3];
  uint64_t v40;

  v11 = a4;
  if (!(_DWORD)a4)
    v11 = *(_DWORD *)(a1 + 156);
  if (v11 < a3)
    return 1;
  if (v11 - a3 >= 4)
    v13 = 8;
  else
    v13 = 4;
  if (v11 == a3)
    v14 = 2;
  else
    v14 = v13;
  v15 = *a6;
  result = writeBinaryCount(a5, 0, v14);
  if ((_DWORD)result)
  {
    if ((_DWORD)a4)
      v16 = a3 > a4;
    else
      v16 = 0;
    v17 = v16;
    v37 = v17;
    while (1)
    {
      v18 = *a6 + result;
      *a6 = v18;
      if ((v37 & 1) == 0)
      {
        LHashIter<unsigned int,Trie<unsigned int,double>>::LHashIter((uint64_t)v39, a2, (uint64_t)SArray_compareKey<unsigned int>);
        v38 = 0;
        do
        {
          v19 = LHashIter<unsigned int,Trie<unsigned int,double>>::next((uint64_t)v39, &v38);
          if (!v19)
            break;
          v20 = writeBinaryCount(a5, v38, 0);
          if (!v20)
            break;
          *a6 += v20;
          v21 = 0.0;
          if (a3 >= a4)
            v21 = *(double *)(v19 + 8);
          v22 = writeBinaryCount(a5, v21);
          if (!v22)
            break;
          *a6 += v22;
        }
        while (NgramCounts<double>::writeBinaryNode(a1, v19, a3 + 1, a4, a5, a6));
        if (v40)
          MEMORY[0x1AF44D160](v40, 0x1000C8052888210);
        if (v19)
          return 0;
        v18 = *a6;
      }
      if ((File::fseek(a5, v15, 0) & 0x80000000) != 0)
        break;
      result = writeBinaryCount(a5, v18 - v15, v14);
      if (!(_DWORD)result)
        return result;
      v23 = result;
      if (result <= v14)
      {
        if ((File::fseek(a5, v18, 0) & 0x80000000) == 0)
          return 1;
        break;
      }
      v24 = File::offset((uint64_t)a5, MEMORY[0x1E0DE4A50]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"increasing offset bytes from ", 29);
      v25 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" to ", 4);
      v26 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" (order ", 8);
      v27 = (_QWORD *)std::ostream::operator<<();
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)",", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" level ", 7);
      v29 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)")\n", 2);
      if ((File::fseek(a5, v15, 0) & 0x80000000) != 0)
        break;
      *a6 = v15;
      result = writeBinaryCount(a5, 0, v23);
      v14 = v23;
      if (!(_DWORD)result)
        return result;
    }
    v30 = File::offset((uint64_t)a5, MEMORY[0x1E0DE4A50]);
    v31 = __error();
    v32 = srilm_ts_strerror(*v31);
    v33 = strlen(v32);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v32, v33);
    std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(_QWORD *)(*v34 - 24)));
    v35 = std::locale::use_facet(v39, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v35->__vftable[2].~facet_0)(v35, 10);
    std::locale::~locale(v39);
    std::ostream::put();
    std::ostream::flush();
    return 0;
  }
  return result;
}

void sub_1ADD682B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  std::locale::~locale(&a13);
  _Unwind_Resume(a1);
}

uint64_t NgramCounts<double>::parseNgram(Vocab *a1, char *a2, const char **a3, char **a4)
{
  int v5;
  int v7;
  uint64_t v8;
  const char *v9;
  char *v11;

  v5 = (int)a3;
  v7 = Vocab::parseWords(a1, a2, a3, a4);
  if (v7 == v5)
    return 0;
  v8 = (v7 - 1);
  v9 = *(const char **)&a2[8 * v8];
  v11 = 0;
  if (sscanf(v9, "%lf", &v11) != 1)
    return 0;
  *a4 = v11;
  *(_QWORD *)&a2[8 * v8] = 0;
  return v8;
}

double NgramCounts<double>::sumCounts(uint64_t a1, uint64_t a2)
{
  return NgramCounts<double>::sumNode(a1, a1 + 160, 1u, a2);
}

double NgramCounts<double>::sumNode(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  double i;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _BYTE v13[24];
  uint64_t v14;

  if (a3 > a4 || !*(_QWORD *)a2 || **(_DWORD **)a2 <= 0x1Fu)
    return *(double *)(a2 + 8);
  LHashIter<unsigned int,Trie<unsigned int,double>>::LHashIter((uint64_t)v13, (_DWORD **)a2, 0);
  v12 = 0;
  v10 = a3 + 1;
  for (i = 0.0; ; i = i + NgramCounts<double>::sumNode(a1, v11, v10, a4))
  {
    v11 = LHashIter<unsigned int,Trie<unsigned int,double>>::next((uint64_t)v13, &v12);
    if (!v11)
      break;
  }
  *(double *)(a2 + 8) = i;
  if (v14)
    MEMORY[0x1AF44D160](v14, 0x1000C8052888210);
  return i;
}

void sub_1ADD68450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    MEMORY[0x1AF44D160](a14, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t NgramCounts<double>::setCounts(uint64_t a1, double a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t result;
  _BYTE v8[80];
  int v9;
  _BYTE v10[12];
  int v11;

  v4 = *(_DWORD *)(a1 + 156);
  *(_DWORD *)&v10[8] = 0;
  v11 = 0;
  v9 = 0;
  *(_QWORD *)v10 = (v4 + 1);
  if (v4 == -1 || (Array<unsigned int>::alloc((uint64_t)&v9, v4, 0), *(_DWORD *)(a1 + 156)))
  {
    v5 = 1;
    do
    {
      TrieIter2<unsigned int,double>::TrieIter2((uint64_t)v8, (_DWORD **)(a1 + 160), (_DWORD *)(*(_QWORD *)&v10[4] - 4 * v9), v5, 0);
      while (1)
      {
        v6 = TrieIter2<unsigned int,double>::next((uint64_t)v8);
        if (!v6)
          break;
        *(double *)(v6 + 8) = a2;
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t)v8);
      ++v5;
    }
    while (v5 <= *(_DWORD *)(a1 + 156));
  }
  result = *(_QWORD *)&v10[4];
  if (*(_QWORD *)&v10[4])
    return MEMORY[0x1AF44D160](*(_QWORD *)&v10[4], 0x1000C8052888210);
  return result;
}

void sub_1ADD6854C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = *(_QWORD *)(v10 - 64);
  if (v12)
    MEMORY[0x1AF44D160](v12, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t NgramCounts<double>::memStats(uint64_t a1, uint64_t *a2)
{
  *a2 += 64;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 352))(*(_QWORD *)(a1 + 24));
  return Trie<unsigned int,double>::memStats((_DWORD **)(a1 + 160), a2);
}

uint64_t NgramCounts<double>::readBinaryNode(uint64_t a1, _DWORD **a2, int a3, int a4, File *a5, off_t *a6, uint64_t a7, int *a8)
{
  uint64_t result;
  off_t v17;
  off_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int locale;
  unsigned int v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  _DWORD **v26;
  uint64_t v27;
  _QWORD *v28;
  const char *v29;
  uint64_t v30;
  _QWORD *v31;
  int *v32;
  char *v33;
  size_t v34;
  _QWORD *v35;
  const std::locale::facet *v36;
  _QWORD *v37;
  unint64_t v38;
  std::locale v39;

  if (!a4)
    return 1;
  v38 = 0;
  result = readBinaryCount(a5, &v38);
  if (!(_DWORD)result)
    return result;
  v17 = v38 + *a6;
  v18 = *a6 + result;
  *a6 = v18;
  if (a3)
  {
    if (v18 < v17)
    {
      v19 = (a3 - 1);
      v20 = (a4 - 1);
      do
      {
        *(double *)&v39.__locale_ = 0.0;
        result = readBinaryCount(a5, (unint64_t *)&v39);
        if (!(_DWORD)result)
          return result;
        locale = v39.__locale_;
        *a6 += result;
        if (a8[1] <= locale)
        {
          v37 = File::offset((uint64_t)a5, MEMORY[0x1E0DE4A50]);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"word index ", 11);
          v28 = (_QWORD *)std::ostream::operator<<();
          v29 = " out of range\n";
          v30 = 14;
          goto LABEL_28;
        }
        v22 = *(_DWORD *)Array<unsigned int>::operator[](a8, locale);
        if (v22 != -1)
        {
          if (*(_BYTE *)(a1 + 152))
          {
            LODWORD(v39.__locale_) = 0;
            if (LHash<unsigned int,Trie<unsigned int,unsigned int>>::locate(a2, v22, &v39))
            {
              v23 = (uint64_t)&(*a2)[6 * LODWORD(v39.__locale_) + 2];
LABEL_17:
              *(double *)&v39.__locale_ = 0.0;
              result = readBinaryCount(a5, (double *)&v39);
              if (!(_DWORD)result)
                return result;
              *(double *)(v23 + 8) = *(double *)&v39.__locale_ + *(double *)(v23 + 8);
              *a6 += result;
              v25 = a1;
              v26 = (_DWORD **)v23;
              v27 = v19;
              goto LABEL_19;
            }
          }
          else
          {
            LOBYTE(v39.__locale_) = 0;
            v24 = (_DWORD *)LHash<unsigned int,Trie<unsigned int,unsigned long>>::insert(a2, v22, &v39);
            v23 = (uint64_t)v24;
            if (!LOBYTE(v39.__locale_))
            {
              *v24 = 0;
              goto LABEL_17;
            }
            if (v24)
              goto LABEL_17;
          }
        }
        *(double *)&v39.__locale_ = 0.0;
        result = readBinaryCount(a5, (double *)&v39);
        if (!(_DWORD)result)
          return result;
        *a6 += result;
        v25 = a1;
        v26 = a2;
        v27 = 0;
LABEL_19:
        result = NgramCounts<double>::readBinaryNode(v25, v26, v27, v20, a5, a6, a7, a8);
        if (!(_DWORD)result)
          return result;
        v18 = *a6;
      }
      while (*a6 < v17);
    }
    if (v18 != v17)
    {
      v28 = File::offset((uint64_t)a5, MEMORY[0x1E0DE4A50]);
      v29 = "data misaligned\n";
      v30 = 16;
LABEL_28:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
      return 0;
    }
    return 1;
  }
  if ((File::fseek(a5, v17, 0) & 0x80000000) == 0)
  {
    *a6 = v17;
    return 1;
  }
  v31 = File::offset((uint64_t)a5, MEMORY[0x1E0DE4A50]);
  v32 = __error();
  v33 = srilm_ts_strerror(*v32);
  v34 = strlen(v33);
  v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v33, v34);
  std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(_QWORD *)(*v35 - 24)));
  v36 = std::locale::use_facet(&v39, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
  std::locale::~locale(&v39);
  std::ostream::put();
  std::ostream::flush();
  return 0;
}

void sub_1ADD688B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

double *NgramCounts<double>::updateMinCountsHelper(uint64_t a1, int a2, const unsigned int *a3, Vocab *this, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  unsigned int v12;
  uint64_t v15;
  unsigned int v16;
  const unsigned int *v17;
  double *result;
  char v19;

  v12 = a3;
  v15 = (a2 - 1);
  v16 = *((_DWORD *)this + v15);
  *((_DWORD *)this + v15) = -1;
  if (Vocab::compare(this, *(const unsigned int **)(a5 + 8 * v15), a3))
  {
    if (*(_BYTE *)(a6 + v15))
    {
      NgramCounts<double>::addCounts(a1, *(unsigned int **)(a5 + 8 * v15), (_DWORD **)(a7 + 8 * v15));
      *(_BYTE *)(a6 + v15) = 0;
    }
    LHash<unsigned int,double>::clear((_QWORD *)(a7 + 8 * v15), 0);
    Vocab::copy(*(_QWORD *)(a5 + 8 * v15), (unsigned int *)this, v17);
  }
  if (v12 != -1)
  {
    v19 = 0;
    result = (double *)LHash<unsigned int,double>::insert((_QWORD *)(a7 + 8 * v15), v12, &v19);
    *result = *result + 1.0;
    return result;
  }
  if (!*(_BYTE *)(a1 + 152))
  {
    result = (double *)NgramCounts<unsigned long>::insertCount(a1, (unsigned int *)this, v16);
    if (!result)
      goto LABEL_10;
    goto LABEL_9;
  }
  result = (double *)NgramCounts<unsigned long>::findCount(a1, (unsigned int *)this, v16);
  if (result)
LABEL_9:
    *result = *result + a8;
LABEL_10:
  *(_BYTE *)(a6 + v15) = 1;
  return result;
}

void sub_1ADD68B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::AudioAnalyticsFrameInfo::ComputeBacktraces(uint64_t *a1, uint64_t a2, uint64_t a3, const float **a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14;
  double v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  float v26;
  float v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  float v35;
  int v36;
  uint64_t v37;
  float v38;
  _DWORD *v39;
  int v40;
  uint64_t v41;
  char v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  int *v50;
  int v51;
  int v52;
  int *v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  int v57;
  int v58;
  float v59;
  uint64_t v60;
  char v61;
  int v62;
  int v63;
  int v64;
  int *v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  float v70;
  uint64_t v71;
  int v72;
  int v73;
  float v74;
  const float *v75[3];

  v14 = *(unsigned int *)(a3 + 8);
  memset(v75, 0, sizeof(v75));
  kaldi::Vector<float>::Resize((void **)v75, v14, 1);
  kaldi::ComputeLocalCost((const float **)a3, a4, a2, (uint64_t)v75);
  v15 = log(*(float *)(a2 + 40) + 1.0);
  v16 = *(float *)(a2 + 28);
  v17 = *a5;
  v18 = *a7;
  if (*a6 == a6[1])
    std::vector<std::pair<int,int>>::resize((uint64_t)a6, (int)v14);
  v19 = v15 * v15;
  v20 = v16 * v19;
  if (kaldi::pitch_use_naive_search1)
  {
    if ((int)v14 >= 1)
    {
      v21 = 0;
      v22 = 0;
      v23 = *a1;
      do
      {
        v24 = 0;
        v25 = -1;
        v26 = INFINITY;
        do
        {
          v27 = *(float *)(v17 + 4 * v24);
          if ((float)(v27 + (float)((float)((v21 + v24) * (v21 + v24)) * v20)) < v26)
          {
            v26 = v27 + (float)((float)((v21 + v24) * (v21 + v24)) * v20);
            v25 = v24;
          }
          ++v24;
        }
        while (v14 != v24);
        *(float *)(v18 + 4 * v22) = v26;
        *(_DWORD *)(v23 + 8 * v22++) = v25;
        --v21;
      }
      while (v22 != v14);
    }
  }
  else if ((int)v14 >= 1)
  {
    v28 = 0;
    v29 = 0;
    v30 = *a1;
    v31 = *a6;
    v32 = 1;
    while (1)
    {
      v33 = v29;
      v34 = v29;
      v35 = *(float *)(v17 + 4 * v29) + (float)((float)((v29 - v28) * (v29 - v28)) * v20);
      if ((int)v14 <= v29 + 1)
        v36 = v29 + 1;
      else
        v36 = v14;
      v29 = v36 - 1;
      v37 = v34 + 1;
      do
      {
        v38 = v35;
        if (v37 >= v14)
          goto LABEL_21;
        v35 = *(float *)(v17 + 4 * v37) + (float)((float)((v32 + v33) * (v32 + v33)) * v20);
        ++v33;
        ++v37;
      }
      while (v35 < v38);
      v29 = v33 - 1;
LABEL_21:
      *(_DWORD *)(v30 + 8 * v28) = v29;
      *(float *)(v18 + 4 * v28) = v38;
      v39 = (_DWORD *)(v31 + 8 * v28);
      *v39 = v29;
      v39[1] = v14 - 1;
      ++v28;
      --v32;
      if (v28 == v14)
      {
        v40 = 0;
        v41 = *a6;
        while (1)
        {
          if ((v40 & 1) != 0)
          {
            v60 = 0;
            v61 = 0;
            v62 = 0;
LABEL_45:
            v63 = -(int)v60;
            v64 = v62;
            do
            {
              v65 = (int *)(v41 + 8 * v60);
              v66 = v65[1];
              if (v64 <= *v65)
                v67 = *v65;
              else
                v67 = v64;
              if (v66 == v67)
              {
                v64 = v67;
              }
              else
              {
                v68 = *a1;
                v69 = *(_DWORD *)(*a1 + 8 * v60);
                v64 = v67;
                if (v69 != v67)
                {
                  v64 = *(_DWORD *)(*a1 + 8 * v60);
                  if (v67 >= v66 - 1)
                  {
                    *v65 = v69;
                  }
                  else
                  {
                    v70 = *(float *)(v18 + 4 * v60);
                    v71 = v67;
                    v72 = ~v67 + v66;
                    v62 = *(_DWORD *)(*a1 + 8 * v60);
                    do
                    {
                      v73 = (v63 + v71) * (v63 + v71);
                      v74 = *(float *)(v17 + 4 * v71);
                      if ((float)(v74 + (float)((float)v73 * v20)) >= v70)
                      {
                        if (v71 > v62)
                          break;
                      }
                      else
                      {
                        v70 = v74 + (float)((float)v73 * v20);
                        v62 = v71;
                      }
                      ++v71;
                      --v72;
                    }
                    while (v72);
                    *v65 = v62;
                    if (v62 != v69)
                    {
                      *(float *)(v18 + 4 * v60) = v70;
                      *(_DWORD *)(v68 + 8 * v60++) = v62;
                      v61 = 1;
                      if (v60 != v14)
                        goto LABEL_45;
                      goto LABEL_66;
                    }
                  }
                }
              }
              ++v60;
              --v63;
            }
            while (v60 != v14);
            if ((v61 & 1) == 0)
              goto LABEL_67;
          }
          else
          {
            v42 = 0;
            v43 = 1 - v14;
            v44 = v14;
            v45 = v14 - 1;
            do
            {
              v46 = v44--;
              v47 = *(_DWORD *)(v41 + 8 * v44);
              v48 = v41 + 8 * v44;
              v51 = *(_DWORD *)(v48 + 4);
              v50 = (int *)(v48 + 4);
              v49 = v51;
              if (v51 >= v45)
                v52 = v45;
              else
                v52 = v49;
              if (v52 == v47)
              {
                v45 = *(_DWORD *)(v41 + 8 * v44);
              }
              else
              {
                v53 = (int *)(*a1 + 8 * v44);
                v45 = *v53;
                if (*v53 == v52)
                {
                  v45 = v52;
                }
                else
                {
                  v54 = v47 + 1;
                  if (v52 <= (int)v54)
                  {
                    *v50 = v45;
                  }
                  else
                  {
                    v55 = *(float *)(v18 + 4 * v44);
                    v56 = v52;
                    v57 = *v53;
                    do
                    {
                      v58 = (v43 + v56) * (v43 + v56);
                      v59 = *(float *)(v17 + 4 * v56);
                      if ((float)(v59 + (float)((float)v58 * v20)) >= v55)
                      {
                        if (v56 < v57)
                          break;
                      }
                      else
                      {
                        v55 = v59 + (float)((float)v58 * v20);
                        v57 = v56;
                      }
                      --v56;
                    }
                    while (v56 > v54);
                    *v50 = v57;
                    if (v57 != v45)
                    {
                      *(float *)(v18 + 4 * v44) = v55;
                      *v53 = v57;
                      v42 = 1;
                      v45 = v57;
                    }
                  }
                }
              }
              ++v43;
            }
            while (v46 > 1);
            if ((v42 & 1) == 0)
              goto LABEL_67;
          }
LABEL_66:
          if (++v40 == (_DWORD)v14)
            goto LABEL_67;
        }
      }
    }
  }
LABEL_67:
  *((_DWORD *)a1 + 7) = -1;
  kaldi::VectorBase<float>::AddVec<float>((uint64_t)a7, v75, 1.0);
  kaldi::Vector<float>::Destroy((uint64_t)v75);
}

void sub_1ADD68FC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineAudioAnalyticsFeatureImpl::OnlineAudioAnalyticsFeatureImpl(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void **v7;
  _QWORD *v8;
  void **v9;
  kaldi::LinearResample *v10;
  double v11;
  double v12;
  unsigned int v13;
  float v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v20;
  void *v21[3];

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 88) = 0;
  v7 = (void **)(a1 + 88);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  v8 = (_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  v9 = (void **)(a1 + 216);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_BYTE *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  v10 = (kaldi::LinearResample *)operator new();
  kaldi::LinearResample::LinearResample(v10, (int)*(float *)a2, (int)*(float *)(a2 + 36), *(float *)(a2 + 32), *(_DWORD *)(a2 + 48));
  *(_QWORD *)(a1 + 120) = v10;
  v11 = *(float *)(a2 + 36);
  v12 = (double)*(int *)(a2 + 52) / (v11 + v11);
  v13 = vcvtmd_s64_f64((1.0 / *(float *)(a2 + 16) + v12) * v11);
  *(_DWORD *)(a1 + 80) = vcvtpd_s64_f64((1.0 / *(float *)(a2 + 20) - v12) * v11);
  *(_DWORD *)(a1 + 84) = v13;
  *(_DWORD *)(a1 + 208) = 0;
  kaldi::SelectLags((float *)a2, v7);
  v14 = *(float *)(a2 + 36);
  memset(v21, 0, sizeof(v21));
  kaldi::Vector<float>::Resize(v21, *(unsigned int *)(a1 + 96), 1);
  kaldi::VectorBase<float>::CopyFromVec((uint64_t)v21, (const void **)v7);
  kaldi::VectorBase<float>::Add((uint64_t)v21, (float)-*(_DWORD *)(a1 + 80) / *(float *)(a2 + 36));
  v16 = *(_DWORD *)(a1 + 80);
  v15 = *(_DWORD *)(a1 + 84);
  v17 = operator new();
  kaldi::ArbitraryResample::ArbitraryResample(v17, (v15 - v16 + 1), v21, *(unsigned int *)(a2 + 52), *(float *)(a2 + 36), v14 * 0.5);
  *(_QWORD *)(a1 + 112) = v17;
  v18 = (_QWORD *)operator new();
  std::vector<kaldi::AudioAnalyticsFrameInfo::StateInfo>::vector(v18, *(int *)(a1 + 96));
  v18[3] = 0xFFFFFFFF00000000;
  v18[4] = 0;
  v20 = v18;
  std::deque<kaldi::AudioAnalyticsFrameInfo *>::push_back(v8, &v20);
  kaldi::Vector<float>::Resize(v9, *(unsigned int *)(a1 + 96), 0);
  kaldi::Vector<float>::Destroy((uint64_t)v21);
  return a1;
}

void sub_1ADD69218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *v9;
  void *v10;
  void *v11;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1AF44D190](v6, 0x1020C403D3F9D26);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  kaldi::Vector<float>::Destroy((uint64_t)(v2 + 41));
  v9 = (void *)v2[34];
  if (v9)
  {
    v2[35] = v9;
    operator delete(v9);
  }
  v10 = (void *)v2[31];
  if (v10)
  {
    v2[32] = v10;
    operator delete(v10);
  }
  kaldi::Vector<float>::Destroy(v5);
  v11 = *v7;
  if (*v7)
  {
    v2[24] = v11;
    operator delete(v11);
  }
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v4);
  kaldi::Vector<float>::Destroy(v3);
  _Unwind_Resume(a1);
}

void std::deque<kaldi::AudioAnalyticsFrameInfo *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<kaldi::AudioAnalyticsFrameInfo *>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void kaldi::OnlineAudioAnalyticsFeatureImpl::Compute(kaldi::OnlineAudioAnalyticsFeatureImpl *this, uint64_t a2, int32x2_t *a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *((_DWORD *)this + 15);
  if (v6)
  {
    v7 = *(_DWORD *)(a2 + 8);
    if (v7 >= 1)
    {
      v8 = 0;
      v9 = (int)((float)(*(float *)this * (float)v6) * 0.001 * *((float *)this + 1));
      do
      {
        v10 = v7 - v8;
        if (v10 >= v9)
          v10 = v9;
        v22 = 0;
        v23 = 0;
        v11 = v10 + v8;
        v21 = *(_QWORD *)a2 + 4 * v8;
        LODWORD(v22) = v10;
        kaldi::OnlineAudioAnalyticsFeatureImpl::AcceptWaveform((uint64_t)this, (uint64_t)&v21);
        v7 = *(_DWORD *)(a2 + 8);
        v8 = v11;
      }
      while (v11 < v7);
    }
  }
  else
  {
    kaldi::OnlineAudioAnalyticsFeatureImpl::AcceptWaveform((uint64_t)this, a2);
  }
  kaldi::OnlineAudioAnalyticsFeatureImpl::InputFinished(this);
  v12 = *((_DWORD *)this + 44);
  v13 = *((_DWORD *)this + 52);
  v14 = (v12 - v13);
  if (v12 == v13)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"No frames output in pitch extraction", 36);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
    }
    kaldi::Matrix<float>::Resize(a3, 0, 0, 0, 0);
  }
  else
  {
    kaldi::Matrix<float>::Resize(a3, (v12 - v13), 4, 0, 0);
    if ((int)v14 >= 1)
    {
      v15 = 0;
      v16 = 4;
      do
      {
        v17 = *(_QWORD *)a3 + 4 * a3[2].i32[0] * (int)v15;
        kaldi::MatrixBase<float>::NumCols((uint64_t)a3);
        v18 = (_DWORD *)(*((_QWORD *)this + 31) + v16);
        *(_DWORD *)v17 = *v18;
        v19 = (int)*(v18 - 1);
        v20 = *((_QWORD *)this + 11);
        *(float *)(v17 + 4) = 1.0 / *(float *)(v20 + 4 * v19);
        *(_DWORD *)(v17 + 8) = *(_DWORD *)(v20 + 4 * v19);
        *(_DWORD *)(v17 + 12) = *(_DWORD *)(*((_QWORD *)this + 34) + 4 * v15++);
        v16 += 8;
      }
      while (v14 != v15);
    }
  }
}

void sub_1ADD69560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::OnlineAudioAnalyticsFeatureImpl::AcceptWaveform(uint64_t a1, uint64_t a2)
{
  char v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  double v15;
  float v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  int v26;
  double v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  unint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  _DWORD *v54;
  int *v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void **v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t *v80;
  int v81;
  uint64_t v82;
  char *v83;
  int v84;
  int v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  int v93;
  int v94;
  float *v95;
  float *v96;
  uint64_t v98;
  float v99;
  float *v100;
  float v101;
  float v102;
  unsigned int v103;
  uint64_t v104;
  char **v105;
  int v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  void *__p;
  void *v113;
  uint64_t v114;
  _QWORD v115[2];
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120[3];
  int32x2_t v121[2];
  int v122;
  int32x2_t v123[2];
  int v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  void *v128[3];
  void *v129[3];
  char *v130;
  uint64_t v131;
  uint64_t v132;

  v3 = *(_BYTE *)(a1 + 296);
  v130 = 0;
  v131 = 0;
  v132 = 0;
  kaldi::LinearResample::Resample(*(_QWORD *)(a1 + 120), a2, v3, (void **)&v130);
  v4 = *(double *)(a1 + 304);
  v5 = *(double *)(a1 + 312);
  v6 = *(_QWORD *)(a1 + 320);
  if (*(_BYTE *)(a1 + 72))
  {
    v7 = (int)v131;
    v8 = *(_QWORD *)(a1 + 320);
  }
  else
  {
    v4 = v4 + kaldi::VecVec<float>((uint64_t)&v130, (const float **)&v130);
    v5 = v5 + kaldi::VectorBase<float>::Sum((uint64_t)&v130);
    v7 = (int)v131;
    v8 = v6 + (int)v131;
    v6 = *(_QWORD *)(a1 + 320);
  }
  v9 = kaldi::OnlineAudioAnalyticsFeatureImpl::NumFramesAvailable((kaldi::OnlineAudioAnalyticsFeatureImpl *)a1, v6 + v7, *(_BYTE *)(a1 + 73));
  v107 = *(int *)(a1 + 176);
  v10 = (v9 - v107);
  if (v9 == (_DWORD)v107)
  {
    kaldi::OnlineAudioAnalyticsFeatureImpl::UpdateRemainder(a1, (uint64_t)&v130);
  }
  else
  {
    v11 = v9;
    v13 = *(_DWORD *)(a1 + 80);
    v12 = *(_DWORD *)(a1 + 84);
    v14 = *(unsigned int *)(a1 + 96);
    v15 = *(float *)(a1 + 36) * 0.001;
    v16 = *(float *)(a1 + 4);
    v106 = (int)(v15 * *(float *)(a1 + 8));
    v17 = v12 + v106;
    memset(v129, 0, sizeof(v129));
    kaldi::Vector<float>::Resize(v129, (v12 + v106), 0);
    v18 = (v12 - v13 + 1);
    memset(v128, 0, sizeof(v128));
    kaldi::Vector<float>::Resize(v128, v18, 0);
    v125 = 0;
    v126 = 0;
    v127 = 0;
    kaldi::Vector<float>::Resize(&v125, v18, 0);
    kaldi::Matrix<float>::Matrix((uint64_t)v123, v10, v18, 0, 0);
    kaldi::Matrix<float>::Matrix((uint64_t)v121, v10, v18, 0, 0);
    v104 = v10;
    memset(v120, 0, sizeof(v120));
    v103 = v14;
    kaldi::Vector<float>::Resize(v120, v14, 0);
    v19 = v11;
    if ((int)v107 < v11)
    {
      v20 = 0;
      v21 = (int)(v15 * v16);
      v105 = (char **)(a1 + 184);
      v22 = v107;
      do
      {
        kaldi::OnlineAudioAnalyticsFeatureImpl::ExtractFrame(a1, (uint64_t)&v130, v22 * v21, (uint64_t)v129);
        if (*(_BYTE *)(a1 + 72))
        {
          if (v22 * v21 + v17 - *(_QWORD *)(a1 + 320) >= (int)v131)
            LODWORD(v23) = v131;
          else
            v23 = v22 * v21 + v17 - *(_QWORD *)(a1 + 320);
          v110 = 0;
          v108 = &v130[4 * v20];
          v109 = (v23 - v20);
          v8 += (int)v23 - v20;
          v4 = v4 + kaldi::VecVec<float>((uint64_t)&v108, (const float **)&v108);
          v5 = v5 + kaldi::VectorBase<float>::Sum((uint64_t)&v108);
          v20 = v23;
        }
        kaldi::ComputeCorrelation((uint64_t)v129, *(_DWORD *)(a1 + 80), *(_DWORD *)(a1 + 84), v106, v128, &v125);
        v24 = *(float *)(a1 + 44);
        v25 = kaldi::VectorBase<float>::Sum((uint64_t)&v125);
        v26 = v126;
        v109 = 0;
        v110 = 0;
        v108 = (char *)(*(_QWORD *)v123 + 4 * (v22 - v107) * v124);
        v27 = v4 / (double)v8 - v5 / (double)v8 * (v5 / (double)v8);
        LODWORD(v109) = kaldi::MatrixBase<float>::NumCols((uint64_t)v123);
        v28 = v27 * (double)v106 * (v27 * (double)v106) * v24;
        kaldi::ComputeNccf((uint64_t *)v128, (uint64_t *)&v125, (uint64_t *)&v108, v28);
        v118 = 0;
        v119 = 0;
        v117 = *(_QWORD *)v121 + 4 * (v22 - v107) * v122;
        LODWORD(v118) = kaldi::MatrixBase<float>::NumCols((uint64_t)v121);
        kaldi::ComputeNccf((uint64_t *)v128, (uint64_t *)&v125, &v117, 0.0);
        if (v22 < *(int *)(a1 + 68))
        {
          v29 = operator new();
          v30 = v29;
          v31 = v27;
          *(_QWORD *)v29 = 0;
          *(_QWORD *)(v29 + 8) = 0;
          *(_QWORD *)(v29 + 16) = 0;
          *(float *)(v29 + 24) = v25 / (float)v26;
          *(float *)(v29 + 28) = v31;
          v33 = *(uint64_t **)(a1 + 192);
          v32 = *(_QWORD *)(a1 + 200);
          if ((unint64_t)v33 >= v32)
          {
            v35 = ((char *)v33 - *v105) >> 3;
            if ((unint64_t)(v35 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v36 = v32 - (_QWORD)*v105;
            v37 = v36 >> 2;
            if (v36 >> 2 <= (unint64_t)(v35 + 1))
              v37 = v35 + 1;
            if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF8)
              v38 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v38 = v37;
            if (v38)
              v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 200, v38);
            else
              v39 = 0;
            v40 = (uint64_t *)&v39[8 * v35];
            *v40 = v30;
            v34 = v40 + 1;
            v42 = *(char **)(a1 + 184);
            v41 = *(char **)(a1 + 192);
            if (v41 != v42)
            {
              do
              {
                v43 = *((_QWORD *)v41 - 1);
                v41 -= 8;
                *--v40 = v43;
              }
              while (v41 != v42);
              v41 = *v105;
            }
            *(_QWORD *)(a1 + 184) = v40;
            *(_QWORD *)(a1 + 192) = v34;
            *(_QWORD *)(a1 + 200) = &v39[8 * v38];
            if (v41)
              operator delete(v41);
          }
          else
          {
            *v33 = v29;
            v34 = v33 + 1;
          }
          *(_QWORD *)(a1 + 192) = v34;
        }
        ++v22;
      }
      while (v19 != (_DWORD)v22);
    }
    kaldi::Matrix<float>::Matrix((uint64_t)&v117, v104, v103, 0, 0);
    kaldi::ArbitraryResample::Resample(*(_QWORD **)(a1 + 112), (uint64_t)v123, (uint64_t)&v117);
    kaldi::Matrix<float>::Resize(v123, 0, 0, 0, 0);
    kaldi::Matrix<float>::Matrix((uint64_t)v115, v104, v103, 0, 0);
    kaldi::ArbitraryResample::Resample(*(_QWORD **)(a1 + 112), (uint64_t)v121, (uint64_t)v115);
    kaldi::Matrix<float>::Resize(v121, 0, 0, 0, 0);
    kaldi::OnlineAudioAnalyticsFeatureImpl::UpdateRemainder(a1, (uint64_t)&v130);
    __p = 0;
    v113 = 0;
    v114 = 0;
    if ((int)v107 < v19)
    {
      v44 = 0;
      v45 = v19;
      v46 = v107;
      do
      {
        v47 = *(_QWORD *)(a1 + 168) + *(_QWORD *)(a1 + 160) - 1;
        v48 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + ((v47 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v47 & 0x1FF));
        v111 = 0;
        v49 = (uint64_t *)operator new();
        std::vector<kaldi::AudioAnalyticsFrameInfo::StateInfo>::vector(v49, (uint64_t)(v48[1] - *v48) >> 3);
        v49[3] = 0xFFFFFFFF00000000;
        v49[4] = (uint64_t)v48;
        v111 = v49;
        v50 = v115[0];
        v51 = v116;
        v52 = kaldi::MatrixBase<float>::NumCols((uint64_t)v115);
        if (v52 >= 1)
        {
          v53 = v52;
          v54 = (_DWORD *)(*v49 + 4);
          v55 = (int *)(v50 + v44 * v51);
          do
          {
            v56 = *v55++;
            *v54 = v56;
            v54 += 2;
            --v53;
          }
          while (v53);
        }
        v57 = v111;
        v58 = v117;
        v59 = (int)v119;
        v60 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v117);
        v110 = 0;
        v108 = (char *)(v58 + 4 * (v46 - v107) * v59);
        v109 = v60;
        kaldi::AudioAnalyticsFrameInfo::ComputeBacktraces(v57, a1, (uint64_t)&v108, (const float **)(a1 + 88), (uint64_t *)(a1 + 216), (uint64_t *)&__p, (uint64_t *)v120);
        kaldi::Vector<float>::Swap((uint64_t *)(a1 + 216), (uint64_t *)v120);
        kaldi::VectorBase<float>::Min((uint64_t *)(a1 + 216));
        *(double *)(a1 + 240) = *(double *)(a1 + 240) + v61;
        kaldi::VectorBase<float>::Add(a1 + 216, -v61);
        std::deque<kaldi::AudioAnalyticsFrameInfo *>::push_back((_QWORD *)(a1 + 128), &v111);
        v62 = *(int *)(a1 + 68);
        if (v46 < v62)
        {
          v63 = v117;
          v64 = (int)v119;
          v65 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v117);
          v110 = 0;
          v108 = (char *)(v63 + 4 * (v46 - v107) * v64);
          v109 = v65;
          v66 = *(void ***)(*(_QWORD *)(a1 + 184) + 8 * v46);
          kaldi::Vector<float>::Resize(v66, v65, 1);
          kaldi::VectorBase<float>::CopyFromVec((uint64_t)v66, (const void **)&v108);
          LODWORD(v62) = *(_DWORD *)(a1 + 68);
        }
        ++*(_DWORD *)(a1 + 176);
        if ((_DWORD)v62 - 1 == (_DWORD)v46 && !*(_BYTE *)(a1 + 72))
          kaldi::OnlineAudioAnalyticsFeatureImpl::RecomputeBacktraces((kaldi::OnlineAudioAnalyticsFeatureImpl *)a1);
        ++v46;
        v44 += 4;
      }
      while (v46 != v45);
    }
    LODWORD(v111) = 0;
    kaldi::VectorBase<float>::Min((uint64_t *)(a1 + 216), (int *)&v111);
    std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize(a1 + 248, *(unsigned int *)(a1 + 176));
    v67 = *(_QWORD *)(a1 + 168) + *(_QWORD *)(a1 + 160) - 1;
    kaldi::PitchFrameInfo::SetBestState(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + ((v67 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v67 & 0x1FF)), (int)v111, *(_QWORD *)(a1 + 256) - 8);
    v68 = *(_QWORD *)(a1 + 168);
    *(_DWORD *)(a1 + 208) = kaldi::PitchFrameInfo::ComputeLatency(*(kaldi::PitchFrameInfo **)(*(_QWORD *)(*(_QWORD *)(a1 + 136)+ (((v68 + *(_QWORD *)(a1 + 160) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v68 + *(_QWORD *)(a1 + 160) - 1) & 0x1FF)), *(_DWORD *)(a1 + 56));
    v69 = *(int *)(a1 + 76);
    if ((_DWORD)v69 != -1)
    {
      v70 = v68 - v69;
      if (v68 > v69)
      {
        v71 = 0;
        do
        {
          v72 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136)
                                      + (((unint64_t)(v71 + *(_QWORD *)(a1 + 160)) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((v71 + *(_QWORD *)(a1 + 160)) & 0x1FF));
          if (v72)
          {
            v73 = *(void **)v72;
            if (*(_QWORD *)v72)
            {
              *(_QWORD *)(v72 + 8) = v73;
              operator delete(v73);
            }
            MEMORY[0x1AF44D190](v72, 0x1020C403D3F9D26);
          }
          ++v71;
        }
        while (v70 != v71);
        v74 = *(_QWORD *)(a1 + 160);
        v75 = *(_QWORD *)(a1 + 136);
        v76 = (char *)(v75 + 8 * (v74 >> 9));
        if (*(_QWORD *)(a1 + 144) == v75)
          v77 = 0;
        else
          v77 = *(_QWORD *)v76 + 8 * (*(_QWORD *)(a1 + 160) & 0x1FFLL);
        v108 = (char *)(v75 + 8 * (v74 >> 9));
        v109 = v77;
        v78 = (char *)std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>::operator+[abi:ne180100]((uint64_t)&v108, v70);
        std::deque<kaldi::AudioAnalyticsFrameInfo *>::erase((_QWORD *)(a1 + 128), v76, v77, v78, v79);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + ((*(_QWORD *)(a1 + 160) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * (*(_QWORD *)(a1 + 160) & 0x1FFLL))
                  + 32) = 0;
      }
    }
    if (kaldi::g_kaldi_verbose_level >= 4)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v108, 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v108, (uint64_t)"Latency is ", 11);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v108);
    }
    v80 = (uint64_t *)(a1 + 272);
    std::vector<float>::resize(a1 + 272, *(unsigned int *)(a1 + 176));
    if (*(_DWORD *)(a1 + 176))
    {
      v81 = v131;
      v108 = 0;
      v109 = 0;
      v110 = 0;
      kaldi::Vector<float>::Resize((void **)&v108, v131, 1);
      kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v108, (const void **)&v130);
      kaldi::VectorBase<float>::ApplyAbs((uint64_t)&v108);
      if ((int)v104 >= 1)
      {
        v82 = 0;
        v83 = v108;
        v84 = v81 / (int)v104;
        v85 = 3 * (v81 / (int)v104);
        v86 = *v80;
        v87 = 4 * (v81 / (int)v104);
        v88 = -2 * (v81 / (int)v104);
        do
        {
          if (v81 >= (uint64_t)v87)
            v89 = v87;
          else
            v89 = v81;
          v90 = v82 + 1;
          v91 = v84 * (v82 + 1);
          v92 = (v91 - v85) & ~((v91 - v85) >> 31);
          v93 = v85 + v91;
          if (v93 >= v81)
            v94 = v81;
          else
            v94 = v93;
          v95 = (float *)&v83[4 * v92];
          v96 = v95 + 1;
          if (v92 != v94 && v96 != (float *)&v83[4 * v94])
          {
            v98 = 4 * v89 - 4 * (v88 & ~(v88 >> 31)) - 4;
            v99 = *v95;
            v100 = v95 + 1;
            do
            {
              v101 = *v100++;
              v102 = v101;
              if (v99 < v101)
              {
                v99 = v102;
                v95 = v96;
              }
              v96 = v100;
              v98 -= 4;
            }
            while (v98);
          }
          *(float *)(v86 + 4 * (v82 + v107)) = *v95;
          v87 += v84;
          v88 += v84;
          ++v82;
        }
        while (v90 != v104);
      }
      kaldi::Vector<float>::Destroy((uint64_t)&v108);
    }
    if (__p)
    {
      v113 = __p;
      operator delete(__p);
    }
    kaldi::Matrix<float>::~Matrix((uint64_t)v115);
    kaldi::Matrix<float>::~Matrix((uint64_t)&v117);
    kaldi::Vector<float>::Destroy((uint64_t)v120);
    kaldi::Matrix<float>::~Matrix((uint64_t)v121);
    kaldi::Matrix<float>::~Matrix((uint64_t)v123);
    kaldi::Vector<float>::Destroy((uint64_t)&v125);
    kaldi::Vector<float>::Destroy((uint64_t)v128);
    kaldi::Vector<float>::Destroy((uint64_t)v129);
  }
  kaldi::Vector<float>::Destroy((uint64_t)&v130);
}

void sub_1ADD69F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  char a68;
  uint64_t v68;

  if (__p)
    operator delete(__p);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a55);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a60);
  kaldi::Vector<float>::Destroy((uint64_t)&a65);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a68);
  kaldi::Matrix<float>::~Matrix((uint64_t)&STACK[0x200]);
  kaldi::Vector<float>::Destroy(v68 - 248);
  kaldi::Vector<float>::Destroy(v68 - 224);
  kaldi::Vector<float>::Destroy(v68 - 200);
  kaldi::Vector<float>::Destroy(v68 - 176);
  _Unwind_Resume(a1);
}

void kaldi::OnlineAudioAnalyticsFeatureImpl::InputFinished(kaldi::OnlineAudioAnalyticsFeatureImpl *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD v4[35];

  *((_BYTE *)this + 296) = 1;
  memset(v4, 0, 24);
  kaldi::OnlineAudioAnalyticsFeatureImpl::AcceptWaveform((uint64_t)this, (uint64_t)v4);
  kaldi::Vector<float>::Destroy((uint64_t)v4);
  if (*((_DWORD *)this + 44) < *((_DWORD *)this + 17) && !*((_BYTE *)this + 72))
    kaldi::OnlineAudioAnalyticsFeatureImpl::RecomputeBacktraces(this);
  *((_DWORD *)this + 52) = 0;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v4, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Pitch-tracking Viterbi cost is ", 31);
    v2 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" per frame, over ", 17);
    v3 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" frames.", 8);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v4);
  }
}

void sub_1ADD6A1F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineAudioAnalyticsFeatureImpl::NumFramesAvailable(kaldi::OnlineAudioAnalyticsFeatureImpl *this, uint64_t a2, char a3)
{
  double v3;
  int v4;
  int v6;

  v3 = *((float *)this + 9) * 0.001;
  v4 = (int)(v3 * *((float *)this + 2));
  if (!*((_BYTE *)this + 296))
    v4 += *((_DWORD *)this + 21);
  if (a2 < v4)
    return 0;
  v6 = (int)(v3 * *((float *)this + 1));
  if (!*((_BYTE *)this + 296) || (a3 & 1) != 0)
    return ((a2 - v4) / v6) + 1;
  else
    return (int)(float)((float)((float)a2 / (float)v6) + 0.5);
}

void kaldi::OnlineAudioAnalyticsFeatureImpl::UpdateRemainder(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const float *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  void *v17[3];

  v4 = *(unsigned int *)(a1 + 176);
  v5 = (int)(*(float *)(a1 + 36) * 0.001 * *(float *)(a1 + 4));
  v6 = v5 * v4;
  *(double *)(a1 + 304) = *(double *)(a1 + 304) + kaldi::VecVec<float>(a2, (const float **)a2);
  *(double *)(a1 + 312) = *(double *)(a1 + 312) + kaldi::VectorBase<float>::Sum(a2);
  v7 = *(_QWORD *)(a1 + 320) + *(int *)(a2 + 8);
  if (v7 >= v5 * v4)
  {
    memset(v17, 0, sizeof(v17));
    kaldi::Vector<float>::Resize(v17, (v7 - v6), 0);
    if (v7 > v6)
    {
      v8 = 0;
      v9 = 0;
      v10 = *(_QWORD *)(a1 + 320);
      v11 = *(const float **)a2;
      v12 = (char *)v17[0];
      v13 = (v5 * v4);
      v14 = (v13 << 32) - (v10 << 32);
      v15 = v13 - v10;
      do
      {
        if (v6 + v9 >= v10)
          v16 = (_DWORD *)((char *)v11 + ((v14 + v8) >> 30));
        else
          v16 = (_DWORD *)(*(_QWORD *)(a1 + 328) + 4 * (v15 + (int)v9 + *(_DWORD *)(a1 + 336)));
        *(_DWORD *)&v12[v8 >> 30] = *v16;
        ++v9;
        v8 += 0x100000000;
      }
      while (v6 + v9 < v7);
    }
    kaldi::Vector<float>::Swap((uint64_t *)(a1 + 328), (uint64_t *)v17);
    kaldi::Vector<float>::Destroy((uint64_t)v17);
  }
  else
  {
    kaldi::Vector<float>::Resize((void **)(a1 + 328), 0, 0);
  }
  *(_QWORD *)(a1 + 320) = v7;
}

void sub_1ADD6A41C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::OnlineAudioAnalyticsFeatureImpl::ExtractFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v12;
  float result;
  uint64_t *v14;
  uint64_t *v15;
  unsigned int v16;
  unsigned int v17;
  float *v18;
  uint64_t v19;
  float v20;
  double v21;
  unint64_t v22;
  float *v23;
  float v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v7 = *(_DWORD *)(a4 + 8);
  v8 = a3 - *(_QWORD *)(a1 + 320);
  v9 = v7 + v8;
  v10 = *(_DWORD *)(a2 + 8);
  if (v7 + (int)v8 <= v10)
  {
    if ((v8 & 0x80000000) != 0)
    {
      v16 = *(_DWORD *)(a1 + 336) + v8;
      v17 = *(_DWORD *)(a1 + 320) - a3;
      v30 = 0;
      v31 = 0;
      v18 = *(float **)a4;
      v28 = 0;
      v29 = (uint64_t)v18;
      LODWORD(v30) = v17;
      v26 = *(_QWORD *)(a1 + 328) + 4 * v16;
      v27 = v17;
      kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v29, (const void **)&v26);
      v30 = 0;
      v31 = 0;
      v19 = *(_QWORD *)a4 + 4 * v17;
      v28 = 0;
      v29 = v19;
      LODWORD(v30) = v9;
      v26 = *(_QWORD *)a2;
      v27 = v9;
      v15 = &v29;
      v14 = &v26;
    }
    else
    {
      v30 = 0;
      v31 = 0;
      v29 = *(_QWORD *)a2 + 4 * v8;
      LODWORD(v30) = v7;
      v14 = &v29;
      v15 = (uint64_t *)a4;
    }
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)v15, (const void **)v14);
    v20 = *(float *)(a1 + 12);
    if (v20 != 0.0)
    {
      v21 = v20;
      v22 = *(unsigned int *)(a4 + 8);
      if ((int)v22 >= 2)
      {
        v23 = *(float **)a4;
        v24 = -v20;
        do
          v23[(v22 - 1)] = v23[(v22 - 1)] + (float)(v24 * v23[(v22 - 2)]);
        while (v22-- > 2);
      }
      result = (1.0 - v21) * **(float **)a4;
      **(float **)a4 = result;
    }
  }
  else
  {
    v12 = v10 - v8;
    kaldi::VectorBase<float>::SetZero(a4);
    v30 = 0;
    v31 = 0;
    v29 = *(_QWORD *)a4;
    LODWORD(v30) = v12;
    kaldi::OnlineAudioAnalyticsFeatureImpl::ExtractFrame(a1, a2, a3, &v29);
  }
  return result;
}

void kaldi::OnlineAudioAnalyticsFeatureImpl::RecomputeBacktraces(kaldi::OnlineAudioAnalyticsFeatureImpl *this)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  float v8;
  int v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  double v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  BOOL v27;
  float v28;
  float v29;
  float v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD v43[35];
  void *v44;
  void *v45;
  uint64_t v46;
  void *v47[3];
  void *v48;
  uint64_t v49;
  uint64_t v50;

  if (*((_DWORD *)this + 19) == -1)
  {
    v2 = *((_DWORD *)this + 42);
    if (v2 != 1)
    {
      v3 = *((_DWORD *)this + 44);
      v5 = *((_QWORD *)this + 23);
      v4 = *((_QWORD *)this + 24);
      if (!v3)
        goto LABEL_26;
      v6 = 0;
      v7 = (unint64_t)(v4 - v5) >> 3;
      v8 = *((double *)this + 38) / (double)*((uint64_t *)this + 40)
         - *((double *)this + 39)
         / (double)*((uint64_t *)this + 40)
         * (*((double *)this + 39)
          / (double)*((uint64_t *)this + 40));
      v9 = v3 - v2 + 1;
      v10 = fabsf(v8);
      v11 = *((_QWORD *)this + 23);
      do
      {
        v12 = *(float *)(*(_QWORD *)v11 + 28);
        if (v12 != v8
          && (COERCE_INT(fabs(v12 - v8)) > 2139095039 || fabsf(v12 - v8) > (float)((float)(v10 + fabsf(v12)) * 0.01)))
        {
          v6 = 1;
        }
        v11 += 8;
        --v7;
      }
      while (v7);
      if ((v6 & 1) != 0)
      {
        v13 = *((unsigned int *)this + 56);
        v14 = *((float *)this + 9);
        v15 = *((float *)this + 2);
        v16 = *((float *)this + 11);
        v48 = 0;
        v49 = 0;
        v50 = 0;
        kaldi::Vector<float>::Resize(&v48, v13, 0);
        memset(v47, 0, sizeof(v47));
        kaldi::Vector<float>::Resize(v47, v49, 1);
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)v47, (const void **)&v48);
        v44 = 0;
        v45 = 0;
        v17 = 0.0;
        v46 = 0;
        if (v2 >= 2)
        {
          v18 = 0;
          v19 = (float)(int)(v14 * 0.001 * v15);
          v20 = (float)(v8 * v19) * (float)(v8 * v19) * v16;
          v21 = 8 * v9;
          do
          {
            v22 = *((_QWORD *)this + 23) + v21;
            v23 = *(_QWORD *)(v22 + 8 * v18);
            v24 = (float)(*(float *)(v23 + 28) * v19) * (float)(*(float *)(v23 + 28) * v19) * *((float *)this + 11);
            v25 = (float)(*(float *)(v23 + 24) + v24) / (float)(*(float *)(v23 + 24) + v20);
            v26 = fabsf(sqrtf(v25));
            v27 = v25 == -INFINITY;
            v28 = INFINITY;
            if (!v27)
              v28 = v26;
            kaldi::VectorBase<float>::Scale(*(_QWORD *)(v22 + 8 * v18++), v28);
            kaldi::AudioAnalyticsFrameInfo::ComputeBacktraces(*(uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 17)+ (((unint64_t)(v18 + *((_QWORD *)this + 20)) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v18 + *((_QWORD *)this + 20)) & 0x1FF)), (uint64_t)this, v23, (const float **)this + 11, (uint64_t *)&v48, (uint64_t *)&v44, (uint64_t *)v47);
            kaldi::Vector<float>::Swap((uint64_t *)&v48, (uint64_t *)v47);
            kaldi::VectorBase<float>::Min((uint64_t *)&v48);
            v30 = v29;
            kaldi::VectorBase<float>::Add((uint64_t)&v48, -v29);
            v17 = v17 + v30;
          }
          while (v2 - 1 != v18);
        }
        if (kaldi::g_kaldi_verbose_level > 2)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v43, 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Forward-cost per frame changed from ", 36);
          v31 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" to ", 4);
          std::ostream::operator<<();
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v43);
        }
        *((double *)this + 30) = v17;
        kaldi::Vector<float>::Swap((uint64_t *)this + 27, (uint64_t *)&v48);
        LODWORD(v43[0]) = 0;
        kaldi::VectorBase<float>::Min((uint64_t *)this + 27, (int *)v43);
        v32 = *((_QWORD *)this + 32);
        v33 = *((unsigned int *)this + 44);
        if (v33 != (v32 - *((_QWORD *)this + 31)) >> 3)
        {
          std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)this + 248, v33);
          v32 = *((_QWORD *)this + 32);
        }
        v34 = v32 - 8;
        v35 = *((_QWORD *)this + 21) + *((_QWORD *)this + 20) - 1;
        kaldi::PitchFrameInfo::SetBestState(*(uint64_t **)(*(_QWORD *)(*((_QWORD *)this + 17) + ((v35 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v35 & 0x1FF)), v43[0], v34);
        v36 = *((_QWORD *)this + 21) + *((_QWORD *)this + 20) - 1;
        *((_DWORD *)this + 52) = kaldi::PitchFrameInfo::ComputeLatency(*(kaldi::PitchFrameInfo **)(*(_QWORD *)(*((_QWORD *)this + 17)+ ((v36 >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (v36 & 0x1FF)), *((_DWORD *)this + 14));
        v38 = *((_QWORD *)this + 23);
        v37 = *((_QWORD *)this + 24);
        if (v37 == v38)
        {
          v38 = *((_QWORD *)this + 24);
        }
        else
        {
          v39 = 0;
          do
          {
            v40 = *(_QWORD *)(v38 + 8 * v39);
            if (v40)
            {
              kaldi::Vector<float>::Destroy(*(_QWORD *)(v38 + 8 * v39));
              MEMORY[0x1AF44D190](v40, 0x1080C4066DFD6F0);
              v38 = *((_QWORD *)this + 23);
              v37 = *((_QWORD *)this + 24);
            }
            ++v39;
          }
          while (v39 < (v37 - v38) >> 3);
        }
        *((_QWORD *)this + 24) = v38;
        if (v44)
        {
          v45 = v44;
          operator delete(v44);
        }
        kaldi::Vector<float>::Destroy((uint64_t)v47);
        kaldi::Vector<float>::Destroy((uint64_t)&v48);
      }
      else
      {
LABEL_26:
        if (v4 == v5)
        {
          v5 = *((_QWORD *)this + 24);
        }
        else
        {
          v41 = 0;
          do
          {
            v42 = *(_QWORD *)(v5 + 8 * v41);
            if (v42)
            {
              kaldi::Vector<float>::Destroy(*(_QWORD *)(v5 + 8 * v41));
              MEMORY[0x1AF44D190](v42, 0x1080C4066DFD6F0);
              v5 = *((_QWORD *)this + 23);
              v4 = *((_QWORD *)this + 24);
            }
            ++v41;
          }
          while (v41 < (v4 - v5) >> 3);
        }
        *((_QWORD *)this + 24) = v5;
      }
    }
  }
}

void sub_1ADD6AA20(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 200);
  if (v3)
  {
    *(_QWORD *)(v1 - 192) = v3;
    operator delete(v3);
  }
  kaldi::Vector<float>::Destroy(v1 - 176);
  kaldi::Vector<float>::Destroy(v1 - 152);
  _Unwind_Resume(a1);
}

void kaldi::OnlineAudioAnalyticsFeatureImpl::~OnlineAudioAnalyticsFeatureImpl(kaldi::OnlineAudioAnalyticsFeatureImpl *this)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t i;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void **v17;

  v2 = *((_QWORD *)this + 14);
  if (v2)
  {
    v17 = (void **)(v2 + 40);
    std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v17);
    v3 = *(void **)(v2 + 16);
    if (v3)
    {
      *(_QWORD *)(v2 + 24) = v3;
      operator delete(v3);
    }
    MEMORY[0x1AF44D190](v2, 0x1030C40864D17A3);
  }
  v4 = *((_QWORD *)this + 15);
  if (v4)
  {
    kaldi::Vector<float>::Destroy(v4 + 88);
    v17 = (void **)(v4 + 48);
    std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v17);
    v5 = *(void **)(v4 + 24);
    if (v5)
    {
      *(_QWORD *)(v4 + 32) = v5;
      operator delete(v5);
    }
    MEMORY[0x1AF44D190](v4, 0x10B0C40587FD9DDLL);
  }
  v6 = *((_QWORD *)this + 21);
  if (v6)
  {
    for (i = 0; i < v6; ++i)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 17) + (((i + *((_QWORD *)this + 20)) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * ((i + *((_QWORD *)this + 20)) & 0x1FF));
      if (v8)
      {
        v9 = *(void **)v8;
        if (*(_QWORD *)v8)
        {
          *(_QWORD *)(v8 + 8) = v9;
          operator delete(v9);
        }
        MEMORY[0x1AF44D190](v8, 0x1020C403D3F9D26);
        v6 = *((_QWORD *)this + 21);
      }
    }
  }
  v11 = *((_QWORD *)this + 23);
  v10 = *((_QWORD *)this + 24);
  if (v10 != v11)
  {
    v12 = 0;
    do
    {
      v13 = *(_QWORD *)(v11 + 8 * v12);
      if (v13)
      {
        kaldi::Vector<float>::Destroy(*(_QWORD *)(v11 + 8 * v12));
        MEMORY[0x1AF44D190](v13, 0x1080C4066DFD6F0);
        v11 = *((_QWORD *)this + 23);
        v10 = *((_QWORD *)this + 24);
      }
      ++v12;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  kaldi::Vector<float>::Destroy((uint64_t)this + 328);
  v14 = (void *)*((_QWORD *)this + 34);
  if (v14)
  {
    *((_QWORD *)this + 35) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 31);
  if (v15)
  {
    *((_QWORD *)this + 32) = v15;
    operator delete(v15);
  }
  kaldi::Vector<float>::Destroy((uint64_t)this + 216);
  v16 = (void *)*((_QWORD *)this + 23);
  if (v16)
  {
    *((_QWORD *)this + 24) = v16;
    operator delete(v16);
  }
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((_QWORD *)this + 16);
  kaldi::Vector<float>::Destroy((uint64_t)this + 88);
}

_QWORD *std::deque<kaldi::AudioAnalyticsFrameInfo *>::erase(_QWORD *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char **v11;
  char *v12;
  char **v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  char **v17;
  char *v18;
  char **v19;
  char *v20;
  char **v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  char **v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v32;
  char **v33;
  char *v34;
  __n128 v35;
  char *v36;

  if (a5 == a3)
    v6 = 0;
  else
    v6 = ((a5 - *(_QWORD *)a4) >> 3) + ((a4 - a2) << 6) - ((a3 - *(_QWORD *)a2) >> 3);
  v7 = a1[1];
  v8 = (char *)(v7 + 8 * (a1[4] >> 9));
  if (a1[2] == v7)
    v9 = 0;
  else
    v9 = *(_QWORD *)v8 + 8 * (a1[4] & 0x1FFLL);
  v33 = (char **)(v7 + 8 * (a1[4] >> 9));
  v34 = (char *)v9;
  if (v9 == a3)
    v10 = 0;
  else
    v10 = ((a3 - *(_QWORD *)a2) >> 3) + ((a2 - v8) << 6) - ((v9 - *(_QWORD *)v8) >> 3);
  v11 = (char **)std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>::operator+[abi:ne180100]((uint64_t)&v33, v10);
  v32.n128_u64[0] = (unint64_t)v11;
  v32.n128_u64[1] = (unint64_t)v12;
  if (v6 >= 1)
  {
    if (v10 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      v19 = v11;
      v20 = v12;
      v21 = v33;
      v22 = v34;
      v23 = std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>::operator+[abi:ne180100]((uint64_t)&v32, v6);
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,0>(v21, v22, v19, v20, v23, v24, &v35);
      v25 = v34;
      if (v34 != v36)
      {
        v26 = v33;
        do
        {
          v25 += 8;
          v34 = v25;
          if (v25 - *v26 == 4096)
          {
            v27 = v26[1];
            ++v26;
            v25 = v27;
            v33 = v26;
            v34 = v27;
          }
        }
        while (v25 != v36);
      }
      v28 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v28;
      while ((std::deque<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1) & 1) != 0);
    }
    else
    {
      v13 = (char **)std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>::operator+[abi:ne180100]((uint64_t)&v32, v6);
      v15 = a1[4] + a1[5];
      v16 = a1[1];
      v17 = (char **)(v16 + 8 * (v15 >> 9));
      if (a1[2] == v16)
        v18 = 0;
      else
        v18 = &(*v17)[8 * (v15 & 0x1FF)];
      v35 = v32;
      std::__for_each_segment[abi:ne180100]<std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>>>(v13, v14, v17, v18, (uint64_t)&v35);
      a1[5] -= v6;
      while ((std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](a1, 1) & 1) != 0);
    }
  }
  v29 = a1[1];
  if (a1[2] == v29)
    v30 = 0;
  else
    v30 = *(_QWORD *)(v29 + 8 * (a1[4] >> 9)) + 8 * (a1[4] & 0x1FFLL);
  v35.n128_u64[0] = v29 + 8 * (a1[4] >> 9);
  v35.n128_u64[1] = v30;
  return std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>::operator+[abi:ne180100]((uint64_t)&v35, v10);
}

_QWORD *std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>::operator+[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 3);
    if (v4 < 1)
      result -= (unint64_t)(511 - v4) >> 9;
    else
      result += (unint64_t)v4 >> 9;
  }
  return result;
}

uint64_t kaldi::OnlineAudioAnalyticsFeature::NumFramesReady(kaldi::OnlineAudioAnalyticsFeature *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 1) + 176) - *(_DWORD *)(*((_QWORD *)this + 1) + 208));
}

_QWORD *kaldi::OnlineAudioAnalyticsFeature::OnlineAudioAnalyticsFeature(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = off_1E5D2AC78;
  v4 = operator new();
  kaldi::OnlineAudioAnalyticsFeatureImpl::OnlineAudioAnalyticsFeatureImpl(v4, a2);
  a1[1] = v4;
  return a1;
}

void sub_1ADD6AF6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A0C40C1799B43);
  _Unwind_Resume(a1);
}

BOOL kaldi::OnlineAudioAnalyticsFeature::IsLastFrame(kaldi::OnlineAudioAnalyticsFeature *this, int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  return *(_BYTE *)(v2 + 296) && a2 + 1 == *(_DWORD *)(v2 + 176) - *(_DWORD *)(v2 + 208);
}

float kaldi::OnlineAudioAnalyticsFeature::GetFrame(uint64_t a1, int a2, uint64_t *a3)
{
  _QWORD *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float result;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = (int *)(v3[31] + 8 * a2);
  v5 = *a3;
  *(_DWORD *)v5 = v4[1];
  v6 = *v4;
  v7 = v3[11];
  *(float *)(v5 + 4) = 1.0 / *(float *)(v7 + 4 * v6);
  *(_DWORD *)(v5 + 8) = *(_DWORD *)(v7 + 4 * v6);
  result = *(float *)(v3[34] + 4 * a2);
  *(float *)(v5 + 12) = result;
  return result;
}

void kaldi::OnlineAudioAnalyticsFeature::AcceptWaveform(uint64_t a1, uint64_t a2)
{
  kaldi::OnlineAudioAnalyticsFeatureImpl::AcceptWaveform(*(_QWORD *)(a1 + 8), a2);
}

void kaldi::OnlineAudioAnalyticsFeature::InputFinished(kaldi::OnlineAudioAnalyticsFeatureImpl **this)
{
  kaldi::OnlineAudioAnalyticsFeatureImpl::InputFinished(this[1]);
}

void kaldi::OnlineAudioAnalyticsFeature::Compute(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  kaldi::OnlineAudioAnalyticsFeatureImpl::Compute(*(kaldi::OnlineAudioAnalyticsFeatureImpl **)(a1 + 8), a2, a3);
}

void kaldi::OnlineAudioAnalyticsFeature::~OnlineAudioAnalyticsFeature(kaldi::OnlineAudioAnalyticsFeature *this)
{
  kaldi::OnlineAudioAnalyticsFeatureImpl *v1;

  *(_QWORD *)this = off_1E5D2AC78;
  v1 = (kaldi::OnlineAudioAnalyticsFeatureImpl *)*((_QWORD *)this + 1);
  if (v1)
  {
    kaldi::OnlineAudioAnalyticsFeatureImpl::~OnlineAudioAnalyticsFeatureImpl(v1);
    MEMORY[0x1AF44D190]();
  }
}

{
  kaldi::OnlineAudioAnalyticsFeature::~OnlineAudioAnalyticsFeature(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::OnlineProcessAudioAnalytics::OnlineProcessAudioAnalytics(uint64_t a1, __int128 *a2, void (***a3)(_QWORD))
{
  __int128 v4;
  __int128 v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;

  v4 = *a2;
  v5 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)a1 = v4;
  v6 = *((unsigned __int8 *)a2 + 40);
  v7 = *((unsigned __int8 *)a2 + 41);
  v8 = *((unsigned __int8 *)a2 + 42);
  v9 = *((unsigned __int8 *)a2 + 43);
  v10 = *((unsigned __int8 *)a2 + 44);
  v11 = *((unsigned __int8 *)a2 + 45);
  v12 = *((unsigned __int8 *)a2 + 46);
  v13 = *((unsigned __int8 *)a2 + 47);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 48) = a3;
  *(_DWORD *)(a1 + 56) = v6 + v7 + v8 + v9 + v10 + v11 + v12 + v13 + 1;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  (**a3)(a3);
  v14 = *(unsigned __int8 *)(a1 + 40);
  *(_DWORD *)(a1 + 60) = v14;
  if (*(_BYTE *)(a1 + 41))
  {
    v14 |= 2u;
    *(_DWORD *)(a1 + 60) = v14;
  }
  if (*(_BYTE *)(a1 + 42))
  {
    v14 |= 4u;
    *(_DWORD *)(a1 + 60) = v14;
  }
  if (*(_BYTE *)(a1 + 43))
  {
    v14 |= 8u;
    *(_DWORD *)(a1 + 60) = v14;
  }
  if (*(_BYTE *)(a1 + 44))
  {
    v14 |= 0x10u;
    *(_DWORD *)(a1 + 60) = v14;
  }
  if (*(_BYTE *)(a1 + 45))
  {
    v14 |= 0x20u;
    *(_DWORD *)(a1 + 60) = v14;
  }
  if (*(_BYTE *)(a1 + 46))
  {
    v14 |= 0x40u;
    *(_DWORD *)(a1 + 60) = v14;
  }
  if (*(_BYTE *)(a1 + 47))
    *(_DWORD *)(a1 + 60) = v14 | 0x80;
  return a1;
}

void sub_1ADD6B1A8(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = (void *)v1[11];
  if (v4)
  {
    v1[12] = v4;
    operator delete(v4);
  }
  v5 = *v2;
  if (*v2)
  {
    v1[9] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::OnlineProcessAudioAnalytics::GetFrame(uint64_t a1, int a2, uint64_t a3)
{
  int v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  kaldi *v9;
  float v10;
  float v11;
  float v12;
  unsigned int v13;
  float v14;
  float v15;
  uint64_t v16;
  float v17;
  float v18;
  int v19;
  int v20;
  float *v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(a1 + 36);
  v6 = __OFSUB__(a2, v5);
  v7 = a2 - v5;
  if (v7 < 0 != v6)
    v8 = 0;
  else
    v8 = v7;
  kaldi::OnlineProcessPitch::NumFramesReady((kaldi::OnlineProcessPitch *)a1);
  **(float **)a3 = (float)*(unsigned int *)(a1 + 60);
  if (*(_BYTE *)(a1 + 40))
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    kaldi::Vector<float>::Resize((void **)&v21, 4, 0);
    v9 = (kaldi *)(*(uint64_t (**)(_QWORD, uint64_t, float **))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), v8, &v21);
    v10 = *(float *)(a1 + 4);
    v11 = kaldi::NccfToPovFeature(v9, *v21);
    v12 = *(float *)(a1 + 8);
    kaldi::Vector<float>::Destroy((uint64_t)&v21);
    *(float *)(*(_QWORD *)a3 + 4) = v12 + (float)(v10 * v11);
    v13 = 2;
  }
  else
  {
    v13 = 1;
  }
  if (*(_BYTE *)(a1 + 41))
  {
    kaldi::OnlineProcessAudioAnalytics::UpdateNormalizationStats((kaldi::OnlineProcessAudioAnalytics *)a1, v8);
    v21 = 0;
    v22 = 0;
    v23 = 0;
    kaldi::Vector<float>::Resize((void **)&v21, 4, 0);
    (*(void (**)(_QWORD, uint64_t, float **))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), v8, &v21);
    v14 = v21[1];
    kaldi::Vector<float>::Destroy((uint64_t)&v21);
    v15 = logf(v14);
    v16 = *(_QWORD *)(a1 + 88) + 24 * (int)v8;
    v17 = *(double *)(v16 + 16) / *(double *)(v16 + 8);
    *(float *)(*(_QWORD *)a3 + 4 * v13++) = *(float *)a1 * (float)(v15 - v17);
  }
  if (*(_BYTE *)(a1 + 42))
    *(float *)(*(_QWORD *)a3 + 4 * v13++) = kaldi::OnlineProcessAudioAnalytics::GetDeltaPitchFeature((kaldi::OnlineProcessAudioAnalytics *)a1, v8, 1u);
  if (*(_BYTE *)(a1 + 43))
    *(float *)(*(_QWORD *)a3 + 4 * v13++) = kaldi::OnlineProcessAudioAnalytics::GetDeltaPitchFeature((kaldi::OnlineProcessAudioAnalytics *)a1, v8, 2u);
  if (*(_BYTE *)(a1 + 44))
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    kaldi::Vector<float>::Resize((void **)&v21, 4, 0);
    (*(void (**)(_QWORD, uint64_t, float **))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), v8, &v21);
    v18 = v21[1];
    kaldi::Vector<float>::Destroy((uint64_t)&v21);
    *(float *)(*(_QWORD *)a3 + 4 * v13++) = logf(v18);
  }
  if (*(_BYTE *)(a1 + 45))
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    kaldi::Vector<float>::Resize((void **)&v21, 4, 0);
    (*(void (**)(_QWORD, uint64_t, float **))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), v8, &v21);
    v19 = *((_DWORD *)v21 + 2);
    kaldi::Vector<float>::Destroy((uint64_t)&v21);
    *(_DWORD *)(*(_QWORD *)a3 + 4 * v13++) = v19;
  }
  if (*(_BYTE *)(a1 + 46))
    *(float *)(*(_QWORD *)a3 + 4 * v13++) = kaldi::OnlineProcessAudioAnalytics::GetSmoothedPov((kaldi::OnlineProcessAudioAnalytics *)a1, v8);
  if (*(_BYTE *)(a1 + 47))
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    kaldi::Vector<float>::Resize((void **)&v21, 4, 0);
    (*(void (**)(_QWORD, uint64_t, float **))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), v8, &v21);
    v20 = *((_DWORD *)v21 + 3);
    kaldi::Vector<float>::Destroy((uint64_t)&v21);
    *(_DWORD *)(*(_QWORD *)a3 + 4 * v13) = v20;
  }
}

void sub_1ADD6B4A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::OnlineProcessAudioAnalytics::GetDeltaPitchFeature(kaldi::OnlineProcessAudioAnalytics *this, int a2, unsigned int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  float v15;
  uint64_t v16;
  void **v17;
  int v18;
  int v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  unint64_t v25;
  float *v26;
  float *v27;
  float *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  float *v34;
  int v35;
  int v36;
  float v37;
  unsigned int v39;
  int32x2_t v40[2];
  int v41;
  _QWORD v42[2];
  int v43;
  void *v44[4];

  v6 = *((_DWORD *)this + 8);
  v7 = (a2 - v6) & ~((a2 - v6) >> 31);
  v8 = a2 + v6;
  v9 = a2 + v6 + 1;
  v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 8))(*((_QWORD *)this + 6));
  if (v10 >= v9)
    v11 = v8 + 1;
  else
    v11 = v10;
  kaldi::Matrix<float>::Matrix((uint64_t)v42, (v11 - v7), 1, 0, 0);
  kaldi::Matrix<float>::Matrix((uint64_t)v40);
  v12 = __OFSUB__(v11, v7);
  v13 = v11 - v7;
  if (!((v13 < 0) ^ v12 | (v13 == 0)))
  {
    v14 = 0;
    do
    {
      memset(v44, 0, 24);
      kaldi::Vector<float>::Resize(v44, 4, 0);
      (*(void (**)(_QWORD, _QWORD, void **))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), (v7 + v14), v44);
      v15 = *((float *)v44[0] + 1);
      kaldi::Vector<float>::Destroy((uint64_t)v44);
      *(float *)(v42[0] + 4 * v43 * v14++) = logf(v15);
    }
    while (v13 != v14);
  }
  v44[0] = (void *)__PAIR64__(*((_DWORD *)this + 8), a3);
  kaldi::ComputeDeltas((unsigned int *)v44, (uint64_t)v42, v40);
  v16 = *((_QWORD *)this + 8);
  v17 = (void **)((char *)this + 64);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 9) - v16) >> 2))
  {
    v39 = a3;
    do
    {
      v18 = kaldi::Rand(0);
      v19 = kaldi::Rand(0);
      v20 = ((double)v18 + 1.0) / 2147483650.0;
      v21 = sqrtf(logf(v20) * -2.0);
      v22 = ((double)v19 + 1.0) / 2147483650.0;
      v23 = v22 * 6.28318531;
      v24 = (float)(v21 * cosf(v23)) * *((float *)this + 5);
      v26 = (float *)*((_QWORD *)this + 9);
      v25 = *((_QWORD *)this + 10);
      if ((unint64_t)v26 >= v25)
      {
        v28 = (float *)*v17;
        v29 = ((char *)v26 - (_BYTE *)*v17) >> 2;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v31 = v25 - (_QWORD)v28;
        if (v31 >> 1 > v30)
          v30 = v31 >> 1;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
          v32 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v32 = v30;
        if (v32)
        {
          v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 80, v32);
          v28 = (float *)*((_QWORD *)this + 8);
          v26 = (float *)*((_QWORD *)this + 9);
        }
        else
        {
          v33 = 0;
        }
        v34 = (float *)&v33[4 * v29];
        *v34 = v24;
        v27 = v34 + 1;
        while (v26 != v28)
        {
          v35 = *((_DWORD *)v26-- - 1);
          *((_DWORD *)v34-- - 1) = v35;
        }
        *((_QWORD *)this + 8) = v34;
        *((_QWORD *)this + 9) = v27;
        *((_QWORD *)this + 10) = &v33[4 * v32];
        if (v28)
          operator delete(v28);
      }
      else
      {
        *v26 = v24;
        v27 = v26 + 1;
      }
      *((_QWORD *)this + 9) = v27;
      v16 = *((_QWORD *)this + 8);
    }
    while (a2 >= (unint64_t)(((uint64_t)v27 - v16) >> 2));
    a3 = v39;
  }
  if (a2 >= v6)
    v36 = v6;
  else
    v36 = a2;
  if (a3 == 1)
    v37 = (float)(*(float *)(*(_QWORD *)v40 + 4 * v41 * v36 + 4) + *(float *)(v16 + 4 * a2)) * *((float *)this + 3);
  else
    v37 = (*(float *)(*(_QWORD *)v40 + 4 * v41 * v36 + 4 * (int)a3) + *(float *)(v16 + 4 * a2) * 0.1)
        * *((float *)this + 4);
  kaldi::Matrix<float>::~Matrix((uint64_t)v40);
  kaldi::Matrix<float>::~Matrix((uint64_t)v42);
  return v37;
}

void sub_1ADD6B838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::Matrix<float>::~Matrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

float kaldi::OnlineProcessAudioAnalytics::GetSmoothedPov(kaldi::OnlineProcessAudioAnalytics *this, int a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  kaldi *v10;
  float v11;
  float v12;
  void *v14[3];
  void *v15[3];
  void *v16[3];

  memset(v16, 0, sizeof(v16));
  kaldi::Vector<float>::Resize(v16, 4, 0);
  if (a2 <= 4)
    v4 = 4;
  else
    v4 = a2;
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 8))(*((_QWORD *)this + 6));
  v6 = (v4 - 4);
  if (v5 >= a2 + 1)
    v7 = a2 + 1;
  else
    v7 = v5;
  v8 = v7 - v6;
  memset(v15, 0, sizeof(v15));
  kaldi::Vector<float>::Resize(v15, (v7 - v6), 0);
  if (v7 > (int)v6)
  {
    v9 = v4 - v6 - 4;
    do
    {
      memset(v14, 0, sizeof(v14));
      kaldi::Vector<float>::Resize(v14, 4, 0);
      v10 = (kaldi *)(*(uint64_t (**)(_QWORD, uint64_t, void **))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), v6, v14);
      v11 = kaldi::NccfToPov(v10, *(float *)v14[0]);
      *((float *)v15[0] + v9) = v11;
      kaldi::Vector<float>::Destroy((uint64_t)v14);
      ++v9;
      v6 = (v6 + 1);
    }
    while (v7 != (_DWORD)v6);
  }
  if (v8 <= 0)
    v12 = 0.0;
  else
    v12 = kaldi::VectorBase<float>::Sum((uint64_t)v15) / (float)v8;
  kaldi::Vector<float>::Destroy((uint64_t)v15);
  kaldi::Vector<float>::Destroy((uint64_t)v16);
  return v12;
}

void sub_1ADD6B9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  kaldi::Vector<float>::Destroy((uint64_t)va1);
  _Unwind_Resume(a1);
}

void kaldi::AudioAnalyticsHelper::ExtractDesiredAudioAnalytics(float **a1, int a2, uint64_t a3)
{
  float *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14[8];
  int v15[8];

  if ((int)kaldi::MatrixBase<float>::NumRows((uint64_t)a1) >= 1)
  {
    v6 = *a1;
    kaldi::MatrixBase<float>::NumCols((uint64_t)a1);
    v7 = 0;
    v8 = 0;
    v9 = *v6;
    v10 = 1;
    do
    {
      v11 = kaldi::AudioAnalyticsHelper::FeatsArray[v7];
      if ((v11 & v9) != 0)
      {
        if ((v11 & a2) != 0)
        {
          v12 = kaldi::MatrixBase<float>::NumRows((uint64_t)a1);
          kaldi::SubMatrix<float>::SubMatrix((uint64_t)v15, (uint64_t)a1, 0, v12, v10, 1);
          v13 = kaldi::MatrixBase<float>::NumRows((uint64_t)a1);
          kaldi::SubMatrix<float>::SubMatrix((uint64_t)v14, a3, 0, v13, v8, 1);
          kaldi::MatrixBase<float>::CopyFromMat<float>(v14, v15, 111);
          ++v8;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v14);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v15);
        }
        ++v10;
      }
      ++v7;
    }
    while (v7 != 8);
  }
}

void sub_1ADD6BB1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a13);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineAudioAnalyticsFeature::Dim(kaldi::OnlineAudioAnalyticsFeature *this)
{
  return 4;
}

void kaldi::OnlineProcessAudioAnalytics::UpdateNormalizationStats(kaldi::OnlineProcessAudioAnalytics *this, unsigned int a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  kaldi *v20;
  float v21;
  float32x2_t v22;
  kaldi *v23;
  float v24;
  float32x2_t v25;
  uint64_t v26;
  uint64_t v27;
  kaldi *v28;
  float v29;
  float32x2_t v30;
  float v31;
  float v32;
  float v33;
  float *v34;
  uint64_t v35;
  uint64_t v36;

  v5 = *((_QWORD *)this + 11);
  v6 = *((_QWORD *)this + 12);
  v4 = (char *)this + 88;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3) <= a2)
    std::vector<kaldi::OnlineProcessPitch::NormalizationStats>::resize((uint64_t)v4, a2 + 1);
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 8))(*((_QWORD *)this + 6));
  v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6), (v8 - 1));
  v10 = *((_QWORD *)this + 11);
  v11 = v10 + 24 * a2;
  if (*(_DWORD *)v11 != v8 || *(unsigned __int8 *)(v10 + 24 * a2 + 4) != v9)
  {
    v12 = (a2 - *((_DWORD *)this + 6)) & ~((int)(a2 - *((_DWORD *)this + 6)) >> 31);
    v13 = a2 + *((_DWORD *)this + 7);
    if ((int)(v13 + 1) < v8)
      v14 = v13 + 1;
    else
      v14 = v8;
    if (a2
      && (v15 = a2 - 1, v16 = v10 + 24 * (a2 - 1), *(_DWORD *)v16 == v8)
      && *(unsigned __int8 *)(v10 + 24 * v15 + 4) == v9)
    {
      *(_OWORD *)v11 = *(_OWORD *)v16;
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(v16 + 16);
      v17 = (v15 - *((_DWORD *)this + 6)) & ~((int)(v15 - *((_DWORD *)this + 6)) >> 31);
      v18 = *((_DWORD *)this + 7) + a2;
      if (v18 >= v8)
        v19 = v8;
      else
        v19 = v18;
      if ((_DWORD)v12 != (_DWORD)v17)
      {
        v34 = 0;
        v35 = 0;
        v36 = 0;
        kaldi::Vector<float>::Resize((void **)&v34, 4, 0);
        v20 = (kaldi *)(*(uint64_t (**)(_QWORD, uint64_t, float **))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), v17, &v34);
        v31 = kaldi::NccfToPov(v20, *v34);
        v21 = logf(v34[1]);
        v22.f32[0] = v31;
        v22.f32[1] = v31 * v21;
        *(float64x2_t *)(v10 + 24 * a2 + 8) = vsubq_f64(*(float64x2_t *)(v10 + 24 * a2 + 8), vcvtq_f64_f32(v22));
        kaldi::Vector<float>::Destroy((uint64_t)&v34);
      }
      if (v14 != (_DWORD)v19)
      {
        v34 = 0;
        v35 = 0;
        v36 = 0;
        kaldi::Vector<float>::Resize((void **)&v34, 4, 0);
        v23 = (kaldi *)(*(uint64_t (**)(_QWORD, uint64_t, float **))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), v19, &v34);
        v32 = kaldi::NccfToPov(v23, *v34);
        v24 = logf(v34[1]);
        v25.f32[0] = v32;
        v25.f32[1] = v32 * v24;
        *(float64x2_t *)(v10 + 24 * a2 + 8) = vaddq_f64(*(float64x2_t *)(v10 + 24 * a2 + 8), vcvtq_f64_f32(v25));
        kaldi::Vector<float>::Destroy((uint64_t)&v34);
      }
    }
    else
    {
      v26 = v10 + 24 * a2;
      *(_QWORD *)(v26 + 8) = 0;
      v27 = v26 + 8;
      *(_DWORD *)v11 = v8;
      *(_BYTE *)(v27 - 4) = v9;
      *(_QWORD *)(v27 + 8) = 0;
      v34 = 0;
      v35 = 0;
      v36 = 0;
      kaldi::Vector<float>::Resize((void **)&v34, 4, 0);
      if ((int)v12 < v14)
      {
        do
        {
          v28 = (kaldi *)(*(uint64_t (**)(_QWORD, uint64_t, float **))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), v12, &v34);
          v33 = kaldi::NccfToPov(v28, *v34);
          v29 = logf(v34[1]);
          v30.f32[0] = v33;
          v30.f32[1] = v33 * v29;
          *(float64x2_t *)v27 = vaddq_f64(*(float64x2_t *)v27, vcvtq_f64_f32(v30));
          v12 = (v12 + 1);
        }
        while (v14 != (_DWORD)v12);
      }
      kaldi::Vector<float>::Destroy((uint64_t)&v34);
    }
  }
}

void sub_1ADD6BE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<kaldi::AudioAnalyticsFrameInfo::StateInfo>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1ADD6BECC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::deque<kaldi::AudioAnalyticsFrameInfo *>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADD6C1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,0>@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<kaldi::AudioAnalyticsFrameInfo **,std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,0>(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4096;
    }
    v18 = *a1 + 4096;
    v19 = a2;
  }
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<kaldi::AudioAnalyticsFrameInfo **,std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,0>(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<kaldi::AudioAnalyticsFrameInfo **,std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,0>@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  uint64_t v15;
  char *v16;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 3 >= v12 >> 3)
        v13 = v12 >> 3;
      else
        v13 = (v11 - a1) >> 3;
      v11 -= 8 * v13;
      a4 -= 8 * v13;
      if (v13)
        result = memmove(a4, v11, 8 * v13);
      if (v11 == a1)
        break;
      v15 = *--v6;
      v10 = v15;
      a4 = (char *)(v15 + 4096);
    }
    if ((char *)(*v6 + 4096) == a4)
    {
      v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double std::__for_each_segment[abi:ne180100]<std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>>>(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  char **v8;
  char *v9;
  char *v10;
  void **v11;
  char *v12;
  double result;
  char *v14;
  __int128 v15;

  if (a1 == a3)
  {
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
    v10 = __src;
  }
  else
  {
    v8 = a1 + 1;
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo **,std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,0>(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      v9 = *v8++;
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo **,std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,0>(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    v10 = *a3;
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo **,std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,0>(v10, v12, a4, v11, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo **,std::__deque_iterator<kaldi::AudioAnalyticsFrameInfo *,kaldi::AudioAnalyticsFrameInfo **,kaldi::AudioAnalyticsFrameInfo *&,kaldi::AudioAnalyticsFrameInfo ***,long,512l>,0>@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  void **v6;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v6 = a4;
  if (__src != a3)
  {
    v9 = __src;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = v10 - __dst + 4096;
      v12 = (a3 - v9) >> 3 >= v11 >> 3 ? v11 >> 3 : (a3 - v9) >> 3;
      if (v12)
        __src = (char *)memmove(__dst, v9, 8 * v12);
      v9 += 8 * v12;
      if (v9 == a3)
        break;
      v13 = (char *)*v6++;
      v10 = v13;
      __dst = v13;
    }
    __dst += 8 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

uint64_t quasar::tennessee::nashville::CreateTextNormalizer@<X0>(quasar::tennessee::nashville **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  quasar::tennessee::nashville *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  quasar::tennessee::nashville *v10;
  uint64_t v11;

  quasar::tennessee::nashville::LoadLexiconFromArchive<quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>>(*a1, *(unsigned int *)(a2 + 24), &v11);
  v6 = *a1;
  *a1 = 0;
  v7 = v11;
  v10 = v6;
  v11 = 0;
  v9 = v7;
  quasar::tennessee::nashville::CreateTextNormalizer((uint64_t *)&v10, &v9, a2, a3);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (v10)
    (*(void (**)(quasar::tennessee::nashville *))(*(_QWORD *)v10 + 8))(v10);
  result = v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1ADD6C5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  quasar::tennessee::nashville::CreateTextNormalizer((uint64_t *)va, (uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t quasar::tennessee::nashville::CreateTextNormalizer@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v8 = operator new();
  v9 = *a1;
  *a1 = 0;
  v10 = *a2;
  *a2 = 0;
  v13 = v10;
  v14 = v9;
  quasar::tennessee::nashville::TextNormalizer<std::unique_ptr<quasar::tennessee::archive::ImmutableArchive>,std::unique_ptr<quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>>>::TextNormalizer(v8, &v14, &v13, a3);
  v11 = v13;
  v13 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  result = v14;
  v14 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *a4 = v8;
  return result;
}

void sub_1ADD6C694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (a2)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  quasar::tennessee::nashville::CreateTextNormalizer((uint64_t *)va);
  MEMORY[0x1AF44D190](v2, 0x10F3C40974A0BF2);
  _Unwind_Resume(a1);
}

uint64_t quasar::tennessee::nashville::TextNormalizer<std::unique_ptr<quasar::tennessee::archive::ImmutableArchive>,std::unique_ptr<quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>>>::TextNormalizer(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  const quasar::tennessee::archive::ImmutableArchive *v11;
  quasar::tennessee::nashville::ArchiveDataManager *v12;
  const quasar::tennessee::archive::ImmutableArchive *v13;
  quasar::tennessee::nashville::ArchiveDataManager *v14;
  uint64_t v15;
  uint64_t Config;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  quasar::tennessee *v22;
  quasar::tennessee *v23;
  std::wstring *v24;
  uint64_t v25;
  BOOL v26;
  std::wstring *v27;
  int v28;
  int v29;
  _QWORD *v30;
  _QWORD *v31;
  BOOL v32;
  uint64_t v33;
  char *v34;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  std::wstring v45;
  std::wstring v46;
  void *__p[2];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;

  *(_QWORD *)a1 = &unk_1E5D3CCF0;
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)(a1 + 8), (const void ***)a4);
  v8 = *(_OWORD *)(a4 + 24);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a4 + 40);
  *(_OWORD *)(a1 + 32) = v8;
  v9 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 56) = v9;
  v10 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 64) = v10;
  v11 = *(const quasar::tennessee::archive::ImmutableArchive **)(a1 + 56);
  v12 = (quasar::tennessee::nashville::ArchiveDataManager *)operator new();
  std::__fs::filesystem::path::path[abi:ne180100]<char [14],void>((std::string *)__p, "lexicon");
  quasar::tennessee::nashville::ArchiveDataManager::ArchiveDataManager(v12, v11, (const std::__fs::filesystem::path *)__p);
  if (SBYTE7(v48) < 0)
    operator delete(__p[0]);
  TLexicon::TLexicon((TLexicon *)(a1 + 72), v12, *(void **)(a1 + 64));
  v13 = *(const quasar::tennessee::archive::ImmutableArchive **)(a1 + 56);
  v14 = (quasar::tennessee::nashville::ArchiveDataManager *)operator new();
  std::__fs::filesystem::path::path[abi:ne180100]<char [14],void>((std::string *)__p, "tokenizer");
  quasar::tennessee::nashville::ArchiveDataManager::ArchiveDataManager(v14, v13, (const std::__fs::filesystem::path *)__p);
  if (SBYTE7(v48) < 0)
    operator delete(__p[0]);
  TTokenizer::TTokenizer((TTokenizer *)(a1 + 592), 0, v14, (TLexicon *)(a1 + 72), *(_DWORD *)(a1 + 48));
  v15 = *(_QWORD *)(a1 + 600);
  *(_QWORD *)(a1 + 3184) = v15;
  Config = TParamManager::getConfig(v15, (__int32 *)"B");
  *(_QWORD *)(a1 + 3192) = Config;
  if (Config == -1)
  {
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  TIntParam::setValue(*(_QWORD *)(a1 + 3184) + 16104, Config, (unsigned int *)"3");
  TBoolParam::setValue(*(_QWORD *)(a1 + 3184) + 632, *(_QWORD *)(a1 + 3192), (unsigned int *)"1");
  TIntParam::setValue(*(_QWORD *)(a1 + 3184) + 16456, *(_QWORD *)(a1 + 3192), (unsigned int *)"3");
  TBoolParam::setValue(*(_QWORD *)(a1 + 3184) + 1872, *(_QWORD *)(a1 + 3192), (unsigned int *)"1");
  v17 = *(_QWORD *)(a1 + 3184) + 17864;
  v18 = *(_QWORD *)(a1 + 3192);
  if (*(_DWORD *)(a1 + 36))
  {
    v19 = "f";
  }
  else
  {
    TBoolParam::setValue(v17, v18, (unsigned int *)"t");
    if (*(_BYTE *)(a1 + 45))
      v20 = "1";
    else
      v20 = "0";
    TBoolParam::setValue(*(_QWORD *)(a1 + 3184) + 136, *(_QWORD *)(a1 + 3192), (unsigned int *)v20);
    v17 = *(_QWORD *)(a1 + 3184) + 384;
    v18 = *(_QWORD *)(a1 + 3192);
    v19 = "t";
  }
  TBoolParam::setValue(v17, v18, (unsigned int *)v19);
  v21 = *(_QWORD **)(a1 + 8);
  if (v21 != (_QWORD *)(a1 + 16))
  {
    do
    {
      if (*((char *)v21 + 55) < 0)
        v22 = (quasar::tennessee *)v21[4];
      else
        v22 = (quasar::tennessee *)(v21 + 4);
      quasar::tennessee::ConvertMultibyteStringToWideCharacter(v22, &v46);
      v23 = (quasar::tennessee *)(v21 + 7);
      if (*((char *)v21 + 79) < 0)
        v23 = *(quasar::tennessee **)v23;
      quasar::tennessee::ConvertMultibyteStringToWideCharacter(v23, &v45);
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v46;
      else
        v24 = (std::wstring *)v46.__r_.__value_.__r.__words[0];
      v25 = TParamManager::nameToParam(*(_QWORD *)(a1 + 3184), (const __int32 *)v24);
      if (v25)
        v26 = 1;
      else
        v26 = quasar::gLogLevel < -1;
      if (!v26)
      {
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown tokenizer parameter '", 29);
        v41 = *((char *)v21 + 55);
        if (v41 >= 0)
          v42 = (uint64_t)(v21 + 4);
        else
          v42 = v21[4];
        if (v41 >= 0)
          v43 = *((unsigned __int8 *)v21 + 55);
        else
          v43 = v21[5];
        v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"'", 1);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &v45;
      else
        v27 = (std::wstring *)v45.__r_.__value_.__r.__words[0];
      v28 = (*(uint64_t (**)(uint64_t, _QWORD, std::wstring *))(*(_QWORD *)v25 + 32))(v25, *(_QWORD *)(a1 + 3192), v27);
      if (quasar::gLogLevel > -2)
        v29 = v28;
      else
        v29 = 0;
      if (v29 == 1)
      {
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to configure tokenizer parameter '", 41);
        v37 = quasar::tennessee::operator<<(v36, (uint64_t *)&v46);
        v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"' to '", 6);
        v39 = quasar::tennessee::operator<<(v38, (uint64_t *)&v45);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"'", 1);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v45.__r_.__value_.__l.__data_);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v46.__r_.__value_.__l.__data_);
      v30 = (_QWORD *)v21[1];
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = (_QWORD *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (_QWORD *)v21[2];
          v32 = *v31 == (_QWORD)v21;
          v21 = v31;
        }
        while (!v32);
      }
      v21 = v31;
    }
    while (v31 != (_QWORD *)(a1 + 16));
  }
  TBoolParam::setValue(*(_QWORD *)(a1 + 392) + 21512, 1, (unsigned int *)"f");
  v33 = *(_QWORD *)(a1 + 392) + 2920;
  if (*(_BYTE *)(a1 + 46))
  {
    TIntParam::setValue(v33, 1, (unsigned int *)"5");
    v34 = "1";
  }
  else
  {
    v34 = "0";
    TIntParam::setValue(v33, 1, (unsigned int *)"0");
  }
  TIntParam::setValue(*(_QWORD *)(a1 + 392) + 2568, 1, (unsigned int *)v34);
  return a1;
}

void sub_1ADD6CCA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  TLexicon *v3;
  TTokenizer *v4;
  uint64_t v6;
  uint64_t v7;

  TTokenizer::~TTokenizer(v4);
  TLexicon::~TLexicon(v3);
  v6 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v1 + 64) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v2, *(_QWORD **)(v1 + 16));
  _Unwind_Resume(a1);
}

void sub_1ADD6CCAC()
{
  JUMPOUT(0x1ADD6CCCCLL);
}

void sub_1ADD6CCB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;
  TLexicon *v22;
  TTokenizer *v23;
  uint64_t v25;
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  TTokenizer::~TTokenizer(v23);
  TLexicon::~TLexicon(v22);
  v25 = *(_QWORD *)(v20 + 64);
  *(_QWORD *)(v20 + 64) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *(_QWORD *)(v20 + 56);
  *(_QWORD *)(v20 + 56) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v21, *(_QWORD **)(v20 + 16));
  _Unwind_Resume(a1);
}

uint64_t TParamManager::nameToParam(uint64_t a1, const __int32 *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  TParamManager::find(a1, a2, &v8);
  TParamManager::end(a1, &v7);
  if (v8 == v7)
    return 0;
  v3 = *(_QWORD *)(v8 + 40);
  if (!v3)
    return 0;
  v4 = v3 - 1;
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 >= (*(_QWORD *)(a1 + 24) - v5) >> 3)
    return 0;
  else
    return *(_QWORD *)(v5 + 8 * v4);
}

uint64_t quasar::tennessee::nashville::TextNormalizer<std::unique_ptr<quasar::tennessee::archive::ImmutableArchive>,std::unique_ptr<quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>>>::~TextNormalizer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D3CCF0;
  TTokenizer::~TTokenizer((TTokenizer *)(a1 + 592));
  TLexicon::~TLexicon((TLexicon *)(a1 + 72));
  v2 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void quasar::tennessee::nashville::TextNormalizer<std::unique_ptr<quasar::tennessee::archive::ImmutableArchive>,std::unique_ptr<quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>>>::~TextNormalizer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D3CCF0;
  TTokenizer::~TTokenizer((TTokenizer *)(a1 + 592));
  TLexicon::~TLexicon((TLexicon *)(a1 + 72));
  v2 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 8, *(_QWORD **)(a1 + 16));
  JUMPOUT(0x1AF44D190);
}

_QWORD *quasar::tennessee::nashville::TextNormalizer<std::unique_ptr<quasar::tennessee::archive::ImmutableArchive>,std::unique_ptr<quasar::tennessee::nashville::GenericNashvilleLexicon<std::string_view,quasar::tennessee::nashville::flatbuf::TokenInfoToUTF8StringViewFunctor>>>::normalize(uint64_t a1, char *a2, uint64_t *a3)
{
  TParam *v6;
  uint64_t ValidConfig;
  char *v8;
  std::vector<std::string>::size_type v9;
  std::vector<std::string>::size_type v10;
  uint64_t v11;
  int v13;
  void *v14;
  _OWORD v15[17];

  if (*a3 != a3[1])
  {
    memset(v15, 0, sizeof(v15));
    quasar::QuasarExceptionMessage::QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v15);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v15);
  }
  v6 = (TParam *)(*(_QWORD *)(a1 + 3184) + 13600);
  ValidConfig = TParam::getValidConfig(v6, *(_QWORD *)(a1 + 3192));
  TWordBlockMaker::TWordBlockMaker((uint64_t)v15, *((int *)v6 + ValidConfig + 40), a1 + 296);
  if (a2[23] >= 0)
    v8 = a2;
  else
    v8 = *(char **)a2;
  TTokenizer::tokenize(a1 + 592, v8, 0, 0, *(_QWORD *)(a1 + 3192), v15);
  v14 = 0;
  v13 = 0;
  TWordBlockMaker::save((uint64_t)v15, &v14, &v13);
  v10 = v9;
  if (a2[23] >= 0)
    v11 = (uint64_t)a2;
  else
    v11 = *(_QWORD *)a2;
  quasar::tennessee::nashville::ExtractResult(v11, (int *)v14, v10, *(_DWORD *)(a1 + 36), *(_DWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 44), a3);
  free(v14);
  *(_QWORD *)&v15[0] = &off_1E5D16830;
  return TAllocator::clear((TAllocator *)((char *)&v15[4] + 8));
}

void sub_1ADD6CFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  TWordBlockMaker::~TWordBlockMaker((TWordBlockMaker *)va);
  _Unwind_Resume(a1);
}

quasar::tennessee::nashville::ArchiveDataManager *quasar::tennessee::nashville::ArchiveDataManager::ArchiveDataManager(quasar::tennessee::nashville::ArchiveDataManager *this, const quasar::tennessee::archive::ImmutableArchive *a2, const std::__fs::filesystem::path *a3)
{
  std::string *v6;
  __int128 v7;

  *(_QWORD *)this = off_1E5D161C0;
  *((_QWORD *)this + 1) = 1;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 2, "");
  *(_QWORD *)this = &unk_1E5D3CD20;
  *((_QWORD *)this + 5) = a2;
  v6 = (std::string *)((char *)this + 48);
  if (SHIBYTE(a3->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v6, a3->__pn_.__r_.__value_.__l.__data_, a3->__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    v7 = *(_OWORD *)&a3->__pn_.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 8) = *((_QWORD *)&a3->__pn_.__r_.__value_.__l + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1ADD6D098(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3 + 16;
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void quasar::tennessee::nashville::ArchiveDataManager::~ArchiveDataManager(void **this)
{
  *this = &unk_1E5D3CD20;
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  *this = off_1E5D161C0;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  *this = &unk_1E5D3CD20;
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  *this = off_1E5D161C0;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  JUMPOUT(0x1AF44D190);
}

unint64_t quasar::tennessee::nashville::ArchiveDataManager::getVar(quasar::tennessee::nashville::ArchiveDataManager *this, char *a2, char *a3, unint64_t a4)
{
  std::string *v7;
  std::string::size_type v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  std::string::size_type v12;
  std::string v14;
  std::__fs::filesystem::path __p;
  std::__fs::filesystem::path v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  v7 = std::string::append(&v14, ".dat");
  v8 = v7->__r_.__value_.__r.__words[0];
  v17[0] = v7->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v17 + 7) = *(std::string::size_type *)((char *)&v7->__r_.__value_.__r.__words[1] + 7);
  v9 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  *(std::string::size_type *)((char *)&__p.__pn_.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v17 + 7);
  __p.__pn_.__r_.__value_.__r.__words[0] = v8;
  __p.__pn_.__r_.__value_.__l.__size_ = v17[0];
  *((_BYTE *)&__p.__pn_.__r_.__value_.__s + 23) = v9;
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this + 48, &v16);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (((*(uint64_t (**)(_QWORD, std::__fs::filesystem::path *))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5), &v16) & 1) != 0)
  {
    v10 = (*(uint64_t (**)(_QWORD, std::__fs::filesystem::path *))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5), &v16);
    v11 = v10;
    if (a4 && v10)
    {
      (*(void (**)(std::__fs::filesystem::path *__return_ptr, _QWORD, std::__fs::filesystem::path *))(**((_QWORD **)this + 5) + 16))(&__p, *((_QWORD *)this + 5), &v16);
      std::istream::get();
      if (v11 < a4)
        a3[v11] = 0;
      v12 = __p.__pn_.__r_.__value_.__r.__words[0];
      __p.__pn_.__r_.__value_.__r.__words[0] = 0;
      if (v12)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v12 + 8))(v12);
    }
  }
  else
  {
    v11 = 0;
  }
  if (SHIBYTE(v16.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__pn_.__r_.__value_.__l.__data_);
  return v11;
}

void sub_1ADD6D308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a15)
    (*(void (**)(void *))(*(_QWORD *)a15 + 8))(a15);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::tennessee::nashville::ExtractResult(uint64_t a1, int *a2, std::vector<std::string>::size_type __n, int a4, int a5, int a6, uint64_t *a7)
{
  int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  char *v17;
  std::string *v18;
  std::string::size_type size;
  std::string::size_type v20;
  std::string::size_type v21;
  int v22;
  std::vector<std::string>::size_type v23;
  uint64_t *v24;
  std::string::size_type v25;
  std::string::size_type v26;
  uint64_t v27;
  unsigned int v28;
  char *v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  BOOL v45;
  unsigned int v46;
  _OWORD *v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  std::vector<std::string>::size_type v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  unint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  std::string::size_type v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  int v71;
  void **v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v85;
  int v86;
  int v88;
  std::string v89;
  __int128 v90;
  _OWORD v91[4];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _BYTE v95[160];
  char **v96;
  char *v97;
  uint64_t v98;
  std::string v99;
  _BYTE __p[80];
  __int128 v101;
  __int128 v102;
  __int128 v103;
  _QWORD v104[20];
  char *__s[4];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  _BYTE v112[152];
  char v113;
  uint64_t v114;

  v114 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    memset(&v99, 0, sizeof(v99));
    v97 = 0;
    v98 = 0;
    v96 = &v97;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v90);
    if (__n)
    {
      v12 = 0;
      v13 = 0;
      v14 = *MEMORY[0x1E0DE4F50];
      v81 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      v82 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      v80 = MEMORY[0x1E0DE4FB8] + 16;
      v15 = 1;
      do
      {
        __s[0] = (char *)&__s[3];
        *(_OWORD *)&__s[1] = xmmword_1AE1418C0;
        v113 = 1;
        quasar::tennessee::nashville::FormatToken((uint64_t)__s, "{wordname}{origin_start}", a2, a1, 0);
        v16 = a2[1];
        if (__s[2] >= __s[1])
        {
          if (v113)
          {
            __p[0] = 0;
            TBuffer<char>::insert((uint64_t)__s, (unint64_t)__s[2]--, __p, 1uLL);
          }
          else if (__s[1])
          {
            __s[1][(unint64_t)__s[0] - 1] = 0;
          }
        }
        else
        {
          __s[0][(unint64_t)__s[2]] = 0;
        }
        std::string::basic_string[abi:ne180100]<0>(&v89, __s[0]);
        quasar::tennessee::nashville::ConvertToken(&v89, a6, 1);
        v17 = (char *)v91 + *(_QWORD *)(*(_QWORD *)&v91[0] - 24);
        if ((v17[32] & 5) == 0)
        {
          (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v17 + 5) + 32))(__p, *((_QWORD *)v17 + 5), 0, 1, 16);
          if (v104[0] >= 1)
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)" ", 1);
        }
        if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = &v89;
        else
          v18 = (std::string *)v89.__r_.__value_.__r.__words[0];
        if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v89.__r_.__value_.__r.__words[2]);
        else
          size = v89.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)v18, size);
        v13 = ((v16 & 8) == 0) & (v13 | ((v16 & 4) >> 2));
        v12 = ((v16 & 2) == 0) & (v12 | v16);
        if (v12 != 1 || (v13 & 1) != 0)
        {
          if ((v12 & 1) == 0)
          {
            std::stringbuf::str();
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v96, (const void **)__p, (uint64_t)__p);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            v20 = v99.__r_.__value_.__l.__size_;
            if (v99.__r_.__value_.__l.__size_ >= v99.__r_.__value_.__r.__words[2])
            {
              v21 = std::vector<std::set<std::string>>::__push_back_slow_path<std::set<std::string> const&>((uint64_t *)&v99, (const void ***)&v96);
            }
            else
            {
              std::set<std::string>::set[abi:ne180100]((uint64_t *)v99.__r_.__value_.__l.__size_, (const void ***)&v96);
              v21 = v20 + 24;
            }
            v99.__r_.__value_.__l.__size_ = v21;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::swap[abi:ne180100]((uint64_t *)__p, (uint64_t *)&v90);
            *(_QWORD *)__p = v14;
            *(_QWORD *)&__p[*(_QWORD *)(v14 - 24)] = v82;
            *(_QWORD *)&__p[16] = v81;
            *(_QWORD *)&__p[24] = v80;
            if (SHIBYTE(v102) < 0)
              operator delete(*((void **)&v101 + 1));
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x1AF44D094](v104);
            std::__tree<std::string>::destroy((uint64_t)&v96, v97);
            v97 = 0;
            v98 = 0;
            v96 = &v97;
          }
        }
        else
        {
          std::stringbuf::str();
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v96, (const void **)__p, (uint64_t)__p);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::swap[abi:ne180100]((uint64_t *)__p, (uint64_t *)&v90);
          *(_QWORD *)__p = v14;
          *(_QWORD *)&__p[*(_QWORD *)(v14 - 24)] = v82;
          *(_QWORD *)&__p[16] = v81;
          *(_QWORD *)&__p[24] = MEMORY[0x1E0DE4FB8] + 16;
          if (SHIBYTE(v102) < 0)
            operator delete(*((void **)&v101 + 1));
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1AF44D094](v104);
        }
        v22 = *a2;
        if ((*a2 & 3) != 0)
        {
          v103 = 0u;
          memset(v104, 0, 144);
          v101 = 0u;
          v102 = 0u;
          memset(__p, 0, sizeof(__p));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
        }
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        if (v113 && (char **)__s[0] != &__s[3] && __s[0])
          MEMORY[0x1AF44D160]();
        a2 = (int *)((char *)a2 + (v22 & 0xFFFFFFFC));
        v23 = v15++;
      }
      while (v23 < __n);
    }
    if (a4 == 1)
    {
      v54 = (_QWORD *)operator new();
      std::vector<quasar::tennessee::ImmutableVector<std::string>>::vector(v54, 1uLL);
      v55 = a7;
      *(_QWORD *)__p = v54;
      v89.__r_.__value_.__r.__words[0] = 0;
      if (v99.__r_.__value_.__l.__size_ != v99.__r_.__value_.__r.__words[0])
      {
        v56 = 0;
        v57 = 0;
        v58 = 0;
        do
        {
          v86 = v57;
          v88 = v58;
          v59 = operator new();
          *(_QWORD *)v59 = 0;
          *(_QWORD *)(v59 + 8) = 0;
          *(_QWORD *)(v59 + 16) = 0;
          __s[0] = 0;
          std::unique_ptr<std::vector<quasar::tennessee::ImmutableVector<std::string>>>::reset[abi:ne180100]((void ***)&v89, (void **)v59);
          std::unique_ptr<std::vector<quasar::tennessee::ImmutableVector<std::string>>>::reset[abi:ne180100]((void ***)__s, 0);
          v60 = (_QWORD *)(v99.__r_.__value_.__r.__words[0] + 24 * v56);
          v63 = (_QWORD *)*v60;
          v61 = v60 + 1;
          v62 = v63;
          if (v63 == v61)
          {
LABEL_110:
            v71 = 0;
          }
          else
          {
            while (1)
            {
              v64 = **(_QWORD **)__p;
              v65 = *(_QWORD *)(*(_QWORD *)__p + 8);
              if (**(_QWORD **)__p != v65)
                break;
LABEL_104:
              v69 = (_QWORD *)v62[1];
              if (v69)
              {
                do
                {
                  v70 = v69;
                  v69 = (_QWORD *)*v69;
                }
                while (v69);
              }
              else
              {
                do
                {
                  v70 = (_QWORD *)v62[2];
                  v45 = *v70 == (_QWORD)v62;
                  v62 = v70;
                }
                while (!v45);
              }
              v62 = v70;
              if (v70 == v61)
                goto LABEL_110;
            }
            while (1)
            {
              v66 = v89.__r_.__value_.__r.__words[0];
              v67 = *(_QWORD *)(v89.__r_.__value_.__r.__words[0] + 8);
              if (a5 >= 1
                && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67 - *(_QWORD *)v89.__r_.__value_.__l.__data_) >> 3) >= a5)
              {
                break;
              }
              if (v67 >= *(_QWORD *)(v89.__r_.__value_.__r.__words[0] + 16))
              {
                v68 = std::vector<quasar::tennessee::ImmutableVector<std::string>>::__emplace_back_slow_path<quasar::tennessee::ImmutableVector<std::string> const&,std::string const&>((uint64_t *)v89.__r_.__value_.__l.__data_, v64, (const std::string *)(v62 + 4));
              }
              else
              {
                quasar::tennessee::ImmutableVector<std::string>::ImmutableVector(*(_QWORD **)(v89.__r_.__value_.__r.__words[0] + 8), v64, (const std::string *)(v62 + 4));
                v68 = v67 + 24;
                *(_QWORD *)(v66 + 8) = v67 + 24;
              }
              *(_QWORD *)(v66 + 8) = v68;
              v64 += 24;
              if (v64 == v65)
                goto LABEL_104;
            }
            v71 = 1;
          }
          v58 = v88 | v71;
          v72 = (void **)v89.__r_.__value_.__r.__words[0];
          v89.__r_.__value_.__r.__words[0] = 0;
          std::unique_ptr<std::vector<quasar::tennessee::ImmutableVector<std::string>>>::reset[abi:ne180100]((void ***)__p, v72);
          v56 = (v86 + 1);
          v57 = v86 + 1;
        }
        while (0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(v99.__r_.__value_.__l.__size_ - v99.__r_.__value_.__r.__words[0]) >> 3) > v56);
        v55 = a7;
        if ((v58 & (quasar::gLogLevel > 1)) != 0)
        {
          v111 = 0u;
          memset(v112, 0, 144);
          v109 = 0u;
          v110 = 0u;
          v107 = 0u;
          v108 = 0u;
          v106 = 0u;
          memset(__s, 0, sizeof(__s));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s);
          v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s, (uint64_t)"N-Best list was truncated since number of activate paths exceeded specified ", 76);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"limit (", 7);
          v74 = (_QWORD *)std::ostream::operator<<();
          v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"). If you need the entire list of canddiates, ", 46);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"please increase the maximum limit, or use a different data structure (e.g., SAUSAGE).", 85);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__s);
        }
      }
      v77 = **(_QWORD **)__p;
      v76 = *(_QWORD *)(*(_QWORD *)__p + 8);
      while (v77 != v76)
      {
        std::vector<quasar::tennessee::ImmutableVector<std::string>>::push_back[abi:ne180100](v55, v77);
        v77 += 24;
      }
      std::unique_ptr<std::vector<quasar::tennessee::ImmutableVector<std::string>>>::reset[abi:ne180100]((void ***)&v89, 0);
      std::unique_ptr<std::vector<quasar::tennessee::ImmutableVector<std::string>>>::reset[abi:ne180100]((void ***)__p, 0);
    }
    else
    {
      v24 = a7;
      if (a4 == 2)
      {
        v25 = v99.__r_.__value_.__l.__size_;
        v26 = v99.__r_.__value_.__r.__words[0];
        if (v99.__r_.__value_.__l.__size_ != v99.__r_.__value_.__r.__words[0])
        {
          v27 = 0;
          v28 = 0;
          v29 = (char *)*MEMORY[0x1E0DE4F50];
          v30 = *(char **)(MEMORY[0x1E0DE4F50] + 72);
          v85 = *(char **)(MEMORY[0x1E0DE4F50] + 64);
          v31 = (char *)(MEMORY[0x1E0DE4FB8] + 16);
          do
          {
            v32 = (_QWORD *)(v26 + 24 * v27);
            v35 = (_QWORD *)*v32;
            v33 = v32 + 1;
            v34 = v35;
            if (v35 != v33)
            {
              do
              {
                std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__s);
                v36 = (_QWORD *)std::ostream::operator<<();
                v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" ", 1);
                v38 = *((char *)v34 + 55);
                if (v38 >= 0)
                  v39 = (uint64_t)(v34 + 4);
                else
                  v39 = v34[4];
                if (v38 >= 0)
                  v40 = *((unsigned __int8 *)v34 + 55);
                else
                  v40 = v34[5];
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v39, v40);
                std::stringbuf::str();
                v89.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                v89.__r_.__value_.__l.__size_ = 1;
                v41 = v24[1];
                if (v41 >= v24[2])
                {
                  v42 = std::vector<quasar::tennessee::ImmutableVector<std::string>>::__emplace_back_slow_path<std::initializer_list<std::string>>(v24, (uint64_t)&v89);
                }
                else
                {
                  quasar::tennessee::ImmutableVector<std::string>::ImmutableVector<std::__wrap_iter<std::string const*>,true>((_QWORD *)v24[1], (std::string *)__p, (std::string *)&__p[24]);
                  v42 = v41 + 24;
                  v24 = a7;
                  a7[1] = v41 + 24;
                }
                v24[1] = v42;
                if ((__p[23] & 0x80000000) != 0)
                  operator delete(*(void **)__p);
                __s[0] = v29;
                *(char **)((char *)__s + *((_QWORD *)v29 - 3)) = v85;
                __s[2] = v30;
                __s[3] = v31;
                if (SHIBYTE(v110) < 0)
                  operator delete(*((void **)&v109 + 1));
                std::streambuf::~streambuf();
                std::iostream::~basic_iostream();
                MEMORY[0x1AF44D094](v112);
                v43 = (_QWORD *)v34[1];
                if (v43)
                {
                  do
                  {
                    v44 = v43;
                    v43 = (_QWORD *)*v43;
                  }
                  while (v43);
                }
                else
                {
                  do
                  {
                    v44 = (_QWORD *)v34[2];
                    v45 = *v44 == (_QWORD)v34;
                    v34 = v44;
                  }
                  while (!v45);
                }
                v34 = v44;
              }
              while (v44 != v33);
              v25 = v99.__r_.__value_.__l.__size_;
              v26 = v99.__r_.__value_.__r.__words[0];
            }
            v27 = ++v28;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - v26) >> 3) > v28);
        }
      }
    }
    *(_QWORD *)&v90 = *MEMORY[0x1E0DE4F50];
    v78 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)&v91[-1] + *(_QWORD *)(v90 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    *(_QWORD *)&v91[0] = v78;
    *((_QWORD *)&v91[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if (SHIBYTE(v93) < 0)
      operator delete(*((void **)&v92 + 1));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1AF44D094](v95);
    std::__tree<std::string>::destroy((uint64_t)&v96, v97);
    __s[0] = (char *)&v99;
    std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
  }
  else
  {
    memset(__p, 0, 24);
    std::vector<std::string>::reserve((std::vector<std::string> *)__p, __n);
    if (__n)
    {
      v46 = 1;
      do
      {
        __s[0] = (char *)&__s[3];
        *(_OWORD *)&__s[1] = xmmword_1AE1418C0;
        v113 = 1;
        quasar::tennessee::nashville::FormatToken((uint64_t)__s, "{wordname}{origin_start}", a2, a1, 0);
        if (__s[2] >= __s[1])
        {
          if (v113)
          {
            LOBYTE(v90) = 0;
            TBuffer<char>::insert((uint64_t)__s, (unint64_t)__s[2]--, (char *)&v90, 1uLL);
          }
          else if (__s[1])
          {
            __s[1][(unint64_t)__s[0] - 1] = 0;
          }
        }
        else
        {
          __s[0][(unint64_t)__s[2]] = 0;
        }
        std::string::basic_string[abi:ne180100]<0>(&v99, __s[0]);
        quasar::tennessee::nashville::ConvertToken(&v99, a6, 1);
        v47 = *(_OWORD **)&__p[8];
        if (*(_QWORD *)&__p[8] >= *(_QWORD *)&__p[16])
        {
          v49 = std::vector<std::string>::__emplace_back_slow_path<std::string&>((uint64_t *)__p, (__int128 *)&v99);
        }
        else
        {
          if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)&__p[8], v99.__r_.__value_.__l.__data_, v99.__r_.__value_.__l.__size_);
          }
          else
          {
            v48 = *(_OWORD *)&v99.__r_.__value_.__l.__data_;
            *(_QWORD *)(*(_QWORD *)&__p[8] + 16) = *((_QWORD *)&v99.__r_.__value_.__l + 2);
            *v47 = v48;
          }
          v49 = (uint64_t)v47 + 24;
        }
        *(_QWORD *)&__p[8] = v49;
        v50 = *a2;
        if ((*a2 & 3) != 0)
        {
          v94 = 0u;
          memset(v95, 0, 144);
          v92 = 0u;
          v93 = 0u;
          memset(v91, 0, sizeof(v91));
          v90 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v90);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v90);
        }
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v99.__r_.__value_.__l.__data_);
        if (v113 && (char **)__s[0] != &__s[3] && __s[0])
          MEMORY[0x1AF44D160]();
        a2 = (int *)((char *)a2 + (v50 & 0xFFFFFFFC));
        v51 = v46++;
      }
      while (v51 < __n);
    }
    v52 = a7[1];
    if (v52 >= a7[2])
    {
      v53 = std::vector<quasar::tennessee::ImmutableVector<std::string>>::__emplace_back_slow_path<std::vector<std::string> &>(a7, (std::string **)__p);
    }
    else
    {
      quasar::tennessee::ImmutableVector<std::string>::ImmutableVector<std::__wrap_iter<std::string const*>,true>((_QWORD *)a7[1], *(std::string **)__p, *(std::string **)&__p[8]);
      v53 = v52 + 24;
      a7[1] = v52 + 24;
    }
    a7[1] = v53;
    __s[0] = __p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__s);
  }
}

void sub_1ADD6DF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  uint64_t a66;
  void *__p;
  void *a71;

  std::unique_ptr<std::vector<quasar::tennessee::ImmutableVector<std::string>>>::reset[abi:ne180100]((void ***)&a26, 0);
  std::unique_ptr<std::vector<quasar::tennessee::ImmutableVector<std::string>>>::reset[abi:ne180100]((void ***)&a71, 0);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a29);
  std::__tree<std::string>::destroy((uint64_t)&a65, (char *)a66);
  STACK[0x310] = (unint64_t)&__p;
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x310]);
  _Unwind_Resume(a1);
}

void TWordBlockMaker::~TWordBlockMaker(TWordBlockMaker *this)
{
  *(_QWORD *)this = &off_1E5D16830;
  TAllocator::clear((TWordBlockMaker *)((char *)this + 72));
}

{
  *(_QWORD *)this = &off_1E5D16830;
  TAllocator::clear((TWordBlockMaker *)((char *)this + 72));
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::tennessee::nashville::FormatToken(uint64_t result, char *__s, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  int v11;
  char *v12;
  size_t v13;
  char *v14;
  int v15;
  unint64_t v16;
  const char *v17;
  const char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v33;
  char v35;
  char __str[8];
  __int128 v37;
  _BYTE v38[256];
  char v39;
  uint64_t v40;

  v6 = result;
  LODWORD(v7) = 0;
  v40 = *MEMORY[0x1E0C80C00];
  v33 = (uint64_t)(a3 + 5);
  v8 = MEMORY[0x1E0C80978];
  v9 = "{wordname}";
  v10 = "{text}";
  while (1)
  {
    while (1)
    {
      v11 = *__s;
      if (v11 != 58)
        break;
      v14 = __s + 1;
      result = atoi(__s + 1);
      do
      {
        __s = v14;
        v15 = *v14;
        if (v15 < 0)
          break;
        ++v14;
      }
      while ((*(_DWORD *)(v8 + 4 * v15 + 60) & 0x400) != 0);
      v7 = (result + v7);
      while (1)
      {
        v16 = *(_QWORD *)(v6 + 16);
        if (v16 >= v7)
          break;
        __str[0] = 32;
        result = TBuffer<char>::insert(v6, v16, __str, 1uLL);
      }
    }
    if (v11 != 123)
      break;
    v12 = strchr(__s, 125);
    if (v12)
    {
      v13 = v12 - __s + 1;
      if (!strncmp(__s, v9, v13))
      {
        result = tildeEscape(v33, v6);
        goto LABEL_57;
      }
      if (!strncmp(__s, v10, v13))
      {
        v17 = v10;
        v18 = v9;
        *(_QWORD *)__str = v38;
        v37 = xmmword_1AE1418C0;
        v39 = 1;
        v20 = a3[2];
        v19 = a3[3];
        TBuffer<char>::resize((uint64_t)__str, 0);
        TBuffer<char>::insert((uint64_t)__str, 0, (char *)(a4 + v20), (v19 - v20));
        if (*((_QWORD *)&v37 + 1) >= (unint64_t)v37)
        {
          if (v39)
          {
            v35 = 0;
            TBuffer<char>::insert((uint64_t)__str, *((unint64_t *)&v37 + 1), &v35, 1uLL);
            --*((_QWORD *)&v37 + 1);
          }
          else if ((_QWORD)v37)
          {
            *(_BYTE *)(v37 + *(_QWORD *)__str - 1) = 0;
          }
        }
        else
        {
          *(_BYTE *)(*(_QWORD *)__str + *((_QWORD *)&v37 + 1)) = 0;
        }
        result = slashEscape(*(uint64_t *)__str, v6);
        if (v39)
        {
          result = *(_QWORD *)__str;
          if (*(_BYTE **)__str != v38)
          {
            if (*(_QWORD *)__str)
              result = MEMORY[0x1AF44D160]();
          }
        }
        v9 = v18;
        v10 = v17;
      }
      else
      {
        if (!strncmp(__s, "{text_start_index}", v13))
        {
          v21 = (int)a3[2];
          if ((_DWORD)v21 == -1)
            v22 = -1;
          else
            v22 = v21 + a5;
          snprintf(__str, 0x40uLL, "%lli", v22);
          v23 = 0;
          v24 = *(_QWORD *)(v6 + 16);
          while (__str[v23++])
            ;
          goto LABEL_34;
        }
        if (!strncmp(__s, "{text_end_index}", v13))
        {
          v28 = (int)a3[3];
          if ((_DWORD)v28 == -1)
            v29 = -1;
          else
            v29 = v28 + a5;
          snprintf(__str, 0x40uLL, "%lli", v29);
          v23 = 0;
          v24 = *(_QWORD *)(v6 + 16);
          while (__str[v23++])
            ;
LABEL_34:
          result = TBuffer<char>::insert(v6, v24, __str, v23 - 1);
          goto LABEL_57;
        }
        if (!strncmp(__s, "{origin_start}", v13) || !strncmp(__s, "{origin_end}", v13))
        {
          __str[0] = 60;
          TBuffer<char>::insert(v6, *(_QWORD *)(v6 + 16), __str, 1uLL);
          if (!strncmp(__s, "{origin_end}", v13))
          {
            __str[0] = 47;
            TBuffer<char>::insert(v6, *(_QWORD *)(v6 + 16), __str, 1uLL);
          }
          v26 = a3[1];
          if ((v26 & 0x40) != 0)
          {
            result = TBuffer<char>::insert(v6, *(_QWORD *)(v6 + 16), "voc>", 4uLL);
          }
          else if ((v26 & 0x10) != 0)
          {
            result = TBuffer<char>::insert(v6, *(_QWORD *)(v6 + 16), "junk>", 5uLL);
          }
          else
          {
            v27 = *(_QWORD *)(v6 + 16);
            if ((v26 & 0x20) != 0)
              result = TBuffer<char>::insert(v6, v27, "debug>", 6uLL);
            else
              result = TBuffer<char>::insert(v6, v27, "oov>", 4uLL);
          }
        }
        else
        {
          result = strncmp(__s, "{alt_start}", v13);
          if ((_DWORD)result)
          {
            result = strncmp(__s, "{alt_end}", v13);
            if ((_DWORD)result)
            {
              result = strncmp(__s, "{seq_start}", v13);
              if ((_DWORD)result)
              {
                result = strncmp(__s, "{seq_end}", v13);
                if ((_DWORD)result)
                {
                  __str[0] = 123;
                  result = TBuffer<char>::insert(v6, *(_QWORD *)(v6 + 16), __str, 1uLL);
                  v13 = 1;
                }
                else if ((a3[1] & 8) != 0)
                {
                  result = TBuffer<char>::insert(v6, *(_QWORD *)(v6 + 16), "</seq>", 6uLL);
                }
              }
              else if ((a3[1] & 4) != 0)
              {
                result = TBuffer<char>::insert(v6, *(_QWORD *)(v6 + 16), "<seq>", 5uLL);
              }
            }
            else if ((a3[1] & 2) != 0)
            {
              result = TBuffer<char>::insert(v6, *(_QWORD *)(v6 + 16), "</alt>", 6uLL);
            }
          }
          else if ((a3[1] & 1) != 0)
          {
            result = TBuffer<char>::insert(v6, *(_QWORD *)(v6 + 16), "<alt>", 5uLL);
          }
        }
      }
LABEL_57:
      __s += v13;
    }
    else
    {
      __str[0] = 123;
      result = TBuffer<char>::insert(v6, *(_QWORD *)(v6 + 16), __str, 1uLL);
LABEL_25:
      ++__s;
    }
  }
  if (*__s)
  {
    __str[0] = *__s;
    result = TBuffer<char>::insert(v6, *(_QWORD *)(v6 + 16), __str, 1uLL);
    goto LABEL_25;
  }
  return result;
}

void sub_1ADD6E740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  if (a54)
    quasar::tennessee::nashville::FormatToken(&a19, a16);
  _Unwind_Resume(exception_object);
}

std::string *quasar::tennessee::nashville::ConvertToken(std::string *result, int a2, int a3)
{
  std::string *v5;
  char v6;
  uint64_t size;
  std::string *v8;
  std::string *v9;
  uint64_t v10;
  const char *v12;
  uint64_t v13;
  std::string *v14;
  std::string *v15;
  uint64_t v18;
  BOOL v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  std::string::size_type v24;
  char v25;
  std::string::size_type v26;
  uint64_t v27;
  std::string *v28;
  std::string *v29;
  size_t v30;
  std::string *v31;
  std::string *v32;
  std::string::size_type v33;
  int64_t v34;
  std::string::size_type v36;

  v5 = result;
  v6 = HIBYTE(result->__r_.__value_.__r.__words[2]);
  if (v6 >= 0)
    size = HIBYTE(result->__r_.__value_.__r.__words[2]);
  else
    size = result->__r_.__value_.__l.__size_;
  if (v6 >= 0)
    v8 = result;
  else
    v8 = (std::string *)result->__r_.__value_.__r.__words[0];
  v9 = (std::string *)((char *)v8 + size);
  if (size > 5)
  {
    v10 = size;
    result = v8;
    do
    {
      result = (std::string *)memchr(result, 60, v10 - 5);
      if (!result)
        break;
      if (LODWORD(result->__r_.__value_.__l.__data_) == 1853188668
        && WORD2(result->__r_.__value_.__r.__words[0]) == 15979)
      {
        if (result == v9 || (char *)result - (char *)v8 == -1)
          break;
        v12 = "<JUNK>";
LABEL_19:
        result = (std::string *)MEMORY[0x1AF44C914](v5, v12);
        goto LABEL_62;
      }
      result = (std::string *)((char *)result + 1);
      v10 = (char *)v9 - (char *)result;
    }
    while ((char *)v9 - (char *)result > 5);
  }
  if (size >= 5)
  {
    v13 = size;
    v14 = v8;
    do
    {
      v15 = (std::string *)memchr(v14, 60, v13 - 4);
      if (!v15)
        break;
      if (LODWORD(v15->__r_.__value_.__l.__data_) == 1668249148 && v15->__r_.__value_.__s.__data_[4] == 62)
      {
        if (v15 != v9 && (char *)v15 - (char *)v8 != -1)
        {
          result = std::string::erase(v5, (char *)v15 - (char *)v8, 5uLL);
          goto LABEL_62;
        }
        break;
      }
      v14 = (std::string *)((char *)&v15->__r_.__value_.__l.__data_ + 1);
      v13 = (char *)v9 - (char *)v14;
    }
    while ((char *)v9 - (char *)v14 >= 5);
    result = v8;
    do
    {
      result = (std::string *)memchr(result, 60, size - 4);
      if (!result)
        break;
      if (LODWORD(result->__r_.__value_.__l.__data_) == 1987014460 && result->__r_.__value_.__s.__data_[4] == 62)
      {
        if (result != v9 && (char *)result - (char *)v8 != -1)
        {
          result = std::string::erase(v5, (char *)result - (char *)v8, 5uLL);
          if (a2)
          {
            v18 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
            v19 = (v18 & 0x80u) != 0;
            if ((v18 & 0x80u) != 0)
              v18 = v5->__r_.__value_.__l.__size_;
            if (v19)
              v20 = (std::string *)v5->__r_.__value_.__r.__words[0];
            else
              v20 = v5;
            if (v18 >= 9)
            {
              v21 = (std::string *)((char *)v20 + v18);
              v22 = v20;
              do
              {
                result = (std::string *)memchr(v22, 70, v18 - 8);
                if (!result)
                  break;
                if (result->__r_.__value_.__r.__words[0] == 0x4D414E5453524946
                  && result->__r_.__value_.__s.__data_[8] == 69)
                {
                  if (result == v21 || (char *)result - (char *)v20 == -1)
                    break;
                  goto LABEL_62;
                }
                v22 = (std::string *)((char *)&result->__r_.__value_.__l.__data_ + 1);
                v18 = (char *)v21 - (char *)v22;
              }
              while ((char *)v21 - (char *)v22 >= 9);
            }
            result = (std::string *)std::string::find[abi:ne180100]((uint64_t *)v5, "MIDDLENAME", 0);
            if (result == (std::string *)-1)
            {
              result = (std::string *)std::string::find[abi:ne180100]((uint64_t *)v5, "LASTNAME", 0);
              if (result == (std::string *)-1)
              {
                result = (std::string *)std::string::find[abi:ne180100]((uint64_t *)v5, "LME", 0);
                if (result == (std::string *)-1)
                {
                  v12 = "<UNK>";
                  goto LABEL_19;
                }
              }
            }
          }
        }
        break;
      }
      result = (std::string *)((char *)result + 1);
      size = (char *)v9 - (char *)result;
    }
    while ((char *)v9 - (char *)result >= 5);
  }
LABEL_62:
  if (a3)
  {
    v24 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
    v25 = v24;
    v26 = v5->__r_.__value_.__l.__size_;
    if ((v24 & 0x80u) == 0)
      v27 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
    else
      v27 = v5->__r_.__value_.__l.__size_;
    if ((v24 & 0x80u) == 0)
      v28 = v5;
    else
      v28 = (std::string *)v5->__r_.__value_.__r.__words[0];
    v29 = (std::string *)((char *)v28 + v27);
    if (v27 >= 1)
    {
      v30 = v27;
      v31 = v28;
      do
      {
        v32 = (std::string *)memchr(v31, 92, v30);
        if (!v32)
          break;
        if (v32->__r_.__value_.__s.__data_[0] == 92)
          goto LABEL_75;
        v31 = (std::string *)((char *)&v32->__r_.__value_.__l.__data_ + 1);
        v30 = (char *)v29 - (char *)v31;
      }
      while ((char *)v29 - (char *)v31 > 0);
    }
    v32 = (std::string *)((char *)v28 + v27);
LABEL_75:
    if (v32 == v29)
      v33 = -1;
    else
      v33 = (char *)v32 - (char *)v28;
    result = (std::string *)((char *)&v28->__r_.__value_.__l.__data_ + v33 + 1);
    v34 = (char *)v29 - (char *)result;
    if (v27 >= v33 + 1 && v34 >= 1)
    {
      do
      {
        result = (std::string *)memchr(result, 92, v34);
        if (!result)
          break;
        if (result->__r_.__value_.__s.__data_[0] == 92)
        {
          if (result != v29 && (char *)result - (char *)v28 != -1)
          {
            result = std::string::erase(v5, (char *)result - (char *)v28, 0xFFFFFFFFFFFFFFFFLL);
            v24 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
            v26 = v5->__r_.__value_.__l.__size_;
            v25 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
          }
          break;
        }
        result = (std::string *)((char *)result + 1);
        v34 = (char *)v29 - (char *)result;
      }
      while ((char *)v29 - (char *)result >= 1);
    }
    if (v25 >= 0)
      v36 = v24;
    else
      v36 = v26;
    if (v33 == v36 - 1)
      return std::string::erase(v5, v33, 0xFFFFFFFFFFFFFFFFLL);
  }
  return result;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::swap[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::ios_base *v5;
  std::ios_base *v6;
  std::ios_base_vtbl *v7;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  a1[1] = a2[1];
  a2[1] = v2;
  v5 = (std::ios_base *)((char *)a1 + *(_QWORD *)(v3 - 24));
  v6 = (std::ios_base *)((char *)a2 + *(_QWORD *)(v4 - 24));
  std::ios_base::swap(v5, v6);
  v7 = v5[1].__vftable;
  v5[1].__vftable = v6[1].__vftable;
  v6[1].__vftable = v7;
  LODWORD(v7) = v5[1].__fmtflags_;
  v5[1].__fmtflags_ = v6[1].__fmtflags_;
  v6[1].__fmtflags_ = v7;
  return std::stringbuf::swap();
}

unint64_t std::string::find[abi:ne180100](uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  size_t v7;
  int64_t v8;
  void *v9;
  char *v10;
  int64_t v11;
  char *v12;
  int v14;
  uint64_t v15;
  char *v16;

  v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    v5 = *a1;
    v6 = a1[1];
  }
  else
  {
    v6 = *((unsigned __int8 *)a1 + 23);
  }
  v7 = strlen(__s);
  if (v6 < a3)
    return -1;
  v8 = v7;
  if (v7)
  {
    v9 = (void *)(v5 + a3);
    v10 = (char *)(v5 + v6);
    v11 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v8)
    {
      v14 = *__s;
      do
      {
        v15 = v11 - v8;
        if (v15 == -1)
          break;
        v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16)
          break;
        v12 = v16;
        if (!memcmp(v16, __s, v8))
          goto LABEL_9;
        v9 = v12 + 1;
        v11 = v10 - (v12 + 1);
      }
      while (v11 >= v8);
    }
    v12 = v10;
LABEL_9:
    if (v12 == v10)
      return -1;
    else
      return (unint64_t)&v12[-v5];
  }
  return a3;
}

uint64_t std::vector<quasar::tennessee::ImmutableVector<std::string>>::__emplace_back_slow_path<std::vector<std::string> &>(uint64_t *a1, std::string **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[24 * v4];
  v15 = v14;
  v16 = &v10[24 * v9];
  quasar::tennessee::ImmutableVector<std::string>::ImmutableVector<std::__wrap_iter<std::string const*>,true>(v14, *a2, a2[1]);
  v15 = v14 + 24;
  std::vector<quasar::tennessee::ImmutableVector<std::string>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::tennessee::ImmutableVector<std::string>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1ADD6ED60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::tennessee::ImmutableVector<std::string>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *quasar::tennessee::ImmutableVector<std::string>::ImmutableVector<std::__wrap_iter<std::string const*>,true>(_QWORD *a1, std::string *a2, std::string *a3)
{
  unint64_t v6;
  _QWORD *v7;
  std::string *v8;

  v6 = a3 - a2;
  *a1 = &unk_1E5D3C420;
  a1[1] = v6;
  a1[2] = 0;
  is_mul_ok(v6, 0x18uLL);
  v7 = (_QWORD *)operator new[]();
  *v7 = 24;
  v7[1] = v6;
  v8 = (std::string *)(v7 + 2);
  if (a3 != a2)
    bzero(v7 + 2, 24 * ((24 * v6 - 24) / 0x18) + 24);
  a1[2] = v8;
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(a2, a3, v8);
  return a1;
}

void quasar::tennessee::ImmutableVector<std::string>::~ImmutableVector(_QWORD *a1)
{
  quasar::tennessee::ImmutableVector<std::string>::~ImmutableVector(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *quasar::tennessee::ImmutableVector<std::string>::~ImmutableVector(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &unk_1E5D3C420;
  v2 = a1[2];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 - 8);
    if (v3)
    {
      v4 = 24 * v3;
      do
      {
        if (*(char *)(v2 + v4 - 1) < 0)
          operator delete(*(void **)(v2 + v4 - 24));
        v4 -= 24;
      }
      while (v4);
    }
    MEMORY[0x1AF44D160](v2 - 16, 0x1012C80EC159624);
  }
  return a1;
}

uint64_t std::vector<quasar::tennessee::ImmutableVector<std::string>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::tennessee::ImmutableVector<std::string>>,std::reverse_iterator<quasar::tennessee::ImmutableVector<std::string>*>,std::reverse_iterator<quasar::tennessee::ImmutableVector<std::string>*>,std::reverse_iterator<quasar::tennessee::ImmutableVector<std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::tennessee::ImmutableVector<std::string>>,std::reverse_iterator<quasar::tennessee::ImmutableVector<std::string>*>,std::reverse_iterator<quasar::tennessee::ImmutableVector<std::string>*>,std::reverse_iterator<quasar::tennessee::ImmutableVector<std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v10 = 0;
  v11 = a7 - 24;
  while (a3 + v10 != a5)
  {
    v12 = (_QWORD *)(v11 + v10);
    v10 -= 24;
    quasar::tennessee::ImmutableVector<std::string>::ImmutableVector(v12, v10 + a3);
  }
  return a6;
}

_QWORD *quasar::tennessee::ImmutableVector<std::string>::ImmutableVector(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  std::string *v6;

  v4 = *(_QWORD *)(a2 + 8);
  *a1 = &unk_1E5D3C420;
  a1[1] = v4;
  is_mul_ok(v4, 0x18uLL);
  v5 = (_QWORD *)operator new[]();
  *v5 = 24;
  v5[1] = v4;
  v6 = (std::string *)(v5 + 2);
  if (v4)
    bzero(v5 + 2, 24 * ((24 * v4 - 24) / 0x18) + 24);
  a1[2] = v6;
  if (a1[1])
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(*(std::string **)(a2 + 16), (std::string *)(*(_QWORD *)(a2 + 16) + 24 * *(_QWORD *)(a2 + 8)), v6);
  return a1;
}

uint64_t std::__split_buffer<quasar::tennessee::ImmutableVector<std::string>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 24);
    *(_QWORD *)(a1 + 16) = i - 24;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<std::set<std::string>>::__push_back_slow_path<std::set<std::string> const&>(uint64_t *a1, const void ***a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  uint64_t *v14;
  uint64_t *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (uint64_t *)&v10[24 * v4];
  v16 = &v10[24 * v9];
  std::set<std::string>::set[abi:ne180100](v14, a2);
  v15 = v14 + 3;
  std::vector<std::set<std::string>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<std::set<std::string>>::~__split_buffer(&v13);
  return v11;
}

void sub_1ADD6F23C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::set<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::tennessee::ImmutableVector<std::string>>::__emplace_back_slow_path<std::initializer_list<std::string>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[24 * v4];
  v15 = v14;
  v16 = &v10[24 * v9];
  quasar::tennessee::ImmutableVector<std::string>::ImmutableVector<std::__wrap_iter<std::string const*>,true>(v14, *(std::string **)a2, (std::string *)(*(_QWORD *)a2 + 24 * *(_QWORD *)(a2 + 8)));
  v15 = v14 + 24;
  std::vector<quasar::tennessee::ImmutableVector<std::string>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::tennessee::ImmutableVector<std::string>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1ADD6F344(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::tennessee::ImmutableVector<std::string>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<quasar::tennessee::ImmutableVector<std::string>>::vector(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (_QWORD *)a1[1];
    v5 = &v4[3 * a2];
    do
    {
      v4[1] = 0;
      v4[2] = 0;
      *v4 = &unk_1E5D3C420;
      v4 += 3;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_1ADD6F3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<quasar::tennessee::ImmutableVector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ***std::unique_ptr<std::vector<quasar::tennessee::ImmutableVector<std::string>>>::reset[abi:ne180100](void ***result, void **a2)
{
  void **v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = v2;
    std::vector<quasar::tennessee::ImmutableVector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (void ***)MEMORY[0x1AF44D190](v2, 0x20C40960023A9);
  }
  return result;
}

uint64_t std::vector<quasar::tennessee::ImmutableVector<std::string>>::__emplace_back_slow_path<quasar::tennessee::ImmutableVector<std::string> const&,std::string const&>(uint64_t *a1, uint64_t a2, const std::string *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x555555555555555)
    v11 = 0xAAAAAAAAAAAAAAALL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = &v12[24 * v5];
  v18 = &v12[24 * v11];
  quasar::tennessee::ImmutableVector<std::string>::ImmutableVector(v16, a2, a3);
  v17 = v16 + 24;
  std::vector<quasar::tennessee::ImmutableVector<std::string>>::__swap_out_circular_buffer(a1, &v15);
  v13 = a1[1];
  std::__split_buffer<quasar::tennessee::ImmutableVector<std::string>>::~__split_buffer((uint64_t)&v15);
  return v13;
}

void sub_1ADD6F528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::tennessee::ImmutableVector<std::string>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *quasar::tennessee::ImmutableVector<std::string>::ImmutableVector(_QWORD *a1, uint64_t a2, const std::string *a3)
{
  uint64_t v6;
  _QWORD *v7;
  std::string *v8;
  uint64_t v9;

  v6 = *(_QWORD *)(a2 + 8);
  is_mul_ok(v6 + 1, 0x18uLL);
  v7 = (_QWORD *)operator new[]();
  *v7 = 24;
  v7[1] = v6 + 1;
  v8 = (std::string *)(v7 + 2);
  if (v6 != -1)
    bzero(v7 + 2, 24 * (24 * v6 / 0x18uLL) + 24);
  *a1 = &unk_1E5D3C420;
  a1[1] = v6 + 1;
  a1[2] = v8;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(*(std::string **)(a2 + 16), (std::string *)(*(_QWORD *)(a2 + 16) + 24 * v9), v8);
    v8 = (std::string *)a1[2];
    v6 = a1[1] - 1;
  }
  std::string::operator=(&v8[v6], a3);
  return a1;
}

void sub_1ADD6F644(_Unwind_Exception *a1)
{
  _QWORD *v1;

  quasar::tennessee::ImmutableVector<std::string>::~ImmutableVector(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::tennessee::ImmutableVector<std::string>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *(_QWORD *)v14 = &unk_1E5D3C420;
    *((_QWORD *)v14 + 1) = *(_QWORD *)(a2 + 8);
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<quasar::tennessee::ImmutableVector<std::string>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<quasar::tennessee::ImmutableVector<std::string>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = &unk_1E5D3C420;
    v7[1] = *(_QWORD *)(a2 + 8);
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1ADD6F788(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::tennessee::ImmutableVector<std::string>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::SymbolMap::ReadFstText<std::shared_ptr<fst::SymbolTable>>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *Text;
  uint64_t v5;
  void *__p;
  char v7;

  fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)&v5);
  Text = fst::SymbolTable::ReadText(a1);
  std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<fst::SymbolTable,void>(a2, (uint64_t)Text);
  if (v7 < 0)
    operator delete(__p);
}

void sub_1ADD6F7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::SymbolMap::ReadFstBinary<std::shared_ptr<fst::SymbolTable>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;

  v3 = fst::SymbolTable::Read(a1);
  return std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<fst::SymbolTable,void>(a2, (uint64_t)v3);
}

_QWORD *fst::SymbolTable::Read(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *__p[2];
  char v11;
  char v12;
  _QWORD v13[2];
  _BYTE v14[408];
  _QWORD v15[20];

  v15[19] = *MEMORY[0x1E0C80C00];
  std::ifstream::basic_ifstream(v13);
  if (*(_DWORD *)&v14[*(_QWORD *)(v13[0] - 24) + 16])
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v2 = fst::LogMessage::LogMessage((fst *)&v12, (uint64_t)__p);
    v3 = (_QWORD *)fst::cerr(v2);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"SymbolTable::Read: Can't open file ", 35);
    v5 = *(char *)(a1 + 23);
    if (v5 >= 0)
      v6 = a1;
    else
      v6 = *(_QWORD *)a1;
    if (v5 >= 0)
      v7 = *(unsigned __int8 *)(a1 + 23);
    else
      v7 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v12);
    if (v11 < 0)
      operator delete(__p[0]);
    v8 = 0;
  }
  else
  {
    v8 = fst::SymbolTable::Read(v13, (const std::string *)a1);
  }
  v13[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1AF44CA70](v14);
  std::istream::~istream();
  MEMORY[0x1AF44D094](v15);
  return v8;
}

void sub_1ADD6F980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  std::ifstream::~ifstream(&a20);
  _Unwind_Resume(a1);
}

void quasar::SymbolMap::ReadQuasarBinary<std::shared_ptr<fst::SymbolTable>>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  _QWORD *v12;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  fst::MappedFile *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  void *__p[2];
  char v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  int v69;
  _QWORD v70[2];
  _BYTE v71[408];
  _QWORD v72[20];

  v72[19] = *MEMORY[0x1E0C80C00];
  v48 = 0;
  v49 = 0;
  v6 = MEMORY[0x1E0DE4FA8];
  v7 = MEMORY[0x1E0DE4FA8] + 64;
  v8 = (_QWORD *)MEMORY[0x1E0DE4F40];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  v72[0] = MEMORY[0x1E0DE4FA8] + 64;
  v70[0] = v9;
  *(_QWORD *)((char *)v70 + *(_QWORD *)(v9 - 24)) = v10;
  v70[1] = 0;
  v11 = (std::ios_base *)((char *)v70 + *(_QWORD *)(v70[0] - 24));
  std::ios_base::init(v11, v71);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v70[0] = v6 + 24;
  v72[0] = v7;
  MEMORY[0x1AF44CA64](v71);
  std::ifstream::open();
  v12 = (_QWORD *)std::istream::read();
  if ((*((_BYTE *)v12 + *(_QWORD *)(*v12 - 24) + 32) & 5) != 0)
  {
    if (quasar::gLogLevel >= 1)
    {
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v51 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v51, (uint64_t)"Could not read magic header", 27);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v51);
    }
LABEL_13:
    v15 = 0;
    *a3 = 0;
    a3[1] = 0;
    v48 = 0;
    v49 = 0;
    goto LABEL_14;
  }
  if (v68 != 0x5F4D59535F525351 || v69 != 808464470)
  {
    if (quasar::gLogLevel >= 1)
    {
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v51 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v51, (uint64_t)"Magic header was wrong", 22);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v51);
    }
    goto LABEL_13;
  }
  v47 = 0;
  v14 = (_QWORD *)std::istream::read();
  if ((*((_BYTE *)v14 + *(_QWORD *)(*v14 - 24) + 32) & 5) != 0)
  {
    if (quasar::gLogLevel >= 1)
    {
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v51 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v51, (uint64_t)"Could not read number of words", 30);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v51);
    }
    goto LABEL_13;
  }
  fst::FstReadOptions::FstReadOptions(__p, a1, 0, 0, 0);
  v46 = 2;
  std::istream::tellg();
  std::istream::seekg();
  std::istream::tellg();
  v18 = v59;
  v19 = v50;
  std::istream::seekg();
  v20 = fst::MappedFile::Map((uint64_t)v70, (uint64_t)__p, v18 - v19);
  std::shared_ptr<fst::MappedFile>::shared_ptr[abi:ne180100]<fst::MappedFile,void>(&v42, (uint64_t)v20);
  if (!v42)
  {
    if (quasar::gLogLevel >= 1)
    {
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v51 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v51, (uint64_t)"Could not read mapped file", 26);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v51);
    }
    *a3 = 0;
    a3[1] = 0;
    v48 = 0;
    v49 = 0;
    goto LABEL_40;
  }
  if (a2)
  {
    v21 = operator new();
    v22 = v21;
    v23 = v47;
    v40 = v42;
    v41 = v43;
    if (v43)
    {
      p_shared_owners = (unint64_t *)&v43->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
    quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(v21, v23, &v40);
    std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<quasar::SymbolMap::SortedSymbolMapQuasarImpl,void>(a3, v22);
    v26 = v41;
    if (!v41)
      goto LABEL_40;
    v27 = (unint64_t *)&v41->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
  }
  else
  {
    v29 = operator new();
    v30 = v29;
    v31 = v47;
    v38 = v42;
    v39 = v43;
    if (v43)
    {
      v32 = (unint64_t *)&v43->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    quasar::SymbolMap::SymbolMapQuasarImpl::SymbolMapQuasarImpl(v29, v31, &v38);
    std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<quasar::SymbolMap::SymbolMapQuasarImpl,void>(a3, v30);
    v26 = v39;
    if (!v39)
      goto LABEL_40;
    v34 = (unint64_t *)&v39->__shared_owners_;
    do
      v28 = __ldaxr(v34);
    while (__stlxr(v28 - 1, v34));
  }
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
LABEL_40:
  v35 = v43;
  if (v43)
  {
    v36 = (unint64_t *)&v43->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v45 < 0)
    operator delete(__p[0]);
  v15 = v49;
LABEL_14:
  v70[0] = *v8;
  *(_QWORD *)((char *)v70 + *(_QWORD *)(v70[0] - 24)) = v8[3];
  MEMORY[0x1AF44CA70](v71);
  std::istream::~istream();
  MEMORY[0x1AF44D094](v72);
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1ADD6FF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a46);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (a20 < 0)
    operator delete(__p);
  std::ifstream::~ifstream(&STACK[0x238]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void quasar::SymbolMap::ReadQuasarBinary<std::shared_ptr<fst::SymbolTable>>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  quasar::SymbolMap::ReadQuasarBinary<std::shared_ptr<fst::SymbolTable>>(a1, 0, a2);
}

void quasar::SymbolMap::ReadAndSortQuasarBinary<std::shared_ptr<fst::SymbolTable>>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  quasar::SymbolMap::ReadQuasarBinary<std::shared_ptr<fst::SymbolTable>>(a1, 1, a2);
}

void quasar::SymbolMap::ReadMarisa<std::shared_ptr<fst::SymbolTable>>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  unint64_t v10;
  fst::MappedFile *v11;
  marisa::grimoire::trie::LoudsTrie **v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  void *__p[2];
  char v30;
  int v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  _OWORD v34[8];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _QWORD v44[2];
  _BYTE v45[408];
  _QWORD v46[20];

  v46[19] = *MEMORY[0x1E0C80C00];
  v32 = 0;
  v33 = 0;
  v4 = MEMORY[0x1E0DE4FA8];
  v5 = MEMORY[0x1E0DE4FA8] + 64;
  v6 = (_QWORD *)MEMORY[0x1E0DE4F40];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  v46[0] = MEMORY[0x1E0DE4FA8] + 64;
  v44[0] = v7;
  *(_QWORD *)((char *)v44 + *(_QWORD *)(v7 - 24)) = v8;
  v44[1] = 0;
  v9 = (std::ios_base *)((char *)v44 + *(_QWORD *)(v44[0] - 24));
  std::ios_base::init(v9, v45);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v44[0] = v4 + 24;
  v46[0] = v5;
  MEMORY[0x1AF44CA64](v45);
  std::ifstream::open();
  fst::FstReadOptions::FstReadOptions(__p, a1, 0, 0, 0);
  v31 = 2;
  std::istream::seekg();
  std::istream::tellg();
  v10 = v35;
  std::istream::seekg();
  v11 = fst::MappedFile::Map((uint64_t)v44, (uint64_t)__p, v10);
  std::shared_ptr<fst::MappedFile>::shared_ptr[abi:ne180100]<fst::MappedFile,void>(&v27, (uint64_t)v11);
  if (v27)
  {
    v12 = (marisa::grimoire::trie::LoudsTrie **)operator new();
    v13 = (uint64_t)v12;
    v25 = v27;
    v26 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    quasar::SymbolMap::SymbolMapMarisaImpl::SymbolMapMarisaImpl(v12, &v25, v10);
    std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<quasar::SymbolMap::SymbolMapMarisaImpl,void>(a2, v13);
    v16 = v26;
    if (v26)
    {
      v17 = (unint64_t *)&v26->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    if (quasar::gLogLevel >= 1)
    {
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v35 = 0u;
      memset(v34, 0, sizeof(v34));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Could not read mapped file", 26);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v34);
    }
    *a2 = 0;
    a2[1] = 0;
    v32 = 0;
    v33 = 0;
  }
  v19 = v28;
  if (v28)
  {
    v20 = (unint64_t *)&v28->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v30 < 0)
    operator delete(__p[0]);
  v44[0] = *v6;
  *(_QWORD *)((char *)v44 + *(_QWORD *)(v44[0] - 24)) = v6[3];
  MEMORY[0x1AF44CA70](v45);
  std::istream::~istream();
  MEMORY[0x1AF44D094](v46);
  v22 = v33;
  if (v33)
  {
    v23 = (unint64_t *)&v33->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1ADD703BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a26);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  std::ifstream::~ifstream(&a61);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  _OWORD v28[17];
  uint64_t v29;
  std::__shared_weak_count *v30;

  v4 = (std::__shared_weak_count *)a3[1];
  v29 = *a3;
  v30 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  quasar::SymbolMap::SymbolMapQuasarImpl::SymbolMapQuasarImpl(a1, a2, &v29);
  v7 = v30;
  if (v30)
  {
    v8 = (unint64_t *)&v30->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a1 = &unk_1E5D3C1C8;
  *(_QWORD *)(a1 + 56) = 0;
  v10 = (uint64_t *)(a1 + 56);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if (quasar::gLogLevel >= 4)
  {
    memset(v28, 0, sizeof(v28));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Slow symbol table initialization and sorting! This should NEVER be called for perf or memory critical workloads", 111);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v28);
  }
  std::vector<std::pair<char const*,int>>::reserve((void **)(a1 + 56), *(unsigned int *)(a1 + 16));
  if (*(_DWORD *)(a1 + 16))
  {
    v11 = 0;
    v12 = *(char **)(a1 + 64);
    do
    {
      v13 = *(_QWORD *)(a1 + 48) + *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * v11);
      v14 = *(_QWORD *)(a1 + 72);
      if ((unint64_t)v12 >= v14)
      {
        v15 = (uint64_t)&v12[-*v10] >> 4;
        if ((unint64_t)(v15 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v16 = v14 - *v10;
        v17 = v16 >> 3;
        if (v16 >> 3 <= (unint64_t)(v15 + 1))
          v17 = v15 + 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
          v18 = 0xFFFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(a1 + 72, v18);
        v21 = &v19[16 * v15];
        *(_QWORD *)v21 = v13;
        *((_DWORD *)v21 + 2) = v11;
        v23 = *(char **)(a1 + 56);
        v22 = *(char **)(a1 + 64);
        v24 = v21;
        if (v22 != v23)
        {
          do
          {
            *((_OWORD *)v24 - 1) = *((_OWORD *)v22 - 1);
            v24 -= 16;
            v22 -= 16;
          }
          while (v22 != v23);
          v22 = (char *)*v10;
        }
        v12 = v21 + 16;
        *(_QWORD *)(a1 + 56) = v24;
        *(_QWORD *)(a1 + 64) = v21 + 16;
        *(_QWORD *)(a1 + 72) = &v19[16 * v20];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_QWORD *)v12 = v13;
        *((_DWORD *)v12 + 2) = v11;
        v12 += 16;
      }
      *(_QWORD *)(a1 + 64) = v12;
      ++v11;
    }
    while (v11 < *(unsigned int *)(a1 + 16));
  }
  else
  {
    v12 = *(char **)(a1 + 64);
  }
  v25 = 126 - 2 * __clz((uint64_t)&v12[-*v10] >> 4);
  if (v12 == (char *)*v10)
    v26 = 0;
  else
    v26 = v25;
  std::__introsort<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*,false>(*v10, (const char **)v12, (uint64_t)v28, v26, 1);
  return a1;
}

void sub_1ADD706F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  fst::SymbolTable *v9;
  void **v10;
  void *v12;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  v12 = *v10;
  if (*v10)
  {
    *((_QWORD *)v9 + 8) = v12;
    operator delete(v12);
  }
  *(_QWORD *)v9 = &unk_1E5D3C120;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v9 + 24);
  fst::SymbolTable::~SymbolTable(v9);
  _Unwind_Resume(a1);
}

uint64_t quasar::SymbolMap::SymbolMapQuasarImpl::SymbolMapQuasarImpl(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  fst::SymbolTable *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v6 = fst::SymbolTable::SymbolTable((fst::SymbolTable *)a1);
  *(_QWORD *)v6 = &unk_1E5D3C120;
  *((_DWORD *)v6 + 4) = a2;
  *((_QWORD *)v6 + 3) = *a3;
  v7 = a3[1];
  *((_QWORD *)v6 + 4) = v7;
  v8 = a2;
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v8 = *(_DWORD *)(a1 + 16);
  }
  v11 = *(_QWORD *)(*a3 + 8);
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v11 + 4 * a2;
  if (v8)
  {
    v12 = 0;
    v13 = v8 - 1;
    while (1)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(&v18, a1, v13 + v12);
      if (SBYTE7(v19) < 0)
      {
        v14 = *((_QWORD *)&v18 + 1);
        operator delete((void *)v18);
        if (v14)
        {
LABEL_12:
          if ((_DWORD)v12)
          {
            if (quasar::gLogLevel >= 4)
            {
              v33 = 0u;
              v34 = 0u;
              v31 = 0u;
              v32 = 0u;
              v29 = 0u;
              v30 = 0u;
              v27 = 0u;
              v28 = 0u;
              v25 = 0u;
              v26 = 0u;
              v23 = 0u;
              v24 = 0u;
              v21 = 0u;
              v22 = 0u;
              v19 = 0u;
              v20 = 0u;
              v18 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
              v15 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" out of ", 8);
              v16 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" are padded words", 17);
              quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v18);
            }
            *(_DWORD *)(a1 + 16) += v12;
          }
          return a1;
        }
      }
      else if (BYTE7(v19))
      {
        goto LABEL_12;
      }
      --v12;
    }
  }
  return a1;
}

void sub_1ADD708CC(_Unwind_Exception *a1)
{
  fst::SymbolTable *v1;
  uint64_t v2;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  fst::SymbolTable::~SymbolTable(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<char const*,int>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void quasar::SymbolMap::SortedSymbolMapQuasarImpl::~SortedSymbolMapQuasarImpl(quasar::SymbolMap::SortedSymbolMapQuasarImpl *this)
{
  void *v2;

  *(_QWORD *)this = &unk_1E5D3C1C8;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &unk_1E5D3C120;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  fst::SymbolTable::~SymbolTable(this);
}

{
  void *v2;

  *(_QWORD *)this = &unk_1E5D3C1C8;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &unk_1E5D3C120;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  fst::SymbolTable::~SymbolTable(this);
  JUMPOUT(0x1AF44D190);
}

quasar::SymbolMap::SortedSymbolMapQuasarImpl *quasar::SymbolMap::SortedSymbolMapQuasarImpl::Copy(__int128 **this)
{
  quasar::SymbolMap::SortedSymbolMapQuasarImpl *v2;

  v2 = (quasar::SymbolMap::SortedSymbolMapQuasarImpl *)operator new();
  quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(v2, this);
  return v2;
}

void sub_1ADD70AA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C4048FD5E85);
  _Unwind_Resume(a1);
}

uint64_t quasar::SymbolMap::SymbolMapQuasarImpl::AddSymbol(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 96))(a1);
  if (result == -1)
  {
    v7 = a3 - a1[4];
    fst::SymbolTable::MutateCheck((std::string *)a1);
    return fst::SymbolTableImpl::AddSymbol(*((_QWORD *)a1 + 1), a2, v7) + a1[4];
  }
  return result;
}

uint64_t quasar::SymbolMap::SymbolMapQuasarImpl::AddSymbol(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  if (result == -1)
  {
    fst::SymbolTable::MutateCheck((std::string *)a1);
    return fst::SymbolTableImpl::AddSymbol(*(_QWORD *)(a1 + 8), a2, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24))
         + *(unsigned int *)(a1 + 16);
  }
  return result;
}

void quasar::SymbolMap::SymbolMapQuasarImpl::AddTable(quasar::SymbolMap::SymbolMapQuasarImpl *this, const fst::SymbolTable *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v10;

  v4 = (*(uint64_t (**)(const fst::SymbolTable *))(*(_QWORD *)a2 + 120))(a2);
  v5 = (*(uint64_t (**)(const fst::SymbolTable *, _QWORD))(*(_QWORD *)a2 + 128))(a2, 0);
  if (v4)
  {
    v6 = v5;
    v7 = 0;
    do
    {
      (*(void (**)(void **__return_ptr, const fst::SymbolTable *, uint64_t))(*(_QWORD *)a2 + 88))(__p, a2, v6);
      v8 = (*(uint64_t (**)(quasar::SymbolMap::SymbolMapQuasarImpl *, void **))(*(_QWORD *)this + 96))(this, __p);
      if (v10 < 0)
        operator delete(__p[0]);
      if (v8 == -1)
      {
        (*(void (**)(void **__return_ptr, const fst::SymbolTable *, uint64_t))(*(_QWORD *)a2 + 88))(__p, a2, v6);
        (*(void (**)(quasar::SymbolMap::SymbolMapQuasarImpl *, void **))(*(_QWORD *)this + 32))(this, __p);
        if (v10 < 0)
          operator delete(__p[0]);
      }
      if (++v7 < v4)
        v6 = (*(uint64_t (**)(const fst::SymbolTable *, uint64_t))(*(_QWORD *)a2 + 128))(a2, v7);
    }
    while (v4 != v7);
  }
}

void sub_1ADD70CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::SymbolMap::SymbolMapQuasarImpl::Find@<X0>(quasar::SymbolMap::SymbolMapQuasarImpl *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  BOOL v4;
  int64_t v5;

  v3 = *((unsigned int *)this + 4);
  v4 = __OFSUB__(a2, v3);
  v5 = a2 - v3;
  if (v5 < 0 != v4)
    return std::string::basic_string[abi:ne180100]<0>(a3, (char *)(*((_QWORD *)this + 6) + *(unsigned int *)(*((_QWORD *)this + 5) + 4 * a2)));
  else
    return fst::SymbolTableImpl::Find(*((fst::SymbolTableImpl **)this + 1), v5, a3);
}

uint64_t quasar::SymbolMap::SortedSymbolMapQuasarImpl::Find(uint64_t a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) < 0)
    a2 = (uint64_t *)*a2;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 104))(a1, a2);
}

uint64_t quasar::SymbolMap::SortedSymbolMapQuasarImpl::Find(quasar::SymbolMap::SortedSymbolMapQuasarImpl *this, char *__s2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;

  v4 = 0;
  v5 = (*((_DWORD *)this + 4) - 1);
  v6 = *((_QWORD *)this + 7);
  do
  {
    v7 = v5 - v4;
    if (v5 < v4)
      ++v7;
    v8 = v4 + (v7 >> 1);
    v9 = strcmp(*(const char **)(v6 + 16 * v8), __s2);
    if (!v9)
      return *(int *)(v6 + 16 * v8 + 8);
    if (v9 >= 0)
      v5 = v8 - 1;
    else
      v4 = v8 + 1;
  }
  while (v4 <= v5);
  result = fst::SymbolTableImpl::Find(*((fst::SymbolTableImpl **)this + 1), __s2);
  if (result != -1)
    result += *((unsigned int *)this + 4);
  return result;
}

uint64_t quasar::SymbolMap::SymbolMapQuasarImpl::AvailableKey(quasar::SymbolMap::SymbolMapQuasarImpl *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24) + *((unsigned int *)this + 4);
}

uint64_t quasar::SymbolMap::SymbolMapQuasarImpl::NumSymbols(quasar::SymbolMap::SymbolMapQuasarImpl *this)
{
  return *((unsigned int *)this + 4)
       + ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 1) + 56) - *(_QWORD *)(*((_QWORD *)this + 1) + 48)) >> 3);
}

uint64_t quasar::SymbolMap::SymbolMapQuasarImpl::GetNthKey(quasar::SymbolMap::SymbolMapQuasarImpl *this, uint64_t a2)
{
  return a2;
}

uint64_t quasar::SymbolMap::SortedSymbolMapQuasarImpl::SupportsEfficientReverseSymbolLookup(quasar::SymbolMap::SortedSymbolMapQuasarImpl *this)
{
  return 1;
}

void quasar::SymbolMap::SymbolMapQuasarImpl::~SymbolMapQuasarImpl(quasar::SymbolMap::SymbolMapQuasarImpl *this)
{
  *(_QWORD *)this = &unk_1E5D3C120;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  fst::SymbolTable::~SymbolTable(this);
}

{
  *(_QWORD *)this = &unk_1E5D3C120;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  fst::SymbolTable::~SymbolTable(this);
  JUMPOUT(0x1AF44D190);
}

quasar::SymbolMap::SymbolMapQuasarImpl *quasar::SymbolMap::SymbolMapQuasarImpl::Copy(quasar::SymbolMap::SymbolMapQuasarImpl *this)
{
  quasar::SymbolMap::SymbolMapQuasarImpl *v2;

  v2 = (quasar::SymbolMap::SymbolMapQuasarImpl *)operator new();
  quasar::SymbolMap::SymbolMapQuasarImpl::SymbolMapQuasarImpl(v2, this);
  return v2;
}

void sub_1ADD70EB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C404CE4771ALL);
  _Unwind_Resume(a1);
}

uint64_t quasar::SymbolMap::SymbolMapQuasarImpl::Find(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v16[17];

  if (quasar::gLogLevel >= 4)
  {
    memset(v16, 0, sizeof(v16));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Slow linear search called! This is OK if called during recognition initialization, but should ", 94);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"NEVER be called during online recognition.", 42);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v16);
  }
  if (*(char *)(a2 + 23) >= 0)
    v5 = (const char *)a2;
  else
    v5 = *(const char **)a2;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v9 = *(_QWORD *)(a1 + 40);
    v8 = *(_QWORD *)(a1 + 48);
    while (strcmp((const char *)(v8 + *(unsigned int *)(v9 + 4 * v7)), v5))
    {
      if (v6 == ++v7)
        goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    v10 = *(_QWORD **)(a1 + 8);
    v11 = fst::internal::DenseSymbolMap::Find(v10 + 5, a2);
    if (v11 == -1)
      return -1;
    v12 = v10[4];
    v13 = __OFSUB__(v11, v12);
    v14 = v11 - v12;
    if (v14 < 0 == v13 && (v11 = *(_QWORD *)(v10[15] + 8 * v14), v11 == -1))
      return -1;
    else
      return v11 + *(unsigned int *)(a1 + 16);
  }
  return v7;
}

void sub_1ADD7100C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::SymbolMap::SymbolMapQuasarImpl::Find(quasar::SymbolMap::SymbolMapQuasarImpl *this, char *a2)
{
  uint64_t v3;
  void *__p[2];
  char v6;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v3 = (*(uint64_t (**)(quasar::SymbolMap::SymbolMapQuasarImpl *, void **))(*(_QWORD *)this + 96))(this, __p);
  if (v6 < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_1ADD71078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::SymbolMap::SymbolMapQuasarImpl::SupportsEfficientReverseSymbolLookup(quasar::SymbolMap::SymbolMapQuasarImpl *this)
{
  return 0;
}

__n128 quasar::SymbolMap::SymbolMapQuasarImpl::SymbolMapQuasarImpl(quasar::SymbolMap::SymbolMapQuasarImpl *this, const quasar::SymbolMap::SymbolMapQuasarImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  __n128 result;

  v2 = *((_QWORD *)a2 + 1);
  ++*(_DWORD *)(v2 + 168);
  *(_QWORD *)this = &unk_1E5D3C120;
  *((_QWORD *)this + 1) = v2;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  v3 = *((_QWORD *)a2 + 4);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 4) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  result = *(__n128 *)((char *)a2 + 40);
  *(__n128 *)((char *)this + 40) = result;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*,false>(uint64_t result, const char **a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  const char *v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  const char *v20;
  const char *v21;
  int v22;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = (uint64_t)((uint64_t)a2 - v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 2);
        v21 = *(const char **)v9;
        result = strcmp(v20, *(const char **)v9);
        if ((result & 0x80000000) != 0)
        {
          *(_QWORD *)v9 = v20;
          *(a2 - 2) = v21;
          v22 = *(_DWORD *)(v9 + 8);
          *(_DWORD *)(v9 + 8) = *((_DWORD *)a2 - 2);
          *((_DWORD *)a2 - 2) = v22;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(v9, v9 + 16, (uint64_t)(a2 - 2));
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(v9, v9 + 16, v9 + 32, (uint64_t)(a2 - 2));
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(v9, v9 + 16, v9 + 32, v9 + 48, (uint64_t)(a2 - 2));
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(v9, (uint64_t)a2);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(v9, (uint64_t)a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = v9 + 16 * (v13 >> 1);
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(v9 + 16 * (v13 >> 1), v9, (uint64_t)(a2 - 2));
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(v9, v9 + 16 * (v13 >> 1), (uint64_t)(a2 - 2));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(v9 + 16, v15 - 16, (uint64_t)(a2 - 4));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(v9 + 32, v9 + 16 + 16 * v14, (uint64_t)(a2 - 6));
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(v15 - 16, v15, v9 + 16 + 16 * v14);
            v16 = *(const char **)v9;
            *(_QWORD *)v9 = *(_QWORD *)v15;
            *(_QWORD *)v15 = v16;
            LODWORD(v16) = *(_DWORD *)(v9 + 8);
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(v15 + 8);
            *(_DWORD *)(v15 + 8) = (_DWORD)v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if ((strcmp(*(const char **)(v9 - 16), *(const char **)v9) & 0x80000000) == 0)
          {
            result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<char const*,int> *,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &>(v9, (unint64_t)a2);
            v9 = result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<char const*,int> *,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &>(v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(v9, v17);
          v9 = v17 + 16;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(v17 + 16, (uint64_t)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 16;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (const char **)v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if ((const char **)v9 != a2)
          return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*,std::pair<char const*,int>*>(v9, (uint64_t)a2, (uint64_t)a2, a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (result != a2)
  {
    v3 = result;
    v4 = result + 16;
    if (result + 16 != a2)
    {
      v5 = 0;
      v6 = result;
      do
      {
        v7 = v4;
        v8 = *(const char **)(v6 + 16);
        v9 = *(const char **)v6;
        result = strcmp(v8, *(const char **)v6);
        if ((result & 0x80000000) != 0)
        {
          v10 = *(_DWORD *)(v6 + 24);
          v11 = v5;
          while (1)
          {
            v12 = v3 + v11;
            *(_QWORD *)(v12 + 16) = v9;
            *(_DWORD *)(v12 + 24) = *(_DWORD *)(v3 + v11 + 8);
            if (!v11)
              break;
            v9 = *(const char **)(v12 - 16);
            result = strcmp(v8, v9);
            v11 -= 16;
            if ((result & 0x80000000) == 0)
            {
              v13 = v3 + v11 + 16;
              goto LABEL_10;
            }
          }
          v13 = v3;
LABEL_10:
          *(_QWORD *)v13 = v8;
          *(_DWORD *)(v13 + 8) = v10;
        }
        v4 = v7 + 16;
        v5 += 16;
        v6 = v7;
      }
      while (v7 + 16 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  int v9;
  _DWORD *v10;
  _DWORD *v11;
  int v12;

  if (result != a2)
  {
    v3 = result;
    v4 = result + 16;
    if (result + 16 != a2)
    {
      v5 = (_DWORD *)(result + 24);
      do
      {
        v6 = v4;
        v7 = *(const char **)(v3 + 16);
        v8 = *(const char **)v3;
        result = strcmp(v7, *(const char **)v3);
        if ((result & 0x80000000) != 0)
        {
          v9 = *(_DWORD *)(v3 + 24);
          v10 = v5;
          do
          {
            v11 = v10;
            *((_QWORD *)v10 - 1) = v8;
            v12 = *(v10 - 4);
            v10 -= 4;
            *v11 = v12;
            v8 = (const char *)*((_QWORD *)v11 - 5);
            result = strcmp(v7, v8);
          }
          while ((result & 0x80000000) != 0);
          *((_QWORD *)v10 - 1) = v7;
          *v10 = v9;
        }
        v4 = v6 + 16;
        v5 += 4;
        v3 = v6;
      }
      while (v6 + 16 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *v6;
  const char *v7;
  int v8;
  const char *v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  const char *v14;
  int v15;
  int v16;
  const char *v17;

  v6 = *(const char **)a2;
  v7 = *(const char **)a1;
  v8 = strcmp(*(const char **)a2, *(const char **)a1);
  v9 = *(const char **)a3;
  v10 = strcmp(*(const char **)a3, v6);
  if (v8 < 0)
  {
    if (v10 < 0)
    {
      *(_QWORD *)a1 = v9;
      *(_QWORD *)a3 = v7;
      v11 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v11;
      return 1;
    }
    *(_QWORD *)a1 = v6;
    *(_QWORD *)a2 = v7;
    v16 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = v16;
    v17 = *(const char **)a3;
    if ((strcmp(*(const char **)a3, v7) & 0x80000000) == 0)
      return 1;
    *(_QWORD *)a2 = v17;
    *(_QWORD *)a3 = v7;
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = v16;
    return 2;
  }
  if (v10 < 0)
  {
    *(_QWORD *)a2 = v9;
    *(_QWORD *)a3 = v6;
    v12 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = v12;
    v13 = *(const char **)a2;
    v14 = *(const char **)a1;
    if ((strcmp(*(const char **)a2, *(const char **)a1) & 0x80000000) == 0)
      return 1;
    *(_QWORD *)a1 = v13;
    *(_QWORD *)a2 = v14;
    v15 = *(_DWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = v15;
    return 2;
  }
  return 0;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<char const*,int> *,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &>(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  const char *v4;
  int v5;
  unint64_t v6;
  const char *v7;
  unint64_t v8;
  const char *v9;
  const char *v10;
  const char *v11;
  int v12;
  const char *v13;
  const char *v14;

  v2 = a2;
  v4 = *(const char **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (strcmp(*(const char **)a1, *(const char **)(a2 - 16)) < 0)
  {
    v6 = a1;
    do
    {
      v7 = *(const char **)(v6 + 16);
      v6 += 16;
    }
    while ((strcmp(v4, v7) & 0x80000000) == 0);
  }
  else
  {
    v8 = a1 + 16;
    do
    {
      v6 = v8;
      if (v8 >= v2)
        break;
      v8 += 16;
    }
    while ((strcmp(v4, *(const char **)v6) & 0x80000000) == 0);
  }
  if (v6 < v2)
  {
    do
    {
      v9 = *(const char **)(v2 - 16);
      v2 -= 16;
    }
    while (strcmp(v4, v9) < 0);
  }
  if (v6 < v2)
  {
    v10 = *(const char **)v6;
    v11 = *(const char **)v2;
    do
    {
      *(_QWORD *)v6 = v11;
      *(_QWORD *)v2 = v10;
      v12 = *(_DWORD *)(v6 + 8);
      *(_DWORD *)(v6 + 8) = *(_DWORD *)(v2 + 8);
      *(_DWORD *)(v2 + 8) = v12;
      do
      {
        v13 = *(const char **)(v6 + 16);
        v6 += 16;
        v10 = v13;
      }
      while ((strcmp(v4, v13) & 0x80000000) == 0);
      do
      {
        v14 = *(const char **)(v2 - 16);
        v2 -= 16;
        v11 = v14;
      }
      while (strcmp(v4, v14) < 0);
    }
    while (v6 < v2);
  }
  if (v6 - 16 != a1)
  {
    *(_QWORD *)a1 = *(_QWORD *)(v6 - 16);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v6 - 8);
  }
  *(_QWORD *)(v6 - 16) = v4;
  *(_DWORD *)(v6 - 8) = v5;
  return v6;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<char const*,int> *,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &>(uint64_t a1, const char **a2)
{
  uint64_t v4;
  const char *v5;
  int v6;
  const char *v7;
  unint64_t v8;
  const char *v9;
  const char *v10;
  const char *v11;
  unint64_t v12;
  const char **v13;
  int v14;
  const char *v15;
  const char *v16;
  unint64_t result;

  v4 = 0;
  v5 = *(const char **)a1;
  v6 = *(_DWORD *)(a1 + 8);
  do
  {
    v7 = *(const char **)(a1 + v4 + 16);
    v4 += 16;
  }
  while (strcmp(v7, v5) < 0);
  v8 = a1 + v4;
  if (v4 == 16)
  {
    do
    {
      if (v8 >= (unint64_t)a2)
        break;
      v10 = *(a2 - 2);
      a2 -= 2;
    }
    while ((strcmp(v10, v5) & 0x80000000) == 0);
  }
  else
  {
    do
    {
      v9 = *(a2 - 2);
      a2 -= 2;
    }
    while ((strcmp(v9, v5) & 0x80000000) == 0);
  }
  if (v8 >= (unint64_t)a2)
  {
    v12 = a1 + v4;
  }
  else
  {
    v11 = *a2;
    v12 = v8;
    v13 = a2;
    do
    {
      *(_QWORD *)v12 = v11;
      *v13 = v7;
      v14 = *(_DWORD *)(v12 + 8);
      *(_DWORD *)(v12 + 8) = *((_DWORD *)v13 + 2);
      *((_DWORD *)v13 + 2) = v14;
      do
      {
        v15 = *(const char **)(v12 + 16);
        v12 += 16;
        v7 = v15;
      }
      while (strcmp(v15, v5) < 0);
      do
      {
        v16 = *(v13 - 2);
        v13 -= 2;
        v11 = v16;
      }
      while ((strcmp(v16, v5) & 0x80000000) == 0);
    }
    while (v12 < (unint64_t)v13);
  }
  result = v12 - 16;
  if (v12 - 16 != a1)
  {
    *(_QWORD *)a1 = *(_QWORD *)(v12 - 16);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v12 - 8);
  }
  *(_QWORD *)(v12 - 16) = v5;
  *(_DWORD *)(v12 - 8) = v6;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  const char *v6;
  const char *v7;
  int v8;
  const char **v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  const char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(const char **)(a2 - 16);
      v7 = *(const char **)a1;
      if (strcmp(v6, *(const char **)a1) < 0)
      {
        *(_QWORD *)a1 = v6;
        *(_QWORD *)(a2 - 16) = v7;
        v8 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      v9 = (const char **)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(a1, a1 + 16, a1 + 32);
      v10 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(const char **)v10;
    v14 = *v9;
    if (strcmp(*(const char **)v10, v14) < 0)
    {
      v15 = *(_DWORD *)(v10 + 8);
      v16 = v11;
      while (1)
      {
        v17 = a1 + v16;
        *(_QWORD *)(v17 + 48) = v14;
        *(_DWORD *)(v17 + 56) = *(_DWORD *)(a1 + v16 + 40);
        if (v16 == -32)
          break;
        v14 = *(const char **)(v17 + 16);
        v16 -= 16;
        if ((strcmp(v13, v14) & 0x80000000) == 0)
        {
          v18 = a1 + v16 + 48;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_QWORD *)v18 = v13;
      *(_DWORD *)(v18 + 8) = v15;
      if (++v12 == 8)
        return v10 + 16 == a2;
    }
    v9 = (const char **)v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v8;
  const char *v9;
  uint64_t result;
  int v11;
  const char *v12;
  const char *v13;
  int v14;
  const char *v15;
  const char *v16;
  int v17;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(a1, a2, a3);
  v8 = *(const char **)a4;
  v9 = *(const char **)a3;
  result = strcmp(*(const char **)a4, *(const char **)a3);
  if ((result & 0x80000000) != 0)
  {
    *(_QWORD *)a3 = v8;
    *(_QWORD *)a4 = v9;
    v11 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = v11;
    v12 = *(const char **)a3;
    v13 = *(const char **)a2;
    result = strcmp(*(const char **)a3, *(const char **)a2);
    if ((result & 0x80000000) != 0)
    {
      *(_QWORD *)a2 = v12;
      *(_QWORD *)a3 = v13;
      v14 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v14;
      v15 = *(const char **)a2;
      v16 = *(const char **)a1;
      result = strcmp(*(const char **)a2, *(const char **)a1);
      if ((result & 0x80000000) != 0)
      {
        *(_QWORD *)a1 = v15;
        *(_QWORD *)a2 = v16;
        v17 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const char *v10;
  const char *v11;
  uint64_t result;
  int v13;
  const char *v14;
  const char *v15;
  int v16;
  const char *v17;
  const char *v18;
  int v19;
  const char *v20;
  const char *v21;
  int v22;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(a1, a2, a3, a4);
  v10 = *(const char **)a5;
  v11 = *(const char **)a4;
  result = strcmp(*(const char **)a5, *(const char **)a4);
  if ((result & 0x80000000) != 0)
  {
    *(_QWORD *)a4 = v10;
    *(_QWORD *)a5 = v11;
    v13 = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = *(_DWORD *)(a5 + 8);
    *(_DWORD *)(a5 + 8) = v13;
    v14 = *(const char **)a4;
    v15 = *(const char **)a3;
    result = strcmp(*(const char **)a4, *(const char **)a3);
    if ((result & 0x80000000) != 0)
    {
      *(_QWORD *)a3 = v14;
      *(_QWORD *)a4 = v15;
      v16 = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
      *(_DWORD *)(a4 + 8) = v16;
      v17 = *(const char **)a3;
      v18 = *(const char **)a2;
      result = strcmp(*(const char **)a3, *(const char **)a2);
      if ((result & 0x80000000) != 0)
      {
        *(_QWORD *)a2 = v17;
        *(_QWORD *)a3 = v18;
        v19 = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a3 + 8) = v19;
        v20 = *(const char **)a2;
        v21 = *(const char **)a1;
        result = strcmp(*(const char **)a2, *(const char **)a1);
        if ((result & 0x80000000) != 0)
        {
          *(_QWORD *)a1 = v20;
          *(_QWORD *)a2 = v21;
          v22 = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a2 + 8) = v22;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*,std::pair<char const*,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  int v21;
  uint64_t v22;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = a1 + 16 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(a1, a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *(const char **)v14;
        v16 = *(const char **)a1;
        if (strcmp(*(const char **)v14, *(const char **)a1) < 0)
        {
          *(_QWORD *)v14 = v16;
          *(_QWORD *)a1 = v15;
          v17 = *(_DWORD *)(v14 + 8);
          *(_DWORD *)(v14 + 8) = *(_DWORD *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = v17;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(a1, a4, v9, a1);
        }
        v14 += 16;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v18 = (unint64_t)v8 >> 4;
      v19 = a2 - 16;
      do
      {
        v20 = *(const char **)a1;
        v21 = *(_DWORD *)(a1 + 8);
        v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(a1, a4, v18);
        if (v19 == v22)
        {
          *(_QWORD *)v22 = v20;
          *(_DWORD *)(v22 + 8) = v21;
        }
        else
        {
          *(_QWORD *)v22 = *(_QWORD *)v19;
          *(_DWORD *)(v22 + 8) = *(_DWORD *)(v19 + 8);
          *(_QWORD *)v19 = v20;
          *(_DWORD *)(v19 + 8) = v21;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(a1, v22 + 16, a4, (v22 + 16 - a1) >> 4);
        }
        v19 -= 16;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  int v20;
  int v21;
  uint64_t v22;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (a4 - result) >> 4)
    {
      v8 = a3;
      v9 = (a4 - result) >> 3;
      v10 = v9 + 1;
      v11 = result + 16 * (v9 + 1);
      v12 = v9 + 2;
      if (v9 + 2 >= a3)
      {
        v14 = *(const char **)v11;
      }
      else
      {
        v13 = *(const char **)v11;
        v14 = *(const char **)(v11 + 16);
        if (strcmp(*(const char **)v11, v14) < 0)
        {
          v11 += 16;
          v10 = v12;
        }
        else
        {
          v14 = v13;
        }
      }
      v15 = *(const char **)v5;
      result = strcmp(v14, *(const char **)v5);
      if ((result & 0x80000000) == 0)
      {
        v21 = *(_DWORD *)(v5 + 8);
        v22 = v8;
        do
        {
          v16 = v5;
          v5 = v11;
          *(_QWORD *)v16 = v14;
          *(_DWORD *)(v16 + 8) = *(_DWORD *)(v11 + 8);
          if (v7 < v10)
            break;
          v17 = (2 * v10) | 1;
          v11 = v6 + 16 * v17;
          v18 = 2 * v10 + 2;
          if (v18 >= v8)
          {
            v14 = *(const char **)v11;
            v10 = (2 * v10) | 1;
          }
          else
          {
            v14 = *(const char **)v11;
            v19 = *(const char **)(v11 + 16);
            v20 = strcmp(*(const char **)v11, v19);
            if (v20 < 0)
            {
              v14 = v19;
              v11 += 16;
            }
            v8 = v22;
            v10 = v20 >= 0 ? v17 : v18;
          }
          result = strcmp(v14, v15);
        }
        while ((result & 0x80000000) == 0);
        *(_QWORD *)v5 = v15;
        *(_DWORD *)(v5 + 8) = v21;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  int v13;
  const char *v14;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = a1 + 16 * v5 + 16;
    v9 = (2 * v5) | 1;
    v10 = 2 * v5 + 2;
    if (v10 >= a3)
    {
      v14 = *(const char **)v8;
      v5 = (2 * v5) | 1;
    }
    else
    {
      v11 = *(const char **)v8;
      v12 = *(const char **)(a1 + 16 * v5 + 32);
      v13 = strcmp(*(const char **)v8, v12);
      if (v13 >= 0)
        v14 = v11;
      else
        v14 = v12;
      if (v13 >= 0)
      {
        v5 = v9;
      }
      else
      {
        v8 += 16;
        v5 = v10;
      }
    }
    *(_QWORD *)a1 = v14;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(v8 + 8);
    a1 = v8;
  }
  while (v5 <= v7);
  return v8;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(unsigned int,std::shared_ptr<fst::MappedFile>)::{lambda(std::pair<char const*,int> const&,std::pair<char const*,int> const&)#1} &,std::pair<char const*,int>*>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  int v12;
  uint64_t v13;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = result + 16 * (v4 >> 1);
    v10 = a2 - 16;
    v9 = *(const char **)(a2 - 16);
    v11 = *(const char **)v8;
    result = strcmp(*(const char **)v8, v9);
    if ((result & 0x80000000) != 0)
    {
      v12 = *(_DWORD *)(a2 - 8);
      do
      {
        v13 = v10;
        v10 = v8;
        *(_QWORD *)v13 = v11;
        *(_DWORD *)(v13 + 8) = *(_DWORD *)(v8 + 8);
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = v6 + 16 * v7;
        v11 = *(const char **)v8;
        result = strcmp(*(const char **)v8, v9);
      }
      while ((result & 0x80000000) != 0);
      *(_QWORD *)v10 = v9;
      *(_DWORD *)(v10 + 8) = v12;
    }
  }
  return result;
}

quasar::SymbolMap::SortedSymbolMapQuasarImpl *quasar::SymbolMap::SortedSymbolMapQuasarImpl::SortedSymbolMapQuasarImpl(quasar::SymbolMap::SortedSymbolMapQuasarImpl *this, __int128 **a2)
{
  uint64_t v4;

  quasar::SymbolMap::SymbolMapQuasarImpl::SymbolMapQuasarImpl(this, (const quasar::SymbolMap::SymbolMapQuasarImpl *)a2);
  *(_QWORD *)v4 = &unk_1E5D3C1C8;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  std::vector<std::pair<char const*,int>>::__init_with_size[abi:ne180100]<std::pair<char const*,int>*,std::pair<char const*,int>*>((char *)(v4 + 56), a2[7], a2[8], a2[8] - a2[7]);
  return this;
}

void sub_1ADD72194(_Unwind_Exception *a1)
{
  fst::SymbolTable *v1;

  *(_QWORD *)v1 = &unk_1E5D3C120;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 24);
  fst::SymbolTable::~SymbolTable(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<char const*,int>>::__init_with_size[abi:ne180100]<std::pair<char const*,int>*,std::pair<char const*,int>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1ADD72214(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

marisa::grimoire::trie::LoudsTrie **quasar::SymbolMap::SymbolMapMarisaImpl::SymbolMapMarisaImpl(marisa::grimoire::trie::LoudsTrie **a1, _QWORD *a2, uint64_t a3)
{
  fst::SymbolTable *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v6 = fst::SymbolTable::SymbolTable((fst::SymbolTable *)a1);
  *(_QWORD *)v6 = &unk_1E5D3C048;
  *((_QWORD *)v6 + 2) = &unk_1E5D3C0F8;
  v7 = a2[1];
  *((_QWORD *)v6 + 3) = *a2;
  *((_QWORD *)v6 + 4) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  a1[5] = (marisa::grimoire::trie::LoudsTrie *)a3;
  marisa::Trie::Trie(a1 + 6);
  marisa::Trie::map(a1 + 6, *(const void **)(*a2 + 8), a3);
  return a1;
}

void sub_1ADD722D0(_Unwind_Exception *a1)
{
  fst::SymbolTable *v1;
  uint64_t v2;
  marisa::Trie *v3;

  marisa::Trie::~Trie(v3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  fst::SymbolTable::~SymbolTable(v1);
  _Unwind_Resume(a1);
}

void quasar::SymbolMap::SymbolMapMarisaImpl::~SymbolMapMarisaImpl(quasar::SymbolMap::SymbolMapMarisaImpl *this)
{
  quasar::SymbolMap::SymbolMapMarisaImpl::~SymbolMapMarisaImpl(this);
  JUMPOUT(0x1AF44D190);
}

{
  *(_QWORD *)this = &unk_1E5D3C048;
  *((_QWORD *)this + 2) = &unk_1E5D3C0F8;
  marisa::Trie::~Trie((quasar::SymbolMap::SymbolMapMarisaImpl *)((char *)this + 48));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  fst::SymbolTable::~SymbolTable(this);
}

quasar::SymbolMap::SymbolMapMarisaImpl *quasar::SymbolMap::SymbolMapMarisaImpl::Copy(quasar::SymbolMap::SymbolMapMarisaImpl *this)
{
  quasar::SymbolMap::SymbolMapMarisaImpl *v2;

  v2 = (quasar::SymbolMap::SymbolMapMarisaImpl *)operator new();
  quasar::SymbolMap::SymbolMapMarisaImpl::SymbolMapMarisaImpl(v2, this);
  return v2;
}

void sub_1ADD72368(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A1C40AEBB0618);
  _Unwind_Resume(a1);
}

uint64_t quasar::SymbolMap::SymbolMapMarisaImpl::AddSymbol(std::string *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 96))(a1);
  if (result == -1)
  {
    v7 = ~marisa::Trie::num_keys((marisa::Trie *)&a1[2]) + a3;
    fst::SymbolTable::MutateCheck(a1);
    v8 = fst::SymbolTableImpl::AddSymbol(a1->__r_.__value_.__l.__size_, a2, v7);
    return v8 + marisa::Trie::num_keys((marisa::Trie *)&a1[2]) + 1;
  }
  return result;
}

uint64_t quasar::SymbolMap::SymbolMapMarisaImpl::AddSymbol(std::string *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 96))(a1);
  if (result == -1)
  {
    fst::SymbolTable::MutateCheck(a1);
    v5 = fst::SymbolTableImpl::AddSymbol(a1->__r_.__value_.__l.__size_, a2, *(_QWORD *)(a1->__r_.__value_.__l.__size_ + 24));
    return v5 + marisa::Trie::num_keys((marisa::Trie *)&a1[2]) + 1;
  }
  return result;
}

void quasar::SymbolMap::SymbolMapMarisaImpl::AddTable(quasar::SymbolMap::SymbolMapMarisaImpl *this, const fst::SymbolTable *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v10;

  v4 = (*(uint64_t (**)(const fst::SymbolTable *))(*(_QWORD *)a2 + 120))(a2);
  v5 = (*(uint64_t (**)(const fst::SymbolTable *, _QWORD))(*(_QWORD *)a2 + 128))(a2, 0);
  if (v4)
  {
    v6 = v5;
    v7 = 0;
    do
    {
      (*(void (**)(void **__return_ptr, const fst::SymbolTable *, uint64_t))(*(_QWORD *)a2 + 88))(__p, a2, v6);
      v8 = (*(uint64_t (**)(quasar::SymbolMap::SymbolMapMarisaImpl *, void **))(*(_QWORD *)this + 96))(this, __p);
      if (v10 < 0)
        operator delete(__p[0]);
      if (v8 == -1)
      {
        (*(void (**)(void **__return_ptr, const fst::SymbolTable *, uint64_t))(*(_QWORD *)a2 + 88))(__p, a2, v6);
        (*(void (**)(quasar::SymbolMap::SymbolMapMarisaImpl *, void **))(*(_QWORD *)this + 32))(this, __p);
        if (v10 < 0)
          operator delete(__p[0]);
      }
      if (++v7 < v4)
        v6 = (*(uint64_t (**)(const fst::SymbolTable *, uint64_t))(*(_QWORD *)a2 + 128))(a2, v7);
    }
    while (v4 != v7);
  }
}

void sub_1ADD72588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::SymbolMap::SymbolMapMarisaImpl::Find(fst::SymbolTableImpl **this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  marisa::grimoire::trie::LoudsTrie **v6;
  uint64_t v7;
  _BYTE v8[24];
  void *__src;
  size_t __len;

  if (a2)
  {
    v6 = this + 6;
    v7 = marisa::Trie::num_keys((marisa::Trie *)(this + 6));
    if (a2 >= v7 + 1)
    {
      fst::SymbolTableImpl::Find(this[1], a2 - (v7 + 1), a3);
    }
    else
    {
      marisa::Agent::Agent((marisa::Agent *)v8);
      marisa::Agent::set_query((uint64_t)v8, a2 - 1);
      marisa::Trie::reverse_lookup(v6, (marisa::Agent *)v8);
      std::string::basic_string[abi:ne180100](a3, __src, __len);
      marisa::Agent::~Agent((marisa::Agent *)v8);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "<eps>");
  }
}

void sub_1ADD72678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  marisa::Agent::~Agent((marisa::Agent *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::SymbolMap::SymbolMapMarisaImpl::Find(uint64_t a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) < 0)
    a2 = (uint64_t *)*a2;
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 104))(a1, a2);
}

uint64_t quasar::SymbolMap::SymbolMapMarisaImpl::Find(fst::SymbolTableImpl **this, char *__s1)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[4];
  unsigned int v9;

  if (!strcmp(__s1, "<eps>"))
    return 0;
  marisa::Agent::Agent((marisa::Agent *)v8);
  marisa::Agent::set_query(v8, __s1);
  if (marisa::Trie::lookup(this + 6, (marisa::Agent *)v8))
  {
    v4 = v9 + 1;
  }
  else
  {
    v5 = marisa::Trie::num_keys((marisa::Trie *)(this + 6));
    v6 = fst::SymbolTableImpl::Find(this[1], __s1);
    if (v6 == -1)
      v4 = -1;
    else
      v4 = v5 + v6 + 1;
  }
  marisa::Agent::~Agent((marisa::Agent *)v8);
  return v4;
}

void sub_1ADD7275C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  marisa::Agent::~Agent((marisa::Agent *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::SymbolMap::SymbolMapMarisaImpl::AvailableKey(quasar::SymbolMap::SymbolMapMarisaImpl *this)
{
  return marisa::Trie::num_keys((quasar::SymbolMap::SymbolMapMarisaImpl *)((char *)this + 48))
       + *(_QWORD *)(*((_QWORD *)this + 1) + 24)
       + 1;
}

uint64_t quasar::SymbolMap::SymbolMapMarisaImpl::NumSymbols(quasar::SymbolMap::SymbolMapMarisaImpl *this)
{
  return marisa::Trie::num_keys((quasar::SymbolMap::SymbolMapMarisaImpl *)((char *)this + 48))
       + ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 1) + 56) - *(_QWORD *)(*((_QWORD *)this + 1) + 48)) >> 3)
       + 1;
}

uint64_t quasar::SymbolMap::SymbolMapMarisaImpl::GetNthKey(quasar::SymbolMap::SymbolMapMarisaImpl *this, uint64_t a2)
{
  return a2;
}

void quasar::SymbolMap::SymbolMapMarisaImpl::FindSymbolsWithPrefix(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  const char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  fst::SymbolTableImpl *v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  _BOOL4 v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  void *__p[2];
  char v38;
  _QWORD v39[4];
  unsigned int v40;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  marisa::Agent::Agent((marisa::Agent *)v39);
  if (*(char *)(a2 + 23) >= 0)
    v6 = (const char *)a2;
  else
    v6 = *(const char **)a2;
  marisa::Agent::set_query(v39, v6);
  while (marisa::Trie::predictive_search((marisa::grimoire::trie::LoudsTrie **)(a1 + 48), (marisa::Agent *)v39))
  {
    v7 = v40 + 1;
    v9 = a3[1];
    v8 = (unint64_t)a3[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = *a3;
      v12 = v9 - *a3;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v14 = v8 - (_QWORD)v11;
      if (v14 >> 2 > v13)
        v13 = v14 >> 2;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v15 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), v15);
        v11 = *a3;
        v9 = a3[1];
      }
      else
      {
        v16 = 0;
      }
      v17 = (uint64_t *)&v16[8 * v12];
      *v17 = v7;
      v10 = v17 + 1;
      while (v9 != v11)
      {
        v18 = *--v9;
        *--v17 = v18;
      }
      *a3 = v17;
      a3[1] = v10;
      a3[2] = (uint64_t *)&v16[8 * v15];
      if (v11)
        operator delete(v11);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    a3[1] = v10;
  }
  v19 = marisa::Trie::num_keys((marisa::Trie *)(a1 + 48));
  v20 = *(fst::SymbolTableImpl **)(a1 + 8);
  if (*((_QWORD *)v20 + 7) != *((_QWORD *)v20 + 6))
  {
    v21 = 0;
    v22 = v19 + 1;
    do
    {
      fst::SymbolTableImpl::Find(v20, v21, __p);
      v23 = quasar::startsWith((unsigned __int8 *)__p, (unsigned __int8 *)a2);
      v24 = v23;
      if (v38 < 0)
      {
        operator delete(__p[0]);
        if (v24)
        {
LABEL_29:
          v25 = v22 + v21;
          v27 = a3[1];
          v26 = (unint64_t)a3[2];
          if ((unint64_t)v27 >= v26)
          {
            v29 = *a3;
            v30 = v27 - *a3;
            v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v32 = v26 - (_QWORD)v29;
            if (v32 >> 2 > v31)
              v31 = v32 >> 2;
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
              v33 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v33 = v31;
            if (v33)
            {
              v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), v33);
              v29 = *a3;
              v27 = a3[1];
            }
            else
            {
              v34 = 0;
            }
            v35 = (uint64_t *)&v34[8 * v30];
            *v35 = v25;
            v28 = v35 + 1;
            while (v27 != v29)
            {
              v36 = *--v27;
              *--v35 = v36;
            }
            *a3 = v35;
            a3[1] = v28;
            a3[2] = (uint64_t *)&v34[8 * v33];
            if (v29)
              operator delete(v29);
          }
          else
          {
            *v27 = v25;
            v28 = v27 + 1;
          }
          a3[1] = v28;
        }
      }
      else if (v23)
      {
        goto LABEL_29;
      }
      ++v21;
      v20 = *(fst::SymbolTableImpl **)(a1 + 8);
    }
    while (v21 < (uint64_t)(*((_QWORD *)v20 + 7) - *((_QWORD *)v20 + 6)) >> 3);
  }
  marisa::Agent::~Agent((marisa::Agent *)v39);
}

void sub_1ADD72A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;
  void *v18;

  marisa::Agent::~Agent((marisa::Agent *)&a16);
  v18 = *(void **)v16;
  if (*(_QWORD *)v16)
  {
    *(_QWORD *)(v16 + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'quasar::SymbolMap::SymbolMapMarisaImpl::FindSymbolsWithPrefix(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  quasar::SymbolMap::SymbolMapMarisaImpl::FindSymbolsWithPrefix(a1 - 16, a2, a3);
}

void `non-virtual thunk to'quasar::SymbolMap::SymbolMapMarisaImpl::~SymbolMapMarisaImpl(quasar::SymbolMap::SymbolMapMarisaImpl *this)
{
  quasar::SymbolMap::SymbolMapMarisaImpl::~SymbolMapMarisaImpl((quasar::SymbolMap::SymbolMapMarisaImpl *)((char *)this - 16));
}

{
  quasar::SymbolMap::SymbolMapMarisaImpl::~SymbolMapMarisaImpl((quasar::SymbolMap::SymbolMapMarisaImpl *)((char *)this - 16));
  JUMPOUT(0x1AF44D190);
}

quasar::SymbolMap::SymbolMapMarisaImpl *quasar::SymbolMap::SymbolMapMarisaImpl::SymbolMapMarisaImpl(quasar::SymbolMap::SymbolMapMarisaImpl *this, const quasar::SymbolMap::SymbolMapMarisaImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v3 = *((_QWORD *)a2 + 1);
  ++*(_DWORD *)(v3 + 168);
  *(_QWORD *)this = &unk_1E5D3C048;
  *((_QWORD *)this + 1) = v3;
  *((_QWORD *)this + 2) = &unk_1E5D3C0F8;
  v4 = *((_QWORD *)a2 + 4);
  *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 4) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  marisa::Trie::Trie((_QWORD *)this + 6);
  marisa::Trie::map((marisa::grimoire::trie::LoudsTrie **)this + 6, *(const void **)(*((_QWORD *)this + 3) + 8), *((_QWORD *)this + 5));
  return this;
}

void sub_1ADD72BDC(_Unwind_Exception *a1)
{
  fst::SymbolTable *v1;
  uint64_t v2;
  marisa::Trie *v3;

  marisa::Trie::~Trie(v3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  fst::SymbolTable::~SymbolTable(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<quasar::SymbolMap::SortedSymbolMapQuasarImpl,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5D46578;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1ADD72C60(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<quasar::SymbolMap::SortedSymbolMapQuasarImpl *,std::shared_ptr<fst::SymbolTable>::__shared_ptr_default_delete<fst::SymbolTable,quasar::SymbolMap::SortedSymbolMapQuasarImpl>,std::allocator<quasar::SymbolMap::SortedSymbolMapQuasarImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::SymbolMap::SortedSymbolMapQuasarImpl *,std::shared_ptr<fst::SymbolTable>::__shared_ptr_default_delete<fst::SymbolTable,quasar::SymbolMap::SortedSymbolMapQuasarImpl>,std::allocator<quasar::SymbolMap::SortedSymbolMapQuasarImpl>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::SymbolMap::SortedSymbolMapQuasarImpl *,std::shared_ptr<fst::SymbolTable>::__shared_ptr_default_delete<fst::SymbolTable,quasar::SymbolMap::SortedSymbolMapQuasarImpl>,std::allocator<quasar::SymbolMap::SortedSymbolMapQuasarImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<quasar::SymbolMap::SymbolMapQuasarImpl,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5D46540;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1ADD72D58(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<quasar::SymbolMap::SymbolMapQuasarImpl *,std::shared_ptr<fst::SymbolTable>::__shared_ptr_default_delete<fst::SymbolTable,quasar::SymbolMap::SymbolMapQuasarImpl>,std::allocator<quasar::SymbolMap::SymbolMapQuasarImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::SymbolMap::SymbolMapQuasarImpl *,std::shared_ptr<fst::SymbolTable>::__shared_ptr_default_delete<fst::SymbolTable,quasar::SymbolMap::SymbolMapQuasarImpl>,std::allocator<quasar::SymbolMap::SymbolMapQuasarImpl>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::SymbolMap::SymbolMapQuasarImpl *,std::shared_ptr<fst::SymbolTable>::__shared_ptr_default_delete<fst::SymbolTable,quasar::SymbolMap::SymbolMapQuasarImpl>,std::allocator<quasar::SymbolMap::SymbolMapQuasarImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<quasar::SymbolMap::SymbolMapMarisaImpl,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5D46508;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1ADD72E50(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<quasar::SymbolMap::SymbolMapMarisaImpl *,std::shared_ptr<fst::SymbolTable>::__shared_ptr_default_delete<fst::SymbolTable,quasar::SymbolMap::SymbolMapMarisaImpl>,std::allocator<quasar::SymbolMap::SymbolMapMarisaImpl>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::SymbolMap::SymbolMapMarisaImpl *,std::shared_ptr<fst::SymbolTable>::__shared_ptr_default_delete<fst::SymbolTable,quasar::SymbolMap::SymbolMapMarisaImpl>,std::allocator<quasar::SymbolMap::SymbolMapMarisaImpl>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::SymbolMap::SymbolMapMarisaImpl *,std::shared_ptr<fst::SymbolTable>::__shared_ptr_default_delete<fst::SymbolTable,quasar::SymbolMap::SymbolMapMarisaImpl>,std::allocator<quasar::SymbolMap::SymbolMapMarisaImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t quasar::SyncPSRAudioProcessor::SyncPSRAudioProcessor(uint64_t a1, quasar::SystemConfig *a2, uint64_t a3, int a4, char a5, int a6)
{
  quasar::PTree *Ptree;
  uint64_t v13;
  uint64_t i;
  __int128 v15;
  size_t v16;
  std::string *v17;
  const void *v18;
  std::string *v19;
  std::string::size_type size;
  std::string *v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::string v45;
  std::string __p;
  __int128 v47;
  std::string v48;
  int v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[41];
  int v56;
  char v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  char v61;

  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 80) = 27;
  kaldi::Matrix<float>::Matrix(a1 + 88);
  Ptree = (quasar::PTree *)quasar::SystemConfig::getPtree((uint64_t)a2, a3);
  v49 = a4;
  v50 = 0;
  v51 = 0;
  v56 = 0;
  v57 = 0;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  memset(v55, 0, sizeof(v55));
  v58 = 0u;
  v59 = 0u;
  v60 = 0;
  v61 = 1;
  v13 = quasar::PTree::begin(Ptree);
  for (i = quasar::PTree::end(Ptree); v13 != i; v13 += 88)
  {
    if (*(char *)(v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)v13, *(_QWORD *)(v13 + 8));
    }
    else
    {
      v15 = *(_OWORD *)v13;
      v48.__r_.__value_.__r.__words[2] = *(_QWORD *)(v13 + 16);
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v15;
    }
    if (*(char *)(a3 + 23) >= 0)
      v16 = *(unsigned __int8 *)(a3 + 23);
    else
      v16 = *(_QWORD *)(a3 + 8);
    std::string::basic_string[abi:ne180100]((uint64_t)&v45, v16 + 1);
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v45;
    else
      v17 = (std::string *)v45.__r_.__value_.__r.__words[0];
    if (v16)
    {
      if (*(char *)(a3 + 23) >= 0)
        v18 = (const void *)a3;
      else
        v18 = *(const void **)a3;
      memmove(v17, v18, v16);
    }
    *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + v16) = 46;
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v48;
    else
      v19 = (std::string *)v48.__r_.__value_.__r.__words[0];
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v48.__r_.__value_.__r.__words[2]);
    else
      size = v48.__r_.__value_.__l.__size_;
    v21 = std::string::append(&v45, (const std::string::value_type *)v19, size);
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    quasar::FeatureExtractorSimpleFactory::createFeatureExtractor(&__p, &v47);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    quasar::FeatureExtractor::init((quasar::FeatureExtractor *)v47, a2);
    std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100]((char **)a1, &v47);
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
    if (*((_QWORD *)&v47 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
  }
  *(_DWORD *)(a1 + 132) = a4;
  *(_DWORD *)(a1 + 136) = a6;
  *(_BYTE *)(a1 + 140) = a5;
  if (SHIBYTE(v60) < 0)
    operator delete((void *)v59);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = *(std::__shared_weak_count **)&v55[32];
  if (*(_QWORD *)&v55[32])
  {
    v30 = (unint64_t *)(*(_QWORD *)&v55[32] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  v32 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
  if (*((_QWORD *)&v52 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v50;
  if (v50)
  {
    v42 = (unint64_t *)(v50 + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
  }
  return a1;
}

void sub_1ADD732CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33)
{
  uint64_t v33;

  quasar::FeatureExtractorArgs::~FeatureExtractorArgs((void **)&a33);
  kaldi::Matrix<float>::~Matrix(a9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v33 + 64);
  a33 = v33 + 40;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v33 + 24);
  a33 = v33;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  _Unwind_Resume(a1);
}

uint64_t quasar::SyncPSRAudioProcessor::SyncPSRAudioProcessor(uint64_t a1, quasar::SystemConfig *a2, uint64_t a3, int a4, int a5)
{
  return quasar::SyncPSRAudioProcessor::SyncPSRAudioProcessor(a1, a2, a3, a4, 0, a5);
}

uint64_t quasar::SyncPSRAudioProcessor::reset(quasar::SyncPSRAudioProcessor *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  int64x2_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  __int128 v29;
  int64x2_t v30;
  _OWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  __int128 v40;
  unint64_t v41;
  _OWORD *v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  _QWORD *v51;
  _QWORD *v52;
  char *v53;
  __int128 v54;
  int64x2_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t result;
  unint64_t *v79;
  unint64_t v80;
  __int128 v81;
  kaldi::OnlineFeatInputItf *v82;
  __int128 v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  __int128 v86;
  __int128 v87;
  char v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _BYTE v92[41];
  int v93;
  char v94;
  __int128 v95;
  void *__p[2];
  uint64_t v97;
  char v98;
  void **v99;
  int64x2_t v100;
  uint64_t v101;
  char *v102;

  std::allocate_shared[abi:ne180100]<quasar::SyncRecogAudioBuffer,std::allocator<quasar::SyncRecogAudioBuffer>,unsigned int &,int &,void>((unsigned int *)this + 33, (int *)this + 34, &v87);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 24, &v87);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
  if (*((_QWORD *)&v87 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v7 = *((_QWORD *)this + 5);
  v5 = *((_QWORD *)this + 6);
  v6 = (int64x2_t *)((char *)this + 40);
  while (v5 != v7)
    v5 = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v5 - 16);
  *((_QWORD *)this + 6) = v7;
  LODWORD(v87) = *((_DWORD *)this + 33);
  *((_QWORD *)&v87 + 1) = 0;
  v88 = 0;
  v93 = 0;
  v94 = 0;
  v89 = 0u;
  v90 = 0u;
  v91 = 0u;
  memset(v92, 0, sizeof(v92));
  v95 = 0u;
  *(_OWORD *)__p = 0u;
  v97 = 0;
  v98 = 1;
  v8 = *(uint64_t **)this;
  v9 = (uint64_t *)*((_QWORD *)this + 1);
  if (*(uint64_t **)this != v9)
  {
    while (1)
    {
      v10 = *v8;
      v11 = *((_QWORD *)this + 3);
      v12 = *((_QWORD *)this + 5);
      v13 = *((_QWORD *)this + 6);
      if (v13 == v12)
      {
        v84 = 0;
        v85 = 0;
      }
      else
      {
        v84 = *(_QWORD *)(v13 - 16);
        v14 = *(std::__shared_weak_count **)(v13 - 8);
        v85 = v14;
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldxr(p_shared_owners);
          while (__stxr(v16 + 1, p_shared_owners));
        }
      }
      quasar::FeatureExtractor::createOnlineFeInput(v10, v11, &v84);
      v17 = (_OWORD *)*((_QWORD *)this + 6);
      v18 = *((_QWORD *)this + 7);
      if ((unint64_t)v17 >= v18)
      {
        v19 = ((uint64_t)v17 - v6->i64[0]) >> 4;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v21 = v18 - v6->i64[0];
        if (v21 >> 3 > v20)
          v20 = v21 >> 3;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
          v22 = 0xFFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        v102 = (char *)this + 56;
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 56, v22);
        v25 = &v23[16 * v19];
        *(_OWORD *)v25 = v86;
        v86 = 0uLL;
        v27 = (_QWORD *)*((_QWORD *)this + 5);
        v26 = (_QWORD *)*((_QWORD *)this + 6);
        if (v26 == v27)
        {
          v30 = vdupq_n_s64((unint64_t)v26);
          v28 = &v23[16 * v19];
        }
        else
        {
          v28 = &v23[16 * v19];
          do
          {
            v29 = *((_OWORD *)v26 - 1);
            v26 -= 2;
            *((_OWORD *)v28 - 1) = v29;
            v28 -= 16;
            *v26 = 0;
            v26[1] = 0;
          }
          while (v26 != v27);
          v30 = *v6;
        }
        v31 = v25 + 16;
        *((_QWORD *)this + 5) = v28;
        *((_QWORD *)this + 6) = v25 + 16;
        v100 = v30;
        v32 = *((_QWORD *)this + 7);
        *((_QWORD *)this + 7) = &v23[16 * v24];
        v101 = v32;
        v99 = (void **)v30.i64[0];
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)&v99);
        v33 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
        *((_QWORD *)this + 6) = v31;
        if (v33)
        {
          v34 = (unint64_t *)&v33->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
      }
      else
      {
        *v17 = v86;
        v86 = 0uLL;
        *((_QWORD *)this + 6) = v17 + 1;
      }
      v36 = v85;
      if (v13 == v12)
      {
        if (v85)
        {
          v39 = (unint64_t *)&v85->__shared_owners_;
          do
            v38 = __ldaxr(v39);
          while (__stlxr(v38 - 1, v39));
LABEL_42:
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      else if (v85)
      {
        v37 = (unint64_t *)&v85->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        goto LABEL_42;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v8 + 16))(*v8))
      {
        v82 = *(kaldi::OnlineFeatInputItf **)(*((_QWORD *)this + 6) - 16);
        std::allocate_shared[abi:ne180100]<kaldi::OnlineBufferingInput,std::allocator<kaldi::OnlineBufferingInput>,kaldi::OnlineFeatInputItf *,void>(&v82, &v83);
        v40 = v83;
        v86 = v83;
        v83 = 0uLL;
        v42 = (_OWORD *)*((_QWORD *)this + 6);
        v41 = *((_QWORD *)this + 7);
        if ((unint64_t)v42 >= v41)
        {
          v81 = v40;
          v44 = ((uint64_t)v42 - v6->i64[0]) >> 4;
          if ((unint64_t)(v44 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v45 = v41 - v6->i64[0];
          v46 = v45 >> 3;
          if (v45 >> 3 <= (unint64_t)(v44 + 1))
            v46 = v44 + 1;
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0)
            v47 = 0xFFFFFFFFFFFFFFFLL;
          else
            v47 = v46;
          v102 = (char *)this + 56;
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 56, v47);
          v50 = &v48[16 * v44];
          *(_OWORD *)v50 = v81;
          v86 = 0uLL;
          v52 = (_QWORD *)*((_QWORD *)this + 5);
          v51 = (_QWORD *)*((_QWORD *)this + 6);
          if (v51 == v52)
          {
            v55 = vdupq_n_s64((unint64_t)v51);
            v53 = &v48[16 * v44];
          }
          else
          {
            v53 = &v48[16 * v44];
            do
            {
              v54 = *((_OWORD *)v51 - 1);
              v51 -= 2;
              *((_OWORD *)v53 - 1) = v54;
              v53 -= 16;
              *v51 = 0;
              v51[1] = 0;
            }
            while (v51 != v52);
            v55 = *v6;
          }
          v43 = v50 + 16;
          *((_QWORD *)this + 5) = v53;
          *((_QWORD *)this + 6) = v50 + 16;
          v100 = v55;
          v56 = *((_QWORD *)this + 7);
          *((_QWORD *)this + 7) = &v48[16 * v49];
          v101 = v56;
          v99 = (void **)v55.i64[0];
          std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)&v99);
        }
        else
        {
          *v42 = v40;
          v43 = v42 + 1;
          v86 = 0uLL;
        }
        *((_QWORD *)this + 6) = v43;
        v57 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
        if (*((_QWORD *)&v83 + 1))
        {
          v58 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
      }
      v8 += 2;
      if (v8 == v9)
      {
        v7 = *((_QWORD *)this + 6);
        break;
      }
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(v7 - 16) + 56))(*(_QWORD *)(v7 - 16));
  *(_QWORD *)&v86 = *(_QWORD *)(*((_QWORD *)this + 6) - 16);
  LOBYTE(v82) = 0;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineFeatureMatrix,std::allocator<kaldi::OnlineFeatureMatrix>,kaldi::OnlineFeatureMatrixOptions &,kaldi::OnlineFeatInputItf *,BOOL,void>((_DWORD *)this + 20, (uint64_t *)&v86, (char *)&v82, &v99);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 64, (__int128 *)&v99);
  v60 = (std::__shared_weak_count *)v100.i64[0];
  if (v100.i64[0])
  {
    v61 = (unint64_t *)(v100.i64[0] + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  *((_DWORD *)this + 32) = 0;
  if (SHIBYTE(v97) < 0)
    operator delete(__p[0]);
  v63 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
  if (*((_QWORD *)&v95 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = *(std::__shared_weak_count **)&v92[32];
  if (*(_QWORD *)&v92[32])
  {
    v67 = (unint64_t *)(*(_QWORD *)&v92[32] + 8);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v99 = (void **)v92;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v99);
  v69 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
  if (*((_QWORD *)&v91 + 1))
  {
    v70 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
  if (*((_QWORD *)&v90 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
  if (*((_QWORD *)&v89 + 1))
  {
    v76 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  result = *((_QWORD *)&v87 + 1);
  if (*((_QWORD *)&v87 + 1))
  {
    v79 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void sub_1ADD739BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  quasar::FeatureExtractorArgs::~FeatureExtractorArgs((void **)va);
  _Unwind_Resume(a1);
}

void quasar::SyncPSRAudioProcessor::compute(quasar::SyncPSRAudioProcessor *this)
{
  signed int i;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  void **v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v15 = 0;
  v16 = 0;
  v17 = 0;
  for (i = *((_DWORD *)this + 32);
        kaldi::OnlineFeatureMatrix::IsValidFrame(*((int32x2_t **)this + 8), i, 1);
        *((_DWORD *)this + 32) = i)
  {
    if (*((_BYTE *)this + 140))
    {
      if (v16 - v15 != 24)
        std::vector<kaldi::Vector<float>>::resize(&v15, 1uLL);
      kaldi::OnlineFeatureMatrix::GetFrame(*((kaldi::OnlineFeatureMatrix **)this + 8), *((_DWORD *)this + 32), (uint64_t *)&v11);
      v3 = v16 - 24;
      kaldi::Vector<float>::Resize((void **)(v16 - 24), v12, 1);
      kaldi::VectorBase<float>::CopyFromVec(v3, (const void **)&v11);
    }
    else
    {
      kaldi::OnlineFeatureMatrix::GetFrame(*((kaldi::OnlineFeatureMatrix **)this + 8), *((_DWORD *)this + 32), (uint64_t *)&v11);
      v4 = v16;
      if (v16 >= v17)
      {
        v5 = std::vector<kaldi::Vector<float>>::__emplace_back_slow_path<kaldi::SubVector<float>>(&v15, (uint64_t)&v11);
      }
      else
      {
        std::vector<kaldi::Vector<float>>::__construct_one_at_end[abi:ne180100]<kaldi::SubVector<float>>((uint64_t)&v15, (uint64_t)&v11);
        v5 = v4 + 24;
      }
      v16 = v5;
    }
    i = *((_DWORD *)this + 32) + 1;
  }
  if (v16 != v15)
  {
    kaldi::Matrix<float>::Resize((int32x2_t *)this + 11, -1431655765 * ((v16 - v15) >> 3), *(unsigned int *)(*((_QWORD *)this + 8) + 24), 1, 0);
    if (v16 != v15)
    {
      v6 = 0;
      v7 = 0;
      do
      {
        v8 = *((_QWORD *)this + 11);
        v9 = *((_DWORD *)this + 26);
        v10 = kaldi::MatrixBase<float>::NumCols((uint64_t)this + 88);
        v13 = 0;
        v14 = 0;
        v11 = (void **)(v8 + 4 * v9 * (int)v7);
        v12 = v10;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v11, (const void **)(v15 + v6));
        ++v7;
        v6 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v15) >> 3) > v7);
    }
  }
  v11 = (void **)&v15;
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v11);
}

void sub_1ADD73BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  a9 = (void **)&a12;
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void quasar::SyncPSRAudioProcessor::addAudio(quasar::SyncRecogAudioBuffer **this, const __int16 *a2, uint64_t a3, int a4)
{
  quasar::SyncRecogAudioBuffer::addAudio(this[3], a2, a3);
  if (a4)
    quasar::SyncRecogAudioBuffer::endAudio((uint64_t)this[3]);
  quasar::SyncPSRAudioProcessor::compute((quasar::SyncPSRAudioProcessor *)this);
}

void quasar::SyncPSRAudioProcessor::endAudio(quasar::SyncPSRAudioProcessor *this)
{
  quasar::SyncRecogAudioBuffer::endAudio(*((_QWORD *)this + 3));
  quasar::SyncPSRAudioProcessor::compute(this);
}

uint64_t quasar::SyncPSRAudioProcessor::getSpeakerRecogMatrix@<X0>(quasar::SyncPSRAudioProcessor *this@<X0>, uint64_t a2@<X8>)
{
  return kaldi::Matrix<float>::Matrix(a2, (char *)this + 88);
}

uint64_t quasar::SyncPSRAudioProcessor::processedAudioDurationMs(quasar::SyncPSRAudioProcessor *this)
{
  return *((_DWORD *)this + 32)
       * (*(unsigned int (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 6) - 16) + 24))(*(_QWORD *)(*((_QWORD *)this + 6) - 16));
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::SyncRecogAudioBuffer,std::allocator<quasar::SyncRecogAudioBuffer>,unsigned int &,int &,void>@<X0>(unsigned int *a1@<X1>, int *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x60uLL);
  result = std::__shared_ptr_emplace<quasar::SyncRecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<unsigned int &,int &,std::allocator<quasar::SyncRecogAudioBuffer>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADD73D08(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::SyncRecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<unsigned int &,int &,std::allocator<quasar::SyncRecogAudioBuffer>,0>(_QWORD *a1, unsigned int *a2, int *a3)
{
  a1[2] = 0;
  *a1 = &unk_1E5D438D8;
  a1[1] = 0;
  quasar::SyncRecogAudioBuffer::SyncRecogAudioBuffer((quasar::SyncRecogAudioBuffer *)(a1 + 3), *a2, *a3, 120, 0);
  return a1;
}

void sub_1ADD73D64(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::OnlineFeatureMatrix,std::allocator<kaldi::OnlineFeatureMatrix>,kaldi::OnlineFeatureMatrixOptions &,kaldi::OnlineFeatInputItf *,BOOL,void>@<X0>(_DWORD *a1@<X1>, uint64_t *a2@<X2>, char *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x1B0uLL);
  result = std::__shared_ptr_emplace<kaldi::OnlineFeatureMatrix>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatureMatrixOptions &,kaldi::OnlineFeatInputItf *,BOOL,std::allocator<kaldi::OnlineFeatureMatrix>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1ADD73DD4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::OnlineFeatureMatrix>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatureMatrixOptions &,kaldi::OnlineFeatInputItf *,BOOL,std::allocator<kaldi::OnlineFeatureMatrix>,0>(_QWORD *a1, _DWORD *a2, uint64_t *a3, char *a4)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41878;
  a1[1] = 0;
  kaldi::OnlineFeatureMatrix::OnlineFeatureMatrix((uint64_t)(a1 + 3), a2, *a3, *a4);
  return a1;
}

void sub_1ADD73E28(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::vector<kaldi::Vector<float>>::__construct_one_at_end[abi:ne180100]<kaldi::SubVector<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  kaldi::Vector<float>::Resize((void **)v4, *(unsigned int *)(a2 + 8), 1);
  result = kaldi::VectorBase<float>::CopyFromVec(v4, (const void **)a2);
  *(_QWORD *)(a1 + 8) = v4 + 24;
  return result;
}

void sub_1ADD73E94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::Vector<float>>::__emplace_back_slow_path<kaldi::SubVector<float>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];
  uint64_t v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = (uint64_t)&v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  kaldi::Vector<float>::Resize((void **)v11, *(unsigned int *)(a2 + 8), 1);
  kaldi::VectorBase<float>::CopyFromVec(v11, (const void **)a2);
  v15 += 24;
  std::vector<kaldi::Vector<float>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<kaldi::Vector<float>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1ADD73FA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::Vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 quasar::MetaInfo::Sense::Sense(uint64_t a1, __int128 *a2, __int128 *a3, __n128 *a4)
{
  __int128 v4;
  __int128 v5;
  __n128 result;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v5 = *a3;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 24) = v5;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  result = *a4;
  *(_QWORD *)(a1 + 64) = a4[1].n128_u64[0];
  *(__n128 *)(a1 + 48) = result;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  a4->n128_u64[0] = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  return result;
}

quasar::MetaInfo *quasar::MetaInfo::MetaInfo(quasar::MetaInfo *this)
{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  quasar::PTree::PTree((quasar::PTree *)v2);
  *(_BYTE *)(v2 + 64) = 0;
  *(_BYTE *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 96) = v2 + 104;
  *(_BYTE *)(v2 + 120) = 0;
  *(_BYTE *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 168) = 0;
  *(_QWORD *)(v2 + 160) = 0;
  *(_QWORD *)(v2 + 152) = v2 + 160;
  *(_QWORD *)this = v2;
  return this;
}

void sub_1ADD740CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1032C40AAD8FF0BLL);
  _Unwind_Resume(a1);
}

void quasar::MetaInfo::fromJson(const void *a1@<X0>, std::string::size_type a2@<X1>, quasar::MetaInfo *a3@<X8>)
{
  quasar::MetaInfo::Impl *v6;
  _BYTE v7[176];

  quasar::MetaInfo::MetaInfo(a3);
  quasar::MetaInfo::Impl::fromJson(a1, a2, (uint64_t)v7);
  v6 = (quasar::MetaInfo::Impl *)operator new();
  quasar::MetaInfo::Impl::Impl((uint64_t)v6, (uint64_t)v7);
  std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100]((quasar::MetaInfo::Impl **)a3, v6);
  quasar::MetaInfo::Impl::~Impl((quasar::MetaInfo::Impl *)v7);
}

void sub_1ADD74178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::MetaInfo::Impl **v9;
  uint64_t v10;
  uint64_t v11;

  v11 = v10;
  MEMORY[0x1AF44D190](v11, 0x1032C40AAD8FF0BLL);
  quasar::MetaInfo::Impl::~Impl((quasar::MetaInfo::Impl *)&a9);
  std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](v9, 0);
  _Unwind_Resume(a1);
}

void quasar::MetaInfo::Impl::fromJson(const void *a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X8>)
{
  std::string *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  std::string __p[11];
  _QWORD v11[12];
  char v12;
  uint64_t v13;

  if (a2)
  {
    quasar::PTree::PTree((quasar::PTree *)a3);
    *(_QWORD *)(a3 + 160) = 0;
    *(_BYTE *)(a3 + 64) = 0;
    *(_BYTE *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 112) = 0;
    *(_QWORD *)(a3 + 104) = 0;
    *(_QWORD *)(a3 + 96) = a3 + 104;
    *(_BYTE *)(a3 + 120) = 0;
    *(_BYTE *)(a3 + 144) = 0;
    *(_QWORD *)(a3 + 168) = 0;
    *(_QWORD *)(a3 + 152) = a3 + 160;
    if (a2 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (a2 >= 0x17)
    {
      v8 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a2 | 7) != 0x17)
        v8 = a2 | 7;
      v9 = v8 + 1;
      v6 = (std::string *)operator new(v8 + 1);
      __p[0].__r_.__value_.__l.__size_ = a2;
      __p[0].__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
      __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    }
    else
    {
      *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = a2;
      v6 = __p;
    }
    memmove(v6, a1, a2);
    v6->__r_.__value_.__s.__data_[a2] = 0;
    std::istringstream::basic_istringstream[abi:ne180100](v11, __p, 8);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    quasar::PTree::readJson(a3, v11);
    quasar::MetaInfo::Impl::extractDataFromPTree((quasar::MetaInfo::Impl *)a3);
    v11[0] = *MEMORY[0x1E0DE4F58];
    *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
    v11[2] = MEMORY[0x1E0DE4FB8] + 16;
    if (v12 < 0)
      operator delete((void *)v11[10]);
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x1AF44D094](&v13);
  }
  else
  {
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 160) = 0u;
    v7 = (_QWORD *)(a3 + 160);
    quasar::PTree::PTree((quasar::PTree *)a3);
    *(_BYTE *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 104) = 0;
    *(_BYTE *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 112) = 0;
    *(_QWORD *)(a3 + 96) = a3 + 104;
    *(_BYTE *)(a3 + 120) = 0;
    *(_BYTE *)(a3 + 144) = 0;
    *v7 = 0;
    *(_QWORD *)(a3 + 168) = 0;
    *(_QWORD *)(a3 + 152) = v7;
  }
}

void sub_1ADD74394()
{
  __break(1u);
}

void sub_1ADD7445C()
{
  __cxa_end_catch();
  JUMPOUT(0x1ADD74464);
}

void sub_1ADD74474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  quasar::MetaInfo::Impl *v14;

  if (a14 < 0)
    operator delete(__p);
  quasar::MetaInfo::Impl::~Impl(v14);
  _Unwind_Resume(a1);
}

void quasar::MetaInfo::~MetaInfo(quasar::MetaInfo::Impl **this)
{
  std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](this, 0);
}

quasar::MetaInfo *quasar::MetaInfo::MetaInfo(quasar::MetaInfo *this, const quasar::MetaInfo::Impl **a2)
{
  const quasar::MetaInfo::Impl *v3;
  quasar::MetaInfo::Impl *v4;

  v3 = *a2;
  v4 = (quasar::MetaInfo::Impl *)operator new();
  quasar::MetaInfo::Impl::Impl(v4, v3);
  *(_QWORD *)this = v4;
  return this;
}

void sub_1ADD7451C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1032C40AAD8FF0BLL);
  _Unwind_Resume(a1);
}

quasar::MetaInfo::Impl **quasar::MetaInfo::operator=(quasar::MetaInfo::Impl **a1, const quasar::MetaInfo::Impl **a2)
{
  const quasar::MetaInfo::Impl *v3;
  quasar::MetaInfo::Impl *v4;

  if (a1 != a2)
  {
    v3 = *a2;
    v4 = (quasar::MetaInfo::Impl *)operator new();
    quasar::MetaInfo::Impl::Impl(v4, v3);
    std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](a1, v4);
  }
  return a1;
}

void sub_1ADD745A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1032C40AAD8FF0BLL);
  _Unwind_Resume(a1);
}

_QWORD *quasar::MetaInfo::MetaInfo(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

quasar::MetaInfo::Impl **quasar::MetaInfo::operator=(quasar::MetaInfo::Impl **a1, quasar::MetaInfo::Impl **a2)
{
  quasar::MetaInfo::Impl *v3;

  v3 = *a2;
  *a2 = 0;
  std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](a1, v3);
  return a1;
}

void quasar::MetaInfo::update(quasar::MetaInfo::Impl **this, const quasar::PTree *a2)
{
  quasar::MetaInfo::Impl::update(*this, a2);
}

void quasar::MetaInfo::Impl::update(quasar::MetaInfo::Impl *this, const quasar::PTree *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = quasar::PTree::begin(a2);
  v5 = quasar::PTree::end(a2);
  if (v4 != v5)
  {
    v6 = v5;
    do
    {
      quasar::PTree::putChild((uint64_t)this, v4, v4 + 24, 1);
      v4 += 88;
    }
    while (v4 != v6);
  }
}

void quasar::MetaInfo::update(uint64_t ***this, uint64_t ***a2)
{
  quasar::MetaInfo::Impl::update(*this, *a2);
}

void quasar::MetaInfo::Impl::update(uint64_t **this, uint64_t **a2)
{
  quasar::MetaInfo::Impl::update((quasar::MetaInfo::Impl *)this, (const quasar::PTree *)a2);
  if (this != a2)
    std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *> *,long>>(this + 12, (__int128 *)a2[12], (__int128 *)(a2 + 13));
  std::__optional_storage_base<std::vector<quasar::MetaInfo::Sense>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::vector<quasar::MetaInfo::Sense>,false> const&>((uint64_t)(this + 8), (uint64_t)(a2 + 8));
  std::__optional_storage_base<std::vector<quasar::AlternativeSelectionSpan>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::vector<quasar::AlternativeSelectionSpan>,false> const&>((uint64_t)(this + 15), (uint64_t)(a2 + 15));
}

void quasar::MetaInfo::replace(uint64_t *a1, uint64_t a2)
{
  quasar::MetaInfo::Impl::replace(*a1, a2);
}

void quasar::MetaInfo::Impl::replace(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  if (a1 != a2)
    std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(a1 + 32, *(std::string **)(a2 + 32), *(std::string **)(a2 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
}

uint64_t quasar::MetaInfo::get(quasar::MetaInfo *this)
{
  return *(_QWORD *)this;
}

void quasar::MetaInfo::setRomanization(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *__p[2];
  uint64_t v4;

  v2 = *a1;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  quasar::MetaInfo::Impl::setRomanization(v2, (uint64_t)__p);
  if (SHIBYTE(v4) < 0)
    operator delete(__p[0]);
}

void sub_1ADD747A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::MetaInfo::Impl::setRomanization(uint64_t a1, uint64_t a2)
{
  _BYTE v4[64];
  void *v5[2];
  char v6;

  std::string::basic_string[abi:ne180100]<0>(v5, "romanization");
  quasar::PTree::PTree(v4, a2);
  quasar::PTree::putChild(a1, (uint64_t)v5, (uint64_t)v4, 1);
  quasar::PTree::~PTree((quasar::PTree *)v4);
  if (v6 < 0)
    operator delete(v5[0]);
}

void sub_1ADD7482C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  quasar::PTree::~PTree((quasar::PTree *)va);
  if (*(char *)(v2 - 17) < 0)
    operator delete(*(void **)(v2 - 40));
  _Unwind_Resume(a1);
}

BOOL quasar::MetaInfo::hasRomanization(quasar::MetaInfo::Impl **this)
{
  return quasar::MetaInfo::Impl::hasRomanization(*this);
}

BOOL quasar::MetaInfo::Impl::hasRomanization(quasar::MetaInfo::Impl *this)
{
  uint64_t ChildOptional;
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "romanization");
  ChildOptional = quasar::PTree::getChildOptional((uint64_t)this, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return ChildOptional != 0;
}

void sub_1ADD748BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::MetaInfo::romanization(quasar::MetaInfo::Impl **this@<X0>, std::string *a2@<X8>)
{
  quasar::MetaInfo::Impl::romanization(*this, a2);
}

void quasar::MetaInfo::Impl::romanization(quasar::MetaInfo::Impl *this@<X0>, std::string *a2@<X8>)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "romanization");
  quasar::PTree::getStringOptional((uint64_t)this, (uint64_t)__p, a2);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1ADD74938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::MetaInfo::json(quasar::MetaInfo::Impl **this@<X0>, uint64_t a2@<X8>)
{
  quasar::MetaInfo::Impl::json(*this, a2);
}

void quasar::MetaInfo::Impl::json(quasar::MetaInfo::Impl *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[11];
  char v7;
  uint64_t v8;
  int v9;
  std::string v10;
  std::string v11;
  char v12;

  v9 = *(_DWORD *)this;
  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&v10, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    v10 = *(std::string *)((char *)this + 8);
  memset(&v11, 0, sizeof(v11));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v11, *((_QWORD *)this + 4), *((_QWORD *)this + 5), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3));
  v12 = *((_BYTE *)this + 56);
  quasar::MetaInfo::Impl::updatePTreeWithStructuredPredictions(this, (quasar::PTree *)&v9);
  quasar::MetaInfo::Impl::updatePTreeWithStructuredPredictionAlignments(this, (quasar::PTree *)&v9);
  if (quasar::PTree::empty((quasar::PTree *)&v9))
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, "");
  }
  else
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
    quasar::PTree::writeJson((quasar::PTreeHelper *)&v9, v6, 0);
    std::stringbuf::str();
    if (*(char *)(a2 + 23) < 0)
    {
      v4 = *(_QWORD *)(a2 + 8);
      v5 = *(_QWORD *)a2 + v4;
    }
    else
    {
      v4 = *(unsigned __int8 *)(a2 + 23);
      v5 = a2 + v4;
    }
    if (*(_BYTE *)(v5 - 1) == 10)
      std::string::resize((std::string *)a2, v4 - 1, 0);
    v6[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v6[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v7 < 0)
      operator delete((void *)v6[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1AF44D094](&v8);
  }
  quasar::PTree::~PTree((quasar::PTree *)&v9);
}

void sub_1ADD74B00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  std::ostringstream::~ostringstream((uint64_t)va);
  quasar::PTree::~PTree((quasar::PTree *)(v3 - 96));
  _Unwind_Resume(a1);
}

void quasar::MetaInfo::setAmbiguityAnnotatorSenses(quasar::MetaInfo::Impl **a1, __int128 *a2)
{
  quasar::MetaInfo::Impl *v2;
  __int128 v3;
  uint64_t v4;
  void **v5;

  v2 = *a1;
  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  quasar::MetaInfo::Impl::setAmbiguityAnnotatorSenses(v2, &v3);
  v5 = (void **)&v3;
  std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void sub_1ADD74BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void quasar::MetaInfo::Impl::setAmbiguityAnnotatorSenses(quasar::MetaInfo::Impl *a1, _QWORD *a2)
{
  if (*a2 != a2[1])
  {
    quasar::MetaInfo::Impl::eraseSenses(a1);
    std::optional<std::vector<quasar::MetaInfo::Sense>>::operator=[abi:ne180100]<std::vector<quasar::MetaInfo::Sense>,void>((uint64_t)a1 + 64, (uint64_t)a2);
    quasar::MetaInfo::Impl::updatePTreeWithAmbiguityAnnotatorSenses(a1);
  }
}

BOOL quasar::MetaInfo::hasSenses(quasar::MetaInfo *this)
{
  return *(_BYTE *)(*(_QWORD *)this + 88)
      && *(_QWORD *)(*(_QWORD *)this + 64) != *(_QWORD *)(*(_QWORD *)this + 72);
}

uint64_t quasar::MetaInfo::getSenses(quasar::MetaInfo *this)
{
  return *(_QWORD *)this + 64;
}

void quasar::MetaInfo::eraseSenses(quasar::MetaInfo::Impl **this)
{
  quasar::MetaInfo::Impl::eraseSenses(*this);
}

void quasar::MetaInfo::Impl::eraseSenses(quasar::MetaInfo::Impl *this)
{
  void *__p[2];
  char v3;

  std::string::basic_string[abi:ne180100]<0>(__p, "syn");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "def");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "defLocale");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "source match");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "source index");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "source length");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "target match");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "target index");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "target length");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "att");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "formality");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "gender");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "reg");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "explicit");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "senses");
  quasar::PTree::erase((uint64_t)this, (unsigned __int8 *)__p);
  if (v3 < 0)
    operator delete(__p[0]);
  if (*((_BYTE *)this + 88))
  {
    __p[0] = (char *)this + 64;
    std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    *((_BYTE *)this + 88) = 0;
  }
}

void sub_1ADD74F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::MetaInfo::setStructuredPrediction(quasar::MetaInfo::Impl **a1, uint64_t a2)
{
  quasar::MetaInfo::Impl *v2;
  void *__p[2];
  uint64_t v4;
  int v5;
  __int128 v6;
  uint64_t v7;
  void **v8;

  v2 = *a1;
  *(_OWORD *)__p = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v5 = *(_DWORD *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  quasar::MetaInfo::Impl::setStructuredPrediction(v2, (const void **)__p);
  v8 = (void **)&v6;
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (SHIBYTE(v4) < 0)
    operator delete(__p[0]);
}

void sub_1ADD74FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  quasar::MetaInfo::StructuredPrediction::~StructuredPrediction(&a9);
  _Unwind_Resume(a1);
}

void quasar::MetaInfo::Impl::setStructuredPrediction(quasar::MetaInfo::Impl *a1, const void **a2)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  __int128 v8;

  v4 = (uint64_t **)((char *)a1 + 96);
  v5 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a1 + 96, a2);
  v6 = v5;
  if ((quasar::MetaInfo::Impl *)((char *)a1 + 104) == (quasar::MetaInfo::Impl *)v5)
  {
    std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__emplace_hint_unique_key_args<std::string,std::string&,quasar::MetaInfo::StructuredPrediction>(v4, (uint64_t *)v5, a2, (__int128 *)a2, (__int128 *)a2);
    quasar::MetaInfo::Impl::updatePTreeWithStructuredPredictions(a1, a1);
  }
  else
  {
    v7 = (void **)(v5 + 56);
    if (*(char *)(v5 + 79) < 0)
      operator delete(*v7);
    v8 = *(_OWORD *)a2;
    *(_QWORD *)(v6 + 72) = a2[2];
    *(_OWORD *)v7 = v8;
    *((_BYTE *)a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
    *(_DWORD *)(v6 + 80) = *((_DWORD *)a2 + 6);
    std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__vdeallocate((void **)(v6 + 88));
    *(_OWORD *)(v6 + 88) = *((_OWORD *)a2 + 2);
    *(_QWORD *)(v6 + 104) = a2[6];
    a2[4] = 0;
    a2[5] = 0;
    a2[6] = 0;
  }
}

BOOL quasar::MetaInfo::hasStructuredPrediction(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[2];

  v3 = *a1;
  v5[0] = a2;
  v5[1] = a3;
  return std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__count_multi<std::string_view>(v3 + 96, (uint64_t)v5) != 0;
}

uint64_t quasar::MetaInfo::structuredPrediction(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];

  v3 = *a1;
  v6[0] = a2;
  v6[1] = a3;
  v4 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string_view>(v3 + 96, (uint64_t)v6);
  if (v3 + 104 == v4)
    return 0;
  else
    return v4 + 56;
}

void quasar::MetaInfo::eraseStructuredPrediction(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  quasar::MetaInfo::Impl::eraseStructuredPrediction(*a1, a2, a3);
}

void quasar::MetaInfo::Impl::eraseStructuredPrediction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v4 = (uint64_t **)(a1 + 96);
  v5 = (uint64_t *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string_view>(a1 + 96, (uint64_t)v7);
  if ((uint64_t *)(a1 + 104) != v5)
  {
    v6 = v5;
    std::__tree<std::string>::__remove_node_pointer(v4, v5);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::MetaInfo::StructuredPrediction>,0>((uint64_t)(v6 + 4));
    operator delete(v6);
  }
}

void quasar::MetaInfo::setAlternativeSelectionSpans(uint64_t *a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  void **v5;

  v2 = *a1;
  v3 = *a2;
  v4 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  std::optional<std::vector<quasar::AlternativeSelectionSpan>>::operator=[abi:ne180100]<std::vector<quasar::AlternativeSelectionSpan>,void>(v2 + 120, (uint64_t)&v3);
  v5 = (void **)&v3;
  std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void sub_1ADD7521C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t quasar::MetaInfo::getAlternativeSelectionSpans(quasar::MetaInfo *this)
{
  return *(_QWORD *)this + 120;
}

void quasar::MetaInfo::setStructurePredictionToSourceTokenAlignments(uint64_t *a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  void **v7;

  v4 = *a1;
  v5 = *a4;
  v6 = *((_QWORD *)a4 + 2);
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  *(_QWORD *)a4 = 0;
  quasar::MetaInfo::Impl::setStructurePredictionToSourceTokenAlignments(v4, a2, a3, (uint64_t)&v5);
  v7 = (void **)&v5;
  std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void sub_1ADD75298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void quasar::MetaInfo::Impl::setStructurePredictionToSourceTokenAlignments(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a2;
  v9[1] = a3;
  v6 = (uint64_t **)(a1 + 152);
  v7 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string_view>(a1 + 152, (uint64_t)v9);
  v8 = v7;
  if (a1 + 160 == v7)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::set<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<int>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<int>>>>>::__emplace_hint_unique_impl<std::string_view &,std::vector<std::set<int>>>(v6, (uint64_t *)v7, (uint64_t)v9, a4);
  }
  else
  {
    std::vector<std::set<int>>::__vdeallocate((void **)(v7 + 56));
    *(_OWORD *)(v8 + 56) = *(_OWORD *)a4;
    *(_QWORD *)(v8 + 72) = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
}

void quasar::MetaInfo::eraseStructuredPredictionToSourceTokenAlignments(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  quasar::MetaInfo::Impl::eraseStructuredPredictionToSourceTokenAlignments(*a1, a2, a3);
}

void quasar::MetaInfo::Impl::eraseStructuredPredictionToSourceTokenAlignments(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v4 = (uint64_t **)(a1 + 152);
  v5 = (uint64_t *)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::string>>>::find<std::string_view>(a1 + 152, (uint64_t)v7);
  if ((uint64_t *)(a1 + 160) != v5)
  {
    v6 = v5;
    std::__tree<std::string>::__remove_node_pointer(v4, v5);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::set<int>>>,0>((uint64_t)(v6 + 4));
    operator delete(v6);
  }
}

void quasar::MetaInfo::Impl::extractDataFromPTree(quasar::MetaInfo::Impl *this)
{
  quasar::MetaInfo::Impl::setStructuredPredictionFromPTree(this);
  quasar::MetaInfo::Impl::setAmbiguityAnnotatorSensesFromPTree(this);
  if (!*((_BYTE *)this + 88) || *((_QWORD *)this + 8) == *((_QWORD *)this + 9))
    quasar::MetaInfo::Impl::setPhrasebookSenseFromPTree(this);
}

void quasar::MetaInfo::Impl::setStructuredPredictionFromPTree(quasar::MetaInfo::Impl *this)
{
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  void *v9;
  char *v10;
  uint64_t ChildOptional;
  quasar::PTree *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  quasar::PTree *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t Int;
  int v45;
  uint64_t **v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50[2];
  char v51;
  void *__p[2];
  _OWORD v53[4];
  std::string v54;
  char v55;
  std::string __str;
  char v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  std::string v61;

  v2 = (_QWORD *)((char *)this + 104);
  v46 = (uint64_t **)((char *)this + 96);
  std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::destroy((uint64_t)this + 96, *((_QWORD **)this + 13));
  *((_QWORD *)this + 12) = v2;
  *((_QWORD *)this + 14) = 0;
  *v2 = 0;
  v3 = quasar::PTree::begin(this);
  v48 = quasar::PTree::end(this);
  if (v3 != v48)
  {
    v4 = "start";
    v5 = "end";
    do
    {
      if (*(char *)(v3 + 23) < 0)
      {
        v7 = *(char **)v3;
        v6 = *(_QWORD *)(v3 + 8);
      }
      else
      {
        v6 = *(unsigned __int8 *)(v3 + 23);
        v7 = (char *)v3;
      }
      if (v6 < 13)
        goto LABEL_91;
      v47 = v3 + 24;
      v8 = &v7[v6];
      v9 = v7;
      while (1)
      {
        v10 = (char *)memchr(v9, 95, v6 - 12);
        if (!v10)
          goto LABEL_91;
        if (*(_QWORD *)v10 == 0x616E7265746C615FLL && *(_QWORD *)(v10 + 5) == 0x7365766974616E72)
          break;
        v9 = v10 + 1;
        v6 = v8 - (_BYTE *)v9;
        if (v8 - (_BYTE *)v9 < 13)
          goto LABEL_91;
      }
      if (v10 == v8 || v10 - v7 == -1)
        goto LABEL_91;
      std::string::basic_string(&v61, (const std::string *)v3, 0, v10 - v7, (std::allocator<char> *)__p);
      std::string::basic_string[abi:ne180100]<0>(__p, "spans");
      ChildOptional = quasar::PTree::getChildOptional(v47, (uint64_t)__p);
      v13 = (quasar::PTree *)ChildOptional;
      if (SBYTE7(v53[0]) < 0)
      {
        operator delete(__p[0]);
        if (v13)
        {
LABEL_21:
          v58 = 0;
          v59 = 0;
          v60 = 0;
          v14 = quasar::PTree::begin(v13);
          v49 = quasar::PTree::end(v13);
          if (v14 == v49)
          {
LABEL_82:
            if (v58 != v59)
            {
              std::string::basic_string[abi:ne180100]<0>(&__str, "group");
              Int = quasar::PTree::getIntOptional<int>(v47, (uint64_t)&__str);
              if ((Int & 0xFF00000000) != 0)
                v45 = Int;
              else
                v45 = 0;
              LODWORD(v50[0]) = v45;
              v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
              __p[0] = &v61;
              __p[1] = v50;
              *(_QWORD *)&v53[0] = &v58;
              std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::string&,int &&,std::vector<quasar::MetaInfo::StructuredPrediction::Span> &>>(v46, (const void **)&v61.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v54, (__int128 *)__p);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
            }
            __p[0] = &v58;
            std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            goto LABEL_89;
          }
          while (2)
          {
            quasar::PTree::getStringOptional(v14 + 24, (uint64_t)&v61, &__str);
            if (v57)
            {
              std::operator+<char>();
              quasar::PTree::getStringOptional(v14 + 24, (uint64_t)__p, &v54);
              if (SBYTE7(v53[0]) < 0)
                operator delete(__p[0]);
              if (v55)
              {
                std::string::basic_string[abi:ne180100]<0>(__p, "source");
                v15 = quasar::PTree::getChildOptional(v14 + 24, (uint64_t)__p);
                v16 = v15;
                if (SBYTE7(v53[0]) < 0)
                {
                  operator delete(__p[0]);
                  if (!v16)
                    goto LABEL_75;
                }
                else if (!v15)
                {
                  goto LABEL_75;
                }
                std::string::basic_string[abi:ne180100]<0>(__p, v4);
                v17 = quasar::PTree::getIntOptional<int>(v16, (uint64_t)__p);
                if (SBYTE7(v53[0]) < 0)
                  operator delete(__p[0]);
                if ((v17 & 0xFF00000000) != 0)
                {
                  std::string::basic_string[abi:ne180100]<0>(__p, v5);
                  v18 = quasar::PTree::getIntOptional<int>(v16, (uint64_t)__p);
                  if (SBYTE7(v53[0]) < 0)
                    operator delete(__p[0]);
                  if ((v18 & 0xFF00000000) != 0)
                  {
                    memset(v53, 0, sizeof(v53));
                    *(_OWORD *)__p = 0u;
                    if (!v57
                      || (std::string::operator=((std::string *)__p, &__str),
                          *(_QWORD *)&v53[2] = __PAIR64__(v18, v17),
                          !v55))
                    {
                      std::__throw_bad_optional_access[abi:ne180100]();
                    }
                    std::string::operator=((std::string *)((char *)v53 + 8), &v54);
                    std::string::basic_string[abi:ne180100]<0>(v50, "projections");
                    v19 = quasar::PTree::getChildOptional(v14 + 24, (uint64_t)v50);
                    v20 = (quasar::PTree *)v19;
                    if (v51 < 0)
                    {
                      operator delete(v50[0]);
                      if (!v20)
                        goto LABEL_69;
                    }
                    else if (!v19)
                    {
                      goto LABEL_69;
                    }
                    v21 = quasar::PTree::begin(v20);
                    v22 = quasar::PTree::end(v20);
                    while (v21 != v22)
                    {
                      std::string::basic_string[abi:ne180100]<0>(v50, v4);
                      v23 = quasar::PTree::getIntOptional<int>(v21 + 24, (uint64_t)v50);
                      if (v51 < 0)
                        operator delete(v50[0]);
                      std::string::basic_string[abi:ne180100]<0>(v50, v5);
                      v24 = quasar::PTree::getIntOptional<int>(v21 + 24, (uint64_t)v50);
                      if (v51 < 0)
                        operator delete(v50[0]);
                      if ((v23 & 0xFF00000000) != 0 && (v24 & 0xFF00000000) != 0)
                      {
                        v25 = v5;
                        v26 = v4;
                        v27 = *(_QWORD *)&v53[3];
                        if (*(_QWORD *)&v53[3] >= *((_QWORD *)&v53[3] + 1))
                        {
                          v29 = (uint64_t)(*(_QWORD *)&v53[3] - *((_QWORD *)&v53[2] + 1)) >> 3;
                          v30 = v29 + 1;
                          if ((unint64_t)(v29 + 1) >> 61)
                            std::vector<int>::__throw_length_error[abi:ne180100]();
                          v31 = *((_QWORD *)&v53[3] + 1) - *((_QWORD *)&v53[2] + 1);
                          if ((uint64_t)(*((_QWORD *)&v53[3] + 1) - *((_QWORD *)&v53[2] + 1)) >> 2 > v30)
                            v30 = v31 >> 2;
                          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
                            v32 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v32 = v30;
                          v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v53[3] + 8, v32);
                          v35 = &v33[8 * v29];
                          *(_DWORD *)v35 = v23;
                          *((_DWORD *)v35 + 1) = v24;
                          v37 = (char *)*((_QWORD *)&v53[2] + 1);
                          v36 = *(char **)&v53[3];
                          v38 = v35;
                          if (*(_QWORD *)&v53[3] != *((_QWORD *)&v53[2] + 1))
                          {
                            do
                            {
                              v39 = *((_QWORD *)v36 - 1);
                              v36 -= 8;
                              *((_QWORD *)v38 - 1) = v39;
                              v38 -= 8;
                            }
                            while (v36 != v37);
                            v36 = (char *)*((_QWORD *)&v53[2] + 1);
                          }
                          v28 = v35 + 8;
                          *((_QWORD *)&v53[2] + 1) = v38;
                          *(_QWORD *)&v53[3] = v35 + 8;
                          *((_QWORD *)&v53[3] + 1) = &v33[8 * v34];
                          if (v36)
                            operator delete(v36);
                        }
                        else
                        {
                          **(_DWORD **)&v53[3] = v23;
                          *(_DWORD *)(v27 + 4) = v24;
                          v28 = (_DWORD *)(v27 + 8);
                        }
                        *(_QWORD *)&v53[3] = v28;
                        v4 = v26;
                        v5 = v25;
                      }
                      v21 += 88;
                    }
                    v40 = v59;
                    if (v59 >= v60)
                    {
                      v43 = std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__emplace_back_slow_path<quasar::MetaInfo::StructuredPrediction::Span>(&v58, (uint64_t)__p);
                    }
                    else
                    {
                      v41 = *(_OWORD *)__p;
                      *(_QWORD *)(v59 + 16) = *(_QWORD *)&v53[0];
                      *(_OWORD *)v40 = v41;
                      __p[1] = 0;
                      *(_QWORD *)&v53[0] = 0;
                      __p[0] = 0;
                      v42 = *((_QWORD *)&v53[1] + 1);
                      *(_OWORD *)(v40 + 24) = *(_OWORD *)((char *)v53 + 8);
                      *(_QWORD *)(v40 + 40) = v42;
                      memset((char *)v53 + 8, 0, 24);
                      *(_QWORD *)(v40 + 48) = *(_QWORD *)&v53[2];
                      *(_QWORD *)(v40 + 56) = 0;
                      *(_QWORD *)(v40 + 64) = 0;
                      *(_QWORD *)(v40 + 72) = 0;
                      *(_OWORD *)(v40 + 56) = *(_OWORD *)((char *)&v53[2] + 8);
                      *(_QWORD *)(v40 + 72) = *((_QWORD *)&v53[3] + 1);
                      memset((char *)&v53[2] + 8, 0, 24);
                      v43 = v40 + 80;
                    }
                    v59 = v43;
LABEL_69:
                    if (*((_QWORD *)&v53[2] + 1))
                    {
                      *(_QWORD *)&v53[3] = *((_QWORD *)&v53[2] + 1);
                      operator delete(*((void **)&v53[2] + 1));
                    }
                    if (SHIBYTE(v53[1]) < 0)
                      operator delete(*((void **)&v53[0] + 1));
                    if (SBYTE7(v53[0]) < 0)
                      operator delete(__p[0]);
                  }
                }
LABEL_75:
                if (v55 && SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v54.__r_.__value_.__l.__data_);
              }
              if (v57 && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
            }
            v14 += 88;
            if (v14 == v49)
              goto LABEL_82;
            continue;
          }
        }
      }
      else if (ChildOptional)
      {
        goto LABEL_21;
      }
LABEL_89:
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
LABEL_91:
      v3 += 88;
    }
    while (v3 != v48);
  }
}

void sub_1ADD75A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  uint64_t v42;

  quasar::LmePackedWord::~LmePackedWord((quasar::LmePackedWord *)&a22);
  if (a42 && a41 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v42 - 144) && *(char *)(v42 - 145) < 0)
    operator delete(*(void **)(v42 - 168));
  a16 = (void *)(v42 - 136);
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (*(char *)(v42 - 89) < 0)
    operator delete(*(void **)(v42 - 112));
  _Unwind_Resume(a1);
}

void quasar::MetaInfo::Impl::setAmbiguityAnnotatorSensesFromPTree(quasar::MetaInfo::Impl *this)
{
  uint64_t ChildOptional;
  quasar::PTree *v3;
  uint64_t v4;
  uint64_t i;
  __int128 v6;
  std::string *v7;
  std::string *v8;
  int v9;
  std::string v10;
  std::string v11;
  char v12;
  void *__p[2];
  char v14;
  char v15;
  std::string *v16;
  std::string *v17;
  unint64_t v18;

  std::string::basic_string[abi:ne180100]<0>(__p, "senses");
  ChildOptional = quasar::PTree::getChildOptional((uint64_t)this, (uint64_t)__p);
  v3 = (quasar::PTree *)ChildOptional;
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if (!v3)
      return;
  }
  else if (!ChildOptional)
  {
    return;
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v4 = quasar::PTree::begin(v3);
  for (i = quasar::PTree::end(v3); v4 != i; v4 += 88)
  {
    v9 = *(_DWORD *)(v4 + 24);
    if (*(char *)(v4 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)(v4 + 32), *(_QWORD *)(v4 + 40));
    }
    else
    {
      v6 = *(_OWORD *)(v4 + 32);
      v10.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 48);
      *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v6;
    }
    memset(&v11, 0, sizeof(v11));
    std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v11, *(_QWORD *)(v4 + 56), *(_QWORD *)(v4 + 64), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v4 + 64) - *(_QWORD *)(v4 + 56)) >> 3));
    v12 = *(_BYTE *)(v4 + 80);
    quasar::PTree::~PTree((quasar::PTree *)&v9);
    if (v15)
    {
      v7 = v17;
      if ((unint64_t)v17 >= v18)
      {
        v8 = (std::string *)std::vector<quasar::MetaInfo::Sense>::__emplace_back_slow_path<quasar::MetaInfo::Sense&>((uint64_t *)&v16, (const quasar::MetaInfo::Sense *)__p);
      }
      else
      {
        quasar::MetaInfo::Sense::Sense(v17, (const quasar::MetaInfo::Sense *)__p);
        v8 = (std::string *)((char *)v7 + 296);
      }
      v17 = v8;
      if (v15)
        quasar::MetaInfo::Sense::~Sense(__p);
    }
  }
  if (v16 != v17)
    std::optional<std::vector<quasar::MetaInfo::Sense>>::operator=[abi:ne180100]<std::vector<quasar::MetaInfo::Sense>,void>((uint64_t)this + 64, (uint64_t)&v16);
  __p[0] = &v16;
  std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1ADD75D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;

  __p = (void *)(v61 - 88);
  std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::MetaInfo::Impl::setPhrasebookSenseFromPTree(quasar::MetaInfo::Impl *this)
{
  char *v2;
  uint64_t v3;
  char *v4;
  int v5;
  std::string v6;
  std::string v7;
  char v8;
  void *v9[37];
  char v10;
  char **v11;
  char v12;
  std::string v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)this;
  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    v6 = *(std::string *)((char *)this + 8);
  memset(&v7, 0, sizeof(v7));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v7, *((_QWORD *)this + 4), *((_QWORD *)this + 5), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3));
  v8 = *((_BYTE *)this + 56);
  quasar::PTree::~PTree((quasar::PTree *)&v5);
  if (v10)
  {
    quasar::MetaInfo::Sense::Sense(&v13, (const quasar::MetaInfo::Sense *)v9);
    v2 = 0;
    v3 = 0;
    v4 = 0;
    v11 = &v2;
    v12 = 0;
    v2 = (char *)operator new(0x128uLL);
    v3 = (uint64_t)v2;
    v4 = v2 + 296;
    v3 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::MetaInfo::Sense>,quasar::MetaInfo::Sense const*,quasar::MetaInfo::Sense const*,quasar::MetaInfo::Sense*>((uint64_t)&v4, (uint64_t)&v13, (uint64_t)&v14, (uint64_t)v2);
    std::optional<std::vector<quasar::MetaInfo::Sense>>::operator=[abi:ne180100]<std::vector<quasar::MetaInfo::Sense>,void>((uint64_t)this + 64, (uint64_t)&v2);
    v11 = &v2;
    std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
    quasar::MetaInfo::Sense::~Sense((void **)&v13.__r_.__value_.__l.__data_);
    if (v10)
      quasar::MetaInfo::Sense::~Sense(v9);
  }
}

void sub_1ADD75F14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void quasar::MetaInfo::Impl::updatePTreeWithStructuredPredictions(quasar::MetaInfo::Impl *this, quasar::PTree *a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int *v6;
  unsigned int v7;
  size_t v8;
  void *v9;
  const void *v10;
  char *v11;
  char *v12;
  BOOL v13;
  char *v15;
  void *__p[2];
  char v17;
  void *v18;
  std::string v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _BYTE v24[64];
  _BYTE v25[72];

  v2 = (char *)*((_QWORD *)this + 12);
  v15 = (char *)this + 104;
  if (v2 != (char *)this + 104)
  {
    do
    {
      if (*((_QWORD *)v2 + 11) != *((_QWORD *)v2 + 12))
      {
        quasar::PTree::PTree((quasar::PTree *)v25);
        v4 = *((_QWORD *)v2 + 11);
        v3 = *((_QWORD *)v2 + 12);
        while (v4 != v3)
        {
          quasar::PTree::PTree((quasar::PTree *)v24);
          quasar::PTree::PTree(&v18, v4);
          quasar::PTree::putChild((uint64_t)v24, (uint64_t)(v2 + 56), (uint64_t)&v18, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v18);
          std::operator+<char>();
          quasar::PTree::PTree(&v18, v4 + 24);
          quasar::PTree::putChild((uint64_t)v24, (uint64_t)__p, (uint64_t)&v18, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v18);
          if (v17 < 0)
            operator delete(__p[0]);
          std::string::basic_string[abi:ne180100]<0>(__p, "source");
          quasar::MetaInfo::Impl::toPTree((int *)(v4 + 48), (quasar::PTree *)&v18);
          quasar::PTree::putChild((uint64_t)v24, (uint64_t)__p, (uint64_t)&v18, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v18);
          if (v17 < 0)
            operator delete(__p[0]);
          if (*(_QWORD *)(v4 + 56) != *(_QWORD *)(v4 + 64))
          {
            quasar::PTree::PTree((quasar::PTree *)&v18);
            v6 = *(int **)(v4 + 56);
            v5 = *(int **)(v4 + 64);
            while (v6 != v5)
            {
              quasar::MetaInfo::Impl::toPTree(v6, (quasar::PTree *)__p);
              quasar::PTree::addChild((quasar::PTree *)&v18, (const quasar::PTree *)__p);
              quasar::PTree::~PTree((quasar::PTree *)__p);
              v6 += 2;
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "projections");
            quasar::PTree::putChild((uint64_t)v24, (uint64_t)__p, (uint64_t)&v18, 1);
            if (v17 < 0)
              operator delete(__p[0]);
            quasar::PTree::~PTree((quasar::PTree *)&v18);
          }
          quasar::PTree::addChild((quasar::PTree *)v25, (const quasar::PTree *)v24);
          quasar::PTree::~PTree((quasar::PTree *)v24);
          v4 += 80;
        }
        quasar::PTree::PTree((quasar::PTree *)v24);
        std::string::basic_string[abi:ne180100]<0>(__p, "group");
        v7 = *((_DWORD *)v2 + 20);
        LODWORD(v18) = quasar::getType((quasar *)v7);
        std::to_string(&v19, v7);
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 1;
        quasar::PTree::putChild((uint64_t)v24, (uint64_t)__p, (uint64_t)&v18, 1);
        quasar::PTree::~PTree((quasar::PTree *)&v18);
        if (v17 < 0)
          operator delete(__p[0]);
        std::string::basic_string[abi:ne180100]<0>(&v18, "spans");
        quasar::PTree::putChild((uint64_t)v24, (uint64_t)&v18, (uint64_t)v25, 1);
        if (v19.__r_.__value_.__s.__data_[15] < 0)
          operator delete(v18);
        if (v2[79] >= 0)
          v8 = v2[79];
        else
          v8 = *((_QWORD *)v2 + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)&v18, v8 + 13);
        if (v19.__r_.__value_.__s.__data_[15] >= 0)
          v9 = &v18;
        else
          v9 = v18;
        if (v8)
        {
          if (v2[79] >= 0)
            v10 = v2 + 56;
          else
            v10 = (const void *)*((_QWORD *)v2 + 7);
          memmove(v9, v10, v8);
        }
        strcpy((char *)v9 + v8, "_alternatives");
        quasar::PTree::putChild((uint64_t)a2, (uint64_t)&v18, (uint64_t)v24, 1);
        if (v19.__r_.__value_.__s.__data_[15] < 0)
          operator delete(v18);
        quasar::PTree::~PTree((quasar::PTree *)v24);
        quasar::PTree::~PTree((quasar::PTree *)v25);
      }
      v11 = (char *)*((_QWORD *)v2 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (char *)*((_QWORD *)v2 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v2;
          v2 = v12;
        }
        while (!v13);
      }
      v2 = v12;
    }
    while (v12 != v15);
  }
}

void sub_1ADD76314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;

  if (a28 < 0)
    operator delete(__p);
  quasar::PTree::~PTree((quasar::PTree *)&a34);
  quasar::PTree::~PTree((quasar::PTree *)(v34 - 152));
  _Unwind_Resume(a1);
}

void quasar::MetaInfo::Impl::updatePTreeWithStructuredPredictionAlignments(quasar::MetaInfo::Impl *this, quasar::PTree *a2)
{
  char *v2;
  char *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  size_t v11;
  void **v12;
  const void *v13;
  char *v14;
  char *v15;
  int Type;
  std::string v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  void *__p[2];
  char v24;
  _BYTE v25[72];

  v2 = (char *)*((_QWORD *)this + 19);
  v3 = (char *)this + 160;
  if (v2 != (char *)this + 160)
  {
    do
    {
      if (*((_QWORD *)v2 + 7) != *((_QWORD *)v2 + 8))
      {
        quasar::PTree::PTree((quasar::PTree *)v25);
        v5 = (_QWORD *)*((_QWORD *)v2 + 7);
        v4 = (_QWORD *)*((_QWORD *)v2 + 8);
        while (v5 != v4)
        {
          quasar::PTree::PTree((quasar::PTree *)__p);
          v6 = (_QWORD *)*v5;
          if ((_QWORD *)*v5 != v5 + 1)
          {
            do
            {
              v7 = *((_DWORD *)v6 + 7);
              Type = quasar::getType((quasar *)v7);
              std::to_string(&v18, v7);
              v19 = 0;
              v20 = 0;
              v21 = 0;
              v22 = 1;
              quasar::PTree::addChild((quasar::PTree *)__p, (const quasar::PTree *)&Type);
              quasar::PTree::~PTree((quasar::PTree *)&Type);
              v8 = (_QWORD *)v6[1];
              if (v8)
              {
                do
                {
                  v9 = v8;
                  v8 = (_QWORD *)*v8;
                }
                while (v8);
              }
              else
              {
                do
                {
                  v9 = (_QWORD *)v6[2];
                  v10 = *v9 == (_QWORD)v6;
                  v6 = v9;
                }
                while (!v10);
              }
              v6 = v9;
            }
            while (v9 != v5 + 1);
          }
          quasar::PTree::addChild((quasar::PTree *)v25, (const quasar::PTree *)__p);
          quasar::PTree::~PTree((quasar::PTree *)__p);
          v5 += 3;
        }
        if (v2[55] >= 0)
          v11 = v2[55];
        else
          v11 = *((_QWORD *)v2 + 5);
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v11 + 24);
        if (v24 >= 0)
          v12 = __p;
        else
          v12 = (void **)__p[0];
        if (v11)
        {
          if (v2[55] >= 0)
            v13 = v2 + 32;
          else
            v13 = (const void *)*((_QWORD *)v2 + 4);
          memmove(v12, v13, v11);
        }
        strcpy((char *)v12 + v11, "_source_token_alignments");
        quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)v25, 1);
        if (v24 < 0)
          operator delete(__p[0]);
        quasar::PTree::~PTree((quasar::PTree *)v25);
      }
      v14 = (char *)*((_QWORD *)v2 + 1);
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = *(char **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (char *)*((_QWORD *)v2 + 2);
          v10 = *(_QWORD *)v15 == (_QWORD)v2;
          v2 = v15;
        }
        while (!v10);
      }
      v2 = v15;
    }
    while (v15 != v3);
  }
}

void sub_1ADD765F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a23 < 0)
    operator delete(__p);
  quasar::PTree::~PTree((quasar::PTree *)&a29);
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::vector<quasar::MetaInfo::Sense>>::operator=[abi:ne180100]<std::vector<quasar::MetaInfo::Sense>,void>(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 24))
  {
    std::vector<quasar::MetaInfo::Sense>::__vdeallocate((void **)a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void quasar::MetaInfo::Impl::updatePTreeWithAmbiguityAnnotatorSenses(quasar::MetaInfo::Impl *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  int v6;
  char *v7;
  quasar::MetaInfo::Impl *v8;
  std::string v9;
  _BYTE v10[64];
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  _BYTE v15[72];

  quasar::PTree::PTree((quasar::PTree *)v15);
  v2 = (char *)*((_QWORD *)this + 8);
  v3 = (char *)*((_QWORD *)this + 9);
  v8 = this;
  if (v2 != v3)
  {
    v4 = v2 + 287;
    do
    {
      quasar::PTree::PTree((quasar::PTree *)v13);
      std::string::basic_string[abi:ne180100]<0>(__p, "syn");
      quasar::PTree::PTree(v10, v4 - 287);
      quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
      quasar::PTree::~PTree((quasar::PTree *)v10);
      if (v12 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "def");
      quasar::PTree::PTree(v10, v4 - 263);
      quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
      quasar::PTree::~PTree((quasar::PTree *)v10);
      if (v12 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "defLocale");
      quasar::PTree::PTree(v10, v4 - 239);
      quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
      quasar::PTree::~PTree((quasar::PTree *)v10);
      if (v12 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "source match");
      quasar::PTree::PTree(v10, v4 - 215);
      quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
      quasar::PTree::~PTree((quasar::PTree *)v10);
      if (v12 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "source index");
      std::to_string(&v9, *(_DWORD *)(v4 - 191));
      quasar::PTree::PTree(v10, &v9);
      quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
      quasar::PTree::~PTree((quasar::PTree *)v10);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v9.__r_.__value_.__l.__data_);
      if (v12 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "source length");
      std::to_string(&v9, *(_DWORD *)(v4 - 187));
      quasar::PTree::PTree(v10, &v9);
      quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
      quasar::PTree::~PTree((quasar::PTree *)v10);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v9.__r_.__value_.__l.__data_);
      if (v12 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "target match");
      v5 = v4 - 183;
      quasar::PTree::PTree(v10, v4 - 183);
      quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
      quasar::PTree::~PTree((quasar::PTree *)v10);
      if (v12 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "target index");
      std::to_string(&v9, *(_DWORD *)(v4 - 159));
      quasar::PTree::PTree(v10, &v9);
      quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
      quasar::PTree::~PTree((quasar::PTree *)v10);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v9.__r_.__value_.__l.__data_);
      if (v12 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "target length");
      std::to_string(&v9, *(_DWORD *)(v4 - 155));
      quasar::PTree::PTree(v10, &v9);
      quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
      quasar::PTree::~PTree((quasar::PTree *)v10);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v9.__r_.__value_.__l.__data_);
      if (v12 < 0)
        operator delete(__p[0]);
      if (*(v4 - 127))
      {
        if (*(v4 - 128) < 0)
        {
          if (!*(_QWORD *)(v4 - 143))
            goto LABEL_36;
        }
        else if (!*(v4 - 128))
        {
          goto LABEL_36;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "att");
        quasar::PTree::PTree(v10, v4 - 151);
        quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
        quasar::PTree::~PTree((quasar::PTree *)v10);
        if (v12 < 0)
          operator delete(__p[0]);
      }
LABEL_36:
      if (!*(v4 - 95))
        goto LABEL_43;
      if (*(v4 - 96) < 0)
      {
        if (!*(_QWORD *)(v4 - 111))
          goto LABEL_43;
      }
      else if (!*(v4 - 96))
      {
        goto LABEL_43;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "formality");
      quasar::PTree::PTree(v10, v4 - 119);
      quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
      quasar::PTree::~PTree((quasar::PTree *)v10);
      if (v12 < 0)
        operator delete(__p[0]);
LABEL_43:
      if (!*(v4 - 63))
        goto LABEL_50;
      if (*(v4 - 64) < 0)
      {
        if (!*(_QWORD *)(v4 - 79))
          goto LABEL_50;
      }
      else if (!*(v4 - 64))
      {
        goto LABEL_50;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "gender");
      quasar::PTree::PTree(v10, v4 - 87);
      quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
      quasar::PTree::~PTree((quasar::PTree *)v10);
      if (v12 < 0)
        operator delete(__p[0]);
LABEL_50:
      if (!*(v4 - 31))
        goto LABEL_57;
      if (*(v4 - 32) < 0)
      {
        if (!*(_QWORD *)(v4 - 47))
          goto LABEL_57;
      }
      else if (!*(v4 - 32))
      {
        goto LABEL_57;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "reg");
      quasar::PTree::PTree(v10, v4 - 55);
      quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
      quasar::PTree::~PTree((quasar::PTree *)v10);
      if (v12 < 0)
        operator delete(__p[0]);
LABEL_57:
      if (v4[1])
      {
        v6 = *v4;
        if (v6 < 0)
        {
          if (*(_QWORD *)(v4 - 15) == 4)
          {
            v7 = *(char **)(v4 - 23);
LABEL_63:
            if (*(_DWORD *)v7 == 1702195828)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "explicit");
              quasar::PTree::PTree(v10, v4 - 23);
              quasar::PTree::putChild((uint64_t)v13, (uint64_t)__p, (uint64_t)v10, 1);
              quasar::PTree::~PTree((quasar::PTree *)v10);
              if (v12 < 0)
                operator delete(__p[0]);
            }
          }
        }
        else
        {
          v7 = v4 - 23;
          if (v6 == 4)
            goto LABEL_63;
        }
      }
      quasar::PTree::addChild((quasar::PTree *)v15, (const quasar::PTree *)v13);
      quasar::PTree::~PTree((quasar::PTree *)v13);
      v4 += 296;
    }
    while (v5 + 192 != v3);
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "senses");
  quasar::PTree::putChild((uint64_t)v8, (uint64_t)v13, (uint64_t)v15, 1);
  if (v14 < 0)
    operator delete(v13[0]);
  quasar::PTree::~PTree((quasar::PTree *)v15);
}

void sub_1ADD76CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a35 < 0)
    operator delete(__p);
  quasar::PTree::~PTree((quasar::PTree *)(v35 - 152));
  _Unwind_Resume(a1);
}

void quasar::`anonymous namespace'::getSenseFromPTree(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  std::string::size_type v4;
  void *v5[2];
  char v6;
  std::string v7;
  char v8;
  std::string __str;
  std::string v10;
  std::string v11;
  std::string v12;
  std::string __p[2];
  __int128 v14;
  std::string::size_type v15;
  std::string v16;
  int v17;
  int v18;
  std::string v19;
  int v20;
  int v21;
  _BYTE v22[32];
  _BYTE v23[32];
  _BYTE v24[32];
  _BYTE v25[32];
  _BYTE v26[40];
  std::string v27;
  char v28;
  std::string v29;
  char v30;
  std::string v31;
  char v32;

  std::string::basic_string[abi:ne180100]<0>(__p, "syn");
  quasar::PTree::getStringOptional(a1, (uint64_t)__p, &v31);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "def");
  quasar::PTree::getStringOptional(a1, (uint64_t)__p, &v29);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "defLocale");
  quasar::PTree::getStringOptional(a1, (uint64_t)__p, &v27);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (v32 || v30 || v28)
  {
    std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((uint64_t)&v31, "", &v12);
    std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((uint64_t)&v29, "", &v11);
    std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>((uint64_t)&v27, "", &v10);
    __p[0] = v12;
    __p[1] = v11;
    memset(&v11, 0, sizeof(v11));
    memset(&v12, 0, sizeof(v12));
    v4 = v10.__r_.__value_.__r.__words[2];
    v14 = *(_OWORD *)&v10.__r_.__value_.__l.__data_;
    memset(&v10, 0, sizeof(v10));
    v15 = v4;
    memset(&v16, 0, sizeof(v16));
    memset(&v19, 0, sizeof(v19));
    v22[0] = 0;
    v22[24] = 0;
    v23[0] = 0;
    v23[24] = 0;
    v24[0] = 0;
    v24[24] = 0;
    v25[0] = 0;
    v25[24] = 0;
    v26[0] = 0;
    v26[24] = 0;
    std::string::basic_string[abi:ne180100]<0>(v5, "source match");
    quasar::PTree::getStringOptional(a1, (uint64_t)v5, &v7);
    if (v8)
    {
      __str = v7;
      memset(&v7, 0, sizeof(v7));
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "");
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    v16 = __str;
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
    __str.__r_.__value_.__s.__data_[0] = 0;
    if (v8 && SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
    if (v6 < 0)
      operator delete(v5[0]);
    std::string::basic_string[abi:ne180100]<0>(v5, "source index");
    quasar::PTree::getStringOptional(a1, (uint64_t)v5, &v7);
    if (v8)
    {
      __str = v7;
      memset(&v7, 0, sizeof(v7));
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "0");
    }
    v17 = std::stoi(&__str, 0, 10);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (v8 && SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
    if (v6 < 0)
      operator delete(v5[0]);
    std::string::basic_string[abi:ne180100]<0>(v5, "source length");
    quasar::PTree::getStringOptional(a1, (uint64_t)v5, &v7);
    if (v8)
    {
      __str = v7;
      memset(&v7, 0, sizeof(v7));
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "0");
    }
    v18 = std::stoi(&__str, 0, 10);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (v8 && SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
    if (v6 < 0)
      operator delete(v5[0]);
    std::string::basic_string[abi:ne180100]<0>(v5, "target match");
    quasar::PTree::getStringOptional(a1, (uint64_t)v5, &v7);
    if (v8)
    {
      __str = v7;
      memset(&v7, 0, sizeof(v7));
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "");
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    v19 = __str;
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = 0;
    __str.__r_.__value_.__s.__data_[0] = 0;
    if (v8 && SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
    if (v6 < 0)
      operator delete(v5[0]);
    std::string::basic_string[abi:ne180100]<0>(v5, "target index");
    quasar::PTree::getStringOptional(a1, (uint64_t)v5, &v7);
    if (v8)
    {
      __str = v7;
      memset(&v7, 0, sizeof(v7));
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "0");
    }
    v20 = std::stoi(&__str, 0, 10);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (v8 && SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
    if (v6 < 0)
      operator delete(v5[0]);
    std::string::basic_string[abi:ne180100]<0>(v5, "target length");
    quasar::PTree::getStringOptional(a1, (uint64_t)v5, &v7);
    if (v8)
    {
      __str = v7;
      memset(&v7, 0, sizeof(v7));
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "0");
    }
    v21 = std::stoi(&__str, 0, 10);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (v8 && SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
    if (v6 < 0)
      operator delete(v5[0]);
    std::string::basic_string[abi:ne180100]<0>(&__str, "att");
    quasar::PTree::getStringOptional(a1, (uint64_t)&__str, &v7);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v22, (__n128 *)&v7);
    if (v8 && SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__str, "formality");
    quasar::PTree::getStringOptional(a1, (uint64_t)&__str, &v7);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v23, (__n128 *)&v7);
    if (v8 && SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__str, "gender");
    quasar::PTree::getStringOptional(a1, (uint64_t)&__str, &v7);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v24, (__n128 *)&v7);
    if (v8 && SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__str, "reg");
    quasar::PTree::getStringOptional(a1, (uint64_t)&__str, &v7);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v25, (__n128 *)&v7);
    if (v8 && SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&__str, "explicit");
    quasar::PTree::getStringOptional(a1, (uint64_t)&__str, &v7);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)v26, (__n128 *)&v7);
    if (v8 && SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    std::__optional_destruct_base<quasar::MetaInfo::Sense,false>::__optional_destruct_base[abi:ne180100]<quasar::MetaInfo::Sense>((uint64_t)a2, (__int128 *)__p);
    quasar::MetaInfo::Sense::~Sense((void **)&__p[0].__r_.__value_.__l.__data_);
    if (v28 && SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
  }
  else
  {
    *a2 = 0;
    a2[296] = 0;
  }
  if (v30 && SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (v32)
  {
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
  }
}

void sub_1ADD7759C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  uint64_t v38;

  if (a22 && a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  quasar::MetaInfo::Sense::~Sense(&a38);
  if (*(_BYTE *)(v38 - 120) && *(char *)(v38 - 121) < 0)
    operator delete(*(void **)(v38 - 144));
  if (*(_BYTE *)(v38 - 88) && *(char *)(v38 - 89) < 0)
    operator delete(*(void **)(v38 - 112));
  if (*(_BYTE *)(v38 - 56))
  {
    if (*(char *)(v38 - 57) < 0)
      operator delete(*(void **)(v38 - 80));
  }
  _Unwind_Resume(a1);
}

void sub_1ADD776DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a28 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  JUMPOUT(0x1ADD7768CLL);
}

void sub_1ADD7770C()
{
  JUMPOUT(0x1ADD7768CLL);
}

void sub_1ADD77714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    JUMPOUT(0x1ADD776A0);
  JUMPOUT(0x1ADD776A4);
}

void sub_1ADD77728()
{
  JUMPOUT(0x1ADD776A4);
}

void sub_1ADD77730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    JUMPOUT(0x1ADD776B8);
  JUMPOUT(0x1ADD776BCLL);
}

void sub_1ADD77744()
{
  JUMPOUT(0x1ADD776BCLL);
}

void sub_1ADD7774C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    JUMPOUT(0x1ADD776D0);
  JUMPOUT(0x1ADD776D4);
}

void quasar::MetaInfo::Impl::toPTree(int *a1@<X0>, quasar::PTree *a2@<X8>)
{
  std::string __p;
  _BYTE v5[64];
  void *v6[2];
  char v7;

  quasar::PTree::PTree(a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "start");
  std::to_string(&__p, *a1);
  quasar::PTree::PTree(v5, &__p);
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v6, (uint64_t)v5, 1);
  quasar::PTree::~PTree((quasar::PTree *)v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "end");
  std::to_string(&__p, a1[1]);
  quasar::PTree::PTree(v5, &__p);
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v6, (uint64_t)v5, 1);
  quasar::PTree::~PTree((quasar::PTree *)v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADD77858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  quasar::PTree *v15;
  uint64_t v16;

  quasar::PTree::~PTree((quasar::PTree *)&a15);
  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v16 - 17) < 0)
    operator delete(*(void **)(v16 - 40));
  quasar::PTree::~PTree(v15);
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::vector<quasar::AlternativeSelectionSpan>>::operator=[abi:ne180100]<std::vector<quasar::AlternativeSelectionSpan>,void>(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 24))
  {
    std::vector<quasar::AlternativeSelectionSpan>::__vdeallocate((void **)a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

BOOL quasar::operator<(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 1;
  if (*a2 >= *a1)
    return a1[1] < a2[1];
  return 0;
}

void quasar::MetaInfo::Impl::~Impl(quasar::MetaInfo::Impl *this)
{
  void **v2;

  std::__tree<std::__value_type<std::string,std::vector<std::set<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<int>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<int>>>>>::destroy((uint64_t)this + 152, *((_QWORD **)this + 20));
  if (*((_BYTE *)this + 144))
  {
    v2 = (void **)((char *)this + 120);
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  }
  std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::destroy((uint64_t)this + 96, *((_QWORD **)this + 13));
  if (*((_BYTE *)this + 88))
  {
    v2 = (void **)((char *)this + 64);
    std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100](&v2);
  }
  quasar::PTree::~PTree(this);
}

void std::__tree<std::__value_type<std::string,std::vector<std::set<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<int>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<int>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::set<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<int>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<int>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::set<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<int>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<int>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::set<int>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::set<int>>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::MetaInfo::StructuredPrediction>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::MetaInfo::StructuredPrediction>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 56);
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__optional_storage_base<std::vector<quasar::MetaInfo::Sense>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::vector<quasar::MetaInfo::Sense>,false> const&>(uint64_t a1, uint64_t a2)
{
  void **v3;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 24))
        std::vector<quasar::MetaInfo::Sense>::__assign_with_size[abi:ne180100]<quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*>(a1, *(std::string **)a2, *(std::string **)(a2 + 8), 0x14C1BACF914C1BADLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v3 = (void **)a1;
    std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100](&v3);
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    std::vector<quasar::MetaInfo::Sense>::__init_with_size[abi:ne180100]<quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*>((_QWORD *)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0x14C1BACF914C1BADLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void std::vector<quasar::MetaInfo::Sense>::__assign_with_size[abi:ne180100]<quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*>(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0x14C1BACF914C1BADLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<quasar::MetaInfo::Sense>::__vdeallocate((void **)a1);
    if (a4 > 0xDD67C8A60DD67CLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x2983759F2298375ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x14C1BACF914C1BADLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)) >= 0x6EB3E45306EB3ELL)
      v11 = 0xDD67C8A60DD67CLL;
    else
      v11 = v10;
    std::vector<quasar::MetaInfo::Sense>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::MetaInfo::Sense>,quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*>(v8, (uint64_t)__str, (uint64_t)a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x14C1BACF914C1BADLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::MetaInfo::Sense *,quasar::MetaInfo::Sense *,quasar::MetaInfo::Sense *>((int)&v17, __str, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::MetaInfo::Sense>,quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*>(v8, (uint64_t)v13, (uint64_t)a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::MetaInfo::Sense *,quasar::MetaInfo::Sense *,quasar::MetaInfo::Sense *>((int)&v18, __str, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
      quasar::MetaInfo::Sense::~Sense((void **)(v16 - 296));
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1ADD77DC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADD77DCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<quasar::MetaInfo::Sense>::__vdeallocate(void **a1)
{
  void **v1;
  void **v3;
  void *v4;

  v1 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        quasar::MetaInfo::Sense::~Sense(v3 - 37);
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<quasar::MetaInfo::Sense>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xDD67C8A60DD67DLL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::Sense>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[296 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::MetaInfo::Sense>,quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      quasar::MetaInfo::Sense::Sense((std::string *)(a4 + v7), (const quasar::MetaInfo::Sense *)(a2 + v7));
      v7 += 296;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1ADD77EE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 296;
    do
    {
      quasar::MetaInfo::Sense::~Sense((void **)(v4 + v2));
      v2 -= 296;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::MetaInfo::Sense *,quasar::MetaInfo::Sense *,quasar::MetaInfo::Sense *>(int a1, std::string *__str, std::string *a3, std::string *this)
{
  std::string *v5;
  std::string *v6;

  v5 = __str;
  if (__str == a3)
    return __str;
  v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    std::string::operator=(this + 1, v5 + 1);
    std::string::operator=(this + 2, v5 + 2);
    std::string::operator=(this + 3, v5 + 3);
    this[4].__r_.__value_.__r.__words[0] = v5[4].__r_.__value_.__r.__words[0];
    std::string::operator=((std::string *)((char *)this + 104), (std::string *)((char *)v5 + 104));
    this[5].__r_.__value_.__l.__size_ = v5[5].__r_.__value_.__l.__size_;
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)((char *)this + 136), (std::string *)((char *)v5 + 136));
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(this + 7, v5 + 7);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)((char *)this + 200), (std::string *)((char *)v5 + 200));
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)((char *)this + 232), (std::string *)((char *)v5 + 232));
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(this + 11, v5 + 11);
    this = (std::string *)((char *)this + 296);
    v5 = (std::string *)((char *)v5 + 296);
  }
  while (v5 != v6);
  return v6;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::Sense>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xDD67C8A60DD67DLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(296 * a2);
}

_QWORD *std::vector<quasar::MetaInfo::Sense>::__init_with_size[abi:ne180100]<quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::MetaInfo::Sense>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::MetaInfo::Sense>,quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADD7808C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        quasar::MetaInfo::Sense::~Sense(v4 - 37);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 80;
        std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::optional<std::string>::value_or[abi:ne180100]<char const(&)[1]>(uint64_t a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, a2);
  }
}

uint64_t std::__optional_destruct_base<quasar::MetaInfo::Sense,false>::__optional_destruct_base[abi:ne180100]<quasar::MetaInfo::Sense>(uint64_t result, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  *(_QWORD *)(result + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)result = v2;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v3 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(result + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(result + 24) = v3;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v4 = a2[3];
  *(_QWORD *)(result + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)(result + 48) = v4;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 6) = 0;
  v5 = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(result + 88) = *((_QWORD *)a2 + 11);
  *(_OWORD *)(result + 72) = v5;
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 11) = 0;
  *(_QWORD *)(result + 96) = *((_QWORD *)a2 + 12);
  v6 = *(__int128 *)((char *)a2 + 104);
  *(_QWORD *)(result + 120) = *((_QWORD *)a2 + 15);
  *(_OWORD *)(result + 104) = v6;
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 13) = 0;
  v7 = *((_QWORD *)a2 + 16);
  *(_BYTE *)(result + 136) = 0;
  *(_QWORD *)(result + 128) = v7;
  *(_BYTE *)(result + 160) = 0;
  if (*((_BYTE *)a2 + 160))
  {
    v8 = *(__int128 *)((char *)a2 + 136);
    *(_QWORD *)(result + 152) = *((_QWORD *)a2 + 19);
    *(_OWORD *)(result + 136) = v8;
    *((_QWORD *)a2 + 18) = 0;
    *((_QWORD *)a2 + 19) = 0;
    *((_QWORD *)a2 + 17) = 0;
    *(_BYTE *)(result + 160) = 1;
  }
  *(_BYTE *)(result + 168) = 0;
  *(_BYTE *)(result + 192) = 0;
  if (*((_BYTE *)a2 + 192))
  {
    v9 = *(__int128 *)((char *)a2 + 168);
    *(_QWORD *)(result + 184) = *((_QWORD *)a2 + 23);
    *(_OWORD *)(result + 168) = v9;
    *((_QWORD *)a2 + 22) = 0;
    *((_QWORD *)a2 + 23) = 0;
    *((_QWORD *)a2 + 21) = 0;
    *(_BYTE *)(result + 192) = 1;
  }
  *(_BYTE *)(result + 200) = 0;
  *(_BYTE *)(result + 224) = 0;
  if (*((_BYTE *)a2 + 224))
  {
    v10 = *(__int128 *)((char *)a2 + 200);
    *(_QWORD *)(result + 216) = *((_QWORD *)a2 + 27);
    *(_OWORD *)(result + 200) = v10;
    *((_QWORD *)a2 + 26) = 0;
    *((_QWORD *)a2 + 27) = 0;
    *((_QWORD *)a2 + 25) = 0;
    *(_BYTE *)(result + 224) = 1;
  }
  *(_BYTE *)(result + 232) = 0;
  *(_BYTE *)(result + 256) = 0;
  if (*((_BYTE *)a2 + 256))
  {
    v11 = *(__int128 *)((char *)a2 + 232);
    *(_QWORD *)(result + 248) = *((_QWORD *)a2 + 31);
    *(_OWORD *)(result + 232) = v11;
    *((_QWORD *)a2 + 30) = 0;
    *((_QWORD *)a2 + 31) = 0;
    *((_QWORD *)a2 + 29) = 0;
    *(_BYTE *)(result + 256) = 1;
  }
  *(_BYTE *)(result + 264) = 0;
  *(_BYTE *)(result + 288) = 0;
  if (*((_BYTE *)a2 + 288))
  {
    v12 = *(__int128 *)((char *)a2 + 264);
    *(_QWORD *)(result + 280) = *((_QWORD *)a2 + 35);
    *(_OWORD *)(result + 264) = v12;
    *((_QWORD *)a2 + 34) = 0;
    *((_QWORD *)a2 + 35) = 0;
    *((_QWORD *)a2 + 33) = 0;
    *(_BYTE *)(result + 288) = 1;
  }
  *(_BYTE *)(result + 296) = 1;
  return result;
}

std::string *quasar::MetaInfo::Sense::Sense(std::string *this, const quasar::MetaInfo::Sense *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  this[4].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 12);
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 104), *((const std::string::value_type **)a2 + 13), *((_QWORD *)a2 + 14));
  }
  else
  {
    v8 = *(_OWORD *)((char *)a2 + 104);
    this[5].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 15);
    *(_OWORD *)&this[4].__r_.__value_.__r.__words[1] = v8;
  }
  this[5].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 16);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 136), (__int128 *)((char *)a2 + 136));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this + 7, (__int128 *)((char *)a2 + 168));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 200), (__int128 *)((char *)a2 + 200));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 232), (__int128 *)((char *)a2 + 232));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this + 11, (__int128 *)((char *)a2 + 264));
  return this;
}

void sub_1ADD784E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void quasar::MetaInfo::Sense::~Sense(void **this)
{
  if (*((_BYTE *)this + 288) && *((char *)this + 287) < 0)
    operator delete(this[33]);
  if (*((_BYTE *)this + 256) && *((char *)this + 255) < 0)
    operator delete(this[29]);
  if (*((_BYTE *)this + 224) && *((char *)this + 223) < 0)
    operator delete(this[25]);
  if (*((_BYTE *)this + 192) && *((char *)this + 191) < 0)
    operator delete(this[21]);
  if (*((_BYTE *)this + 160) && *((char *)this + 159) < 0)
    operator delete(this[17]);
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

quasar::MetaInfo::Impl *std::unique_ptr<quasar::MetaInfo::Impl>::reset[abi:ne180100](quasar::MetaInfo::Impl **a1, quasar::MetaInfo::Impl *a2)
{
  quasar::MetaInfo::Impl *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::MetaInfo::Impl::~Impl(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

uint64_t quasar::MetaInfo::Impl::Impl(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  char v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)(a1 + 32), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
  v5 = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 56) = v5;
  *(_BYTE *)(a1 + 88) = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_BYTE *)(a1 + 88) = 1;
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v6 = (_QWORD *)(a2 + 104);
  v7 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v7;
  v8 = a1 + 104;
  v9 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 112) = v9;
  if (v9)
  {
    *(_QWORD *)(v7 + 16) = v8;
    *(_QWORD *)(a2 + 96) = v6;
    *v6 = 0;
    *(_QWORD *)(a2 + 112) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 96) = v8;
  }
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  if (*(_BYTE *)(a2 + 144))
  {
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    *(_BYTE *)(a1 + 144) = 1;
  }
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  v10 = (_QWORD *)(a2 + 160);
  v11 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 160) = v11;
  v12 = a1 + 160;
  v13 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 168) = v13;
  if (v13)
  {
    *(_QWORD *)(v11 + 16) = v12;
    *(_QWORD *)(a2 + 152) = v10;
    *v10 = 0;
    *(_QWORD *)(a2 + 168) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 152) = v12;
  }
  return a1;
}

void sub_1ADD78888(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

quasar::MetaInfo::Impl *quasar::MetaInfo::Impl::Impl(quasar::MetaInfo::Impl *this, const quasar::MetaInfo::Impl *a2)
{
  __int128 v4;

  *(_DWORD *)this = *(_DWORD *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)((char *)this + 32), *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3));
  *((_BYTE *)this + 56) = *((_BYTE *)a2 + 56);
  std::__optional_copy_base<std::vector<quasar::MetaInfo::Sense>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 64, (uint64_t)a2 + 64);
  std::map<std::string,quasar::MetaInfo::StructuredPrediction>::map[abi:ne180100]((uint64_t *)this + 12, (const void ***)a2 + 12);
  std::__optional_copy_base<std::vector<quasar::AlternativeSelectionSpan>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 120, (uint64_t)a2 + 120);
  std::map<std::string,std::vector<std::set<int>>>::map[abi:ne180100]((uint64_t *)this + 19, (const void ***)a2 + 19);
  return this;
}

void sub_1ADD7898C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  if (*(_BYTE *)(v2 + 144))
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::destroy(v3, *(_QWORD **)(v2 + 104));
  if (*(_BYTE *)(v2 + 88))
    std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  quasar::PTree::~PTree((quasar::PTree *)v2);
  _Unwind_Resume(a1);
}

void sub_1ADD789EC()
{
  uint64_t v0;
  void **v1;

  if (*(char *)(v0 + 31) < 0)
    operator delete(*v1);
  JUMPOUT(0x1ADD789E4);
}

uint64_t std::__optional_copy_base<std::vector<quasar::MetaInfo::Sense>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  std::__optional_storage_base<std::vector<quasar::MetaInfo::Sense>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<quasar::MetaInfo::Sense>,false> const&>((_QWORD *)a1, a2);
  return a1;
}

void sub_1ADD78A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (*(_BYTE *)(v10 + 24))
  {
    a10 = v10;
    std::vector<quasar::MetaInfo::Sense>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__optional_storage_base<std::vector<quasar::MetaInfo::Sense>,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::vector<quasar::MetaInfo::Sense>,false> const&>(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;

  if (*(_BYTE *)(a2 + 24))
  {
    v2 = result;
    *result = 0;
    result[1] = 0;
    result[2] = 0;
    result = std::vector<quasar::MetaInfo::Sense>::__init_with_size[abi:ne180100]<quasar::MetaInfo::Sense*,quasar::MetaInfo::Sense*>(result, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0x14C1BACF914C1BADLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    *((_BYTE *)v2 + 24) = 1;
  }
  return result;
}

uint64_t *std::map<std::string,quasar::MetaInfo::StructuredPrediction>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,quasar::MetaInfo::StructuredPrediction>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1ADD78AF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,quasar::MetaInfo::StructuredPrediction>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,quasar::MetaInfo::StructuredPrediction> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,quasar::MetaInfo::StructuredPrediction> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__construct_node<std::pair<std::string const,quasar::MetaInfo::StructuredPrediction> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__construct_node<std::pair<std::string const,quasar::MetaInfo::StructuredPrediction> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x70uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,quasar::MetaInfo::StructuredPrediction>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1ADD78C70(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,quasar::MetaInfo::StructuredPrediction>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  int v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  v6 = *((_DWORD *)a2 + 12);
  this[2].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[2].__r_.__value_.__l.__data_) = v6;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__init_with_size[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*>((std::string *)((char *)this + 56), *((__int128 **)a2 + 7), *((__int128 **)a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 4));
  return this;
}

void sub_1ADD78D3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::MetaInfo::StructuredPrediction>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *std::map<std::string,std::vector<std::set<int>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::vector<std::set<int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::set<int>>>,std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_1ADD78DF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::vector<std::set<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<int>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<int>>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::vector<std::set<int>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::set<int>>>,std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<std::string,std::vector<std::set<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<int>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<int>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::set<int>>> const&>(v5, v6, v4 + 4, (__int128 *)v4 + 2);
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::set<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<int>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<int>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::set<int>>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4)
{
  const void **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;
  const void **v12;

  v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::vector<std::set<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<int>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<int>>>>>::__construct_node<std::pair<std::string const,std::vector<std::set<int>>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::vector<std::set<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<int>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<int>>>>>::__construct_node<std::pair<std::string const,std::vector<std::set<int>>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::string const,std::vector<std::set<int>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1ADD78F70(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<std::set<int>>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::set<int>>::__init_with_size[abi:ne180100]<std::set<int>*,std::set<int>*>((uint64_t *)&this[1], *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  return this;
}

void sub_1ADD78FFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<std::set<int>>::__init_with_size[abi:ne180100]<std::set<int>*,std::set<int>*>(uint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::set<int>>,std::set<int>*,std::set<int>*,std::set<int>*>((uint64_t)(v6 + 2), a2, a3, (uint64_t *)v6[1]);
    v6[1] = (uint64_t)result;
  }
  return result;
}

void sub_1ADD7907C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::set<int>>,std::set<int>*,std::set<int>*,std::set<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t *v10;
  uint64_t *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::set<int>::set[abi:ne180100](v4, v6);
      v6 += 24;
      v4 = v11 + 3;
      v11 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<int>>,std::set<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADD79128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<int>>,std::set<int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<int>>,std::set<int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::set<int>>,std::set<int>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::set<int>>,std::set<int>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    do
    {
      v3 = v1 - 24;
      std::__tree<int>::destroy(v1 - 24, *(_QWORD **)(v1 - 16));
      v1 = v3;
    }
    while (v3 != v2);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::set<int>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t **std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **leaf_high;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          std::pair<std::string &,quasar::MetaInfo::StructuredPrediction &>::operator=[abi:ne180100]<std::string const,quasar::MetaInfo::StructuredPrediction,(void *)0>((uint64_t)v18, (uint64_t)(v9 + 2));
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v5, v18[0], leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__emplace_multi<std::pair<std::string const,quasar::MetaInfo::StructuredPrediction> const&>(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1ADD79374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,quasar::MetaInfo::StructuredPrediction &>::operator=[abi:ne180100]<std::string const,quasar::MetaInfo::StructuredPrediction,(void *)0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  v4 = *(_QWORD *)(a1 + 8);
  std::string::operator=((std::string *)v4, (const std::string *)(a2 + 24));
  *(_DWORD *)(v4 + 24) = *(_DWORD *)(a2 + 48);
  if (v4 != a2 + 24)
    std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__assign_with_size[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*>(v4 + 32, *(std::string **)(a2 + 56), *(__int128 **)(a2 + 64), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 4));
  return a1;
}

void std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__assign_with_size[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*>(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__vdeallocate((void **)a1);
    if (a4 > 0x333333333333333)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) >= 0x199999999999999)
      v11 = 0x333333333333333;
    else
      v11 = v10;
    std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*>(v8, (__int128 *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4) < a4)
  {
    v13 = (std::string *)((char *)__str + 16 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span *,quasar::MetaInfo::StructuredPrediction::Span *,quasar::MetaInfo::StructuredPrediction::Span *>((int)&v17, __str, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>,quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*>(v8, (__int128 *)v13, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span *,quasar::MetaInfo::StructuredPrediction::Span *,quasar::MetaInfo::StructuredPrediction::Span *>((int)&v18, __str, (std::string *)a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 80;
      std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::destroy[abi:ne180100](v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1ADD79570(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADD79578(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span *,quasar::MetaInfo::StructuredPrediction::Span *,quasar::MetaInfo::StructuredPrediction::Span *>(int a1, std::string *__str, std::string *a3, std::string *this)
{
  std::string *v5;
  std::string *v6;

  v5 = __str;
  if (__str == a3)
    return __str;
  v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    std::string::operator=(this + 1, v5 + 1);
    this[2].__r_.__value_.__r.__words[0] = v5[2].__r_.__value_.__r.__words[0];
    if (this != v5)
      std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(&this[2].__r_.__value_.__s.__data_[8], (char *)v5[2].__r_.__value_.__l.__size_, v5[2].__r_.__value_.__r.__words[2], (uint64_t)(v5[2].__r_.__value_.__r.__words[2] - v5[2].__r_.__value_.__l.__size_) >> 3);
    this = (std::string *)((char *)this + 80);
    v5 = (std::string *)((char *)v5 + 80);
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__emplace_multi<std::pair<std::string const,quasar::MetaInfo::StructuredPrediction> const&>(uint64_t **a1, __int128 *a2)
{
  uint64_t **leaf_high;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__construct_node<std::pair<std::string const,quasar::MetaInfo::StructuredPrediction> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_1ADD796CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__emplace_back_slow_path<quasar::MetaInfo::StructuredPrediction::Span>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v17[5];

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x199999999999999)
    v9 = 0x333333333333333;
  else
    v9 = v5;
  v17[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>(v7, v9);
  v11 = &v10[80 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v17[3] = &v10[80 * v12];
  v13 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = v13;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v11 + 5) = v14;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *((_QWORD *)v11 + 7) = 0;
  *((_QWORD *)v11 + 8) = 0;
  *((_QWORD *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v11 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v17[2] = v11 + 80;
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__swap_out_circular_buffer(a1, v17);
  v15 = a1[1];
  std::__split_buffer<quasar::MetaInfo::StructuredPrediction::Span>::~__split_buffer(v17);
  return v15;
}

void sub_1ADD7980C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::MetaInfo::StructuredPrediction::Span>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::string&,int &&,std::vector<quasar::MetaInfo::StructuredPrediction::Span> &>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4, __int128 *a5)
{
  uint64_t **v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v12[3];
  uint64_t v13;

  v8 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v13, a2);
  v9 = *v8;
  if (!*v8)
  {
    v10 = v8;
    std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::string&,int &&,std::vector<quasar::MetaInfo::StructuredPrediction::Span> &>>((uint64_t)a1, a4, a5, (uint64_t)v12);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v13, v10, v12[0]);
    v9 = v12[0];
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v9;
}

std::string *std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::string&,int &&,std::vector<quasar::MetaInfo::StructuredPrediction::Span> &>>@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, __int128 *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  __int128 *v9;
  std::string *result;
  __int128 v11;
  uint64_t v12;
  __int128 *v13;

  v7 = a1 + 8;
  v8 = (char *)operator new(0x70uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  v9 = *a2;
  v11 = *a3;
  v12 = *((_QWORD *)a3 + 2);
  v13 = v9;
  result = std::pair<std::string const,quasar::MetaInfo::StructuredPrediction>::pair[abi:ne180100]<std::string const&,std::string&,int &&,std::vector<quasar::MetaInfo::StructuredPrediction::Span> &,0ul,0ul,1ul,2ul>((std::string *)(v8 + 32), &v13, (__int128 **)&v11);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1ADD7993C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,quasar::MetaInfo::StructuredPrediction>::pair[abi:ne180100]<std::string const&,std::string&,int &&,std::vector<quasar::MetaInfo::StructuredPrediction::Span> &,0ul,0ul,1ul,2ul>(std::string *this, __int128 **a2, __int128 **a3)
{
  __int128 *v5;
  __int128 v6;
  __int128 *v7;
  __int128 v8;
  __int128 **v9;
  int v10;
  std::string v12;
  std::string v13;
  std::string *v14;

  v5 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *v5;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  v7 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
  }
  else
  {
    v8 = *v7;
    v13.__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
  }
  v9 = (__int128 **)a3[2];
  v10 = *(_DWORD *)a3[1];
  memset(&v12, 0, sizeof(v12));
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__init_with_size[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span*,quasar::MetaInfo::StructuredPrediction::Span*>(&v12, *v9, v9[1], 0xCCCCCCCCCCCCCCCDLL * (v9[1] - *v9));
  this[1] = v13;
  memset(&v13, 0, sizeof(v13));
  LODWORD(this[2].__r_.__value_.__l.__data_) = v10;
  *(std::string *)((char *)this + 56) = v12;
  memset(&v12, 0, sizeof(v12));
  v14 = &v12;
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return this;
}

void sub_1ADD79A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (*(char *)(v18 + 23) < 0)
    operator delete(*(void **)v18);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__emplace_hint_unique_key_args<std::string,std::string&,quasar::MetaInfo::StructuredPrediction>(uint64_t **a1, uint64_t *a2, const void **a3, __int128 *a4, __int128 *a5)
{
  const void **v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v12[3];
  uint64_t v13;
  const void **v14;

  v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v14, &v13, a3);
  v9 = (uint64_t *)*v8;
  if (!*v8)
  {
    v10 = (uint64_t **)v8;
    std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__construct_node<std::string&,quasar::MetaInfo::StructuredPrediction>((uint64_t)a1, a4, a5, (uint64_t)v12);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v14, v10, v12[0]);
    v9 = v12[0];
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v9;
}

std::string *std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__construct_node<std::string&,quasar::MetaInfo::StructuredPrediction>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 8;
  v8 = (char *)operator new(0x70uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = std::pair<std::string const,quasar::MetaInfo::StructuredPrediction>::pair[abi:ne180100]<std::string&,quasar::MetaInfo::StructuredPrediction,0>((std::string *)(v8 + 32), a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1ADD79B98(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,quasar::MetaInfo::StructuredPrediction>::pair[abi:ne180100]<std::string&,quasar::MetaInfo::StructuredPrediction,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *a3;
  this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  LODWORD(this[2].__r_.__value_.__l.__data_) = *((_DWORD *)a3 + 6);
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = a3[2];
  this[3].__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
  *((_QWORD *)a3 + 4) = 0;
  *((_QWORD *)a3 + 5) = 0;
  *((_QWORD *)a3 + 6) = 0;
  return this;
}

uint64_t std::__tree<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::MetaInfo::StructuredPrediction>>>::__count_multi<std::string_view>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return 0;
  v5 = a1 + 16;
  while ((std::less<void>::operator()[abi:ne180100]<std::string_view const&,std::string const&>(v5, a2, (const void **)v3 + 4) & 1) != 0)
  {
    v2 = v3;
LABEL_7:
    v3 = (uint64_t *)*v3;
    if (!v3)
      return 0;
  }
  if (std::less<void>::operator()[abi:ne180100]<std::string const&,std::string_view const&>(v5, (const void **)v3 + 4, a2))
  {
    ++v3;
    goto LABEL_7;
  }
  v7 = *v3;
  v8 = v3;
  if (*v3)
  {
    v8 = v3;
    do
    {
      v9 = std::less<void>::operator()[abi:ne180100]<std::string const&,std::string_view const&>(v5, (const void **)(v7 + 32), a2);
      v10 = (uint64_t *)(v7 + 8);
      if (!v9)
      {
        v10 = (uint64_t *)v7;
        v8 = (_QWORD *)v7;
      }
      v7 = *v10;
    }
    while (*v10);
  }
  v11 = v3[1];
  if (v11)
  {
    do
    {
      v12 = std::less<void>::operator()[abi:ne180100]<std::string_view const&,std::string const&>(v5, a2, (const void **)(v11 + 32));
      v13 = (uint64_t *)(v11 + 8);
      if (v12)
      {
        v13 = (uint64_t *)v11;
        v2 = (_QWORD *)v11;
      }
      v11 = *v13;
    }
    while (*v13);
  }
  if (v8 == v2)
    return 0;
  result = 0;
  do
  {
    v14 = (_QWORD *)v8[1];
    if (v14)
    {
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      do
      {
        v15 = (_QWORD *)v8[2];
        v16 = *v15 == (_QWORD)v8;
        v8 = v15;
      }
      while (!v16);
    }
    ++result;
    v8 = v15;
  }
  while (v15 != v2);
  return result;
}

void std::vector<std::set<int>>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 24;
        std::__tree<int>::destroy((uint64_t)(v3 - 24), *((_QWORD **)v3 - 2));
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::set<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<int>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<int>>>>>::__emplace_hint_unique_impl<std::string_view &,std::vector<std::set<int>>>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v9;
  const void **v10;
  uint64_t *v11[3];

  std::__tree<std::__value_type<std::string,std::vector<std::set<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<int>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<int>>>>>::__construct_node<std::string_view &,std::vector<std::set<int>>>((uint64_t)a1, a3, a4, (uint64_t)v11);
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>(a1, a2, &v10, &v9, (const void **)v11[0] + 4);
  v7 = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v6, v11[0]);
    v7 = v11[0];
    v11[0] = 0;
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  return v7;
}

void sub_1ADD79E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<std::string,std::vector<std::set<int>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<int>>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<int>>>>>::__construct_node<std::string_view &,std::vector<std::set<int>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  char *result;

  v7 = a1 + 8;
  v8 = (char *)operator new(0x50uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = std::pair<std::string const,std::vector<std::set<int>>>::pair[abi:ne180100]<std::string_view &,std::vector<std::set<int>>,0>(v8 + 32, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1ADD79ED4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::set<int>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

char *std::pair<std::string const,std::vector<std::set<int>>>::pair[abi:ne180100]<std::string_view &,std::vector<std::set<int>>,0>(char *__dst, uint64_t a2, uint64_t a3)
{
  size_t v4;
  const void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = *(const void **)a2;
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)__dst + 1) = v4;
    *((_QWORD *)__dst + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)__dst = v7;
  }
  else
  {
    __dst[23] = v4;
    v7 = __dst;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v7, v6, v4);
LABEL_9:
  *((_BYTE *)v7 + v4) = 0;
  *((_QWORD *)__dst + 3) = 0;
  *((_QWORD *)__dst + 4) = 0;
  *((_QWORD *)__dst + 5) = 0;
  *(_OWORD *)(__dst + 24) = *(_OWORD *)a3;
  *((_QWORD *)__dst + 5) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return __dst;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::MetaInfo::Sense>,quasar::MetaInfo::Sense const*,quasar::MetaInfo::Sense const*,quasar::MetaInfo::Sense*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      quasar::MetaInfo::Sense::Sense((std::string *)(a4 + v7), (const quasar::MetaInfo::Sense *)(a2 + v7));
      v7 += 296;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1ADD7A014(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 296;
    do
    {
      quasar::MetaInfo::Sense::~Sense((void **)(v4 + v2));
      v2 -= 296;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::MetaInfo::Sense>::__emplace_back_slow_path<quasar::MetaInfo::Sense&>(uint64_t *a1, const quasar::MetaInfo::Sense *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  std::string *v14;
  std::string::value_type *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x14C1BACF914C1BADLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0xDD67C8A60DD67CLL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x14C1BACF914C1BADLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x6EB3E45306EB3ELL)
    v9 = 0xDD67C8A60DD67CLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::Sense>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (std::string *)&v10[296 * v4];
  v16 = &v10[296 * v9];
  quasar::MetaInfo::Sense::Sense(v14, a2);
  v15 = &v14[12].__r_.__value_.__s.__data_[8];
  std::vector<quasar::MetaInfo::Sense>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::MetaInfo::Sense>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1ADD7A140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::MetaInfo::Sense>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<quasar::MetaInfo::Sense>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (__int128 *)*a1;
  v4 = (__int128 *)a1[1];
  v6 = a2[1];
  if (v4 != (__int128 *)*a1)
  {
    do
    {
      v6 -= 296;
      v4 = (__int128 *)((char *)v4 - 296);
      std::allocator<quasar::MetaInfo::Sense>::construct[abi:ne180100]<quasar::MetaInfo::Sense,quasar::MetaInfo::Sense>((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

__n128 std::allocator<quasar::MetaInfo::Sense>::construct[abi:ne180100]<quasar::MetaInfo::Sense,quasar::MetaInfo::Sense>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  uint64_t v8;

  v3 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v4 = *(__int128 *)((char *)a3 + 24);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)a3 + 5);
  *(_OWORD *)(a2 + 24) = v4;
  *((_QWORD *)a3 + 4) = 0;
  *((_QWORD *)a3 + 5) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v5 = a3[3];
  *(_QWORD *)(a2 + 64) = *((_QWORD *)a3 + 8);
  *(_OWORD *)(a2 + 48) = v5;
  *((_QWORD *)a3 + 7) = 0;
  *((_QWORD *)a3 + 8) = 0;
  *((_QWORD *)a3 + 6) = 0;
  v6 = *(__int128 *)((char *)a3 + 72);
  *(_QWORD *)(a2 + 88) = *((_QWORD *)a3 + 11);
  *(_OWORD *)(a2 + 72) = v6;
  *((_QWORD *)a3 + 9) = 0;
  *((_QWORD *)a3 + 10) = 0;
  *((_QWORD *)a3 + 11) = 0;
  *(_QWORD *)(a2 + 96) = *((_QWORD *)a3 + 12);
  result = *(__n128 *)((char *)a3 + 104);
  *(_QWORD *)(a2 + 120) = *((_QWORD *)a3 + 15);
  *(__n128 *)(a2 + 104) = result;
  *((_QWORD *)a3 + 14) = 0;
  *((_QWORD *)a3 + 15) = 0;
  *((_QWORD *)a3 + 13) = 0;
  v8 = *((_QWORD *)a3 + 16);
  *(_BYTE *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 128) = v8;
  *(_BYTE *)(a2 + 160) = 0;
  if (*((_BYTE *)a3 + 160))
  {
    result = *(__n128 *)((char *)a3 + 136);
    *(_QWORD *)(a2 + 152) = *((_QWORD *)a3 + 19);
    *(__n128 *)(a2 + 136) = result;
    *((_QWORD *)a3 + 18) = 0;
    *((_QWORD *)a3 + 19) = 0;
    *((_QWORD *)a3 + 17) = 0;
    *(_BYTE *)(a2 + 160) = 1;
  }
  *(_BYTE *)(a2 + 168) = 0;
  *(_BYTE *)(a2 + 192) = 0;
  if (*((_BYTE *)a3 + 192))
  {
    result = *(__n128 *)((char *)a3 + 168);
    *(_QWORD *)(a2 + 184) = *((_QWORD *)a3 + 23);
    *(__n128 *)(a2 + 168) = result;
    *((_QWORD *)a3 + 22) = 0;
    *((_QWORD *)a3 + 23) = 0;
    *((_QWORD *)a3 + 21) = 0;
    *(_BYTE *)(a2 + 192) = 1;
  }
  *(_BYTE *)(a2 + 200) = 0;
  *(_BYTE *)(a2 + 224) = 0;
  if (*((_BYTE *)a3 + 224))
  {
    result = *(__n128 *)((char *)a3 + 200);
    *(_QWORD *)(a2 + 216) = *((_QWORD *)a3 + 27);
    *(__n128 *)(a2 + 200) = result;
    *((_QWORD *)a3 + 26) = 0;
    *((_QWORD *)a3 + 27) = 0;
    *((_QWORD *)a3 + 25) = 0;
    *(_BYTE *)(a2 + 224) = 1;
  }
  *(_BYTE *)(a2 + 232) = 0;
  *(_BYTE *)(a2 + 256) = 0;
  if (*((_BYTE *)a3 + 256))
  {
    result = *(__n128 *)((char *)a3 + 232);
    *(_QWORD *)(a2 + 248) = *((_QWORD *)a3 + 31);
    *(__n128 *)(a2 + 232) = result;
    *((_QWORD *)a3 + 30) = 0;
    *((_QWORD *)a3 + 31) = 0;
    *((_QWORD *)a3 + 29) = 0;
    *(_BYTE *)(a2 + 256) = 1;
  }
  *(_BYTE *)(a2 + 264) = 0;
  *(_BYTE *)(a2 + 288) = 0;
  if (*((_BYTE *)a3 + 288))
  {
    result = *(__n128 *)((char *)a3 + 264);
    *(_QWORD *)(a2 + 280) = *((_QWORD *)a3 + 35);
    *(__n128 *)(a2 + 264) = result;
    *((_QWORD *)a3 + 34) = 0;
    *((_QWORD *)a3 + 35) = 0;
    *((_QWORD *)a3 + 33) = 0;
    *(_BYTE *)(a2 + 288) = 1;
  }
  return result;
}

uint64_t std::__split_buffer<quasar::MetaInfo::Sense>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 296;
    quasar::MetaInfo::Sense::~Sense((void **)(i - 296));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t getPropCheckTokenExistence(void)
{
  unsigned __int8 v0;
  uint64_t v2;

  {
    v2 = operator new();
    *(_QWORD *)v2 = &unk_1E5D173A0;
    *(_BYTE *)(v2 + 8) = 0;
    getPropCheckTokenExistence(void)::p = v2;
  }
  return getPropCheckTokenExistence(void)::p;
}

void sub_1ADD7A450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1ADD7A504(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__int32 **TWord::TWord(__int32 **a1, __int32 *a2, __int32 *a3, __int32 *a4, __int32 *a5)
{
  unint64_t v6;
  _BYTE *v8;
  __int128 v9;
  _BYTE v10[1024];
  char v11;

  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  a1[4] = 0;
  v8 = v10;
  v9 = xmmword_1AE1418C0;
  v11 = 1;
  getThirdField(a2, (uint64_t)&v8);
  v6 = (unint64_t)a1[4] & 0xFFFFFFFFFFFFFFFCLL;
  if (!*((_QWORD *)&v9 + 1))
    v6 |= 2uLL;
  a1[4] = (__int32 *)v6;
  if (v11 && v8 != v10 && v8)
    MEMORY[0x1AF44D160]();
  return a1;
}

void sub_1ADD7A5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (LOBYTE(STACK[0x418]))
    TPatternManager::addArrayObject((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL TWord::applyMask(uint64_t *a1, _DWORD *a2)
{
  return TLexicon::applyMask(a1[1], a1[2], a2, a1 + 4);
}

BOOL TLexicon::applyMask(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t *a4)
{
  _BOOL8 v4;
  _BOOL8 v5;
  unint64_t v6;
  _DWORD *v7;
  int v8;
  int v9;
  _BYTE *v12;
  __int128 v13;
  _BYTE v14[1024];
  char v15;

  v4 = *a3 != 33;
  v5 = *a3 == 33;
  if (a2)
  {
    v6 = 0;
    v7 = &a3[*a3 == 33];
    while (1)
    {
      v8 = v7[v6];
      if (v8 != 48)
        break;
      ++v6;
    }
    if (v8)
    {
      v12 = v14;
      v13 = xmmword_1AE1418C0;
      v15 = 1;
      TLexicon::getOptionalTagBits(a1, a2, (uint64_t)&v12, a4);
      if (v6 < *((_QWORD *)&v13 + 1))
      {
        do
        {
          v9 = v7[v6];
          if (!v9)
            break;
          if (v9 != 48 && *(_DWORD *)&v12[4 * v6] == 49)
          {
            if (v15 && v12 != v14)
              MEMORY[0x1AF44D160](v12, 0x1000C8052888210);
            return v4;
          }
          ++v6;
        }
        while (*((_QWORD *)&v13 + 1) != v6);
      }
      if (v15)
      {
        if (v12 != v14 && v12 != 0)
          MEMORY[0x1AF44D160]();
      }
    }
  }
  return v5;
}

void sub_1ADD7A74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (LOBYTE(STACK[0x418]))
    TPatternManager::addArrayObject((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL TLexicon::checkBits(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  unint64_t v10;

  if (!a2)
    return 1;
  if ((*(_BYTE *)a5 & 4) == 0)
    TLexicon::getOptionalTagBits(a1, a2, 0, a5);
  if (!a4)
    return 0;
  if ((((unint64_t)*a5 >> *a3) & 1) != 0)
    return 1;
  v9 = 1;
  do
  {
    v10 = v9;
    if (a4 == v9)
      break;
    ++v9;
  }
  while ((((unint64_t)*a5 >> a3[v10]) & 1) == 0);
  return v10 < a4;
}

void TWord::getCategoryTag(uint64_t a1, _QWORD *a2)
{
  TLexicon::getCategoryTag(*(_QWORD **)(a1 + 8), *(_QWORD *)(a1 + 16), a2);
}

void TLexicon::getCategoryTag(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _WORD v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  TBuffer<wchar_t>::assign((uint64_t)a3, dword_1AE17DC90);
  if (a2)
  {
    v6 = a1[47];
    if (v6)
    {
      if (a1[48])
      {
        v7 = v6 + 7;
        if (v7 <= 0x807)
        {
          SDWord_GetTagBits(a1[11], a2, 1, v13, v7 >> 3);
          v8 = a1[47];
          if (v8)
          {
            v9 = 0;
            v10 = 0;
            do
            {
              v10 |= ((uint64_t)(*((unsigned __int8 *)v13 + (v9 >> 3)) >> (v9 & 7) << 63) >> 63) & (1 << v9);
              ++v9;
            }
            while (v8 != v9);
          }
          else
          {
            v10 = 0;
          }
          TBuffer<wchar_t>::resize((uint64_t)a3, 0);
          TLocaleInfo::multiByteToUnicode((uint64_t)(a1 + 28), (unsigned __int8 *)(a1[50] + v10 + v10 * a1[49]), a1[49], (uint64_t)a3);
          v11 = a3[2];
          if (v11)
          {
            v12 = 0;
            while (*(_DWORD *)(*a3 + 4 * v12) != 32)
            {
              if (v11 == ++v12)
                return;
            }
            TBuffer<wchar_t>::resize((uint64_t)a3, v12);
          }
        }
      }
    }
  }
}

void TLexicon::getOptionalTagBits(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v8;
  void *v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _WORD v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    TBuffer<wchar_t>::resize(a3, 0);
    v8 = *(_QWORD *)(a1 + 368);
    if (*(_BYTE *)(a3 + 1048) && *(_QWORD *)(a3 + 8) < v8)
    {
      *(_QWORD *)(a3 + 8) = v8 + 1;
      v9 = (void *)operator new[]();
      v10 = v9;
      v11 = *(const void **)a3;
      v12 = *(_QWORD *)(a3 + 16);
      if (v12)
        memmove(v9, *(const void **)a3, 4 * v12);
      if (v11 != (const void *)(a3 + 24) && v11)
        MEMORY[0x1AF44D160](v11, 0x1000C8052888210);
      *(_QWORD *)a3 = v10;
    }
    v13 = *(_QWORD *)(a3 + 16);
    if (v13 < v8)
    {
      v14 = v8;
      if (*(_BYTE *)(a3 + 1048)
        || ((v15 = *(_QWORD *)(a3 + 8), v15 >= v8) ? (v14 = v8) : (v14 = *(_QWORD *)(a3 + 8)), v13 < v15 && v14 != v13))
      {
        memset_pattern16((void *)(*(_QWORD *)a3 + 4 * v13), "0", 4 * (v14 - v13));
      }
    }
    *(_QWORD *)(a3 + 16) = v8;
  }
  if (a2)
  {
    v16 = *(_QWORD *)(a1 + 368);
    if (v16)
    {
      v17 = v16 + 7;
      if (v17 <= 0x807)
      {
        SDWord_GetTagBits(*(_QWORD *)(a1 + 88), a2, 2, v23, v17 >> 3);
        if (a3)
        {
          v18 = *(_QWORD *)(a1 + 368);
          if (v18)
          {
            for (i = 0; i != v18; ++i)
            {
              if (((*((unsigned __int8 *)v23 + (i >> 3)) >> (i & 7)) & 1) != 0)
                *(_DWORD *)(*(_QWORD *)a3 + 4 * i) = 49;
            }
          }
        }
        if (a4)
        {
          v20 = 0;
          v21 = *a4 | 4;
          do
          {
            v22 = v21 & ~(8 << v20);
            v21 |= 8 << v20;
            if (((*((unsigned __int8 *)v23 + (TWord::ms_pnOTBIndex[v20] >> 3)) >> (TWord::ms_pnOTBIndex[v20] & 7)) & 1) == 0)
              v21 = v22;
            *a4 = v21;
            ++v20;
          }
          while (v20 != 5);
        }
      }
    }
  }
}

uint64_t *TWord::getOptionalTagBits(TWord *this)
{
  uint64_t *v1;

  v1 = (uint64_t *)((char *)this + 32);
  if ((*((_BYTE *)this + 32) & 4) == 0)
    TLexicon::getOptionalTagBits(*((_QWORD *)this + 1), *((_QWORD *)this + 2), 0, v1);
  return v1;
}

uint64_t TWord::getWrittenForm(__int32 **a1, uint64_t a2)
{
  return TLexicon::getWrittenForm((int)a1, *a1, a2);
}

uint64_t TLexicon::getWrittenForm(int a1, __int32 *__s, uint64_t a3)
{
  __int32 *v5;
  __int32 v6;
  unint64_t v8;

  v5 = wcschr(__s, 92);
  if (!v5)
    return TBuffer<wchar_t>::assign(a3, __s);
  if (v5 == __s)
  {
    v6 = __s[1];
    if (v6 == 92 || v6 == 0)
      v5 = __s + 1;
    else
      v5 = __s;
  }
  v8 = v5 - __s;
  TBuffer<wchar_t>::resize(a3, 0);
  return TBuffer<wchar_t>::insert(a3, 0, __s, v8);
}

uint64_t TWord::getTokenName(__int32 **a1, uint64_t a2)
{
  return TLexicon::getTokenName((int)a1, *a1, a2);
}

uint64_t TLexicon::getTokenName(int a1, __int32 *a2, uint64_t a3)
{
  uint64_t result;
  _BYTE *v6;
  __int128 v7;
  _BYTE v8[1024];
  char v9;

  TLexicon::getWrittenForm(a1, a2, a3);
  v6 = v8;
  v7 = xmmword_1AE1418C0;
  v9 = 1;
  result = (uint64_t)getSecondField(a2, (uint64_t)&v6);
  if (*((_QWORD *)&v7 + 1))
  {
    TBuffer<wchar_t>::insert(a3, *(_QWORD *)(a3 + 16), dword_1AE17DC84, 1uLL);
    result = TBuffer<wchar_t>::operator+=(a3, (uint64_t)&v6);
  }
  if (v9)
  {
    result = (uint64_t)v6;
    if (v6 != v8)
    {
      if (v6)
        return MEMORY[0x1AF44D160]();
    }
  }
  return result;
}

void sub_1ADD7AD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (LOBYTE(STACK[0x418]))
    TPatternManager::addArrayObject((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t TWord::getWordSpec(TWord *this)
{
  if (*((_QWORD *)this + 2))
    return *(_QWORD *)(*((_QWORD *)this + 1) + 88);
  else
    return 0;
}

uint64_t TLexicon::findHeadClone(uint64_t a1, __int32 *a2)
{
  __int32 *v3;
  uint64_t Word;
  uint64_t v5;
  __int32 *v6;
  uint64_t v7;
  __int32 *v9;
  __int128 v10;
  _BYTE v11[1024];
  char v12;
  int v13;

  v9 = (__int32 *)v11;
  v10 = xmmword_1AE1418C0;
  v12 = 1;
  TLexicon::getTokenName(a1, a2, (uint64_t)&v9);
  if (*((_QWORD *)&v10 + 1) >= (unint64_t)v10)
  {
    if (v12)
    {
      v13 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v9, *((unint64_t *)&v10 + 1), &v13, 1uLL);
      v3 = v9;
      --*((_QWORD *)&v10 + 1);
    }
    else
    {
      v3 = v9;
      if ((_QWORD)v10)
        v9[(_QWORD)v10 - 1] = 0;
    }
  }
  else
  {
    v3 = v9;
    v9[*((_QWORD *)&v10 + 1)] = 0;
  }
  Word = TLexicon::findWord(a1, v3);
  v5 = Word;
  if (!Word || (*(_BYTE *)(Word + 32) & 2) == 0)
  {
    if (*((_QWORD *)&v10 + 1) >= (unint64_t)v10)
    {
      if (v12)
      {
        v13 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v9, *((unint64_t *)&v10 + 1), &v13, 1uLL);
        v6 = v9;
        --*((_QWORD *)&v10 + 1);
      }
      else
      {
        v6 = v9;
        if ((_QWORD)v10)
          v9[(_QWORD)v10 - 1] = 0;
      }
    }
    else
    {
      v6 = v9;
      v9[*((_QWORD *)&v10 + 1)] = 0;
    }
    v7 = TLexicon::computeClones(a1, v6);
    if (v7)
      v5 = **(_QWORD **)(v7 + 16);
    else
      v5 = 0;
  }
  if (v12 && v9 != (__int32 *)v11 && v9)
    MEMORY[0x1AF44D160]();
  return v5;
}

void sub_1ADD7AEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (LOBYTE(STACK[0x420]))
  {
    if (a10 != v10 && a10 != 0)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

void TWord::getClones(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  __int32 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  __int32 *v26;
  __int128 v27;
  _BYTE v28[1024];
  char v29;
  int v30;

  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize(a2, 0);
  v26 = (__int32 *)v28;
  v27 = xmmword_1AE1418C0;
  v29 = 1;
  TLexicon::getTokenName(v4, *(__int32 **)a1, (uint64_t)&v26);
  v5 = *(_QWORD *)(a1 + 8);
  if (*((_QWORD *)&v27 + 1) >= (unint64_t)v27)
  {
    if (v29)
    {
      v30 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v26, *((unint64_t *)&v27 + 1), &v30, 1uLL);
      v6 = v26;
      --*((_QWORD *)&v27 + 1);
    }
    else
    {
      v6 = v26;
      if ((_QWORD)v27)
        v26[(_QWORD)v27 - 1] = 0;
    }
  }
  else
  {
    v6 = v26;
    v26[*((_QWORD *)&v27 + 1)] = 0;
  }
  v7 = TLexicon::computeClones(v5, v6);
  v8 = v7;
  if (v7)
  {
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a2, *(_QWORD *)(v7 + 8) - 1);
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
    {
      v10 = *(uint64_t **)(v8 + 16);
      v11 = v10;
      do
      {
        v12 = *v11;
        if (*v11 != a1)
        {
          v14 = *(_QWORD **)(a2 + 8);
          v13 = *(_QWORD *)(a2 + 16);
          if ((unint64_t)v14 >= v13)
          {
            v16 = ((uint64_t)v14 - *(_QWORD *)a2) >> 3;
            if ((unint64_t)(v16 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v17 = v13 - *(_QWORD *)a2;
            v18 = v17 >> 2;
            if (v17 >> 2 <= (unint64_t)(v16 + 1))
              v18 = v16 + 1;
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
              v19 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v19 = v18;
            if (v19)
            {
              v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a2 + 16, v19);
              v12 = *v11;
            }
            else
            {
              v20 = 0;
            }
            v21 = &v20[8 * v16];
            *(_QWORD *)v21 = v12;
            v15 = v21 + 8;
            v23 = *(char **)a2;
            v22 = *(char **)(a2 + 8);
            if (v22 != *(char **)a2)
            {
              do
              {
                v24 = *((_QWORD *)v22 - 1);
                v22 -= 8;
                *((_QWORD *)v21 - 1) = v24;
                v21 -= 8;
              }
              while (v22 != v23);
              v22 = *(char **)a2;
            }
            *(_QWORD *)a2 = v21;
            *(_QWORD *)(a2 + 8) = v15;
            *(_QWORD *)(a2 + 16) = &v20[8 * v19];
            if (v22)
              operator delete(v22);
          }
          else
          {
            *v14 = v12;
            v15 = v14 + 1;
          }
          *(_QWORD *)(a2 + 8) = v15;
          v9 = *(_QWORD *)(v8 + 8);
          v10 = *(uint64_t **)(v8 + 16);
        }
        ++v11;
      }
      while (v11 != &v10[v9]);
    }
  }
  if (v29)
  {
    if (v26 != (__int32 *)v28 && v26 != 0)
      MEMORY[0x1AF44D160]();
  }
}

void sub_1ADD7B144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (LOBYTE(STACK[0x420]))
  {
    if (a10 != v10 && a10 != 0)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

uint64_t TLexicon::computeClones(uint64_t a1, __int32 *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t Word;
  _QWORD *v8;
  char *v9;
  unint64_t v10;
  unint64_t i;
  __int32 *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  const __int32 *v16;
  __int32 **v17;
  __int32 *v18;
  const __int32 *v19;
  char *v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  char *v24;
  __int32 ***v25;
  char *v26;
  char *v27;
  __int32 **v28;
  uint64_t v30;
  char *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  void *v40;
  __int128 v41;
  _BYTE v42[841];
  char v43;
  void *v44;
  void *v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void *__p;
  __int128 v52;
  _BYTE v53[1024];
  char v54;
  _QWORD v55[2];
  uint64_t v56;
  __int32 *v57;
  __int32 **v58;
  char v59[9];
  char *v60;
  __int128 v61;
  _BYTE v62[256];
  char v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  ++*(_QWORD *)(a1 + 464);
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&__p, a2);
  v4 = std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::find<std::wstring>(a1 + 160, (uint64_t)&__p);
  if (SHIBYTE(v52) < 0)
    operator delete(__p);
  if ((_QWORD *)(a1 + 168) != v4)
  {
    ++*(_QWORD *)(a1 + 488);
    return v4[7];
  }
  Word = TLexicon::findWord(a1, a2);
  if (Word && (*(_BYTE *)(Word + 32) & 1) != 0)
  {
    v5 = 0;
    ++*(_QWORD *)(a1 + 488);
    return v5;
  }
  __p = v53;
  v52 = xmmword_1AE1418C0;
  v54 = 1;
  getSecondField(a2, (uint64_t)&__p);
  v60 = v62;
  v61 = xmmword_1AE1418C0;
  v63 = 1;
  TLocaleInfo::unicodeToMultiByte(a1 + 224, (unsigned int *)a2, (uint64_t)&v60);
  v50 = 0;
  v49 = 0;
  v48 = 0;
  v47 = 0;
  v8 = *(_QWORD **)(a1 + 88);
  if (*((_QWORD *)&v61 + 1) >= (unint64_t)v61)
  {
    if (v63)
    {
      LOBYTE(v40) = 0;
      TBuffer<char>::insert((uint64_t)&v60, *((unint64_t *)&v61 + 1), (char *)&v40, 1uLL);
      --*((_QWORD *)&v61 + 1);
    }
    else if ((_QWORD)v61)
    {
      v60[(_QWORD)v61 - 1] = 0;
    }
  }
  else
  {
    v60[*((_QWORD *)&v61 + 1)] = 0;
  }
  if (*((_QWORD *)&v52 + 1))
    v9 = "\\";
  else
    v9 = "\\\\";
  SDVoc_GetWords(v8, 2, v60, v9, *(_QWORD *)(a1 + 424), *(_QWORD *)(a1 + 408), &v50, &v48, &v49, (uint64_t)callBackMRECArrayReallocator, 0, &v47);
  v45 = 0;
  v44 = 0;
  v46 = 0;
  if (v50)
  {
    for (i = 0; i < v50; ++i)
    {
      ++*(_QWORD *)(a1 + 504);
      v12 = *(__int32 **)(v48 + 8 * i);
      v13 = TStringParam::get((TStringParam *)(*(_QWORD *)(a1 + 320) + 488));
      if (!TLexicon::applyMask(a1, (uint64_t)v12, v13, 0))
      {
        if ((unint64_t)SDWord_GetName(*(void **)(a1 + 88), (char *)v12, v59, 0x100uLL) < 0x101)
        {
          v40 = v42;
          v41 = xmmword_1AE1418C0;
          v43 = 1;
          if (TLocaleInfo::multiByteToUnicode(a1 + 224, (unsigned __int8 *)v59, (uint64_t)&v40))
          {
            tknPrintf("Warning: '%s' : Can't convert to Unicode. Ignored.\n", v15, v59);
          }
          else
          {
            if (*((_QWORD *)&v41 + 1) >= (unint64_t)v41)
            {
              if (v43)
              {
                LODWORD(v55[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v40, *((unint64_t *)&v41 + 1), (int *)v55, 1uLL);
                v16 = (const __int32 *)v40;
                --*((_QWORD *)&v41 + 1);
              }
              else
              {
                v16 = (const __int32 *)v40;
                if ((_QWORD)v41)
                  *((_DWORD *)v40 + v41 - 1) = 0;
              }
            }
            else
            {
              v16 = (const __int32 *)v40;
              *((_DWORD *)v40 + *((_QWORD *)&v41 + 1)) = 0;
            }
            v57 = (__int32 *)v16;
            v58 = 0;
            THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::find(a1 + 184, (const __int32 **)&v57, v55);
            if (!v56 || (v17 = *(__int32 ***)(v56 + 16)) == 0)
            {
              v18 = (__int32 *)operator new[]();
              if (*((_QWORD *)&v41 + 1) >= (unint64_t)v41)
              {
                if (v43)
                {
                  LODWORD(v55[0]) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&v40, *((unint64_t *)&v41 + 1), (int *)v55, 1uLL);
                  v19 = (const __int32 *)v40;
                  --*((_QWORD *)&v41 + 1);
                }
                else
                {
                  v19 = (const __int32 *)v40;
                  if ((_QWORD)v41)
                    *((_DWORD *)v40 + v41 - 1) = 0;
                }
              }
              else
              {
                v19 = (const __int32 *)v40;
                *((_DWORD *)v40 + *((_QWORD *)&v41 + 1)) = 0;
              }
              wcscpy(v18, v19);
              v17 = (__int32 **)operator new();
              TWord::TWord(v17, v18, (__int32 *)a1, v12, *(__int32 **)(a1 + 312));
              v57 = *v17;
              v58 = v17;
              THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::insert(a1 + 184, (const __int32 **)&v57, (uint64_t)v55);
            }
            v20 = (char *)v45;
            if ((unint64_t)v45 >= v46)
            {
              v22 = ((_BYTE *)v45 - (_BYTE *)v44) >> 3;
              if ((unint64_t)(v22 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v23 = (uint64_t)(v46 - (_QWORD)v44) >> 2;
              if (v23 <= v22 + 1)
                v23 = v22 + 1;
              if (v46 - (unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
                v10 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v10 = v23;
              if (v10)
                v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v46, v10);
              else
                v24 = 0;
              v25 = (__int32 ***)&v24[8 * v22];
              *v25 = v17;
              v21 = v25 + 1;
              v26 = (char *)v45;
              v27 = (char *)v44;
              if (v45 != v44)
              {
                do
                {
                  v28 = (__int32 **)*((_QWORD *)v26 - 1);
                  v26 -= 8;
                  *--v25 = v28;
                }
                while (v26 != v27);
                v26 = (char *)v44;
              }
              v44 = v25;
              v45 = v21;
              v46 = (unint64_t)&v24[8 * v10];
              if (v26)
                operator delete(v26);
            }
            else
            {
              *(_QWORD *)v45 = v17;
              v21 = v20 + 8;
            }
            v45 = v21;
          }
          if (v43)
          {
            if (v40 != v42 && v40 != 0)
              MEMORY[0x1AF44D160]();
          }
        }
        else
        {
          tknPrintf("Warning: The voc contains a >= %llu-byte word name, prefix is '%s'. Ignored.\n", v14, 256, v59);
        }
      }
    }
  }
  if (v48 != *(_QWORD *)(a1 + 424))
  {
    tknPrintf("Warning: Inefficient head-clone search. Required dynamic allocation of size %llu\n", v10, v49);
    v30 = *(_QWORD *)(a1 + 424);
    if (v30)
      MEMORY[0x1AF44D160](v30, 0x80C80B8603338);
    *(_QWORD *)(a1 + 424) = v48;
    *(_QWORD *)(a1 + 408) = v49;
  }
  v31 = (char *)v44;
  v32 = v45;
  if (v44 == v45)
  {
    v5 = 0;
    if (!v44)
      goto LABEL_74;
  }
  else
  {
    v33 = *(_QWORD *)v44;
    v34 = *(_QWORD *)(*(_QWORD *)v44 + 32);
    *(_QWORD *)(*(_QWORD *)v44 + 32) = v34 | 1;
    v35 = v32 - v31;
    if ((unint64_t)v35 <= 8 && (v34 & 2) != 0)
    {
      v5 = 0;
    }
    else
    {
      *(_QWORD *)(v33 + 32) = v34 | 3;
      if ((unint64_t)v35 >= 9)
      {
        v36 = v35 >> 3;
        if (v36 <= 2)
          v36 = 2;
        v37 = v36 - 1;
        v38 = (uint64_t *)(v31 + 8);
        do
        {
          v39 = *v38++;
          *(_QWORD *)(v39 + 32) |= 1uLL;
          --v37;
        }
        while (v37);
      }
      v5 = TWordBlock::create((uint64_t)&v44, *(_QWORD *)(a1 + 312), 0);
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v40, a2);
      *(_QWORD *)v59 = &v40;
      *((_QWORD *)std::__tree<std::__value_type<std::wstring,TWordBlock *>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TWordBlock *>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TWordBlock *>>>::__emplace_unique_key_args<std::wstring,std::piecewise_construct_t const&,std::tuple<std::wstring&&>,std::tuple<>>((uint64_t **)(a1 + 160), (uint64_t)&v40, (uint64_t)&std::piecewise_construct, (_OWORD **)v59)+ 7) = v5;
      if (SHIBYTE(v41) < 0)
        operator delete(v40);
      v31 = (char *)v44;
      if (!v44)
        goto LABEL_74;
    }
  }
  v45 = v31;
  operator delete(v31);
LABEL_74:
  if (v63 && v60 != v62 && v60)
    MEMORY[0x1AF44D160]();
  if (v54 && __p != v53 && __p)
    MEMORY[0x1AF44D160]();
  return v5;
}

void sub_1ADD7B88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v26;
  unint64_t v27;
  unint64_t v28;

  if (a25 < 0)
    operator delete(__p);
  v26 = (void *)STACK[0x478];
  if (STACK[0x478])
  {
    STACK[0x480] = (unint64_t)v26;
    operator delete(v26);
  }
  if (LOBYTE(STACK[0xB18]))
  {
    v27 = STACK[0xA00];
    if (STACK[0xA00] != a15)
    {
      if (v27)
        MEMORY[0x1AF44D160](v27, 0x1000C8077774924);
    }
  }
  if (LOBYTE(STACK[0x8C8]))
  {
    v28 = STACK[0x4B0];
    if (STACK[0x4B0] != a16)
    {
      if (v28)
        MEMORY[0x1AF44D160](v28, 0x1000C8052888210);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t *TLexiconScore::TLexiconScore(uint64_t *a1, const __int32 *a2, unsigned int *a3, size_t a4, size_t a5, uint64_t a6)
{
  size_t v12;
  unsigned int *v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  signed int v18;
  unsigned __int8 v19;
  signed int v20;
  unsigned __int8 v21;
  int v22;
  unsigned __int8 v23;
  int v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned __int8 v29;
  int v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned __int8 v36;
  int v37;
  unsigned __int8 v38;
  char isLower;
  char v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  _BOOL4 v45;
  TLocaleInfo *v47;
  TLocaleInfo *v48;
  TLocaleInfo *v49;
  TLocaleInfo *v50;
  TLocaleInfo *v51;
  TLocaleInfo *v52;
  TLocaleInfo *v53;
  TLocaleInfo *v54;
  size_t v55;
  _BYTE *v56;
  __int128 v57;
  _BYTE v58[785];
  char v59;
  _BYTE *v60;
  __int128 v61;
  _BYTE v62[1024];
  char v63;
  unint64_t v64;
  unint64_t v65;
  int v66[3];

  *((_BYTE *)a1 + 8) = 0;
  *a1 = 0;
  v12 = wcslen((const __int32 *)a3);
  if (wcsncmp(a2, (const __int32 *)a3, v12))
  {
    v55 = a4;
    if (*a2)
    {
      v13 = (unsigned int *)a2;
      v14 = a3;
      while (1)
      {
        if (!*v14)
          goto LABEL_77;
        v65 = 0;
        TCollation::collateNext((_QWORD *)(a6 + 16), v13, &v65);
        v64 = 0;
        TCollation::collateNext((_QWORD *)(a6 + 16), v14, &v64);
        if (v65 != v64
          || (v15 = TLocaleInfo::removeDiacritics(a6, *v13),
              v16 = TLocaleInfo::toLower(a6, v15),
              v17 = TLocaleInfo::removeDiacritics(a6, *v14),
              v16 != TLocaleInfo::toLower(a6, v17)))
        {
          ++*((_BYTE *)a1 + 8);
        }
        v18 = *v13;
        if ((v19 & 1) == 0
        {
          v47 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v47);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v47;
        }
        if (TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v18))
        {
          v20 = *v14;
          if ((v21 & 1) == 0
          {
            v48 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v48);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v48;
          }
          if (TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v20))
            break;
        }
LABEL_59:
        v13 += v65;
        v14 += v64;
        if (!*v13)
          goto LABEL_77;
      }
      v22 = *v13;
      if ((v23 & 1) == 0
      {
        v49 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v49);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v49;
      }
      if (!TLocaleInfo::isLower(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v22))
        goto LABEL_18;
      v24 = *v14;
      if ((v25 & 1) == 0
      {
        v52 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v52);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v52;
      }
      if (TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v24))
      {
        v26 = *a1;
        if (v14 == a3)
          v27 = v26 | 1;
        else
          v27 = v26 | 4;
      }
      else
      {
LABEL_18:
        v28 = *v13;
        if ((v29 & 1) == 0
        {
          v50 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v50);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v50;
        }
        if (!TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v28))
          goto LABEL_27;
        v30 = *v14;
        if ((v31 & 1) == 0
        {
          v53 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v53);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v53;
        }
        if (!TLocaleInfo::isLower(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v30))
        {
LABEL_27:
          v60 = v62;
          v61 = xmmword_1AE1418C0;
          v63 = 1;
          v56 = v58;
          v57 = xmmword_1AE1418C0;
          v59 = 1;
          TLocaleInfo::decomposeCharacter(a6, *v13, (uint64_t *)&v60);
          TLocaleInfo::decomposeCharacter(a6, *v14, (uint64_t *)&v56);
          if (*((_QWORD *)&v61 + 1) >= (unint64_t)v61)
          {
            if (v63)
            {
              v66[0] = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v60, *((unint64_t *)&v61 + 1), v66, 1uLL);
              v33 = (uint64_t)v60;
              --*((_QWORD *)&v61 + 1);
            }
            else
            {
              v33 = (uint64_t)v60;
              if ((_QWORD)v61)
                *(_DWORD *)&v60[4 * v61 - 4] = 0;
            }
          }
          else
          {
            v33 = (uint64_t)v60;
            *(_DWORD *)&v60[4 * *((_QWORD *)&v61 + 1)] = 0;
          }
          if (*((_QWORD *)&v57 + 1) >= (unint64_t)v57)
          {
            if (v59)
            {
              v66[0] = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v56, *((unint64_t *)&v57 + 1), v66, 1uLL);
              v34 = (uint64_t)v56;
              --*((_QWORD *)&v57 + 1);
            }
            else
            {
              v34 = (uint64_t)v56;
              if ((_QWORD)v57)
                *(_DWORD *)&v56[4 * v57 - 4] = 0;
            }
          }
          else
          {
            v34 = (uint64_t)v56;
            *(_DWORD *)&v56[4 * *((_QWORD *)&v57 + 1)] = 0;
          }
          if (!wcscmp((const __int32 *)(v33 + 4), (const __int32 *)(v34 + 4)))
            goto LABEL_51;
          v35 = *v13;
          if ((v36 & 1) == 0
          {
            v51 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v51);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v51;
          }
          if (TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v35))
          {
            if (*((_QWORD *)&v61 + 1) < 2uLL)
              goto LABEL_51;
            v37 = *v14;
            if ((v38 & 1) == 0
            {
              v54 = (TLocaleInfo *)operator new();
              TLocaleInfo::TLocaleInfo(v54);
              TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v54;
            }
            isLower = TLocaleInfo::isLower(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v37);
            v40 = *((_QWORD *)&v57 + 1) > 1uLL ? 1 : isLower;
            if ((v40 & 1) == 0)
              goto LABEL_51;
            v41 = 32;
          }
          else
          {
            v41 = 16;
          }
          *a1 |= v41;
LABEL_51:
          if (v59 && v56 != v58 && v56)
            MEMORY[0x1AF44D160]();
          if (v63 && v60 != v62 && v60)
            MEMORY[0x1AF44D160]();
          goto LABEL_59;
        }
        v32 = *a1;
        if (v13 == (unsigned int *)a2)
          v27 = v32 | 2;
        else
          v27 = v32 | 8;
      }
      *a1 = v27;
      goto LABEL_27;
    }
LABEL_77:
    v42 = wcslen((const __int32 *)a3);
    v43 = *a1;
    if ((*a1 & 5) != 0 && v42 < a5)
      v43 |= 0x40uLL;
    v45 = (v43 & 0x30) != 0 && v42 < v55;
    if ((*a1 & 5) != 0 && v42 < a5 || v45)
    {
      if (v45)
        v43 |= 0x80uLL;
      *a1 = v43;
    }
  }
  return a1;
}

void sub_1ADD7C058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  unint64_t v18;

  MEMORY[0x1AF44D190](a10, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x458]) && a17 != a15 && a17)
    MEMORY[0x1AF44D160]();
  if (LOBYTE(STACK[0x878]))
  {
    v18 = STACK[0x460];
    if (STACK[0x460] != a16)
    {
      if (v18)
        MEMORY[0x1AF44D160](v18, 0x1000C8052888210);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TCollation::collateNext(_QWORD *a1, unsigned int *a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  BOOL v7;
  uint64_t v8;

  v4 = a1[3];
  v5 = a1[4];
  result = *a2;
  v7 = v4 == v5 || (_DWORD)result == 0;
  if (!v7 && a2[1])
    return TCollation::collateCharSlow((uint64_t)a1, a2, a3);
  *a3 = 1;
  v8 = a1[2];
  if (v8)
  {
    if ((unint64_t)(int)result < 0x10000)
      return *(unsigned int *)(v8 + 4 * (int)result);
  }
  return result;
}

void TLexiconParamManager::TLexiconParamManager(TLexiconParamManager *this, TLexicon *a2)
{
  _QWORD *v3;
  TParam *v4;
  uint64_t v5;
  const __int32 *v6;
  uint64_t v7;
  const __int32 *v8;
  const __int32 *v9;
  std::vector<std::wstring> *v10;
  std::vector<std::wstring> v12;
  std::vector<std::wstring> v13;
  void **v14[2];

  TParamManager::TParamManager(this, 1, (TLexicon *)((char *)a2 + 224));
  *v3 = &off_1E5D16C90;
  v4 = (TParam *)(v3 + 17);
  TIntParam::TIntParam((TIntParam *)(v3 + 17), (uint64_t)&unk_1AE17A7C8, (uint64_t)&unk_1AE17A824, 256, 2, 4, 4, (uint64_t)&unk_1AE17AC14, (uint64_t)&unk_1AE17AC4C);
  TStringParam::TStringParam((char *)this + 488, &unk_1AE17AC50, &unk_1AE17AC88, 0, &unk_1AE17B03C, &unk_1AE17B154, &unk_1AE17AC4C);
  TIntParam::TIntParam((TLexiconParamManager *)((char *)this + 1864), (uint64_t)&unk_1AE17B18C, (uint64_t)&unk_1AE17B218, 0, 1, 256, 4, (uint64_t)&unk_1AE17B154, (uint64_t)&unk_1AE17B9A4);
  TIntParam::TIntParam((TLexiconParamManager *)((char *)this + 2216), (uint64_t)&unk_1AE17B9E4, (uint64_t)&unk_1AE17BA68, 0, 1, 256, 4, (uint64_t)&unk_1AE17B154, (uint64_t)&unk_1AE17B9A4);
  TIntParam::TIntParam((TLexiconParamManager *)((char *)this + 2568), (uint64_t)&unk_1AE17C288, (uint64_t)&unk_1AE17C330, 0, 0, 0x7FFFFFFF, 2000, (uint64_t)&unk_1AE17B154, (uint64_t)&unk_1AE17AC4C);
  TIntParam::TIntParam((TLexiconParamManager *)((char *)this + 2920), (uint64_t)&unk_1AE17C4A0, (uint64_t)&unk_1AE17C550, 0, 0, 0x7FFFFFFF, 5000, (uint64_t)&unk_1AE17B154, (uint64_t)&unk_1AE17AC4C);
  TStringParam::TStringParam((char *)this + 3272, &unk_1AE17C75C, &unk_1AE17C790, 256, &unk_1AE17AC4C, &unk_1AE17C8AC, &unk_1AE17AC4C);
  TStringParam::TStringParam((char *)this + 4648, &unk_1AE17C8E4, &unk_1AE17C914, 0, &unk_1AE17AC4C, &unk_1AE17CA34, &unk_1AE17AC4C);
  TStringParam::TStringParam((char *)this + 6024, &unk_1AE17CA6C, &unk_1AE17CAA8, 0, &unk_1AE17AC4C, &unk_1AE17CA34, &unk_1AE17AC4C);
  TStringParam::TStringParam((char *)this + 7400, &unk_1AE17CBD0, &unk_1AE17CC18, 0, &unk_1AE17AC4C, &unk_1AE17CA34, &unk_1AE17AC4C);
  TStringParam::TStringParam((char *)this + 8776, &unk_1AE17CD58);
  TStringParam::TStringParam((char *)this + 10152, &unk_1AE17CDB8, &unk_1AE17CE00, 0, &unk_1AE17AC4C, &unk_1AE17CA34, &unk_1AE17AC4C);
  TStringParam::TStringParam((char *)this + 11528, &unk_1AE17CEA0, &unk_1AE17CEE4, 0, &unk_1AE17AC4C, &unk_1AE17CA34, &unk_1AE17AC4C);
  TStringParam::TStringParam((char *)this + 12904, &unk_1AE17D010, &unk_1AE17D06C, 0, &unk_1AE17AC4C, &unk_1AE17CA34, &unk_1AE17AC4C);
  TStringParam::TStringParam((char *)this + 14280, &unk_1AE17D124, &unk_1AE17D17C, 0, &unk_1AE17AC4C, &unk_1AE17CA34, &unk_1AE17AC4C);
  TStringParam::TStringParam((char *)this + 15656, &unk_1AE17D2A8);
  TStringParam::TStringParam((char *)this + 17032, &unk_1AE17D300, &unk_1AE17D338, 0, &unk_1AE17AC4C, &unk_1AE17CA34, &unk_1AE17AC4C);
  TStringParam::TStringParam((char *)this + 18408, &unk_1AE17D440, &unk_1AE17D474, 0, &unk_1AE17AC4C, &unk_1AE17CA34, &unk_1AE17AC4C);
  TStringParam::TStringParam((char *)this + 19784, &unk_1AE17D4E0, &unk_1AE17D514, 0, &unk_1AE17AC4C, &unk_1AE17CA34, &unk_1AE17AC4C);
  TIntParam::TIntParam((TLexiconParamManager *)((char *)this + 21160), (uint64_t)&unk_1AE17D580, (uint64_t)&unk_1AE17D5C4, 0, 0, 99, 29, (uint64_t)&unk_1AE17CA34, (uint64_t)&unk_1AE17AC4C);
  TBoolParam::TBoolParam((uint64_t)this + 21512, (uint64_t)&unk_1AE17D854, (uint64_t)&unk_1AE17D8A0, 0, 0, (uint64_t)&unk_1AE17B154, (uint64_t)&unk_1AE17AC4C);
  TParamManager::add(this, v4);
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 488));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 1864));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 2216));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 2568));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 2920));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 3272));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 4648));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 6024));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 7400));
  MEMORY[0x1AF44C9E0]((char *)this + 8816, &unk_1AE17D908);
  MEMORY[0x1AF44C9E0]((char *)this + 8840, &unk_1AE17CA34);
  MEMORY[0x1AF44C9E0]((char *)this + 8864, &unk_1AE17AC4C);
  std::vector<std::wstring>::vector(&v13, 4uLL);
  std::vector<std::wstring>::vector(&v12, 4uLL);
  v5 = 0;
  v6 = (const __int32 *)&unk_1AE17DA00;
  do
  {
    MEMORY[0x1AF44C9E0](&v13.__begin_[v5], v6);
    v6 += wcslen(v6) + 1;
    ++v5;
  }
  while (v5 != 4);
  TStringParam::setAllowables((uint64_t)this + 8776, (uint64_t)&v13, 0, 0);
  TStringParam::setOriginal((_QWORD *)this + 1097, 0, dword_1AE17DA5C);
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 8776));
  v14[0] = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v14);
  v12.__begin_ = (std::vector<std::wstring>::pointer)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 10152));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 11528));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 12904));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 14280));
  MEMORY[0x1AF44C9E0]((char *)this + 15696, &unk_1AE17DA70);
  MEMORY[0x1AF44C9E0]((char *)this + 15720, &unk_1AE17DB58);
  MEMORY[0x1AF44C9E0]((char *)this + 15744, &unk_1AE17AC4C);
  std::vector<std::wstring>::vector(&v13, 3uLL);
  std::vector<std::wstring>::vector(&v12, 3uLL);
  v7 = 0;
  v8 = (const __int32 *)&unk_1AE17DB98;
  v9 = (const __int32 *)&unk_1AE17DC30;
  do
  {
    MEMORY[0x1AF44C9E0](&v13.__begin_[v7], v8);
    if (v9)
    {
      MEMORY[0x1AF44C9E0](&v12.__begin_[v7], v9);
      v9 += wcslen(v9) + 1;
    }
    v8 += wcslen(v8) + 1;
    ++v7;
  }
  while (v7 != 3);
  if (v9)
    v10 = &v12;
  else
    v10 = 0;
  TStringParam::setAllowables((uint64_t)this + 15656, (uint64_t)&v13, (uint64_t)v10, 0);
  TStringParam::setOriginal((_QWORD *)this + 1957, 0, dword_1AE17DC4C);
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 15656));
  v14[0] = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v14);
  v12.__begin_ = (std::vector<std::wstring>::pointer)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 17032));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 18408));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 19784));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 21160));
  TParamManager::add(this, (TLexiconParamManager *)((char *)this + 21512));
  *((_QWORD *)this + 2720) = a2;
}

void sub_1ADD7C96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23,void **a24,void **a25,void **a26,uint64_t a27)
{
  TParamManager *v27;
  void **v28;
  void **v29;
  void **v30;
  void **v31;
  void **v32;
  void **v33;
  uint64_t v34;

  a27 = v34 - 120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  TBoolParam::~TBoolParam(v32);
  TParam::~TParam(v31);
  TStringParam::~TStringParam(v30);
  TStringParam::~TStringParam(v28);
  TStringParam::~TStringParam(a13);
  TStringParam::~TStringParam(v33);
  TStringParam::~TStringParam(a14);
  TStringParam::~TStringParam(a15);
  TStringParam::~TStringParam(a16);
  TStringParam::~TStringParam(a17);
  TStringParam::~TStringParam(v29);
  TStringParam::~TStringParam(a18);
  TStringParam::~TStringParam(a19);
  TStringParam::~TStringParam(a20);
  TStringParam::~TStringParam(a21);
  TParam::~TParam(a22);
  TParam::~TParam(a23);
  TParam::~TParam(a24);
  TParam::~TParam(a25);
  TStringParam::~TStringParam(a26);
  TParam::~TParam(a11);
  TParamManager::~TParamManager(v27);
  _Unwind_Resume(a1);
}

char *TLexiconParamManager::notifyChange(char *this, const TParam *a2)
{
  uint64_t v2;

  if (this + 4648 == (char *)a2)
  {
    v2 = *((_QWORD *)this + 2720);
    this = TStringParam::get(a2);
    *(_QWORD *)(v2 + 232) = this;
  }
  return this;
}

void TLexicon::TLexicon(TLexicon *this, TDataManager *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  TLexiconParamManager *v8;
  uint64_t v9;
  uint64_t Handle;
  uint64_t v11;
  std::exception_vtbl *v12;
  _QWORD *exception;
  _BYTE v14[64];
  __int128 v15;
  std::exception __dst[2];
  char v17;
  void *v18[2];
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  TAllocator::TAllocator(this, 2048);
  *(_QWORD *)(v6 + 56) = 0;
  v7 = v6 + 56;
  *(_QWORD *)(v6 + 96) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 120) = &unk_1E5D17C10;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 136) = 0;
  *(_QWORD *)(v6 + 144) = 0;
  *(_QWORD *)(v6 + 128) = 0;
  *(_BYTE *)(v6 + 154) = 1;
  *(_QWORD *)(v6 + 168) = 0;
  *(_QWORD *)(v6 + 160) = v6 + 168;
  *(_QWORD *)(v6 + 176) = 0;
  *(_QWORD *)(v6 + 200) = 0;
  *(_QWORD *)(v6 + 208) = 0;
  *(_QWORD *)(v6 + 192) = 0;
  *(_QWORD *)(v6 + 184) = &unk_1E5D17BF0;
  *(_BYTE *)(v6 + 218) = 1;
  TLocaleInfo::TLocaleInfo((TLocaleInfo *)(v6 + 224));
  *((_QWORD *)this + 11) = a3;
  v8 = (TLexiconParamManager *)operator new();
  TLexiconParamManager::TLexiconParamManager(v8, this);
  *((_QWORD *)this + 40) = v8;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 256;
  v9 = operator new[]();
  *((_QWORD *)this + 52) = 1024;
  *((_QWORD *)this + 53) = v9;
  *((_QWORD *)this + 54) = operator new[]();
  *((_QWORD *)this + 39) = 0;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_QWORD *)this + 64) = 0;
  *(_QWORD *)(*((_QWORD *)this + 40) + 128) = 1;
  Handle = SDWord_GetHandle(a3, "\\textproc:oov");
  *((_QWORD *)this + 55) = Handle;
  if (Handle)
  {
    *((_QWORD *)this + 41) = a2;
    LODWORD(v15) = 8;
    *((_QWORD *)&v15 + 1) = a3;
    TEnvManager::TEnvManager((uint64_t)v14, &v15, 1);
    TDataManager::getStringVar((uint64_t)v14, (uint64_t)"VocVersionID", v7);
  }
  tknPrintf("Error: OOV token is not part of wordlist.\n", v11);
  std::string::basic_string[abi:ne180100]<0>(v18, "");
  TException::TException(__dst, (__int128 *)v18);
  __dst[0].__vftable = (std::exception_vtbl *)&unk_1E5D16668;
  if (v17 >= 0)
    v12 = (std::exception_vtbl *)&__dst[1];
  else
    v12 = __dst[1].__vftable;
  conditionalAssert((const char *)v12, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/lexicon.cpp", 637);
  TException::~TException(__dst);
  if (v19 < 0)
    operator delete(v18[0]);
  exception = __cxa_allocate_exception(0x20uLL);
  std::string::basic_string[abi:ne180100]<0>(__dst, "");
  TException::TException(exception, (__int128 *)__dst);
  *exception = &unk_1E5D16668;
}

void sub_1ADD7D6B4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  void **v47;
  _QWORD *v48;
  _QWORD *v49;
  void *v50;
  int v51;
  char **v52;
  TDataSaver *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;

  if (a46 < 0)
  {
    operator delete(__p);
    if ((v51 & 1) == 0)
    {
LABEL_6:
      if (a24 < 0)
        operator delete(a19);
      TEnvManager::~TEnvManager(&a31);
      if (a2 == 1)
      {
        __cxa_begin_catch(a1);
        v55 = *(TDataSaver **)(v46 + 336);
        if (v55)
        {
          TDataSaver::~TDataSaver(v55);
          MEMORY[0x1AF44D190]();
        }
        v56 = *(_QWORD *)(v46 + 320);
        if (v56)
          (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
        v57 = *(_QWORD *)(v46 + 328);
        if (v57)
          (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
        v58 = *(_QWORD *)(v46 + 400);
        if (v58)
          MEMORY[0x1AF44D160](v58, 0x1000C8077774924);
        v59 = *(_QWORD *)(v46 + 424);
        if (v59)
          MEMORY[0x1AF44D160](v59, 0x80C80B8603338);
        v60 = *(_QWORD *)(v46 + 432);
        if (v60)
          MEMORY[0x1AF44D160](v60, 0x80C80B8603338);
        __cxa_rethrow();
      }
      TCollation::~TCollation((TCollation *)(v46 + 240));
      THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::~THashBase(v49);
      std::__tree<std::string>::destroy(a14, *v52);
      THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::~THashBase(v48);
      v61 = *a15;
      if (*a15)
      {
        *(_QWORD *)(v46 + 104) = v61;
        operator delete(v61);
      }
      if (*(char *)(v46 + 79) < 0)
        operator delete(*v47);
      TAllocator::clear((TAllocator *)v46);
      _Unwind_Resume(a1);
    }
  }
  else if (!v51)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v50);
  goto LABEL_6;
}

void sub_1ADD7D9A0()
{
  __cxa_end_catch();
  JUMPOUT(0x1ADD7D9A8);
}

void sub_1ADD7D9FC(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1ADD7DA08);
  __clang_call_terminate(a1);
}

void TLexicon::overrideCollation(TLexicon *this)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  std::vector<std::string>::pointer begin;
  uint64_t v11;
  unint64_t v12;
  const char *v13;
  _QWORD *v14;
  int v15;
  int v16;
  BOOL v17;
  uint64_t v19;
  std::vector<std::string>::pointer end;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  std::string *v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  unsigned int *v30;
  unsigned int v31;
  __int32 *v32;
  size_t v33;
  __int32 *v34;
  unint64_t v35;
  unsigned int **v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  unsigned int **v43;
  char *v44;
  char *v45;
  unsigned int **v46;
  unsigned int *v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int *v53;
  char **v54;
  void *__p[2];
  std::string::size_type v56;
  std::vector<std::string> v57;
  __int32 *v58;
  __int128 v59;
  _BYTE v60[825];
  char v61;
  std::__split_buffer<std::string> __v;
  char *__s;
  __int128 v64;
  _BYTE v65[256];
  char v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t *)*((_QWORD *)this + 12);
  v54 = (char **)((char *)this + 96);
  v3 = (uint64_t *)*((_QWORD *)this + 13);
  if (v3 == v2)
  {
    v2 = (uint64_t *)*((_QWORD *)this + 13);
  }
  else
  {
    v4 = 0;
    v5 = 1;
    do
    {
      v6 = v2[v5];
      if (v6)
      {
        MEMORY[0x1AF44D160](v6, 0x1000C8052888210);
        v2 = (uint64_t *)*((_QWORD *)this + 12);
        v3 = (uint64_t *)*((_QWORD *)this + 13);
      }
      ++v4;
      v5 += 2;
    }
    while (v4 < ((char *)v3 - (char *)v2) >> 4);
  }
  *((_QWORD *)this + 13) = v2;
  v7 = *((_QWORD *)this + 30);
  v8 = (unsigned int *)*((_QWORD *)this + 31);
  v58 = (__int32 *)v60;
  v59 = xmmword_1AE1418C0;
  v61 = 1;
  __s = v65;
  v64 = xmmword_1AE1418C0;
  v66 = 1;
  memset(&v57, 0, sizeof(v57));
  v9 = (uint64_t)v2;
  v51 = v7;
  if (v7)
  {
    v52 = 1;
    do
    {
      TBuffer<wchar_t>::resize((uint64_t)&v58, 0);
      std::vector<std::string>::resize(&v57, 0);
      v53 = v8;
      if (*v8)
      {
        do
        {
          TBuffer<char>::resize((uint64_t)&__s, 0);
          TLocaleInfo::unicodeToMultiByte((uint64_t)this + 224, v8, (uint64_t)&__s);
          begin = v57.__begin_;
          if (v57.__end_ == v57.__begin_)
            goto LABEL_27;
          v11 = 0;
          v12 = 1;
          do
          {
            v13 = (const char *)&begin[v11];
            if (SHIBYTE(begin[v11].__r_.__value_.__r.__words[2]) < 0)
              v13 = *(const char **)v13;
            v14 = (_QWORD *)*((_QWORD *)this + 11);
            v15 = *((_DWORD *)this + 20);
            if (*((_QWORD *)&v64 + 1) >= (unint64_t)v64)
            {
              if (v66)
              {
                LOBYTE(__v.__first_) = 0;
                TBuffer<char>::insert((uint64_t)&__s, *((unint64_t *)&v64 + 1), (char *)&__v, 1uLL);
                --*((_QWORD *)&v64 + 1);
              }
              else if ((_QWORD)v64)
              {
                __s[(_QWORD)v64 - 1] = 0;
              }
            }
            else
            {
              __s[*((_QWORD *)&v64 + 1)] = 0;
            }
            v16 = SDColl_StringCompare(v14, v15, v13, __s);
            begin = v57.__begin_;
            v17 = v12++ >= 0xAAAAAAAAAAAAAAABLL * (((char *)v57.__end_ - (char *)v57.__begin_) >> 3);
            ++v11;
          }
          while (!v17 && v16 != 0);
          if (v16)
          {
LABEL_27:
            v19 = 0;
            while (v8[v19++])
              ;
            TBuffer<wchar_t>::insert((uint64_t)&v58, *((unint64_t *)&v59 + 1), (int *)v8, v19 - 1);
            LODWORD(__v.__first_) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v58, *((unint64_t *)&v59 + 1), (int *)&__v, 1uLL);
            if (*((_QWORD *)&v64 + 1) >= (unint64_t)v64)
            {
              if (v66)
              {
                LOBYTE(__v.__first_) = 0;
                TBuffer<char>::insert((uint64_t)&__s, *((unint64_t *)&v64 + 1), (char *)&__v, 1uLL);
                --*((_QWORD *)&v64 + 1);
              }
              else if ((_QWORD)v64)
              {
                __s[(_QWORD)v64 - 1] = 0;
              }
            }
            else
            {
              __s[*((_QWORD *)&v64 + 1)] = 0;
            }
            std::string::basic_string[abi:ne180100]<0>(__p, __s);
            end = v57.__end_;
            if (v57.__end_ >= v57.__end_cap_.__value_)
            {
              v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)v57.__end_ - (char *)v57.__begin_) >> 3);
              v24 = v23 + 1;
              if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v57.__end_cap_.__value_ - (char *)v57.__begin_) >> 3) > v24)
                v24 = 0x5555555555555556 * (((char *)v57.__end_cap_.__value_ - (char *)v57.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v57.__end_cap_.__value_ - (char *)v57.__begin_) >> 3) >= 0x555555555555555)
                v25 = 0xAAAAAAAAAAAAAAALL;
              else
                v25 = v24;
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v57.__end_cap_;
              if (v25)
                v26 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v57.__end_cap_, v25);
              else
                v26 = 0;
              v27 = v26 + v23;
              __v.__first_ = v26;
              __v.__begin_ = v27;
              __v.__end_cap_.__value_ = &v26[v25];
              v28 = *(_OWORD *)__p;
              v27->__r_.__value_.__r.__words[2] = v56;
              *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
              __p[1] = 0;
              v56 = 0;
              __p[0] = 0;
              __v.__end_ = v27 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&v57, &__v);
              v29 = v57.__end_;
              std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
              v57.__end_ = v29;
              if (SHIBYTE(v56) < 0)
                operator delete(__p[0]);
            }
            else
            {
              v22 = *(_OWORD *)__p;
              v57.__end_->__r_.__value_.__r.__words[2] = v56;
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = v22;
              v57.__end_ = end + 1;
            }
          }
          v30 = &v8[wcslen((const __int32 *)v8)];
          v31 = v30[1];
          v8 = v30 + 1;
        }
        while (v31);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v57.__end_ - (char *)v57.__begin_) >> 3) >= 2)
      {
        LODWORD(__v.__first_) = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v58, *((unint64_t *)&v59 + 1), (int *)&__v, 1uLL);
        v8 = v53;
        if (*v53)
        {
          do
          {
            v32 = (__int32 *)operator new[]();
            v33 = *((_QWORD *)&v59 + 1);
            if (*((_QWORD *)&v59 + 1) >= (unint64_t)v59)
            {
              if (v61)
              {
                LODWORD(__v.__first_) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v58, *((unint64_t *)&v59 + 1), (int *)&__v, 1uLL);
                v34 = v58;
                v33 = --*((_QWORD *)&v59 + 1);
              }
              else
              {
                v34 = v58;
                if ((_QWORD)v59)
                  v58[(_QWORD)v59 - 1] = 0;
              }
            }
            else
            {
              v34 = v58;
              v58[*((_QWORD *)&v59 + 1)] = 0;
            }
            wmemcpy(v32, v34, v33);
            v36 = (unsigned int **)*((_QWORD *)this + 13);
            v35 = *((_QWORD *)this + 14);
            if ((unint64_t)v36 >= v35)
            {
              v38 = ((char *)v36 - *v54) >> 4;
              v39 = v38 + 1;
              if ((unint64_t)(v38 + 1) >> 60)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v40 = v35 - (_QWORD)*v54;
              if (v40 >> 3 > v39)
                v39 = v40 >> 3;
              if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
                v41 = 0xFFFFFFFFFFFFFFFLL;
              else
                v41 = v39;
              if (v41)
                v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 112, v41);
              else
                v42 = 0;
              v43 = (unsigned int **)&v42[16 * v38];
              *v43 = v8;
              v43[1] = (unsigned int *)v32;
              v45 = (char *)*((_QWORD *)this + 12);
              v44 = (char *)*((_QWORD *)this + 13);
              v46 = v43;
              if (v44 != v45)
              {
                do
                {
                  *((_OWORD *)v46 - 1) = *((_OWORD *)v44 - 1);
                  v46 -= 2;
                  v44 -= 16;
                }
                while (v44 != v45);
                v44 = *v54;
              }
              v37 = v43 + 2;
              *((_QWORD *)this + 12) = v46;
              *((_QWORD *)this + 13) = v43 + 2;
              *((_QWORD *)this + 14) = &v42[16 * v41];
              if (v44)
                operator delete(v44);
            }
            else
            {
              *v36 = v8;
              v36[1] = (unsigned int *)v32;
              v37 = v36 + 2;
            }
            *((_QWORD *)this + 13) = v37;
            v47 = &v8[wcslen((const __int32 *)v8)];
            v48 = v47[1];
            v8 = v47 + 1;
          }
          while (v48);
        }
      }
      ++v8;
      ++v52;
    }
    while (v52 <= v51);
    v9 = *((_QWORD *)this + 12);
    v2 = (uint64_t *)*((_QWORD *)this + 13);
  }
  v49 = 126 - 2 * __clz(((uint64_t)v2 - v9) >> 4);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)sortByFirst;
  if (v2 == (uint64_t *)v9)
    v50 = 0;
  else
    v50 = v49;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*,false>(v9, v2, (uint64_t (**)(uint64_t *, uint64_t *))&__v, v50, 1);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (v66 && __s != v65 && __s)
    MEMORY[0x1AF44D160]();
  if (v61 && v58 != (__int32 *)v60)
  {
    if (v58)
      MEMORY[0x1AF44D160]();
  }
}

void sub_1ADD7E08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  __p = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (LOBYTE(STACK[0x5C8]))
  {
    if (STACK[0x4B0] != a9 && STACK[0x4B0] != 0)
      MEMORY[0x1AF44D160]();
  }
  if (LOBYTE(STACK[0x480]) && a22 != a10)
  {
    if (a22)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

uint64_t TLexicon::validateLexicon(TLexicon *this)
{
  uint64_t result;
  unint64_t i;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  const char *v9;
  int *v10;
  int v11;
  int *v12;
  __int128 v13;
  _BYTE v14[1024];
  char v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  char v21[256];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  v18 = 0;
  v17 = 0;
  v16 = 0;
  SDVoc_GetWords(*((_QWORD **)this + 11), 1, "", "", 0, 0, &v19, &v17, &v18, (uint64_t)callBackMRECArrayReallocator, 0, &v16);
  result = v17;
  if (v17)
  {
    if (!v19)
      return MEMORY[0x1AF44D160]();
    for (i = 0; i < v19; ++i)
    {
      v4 = *(char **)(v17 + 8 * i);
      v5 = TStringParam::get((TStringParam *)(*((_QWORD *)this + 40) + 488));
      if (!TLexicon::applyMask((uint64_t)this, (uint64_t)v4, v5, 0))
      {
        if ((unint64_t)SDWord_GetName(*((void **)this + 11), v4, v21, 0x100uLL) < 0x101)
        {
          v12 = (int *)v14;
          v13 = xmmword_1AE1418C0;
          v15 = 1;
          v8 = TLocaleInfo::multiByteToUnicode((uint64_t)this + 224, (unsigned __int8 *)v21, (uint64_t)&v12);
          v9 = "Warning: '%s' : Can't convert to Unicode.\n";
          if ((v8 & 1) != 0)
            goto LABEL_15;
          if (*((_QWORD *)&v13 + 1) >= (unint64_t)v13)
          {
            if (v15)
            {
              v20 = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v12, *((unint64_t *)&v13 + 1), &v20, 1uLL);
              v10 = v12;
              --*((_QWORD *)&v13 + 1);
            }
            else
            {
              v10 = v12;
              if ((_QWORD)v13)
                v12[(_QWORD)v13 - 1] = 0;
            }
          }
          else
          {
            v10 = v12;
            v12[*((_QWORD *)&v13 + 1)] = 0;
          }
          v11 = TLexicon::checkName((uint64_t)this, v10, 0, 0xFFFFFFFFFFFFFFFFLL);
          v9 = "Warning: '%s' : Invalid word found in voc.\n";
          if (v11)
LABEL_15:
            tknPrintf(v9, v7, v21);
          if (v15 && v12 != (int *)v14)
          {
            if (v12)
              MEMORY[0x1AF44D160]();
          }
        }
        else
        {
          tknPrintf("Warning: The voc contains a >= %llu-byte word name, prefix is '%s'.\n", v6, 256, v21);
        }
      }
    }
    result = v17;
    if (v17)
      return MEMORY[0x1AF44D160]();
  }
  return result;
}

void sub_1ADD7E3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  if (LOBYTE(STACK[0x450]))
    TPatternManager::addArrayObject((uint64_t)va);
  _Unwind_Resume(a1);
}

void THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::resize(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  size_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  _QWORD *v11;
  const __int32 *v12;
  _QWORD *v13;
  size_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::findNextPrime(a2);
  v4 = v3;
  v5 = 8 * v3;
  v6 = (_QWORD *)operator new[]();
  v7 = v6;
  if (v4)
    bzero(v6, v5);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    for (i = 0; i != v9; ++i)
    {
      v11 = *(_QWORD **)(v8 + 8 * i);
      if (v11)
      {
        do
        {
          v13 = (_QWORD *)*v11;
          v12 = (const __int32 *)v11[1];
          v14 = wcslen(v12);
          v15 = 0;
          v16 = 4 * v14;
          if (4 * v14)
          {
            do
            {
              v17 = *(char *)v12;
              v12 = (const __int32 *)((char *)v12 + 1);
              v15 = 33 * v15 + v17;
              --v16;
            }
            while (v16);
          }
          *v11 = v7[v15 % v4];
          v7[v15 % v4] = v11;
          v11 = v13;
        }
        while (v13);
      }
    }
  }
  if (v8)
    MEMORY[0x1AF44D160](v8, 0x20C8093837F09);
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v4;
}

void TLexicon::~TLexicon(TLexicon *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ActiveConfigHandle;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  TLexicon *v32;
  uint64_t v33;
  uint64_t v34;
  TLexicon *v35;
  TLexicon *v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  TDataSaver *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;

  v2 = *((_QWORD *)this + 50);
  if (v2)
    MEMORY[0x1AF44D160](v2, 0x1000C8077774924);
  v3 = *((_QWORD *)this + 53);
  if (v3)
    MEMORY[0x1AF44D160](v3, 0x80C80B8603338);
  v4 = *((_QWORD *)this + 54);
  if (v4)
    MEMORY[0x1AF44D160](v4, 0x80C80B8603338);
  v5 = *((_QWORD *)this + 40);
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v5 + 136));
  v7 = *(int *)(v5 + 4 * TParam::getValidConfig((TParam *)(v5 + 136), ActiveConfigHandle) + 296);
  v8 = *(int *)(*((_QWORD *)this + 40) + 288);
  if (v7 > v8)
  {
    v9 = 0;
    v10 = v7 - v8;
    if (v10 <= 1)
      v11 = 1;
    else
      v11 = v10;
    do
    {
      v12 = *((_QWORD *)this + 44);
      v13 = *(_QWORD *)(v12 + 8 * v9);
      if (v13)
      {
        std::__tree<int>::destroy(*(_QWORD *)(v12 + 8 * v9), *(_QWORD **)(v13 + 8));
        MEMORY[0x1AF44D190](v13, 0x1020C4062D53EE8);
      }
      v14 = *((_QWORD *)this + 45);
      v15 = *(_QWORD *)(v14 + 8 * v9);
      if (v15)
      {
        std::__tree<int>::destroy(*(_QWORD *)(v14 + 8 * v9), *(_QWORD **)(v15 + 8));
        MEMORY[0x1AF44D190](v15, 0x1020C4062D53EE8);
      }
      v16 = *((_QWORD *)this + 5);
      v17 = *(_QWORD *)(v16 + 8 * v9);
      if (v17)
      {
        TAllocator::clear(*(TAllocator **)(v16 + 8 * v9));
        MEMORY[0x1AF44D190](v17, 0x1010C40CCBCF24ELL);
      }
      v18 = *((_QWORD *)this + 6);
      v19 = *(_QWORD *)(v18 + 8 * v9);
      if (v19)
      {
        TAllocator::clear(*(TAllocator **)(v18 + 8 * v9));
        MEMORY[0x1AF44D190](v19, 0x1010C40CCBCF24ELL);
      }
      ++v9;
    }
    while (v11 != v9);
    v20 = *((_QWORD *)this + 44);
    if (v20)
      MEMORY[0x1AF44D160](v20, 0x20C8093837F09);
    v21 = *((_QWORD *)this + 45);
    if (v21)
      MEMORY[0x1AF44D160](v21, 0x20C8093837F09);
    v22 = *((_QWORD *)this + 5);
    if (v22)
      MEMORY[0x1AF44D160](v22, 0x20C8093837F09);
    v23 = *((_QWORD *)this + 6);
    if (v23)
      MEMORY[0x1AF44D160](v23, 0x20C8093837F09);
  }
  v24 = *((_QWORD *)this + 25);
  if (v24 >= 1)
  {
    v25 = (_QWORD *)*((_QWORD *)this + 24);
    v26 = &v25[v24];
    while (1)
    {
      v27 = (_QWORD *)*v25;
      if (*v25)
        break;
      if (++v25 >= v26)
        goto LABEL_32;
    }
    do
    {
LABEL_65:
      v58 = (_QWORD *)v27[2];
      if (!*v58 || (MEMORY[0x1AF44D160](*v58, 0x1000C8052888210), v27[2]))
        MEMORY[0x1AF44D190]();
      v27 = (_QWORD *)*v27;
    }
    while (v27);
    v59 = v25 + 1;
    while (v59 < v26)
    {
      v60 = (_QWORD *)*v59++;
      v27 = v60;
      if (v60)
      {
        v25 = v59 - 1;
        goto LABEL_65;
      }
    }
  }
LABEL_32:
  v28 = *((_QWORD *)this + 17);
  if (v28 >= 1)
  {
    v29 = (_QWORD *)*((_QWORD *)this + 16);
    v30 = &v29[v28];
    while (1)
    {
      v31 = (_QWORD *)*v29;
      if (*v29)
        break;
      if (++v29 >= v30)
        goto LABEL_36;
    }
    do
    {
LABEL_73:
      v61 = v31[1];
      if (v61)
        MEMORY[0x1AF44D160](v61, 0x1000C8052888210);
      v62 = v31[2];
      if (v62)
      {
        v63 = *(_QWORD *)(v62 + 16);
        if (v63)
          MEMORY[0x1AF44D160](v63, 0x20C8093837F09);
        MEMORY[0x1AF44D190](v62, 0x1080C40925F9CD7);
      }
      v31 = (_QWORD *)*v31;
    }
    while (v31);
    v64 = v29 + 1;
    while (v64 < v30)
    {
      v65 = (_QWORD *)*v64++;
      v31 = v65;
      if (v65)
      {
        v29 = v64 - 1;
        goto LABEL_73;
      }
    }
  }
LABEL_36:
  v32 = (TLexicon *)*((_QWORD *)this + 20);
  if (v32 != (TLexicon *)((char *)this + 168))
  {
    do
    {
      v33 = *((_QWORD *)v32 + 7);
      if (v33)
      {
        v34 = *(_QWORD *)(v33 + 16);
        if (v34)
          MEMORY[0x1AF44D160](v34, 0x20C8093837F09);
        MEMORY[0x1AF44D190](v33, 0x1080C40925F9CD7);
      }
      v35 = (TLexicon *)*((_QWORD *)v32 + 1);
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = *(TLexicon **)v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (TLexicon *)*((_QWORD *)v32 + 2);
          v37 = *(_QWORD *)v36 == (_QWORD)v32;
          v32 = v36;
        }
        while (!v37);
      }
      v32 = v36;
    }
    while (v36 != (TLexicon *)((char *)this + 168));
  }
  v39 = *((_QWORD *)this + 12);
  v38 = *((_QWORD *)this + 13);
  if (v38 != v39)
  {
    v40 = 0;
    v41 = 8;
    do
    {
      v42 = *(_QWORD *)(v39 + v41);
      if (v42)
      {
        MEMORY[0x1AF44D160](v42, 0x1000C8052888210);
        v39 = *((_QWORD *)this + 12);
        v38 = *((_QWORD *)this + 13);
      }
      ++v40;
      v41 += 16;
    }
    while (v40 < (v38 - v39) >> 4);
  }
  v43 = *((_QWORD *)this + 40);
  v44 = TParam::getActiveConfigHandle((TParam *)(v43 + 21512));
  if (*(_BYTE *)(v43 + TParam::getValidConfig((TParam *)(v43 + 21512), v44) + 21664))
  {
    tknPrintString("-- TLexicon --\n");
    tknPrintf("  Clean calls   : %llu\n", v45, *((_QWORD *)this + 64));
    tknPrintString("findWord\n");
    tknPrintf("  Cache lookups : %llu\n", v46, *((_QWORD *)this + 56));
    tknPrintf("  Cache hits    : %llu\n", v47, *((_QWORD *)this + 59));
    tknPrintString("collationSearch\n");
    tknPrintf("  Cache lookups : %llu\n", v48, *((_QWORD *)this + 57));
    tknPrintf("  Cache hits    : %llu\n", v49, *((_QWORD *)this + 60));
    tknPrintf("  Iterations    : %llu\n", v50, *((_QWORD *)this + 62));
    tknPrintString("computeClones\n");
    tknPrintf("  Cache lookups : %llu\n", v51, *((_QWORD *)this + 58));
    tknPrintf("  Cache hits    : %llu\n", v52, *((_QWORD *)this + 61));
    tknPrintf("  Iterations    : %llu\n", v53, *((_QWORD *)this + 63));
  }
  v54 = (TDataSaver *)*((_QWORD *)this + 42);
  if (v54)
  {
    TDataSaver::~TDataSaver(v54);
    MEMORY[0x1AF44D190]();
  }
  v55 = *((_QWORD *)this + 40);
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = *((_QWORD *)this + 41);
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  TCollation::~TCollation((TLexicon *)((char *)this + 240));
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::~THashBase((_QWORD *)this + 23);
  std::__tree<std::string>::destroy((uint64_t)this + 160, *((char **)this + 21));
  THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::~THashBase((_QWORD *)this + 15);
  v57 = (void *)*((_QWORD *)this + 12);
  if (v57)
  {
    *((_QWORD *)this + 13) = v57;
    operator delete(v57);
  }
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  TAllocator::clear(this);
}

uint64_t TLexicon::checkName(uint64_t a1, int *a2, char a3, unint64_t a4)
{
  unint64_t v4;
  TParam *v8;
  uint64_t ActiveConfigHandle;
  unint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  __int32 *v13;
  __int32 *v14;
  unint64_t v15;
  __int32 *v16;
  __int32 v17;
  __int32 *v18;
  uint64_t v19;
  __int32 *v20;
  unsigned int *v21;
  _BOOL4 v22;
  uint64_t v23;
  __int32 *v24;
  char *v25;
  uint64_t Segment;
  uint64_t v27;
  int v28;
  int v29;
  unsigned __int8 v30;
  BOOL v31;
  char *v32;
  uint64_t v33;
  int **v34;
  int v35;
  int v36;
  char *v37;
  uint64_t v38;
  int **v39;
  int v40;
  TLocaleInfo *v41;
  int v42;
  _BOOL4 v44;
  TLocaleInfo *v45;
  char v46[112];
  char v47[112];
  __int32 *__s;
  __int128 v49;
  _BYTE v50[793];
  char v51;
  char v52;
  char *v53;
  __int128 v54;
  _BYTE v55[256];
  char v56;
  uint64_t v57;

  v4 = a4;
  v57 = *MEMORY[0x1E0C80C00];
  if (a4 == -1)
  {
    v8 = (TParam *)(*(_QWORD *)(a1 + 320) + 136);
    ActiveConfigHandle = TParam::getActiveConfigHandle(v8);
    v4 = *((int *)v8 + TParam::getValidConfig(v8, ActiveConfigHandle) + 40);
  }
  __s = (__int32 *)v50;
  v49 = xmmword_1AE1418C0;
  v51 = 1;
  TBuffer<wchar_t>::assign((uint64_t)&__s, a2);
  v10 = *((_QWORD *)&v49 + 1);
  v11 = v49;
  if (*((_QWORD *)&v49 + 1) >= (unint64_t)v49)
  {
    if (v51)
    {
      LODWORD(v53) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v49 + 1), (int *)&v53, 1uLL);
      v10 = --*((_QWORD *)&v49 + 1);
      v12 = (unsigned int *)__s;
      v11 = v49;
    }
    else
    {
      v12 = (unsigned int *)__s;
      if (!(_QWORD)v49)
        goto LABEL_11;
      __s[(_QWORD)v49 - 1] = 0;
    }
  }
  else
  {
    v12 = (unsigned int *)__s;
    __s[*((_QWORD *)&v49 + 1)] = 0;
  }
  if (v10 >= v11)
  {
    if (v51)
    {
      LODWORD(v53) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__s, v10, (int *)&v53, 1uLL);
      v13 = __s;
      --*((_QWORD *)&v49 + 1);
      goto LABEL_14;
    }
    if (v11)
      v12[v11 - 1] = 0;
  }
  else
  {
    v12[v10] = 0;
  }
LABEL_11:
  v13 = (__int32 *)v12;
LABEL_14:
  v14 = wcschr(v13, 92);
  if (!v14)
    goto LABEL_163;
  v15 = *((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1) >= (unint64_t)v49)
  {
    if (v51)
    {
      LODWORD(v53) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v49 + 1), (int *)&v53, 1uLL);
      v16 = __s;
      v15 = --*((_QWORD *)&v49 + 1);
    }
    else
    {
      v16 = __s;
      if ((_QWORD)v49)
        __s[(_QWORD)v49 - 1] = 0;
    }
  }
  else
  {
    v16 = __s;
    __s[*((_QWORD *)&v49 + 1)] = 0;
  }
  if (v14 == v16)
  {
    v17 = v14[1];
    if (v17)
      v18 = v14;
    else
      v18 = v14 + 1;
    if (v17 == 92)
      ++v14;
    else
      v14 = v18;
  }
  if (!*v14)
  {
LABEL_163:
    if (*v12)
    {
      LODWORD(v19) = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      goto LABEL_35;
    }
    goto LABEL_96;
  }
  if (v15 >= (unint64_t)v49)
  {
    if (v51)
    {
      LODWORD(v53) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__s, v15, (int *)&v53, 1uLL);
      --*((_QWORD *)&v49 + 1);
    }
    else if ((_QWORD)v49)
    {
      v16[(_QWORD)v49 - 1] = 0;
    }
  }
  else
  {
    v16[v15] = 0;
  }
  *v14 = 0;
  v20 = v14 + 1;
  v24 = wcschr(v20, 92);
  v22 = v24 != 0;
  if (!v24)
  {
    if (*v20)
    {
      v21 = 0;
LABEL_99:
      if (*v12)
      {
        LODWORD(v19) = 1;
      }
      else
      {
        v19 = 1;
        if (!*v20)
          goto LABEL_156;
      }
LABEL_35:
      v44 = v22;
      v53 = v55;
      v54 = xmmword_1AE1418C0;
      v56 = 1;
      v23 = a1 + 224;
      if (TLocaleInfo::unicodeToMultiByte(v23, v12, (uint64_t)&v53))
      {
        v19 = 2;
LABEL_152:
        if (v56 && v53 != v55 && v53)
          MEMORY[0x1AF44D160]();
        goto LABEL_156;
      }
      if (*((_QWORD *)&v54 + 1) >= (unint64_t)v54)
      {
        if (v56)
        {
          v47[0] = 0;
          TBuffer<char>::insert((uint64_t)&v53, *((unint64_t *)&v54 + 1), v47, 1uLL);
          --*((_QWORD *)&v54 + 1);
        }
        else if ((_QWORD)v54)
        {
          v53[(_QWORD)v54 - 1] = 0;
        }
      }
      else
      {
        v53[*((_QWORD *)&v54 + 1)] = 0;
      }
      v25 = v53;
      TSegmenter::TSegmenter(v47, v53, v23, 0);
      for (; *v25; v25 = *(char **)(v27 + 8))
      {
        Segment = TSegmenter::getSegment((TSegmenter *)v47, v25);
        v27 = Segment;
        v28 = *(_DWORD *)(Segment + 24);
        if (v28 == 5 || v4 >= 3 && *(_QWORD *)(Segment + 16))
        {
LABEL_92:
          v19 = 2;
          goto LABEL_151;
        }
        if (!v28)
        {
          v29 = **(_DWORD **)Segment;
          if ((v30 & 1) == 0
          {
            v45 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v45);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v45;
          }
          if (v29 <= 8202)
          {
            if (v29 != 32 && v29 != 160)
              continue;
          }
          else
          {
            v31 = v29 == 8203 || v29 == 65279;
            if (!v31 && v29 != 12288)
              continue;
          }
          if (*((_QWORD *)&v54 + 1) >= (unint64_t)v54)
          {
            if (v56)
            {
              v46[0] = 0;
              TBuffer<char>::insert((uint64_t)&v53, *((unint64_t *)&v54 + 1), v46, 1uLL);
              --*((_QWORD *)&v54 + 1);
            }
            else if ((_QWORD)v54)
            {
              v53[(_QWORD)v54 - 1] = 0;
            }
          }
          else
          {
            v53[*((_QWORD *)&v54 + 1)] = 0;
          }
          if (v25 != v53 || **(_BYTE **)(v27 + 8))
          {
            if (*((_QWORD *)&v54 + 1) >= (unint64_t)v54)
            {
              if (v56)
              {
                v46[0] = 0;
                TBuffer<char>::insert((uint64_t)&v53, *((unint64_t *)&v54 + 1), v46, 1uLL);
                --*((_QWORD *)&v54 + 1);
              }
              else if ((_QWORD)v54)
              {
                v53[(_QWORD)v54 - 1] = 0;
              }
            }
            else
            {
              v53[*((_QWORD *)&v54 + 1)] = 0;
            }
            if (v25 == v53 || !**(_BYTE **)(v27 + 8))
              goto LABEL_92;
          }
        }
      }
      if ((_DWORD)v19)
      {
        TBuffer<char>::resize((uint64_t)&v53, 0);
        if (TLocaleInfo::unicodeToMultiByte(v23, (unsigned int *)v20, (uint64_t)&v53))
        {
          v19 = 5;
          goto LABEL_151;
        }
        v32 = (char *)TBuffer<char>::c_str((uint64_t)&v53);
        TSegmenter::TSegmenter(v46, v32, v23, 0);
        if (*v32)
        {
          while (1)
          {
            v33 = TSegmenter::getSegment((TSegmenter *)v46, v32);
            v34 = (int **)v33;
            v35 = *(_DWORD *)(v33 + 24);
            if (v35 == 5 || v4 >= 3 && *(_QWORD *)(v33 + 16))
              break;
            if (!v35)
            {
              if (*((_QWORD *)&v54 + 1) >= (unint64_t)v54)
              {
                if (v56)
                {
                  v52 = 0;
                  v33 = TBuffer<char>::insert((uint64_t)&v53, *((unint64_t *)&v54 + 1), &v52, 1uLL);
                  --*((_QWORD *)&v54 + 1);
                }
                else if ((_QWORD)v54)
                {
                  v53[(_QWORD)v54 - 1] = 0;
                }
              }
              else
              {
                v53[*((_QWORD *)&v54 + 1)] = 0;
              }
              if (v32 == v53 || !*(_BYTE *)v34[1] || (*v34)[1])
                break;
              v36 = **v34;
              TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)v33);
              if (v36 <= 8202)
              {
                if (v36 != 32 && v36 != 160)
                  break;
              }
              else if (v36 != 8203 && v36 != 65279 && v36 != 12288)
              {
                break;
              }
            }
            v32 = (char *)v34[1];
            if (!*v32)
              goto LABEL_127;
          }
          TSegmenter::~TSegmenter((TSegmenter *)v46);
          v19 = 5;
          goto LABEL_151;
        }
LABEL_127:
        TSegmenter::~TSegmenter((TSegmenter *)v46);
      }
      if (v44)
      {
        TBuffer<char>::resize((uint64_t)&v53, 0);
        if (TLocaleInfo::unicodeToMultiByte(v23, v21, (uint64_t)&v53))
        {
LABEL_148:
          v19 = 3;
LABEL_151:
          TSegmenter::~TSegmenter((TSegmenter *)v47);
          goto LABEL_152;
        }
        v37 = (char *)TBuffer<char>::c_str((uint64_t)&v53);
        TSegmenter::TSegmenter(v46, v37, v23, 0);
        if (*v37)
        {
          while (1)
          {
            v38 = TSegmenter::getSegment((TSegmenter *)v46, v37);
            v39 = (int **)v38;
            v40 = *(_DWORD *)(v38 + 24);
            if (v40 == 5 || v4 >= 3 && (*(_QWORD *)(v38 + 16) & 0xFFFFFFFFFFFFFFFBLL) != 0)
              break;
            if (!v40)
            {
              v41 = (TLocaleInfo *)TBuffer<char>::c_str((uint64_t)&v53);
              if (v37 == (char *)v41 || !*(_BYTE *)v39[1] || (*v39)[1])
                break;
              v42 = **v39;
              TLocaleInfo::getGlobalLocaleInfo(v41);
              if (v42 <= 8202)
              {
                if (v42 != 32 && v42 != 160)
                  break;
              }
              else if (v42 != 8203 && v42 != 65279 && v42 != 12288)
              {
                break;
              }
            }
            v37 = (char *)v39[1];
            if (!*v37)
              goto LABEL_149;
          }
          TSegmenter::~TSegmenter((TSegmenter *)v46);
          goto LABEL_148;
        }
LABEL_149:
        TSegmenter::~TSegmenter((TSegmenter *)v46);
      }
      v19 = 0;
      goto LABEL_151;
    }
LABEL_96:
    v19 = 1;
    goto LABEL_156;
  }
  if (*((_QWORD *)&v49 + 1) >= (unint64_t)v49)
  {
    if (v51)
    {
      LODWORD(v53) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v49 + 1), (int *)&v53, 1uLL);
      --*((_QWORD *)&v49 + 1);
    }
    else if ((_QWORD)v49)
    {
      __s[(_QWORD)v49 - 1] = 0;
    }
  }
  else
  {
    __s[*((_QWORD *)&v49 + 1)] = 0;
  }
  *v24 = 0;
  v21 = (unsigned int *)(v24 + 1);
  if (wcschr((__int32 *)v21, 92))
    goto LABEL_96;
  v19 = 1;
  if (*v21 && (a3 & 1) == 0)
    goto LABEL_99;
LABEL_156:
  if (v51 && __s != (__int32 *)v50 && __s)
    MEMORY[0x1AF44D160]();
  return v19;
}

void sub_1ADD7F388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;
  unint64_t v44;

  MEMORY[0x1AF44D190](a11, 0x1070C40ADD13FEBLL);
  TSegmenter::~TSegmenter((TSegmenter *)&a28);
  if (LOBYTE(STACK[0x648]))
  {
    v44 = STACK[0x530];
    if (STACK[0x530] != a9)
    {
      if (v44)
        MEMORY[0x1AF44D160](v44, 0x1000C8077774924);
    }
  }
  if (LOBYTE(STACK[0x520]) && a42 != v42)
  {
    if (a42)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

void *callBackMRECArrayReallocator(void *a1, unint64_t a2, unint64_t a3, void *a4, unint64_t a5, void **a6, unint64_t *a7)
{
  void *result;

  *a7 = a3;
  result = (void *)operator new[]();
  *a6 = result;
  return result;
}

uint64_t TLexicon::findWord(uint64_t a1, __int32 *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  __int32 *Handle;
  __int32 *v8;
  const __int32 *v10[4];
  const __int32 *v11[2];
  char *v12;
  __int128 v13;
  _BYTE v14[256];
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  ++*(_QWORD *)(a1 + 312);
  ++*(_QWORD *)(a1 + 448);
  v4 = a1 + 184;
  v10[0] = a2;
  v10[1] = 0;
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::find(a1 + 184, v10, &v12);
  if (*((_QWORD *)&v13 + 1) && (v5 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 16)) != 0)
  {
    *(_QWORD *)(v5 + 24) = *(_QWORD *)(a1 + 312);
    ++*(_QWORD *)(a1 + 472);
  }
  else
  {
    v12 = v14;
    v13 = xmmword_1AE1418C0;
    v15 = 1;
    TLocaleInfo::unicodeToMultiByte(a1 + 224, (unsigned int *)a2, (uint64_t)&v12);
    v6 = *(void **)(a1 + 88);
    if (*((_QWORD *)&v13 + 1) >= (unint64_t)v13)
    {
      if (v15)
      {
        LOBYTE(v10[0]) = 0;
        TBuffer<char>::insert((uint64_t)&v12, *((unint64_t *)&v13 + 1), (char *)v10, 1uLL);
        --*((_QWORD *)&v13 + 1);
      }
      else if ((_QWORD)v13)
      {
        v12[(_QWORD)v13 - 1] = 0;
      }
    }
    else
    {
      v12[*((_QWORD *)&v13 + 1)] = 0;
    }
    Handle = (__int32 *)SDWord_GetHandle(v6, v12);
    if (Handle)
    {
      wcslen(a2);
      v8 = (__int32 *)operator new[]();
      wcscpy(v8, a2);
      v5 = operator new();
      TWord::TWord((__int32 **)v5, v8, (__int32 *)a1, Handle, *(__int32 **)(a1 + 312));
      v11[0] = *(const __int32 **)v5;
      v11[1] = (const __int32 *)v5;
      THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::insert(v4, v11, (uint64_t)v10);
    }
    else
    {
      v5 = 0;
    }
    if (v15 && v12 != v14 && v12)
      MEMORY[0x1AF44D160]();
  }
  return v5;
}

void sub_1ADD7F6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;
  uint64_t v52;

  MEMORY[0x1AF44D190](v51, 0x10F0C4030D8D1E0);
  if (a51 && a16 != v52)
  {
    if (a16)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

uint64_t TWordBlock::create(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;

  v6 = operator new();
  TWordBlock::TWordBlock(v6, a1, a2, a3);
  return v6;
}

void sub_1ADD7F798(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1080C40925F9CD7);
  _Unwind_Resume(a1);
}

BOOL TLexicon::findHeadClonesCollated(_QWORD *a1, __int32 *a2, _DWORD *a3, size_t a4, size_t a5, void **a6)
{
  _QWORD *v10;
  _QWORD *v11;
  __int32 ***v12;
  uint64_t v13;
  __int32 **v14;
  _BOOL4 v15;
  __int32 *v16;
  uint64_t v17;
  uint64_t v18;
  __int32 ***v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  __int32 ***v27;
  char *v28;
  char *v29;
  __int32 ***v30;
  __int128 v31;
  int v32;
  size_t v34;
  __int32 *v37;
  __int128 v38;
  _BYTE v39[1024];
  char v40;
  uint64_t v41[3];

  v34 = wcslen(a2);
  v37 = (__int32 *)v39;
  v38 = xmmword_1AE1418C0;
  v40 = 1;
  v10 = TLexicon::collationSearch(a1, (unsigned int *)a2);
  v11 = v10;
  if (v10[1])
  {
    v12 = (__int32 ***)v10[2];
    v13 = (uint64_t)(a1 + 28);
    do
    {
      v14 = *v12;
      v15 = TLexicon::applyMask((uint64_t)(*v12)[1], (uint64_t)(*v12)[2], a3, (uint64_t *)*v12 + 4);
      if (!v15)
      {
        TLexicon::getWrittenForm(v15, *v14, (uint64_t)&v37);
        if (*((_QWORD *)&v38 + 1) >= (unint64_t)v38)
        {
          if (v40)
          {
            LODWORD(v41[0]) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v37, *((unint64_t *)&v38 + 1), (int *)v41, 1uLL);
            v16 = v37;
            --*((_QWORD *)&v38 + 1);
          }
          else
          {
            v16 = v37;
            if ((_QWORD)v38)
              v37[(_QWORD)v38 - 1] = 0;
          }
        }
        else
        {
          v16 = v37;
          v37[*((_QWORD *)&v38 + 1)] = 0;
        }
        TLexiconScore::TLexiconScore(v41, a2, (unsigned int *)v16, a4, a5, v13);
        v18 = v41[0];
        v17 = v41[1];
        v19 = (__int32 ***)a6[1];
        v20 = (unint64_t)a6[2];
        if ((unint64_t)v19 >= v20)
        {
          v22 = ((char *)v19 - (_BYTE *)*a6) >> 5;
          v23 = v22 + 1;
          if ((unint64_t)(v22 + 1) >> 59)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v24 = v20 - (_QWORD)*a6;
          if (v24 >> 4 > v23)
            v23 = v24 >> 4;
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0)
            v25 = 0x7FFFFFFFFFFFFFFLL;
          else
            v25 = v23;
          if (v25)
            v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(a6 + 2), v25);
          else
            v26 = 0;
          v27 = (__int32 ***)&v26[32 * v22];
          *v27 = v14;
          v27[1] = (__int32 **)v34;
          v27[2] = (__int32 **)v18;
          v27[3] = (__int32 **)v17;
          v29 = (char *)*a6;
          v28 = (char *)a6[1];
          v30 = v27;
          if (v28 != *a6)
          {
            do
            {
              v31 = *((_OWORD *)v28 - 1);
              *((_OWORD *)v30 - 2) = *((_OWORD *)v28 - 2);
              *((_OWORD *)v30 - 1) = v31;
              v30 -= 4;
              v28 -= 32;
            }
            while (v28 != v29);
            v28 = (char *)*a6;
          }
          v21 = v27 + 4;
          *a6 = v30;
          a6[1] = v27 + 4;
          a6[2] = &v26[32 * v25];
          if (v28)
            operator delete(v28);
        }
        else
        {
          *v19 = v14;
          v19[1] = (__int32 **)v34;
          v21 = v19 + 4;
          v19[2] = (__int32 **)v18;
          v19[3] = (__int32 **)v17;
        }
        a6[1] = v21;
      }
      ++v12;
    }
    while (v12 != (__int32 ***)(v11[2] + 8 * v11[1]));
  }
  v32 = *((unsigned __int8 *)v11 + 24);
  if (v40 && v37 != (__int32 *)v39 && v37)
    MEMORY[0x1AF44D160]();
  return v32 != 0;
}

void sub_1ADD7FA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (LOBYTE(STACK[0x440]))
  {
    if (a14 != a9 && a14 != 0)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

_QWORD *TLexicon::collationSearch(_QWORD *a1, unsigned int *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  void **v12;
  __int32 *v13;
  __int32 *v14;
  void *__p[2];
  char v18;
  uint64_t v19;
  __int32 *v20;
  __int128 v21;
  _BYTE v22[833];
  char v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int32 *v29;
  __int128 v30;
  _BYTE v31[1024];
  char v32;

  ++a1[39];
  ++a1[57];
  v29 = (__int32 *)v31;
  v30 = xmmword_1AE1418C0;
  v32 = 1;
  TCollation::collate(a1 + 30, a2, (uint64_t)&v29);
  v20 = v29;
  *(_QWORD *)&v21 = 0;
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::find((size_t)(a1 + 15), (const __int32 **)&v20, &v27);
  if (v28)
  {
    v4 = *(_QWORD **)(v28 + 16);
    v5 = a1[39];
    *v4 = v5;
    v6 = v4[1];
    if (v6)
    {
      v7 = (uint64_t *)v4[2];
      v8 = 8 * v6;
      do
      {
        v9 = *v7++;
        *(_QWORD *)(v9 + 24) = v5;
        v8 -= 8;
      }
      while (v8);
    }
    ++a1[60];
  }
  else
  {
    v25 = 0;
    v24 = 0;
    v26 = 0;
    if (!wcschr((__int32 *)a2, 92) || !wcscmp((const __int32 *)a2, dword_1AE17DC84))
    {
      if (a1[12] == a1[13])
      {
        v10 = TLexicon::collationSearchInternal((uint64_t)a1, a2, &v24, 0, 0, 0);
      }
      else
      {
        v21 = xmmword_1AE1418C0;
        v23 = 1;
        v19 = 100;
        v20 = (__int32 *)v22;
        v10 = TLexicon::collationSearchRec((uint64_t)a1, (const __int32 *)a2, &v24, (uint64_t)&v20, &v19);
        if (!v19)
        {
          loggableUnicode(a2, __p);
          v12 = v18 >= 0 ? __p : (void **)__p[0];
          tknPrintf("Warning: '%s' : Ran over 100 voc searches due to mismatched collation tables. Giving up.\n", v11, v12);
          if (v18 < 0)
            operator delete(__p[0]);
        }
        if (v23 && v20 != (__int32 *)v22 && v20)
          MEMORY[0x1AF44D160]();
      }
    }
    else
    {
      v10 = 0;
    }
    v13 = (__int32 *)operator new[]();
    if (*((_QWORD *)&v30 + 1) >= (unint64_t)v30)
    {
      if (v32)
      {
        LODWORD(v20) = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v29, *((unint64_t *)&v30 + 1), (int *)&v20, 1uLL);
        v14 = v29;
        --*((_QWORD *)&v30 + 1);
      }
      else
      {
        v14 = v29;
        if ((_QWORD)v30)
          v29[(_QWORD)v30 - 1] = 0;
      }
    }
    else
    {
      v14 = v29;
      v29[*((_QWORD *)&v30 + 1)] = 0;
    }
    wcscpy(v13, v14);
    v4 = (_QWORD *)TWordBlock::create((uint64_t)&v24, a1[39], v10);
    __p[0] = v13;
    __p[1] = v4;
    THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::insert((uint64_t)(a1 + 15), (const __int32 **)__p, (uint64_t)&v20);
    if (v24)
    {
      v25 = v24;
      operator delete(v24);
    }
  }
  if (v32)
  {
    if (v29 != (__int32 *)v31 && v29 != 0)
      MEMORY[0x1AF44D160]();
  }
  return v4;
}

void sub_1ADD7FD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  void *v23;

  if (a18 < 0)
    operator delete(__p);
  if (LOBYTE(STACK[0x458]) && a20 != v21 && a20)
    MEMORY[0x1AF44D160]();
  v23 = (void *)STACK[0x460];
  if (STACK[0x460])
  {
    STACK[0x468] = (unint64_t)v23;
    operator delete(v23);
  }
  if (LOBYTE(STACK[0x8A8]))
  {
    if (STACK[0x490] != v20 && STACK[0x490] != 0)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

uint64_t TLexicon::makeScore(uint64_t a1, const __int32 *a2, unsigned int *a3, size_t a4, size_t a5)
{
  uint64_t v6;

  TLexiconScore::TLexiconScore(&v6, a2, a3, a4, a5, a1 + 224);
  return v6;
}

BOOL TLexicon::findHeadClonesCollated(_QWORD *a1, unsigned int *a2, _QWORD *a3, unint64_t a4, size_t a5, size_t a6, void **a7)
{
  unsigned int *v10;
  _QWORD *v12;
  _QWORD *v13;
  __int32 ***v14;
  uint64_t v15;
  __int32 **v16;
  _BOOL4 v17;
  __int32 *v18;
  uint64_t v19;
  uint64_t v20;
  __int32 ***v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  __int32 ***v33;
  char *v34;
  char *v35;
  __int32 ***v36;
  __int128 v37;
  int v38;
  _QWORD *v40;
  size_t v41;
  __int32 *v44;
  __int128 v45;
  _BYTE v46[1024];
  char v47;
  uint64_t v48[3];

  v10 = a2;
  v41 = wcslen((const __int32 *)a2);
  v44 = (__int32 *)v46;
  v45 = xmmword_1AE1418C0;
  v47 = 1;
  v12 = TLexicon::collationSearch(a1, v10);
  v13 = v12;
  if (v12[1])
  {
    v14 = (__int32 ***)v12[2];
    v15 = (uint64_t)(a1 + 28);
    v40 = v12;
    do
    {
      v16 = *v14;
      v17 = TLexicon::checkBits((uint64_t)(*v14)[1], (uint64_t)(*v14)[2], a3, a4, (uint64_t *)*v14 + 4);
      if (v17)
      {
        TLexicon::getWrittenForm(v17, *v16, (uint64_t)&v44);
        if (*((_QWORD *)&v45 + 1) >= (unint64_t)v45)
        {
          if (v47)
          {
            LODWORD(v48[0]) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v44, *((unint64_t *)&v45 + 1), (int *)v48, 1uLL);
            v18 = v44;
            --*((_QWORD *)&v45 + 1);
          }
          else
          {
            v18 = v44;
            if ((_QWORD)v45)
              v44[(_QWORD)v45 - 1] = 0;
          }
        }
        else
        {
          v18 = v44;
          v44[*((_QWORD *)&v45 + 1)] = 0;
        }
        TLexiconScore::TLexiconScore(v48, (const __int32 *)v10, (unsigned int *)v18, a5, a6, v15);
        v20 = v48[0];
        v19 = v48[1];
        v21 = (__int32 ***)a7[1];
        v22 = (unint64_t)a7[2];
        if ((unint64_t)v21 >= v22)
        {
          v24 = a3;
          v25 = a4;
          v26 = v10;
          v27 = v15;
          v28 = ((char *)v21 - (_BYTE *)*a7) >> 5;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 59)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v30 = v22 - (_QWORD)*a7;
          if (v30 >> 4 > v29)
            v29 = v30 >> 4;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0)
            v31 = 0x7FFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          if (v31)
            v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)(a7 + 2), v31);
          else
            v32 = 0;
          v33 = (__int32 ***)&v32[32 * v28];
          *v33 = v16;
          v33[1] = (__int32 **)v41;
          v33[2] = (__int32 **)v20;
          v33[3] = (__int32 **)v19;
          v35 = (char *)*a7;
          v34 = (char *)a7[1];
          v36 = v33;
          v15 = v27;
          if (v34 != *a7)
          {
            do
            {
              v37 = *((_OWORD *)v34 - 1);
              *((_OWORD *)v36 - 2) = *((_OWORD *)v34 - 2);
              *((_OWORD *)v36 - 1) = v37;
              v36 -= 4;
              v34 -= 32;
            }
            while (v34 != v35);
            v34 = (char *)*a7;
          }
          v10 = v26;
          v23 = v33 + 4;
          *a7 = v36;
          a7[1] = v33 + 4;
          a7[2] = &v32[32 * v31];
          a4 = v25;
          if (v34)
            operator delete(v34);
          a3 = v24;
          v13 = v40;
        }
        else
        {
          *v21 = v16;
          v21[1] = (__int32 **)v41;
          v23 = v21 + 4;
          v21[2] = (__int32 **)v20;
          v21[3] = (__int32 **)v19;
        }
        a7[1] = v23;
      }
      ++v14;
    }
    while (v14 != (__int32 ***)(v13[2] + 8 * v13[1]));
  }
  v38 = *((unsigned __int8 *)v13 + 24);
  if (v47 && v44 != (__int32 *)v46 && v44)
    MEMORY[0x1AF44D160]();
  return v38 != 0;
}

void sub_1ADD800D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (LOBYTE(STACK[0x450]))
  {
    if (a16 != a10 && a16 != 0)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

void TLexicon::findHeadClonesCollatedPrefix(_QWORD *a1, char *a2, TSegmenter *a3, _DWORD *a4, size_t a5, size_t a6, void **a7)
{
  char *v9;
  uint64_t Segment;
  const __int32 **v11;
  int v12;
  uint64_t v13;
  int *v14;
  unsigned int *v16;
  const __int32 *v17;
  int v18;
  unsigned __int8 v19;
  _QWORD *v20;
  int v21;
  unsigned __int8 v22;
  BOOL v23;
  uint64_t v24;
  void **v25;
  __int32 v26;
  unsigned __int8 v27;
  uint64_t v29;
  __int32 ***v30;
  __int32 **v31;
  __int32 **v32;
  _BOOL4 v33;
  const __int32 *v34;
  __int32 *v35;
  __int32 **v36;
  __int32 **v37;
  __int32 ***v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  __int32 ***v46;
  char *v47;
  char *v48;
  __int32 ***v49;
  __int128 v50;
  TLocaleInfo *v51;
  TLocaleInfo *v52;
  TLocaleInfo *v53;
  uint64_t v56;
  char v57;
  uint64_t v59;
  void *__p[2];
  char v64;
  __int32 *v65;
  __int128 v66;
  _BYTE v67[785];
  char v68;
  int v69[2];
  __int128 v70;
  _BYTE v71[1024];
  char v72;

  v9 = a2;
  v57 = 0;
  *(_QWORD *)v69 = v71;
  v70 = xmmword_1AE1418C0;
  v72 = 1;
  v65 = (__int32 *)v67;
  v66 = xmmword_1AE1418C0;
  v68 = 1;
  v59 = (uint64_t)(a1 + 28);
  v56 = (uint64_t)(a7 + 2);
  while (1)
  {
    Segment = TSegmenter::getSegment(a3, v9);
    v11 = (const __int32 **)Segment;
    if (!Segment)
      break;
    v12 = *(_DWORD *)(Segment + 24);
    if (v12 == 5)
      break;
    v9 = *(char **)(Segment + 8);
    if (v12)
    {
      v13 = 0;
      v14 = *(int **)Segment;
      while (v14[v13++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)v69, *((unint64_t *)&v70 + 1), v14, v13 - 1);
LABEL_8:
      if (*((_QWORD *)&v70 + 1) > 0xFFuLL)
        break;
      if (*((_QWORD *)&v70 + 1) >= (unint64_t)v70)
      {
        if (v72)
        {
          LODWORD(__p[0]) = 0;
          TBuffer<wchar_t>::insert((uint64_t)v69, *((unint64_t *)&v70 + 1), (int *)__p, 1uLL);
          v16 = *(unsigned int **)v69;
          --*((_QWORD *)&v70 + 1);
        }
        else
        {
          v16 = *(unsigned int **)v69;
          if ((_QWORD)v70)
            *(_DWORD *)(*(_QWORD *)v69 + 4 * v70 - 4) = 0;
        }
      }
      else
      {
        v16 = *(unsigned int **)v69;
        *(_DWORD *)(*(_QWORD *)v69 + 4 * *((_QWORD *)&v70 + 1)) = 0;
      }
      v20 = TLexicon::collationSearch(a1, v16);
      if (!v20[1])
        goto LABEL_88;
      v21 = *(_DWORD *)(*(_QWORD *)v69 + 4 * *((_QWORD *)&v70 + 1) - 4);
      if ((v22 & 1) == 0
      {
        v51 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v51);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v51;
      }
      if (v21 <= 8202)
      {
        if (v21 == 32 || v21 == 160)
          goto LABEL_35;
      }
      else
      {
        v23 = v21 == 8203 || v21 == 65279;
        if (v23 || v21 == 12288)
        {
LABEL_35:
          loggableUnicode(**(unsigned int ***)v20[2], __p);
          v25 = __p;
          if (v64 < 0)
            v25 = (void **)__p[0];
          tknPrintf("Warning: '%s' : found a match that ends with a space. Ignored.\n", v24, v25);
          if (v64 < 0)
            operator delete(__p[0]);
          goto LABEL_88;
        }
      }
      if (v20[1])
      {
        v30 = (__int32 ***)v20[2];
        v31 = (__int32 **)(v9 - a2);
        do
        {
          v32 = *v30;
          v33 = TLexicon::applyMask((uint64_t)(*v30)[1], (uint64_t)(*v30)[2], a4, (uint64_t *)*v30 + 4);
          if (!v33)
          {
            TLexicon::getWrittenForm(v33, *v32, (uint64_t)&v65);
            if (*((_QWORD *)&v70 + 1) >= (unint64_t)v70)
            {
              if (v72)
              {
                LODWORD(__p[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)v69, *((unint64_t *)&v70 + 1), (int *)__p, 1uLL);
                v34 = *(const __int32 **)v69;
                --*((_QWORD *)&v70 + 1);
              }
              else
              {
                v34 = *(const __int32 **)v69;
                if ((_QWORD)v70)
                  *(_DWORD *)(*(_QWORD *)v69 + 4 * v70 - 4) = 0;
              }
            }
            else
            {
              v34 = *(const __int32 **)v69;
              *(_DWORD *)(*(_QWORD *)v69 + 4 * *((_QWORD *)&v70 + 1)) = 0;
            }
            if (*((_QWORD *)&v66 + 1) >= (unint64_t)v66)
            {
              if (v68)
              {
                LODWORD(__p[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v65, *((unint64_t *)&v66 + 1), (int *)__p, 1uLL);
                v35 = v65;
                --*((_QWORD *)&v66 + 1);
              }
              else
              {
                v35 = v65;
                if ((_QWORD)v66)
                  v65[(_QWORD)v66 - 1] = 0;
              }
            }
            else
            {
              v35 = v65;
              v65[*((_QWORD *)&v66 + 1)] = 0;
            }
            TLexiconScore::TLexiconScore((uint64_t *)__p, v34, (unsigned int *)v35, a5, a6, v59);
            v36 = (__int32 **)__p[0];
            v37 = (__int32 **)__p[1];
            v38 = (__int32 ***)a7[1];
            v39 = (unint64_t)a7[2];
            if ((unint64_t)v38 >= v39)
            {
              v41 = ((char *)v38 - (_BYTE *)*a7) >> 5;
              v42 = v41 + 1;
              if ((unint64_t)(v41 + 1) >> 59)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v43 = v39 - (_QWORD)*a7;
              if (v43 >> 4 > v42)
                v42 = v43 >> 4;
              if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFE0)
                v44 = 0x7FFFFFFFFFFFFFFLL;
              else
                v44 = v42;
              if (v44)
                v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v56, v44);
              else
                v45 = 0;
              v46 = (__int32 ***)&v45[32 * v41];
              *v46 = v32;
              v46[1] = v31;
              v46[2] = v36;
              v46[3] = v37;
              v48 = (char *)*a7;
              v47 = (char *)a7[1];
              v49 = v46;
              if (v47 != *a7)
              {
                do
                {
                  v50 = *((_OWORD *)v47 - 1);
                  *((_OWORD *)v49 - 2) = *((_OWORD *)v47 - 2);
                  *((_OWORD *)v49 - 1) = v50;
                  v49 -= 4;
                  v47 -= 32;
                }
                while (v47 != v48);
                v47 = (char *)*a7;
              }
              v40 = v46 + 4;
              *a7 = v49;
              a7[1] = v46 + 4;
              a7[2] = &v45[32 * v44];
              if (v47)
                operator delete(v47);
            }
            else
            {
              *v38 = v32;
              v38[1] = v31;
              v40 = v38 + 4;
              v38[2] = v36;
              v38[3] = v37;
            }
            a7[1] = v40;
          }
          ++v30;
        }
        while (v30 != (__int32 ***)(v20[2] + 8 * v20[1]));
      }
LABEL_88:
      if (!*((_BYTE *)v20 + 24))
        break;
    }
    else
    {
      if (!*((_QWORD *)&v70 + 1))
        break;
      v17 = *(const __int32 **)Segment;
      v18 = **(_DWORD **)Segment;
      if (v18 == 9)
        break;
      if (*(_DWORD *)(*(_QWORD *)v69 + 4 * *((_QWORD *)&v70 + 1) - 4) == 32)
        goto LABEL_42;
      if ((v19 & 1) == 0
      {
        v53 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v53);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v53;
      }
      if (v18 <= 8202)
      {
        if (v18 == 32 || v18 == 160)
        {
LABEL_41:
          v17 = *v11;
          if (wcslen(*v11) > 2)
            break;
          goto LABEL_42;
        }
      }
      else if (v18 == 8203 || v18 == 12288 || v18 == 65279)
      {
        goto LABEL_41;
      }
      v17 = *v11;
LABEL_42:
      v26 = *v17;
      if ((v27 & 1) == 0
      {
        v52 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v52);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v52;
      }
      if (v26 != 13 && v26 != 10)
        goto LABEL_53;
      if ((v57 & 1) != 0)
        break;
      v57 = 1;
      if (*(_DWORD *)(*(_QWORD *)v69 + 4 * *((_QWORD *)&v70 + 1) - 4) != 45)
      {
        v29 = TSegmenter::getSegment(a3, v9);
        if (!v29 || *(_DWORD *)(v29 + 24) == 5)
          break;
        v57 = 1;
        if (**(_DWORD **)v29 != 45)
        {
LABEL_53:
          if (*(_DWORD *)(*(_QWORD *)v69 + 4 * *((_QWORD *)&v70 + 1) - 4) != 32)
          {
            TBuffer<wchar_t>::insert((uint64_t)v69, *((unint64_t *)&v70 + 1), (int *)&unk_1AE17DC7C, 1uLL);
            goto LABEL_8;
          }
        }
      }
    }
  }
  if (v68)
  {
    if (v65 != (__int32 *)v67 && v65 != 0)
      MEMORY[0x1AF44D160]();
  }
  if (v72 && *(_BYTE **)v69 != v71)
  {
    if (*(_QWORD *)v69)
      MEMORY[0x1AF44D160]();
  }
}

void sub_1ADD807A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  unint64_t v27;

  MEMORY[0x1AF44D190](v24, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x490]))
  {
    if (a24 != a12 && a24 != 0)
      MEMORY[0x1AF44D160]();
  }
  if (LOBYTE(STACK[0x8B0]))
  {
    v27 = STACK[0x498];
    if (STACK[0x498] != a13)
    {
      if (v27)
        MEMORY[0x1AF44D160](v27, 0x1000C8052888210);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sortByFirst(const __int32 **a1, const __int32 **a2)
{
  return wcscmp(*a1, *a2) >> 31;
}

BOOL TLexicon::collationSearchInternal(uint64_t a1, unsigned int *a2, void **a3, _DWORD *a4, int a5, unint64_t a6)
{
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  char *v15;
  unint64_t v16;
  __int32 *v17;
  char *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int32 *v22;
  unint64_t v23;
  unint64_t v24;
  int *v25;
  void *v26;
  const __int32 *v27;
  uint64_t v28;
  __int32 *v29;
  const __int32 *v30;
  unint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v44;
  void *p_p;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v51;
  char *v55;
  size_t v56;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  __int128 v62;
  _BYTE v63[785];
  char v64;
  void *__p;
  __int128 v66;
  _BYTE v67[785];
  char v68;
  int *v69;
  __int128 v70;
  _BYTE v71[1024];
  char v72;
  unsigned __int8 v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  __int32 *v77;
  uint64_t v78;
  char v79[9];
  char *v80;
  __int128 v81;
  _BYTE v82[256];
  char v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v11 = v82;
  v80 = v82;
  v81 = xmmword_1AE1418C0;
  v83 = 1;
  v12 = a1 + 224;
  TLocaleInfo::unicodeToMultiByte(a1 + 224, a2, (uint64_t)&v80);
  v76 = 0;
  v75 = 0;
  v74 = 0;
  v73 = 0;
  v13 = *(_QWORD **)(a1 + 88);
  v14 = *(_DWORD *)(a1 + 80);
  if (*((_QWORD *)&v81 + 1) >= (unint64_t)v81)
  {
    if (v83)
    {
      LOBYTE(v69) = 0;
      TBuffer<char>::insert((uint64_t)&v80, *((unint64_t *)&v81 + 1), (char *)&v69, 1uLL);
      --*((_QWORD *)&v81 + 1);
    }
    else if ((_QWORD)v81)
    {
      v80[(_QWORD)v81 - 1] = 0;
    }
  }
  else
  {
    v80[*((_QWORD *)&v81 + 1)] = 0;
  }
  if (a5)
    v15 = "";
  else
    v15 = "\\";
  SDVoc_GetWords(v13, v14, v80, v15, *(_QWORD *)(a1 + 432), *(_QWORD *)(a1 + 416), &v76, &v74, &v75, (uint64_t)callBackMRECArrayReallocator, 0, &v73);
  v69 = (int *)v71;
  v70 = xmmword_1AE1418C0;
  v72 = 1;
  if (v76)
  {
    v16 = 0;
    v59 = 0;
    v60 = 0;
    v58 = (_QWORD *)(a1 + 240);
    v56 = a1 + 184;
    do
    {
      ++*(_QWORD *)(a1 + 496);
      v17 = *(__int32 **)(v74 + 8 * v16);
      v18 = TStringParam::get((TStringParam *)(*(_QWORD *)(a1 + 320) + 488));
      if (!TLexicon::applyMask(a1, (uint64_t)v17, v18, 0) && (!a4 || !TLexicon::applyMask(a1, (uint64_t)v17, a4, 0)))
      {
        if ((unint64_t)SDWord_GetName(*(void **)(a1 + 88), (char *)v17, v79, 0x100uLL) < 0x101)
        {
          __p = v67;
          v66 = xmmword_1AE1418C0;
          v68 = 1;
          v20 = TLocaleInfo::multiByteToUnicode(v12, (unsigned __int8 *)v79, (uint64_t)&__p);
          if (v20)
          {
            tknPrintf("Warning: '%s' : Can't convert to Unicode. Ignored.\n", v21, v79);
          }
          else
          {
            if (!a6)
              goto LABEL_31;
            v61 = v63;
            v62 = xmmword_1AE1418C0;
            v64 = 1;
            if (*((_QWORD *)&v66 + 1) >= (unint64_t)v66)
            {
              if (v68)
              {
                LODWORD(v77) = 0;
                v20 = TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v66 + 1), (int *)&v77, 1uLL);
                v22 = (__int32 *)__p;
                --*((_QWORD *)&v66 + 1);
              }
              else
              {
                v22 = (__int32 *)__p;
                if ((_QWORD)v66)
                  *((_DWORD *)__p + v66 - 1) = 0;
              }
            }
            else
            {
              v22 = (__int32 *)__p;
              *((_DWORD *)__p + *((_QWORD *)&v66 + 1)) = 0;
            }
            TLexicon::getWrittenForm(v20, v22, (uint64_t)&v61);
            v23 = *((_QWORD *)&v62 + 1);
            if (v64 && v61 != v63 && v61)
              MEMORY[0x1AF44D160]();
            if (v23 <= a6)
            {
LABEL_31:
              v24 = *((_QWORD *)&v70 + 1);
              if (!*((_QWORD *)&v70 + 1))
              {
                TCollation::collate(v58, a2, (uint64_t)&v69);
                v24 = *((_QWORD *)&v70 + 1);
              }
              if (v24 >= (unint64_t)v70)
              {
                if (v72)
                {
                  LODWORD(v61) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&v69, v24, (int *)&v61, 1uLL);
                  v25 = v69;
                  --*((_QWORD *)&v70 + 1);
                }
                else
                {
                  v25 = v69;
                  if ((_QWORD)v70)
                    v69[(_QWORD)v70 - 1] = 0;
                }
              }
              else
              {
                v25 = v69;
                v69[v24] = 0;
              }
              if (*((_QWORD *)&v66 + 1) >= (unint64_t)v66)
              {
                if (v68)
                {
                  LODWORD(v61) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v66 + 1), (int *)&v61, 1uLL);
                  v26 = __p;
                  --*((_QWORD *)&v66 + 1);
                }
                else
                {
                  v26 = __p;
                  if ((_QWORD)v66)
                    *((_DWORD *)__p + v66 - 1) = 0;
                }
              }
              else
              {
                v26 = __p;
                *((_DWORD *)__p + *((_QWORD *)&v66 + 1)) = 0;
              }
              if (!TCollation::collprefixcmp(v58, v25, (uint64_t)v26))
              {
                v55 = v11;
                if (*((_QWORD *)&v66 + 1) >= (unint64_t)v66)
                {
                  if (v68)
                  {
                    LODWORD(v61) = 0;
                    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v66 + 1), (int *)&v61, 1uLL);
                    v27 = (const __int32 *)__p;
                    --*((_QWORD *)&v66 + 1);
                  }
                  else
                  {
                    v27 = (const __int32 *)__p;
                    if ((_QWORD)v66)
                      *((_DWORD *)__p + v66 - 1) = 0;
                  }
                }
                else
                {
                  v27 = (const __int32 *)__p;
                  *((_DWORD *)__p + *((_QWORD *)&v66 + 1)) = 0;
                }
                v77 = (__int32 *)v27;
                v78 = 0;
                THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::find(v56, (const __int32 **)&v77, &v61);
                if (!*((_QWORD *)&v62 + 1) || (v28 = *(_QWORD *)(*((_QWORD *)&v62 + 1) + 16)) == 0)
                {
                  v29 = (__int32 *)operator new[]();
                  if (*((_QWORD *)&v66 + 1) >= (unint64_t)v66)
                  {
                    if (v68)
                    {
                      LODWORD(v61) = 0;
                      TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v66 + 1), (int *)&v61, 1uLL);
                      v30 = (const __int32 *)__p;
                      --*((_QWORD *)&v66 + 1);
                    }
                    else
                    {
                      v30 = (const __int32 *)__p;
                      if ((_QWORD)v66)
                        *((_DWORD *)__p + v66 - 1) = 0;
                    }
                  }
                  else
                  {
                    v30 = (const __int32 *)__p;
                    *((_DWORD *)__p + *((_QWORD *)&v66 + 1)) = 0;
                  }
                  wcscpy(v29, v30);
                  v28 = operator new();
                  TWord::TWord((__int32 **)v28, v29, (__int32 *)a1, v17, *(__int32 **)(a1 + 312));
                  v77 = *(__int32 **)v28;
                  v78 = v28;
                  THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::insert(v56, (const __int32 **)&v77, (uint64_t)&v61);
                }
                ++v60;
                if ((*(_BYTE *)(v28 + 32) & 2) != 0
                  || TLexicon::findHeadClone(*(_QWORD *)(v28 + 8), *(__int32 **)v28) == v28)
                {
                  v32 = (uint64_t *)a3[1];
                  v31 = (unint64_t)a3[2];
                  if ((unint64_t)v32 >= v31)
                  {
                    v34 = ((char *)v32 - (_BYTE *)*a3) >> 3;
                    if ((unint64_t)(v34 + 1) >> 61)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    v35 = v31 - (_QWORD)*a3;
                    v36 = v35 >> 2;
                    if (v35 >> 2 <= (unint64_t)(v34 + 1))
                      v36 = v34 + 1;
                    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
                      v37 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v37 = v36;
                    if (v37)
                      v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), v37);
                    else
                      v38 = 0;
                    v39 = (uint64_t *)&v38[8 * v34];
                    *v39 = v28;
                    v33 = v39 + 1;
                    v41 = (char *)*a3;
                    v40 = (char *)a3[1];
                    if (v40 == *a3)
                    {
                      v11 = v55;
                    }
                    else
                    {
                      v11 = v55;
                      do
                      {
                        v42 = *((_QWORD *)v40 - 1);
                        v40 -= 8;
                        *--v39 = v42;
                      }
                      while (v40 != v41);
                      v40 = (char *)*a3;
                    }
                    *a3 = v39;
                    a3[1] = v33;
                    a3[2] = &v38[8 * v37];
                    if (v40)
                      operator delete(v40);
                  }
                  else
                  {
                    *v32 = v28;
                    v33 = v32 + 1;
                    v11 = v55;
                  }
                  a3[1] = v33;
                  ++v59;
                }
                else
                {
                  v11 = v55;
                }
              }
            }
          }
          if (v68)
          {
            if (__p != v67 && __p != 0)
              MEMORY[0x1AF44D160]();
          }
        }
        else
        {
          tknPrintf("Warning: The voc contains a >= %llu-byte word name, prefix is '%s'. Ignored.\n", v19, 256, v79);
        }
      }
      ++v16;
    }
    while (v16 < v76);
  }
  else
  {
    v59 = 0;
    v60 = 0;
  }
  if (v74 != *(_QWORD *)(a1 + 432))
  {
    loggableUnicode(a2, &__p);
    if (v66 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    tknPrintf("Warning: '%s' : Inefficient voc search. Required dynamic allocation of size %llu\n", v44, p_p, v75);
    if (SHIBYTE(v66) < 0)
      operator delete(__p);
    v46 = *(_QWORD *)(a1 + 432);
    if (v46)
      MEMORY[0x1AF44D160](v46, 0x80C80B8603338);
    *(_QWORD *)(a1 + 432) = v74;
    *(_QWORD *)(a1 + 416) = v75;
  }
  if (v60 == v59)
  {
    v47 = ((_BYTE *)a3[1] - (_BYTE *)*a3) >> 3;
    if (v47 - v60 < v47)
    {
      v48 = -v60;
      v49 = (uint64_t)*a3 + 8 * v47;
      do
        *(_QWORD *)(*(_QWORD *)(v49 + 8 * v48) + 32) |= 1uLL;
      while (!__CFADD__(v48++, 1));
    }
  }
  v51 = v73;
  if (v72)
  {
    if (v69 != (int *)v71 && v69 != 0)
      MEMORY[0x1AF44D160]();
  }
  if (v83)
  {
    if (v80 != v11 && v80 != 0)
      MEMORY[0x1AF44D160]();
  }
  return v51 != 0;
}

void sub_1ADD810D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  unint64_t v19;

  if (LOBYTE(STACK[0x8B8]))
  {
    v19 = STACK[0x4A0];
    if (STACK[0x4A0] != v17)
    {
      if (v19)
        MEMORY[0x1AF44D160](v19, 0x1000C8052888210);
    }
  }
  if (LOBYTE(STACK[0xCD8]))
  {
    if (STACK[0x8C0] != a17 && STACK[0x8C0] != 0)
      MEMORY[0x1AF44D160]();
  }
  if (LOBYTE(STACK[0xF28]))
  {
    if (STACK[0xE10] != a15 && STACK[0xE10] != 0)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

uint64_t TLexicon::collationSearchRec(uint64_t a1, const __int32 *a2, void **a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  void **v7;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  size_t v16;
  const __int32 *v17;
  size_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int *v23;
  unint64_t v24;
  uint64_t v25;
  int *v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int *v31;
  uint64_t v35;
  int v36;
  int v37;

  if (*a5)
  {
    v5 = a5;
    v7 = a3;
    v10 = 0;
    while (*a2)
    {
      v12 = *(_QWORD *)(a1 + 96);
      v11 = *(_QWORD *)(a1 + 104);
      v13 = (v11 - v12) >> 4;
      if (v11 == v12)
      {
        v16 = 0;
        v20 = *(_QWORD *)(a1 + 104);
      }
      else
      {
        v14 = 0;
        v15 = 0;
        v16 = 0;
        v11 = *(_QWORD *)(a1 + 96);
        do
        {
          v17 = *(const __int32 **)(v11 + v14);
          v18 = wcslen(v17);
          v19 = wcsncmp(v17, a2, v18);
          v11 = *(_QWORD *)(a1 + 96);
          v20 = *(_QWORD *)(a1 + 104);
          if (v19 >= 1)
            break;
          if (v19 == 0 && v18 > v16)
          {
            v13 = v15;
            v16 = v18;
          }
          ++v15;
          v14 += 16;
        }
        while (v15 < (v20 - v11) >> 4);
        v5 = a5;
        v7 = a3;
      }
      v21 = v20 - v11;
      if (v13 == (v20 - v11) >> 4)
      {
        v22 = *a2++;
        v36 = v22;
        TBuffer<wchar_t>::insert(a4, *(_QWORD *)(a4 + 16), &v36, 1uLL);
      }
      else
      {
        v23 = *(int **)(v11 + 16 * v13 + 8);
        if (!*v23)
          return v10 & 1;
        v35 = v20 - v11;
        a2 += v16;
        v24 = *(_QWORD *)(a4 + 16);
        do
        {
          v25 = 0;
          while (v23[v25++])
            ;
          TBuffer<wchar_t>::insert(a4, *(_QWORD *)(a4 + 16), v23, v25 - 1);
          v10 |= TLexicon::collationSearchRec(a1, a2, v7, a4, v5);
          TBuffer<wchar_t>::resize(a4, v24);
          v27 = &v23[wcslen(v23)];
          v28 = v27[1];
          v23 = v27 + 1;
        }
        while (v28);
        v21 = v35;
      }
      if (v13 != v21 >> 4)
        return v10 & 1;
    }
    --*v5;
    v30 = *(_QWORD *)(a4 + 8);
    v29 = *(_QWORD *)(a4 + 16);
    if (v29 >= v30)
    {
      if (*(_BYTE *)(a4 + 1048))
      {
        v37 = 0;
        TBuffer<wchar_t>::insert(a4, v29, &v37, 1uLL);
        --*(_QWORD *)(a4 + 16);
        v31 = *(unsigned int **)a4;
      }
      else
      {
        v31 = *(unsigned int **)a4;
        if (v30)
          v31[v30 - 1] = 0;
      }
    }
    else
    {
      v31 = *(unsigned int **)a4;
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v29) = 0;
    }
    LOBYTE(v10) = TLexicon::collationSearchInternal(a1, v31, v7, 0, 0, 0);
  }
  else
  {
    LOBYTE(v10) = 0;
  }
  return v10 & 1;
}

uint64_t THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::insert@<X0>(uint64_t a1@<X0>, const __int32 **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  const __int32 *v8;
  size_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_QWORD *)(a1 + 24);
  if (v6 == *(_QWORD *)(a1 + 16))
  {
    if (v6)
    {
      if (*(_BYTE *)(a1 + 34))
      {
        tknPrintf("Warning: hashtable resizing, size was %llu\n", (uint64_t)a2, *(_QWORD *)(a1 + 24));
        v6 = *(_QWORD *)(a1 + 16);
      }
      v7 = 2 * v6;
    }
    else
    {
      v7 = 10781;
    }
    THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::resize(a1, v7);
  }
  v8 = *a2;
  v9 = wcslen(*a2);
  v10 = 0;
  v11 = 4 * v9;
  if (4 * v9)
  {
    do
    {
      v12 = *(char *)v8;
      v8 = (const __int32 *)((char *)v8 + 1);
      v10 = 33 * v10 + v12;
      --v11;
    }
    while (v11);
  }
  v13 = v10 % *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 8) + 8 * v13;
  while (1)
  {
    v14 = *(_QWORD *)v14;
    if (!v14)
      break;
    result = wcscmp(*(const __int32 **)(v14 + 8), *a2);
    if (!(_DWORD)result)
    {
      v16 = 0;
      goto LABEL_15;
    }
  }
  result = operator new();
  v14 = result;
  v17 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)result = *(_QWORD *)(v17 + 8 * v13);
  *(_OWORD *)(result + 8) = *(_OWORD *)a2;
  *(_QWORD *)(v17 + 8 * v13) = result;
  ++*(_QWORD *)(a1 + 24);
  v16 = 1;
LABEL_15:
  v18 = *(_QWORD *)(a1 + 8);
  v19 = v18 + 8 * v13;
  v20 = v18 + 8 * *(_QWORD *)(a1 + 16);
  *(_QWORD *)a3 = v19;
  *(_QWORD *)(a3 + 8) = v20;
  *(_QWORD *)(a3 + 16) = v14;
  *(_BYTE *)(a3 + 24) = v16;
  return result;
}

_QWORD *TLexicon::addTempWord(TAllocator *a1, int *a2, int *a3, int *a4, const __int32 *a5)
{
  uint64_t v9;
  uint64_t v11;
  size_t v13;
  size_t v14;
  uint64_t v15;
  __int32 *v16;
  __int32 *v17;
  _QWORD *v18;
  __int32 *v20;
  __int128 v21;
  _BYTE v22[1024];
  char v23;
  int v24;

  v20 = (__int32 *)v22;
  v21 = xmmword_1AE1418C0;
  v23 = 1;
  if (!a2
    || (TBuffer<wchar_t>::assign((uint64_t)&v20, a2), (a2 = (int *)*((_QWORD *)&v21 + 1)) == 0)
    || a3 && *a3
    || a4 && *a4)
  {
    TBuffer<wchar_t>::insert((uint64_t)&v20, (unint64_t)a2, dword_1AE17DC84, 1uLL);
  }
  if (a3)
  {
    v9 = 0;
    while (a3[v9++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v20, *((unint64_t *)&v21 + 1), a3, v9 - 1);
  }
  if (a4 && *a4)
  {
    TBuffer<wchar_t>::insert((uint64_t)&v20, *((unint64_t *)&v21 + 1), dword_1AE17DC84, 1uLL);
    v11 = 0;
    while (a4[v11++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v20, *((unint64_t *)&v21 + 1), a4, v11 - 1);
  }
  if (a5)
    v13 = wcslen(a5) + 2;
  else
    v13 = 1;
  v14 = v13 + *((_QWORD *)&v21 + 1);
  if (v14 >> 62)
    v15 = -1;
  else
    v15 = 4 * v14;
  v16 = (__int32 *)TAllocator::allocate(a1, v15);
  if (*((_QWORD *)&v21 + 1) >= (unint64_t)v21)
  {
    if (v23)
    {
      v24 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v20, *((unint64_t *)&v21 + 1), &v24, 1uLL);
      v17 = v20;
      --*((_QWORD *)&v21 + 1);
    }
    else
    {
      v17 = v20;
      if ((_QWORD)v21)
        v20[(_QWORD)v21 - 1] = 0;
    }
  }
  else
  {
    v17 = v20;
    v20[*((_QWORD *)&v21 + 1)] = 0;
  }
  wcscpy(v16, v17);
  if (a5)
    wcscpy(&v16[*((_QWORD *)&v21 + 1) + 1], a5);
  v18 = TAllocator::allocate(a1, 40);
  *v18 = v16;
  v18[1] = a1;
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = 7;
  if (v23 && v20 != (__int32 *)v22 && v20)
    MEMORY[0x1AF44D160]();
  return v18;
}

void sub_1ADD8179C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (LOBYTE(STACK[0x420]) && a10 != v10)
  {
    if (a10)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

uint64_t THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::erase(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  v3 = **(_QWORD ***)a2;
  v4 = *(_QWORD **)(a2 + 16);
  if (v3 != v4)
  {
    do
    {
      v5 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3 != v4);
    *v5 = *v4;
    --*(_QWORD *)(a1 + 24);
LABEL_5:
    JUMPOUT(0x1AF44D190);
  }
  **(_QWORD **)a2 = *v3;
  result = *(_QWORD *)(a2 + 16);
  --*(_QWORD *)(a1 + 24);
  if (result)
    goto LABEL_5;
  return result;
}

uint64_t TLexicon::cleanCache(TLexicon *this)
{
  unint64_t v2;
  TParam *v3;
  uint64_t ActiveConfigHandle;
  uint64_t result;
  TParam *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  __int32 *v29;
  _QWORD *v30;
  uint64_t v31;
  const __int32 ***v32;
  __int32 *v33;
  int v34;
  const __int32 **v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v39;
  _QWORD v40[3];
  void *__p[2];
  char v42;
  __int32 *v43;
  __int128 v44;
  _BYTE v45[1024];
  char v46;
  _QWORD v47[3];
  int v48[3];

  ++*((_QWORD *)this + 64);
  TAllocator::clear(this);
  v2 = *((_QWORD *)this + 26);
  v3 = (TParam *)(*((_QWORD *)this + 40) + 2568);
  ActiveConfigHandle = TParam::getActiveConfigHandle(v3);
  result = TParam::getValidConfig(v3, ActiveConfigHandle);
  if (v2 < *((int *)v3 + result + 40))
    return result;
  v6 = (TParam *)(*((_QWORD *)this + 40) + 2920);
  v7 = TParam::getActiveConfigHandle(v6);
  result = TParam::getValidConfig(v6, v7);
  v39 = *((int *)v6 + result + 40);
  v8 = *((_QWORD *)this + 39) - v39;
  v9 = *((_QWORD *)this + 17);
  if (v9 >= 1)
  {
    v10 = (_QWORD *)*((_QWORD *)this + 16);
    v11 = &v10[v9];
    while (1)
    {
      v12 = (_QWORD *)*v10;
      if (*v10)
        break;
      if (++v10 >= v11)
        goto LABEL_6;
    }
    while (1)
    {
      while (1)
      {
        v18 = (unint64_t *)v12[2];
        if (*v18 > v8)
          break;
        v17 = v12[1];
        if (!v17 || (MEMORY[0x1AF44D160](v17, 0x1000C8052888210), (v18 = (unint64_t *)v12[2]) != 0))
        {
          v19 = v18[2];
          if (v19)
            MEMORY[0x1AF44D160](v19, 0x20C8093837F09);
          MEMORY[0x1AF44D190](v18, 0x1080C40925F9CD7);
        }
        v47[0] = v10;
        v47[1] = v11;
        v47[2] = v12;
        v12 = (_QWORD *)*v12;
        if (!v12)
        {
          v20 = v10 + 1;
          while (1)
          {
            v10 = v20;
            if (v20 >= v11)
              break;
            ++v20;
            v12 = (_QWORD *)*v10;
            if (*v10)
              goto LABEL_23;
          }
          v12 = 0;
        }
LABEL_23:
        result = THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::erase((uint64_t)this + 120, (uint64_t)v47);
        if (!v12)
          goto LABEL_6;
      }
      *v18 -= v8;
      v12 = (_QWORD *)*v12;
      if (!v12)
        break;
LABEL_30:
      if (!v12)
        goto LABEL_6;
    }
    v21 = v10 + 1;
    while (v21 < v11)
    {
      v22 = (_QWORD *)*v21++;
      v12 = v22;
      if (v22)
      {
        v10 = v21 - 1;
        goto LABEL_30;
      }
    }
  }
LABEL_6:
  v13 = *((_QWORD *)this + 25);
  if (v13 < 1)
    goto LABEL_10;
  v14 = (_QWORD *)*((_QWORD *)this + 24);
  v15 = &v14[v13];
  while (1)
  {
    v16 = (_QWORD *)*v14;
    if (*v14)
      break;
    if (++v14 >= v15)
      goto LABEL_10;
  }
  while (1)
  {
    v23 = v16[2];
    v24 = *(_QWORD *)(v23 + 24);
    v25 = v24 > v8;
    v26 = v24 - v8;
    if (!v25)
    {
      v43 = (__int32 *)v45;
      v44 = xmmword_1AE1418C0;
      v46 = 1;
      TLexicon::getTokenName(result, *(__int32 **)v23, (uint64_t)&v43);
      if (*((_QWORD *)&v44 + 1) >= (unint64_t)v44)
      {
        if (v46)
        {
          v48[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v43, *((unint64_t *)&v44 + 1), v48, 1uLL);
          v29 = v43;
          --*((_QWORD *)&v44 + 1);
        }
        else
        {
          v29 = v43;
          if ((_QWORD)v44)
            v43[(_QWORD)v44 - 1] = 0;
        }
      }
      else
      {
        v29 = v43;
        v43[*((_QWORD *)&v44 + 1)] = 0;
      }
      std::wstring::basic_string[abi:ne180100]<0>((uint64_t)__p, v29);
      v30 = std::__tree<std::__value_type<std::wstring,unsigned long>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,unsigned long>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,unsigned long>>>::find<std::wstring>((uint64_t)this + 160, (uint64_t)__p);
      if (v42 < 0)
        operator delete(__p[0]);
      if ((_QWORD *)((char *)this + 168) != v30)
      {
        v31 = v30[7];
        v32 = *(const __int32 ****)(v31 + 16);
        if (*(_QWORD *)(v31 + 8))
        {
          do
          {
            if (*((_QWORD *)&v44 + 1) >= (unint64_t)v44)
            {
              if (v46)
              {
                LODWORD(__p[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v43, *((unint64_t *)&v44 + 1), (int *)__p, 1uLL);
                v33 = v43;
                --*((_QWORD *)&v44 + 1);
              }
              else
              {
                v33 = v43;
                if ((_QWORD)v44)
                  v43[(_QWORD)v44 - 1] = 0;
              }
            }
            else
            {
              v33 = v43;
              v43[*((_QWORD *)&v44 + 1)] = 0;
            }
            v34 = wcscmp(v33, **v32);
            v35 = *v32++;
            v35[4] = (const __int32 *)((unint64_t)v35[4] & 0xFFFFFFFFFFFFFFFCLL | (2 * (v34 == 0)));
          }
          while (v32 != (const __int32 ***)(*(_QWORD *)(v31 + 16) + 8 * *(_QWORD *)(v31 + 8)));
          v32 = *(const __int32 ****)(v31 + 16);
        }
        if (v32)
          MEMORY[0x1AF44D160](v32, 0x20C8093837F09);
        MEMORY[0x1AF44D190](v31, 0x1080C40925F9CD7);
        std::__tree<std::string>::erase((uint64_t **)this + 20, (uint64_t)v30);
      }
      v36 = (_QWORD *)v16[2];
      if (!*v36 || (MEMORY[0x1AF44D160](*v36, 0x1000C8052888210), v16[2]))
        MEMORY[0x1AF44D190]();
      v40[0] = v14;
      v40[1] = v15;
      v40[2] = v16;
      v16 = (_QWORD *)*v16;
      if (!v16)
      {
        v37 = v14 + 1;
        while (1)
        {
          v14 = v37;
          if (v37 >= v15)
            break;
          ++v37;
          v16 = (_QWORD *)*v14;
          if (*v14)
            goto LABEL_69;
        }
        v16 = 0;
      }
LABEL_69:
      result = THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::erase((uint64_t)this + 184, (uint64_t)v40);
      if (v46)
      {
        result = (uint64_t)v43;
        if (v43 != (__int32 *)v45 && v43 != 0)
          result = MEMORY[0x1AF44D160]();
      }
      goto LABEL_75;
    }
    *(_QWORD *)(v23 + 24) = v26;
    v16 = (_QWORD *)*v16;
    if (!v16)
      break;
LABEL_75:
    if (!v16)
      goto LABEL_10;
  }
  v27 = v14 + 1;
  while (v27 < v15)
  {
    v28 = (_QWORD *)*v27++;
    v16 = v28;
    if (v28)
    {
      v14 = v27 - 1;
      goto LABEL_75;
    }
  }
LABEL_10:
  *((_QWORD *)this + 39) = v39;
  return result;
}

void sub_1ADD81CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (LOBYTE(STACK[0x470]) && a20 != a9)
  {
    if (a20)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

__int32 *getSecondField(__int32 *a1, uint64_t a2)
{
  __int32 v4;
  __int32 *result;
  __int32 *v6;
  __int32 *v7;
  unint64_t v8;

  TBuffer<wchar_t>::resize(a2, 0);
  if (*a1 != 92)
  {
LABEL_4:
    result = wcschr(a1, 92);
    a1 = result;
    if (!result)
      return result;
    goto LABEL_7;
  }
  v4 = a1[1];
  if (v4 == 92)
  {
    ++a1;
  }
  else if (!v4)
  {
    goto LABEL_4;
  }
LABEL_7:
  v6 = a1 + 1;
  v7 = wcschr(v6, 92);
  if (!v7)
    return (__int32 *)TBuffer<wchar_t>::assign(a2, v6);
  v8 = v7 - v6;
  TBuffer<wchar_t>::resize(a2, 0);
  return (__int32 *)TBuffer<wchar_t>::insert(a2, 0, v6, v8);
}

__int32 *getThirdField(__int32 *a1, uint64_t a2)
{
  __int32 v4;
  __int32 *result;

  TBuffer<wchar_t>::resize(a2, 0);
  if (*a1 != 92)
  {
LABEL_4:
    result = wcschr(a1, 92);
    a1 = result;
    if (!result)
      return result;
    goto LABEL_7;
  }
  v4 = a1[1];
  if (v4 == 92)
  {
    ++a1;
  }
  else if (!v4)
  {
    goto LABEL_4;
  }
LABEL_7:
  result = wcschr(a1 + 1, 92);
  if (result)
    return (__int32 *)TBuffer<wchar_t>::assign(a2, result + 1);
  return result;
}

uint64_t respellRoot(uint64_t a1, int *a2)
{
  unint64_t v4;
  unint64_t v5;
  const __int32 *v6;
  unint64_t StressPosition;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  __int32 v12;
  __int32 *v13;
  __int32 *v14;
  __int32 *v15;
  int v17;
  int v18;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= v5)
  {
    if (*(_BYTE *)(a1 + 1048))
    {
      v17 = 0;
      TBuffer<wchar_t>::insert(a1, v4, &v17, 1uLL);
      --*(_QWORD *)(a1 + 16);
      v6 = *(const __int32 **)a1;
    }
    else
    {
      v6 = *(const __int32 **)a1;
      if (v5)
        v6[v5 - 1] = 0;
    }
  }
  else
  {
    v6 = *(const __int32 **)a1;
    *(_DWORD *)(*(_QWORD *)a1 + 4 * v4) = 0;
  }
  if (!wcscmp(v6, dword_1AE17DC9C))
    return 1;
  StressPosition = findStressPosition(a2, 0);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  if (v8 >= v9)
  {
    if (*(_BYTE *)(a1 + 1048))
    {
      v18 = 0;
      TBuffer<wchar_t>::insert(a1, v8, &v18, 1uLL);
      --*(_QWORD *)(a1 + 16);
      v10 = *(int **)a1;
    }
    else
    {
      v10 = *(int **)a1;
      if (v9)
        v10[v9 - 1] = 0;
    }
  }
  else
  {
    v10 = *(int **)a1;
    *(_DWORD *)(*(_QWORD *)a1 + 4 * v8) = 0;
  }
  v11 = findStressPosition(v10, 1);
  if (StressPosition >= *(_QWORD *)(a1 + 16))
    return 0;
  v12 = *(_DWORD *)(*(_QWORD *)a1 + 4 * StressPosition);
  if (StressPosition == v11)
  {
    v13 = s_pszAccentedVowels;
    v14 = wcschr(s_pszAccentedVowels, v12);
    if (v14)
    {
      v15 = s_pszUnaccentedVowels;
LABEL_21:
      *(_DWORD *)(*(_QWORD *)a1 + 4 * StressPosition) = *(__int32 *)((char *)v15 + (char *)v14 - (char *)v13);
    }
  }
  else
  {
    v13 = s_pszUnaccentedVowels;
    v14 = wcschr(s_pszUnaccentedVowels, v12);
    if (v14)
    {
      v15 = s_pszAccentedVowels;
      goto LABEL_21;
    }
  }
  return 1;
}

uint64_t findStressPosition(int *a1, int a2)
{
  __int32 v4;
  uint64_t v5;
  __int32 *v6;
  uint64_t v7;
  __int32 *v8;
  char v9;
  _BYTE *v10;
  int v11;
  uint64_t v12;
  int PreviousVowel;
  uint64_t v14;
  int v15;
  _BYTE *v17;
  __int128 v18;
  _BYTE v19[1024];
  char v20;
  int v21;

  v4 = *a1;
  if (!*a1)
  {
    v7 = 0;
LABEL_7:
    v8 = 0;
    v9 = 1;
    goto LABEL_8;
  }
  v5 = 0;
  while (1)
  {
    v6 = wcschr(s_pszAccentedVowels, v4);
    if (v6)
      break;
    v7 = v5 + 1;
    v4 = a1[++v5];
    if (!v4)
      goto LABEL_7;
  }
  if (a2)
  {
    v8 = v6;
    v9 = 0;
    v7 = v5;
LABEL_8:
    v17 = v19;
    v18 = xmmword_1AE1418C0;
    v20 = 1;
    TBuffer<wchar_t>::assign((uint64_t)&v17, a1);
    v10 = v17;
    if ((v9 & 1) == 0)
      *(_DWORD *)&v17[4 * v7] = *(__int32 *)((char *)s_pszUnaccentedVowels + (char *)v8 - (char *)s_pszAccentedVowels);
    v11 = DWORD2(v18) - 1;
    if (wcschr((__int32 *)"s", *(_DWORD *)&v10[4 * DWORD2(v18) - 4]))
    {
      if (*((_QWORD *)&v18 + 1) >= (unint64_t)v18)
      {
        if (v20)
        {
          v21 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v17, *((unint64_t *)&v18 + 1), &v21, 1uLL);
          v12 = (uint64_t)v17;
          --*((_QWORD *)&v18 + 1);
        }
        else
        {
          v12 = (uint64_t)v17;
          if ((_QWORD)v18)
            *(_DWORD *)&v17[4 * v18 - 4] = 0;
        }
      }
      else
      {
        v12 = (uint64_t)v17;
        *(_DWORD *)&v17[4 * *((_QWORD *)&v18 + 1)] = 0;
      }
      PreviousVowel = findPreviousVowel(v12, v11);
      if (PreviousVowel >= 0)
        v11 = PreviousVowel;
    }
    if (*((_QWORD *)&v18 + 1) >= (unint64_t)v18)
    {
      if (v20)
      {
        v21 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v17, *((unint64_t *)&v18 + 1), &v21, 1uLL);
        v14 = (uint64_t)v17;
        --*((_QWORD *)&v18 + 1);
      }
      else
      {
        v14 = (uint64_t)v17;
        if ((_QWORD)v18)
          *(_DWORD *)&v17[4 * v18 - 4] = 0;
      }
    }
    else
    {
      v14 = (uint64_t)v17;
      *(_DWORD *)&v17[4 * *((_QWORD *)&v18 + 1)] = 0;
    }
    v15 = findPreviousVowel(v14, v11);
    if (v15 >= 0)
      v5 = v15;
    else
      v5 = v11;
    if (v20 && v17 != v19 && v17)
      MEMORY[0x1AF44D160]();
  }
  return v5;
}

void sub_1ADD82224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (LOBYTE(STACK[0x420]) && a10 != v10)
  {
    if (a10)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

void TLexiconParamManager::~TLexiconParamManager(TLexiconParamManager *this)
{
  TLexiconParamManager::~TLexiconParamManager(this);
  JUMPOUT(0x1AF44D190);
}

{
  uint64_t v2;
  void **v3;
  char *v4;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  uint64_t nn;
  uint64_t i1;
  uint64_t i2;
  uint64_t i3;
  uint64_t v18;
  void **v19;

  v2 = 0;
  *(_QWORD *)this = &off_1E5D16C90;
  v3 = (void **)((char *)this + 21512);
  *((_QWORD *)this + 2689) = off_1E5D15920;
  v4 = (char *)this + 21759;
  do
  {
    if (v4[v2] < 0)
      operator delete(*(void **)((char *)this + v2 + 21736));
    v2 -= 24;
  }
  while (v2 != -48);
  TParam::~TParam(v3);
  TParam::~TParam((void **)this + 2645);
  *((_QWORD *)this + 2473) = &unk_1E5D16288;
  v19 = (void **)((char *)this + 21136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 21112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 21088);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (i = 0; i != -1152; i -= 24)
  {
    if (*((char *)this + i + 21087) < 0)
      operator delete(*(void **)((char *)this + i + 21064));
  }
  TParam::~TParam((void **)this + 2473);
  *((_QWORD *)this + 2301) = &unk_1E5D16288;
  v19 = (void **)((char *)this + 19760);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 19736);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 19712);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (j = 0; j != -1152; j -= 24)
  {
    if (*((char *)this + j + 19711) < 0)
      operator delete(*(void **)((char *)this + j + 19688));
  }
  TParam::~TParam((void **)this + 2301);
  *((_QWORD *)this + 2129) = &unk_1E5D16288;
  v19 = (void **)((char *)this + 18384);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 18360);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 18336);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (k = 0; k != -1152; k -= 24)
  {
    if (*((char *)this + k + 18335) < 0)
      operator delete(*(void **)((char *)this + k + 18312));
  }
  TParam::~TParam((void **)this + 2129);
  *((_QWORD *)this + 1957) = &unk_1E5D16288;
  v19 = (void **)((char *)this + 17008);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 16984);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 16960);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (m = 0; m != -1152; m -= 24)
  {
    if (*((char *)this + m + 16959) < 0)
      operator delete(*(void **)((char *)this + m + 16936));
  }
  TParam::~TParam((void **)this + 1957);
  *((_QWORD *)this + 1785) = &unk_1E5D16288;
  v19 = (void **)((char *)this + 15632);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 15608);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 15584);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (n = 0; n != -1152; n -= 24)
  {
    if (*((char *)this + n + 15583) < 0)
      operator delete(*(void **)((char *)this + n + 15560));
  }
  TParam::~TParam((void **)this + 1785);
  *((_QWORD *)this + 1613) = &unk_1E5D16288;
  v19 = (void **)((char *)this + 14256);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 14232);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 14208);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (ii = 0; ii != -1152; ii -= 24)
  {
    if (*((char *)this + ii + 14207) < 0)
      operator delete(*(void **)((char *)this + ii + 14184));
  }
  TParam::~TParam((void **)this + 1613);
  *((_QWORD *)this + 1441) = &unk_1E5D16288;
  v19 = (void **)((char *)this + 12880);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 12856);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 12832);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (jj = 0; jj != -1152; jj -= 24)
  {
    if (*((char *)this + jj + 12831) < 0)
      operator delete(*(void **)((char *)this + jj + 12808));
  }
  TParam::~TParam((void **)this + 1441);
  *((_QWORD *)this + 1269) = &unk_1E5D16288;
  v19 = (void **)((char *)this + 11504);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 11480);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 11456);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (kk = 0; kk != -1152; kk -= 24)
  {
    if (*((char *)this + kk + 11455) < 0)
      operator delete(*(void **)((char *)this + kk + 11432));
  }
  TParam::~TParam((void **)this + 1269);
  *((_QWORD *)this + 1097) = &unk_1E5D16288;
  v19 = (void **)((char *)this + 10128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 10104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 10080);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (mm = 0; mm != -1152; mm -= 24)
  {
    if (*((char *)this + mm + 10079) < 0)
      operator delete(*(void **)((char *)this + mm + 10056));
  }
  TParam::~TParam((void **)this + 1097);
  *((_QWORD *)this + 925) = &unk_1E5D16288;
  v19 = (void **)((char *)this + 8752);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 8728);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 8704);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (nn = 0; nn != -1152; nn -= 24)
  {
    if (*((char *)this + nn + 8703) < 0)
      operator delete(*(void **)((char *)this + nn + 8680));
  }
  TParam::~TParam((void **)this + 925);
  *((_QWORD *)this + 753) = &unk_1E5D16288;
  v19 = (void **)((char *)this + 7376);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 7352);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 7328);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (i1 = 0; i1 != -1152; i1 -= 24)
  {
    if (*((char *)this + i1 + 7327) < 0)
      operator delete(*(void **)((char *)this + i1 + 7304));
  }
  TParam::~TParam((void **)this + 753);
  *((_QWORD *)this + 581) = &unk_1E5D16288;
  v19 = (void **)((char *)this + 6000);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 5976);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 5952);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (i2 = 0; i2 != -1152; i2 -= 24)
  {
    if (*((char *)this + i2 + 5951) < 0)
      operator delete(*(void **)((char *)this + i2 + 5928));
  }
  TParam::~TParam((void **)this + 581);
  *((_QWORD *)this + 409) = &unk_1E5D16288;
  v19 = (void **)((char *)this + 4624);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 4600);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 4576);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  for (i3 = 0; i3 != -1152; i3 -= 24)
  {
    if (*((char *)this + i3 + 4575) < 0)
      operator delete(*(void **)((char *)this + i3 + 4552));
  }
  TParam::~TParam((void **)this + 409);
  TParam::~TParam((void **)this + 365);
  TParam::~TParam((void **)this + 321);
  TParam::~TParam((void **)this + 277);
  TParam::~TParam((void **)this + 233);
  *((_QWORD *)this + 61) = &unk_1E5D16288;
  v19 = (void **)((char *)this + 1840);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 1816);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v19 = (void **)((char *)this + 1792);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  v18 = 1152;
  do
  {
    if (*((char *)this + v18 + 639) < 0)
      operator delete(*(void **)((char *)this + v18 + 616));
    v18 -= 24;
  }
  while (v18);
  TParam::~TParam((void **)this + 61);
  TParam::~TParam((void **)this + 17);
  TParamManager::~TParamManager(this);
}

_QWORD *THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::~THashBase(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D18398;
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::clear(a1);
  v2 = a1[1];
  if (v2)
    MEMORY[0x1AF44D160](v2, 0x20C8093837F09);
  return a1;
}

_QWORD *THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::clear(_QWORD *result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  _QWORD *v5;

  v1 = result;
  v2 = result[2];
  if (v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = v1[1];
      result = *(_QWORD **)(v4 + 8 * i);
      if (result)
      {
        do
        {
          v5 = (_QWORD *)*result;
          MEMORY[0x1AF44D190]();
          result = v5;
        }
        while (v5);
        v4 = v1[1];
        v2 = v1[2];
      }
      *(_QWORD *)(v4 + 8 * i) = 0;
    }
  }
  v1[3] = 0;
  return result;
}

void THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::~THashBase(_QWORD *a1)
{
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::~THashBase(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::~THashBase(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D183B8;
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::clear(a1);
  v2 = a1[1];
  if (v2)
    MEMORY[0x1AF44D160](v2, 0x20C8093837F09);
  return a1;
}

void THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::~THashBase(_QWORD *a1)
{
  THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::~THashBase(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t TWordBlock::TWordBlock(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 8) = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3;
  v7 = (uint64_t *)operator new[]();
  v8 = v7;
  *(_QWORD *)(a1 + 16) = v7;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9 != *(_QWORD *)a2)
    memmove(v7, *(const void **)a2, v9 - *(_QWORD *)a2);
  *(_QWORD *)a1 = a3;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = 8 * v10;
    do
    {
      v12 = *v8++;
      *(_QWORD *)(v12 + 24) = a3;
      v11 -= 8;
    }
    while (v11);
  }
  return a1;
}

size_t THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::find@<X0>(size_t result@<X0>, const __int32 **a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  size_t v6;
  const __int32 *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v6 = result;
    v7 = *a2;
    result = wcslen(*a2);
    v8 = 0;
    v9 = 4 * result;
    if (4 * result)
    {
      do
      {
        v10 = *(char *)v7;
        v7 = (const __int32 *)((char *)v7 + 1);
        v8 = 33 * v8 + v10;
        --v9;
      }
      while (v9);
    }
    v11 = v8 % v4;
    v12 = *(_QWORD *)(v6 + 8) + 8 * v11;
    while (1)
    {
      v12 = *(_QWORD *)v12;
      if (!v12)
        break;
      result = wcscmp(*(const __int32 **)(v12 + 8), *a2);
      if (!(_DWORD)result)
      {
        v13 = *(_QWORD *)(v6 + 8);
        v14 = v13 + 8 * v11;
        v15 = v13 + 8 * *(_QWORD *)(v6 + 16);
        *a3 = v14;
        a3[1] = v15;
        a3[2] = v12;
        return result;
      }
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

uint64_t findPreviousVowel(uint64_t a1, int a2)
{
  uint64_t v2;
  unsigned int v4;
  __int32 *v5;
  BOOL v6;
  __int32 v7;

  LODWORD(v2) = a2;
  v4 = a2 - 1;
  if (a2 >= 1
    && wcschr((__int32 *)"a", *(_DWORD *)(a1 + 4 * a2))
    && wcschr((__int32 *)"i", *(_DWORD *)(a1 + 4 * v4)))
  {
    LODWORD(v2) = v4;
  }
  v5 = (__int32 *)(a1 + 4 * v2);
  do
  {
    v6 = __OFSUB__((_DWORD)v2, 1);
    v2 = (v2 - 1);
    if ((int)v2 < 0 != v6)
      return 0xFFFFFFFFLL;
    v7 = *--v5;
  }
  while (!wcschr(s_pszUnaccentedVowels, v7));
  if ((v2 + 1) < 2)
    return 0;
  if (wcschr((__int32 *)"i", *v5))
  {
    if (wcschr((__int32 *)"a", *(_DWORD *)(a1 + 4 * (v2 - 1))))
      return (v2 - 1);
    else
      return v2;
  }
  return v2;
}

void THashMap<wchar_t *,TWordBlock *,THash<wchar_t const*>,TWideCharEqualTo>::~THashMap(_QWORD *a1)
{
  THashBase<std::pair<wchar_t * const,TWordBlock *>,THashMapCompare<std::pair<wchar_t * const,TWordBlock *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t * const,TWordBlock *>,THash<wchar_t const*>>>::~THashBase(a1);
  JUMPOUT(0x1AF44D190);
}

void THashMap<wchar_t const*,TWord *,THash<wchar_t const*>,TWideCharEqualTo>::~THashMap(_QWORD *a1)
{
  THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::~THashBase(a1);
  JUMPOUT(0x1AF44D190);
}

double THashBase<std::pair<wchar_t const* const,TWord *>,THashMapCompare<std::pair<wchar_t const* const,TWord *>,TWideCharEqualTo>,THashMapFunction<std::pair<wchar_t const* const,TWord *>,THash<wchar_t const*>>>::findNextPrime(uint64_t a1)
{
  unint64_t v1;
  double result;
  unint64_t v3;
  unint64_t v4;

  v1 = a1 | 1;
  result = sqrt((double)v1);
  v3 = (unint64_t)result;
  if ((unint64_t)result >= 4)
  {
    do
    {
      v4 = 3;
      while (v1 % v4)
      {
        v4 += 2;
        if (v4 >= v3)
          return result;
      }
      v1 += 2;
      result = sqrt((double)v1);
      v3 = (unint64_t)result;
    }
    while ((unint64_t)result > 3);
  }
  return result;
}

_OWORD *std::__tree<std::__value_type<std::wstring,TWordBlock *>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TWordBlock *>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TWordBlock *>>>::__emplace_unique_key_args<std::wstring,std::piecewise_construct_t const&,std::tuple<std::wstring&&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)std::__tree<std::wstring>::__find_equal<std::wstring>((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*,false>(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *), uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  __int128 v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(a2 - 2, v9);
        if ((_DWORD)result)
        {
          v20 = *v9;
          *v9 = *(a2 - 2);
          *(a2 - 2) = v20;
          v21 = v9[1];
          v9[1] = *(a2 - 1);
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v9, v9 + 2, a2 - 2, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v9, v9 + 2, v9 + 4, a2 - 2, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2, a3);
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>((uint64_t)v9, a2, (uint64_t (**)(_OWORD *, _QWORD))a3);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>((uint64_t)v9, a2, (uint64_t (**)(_OWORD *, _QWORD *))a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(&v9[2 * (v13 >> 1)], v9, a2 - 2, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v9, &v9[2 * (v13 >> 1)], a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v9 + 2, v15 - 2, a2 - 4, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v9 + 4, &v9[2 * v14 + 2], a2 - 6, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v15 - 2, v15, &v9[2 * v14 + 2], a3);
            v16 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*a3)(v9 - 2, v9) & 1) == 0)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t *> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&)>(v9, a2, (uint64_t (**)(__int128 *, _QWORD *))a3);
            v9 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t *> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&)>(v9, a2, (uint64_t (**)(_QWORD *, __int128 *))a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v9, v17, a3);
          v9 = v17 + 2;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(v17 + 2, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 2;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*,std::pair<wchar_t const*,wchar_t *>*>((uint64_t)v9, a2, a2, (unsigned int (**)(uint64_t, uint64_t))a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  _OWORD *v7;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  if ((_OWORD *)result != a2)
  {
    v18 = v3;
    v19 = v4;
    v6 = (_QWORD *)result;
    v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      v9 = 0;
      v10 = (_OWORD *)result;
      do
      {
        v11 = v10;
        v10 = v7;
        result = (*a3)(v7, v11);
        if ((_DWORD)result)
        {
          v17 = *v10;
          v12 = v9;
          while (1)
          {
            v13 = (char *)v6 + v12;
            v14 = *(_QWORD *)((char *)v6 + v12 + 8);
            *((_QWORD *)v13 + 2) = *(_QWORD *)((char *)v6 + v12);
            *((_QWORD *)v13 + 3) = v14;
            if (!v12)
              break;
            v12 -= 16;
            result = (*a3)(&v17, (char *)v6 + v12);
            if ((result & 1) == 0)
            {
              v15 = (_QWORD *)((char *)v6 + v12 + 16);
              goto LABEL_10;
            }
          }
          v15 = v6;
LABEL_10:
          v16 = *((_QWORD *)&v17 + 1);
          *v15 = v17;
          v15[1] = v16;
        }
        v7 = v10 + 1;
        v9 += 16;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, _QWORD *))
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v6;
  _OWORD *v7;
  _QWORD *v9;
  _OWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  if ((_OWORD *)result != a2)
  {
    v15 = v3;
    v16 = v4;
    v6 = (_OWORD *)result;
    v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      v9 = (_QWORD *)(result - 16);
      do
      {
        v10 = v6;
        v6 = v7;
        result = (*a3)(v7, v10);
        if ((_DWORD)result)
        {
          v14 = *v6;
          v11 = v9;
          do
          {
            v12 = v11[3];
            v11[4] = v11[2];
            v11[5] = v12;
            result = (*a3)(&v14, v11);
            v11 -= 2;
          }
          while ((result & 1) != 0);
          v13 = *((_QWORD *)&v14 + 1);
          v11[4] = v14;
          v11[5] = v13;
        }
        v7 = v6 + 1;
        v9 += 2;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t (**a4)(uint64_t *, uint64_t *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
      *a3 = v10;
      v11 = a3 + 1;
      result = 1;
      v12 = a1 + 1;
LABEL_9:
      v15 = v11;
      goto LABEL_10;
    }
    *a1 = *a2;
    *a2 = v10;
    v17 = a1[1];
    a1[1] = a2[1];
    a2[1] = v17;
    if ((*a4)(a3, a2))
    {
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      v11 = a3 + 1;
      result = 2;
      v12 = a2 + 1;
      goto LABEL_9;
    }
  }
  else
  {
    if (!(_DWORD)result)
      return result;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    v15 = a2 + 1;
    v14 = a2[1];
    a2[1] = a3[1];
    a3[1] = v14;
    if ((*a4)(a2, a1))
    {
      v16 = *a1;
      *a1 = *a2;
      v12 = a1 + 1;
      *a2 = v16;
      result = 2;
LABEL_10:
      v19 = *v12;
      *v12 = *v15;
      *v15 = v19;
      return result;
    }
  }
  return 1;
}

_QWORD *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t *> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&)>(_QWORD *a1, _QWORD *a2, uint64_t (**a3)(__int128 *, _QWORD *))
{
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;

  v4 = a2;
  v12 = *(_OWORD *)a1;
  if (((*a3)(&v12, a2 - 2) & 1) != 0)
  {
    v6 = a1;
    do
      v6 += 2;
    while (((*a3)(&v12, v6) & 1) == 0);
  }
  else
  {
    v7 = a1 + 2;
    do
    {
      v6 = v7;
      if (v7 >= v4)
        break;
      v8 = (*a3)(&v12, v7);
      v7 = v6 + 2;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      v4 -= 2;
    while (((*a3)(&v12, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    v9 = *v6;
    *v6 = *v4;
    *v4 = v9;
    v10 = v6[1];
    v6[1] = v4[1];
    v4[1] = v10;
    do
      v6 += 2;
    while (!(*a3)(&v12, v6));
    do
      v4 -= 2;
    while (((*a3)(&v12, v4) & 1) != 0);
  }
  if (v6 - 2 != a1)
  {
    *a1 = *(v6 - 2);
    a1[1] = *(v6 - 1);
  }
  *((_OWORD *)v6 - 1) = v12;
  return v6;
}

_QWORD *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<wchar_t const*,wchar_t *> *,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&)>(_QWORD *a1, _QWORD *a2, uint64_t (**a3)(_QWORD *, __int128 *))
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  __int128 v13;

  v6 = 0;
  v13 = *(_OWORD *)a1;
  do
    v6 += 2;
  while (((*a3)(&a1[v6], &v13) & 1) != 0);
  v7 = &a1[v6];
  if (v6 == 2)
  {
    do
    {
      if (v7 >= a2)
        break;
      a2 -= 2;
    }
    while (((*a3)(a2, &v13) & 1) == 0);
  }
  else
  {
    do
      a2 -= 2;
    while (!(*a3)(a2, &v13));
  }
  v8 = &a1[v6];
  if (v7 < a2)
  {
    v9 = a2;
    do
    {
      v10 = *v8;
      *v8 = *v9;
      *v9 = v10;
      v11 = v8[1];
      v8[1] = v9[1];
      v9[1] = v11;
      do
        v8 += 2;
      while (((*a3)(v8, &v13) & 1) != 0);
      do
        v9 -= 2;
      while (!(*a3)(v9, &v13));
    }
    while (v8 < v9);
  }
  result = v8 - 2;
  if (v8 - 2 != a1)
  {
    *a1 = *(v8 - 2);
    a1[1] = *(v8 - 1);
  }
  *((_OWORD *)v8 - 1) = v13;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t *, uint64_t *))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  __int128 v19;

  v6 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(a2 - 2, a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v8;
        v9 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v9;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v10 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a1 + 2, a1 + 4, a3);
      v11 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      v19 = *(_OWORD *)v11;
      v14 = v12;
      while (1)
      {
        v15 = (uint64_t *)((char *)a1 + v14);
        v16 = *(uint64_t *)((char *)a1 + v14 + 40);
        v15[6] = *(uint64_t *)((char *)a1 + v14 + 32);
        v15[7] = v16;
        if (v14 == -32)
          break;
        v14 -= 16;
        if (((*a3)((uint64_t *)&v19, v15 + 2) & 1) == 0)
        {
          v17 = (uint64_t *)((char *)a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      v18 = *((_QWORD *)&v19 + 1);
      *v17 = v19;
      v17[1] = v18;
      if (++v13 == 8)
        return v11 + 2 == a2;
    }
    v10 = v11;
    v12 += 16;
    v11 += 2;
    if (v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t (**a5)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a2, a3, a5);
  result = (*a5)(a4, a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    v12 = a3[1];
    a3[1] = a4[1];
    a4[1] = v12;
    result = (*a5)(a3, a2);
    if ((_DWORD)result)
    {
      v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      result = (*a5)(a2, a1);
      if ((_DWORD)result)
      {
        v15 = *a1;
        *a1 = *a2;
        *a2 = v15;
        v16 = a1[1];
        a1[1] = a2[1];
        a2[1] = v16;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t (**a6)(uint64_t *, uint64_t *))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a2, a3, a4, a6);
  result = (*a6)(a5, a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    v14 = a4[1];
    a4[1] = a5[1];
    a5[1] = v14;
    result = (*a6)(a4, a3);
    if ((_DWORD)result)
    {
      v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      result = (*a6)(a3, a2);
      if ((_DWORD)result)
      {
        v17 = *a2;
        *a2 = *a3;
        *a3 = v17;
        v18 = a2[1];
        a2[1] = a3[1];
        a3[1] = v18;
        result = (*a6)(a2, a1);
        if ((_DWORD)result)
        {
          v19 = *a1;
          *a1 = *a2;
          *a2 = v19;
          v20 = a1[1];
          a1[1] = a2[1];
          a2[1] = v20;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*,std::pair<wchar_t const*,wchar_t *>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int (**a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;

  if ((uint64_t *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) >> 4;
    if ((uint64_t)a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (_OWORD *)(a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if ((*a4)((uint64_t)v14, a1))
        {
          v15 = *v14;
          *v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          v16 = v14[1];
          v14[1] = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, a4, v9, (_OWORD *)a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v17 = (unint64_t)v8 >> 4;
      v18 = a2 - 2;
      do
      {
        v20 = *(_QWORD *)a1;
        v19 = *(_QWORD *)(a1 + 8);
        v21 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>((_QWORD *)a1, a4, v17);
        if (v18 == v21)
        {
          *v21 = v20;
          v21[1] = v19;
        }
        else
        {
          *v21 = *v18;
          v21[1] = v18[1];
          *v18 = v20;
          v18[1] = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(a1, (uint64_t)(v21 + 2), (uint64_t (**)(_QWORD *, __int128 *))a4, ((uint64_t)v21 - a1 + 16) >> 4);
        }
        v18 -= 2;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t result, unsigned int (**a2)(_QWORD, _QWORD), uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v20 = v4;
    v21 = v5;
    v7 = a4;
    v8 = result;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      v12 = ((uint64_t)a4 - result) >> 3;
      v13 = v12 + 1;
      v14 = (_QWORD *)(result + 16 * (v12 + 1));
      v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 2))
      {
        v14 += 2;
        v13 = v15;
      }
      result = ((uint64_t (*)(_QWORD *, _OWORD *))*a2)(v14, v7);
      if ((result & 1) == 0)
      {
        v19 = *v7;
        do
        {
          v16 = v14;
          *(_QWORD *)v7 = *v14;
          *((_QWORD *)v7 + 1) = v14[1];
          if (v9 < v13)
            break;
          v17 = (2 * v13) | 1;
          v14 = (_QWORD *)(v8 + 16 * v17);
          v18 = 2 * v13 + 2;
          if (v18 < a3)
          {
            if ((*a2)(v8 + 16 * v17, v14 + 2))
            {
              v14 += 2;
              v17 = v18;
            }
          }
          result = ((uint64_t (*)(_QWORD *, __int128 *))*a2)(v14, &v19);
          v7 = v16;
          v13 = v17;
        }
        while (!(_DWORD)result);
        *v16 = v19;
      }
    }
  }
  return result;
}

_QWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(_QWORD *a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[2 * v6 + 2];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)((uint64_t)&a1[2 * v6 + 2], (uint64_t)&a1[2 * v6 + 4]))
    {
      v9 += 2;
      v10 = v11;
    }
    *a1 = *v9;
    a1[1] = v9[1];
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::pair<wchar_t const*,wchar_t *> const&,std::pair<wchar_t const*,wchar_t *> const&),std::pair<wchar_t const*,wchar_t *>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD *, __int128 *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v9;
  _QWORD *v10;
  _OWORD *v11;
  double result;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v15 = v4;
    v16 = v5;
    v9 = v6 >> 1;
    v10 = (_QWORD *)(a1 + 16 * (v6 >> 1));
    v11 = (_OWORD *)(a2 - 16);
    if ((*a3)(v10, (__int128 *)(a2 - 16)))
    {
      v14 = *v11;
      do
      {
        v13 = v10;
        *(_QWORD *)v11 = *v10;
        *((_QWORD *)v11 + 1) = v10[1];
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = (_QWORD *)(a1 + 16 * v9);
        v11 = v13;
      }
      while (((*a3)(v10, &v14) & 1) != 0);
      result = *(double *)&v14;
      *v13 = v14;
    }
  }
  return result;
}

uint64_t quasar::SilencePosteriorGeneratorConfig::SilencePosteriorGeneratorConfig(uint64_t a1, quasar::SystemConfig *a2, const void **a3)
{
  quasar::NFHatConfig *v6;
  size_t v7;
  void **v8;
  const void *v9;
  uint64_t Ptree;
  __int128 v11;
  uint64_t v12;
  uint64_t i;
  size_t v14;
  std::string *v15;
  void **v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  size_t v25;
  std::string *v26;
  const void *v27;
  std::string::size_type size;
  std::string *v29;
  std::string *v30;
  std::string v32;
  std::string v33;
  __int128 v34;
  void *__p;
  std::string v36;
  std::string v37;
  char v38;
  void *v39[2];
  unsigned __int8 v40;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = xmmword_1AE17DEE0;
  v6 = (quasar::NFHatConfig *)(a1 + 24);
  *(_BYTE *)(a1 + 40) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "spg");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 46, 0, (uint64_t)&__p);
  if (v36.__r_.__value_.__s.__data_[15] < 0)
    operator delete(__p);
  if (*((char *)a3 + 23) >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  std::string::basic_string[abi:ne180100]((uint64_t)v39, v7 + 9);
  if ((v40 & 0x80u) == 0)
    v8 = v39;
  else
    v8 = (void **)v39[0];
  if (v7)
  {
    if (*((char *)a3 + 23) >= 0)
      v9 = a3;
    else
      v9 = *a3;
    memmove(v8, v9, v7);
  }
  strcpy((char *)v8 + v7, ".frontend");
  Ptree = quasar::SystemConfig::getPtree((uint64_t)a2, (uint64_t)v39);
  LODWORD(__p) = *(_DWORD *)Ptree;
  if (*(char *)(Ptree + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)(Ptree + 8), *(_QWORD *)(Ptree + 16));
  }
  else
  {
    v11 = *(_OWORD *)(Ptree + 8);
    v36.__r_.__value_.__r.__words[2] = *(_QWORD *)(Ptree + 24);
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v11;
  }
  memset(&v37, 0, sizeof(v37));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v37, *(_QWORD *)(Ptree + 32), *(_QWORD *)(Ptree + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(Ptree + 40) - *(_QWORD *)(Ptree + 32)) >> 3));
  v38 = *(_BYTE *)(Ptree + 56);
  v12 = quasar::PTree::begin((quasar::PTree *)&__p);
  for (i = quasar::PTree::end((quasar::PTree *)&__p); v12 != i; v12 += 88)
  {
    if ((v40 & 0x80u) == 0)
      v14 = v40;
    else
      v14 = (size_t)v39[1];
    std::string::basic_string[abi:ne180100]((uint64_t)&v32, v14 + 1);
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v32;
    else
      v15 = (std::string *)v32.__r_.__value_.__r.__words[0];
    if (v14)
    {
      if ((v40 & 0x80u) == 0)
        v16 = v39;
      else
        v16 = (void **)v39[0];
      memmove(v15, v16, v14);
    }
    *(_WORD *)((char *)&v15->__r_.__value_.__l.__data_ + v14) = 46;
    v17 = *(char *)(v12 + 23);
    if (v17 >= 0)
      v18 = (const std::string::value_type *)v12;
    else
      v18 = *(const std::string::value_type **)v12;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(v12 + 23);
    else
      v19 = *(_QWORD *)(v12 + 8);
    v20 = std::string::append(&v32, v18, v19);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    quasar::FeatureExtractorSimpleFactory::createFeatureExtractor(&v33, &v34);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    quasar::FeatureExtractor::init((quasar::FeatureExtractor *)v34, a2);
    std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100]((char **)a1, &v34);
    v22 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  if (*((char *)a3 + 23) >= 0)
    v25 = *((unsigned __int8 *)a3 + 23);
  else
    v25 = (size_t)a3[1];
  std::string::basic_string[abi:ne180100]((uint64_t)&v33, v25 + 6);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v26 = &v33;
  else
    v26 = (std::string *)v33.__r_.__value_.__r.__words[0];
  if (v25)
  {
    if (*((char *)a3 + 23) >= 0)
      v27 = a3;
    else
      v27 = *a3;
    memmove(v26, v27, v25);
  }
  strcpy((char *)v26 + v25, ".nfhat");
  if (quasar::SystemConfig::hasParam((uint64_t)a2, (uint64_t)&v33))
  {
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    else
      size = v33.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&v32, size + 1);
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &v32;
    else
      v29 = (std::string *)v32.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &v33;
      else
        v30 = (std::string *)v33.__r_.__value_.__r.__words[0];
      memmove(v29, v30, size);
    }
    *(_WORD *)((char *)&v29->__r_.__value_.__l.__data_ + size) = 46;
    quasar::SystemConfig::setPrefix((std::string *)a2, &v32);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    quasar::NFHatConfig::registerParams(v6, a2);
    quasar::SystemConfig::readPtree((uint64_t)a2, (uint64_t)&v33, 0, 0);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  quasar::PTree::~PTree((quasar::PTree *)&__p);
  if ((char)v40 < 0)
    operator delete(v39[0]);
  return a1;
}

void sub_1ADD843DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,int a26,__int16 a27,char a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  quasar::PTree::~PTree((quasar::PTree *)&a24);
  if (*(char *)(v33 - 97) < 0)
    operator delete(*(void **)(v33 - 120));
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  _Unwind_Resume(a1);
}

uint64_t quasar::SilencePosteriorGenerator::SilencePosteriorGenerator(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, char a5)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 80) = 1;
  *(_DWORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  v6 = a2[1];
  v21 = *a2;
  v22 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = a3[1];
  v19 = *a3;
  v20 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  quasar::SilencePosteriorGenerator::init((int64x2_t *)a1, &v21, &v19, a4, a5);
  v12 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return a1;
}

void sub_1ADD845DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void **a14)
{
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v18;

  v16 = v15;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  v18 = (_QWORD *)*v16;
  *v16 = 0;
  if (v18)
    std::default_delete<quasar::NFHatTransformer>::operator()[abi:ne180100]((uint64_t)v16, v18);
  a14 = (void **)(v14 + 48);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a14);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v14 + 32);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v14 + 16);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

uint64_t quasar::SilencePosteriorGenerator::init(int64x2_t *a1, uint64_t *a2, uint64_t *a3, int a4, char a5)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int64x2_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _OWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  __int128 v30;
  int64x2_t v31;
  _OWORD *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;
  unint64_t v41;
  _OWORD *v42;
  _OWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  _QWORD *v52;
  _QWORD *v53;
  char *v54;
  __int128 v55;
  int64x2_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  _QWORD *v64;
  uint64_t *v65;
  _QWORD *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t result;
  unint64_t *v83;
  unint64_t v84;
  uint64_t *v85;
  __int128 v86;
  kaldi::OnlineFeatInputItf *v88;
  __int128 v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  __int128 v92;
  int v93;
  uint64_t v94;
  char v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _BYTE v99[41];
  int v100;
  char v101;
  __int128 v102;
  void *__p[2];
  uint64_t v104;
  char v105;
  void **v106;
  int64x2_t v107;
  uint64_t v108;
  int64x2_t *v109;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((int64x2_t *)a1[1].i64, a3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](a1, a2);
  v93 = a4;
  v94 = 0;
  v95 = 0;
  v100 = 0;
  v101 = 0;
  v96 = 0u;
  v97 = 0u;
  v98 = 0u;
  memset(v99, 0, sizeof(v99));
  v102 = 0u;
  *(_OWORD *)__p = 0u;
  v104 = 0;
  v105 = 1;
  v9 = *a2;
  v11 = *(uint64_t **)*a2;
  v10 = *(uint64_t **)(*a2 + 8);
  if (v11 != v10)
  {
    v85 = a2;
    v12 = a1 + 3;
    do
    {
      v13 = *v11;
      if (*a3)
        v14 = *a3 + 16;
      else
        v14 = 0;
      v15 = (std::__shared_weak_count *)a1[2].i64[1];
      v90 = a1[2].i64[0];
      v91 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      quasar::FeatureExtractor::createOnlineFeInput(v13, v14, &v90);
      v18 = (_OWORD *)a1[3].i64[1];
      v19 = a1[4].u64[0];
      if ((unint64_t)v18 >= v19)
      {
        v20 = ((uint64_t)v18 - v12->i64[0]) >> 4;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v22 = v19 - v12->i64[0];
        if (v22 >> 3 > v21)
          v21 = v22 >> 3;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
          v23 = 0xFFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        v109 = a1 + 4;
        v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)a1[4].i64, v23);
        v26 = &v24[16 * v20];
        *(_OWORD *)v26 = v92;
        v92 = 0uLL;
        v28 = (_QWORD *)a1[3].i64[0];
        v27 = (_QWORD *)a1[3].i64[1];
        if (v27 == v28)
        {
          v31 = vdupq_n_s64((unint64_t)v27);
          v29 = &v24[16 * v20];
        }
        else
        {
          v29 = &v24[16 * v20];
          do
          {
            v30 = *((_OWORD *)v27 - 1);
            v27 -= 2;
            *((_OWORD *)v29 - 1) = v30;
            v29 -= 16;
            *v27 = 0;
            v27[1] = 0;
          }
          while (v27 != v28);
          v31 = *v12;
        }
        v32 = v26 + 16;
        a1[3].i64[0] = (uint64_t)v29;
        a1[3].i64[1] = (uint64_t)(v26 + 16);
        v107 = v31;
        v33 = a1[4].i64[0];
        a1[4].i64[0] = (uint64_t)&v24[16 * v25];
        v108 = v33;
        v106 = (void **)v31.i64[0];
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)&v106);
        v34 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
        a1[3].i64[1] = (uint64_t)v32;
        if (v34)
        {
          v35 = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
      }
      else
      {
        *v18 = v92;
        v92 = 0uLL;
        a1[3].i64[1] = (uint64_t)(v18 + 1);
      }
      v37 = v91;
      if (v91)
      {
        v38 = (unint64_t *)&v91->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((int64x2_t *)a1[2].i64, (uint64_t *)(a1[3].i64[1] - 16));
      v11 += 2;
    }
    while (v11 != v10);
    a2 = v85;
    v9 = *v85;
  }
  if (*(_BYTE *)(v9 + 40))
  {
    v88 = (kaldi::OnlineFeatInputItf *)a1[2].i64[0];
    std::allocate_shared[abi:ne180100]<kaldi::OnlineBufferingInput,std::allocator<kaldi::OnlineBufferingInput>,kaldi::OnlineFeatInputItf *,void>(&v88, &v89);
    v40 = v89;
    v92 = v89;
    v89 = 0uLL;
    v41 = a1[4].u64[0];
    v42 = (_OWORD *)a1[3].i64[1];
    if ((unint64_t)v42 >= v41)
    {
      v86 = v40;
      v44 = a1[3].i64[0];
      v45 = ((uint64_t)v42 - v44) >> 4;
      if ((unint64_t)(v45 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v46 = v41 - v44;
      v47 = v46 >> 3;
      if (v46 >> 3 <= (unint64_t)(v45 + 1))
        v47 = v45 + 1;
      if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
        v48 = 0xFFFFFFFFFFFFFFFLL;
      else
        v48 = v47;
      v109 = a1 + 4;
      v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)a1[4].i64, v48);
      v51 = &v49[16 * v45];
      *(_OWORD *)v51 = v86;
      v92 = 0uLL;
      v53 = (_QWORD *)a1[3].i64[0];
      v52 = (_QWORD *)a1[3].i64[1];
      if (v52 == v53)
      {
        v56 = vdupq_n_s64((unint64_t)v52);
        v54 = &v49[16 * v45];
      }
      else
      {
        v54 = &v49[16 * v45];
        do
        {
          v55 = *((_OWORD *)v52 - 1);
          v52 -= 2;
          *((_OWORD *)v54 - 1) = v55;
          v54 -= 16;
          *v52 = 0;
          v52[1] = 0;
        }
        while (v52 != v53);
        v56 = a1[3];
      }
      v43 = v51 + 16;
      a1[3].i64[0] = (uint64_t)v54;
      a1[3].i64[1] = (uint64_t)(v51 + 16);
      v107 = v56;
      v57 = a1[4].i64[0];
      a1[4].i64[0] = (uint64_t)&v49[16 * v50];
      v108 = v57;
      v106 = (void **)v56.i64[0];
      std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)&v106);
    }
    else
    {
      *v42 = v40;
      v43 = v42 + 1;
      v92 = 0uLL;
    }
    a1[3].i64[1] = (uint64_t)v43;
    v58 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
    if (*((_QWORD *)&v89 + 1))
    {
      v59 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((int64x2_t *)a1[2].i64, (uint64_t *)(a1[3].i64[1] - 16));
  }
  a1[5].i32[2] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[2].i64[0] + 24))(a1[2].i64[0]);
  v61 = *a2;
  v62 = operator new();
  v63 = *(_OWORD *)(v61 + 24);
  *(_OWORD *)(v62 + 40) = 0u;
  *(_OWORD *)(v62 + 24) = 0u;
  *(_OWORD *)(v62 + 8) = 0u;
  *(_OWORD *)(v62 + 56) = v63;
  *(_QWORD *)(v62 + 72) = 0x3FF0000000000000;
  *(_DWORD *)(v62 + 80) = 0;
  *(_BYTE *)(v62 + 84) = a5;
  v66 = (_QWORD *)a1[4].i64[1];
  v65 = &a1[4].i64[1];
  v64 = v66;
  *v65 = v62;
  if (v66)
    std::default_delete<quasar::NFHatTransformer>::operator()[abi:ne180100]((uint64_t)v65, v64);
  if (SHIBYTE(v104) < 0)
    operator delete(__p[0]);
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
  if (*((_QWORD *)&v102 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = *(std::__shared_weak_count **)&v99[32];
  if (*(_QWORD *)&v99[32])
  {
    v71 = (unint64_t *)(*(_QWORD *)&v99[32] + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v106 = (void **)v99;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v106);
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
  if (*((_QWORD *)&v98 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
  if (*((_QWORD *)&v97 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
  if (*((_QWORD *)&v96 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  result = v94;
  if (v94)
  {
    v83 = (unint64_t *)(v94 + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void sub_1ADD84C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  uint64_t v14;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  quasar::FeatureExtractorArgs::~FeatureExtractorArgs((void **)va2);
  _Unwind_Resume(a1);
}

uint64_t quasar::SilencePosteriorGenerator::SilencePosteriorGenerator(uint64_t a1, uint64_t a2, int a3, char a4, int a5)
{
  unint64_t *v8;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v25;
  std::__shared_weak_count *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  _BYTE v48[1548];
  int v49;
  unsigned int v50;

  v49 = a5;
  v50 = a3;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_BYTE *)(a1 + 80) = 1;
  *(_DWORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v48);
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v28 = 0u;
  v29 = 0u;
  LODWORD(v30) = 1065353216;
  LODWORD(a2) = quasar::SystemConfig::readJsonFile((uint64_t)v48, a2, &v45, (uint64_t)&v28, 0, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v28);
  *(_QWORD *)&v28 = &v45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  if ((_DWORD)a2 == 2)
  {
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v28 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Silence posterior generator created with incorrect version", 58);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v28);
  }
  std::allocate_shared[abi:ne180100]<quasar::SilencePosteriorGeneratorConfig,std::allocator<quasar::SilencePosteriorGeneratorConfig>,quasar::SystemConfig &,char const(&)[4],void>((quasar::SystemConfig *)v48, "spg", &v28);
  std::allocate_shared[abi:ne180100]<quasar::RecogAudioBuffer,std::allocator<quasar::RecogAudioBuffer>,unsigned int const&,int &,void>(&v50, &v49, &v45);
  v27 = v28;
  if (*((_QWORD *)&v28 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v25 = v45;
  v26 = v46;
  if (v46)
  {
    p_shared_owners = (unint64_t *)&v46->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  quasar::SilencePosteriorGenerator::init((int64x2_t *)a1, (uint64_t *)&v27, &v25, v50, a4);
  v12 = v26;
  if (v26)
  {
    v13 = (unint64_t *)&v26->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v46;
  if (v46)
  {
    v19 = (unint64_t *)&v46->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v48);
  return a1;
}

void sub_1ADD84EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void **a50)
{
  uint64_t v50;
  _QWORD *v52;

  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a50);
  v52 = *(_QWORD **)(v50 + 72);
  *(_QWORD *)(v50 + 72) = 0;
  if (v52)
    std::default_delete<quasar::NFHatTransformer>::operator()[abi:ne180100](v50 + 72, v52);
  a50 = (void **)(v50 + 48);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a50);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v50 + 32);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v50 + 16);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v50);
  _Unwind_Resume(a1);
}

void sub_1ADD84F94()
{
  JUMPOUT(0x1ADD84F48);
}

uint64_t quasar::SilencePosteriorGenerator::estimateSilenceDuration(uint64_t a1, uint64_t a2)
{
  uint64_t (***v4)(_QWORD, _QWORD *);
  int v5;
  uint64_t v6;
  _OWORD v8[17];
  _QWORD v9[6];
  _QWORD v10[2];
  int v11;

  kaldi::Matrix<float>::Matrix((uint64_t)v10, 1, 2, 0, 0);
  v4 = *(uint64_t (****)(_QWORD, _QWORD *))(a1 + 32);
  kaldi::OnlineFeatInputItfIO::OnlineFeatInputItfIO(v9, (uint64_t)v10, 0, 0, 0, 0, 0);
  *(_BYTE *)(a1 + 80) = (**v4)(v4, v9);
  if ((int)kaldi::MatrixBase<float>::NumRows((uint64_t)v10) >= 1)
  {
    if (*(_BYTE *)(*(_QWORD *)a1 + 40) && kaldi::MatrixBase<float>::NumRows((uint64_t)v10) != 1)
    {
      memset(v8, 0, sizeof(v8));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"frameByFrame requires output batch size of 1", 44);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v8);
    }
    quasar::NFHatTransformer::estimateSilenceDuration(*(quasar::NFHatTransformer **)(a1 + 72), (uint64_t)v10, *(_DWORD *)(a1 + 88), a2);
    *(_DWORD *)(a1 + 84) += *(_DWORD *)(a1 + 88) * kaldi::MatrixBase<float>::NumRows((uint64_t)v10);
    v5 = kaldi::MatrixBase<float>::NumRows((uint64_t)v10);
    *(_DWORD *)(a1 + 92) = *(_DWORD *)(v10[0] + 4 * v11 * (v5 - 1));
  }
  v6 = *(unsigned __int8 *)(a1 + 80);
  kaldi::Matrix<float>::~Matrix((uint64_t)v10);
  return v6;
}

void sub_1ADD85108(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::Matrix<float>::~Matrix(v1 - 72);
  _Unwind_Resume(a1);
}

uint64_t quasar::SilencePosteriorGenerator::hasMoreAudio(quasar::SilencePosteriorGenerator *this)
{
  return *((unsigned __int8 *)this + 80);
}

double quasar::SilencePosteriorGenerator::getSilenceFramesCountMs(quasar::SilencePosteriorGenerator *this)
{
  return (double)(*((_DWORD *)this + 22) * *(_DWORD *)(*((_QWORD *)this + 9) + 80));
}

double quasar::SilencePosteriorGenerator::getSilenceProbability(quasar::SilencePosteriorGenerator *this)
{
  return *(double *)(*((_QWORD *)this + 9) + 72);
}

double quasar::SilencePosteriorGenerator::getSilenceDurationMs(double **this)
{
  return *this[9];
}

double quasar::SilencePosteriorGenerator::getSilencePosterior(quasar::SilencePosteriorGenerator *this)
{
  return *((float *)this + 23);
}

uint64_t quasar::SilencePosteriorGenerator::getProcessedAudioMs(quasar::SilencePosteriorGenerator *this)
{
  return *((unsigned int *)this + 21);
}

uint64_t quasar::SilencePosteriorGenerator::getFrameDurationMs(quasar::SilencePosteriorGenerator *this)
{
  return *((unsigned int *)this + 22);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::SilencePosteriorGeneratorConfig,std::allocator<quasar::SilencePosteriorGeneratorConfig>,quasar::SystemConfig &,char const(&)[4],void>@<X0>(quasar::SystemConfig *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<quasar::SilencePosteriorGeneratorConfig>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,char const(&)[4],std::allocator<quasar::SilencePosteriorGeneratorConfig>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADD851C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::SilencePosteriorGeneratorConfig>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,char const(&)[4],std::allocator<quasar::SilencePosteriorGeneratorConfig>,0>(_QWORD *a1, quasar::SystemConfig *a2, char *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E5D44B70;
  a1[1] = 0;
  std::allocator<quasar::SilencePosteriorGeneratorConfig>::construct[abi:ne180100]<quasar::SilencePosteriorGeneratorConfig,quasar::SystemConfig &,char const(&)[4]>((int)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1ADD85224(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::SilencePosteriorGeneratorConfig>::construct[abi:ne180100]<quasar::SilencePosteriorGeneratorConfig,quasar::SystemConfig &,char const(&)[4]>(int a1, uint64_t a2, quasar::SystemConfig *a3, char *__s)
{
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  quasar::SilencePosteriorGeneratorConfig::SilencePosteriorGeneratorConfig(a2, a3, (const void **)__p);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1ADD8528C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::RecogAudioBuffer,std::allocator<quasar::RecogAudioBuffer>,unsigned int const&,int &,void>@<X0>(unsigned int *a1@<X1>, int *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x160uLL);
  result = std::__shared_ptr_emplace<quasar::RecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<unsigned int const&,int &,std::allocator<quasar::RecogAudioBuffer>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADD852F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::RecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<unsigned int const&,int &,std::allocator<quasar::RecogAudioBuffer>,0>(_QWORD *a1, unsigned int *a2, int *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E5D42F00;
  a1[1] = 0;
  std::allocator<quasar::RecogAudioBuffer>::construct[abi:ne180100]<quasar::RecogAudioBuffer,unsigned int const&,int &>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1ADD85358(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::RecogAudioBuffer>::construct[abi:ne180100]<quasar::RecogAudioBuffer,unsigned int const&,int &>(uint64_t a1, uint64_t a2, unsigned int *a3, int *a4)
{
  unsigned int v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  void *__p[2];
  char v13;

  v5 = *a3;
  v6 = *a4;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  _ZNSt3__115allocate_sharedB8ne180100IKN5kaldi5TimerENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v10);
  quasar::RecogAudioBuffer::RecogAudioBuffer(a2, v5, v6, 0, 1, (__int128 *)__p, &v10, 120, 0, 4000);
  v7 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v13 < 0)
    operator delete(__p[0]);
}

void sub_1ADD85434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void quasar::defaultFallbackItnLeftContext(std::string **a1@<X8>)
{
  std::string *v3;
  uint64_t v4;
  __int128 v5;
  _QWORD v6[3];
  __int128 v7;

  *(_QWORD *)&v7 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v5, "hey");
  std::string::basic_string[abi:ne180100]<0>(v6, "Siri");
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = (std::string *)operator new(0x30uLL);
  *a1 = v3;
  a1[1] = v3;
  a1[2] = v3 + 2;
  v4 = 0;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a1 + 2), &v5, &v7, v3);
  do
  {
    if (SHIBYTE(v6[v4 + 2]) < 0)
      operator delete((void *)v6[v4]);
    v4 -= 3;
  }
  while (v4 != -6);
}

void sub_1ADD85544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v25 = v24;
  *(_QWORD *)(v23 + 8) = v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  v27 = 0;
  while (1)
  {
    if (*(&a23 + v27) < 0)
      operator delete(*(void **)((char *)&a18 + v27));
    v27 -= 24;
    if (v27 == -48)
      _Unwind_Resume(a1);
  }
}

uint64_t std::vector<std::string>::vector[abi:ne180100](uint64_t a1, __int128 *a2, unint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = 0;
  v4 = a1 + 16;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a3)
  {
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, a3);
    *(_QWORD *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(v4, a2, (__int128 *)((char *)a2 + 24 * a3), *(std::string **)(a1 + 8));
  }
  return a1;
}

void sub_1ADD8562C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void quasar::defaultLeadingSpaceTokens(uint64_t a1@<X8>)
{
  uint64_t i;
  unsigned __int8 v4[24];
  _QWORD v5[4];

  v5[3] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v4, "¿");
  std::string::basic_string[abi:ne180100]<0>(v5, "¡");
  std::unordered_set<std::string>::unordered_set(a1, v4, 2);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v5[i + 2]) < 0)
      operator delete(*(void **)&v4[i * 8 + 24]);
  }
}

void sub_1ADD85700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v17;

  v17 = 0;
  while (1)
  {
    if (*(char *)(v15 + v17 + 47) < 0)
      operator delete(*(void **)(v15 + v17 + 24));
    v17 -= 24;
    if (v17 == -48)
      _Unwind_Resume(exception_object);
  }
}

void quasar::formatWords(std::string *a1@<X0>, std::string *a2@<X1>, char a3@<W2>, std::string *a4@<X3>, unsigned int a5@<W4>, int a6@<W5>, uint64_t *a7@<X6>, _QWORD *a8@<X7>, std::string *a9@<X8>, char a10, std::string *a11, uint64_t a12, unsigned __int8 a13, uint64_t a14, uint64_t a15)
{
  std::string::size_type i;
  std::string::size_type v22;
  unsigned int v23;
  _QWORD *v24;
  __int128 *p_p;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  std::string *v29;
  int v30;
  std::string::size_type size;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  __int128 *v41;
  uint64_t v42;
  char v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  int v47;
  int hasInterUtteranceItn;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  std::string *v55;
  __int128 *v56;
  std::vector<std::wstring> *v57;
  _BYTE *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  std::string *v64;
  std::string::size_type v65;
  std::vector<std::wstring>::pointer begin;
  int v67;
  __int128 v68;
  std::string::size_type v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  std::string *v77;
  unsigned int v78;
  char v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  std::string::size_type v85;
  int v86;
  uint64_t v87;
  unsigned int v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  int v93;
  _BYTE *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  _QWORD *v99;
  std::string *v100;
  std::string::size_type v101;
  unsigned int v102;
  _BYTE *v103;
  unint64_t *v104;
  unint64_t v105;
  _QWORD *v106;
  std::string *v107;
  std::string::size_type v108;
  int v109;
  unsigned int v110;
  std::string *v111;
  std::vector<std::wstring>::pointer end;
  _BYTE *v116[2];
  _BYTE *v117[2];
  char **v118;
  std::__shared_weak_count *v119;
  char **v120;
  std::__shared_weak_count *v121;
  char **v122[2];
  std::string v123;
  std::vector<std::wstring> v124;
  _BYTE *v125[2];
  char **v126;
  std::__shared_weak_count *v127;
  __int16 v128;
  char **v129;
  std::__shared_weak_count *v130;
  __int128 __p;
  __int128 v132;
  int v133;
  unsigned int v134;
  unsigned int v135;
  __int128 v136;
  uint64_t v137;
  std::string v138;
  std::string v139;
  _BYTE *v140[2];
  __int128 v141;
  _QWORD v142[4];
  __int128 v143;
  _QWORD v144[4];
  __int128 v145;
  _QWORD v146[4];
  __int128 v147;
  __int128 v148;
  __int128 v149;
  _QWORD v150[4];
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  char v155;
  __int128 *v156[3];
  __int128 v157;
  char v158;
  __int128 v159;
  char v160;
  std::string v161;
  void **v162[3];

  v22 = a4->__r_.__value_.__r.__words[0];
  for (i = a4->__r_.__value_.__l.__size_; i != v22; quasar::Token::~Token((void **)(i - 224)))
    ;
  v111 = a4;
  a4->__r_.__value_.__l.__size_ = v22;
  if (quasar::gLogLevel >= 5)
  {
    v23 = a5;
    v152 = 0u;
    v153 = 0u;
    v151 = 0u;
    v149 = 0u;
    memset(v150, 0, sizeof(v150));
    v147 = 0u;
    v148 = 0u;
    memset(v146, 0, sizeof(v146));
    v145 = 0u;
    v143 = 0u;
    memset(v144, 0, sizeof(v144));
    memset(v142, 0, sizeof(v142));
    v141 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v141);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v141, (uint64_t)"ContinuousListening ITN Input Tokens: ", 38);
    quasar::tokens2Str((uint64_t *)a1, (std::string *)&__p);
    if ((SBYTE7(v132) & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = (__int128 *)__p;
    if ((SBYTE7(v132) & 0x80u) == 0)
      v26 = BYTE7(v132);
    else
      v26 = *((_QWORD *)&__p + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)p_p, v26);
    a5 = v23;
    if (SBYTE7(v132) < 0)
      operator delete((void *)__p);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v141);
    if (quasar::gLogLevel >= 5)
    {
      v152 = 0u;
      v153 = 0u;
      v151 = 0u;
      v149 = 0u;
      memset(v150, 0, sizeof(v150));
      v147 = 0u;
      v148 = 0u;
      memset(v146, 0, sizeof(v146));
      v145 = 0u;
      v143 = 0u;
      memset(v144, 0, sizeof(v144));
      memset(v142, 0, sizeof(v142));
      v141 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v141);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v141, (uint64_t)"ContinuousListening ITN LeftContext: ", 37);
      v27 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" tokens with leftContextProvidedByClient ", 41);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v141);
      if (quasar::gLogLevel >= 5)
      {
        v152 = 0u;
        v153 = 0u;
        v151 = 0u;
        v149 = 0u;
        memset(v150, 0, sizeof(v150));
        v147 = 0u;
        v148 = 0u;
        memset(v146, 0, sizeof(v146));
        v145 = 0u;
        v143 = 0u;
        memset(v144, 0, sizeof(v144));
        memset(v142, 0, sizeof(v142));
        v141 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v141);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v141, (uint64_t)"ContinuousListening ITN RightContext: ", 38);
        v28 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" tokens", 7);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v141);
      }
    }
  }
  v29 = a1;
  v30 = a13;
  if ((*a7 || a10) && (a2->__r_.__value_.__r.__words[0] != a2->__r_.__value_.__l.__size_ || (a3 & 1) != 0)
    || *(_QWORD *)a12 != *(_QWORD *)(a12 + 8))
  {
    a9->__r_.__value_.__r.__words[0] = 0;
    a9->__r_.__value_.__l.__size_ = 0;
    a9->__r_.__value_.__r.__words[2] = 0;
    memset(&v139, 0, sizeof(v139));
    memset(&v138, 0, sizeof(v138));
    v136 = 0uLL;
    v137 = 0;
    v135 = 0;
    v134 = 0x7FFFFFFF;
    if (a10)
    {
      size = a2->__r_.__value_.__l.__size_;
      if (size != a2->__r_.__value_.__r.__words[0])
        a5 += *(_DWORD *)(size - 192);
    }
    quasar::prependLeftContext(a1, a2, (uint64_t *)&v139, &v135, a5);
    quasar::appendRightContext((uint64_t *)&v139, (const quasar::Token **)a12, (uint64_t *)&v138, &v134);
    v32 = *(_QWORD *)(a15 + 24);
    if (!v32)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(__int128 *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v32 + 48))(&v141, v32, &v138);
    std::vector<quasar::Token>::__vdeallocate((void **)&a9->__r_.__value_.__l.__data_);
    *(_OWORD *)&a9->__r_.__value_.__l.__data_ = v141;
    a9->__r_.__value_.__r.__words[2] = v142[0];
    v142[0] = 0;
    v141 = 0uLL;
    *(_QWORD *)&__p = &v141;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    __p = 0u;
    v132 = 0u;
    v133 = 1065353216;
    v33 = *a7;
    if (*a7)
    {
      if (&__p != (__int128 *)(v33 + 80))
      {
        v133 = *(_DWORD *)(v33 + 112);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(&__p, *(uint64_t **)(v33 + 96), 0);
      }
    }
    else if (a10)
    {
      quasar::defaultLeadingSpaceTokens((uint64_t)&v141);
      std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__move_assign((uint64_t)&__p, (uint64_t *)&v141);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v141);
    }
    v110 = a5;
    v129 = 0;
    v130 = 0;
    quasar::getPreItnTokenToPostItnCharAlignment(&v138, a9, &v129, (uint64_t *)&v141);
    v43 = a3;
    v44 = v130;
    v136 = v141;
    v137 = v142[0];
    v142[0] = 0;
    v141 = 0uLL;
    if (v130)
    {
      p_shared_owners = (unint64_t *)&v130->__shared_owners_;
      do
        v46 = __ldaxr(p_shared_owners);
      while (__stlxr(v46 - 1, p_shared_owners));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v128 = 0;
    v47 = -1227133513 * ((a2->__r_.__value_.__l.__size_ - a2->__r_.__value_.__r.__words[0]) >> 5);
    hasInterUtteranceItn = quasar::hasInterUtteranceItn((int **)&v136, v47, v47- 1227133513* ((v29->__r_.__value_.__l.__size_ - v29->__r_.__value_.__r.__words[0]) >> 5)- 1, (_BYTE *)&v128 + 1, &v128);
    if ((_BYTE)v128)
    {
      v49 = *(_QWORD *)(a15 + 24);
      if (!v49)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(__int128 *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v49 + 48))(&v141, v49, &v139);
      std::vector<quasar::Token>::__vdeallocate((void **)&a9->__r_.__value_.__l.__data_);
      *(_OWORD *)&a9->__r_.__value_.__l.__data_ = v141;
      a9->__r_.__value_.__r.__words[2] = v142[0];
      v142[0] = 0;
      v141 = 0uLL;
      v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
      v126 = 0;
      v127 = 0;
      quasar::getPreItnTokenToPostItnCharAlignment(&v139, a9, &v126, (uint64_t *)&v141);
      if ((_QWORD)v136)
      {
        *((_QWORD *)&v136 + 1) = v136;
        operator delete((void *)v136);
      }
      v136 = v141;
      v137 = v142[0];
      v142[0] = 0;
      v141 = 0uLL;
      v50 = v127;
      if (v127)
      {
        v51 = (unint64_t *)&v127->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v43 = a3;
    }
    if (!hasInterUtteranceItn
      || (v53 = -1227133513 * ((a2->__r_.__value_.__l.__size_ - a2->__r_.__value_.__r.__words[0]) >> 5),
          (quasar::hasInterUtteranceItn((int **)&v136, v53, v53- 1227133513 * ((v29->__r_.__value_.__l.__size_ - v29->__r_.__value_.__r.__words[0]) >> 5)- 1, (_BYTE *)&v128 + 1, &v128) & 1) == 0))
    {
      quasar::stripLeftAndRightContext(a9, v135, v134, a8, v110, &__p);
      if (a11 != a9)
        std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)a11, a9->__r_.__value_.__r.__words[0], a9->__r_.__value_.__l.__size_, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a9->__r_.__value_.__l.__size_ - a9->__r_.__value_.__r.__words[0]) >> 5));
      quasar::removeTokenTimestampOffsets((uint64_t *)a9, v110, a6);
      if ((v43 & 1) != 0 || a13)
      {
        v58 = *(_BYTE **)(a14 + 8);
        v125[0] = *(_BYTE **)a14;
        v125[1] = v58;
        if (v58)
        {
          v59 = (unint64_t *)(v58 + 8);
          do
            v60 = __ldxr(v59);
          while (__stxr(v60 + 1, v59));
        }
        quasar::separatePunctuation(a9, v111, a13, v125);
        if (v58)
        {
          v61 = (unint64_t *)(v58 + 8);
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            (*(void (**)(_BYTE *))(*(_QWORD *)v58 + 16))(v58);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v58);
          }
        }
      }
      if (quasar::gLogLevel >= 5)
      {
        v152 = 0u;
        v153 = 0u;
        v151 = 0u;
        v149 = 0u;
        memset(v150, 0, sizeof(v150));
        v147 = 0u;
        v148 = 0u;
        memset(v146, 0, sizeof(v146));
        v145 = 0u;
        v143 = 0u;
        memset(v144, 0, sizeof(v144));
        memset(v142, 0, sizeof(v142));
        v141 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v141);
        v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v141, (uint64_t)"ContinuousListening ITN Output Tokens: ", 39);
        quasar::tokens2Str((uint64_t *)a9, &v161);
        if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v64 = &v161;
        else
          v64 = (std::string *)v161.__r_.__value_.__r.__words[0];
        if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v65 = HIBYTE(v161.__r_.__value_.__r.__words[2]);
        else
          v65 = v161.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v64, v65);
        if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v161.__r_.__value_.__l.__data_);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v141);
      }
      goto LABEL_195;
    }
    memset(&v124, 0, sizeof(v124));
    v54 = *a7;
    if (!*a7
      || (v55 = *(std::string **)(v54 + 56),
          v56 = *(__int128 **)(v54 + 64),
          v57 = (std::vector<std::wstring> *)(v54 + 56),
          v55 == (std::string *)v56))
    {
      if (a10)
      {
        quasar::defaultFallbackItnLeftContext((std::string **)&v141);
        std::vector<std::string>::__vdeallocate(&v124);
        *(_OWORD *)&v124.__begin_ = v141;
        v124.__end_cap_.__value_ = (std::wstring *)v142[0];
        v142[0] = 0;
        v141 = 0uLL;
        v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
      }
    }
    else if (&v124 != v57)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v124, v55, v56, 0xAAAAAAAAAAAAAAABLL * (((char *)v56 - (char *)v55) >> 3));
    }
    if (a2->__r_.__value_.__r.__words[0] != a2->__r_.__value_.__l.__size_)
    {
      begin = v124.__begin_;
      end = v124.__end_;
      if (v124.__begin_ != v124.__end_)
      {
        v67 = 0;
        memset(&v123, 0, sizeof(v123));
        do
        {
          if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(&v161, (const std::string::value_type *)begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
          }
          else
          {
            v68 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
            v161.__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v161.__r_.__value_.__l.__data_ = v68;
          }
          std::string::basic_string[abi:ne180100]<0>(&v159, "");
          std::string::basic_string[abi:ne180100]<0>(&v157, "");
          memset(v156, 0, sizeof(v156));
          std::string::basic_string[abi:ne180100]<0>(&v154, "");
          quasar::Token::Token((std::string *)&v141, (__int128 *)&v161, v67, v67 + 11, v67 + 11, 1, 0, &v159, 0.0, &v157, v156, 0, &v154, 0, 0);
          v69 = v123.__r_.__value_.__l.__size_;
          if (v123.__r_.__value_.__l.__size_ >= v123.__r_.__value_.__r.__words[2])
          {
            v123.__r_.__value_.__l.__size_ = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token>((uint64_t *)&v123, &v141);
            if (SHIBYTE(v150[0]) < 0)
              operator delete((void *)v149);
          }
          else
          {
            v70 = v141;
            *(_QWORD *)(v123.__r_.__value_.__l.__size_ + 16) = v142[0];
            *(_OWORD *)v69 = v70;
            v142[0] = 0;
            v141 = 0uLL;
            v71 = *(_QWORD *)((char *)&v142[2] + 6);
            *(_OWORD *)(v69 + 24) = *(_OWORD *)&v142[1];
            *(_QWORD *)(v69 + 38) = v71;
            v72 = v144[0];
            *(_OWORD *)(v69 + 48) = v143;
            *(_QWORD *)(v69 + 64) = v72;
            *(_QWORD *)(v69 + 72) = 0;
            v144[0] = 0;
            v143 = 0uLL;
            *(_QWORD *)(v69 + 80) = 0;
            *(_QWORD *)(v69 + 88) = 0;
            *(_OWORD *)(v69 + 72) = *(_OWORD *)&v144[1];
            *(_QWORD *)(v69 + 88) = v144[3];
            memset(&v144[1], 0, 24);
            v73 = v145;
            *(_QWORD *)(v69 + 112) = v146[0];
            *(_QWORD *)(v69 + 120) = 0;
            *(_OWORD *)(v69 + 96) = v73;
            v146[0] = 0;
            v145 = 0uLL;
            *(_QWORD *)(v69 + 128) = 0;
            *(_QWORD *)(v69 + 136) = 0;
            *(_OWORD *)(v69 + 120) = *(_OWORD *)&v146[1];
            *(_QWORD *)(v69 + 136) = v146[3];
            memset(&v146[1], 0, 24);
            v74 = v147;
            *(_QWORD *)(v69 + 160) = v148;
            *(_OWORD *)(v69 + 144) = v74;
            *(_QWORD *)&v148 = 0;
            v147 = 0uLL;
            LODWORD(v72) = DWORD2(v148);
            *(_WORD *)(v69 + 172) = WORD6(v148);
            *(_DWORD *)(v69 + 168) = v72;
            v75 = v149;
            *(_QWORD *)(v69 + 192) = v150[0];
            *(_OWORD *)(v69 + 176) = v75;
            v150[0] = 0;
            v149 = 0uLL;
            v76 = *(_OWORD *)&v150[1];
            *(_DWORD *)(v69 + 216) = v150[3];
            *(_OWORD *)(v69 + 200) = v76;
            v123.__r_.__value_.__l.__size_ = v69 + 224;
          }
          if (SBYTE7(v148) < 0)
            operator delete((void *)v147);
          v162[0] = (void **)&v146[1];
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v162);
          if (SHIBYTE(v146[0]) < 0)
            operator delete((void *)v145);
          v162[0] = (void **)&v144[1];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v162);
          if (SHIBYTE(v144[0]) < 0)
            operator delete((void *)v143);
          if (SHIBYTE(v142[0]) < 0)
            operator delete((void *)v141);
          if (v155 < 0)
            operator delete((void *)v154);
          *(_QWORD *)&v154 = v156;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v154);
          if (v158 < 0)
            operator delete((void *)v157);
          if (v160 < 0)
            operator delete((void *)v159);
          if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v161.__r_.__value_.__l.__data_);
          ++begin;
          v67 += 11;
        }
        while (begin != end);
        v77 = v29;
        if (v123.__r_.__value_.__r.__words[0] == v123.__r_.__value_.__l.__size_)
        {
          v79 = v43;
          v78 = v110;
        }
        else
        {
          v78 = *(_DWORD *)(v123.__r_.__value_.__l.__size_ - 192) + v110;
          v79 = v43;
        }
        quasar::prependLeftContext(v29, &v123, (uint64_t *)&v139, &v135, v78);
        if ((_BYTE)v128)
        {
          v80 = *(_QWORD *)(a15 + 24);
          if (!v80)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(__int128 *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v80 + 48))(&v141, v80, &v139);
          std::vector<quasar::Token>::__vdeallocate((void **)&a9->__r_.__value_.__l.__data_);
          *(_OWORD *)&a9->__r_.__value_.__l.__data_ = v141;
          a9->__r_.__value_.__r.__words[2] = v142[0];
          v142[0] = 0;
          v141 = 0uLL;
          v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
          v120 = 0;
          v121 = 0;
          quasar::getPreItnTokenToPostItnCharAlignment(&v139, a9, &v120, (uint64_t *)&v141);
          if ((_QWORD)v136)
          {
            operator delete((void *)v136);
            v136 = 0uLL;
            v137 = 0;
          }
          v136 = v141;
          v137 = v142[0];
          v142[0] = 0;
          v141 = 0uLL;
          v81 = v121;
          if (v121)
          {
            v82 = (unint64_t *)&v121->__shared_owners_;
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
        }
        else
        {
          quasar::appendRightContext((uint64_t *)&v139, (const quasar::Token **)a12, (uint64_t *)&v138, &v134);
          v84 = *(_QWORD *)(a15 + 24);
          if (!v84)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(__int128 *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v84 + 48))(&v141, v84, &v138);
          std::vector<quasar::Token>::__vdeallocate((void **)&a9->__r_.__value_.__l.__data_);
          *(_OWORD *)&a9->__r_.__value_.__l.__data_ = v141;
          a9->__r_.__value_.__r.__words[2] = v142[0];
          v142[0] = 0;
          v141 = 0uLL;
          v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
          v122[0] = 0;
          v122[1] = 0;
          quasar::getPreItnTokenToPostItnCharAlignment(&v138, a9, v122, (uint64_t *)&v141);
          if ((_QWORD)v136)
          {
            operator delete((void *)v136);
            v136 = 0uLL;
            v137 = 0;
          }
          v136 = v141;
          v137 = v142[0];
          v142[0] = 0;
          v141 = 0uLL;
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v122);
        }
        v85 = v123.__r_.__value_.__l.__size_;
        v86 = quasar::hasInterUtteranceItn((int **)&v136, -1227133513 * ((v123.__r_.__value_.__l.__size_ - v123.__r_.__value_.__r.__words[0]) >> 5), -1227133513 * ((v123.__r_.__value_.__l.__size_ - v123.__r_.__value_.__r.__words[0]) >> 5)- 1227133513 * ((v29->__r_.__value_.__l.__size_ - v29->__r_.__value_.__r.__words[0]) >> 5)- 1, (_BYTE *)&v128 + 1, &v128);
        if ((_BYTE)v128)
        {
          v87 = *(_QWORD *)(a15 + 24);
          if (!v87)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(__int128 *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v87 + 48))(&v141, v87, &v139);
          std::vector<quasar::Token>::__vdeallocate((void **)&a9->__r_.__value_.__l.__data_);
          *(_OWORD *)&a9->__r_.__value_.__l.__data_ = v141;
          a9->__r_.__value_.__r.__words[2] = v142[0];
          v142[0] = 0;
          v141 = 0uLL;
          v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
          v118 = 0;
          v119 = 0;
          quasar::getPreItnTokenToPostItnCharAlignment(&v139, a9, &v118, (uint64_t *)&v141);
          v88 = v78;
          if ((_QWORD)v136)
          {
            *((_QWORD *)&v136 + 1) = v136;
            operator delete((void *)v136);
          }
          v136 = v141;
          v137 = v142[0];
          v142[0] = 0;
          v141 = 0uLL;
          v89 = v119;
          if (v119)
          {
            v90 = (unint64_t *)&v119->__shared_owners_;
            do
              v91 = __ldaxr(v90);
            while (__stlxr(v91 - 1, v90));
            if (!v91)
            {
              ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
              std::__shared_weak_count::__release_weak(v89);
            }
          }
          v85 = v123.__r_.__value_.__l.__size_;
          v78 = v88;
          v77 = v29;
        }
        if (!v86
          || (quasar::hasInterUtteranceItn((int **)&v136, -1227133513 * ((v85 - v123.__r_.__value_.__r.__words[0]) >> 5), -1227133513 * ((v85 - v123.__r_.__value_.__r.__words[0]) >> 5)- 1227133513 * ((v77->__r_.__value_.__l.__size_ - v77->__r_.__value_.__r.__words[0]) >> 5)- 1, (_BYTE *)&v128 + 1, &v128) & 1) == 0)
        {
          v102 = *(_DWORD *)(v85 - 192);
          v141 = 0uLL;
          v142[0] = 0;
          quasar::stripLeftAndRightContext(a9, v102, v134, &v141, v78, &__p);
          v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
          if (a11 != a9)
            std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)a11, a9->__r_.__value_.__r.__words[0], a9->__r_.__value_.__l.__size_, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a9->__r_.__value_.__l.__size_ - a9->__r_.__value_.__r.__words[0]) >> 5));
          quasar::removeTokenTimestampOffsets((uint64_t *)a9, v78, a6);
          if ((v79 & 1) != 0 || v109)
          {
            v103 = *(_BYTE **)(a14 + 8);
            v117[0] = *(_BYTE **)a14;
            v117[1] = v103;
            if (v103)
            {
              v104 = (unint64_t *)(v103 + 8);
              do
                v105 = __ldxr(v104);
              while (__stxr(v105 + 1, v104));
            }
            quasar::separatePunctuation(a9, v111, v109, v117);
            std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v117);
          }
          if (quasar::gLogLevel >= 5)
          {
            v152 = 0u;
            v153 = 0u;
            v151 = 0u;
            v149 = 0u;
            memset(v150, 0, sizeof(v150));
            v147 = 0u;
            v148 = 0u;
            memset(v146, 0, sizeof(v146));
            v145 = 0u;
            v143 = 0u;
            memset(v144, 0, sizeof(v144));
            memset(v142, 0, sizeof(v142));
            v141 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v141);
            v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v141, (uint64_t)"ContinuousListening ITN Output Tokens: ", 39);
            quasar::tokens2Str((uint64_t *)a9, &v161);
            if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v107 = &v161;
            else
              v107 = (std::string *)v161.__r_.__value_.__r.__words[0];
            if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v108 = HIBYTE(v161.__r_.__value_.__r.__words[2]);
            else
              v108 = v161.__r_.__value_.__l.__size_;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)v107, v108);
            if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v161.__r_.__value_.__l.__data_);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v141);
          }
          *(_QWORD *)&v141 = &v123;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
          goto LABEL_194;
        }
        v29 = v77;
        v43 = v79;
        *(_QWORD *)&v141 = &v123;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
        v30 = v109;
      }
    }
    v92 = *(_QWORD *)(a15 + 24);
    if (!v92)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(__int128 *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v92 + 48))(&v141, v92, v29);
    std::vector<quasar::Token>::__vdeallocate((void **)&a9->__r_.__value_.__l.__data_);
    *(_OWORD *)&a9->__r_.__value_.__l.__data_ = v141;
    a9->__r_.__value_.__r.__words[2] = v142[0];
    v142[0] = 0;
    v141 = 0uLL;
    v161.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v161);
    if (a11 != a9)
      std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)a11, a9->__r_.__value_.__r.__words[0], a9->__r_.__value_.__l.__size_, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a9->__r_.__value_.__l.__size_ - a9->__r_.__value_.__r.__words[0]) >> 5));
    if ((v43 & 1) != 0 || v30)
    {
      v93 = v30;
      v94 = *(_BYTE **)(a14 + 8);
      v116[0] = *(_BYTE **)a14;
      v116[1] = v94;
      if (v94)
      {
        v95 = (unint64_t *)(v94 + 8);
        do
          v96 = __ldxr(v95);
        while (__stxr(v96 + 1, v95));
      }
      quasar::separatePunctuation(a9, v111, v93, v116);
      if (v94)
      {
        v97 = (unint64_t *)(v94 + 8);
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          (*(void (**)(_BYTE *))(*(_QWORD *)v94 + 16))(v94);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v94);
        }
      }
    }
    if (quasar::gLogLevel >= 5)
    {
      v152 = 0u;
      v153 = 0u;
      v151 = 0u;
      v149 = 0u;
      memset(v150, 0, sizeof(v150));
      v147 = 0u;
      v148 = 0u;
      memset(v146, 0, sizeof(v146));
      v145 = 0u;
      v143 = 0u;
      memset(v144, 0, sizeof(v144));
      memset(v142, 0, sizeof(v142));
      v141 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v141);
      v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v141, (uint64_t)"ContinuousListening ITN Output Tokens: ", 39);
      quasar::tokens2Str((uint64_t *)a9, &v161);
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v100 = &v161;
      else
        v100 = (std::string *)v161.__r_.__value_.__r.__words[0];
      if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v101 = HIBYTE(v161.__r_.__value_.__r.__words[2]);
      else
        v101 = v161.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)v100, v101);
      if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v161.__r_.__value_.__l.__data_);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v141);
    }
LABEL_194:
    *(_QWORD *)&v141 = &v124;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
LABEL_195:
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
    if ((_QWORD)v136)
      operator delete((void *)v136);
    *(_QWORD *)&v141 = &v138;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
    *(_QWORD *)&v141 = &v139;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v141);
    return;
  }
  v34 = *(_QWORD *)(a15 + 24);
  if (!v34)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(__int128 *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v34 + 48))(&v141, v34, a1);
  std::vector<quasar::Token>::__vdeallocate((void **)&a11->__r_.__value_.__l.__data_);
  *(_OWORD *)&a11->__r_.__value_.__l.__data_ = v141;
  a11->__r_.__value_.__r.__words[2] = v142[0];
  v142[0] = 0;
  v141 = 0uLL;
  *(_QWORD *)&__p = &v141;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  quasar::removeTokenTimestampOffsets((uint64_t *)a11, 0, a6);
  if (a13)
  {
    v35 = *(_BYTE **)(a14 + 8);
    v140[0] = *(_BYTE **)a14;
    v140[1] = v35;
    if (v35)
    {
      v36 = (unint64_t *)(v35 + 8);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    quasar::separatePunctuation(a11, v111, 1, v140);
    if (v35)
    {
      v38 = (unint64_t *)(v35 + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        (*(void (**)(_BYTE *))(*(_QWORD *)v35 + 16))(v35);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v35);
      }
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    v152 = 0u;
    v153 = 0u;
    v151 = 0u;
    v149 = 0u;
    memset(v150, 0, sizeof(v150));
    v147 = 0u;
    v148 = 0u;
    memset(v146, 0, sizeof(v146));
    v145 = 0u;
    v143 = 0u;
    memset(v144, 0, sizeof(v144));
    memset(v142, 0, sizeof(v142));
    v141 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v141);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v141, (uint64_t)"ContinuousListening ITN Output Tokens: ", 39);
    quasar::tokens2Str((uint64_t *)a11, (std::string *)&__p);
    if ((SBYTE7(v132) & 0x80u) == 0)
      v41 = &__p;
    else
      v41 = (__int128 *)__p;
    if ((SBYTE7(v132) & 0x80u) == 0)
      v42 = BYTE7(v132);
    else
      v42 = *((_QWORD *)&__p + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
    if (SBYTE7(v132) < 0)
      operator delete((void *)__p);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v141);
  }
  a9->__r_.__value_.__r.__words[0] = 0;
  a9->__r_.__value_.__l.__size_ = 0;
  a9->__r_.__value_.__r.__words[2] = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a9, a11->__r_.__value_.__r.__words[0], a11->__r_.__value_.__l.__size_, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a11->__r_.__value_.__l.__size_ - a11->__r_.__value_.__r.__words[0]) >> 5));
}

void sub_1ADD86AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  char a64;
  uint64_t a69;
  uint64_t v69;
  void *v71;

  if (*(char *)(v69 - 105) < 0)
    operator delete(*(void **)(v69 - 128));
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a69);
  a69 = (uint64_t)&a38;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a69);
  a69 = (uint64_t)&a41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a69);
  v71 = (void *)a57;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p);
  if (v71)
    operator delete(v71);
  a69 = (uint64_t)&a61;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a69);
  a69 = (uint64_t)&a64;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a69);
  a69 = a16;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a69);
  _Unwind_Resume(a1);
}

uint64_t *quasar::removeTokenTimestampOffsets(uint64_t *result, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  int32x2_t v5;

  if (a2 || a3)
  {
    v3 = *result;
    v4 = result[1];
    if (*result != v4 && *(_DWORD *)(v3 + 28) >= a2)
    {
      v5 = vdup_n_s32(a2);
      do
      {
        if (a3)
        {
          *(_QWORD *)(v3 + 32) = 0;
          *(_DWORD *)(v3 + 28) = 0;
        }
        else
        {
          *(int32x2_t *)(v3 + 28) = vsub_s32(*(int32x2_t *)(v3 + 28), v5);
          *(_DWORD *)(v3 + 36) -= a2;
        }
        v3 += 224;
      }
      while (v3 != v4);
    }
  }
  return result;
}

void quasar::separatePunctuation(std::string *a1, std::string *a2, int a3, _BYTE **a4)
{
  std::string *i;
  std::string *v9;
  _BYTE *v10;
  __int128 *size;
  std::string::size_type v12;
  unsigned int j;
  unsigned int v14;
  std::string::size_type v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t p_size;
  std::string::size_type v19;
  std::string::size_type v20;
  std::string::size_type v21;
  _QWORD *v22;
  void **v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  void **v28;
  uint64_t v29;
  void *__p[2];
  unsigned __int8 v31;
  void *v32[2];
  unsigned __int8 v33;
  _OWORD v34[17];

  v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
  for (i = (std::string *)a2->__r_.__value_.__l.__size_;
        i != v9;
  a2->__r_.__value_.__l.__size_ = (std::string::size_type)v9;
  v10 = *a4;
  if (*a4)
    *v10 = 0;
  v12 = a1->__r_.__value_.__r.__words[0];
  size = (__int128 *)a1->__r_.__value_.__l.__size_;
  if ((__int128 *)a1->__r_.__value_.__l.__data_ != size)
  {
    for (j = -1227133513 * (((unint64_t)size - v12) >> 5) - 1; (j & 0x80000000) == 0; --j)
    {
      v14 = j;
      v15 = v12 + 224 * j;
      if (*(char *)(v15 + 23) < 0)
        v16 = *(_QWORD *)(v15 + 8);
      else
        v16 = *(unsigned __int8 *)(v15 + 23);
      if (v16)
      {
        v17 = v14;
        if (*(_BYTE *)(v12 + 224 * v14 + 172))
        {
          if (a3)
          {
            if (v10)
              *v10 = 1;
          }
          else
          {
            if ((unint64_t)v9 >= a2->__r_.__value_.__r.__words[2])
            {
              p_size = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)a2, (const quasar::Token *)v15);
            }
            else
            {
              quasar::Token::Token(v9, (const quasar::Token *)v15);
              p_size = (uint64_t)&v9[9].__r_.__value_.__l.__size_;
              a2->__r_.__value_.__l.__size_ = (std::string::size_type)&v9[9].__r_.__value_.__l.__size_;
            }
            a2->__r_.__value_.__l.__size_ = p_size;
            v12 = a1->__r_.__value_.__r.__words[0];
            size = (__int128 *)a1->__r_.__value_.__l.__size_;
          }
          std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>((__int128 *)(v12 + 224 * v17 + 224), size, v12 + 224 * v17);
          v20 = v19;
          v21 = a1->__r_.__value_.__l.__size_;
          if (v21 != v19)
          {
            do
              quasar::Token::~Token((void **)(v21 - 224));
            while (v21 != v20);
          }
          a1->__r_.__value_.__l.__size_ = v20;
          if (quasar::gLogLevel >= 6)
          {
            memset(v34, 0, sizeof(v34));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
            v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Separate post-ITN output: ", 26);
            quasar::formatResultTokensSimple(a1, 0);
            if ((v33 & 0x80u) == 0)
              v23 = v32;
            else
              v23 = (void **)v32[0];
            if ((v33 & 0x80u) == 0)
              v24 = v33;
            else
              v24 = (uint64_t)v32[1];
            v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
            v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"; ", 2);
            v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Separate post-ITN punctuation: ", 31);
            quasar::formatResultTokensSimple(a2, 0);
            if ((v31 & 0x80u) == 0)
              v28 = __p;
            else
              v28 = (void **)__p[0];
            if ((v31 & 0x80u) == 0)
              v29 = v31;
            else
              v29 = (uint64_t)__p[1];
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
            if ((char)v31 < 0)
              operator delete(__p[0]);
            if ((char)v33 < 0)
              operator delete(v32[0]);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v34);
          }
        }
        return;
      }
    }
  }
}

void sub_1ADD8703C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v21 + 8) = v22;
  _Unwind_Resume(exception_object);
}

void quasar::prependLeftContext(std::string *a1, std::string *a2, uint64_t *a3, _DWORD *a4, unsigned int a5)
{
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t size;
  const quasar::Token *v14;
  const quasar::Token *v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  std::string *v20;
  int32x2_t v21;
  _QWORD *v22;
  void **v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  void **v28;
  uint64_t v29;
  void *__p[2];
  unsigned __int8 v31;
  void *v32[2];
  unsigned __int8 v33;
  _OWORD v34[17];

  v11 = *a3;
  for (i = a3[1]; i != v11; quasar::Token::~Token((void **)(i - 224)))
    ;
  a3[1] = v11;
  std::vector<quasar::Token>::reserve(a3, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1->__r_.__value_.__l.__size_ - a1->__r_.__value_.__r.__words[0]) >> 5)+ 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2->__r_.__value_.__l.__size_ - a2->__r_.__value_.__r.__words[0]) >> 5));
  v12 = a2->__r_.__value_.__r.__words[0];
  size = a2->__r_.__value_.__l.__size_;
  if (a2->__r_.__value_.__r.__words[0] == size)
  {
    v14 = (const quasar::Token *)a1->__r_.__value_.__r.__words[0];
    v15 = (const quasar::Token *)a1->__r_.__value_.__l.__size_;
  }
  else
  {
    if (a3 != (uint64_t *)a2)
    {
      std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)a3, v12, size, 0x6DB6DB6DB6DB6DB7 * ((size - v12) >> 5));
      v12 = a2->__r_.__value_.__r.__words[0];
      size = a2->__r_.__value_.__l.__size_;
    }
    *(_BYTE *)(a3[1] - 180) = 1;
    *a4 = *(_DWORD *)(size - 192);
    v14 = (const quasar::Token *)a1->__r_.__value_.__r.__words[0];
    v15 = (const quasar::Token *)a1->__r_.__value_.__l.__size_;
    if (v12 != size && v14 != v15)
    {
      v16 = *((_DWORD *)v14 + 7);
      v17 = v16 + a5;
      v18 = *(_DWORD *)(size - 192);
      v19 = v18 - v16;
      if (v18 > v17)
        a5 = v19;
    }
  }
  v20 = (std::string *)a3[1];
  if (v14 != v15)
  {
    v21 = vdup_n_s32(a5);
    do
    {
      if ((unint64_t)v20 >= a3[2])
      {
        v20 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a3, v14);
      }
      else
      {
        quasar::Token::Token(v20, v14);
        v20 = (std::string *)((char *)v20 + 224);
        a3[1] = (uint64_t)v20;
      }
      a3[1] = (uint64_t)v20;
      *(int32x2_t *)((char *)&v20[-9].__r_.__value_.__r.__words[2] + 4) = vadd_s32(*(int32x2_t *)((char *)&v20[-9].__r_.__value_.__r.__words[2]+ 4), v21);
      HIDWORD(v20[-8].__r_.__value_.__r.__words[0]) += a5;
      v14 = (const quasar::Token *)((char *)v14 + 224);
    }
    while (v14 != v15);
  }
  if ((std::string *)*a3 != v20)
    v20[-8].__r_.__value_.__s.__data_[12] = 1;
  if (quasar::gLogLevel >= 6)
  {
    memset(v34, 0, sizeof(v34));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v34);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"preITN leftContext: ", 20);
    quasar::formatResultTokensSimple(a2, 0);
    if ((v33 & 0x80u) == 0)
      v23 = v32;
    else
      v23 = (void **)v32[0];
    if ((v33 & 0x80u) == 0)
      v24 = v33;
    else
      v24 = (uint64_t)v32[1];
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"; ", 2);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"preITN currentContext: ", 23);
    quasar::formatResultTokensSimple(a1, 0);
    if ((v31 & 0x80u) == 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
    if ((v31 & 0x80u) == 0)
      v29 = v31;
    else
      v29 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
    if ((char)v31 < 0)
      operator delete(__p[0]);
    if ((char)v33 < 0)
      operator delete(v32[0]);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v34);
  }
}

void sub_1ADD87350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a21);
  _Unwind_Resume(a1);
}

void quasar::appendRightContext(uint64_t *a1, const quasar::Token **a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t i;
  uint64_t v9;
  const quasar::Token *v10;
  const quasar::Token *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  std::string *v18;
  int32x2_t v19;

  v9 = *a3;
  for (i = a3[1]; i != v9; quasar::Token::~Token((void **)(i - 224)))
    ;
  a3[1] = v9;
  std::vector<quasar::Token>::reserve(a3, 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5) + 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  if (a3 != a1)
    std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)a3, *a1, a1[1], 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5));
  v10 = *a2;
  v11 = a2[1];
  if (v10 != v11)
  {
    *a4 = *((_DWORD *)v10 + 7);
    v12 = a1[1];
    if (*a1 == v12)
    {
      v17 = 0;
    }
    else
    {
      v13 = *(_DWORD *)(v12 - 192);
      v14 = *((_DWORD *)v10 + 7);
      v15 = v13 >= v14;
      v16 = v13 - v14;
      if (v15)
        v17 = v16 + 1;
      else
        v17 = 0;
    }
    v18 = (std::string *)a3[1];
    v19 = vdup_n_s32(v17);
    do
    {
      if ((unint64_t)v18 >= a3[2])
      {
        v18 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a3, v10);
      }
      else
      {
        quasar::Token::Token(v18, v10);
        v18 = (std::string *)((char *)v18 + 224);
        a3[1] = (uint64_t)v18;
      }
      a3[1] = (uint64_t)v18;
      *(int32x2_t *)((char *)&v18[-9].__r_.__value_.__r.__words[2] + 4) = vadd_s32(*(int32x2_t *)((char *)&v18[-9].__r_.__value_.__r.__words[2]+ 4), v19);
      HIDWORD(v18[-8].__r_.__value_.__r.__words[0]) += v17;
      v10 = (const quasar::Token *)((char *)v10 + 224);
    }
    while (v10 != v11);
    *a4 += v17;
  }
}

void sub_1ADD87504(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t quasar::hasInterUtteranceItn(int **a1, int a2, int a3, _BYTE *a4, _BYTE *a5)
{
  int *v5;
  int *v6;
  int *v7;
  int v8;
  int v11;
  _BOOL4 v13;

  *a4 = 0;
  *a5 = 0;
  v5 = *a1;
  v6 = a1[1];
  if (*a1 != v6)
  {
    v7 = *a1;
    do
    {
      v8 = *v7;
      if (*v7 < a2 && v7[1] >= a2)
      {
        *a4 = 1;
        goto LABEL_13;
      }
      v7 += 4;
    }
    while (v8 < a2 && v7 != v6);
  }
  do
  {
LABEL_13:
    if (v6 == v5)
      break;
    v11 = *(v6 - 3);
    if (*(v6 - 4) <= a3 && v11 > a3)
    {
      v13 = 1;
      *a5 = 1;
      return *a4 || v13;
    }
    v6 -= 4;
  }
  while (v11 > a3);
  v13 = *a5 != 0;
  return *a4 || v13;
}

void quasar::stripLeftAndRightContext(std::string *a1, unsigned int a2, unsigned int a3, _QWORD *a4, unsigned int a5, _QWORD *a6)
{
  const quasar::Token *v10;
  const quasar::Token *size;
  char v12;
  uint32x2_t v13;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint32x2_t v18;
  uint64_t v19;
  std::string::size_type v20;
  int *v21;
  std::basic_string<char32_t> *p_p;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  float v25;
  std::string::size_type v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  std::string::size_type v34;
  unsigned int v35;
  std::string::size_type v36;
  std::string::size_type v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  std::string *v41;
  std::string::size_type v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  void **v46;
  uint64_t v47;
  std::string v50[2];
  void *v51[2];
  _OWORD v52[2];
  void *v53[2];
  _OWORD v54[2];
  void *v55[2];
  __int128 v56;
  void *v57[2];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  void *v63[2];
  char v64;
  __int128 *v65[3];
  void *v66[2];
  char v67;
  void *v68[2];
  char v69;
  void *v70[2];
  char v71;
  std::string v72;
  _BYTE v73[22];
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  int v84;
  __int16 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  int v89;
  std::basic_string<char32_t> __p;
  void *v91[2];
  char v92;
  std::string v93;
  char v94;
  void *v95;
  char v96;
  uint64_t v97;
  void *v98;
  char v99;
  uint64_t v100;
  void *v101;
  char v102;
  void *v103;
  char v104;
  std::string v105;
  void **v106;
  void *v107[2];
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  if (a2 || a3 != 0x7FFFFFFF)
  {
    memset(&v105, 0, sizeof(v105));
    std::string::basic_string[abi:ne180100]<0>(v91, "");
    std::string::basic_string[abi:ne180100]<0>(v50, "");
    std::string::basic_string[abi:ne180100]<0>(&v72, "");
    v107[1] = 0;
    v107[0] = 0;
    *(_QWORD *)&v108 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    quasar::Token::Token(&v93, (__int128 *)v91, 0, 0, 0, 0, 0, (__int128 *)v50, 0.0, (__int128 *)&v72, (__int128 **)v107, 0, (__int128 *)&__p, 0, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = (std::basic_string<char32_t>::size_type)v107;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v72.__r_.__value_.__l.__data_);
    if (SHIBYTE(v50[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50[0].__r_.__value_.__l.__data_);
    if (v92 < 0)
      operator delete(v91[0]);
    v10 = (const quasar::Token *)a1->__r_.__value_.__r.__words[0];
    size = (const quasar::Token *)a1->__r_.__value_.__l.__size_;
    if ((const quasar::Token *)a1->__r_.__value_.__l.__data_ != size)
    {
      v12 = 0;
      v13 = (uint32x2_t)vdup_n_s32(a5);
      while (1)
      {
        quasar::Token::Token(v50, v10);
        if (HIDWORD(v50[1].__r_.__value_.__r.__words[0]) >= a3 && BYTE12(v56) == 0)
        {
          v15 = 2;
          v12 = 1;
        }
        else if (HIDWORD(v50[1].__r_.__value_.__r.__words[0]) >= a2)
        {
          v16 = LODWORD(v50[1].__r_.__value_.__r.__words[1]) != a2 || BYTE12(v56) == 0;
          if (v16 || (v17 = a4[1], *a4 != v17) && *(_BYTE *)(v17 - 52))
          {
            v18 = *(uint32x2_t *)((char *)v50[1].__r_.__value_.__r.__words + 4);
            if (v105.__r_.__value_.__r.__words[0] != v105.__r_.__value_.__l.__size_ || !a6[3])
              goto LABEL_67;
            v19 = operator new();
            *(_OWORD *)(v19 + 8) = xmmword_1AE1402C0;
            *(_DWORD *)(v19 + 24) = 0;
            *(_QWORD *)v19 = &unk_1E5D40240;
            *(_OWORD *)v107 = 0u;
            v108 = 0u;
            v109 = 0u;
            v110 = v19;
            v111 = 0u;
            v112 = 0u;
            v113 = 0u;
            v114 = 0u;
            v115 = 0u;
            v116 = 0u;
            v117 = 0u;
            v118 = 0u;
            v20 = HIBYTE(v50[0].__r_.__value_.__r.__words[2]);
            if ((v50[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v21 = (int *)v50;
            else
              v21 = (int *)v50[0].__r_.__value_.__r.__words[0];
            if ((v50[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v20 = v50[0].__r_.__value_.__l.__size_;
            v119 = 0;
            std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::from_bytes((uint64_t)v107, v21, (int *)((char *)v21 + v20), &__p);
            if (!v94)
              goto LABEL_64;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
              {
                p_p = &__p;
                goto LABEL_40;
              }
LABEL_66:
              std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)v107);
              v18 = *(uint32x2_t *)((char *)v50[1].__r_.__value_.__r.__words + 4);
LABEL_67:
              v34 = (std::string::size_type)vmax_u32(v18, v13);
              v35 = HIDWORD(v50[1].__r_.__value_.__r.__words[1]);
              if (HIDWORD(v50[1].__r_.__value_.__r.__words[1]) <= a5)
                v35 = a5;
              HIDWORD(v50[1].__r_.__value_.__r.__words[1]) = v35;
              *(std::string::size_type *)((char *)v50[1].__r_.__value_.__r.__words + 4) = v34;
              if (quasar::Token::isAutoPunctuation((quasar::Token *)v50))
              {
                HIDWORD(v50[1].__r_.__value_.__r.__words[0]) = v50[1].__r_.__value_.__r.__words[1];
                HIDWORD(v50[1].__r_.__value_.__r.__words[1]) = v50[1].__r_.__value_.__r.__words[1];
              }
              v36 = v105.__r_.__value_.__l.__size_;
              if (v105.__r_.__value_.__l.__size_ >= v105.__r_.__value_.__r.__words[2])
              {
                v37 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v105, (const quasar::Token *)v50);
              }
              else
              {
                quasar::Token::Token((std::string *)v105.__r_.__value_.__l.__size_, (const quasar::Token *)v50);
                v37 = v36 + 224;
              }
              v15 = 0;
              v105.__r_.__value_.__l.__size_ = v37;
              goto LABEL_75;
            }
            if (__p.__r_.__value_.__l.__size_)
            {
              p_p = (std::basic_string<char32_t> *)__p.__r_.__value_.__r.__words[0];
LABEL_40:
              LODWORD(v68[0]) = p_p->__r_.__value_.__s.__data_[0];
              std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::to_bytes((uint64_t)v107, (char *)v68, (char *)v68 + 4, &v72);
              v23 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a6, (unsigned __int8 *)&v72);
              v24 = v23;
              if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              {
                if (!v23)
                  goto LABEL_64;
LABEL_44:
                std::string::basic_string[abi:ne180100]<0>(v70, " ");
                v25 = *(float *)&v50[1].__r_.__value_.__r.__words[2];
                std::string::basic_string[abi:ne180100]<0>(v68, "");
                std::string::basic_string[abi:ne180100]<0>(v66, "");
                memset(v65, 0, sizeof(v65));
                std::string::basic_string[abi:ne180100]<0>(v63, "");
                quasar::Token::Token(&v72, (__int128 *)v70, a5, a5, a5, 0, 0, (__int128 *)v68, v25, (__int128 *)v66, v65, 0, (__int128 *)v63, 0, 0);
                v26 = v105.__r_.__value_.__l.__size_;
                if (v105.__r_.__value_.__l.__size_ >= v105.__r_.__value_.__r.__words[2])
                {
                  v105.__r_.__value_.__l.__size_ = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token>((uint64_t *)&v105, (__int128 *)&v72);
                  if (SHIBYTE(v87) < 0)
                    operator delete((void *)v86);
                }
                else
                {
                  v27 = *(_OWORD *)&v72.__r_.__value_.__l.__data_;
                  *(_QWORD *)(v105.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v72.__r_.__value_.__l + 2);
                  *(_OWORD *)v26 = v27;
                  memset(&v72, 0, sizeof(v72));
                  v28 = *(_QWORD *)&v73[14];
                  *(_OWORD *)(v26 + 24) = *(_OWORD *)v73;
                  *(_QWORD *)(v26 + 38) = v28;
                  v29 = v75;
                  *(_OWORD *)(v26 + 48) = v74;
                  *(_QWORD *)(v26 + 64) = v29;
                  *(_QWORD *)(v26 + 72) = 0;
                  v75 = 0;
                  v74 = 0uLL;
                  *(_QWORD *)(v26 + 80) = 0;
                  *(_QWORD *)(v26 + 88) = 0;
                  *(_OWORD *)(v26 + 72) = v76;
                  *(_QWORD *)(v26 + 88) = v77;
                  v76 = 0uLL;
                  v77 = 0;
                  v30 = v78;
                  *(_QWORD *)(v26 + 112) = v79;
                  *(_QWORD *)(v26 + 120) = 0;
                  *(_OWORD *)(v26 + 96) = v30;
                  v79 = 0;
                  v78 = 0uLL;
                  *(_QWORD *)(v26 + 128) = 0;
                  *(_QWORD *)(v26 + 136) = 0;
                  *(_OWORD *)(v26 + 120) = v80;
                  *(_QWORD *)(v26 + 136) = v81;
                  v80 = 0uLL;
                  v81 = 0;
                  v31 = v82;
                  *(_QWORD *)(v26 + 160) = v83;
                  *(_OWORD *)(v26 + 144) = v31;
                  v83 = 0;
                  v82 = 0uLL;
                  LODWORD(v29) = v84;
                  *(_WORD *)(v26 + 172) = v85;
                  *(_DWORD *)(v26 + 168) = v29;
                  v32 = v86;
                  *(_QWORD *)(v26 + 192) = v87;
                  *(_OWORD *)(v26 + 176) = v32;
                  v87 = 0;
                  v86 = 0uLL;
                  v33 = v88;
                  *(_DWORD *)(v26 + 216) = v89;
                  *(_OWORD *)(v26 + 200) = v33;
                  v105.__r_.__value_.__l.__size_ = v26 + 224;
                }
                if (SHIBYTE(v83) < 0)
                  operator delete((void *)v82);
                v106 = (void **)&v80;
                std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v106);
                if (SHIBYTE(v79) < 0)
                  operator delete((void *)v78);
                v106 = (void **)&v76;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v106);
                if (SHIBYTE(v75) < 0)
                  operator delete((void *)v74);
                if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v72.__r_.__value_.__l.__data_);
                if (v64 < 0)
                  operator delete(v63[0]);
                v63[0] = v65;
                std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v63);
                if (v67 < 0)
                  operator delete(v66[0]);
                if (v69 < 0)
                  operator delete(v68[0]);
                if (v71 < 0)
                  operator delete(v70[0]);
                goto LABEL_64;
              }
              operator delete(v72.__r_.__value_.__l.__data_);
              if (v24)
                goto LABEL_44;
LABEL_64:
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_66;
            }
            operator delete(__p.__r_.__value_.__l.__data_);
            goto LABEL_66;
          }
          v15 = 3;
        }
        else
        {
          v15 = 0;
        }
LABEL_75:
        if (SBYTE7(v58) < 0)
          operator delete(v57[0]);
        if (SBYTE7(v56) < 0)
          operator delete(v55[0]);
        v72.__r_.__value_.__r.__words[0] = (std::string::size_type)v54 + 8;
        std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
        if (SBYTE7(v54[0]) < 0)
          operator delete(v53[0]);
        v72.__r_.__value_.__r.__words[0] = (std::string::size_type)v52 + 8;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
        if (SBYTE7(v52[0]) < 0)
          operator delete(v51[0]);
        if (SHIBYTE(v50[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v50[0].__r_.__value_.__l.__data_);
        if (v15 == 3 || !v15)
        {
          v10 = (const quasar::Token *)((char *)v10 + 224);
          if (v10 != size)
            continue;
        }
        if ((v12 & 1) != 0 && v105.__r_.__value_.__r.__words[0] != v105.__r_.__value_.__l.__size_)
          *(_BYTE *)(v105.__r_.__value_.__l.__size_ - 180) = 0;
        break;
      }
    }
    if (quasar::gLogLevel >= 6)
    {
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      *(_OWORD *)v57 = 0u;
      v58 = 0u;
      *(_OWORD *)v55 = 0u;
      v56 = 0u;
      memset(v54, 0, sizeof(v54));
      *(_OWORD *)v53 = 0u;
      *(_OWORD *)v51 = 0u;
      memset(v52, 0, sizeof(v52));
      memset(v50, 0, sizeof(v50));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"strip before milliseconds: ", 27);
      v38 = (_QWORD *)std::ostream::operator<<();
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"; ", 2);
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"prependedOutputs: ", 18);
      quasar::formatResultTokensSimple(a1, 0);
      if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v72;
      else
        v41 = (std::string *)v72.__r_.__value_.__r.__words[0];
      if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
      else
        v42 = v72.__r_.__value_.__l.__size_;
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"; ", 2);
      v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"output: ", 8);
      quasar::formatResultTokensSimple(&v105, 0);
      if ((SBYTE7(v108) & 0x80u) == 0)
        v46 = v107;
      else
        v46 = (void **)v107[0];
      if ((SBYTE7(v108) & 0x80u) == 0)
        v47 = BYTE7(v108);
      else
        v47 = (uint64_t)v107[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v46, v47);
      if (SBYTE7(v108) < 0)
        operator delete(v107[0]);
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v72.__r_.__value_.__l.__data_);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v50);
    }
    if (&v105 != a1)
      std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)a1, (uint64_t)v105.__r_.__value_.__l.__data_, v105.__r_.__value_.__l.__size_, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v105.__r_.__value_.__l.__size_ - v105.__r_.__value_.__r.__words[0]) >> 5));
    if (v104 < 0)
      operator delete(v103);
    if (v102 < 0)
      operator delete(v101);
    v50[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v100;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
    if (v99 < 0)
      operator delete(v98);
    v50[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
    if (v96 < 0)
      operator delete(v95);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v93.__r_.__value_.__l.__data_);
    v50[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
  }
}

void sub_1ADD87ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a71;
  char a72;
  void *a73;

  quasar::Token::~Token((void **)&STACK[0x240]);
  if (a71 < 0)
    operator delete(__p);
  __p = &a72;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SLOBYTE(STACK[0x20F]) < 0)
    operator delete(a73);
  if (SLOBYTE(STACK[0x227]) < 0)
    operator delete((void *)STACK[0x210]);
  if (SLOBYTE(STACK[0x23F]) < 0)
    operator delete((void *)STACK[0x228]);
  if (SLOBYTE(STACK[0x337]) < 0)
    operator delete((void *)STACK[0x320]);
  std::wstring_convert<std::codecvt_utf8<char32_t,1114111ul,(std::codecvt_mode)0>,char32_t,std::allocator<char32_t>,std::allocator<char>>::~wstring_convert((uint64_t)&STACK[0x450]);
  quasar::Token::~Token(&a31);
  quasar::Token::~Token((void **)&STACK[0x350]);
  a31 = &STACK[0x430];
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

quasar::ContinuousListeningConfig *quasar::ContinuousListeningConfig::ContinuousListeningConfig(quasar::ContinuousListeningConfig *this)
{
  uint64_t v2;
  _QWORD v4[3];
  _QWORD v5[3];
  _QWORD v6[3];
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[3];
  _QWORD v13[3];
  _QWORD v14[3];
  _QWORD v15[3];
  _QWORD v16[3];
  _QWORD v17[3];
  _QWORD v18[3];
  _QWORD v19[3];
  _QWORD v20[3];
  _QWORD v21[3];
  _QWORD v22[3];
  _QWORD v23[3];
  _QWORD v24[3];
  _QWORD v25[3];
  _QWORD v26[3];
  _QWORD v27[3];
  _QWORD v28[3];
  _QWORD v29[3];
  _QWORD v30[3];
  _QWORD v31[3];
  _QWORD v32[3];
  _QWORD v33[3];
  _QWORD v34[3];
  _QWORD v35[3];
  _QWORD v36[3];
  _QWORD v37[3];
  _QWORD v38[3];
  _QWORD v39[3];
  _QWORD v40[4];

  v40[3] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0x640000001ELL;
  *((_DWORD *)this + 2) = 0;
  *((_BYTE *)this + 12) = 0;
  std::string::basic_string[abi:ne180100]<0>(v4, "zero");
  std::string::basic_string[abi:ne180100]<0>(v5, "One");
  std::string::basic_string[abi:ne180100]<0>(v6, "one\\number");
  std::string::basic_string[abi:ne180100]<0>(v7, "one\\pronoun");
  std::string::basic_string[abi:ne180100]<0>(v8, "two");
  std::string::basic_string[abi:ne180100]<0>(v9, "three");
  std::string::basic_string[abi:ne180100]<0>(v10, "four");
  std::string::basic_string[abi:ne180100]<0>(v11, "five");
  std::string::basic_string[abi:ne180100]<0>(v12, "six");
  std::string::basic_string[abi:ne180100]<0>(v13, "seven");
  std::string::basic_string[abi:ne180100]<0>(v14, "eight");
  std::string::basic_string[abi:ne180100]<0>(v15, "nine");
  std::string::basic_string[abi:ne180100]<0>(v16, "ten");
  std::string::basic_string[abi:ne180100]<0>(v17, "eleven");
  std::string::basic_string[abi:ne180100]<0>(v18, "twelve");
  std::string::basic_string[abi:ne180100]<0>(v19, "thirteen");
  std::string::basic_string[abi:ne180100]<0>(v20, "fourteen");
  std::string::basic_string[abi:ne180100]<0>(v21, "fifteen");
  std::string::basic_string[abi:ne180100]<0>(v22, "sixteen");
  std::string::basic_string[abi:ne180100]<0>(v23, "seventeen");
  std::string::basic_string[abi:ne180100]<0>(v24, "eighteen");
  std::string::basic_string[abi:ne180100]<0>(v25, "nineteen");
  std::string::basic_string[abi:ne180100]<0>(v26, "twenty");
  std::string::basic_string[abi:ne180100]<0>(v27, "thirty");
  std::string::basic_string[abi:ne180100]<0>(v28, "forty");
  std::string::basic_string[abi:ne180100]<0>(v29, "fifty");
  std::string::basic_string[abi:ne180100]<0>(v30, "sixty");
  std::string::basic_string[abi:ne180100]<0>(v31, "seventy");
  std::string::basic_string[abi:ne180100]<0>(v32, "eighty");
  std::string::basic_string[abi:ne180100]<0>(v33, "ninety");
  std::string::basic_string[abi:ne180100]<0>(v34, "hundred");
  std::string::basic_string[abi:ne180100]<0>(v35, "thousand");
  std::string::basic_string[abi:ne180100]<0>(v36, "million");
  std::string::basic_string[abi:ne180100]<0>(v37, "billion");
  std::string::basic_string[abi:ne180100]<0>(v38, "trillion");
  std::string::basic_string[abi:ne180100]<0>(v39, "¿\\inverted-question-mark");
  std::string::basic_string[abi:ne180100]<0>(v40, "¡\\inverted-exclamation-mark");
  std::unordered_set<std::string>::unordered_set((uint64_t)this + 16, (unsigned __int8 *)v4, 37);
  v2 = 111;
  do
  {
    if (SHIBYTE(v4[v2 - 1]) < 0)
      operator delete((void *)v4[v2 - 3]);
    v2 -= 3;
  }
  while (v2 * 8);
  quasar::defaultFallbackItnLeftContext((std::string **)this + 7);
  quasar::defaultLeadingSpaceTokens((uint64_t)this + 80);
  return this;
}

void sub_1ADD8848C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v9);
  _Unwind_Resume(a1);
}

void quasar::ContinuousListeningConfig::init(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  __int128 v5;
  int v6;
  uint64_t v7[3];
  _BYTE v8[1544];

  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v8);
  memset(v7, 0, sizeof(v7));
  *(_OWORD *)__p = 0u;
  v5 = 0u;
  v6 = 1065353216;
  quasar::SystemConfig::readJsonFile((uint64_t)v8, a2, v7, (uint64_t)__p, 0, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  __p[0] = v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "continuous-listening.");
  quasar::ContinuousListeningConfig::registerParams(a1, (quasar::SystemConfig *)v8, (const void **)__p);
  if (SBYTE7(v5) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "continuous-listening");
  quasar::SystemConfig::readPtree((uint64_t)v8, (uint64_t)__p, 1u, 1);
  if (SBYTE7(v5) < 0)
    operator delete(__p[0]);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v8);
}

void sub_1ADD885FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a14 < 0)
    operator delete(__p);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a21);
  _Unwind_Resume(a1);
}

void quasar::ContinuousListeningConfig::registerParams(uint64_t a1, quasar::SystemConfig *this, const void **a3)
{
  void *v6[2];
  char v7;
  std::string __p;
  std::string v9;

  quasar::SystemConfig::getPrefix(this, &v9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v9.__r_.__value_.__l.__data_, a3, (uint64_t)&__p);
  quasar::SystemConfig::setPrefix((std::string *)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "delay-finalization-tokens");
  std::string::basic_string[abi:ne180100]<0>(v6, "Interesting tokens that will delay the finalization");
  quasar::SystemConfig::Register<std::unordered_set<std::string>>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 16, (uint64_t)v6, 0, 215, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "fallback-itn-left-context");
  std::string::basic_string[abi:ne180100]<0>(v6, "The fallback left context for across-utterances ITN");
  quasar::SystemConfig::Register<std::vector<std::string>>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 56, (uint64_t)v6, 0, 215, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "itn-left-context-max-length");
  std::string::basic_string[abi:ne180100]<0>(v6, "The maximum token number of left context");
  quasar::SystemConfig::Register<int>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1, (uint64_t)v6, 0, 215, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "delay-finalization-max-length");
  std::string::basic_string[abi:ne180100]<0>(v6, "The maximum token number for the delayed finalization buffer");
  quasar::SystemConfig::Register<int>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 4, (uint64_t)v6, 0, 215, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "delay-finalization-length");
  std::string::basic_string[abi:ne180100]<0>(v6, "Finalization would be delayed if token number is no larger than this length");
  quasar::SystemConfig::Register<int>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 8, (uint64_t)v6, 0, 217, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "left-context");
  std::string::basic_string[abi:ne180100]<0>(v6, "Using previous utterance as left context");
  quasar::SystemConfig::Register<BOOL>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 12, (uint64_t)v6, 0, 227, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "leading-inter-utterance-space-tokens");
  std::string::basic_string[abi:ne180100]<0>(v6, "Tokens may add leading inter-utterance space based on itn left context");
  quasar::SystemConfig::Register<std::unordered_set<std::string>>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 80, (uint64_t)v6, 0, 227, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  quasar::SystemConfig::setPrefix((std::string *)this, &v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_1ADD889C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ItnLeftContext::update(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t i;
  unint64_t j;
  std::string *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  __int128 v13;
  std::string::size_type size;
  const quasar::Token *v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  const quasar::Token *v19;
  std::string *v20;
  unint64_t v21;
  __int128 *v22;
  unsigned __int8 *v24;
  unsigned __int8 *k;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  void **v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  void **v34;
  uint64_t v35;
  uint64_t v36[2];
  void *__p[2];
  unsigned __int8 v38;
  void *v39[2];
  unsigned __int8 v40;
  __int128 v41;
  __int128 v42;
  int v43;
  unint64_t v44;
  std::string *v45;
  unint64_t v46;
  _QWORD v47[5];
  _QWORD v48[5];
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  uint64_t v51;
  std::string v52[2];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _OWORD v56[3];
  _OWORD v57[8];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)a2;
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
  {
    v49 = 0;
    v50 = 0;
    v51 = 0;
    std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v49, *v4, v4[1], 0x6DB6DB6DB6DB6DB7 * ((v4[1] - *v4) >> 5));
    std::string::basic_string[abi:ne180100]<0>(v52, "\\caps-on");
    std::string::basic_string[abi:ne180100]<0>(v52[1].__r_.__value_.__r.__words, "\\no-caps-on");
    std::string::basic_string[abi:ne180100]<0>(&v53, "\\no-space-on");
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v54 + 1, "\\all-caps-on");
    std::unordered_set<std::string>::unordered_set((uint64_t)v48, (unsigned __int8 *)v52, 4);
    for (i = 0; i != -96; i -= 24)
    {
      if (*((char *)&v55 + i + 15) < 0)
        operator delete(*(void **)((char *)&v54 + i + 8));
    }
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[10],char const(&)[9],0>(v52, "\\caps-off", "\\caps-on");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(&v53, "\\no-caps-off", "\\no-caps-on");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v56, "\\no-space-off", "\\no-space-on");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(v57, "\\all-caps-off", "\\all-caps-on");
    std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v47, (unsigned __int8 *)v52, 4);
    for (j = 0; j != -192; j -= 48)
    {
      v9 = &v52[j / 0x18];
      if (SHIBYTE(v57[j / 0x10 + 2]) < 0)
        operator delete(v9[7].__r_.__value_.__l.__data_);
      if (SHIBYTE(v9[6].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v9[6].__r_.__value_.__l.__data_);
    }
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v10 = -1227133513 * ((unint64_t)(v50 - v49) >> 5);
    if (v10 - 1 >= 0)
    {
      v11 = 224 * (v10 - 1);
      do
      {
        if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v45 - v44) >> 5) >= (unint64_t)*a1)
          break;
        v12 = &v49[v11];
        if ((char)v49[v11 + 23] < 0)
        {
          std::string::__init_copy_ctor_external(v52, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
        }
        else
        {
          v13 = *(_OWORD *)v12;
          v52[0].__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
          *(_OWORD *)&v52[0].__r_.__value_.__l.__data_ = v13;
        }
        size = HIBYTE(v52[0].__r_.__value_.__r.__words[2]);
        if ((v52[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v52[0].__r_.__value_.__l.__size_;
        if (size
          && !std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v48, (unsigned __int8 *)v52)&& !std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v47, (unsigned __int8 *)v52))
        {
          v15 = (const quasar::Token *)&v49[v11];
          v16 = v45;
          if ((unint64_t)v45 >= v46)
          {
            v17 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v44, v15);
          }
          else
          {
            quasar::Token::Token(v45, v15);
            v17 = (std::string *)((char *)v16 + 224);
          }
          v45 = v17;
        }
        if (SHIBYTE(v52[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v52[0].__r_.__value_.__l.__data_);
        --v10;
        v11 -= 224;
      }
      while (v10 > 0);
    }
    v19 = (const quasar::Token *)*((_QWORD *)a1 + 2);
    v18 = (std::string *)(a1 + 2);
    if (v19 == *((const quasar::Token **)a1 + 1))
    {
      v20 = v45;
    }
    else
    {
      v20 = v45;
      do
      {
        if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v20 - v44) >> 5) >= (unint64_t)*a1)
          break;
        v19 = (const quasar::Token *)((char *)v19 - 224);
        if ((unint64_t)v20 >= v46)
        {
          v20 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v44, v19);
        }
        else
        {
          quasar::Token::Token(v20, v19);
          v20 = (std::string *)((char *)v20 + 224);
        }
        v45 = v20;
      }
      while (v19 != (const quasar::Token *)v18->__r_.__value_.__l.__data_);
    }
    v21 = v44;
    v22 = (__int128 *)&v20[-10].__r_.__value_.__r.__words[2];
    if ((std::string *)v44 != v20 && (unint64_t)v22 > v44)
    {
      do
      {
        std::swap[abi:ne180100]<quasar::Token>(v21, v22);
        v21 += 224;
        v22 -= 14;
      }
      while (v21 < (unint64_t)v22);
    }
    if (v18 != (std::string *)&v44)
      std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)(a1 + 2), v44, (uint64_t)v45, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v45 - v44) >> 5));
    v41 = 0u;
    v42 = 0u;
    v43 = 1065353216;
    v24 = v49;
    for (k = v50; v24 != k; v24 += 224)
    {
      if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v48, v24))
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v41, v24, (uint64_t)v24);
      }
      else if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v47, v24))
      {
        v39[0] = v24;
        v26 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v47, v24, (uint64_t)&std::piecewise_construct, (__int128 **)v39);
        std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__erase_unique<std::string>(&v41, v26 + 40);
      }
    }
    v27 = (uint64_t)(a1 + 14);
    if (a1 + 14 != (int *)&v41)
    {
      a1[22] = v43;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((_QWORD *)a1 + 7, (uint64_t *)v42, 0);
    }
    v28 = *(uint64_t **)a4;
    if (*(_QWORD *)a4 != *(_QWORD *)(a4 + 8) && a1 + 8 != (int *)v28)
      std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)(a1 + 8), *v28, v28[1], 0x6DB6DB6DB6DB6DB7 * ((v28[1] - *v28) >> 5));
    if (quasar::gLogLevel >= 6)
    {
      memset(v57, 0, sizeof(v57));
      v55 = 0u;
      memset(v56, 0, sizeof(v56));
      v53 = 0u;
      v54 = 0u;
      memset(v52, 0, sizeof(v52));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v52);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"left context: ", 14);
      quasar::formatResultTokensSimple(v18, 0);
      if ((v40 & 0x80u) == 0)
        v30 = v39;
      else
        v30 = (void **)v39[0];
      if ((v40 & 0x80u) == 0)
        v31 = v40;
      else
        v31 = (uint64_t)v39[1];
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"; commands: ", 12);
      v36[0] = (uint64_t)" ";
      v36[1] = 1;
      quasar::join<std::unordered_set<std::string>>(v27, v36);
      if ((v38 & 0x80u) == 0)
        v34 = __p;
      else
        v34 = (void **)__p[0];
      if ((v38 & 0x80u) == 0)
        v35 = v38;
      else
        v35 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
      if ((char)v38 < 0)
        operator delete(__p[0]);
      if ((char)v40 < 0)
        operator delete(v39[0]);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v52);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v41);
    v52[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v52);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v47);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v48);
    v52[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v52);
  }
}

void sub_1ADD89094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,char *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0)
    operator delete(__p);
  __p = &a29;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a37);
  __p = &a42;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::ContinuousListeningResultHelper::ContinuousListeningResultHelper(uint64_t a1, char a2, char a3, char a4, uint64_t a5, _QWORD *a6)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v16;

  *(_QWORD *)a1 = off_1E5D3ABA8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 33) = a3;
  *(_BYTE *)(a1 + 34) = a4;
  *(_QWORD *)(a1 + 40) = 0;
  v8 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 208) = *a6;
  *(_DWORD *)(a1 + 56) = 30;
  *(_DWORD *)(a1 + 144) = 1065353216;
  v9 = a6[1];
  *(_QWORD *)(a1 + 216) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 224) = 1;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  _ZNSt3__115allocate_sharedB8ne180100IN6quasar25ContinuousListeningConfigENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v16);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)v8, &v16);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  quasar::ContinuousListeningConfig::init(*v8, a5);
  *(_DWORD *)(a1 + 56) = **(_DWORD **)(a1 + 40);
  return a1;
}

void sub_1ADD89378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  quasar::ItnLeftContext *v4;
  uint64_t v5;
  void **v6;
  void *v8;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v3 + 255) < 0)
    operator delete(*v6);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v5);
  v8 = *(void **)(v3 + 176);
  if (v8)
  {
    *(_QWORD *)(v3 + 184) = v8;
    operator delete(v8);
  }
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  quasar::ItnLeftContext::~ItnLeftContext(v4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::ItnLeftContext::~ItnLeftContext(quasar::ItnLeftContext *this)
{
  void **v2;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 56);
  v2 = (void **)((char *)this + 32);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 8);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void quasar::ContinuousListeningResultHelper::~ContinuousListeningResultHelper(void **this)
{
  void *v2;
  void **v3;

  *this = off_1E5D3ABA8;
  if (*((char *)this + 255) < 0)
    operator delete(this[29]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 26));
  v2 = this[22];
  if (v2)
  {
    this[23] = v2;
    operator delete(v2);
  }
  v3 = this + 19;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 14));
  v3 = this + 11;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = this + 8;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 5));
  v3 = this + 1;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void quasar::ContinuousListeningResultHelper::writePartial(uint64_t a1, uint64_t **a2, unsigned int a3, uint64_t a4, uint64_t *a5, uint64_t a6, char a7, uint64_t *a8)
{
  void **v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t *v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  BOOL v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  void **v54[3];
  uint64_t v55;
  std::__shared_weak_count *v56;
  void *__p;
  void *v58;
  uint64_t v59;
  uint64_t v60[3];
  void *v61;
  void *v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void ***v84;

  quasar::getTopChoice((uint64_t)a2, 1, &v64);
  v16 = (void **)(a1 + 232);
  if (*(char *)(a1 + 255) < 0)
    operator delete(*v16);
  *(_OWORD *)v16 = v64;
  *(_QWORD *)(a1 + 248) = v65;
  v81 = 0;
  v82 = 0;
  v83 = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v81, *a5, a5[1], 0x6DB6DB6DB6DB6DB7 * ((a5[1] - *a5) >> 5));
  v18 = v81;
  v17 = v82;
  if (v81 != v82 && *(_QWORD *)(a1 + 152) != *(_QWORD *)(a1 + 160))
  {
    if (quasar::gLogLevel >= 2)
    {
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v73 = 0u;
      v74 = 0u;
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v64 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v64);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)"Partials: currentTokens should be empty when client left context is provided", 76);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v64);
      v18 = v81;
      v17 = v82;
    }
    while (v17 != v18)
      quasar::Token::~Token((void **)(v17 - 224));
    v82 = v18;
  }
  v64 = 0uLL;
  *(_QWORD *)&v65 = 0;
  v61 = 0;
  v62 = 0;
  v63 = 0;
  if (!*(_BYTE *)(a1 + 34))
  {
    v19 = a3;
    if (*(_QWORD *)(a1 + 152) != *(_QWORD *)(a1 + 160))
      v19 = *(_DWORD *)(a1 + 200);
    *(_DWORD *)(a1 + 200) = v19;
  }
  memset(v60, 0, sizeof(v60));
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v60, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  __p = 0;
  v58 = 0;
  v59 = 0;
  quasar::ContinuousListeningResultHelper::prependTokens((char *)a1, (uint64_t *)&v64, (char *)&v61, v60, (uint64_t *)&__p, a3);
  if (__p)
  {
    v58 = __p;
    operator delete(__p);
  }
  v54[0] = (void **)v60;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](v54);
  if (*(_BYTE *)(a1 + 34))
  {
    if (*((_QWORD *)&v64 + 1) != (_QWORD)v64)
    {
      v20 = *(_QWORD *)v64;
      v21 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v64 + 8) - *(_QWORD *)v64) >> 5);
      v23 = *(_QWORD *)(a1 + 8);
      v22 = *(_QWORD *)(a1 + 16);
      v24 = 0x6DB6DB6DB6DB6DB7 * ((v22 - v23) >> 5);
      if (v21 >= v24)
      {
        if (v22 != v23)
        {
          if (v24 <= 1)
            v25 = 1;
          else
            v25 = 0x6DB6DB6DB6DB6DB7 * ((v22 - v23) >> 5);
          v26 = (_DWORD *)(v20 + 36);
          v27 = (_DWORD *)(v23 + 36);
          do
          {
            *v26 = *v27;
            *((_QWORD *)v26 - 1) = *((_QWORD *)v27 - 1);
            v26 += 56;
            v27 += 56;
            --v25;
          }
          while (v25);
        }
        if (v21 > (int)v24)
        {
          v24 = (int)v24;
          v28 = (_DWORD *)(v20 + 224 * (int)v24 + 36);
          do
          {
            *v28 = 0;
            *((_QWORD *)v28 - 1) = 0;
            ++v24;
            v28 += 56;
          }
          while (v21 > v24);
        }
      }
    }
  }
  if (!*(_QWORD *)(a1 + 208)
    || (v29 = (uint64_t *)v64, *((_QWORD *)&v64 + 1) == (_QWORD)v64)
    || *(_QWORD *)v64 == *(_QWORD *)(v64 + 8))
  {
    v33 = 0;
  }
  else
  {
    v30 = *(std::__shared_weak_count **)(a1 + 216);
    v55 = *(_QWORD *)(a1 + 208);
    v56 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldxr(p_shared_owners);
      while (__stxr(v32 + 1, p_shared_owners));
    }
    v33 = quasar::getCommandStartCharIndex(&v55, v29, 0) == 0;
    v34 = v56;
    if (v56)
    {
      v35 = (unint64_t *)&v56->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
  v37 = *(unsigned int *)(a1 + 200);
  if (v81 == v82)
  {
    v44 = (std::__shared_weak_count *)a8[1];
    v50 = *a8;
    v51 = v44;
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, char, uint64_t *, BOOL))(*(_QWORD *)a1 + 16))(a1, &v64, v37, a4, a1 + 64, a1 + 88, 0, a6, a7, &v50, v33);
    v47 = v51;
    if (v51)
    {
      v48 = (unint64_t *)&v51->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
  }
  else
  {
    memset(v54, 0, sizeof(v54));
    v38 = (std::__shared_weak_count *)a8[1];
    v52 = *a8;
    v53 = v38;
    if (v38)
    {
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    (*(void (**)(uint64_t, uint64_t **, uint64_t, uint64_t, uint64_t *, void ***, uint64_t, uint64_t, char, uint64_t *, BOOL))(*(_QWORD *)a1 + 16))(a1, a2, v37, a4, &v81, v54, 1, a6, a7, &v52, v33);
    v41 = v53;
    if (v53)
    {
      v42 = (unint64_t *)&v53->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v84 = v54;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
  }
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
  v61 = &v64;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v61);
  *(_QWORD *)&v64 = &v81;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
}

void sub_1ADD89998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a31);
  a31 = v31 - 112;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

void quasar::ContinuousListeningResultHelper::prependTokens(char *a1, uint64_t *a2, char *a3, uint64_t *a4, uint64_t *a5, unsigned int a6)
{
  char *v11;
  __n128 v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  int32x2_t *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int32x2_t *v37;
  uint64_t v38;

  v11 = a1;
  if (a1 + 152 != (char *)a2)
    std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>((uint64_t)a2, *((uint64_t **)a1 + 19), *((uint64_t **)a1 + 20), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a1 + 20) - *((_QWORD *)a1 + 19)) >> 3));
  if (v11 + 176 != a3)
    a1 = std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(a3, *((char **)v11 + 22), *((_QWORD *)v11 + 23), (uint64_t)(*((_QWORD *)v11 + 23) - *((_QWORD *)v11 + 22)) >> 3);
  quasar::ContinuousListeningResultHelper::prependCommands((uint64_t)a1, a2, (uint64_t)a3, (uint64_t)(v11 + 112), (uint64_t)a4);
  if (a5[1] == *a5)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
    v38 = 0;
    std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)a5, v13, &v38);
    if (a6)
      goto LABEL_20;
  }
  else if (a6)
  {
    goto LABEL_20;
  }
  v14 = *((_QWORD *)v11 + 9);
  if (*((_QWORD *)v11 + 8) != v14)
  {
    v15 = *(_DWORD *)(v14 - 192);
    v16 = *a2;
    v17 = a2[1];
    v18 = v17 - *a2;
    if (v17 != *a2)
    {
      v19 = 0;
      v20 = v18 / 24;
      if (v20 <= 1)
        v20 = 1;
      do
      {
        v21 = (uint64_t *)(v16 + 24 * v19);
        v22 = *v21;
        v23 = v21[1] - *v21;
        if (v23)
        {
          v24 = v23 / 224;
          v25 = *((_DWORD *)v11 + 50);
          if (v24 <= 1)
            v24 = 1;
          v12.n128_u64[0] = (unint64_t)vdup_n_s32(v25);
          v26 = (int32x2_t *)(v22 + 36);
          do
          {
            v26->i32[0] += v25;
            v26[-1] = vadd_s32(v26[-1], (int32x2_t)v12.n128_u64[0]);
            v26 += 28;
            --v24;
          }
          while (v24);
        }
        ++v19;
      }
      while (v19 != v20);
    }
    goto LABEL_23;
  }
LABEL_20:
  v27 = *((_DWORD *)v11 + 50);
  if (v27 > a6)
    v27 = 0;
  v15 = a6 - v27;
LABEL_23:
  v28 = *a4;
  v29 = a4[1];
  v30 = v29 - *a4;
  if (v29 != *a4)
  {
    v31 = 0;
    v32 = v30 / 24;
    if (v32 <= 1)
      v32 = 1;
    v12.n128_u64[0] = (unint64_t)vdup_n_s32(v15);
    do
    {
      v33 = (uint64_t *)(v28 + 24 * v31);
      v34 = *v33;
      v35 = v33[1] - *v33;
      if (v35)
      {
        v36 = v35 / 224;
        if (v36 <= 1)
          v36 = 1;
        v37 = (int32x2_t *)(v34 + 36);
        do
        {
          v37->i32[0] += v15;
          v37[-1] = vadd_s32(v37[-1], (int32x2_t)v12.n128_u64[0]);
          v37 += 28;
          --v36;
        }
        while (v36);
      }
      ++v31;
    }
    while (v31 != v32);
  }
  quasar::concatNbest(a2, (uint64_t)a3, a4, a5, 0, 0xAu, v12);
}

void quasar::ContinuousListeningResultHelper::writeFinal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, uint64_t *a7, char a8, uint64_t a9, char a10, char a11)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  _OWORD v33[17];
  void *v34;
  void *v35;
  uint64_t v36;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v38 = 0;
  v39 = 0;
  v40 = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v38, *a7, a7[1], 0x6DB6DB6DB6DB6DB7 * ((a7[1] - *a7) >> 5));
  memset(v37, 0, sizeof(v37));
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v19 = v38;
  v18 = v39;
  if (v38 != v39)
  {
    if (*(_QWORD *)(a1 + 152) != *(_QWORD *)(a1 + 160))
    {
      if (quasar::gLogLevel >= 2)
      {
        memset(v33, 0, sizeof(v33));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Final: currentTokens should be empty when client left context is provided", 73);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v33);
        v19 = v38;
        v18 = v39;
      }
      v20 = v19;
      if (v18 != v19)
      {
        do
          quasar::Token::~Token((void **)(v18 - 224));
        while (v18 != v19);
        v20 = v38;
      }
      v39 = v19;
      v18 = v19;
      v19 = v20;
    }
    if (v19 != v18)
    {
      v21 = *(_QWORD *)(a1 + 152);
      v22 = *(_QWORD *)(a1 + 160);
      while (v22 != v21)
      {
        v22 -= 24;
        *(_QWORD *)&v33[0] = v22;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v33);
      }
      *(_QWORD *)(a1 + 160) = v21;
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a1 + 176);
      *(_DWORD *)(a1 + 200) = 0;
      quasar::ItnLeftContext::clear((quasar::ItnLeftContext *)(a1 + 56));
      MEMORY[0x1AF44C914](a1 + 232, "");
    }
  }
  v23 = 0;
  if (*(_QWORD *)(a1 + 208) && a11)
  {
    v24 = *(uint64_t **)a2;
    if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8) || *v24 == v24[1])
    {
      v23 = 0;
    }
    else
    {
      v25 = *(std::__shared_weak_count **)(a1 + 216);
      v31 = *(_QWORD *)(a1 + 208);
      v32 = v25;
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(p_shared_owners);
        while (__stxr(v27 + 1, p_shared_owners));
        v24 = *(uint64_t **)a2;
      }
      v23 = quasar::getCommandStartCharIndex(&v31, v24, 1) == 0;
      v28 = v32;
      if (v32)
      {
        v29 = (unint64_t *)&v32->__shared_owners_;
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
    }
  }
  quasar::ContinuousListeningResultHelper::writeFinalWithLeftContext(a1, (uint64_t **)a2, a3, (uint64_t)v37, (char *)&v34, a4, a5, a6 + a5, &v38, a8, a9, a10, a11, v23);
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  *(_QWORD *)&v33[0] = v37;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)v33);
  *(_QWORD *)&v33[0] = &v38;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v33);
}

void sub_1ADD89F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void **a15)
{
  uint64_t v15;
  void *v17;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  v17 = *(void **)(v15 - 160);
  if (v17)
  {
    *(_QWORD *)(v15 - 152) = v17;
    operator delete(v17);
  }
  a15 = (void **)(v15 - 136);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a15);
  a15 = (void **)(v15 - 112);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

void quasar::ItnLeftContext::clear(quasar::ItnLeftContext *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;

  v2 = *((_QWORD *)this + 2);
  v3 = *((_QWORD *)this + 1);
  while (v2 != v3)
    quasar::Token::~Token((void **)(v2 - 224));
  *((_QWORD *)this + 2) = v3;
  v5 = *((_QWORD *)this + 4);
  for (i = *((_QWORD *)this + 5); i != v5; quasar::Token::~Token((void **)(i - 224)))
    ;
  *((_QWORD *)this + 5) = v5;
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear((uint64_t)this + 56);
}

void quasar::ContinuousListeningResultHelper::writeFinalWithLeftContext(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, char *a5, uint64_t a6, unsigned int a7, unsigned int a8, uint64_t *a9, char a10, uint64_t a11, char a12, char a13, char a14)
{
  uint64_t *v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  unsigned int v32;
  int32x2_t *v33;
  unsigned __int32 v34;
  unsigned __int32 v35;
  uint64_t v37;
  unsigned int v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  const void **v46;
  unsigned __int8 *v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  _BOOL4 v52;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void **v68;
  void **v69;
  uint64_t i;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t *v74;
  quasar::ItnLeftContext *v75;
  uint64_t v76;
  __int16 v77;
  __int16 v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82[2];
  void *__p;
  void *v84;
  uint64_t v85;
  uint64_t v86[3];
  void *v87[3];
  void *v88;
  void *v89;
  _QWORD *v90;
  void *v91;
  uint64_t v92;
  char *v93;
  void *v94;
  void *v95;
  uint64_t v96;
  uint64_t v97[3];
  void **v98;
  void **v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v20 = a9;
  v102 = *MEMORY[0x1E0C80C00];
  v80 = a9[1];
  v81 = *a9;
  if (!a13)
  {
    v37 = a1 + 152;
    v38 = a7;
    if (*(_QWORD *)(a1 + 152) != *(_QWORD *)(a1 + 160))
      v38 = *(_DWORD *)(a1 + 200);
    *(_DWORD *)(a1 + 200) = v38;
    memset(v86, 0, sizeof(v86));
    std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v86, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
    __p = 0;
    v84 = 0;
    v85 = 0;
    std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&__p, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
    quasar::ContinuousListeningResultHelper::prependTokens((char *)a1, (uint64_t *)a4, a5, v86, (uint64_t *)&__p, a7);
    if (__p)
    {
      v84 = __p;
      operator delete(__p);
    }
    v91 = v86;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
    if ((_DWORD)a6)
    {
      if (*(_QWORD *)a4 == *(_QWORD *)(a4 + 8) && *(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 72))
      {
        v91 = 0;
        v92 = 0;
        v93 = 0;
        std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100]((uint64_t *)a4, (uint64_t)&v91);
        v99 = &v91;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v99);
        v39 = (char *)*((_QWORD *)a5 + 2);
        v40 = (char *)*((_QWORD *)a5 + 1);
        if (v40 >= v39)
        {
          v57 = *(char **)a5;
          v58 = (uint64_t)&v40[-*(_QWORD *)a5] >> 3;
          v59 = v58 + 1;
          if ((unint64_t)(v58 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v60 = v39 - v57;
          if (v60 >> 2 > v59)
            v59 = v60 >> 2;
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
            v61 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v61 = v59;
          if (v61)
          {
            v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a5 + 16), v61);
            v57 = *(char **)a5;
            v40 = (char *)*((_QWORD *)a5 + 1);
          }
          else
          {
            v62 = 0;
          }
          v63 = &v62[8 * v58];
          v64 = &v62[8 * v61];
          *(_QWORD *)v63 = 0;
          v41 = v63 + 8;
          while (v40 != v57)
          {
            v65 = *((_QWORD *)v40 - 1);
            v40 -= 8;
            *((_QWORD *)v63 - 1) = v65;
            v63 -= 8;
          }
          *(_QWORD *)a5 = v63;
          *((_QWORD *)a5 + 1) = v41;
          *((_QWORD *)a5 + 2) = v64;
          if (v57)
            operator delete(v57);
        }
        else
        {
          *(_QWORD *)v40 = 0;
          v41 = v40 + 8;
        }
        *((_QWORD *)a5 + 1) = v41;
      }
LABEL_80:
      v91 = 0;
      v92 = 0;
      v93 = 0;
      v66 = *(unsigned int *)(a1 + 200);
      v99 = 0;
      v100 = 0;
      v101 = 0;
      if (v81 == v80)
      {
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v99, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5));
        v20 = (uint64_t *)(a1 + 64);
      }
      HIBYTE(v78) = a10;
      LOBYTE(v78) = v81 != v80;
      (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t *, void ***, void **, __int16, uint64_t, char))(*(_QWORD *)a1 + 24))(a1, a4, a5, a6, v66, a8 - v66, a6 ^ 1, v20, &v99, &v91, v78, a11, a12);
      v88 = &v99;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
      if (a10)
      {
        quasar::ItnLeftContext::clear((quasar::ItnLeftContext *)(a1 + 56));
      }
      else
      {
        if (!*(_BYTE *)(a1 + 224))
        {
LABEL_95:
          v99 = &v91;
          goto LABEL_96;
        }
        quasar::ItnLeftContext::update((int *)(a1 + 56), a4, v67, (uint64_t)&v91);
      }
      v68 = *(void ***)(a1 + 152);
      v69 = *(void ***)(a1 + 160);
      while (v69 != v68)
      {
        v69 -= 3;
        v99 = v69;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v99);
      }
      *(_QWORD *)(a1 + 160) = v68;
      *(_QWORD *)(a1 + 184) = *(_QWORD *)(a1 + 176);
      *(_DWORD *)(a1 + 200) = 0;
      if (*(_BYTE *)(a1 + 34))
      {
        v71 = *(_QWORD *)(a1 + 8);
        for (i = *(_QWORD *)(a1 + 16); i != v71; quasar::Token::~Token((void **)(i - 224)))
          ;
        *(_QWORD *)(a1 + 16) = v71;
      }
      MEMORY[0x1AF44C914](a1 + 232, "");
      goto LABEL_95;
    }
    if (!quasar::ContinuousListeningResultHelper::shouldBePartial(a1, a4) || (a10 & 1) != 0)
      goto LABEL_80;
    if (!*(_BYTE *)(a1 + 34))
    {
      quasar::getTopChoice((uint64_t)a2, 1, &v91);
      v42 = *(unsigned __int8 *)(a1 + 255);
      if ((v42 & 0x80u) == 0)
        v43 = *(unsigned __int8 *)(a1 + 255);
      else
        v43 = *(_QWORD *)(a1 + 240);
      v44 = HIBYTE(v93);
      v45 = SHIBYTE(v93);
      if (SHIBYTE(v93) < 0)
        v44 = v92;
      if (v43 == v44)
      {
        v46 = (const void **)(a1 + 232);
        if (SHIBYTE(v93) >= 0)
          v47 = (unsigned __int8 *)&v91;
        else
          v47 = (unsigned __int8 *)v91;
        if ((v42 & 0x80) != 0)
        {
          v52 = memcmp(*v46, v47, *(_QWORD *)(a1 + 240)) != 0;
        }
        else if (*(_BYTE *)(a1 + 255))
        {
          v48 = v42 - 1;
          do
          {
            v50 = *(unsigned __int8 *)v46;
            v46 = (const void **)((char *)v46 + 1);
            v49 = v50;
            v51 = *v47++;
            v52 = v49 != v51;
          }
          while (v49 == v51 && v48-- != 0);
        }
        else
        {
          v52 = 0;
        }
      }
      else
      {
        v52 = 1;
      }
      if (v45 < 0)
        operator delete(v91);
      if (v52)
      {
        v82[0] = 0;
        v82[1] = 0;
        quasar::ContinuousListeningResultHelper::writePartial(a1, a2, a7, a8, a9, a11, 0, v82);
      }
    }
    if (v37 != a4)
      std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a1 + 152, *(uint64_t **)a4, *(uint64_t **)(a4 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3));
    if ((char *)(a1 + 176) != a5)
      std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)(a1 + 176), *(char **)a5, *((_QWORD *)a5 + 1), (uint64_t)(*((_QWORD *)a5 + 1) - *(_QWORD *)a5) >> 3);
    if (!*(_BYTE *)(a1 + 34))
      goto LABEL_114;
    if (a1 + 8 == *(_QWORD *)a4)
    {
      *(_DWORD *)(*(_QWORD *)(a1 + 16) - 192) += 1000;
    }
    else
    {
      std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a1 + 8, **(_QWORD **)a4, *(_QWORD *)(*(_QWORD *)a4 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a4 + 8) - **(_QWORD **)a4) >> 5));
      v72 = *(unsigned __int8 *)(a1 + 34);
      *(_DWORD *)(*(_QWORD *)(a1 + 16) - 192) += 1000;
      if (!v72)
        goto LABEL_114;
    }
    if (*(_BYTE *)(a1 + 33))
    {
LABEL_118:
      if (*a9 == a9[1])
        return;
      v75 = (quasar::ItnLeftContext *)(a1 + 56);
      quasar::ItnLeftContext::clear(v75);
      v91 = 0;
      v92 = 0;
      v93 = 0;
      v92 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v91, a9);
      v99 = 0;
      v100 = 0;
      v101 = 0;
      quasar::ItnLeftContext::update((int *)v75, (uint64_t)&v91, v76, (uint64_t)&v99);
      v88 = &v99;
      std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
      v99 = &v91;
LABEL_96:
      std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v99);
      return;
    }
LABEL_114:
    v73 = *(unsigned int *)(a1 + 200);
    v91 = 0;
    v92 = 0;
    if (v81 == v80)
    {
      v93 = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v91, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5));
      v74 = (uint64_t *)(a1 + 64);
    }
    else
    {
      v74 = a9;
      v93 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t, _QWORD, uint64_t *, void **, BOOL, uint64_t, _WORD))(*(_QWORD *)a1 + 32))(a1, a4, a5, v73, a8 - v73, v74, &v91, v81 != v80, a11, 0);
    v99 = &v91;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v99);
    goto LABEL_118;
  }
  if (!*(_BYTE *)(a1 + 34))
  {
    v21 = a7;
    if (*(_QWORD *)(a1 + 152) != *(_QWORD *)(a1 + 160))
      v21 = *(_DWORD *)(a1 + 200);
    *(_DWORD *)(a1 + 200) = v21;
  }
  memset(v97, 0, sizeof(v97));
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v97, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  v94 = 0;
  v95 = 0;
  v96 = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&v94, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  quasar::ContinuousListeningResultHelper::prependTokens((char *)a1, (uint64_t *)a4, a5, v97, (uint64_t *)&v94, a7);
  if (v94)
  {
    v95 = v94;
    operator delete(v94);
  }
  v91 = v97;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
  v22 = *(uint64_t **)a4;
  if (*(_BYTE *)(a1 + 34))
  {
    v23 = *v22;
    if (*(uint64_t **)(a4 + 8) != v22)
    {
      v24 = v22[1];
      v25 = 0x6DB6DB6DB6DB6DB7 * ((v24 - v23) >> 5);
      v27 = *(_QWORD *)(a1 + 8);
      v26 = *(_QWORD *)(a1 + 16);
      v28 = 0x6DB6DB6DB6DB6DB7 * ((v26 - v27) >> 5);
      if (v25 >= v28)
      {
        if (v26 != v27)
        {
          if (v28 <= 1)
            v28 = 1;
          v29 = (_DWORD *)(v23 + 36);
          v30 = (_DWORD *)(v27 + 36);
          do
          {
            *v29 = *v30;
            *((_QWORD *)v29 - 1) = *((_QWORD *)v30 - 1);
            v29 += 56;
            v30 += 56;
            --v28;
          }
          while (v28);
        }
        if (v24 != v23)
        {
          v31 = 0;
          v32 = 0;
          if (v25 <= 1)
            v25 = 1;
          v33 = (int32x2_t *)(v23 + 32);
          do
          {
            if (v31)
            {
              v34 = v33[-1].u32[1];
              v35 = v33[-28].u32[0];
              if (v34 < v35)
                v32 = v32 - v34 + v35;
            }
            else
            {
              v34 = *(_DWORD *)(v23 + 28);
            }
            v33[-1].i32[1] = v34 + v32;
            *v33 = vadd_s32(*v33, vdup_n_s32(v32));
            v33 += 28;
            ++v31;
          }
          while (v25 != v31);
        }
      }
    }
  }
  else
  {
    v23 = *v22;
  }
  v100 = 0;
  v101 = 0;
  v99 = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v99, v23, v22[1], 0x6DB6DB6DB6DB6DB7 * ((v22[1] - v23) >> 5));
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v88 = &v91;
  LOBYTE(v89) = 0;
  v91 = operator new(0x18uLL);
  v92 = (uint64_t)v91;
  v93 = (char *)v91 + 24;
  v92 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<quasar::Token>>,std::vector<quasar::Token> const*,std::vector<quasar::Token> const*,std::vector<quasar::Token>*>((uint64_t)&v93, (uint64_t *)&v99, &v102, v91);
  v54 = **(_QWORD **)a5;
  v55 = operator new(8uLL);
  *v55 = v54;
  v89 = v55 + 1;
  v90 = v55 + 1;
  v88 = v55;
  v56 = *(unsigned int *)(a1 + 200);
  memset(v87, 0, sizeof(v87));
  if (v81 == v80)
  {
    std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v87, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 5));
    v20 = (uint64_t *)(a1 + 64);
  }
  HIBYTE(v77) = a14;
  LOBYTE(v77) = 1;
  (*(void (**)(uint64_t, void **, void **, uint64_t, _QWORD, uint64_t *, void **, BOOL, uint64_t, __int16))(*(_QWORD *)a1 + 32))(a1, &v91, &v88, v56, a8 - v56, v20, v87, v81 != v80, a11, v77);
  v98 = v87;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v98);
  if (v88)
  {
    v89 = v88;
    operator delete(v88);
  }
  v88 = &v91;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
  v88 = &v99;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
  if (*(_BYTE *)(a1 + 34))
  {
    if (a1 + 8 != *(_QWORD *)a4)
      std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a1 + 8, **(_QWORD **)a4, *(_QWORD *)(*(_QWORD *)a4 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*(_QWORD *)a4 + 8) - **(_QWORD **)a4) >> 5));
  }
}

void sub_1ADD8A9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t quasar::ContinuousListeningResultHelper::setEnableFinalization(uint64_t this, char a2)
{
  *(_BYTE *)(this + 224) = a2;
  return this;
}

uint64_t quasar::ContinuousListeningResultHelper::getContinuousListeningConfig@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 48);
  *a2 = *(_QWORD *)(this + 40);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t quasar::ContinuousListeningResultHelper::shouldBePartial(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  int64_t size;
  char *v14;
  int v15;
  char *v16;
  int64_t v17;
  int v18;
  int64_t v19;
  std::string *v20;
  int64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  std::string v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31[3];
  _QWORD v32[4];

  v32[3] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 224))
    return 1;
  if (!*(_BYTE *)(a1 + 32))
    return 0;
  v3 = *(uint64_t **)a2;
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
    return 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v27, *v3, v3[1], 0x6DB6DB6DB6DB6DB7 * ((v3[1] - *v3) >> 5));
  if (v27 == v28 || (v4 = 0x6DB6DB6DB6DB6DB7 * ((v28 - v27) >> 5), v5 = *(_QWORD *)(a1 + 40), v4 > *(int *)(v5 + 4)))
  {
    v6 = 0;
  }
  else if (v4 <= *(int *)(v5 + 8))
  {
    v6 = 1;
  }
  else
  {
    if (*(char *)(v28 - 201) < 0)
    {
      std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)(v28 - 224), *(_QWORD *)(v28 - 216));
      v5 = *(_QWORD *)(a1 + 40);
    }
    else
    {
      v8 = *(_OWORD *)(v28 - 224);
      v26.__r_.__value_.__r.__words[2] = *(_QWORD *)(v28 - 208);
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v8;
    }
    if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(v5 + 16), (unsigned __int8 *)&v26))
    {
      v6 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v30, "\\letter");
      std::string::basic_string[abi:ne180100]<0>(v31, "\\uppercase-letter");
      std::string::basic_string[abi:ne180100]<0>(v32, "\\lowercase-letter");
      std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v24, &v30, 3uLL);
      for (i = 0; i != -9; i -= 3)
      {
        if (SHIBYTE(v32[i + 2]) < 0)
          operator delete((void *)v32[i]);
      }
      v10 = v24;
      v11 = v25;
      if (v24 == v25)
      {
LABEL_49:
        v6 = 0;
      }
      else
      {
        if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = &v26;
        else
          v12 = (std::string *)v26.__r_.__value_.__r.__words[0];
        if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
        else
          size = v26.__r_.__value_.__l.__size_;
        v14 = (char *)v12 + size;
        while (1)
        {
          v15 = *(char *)(v10 + 23);
          v16 = v15 >= 0 ? (char *)v10 : *(char **)v10;
          v17 = v15 >= 0 ? *(unsigned __int8 *)(v10 + 23) : *(_QWORD *)(v10 + 8);
          if (!v17)
            break;
          if (size >= v17)
          {
            v18 = *v16;
            v19 = size;
            v20 = v12;
            do
            {
              v21 = v19 - v17;
              if (v21 == -1)
                break;
              v22 = (char *)memchr(v20, v18, v21 + 1);
              if (!v22)
                break;
              v23 = v22;
              if (!memcmp(v22, v16, v17))
              {
                if (v23 == v14 || v23 - (char *)v12 == -1)
                  break;
                goto LABEL_48;
              }
              v20 = (std::string *)(v23 + 1);
              v19 = v14 - (v23 + 1);
            }
            while (v19 >= v17);
          }
          v10 += 24;
          if (v10 == v11)
            goto LABEL_49;
        }
LABEL_48:
        v6 = 1;
      }
      *(_QWORD *)&v30 = &v24;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)&v30 = &v27;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  return v6;
}

void sub_1ADD8AE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  uint64_t v22;
  uint64_t v24;

  v24 = 0;
  while (1)
  {
    if (*(char *)(v22 + v24 + 71) < 0)
      operator delete(*(void **)(v22 + v24 + 48));
    v24 -= 24;
    if (v24 == -72)
    {
      if (a18 < 0)
        operator delete(__p);
      a22 = &a19;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
      _Unwind_Resume(a1);
    }
  }
}

void quasar::ContinuousListeningResultHelper::prependCommands(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  float v6;
  uint64_t v7;
  int v8;
  uint64_t *i;
  __int128 *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void *v35[2];
  char v36;
  __int128 *v37[3];
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  std::string v42;
  std::string v43;
  _BYTE v44[22];
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  __int128 __p;
  uint64_t v58;
  __int128 v59;
  int v60;
  uint64_t v61;
  __int128 *v62;
  unint64_t v63;
  void **v64[3];

  if (*(_QWORD *)(a4 + 24))
  {
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v5 = *(uint64_t **)a5;
    v6 = 0.0;
    if (*(_QWORD *)a5 == *(_QWORD *)(a5 + 8) || (v7 = *v5, *v5 == v5[1]))
    {
      v8 = 0;
    }
    else
    {
      v8 = *(_DWORD *)(v7 + 28);
      v6 = *(float *)(v7 + 40);
    }
    for (i = *(uint64_t **)(a4 + 16); i; i = (uint64_t *)*i)
    {
      if (*((char *)i + 39) < 0)
        std::string::__init_copy_ctor_external(&v42, (const std::string::value_type *)i[2], i[3]);
      else
        v42 = *(std::string *)(i + 2);
      std::string::basic_string[abi:ne180100]<0>(v40, "");
      std::string::basic_string[abi:ne180100]<0>(v38, "");
      memset(v37, 0, sizeof(v37));
      std::string::basic_string[abi:ne180100]<0>(v35, "");
      quasar::Token::Token(&v43, (__int128 *)&v42, v8, v8, v8, 0, 0, (__int128 *)v40, v6, (__int128 *)v38, v37, 0, (__int128 *)v35, 0, 0);
      v10 = v62;
      if ((unint64_t)v62 >= v63)
      {
        v62 = (__int128 *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token>(&v61, (__int128 *)&v43);
        if (SHIBYTE(v58) < 0)
          operator delete((void *)__p);
      }
      else
      {
        v11 = *(_OWORD *)&v43.__r_.__value_.__l.__data_;
        *((_QWORD *)v62 + 2) = *((_QWORD *)&v43.__r_.__value_.__l + 2);
        *v10 = v11;
        memset(&v43, 0, sizeof(v43));
        v12 = *(_QWORD *)&v44[14];
        *(__int128 *)((char *)v10 + 24) = *(_OWORD *)v44;
        *(_QWORD *)((char *)v10 + 38) = v12;
        v13 = v46;
        v10[3] = v45;
        *((_QWORD *)v10 + 8) = v13;
        *((_QWORD *)v10 + 9) = 0;
        v46 = 0;
        v45 = 0uLL;
        *((_QWORD *)v10 + 10) = 0;
        *((_QWORD *)v10 + 11) = 0;
        *(__int128 *)((char *)v10 + 72) = v47;
        *((_QWORD *)v10 + 11) = v48;
        v47 = 0uLL;
        v48 = 0;
        v14 = v49;
        *((_QWORD *)v10 + 14) = v50;
        *((_QWORD *)v10 + 15) = 0;
        v10[6] = v14;
        v50 = 0;
        v49 = 0uLL;
        *((_QWORD *)v10 + 16) = 0;
        *((_QWORD *)v10 + 17) = 0;
        *(__int128 *)((char *)v10 + 120) = v51;
        *((_QWORD *)v10 + 17) = v52;
        v51 = 0uLL;
        v52 = 0;
        v15 = v53;
        *((_QWORD *)v10 + 20) = v54;
        v10[9] = v15;
        v54 = 0;
        v53 = 0uLL;
        LODWORD(v13) = v55;
        *((_WORD *)v10 + 86) = v56;
        *((_DWORD *)v10 + 42) = v13;
        v16 = __p;
        *((_QWORD *)v10 + 24) = v58;
        v10[11] = v16;
        v58 = 0;
        __p = 0uLL;
        v17 = v59;
        *((_DWORD *)v10 + 54) = v60;
        *(__int128 *)((char *)v10 + 200) = v17;
        v62 = v10 + 14;
      }
      if (SHIBYTE(v54) < 0)
        operator delete((void *)v53);
      v64[0] = (void **)&v51;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v64);
      if (SHIBYTE(v50) < 0)
        operator delete((void *)v49);
      v64[0] = (void **)&v47;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v64);
      if (SHIBYTE(v46) < 0)
        operator delete((void *)v45);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      if (v36 < 0)
        operator delete(v35[0]);
      v35[0] = v37;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v35);
      if (v39 < 0)
        operator delete(v38[0]);
      if (v41 < 0)
        operator delete(v40[0]);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
    }
    v18 = (uint64_t *)*a2;
    if (*a2 == a2[1])
    {
      if ((unint64_t)v18 >= a2[2])
      {
        v20 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(a2, &v61);
        v19 = a3;
      }
      else
      {
        std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)a2, &v61);
        v19 = a3;
        v20 = (uint64_t)(v18 + 3);
      }
      a2[1] = v20;
      v21 = *(_QWORD *)(v19 + 16);
      v22 = *(_QWORD **)(v19 + 8);
      if ((unint64_t)v22 >= v21)
      {
        v24 = *(_QWORD **)v19;
        v25 = ((uint64_t)v22 - *(_QWORD *)v19) >> 3;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v27 = v21 - (_QWORD)v24;
        if (v27 >> 2 > v26)
          v26 = v27 >> 2;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
        {
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v19 + 16, v28);
          v24 = *(_QWORD **)v19;
          v22 = *(_QWORD **)(v19 + 8);
        }
        else
        {
          v29 = 0;
        }
        v30 = &v29[8 * v25];
        v31 = &v29[8 * v28];
        *(_QWORD *)v30 = 0;
        v23 = v30 + 8;
        while (v22 != v24)
        {
          v32 = *--v22;
          *((_QWORD *)v30 - 1) = v32;
          v30 -= 8;
        }
        *(_QWORD *)v19 = v30;
        *(_QWORD *)(v19 + 8) = v23;
        *(_QWORD *)(v19 + 16) = v31;
        if (v24)
          operator delete(v24);
      }
      else
      {
        *v22 = 0;
        v23 = v22 + 1;
      }
      *(_QWORD *)(v19 + 8) = v23;
    }
    else
    {
      memset(&v43, 0, sizeof(v43));
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v43, *v18, v18[1], 0x6DB6DB6DB6DB6DB7 * ((v18[1] - *v18) >> 5));
      std::vector<quasar::Token>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::Token*>,std::__wrap_iter<quasar::Token*>>(&v61, v62, (const quasar::Token *)v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v43.__r_.__value_.__l.__size_ - v43.__r_.__value_.__r.__words[0]) >> 5));
      if ((uint64_t *)*a2 != &v61)
        std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(*a2, v61, (uint64_t)v62, 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v62 - v61) >> 5));
      v40[0] = &v43;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);
    }
    v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  }
}

void sub_1ADD8B390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;

  a47 = v47 - 144;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  _Unwind_Resume(a1);
}

uint64_t quasar::isContinuousListening(quasar *this, int a2, int a3, int a4)
{
  if ((_DWORD)this)
    return (a3 | a4) & (a2 ^ 1u);
  else
    return 0;
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[13],char const(&)[12],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADD8B4A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[14],char const(&)[13],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADD8B4F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::swap[abi:ne180100]<quasar::Token>(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  int v5;
  __int128 v6;
  __int128 v7;
  void *v8[2];
  uint64_t v9;
  _BYTE v10[22];
  void *v11[2];
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  void *v15[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  void *v19[2];
  uint64_t v20;
  int v21;
  __int16 v22;
  void *__p[2];
  uint64_t v24;
  __int128 v25;
  int v26;
  void **v27;

  *(_OWORD *)v8 = *(_OWORD *)a1;
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_OWORD *)v10 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)&v10[14] = *(_QWORD *)(a1 + 38);
  *(_OWORD *)v11 = *(_OWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v13 = *(_OWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v3 = *(_OWORD *)(a1 + 96);
  v16 = *(_QWORD *)(a1 + 112);
  *(_OWORD *)v15 = v3;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v17 = *(_OWORD *)(a1 + 120);
  v18 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v4 = *(_OWORD *)(a1 + 144);
  v20 = *(_QWORD *)(a1 + 160);
  *(_OWORD *)v19 = v4;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v5 = *(_DWORD *)(a1 + 168);
  v22 = *(_WORD *)(a1 + 172);
  v21 = v5;
  v6 = *(_OWORD *)(a1 + 176);
  v24 = *(_QWORD *)(a1 + 192);
  *(_OWORD *)__p = v6;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  v7 = *(_OWORD *)(a1 + 200);
  v26 = *(_DWORD *)(a1 + 216);
  v25 = v7;
  quasar::Token::operator=(a1, a2);
  quasar::Token::operator=((uint64_t)a2, (__int128 *)v8);
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v20) < 0)
    operator delete(v19[0]);
  v27 = (void **)&v17;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  v27 = (void **)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN6quasar25ContinuousListeningConfigENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x90uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN6quasar25ContinuousListeningConfigENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADD8B6C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN6quasar25ContinuousListeningConfigENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44320;
  a1[1] = 0;
  quasar::ContinuousListeningConfig::ContinuousListeningConfig((quasar::ContinuousListeningConfig *)(a1 + 3));
  return a1;
}

void sub_1ADD8B70C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ContinuousListeningConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44320;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ContinuousListeningConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44320;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::ContinuousListeningConfig>::__on_zero_shared(uint64_t a1)
{
  char v2;

  return std::allocator<quasar::ContinuousListeningConfig>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

uint64_t std::allocator<quasar::ContinuousListeningConfig>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v4;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2 + 80);
  v4 = (void **)(a2 + 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2 + 16);
}

uint64_t kaldi::quasar::isLowEndDevice(kaldi::quasar *this)
{
  unsigned __int8 v1;

  {
    kaldi::quasar::isLowEndDevice(void)::ret = MGGetSInt64Answer() < 32;
  }
  return kaldi::quasar::isLowEndDevice(void)::ret;
}

void sub_1ADD8B840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::IsUniversalIntelChip(kaldi::quasar *this)
{
  return !MGGetSInt64Answer() || MGGetSInt64Answer() == 32786;
}

uint64_t kaldi::quasar::IsVirtualMachine(kaldi::quasar *this)
{
  unsigned __int8 v1;

  {
    kaldi::quasar::IsVirtualMachine(void)::ret = MGGetBoolAnswer();
  }
  return kaldi::quasar::IsVirtualMachine(void)::ret;
}

void sub_1ADD8B900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::onDeviceCompile(uint64_t a1, unsigned __int16 **a2, uint64_t *a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[34];

  if (kaldi::quasar::checkCompiledCacheWithProgramLibrary(a1, a2, a3))
  {
    if (*a3 == a3[1])
    {
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Already compiled v2 model: ", 27);
        v13 = *(char *)(a1 + 23);
        if (v13 >= 0)
          v14 = a1;
        else
          v14 = *(_QWORD *)a1;
        if (v13 >= 0)
          v15 = *(unsigned __int8 *)(a1 + 23);
        else
          v15 = *(_QWORD *)(a1 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
        goto LABEL_20;
      }
    }
    else if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Already compiled v2 model: ", 27);
      v7 = *(char *)(a1 + 23);
      if (v7 >= 0)
        v8 = a1;
      else
        v8 = *(_QWORD *)a1;
      if (v7 >= 0)
        v9 = *(unsigned __int8 *)(a1 + 23);
      else
        v9 = *(_QWORD *)(a1 + 8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" for specified functions", 24);
LABEL_20:
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v17);
    }
    return 1;
  }
  v17[0] = 0;
  v11 = kaldi::quasar::compileWithProgramLibrary(a1, a2, v17, 1, a3);
  e5rt_program_library_release();
  return v11;
}

void sub_1ADD8BA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::checkCompiledCacheWithProgramLibrary(uint64_t a1, unsigned __int16 **a2, uint64_t *a3)
{
  kaldi::quasar *isLowEndDevice;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  unsigned __int16 *v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  unsigned __int16 *v19;
  unsigned int v22;
  int v23;
  const char *last_error_message;
  size_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  size_t v45;
  int is_new_compile_required;
  const char *v47;
  size_t v48;
  _QWORD v49[35];
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  _QWORD v54[2];

  v53 = 0;
  v54[0] = 0;
  if (e5rt_e5_compiler_create())
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
      goto LABEL_65;
    goto LABEL_66;
  }
  isLowEndDevice = (kaldi::quasar *)e5rt_e5_compiler_options_create();
  if ((_DWORD)isLowEndDevice)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
      goto LABEL_65;
    goto LABEL_66;
  }
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    v8 = 0;
    while (1)
    {
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Setting compilation options computeDeviceType to: ", 50);
        v10 = *((char *)v6 + 23);
        if (v10 >= 0)
          v11 = v6;
        else
          v11 = *(unsigned __int16 **)v6;
        if (v10 >= 0)
          v12 = *((unsigned __int8 *)v6 + 23);
        else
          v12 = *((_QWORD *)v6 + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v49);
      }
      if ((*((char *)v6 + 23) & 0x80000000) == 0)
        break;
      v15 = *((_QWORD *)v6 + 1);
      if (v15 == 3 && **(_WORD **)v6 == 20547 && *(_BYTE *)(*(_QWORD *)v6 + 2) == 85)
        goto LABEL_54;
      if (v15 == 7)
      {
        if (**(_DWORD **)v6 == 1599426627 && *(_DWORD *)(*(_QWORD *)v6 + 3) == 1414283615)
          goto LABEL_54;
        v15 = *((_QWORD *)v6 + 1);
      }
      if (v15 == 3)
      {
        if (**(_WORD **)v6 == 20033 && *(_BYTE *)(*(_QWORD *)v6 + 2) == 69)
        {
LABEL_55:
          v8 |= 4uLL;
          isLowEndDevice = (kaldi::quasar *)kaldi::quasar::isLowEndDevice(isLowEndDevice);
          if ((_DWORD)isLowEndDevice)
            isLowEndDevice = (kaldi::quasar *)e5rt_e5_compiler_options_set_force_classic_aot_old_hw();
          goto LABEL_62;
        }
        if (*((_QWORD *)v6 + 1) == 3)
        {
          v19 = *(unsigned __int16 **)v6;
LABEL_52:
          v22 = bswap32(*v19) >> 16;
          if (v22 == 18256)
          {
            v23 = *((unsigned __int8 *)v19 + 2) - 85;
          }
          else if (v22 >> 4 < 0x475)
          {
            v23 = -1;
          }
          else
          {
            v23 = 1;
          }
          if (!v23)
            v8 |= 2uLL;
        }
      }
LABEL_62:
      v6 += 12;
      if (v6 == v7)
        goto LABEL_63;
    }
    v13 = *((unsigned __int8 *)v6 + 23);
    if (v13 == 3)
    {
      if (*v6 != 20547 || *((_BYTE *)v6 + 2) != 85)
      {
        if (*v6 == 20033 && *((_BYTE *)v6 + 2) == 69)
          goto LABEL_55;
        v19 = v6;
        goto LABEL_52;
      }
    }
    else
    {
      if (v13 != 7)
        goto LABEL_62;
      if (*(_DWORD *)v6 != 1599426627 || *(_DWORD *)((char *)v6 + 3) != 1414283615)
        goto LABEL_62;
    }
LABEL_54:
    v8 |= 1uLL;
    goto LABEL_62;
  }
LABEL_63:
  if (e5rt_e5_compiler_options_set_compute_device_types_mask())
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
LABEL_65:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
      last_error_message = (const char *)e5rt_get_last_error_message();
      v25 = strlen(last_error_message);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)last_error_message, v25);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    }
LABEL_66:
    kaldi::quasar::releaseE5OptionsAndHandles(&v53, v54);
    return 0;
  }
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v27 = *a3;
  v28 = a3[1];
  if (*a3 == v28)
    goto LABEL_100;
  do
  {
    v29 = v27;
    if (*(char *)(v27 + 23) < 0)
      v29 = *(_QWORD *)v27;
    v30 = v51;
    if (v51 >= v52)
    {
      v32 = (v51 - v50) >> 3;
      if ((unint64_t)(v32 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v33 = (v52 - v50) >> 2;
      if (v33 <= v32 + 1)
        v33 = v32 + 1;
      if ((unint64_t)(v52 - v50) >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v33;
      if (v34)
        v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v52, v34);
      else
        v35 = 0;
      v36 = (uint64_t *)&v35[8 * v32];
      *v36 = v29;
      v31 = (char *)(v36 + 1);
      v38 = v50;
      v37 = v51;
      if (v51 != v50)
      {
        do
        {
          v39 = *((_QWORD *)v37 - 1);
          v37 -= 8;
          *--v36 = v39;
        }
        while (v37 != v38);
        v37 = v50;
      }
      v50 = (char *)v36;
      v51 = v31;
      v52 = &v35[8 * v34];
      if (v37)
        operator delete(v37);
    }
    else
    {
      *(_QWORD *)v51 = v29;
      v31 = v30 + 8;
    }
    v51 = v31;
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v49, 5);
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"Adding function to compile: ", 28);
      v41 = *(char *)(v27 + 23);
      if (v41 >= 0)
        v42 = v27;
      else
        v42 = *(_QWORD *)v27;
      if (v41 >= 0)
        v43 = *(unsigned __int8 *)(v27 + 23);
      else
        v43 = *(_QWORD *)(v27 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v49);
    }
    v27 += 24;
  }
  while (v27 != v28);
  if (!e5rt_e5_compiler_options_set_mil_entry_points())
  {
LABEL_100:
    is_new_compile_required = e5rt_e5_compiler_is_new_compile_required();
    kaldi::quasar::releaseE5OptionsAndHandles(&v53, v54);
    if (is_new_compile_required && kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
      v47 = (const char *)e5rt_get_last_error_message();
      v48 = strlen(v47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v47, v48);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    }
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
      v44 = (const char *)e5rt_get_last_error_message();
      v45 = strlen(v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v44, v45);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    }
    kaldi::quasar::releaseE5OptionsAndHandles(&v53, v54);
  }
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
  return 0;
}

void sub_1ADD8BFD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void *v12;

  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::compileWithProgramLibrary(uint64_t a1, unsigned __int16 **a2, _QWORD *a3, int a4, uint64_t *a5)
{
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  kaldi::quasar *isLowEndDevice;
  unsigned __int16 *v16;
  unsigned __int16 *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  unsigned __int16 *v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  unsigned __int16 *v29;
  unsigned int v32;
  int v33;
  const char *last_error_message;
  size_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t *v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  const char *v54;
  size_t v55;
  int v56;
  const char *v57;
  size_t v58;
  _QWORD *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char *__p;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[35];

  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Starting to compile v2 model: ", 30);
    v11 = *(char *)(a1 + 23);
    if (v11 >= 0)
      v12 = a1;
    else
      v12 = *(_QWORD *)a1;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a1 + 23);
    else
      v13 = *(_QWORD *)(a1 + 8);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" behavior: ", 11);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v73);
  }
  v71 = 0;
  v72 = 0;
  if (e5rt_e5_compiler_create())
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
      goto LABEL_73;
    goto LABEL_74;
  }
  isLowEndDevice = (kaldi::quasar *)e5rt_e5_compiler_options_create();
  if ((_DWORD)isLowEndDevice)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
      goto LABEL_73;
    goto LABEL_74;
  }
  v67 = a3;
  v16 = *a2;
  v17 = a2[1];
  if (*a2 != v17)
  {
    v18 = 0;
    while (1)
    {
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Setting compilation options computeDeviceType to: ", 50);
        v20 = *((char *)v16 + 23);
        if (v20 >= 0)
          v21 = v16;
        else
          v21 = *(unsigned __int16 **)v16;
        if (v20 >= 0)
          v22 = *((unsigned __int8 *)v16 + 23);
        else
          v22 = *((_QWORD *)v16 + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v21, v22);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v73);
      }
      if ((*((char *)v16 + 23) & 0x80000000) == 0)
        break;
      v25 = *((_QWORD *)v16 + 1);
      if (v25 == 3 && **(_WORD **)v16 == 20547 && *(_BYTE *)(*(_QWORD *)v16 + 2) == 85)
        goto LABEL_62;
      if (v25 == 7)
      {
        if (**(_DWORD **)v16 == 1599426627 && *(_DWORD *)(*(_QWORD *)v16 + 3) == 1414283615)
          goto LABEL_62;
        v25 = *((_QWORD *)v16 + 1);
      }
      if (v25 == 3)
      {
        if (**(_WORD **)v16 == 20033 && *(_BYTE *)(*(_QWORD *)v16 + 2) == 69)
        {
LABEL_63:
          v18 |= 4uLL;
          isLowEndDevice = (kaldi::quasar *)kaldi::quasar::isLowEndDevice(isLowEndDevice);
          if ((_DWORD)isLowEndDevice)
            isLowEndDevice = (kaldi::quasar *)e5rt_e5_compiler_options_set_force_classic_aot_old_hw();
          goto LABEL_70;
        }
        if (*((_QWORD *)v16 + 1) == 3)
        {
          v29 = *(unsigned __int16 **)v16;
LABEL_60:
          v32 = bswap32(*v29) >> 16;
          if (v32 == 18256)
          {
            v33 = *((unsigned __int8 *)v29 + 2) - 85;
          }
          else if (v32 >> 4 < 0x475)
          {
            v33 = -1;
          }
          else
          {
            v33 = 1;
          }
          if (!v33)
            v18 |= 2uLL;
        }
      }
LABEL_70:
      v16 += 12;
      if (v16 == v17)
        goto LABEL_71;
    }
    v23 = *((unsigned __int8 *)v16 + 23);
    if (v23 == 3)
    {
      if (*v16 != 20547 || *((_BYTE *)v16 + 2) != 85)
      {
        if (*v16 == 20033 && *((_BYTE *)v16 + 2) == 69)
          goto LABEL_63;
        v29 = v16;
        goto LABEL_60;
      }
    }
    else
    {
      if (v23 != 7)
        goto LABEL_70;
      if (*(_DWORD *)v16 != 1599426627 || *(_DWORD *)((char *)v16 + 3) != 1414283615)
        goto LABEL_70;
    }
LABEL_62:
    v18 |= 1uLL;
    goto LABEL_70;
  }
LABEL_71:
  if (e5rt_e5_compiler_options_set_compute_device_types_mask())
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
LABEL_73:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
      last_error_message = (const char *)e5rt_get_last_error_message();
      v35 = strlen(last_error_message);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)last_error_message, v35);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
    }
LABEL_74:
    kaldi::quasar::releaseE5OptionsAndHandles(&v71, &v72);
    return 0;
  }
  __p = 0;
  v69 = 0;
  v70 = 0;
  v38 = *a5;
  v39 = a5[1];
  if (*a5 != v39)
  {
    do
    {
      v40 = v38;
      if (*(char *)(v38 + 23) < 0)
        v40 = *(_QWORD *)v38;
      if (v69 >= v70)
      {
        v42 = (v69 - __p) >> 3;
        if ((unint64_t)(v42 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v43 = (v70 - __p) >> 2;
        if (v43 <= v42 + 1)
          v43 = v42 + 1;
        if ((unint64_t)(v70 - __p) >= 0x7FFFFFFFFFFFFFF8)
          v44 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        if (v44)
          v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v70, v44);
        else
          v45 = 0;
        v46 = (uint64_t *)&v45[8 * v42];
        *v46 = v40;
        v41 = (char *)(v46 + 1);
        v47 = v69;
        if (v69 != __p)
        {
          do
          {
            v48 = *((_QWORD *)v47 - 1);
            v47 -= 8;
            *--v46 = v48;
          }
          while (v47 != __p);
          v47 = __p;
        }
        __p = (char *)v46;
        v70 = &v45[8 * v44];
        if (v47)
          operator delete(v47);
      }
      else
      {
        *(_QWORD *)v69 = v40;
        v41 = v69 + 8;
      }
      v69 = v41;
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
        v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Adding function to compile: ", 28);
        v50 = *(char *)(v38 + 23);
        if (v50 >= 0)
          v51 = v38;
        else
          v51 = *(_QWORD *)v38;
        if (v50 >= 0)
          v52 = *(unsigned __int8 *)(v38 + 23);
        else
          v52 = *(_QWORD *)(v38 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, v51, v52);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v73);
      }
      v38 += 24;
    }
    while (v38 != v39);
    if (e5rt_e5_compiler_options_set_mil_entry_points())
    {
      if (kaldi::g_kaldi_verbose_level >= -1)
        goto LABEL_114;
      goto LABEL_115;
    }
  }
  if (a4 == 2)
  {
    v53 = v67;
    if (e5rt_e5_compiler_options_set_force_fetch_from_cache())
    {
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
LABEL_114:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
        v54 = (const char *)e5rt_get_last_error_message();
        v55 = strlen(v54);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)v54, v55);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
      }
LABEL_115:
      kaldi::quasar::releaseE5OptionsAndHandles(&v71, &v72);
      goto LABEL_116;
    }
  }
  else
  {
    v53 = v67;
    if (a4 == 1 && e5rt_e5_compiler_options_set_force_recompilation())
    {
      if (kaldi::g_kaldi_verbose_level >= -1)
        goto LABEL_114;
      goto LABEL_115;
    }
  }
  v56 = e5rt_e5_compiler_compile();
  kaldi::quasar::releaseE5OptionsAndHandles(&v71, &v72);
  if (v56)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
      v57 = (const char *)e5rt_get_last_error_message();
      v58 = strlen(v57);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)v57, v58);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
    }
  }
  else
  {
    if (*v53)
    {
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
        v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Ondevice compilation succeeded for v2 model path: ", 50);
        v60 = *(char *)(a1 + 23);
        if (v60 >= 0)
          v61 = a1;
        else
          v61 = *(_QWORD *)a1;
        if (v60 >= 0)
          v62 = *(unsigned __int8 *)(a1 + 23);
        else
          v62 = *(_QWORD *)(a1 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, v61, v62);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v73);
      }
      v36 = 1;
      goto LABEL_117;
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
      v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Program library NULL, Ondevice compilation fail for v2 model path: ", 67);
      v64 = *(char *)(a1 + 23);
      if (v64 >= 0)
        v65 = a1;
      else
        v65 = *(_QWORD *)a1;
      if (v64 >= 0)
        v66 = *(unsigned __int8 *)(a1 + 23);
      else
        v66 = *(_QWORD *)(a1 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, v65, v66);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
    }
  }
LABEL_116:
  v36 = 0;
LABEL_117:
  if (__p)
    operator delete(__p);
  return v36;
}

void sub_1ADD8C774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::quasar::releaseE5OptionsAndHandles(_QWORD *result, _QWORD *a2)
{
  if (*result)
    result = (_QWORD *)e5rt_e5_compiler_options_release();
  if (*a2)
    return (_QWORD *)e5rt_e5_compiler_release();
  return result;
}

void kaldi::quasar::deduceComputePlatformsWithBestEffort(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  std::string::size_type size;
  std::__wrap_iter<const char *> v8;
  std::__wrap_iter<const char *> v9;
  std::__shared_weak_count *cntrl;
  uint64_t *p_shared_owners;
  unint64_t v12;
  std::string *v13;
  char v14;
  int v15;
  BOOL ShouldUseBnnsFallback;
  void *v17[2];
  char v18;
  std::string v19;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v20;
  void *v21;
  char v22;
  uint64_t v23;
  std::string __p;
  std::string v25;
  _BYTE v26[15];
  unsigned __int8 v27;
  void *v28[4];
  char v29;
  __int128 *v30;
  __int128 *v31;

  kaldi::quasar::EspressoV2NetworkConfig::EspressoV2NetworkConfig(v28, a1);
  v29 = a2;
  v27 = 0;
  kaldi::Input::Input(v26, a1, &v27);
  v6 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)v26);
  std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&v25, *(_QWORD **)((char *)v6 + *(_QWORD *)(*v6 - 24) + 40), 0);
  kaldi::Input::Close((kaldi::Input *)v26);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v20.__traits_, "</Engine>", 0);
  memset(&__p, 0, sizeof(__p));
  size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v25;
  else
    v8.__i_ = (std::__wrap_iter<const char *>::iterator_type)v25.__r_.__value_.__r.__words[0];
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v25.__r_.__value_.__l.__size_;
  v9.__i_ = &v8.__i_[size];
  std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&__p, v8, v9, &v20, "\n</Engine>", 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  cntrl = v20.__start_.__cntrl_;
  if (v20.__start_.__cntrl_)
  {
    p_shared_owners = &v20.__start_.__cntrl_->__shared_owners_;
    do
      v12 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v12 - 1, (unint64_t *)p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  std::locale::~locale(&v20.__traits_.__loc_);
  std::istringstream::basic_istringstream[abi:ne180100](&v20, &v25, 8);
  while ((*((_BYTE *)&v20.__loop_count_ + *((_QWORD *)v20.__traits_.__loc_.__locale_ - 3)) & 2) == 0)
  {
    memset(&v19, 0, sizeof(v19));
    kaldi::ReadToken((uint64_t *)&v20, 0, (uint64_t)&v19);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v19.__r_.__value_.__l.__size_ != 8)
        goto LABEL_21;
      v13 = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) != 8)
        goto LABEL_21;
      v13 = &v19;
    }
    if (v13->__r_.__value_.__r.__words[0] == 0x3E656E69676E453CLL)
    {
      v15 = v27;
      std::string::basic_string[abi:ne180100]<0>(v17, "</Engine>");
      kaldi::quasar::EspressoV2NetworkConfig::Read((uint64_t)v28, (uint64_t *)&v20, v15 != 0, (uint64_t)v17);
      if (v18 < 0)
        operator delete(v17[0]);
      v14 = 0;
      goto LABEL_22;
    }
LABEL_21:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(&v20);
    v14 = 1;
LABEL_22:
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v19.__r_.__value_.__l.__data_);
      if ((v14 & 1) == 0)
        break;
    }
    else if ((v14 & 1) == 0)
    {
      break;
    }
  }
  ShouldUseBnnsFallback = kaldi::quasar::EspressoV2NetworkConfig::MilShouldUseBnnsFallback((unsigned __int8 **)v28);
  memset(&v19, 0, sizeof(v19));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v19, v30, v31, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3));
  *(_BYTE *)a3 = ShouldUseBnnsFallback;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a3 + 8), (__int128 *)v19.__r_.__value_.__l.__data_, (__int128 *)v19.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19.__r_.__value_.__l.__size_ - v19.__r_.__value_.__r.__words[0]) >> 3));
  v17[0] = &v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v17);
  v20.__traits_.__loc_.__locale_ = (std::locale::__imp *)*MEMORY[0x1E0DE4F58];
  *(std::locale::__imp **)((char *)&v20.__traits_.__loc_.__locale_ + *((_QWORD *)v20.__traits_.__loc_.__locale_ - 3)) = *(std::locale::__imp **)(MEMORY[0x1E0DE4F58] + 24);
  v20.__traits_.__col_ = (const std::collate<char> *)(MEMORY[0x1E0DE4FB8] + 16);
  if (v22 < 0)
    operator delete(v21);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1AF44D094](&v23);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  kaldi::Input::~Input((kaldi::Input *)v26);
  kaldi::quasar::EspressoV2NetworkConfig::~EspressoV2NetworkConfig(v28);
}

void sub_1ADD8CBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, std::locale a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58)
{
  uint64_t v58;

  a9 = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  std::istringstream::~istringstream((uint64_t)&a15);
  if (a57 < 0)
    operator delete(__p);
  kaldi::Input::~Input((kaldi::Input *)&a58);
  kaldi::quasar::EspressoV2NetworkConfig::~EspressoV2NetworkConfig((void **)(v58 - 256));
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::purgeE5BundlesForMil(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  const char *last_error_message;
  size_t v10;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[35];

  v16[34] = 0;
  if (e5rt_e5_compiler_create())
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"purgeE5BundlesForMil failed for: ", 33);
      v3 = *(char *)(a1 + 23);
      if (v3 >= 0)
        v4 = a1;
      else
        v4 = *(_QWORD *)a1;
      if (v3 >= 0)
        v5 = *(unsigned __int8 *)(a1 + 23);
      else
        v5 = *(_QWORD *)(a1 + 8);
LABEL_17:
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, v4, v5);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" - ", 3);
      last_error_message = (const char *)e5rt_get_last_error_message();
      v10 = strlen(last_error_message);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)last_error_message, v10);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      return 0;
    }
    return 0;
  }
  if (e5rt_e5_compiler_purge_e5_bundles_for_input_model())
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"purgeE5BundlesForMil failed for : ", 34);
      v6 = *(char *)(a1 + 23);
      if (v6 >= 0)
        v4 = a1;
      else
        v4 = *(_QWORD *)a1;
      if (v6 >= 0)
        v5 = *(unsigned __int8 *)(a1 + 23);
      else
        v5 = *(_QWORD *)(a1 + 8);
      goto LABEL_17;
    }
    return 0;
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"purged E5 bundles for: ", 23);
    v13 = *(char *)(a1 + 23);
    if (v13 >= 0)
      v14 = a1;
    else
      v14 = *(_QWORD *)a1;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a1 + 23);
    else
      v15 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v16);
  }
  return 1;
}

void sub_1ADD8CE2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(std::string *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  std::string::value_type *v5;
  std::string::value_type v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v8 = a3;
  v9 = a2;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  while (1)
  {
    result = std::istreambuf_iterator<char>::equal[abi:ne180100](&v9, &v8);
    if ((result & 1) != 0)
      break;
    v5 = (std::string::value_type *)v9[3];
    if (v5 == (std::string::value_type *)v9[4])
      v6 = (*(uint64_t (**)(_QWORD *))(*v9 + 72))(v9);
    else
      v6 = *v5;
    std::string::push_back(a1, v6);
    v7 = v9[3];
    if (v7 == v9[4])
      (*(void (**)(_QWORD *))(*v9 + 80))(v9);
    else
      v9[3] = v7 + 1;
  }
  return result;
}

void sub_1ADD8CF00(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_1ADD8CF1C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1ADD8CFE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t QuasarCPDecTranslator_new(quasar::SystemConfig *a1, char *a2, char *a3, char *a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void *__p[2];
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;

  v8 = operator new();
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  std::string::basic_string[abi:ne180100]<0>(v19, a3);
  std::string::basic_string[abi:ne180100]<0>(v17, a4);
  v15 = 0;
  v16 = 0;
  quasar::PDecTranslator::PDecTranslator(v8, a1, (uint64_t)__p, (uint64_t)v19, (uint64_t)v17, 0, 0, 0, 1, &v15);
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v18 < 0)
    operator delete(v17[0]);
  if (v20 < 0)
    operator delete(v19[0]);
  if (v14 < 0)
    operator delete(__p[0]);
  return v8;
}

void sub_1ADD8D158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 __p, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,__int128 a26,__int128 a27)
{
  uint64_t v27;
  uint64_t v28;
  quasar *v31;
  uint64_t v32;
  const char *v33;
  size_t v34;
  NSObject *v35;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v28 - 112);
  if (*(char *)(v28 - 73) < 0)
    operator delete(*(void **)(v28 - 96));
  if (*(char *)(v28 - 49) < 0)
    operator delete(*(void **)(v28 - 72));
  if (SBYTE7(a12) < 0)
    operator delete((void *)__p);
  MEMORY[0x1AF44D190](v27, 0x10B3C40CFFE25C2);
  if (a2 == 1)
  {
    v31 = (quasar *)__cxa_begin_catch(a1);
    v32 = (uint64_t)v31;
    if (quasar::gLogLevel >= 1)
    {
      a26 = 0u;
      a27 = 0u;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      v33 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
      v34 = strlen(v33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)v33, v34);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
    }
    v35 = quasar::QuasarCLogger(v31);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_FAULT))
      QuasarCPDecTranslator_new_cold_1(v32);
    __cxa_end_catch();
    JUMPOUT(0x1ADD8D13CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t QuasarCPDecTranslator_delete(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

char *QuasarCPDecTranslator_translate(uint64_t a1, char *a2)
{
  char *v3;
  char *v4;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  char __s1[8];
  char v10;
  char v11;
  __int128 v12;
  char v13;
  __int128 v14;

  *(_QWORD *)&v14 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v12, a2);
  v6 = 0;
  v7 = 0;
  v8 = 0;
  *(_QWORD *)__s1 = &v6;
  v10 = 0;
  v6 = (std::string *)operator new(0x18uLL);
  v7 = v6;
  v8 = v6 + 1;
  v7 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v8, &v12, &v14, v6);
  if (v13 < 0)
    operator delete((void *)v12);
  (*(void (**)(__int128 *__return_ptr, uint64_t, std::string **, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 16))(&v12, a1, &v6, 0, 0, 1);
  if ((_QWORD)v12 == *((_QWORD *)&v12 + 1))
  {
    v3 = 0;
  }
  else
  {
    quasar::TranslationPhrase::convertTokensToString((uint64_t *)__s1, (quasar::TranslationPhrase *)v12);
    if (v11 < 0)
    {
      v4 = *(char **)__s1;
      v3 = strdup(*(const char **)__s1);
      operator delete(v4);
    }
    else
    {
      v3 = strdup(__s1);
    }
  }
  *(_QWORD *)__s1 = &v12;
  std::vector<quasar::TranslationPhrase>::__destroy_vector::operator()[abi:ne180100]((void ***)__s1);
  *(_QWORD *)&v12 = &v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
  return v3;
}

void sub_1ADD8D420(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25)
{
  uint64_t v25;
  quasar *v28;
  uint64_t v29;
  const char *v30;
  size_t v31;
  NSObject *v32;

  *(_QWORD *)(v25 - 88) = v25 - 64;
  std::vector<quasar::TranslationPhrase>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 88));
  *(_QWORD *)(v25 - 64) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 64));
  if (a2 == 1)
  {
    v28 = (quasar *)__cxa_begin_catch(a1);
    v29 = (uint64_t)v28;
    if (quasar::gLogLevel >= 1)
    {
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      a9 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
      v30 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
      v31 = strlen(v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a9, (uint64_t)v30, v31);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
    }
    v32 = quasar::QuasarCLogger(v28);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
      QuasarCPDecTranslator_new_cold_1(v29);
    __cxa_end_catch();
    JUMPOUT(0x1ADD8D3ECLL);
  }
  _Unwind_Resume(a1);
}

quasar::TranslationPhrase *QuasarCPDecTranslator_translateResult(uint64_t a1, char *a2)
{
  quasar::TranslationPhrase *v3;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  void **v8;
  char v9;
  __int128 v10;
  char v11;
  __int128 v12;

  *(_QWORD *)&v12 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v10, a2);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = (void **)&v5;
  v9 = 0;
  v5 = (std::string *)operator new(0x18uLL);
  v6 = v5;
  v7 = v5 + 1;
  v6 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v7, &v10, &v12, v5);
  if (v11 < 0)
    operator delete((void *)v10);
  (*(void (**)(__int128 *__return_ptr, uint64_t, std::string **, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a1 + 16))(&v10, a1, &v5, 0, 0, 1);
  if ((_QWORD)v10 == *((_QWORD *)&v10 + 1))
  {
    v3 = 0;
  }
  else
  {
    v3 = (quasar::TranslationPhrase *)operator new();
    quasar::TranslationPhrase::TranslationPhrase(v3, (const quasar::TranslationPhrase *)v10);
  }
  v8 = (void **)&v10;
  std::vector<quasar::TranslationPhrase>::__destroy_vector::operator()[abi:ne180100](&v8);
  *(_QWORD *)&v10 = &v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  return v3;
}

void sub_1ADD8D6C4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25)
{
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  quasar *v30;
  uint64_t v31;
  const char *v32;
  size_t v33;
  NSObject *v34;

  v28 = v25;
  MEMORY[0x1AF44D190](v28, 0x1032C402CDA8D36);
  *(_QWORD *)(v26 - 80) = v26 - 64;
  std::vector<quasar::TranslationPhrase>::__destroy_vector::operator()[abi:ne180100]((void ***)(v26 - 80));
  *(_QWORD *)(v26 - 64) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v26 - 64));
  if (a2 == 1)
  {
    v30 = (quasar *)__cxa_begin_catch(a1);
    v31 = (uint64_t)v30;
    if (quasar::gLogLevel >= 1)
    {
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      a9 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
      v32 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);
      v33 = strlen(v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a9, (uint64_t)v32, v33);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
    }
    v34 = quasar::QuasarCLogger(v30);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
      QuasarCPDecTranslator_new_cold_1(v31);
    __cxa_end_catch();
    JUMPOUT(0x1ADD8D690);
  }
  _Unwind_Resume(a1);
}

quasar::TranslationPhrase *QuasarCPDecTranslator_align(uint64_t a1, char *a2, char *a3)
{
  _OWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  _OWORD *v9;
  quasar::TranslationPhrase *v10;
  unint64_t v12;
  char v13;
  __int128 v14;
  void *v15[2];
  __int128 v16;
  void *v17;
  char v18;
  char v19;
  char v20;
  char v21;
  __int16 v22;
  void *v23[2];
  char v24;
  __int128 v25;
  uint64_t v26;
  void *__p[2];
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30[2];
  void **v31;
  quasar::TranslationPhrase *v32[2];
  uint64_t v33;
  __int16 v34;
  void *v35[2];
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char v39;
  char v40;
  _BYTE v41[40];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  void *v47;
  char v48;
  char v49;
  _BYTE v50[24];
  char v51;
  __int16 v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v30[0] = 0;
  v30[1] = 0;
  v29 = (uint64_t *)v30;
  v12 = 0xBF80000000000000;
  v13 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v14 = 0u;
  *(_OWORD *)v15 = 0u;
  v16 = 0u;
  LOBYTE(v17) = 0;
  v22 = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v43 = *(_OWORD *)__p;
  *(_QWORD *)&v44 = v28;
  __p[1] = 0;
  v28 = 0;
  __p[0] = 0;
  WORD4(v44) = 0;
  *(_QWORD *)&v46 = 0;
  v45 = 0uLL;
  *((_QWORD *)&v46 + 1) = 3212836864;
  LODWORD(v47) = -1;
  *((_QWORD *)&v14 + 1) = std::vector<quasar::TranslationToken>::__push_back_slow_path<quasar::TranslationToken>((uint64_t *)&v14, &v43);
  if ((_QWORD)v45)
  {
    *((_QWORD *)&v45 + 1) = v45;
    operator delete((void *)v45);
  }
  if (SBYTE7(v44) < 0)
    operator delete((void *)v43);
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
  quasar::TranslationPhrase::TranslationPhrase((quasar::TranslationPhrase *)&v43, (const quasar::TranslationPhrase *)&v12);
  std::string::basic_string[abi:ne180100]<0>(v32, "source");
  v23[0] = v32;
  v5 = std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v29, (const void **)v32, (uint64_t)&std::piecewise_construct, (_OWORD **)v23);
  std::vector<quasar::TranslationPhrase>::__assign_with_size[abi:ne180100]<quasar::TranslationPhrase const*,quasar::TranslationPhrase const*>((uint64_t)v5 + 56, (quasar::TranslationPhrase *)&v43, (quasar::TranslationPhrase *)&v53, 1uLL);
  if (SHIBYTE(v33) < 0)
    operator delete(v32[0]);
  if (v51)
  {
    v32[0] = (quasar::TranslationPhrase *)v50;
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)v32);
  }
  if (v49 && v48 < 0)
    operator delete(v47);
  if (SHIBYTE(v46) < 0)
    operator delete(*((void **)&v45 + 1));
  v32[0] = (quasar::TranslationPhrase *)&v44;
  std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100]((void ***)v32);
  *(_QWORD *)&v43 = 0xBF80000000000000;
  BYTE8(v43) = 0;
  v49 = 0;
  v50[0] = 0;
  v51 = 0;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  LOBYTE(v47) = 0;
  v52 = 1;
  std::string::basic_string[abi:ne180100]<0>(&v25, a3);
  *(_OWORD *)v32 = v25;
  v33 = v26;
  v26 = 0;
  v25 = 0uLL;
  v34 = 0;
  v35[1] = 0;
  v36 = 0;
  v35[0] = 0;
  v37 = 3212836864;
  LODWORD(v38) = -1;
  v6 = *((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1) >= (unint64_t)v45)
  {
    *((_QWORD *)&v44 + 1) = std::vector<quasar::TranslationToken>::__push_back_slow_path<quasar::TranslationToken>((uint64_t *)&v44, (__int128 *)v32);
    if (v35[0])
    {
      v35[1] = v35[0];
      operator delete(v35[0]);
    }
  }
  else
  {
    v7 = *(_OWORD *)v32;
    *(_QWORD *)(*((_QWORD *)&v44 + 1) + 16) = v33;
    *(_OWORD *)v6 = v7;
    v32[1] = 0;
    v33 = 0;
    v32[0] = 0;
    *(_WORD *)(v6 + 24) = v34;
    *(_QWORD *)(v6 + 40) = 0;
    *(_QWORD *)(v6 + 48) = 0;
    *(_QWORD *)(v6 + 32) = 0;
    *(_OWORD *)(v6 + 32) = *(_OWORD *)v35;
    *(_QWORD *)(v6 + 48) = v36;
    v35[0] = 0;
    v35[1] = 0;
    v36 = 0;
    v8 = v37;
    *(_DWORD *)(v6 + 64) = (_DWORD)v38;
    *(_QWORD *)(v6 + 56) = v8;
    *((_QWORD *)&v44 + 1) = v6 + 72;
  }
  if (SHIBYTE(v33) < 0)
    operator delete(v32[0]);
  if (SHIBYTE(v26) < 0)
    operator delete((void *)v25);
  quasar::TranslationPhrase::TranslationPhrase((quasar::TranslationPhrase *)v32, (const quasar::TranslationPhrase *)&v43);
  std::string::basic_string[abi:ne180100]<0>(v23, "target");
  v31 = v23;
  v9 = std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v29, (const void **)v23, (uint64_t)&std::piecewise_construct, (_OWORD **)&v31);
  std::vector<quasar::TranslationPhrase>::__assign_with_size[abi:ne180100]<quasar::TranslationPhrase const*,quasar::TranslationPhrase const*>((uint64_t)v9 + 56, (quasar::TranslationPhrase *)v32, (quasar::TranslationPhrase *)&v42, 1uLL);
  if (v24 < 0)
    operator delete(v23[0]);
  if (v41[24])
  {
    v23[0] = v41;
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  }
  if (v40 && v39 < 0)
    operator delete(v38);
  if (SHIBYTE(v37) < 0)
    operator delete(v35[1]);
  v23[0] = &v33;
  std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  (*(void (**)(quasar::TranslationPhrase **__return_ptr, uint64_t, uint64_t **, _QWORD, _QWORD))(*(_QWORD *)a1 + 40))(v32, a1, &v29, 0, 0);
  if (v32[0] == v32[1])
  {
    v10 = 0;
  }
  else
  {
    v10 = (quasar::TranslationPhrase *)operator new();
    quasar::TranslationPhrase::TranslationPhrase(v10, v32[0]);
  }
  v23[0] = v32;
  std::vector<quasar::TranslationPhrase>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  if (v51)
  {
    v32[0] = (quasar::TranslationPhrase *)v50;
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)v32);
  }
  if (v49 && v48 < 0)
    operator delete(v47);
  if (SHIBYTE(v46) < 0)
    operator delete(*((void **)&v45 + 1));
  v32[0] = (quasar::TranslationPhrase *)&v44;
  std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100]((void ***)v32);
  if (v21)
  {
    *(_QWORD *)&v43 = &v20;
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  }
  if (v19 && v18 < 0)
    operator delete(v17);
  if (SHIBYTE(v16) < 0)
    operator delete(v15[1]);
  *(_QWORD *)&v43 = &v14;
  std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::destroy((uint64_t)&v29, v30[0]);
  return v10;
}

void sub_1ADD8DDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,_QWORD *a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;
  quasar *v57;
  uint64_t v58;
  const char *v59;
  size_t v60;
  NSObject *v61;

  quasar::TranslationToken::~TranslationToken((quasar::TranslationToken *)&a49);
  if (a37 < 0)
    operator delete(__p);
  quasar::TranslationPhrase::~TranslationPhrase((quasar::TranslationPhrase *)(v54 - 224));
  quasar::TranslationPhrase::~TranslationPhrase((quasar::TranslationPhrase *)&a9);
  std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::destroy((uint64_t)&a44, a45);
  if (a2 == 1)
  {
    v57 = (quasar *)__cxa_begin_catch(a1);
    v58 = (uint64_t)v57;
    if (quasar::gLogLevel >= 1)
    {
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      a9 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
      v59 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 16))(v58);
      v60 = strlen(v59);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a9, (uint64_t)v59, v60);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
    }
    v61 = quasar::QuasarCLogger(v57);
    if (os_log_type_enabled(v61, OS_LOG_TYPE_FAULT))
      QuasarCPDecTranslator_new_cold_1(v58);
    __cxa_end_catch();
    JUMPOUT(0x1ADD8DD80);
  }
  _Unwind_Resume(a1);
}

uint64_t QuasarCPDecTranslationResult_delete(uint64_t result)
{
  uint64_t v1;
  void **v2;

  if (result)
  {
    v1 = result;
    if (*(_BYTE *)(result + 120))
    {
      v2 = (void **)(result + 96);
      std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
    }
    if (*(_BYTE *)(v1 + 88) && *(char *)(v1 + 87) < 0)
      operator delete(*(void **)(v1 + 64));
    if (*(char *)(v1 + 63) < 0)
      operator delete(*(void **)(v1 + 40));
    v2 = (void **)(v1 + 16);
    std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100](&v2);
    return MEMORY[0x1AF44D190](v1, 0x1032C402CDA8D36);
  }
  return result;
}

float QuasarCPDecTranslationResult_score(uint64_t a1)
{
  return *(float *)a1;
}

float QuasarCPDecTranslationResult_confidence(uint64_t a1)
{
  return *(float *)(a1 + 4);
}

uint64_t QuasarCPDecTranslationResult_isLowConfidence(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

char *QuasarCPDecTranslationResult_string(quasar::TranslationPhrase *a1)
{
  char *v1;
  char *v2;
  char *__s1[2];
  char v5;

  quasar::TranslationPhrase::convertTokensToString((uint64_t *)__s1, a1);
  if ((v5 & 0x80000000) == 0)
    return strdup((const char *)__s1);
  v2 = __s1[0];
  v1 = strdup(__s1[0]);
  operator delete(v2);
  return v1;
}

uint64_t QuasarCPDecTranslationResult_numberOfTokens(uint64_t a1)
{
  return 954437177 * ((*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3);
}

float QuasarCPDecTranslationResult_tokenScore(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  std::logic_error *exception;

  if ((a2 & 0x80000000) != 0
    || (v2 = *(_QWORD *)(a1 + 16), 0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 24) - v2) >> 3) <= a2))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "tokenScore: tokenIndex argument is out of range");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5CFD1B8, MEMORY[0x1E0DE42E0]);
  }
  return *(float *)(v2 + 72 * a2 + 60);
}

void sub_1ADD8E278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25)
{
  quasar *v25;
  uint64_t v26;
  const char *v27;
  size_t v28;
  NSObject *v29;

  if (a2 == 1)
  {
    v25 = (quasar *)__cxa_begin_catch(exception_object);
    v26 = (uint64_t)v25;
    if (quasar::gLogLevel >= 1)
    {
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      a9 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
      v27 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
      v28 = strlen(v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a9, (uint64_t)v27, v28);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
    }
    v29 = quasar::QuasarCLogger(v25);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
      QuasarCPDecTranslator_new_cold_1(v26);
    __cxa_end_catch();
    JUMPOUT(0x1ADD8E220);
  }
  _Unwind_Resume(exception_object);
}

char *QuasarCPDecTranslationResult_tokenString(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  __int128 *v3;
  __int128 v4;
  char *v5;
  void *v6;
  std::logic_error *exception;
  std::string __s1[11];

  if ((a2 & 0x80000000) != 0
    || (v2 = *(_QWORD *)(a1 + 16), 0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 24) - v2) >> 3) <= a2))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "tokenString: tokenIndex argument is out of range");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E5CFD1B8, MEMORY[0x1E0DE42E0]);
  }
  v3 = (__int128 *)(v2 + 72 * a2);
  if (*((char *)v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(__s1, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *v3;
    __s1[0].__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
    *(_OWORD *)&__s1[0].__r_.__value_.__l.__data_ = v4;
  }
  if ((SHIBYTE(__s1[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return strdup((const char *)__s1);
  v6 = (void *)__s1[0].__r_.__value_.__r.__words[0];
  v5 = strdup(__s1[0].__r_.__value_.__l.__data_);
  operator delete(v6);
  return v5;
}

void sub_1ADD8E474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25)
{
  quasar *v25;
  uint64_t v26;
  const char *v27;
  size_t v28;
  NSObject *v29;

  if (a2 == 1)
  {
    v25 = (quasar *)__cxa_begin_catch(exception_object);
    v26 = (uint64_t)v25;
    if (quasar::gLogLevel >= 1)
    {
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      a9 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
      v27 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
      v28 = strlen(v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a9, (uint64_t)v27, v28);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
    }
    v29 = quasar::QuasarCLogger(v25);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
      QuasarCPDecTranslator_new_cold_1(v26);
    __cxa_end_catch();
    JUMPOUT(0x1ADD8E418);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<quasar::TranslationPhrase>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::allocator<quasar::TranslationPhrase>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::TranslationPhrase>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  if (*(_BYTE *)(a2 + 120))
  {
    v3 = (void **)(a2 + 96);
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (*(_BYTE *)(a2 + 88) && *(char *)(a2 + 87) < 0)
    operator delete(*(void **)(a2 + 64));
  if (*(char *)(a2 + 63) < 0)
    operator delete(*(void **)(a2 + 40));
  v3 = (void **)(a2 + 16);
  std::vector<quasar::TranslationToken>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<quasar::TranslationPhrase>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<quasar::TranslationPhrase>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<quasar::TranslationPhrase>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::vector<quasar::TranslationToken>::__push_back_slow_path<quasar::TranslationToken>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void *v16[5];

  v3 = *a1;
  v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1C71C71C71C71C7)
    v9 = 0x38E38E38E38E38ELL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[72 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[72 * v9];
  v12 = *a2;
  *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v11 = v12;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *((_WORD *)v11 + 12) = *((_WORD *)a2 + 12);
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = a2[2];
  *((_QWORD *)v11 + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  v13 = *((_QWORD *)a2 + 7);
  *((_DWORD *)v11 + 16) = *((_DWORD *)a2 + 16);
  *((_QWORD *)v11 + 7) = v13;
  v16[2] = v11 + 72;
  std::vector<quasar::TranslationToken>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<quasar::TranslationToken>::~__split_buffer(v16);
  return v14;
}

void sub_1ADD8E840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TranslationToken>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 7) = 0;
    v13 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<quasar::TranslationPhrase>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<quasar::TranslationPhrase>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::vector<quasar::TranslationPhrase>::__assign_with_size[abi:ne180100]<quasar::TranslationPhrase const*,quasar::TranslationPhrase const*>(uint64_t a1, quasar::TranslationPhrase *a2, quasar::TranslationPhrase *a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  quasar::TranslationPhrase *v12;
  quasar::TranslationPhrase *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<quasar::TranslationPhrase>::__vdeallocate((void **)a1);
    if (a4 > 0x1E1E1E1E1E1E1E1)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0xF0F0F0F0F0F0F0)
      v11 = 0x1E1E1E1E1E1E1E1;
    else
      v11 = v10;
    std::vector<quasar::TranslationTokenInternal>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhrase>,quasar::TranslationPhrase const*,quasar::TranslationPhrase const*,quasar::TranslationPhrase*>(v8, a2, a3, *(quasar::TranslationPhrase **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (quasar::TranslationPhrase *)((char *)a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::TranslationPhrase const*,quasar::TranslationPhrase const*,quasar::TranslationPhrase*>((uint64_t)&v17, (uint64_t)a2, (uint64_t)v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhrase>,quasar::TranslationPhrase const*,quasar::TranslationPhrase const*,quasar::TranslationPhrase*>(v8, v13, a3, *(quasar::TranslationPhrase **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::TranslationPhrase const*,quasar::TranslationPhrase const*,quasar::TranslationPhrase*>((uint64_t)&v18, (uint64_t)a2, (uint64_t)a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 136;
      std::allocator<quasar::TranslationPhrase>::destroy[abi:ne180100](v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1ADD8EACC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADD8EAD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<quasar::TranslationPhrase>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 136;
        std::allocator<quasar::TranslationPhrase>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

quasar::TranslationPhrase *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhrase>,quasar::TranslationPhrase const*,quasar::TranslationPhrase const*,quasar::TranslationPhrase*>(uint64_t a1, quasar::TranslationPhrase *a2, quasar::TranslationPhrase *a3, quasar::TranslationPhrase *this)
{
  quasar::TranslationPhrase *v4;
  const quasar::TranslationPhrase *v6;
  _QWORD v8[3];
  char v9;
  quasar::TranslationPhrase *v10;
  quasar::TranslationPhrase *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      quasar::TranslationPhrase::TranslationPhrase(v4, v6);
      v6 = (const quasar::TranslationPhrase *)((char *)v6 + 136);
      v4 = (quasar::TranslationPhrase *)((char *)v11 + 136);
      v11 = (quasar::TranslationPhrase *)((char *)v11 + 136);
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationPhrase>,quasar::TranslationPhrase*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADD8EBD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationPhrase>,quasar::TranslationPhrase*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationPhrase>,quasar::TranslationPhrase*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationPhrase>,quasar::TranslationPhrase*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationPhrase>,quasar::TranslationPhrase*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 136;
      std::allocator<quasar::TranslationPhrase>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::TranslationPhrase const*,quasar::TranslationPhrase const*,quasar::TranslationPhrase*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 == a3)
    return a2;
  v5 = a3;
  v6 = a2 + 24;
  do
  {
    v8 = v6 - 24;
    v7 = *(_QWORD *)(v6 - 24);
    *(_BYTE *)(a4 + 8) = *(_BYTE *)(v6 - 16);
    *(_QWORD *)a4 = v7;
    if (a4 != v6 - 24)
      std::vector<quasar::TranslationToken>::__assign_with_size[abi:ne180100]<quasar::TranslationToken*,quasar::TranslationToken*>(a4 + 16, *(std::string **)(v6 - 8), *(__int128 **)v6, 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)v6 - *(_QWORD *)(v6 - 8)) >> 3));
    std::string::operator=((std::string *)(a4 + 40), (const std::string *)(v6 + 16));
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(a4 + 64), (const std::string *)(v6 + 40));
    std::__optional_storage_base<std::vector<quasar::AlternativeSelectionSpan>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::vector<quasar::AlternativeSelectionSpan>,false> const&>(a4 + 96, v6 + 72);
    *(_WORD *)(a4 + 128) = *(_WORD *)(v6 + 104);
    a4 += 136;
    v6 += 136;
  }
  while (v8 + 136 != v5);
  return v5;
}

uint64_t kaldi::quasar::BNNSGraphNetworkConfig::BNNSGraphNetworkConfig(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = &off_1E5D33AC8;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 40) = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 64) = v6;
  }
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 88), "main");
  *(_WORD *)(a1 + 112) = 1;
  *(_BYTE *)(a1 + 114) = 0;
  *(_DWORD *)(a1 + 116) = 0;
  *(_WORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  return a1;
}

void sub_1ADD8EE0C(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[63] < 0)
    operator delete(*v2);
  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf((kaldi::quasar::ComputeEngineConfigItf *)v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::BNNSGraphNetworkConfig::Read(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t *v4;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  size_t v13;
  unsigned __int8 *v14;
  void **v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  void **v23;
  void *v24;
  size_t v25;
  void *v26;
  uint64_t v27;
  void *v29;
  uint64_t v30;
  BOOL v31;
  char *v32;
  void *v33;
  uint64_t v34;
  BOOL v35;
  void *v36;
  void *v37;
  void *v38;
  int v39;
  void *v43;
  void *v44;
  uint64_t v45;
  BOOL v47;
  void *v48;
  void *v49;
  int v50;
  BOOL v52;
  void *v53;
  void *v54;
  int v55;
  void *v58;
  void *v59;
  void *v60;
  BOOL v62;
  void *v63;
  void *v64;
  int v65;
  BOOL v67;
  _QWORD *v68;
  void **v69;
  uint64_t v70;
  std::vector<std::pair<std::string, std::string>> *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  std::string __p[11];
  void *v79;
  size_t v80;
  uint64_t v81;

  v4 = a2 + 4;
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) == 0)
  {
    v8 = (char *)(a1 + 152);
    v76 = (char *)(a1 + 120);
    v77 = (char *)(a1 + 121);
    v71 = (std::vector<std::pair<std::string, std::string>> *)(a1 + 128);
    v72 = a1 + 116;
    v9 = (char *)(a1 + 113);
    v73 = (char *)(a1 + 112);
    v74 = a1 + 88;
    v75 = (char *)(a1 + 114);
    while (1)
    {
      v79 = 0;
      v80 = 0;
      v81 = 0;
      kaldi::ReadToken(a2, a3, (uint64_t)&v79);
      v10 = *(unsigned __int8 *)(a4 + 23);
      v11 = (char)v10;
      if ((v10 & 0x80u) != 0)
        v10 = *(_QWORD *)(a4 + 8);
      v12 = HIBYTE(v81);
      if (!v10 || (v81 >= 0 ? (v13 = HIBYTE(v81)) : (v13 = v80), v13 != v10))
      {
LABEL_21:
        if ((v81 & 0x8000000000000000) == 0)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          v21 = 0;
          v22 = 0;
          v23 = &v79;
          switch(HIBYTE(v81))
          {
            case 0xB:
              goto LABEL_47;
            case 0xE:
              goto LABEL_26;
            case 0x11:
              goto LABEL_80;
            case 0x13:
              goto LABEL_69;
            case 0x14:
              goto LABEL_127;
            case 0x18:
              goto LABEL_114;
            case 0x19:
              goto LABEL_55;
            default:
              goto LABEL_141;
          }
        }
        goto LABEL_24;
      }
      v14 = v11 >= 0 ? (unsigned __int8 *)a4 : *(unsigned __int8 **)a4;
      if (v81 < 0)
        break;
      if (!HIBYTE(v81))
        return;
      v15 = &v79;
      v16 = HIBYTE(v81);
      do
      {
        if (*(unsigned __int8 *)v15 != *v14)
          goto LABEL_21;
        v15 = (void **)((char *)v15 + 1);
        ++v14;
        --v16;
      }
      while (v16);
      v17 = 0;
      if ((v81 & 0x8000000000000000) == 0)
      {
LABEL_137:
        if (!v17)
          return;
        goto LABEL_138;
      }
LABEL_19:
      operator delete(v79);
      if ((v17 & 1) == 0)
        return;
LABEL_138:
      if ((*((_BYTE *)v4 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
        return;
    }
    v24 = v79;
    if (!memcmp(v79, v14, v80))
    {
      operator delete(v24);
      return;
    }
LABEL_24:
    v25 = v80;
    if (v80 == 14)
    {
      v18 = 1;
      v23 = (void **)v79;
LABEL_26:
      v26 = *v23;
      v27 = *(uint64_t *)((char *)v23 + 6);
      if (v26 == (void *)0x6F6974636E75463CLL && v27 == 0x3E656D614E6E6F69)
      {
        kaldi::ReadToken(a2, a3, v74);
        goto LABEL_136;
      }
      if (!v18)
      {
        v23 = &v79;
        if (v12 == 11)
        {
          v19 = 0;
          goto LABEL_47;
        }
        if (v12 != 14)
          goto LABEL_141;
        goto LABEL_36;
      }
      v25 = v80;
      if (v80 == 14)
      {
        v23 = (void **)v79;
LABEL_36:
        v29 = *v23;
        v30 = *(uint64_t *)((char *)v23 + 6);
        v31 = v29 == (void *)0x54656C676E69533CLL && v30 == 0x3E64616572685465;
        v32 = v73;
        if (v31)
          goto LABEL_135;
        if (!v18)
        {
          if (v12 != 11)
            goto LABEL_141;
          v19 = 0;
          v23 = &v79;
          goto LABEL_47;
        }
        v25 = v80;
      }
    }
    if (v25 != 11)
      goto LABEL_53;
    v19 = 1;
    v23 = (void **)v79;
LABEL_47:
    v33 = *v23;
    v34 = *(uint64_t *)((char *)v23 + 3);
    v35 = v33 == (void *)0x6E4967756265443CLL && v34 == 0x3E6F666E49677562;
    v32 = v9;
    if (v35)
      goto LABEL_135;
    if (!v19)
      goto LABEL_141;
    v25 = v80;
LABEL_53:
    if (v25 == 25)
    {
      v20 = 1;
      v23 = (void **)v79;
LABEL_55:
      v36 = *v23;
      v37 = v23[1];
      v38 = v23[2];
      v39 = *((unsigned __int8 *)v23 + 24);
      if (v36 == (void *)0x696665646572503CLL
        && v37 == (void *)0x6D6974704F64656ELL
        && v38 == (void *)0x736E6F6974617A69
        && v39 == 62)
      {
        kaldi::ReadBasicType<unsigned int>(a2, a3, v72);
        goto LABEL_136;
      }
      if (!v20)
      {
        v21 = 0;
        v22 = 0;
        v23 = &v79;
        switch(v12)
        {
          case 17:
            goto LABEL_80;
          case 19:
            goto LABEL_69;
          case 20:
            goto LABEL_127;
          case 24:
            goto LABEL_114;
          default:
            goto LABEL_141;
        }
      }
      v25 = v80;
    }
    if (v25 == 19)
    {
      v21 = 1;
      v23 = (void **)v79;
LABEL_69:
      v43 = *v23;
      v44 = v23[1];
      v45 = *(uint64_t *)((char *)v23 + 11);
      v47 = v43 == (void *)0x7A696D6974704F3CLL && v44 == (void *)0x69535249726F4665 && v45 == 0x3E657A6953524972;
      v32 = v76;
      if (v47)
        goto LABEL_135;
      if (!v21)
      {
        v22 = 0;
        v23 = &v79;
        if (v12 != 17)
        {
          if (v12 == 20)
            goto LABEL_127;
          if (v12 != 24)
            goto LABEL_141;
          goto LABEL_114;
        }
        goto LABEL_80;
      }
      v25 = v80;
    }
    if (v25 != 17)
      goto LABEL_106;
    v22 = 1;
    v23 = (void **)v79;
LABEL_80:
    v48 = *v23;
    v49 = v23[1];
    v50 = *((unsigned __int8 *)v23 + 16);
    v52 = v48 == (void *)0x65766E6F4370553CLL && v49 == (void *)0x323370466F547472 && v50 == 62;
    v32 = v75;
    if (v52)
      goto LABEL_135;
    if (!v22)
    {
      v23 = &v79;
      if (v12 != 17)
      {
LABEL_111:
        if (v12 == 20)
          goto LABEL_127;
        if (v12 != 24)
          goto LABEL_141;
        v22 = 0;
LABEL_114:
        v58 = *v23;
        v59 = v23[1];
        v60 = v23[2];
        v62 = v58 == (void *)0x656C69706D6F433CLL
           && v59 == (void *)0x5374756F68746957
           && v60 == (void *)0x3E5249676E697661;
        v32 = v77;
        if (!v62)
        {
          if (!v22)
          {
            if (v12 != 20)
              goto LABEL_141;
            v23 = &v79;
            goto LABEL_127;
          }
          v25 = v80;
          goto LABEL_123;
        }
LABEL_135:
        kaldi::ReadBasicType<BOOL>(a2, a3, v32);
        goto LABEL_136;
      }
LABEL_97:
      v53 = *v23;
      v54 = v23[1];
      v55 = *((unsigned __int8 *)v23 + 16);
      if (v53 == (void *)0x416465726168533CLL && v54 == (void *)0x4F49737365726464 && v55 == 62)
      {
        memset(__p, 0, 24);
        kaldi::ReadToken(a2, a3, (uint64_t)__p);
        kaldi::SplitStringToStringPair(__p, "|", v71);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_136:
        std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
        v17 = 1;
        if ((v81 & 0x8000000000000000) == 0)
          goto LABEL_137;
        goto LABEL_19;
      }
      if (v22)
      {
        v25 = v80;
        goto LABEL_106;
      }
      v23 = &v79;
      goto LABEL_111;
    }
    v25 = v80;
    if (v80 == 17)
    {
      v23 = (void **)v79;
      goto LABEL_97;
    }
LABEL_106:
    if (v25 != 24)
    {
LABEL_123:
      if (v25 != 20)
        goto LABEL_141;
      v23 = (void **)v79;
LABEL_127:
      v63 = *v23;
      v64 = v23[1];
      v65 = *((_DWORD *)v23 + 4);
      v67 = v63 == (void *)0x63696D616E79443CLL && v64 == (void *)0x6E49646570616853 && v65 == 1047819632;
      v32 = v8;
      if (!v67)
      {
LABEL_141:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown BNNS Graph configuration: ", 34);
        if (v81 >= 0)
          v69 = &v79;
        else
          v69 = (void **)v79;
        if (v81 >= 0)
          v70 = HIBYTE(v81);
        else
          v70 = v80;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)v69, v70);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      goto LABEL_135;
    }
    v22 = 1;
    v23 = (void **)v79;
    goto LABEL_114;
  }
}

void sub_1ADD8F4C4()
{
  JUMPOUT(0x1ADD8F4CCLL);
}

kaldi::quasar::BNNSGraphNetworkPlan *kaldi::quasar::BNNSGraphNetworkConfig::CreateComputeEngine@<X0>(kaldi::quasar::BNNSGraphNetworkConfig *this@<X0>, kaldi::quasar::BNNSGraphNetworkPlan **a2@<X8>)
{
  kaldi::quasar::BNNSGraphNetworkPlan *v4;
  kaldi::quasar::BNNSGraphNetworkPlan *result;

  v4 = (kaldi::quasar::BNNSGraphNetworkPlan *)operator new();
  result = kaldi::quasar::BNNSGraphNetworkPlan::BNNSGraphNetworkPlan(v4, this);
  *a2 = v4;
  return result;
}

void sub_1ADD8F534(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C4049B2BEB8);
  _Unwind_Resume(a1);
}

void kaldi::quasar::BNNSGraphNetworkConfig::CompiledBNNSGraph(kaldi::quasar::BNNSGraphNetworkConfig *this@<X0>, uint64_t a2@<X8>)
{
  kaldi::quasar *v4;
  uint64_t v5;
  uint64_t i;
  size_t v7;
  std::string *v8;
  char *v9;
  uint32_t v10;
  std::string *v11;
  std::string::size_type size;
  std::string *v13;
  void *v14;
  unsigned __int8 v15;
  _QWORD *v16;
  void **v17;
  uint64_t v18;
  const std::__fs::filesystem::path *v19;
  std::string *v20;
  unsigned __int8 v21;
  _QWORD *v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  BOOL v26;
  char v27;
  _QWORD *v28;
  std::string *v29;
  std::string::size_type v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  _QWORD *v35;
  size_t v36;
  _QWORD *v37;
  _QWORD *v38;
  int *v39;
  char *v40;
  size_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  size_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  void *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  int v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  std::error_code *v57;
  int v58;
  const std::__fs::filesystem::path *p_p;
  char *v60;
  _QWORD *v61;
  int v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  std::string *v75;
  std::string::size_type v76;
  _QWORD *v77;
  _QWORD *v78;
  std::string *v79;
  std::string::size_type v80;
  std::error_code v81;
  std::string v82;
  std::random_device v83;
  void *__p;
  _BYTE v85[15];
  unsigned __int8 v86;
  std::string v87;
  std::string v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  BNNSGraphCompileOptionsMakeDefault();
  BNNSGraphCompileOptionsSetTargetSingleThread();
  BNNSGraphCompileOptionsSetGenerateDebugInfo();
  v4 = (kaldi::quasar *)BNNSGraphCompileOptionsSetPredefinedOptimizations();
  if (*((_BYTE *)this + 120))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"Set IR size optimization preference", 35);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v87);
    }
    v4 = (kaldi::quasar *)BNNSGraphCompileOptionsSetOptimizationPreference();
  }
  if (*((_BYTE *)this + 114) || kaldi::quasar::isDeviceFp32Compute(v4))
    BNNSGraphCompileOptionsSetUpconvertMode();
  v5 = *((_QWORD *)this + 16);
  for (i = *((_QWORD *)this + 17); v5 != i; v5 += 48)
    BNNSGraphCompileOptionShareIOPointer();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  if (!*((_BYTE *)this + 121))
  {
    if (*((char *)this + 87) < 0)
    {
      if (!*((_QWORD *)this + 9))
        goto LABEL_86;
    }
    else if (!*((_BYTE *)this + 87))
    {
      goto LABEL_86;
    }
    std::random_device::random_device[abi:ne180100](&v83);
    if (*((char *)this + 87) >= 0)
      v7 = *((unsigned __int8 *)this + 87);
    else
      v7 = *((_QWORD *)this + 9);
    v8 = &v87;
    std::string::basic_string[abi:ne180100]((uint64_t)&v87, v7 + 1);
    if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v8 = (std::string *)v87.__r_.__value_.__r.__words[0];
    if (v7)
    {
      if (*((char *)this + 87) >= 0)
        v9 = (char *)this + 64;
      else
        v9 = (char *)*((_QWORD *)this + 8);
      memmove(v8, v9, v7);
    }
    *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + v7) = 46;
    v10 = arc4random();
    std::to_string(&v82, v10);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v82;
    else
      v11 = (std::string *)v82.__r_.__value_.__r.__words[0];
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v82.__r_.__value_.__r.__words[2]);
    else
      size = v82.__r_.__value_.__l.__size_;
    v13 = std::string::append(&v87, (const std::string::value_type *)v11, size);
    v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v88.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if ((char)v86 < 0)
      operator delete(__p);
    __p = v14;
    *(_QWORD *)v85 = v88.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v85[7] = *(std::string::size_type *)((char *)v88.__r_.__value_.__r.__words + 7);
    v86 = v15;
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v87.__r_.__value_.__l.__data_);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"Using temp BNNSIR path: ", 24);
      v17 = (v86 & 0x80u) == 0 ? &__p : (void **)__p;
      v18 = (v86 & 0x80u) == 0 ? v86 : *(_QWORD *)v85;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v87);
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"Enabling BNNSIR atomic write", 28);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v87);
      }
    }
    BNNSGraphCompileOptionsSetFileWriteFSyncBarrier();
    v19 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v88, (char *)this + 64);
    std::__fs::filesystem::path::parent_path[abi:ne180100](v19, (uint64_t)&v87);
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v82, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v87.__r_.__value_.__l.__data_);
    }
    else
    {
      v82 = v87;
    }
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v88.__r_.__value_.__l.__data_);
    v20 = &v82;
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v20 = (std::string *)v82.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v81.__val_ = v20;
    std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v87, (char **)&v81);
    std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&v87, 0);
    v21 = v88.__r_.__value_.__s.__data_[0];
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v87.__r_.__value_.__l.__data_);
    if (v21 == 255 || !v21)
    {
      v81.__val_ = 0;
      v81.__cat_ = std::system_category();
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"Creating base folder for bnnsIr: ", 33);
        if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v23 = &v82;
        else
          v23 = (std::string *)v82.__r_.__value_.__r.__words[0];
        if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v24 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
        else
          v24 = v82.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v87);
      }
      v25 = &v82;
      if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v25 = (std::string *)v82.__r_.__value_.__r.__words[0];
      v88.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
      std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v87, &v88.__r_.__value_.__l.__data_);
      v26 = std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)&v87, &v81);
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v87.__r_.__value_.__l.__data_);
      v27 = kaldi::g_kaldi_verbose_level < 0 || v26;
      if ((v27 & 1) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"creation for bnnsIr base directory not successful with err: ", 60);
        std::error_code::message(&v88, &v81);
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v29 = &v88;
        else
          v29 = (std::string *)v88.__r_.__value_.__r.__words[0];
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
        else
          v30 = v88.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v87);
      }
    }
    BNNSGraphCompileOptionsSetOutputPathWithPermissionsAndProtectionClass();
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
    std::random_device::~random_device(&v83);
  }
LABEL_86:
  if ((_get_cpu_capabilities() & 0x78000000) == 0x8000000)
    BNNSGraphCompileOptionsSetTarget();
  std::string::basic_string[abi:ne180100]<0>(&v82, "");
  *(_QWORD *)&v81.__val_ = 0;
  v81.__cat_ = (const std::error_category *)&v82;
  BNNSGraphCompileOptionsSetMessageLogMask();
  BNNSGraphCompileOptionsSetMessageLogCallback();
  v32 = BNNSGraphCompileFromFile_v2();
  if (!v32 || (v33 = v31) == 0)
  {
    v58 = *__error();
    if ((char)v86 < 0)
    {
      if (!*(_QWORD *)v85)
        goto LABEL_135;
      p_p = (const std::__fs::filesystem::path *)__p;
    }
    else
    {
      if (!v86)
        goto LABEL_135;
      p_p = (const std::__fs::filesystem::path *)&__p;
    }
    remove(p_p, v57);
LABEL_135:
    v60 = strerror(v58);
    std::string::basic_string[abi:ne180100]<0>(&v88, v60);
    BNNSGraphCompileOptionsDestroy();
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
    v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"Failed to compile MIL: ", 23);
    v62 = *((char *)this + 63);
    if (v62 >= 0)
      v63 = (char *)this + 40;
    else
      v63 = (char *)*((_QWORD *)this + 5);
    if (v62 >= 0)
      v64 = *((unsigned __int8 *)this + 63);
    else
      v64 = *((_QWORD *)this + 6);
    v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v63, v64);
    v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" to BNNS IR: ", 13);
    v69 = *((_QWORD *)this + 8);
    v68 = (char *)this + 64;
    v67 = v69;
    v70 = v68[23];
    if (v70 >= 0)
      v71 = (uint64_t)v68;
    else
      v71 = v67;
    if (v70 >= 0)
      v72 = v68[23];
    else
      v72 = *((_QWORD *)v68 + 1);
    v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, v71, v72);
    v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" no graph, errno error: ", 24);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v75 = &v88;
    else
      v75 = (std::string *)v88.__r_.__value_.__r.__words[0];
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v76 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    else
      v76 = v88.__r_.__value_.__l.__size_;
    v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)v75, v76);
    v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)", bnns error message: ", 22);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v79 = &v82;
    else
      v79 = (std::string *)v82.__r_.__value_.__r.__words[0];
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v80 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
    else
      v80 = v82.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)v79, v80);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v87);
  }
  if (*((_BYTE *)this + 121))
  {
    BNNSGraphCompileOptionsDestroy();
    *(_QWORD *)a2 = v32;
    *(_QWORD *)(a2 + 8) = v33;
    *(_BYTE *)(a2 + 16) = 0;
    goto LABEL_124;
  }
  BNNSGraphCompileOptionsDestroy();
  if ((char)v86 < 0)
  {
    if (*(_QWORD *)v85)
    {
      v34 = (const char *)__p;
LABEL_97:
      v88.__r_.__value_.__r.__words[0] = 67589;
      if (fsctl(v34, 0xC0084A44uLL, &v88, 0))
      {
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
          v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"Fail to mark ", 13);
          v36 = strlen(v34);
          v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v34, v36);
          v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"as purgeable: error: ", 21);
          v39 = __error();
          v40 = strerror(*v39);
          v41 = strlen(v40);
          v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v40, v41);
          v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" flags: 0x", 10);
          *(_DWORD *)((char *)v43 + *(_QWORD *)(*v43 - 24) + 8) = *(_DWORD *)((_BYTE *)v43
                                                                              + *(_QWORD *)(*v43 - 24)
                                                                              + 8) & 0xFFFFFFB5 | 8;
          std::ostream::operator<<();
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
          goto LABEL_102;
        }
      }
      else if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
        v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"Marked ", 7);
        v45 = strlen(v34);
        v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v34, v45);
        v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" as purgeable: flags: 0x", 24);
        *(_DWORD *)((char *)v47 + *(_QWORD *)(*v47 - 24) + 8) = *(_DWORD *)((_BYTE *)v47 + *(_QWORD *)(*v47 - 24)
                                                                                           + 8) & 0xFFFFFFB5 | 8;
        std::ostream::operator<<();
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v87);
LABEL_102:
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v87);
          v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v87, (uint64_t)"Moving compiled BNNSIR from ", 28);
          if ((v86 & 0x80u) == 0)
            v49 = &__p;
          else
            v49 = __p;
          if ((v86 & 0x80u) == 0)
            v50 = v86;
          else
            v50 = *(_QWORD *)v85;
          v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v49, v50);
          v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" to ", 4);
          v53 = *((char *)this + 87);
          if (v53 >= 0)
            v54 = (char *)this + 64;
          else
            v54 = (char *)*((_QWORD *)this + 8);
          if (v53 >= 0)
            v55 = *((unsigned __int8 *)this + 87);
          else
            v55 = *((_QWORD *)this + 9);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v54, v55);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v87);
        }
      }
      std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v87, (char *)&__p);
      std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v88, (char *)this + 64);
      std::__fs::filesystem::__rename((const std::__fs::filesystem::path *)&v87, (const std::__fs::filesystem::path *)&v88, 0);
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v87.__r_.__value_.__l.__data_);
    }
  }
  else if (v86)
  {
    v34 = (const char *)&__p;
    goto LABEL_97;
  }
  if (*((char *)this + 87) < 0)
    v56 = *((_QWORD *)this + 9);
  else
    v56 = *((unsigned __int8 *)this + 87);
  *(_QWORD *)a2 = v32;
  *(_QWORD *)(a2 + 8) = v33;
  *(_BYTE *)(a2 + 16) = v56 != 0;
LABEL_124:
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  if ((char)v86 < 0)
    operator delete(__p);
}

void sub_1ADD8FF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, int a18, std::random_device a19, std::random_device a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void *kaldi::quasar::BNNSGraphNetworkConfig::MapBNNSIRFile(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int *v10;
  char *v11;
  size_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int *v19;
  char *v20;
  size_t v21;
  void *v22;
  off_t st_size;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  int *v31;
  char *v32;
  size_t v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  int *v40;
  char *v41;
  size_t v42;
  stat v43;
  _QWORD v44[34];

  v1 = a1;
  if (*(char *)(a1 + 23) < 0)
    a1 = *(_QWORD *)a1;
  v2 = open((const char *)a1, 0);
  if (v2 == -1)
  {
    if (kaldi::g_kaldi_verbose_level < 0)
      return 0;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Could not read open() BNNSIR: ", 30);
    v14 = *(char *)(v1 + 23);
    if (v14 >= 0)
      v15 = v1;
    else
      v15 = *(_QWORD *)v1;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(v1 + 23);
    else
      v16 = *(_QWORD *)(v1 + 8);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)": ", 2);
    v19 = __error();
    v20 = strerror(*v19);
    v21 = strlen(v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v20, v21);
LABEL_22:
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v44);
    return 0;
  }
  v3 = v2;
  if (fstat(v2, &v43))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
      v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Could not fstat() BNNSIR: ", 26);
      v5 = *(char *)(v1 + 23);
      if (v5 >= 0)
        v6 = v1;
      else
        v6 = *(_QWORD *)v1;
      if (v5 >= 0)
        v7 = *(unsigned __int8 *)(v1 + 23);
      else
        v7 = *(_QWORD *)(v1 + 8);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)": ", 2);
      v10 = __error();
      v11 = strerror(*v10);
      v12 = strlen(v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v44);
    }
    close(v3);
    return 0;
  }
  st_size = v43.st_size;
  v22 = mmap(0, v43.st_size, 1, 1, v3, 0);
  close(v3);
  if (v22 == (void *)-1)
  {
    if (kaldi::g_kaldi_verbose_level < 0)
      return 0;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Could not mmap() BNNSIR: ", 25);
    v35 = *(char *)(v1 + 23);
    if (v35 >= 0)
      v36 = v1;
    else
      v36 = *(_QWORD *)v1;
    if (v35 >= 0)
      v37 = *(unsigned __int8 *)(v1 + 23);
    else
      v37 = *(_QWORD *)(v1 + 8);
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v36, v37);
    v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)": ", 2);
    v40 = __error();
    v41 = strerror(*v40);
    v42 = strlen(v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v41, v42);
    goto LABEL_22;
  }
  if (BNNSGraphGetWorkspaceSize_v2() != -1)
    return v22;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Could not BNNSGraphGetWorkspaceSize() BNNSIR: ", 46);
    v26 = *(char *)(v1 + 23);
    if (v26 >= 0)
      v27 = v1;
    else
      v27 = *(_QWORD *)v1;
    if (v26 >= 0)
      v28 = *(unsigned __int8 *)(v1 + 23);
    else
      v28 = *(_QWORD *)(v1 + 8);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)": ", 2);
    v31 = __error();
    v32 = strerror(*v31);
    v33 = strlen(v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v32, v33);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v44);
  }
  munmap(v22, st_size);
  return 0;
}

void sub_1ADD90428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a27);
  _Unwind_Resume(a1);
}

kaldi::quasar::BNNSGraphNetworkPlan *kaldi::quasar::BNNSGraphNetworkPlan::BNNSGraphNetworkPlan(kaldi::quasar::BNNSGraphNetworkPlan *this, const kaldi::quasar::BNNSGraphNetworkConfig *a2)
{
  *(_QWORD *)this = &off_1E5D33880;
  kaldi::quasar::BNNSGraphNetworkConfig::BNNSGraphNetworkConfig((kaldi::quasar::BNNSGraphNetworkPlan *)((char *)this + 8), a2);
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 26) = (char *)this + 216;
  *((_QWORD *)this + 28) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_BYTE *)this + 200) = 0;
  kaldi::quasar::BNNSGraphNetworkPlan::CompileAndLoadGraph(this);
  return this;
}

void sub_1ADD904B4(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  void **v2;
  uint64_t v3;
  _QWORD **v4;
  uint64_t v5;

  v5 = v3;
  std::__tree<int>::destroy(v5, *v4);
  kaldi::quasar::BNNSGraphNetworkConfig::~BNNSGraphNetworkConfig(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::BNNSGraphNetworkPlan::CompileAndLoadGraph(kaldi::quasar::BNNSGraphNetworkPlan *this)
{
  _QWORD *v2;
  int v3;
  char *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  __int128 v12;
  char v13;

  if (*((char *)this + 95) < 0)
  {
    if (!*((_QWORD *)this + 10))
      goto LABEL_16;
  }
  else if (!*((_BYTE *)this + 95))
  {
    goto LABEL_16;
  }
  if (!*((_BYTE *)this + 129))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
      v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"loading model from bnnsIr path: ", 32);
      v3 = *((char *)this + 95);
      if (v3 >= 0)
        v4 = (char *)this + 72;
      else
        v4 = (char *)*((_QWORD *)this + 9);
      if (v3 >= 0)
        v5 = *((unsigned __int8 *)this + 95);
      else
        v5 = *((_QWORD *)this + 10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v12);
    }
    v6 = kaldi::quasar::BNNSGraphNetworkConfig::MapBNNSIRFile((uint64_t)this + 72);
    *((_QWORD *)this + 21) = v6;
    *((_QWORD *)this + 22) = v7;
    if (v6)
      *((_BYTE *)this + 200) = 1;
  }
LABEL_16:
  if (!*((_QWORD *)this + 21))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"No graph is loaded, compiling to bnnsIr", 39);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v12);
    }
    kaldi::quasar::BNNSGraphNetworkConfig::CompiledBNNSGraph((kaldi::quasar::BNNSGraphNetworkPlan *)((char *)this + 8), (uint64_t)&v12);
    *(_OWORD *)((char *)this + 168) = v12;
    *((_BYTE *)this + 200) = v13;
    if (!*((_QWORD *)this + 21))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Could not load or compile ", 26);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, (uint64_t)this + 48);
LABEL_26:
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v12);
    }
  }
  result = BNNSGraphContextMake();
  *((_QWORD *)this + 23) = result;
  *((_QWORD *)this + 24) = v9;
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"BNNSGraphContextCreate failed for ", 34);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, (uint64_t)this + 48);
    goto LABEL_26;
  }
  if (*((_BYTE *)this + 160))
  {
    BNNSGraphContextSetArgumentType();
    BNNSGraphContextSetWorkspaceAllocationCallback_v2();
    return BNNSGraphContextSetOutputAllocationCallback_v2();
  }
  return result;
}

void kaldi::quasar::BNNSGraphNetworkPlan::~BNNSGraphNetworkPlan(kaldi::quasar::BNNSGraphNetworkPlan *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E5D33880;
  BNNSGraphContextDestroy_v2();
  v2 = (void *)*((_QWORD *)this + 21);
  if (!*((_BYTE *)this + 200))
  {
    if (!v2)
      goto LABEL_8;
    free(v2);
    *((_QWORD *)this + 21) = 0;
    *((_QWORD *)this + 22) = 0;
LABEL_6:
    if (!*((_BYTE *)this + 200))
      goto LABEL_8;
    goto LABEL_7;
  }
  if (v2 != (void *)-1)
  {
    munmap(v2, *((_QWORD *)this + 22));
    *((_QWORD *)this + 21) = -1;
    *((_QWORD *)this + 22) = 0;
    goto LABEL_6;
  }
LABEL_7:
  *((_BYTE *)this + 200) = 0;
LABEL_8:
  if (*((_QWORD *)this + 28))
    kaldi::quasar::BNNSGraphNetworkPlan::WorkSpaceFreeCallback((kaldi::quasar::BNNSGraphNetworkPlan **)this + 26, (void *)0x18);
  std::__tree<int>::destroy((uint64_t)this + 208, *((_QWORD **)this + 27));
  kaldi::quasar::BNNSGraphNetworkConfig::~BNNSGraphNetworkConfig((void **)this + 1);
  quasar::Bitmap::~Bitmap(this);
}

{
  kaldi::quasar::BNNSGraphNetworkPlan::~BNNSGraphNetworkPlan(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::quasar::BNNSGraphNetworkPlan::WorkSpaceFreeCallback(kaldi::quasar::BNNSGraphNetworkPlan **this, void *a2)
{
  kaldi::quasar::BNNSGraphNetworkPlan **v3;
  kaldi::quasar::BNNSGraphNetworkPlan *v4;
  kaldi::quasar::BNNSGraphNetworkPlan *v5;
  kaldi::quasar::BNNSGraphNetworkPlan **v6;
  BOOL v7;
  _QWORD v8[34];

  if (a2 != (void *)24)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "sizeof(MemoryCallbackContext) == user_memory_context_size");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  v3 = this + 1;
  v4 = *this;
  if (*this != (kaldi::quasar::BNNSGraphNetworkPlan *)(this + 1))
  {
    do
    {
      munmap(*((void **)v4 + 4), *((_QWORD *)v4 + 6));
      v5 = (kaldi::quasar::BNNSGraphNetworkPlan *)*((_QWORD *)v4 + 1);
      if (v5)
      {
        do
        {
          v6 = (kaldi::quasar::BNNSGraphNetworkPlan **)v5;
          v5 = *(kaldi::quasar::BNNSGraphNetworkPlan **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (kaldi::quasar::BNNSGraphNetworkPlan **)*((_QWORD *)v4 + 2);
          v7 = *v6 == v4;
          v4 = (kaldi::quasar::BNNSGraphNetworkPlan *)v6;
        }
        while (!v7);
      }
      v4 = (kaldi::quasar::BNNSGraphNetworkPlan *)v6;
    }
    while (v6 != v3);
  }
  std::__tree<int>::destroy((uint64_t)this, this[1]);
  this[1] = 0;
  this[2] = 0;
  *this = (kaldi::quasar::BNNSGraphNetworkPlan *)v3;
}

uint64_t kaldi::quasar::BNNSGraphNetworkPlan::WorkSpaceAllocationCallback(uint64_t **this, void *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  char *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  unint64_t v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  unint64_t v18;
  void *v19;
  _QWORD *v21;
  _QWORD *v22;
  int *v23;
  char *v24;
  void *v25;
  uint64_t *v26[34];

  if (!a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v26, "memptr");
    goto LABEL_17;
  }
  if (a2 != (void *)24)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v26, "sizeof(MemoryCallbackContext) == user_memory_context_size");
    goto LABEL_17;
  }
  if (!this)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v26, "space_info != nullptr");
    goto LABEL_17;
  }
  v8 = (char *)(a5 + a4);
  v9 = *a3;
  if (!*a3)
  {
LABEL_21:
    v18 = (unint64_t)&v8[a4 - 1] & -a4;
    v19 = mmap(0, v18 + a4, 3, 4098, -1, 0);
    v25 = v19;
    if (v19 != (void *)-1)
    {
      *a3 = (unint64_t)v19;
      v26[0] = (uint64_t *)&v25;
      std::__tree<std::__value_type<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>,std::__map_value_compare<void *,std::__value_type<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>,std::less<void *>,true>,std::allocator<std::__value_type<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void * const&>,std::tuple<>>(this, (unint64_t *)&v25, (uint64_t)&std::piecewise_construct, v26)[5] = v18;
      v26[0] = (uint64_t *)&v25;
      std::__tree<std::__value_type<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>,std::__map_value_compare<void *,std::__value_type<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>,std::less<void *>,true>,std::allocator<std::__value_type<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void * const&>,std::tuple<>>(this, (unint64_t *)&v25, (uint64_t)&std::piecewise_construct, v26)[6] = v18 + a4;
      mprotect((void *)(*a3 + v18), a4, 0);
      return 0;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Could not mmap ", 15);
    v21 = (_QWORD *)std::ostream::operator<<();
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"bytes: ", 7);
    v23 = __error();
    v24 = strerror(*v23);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, v24);
LABEL_17:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v26);
  }
  v10 = this[1];
  if (!v10)
    goto LABEL_16;
  v11 = this + 1;
  do
  {
    v12 = v10[4];
    v13 = v12 >= v9;
    if (v12 >= v9)
      v14 = (uint64_t **)v10;
    else
      v14 = (uint64_t **)(v10 + 1);
    if (v13)
      v11 = (uint64_t **)v10;
    v10 = *v14;
  }
  while (*v14);
  if (v11 == this + 1 || v9 < (unint64_t)v11[4])
  {
LABEL_16:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v26);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v26, "space_info->find(*memptr) != space_info->end()");
    goto LABEL_17;
  }
  v15 = std::map<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>::at((uint64_t)this, a3);
  v16 = (void *)*a3;
  if (*v15 < (unint64_t)v8)
  {
    v17 = std::map<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>::at((uint64_t)this, a3);
    munmap(v16, v17[1]);
    std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__erase_unique<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>((uint64_t)this, a3);
    *a3 = 0;
    goto LABEL_21;
  }
  if (!v16)
    goto LABEL_21;
  return 0;
}

void sub_1ADD90AF0(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

_QWORD *std::map<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>::at(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
LABEL_8:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = v2[4];
      if (v3 >= v4)
        break;
      v2 = (_QWORD *)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return v2 + 5;
    v2 = (_QWORD *)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

void kaldi::quasar::BNNSGraphNetworkPlan::CreateData(uint64_t a1@<X1>, char a2@<W2>, _QWORD *a3@<X8>)
{
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  void *__p;
  char *v22;
  char *v23;

  __p = 0;
  v22 = 0;
  v23 = 0;
  if ((a2 & 1) != 0)
  {
    v5 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v23, 1uLL);
    v7 = &v5[8 * v6];
    *(_QWORD *)v5 = 1;
    v8 = v5 + 8;
    __p = v5;
    v22 = v5 + 8;
    v23 = v7;
    v22 = v5 + 8;
    v9 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
    if (v8 < v7)
    {
      *((_QWORD *)v5 + 1) = v9;
      v10 = v5 + 16;
      goto LABEL_20;
    }
  }
  else
  {
    v8 = 0;
    v7 = 0;
    v9 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  }
  v11 = (char *)__p;
  v12 = (v8 - (_BYTE *)__p) >> 3;
  v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 61)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v14 = v7 - (_BYTE *)__p;
  if (v14 >> 2 > v13)
    v13 = v14 >> 2;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
    v15 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v15 = v13;
  if (v15)
  {
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v23, v15);
    v11 = (char *)__p;
    v8 = v22;
  }
  else
  {
    v16 = 0;
  }
  v17 = (uint64_t *)&v16[8 * v12];
  v18 = &v16[8 * v15];
  *v17 = v9;
  v10 = (char *)(v17 + 1);
  while (v8 != v11)
  {
    v19 = *((_QWORD *)v8 - 1);
    v8 -= 8;
    *--v17 = v19;
  }
  __p = v17;
  v22 = v10;
  v23 = v18;
  if (v11)
    operator delete(v11);
LABEL_20:
  v22 = v10;
  v20 = (_QWORD *)operator new();
  kaldi::quasar::BNNSGraphData::BNNSGraphData(v20, (uint64_t)&__p, 0);
  kaldi::quasar::BNNSGraphData::CopyFromStdVector<int>((uint64_t)v20, (int **)a1);
  *a3 = v20;
  if (__p)
  {
    v22 = (char *)__p;
    operator delete(__p);
  }
}

{
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  void *__p;
  char *v22;
  char *v23;

  __p = 0;
  v22 = 0;
  v23 = 0;
  if ((a2 & 1) != 0)
  {
    v5 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v23, 1uLL);
    v7 = &v5[8 * v6];
    *(_QWORD *)v5 = 1;
    v8 = v5 + 8;
    __p = v5;
    v22 = v5 + 8;
    v23 = v7;
    v22 = v5 + 8;
    v9 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
    if (v8 < v7)
    {
      *((_QWORD *)v5 + 1) = v9;
      v10 = v5 + 16;
      goto LABEL_20;
    }
  }
  else
  {
    v8 = 0;
    v7 = 0;
    v9 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  }
  v11 = (char *)__p;
  v12 = (v8 - (_BYTE *)__p) >> 3;
  v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 61)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v14 = v7 - (_BYTE *)__p;
  if (v14 >> 2 > v13)
    v13 = v14 >> 2;
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
    v15 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v15 = v13;
  if (v15)
  {
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v23, v15);
    v11 = (char *)__p;
    v8 = v22;
  }
  else
  {
    v16 = 0;
  }
  v17 = (uint64_t *)&v16[8 * v12];
  v18 = &v16[8 * v15];
  *v17 = v9;
  v10 = (char *)(v17 + 1);
  while (v8 != v11)
  {
    v19 = *((_QWORD *)v8 - 1);
    v8 -= 8;
    *--v17 = v19;
  }
  __p = v17;
  v22 = v10;
  v23 = v18;
  if (v11)
    operator delete(v11);
LABEL_20:
  v22 = v10;
  v20 = (_QWORD *)operator new();
  kaldi::quasar::BNNSGraphData::BNNSGraphData(v20, (uint64_t)&__p, 0);
  kaldi::quasar::BNNSGraphData::CopyFromStdVector<float>((uint64_t)v20, (int **)a1);
  *a3 = v20;
  if (__p)
  {
    v22 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1ADD90D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::BNNSGraphData::CopyFromStdVector<int>(uint64_t a1, int **a2)
{
  void **v4;
  int *v5;
  int *v6;
  _QWORD *v7;
  float *v8;
  float v9;
  float *v10;
  float *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  float *v17;
  int v18;
  _QWORD v19[34];

  if (*(_BYTE *)(a1 + 64))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, "CopyFromStdVector(const std::vector<T> &vec) not implemented for fp16");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  if (*(_DWORD *)(a1 + 56))
    std::__throw_bad_variant_access[abi:ne180100]();
  v4 = (void **)(a1 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
  std::vector<float>::reserve((void **)(a1 + 32), a2[1] - *a2);
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    v7 = (_QWORD *)(a1 + 48);
    v8 = *(float **)(a1 + 40);
    do
    {
      v9 = (float)*v5;
      if ((unint64_t)v8 >= *v7)
      {
        v11 = (float *)*v4;
        v12 = ((char *)v8 - (_BYTE *)*v4) >> 2;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v14 = *v7 - (_QWORD)v11;
        if (v14 >> 1 > v13)
          v13 = v14 >> 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 48, v15);
          v11 = *(float **)(a1 + 32);
          v8 = *(float **)(a1 + 40);
        }
        else
        {
          v16 = 0;
        }
        v17 = (float *)&v16[4 * v12];
        *v17 = v9;
        v10 = v17 + 1;
        while (v8 != v11)
        {
          v18 = *((_DWORD *)v8-- - 1);
          *((_DWORD *)v17-- - 1) = v18;
        }
        *(_QWORD *)(a1 + 32) = v17;
        *(_QWORD *)(a1 + 40) = v10;
        *(_QWORD *)(a1 + 48) = &v16[4 * v15];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v8 = v9;
        v10 = v8 + 1;
      }
      *(_QWORD *)(a1 + 40) = v10;
      ++v5;
      v8 = v10;
    }
    while (v5 != v6);
  }
}

void sub_1ADD90EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

void sub_1ADD910CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::BNNSGraphData::CopyFromStdVector<float>(uint64_t a1, int **a2)
{
  void **v4;
  int *v5;
  int *v6;
  _QWORD *v7;
  char *v8;
  int v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  int v18;
  _QWORD v19[34];

  if (*(_BYTE *)(a1 + 64))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, "CopyFromStdVector(const std::vector<T> &vec) not implemented for fp16");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  if (*(_DWORD *)(a1 + 56))
    std::__throw_bad_variant_access[abi:ne180100]();
  v4 = (void **)(a1 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 32);
  std::vector<float>::reserve((void **)(a1 + 32), a2[1] - *a2);
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    v7 = (_QWORD *)(a1 + 48);
    v8 = *(char **)(a1 + 40);
    do
    {
      v9 = *v5;
      if ((unint64_t)v8 >= *v7)
      {
        v11 = (char *)*v4;
        v12 = (v8 - (_BYTE *)*v4) >> 2;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v14 = *v7 - (_QWORD)v11;
        if (v14 >> 1 > v13)
          v13 = v14 >> 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 48, v15);
          v11 = *(char **)(a1 + 32);
          v8 = *(char **)(a1 + 40);
        }
        else
        {
          v16 = 0;
        }
        v17 = &v16[4 * v12];
        *(_DWORD *)v17 = v9;
        v10 = v17 + 4;
        while (v8 != v11)
        {
          v18 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *((_DWORD *)v17 - 1) = v18;
          v17 -= 4;
        }
        *(_QWORD *)(a1 + 32) = v17;
        *(_QWORD *)(a1 + 40) = v10;
        *(_QWORD *)(a1 + 48) = &v16[4 * v15];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *(_DWORD *)v8 = v9;
        v10 = v8 + 4;
      }
      *(_QWORD *)(a1 + 40) = v10;
      ++v5;
      v8 = v10;
    }
    while (v5 != v6);
  }
}

void sub_1ADD912A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

void kaldi::quasar::BNNSGraphNetworkPlan::CreateData(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void *__p;
  void *v9;
  _QWORD *v10;

  v5 = *(int *)(a1 + 16);
  v4 = *(int *)(a1 + 20);
  v6 = operator new(0x10uLL);
  v9 = v6 + 2;
  v10 = v6 + 2;
  *v6 = v4;
  v6[1] = v5;
  __p = v6;
  v7 = (_QWORD *)operator new();
  kaldi::quasar::BNNSGraphData::BNNSGraphData(v7, (uint64_t)&__p, 0);
  kaldi::quasar::BNNSGraphData::CopyFromMatrixT<kaldi::CuMatrixBase<float>>((uint64_t)v7, a1);
  *a2 = v7;
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
}

{
  int v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  void *__p;
  void *v9;
  _QWORD *v10;

  v4 = kaldi::MatrixBase<float>::NumRows(a1);
  v5 = kaldi::MatrixBase<float>::NumCols(a1);
  v6 = operator new(0x10uLL);
  v9 = v6 + 2;
  v10 = v6 + 2;
  *v6 = v4;
  v6[1] = v5;
  __p = v6;
  v7 = (_QWORD *)operator new();
  kaldi::quasar::BNNSGraphData::BNNSGraphData(v7, (uint64_t)&__p, 0);
  kaldi::quasar::BNNSGraphData::CopyFromMatrixT<kaldi::MatrixBase<float>>((uint64_t)v7, a1);
  *a2 = v7;
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
}

void sub_1ADD91344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1ADD91448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::quasar::BNNSGraphNetworkPlan::CreateZeroedDataFloat@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  result = kaldi::quasar::BNNSGraphData::BNNSGraphData(v4, a1, 0);
  *a2 = v4;
  return result;
}

void sub_1ADD914F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1093C40A6484513);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::quasar::BNNSGraphNetworkPlan::CreateZeroedDataInt32@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  result = kaldi::quasar::BNNSGraphData::BNNSGraphData(v4, a1, 0);
  *a2 = v4;
  return result;
}

void sub_1ADD91568(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1093C40A6484513);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::quasar::BNNSGraphNetworkPlan::CreateZeroedDataFloat16@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  result = kaldi::quasar::BNNSGraphData::BNNSGraphData(v4, a1, 1);
  *a2 = v4;
  return result;
}

void sub_1ADD915E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1093C40A6484513);
  _Unwind_Resume(a1);
}

void kaldi::quasar::BNNSGraphNetworkPlan::CreateConcat()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::quasar::BNNSGraphNetworkPlan::CreateSlice(const kaldi::quasar::ComputeEngineBufferItf *lpsrc@<X1>, unsigned int a2@<W2>, int a3@<W3>, uint64_t *a4@<X8>)
{
  kaldi::quasar::BNNSGraphData *v8;
  _QWORD v9[34];

  if (!lpsrc
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "bnns_graph_data");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  kaldi::quasar::BNNSGraphData::Slice(v8, a2, a3, a4);
}

void kaldi::quasar::BNNSGraphData::Slice(kaldi::quasar::BNNSGraphData *this@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *__p;
  void *v14;
  uint64_t v15;

  if ((*(unsigned int (**)(kaldi::quasar::BNNSGraphData *))(*(_QWORD *)this + 144))(this))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "std::unique_ptr<ComputeEngineBufferItf> Slice(int start, int end) not implemented for fp16");
    goto LABEL_16;
  }
  if (*((_DWORD *)this + 14))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&__p, "Slice(int start, int end) fail - data not assigned with std::vector<float>");
LABEL_16:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  v8 = *(_OWORD *)((char *)this + 72);
  v9 = (unint64_t *)*((_QWORD *)this + 9);
  v10 = *v9;
  if (*v9)
  {
    if (!a2 && v10 == a3)
    {
      (*(void (**)(kaldi::quasar::BNNSGraphData *))(*(_QWORD *)this + 16))(this);
      return;
    }
    __p = 0;
    v14 = 0;
    v15 = 0;
    std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(&__p, v9, *((uint64_t *)&v8 + 1), (uint64_t)(*((_QWORD *)&v8 + 1) - (_QWORD)v9) >> 3);
    *(_QWORD *)__p = (int)(a3 - a2);
    v12 = operator new();
    kaldi::quasar::BNNSGraphData::BNNSGraphData((_QWORD *)v12, (uint64_t)&__p, 0);
    if (*(_DWORD *)(v12 + 56))
      std::__throw_bad_variant_access[abi:ne180100]();
    if (*((_DWORD *)this + 14))
      std::__throw_bad_variant_access[abi:ne180100]();
    memcpy(*(void **)(v12 + 32), (const void *)(*((_QWORD *)this + 4)+ 4 * ((uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 2) / v10 * a2), *(_QWORD *)(v12 + 40) - *(_QWORD *)(v12 + 32));
    *a4 = v12;
  }
  else
  {
    __p = 0;
    v14 = 0;
    v15 = 0;
    v11 = (_QWORD *)operator new();
    kaldi::quasar::BNNSGraphData::BNNSGraphData(v11, (uint64_t)&__p, 0);
    *a4 = (uint64_t)v11;
  }
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_1ADD918A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1ADD9190C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

void kaldi::quasar::BNNSGraphNetworkPlan::CreateSplit(const kaldi::quasar::ComputeEngineBufferItf *lpsrc@<X1>, int64x2_t *a2@<X8>)
{
  kaldi::quasar::BNNSGraphData *v4;
  _QWORD v5[34];

  if (!lpsrc
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "bnns_graph_data");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  kaldi::quasar::BNNSGraphData::Split(v4, a2);
}

void kaldi::quasar::BNNSGraphData::Split(kaldi::quasar::BNNSGraphData *this@<X0>, int64x2_t *a2@<X8>)
{
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  unint64_t v13;
  kaldi::quasar::BNNSGraphData *v14;
  void *WritableDataFloat;
  unint64_t v16;
  kaldi::quasar::BNNSGraphData **v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  kaldi::quasar::BNNSGraphData **v24;
  char *v25;
  char *v26;
  char *v27;
  kaldi::quasar::BNNSGraphData *v28;
  int64x2_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  void *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  int64x2_t v42;
  uint64_t v43;
  void *v44;
  void *__p;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  int64x2_t v49;
  char *v50;
  int64x2_t *v51;

  if (*((_BYTE *)this + 64))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v48);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v48, "std::vector<std::unique_ptr<ComputeEngineBufferItf>> Split() not implemented for fp16");
    goto LABEL_48;
  }
  if (*((_DWORD *)this + 14))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v48);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v48, "Split() fail - data not assigned with std::vector<float>");
LABEL_48:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v48);
  }
  v4 = (unint64_t *)*((_QWORD *)this + 9);
  if (*((_QWORD *)this + 10) - (_QWORD)v4 == 8)
  {
    a2->i64[0] = 0;
    a2->i64[1] = 0;
    a2[1].i64[0] = 0;
    (*(void (**)(void **__return_ptr, kaldi::quasar::BNNSGraphData *))(*(_QWORD *)this + 16))(&__p, this);
    v5 = a2[1].u64[0];
    v6 = (_QWORD *)a2->i64[1];
    if ((unint64_t)v6 >= v5)
    {
      v31 = ((uint64_t)v6 - a2->i64[0]) >> 3;
      if ((unint64_t)(v31 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v32 = v5 - a2->i64[0];
      v33 = v32 >> 2;
      if (v32 >> 2 <= (unint64_t)(v31 + 1))
        v33 = v31 + 1;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
        v34 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v34 = v33;
      v51 = a2 + 1;
      if (v34)
        v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)a2[1].i64, v34);
      else
        v35 = 0;
      v36 = &v35[8 * v31];
      v37 = &v35[8 * v34];
      v50 = v37;
      v38 = __p;
      __p = 0;
      *(_QWORD *)v36 = v38;
      v8 = v36 + 8;
      v49.i64[1] = (uint64_t)(v36 + 8);
      v40 = (_QWORD *)a2->i64[0];
      v39 = (_QWORD *)a2->i64[1];
      if (v39 == (_QWORD *)a2->i64[0])
      {
        v42 = vdupq_n_s64((unint64_t)v39);
      }
      else
      {
        do
        {
          v41 = *--v39;
          *v39 = 0;
          *((_QWORD *)v36 - 1) = v41;
          v36 -= 8;
        }
        while (v39 != v40);
        v42 = *a2;
        v8 = (_QWORD *)v49.i64[1];
        v37 = v50;
      }
      a2->i64[0] = (uint64_t)v36;
      a2->i64[1] = (uint64_t)v8;
      v49 = v42;
      v43 = a2[1].i64[0];
      a2[1].i64[0] = (uint64_t)v37;
      v50 = (char *)v43;
      v48 = v42.i64[0];
      std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v48);
    }
    else
    {
      v7 = __p;
      __p = 0;
      *v6 = v7;
      v8 = v6 + 1;
    }
    a2->i64[1] = (uint64_t)v8;
    v44 = __p;
    __p = 0;
    if (v44)
      (*(void (**)(void *))(*(_QWORD *)v44 + 8))(v44);
  }
  else
  {
    v9 = *v4;
    a2->i64[0] = 0;
    a2->i64[1] = 0;
    a2[1].i64[0] = 0;
    std::vector<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::reserve((char **)a2, v9);
    if (v9)
    {
      if (*((_DWORD *)this + 14))
        std::__throw_bad_variant_access[abi:ne180100]();
      v10 = *((_QWORD *)this + 10);
      v11 = (const void *)(*((_QWORD *)this + 9) + 8);
      v46 = 0;
      v47 = 0;
      __p = 0;
      std::vector<long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>(&__p, v11, v10, (v10 - (uint64_t)v11) >> 3);
      v12 = 0;
      v13 = ((uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 2) / v9;
      do
      {
        v14 = (kaldi::quasar::BNNSGraphData *)operator new();
        kaldi::quasar::BNNSGraphData::BNNSGraphData(v14, (uint64_t)&__p, 0);
        WritableDataFloat = (void *)kaldi::quasar::BNNSGraphData::GetWritableDataFloat(v14);
        memcpy(WritableDataFloat, (const void *)(*((_QWORD *)this + 4) + 4 * v12 * v13), 4 * v13);
        v17 = (kaldi::quasar::BNNSGraphData **)a2->i64[1];
        v16 = a2[1].u64[0];
        if ((unint64_t)v17 >= v16)
        {
          v19 = ((uint64_t)v17 - a2->i64[0]) >> 3;
          if ((unint64_t)(v19 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v20 = v16 - a2->i64[0];
          v21 = v20 >> 2;
          if (v20 >> 2 <= (unint64_t)(v19 + 1))
            v21 = v19 + 1;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
            v22 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v22 = v21;
          v51 = a2 + 1;
          if (v22)
            v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)a2[1].i64, v22);
          else
            v23 = 0;
          v24 = (kaldi::quasar::BNNSGraphData **)&v23[8 * v19];
          v25 = &v23[8 * v22];
          v50 = v25;
          *v24 = v14;
          v18 = v24 + 1;
          v49.i64[1] = (uint64_t)(v24 + 1);
          v27 = (char *)a2->i64[0];
          v26 = (char *)a2->i64[1];
          if (v26 == (char *)a2->i64[0])
          {
            v29 = vdupq_n_s64((unint64_t)v26);
          }
          else
          {
            do
            {
              v28 = (kaldi::quasar::BNNSGraphData *)*((_QWORD *)v26 - 1);
              v26 -= 8;
              *(_QWORD *)v26 = 0;
              *--v24 = v28;
            }
            while (v26 != v27);
            v29 = *a2;
            v18 = (_QWORD *)v49.i64[1];
            v25 = v50;
          }
          a2->i64[0] = (uint64_t)v24;
          a2->i64[1] = (uint64_t)v18;
          v49 = v29;
          v30 = a2[1].i64[0];
          a2[1].i64[0] = (uint64_t)v25;
          v50 = (char *)v30;
          v48 = v29.i64[0];
          std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v48);
        }
        else
        {
          *v17 = v14;
          v18 = v17 + 1;
        }
        a2->i64[1] = (uint64_t)v18;
        ++v12;
      }
      while (v12 != v9);
      if (__p)
      {
        v46 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_1ADD91D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1ADD91D44(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void sub_1ADD91D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (__p)
  {
    a10 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::BNNSGraphNetworkPlan::Run(uint64_t a1, __int128 **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 *v9;
  __int128 *v10;
  void *v11;
  __int128 v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void **v19;
  void **v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  std::string __p;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void **v29[5];

  v26 = 0;
  v27 = 0;
  v28 = 0;
  v9 = *a2;
  v10 = a2[1];
  if (*a2 != v10)
  {
    do
    {
      v11 = (void *)*((_QWORD *)v9 + 3);
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v12 = *v9;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
      }
      v25 = v11;
      v13 = v27;
      if (v27 >= v28)
      {
        v15 = (uint64_t)(v27 - v26) >> 5;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v17 = v28 - v26;
        if ((uint64_t)(v28 - v26) >> 4 > v16)
          v16 = v17 >> 4;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
          v18 = 0x7FFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        v29[4] = (void **)&v28;
        v19 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v28, v18);
        v20 = &v19[4 * v15];
        v29[0] = v19;
        v29[1] = v20;
        v29[3] = &v19[4 * v21];
        v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v20[2] = (void *)__p.__r_.__value_.__r.__words[2];
        *(_OWORD *)v20 = v22;
        memset(&__p, 0, sizeof(__p));
        v20[3] = v25;
        v29[2] = v20 + 4;
        std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(&v26, v29);
        v23 = v27;
        std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v29);
        v27 = v23;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v27 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v13 = v14;
        memset(&__p, 0, sizeof(__p));
        *(_QWORD *)(v13 + 24) = v25;
        v27 = v13 + 32;
      }
      v9 += 2;
    }
    while (v9 != v10);
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, &v26, a3, a4, a5);
  v29[0] = (void **)&v26;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v29);
}

void sub_1ADD91F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  __p = &a16;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::BNNSGraphNetworkPlan::Run(uint64_t a1, uint64_t *a2, unsigned __int8 **a3, _QWORD *a4, uint64_t a5)
{
  unint64_t InputCount;
  unint64_t OutputCount;
  unint64_t i;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  unsigned __int8 *v20;
  void **p_p;
  uint64_t v22;
  uint64_t v23;
  uint64_t WritableDataFloat;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  unint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  unint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  unint64_t *v45;
  unint64_t v46;
  kaldi::quasar::BNNSGraphData *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t Size;
  unsigned __int8 *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  kaldi::quasar::BNNSGraphData **v64;
  char *v65;
  _QWORD *v66;
  _QWORD *v67;
  kaldi::quasar::BNNSGraphData *v68;
  int64x2_t v69;
  char *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t *v78;
  char *v79;
  char *v80;
  uint64_t *v81;
  uint64_t v82;
  char *v83;
  uint64_t v85;
  uint64_t v86;
  size_t v87;
  const void *v88;
  std::string::size_type v89;
  uint64_t *v90;
  kaldi::quasar::ComputeEngineBufferItf *v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  std::string::size_type v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t *v102;
  uint64_t v103;
  unsigned int v104;
  BOOL v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  char *v123;
  char *v124;
  uint64_t *v125;
  char *v126;
  uint64_t v127;
  uint64_t WorkspaceSize_v2;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t j;
  _QWORD *v134;
  _QWORD **v135;
  _QWORD *v136;
  _QWORD **v137;
  unint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  unsigned __int8 *v141;
  unsigned __int8 *v142;
  unsigned __int8 *v143;
  _DWORD *v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t *v147;
  uint64_t v148;
  int v149;
  kaldi::quasar::BNNSGraphData *v150;
  void *v151;
  unint64_t v152;
  char *v153;
  uint64_t v154;
  void **v155;
  size_t v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  _QWORD *v161;
  _QWORD *v162;
  size_t v163;
  _QWORD *v164;
  _QWORD *v165;
  size_t v166;
  _QWORD *v167;
  size_t v168;
  _QWORD *v169;
  int *v170;
  char *v171;
  size_t v172;
  _QWORD *v173;
  size_t v174;
  _QWORD *v175;
  _QWORD *v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  unint64_t v187;
  unint64_t v188;
  void *__p;
  _QWORD *v190;
  unint64_t *v191;
  char *__s;
  unint64_t v193[9];
  uint64_t v194;
  int v195;
  unint64_t v196;
  uint64_t *v197;
  _QWORD *v198[2];
  _QWORD v199[3];
  int64x2_t v200;
  _QWORD v201[2];
  uint64_t *v202;
  uint64_t *v203;
  void *v204;
  uint64_t *v205;
  char *v206;
  void *v207[3];
  void *v208[3];
  std::string v209;
  char *v210;
  _QWORD *v211;

  if (*a4 != a4[1])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v209);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v209, "Target node names must be empty");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v209);
  }
  InputCount = BNNSGraphGetInputCount();
  std::vector<char const*>::vector(v208, InputCount);
  BNNSGraphGetInputNames_v2();
  OutputCount = BNNSGraphGetOutputCount();
  std::vector<char const*>::vector(v207, OutputCount);
  BNNSGraphGetOutputNames_v2();
  v187 = InputCount;
  v204 = 0;
  v205 = 0;
  v206 = 0;
  std::vector<std::unique_ptr<kaldi::quasar::BNNSGraphData>>::vector(&v202, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  v200 = 0uLL;
  v201[0] = 0;
  std::vector<std::unique_ptr<BNNSTensor>>::vector(v199, OutputCount);
  v198[0] = 0;
  v198[1] = 0;
  v196 = 0;
  v197 = (uint64_t *)v198;
  v188 = OutputCount;
  if (!OutputCount)
    goto LABEL_137;
  for (i = 0; i < OutputCount; v196 = i)
  {
    __s = 0;
    __s = (char *)*((_QWORD *)v207[0] + i);
    if (BNNSGraphContextGetTensorDescriptor_v2())
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v209);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v209, (uint64_t)"BNNSGraphContextGetTensorDescriptor output failed: ", 51);
      v161 = (_QWORD *)std::ostream::operator<<();
      v162 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v161, (uint64_t)" on ", 4);
      v163 = strlen(__s);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v162, (uint64_t)__s, v163);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v209);
    }
    v11 = v195 == 65552 || v195 == 65568;
    if (!v11)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v209);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v209, (uint64_t)"Unsupported output type: ", 25);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v209);
    }
    if (v194 != 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v209);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v209, (uint64_t)"Unsupported output stride", 25);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v209);
    }
    if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
    {
      if (*(_BYTE *)(a1 + 160))
      {
        v23 = 0;
        WritableDataFloat = 0;
        goto LABEL_47;
      }
      goto LABEL_58;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, __s);
    v12 = *(_QWORD *)(a1 + 136);
    v13 = *(_QWORD *)(a1 + 144);
    if (v12 == v13)
    {
LABEL_30:
      std::string::basic_string[abi:ne180100]<0>(&v209, "");
      goto LABEL_36;
    }
    v14 = HIBYTE(v191);
    v16 = __p;
    v15 = (size_t)v190;
    if (SHIBYTE(v191) >= 0)
      v17 = (_QWORD *)HIBYTE(v191);
    else
      v17 = v190;
    while (1)
    {
      v18 = (_QWORD *)*(unsigned __int8 *)(v12 + 23);
      v19 = (char)v18;
      if ((char)v18 < 0)
        v18 = *(_QWORD **)(v12 + 8);
      if (v17 != v18)
        goto LABEL_29;
      v20 = v19 >= 0 ? (unsigned __int8 *)v12 : *(unsigned __int8 **)v12;
      if ((v14 & 0x80) != 0)
        break;
      if (!(_DWORD)v14)
        goto LABEL_33;
      p_p = &__p;
      v22 = v14;
      while (*(unsigned __int8 *)p_p == *v20)
      {
        p_p = (void **)((char *)p_p + 1);
        ++v20;
        if (!--v22)
          goto LABEL_33;
      }
LABEL_29:
      v12 += 48;
      if (v12 == v13)
        goto LABEL_30;
    }
    if (memcmp(v16, v20, v15))
      goto LABEL_29;
LABEL_33:
    if (*(char *)(v12 + 47) < 0)
      std::string::__init_copy_ctor_external(&v209, *(const std::string::value_type **)(v12 + 24), *(_QWORD *)(v12 + 32));
    else
      v209 = *(std::string *)(v12 + 24);
LABEL_36:
    if (SHIBYTE(v191) < 0)
      operator delete(__p);
    OutputCount = v188;
    if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v209.__r_.__value_.__l.__size_)
        goto LABEL_42;
      v23 = 0;
      WritableDataFloat = 0;
LABEL_45:
      operator delete(v209.__r_.__value_.__l.__data_);
    }
    else
    {
      if (!*((_BYTE *)&v209.__r_.__value_.__s + 23))
      {
        v23 = 0;
        WritableDataFloat = 0;
        goto LABEL_46;
      }
LABEL_42:
      WritableDataFloat = kaldi::quasar::DataFloatForInput(a2, (unsigned __int8 **)&v209);
      v23 = v25;
      if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_45;
    }
LABEL_46:
    if (*(_BYTE *)(a1 + 160))
    {
LABEL_47:
      v26 = (_OWORD *)operator new();
      v27 = v26;
      v26[8] = 0u;
      v26[9] = 0u;
      v26[6] = 0u;
      v26[7] = 0u;
      v26[4] = 0u;
      v26[5] = 0u;
      v26[2] = 0u;
      v26[3] = 0u;
      *v26 = 0u;
      v26[1] = 0u;
      v28 = v205;
      if (v205 >= (uint64_t *)v206)
      {
        v30 = ((char *)v205 - (_BYTE *)v204) >> 4;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v32 = v206 - (_BYTE *)v204;
        if ((v206 - (_BYTE *)v204) >> 3 > v31)
          v31 = v32 >> 3;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
          v33 = 0xFFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        if (v33)
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v206, v33);
        else
          v34 = 0;
        v48 = &v34[16 * v30];
        *(_QWORD *)v48 = v27;
        *((_QWORD *)v48 + 1) = 0;
        v50 = (char *)v204;
        v49 = (char *)v205;
        v51 = v48;
        if (v205 != v204)
        {
          do
          {
            *((_OWORD *)v51 - 1) = *((_OWORD *)v49 - 1);
            v51 -= 16;
            v49 -= 16;
          }
          while (v49 != v50);
          v49 = (char *)v204;
        }
        v29 = (uint64_t *)(v48 + 16);
        v204 = v51;
        v205 = (uint64_t *)(v48 + 16);
        v206 = &v34[16 * v33];
        if (v49)
          operator delete(v49);
      }
      else
      {
        *v205 = (uint64_t)v26;
        v28[1] = 0;
        v29 = v28 + 2;
      }
      v205 = v29;
      if (v196 >= (uint64_t)(v199[1] - v199[0]) >> 3)
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      v52 = *(_QWORD *)(v199[0] + 8 * v196);
      *(_QWORD *)(v199[0] + 8 * v196) = v27;
      if (v52)
        MEMORY[0x1AF44D190](v52, 0x10D0C40E3B58404);
      if (WritableDataFloat)
      {
        v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v196;
        v53 = std::__tree<std::__value_type<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>,std::__map_value_compare<void *,std::__value_type<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>,std::less<void *>,true>,std::allocator<std::__value_type<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void * const&>,std::tuple<>>(&v197, &v196, (uint64_t)&std::piecewise_construct, (uint64_t **)&v209);
        v53[5] = WritableDataFloat;
        v53[6] = v23;
      }
      goto LABEL_136;
    }
    if (!WritableDataFloat)
    {
LABEL_58:
      v35 = 0;
      v36 = 0;
      __p = 0;
      v190 = 0;
      v191 = 0;
      do
      {
        v37 = v193[v36 + 1];
        if (!v37)
          break;
        if (v35 >= v191)
        {
          v39 = (unint64_t *)__p;
          v40 = ((char *)v35 - (_BYTE *)__p) >> 3;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v42 = (char *)v191 - (_BYTE *)__p;
          if (((char *)v191 - (_BYTE *)__p) >> 2 > v41)
            v41 = v42 >> 2;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
            v43 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v43 = v41;
          if (v43)
          {
            v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v191, v43);
            v39 = (unint64_t *)__p;
            v35 = v190;
          }
          else
          {
            v44 = 0;
          }
          v45 = (unint64_t *)&v44[8 * v40];
          *v45 = v37;
          v38 = v45 + 1;
          while (v35 != v39)
          {
            v46 = *--v35;
            *--v45 = v46;
          }
          __p = v45;
          v190 = v38;
          v191 = (unint64_t *)&v44[8 * v43];
          if (v39)
            operator delete(v39);
        }
        else
        {
          *v35 = v37;
          v38 = v35 + 1;
        }
        v190 = v38;
        ++v36;
        v35 = v38;
      }
      while (v36 != 8);
      if (v195 == 65552)
      {
        v47 = (kaldi::quasar::BNNSGraphData *)operator new();
        kaldi::quasar::BNNSGraphData::BNNSGraphData(v47, (uint64_t)&__p, 1);
      }
      else
      {
        v47 = (kaldi::quasar::BNNSGraphData *)operator new();
        kaldi::quasar::BNNSGraphData::BNNSGraphData(v47, (uint64_t)&__p, 0);
      }
      OutputCount = v188;
      std::string::basic_string[abi:ne180100]<0>(&v209, __s);
      kaldi::quasar::ComputeEngineBufferItf::SetName((uint64_t)v47, &v209);
      if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v209.__r_.__value_.__l.__data_);
      if ((*(unsigned int (**)(kaldi::quasar::BNNSGraphData *))(*(_QWORD *)v47 + 144))(v47))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v209);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v209, (uint64_t)"BNNSGraphNetworkPlan::Run failed - no support for float16", 57);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v209);
      }
      WritableDataFloat = kaldi::quasar::BNNSGraphData::GetWritableDataFloat(v47);
      Size = kaldi::quasar::ComputeEngineBufferItf::GetSize(v47);
      v55 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,char const*,std::__identity>(*a3, a3[1], (const char **)&__s);
      if (v55 == a3[1])
      {
        v58 = v200.i64[1];
        if (v200.i64[1] >= v201[0])
        {
          v60 = (v200.i64[1] - v200.i64[0]) >> 3;
          if ((unint64_t)(v60 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v61 = (v201[0] - v200.i64[0]) >> 2;
          if (v61 <= v60 + 1)
            v61 = v60 + 1;
          if (v201[0] - v200.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
            v62 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v62 = v61;
          v211 = v201;
          if (v62)
            v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v201, v62);
          else
            v63 = 0;
          v64 = (kaldi::quasar::BNNSGraphData **)&v63[8 * v60];
          v65 = &v63[8 * v62];
          v210 = v65;
          *v64 = v47;
          v59 = v64 + 1;
          v209.__r_.__value_.__r.__words[2] = (std::string::size_type)(v64 + 1);
          v66 = (_QWORD *)v200.i64[1];
          v67 = (_QWORD *)v200.i64[0];
          if (v200.i64[1] == v200.i64[0])
          {
            v69 = vdupq_n_s64(v200.u64[1]);
          }
          else
          {
            do
            {
              v68 = (kaldi::quasar::BNNSGraphData *)*--v66;
              *v66 = 0;
              *--v64 = v68;
            }
            while (v66 != v67);
            v69 = v200;
            v59 = (_QWORD *)v209.__r_.__value_.__r.__words[2];
            v65 = v210;
          }
          v200.i64[0] = (uint64_t)v64;
          v200.i64[1] = (uint64_t)v59;
          *(int64x2_t *)&v209.__r_.__value_.__r.__words[1] = v69;
          v70 = (char *)v201[0];
          v201[0] = v65;
          v210 = v70;
          v209.__r_.__value_.__r.__words[0] = v69.i64[0];
          std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v209);
        }
        else
        {
          *(_QWORD *)v200.i64[1] = v47;
          v59 = (_QWORD *)(v58 + 8);
        }
        v200.i64[1] = (uint64_t)v59;
      }
      else
      {
        v56 = 0xAAAAAAAAAAAAAAABLL * ((v55 - *a3) >> 3);
        if (v56 >= v203 - v202)
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        v57 = v202[0xAAAAAAAAAAAAAABLL * ((v55 - *a3) >> 3)];
        v202[v56] = (uint64_t)v47;
        if (v57)
          (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
      }
      if (__p)
      {
        v190 = __p;
        operator delete(__p);
      }
      if (!WritableDataFloat)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v209);
        v173 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v209, (uint64_t)"Ouput ", 6);
        v174 = strlen(__s);
        v175 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v173, (uint64_t)__s, v174);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v175, (uint64_t)" cannot be found in model", 25);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v209);
      }
      v23 = 4 * Size;
    }
    v71 = v205;
    if (v205 >= (uint64_t *)v206)
    {
      v73 = ((char *)v205 - (_BYTE *)v204) >> 4;
      v74 = v73 + 1;
      if ((unint64_t)(v73 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v75 = v206 - (_BYTE *)v204;
      if ((v206 - (_BYTE *)v204) >> 3 > v74)
        v74 = v75 >> 3;
      if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF0)
        v76 = 0xFFFFFFFFFFFFFFFLL;
      else
        v76 = v74;
      if (v76)
        v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v206, v76);
      else
        v77 = 0;
      v78 = (uint64_t *)&v77[16 * v73];
      *v78 = WritableDataFloat;
      v78[1] = v23;
      v80 = (char *)v204;
      v79 = (char *)v205;
      v81 = v78;
      if (v205 != v204)
      {
        do
        {
          *((_OWORD *)v81 - 1) = *((_OWORD *)v79 - 1);
          v81 -= 2;
          v79 -= 16;
        }
        while (v79 != v80);
        v79 = (char *)v204;
      }
      v72 = v78 + 2;
      v204 = v81;
      v205 = v78 + 2;
      v206 = &v77[16 * v76];
      if (v79)
        operator delete(v79);
    }
    else
    {
      *v205 = WritableDataFloat;
      v71[1] = v23;
      v72 = v71 + 2;
    }
    v205 = v72;
LABEL_136:
    i = v196 + 1;
  }
LABEL_137:
  std::vector<std::unique_ptr<BNNSTensor>>::vector(&__p, v187);
  if (!v187)
    goto LABEL_215;
  v82 = 0;
  while (2)
  {
    v83 = (char *)*((_QWORD *)v208[0] + v82);
    if (BNNSGraphContextGetTensorDescriptor_v2())
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v209);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v209, (uint64_t)"BNNSGraphContextGetTensorDescriptor input failed: ", 50);
      v164 = (_QWORD *)std::ostream::operator<<();
      v165 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)" on ", 4);
      v166 = strlen(v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v165, (uint64_t)v83, v166);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v209);
    }
    if (v195 != 65552 && v195 != 65568)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v209);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v209, (uint64_t)"Unsupported input type: ", 24);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v209);
    }
    v86 = *a2;
    v85 = a2[1];
    if (*a2 == v85)
    {
LABEL_156:
      v89 = 0;
      v90 = 0;
      goto LABEL_165;
    }
    v87 = strlen(v83);
    while (2)
    {
      if ((*(char *)(v86 + 23) & 0x80000000) == 0)
      {
        if (v87 == *(unsigned __int8 *)(v86 + 23))
        {
          v88 = (const void *)v86;
          if (v87 == -1)
            goto LABEL_269;
          goto LABEL_154;
        }
        goto LABEL_155;
      }
      if (v87 != *(_QWORD *)(v86 + 8))
        goto LABEL_155;
      if (v87 == -1)
LABEL_269:
        std::string::__throw_out_of_range[abi:ne180100]();
      v88 = *(const void **)v86;
LABEL_154:
      if (memcmp(v88, v83, v87))
      {
LABEL_155:
        v86 += 32;
        if (v86 == v85)
          goto LABEL_156;
        continue;
      }
      break;
    }
    v91 = *(kaldi::quasar::ComputeEngineBufferItf **)(v86 + 24);
    v92 = (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v91 + 144))(v91);
    if (v195 == 65552)
      v93 = 0;
    else
      v93 = v92;
    if (v93 == 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v209);
      v176 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v209, (uint64_t)"input specified as fp16: ", 25);
      v177 = *(char *)(v86 + 23);
      if (v177 >= 0)
        v178 = v86;
      else
        v178 = *(_QWORD *)v86;
      if (v177 >= 0)
        v179 = *(unsigned __int8 *)(v86 + 23);
      else
        v179 = *(_QWORD *)(v86 + 8);
      v180 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v176, v178, v179);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v180, (uint64_t)" type and data type does not match", 34);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v209);
    }
    if (((*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v91 + 144))(v91) & 1) == 0
      && v195 != 65568
      && v195 != 131104)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v209);
      v181 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v209, (uint64_t)"input not specified as fp16: ", 29);
      v182 = *(char *)(v86 + 23);
      if (v182 >= 0)
        v183 = v86;
      else
        v183 = *(_QWORD *)v86;
      if (v182 >= 0)
        v184 = *(unsigned __int8 *)(v86 + 23);
      else
        v184 = *(_QWORD *)(v86 + 8);
      v185 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, v183, v184);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v185, (uint64_t)" type and data type does not match", 34);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v209);
    }
    kaldi::quasar::ComputeEngineBufferItf::GetShape(v91, &v209.__r_.__value_.__l.__data_);
    v89 = v209.__r_.__value_.__l.__size_;
    v90 = (uint64_t *)v209.__r_.__value_.__r.__words[0];
LABEL_165:
    if (v194 != 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v209);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v209, (uint64_t)"Unsupported input stride", 24);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v209);
    }
    std::string::basic_string[abi:ne180100]<0>(&v209, v83);
    v94 = kaldi::quasar::DataFloatForInput(a2, (unsigned __int8 **)&v209);
    v96 = v95;
    if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v209.__r_.__value_.__l.__data_);
    if (!v94)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v209);
      v167 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v209, (uint64_t)"Missing input: ", 15);
      v168 = strlen(v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, (uint64_t)v83, v168);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v209);
    }
    if (*(_BYTE *)(a1 + 160))
    {
      v97 = v195;
      v98 = operator new();
      *(_OWORD *)(v98 + 128) = 0u;
      *(_OWORD *)(v98 + 144) = 0u;
      *(_OWORD *)(v98 + 96) = 0u;
      *(_OWORD *)(v98 + 112) = 0u;
      *(_OWORD *)(v98 + 64) = 0u;
      *(_OWORD *)(v98 + 80) = 0u;
      *(_OWORD *)(v98 + 32) = 0u;
      *(_OWORD *)(v98 + 48) = 0u;
      *(_OWORD *)v98 = 0u;
      *(_OWORD *)(v98 + 16) = 0u;
      *(_DWORD *)v98 = v97;
      *(_QWORD *)(v98 + 136) = v94;
      *(_QWORD *)(v98 + 144) = v96;
      v99 = v89 - (_QWORD)v90;
      v100 = (uint64_t)(v89 - (_QWORD)v90) >> 3;
      *(_BYTE *)(v98 + 4) = v100;
      if ((uint64_t *)v89 != v90)
      {
        if (v100 <= 1)
          v100 = 1;
        v101 = (_QWORD *)(v98 + 8);
        v102 = v90;
        do
        {
          v103 = *v102++;
          *v101++ = v103;
          --v100;
        }
        while (v100);
      }
      *(_QWORD *)(8 * (v99 >> 3) + v98 + 64) = 1;
      v104 = (v99 >> 3);
      v105 = v104 >= 2;
      v106 = v104 - 2;
      if (v105)
      {
        v107 = v98 + 8 * v106;
        v108 = 8 * v106;
        v109 = *(_QWORD *)(v107 + 80);
        do
        {
          v109 *= *(_QWORD *)(v98 + v108 + 16);
          *(_QWORD *)(v98 + v108 + 72) = v109;
          v108 -= 8;
        }
        while (v108 != -8);
      }
      v110 = *((_QWORD *)__p + v82);
      *((_QWORD *)__p + v82) = v98;
      if (v110)
        MEMORY[0x1AF44D190](v110, 0x10D0C40E3B58404);
      v111 = *((_QWORD *)__p + v82);
      v112 = v205;
      if (v205 < (uint64_t *)v206)
      {
        *v205 = v111;
        v112[1] = 0;
        goto LABEL_185;
      }
      v114 = ((char *)v205 - (_BYTE *)v204) >> 4;
      v115 = v114 + 1;
      if ((unint64_t)(v114 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v116 = v206 - (_BYTE *)v204;
      if ((v206 - (_BYTE *)v204) >> 3 > v115)
        v115 = v116 >> 3;
      if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF0)
        v117 = 0xFFFFFFFFFFFFFFFLL;
      else
        v117 = v115;
      if (v117)
        v118 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v206, v117);
      else
        v118 = 0;
      v122 = (uint64_t *)&v118[16 * v114];
      *v122 = v111;
      v122[1] = 0;
      v124 = (char *)v204;
      v123 = (char *)v205;
      v125 = v122;
      if (v205 != v204)
      {
        do
        {
          *((_OWORD *)v125 - 1) = *((_OWORD *)v123 - 1);
          v125 -= 2;
          v123 -= 16;
        }
        while (v123 != v124);
        goto LABEL_209;
      }
      goto LABEL_210;
    }
    v112 = v205;
    if (v205 >= (uint64_t *)v206)
    {
      v119 = ((char *)v205 - (_BYTE *)v204) >> 4;
      v120 = v119 + 1;
      if ((unint64_t)(v119 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v121 = v206 - (_BYTE *)v204;
      if ((v206 - (_BYTE *)v204) >> 3 > v120)
        v120 = v121 >> 3;
      if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF0)
        v117 = 0xFFFFFFFFFFFFFFFLL;
      else
        v117 = v120;
      if (v117)
        v118 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v206, v117);
      else
        v118 = 0;
      v122 = (uint64_t *)&v118[16 * v119];
      *v122 = v94;
      v122[1] = v96;
      v126 = (char *)v204;
      v123 = (char *)v205;
      v125 = v122;
      if (v205 != v204)
      {
        do
        {
          *((_OWORD *)v125 - 1) = *((_OWORD *)v123 - 1);
          v125 -= 2;
          v123 -= 16;
        }
        while (v123 != v126);
LABEL_209:
        v123 = (char *)v204;
      }
LABEL_210:
      v113 = v122 + 2;
      v204 = v125;
      v205 = v122 + 2;
      v206 = &v118[16 * v117];
      if (v123)
        operator delete(v123);
    }
    else
    {
      *v205 = v94;
      v112[1] = v96;
LABEL_185:
      v113 = v112 + 2;
    }
    v205 = v113;
    if (v90)
      operator delete(v90);
    if (++v82 != v187)
      continue;
    break;
  }
LABEL_215:
  if (v187 != (a2[1] - *a2) >> 5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v209);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v209, (uint64_t)"Unknown inputs", 14);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v209);
  }
  v193[0] = 0;
  if (!*(_BYTE *)(a1 + 160))
  {
    v127 = sysconf(29);
    WorkspaceSize_v2 = BNNSGraphContextGetWorkspaceSize_v2();
    if (*(_QWORD *)(a1 + 224))
      v193[0] = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 32);
    kaldi::quasar::BNNSGraphNetworkPlan::WorkSpaceAllocationCallback((uint64_t **)(a1 + 208), (void *)0x18, v193, v127, WorkspaceSize_v2);
    std::map<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>::at(a1 + 208, v193);
  }
  if (BNNSGraphContextExecute_v2())
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v209);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v209, (uint64_t)"BNNSGraphContextExecute failed: ", 32);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v209);
  }
  v129 = *(char **)a5;
  v130 = *(char **)(a5 + 8);
  while (v130 != v129)
  {
    v132 = *((_QWORD *)v130 - 1);
    v130 -= 8;
    v131 = v132;
    *(_QWORD *)v130 = 0;
    if (v132)
      (*(void (**)(uint64_t))(*(_QWORD *)v131 + 8))(v131);
  }
  *(_QWORD *)(a5 + 8) = v129;
  if (*(_BYTE *)(a1 + 160))
  {
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::resize(a5, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
    v196 = 0;
    if (v188)
    {
      for (j = 0; j < v188; v196 = j)
      {
        v134 = v198[0];
        if (!v198[0])
          goto LABEL_237;
        v135 = v198;
        do
        {
          v136 = v134;
          v137 = v135;
          v138 = v134[4];
          v139 = v134 + 1;
          if (v138 >= j)
          {
            v139 = v136;
            v135 = (_QWORD **)v136;
          }
          v134 = (_QWORD *)*v139;
        }
        while (v134);
        if (v135 == v198)
          goto LABEL_237;
        if (v138 < j)
          v136 = v137;
        if (j >= v136[4])
        {
          v155 = (void **)std::map<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>::at((uint64_t)&v197, &v196);
          j = v196;
          v140 = v199[0] + 8 * v196;
          if (*v155)
          {
            v156 = *(_QWORD *)(*(_QWORD *)v140 + 144);
            if ((unint64_t)v155[1] < v156)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v209);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v209, (uint64_t)"data_size >= tensor->data_size_in_bytes", 39);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v209);
            }
            memcpy(*v155, *(const void **)(*(_QWORD *)v140 + 136), v156);
            goto LABEL_250;
          }
        }
        else
        {
LABEL_237:
          v140 = v199[0] + 8 * j;
        }
        __s = 0;
        __s = (char *)*((_QWORD *)v207[0] + j);
        v141 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,char const*,std::__identity>(*a3, a3[1], (const char **)&__s);
        if (v141 != a3[1])
        {
          v142 = v141;
          v143 = *a3;
          std::vector<long long>::vector(&v209, *(unsigned __int8 *)(*(_QWORD *)v140 + 4));
          v144 = *(_DWORD **)v140;
          v145 = *(unsigned __int8 *)(*(_QWORD *)v140 + 4);
          if (*(_BYTE *)(*(_QWORD *)v140 + 4))
          {
            v146 = (_QWORD *)v209.__r_.__value_.__r.__words[0];
            v147 = (uint64_t *)(v144 + 2);
            do
            {
              v148 = *v147++;
              *v146++ = v148;
              --v145;
            }
            while (v145);
          }
          v149 = *v144;
          v150 = (kaldi::quasar::BNNSGraphData *)operator new();
          kaldi::quasar::BNNSGraphData::BNNSGraphData(v150, (uint64_t)&v209, v149 == 65552);
          v151 = (void *)kaldi::quasar::BNNSGraphData::GetWritableDataFloat(v150);
          v152 = 0xAAAAAAAAAAAAAAABLL * ((v142 - v143) >> 3);
          memcpy(v151, *(const void **)(*(_QWORD *)v140 + 136), *(_QWORD *)(*(_QWORD *)v140 + 144));
          v153 = *(char **)a5;
          if (v152 >= (uint64_t)(*(_QWORD *)(a5 + 8) - *(_QWORD *)a5) >> 3)
            std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
          v154 = *(_QWORD *)&v153[8 * v152];
          *(_QWORD *)&v153[8 * v152] = v150;
          if (v154)
            (*(void (**)(uint64_t))(*(_QWORD *)v154 + 8))(v154);
          if (v209.__r_.__value_.__r.__words[0])
          {
            v209.__r_.__value_.__l.__size_ = v209.__r_.__value_.__r.__words[0];
            operator delete(v209.__r_.__value_.__l.__data_);
          }
        }
LABEL_250:
        j = v196 + 1;
      }
    }
  }
  else
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<kaldi::quasar::BNNSGraphData> *,std::unique_ptr<kaldi::quasar::BNNSGraphData> *,std::back_insert_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>((uint64_t)&v196, v202, v203, (char **)a5);
  }
  v157 = *(_QWORD **)(a1 + 208);
  v158 = (_QWORD *)(a1 + 216);
  if (v157 != v158)
  {
    do
    {
      if (madvise((void *)v157[4], v157[5], 7))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v209);
        v169 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v209, (uint64_t)" Could not madvise work space: ", 31);
        v170 = __error();
        v171 = strerror(*v170);
        v172 = strlen(v171);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v169, (uint64_t)v171, v172);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v209);
      }
      v159 = (_QWORD *)v157[1];
      if (v159)
      {
        do
        {
          v160 = v159;
          v159 = (_QWORD *)*v159;
        }
        while (v159);
      }
      else
      {
        do
        {
          v160 = (_QWORD *)v157[2];
          v11 = *v160 == (_QWORD)v157;
          v157 = v160;
        }
        while (!v11);
      }
      v157 = v160;
    }
    while (v160 != v158);
  }
  v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<std::unique_ptr<BNNSTensor>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v209);
  std::__tree<int>::destroy((uint64_t)&v197, v198[0]);
  v209.__r_.__value_.__r.__words[0] = (std::string::size_type)v199;
  std::vector<std::unique_ptr<BNNSTensor>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v209);
  v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v200;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v209);
  v209.__r_.__value_.__r.__words[0] = (std::string::size_type)&v202;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v209);
  if (v204)
  {
    v205 = (uint64_t *)v204;
    operator delete(v204);
  }
  if (v207[0])
  {
    v207[1] = v207[0];
    operator delete(v207[0]);
  }
  if (v208[0])
  {
    v208[1] = v208[0];
    operator delete(v208[0]);
  }
}

uint64_t kaldi::quasar::DataFloatForInput(uint64_t *a1, unsigned __int8 **a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[34];

  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    v4 = *((_BYTE *)a2 + 23);
    if (v4 >= 0)
      v5 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    else
      v5 = a2[1];
    if (v4 >= 0)
      v6 = (unsigned __int8 *)a2;
    else
      v6 = *a2;
    do
    {
      v7 = *(unsigned __int8 *)(v2 + 23);
      if ((v7 & 0x80u) == 0)
        v8 = (unsigned __int8 *)*(unsigned __int8 *)(v2 + 23);
      else
        v8 = *(unsigned __int8 **)(v2 + 8);
      if (v8 == v5)
      {
        if ((v7 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v2, v6, *(_QWORD *)(v2 + 8)))
          {
LABEL_21:
            v11 = *(_QWORD *)(v2 + 24);
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 144))(v11))
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
              std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "DataFloatForInput error - float16 is not supported");
            }
            else
            {
              if (!*(_DWORD *)(v11 + 56))
              {
                v10 = *(_QWORD *)(v11 + 32);
                kaldi::quasar::ComputeEngineBufferItf::GetSize((kaldi::quasar::ComputeEngineBufferItf *)v11);
                return v10;
              }
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
              std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "*GetDataFloat() fail - data is not assigned as std::vector<float>");
            }
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
          }
        }
        else
        {
          if (!*(_BYTE *)(v2 + 23))
            goto LABEL_21;
          v9 = 0;
          while (*(unsigned __int8 *)(v2 + v9) == v6[v9])
          {
            if (v7 == ++v9)
              goto LABEL_21;
          }
        }
      }
      v2 += 32;
    }
    while (v2 != v3);
  }
  return 0;
}

uint64_t kaldi::quasar::BNNSGraphData::GetWritableDataFloat(kaldi::quasar::BNNSGraphData *this)
{
  _QWORD v2[34];

  if (*((_DWORD *)this + 14))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "*GetWritableDataFloat() fail - data is not assigned as std::vector<float>");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return *((_QWORD *)this + 4);
}

std::string *kaldi::quasar::BNNSGraphNetworkPlan::GetSharedInputOutputNames@<X0>(__int128 **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(a2, this[17], this[18], 0xAAAAAAAAAAAAAAABLL * (this[18] - this[17]));
}

uint64_t kaldi::quasar::BNNSGraphNetworkConfig::CompiledBNNSGraph(void)const::$_0::__invoke(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((_DWORD)result == 8 && a2 && a4)
  {
    result = *(_QWORD *)(a4 + 8);
    if (result)
      JUMPOUT(0x1AF44C914);
  }
  return result;
}

kaldi::quasar::BNNSGraphNetworkConfig *kaldi::quasar::BNNSGraphNetworkConfig::BNNSGraphNetworkConfig(kaldi::quasar::BNNSGraphNetworkConfig *this, const kaldi::quasar::BNNSGraphNetworkConfig *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int16 v11;

  *(_QWORD *)this = off_1E5D33BC8;
  *((_BYTE *)this + 8) = *((_BYTE *)a2 + 8);
  v4 = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 3) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_WORD *)this + 16) = *((_WORD *)a2 + 16);
  *(_QWORD *)this = &off_1E5D33AC8;
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 40);
    *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
    *(_OWORD *)((char *)this + 40) = v7;
  }
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v8 = *((_OWORD *)a2 + 4);
    *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
    *((_OWORD *)this + 4) = v8;
  }
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v9 = *(_OWORD *)((char *)a2 + 88);
    *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
    *(_OWORD *)((char *)this + 88) = v9;
  }
  v10 = *((_QWORD *)a2 + 14);
  v11 = *((_WORD *)a2 + 60);
  *((_QWORD *)this + 16) = 0;
  *((_WORD *)this + 60) = v11;
  *((_QWORD *)this + 14) = v10;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>((std::string *)((char *)this + 128), *((__int128 **)a2 + 16), *((__int128 **)a2 + 17), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 4));
  *((_BYTE *)this + 152) = *((_BYTE *)a2 + 152);
  return this;
}

void sub_1ADD93A4C(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[87] < 0)
    operator delete(*v3);
  if (v1[63] < 0)
    operator delete(*v2);
  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf((kaldi::quasar::ComputeEngineConfigItf *)v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::BNNSGraphData::CopyFromMatrixT<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  _QWORD __src[2];
  _QWORD v9[33];

  v9[32] = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__src);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__src, "CopyFromMatrixT(const MatType &mat) not implemented for fp16");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__src);
  }
  if (*(_DWORD *)(a1 + 56))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__src);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__src, "CopyFromMatrixT(const MatType &mat) fail - data not assigned with std::vector<float>");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__src);
  }
  v5 = *(int *)(a2 + 16);
  v4 = *(_DWORD *)(a2 + 20);
  __src[0] = v4;
  __src[1] = v5;
  std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)(a1 + 72), (char *)__src, (uint64_t)v9, 2uLL);
  if (*(_DWORD *)(a1 + 56))
    std::__throw_bad_variant_access[abi:ne180100]();
  std::vector<float>::resize(a1 + 32, (int)v5 * v4);
  if (*(_DWORD *)(a2 + 24) == *(_DWORD *)(a2 + 16))
  {
    memcpy(*(void **)(a1 + 32), *(const void **)(a2 + 8), *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32));
  }
  else if (v4 >= 1)
  {
    v6 = 0;
    for (i = 0; i != v4; ++i)
    {
      memcpy((void *)(*(_QWORD *)(a1 + 32) + v6), (const void *)(*(_QWORD *)(a2 + 8) + 4 * i * *(int *)(a2 + 24)), 4 * v5);
      v6 += 4 * v5;
    }
  }
}

void sub_1ADD93C34(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void *kaldi::quasar::BNNSGraphData::CopyFromMatrixT<kaldi::MatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  void *result;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD __src[2];
  _QWORD v17[33];

  v17[32] = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__src);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__src, "CopyFromMatrixT(const MatType &mat) not implemented for fp16");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__src);
  }
  if (*(_DWORD *)(a1 + 56))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__src);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__src, "CopyFromMatrixT(const MatType &mat) fail - data not assigned with std::vector<float>");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__src);
  }
  v4 = kaldi::MatrixBase<float>::NumRows(a2);
  v5 = kaldi::MatrixBase<float>::NumCols(a2);
  v6 = v5;
  __src[0] = v4;
  __src[1] = v5;
  std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)(a1 + 72), (char *)__src, (uint64_t)v17, 2uLL);
  if (*(_DWORD *)(a1 + 56))
    std::__throw_bad_variant_access[abi:ne180100]();
  v7 = (uint64_t *)(a1 + 32);
  std::vector<float>::resize(a1 + 32, (int)v6 * v4);
  v8 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start(a2);
  result = (void *)kaldi::MatrixBase<float>::NumCols(a2);
  if (v8 == (_DWORD)result)
    return memcpy(*(void **)(a1 + 32), *(const void **)a2, *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32));
  if (v4 >= 1)
  {
    v10 = 0;
    v11 = 0;
    v12 = 4 * v6;
    do
    {
      v13 = *v7;
      v14 = *(char **)a2;
      v15 = *(int *)(a2 + 16);
      kaldi::MatrixBase<float>::NumCols(a2);
      result = memcpy((void *)(v13 + v10), &v14[4 * v11 * v15], v12);
      ++v11;
      v10 += v12;
    }
    while (v4 != v11);
  }
  return result;
}

void sub_1ADD93E00(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::BNNSGraphData::GetDataFloat(kaldi::quasar::BNNSGraphData *this)
{
  _QWORD v2[34];

  if (*((_DWORD *)this + 14))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "*GetDataFloat() fail - data is not assigned as std::vector<float>");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return *((_QWORD *)this + 4);
}

_QWORD *kaldi::quasar::BNNSGraphData::BNNSGraphData(_QWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  std::vector<int> *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __n128 __p[17];

  v6 = kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(a1);
  *v6 = &unk_1E5D32BE0;
  v6[4] = 0;
  v7 = (std::vector<int> *)(v6 + 4);
  v6[5] = 0;
  v6[6] = 0;
  *((_DWORD *)v6 + 14) = 0;
  v6[9] = 0;
  v6[10] = 0;
  v6[11] = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(v6 + 9, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v8 = *(uint64_t **)a2;
  v9 = 1;
  while (v8 != *(uint64_t **)(a2 + 8))
  {
    v10 = *v8++;
    v9 *= v10;
  }
  if ((a3 & 1) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"BNNSGraphData constructor failed - no support for float16", 57);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  std::vector<float>::vector(__p, v9);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<float>>>::__assign_alt[abi:ne180100]<0ul,std::vector<float>,std::vector<float>>((uint64_t)v7, v7, __p);
  if (__p[0].n128_u64[0])
  {
    __p[0].n128_u64[1] = __p[0].n128_u64[0];
    operator delete((void *)__p[0].n128_u64[0]);
  }
  return a1;
}

void sub_1ADD93F6C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 80) = v5;
    operator delete(v5);
  }
  if (*(_DWORD *)(v1 + 56) != -1)
  {
    v6 = *v2;
    if (*v2)
    {
      *(_QWORD *)(v1 + 40) = v6;
      operator delete(v6);
    }
  }
  *(_DWORD *)(v1 + 56) = -1;
  kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf((void **)v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::BNNSGraphData::~BNNSGraphData(kaldi::quasar::BNNSGraphData *this)
{
  kaldi::quasar::BNNSGraphData::~BNNSGraphData(this);
  JUMPOUT(0x1AF44D190);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &unk_1E5D32BE0;
  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  if (*((_DWORD *)this + 14) != -1)
  {
    v3 = (void *)*((_QWORD *)this + 4);
    if (v3)
    {
      *((_QWORD *)this + 5) = v3;
      operator delete(v3);
    }
  }
  *((_DWORD *)this + 14) = -1;
  kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf((void **)this);
}

void kaldi::quasar::BNNSGraphData::Copy(kaldi::quasar::BNNSGraphData *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD v5[34];

  if ((*(unsigned int (**)(kaldi::quasar::BNNSGraphData *))(*(_QWORD *)this + 144))(this))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Copy() failed - no support for float16", 38);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  v4 = (_QWORD *)operator new();
  kaldi::quasar::BNNSGraphData::BNNSGraphData(v4, (uint64_t)this + 72, 0);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<float>>>::__generic_assign[abi:ne180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<std::vector<float>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(v4 + 4), (uint64_t)this + 32);
  *a2 = v4;
}

void sub_1ADD940A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *kaldi::quasar::BNNSGraphData::CopyToVector(uint64_t a1, uint64_t a2)
{
  _QWORD v5[34];

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "CopyToVector(CuVector<BaseFloat> *out) not implemented for fp16");
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 56))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "CopyToVector(CuVector<BaseFloat> *out) fail - data is not assigned as std::vector<float>");
    goto LABEL_8;
  }
  kaldi::CuVector<float>::Resize(a2, (*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2, 1);
  if (*(_DWORD *)(a1 + 56))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "*GetDataFloat() fail - data is not assigned as std::vector<float>");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  return memmove(*(void **)(a2 + 8), *(const void **)(a1 + 32), *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32));
}

void kaldi::quasar::BNNSGraphData::CopyToStdVector(uint64_t a1, std::vector<unsigned int> *a2)
{
  float *v4;
  float *v5;
  std::__compressed_pair<unsigned int *> *p_end_cap;
  std::vector<unsigned int>::pointer end;
  int v8;
  unsigned int *v9;
  std::vector<unsigned int>::pointer begin;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  int *v16;
  int v17;
  _QWORD v18[34];

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, "CopyToStdVector(std::vector<int32> *out) not implemented for fp16");
    goto LABEL_26;
  }
  if (*(_DWORD *)(a1 + 56))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, "CopyToStdVector(std::vector<int32> *out) fail - data is not assigned as std::vector<float>");
LABEL_26:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v18);
  }
  a2->__end_ = a2->__begin_;
  std::vector<int>::reserve(a2, (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2);
  v4 = *(float **)(a1 + 32);
  v5 = *(float **)(a1 + 40);
  if (v4 != v5)
  {
    p_end_cap = &a2->__end_cap_;
    end = a2->__end_;
    do
    {
      v8 = (int)*v4;
      if (end >= p_end_cap->__value_)
      {
        begin = a2->__begin_;
        v11 = end - a2->__begin_;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v13 = (char *)p_end_cap->__value_ - (char *)begin;
        if (v13 >> 1 > v12)
          v12 = v13 >> 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&a2->__end_cap_, v14);
          begin = a2->__begin_;
          end = a2->__end_;
        }
        else
        {
          v15 = 0;
        }
        v16 = (int *)&v15[4 * v11];
        *v16 = v8;
        v9 = (unsigned int *)(v16 + 1);
        while (end != begin)
        {
          v17 = *--end;
          *--v16 = v17;
        }
        a2->__begin_ = (std::vector<unsigned int>::pointer)v16;
        a2->__end_ = v9;
        a2->__end_cap_.__value_ = (unsigned int *)&v15[4 * v14];
        if (begin)
          operator delete(begin);
      }
      else
      {
        *end = v8;
        v9 = end + 1;
      }
      a2->__end_ = v9;
      ++v4;
      end = v9;
    }
    while (v4 != v5);
  }
}

char *kaldi::quasar::BNNSGraphData::CopyToStdVector(uint64_t a1, char *a2)
{
  char *result;
  _QWORD v5[34];

  result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  if ((_DWORD)result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "CopyToStdVector(std::vector<BaseFloat> *out) not implemented for fp16");
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 56))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "CopyToStdVector(std::vector<BaseFloat> *out) fail - data is not assigned as std::vector<float>");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  if ((char *)(a1 + 32) != a2)
    return std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a2, *(char **)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2);
  return result;
}

void kaldi::quasar::BNNSGraphData::CopyFromImpl(kaldi::quasar::BNNSGraphData *this, const kaldi::quasar::ComputeEngineBufferItf *lpsrc)
{
  void *v3;

  if (!v3)
    __cxa_bad_cast();
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<float>>>::__generic_assign[abi:ne180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<std::vector<float>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)this + 32, (uint64_t)v3 + 32);
}

void *kaldi::quasar::BNNSGraphData::FlatRangeCopy(kaldi::quasar::BNNSGraphData *this, const kaldi::quasar::ComputeEngineBufferItf *a2, int a3, int a4, int a5)
{
  _DWORD *v10;
  uint64_t v11;
  uint64_t WritableDataFloat;
  _QWORD v14[34];

  if ((*(unsigned int (**)(kaldi::quasar::BNNSGraphData *))(*(_QWORD *)this + 144))(this))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "FlatRangeCopy(const ComputeEngineBufferItf *srcBuffer, int srcstart, int srcend, int deststart) not implemented for fp16");
    goto LABEL_8;
  }
  if (!a2
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "bnns_buffer != nullptr");
    goto LABEL_8;
  }
  if (v10[14])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "*GetDataFloat() fail - data is not assigned as std::vector<float>");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  v11 = *((_QWORD *)v10 + 4);
  WritableDataFloat = kaldi::quasar::BNNSGraphData::GetWritableDataFloat(this);
  if (a4 - a3 < 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "srcend - srcstart >= 0");
    goto LABEL_8;
  }
  return memcpy((void *)(WritableDataFloat + 4 * a5), (const void *)(v11 + 4 * a3), 4 * (a4 - a3));
}

void sub_1ADD945A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

float kaldi::quasar::BNNSGraphData::FlatRangeCopy(kaldi::quasar::BNNSGraphData *this, int *a2, unsigned int a3, int a4)
{
  uint64_t WritableDataFloat;
  float result;
  float *v10;
  uint64_t v11;
  int v12;
  _QWORD v13[34];

  if ((*(unsigned int (**)(kaldi::quasar::BNNSGraphData *))(*(_QWORD *)this + 144))(this))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "FlatRangeCopy(const int32 *ptr, int length, int destStart) not implemented for fp16");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  if ((a3 & 0x80000000) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "length >= 0");
    goto LABEL_8;
  }
  WritableDataFloat = kaldi::quasar::BNNSGraphData::GetWritableDataFloat(this);
  if (a3)
  {
    v10 = (float *)(WritableDataFloat + 4 * a4);
    v11 = a3;
    do
    {
      v12 = *a2++;
      result = (float)v12;
      *v10++ = (float)v12;
      --v11;
    }
    while (v11);
  }
  return result;
}

void sub_1ADD94684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

void *kaldi::quasar::BNNSGraphData::FlatRangeCopy(kaldi::quasar::BNNSGraphData *this, const float *a2, unsigned int a3, int a4)
{
  uint64_t WritableDataFloat;
  _QWORD v10[34];

  if ((*(unsigned int (**)(kaldi::quasar::BNNSGraphData *))(*(_QWORD *)this + 144))(this))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "FlatRangeCopy(const float *ptr, int length, int destStart) not implemented for fp16");
LABEL_5:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  if ((a3 & 0x80000000) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "length >= 0");
    goto LABEL_5;
  }
  WritableDataFloat = kaldi::quasar::BNNSGraphData::GetWritableDataFloat(this);
  return memcpy((void *)(WritableDataFloat + 4 * a4), a2, 4 * a3);
}

void sub_1ADD9473C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

float kaldi::quasar::BNNSGraphData::AssignScalar(kaldi::quasar::BNNSGraphData *this, int a2, int a3)
{
  float result;
  _QWORD v7[34];

  if ((*(unsigned int (**)(kaldi::quasar::BNNSGraphData *))(*(_QWORD *)this + 144))(this))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "AssignScalar failed - no support for Float16");
    goto LABEL_6;
  }
  if (*((_DWORD *)this + 14))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "AssignScalar(int32 val, int flatOffset) fail - data not assigned as std::vector<float>");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  result = (float)a2;
  *(float *)(*((_QWORD *)this + 4) + 4 * a3) = (float)a2;
  return result;
}

uint64_t kaldi::quasar::BNNSGraphData::AssignScalar(kaldi::quasar::BNNSGraphData *this, float a2, int a3)
{
  uint64_t result;
  _QWORD v7[34];

  result = (*(uint64_t (**)(kaldi::quasar::BNNSGraphData *))(*(_QWORD *)this + 144))(this);
  if ((_DWORD)result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "AssignScalar failed - no support for Float16");
    goto LABEL_6;
  }
  if (*((_DWORD *)this + 14))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "AssignScalar(float val, int flatOffset) fail - data not assigned as std::vector<float>");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  *(float *)(*((_QWORD *)this + 4) + 4 * a3) = a2;
  return result;
}

float kaldi::quasar::BNNSGraphData::GetFloatScalar(kaldi::quasar::BNNSGraphData *this, int a2)
{
  _QWORD v5[34];

  if ((*(unsigned int (**)(kaldi::quasar::BNNSGraphData *))(*(_QWORD *)this + 144))(this))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "GetFloatScalar failed - no support for Float16");
    goto LABEL_6;
  }
  if (*((_DWORD *)this + 14))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "GetFloatScalar(int flatOffset) fail - data not assigned as std::vector<float>");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  return *(float *)(*((_QWORD *)this + 4) + 4 * a2);
}

uint64_t kaldi::quasar::BNNSGraphData::isDataFloat16(kaldi::quasar::BNNSGraphData *this)
{
  return 0;
}

uint64_t kaldi::quasar::BNNSGraphData::GetNumDims(kaldi::quasar::BNNSGraphData *this)
{
  return (*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 3;
}

uint64_t kaldi::quasar::BNNSGraphData::GetDimSize(kaldi::quasar::BNNSGraphData *this, int a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 9) + 8 * a2);
}

void kaldi::quasar::BNNSGraphData::Reshape(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = (_QWORD *)operator new();
  kaldi::quasar::BNNSGraphData::BNNSGraphData(v6, a2, 0);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<float>>>::__generic_assign[abi:ne180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<std::vector<float>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)(v6 + 4), a1 + 32);
  *a3 = v6;
}

void sub_1ADD949CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

double std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<float>>>::__assign_alt[abi:ne180100]<0ul,std::vector<float>,std::vector<float>>(uint64_t a1, std::vector<int> *this, __n128 *__c)
{
  double result;

  if (*(_DWORD *)(a1 + 24))
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<float>>>::__emplace[abi:ne180100]<0ul,std::vector<float>>(a1, (uint64_t)__c);
  else
    *(_QWORD *)&result = std::vector<int>::__move_assign((uint64_t)this, __c).n128_u64[0];
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<float>>>::__emplace[abi:ne180100]<0ul,std::vector<float>>(uint64_t a1, uint64_t a2)
{
  void *v4;

  if (*(_DWORD *)(a1 + 24) != -1)
  {
    v4 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v4;
      operator delete(v4);
    }
  }
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<float>>>::__generic_assign[abi:ne180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<std::vector<float>>,(std::__variant_detail::_Trait)1> const&>(uint64_t a1, uint64_t a2)
{
  int v3;
  void *v4;

  v3 = *(_DWORD *)(a2 + 24);
  if (*(_DWORD *)(a1 + 24) == -1)
  {
    if (v3 == -1)
      return;
    goto LABEL_7;
  }
  if (v3 != -1)
  {
LABEL_7:
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<float>>>::__assign_alt[abi:ne180100]<0ul,std::vector<float>,std::vector<float> const&>(a1, (char *)a1, a2);
    return;
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  *(_DWORD *)(a1 + 24) = -1;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<float>>>::__assign_alt[abi:ne180100]<0ul,std::vector<float>,std::vector<float> const&>(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3[2];

  if (*(_DWORD *)(a1 + 24))
  {
    v3[0] = a1;
    v3[1] = a3;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<float>>>::__assign_alt[abi:ne180100]<0ul,std::vector<float>,std::vector<float> const&>(std::__variant_detail::__alt<0ul,std::vector<float>> &,std::vector<float> const&)::{unnamed type#1}::operator()[abi:ne180100](v3);
  }
  else if (a2 != (char *)a3)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a2, *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<float>>>::__assign_alt[abi:ne180100]<0ul,std::vector<float>,std::vector<float> const&>(std::__variant_detail::__alt<0ul,std::vector<float>> &,std::vector<float> const&)::{unnamed type#1}::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *__p;
  void *v4;
  uint64_t v5;

  v2 = *a1;
  v1 = a1[1];
  v4 = 0;
  v5 = 0;
  __p = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)v1, *(_QWORD *)(v1 + 8), (uint64_t)(*(_QWORD *)(v1 + 8) - *(_QWORD *)v1) >> 2);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<float>>>::__emplace[abi:ne180100]<0ul,std::vector<float>>(v2, (uint64_t)&__p);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void sub_1ADD94C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *kaldi::quasar::BNNSGraphData::CopyToMatrixT<kaldi::Matrix<float>>(uint64_t a1, int32x2_t *a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD v9[34];

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "CopyToMatrixT(MatType *out) const not implemented for fp16");
    goto LABEL_11;
  }
  if (*(_DWORD *)(a1 + 56))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "CopyToMatrixT(MatType *out) fail - data not assigned with std::vector<float>");
    goto LABEL_11;
  }
  v4 = *(unsigned int **)(a1 + 72);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 80) - (_QWORD)v4) >> 3;
  if (v5 != 1)
  {
    if (v5 == 2)
    {
      v7 = *v4;
      v4 += 2;
      v6 = v7;
      goto LABEL_7;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Unsupported BNNSGraph data shape: ", 34);
    std::ostream::operator<<();
LABEL_11:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  v6 = 1;
LABEL_7:
  kaldi::Matrix<float>::Resize(a2, v6, *v4, 1, 1);
  if (*(_DWORD *)(a1 + 56))
    std::__throw_bad_variant_access[abi:ne180100]();
  return memcpy(*(void **)a2, *(const void **)(a1 + 32), *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32));
}

void sub_1ADD94D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

void *kaldi::quasar::BNNSGraphData::CopyToMatrixT<kaldi::CuMatrix<float>>(uint64_t a1, int32x2_t *a2)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD v9[34];

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "CopyToMatrixT(MatType *out) const not implemented for fp16");
    goto LABEL_11;
  }
  if (*(_DWORD *)(a1 + 56))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "CopyToMatrixT(MatType *out) fail - data not assigned with std::vector<float>");
    goto LABEL_11;
  }
  v4 = *(unsigned int **)(a1 + 72);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 80) - (_QWORD)v4) >> 3;
  if (v5 != 1)
  {
    if (v5 == 2)
    {
      v7 = *v4;
      v4 += 2;
      v6 = v7;
      goto LABEL_7;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Unsupported BNNSGraph data shape: ", 34);
    std::ostream::operator<<();
LABEL_11:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  v6 = 1;
LABEL_7:
  kaldi::CuMatrix<float>::Resize(a2, v6, *v4, 1, 1);
  if (*(_DWORD *)(a1 + 56))
    std::__throw_bad_variant_access[abi:ne180100]();
  return memcpy(*(void **)&a2[1], *(const void **)(a1 + 32), *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32));
}

void sub_1ADD94E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

_QWORD *std::vector<long long>::__init_with_size[abi:ne180100]<std::__wrap_iter<long long const*>,std::__wrap_iter<long long const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1ADD94EC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(std::string *this, char **a2)
{
  char *v3;
  char *v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = *a2;
  v4 = v3 - 1;
  while (*++v4)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

void sub_1ADD94F20(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>,std::__map_value_compare<void *,std::__value_type<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>,std::less<void *>,true>,std::allocator<std::__value_type<void *,kaldi::quasar::BNNSGraphNetworkPlan::MemoryCallbackContextInfo>>>::__emplace_unique_key_args<void *,std::piecewise_construct_t const&,std::tuple<void * const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x38uLL);
    v11[4] = **a4;
    v11[5] = 0;
    v11[6] = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

_QWORD *std::vector<std::unique_ptr<kaldi::quasar::BNNSGraphData>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1ADD95064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::unique_ptr<BNNSTensor>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1ADD950E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::unique_ptr<BNNSTensor>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<BNNSTensor>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<BNNSTensor>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<std::unique_ptr<BNNSTensor>>::__base_destruct_at_end[abi:ne180100](uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = result;
  v4 = *(_QWORD **)(result + 8);
  while (v4 != a2)
  {
    v5 = *--v4;
    result = v5;
    *v4 = 0;
    if (v5)
      result = MEMORY[0x1AF44D190](result, 0x10D0C40E3B58404);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

unsigned __int8 *std::__find_impl[abi:ne180100]<std::string const*,std::string const*,char const*,std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, const char **a3)
{
  unsigned __int8 *v3;
  const char *v5;
  size_t v6;
  unsigned __int8 *v7;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *a3;
    v6 = strlen(*a3);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((_QWORD *)v3 + 1))
        {
          if (v6 == -1)
LABEL_14:
            std::string::__throw_out_of_range[abi:ne180100]();
          v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, v5, v6))
            return v3;
        }
      }
      else if (v6 == v3[23])
      {
        v7 = v3;
        if (v6 == -1)
          goto LABEL_14;
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

uint64_t *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::unique_ptr<kaldi::quasar::BNNSGraphData> *,std::unique_ptr<kaldi::quasar::BNNSGraphData> *,std::back_insert_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>(uint64_t a1, uint64_t *a2, uint64_t *a3, char **a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char **v10;

  v4 = a2;
  v10 = a4;
  if (a2 == a3)
    return a2;
  v5 = a3;
  do
  {
    v6 = *v4;
    *v4 = 0;
    v9 = v6;
    std::back_insert_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::operator=[abi:ne180100](&v10, &v9);
    v7 = v9;
    v9 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    ++v4;
  }
  while (v4 != v5);
  return v5;
}

void sub_1ADD952C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

char ***std::back_insert_iterator<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::operator=[abi:ne180100](char ***a1, uint64_t *a2)
{
  char **v4;
  char *v5;
  char **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  _QWORD v26[2];
  char *v27;
  char *v28;
  uint64_t v29;

  v4 = *a1;
  v5 = (*a1)[1];
  v6 = *a1;
  v9 = (unint64_t)v6[2];
  v7 = (uint64_t)(v6 + 2);
  v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    v12 = (v5 - *v4) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v13 = v8 - (_QWORD)*v4;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v29 = v7;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v7, v15);
    else
      v16 = 0;
    v17 = &v16[8 * v12];
    v18 = &v16[8 * v15];
    v28 = v18;
    v19 = *a2;
    *a2 = 0;
    *(_QWORD *)v17 = v19;
    v11 = v17 + 8;
    v27 = v17 + 8;
    v21 = *v4;
    v20 = v4[1];
    if (v20 == *v4)
    {
      v23 = v4[1];
    }
    else
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *(_QWORD *)v20 = 0;
        *((_QWORD *)v17 - 1) = v22;
        v17 -= 8;
      }
      while (v20 != v21);
      v23 = *v4;
      v20 = v4[1];
      v11 = v27;
      v18 = v28;
    }
    *v4 = v17;
    v26[0] = v23;
    v26[1] = v23;
    v4[1] = v11;
    v27 = v20;
    v24 = v4[2];
    v4[2] = v18;
    v28 = v24;
    std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)v26);
  }
  else
  {
    v10 = *a2;
    *a2 = 0;
    *(_QWORD *)v5 = v10;
    v11 = v5 + 8;
  }
  v4[1] = v11;
  return a1;
}

uint64_t quasar::DatabasePhraseBook::DatabasePhraseBook(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6;
  sqlite3_stmt **v7;
  sqlite3 **v8;
  uint64_t *v9;
  const char *v10;
  _QWORD *v11;
  size_t v12;
  char *v13;
  char *v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  size_t v19;
  char *v20;
  _QWORD *exception;
  uint64_t v22;
  _QWORD *v24;
  const char *v25;
  size_t v26;
  int v27;
  void *v28[2];
  char v29;
  std::string v30;
  _BYTE v31[32];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;

  v6 = quasar::GenericPhraseBook::GenericPhraseBook(a1, a3, a4);
  *(_QWORD *)v6 = &off_1E5D36920;
  *(_OWORD *)(v6 + 40) = 0u;
  v7 = (sqlite3_stmt **)(v6 + 40);
  v8 = (sqlite3 **)(v6 + 48);
  *(_OWORD *)(v6 + 56) = 0u;
  v9 = (uint64_t *)(v6 + 56);
  *(_QWORD *)(v6 + 72) = 0;
  v10 = (const char *)a2;
  if (*(char *)(a2 + 23) < 0)
    v10 = *(const char **)a2;
  if (sqlite3_open_v2(v10, v8, 1, 0))
  {
    if (quasar::gLogLevel >= 4)
    {
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v32 = 0u;
      memset(v31, 0, sizeof(v31));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
      v15 = sqlite3_errmsg(*v8);
      v16 = strlen(v15);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v15, v16);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v17);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v31);
    }
    sqlite3_close(*v8);
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v32 = 0u;
    memset(v31, 0, sizeof(v31));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"failed to open database file", 28);
    v19 = strlen(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v10, v19);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v31);
  }
  if (quasar::gLogLevel >= 4)
  {
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v32 = 0u;
    memset(v31, 0, sizeof(v31));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"connected to database", 21);
    v12 = strlen(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v10, v12);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v31);
  }
  if (sqlite3_prepare_v2(*v8, "SELECT column, dictionary, max_length FROM decompress", -1, v7, 0))
  {
    v20 = (char *)sqlite3_errmsg(*v8);
    std::string::basic_string[abi:ne180100]<0>(v31, v20);
    exception = __cxa_allocate_exception(0x18uLL);
    v22 = *(_QWORD *)&v31[16];
    *(_OWORD *)exception = *(_OWORD *)v31;
    exception[2] = v22;
    memset(v31, 0, 24);
  }
  while (sqlite3_step(*v7) == 100)
  {
    v13 = (char *)sqlite3_column_text(*v7, 0);
    std::string::basic_string[abi:ne180100]<0>(&v30, v13);
    v14 = (char *)sqlite3_column_text(*v7, 1);
    std::string::basic_string[abi:ne180100]<0>(v28, v14);
    v27 = 0;
    v27 = sqlite3_column_int(*v7, 2);
    _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_iEEC2B8ne180100IJLm0ELm1ELm2EEJS8_S8_iEJEJEJRS8_SB_RiEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_((std::string *)v31, (__int128 *)&v30, (__int128 *)v28, &v27);
    std::vector<std::tuple<std::string,std::string,int>>::push_back[abi:ne180100](v9, (__int128 *)v31);
    if (SHIBYTE(v32) < 0)
      operator delete(*(void **)&v31[24]);
    if ((v31[23] & 0x80000000) != 0)
      operator delete(*(void **)v31);
    if (v29 < 0)
      operator delete(v28[0]);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
  }
  sqlite3_reset(*v7);
  if (sqlite3_prepare_v2(*v8, "SELECT output, length(output), metadata, length(metadata) FROM phrasebook WHERE input=? ORDER BY rowid LIMIT ?", -1, v7, 0))
  {
    if (quasar::gLogLevel >= 1)
    {
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v32 = 0u;
      memset(v31, 0, sizeof(v31));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"SQLITE Querying error: ", 23);
      v25 = sqlite3_errmsg(*v8);
      v26 = strlen(v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v31);
    }
    sqlite3_close(*v8);
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v32 = 0u;
    memset(v31, 0, sizeof(v31));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Could not prepare SQLite Statement", 34);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v31);
  }
  return a1;
}

void sub_1ADD95A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  JUMPOUT(0x1ADD95A28);
}

void sub_1ADD95A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  uint64_t v17;

  std::vector<std::tuple<std::string,std::string,int>>::__destroy_vector::operator()[abi:ne180100](&a17);
  *(_QWORD *)v17 = &unk_1E5D364F0;
  a17 = (void **)(v17 + 16);
  std::vector<quasar::RegexReplacementRule>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

void **std::vector<std::tuple<std::string,std::string,int>>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  void *v19[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - *a1) >> 3);
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) > 0x492492492492492)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x249249249249249)
      v14 = 0x492492492492492;
    else
      v14 = v12;
    v19[4] = result;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>((uint64_t)result, v14);
    else
      v15 = 0;
    v16 = &v15[56 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[56 * v14];
    v17 = *a2;
    *((_QWORD *)v16 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v16 = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v16 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *((_DWORD *)v16 + 12) = *((_DWORD *)a2 + 12);
    v19[2] = v16 + 56;
    std::vector<std::tuple<std::string,std::string,int>>::__swap_out_circular_buffer(a1, v19);
    v10 = a1[1];
    result = std::__split_buffer<std::tuple<std::string,std::string,int>>::~__split_buffer(v19);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *(_DWORD *)(v7 + 48) = *((_DWORD *)a2 + 12);
    v10 = v7 + 56;
    a1[1] = v7 + 56;
  }
  a1[1] = v10;
  return result;
}

void sub_1ADD95BD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::tuple<std::string,std::string,int>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void quasar::DatabasePhraseBook::~DatabasePhraseBook(sqlite3_stmt **this)
{
  void **v2;

  *this = (sqlite3_stmt *)&off_1E5D36920;
  sqlite3_finalize(this[5]);
  sqlite3_close(this[6]);
  v2 = (void **)(this + 7);
  std::vector<std::tuple<std::string,std::string,int>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *this = (sqlite3_stmt *)&unk_1E5D364F0;
  v2 = (void **)(this + 2);
  std::vector<quasar::RegexReplacementRule>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void quasar::DatabasePhraseBook::getPhraseBook(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  std::string __p;

  v8 = operator new();
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  quasar::DatabasePhraseBook::DatabasePhraseBook(v8, (uint64_t)&__p, a2, a3);
  std::shared_ptr<quasar::DatabasePhraseBook>::shared_ptr[abi:ne180100]<quasar::DatabasePhraseBook,void>(a4, v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1ADD95D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1AF44D190](v14, 0x10A1C40A30CF1A8);
  _Unwind_Resume(a1);
}

_QWORD *quasar::DatabasePhraseBook::inflateData@<X0>(uint64_t a1@<X0>, Bytef *a2@<X1>, const Bytef *a3@<X2>, uInt a4@<W3>, uInt a5@<W4>, _QWORD *a6@<X8>)
{
  size_t v11;
  Bytef *v12;
  int v13;
  uint64_t v15;
  z_stream strm;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](a1, a5);
  v12 = (Bytef *)&v15 - ((v11 + 15) & 0x1FFFFFFF0);
  if (v13 >= 1)
    bzero((char *)&v15 - ((v11 + 15) & 0x1FFFFFFF0), v11);
  memset(&strm.zalloc, 0, 24);
  strm.avail_in = a4;
  strm.next_in = a2;
  strm.avail_out = a5;
  strm.next_out = v12;
  inflateInit2_(&strm, -15, "1.2.12", 112);
  if ((char)a3[23] < 0)
    a3 = *(const Bytef **)a3;
  inflateSetDictionary(&strm, a3, 8u);
  inflate(&strm, 4);
  inflateEnd(&strm);
  return std::string::basic_string[abi:ne180100]<0>(a6, (char *)v12);
}

uint64_t quasar::DatabasePhraseBook::getEntries@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, std::vector<std::pair<std::string, std::string>> *a4@<X8>)
{
  sqlite3_stmt *v7;
  size_t v8;
  size_t v9;
  void **v10;
  int v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  int v20;
  Bytef *v22;
  uint64_t v23;
  uInt v24;
  Bytef *v25;
  uint64_t v26;
  uInt v27;
  void *v28;
  _QWORD *v30;
  const char *v31;
  size_t v32;
  _QWORD *v33;
  const char *v34;
  size_t v35;
  std::string v36;
  std::string v37;
  void *v38[2];
  uint64_t v39;
  void *v40[2];
  uint64_t v41;
  void *__p[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  a4->__begin_ = 0;
  a4->__end_ = 0;
  a4->__end_cap_.__value_ = 0;
  v7 = *(sqlite3_stmt **)(a1 + 40);
  v8 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v9 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (_QWORD *)*a2;
    v9 = v8;
  }
  quasar::GenericPhraseBook::normalizeKey(a2, v9, a1, (uint64_t)__p);
  if ((SBYTE7(v43) & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  v11 = sqlite3_bind_text(v7, 1, (const char *)v10, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  if (SBYTE7(v43) < 0)
    operator delete(__p[0]);
  if (v11)
  {
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"SQLite Binding error: ", 22);
    v31 = sqlite3_errmsg(*(sqlite3 **)(a1 + 48));
    v32 = strlen(v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  if (sqlite3_bind_int(*(sqlite3_stmt **)(a1 + 40), 2, a3))
  {
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"SQLite Binding error: ", 22);
    v34 = sqlite3_errmsg(*(sqlite3 **)(a1 + 48));
    v35 = strlen(v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
LABEL_11:
  if (sqlite3_step(*(sqlite3_stmt **)(a1 + 40)) == 100)
  {
    v12 = (char *)sqlite3_column_text(*(sqlite3_stmt **)(a1 + 40), 0);
    std::string::basic_string[abi:ne180100]<0>(v40, v12);
    v13 = (char *)sqlite3_column_blob(*(sqlite3_stmt **)(a1 + 40), 2);
    std::string::basic_string[abi:ne180100]<0>(v38, v13);
    v14 = *(_QWORD *)(a1 + 56);
    v15 = *(_QWORD *)(a1 + 64);
    while (1)
    {
      if (v14 == v15)
      {
        std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)__p, (__int128 *)v40, (__int128 *)v38);
        std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](a4, (__int128 *)__p);
        if (SHIBYTE(v44) < 0)
          operator delete(*((void **)&v43 + 1));
        if (SBYTE7(v43) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v39) < 0)
          operator delete(v38[0]);
        if (SHIBYTE(v41) < 0)
          operator delete(v40[0]);
        goto LABEL_11;
      }
      v16 = (_OWORD *)(v14 + 24);
      if (*(char *)(v14 + 23) < 0)
      {
        v18 = *(_QWORD *)(v14 + 8);
        if (v18 == 6)
        {
          v17 = *(_QWORD **)v14;
          goto LABEL_22;
        }
        if (v18 != 8 || **(_QWORD **)v14 != 0x617461646174656DLL)
          goto LABEL_54;
      }
      else
      {
        if (*(_BYTE *)(v14 + 23) != 8)
        {
          v17 = (_QWORD *)v14;
          if (*(_BYTE *)(v14 + 23) != 6)
            goto LABEL_54;
LABEL_22:
          v19 = *(_DWORD *)v17;
          v20 = *((unsigned __int16 *)v17 + 2);
          if (v19 != 1886680431 || v20 != 29813)
          {
LABEL_54:
            v57 = 0u;
            v58 = 0u;
            v55 = 0u;
            v56 = 0u;
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            v49 = 0u;
            v50 = 0u;
            v47 = 0u;
            v48 = 0u;
            v45 = 0u;
            v46 = 0u;
            v43 = 0u;
            v44 = 0u;
            *(_OWORD *)__p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown column provided for decompression.", 42);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
          }
          v22 = (Bytef *)sqlite3_column_text(*(sqlite3_stmt **)(a1 + 40), 0);
          v23 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 40), 1);
          v24 = v23;
          if (*(char *)(v14 + 47) < 0)
          {
            std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)(v14 + 24), *(_QWORD *)(v14 + 32));
          }
          else
          {
            *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *v16;
            v36.__r_.__value_.__r.__words[2] = *(_QWORD *)(v14 + 40);
          }
          quasar::DatabasePhraseBook::inflateData(v23, v22, (const Bytef *)&v36, v24, *(_DWORD *)(v14 + 48), __p);
          if (SHIBYTE(v41) < 0)
            operator delete(v40[0]);
          *(_OWORD *)v40 = *(_OWORD *)__p;
          v41 = v43;
          BYTE7(v43) = 0;
          LOBYTE(__p[0]) = 0;
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          {
            v28 = (void *)v36.__r_.__value_.__r.__words[0];
LABEL_42:
            operator delete(v28);
            goto LABEL_43;
          }
          goto LABEL_43;
        }
        if (*(_QWORD *)v14 != 0x617461646174656DLL)
          goto LABEL_54;
      }
      v25 = (Bytef *)sqlite3_column_blob(*(sqlite3_stmt **)(a1 + 40), 2);
      v26 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 40), 3);
      v27 = v26;
      if (*(char *)(v14 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)(v14 + 24), *(_QWORD *)(v14 + 32));
      }
      else
      {
        *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *v16;
        v37.__r_.__value_.__r.__words[2] = *(_QWORD *)(v14 + 40);
      }
      quasar::DatabasePhraseBook::inflateData(v26, v25, (const Bytef *)&v37, v27, *(_DWORD *)(v14 + 48), __p);
      if (SHIBYTE(v39) < 0)
        operator delete(v38[0]);
      *(_OWORD *)v38 = *(_OWORD *)__p;
      v39 = v43;
      BYTE7(v43) = 0;
      LOBYTE(__p[0]) = 0;
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      {
        v28 = (void *)v37.__r_.__value_.__r.__words[0];
        goto LABEL_42;
      }
LABEL_43:
      v14 += 56;
    }
  }
  sqlite3_clear_bindings(*(sqlite3_stmt **)(a1 + 40));
  return sqlite3_reset(*(sqlite3_stmt **)(a1 + 40));
}

void sub_1ADD96394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    JUMPOUT(0x1ADD963A4);
  JUMPOUT(0x1ADD963B0);
}

void sub_1ADD963AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31)
{
  if (a22 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

std::string *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES8_iEEC2B8ne180100IJLm0ELm1ELm2EEJS8_S8_iEJEJEJRS8_SB_RiEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(std::string *this, __int128 *a2, __int128 *a3, _DWORD *a4)
{
  __int128 v7;
  std::string *v8;
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  v8 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = *a4;
  return this;
}

void sub_1ADD96470(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::vector<std::tuple<std::string,std::string,int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::tuple<std::string,std::string,int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::string,std::string,int>>,std::reverse_iterator<std::tuple<std::string,std::string,int>*>,std::reverse_iterator<std::tuple<std::string,std::string,int>*>,std::reverse_iterator<std::tuple<std::string,std::string,int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::string,std::string,int>>,std::reverse_iterator<std::tuple<std::string,std::string,int>*>,std::reverse_iterator<std::tuple<std::string,std::string,int>*>,std::reverse_iterator<std::tuple<std::string,std::string,int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 56);
      *(_QWORD *)(v8 - 40) = *(_QWORD *)(a3 - 40);
      *(_OWORD *)(v8 - 56) = v9;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      v10 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v10;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 - 8);
      v8 -= 56;
      v7 -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v8;
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,std::string,int>>,std::reverse_iterator<std::tuple<std::string,std::string,int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,std::string,int>>,std::reverse_iterator<std::tuple<std::string,std::string,int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,std::string,int>>,std::reverse_iterator<std::tuple<std::string,std::string,int>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,std::string,int>>,std::reverse_iterator<std::tuple<std::string,std::string,int>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<std::tuple<std::string,std::string,int>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::tuple<std::string,std::string,int>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::tuple<std::string,std::string,int>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 56;
    std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v4, i - 56);
  }
}

_QWORD *std::shared_ptr<quasar::DatabasePhraseBook>::shared_ptr[abi:ne180100]<quasar::DatabasePhraseBook,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5D46230;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1ADD967A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<quasar::DatabasePhraseBook>::reset[abi:ne180100]((sqlite3_stmt ***)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<quasar::DatabasePhraseBook *,std::shared_ptr<quasar::DatabasePhraseBook>::__shared_ptr_default_delete<quasar::DatabasePhraseBook,quasar::DatabasePhraseBook>,std::allocator<quasar::DatabasePhraseBook>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

sqlite3_stmt **std::__shared_ptr_pointer<quasar::DatabasePhraseBook *,std::shared_ptr<quasar::DatabasePhraseBook>::__shared_ptr_default_delete<quasar::DatabasePhraseBook,quasar::DatabasePhraseBook>,std::allocator<quasar::DatabasePhraseBook>>::__on_zero_shared(uint64_t a1)
{
  sqlite3_stmt **result;

  result = *(sqlite3_stmt ***)(a1 + 24);
  if (result)
  {
    quasar::DatabasePhraseBook::~DatabasePhraseBook(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::DatabasePhraseBook *,std::shared_ptr<quasar::DatabasePhraseBook>::__shared_ptr_default_delete<quasar::DatabasePhraseBook,quasar::DatabasePhraseBook>,std::allocator<quasar::DatabasePhraseBook>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

sqlite3_stmt **std::unique_ptr<quasar::DatabasePhraseBook>::reset[abi:ne180100](sqlite3_stmt ***a1, sqlite3_stmt **a2)
{
  sqlite3_stmt **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::DatabasePhraseBook::~DatabasePhraseBook(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

MStringTokUtil *MStringTokUtil::strtok_r(MStringTokUtil *this, char *__s, char *a3, char **a4)
{
  MStringTokUtil *v6;
  int v7;
  int v8;
  _BOOL4 v9;
  uint64_t v10;
  int v11;
  int v12;
  MStringTokUtil *v13;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  _BYTE *v18;
  _BYTE *v19;
  int v20;

  if (!a3)
    return 0;
  v6 = this;
  if (this || (v6 = *(MStringTokUtil **)a3) != 0)
  {
    if (__s)
      v7 = strlen(__s);
    else
      v7 = 0;
    v8 = *(unsigned __int8 *)v6;
    if (*(_BYTE *)v6)
    {
      while (v7 >= 1)
      {
        if (v8 == *__s)
        {
          v9 = 1;
LABEL_16:
          v12 = *((unsigned __int8 *)v6 + 1);
          v6 = (MStringTokUtil *)((char *)v6 + 1);
          v8 = v12;
          if (!v9)
            goto LABEL_20;
        }
        else
        {
          v10 = 1;
          while (v7 != v10)
          {
            v11 = __s[v10++];
            if (v8 == v11)
            {
              v9 = v10 - 1 < v7;
              goto LABEL_16;
            }
          }
          if (v10 >= v7)
          {
LABEL_20:
            if (!v8)
              goto LABEL_27;
            break;
          }
        }
        if (!v8)
          goto LABEL_20;
      }
      v13 = v6;
      while (1)
      {
        v14 = v7;
        v15 = __s;
        if (v7 >= 1)
          break;
LABEL_25:
        v17 = *((unsigned __int8 *)v13 + 1);
        v13 = (MStringTokUtil *)((char *)v13 + 1);
        v8 = v17;
        if (!v17)
        {
          v18 = 0;
          goto LABEL_31;
        }
      }
      while (1)
      {
        v16 = *v15++;
        if (v8 == v16)
          break;
        if (!--v14)
          goto LABEL_25;
      }
      *(_BYTE *)v13 = 0;
      v20 = *((unsigned __int8 *)v13 + 1);
      v19 = (char *)v13 + 1;
      if (v20)
        v18 = v19;
      else
        v18 = 0;
    }
    else
    {
LABEL_27:
      v18 = 0;
      v6 = 0;
    }
LABEL_31:
    *(_QWORD *)a3 = v18;
  }
  return v6;
}

uint64_t quasar::Munger::Munger(uint64_t a1, uint64_t a2)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[17];
  _QWORD v10[2];
  _BYTE v11[408];
  _QWORD v12[20];

  v12[19] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::ifstream::basic_ifstream(v10);
  if (*(_DWORD *)&v11[*(_QWORD *)(v10[0] - 24) + 16])
  {
    memset(v9, 0, sizeof(v9));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Cannot read munge file: ", 24);
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = a2;
    else
      v7 = *(_QWORD *)a2;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v9);
  }
  quasar::Munger::init((uint64_t **)a1, v10);
  v10[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1AF44CA70](v11);
  std::istream::~istream();
  MEMORY[0x1AF44D094](v12);
  return a1;
}

void sub_1ADD96B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void quasar::Munger::init(uint64_t **a1, _QWORD *a2)
{
  uint64_t v4;
  std::locale::id *v5;
  const std::locale::facet *v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t *v9;
  const void *v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t **v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  int64x2_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  int64x2_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  int v48;
  std::locale **v49;
  uint64_t v50;
  std::locale v51[2];
  _QWORD v52[4];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  std::string *v67[3];
  std::string v68;
  std::locale *v69;
  int64x2_t v70;
  char *v71;
  uint64_t v72;

  memset(&v68, 0, sizeof(v68));
  v4 = (uint64_t)(a1 + 2);
  v5 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
    v6 = std::locale::use_facet(v51, v5);
    v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(v51);
    v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v68, v7);
    if ((*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) != 0)
      break;
    std::string::basic_string[abi:ne180100]<0>(v51, " ");
    quasar::splitAndTrimNoEmpty(&v68, (char *)v51, v67);
    if (SHIBYTE(v52[0]) < 0)
      operator delete(v51[0].__locale_);
    if (v67[0] != v67[1])
    {
      memset(v52, 0, sizeof(v52));
      *(_OWORD *)&v51[0].__locale_ = 0u;
      quasar::MungeRuleData::init((uint64_t)v51, (uint64_t)&v68, v67);
      if (v52[2] - v52[1] != 24
        || 0xAAAAAAAAAAAAAAABLL * ((v51[1].__locale_ - v51[0].__locale_) >> 3) > 1
        || *(_WORD *)((char *)&v53 + 1))
      {
        v17 = operator new();
        *(_QWORD *)(v17 + 56) = 0;
        *(_QWORD *)v17 = &unk_1E5D350B0;
        *(_OWORD *)(v17 + 24) = 0u;
        *(_OWORD *)(v17 + 40) = 0u;
        *(_OWORD *)(v17 + 8) = 0u;
        std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v17 + 8));
        *(_OWORD *)(v17 + 8) = *(_OWORD *)&v51[0].__locale_;
        *(_QWORD *)(v17 + 24) = v52[0];
        v51[1].__locale_ = 0;
        v52[0] = 0;
        v51[0].__locale_ = 0;
        std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(v17 + 32));
        *(_OWORD *)(v17 + 32) = *(_OWORD *)&v52[1];
        *(_QWORD *)(v17 + 48) = v52[3];
        memset(&v52[1], 0, 24);
        *(_WORD *)(v17 + 56) = v53;
        *(_BYTE *)(v17 + 58) = BYTE2(v53);
        v19 = a1[1];
        v18 = (unint64_t)a1[2];
        if ((unint64_t)v19 >= v18)
        {
          v21 = v19 - *a1;
          if ((unint64_t)(v21 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v22 = v18 - (_QWORD)*a1;
          v23 = v22 >> 2;
          if (v22 >> 2 <= (unint64_t)(v21 + 1))
            v23 = v21 + 1;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
            v24 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v24 = v23;
          v72 = v4;
          if (v24)
            v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v24);
          else
            v25 = 0;
          v26 = (uint64_t *)&v25[8 * v21];
          v27 = &v25[8 * v24];
          v71 = v27;
          *v26 = v17;
          v20 = v26 + 1;
          v70.i64[1] = (uint64_t)(v26 + 1);
          v29 = *a1;
          v28 = a1[1];
          if (v28 == *a1)
          {
            v31 = vdupq_n_s64((unint64_t)v28);
          }
          else
          {
            do
            {
              v30 = *--v28;
              *v28 = 0;
              *--v26 = v30;
            }
            while (v28 != v29);
            v31 = *(int64x2_t *)a1;
            v20 = (uint64_t *)v70.i64[1];
            v27 = v71;
          }
          *a1 = v26;
          a1[1] = v20;
          v70 = v31;
          v32 = a1[2];
          a1[2] = (uint64_t *)v27;
          v71 = (char *)v32;
          v69 = (std::locale *)v31.i64[0];
          std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v69);
        }
        else
        {
          *v19 = v17;
          v20 = v19 + 1;
        }
        a1[1] = v20;
      }
      else
      {
        v9 = a1[1];
        if (*a1 == v9
          || (v10 = (const void *)*(v9 - 1)) == 0
        {
          v13 = (uint64_t **)operator new();
          v12 = v13;
          v13[2] = 0;
          *v13 = (uint64_t *)&unk_1E5D35990;
          v13[1] = (uint64_t *)(v13 + 2);
          v13[5] = 0;
          v13[6] = 0;
          v13[3] = 0;
          v13[4] = (uint64_t *)(v13 + 5);
          v15 = a1[1];
          v14 = (unint64_t)a1[2];
          if ((unint64_t)v15 >= v14)
          {
            v33 = v15 - *a1;
            if ((unint64_t)(v33 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v34 = v14 - (_QWORD)*a1;
            v35 = v34 >> 2;
            if (v34 >> 2 <= (unint64_t)(v33 + 1))
              v35 = v33 + 1;
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
              v36 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v36 = v35;
            v72 = v4;
            if (v36)
              v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v36);
            else
              v37 = 0;
            v38 = &v37[8 * v33];
            v39 = &v37[8 * v36];
            v71 = v39;
            *(_QWORD *)v38 = v12;
            v16 = (uint64_t *)(v38 + 8);
            v70.i64[1] = (uint64_t)(v38 + 8);
            v41 = *a1;
            v40 = a1[1];
            if (v40 == *a1)
            {
              v43 = vdupq_n_s64((unint64_t)v40);
            }
            else
            {
              do
              {
                v42 = *--v40;
                *v40 = 0;
                *((_QWORD *)v38 - 1) = v42;
                v38 -= 8;
              }
              while (v40 != v41);
              v43 = *(int64x2_t *)a1;
              v16 = (uint64_t *)v70.i64[1];
              v39 = v71;
            }
            *a1 = (uint64_t *)v38;
            a1[1] = v16;
            v70 = v43;
            v44 = a1[2];
            a1[2] = (uint64_t *)v39;
            v71 = (char *)v44;
            v69 = (std::locale *)v43.i64[0];
            std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v69);
          }
          else
          {
            *v15 = (uint64_t)v13;
            v16 = v15 + 1;
          }
          a1[1] = v16;
        }
        v69 = (std::locale *)v52[1];
        v45 = std::__tree<std::__value_type<std::string,quasar::MungeRuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MungeRuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::MungeRuleData>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12 + 1, (const void **)v52[1], (uint64_t)&std::piecewise_construct, (__int128 **)&v69);
        if (v45 + 7 != (uint64_t *)v51)
        {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(v45 + 7), (std::string *)v51[0].__locale_, (__int128 *)v51[1].__locale_, 0xAAAAAAAAAAAAAAABLL * ((v51[1].__locale_ - v51[0].__locale_) >> 3));
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(v45 + 10), (std::string *)v52[1], (__int128 *)v52[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52[2] - v52[1]) >> 3));
        }
        *((_WORD *)v45 + 52) = v53;
        *((_BYTE *)v45 + 106) = BYTE2(v53);
        std::__tree<std::vector<std::string>>::__emplace_unique_key_args<std::vector<std::string>,std::vector<std::string> const&>(v12 + 4, (const void ***)v51, (__int128 **)v51);
      }
      v69 = (std::locale *)&v52[1];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
      v69 = v51;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v69);
    }
    v51[0].__locale_ = (std::locale::__imp *)v67;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v51);
  }
  if (quasar::gLogLevel >= 4)
  {
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    memset(v52, 0, sizeof(v52));
    *(_OWORD *)&v51[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"Number of munge rules: ", 23);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v51);
  }
  v47 = *a1;
  v46 = a1[1];
  if (v47 != v46)
  {
    v48 = quasar::gLogLevel;
    do
    {
      if (v48 >= 6)
      {
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        memset(v52, 0, sizeof(v52));
        *(_OWORD *)&v51[0].__locale_ = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v51);
        (*(void (**)(std::locale **__return_ptr))(*(_QWORD *)*v47 + 24))(&v69);
        if (v70.i8[15] >= 0)
          v49 = &v69;
        else
          v49 = (std::locale **)v69;
        if (v70.i8[15] >= 0)
          v50 = v70.u8[15];
        else
          v50 = v70.i64[0];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v49, v50);
        if (v70.i8[15] < 0)
          operator delete(v69);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v51);
        v48 = quasar::gLogLevel;
      }
      ++v47;
    }
    while (v47 != v46);
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
}

void sub_1ADD97194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 145) < 0)
    operator delete(*(void **)(v16 - 168));
  _Unwind_Resume(exception_object);
}

uint64_t quasar::Munger::Munger(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  quasar::Munger::init((uint64_t **)a1, a2);
  return a1;
}

void sub_1ADD972A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::Munger::~Munger(void **this)
{
  void **v1;

  v1 = this;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void quasar::MungeRuleData::init(uint64_t a1, uint64_t a2, std::string **a3)
{
  std::string *v3;
  std::string *v4;
  const std::string *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  const std::string *v12;
  __int128 *v13;
  int v14;
  const std::string *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  int v23;
  unsigned __int16 *v24;
  int v25;
  __int128 *v26;
  __int128 *v27;
  void **v28;
  int v29;
  _DWORD *v30;
  BOOL v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  v3 = *a3;
  v4 = a3[1];
  if (*a3 == v4)
  {
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v39, "This should not be called with empty tokens");
    goto LABEL_62;
  }
  do
  {
    if (quasar::hasWhitespace((char *)v3))
    {
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v39 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Munge line with non-space whitespace: ", 38);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v34, a2);
      goto LABEL_62;
    }
    ++v3;
  }
  while (v3 != v4);
  if (std::stod(*a3, 0) != 1.0)
  {
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Probabilistic munge rules not implemented (probability must be 1.0): ", 69);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v37, a2);
    goto LABEL_62;
  }
  v8 = *a3;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3) < 2)
    goto LABEL_25;
  v9 = 0;
  v10 = 0;
  v11 = 1;
  do
  {
    v12 = &v8[v9];
    v13 = (__int128 *)&v12[1];
    v14 = SHIBYTE(v12[1].__r_.__value_.__r.__words[2]);
    if (v14 < 0)
    {
      if (v12[1].__r_.__value_.__l.__size_ != 2)
        goto LABEL_13;
      v15 = *(const std::string **)v13;
    }
    else
    {
      v15 = v12 + 1;
      if (v14 != 2)
        goto LABEL_13;
    }
    if (LOWORD(v15->__r_.__value_.__l.__data_) == 11580)
    {
      ++v10;
      goto LABEL_23;
    }
LABEL_13:
    if (v10)
    {
      v16 = *(_QWORD *)(a1 + 32);
      v17 = (uint64_t *)(a1 + 24);
      if (v16 >= *(_QWORD *)(a1 + 40))
      {
        v18 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v17, v13);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v17, v13);
        v18 = v16 + 24;
      }
      *(_QWORD *)(a1 + 32) = v18;
    }
    else
    {
      v19 = *(_QWORD *)(a1 + 8);
      if (v19 >= *(_QWORD *)(a1 + 16))
      {
        v20 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a1, v13);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1, v13);
        v20 = v19 + 24;
      }
      v10 = 0;
      *(_QWORD *)(a1 + 8) = v20;
    }
LABEL_23:
    ++v11;
    v8 = *a3;
    ++v9;
  }
  while (0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3) > v11);
  if (v10 > 1)
  {
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v39, "Munge line with more than 1 '<-'");
LABEL_62:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v39);
  }
LABEL_25:
  *(_BYTE *)(a1 + 48) = std::__find_impl[abi:ne180100]<std::string *,std::string *,char [9],std::__identity>(*(unsigned __int8 **)a1, *(unsigned __int8 **)(a1 + 8), "/REJECT/") != *(unsigned __int8 **)(a1 + 8);
  v22 = *(_QWORD *)(a1 + 24);
  v21 = *(__int128 **)(a1 + 32);
  if ((__int128 *)v22 == v21)
  {
    *(_BYTE *)(a1 + 49) = 0;
LABEL_66:
    *(_BYTE *)(a1 + 50) = 0;
LABEL_67:
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Munge line with empty rhs: ", 27);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v38, a2);
    goto LABEL_62;
  }
  v23 = *(char *)(v22 + 23);
  if (v23 < 0)
  {
    if (*(_QWORD *)(v22 + 8) != 3)
      goto LABEL_37;
    v24 = *(unsigned __int16 **)v22;
  }
  else
  {
    v24 = *(unsigned __int16 **)(a1 + 24);
    if (v23 != 3)
    {
LABEL_37:
      *(_BYTE *)(a1 + 49) = 0;
      goto LABEL_38;
    }
  }
  v25 = *v24 ^ 0x733C | *((unsigned __int8 *)v24 + 2) ^ 0x3E;
  *(_BYTE *)(a1 + 49) = v25 == 0;
  if (!v25)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v39, (__int128 *)(v22 + 24), v21, v22);
    v21 = v26;
    v27 = *(__int128 **)(a1 + 32);
    if (v27 != v26)
    {
      do
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*((void **)v27 - 3));
        v27 = (__int128 *)((char *)v27 - 24);
      }
      while (v27 != v21);
    }
    *(_QWORD *)(a1 + 32) = v21;
    v22 = *(_QWORD *)(a1 + 24);
  }
LABEL_38:
  if ((__int128 *)v22 == v21)
    goto LABEL_66;
  v28 = (void **)v21 - 3;
  v29 = *((char *)v21 - 1);
  if (v29 < 0)
  {
    if (*((_QWORD *)v21 - 2) != 4)
      goto LABEL_49;
    v30 = *v28;
  }
  else
  {
    v30 = (_DWORD *)v21 - 6;
    if (v29 != 4)
    {
LABEL_49:
      *(_BYTE *)(a1 + 50) = 0;
      goto LABEL_50;
    }
  }
  v31 = *v30 == 1047736124;
  *(_BYTE *)(a1 + 50) = v31;
  if (v31)
  {
    if (*((char *)v21 - 1) < 0)
    {
      operator delete(*v28);
      v22 = *(_QWORD *)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v28;
    v21 = (__int128 *)((char *)v21 - 24);
  }
LABEL_50:
  if ((__int128 *)v22 == v21)
    goto LABEL_67;
  v32 = *(unsigned __int16 **)a1;
  v33 = *(unsigned __int16 **)(a1 + 8);
  if (*(unsigned __int16 **)a1 == v33)
    goto LABEL_57;
  do
  {
    if (quasar::MungeRuleData::isIllegal(v32))
    {
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v39 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Munge line with invalid lhs: ", 29);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v35, a2);
      goto LABEL_62;
    }
    v32 += 12;
  }
  while (v32 != v33);
  v22 = *(_QWORD *)(a1 + 24);
  v21 = *(__int128 **)(a1 + 32);
LABEL_57:
  while ((__int128 *)v22 != v21)
  {
    if (quasar::MungeRuleData::isIllegal((unsigned __int16 *)v22))
    {
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v39 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Munge line with invalid rhs: ", 29);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v36, a2);
      goto LABEL_62;
    }
    v22 += 24;
  }
}

void sub_1ADD97828(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25)
{
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&a9);
}

void quasar::MungeRuleData::~MungeRuleData(void **this)
{
  void **v2;

  v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void quasar::Munger::munge(uint64_t a1, uint64_t *a2, _BYTE *a3, _BYTE *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  std::string *begin;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  BOOL v18;
  std::vector<std::string>::pointer end;
  std::vector<std::string> v20;
  std::vector<std::string> *v21;

  if (a3)
    *a3 = 0;
  if (a4)
    *a4 = 0;
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    memset(&v20, 0, sizeof(v20));
    std::vector<std::string>::reserve(&v20, 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 3));
    v10 = *(_QWORD **)a1;
    v11 = *(_QWORD **)(a1 + 8);
    if (*(_QWORD **)a1 != v11)
    {
      begin = (std::string *)*a2;
      v12 = (std::string *)a2[1];
      while (2)
      {
        if (begin != v12)
        {
          while (1)
          {
            v14 = (__int128 *)(*(uint64_t (**)(_QWORD, uint64_t *, std::string *))(*(_QWORD *)*v10 + 16))(*v10, a2, begin);
            v12 = (std::string *)v14;
            v16 = v15;
            v17 = (__int128 *)a2[1];
            v18 = begin == (std::string *)*a2 && v17 == v14;
            if (v18 && v20.__begin_ == v20.__end_)
              break;
            if (v17 != v14 && *(_BYTE *)(v15 + 48))
            {
              if (a3)
                *a3 = 1;
              std::vector<std::string>::__clear[abi:ne180100](a2);
              goto LABEL_27;
            }
            std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v20, v20.__end_, begin, v14, 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)begin) >> 3));
            if ((std::string *)a2[1] != v12)
            {
              if (a4)
                *a4 = 1;
              std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v20, v20.__end_, *(std::string **)v16, *(__int128 **)(v16 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v16 + 8) - *(_QWORD *)v16) >> 3));
              begin = (std::string *)((char *)v12 + *(_QWORD *)(v16 + 32) - *(_QWORD *)(v16 + 24));
              if (begin != (std::string *)a2[1])
                continue;
            }
            std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)a2);
            begin = v20.__begin_;
            *a2 = (uint64_t)v20.__begin_;
            end = v20.__end_;
            *(_OWORD *)(a2 + 1) = *(_OWORD *)&v20.__end_;
            memset(&v20, 0, sizeof(v20));
            v12 = end;
            break;
          }
          if (++v10 != v11)
            continue;
        }
        break;
      }
    }
LABEL_27:
    v21 = &v20;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  }
}

void sub_1ADD97AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t quasar::MungeRuleData::isIllegal(unsigned __int16 *a1)
{
  int v1;
  uint64_t v2;
  BOOL v3;

  if (*((char *)a1 + 23) < 0)
  {
    v2 = *((_QWORD *)a1 + 1);
    if (v2 != 3 || (**(_WORD **)a1 == 29500 ? (v3 = *(_BYTE *)(*(_QWORD *)a1 + 2) == 62) : (v3 = 0), !v3))
    {
      if (v2 != 4)
      {
LABEL_15:
        if (v2 != 2)
          return 0;
        a1 = *(unsigned __int16 **)a1;
        return *a1 == 11580;
      }
      if (**(_DWORD **)a1 != 1047736124)
      {
        v2 = *((_QWORD *)a1 + 1);
        goto LABEL_15;
      }
    }
    return 1;
  }
  v1 = *((unsigned __int8 *)a1 + 23);
  if (v1 == 2)
    return *a1 == 11580;
  if (v1 != 3)
    return v1 == 4 && *(_DWORD *)a1 == 1047736124;
  return *a1 == 29500 && *((_BYTE *)a1 + 2) == 62;
}

void quasar::MergedMungeRule::~MergedMungeRule(char **this)
{
  *this = (char *)&unk_1E5D35990;
  std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy((uint64_t)(this + 4), this[5]);
  std::__tree<std::__value_type<std::string,quasar::MungeRuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MungeRuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::MungeRuleData>>>::destroy((uint64_t)(this + 1), this[2]);
}

{
  *this = (char *)&unk_1E5D35990;
  std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy((uint64_t)(this + 4), this[5]);
  std::__tree<std::__value_type<std::string,quasar::MungeRuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MungeRuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::MungeRuleData>>>::destroy((uint64_t)(this + 1), this[2]);
  JUMPOUT(0x1AF44D190);
}

const void **quasar::MergedMungeRule::match(uint64_t a1, uint64_t a2, const void **a3)
{
  const void **v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  if (*(const void ***)(a2 + 8) != a3)
  {
    v5 = a1 + 8;
    v6 = a1 + 16;
    do
    {
      if (v6 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v5, v3))break;
      v3 += 3;
    }
    while (v3 != *(const void ***)(a2 + 8));
  }
  return v3;
}

uint64_t quasar::MergedMungeRule::toStr(quasar::MergedMungeRule *this)
{
  quasar::MergedMungeRule *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  quasar::MergedMungeRule *v12;
  quasar::MergedMungeRule *v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17[2];
  void *__p[2];
  unsigned __int8 v19;
  uint64_t v20[2];
  void *v21[2];
  unsigned __int8 v22;
  _QWORD v23[2];
  _QWORD v24[11];
  char v25;
  uint64_t v26;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"MergedMungeRule: ", 17);
  v2 = (quasar::MergedMungeRule *)*((_QWORD *)this + 1);
  if (v2 != (quasar::MergedMungeRule *)((char *)this + 16))
  {
    do
    {
      v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" {rhs=", 6);
      v20[0] = (uint64_t)"|";
      v20[1] = 1;
      quasar::join<std::string>((uint64_t)v2 + 32, v20);
      if ((v22 & 0x80u) == 0)
        v4 = v21;
      else
        v4 = (void **)v21[0];
      if ((v22 & 0x80u) == 0)
        v5 = v22;
      else
        v5 = (uint64_t)v21[1];
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" lhs=", 5);
      v17[0] = (uint64_t)"|";
      v17[1] = 1;
      quasar::join<std::vector<std::string>>((uint64_t *)v2 + 7, v17);
      if ((v19 & 0x80u) == 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      if ((v19 & 0x80u) == 0)
        v9 = v19;
      else
        v9 = (uint64_t)__p[1];
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" reject=", 8);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"}", 1);
      if ((char)v19 < 0)
        operator delete(__p[0]);
      if ((char)v22 < 0)
        operator delete(v21[0]);
      v12 = (quasar::MergedMungeRule *)*((_QWORD *)v2 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(quasar::MergedMungeRule **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (quasar::MergedMungeRule *)*((_QWORD *)v2 + 2);
          v14 = *(_QWORD *)v13 == (_QWORD)v2;
          v2 = v13;
        }
        while (!v14);
      }
      v2 = v13;
    }
    while (v13 != (quasar::MergedMungeRule *)((char *)this + 16));
  }
  std::stringbuf::str();
  v23[0] = *MEMORY[0x1E0DE4F50];
  v15 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v23 + *(_QWORD *)(v23[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v24[0] = v15;
  v24[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v25 < 0)
    operator delete((void *)v24[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v26);
}

void sub_1ADD97F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,quasar::MungeRuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MungeRuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::MungeRuleData>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,quasar::MungeRuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MungeRuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::MungeRuleData>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,quasar::MungeRuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MungeRuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::MungeRuleData>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::MungeRuleData>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::MungeRuleData>,0>(uint64_t a1)
{
  void **v2;
  void **v3;

  v2 = (void **)(a1 + 24);
  v3 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t quasar::join<std::string>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::string>(v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v9);
}

void sub_1ADD980C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *quasar::joinToStream<std::string>(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  int v3;
  char *v4;
  uint64_t v5;
  _QWORD *v7;
  char v8;
  char v9;
  char v10;

  v3 = *(char *)(a2 + 23);
  if (v3 >= 0)
    v4 = (char *)a2;
  else
    v4 = *(char **)a2;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    v7 = result;
    v8 = 1;
    do
    {
      if ((v8 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, *a3, a3[1]);
      v9 = *v4++;
      v10 = v9;
      result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v10, 1);
      v8 = 0;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,quasar::MungeRuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MungeRuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::MungeRuleData>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    std::__tree<std::__value_type<std::string,quasar::MungeRuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MungeRuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::MungeRuleData>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::MungeRuleData>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::MungeRuleData>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

double std::__tree<std::__value_type<std::string,quasar::MungeRuleData>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::MungeRuleData>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::MungeRuleData>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;
  double result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x70uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((_QWORD *)v6 + 13) = 0;
  result = 0.0;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1ADD98290(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::MungeRuleData>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::MungeRuleData>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,quasar::MungeRuleData>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,quasar::MungeRuleData>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::MungeRuleData>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void quasar::BasicMungeRule::~BasicMungeRule(quasar::BasicMungeRule *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = &unk_1E5D350B0;
  v1 = (void **)((char *)this + 8);
  v2 = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = v1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v2;
  void **v3;

  *(_QWORD *)this = &unk_1E5D350B0;
  v2 = (void **)((char *)this + 8);
  v3 = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x1AF44D190](this, 0x10A1C40DB8502C6);
}

unsigned __int8 *quasar::BasicMungeRule::match(uint64_t a1, unsigned __int8 **a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v9;
  BOOL v10;
  char v12;
  char v13;

  if (*(_BYTE *)(a1 + 58))
  {
    v5 = *(unsigned __int8 **)(a1 + 32);
    v6 = *(unsigned __int8 **)(a1 + 40);
    v7 = (uint64_t)a2[1];
    if (0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 3) > 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)*a2) >> 3))
      return (unsigned __int8 *)v7;
    a3 = (unsigned __int8 *)(v7 - 8 * ((v6 - v5) >> 3));
  }
  else
  {
    v7 = (uint64_t)a2[1];
    v5 = *(unsigned __int8 **)(a1 + 32);
    v6 = *(unsigned __int8 **)(a1 + 40);
  }
  v12 = 0;
  v9 = std::__search_impl[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>,std::__equal_to,std::__identity,std::__identity>(a3, v7, v5, v6, (uint64_t)&v13, (uint64_t)&v12, (uint64_t)&v12);
  if (*(_BYTE *)(a1 + 57))
    v10 = *a2 == v9;
  else
    v10 = 1;
  if (v10)
    return v9;
  else
    return a2[1];
}

uint64_t quasar::BasicMungeRule::toStr(quasar::BasicMungeRule *this)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15[2];
  void *__p[2];
  unsigned __int8 v17;
  uint64_t v18[2];
  void *v19[2];
  unsigned __int8 v20;
  _QWORD v21[2];
  _QWORD v22[11];
  char v23;
  uint64_t v24;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v21);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"BasicMungeRule: {rhs=", 21);
  v18[0] = (uint64_t)"|";
  v18[1] = 1;
  quasar::join<std::vector<std::string>>((uint64_t *)this + 4, v18);
  if ((v20 & 0x80u) == 0)
    v3 = v19;
  else
    v3 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v4 = v20;
  else
    v4 = (uint64_t)v19[1];
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" lhs=", 5);
  v15[0] = (uint64_t)"|";
  v15[1] = 1;
  quasar::join<std::vector<std::string>>((uint64_t *)this + 1, v15);
  if ((v17 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v8 = v17;
  else
    v8 = (uint64_t)__p[1];
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" reject=", 8);
  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" startAnchor=", 13);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" endAnchor=", 11);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"}", 1);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  std::stringbuf::str();
  v21[0] = *MEMORY[0x1E0DE4F50];
  v13 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v22[0] = v13;
  v22[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v23 < 0)
    operator delete((void *)v22[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v24);
}

void sub_1ADD98658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (a25 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a26);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__search_impl[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>,std::__equal_to,std::__identity,std::__identity>(unsigned __int8 *result, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;

  if (a4 != a3)
  {
    v7 = 0xAAAAAAAAAAAAAAABLL * ((a2 - (uint64_t)result) >> 3);
    if (v7 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a3) >> 3)))
      return std::__search_random_access_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>,std::__equal_to,std::__identity,std::__identity,long,long>(result, a2, a3, a4, a5, a6, a7, v7, 0xAAAAAAAAAAAAAAABLL * ((a4 - a3) >> 3));
    else
      return (unsigned __int8 *)a2;
  }
  return result;
}

unsigned __int8 *std::__search_random_access_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>,std::__equal_to,std::__identity,std::__identity,long,long>(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  char v18;

  v10 = (uint64_t)&a1[24 * a8 + 24 + -24 * a9];
  if ((unsigned __int8 *)v10 != a1)
  {
    v14 = a1;
    v15 = a3 + 24;
    while (!std::equal_to<std::string>::operator()[abi:ne180100](a5, v14, a3))
    {
LABEL_7:
      v14 += 24;
      if (v14 == (unsigned __int8 *)v10)
        return (unsigned __int8 *)a2;
    }
    v16 = v14 + 24;
    v17 = v15;
    while (v17 != a4)
    {
      v18 = std::equal_to<std::string>::operator()[abi:ne180100](a5, v16, v17);
      v16 += 24;
      v17 += 24;
      if ((v18 & 1) == 0)
        goto LABEL_7;
    }
    return v14;
  }
  return (unsigned __int8 *)a2;
}

_QWORD *LHash<char const*,unsigned int>::alloc(_QWORD *a1, unsigned int a2)
{
  char v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  v3 = -1;
  do
    v4 = (1 << ++v3);
  while (v4 < a2);
  result = BM_malloc(16 * (v4 - 1) + 24);
  *a1 = result;
  *(_DWORD *)result = *(_DWORD *)result & 0xFFFFFFE0 | v3 & 0x1F;
  *(_DWORD *)*a1 &= 0x1Fu;
  v6 = 16;
  do
  {
    *(_QWORD *)(*a1 + v6) = 0;
    v6 += 16;
    --v4;
  }
  while (v4);
  return result;
}

void LHash<char const*,unsigned int>::clear(_QWORD *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  if (*a1)
  {
    v4 = 1 << (*(_DWORD *)*a1 & 0x1F);
    v5 = 16;
    v6 = v4;
    do
    {
      v7 = *(void **)(*a1 + v5);
      if (v7)
        free(v7);
      v5 += 16;
      --v6;
    }
    while (v6);
    BM_free((_QWORD *)*a1, 16 * (v4 - 1) + 24);
    *a1 = 0;
  }
  if (a2)
  {
    if (a2 >= 8)
      a2 = (float)((float)(a2 + 1) / 0.8);
    LHash<char const*,unsigned int>::alloc(a1, a2);
  }
}

_QWORD *LHash<char const*,unsigned int>::~LHash(_QWORD *a1)
{
  LHash<char const*,unsigned int>::clear(a1, 0);
  return a1;
}

uint64_t LHash<char const*,unsigned int>::locate(_DWORD **a1, char *__s2, _DWORD *a3)
{
  _DWORD *v3;
  unint64_t v6;
  _DWORD *v7;
  char v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;
  char *v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  const char **v17;
  unint64_t v18;
  uint64_t v19;
  int v20;

  v3 = *a1;
  if (!*a1)
    return 0;
  v7 = v3 + 2;
  v6 = *v3;
  v8 = v6 & 0x1F;
  if ((*v3 & 0x1Fu) > 2)
  {
    v11 = *__s2;
    if (*__s2)
    {
      v12 = 0;
      v13 = __s2 + 1;
      do
      {
        v12 = 9 * v12 + v11;
        v14 = *v13++;
        v11 = v14;
      }
      while (v14);
      v15 = 1103515245 * v12 + 12345;
    }
    else
    {
      v15 = 12345;
    }
    v18 = v15 >> (30 - v8);
    v19 = -1 << v8;
    v9 = v18 & ~v19;
    result = *(_QWORD *)&v7[4 * v9 + 2];
    if (result)
    {
      v20 = ~(_DWORD)v19;
      while (strcmp((const char *)result, __s2))
      {
        v9 = ((_DWORD)v9 + 1) & v20;
        result = *(_QWORD *)&v7[4 * v9 + 2];
        if (!result)
          goto LABEL_23;
      }
      result = 1;
    }
  }
  else if (v6 >= 0x20)
  {
    v16 = 0;
    v9 = v6 >> 5;
    v17 = (const char **)(v3 + 4);
    while (strcmp(*v17, __s2))
    {
      ++v16;
      v17 += 2;
      if (v9 == v16)
        goto LABEL_13;
    }
    result = 1;
    LODWORD(v9) = v16;
  }
  else
  {
    LODWORD(v9) = 0;
LABEL_13:
    result = 0;
  }
LABEL_23:
  *a3 = v9;
  return result;
}

uint64_t LHash<char const*,unsigned int>::getInternalKey(_DWORD **a1, char *a2, _BYTE *a3)
{
  int v5;
  uint64_t *v6;
  int v8;

  v8 = 0;
  v5 = LHash<char const*,unsigned int>::locate(a1, a2, &v8);
  *a3 = v5;
  if (v5)
    v6 = (uint64_t *)&(*a1)[4 * v8 + 4];
  else
    v6 = &LHash<char const*,unsigned int>::zeroKey;
  return *v6;
}

_QWORD *LHash<char const*,unsigned int>::insert(_QWORD *a1, char *__s2, _BYTE *a3)
{
  int v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  char **v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  unsigned int v17;

  if (!*a1)
    LHash<char const*,unsigned int>::alloc(a1, 1u);
  v17 = 0;
  v6 = LHash<char const*,unsigned int>::locate((_DWORD **)a1, __s2, &v17);
  *a3 = v6;
  v7 = (_QWORD *)*a1;
  if (!v6)
  {
    v8 = *(unsigned int *)v7;
    v9 = 1 << (v8 & 0x1F);
    v10 = v8 >> 5;
    if (v8 >= 0xE0)
      v11 = (float)((float)(v10 + 2) / 0.8);
    else
      v11 = v10 + 1;
    if (v11 > v9)
    {
      LHash<char const*,unsigned int>::alloc(a1, v11);
      *(_DWORD *)*a1 = v8 & 0xFFFFFFE0 | *(_DWORD *)*a1 & 0x1F;
      if ((*(_DWORD *)*a1 & 0x1Fu) >= 3)
      {
        v12 = (char **)(v7 + 2);
        v13 = 1 << (v8 & 0x1F);
        do
        {
          if (*v12)
          {
            LHash<char const*,unsigned int>::locate((_DWORD **)a1, *v12, &v17);
            *(_OWORD *)(*a1 + 16 * v17 + 8) = *(_OWORD *)(v12 - 1);
          }
          v12 += 2;
          --v13;
        }
        while (v13);
      }
      else
      {
        memcpy((void *)(*a1 + 8), v7 + 1, 16 * v10);
      }
      BM_free(v7, 16 * (v9 - 1) + 24);
      LHash<char const*,unsigned int>::locate((_DWORD **)a1, __s2, &v17);
      v7 = (_QWORD *)*a1;
    }
    v14 = strdup(__s2);
    v15 = &v7[2 * v17];
    v15[2] = v14;
    *((_DWORD *)v15 + 2) = 0;
    *(_DWORD *)*a1 += 32;
    v7 = (_QWORD *)*a1;
  }
  return &v7[2 * v17 + 1];
}

uint64_t LHash<char const*,unsigned int>::remove(unsigned int **a1, char *a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int i;
  char *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;

  v17 = 0;
  result = LHash<char const*,unsigned int>::locate(a1, a2, &v17);
  if ((_DWORD)result)
  {
    free(*(void **)&(*a1)[4 * v17 + 4]);
    v6 = v17;
    *(_QWORD *)&(*a1)[4 * v17 + 4] = 0;
    if (a3)
      *a3 = (*a1)[4 * v6 + 2];
    v7 = *a1;
    v8 = **a1;
    v9 = v6 + 1;
    if ((v8 & 0x1F) >= 3)
    {
      v16 = 0;
      for (i = v9 & ~(-1 << (v8 & 0x1F)); ; i = v15 & ~(-1 << **a1))
      {
        v17 = i;
        v12 = *(char **)&v7[4 * i + 4];
        if (!v12)
          break;
        v13 = LHash<char const*,unsigned int>::locate(a1, v12, &v16);
        v14 = v17;
        if (!v13)
        {
          *(_OWORD *)&(*a1)[4 * v16 + 2] = *(_OWORD *)&(*a1)[4 * v17 + 2];
          *(_QWORD *)&(*a1)[4 * v14 + 4] = 0;
        }
        v16 = 0;
        v15 = v14 + 1;
        v7 = *a1;
      }
    }
    else
    {
      v10 = v8 >> 5;
      memmove(&v7[4 * v6 + 2], &v7[4 * v9 + 2], 16 * (~(_DWORD)v6 + (v8 >> 5)));
      *(_QWORD *)&(*a1)[4 * v10] = 0;
      v7 = *a1;
    }
    *v7 -= 32;
    return 1;
  }
  return result;
}

uint64_t LHashIter<char const*,unsigned int>::LHashIter(uint64_t a1, _DWORD **a2, uint64_t a3)
{
  _DWORD *v4;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 8) = 0;
  if (v4)
  {
    *(_DWORD *)(a1 + 12) = *v4 >> 5;
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = 0;
    LHashIter<char const*,unsigned int>::sortKeys(a1);
  }
  else
  {
    *(_DWORD *)(a1 + 12) = 0;
    *(_QWORD *)(a1 + 16) = a3;
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t LHashIter<char const*,unsigned int>::sortKeys(uint64_t a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  _BYTE v14[24];
  uint64_t v15;

  v2 = **(_DWORD **)a1 & 0x1F;
  v3 = operator new[]();
  v4 = v3;
  v5 = 0;
  v6 = 0;
  v7 = (_QWORD *)(*(_QWORD *)a1 + 16);
  do
  {
    if (*v7)
      *(_DWORD *)(v3 + 4 * v6++) = v5;
    ++v5;
    v7 += 2;
  }
  while (!(v5 >> v2));
  if (*(_QWORD *)(a1 + 16))
  {
    v8 = *(unsigned int *)(a1 + 12);
    LHashIter<char const*,unsigned int>::LHashIter((uint64_t)v14, a1);
    v9 = 126 - 2 * __clz(v8);
    if ((_DWORD)v8)
      v10 = v9;
    else
      v10 = 0;
    std::__introsort<std::_ClassicAlgPolicy,LHashIter<char const*,unsigned int> &,unsigned int *,false>(v4, (unsigned int *)(v4 + 4 * v8), (uint64_t)v14, v10, 1);
    if (v15)
      MEMORY[0x1AF44D160](v15, 0x50C80EE9192B6);
    v15 = 0;
  }
  *(_QWORD *)(a1 + 24) = operator new[]();
  v11 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v11)
  {
    for (i = 0; i != v11; ++i)
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * i) = *(_QWORD *)(*(_QWORD *)a1 + 16 * *(unsigned int *)(v4 + 4 * i) + 16);
  }
  return MEMORY[0x1AF44D160](v4, 0x1000C8052888210);
}

void sub_1ADD98F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    MEMORY[0x1AF44D160](a12, 0x50C80EE9192B6);
  _Unwind_Resume(exception_object);
}

uint64_t LHashIter<char const*,unsigned int>::LHashIter(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = v3;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    *(_QWORD *)(a1 + 24) = operator new[]();
    v6 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = 8 * v6;
      do
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + v7) = *(_QWORD *)(*(_QWORD *)(a2 + 24) + v7);
        v7 += 8;
      }
      while (v8 != v7);
    }
  }
  return a1;
}

uint64_t LHashIter<char const*,unsigned int>::~LHashIter(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
    MEMORY[0x1AF44D160](v2, 0x50C80EE9192B6);
  *(_QWORD *)(a1 + 24) = 0;
  return a1;
}

void LHashIter<char const*,unsigned int>::init(uint64_t a1)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
    MEMORY[0x1AF44D160](v2, 0x50C80EE9192B6);
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  v3 = *(_DWORD **)a1;
  if (*(_QWORD *)a1)
    LODWORD(v3) = *v3 >> 5;
  *(_DWORD *)(a1 + 12) = (_DWORD)v3;
  v4 = 0;
  LHash<char const*,unsigned int>::clear(&v4, 0);
  if (*(_QWORD *)a1)
    LHashIter<char const*,unsigned int>::sortKeys(a1);
}

uint64_t LHashIter<char const*,unsigned int>::next(uint64_t a1, _QWORD *a2)
{
  _DWORD *v2;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  unsigned int v11;

  v2 = *(_DWORD **)a1;
  if (!*(_QWORD *)a1)
    return 0;
  v11 = 0;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 12))
    return 0;
  v10 = v2;
  v7 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 8) = v4 + 1;
  LHash<char const*,unsigned int>::locate(&v10, *(char **)(v7 + 8 * v4), &v11);
  v10 = 0;
  v8 = v11;
  *a2 = *(_QWORD *)(*(_QWORD *)a1 + 16 * v11 + 16);
  v9 = *(_DWORD **)a1;
  LHash<char const*,unsigned int>::clear(&v10, 0);
  return (uint64_t)&v9[4 * v8 + 2];
}

void sub_1ADD99158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LHash<char const*,unsigned int>::~LHash(&a9);
  _Unwind_Resume(a1);
}

uint64_t Array<char const*>::alloc(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;

  v5 = (a2 + (*(_DWORD *)(a1 + 16) >> 1) + 1);
  v6 = (_QWORD *)operator new[]();
  v7 = v6;
  if (a3)
    bzero(v6, 8 * v5);
  v8 = *(unsigned int *)(a1 + 16);
  result = *(_QWORD *)(a1 + 8);
  if ((_DWORD)v8)
  {
    v10 = v7;
    v11 = *(uint64_t **)(a1 + 8);
    do
    {
      v12 = *v11++;
      *v10++ = v12;
      --v8;
    }
    while (v8);
    goto LABEL_8;
  }
  if (result)
LABEL_8:
    result = MEMORY[0x1AF44D160](result, 0x50C80EE9192B6);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = v5;
  return result;
}

uint64_t Array<char const*>::operator[](int *a1, uint64_t a2)
{
  unint64_t v3;

  v3 = a2 - *a1;
  if (v3 >= a1[1])
  {
    a1[1] = v3 + 1;
    if (v3 >= a1[4])
      Array<char const*>::alloc((uint64_t)a1, v3, 0);
  }
  return *((_QWORD *)a1 + 1) + 8 * v3;
}

uint64_t Array<unsigned int>::alloc(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t result;
  _DWORD *v10;
  int *v11;
  int v12;

  v5 = (a2 + (*(_DWORD *)(a1 + 16) >> 1) + 1);
  v6 = (_DWORD *)operator new[]();
  v7 = v6;
  if (a3)
    bzero(v6, 4 * v5);
  v8 = *(unsigned int *)(a1 + 16);
  result = *(_QWORD *)(a1 + 8);
  if ((_DWORD)v8)
  {
    v10 = v7;
    v11 = *(int **)(a1 + 8);
    do
    {
      v12 = *v11++;
      *v10++ = v12;
      --v8;
    }
    while (v8);
    goto LABEL_8;
  }
  if (result)
LABEL_8:
    result = MEMORY[0x1AF44D160](result, 0x1000C8052888210);
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = v5;
  return result;
}

uint64_t Array<unsigned int>::operator[](int *a1, uint64_t a2)
{
  unint64_t v3;

  v3 = a2 - *a1;
  if (v3 >= a1[1])
  {
    a1[1] = v3 + 1;
    if (v3 >= a1[4])
      Array<unsigned int>::alloc((uint64_t)a1, v3, 0);
  }
  return *((_QWORD *)a1 + 1) + 4 * v3;
}

_QWORD *Vocab::setOutputVocab(Vocab *this, Vocab *a2)
{
  _QWORD **v3;
  _QWORD *result;

  v3 = (_QWORD **)Vocab::outputVocabTLS();
  result = *v3;
  if (!*v3)
  {
    result = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    *v3 = result;
  }
  *result = this;
  return result;
}

_QWORD *Vocab::setCompareVocab(Vocab *this, Vocab *a2)
{
  _QWORD **v3;
  _QWORD *result;

  v3 = (_QWORD **)Vocab::compareVocabTLS();
  result = *v3;
  if (!*v3)
  {
    result = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    *v3 = result;
  }
  *result = this;
  return result;
}

void Vocab::Vocab(Vocab *this, int a2, int a3)
{
  uint64_t v4;
  _QWORD **v5;
  _QWORD *v6;

  *(_QWORD *)this = &off_1E5D173F0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = a2;
  *(_QWORD *)((char *)this + 28) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 10) = a2;
  *((_DWORD *)this + 11) = a3;
  *((_QWORD *)this + 11) = 0;
  v5 = (_QWORD **)Vocab::outputVocabTLS();
  v6 = *v5;
  if (!*v5)
  {
    v6 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    *v5 = v6;
    v4 = *(_QWORD *)this;
  }
  *v6 = this;
  *((_WORD *)this + 40) = 0;
  *((_DWORD *)this + 16) = (*(uint64_t (**)(Vocab *, const char *))(v4 + 16))(this, "<unk>");
  *((_DWORD *)this + 17) = (*(uint64_t (**)(Vocab *, const char *))(*(_QWORD *)this + 16))(this, "<s>");
  *((_DWORD *)this + 18) = (*(uint64_t (**)(Vocab *, const char *))(*(_QWORD *)this + 16))(this, "</s>");
  *((_DWORD *)this + 19) = (*(uint64_t (**)(Vocab *, const char *))(*(_QWORD *)this + 16))(this, "-pau-");
  (*(void (**)(Vocab *, _QWORD))(*(_QWORD *)this + 184))(this, *((unsigned int *)this + 17));
  (*(void (**)(Vocab *, _QWORD))(*(_QWORD *)this + 184))(this, *((unsigned int *)this + 19));
}

void sub_1ADD99588(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;

  LHash<unsigned int,unsigned int>::~LHash(v4);
  LHash<unsigned int,unsigned int>::~LHash(v3);
  v6 = *(_QWORD *)(v2 + 24);
  if (v6)
    MEMORY[0x1AF44D160](v6, 0x50C80EE9192B6);
  LHash<char const*,unsigned int>::~LHash(v1);
  _Unwind_Resume(a1);
}

_DWORD **Vocab::memStats(uint64_t a1, int64x2_t *a2)
{
  _DWORD **result;
  uint32x2_t v5;
  int64x2_t v6;
  uint64_t v7;

  a2->i64[0] += 64;
  result = LHash<unsigned int,double>::memStats((_DWORD **)(a1 + 8), a2->i64);
  v5.i32[0] = *(_DWORD *)(a1 + 32);
  v5.i32[1] = v5.i32[0] - *(_DWORD *)(a1 + 20);
  v6 = (int64x2_t)vshll_n_u32(v5, 3uLL);
  *a2 = vaddq_s64(v6, *a2);
  v7 = v6.i64[0];
  if (v6.i64[0] >= 0x100uLL)
    v7 = 256;
  ++a2[1].i32[v7];
  return result;
}

_BYTE *Vocab::mapToLower(Vocab *this, const char *a2)
{
  _QWORD *v3;
  _BYTE *v4;
  _QWORD *v5;
  __darwin_ct_rune_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;

  v3 = (_QWORD *)lowerTLS();
  v4 = (_BYTE *)*v3;
  if (!*v3)
  {
    v5 = v3;
    v4 = malloc_type_calloc(0x401uLL, 1uLL, 0x100004077774924uLL);
    *v5 = v4;
  }
  v6 = *(unsigned __int8 *)this;
  if (*(_BYTE *)this)
  {
    v7 = 0;
    v8 = (char *)this + 1;
    do
    {
      v4[v7] = __tolower(v6);
      v9 = v7 + 1;
      if (v7 > 0x3FE)
        break;
      v6 = v8[v7++];
    }
    while (v6);
  }
  else
  {
    v9 = 0;
  }
  v4[v9] = 0;
  return v4;
}

void Vocab::freeThread(Vocab *this)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = (void **)Vocab::outputVocabTLS();
  if (*v1)
  {
    free(*v1);
    *v1 = 0;
  }
  v2 = (void **)Vocab::compareVocabTLS();
  if (*v2)
  {
    free(*v2);
    *v2 = 0;
  }
  v3 = (void **)lowerTLS();
  if (*v3)
  {
    free(*v3);
    *v3 = 0;
  }
}

uint64_t Vocab::addWord(Vocab *this, Vocab *__s2)
{
  char *v2;
  _QWORD *v4;
  uint64_t result;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  int v11;
  unsigned int v12;
  int v13;
  char v14;
  unsigned int v15;
  char v16;

  v2 = (char *)__s2;
  if (*((_BYTE *)this + 81))
    v2 = Vocab::mapToLower(__s2, (const char *)__s2);
  v14 = 0;
  v4 = LHash<char const*,unsigned int>::insert((_QWORD *)this + 1, v2, &v14);
  if (v14)
    return *(unsigned int *)v4;
  v6 = *((_DWORD *)this + 10);
  if (v6 == *((_DWORD *)this + 11))
    return 0xFFFFFFFFLL;
  *(_DWORD *)v4 = v6;
  v15 = 0;
  if (LHash<char const*,unsigned int>::locate((_DWORD **)this + 1, v2, &v15))
    v7 = (uint64_t *)(*((_QWORD *)this + 1) + 16 * v15 + 16);
  else
    v7 = &LHash<char const*,unsigned int>::zeroKey;
  v8 = *v7;
  *(_QWORD *)Array<char const*>::operator[]((int *)this + 4, *((unsigned int *)this + 10)) = v8;
  v9 = (const char *)*((_QWORD *)this + 11);
  if (v9)
  {
    v10 = strlen(*((const char **)this + 11));
    if (!strncmp(v2, v9, v10))
    {
      v13 = -1;
      if (v2[v10])
      {
        sscanf(&v2[v10], "%u", &v13);
        v11 = v13;
        if (v13 < 0)
          goto LABEL_17;
      }
      else
      {
        v11 = 0;
        v13 = 0;
      }
      v12 = *((_DWORD *)this + 10);
      v16 = 0;
      *(_DWORD *)LHash<unsigned int,float>::insert((_QWORD *)this + 7, v12, &v16) = v11;
    }
  }
LABEL_17:
  result = *((unsigned int *)this + 10);
  *((_DWORD *)this + 10) = result + 1;
  return result;
}

const char *Vocab::addWordAlias(Vocab *this, const char *a2, Vocab *a3)
{
  char *v3;
  const char *v4;
  const char **v6;
  char v8;

  v3 = (char *)a3;
  v4 = a2;
  if (*((_BYTE *)this + 81))
    v3 = Vocab::mapToLower(a3, a2);
  if (!*(_QWORD *)Array<char const*>::operator[]((int *)this + 4, v4))
    return (const char *)0xFFFFFFFFLL;
  v6 = (const char **)Array<char const*>::operator[]((int *)this + 4, v4);
  if (strcmp(v3, *v6))
  {
    (*(void (**)(Vocab *, char *))(*(_QWORD *)this + 56))(this, v3);
    v8 = 0;
    *(_DWORD *)LHash<char const*,unsigned int>::insert((_QWORD *)this + 1, v3, &v8) = (_DWORD)v4;
  }
  return v4;
}

uint64_t Vocab::addNonEvent(Vocab *this, uint64_t a2)
{
  char v5;

  if (!(*(uint64_t (**)(Vocab *))(*(_QWORD *)this + 32))(this))
    return 0xFFFFFFFFLL;
  v5 = 0;
  *(_DWORD *)LHash<unsigned int,float>::insert((_QWORD *)this + 6, a2, &v5) = 1;
  return a2;
}

uint64_t Vocab::addNonEvents(Vocab *this, Vocab *a2)
{
  unsigned __int8 v3;
  _BYTE v5[24];
  uint64_t v6;
  uint64_t v7;

  LHashIter<char const*,unsigned int>::LHashIter((uint64_t)v5, (_DWORD **)a2 + 1, 0);
  v3 = 1;
  while (1)
  {
    v7 = 0;
    if (!LHashIter<char const*,unsigned int>::next((uint64_t)v5, &v7) || !v7)
      break;
    if ((*(unsigned int (**)(Vocab *))(*(_QWORD *)this + 192))(this) == -1)
      v3 = 0;
  }
  if (v6)
    MEMORY[0x1AF44D160](v6, 0x50C80EE9192B6);
  return v3;
}

void sub_1ADD99A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    MEMORY[0x1AF44D160](a13, 0x50C80EE9192B6);
  _Unwind_Resume(exception_object);
}

void VocabIter::VocabIter(VocabIter *this, const Vocab *a2, int a3)
{
  _DWORD **v3;
  uint64_t (*v4)(_QWORD, _QWORD);

  v3 = (_DWORD **)((char *)a2 + 8);
  if (a3)
    v4 = MEMORY[0x1E0C85520];
  else
    v4 = 0;
  LHashIter<char const*,unsigned int>::LHashIter((uint64_t)this, v3, (uint64_t)v4);
}

uint64_t Vocab::removeNonEvent(unsigned int **this, unsigned int a2)
{
  uint64_t result;

  result = (*((uint64_t (**)(unsigned int **))*this + 4))(this);
  if (result)
    return LHash<unsigned int,float>::remove(this + 6, a2, 0);
  return result;
}

uint64_t Vocab::getIndex(Vocab *this, Vocab *a2, uint64_t a3)
{
  char *v4;
  const char *v7;
  size_t v8;
  unsigned int v9;

  v4 = (char *)a2;
  if (*((_BYTE *)this + 81))
    v4 = Vocab::mapToLower(a2, (const char *)a2);
  v9 = 0;
  if (LHash<char const*,unsigned int>::locate((_DWORD **)this + 1, v4, &v9))
    return *(unsigned int *)(*((_QWORD *)this + 1) + 16 * v9 + 8);
  v7 = (const char *)*((_QWORD *)this + 11);
  if (v7)
  {
    v8 = strlen(*((const char **)this + 11));
    if (!strncmp(v4, v7, v8))
      return (*(uint64_t (**)(Vocab *, char *))(*(_QWORD *)this + 16))(this, v4);
  }
  return a3;
}

{
  char *v4;
  const char *v6;
  size_t v7;
  std::runtime_error *exception;
  unsigned int v10;

  v4 = (char *)a2;
  if (*((_BYTE *)this + 81))
    v4 = Vocab::mapToLower(a2, (const char *)a2);
  v10 = 0;
  if (LHash<char const*,unsigned int>::locate((_DWORD **)this + 1, v4, &v10))
    return *(unsigned int *)(*((_QWORD *)this + 1) + 16 * v10 + 8);
  v6 = (const char *)*((_QWORD *)this + 11);
  if (v6)
  {
    v7 = strlen(v6);
    if (!strncmp(v4, v6, v7))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unable to intern metatag due to const.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return a3;
}

void sub_1ADD99C84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Vocab::metaTagOfType(Vocab *this, int a2)
{
  const char *v2;
  size_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  _BYTE v12[12];
  int v13;

  v2 = (const char *)*((_QWORD *)this + 11);
  if (!v2)
    return 0xFFFFFFFFLL;
  if (!a2)
    return (*(uint64_t (**)(Vocab *, _QWORD, uint64_t))(*(_QWORD *)this + 40))(this, *((_QWORD *)this + 11), 0xFFFFFFFFLL);
  v5 = strlen(*((const char **)this + 11));
  *(_DWORD *)&v12[8] = 0;
  v13 = 0;
  v6 = v5 + 20;
  v11 = 0;
  *(_QWORD *)v12 = (v5 + 20);
  if ((_DWORD)v5 == -20)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    Array<char>::alloc((uint64_t)&v11, v5 + 19, 0);
    v7 = *(_QWORD *)&v12[4];
    v8 = v11;
    v2 = (const char *)*((_QWORD *)this + 11);
  }
  snprintf((char *)(v7 - v8), v6, "%s%u", v2, a2);
  v9 = (*(uint64_t (**)(Vocab *, _QWORD, uint64_t))(*(_QWORD *)this + 40))(this, *(_QWORD *)&v12[4] - v11, 0xFFFFFFFFLL);
  if (*(_QWORD *)&v12[4])
    MEMORY[0x1AF44D160](*(_QWORD *)&v12[4], 0x1000C8077774924);
  return v9;
}

void sub_1ADD99DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    MEMORY[0x1AF44D160](a13, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

uint64_t Vocab::getWord(Vocab *this, unsigned int a2)
{
  int *v3;
  unsigned int v4;

  v4 = *((_DWORD *)this + 4);
  v3 = (int *)((char *)this + 16);
  if (v4 > a2 || *((_DWORD *)this + 10) <= a2)
    return 0;
  else
    return *(_QWORD *)Array<char const*>::operator[](v3, a2);
}

uint64_t Vocab::remove(Vocab *this, Vocab *a2)
{
  char *v2;
  uint64_t result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  const char **v8;
  uint64_t v9;
  unsigned int v10;

  v2 = (char *)a2;
  if (*((_BYTE *)this + 81))
    v2 = Vocab::mapToLower(a2, (const char *)a2);
  v10 = 0;
  result = LHash<char const*,unsigned int>::locate((_DWORD **)this + 1, v2, &v10);
  if ((_DWORD)result)
  {
    v5 = *((_QWORD *)this + 1) + 16 * v10;
    v7 = *(_DWORD *)(v5 + 8);
    v6 = (unsigned int *)(v5 + 8);
    v8 = (const char **)Array<char const*>::operator[]((int *)this + 4, v7);
    if (!strcmp(v2, *v8))
    {
      v9 = *v6;
      LHash<char const*,unsigned int>::remove((unsigned int **)this + 1, v2, 0);
      *(_QWORD *)Array<char const*>::operator[]((int *)this + 4, v9) = 0;
      LHash<unsigned int,float>::remove((unsigned int **)this + 6, v9, 0);
      result = LHash<unsigned int,float>::remove((unsigned int **)this + 7, v9, 0);
      if ((_DWORD)v9 == *((_DWORD *)this + 17))
        *((_DWORD *)this + 17) = -1;
      if ((_DWORD)v9 == *((_DWORD *)this + 18))
        *((_DWORD *)this + 18) = -1;
      if ((_DWORD)v9 == *((_DWORD *)this + 16))
        *((_DWORD *)this + 16) = -1;
      if ((_DWORD)v9 == *((_DWORD *)this + 19))
        *((_DWORD *)this + 19) = -1;
    }
    else
    {
      return LHash<char const*,unsigned int>::remove((unsigned int **)this + 1, v2, 0);
    }
  }
  return result;
}

uint64_t Vocab::remove(uint64_t this, unsigned int a2)
{
  int *v2;
  uint64_t v4;

  v2 = (int *)(this + 16);
  if (*(_DWORD *)(this + 16) <= a2)
  {
    v4 = this;
    if (*(_DWORD *)(this + 40) > a2)
    {
      this = Array<char const*>::operator[]((int *)(this + 16), a2);
      if (*(_QWORD *)this)
      {
        LHash<char const*,unsigned int>::remove((unsigned int **)(v4 + 8), *(char **)this, 0);
        *(_QWORD *)Array<char const*>::operator[](v2, a2) = 0;
        LHash<unsigned int,float>::remove((unsigned int **)(v4 + 48), a2, 0);
        this = LHash<unsigned int,float>::remove((unsigned int **)(v4 + 56), a2, 0);
        if (*(_DWORD *)(v4 + 68) == a2)
          *(_DWORD *)(v4 + 68) = -1;
        if (*(_DWORD *)(v4 + 72) == a2)
          *(_DWORD *)(v4 + 72) = -1;
        if (*(_DWORD *)(v4 + 64) == a2)
          *(_DWORD *)(v4 + 64) = -1;
        if (*(_DWORD *)(v4 + 76) == a2)
          *(_DWORD *)(v4 + 76) = -1;
      }
    }
  }
  return this;
}

uint64_t Vocab::getWords(Vocab *this, const unsigned int *a2, const char **a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;

  if (!a4)
    return 0;
  v7 = 0;
  v8 = a4;
  while (a2[v7] != -1)
  {
    a3[v7++] = (const char *)(*(uint64_t (**)(Vocab *))(*(_QWORD *)this + 32))(this);
    if (v8 == v7)
      return v8;
  }
  a3[v7] = 0;
  return v7;
}

uint64_t Vocab::addWords(Vocab *this, const char *const *a2, unsigned int *a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;

  if (!a4)
    return 0;
  v7 = 0;
  v8 = a4;
  while (a2[v7])
  {
    a3[v7++] = (*(uint64_t (**)(Vocab *))(*(_QWORD *)this + 16))(this);
    if (v8 == v7)
      return v8;
  }
  a3[v7] = -1;
  return v7;
}

unint64_t Vocab::addWords(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  if (!a4)
    return 0;
  v7 = 0;
  v8 = 23;
  v9 = a4;
  while (1)
  {
    v10 = *a2;
    if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v7)
      break;
    v11 = (_QWORD *)(v10 + v8 - 23);
    if (*(char *)(v10 + v8) < 0)
      v11 = (_QWORD *)*v11;
    *(_DWORD *)(a3 + 4 * v7++) = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(a1, v11);
    v8 += 24;
    if (v9 == v7)
      return v9;
  }
  *(_DWORD *)(a3 + 4 * v7) = -1;
  return v7;
}

uint64_t Vocab::getIndices(Vocab *this, const char *const *a2, unsigned int *a3, unsigned int a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  const char *v11;

  if (!a4)
    return 0;
  v9 = 0;
  v10 = a4;
  while (1)
  {
    v11 = a2[v9];
    if (!v11)
      break;
    a3[v9++] = (*(uint64_t (**)(Vocab *, const char *, uint64_t))(*(_QWORD *)this + 40))(this, v11, a5);
    if (v10 == v9)
      return v10;
  }
  a3[v9] = -1;
  return v9;
}

unint64_t Vocab::getIndices(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  if (!a4)
    return 0;
  v9 = 0;
  v10 = 23;
  v11 = a4;
  while (1)
  {
    v12 = *a2;
    if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v9)
      break;
    v13 = (_QWORD *)(v12 + v10 - 23);
    if (*(char *)(v12 + v10) < 0)
      v13 = (_QWORD *)*v13;
    *(_DWORD *)(a3 + 4 * v9++) = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 40))(a1, v13, a5);
    v10 += 24;
    if (v11 == v9)
      return v11;
  }
  *(_DWORD *)(a3 + 4 * v9) = -1;
  return v9;
}

uint64_t Vocab::checkWords(Vocab *this, const char *const *a2, unsigned int *a3, unsigned int a4)
{
  uint64_t v7;
  unsigned int v8;

  if (!a4)
    return 1;
  v7 = a4;
  while (1)
  {
    if (!*a2)
    {
      *a3 = -1;
      return 1;
    }
    v8 = (*(uint64_t (**)(Vocab *, _QWORD, _QWORD))(*(_QWORD *)this + 40))(this, *a2, *((unsigned int *)this + 16));
    *a3 = v8;
    if (v8 == *((_DWORD *)this + 16))
      break;
    ++a3;
    ++a2;
    if (!--v7)
      return 1;
  }
  return 0;
}

uint64_t Vocab::convertSymbols(uint64_t a1, int **a2, int *a3, unsigned int a4, char a5)
{
  int *v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;

  v5 = *a2;
  v6 = a2[1] - *a2;
  v7 = 50000;
  v8 = a3;
  v9 = v6;
  while (v9)
  {
    v10 = *v5;
    *v8 = *v5;
    if (v10 == *(_DWORD *)(a1 + 64) && (a5 & 1) != 0)
      return 0;
    --v9;
    ++v8;
    ++v5;
    if (!--v7)
    {
      LODWORD(v6) = 50000;
      break;
    }
  }
  if (v6 < a4)
    a3[v6] = -1;
  return 1;
}

uint64_t Vocab::parseWords(Vocab *this, char *a2, const char **a3, char **a4)
{
  unsigned int v4;
  MStringTokUtil *v6;
  char **v7;
  unint64_t v8;
  uint64_t result;
  char v10[8];

  v4 = a3;
  *(_QWORD *)v10 = 0;
  v6 = MStringTokUtil::strtok_r(this, wordSeparators, v10, a4);
  if (v4 && v6)
  {
    v8 = 0;
    do
    {
      *(_QWORD *)&a2[8 * v8++] = v6;
      v6 = MStringTokUtil::strtok_r(0, wordSeparators, v10, v7);
    }
    while (v8 < v4 && v6);
    if (v8 >= v4)
      return v8;
  }
  else
  {
    v8 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  *(_QWORD *)&a2[8 * v8] = 0;
  return v8;
}

uint64_t Vocab::length(uint64_t this, const unsigned int *a2)
{
  uint64_t v2;

  v2 = this;
  LODWORD(this) = -1;
  do
    this = (this + 1);
  while (*(_DWORD *)(v2 + 4 * this) != -1);
  return this;
}

uint64_t Vocab::length(uint64_t this, const char *const *a2)
{
  uint64_t v2;

  v2 = this;
  LODWORD(this) = -1;
  do
    this = (this + 1);
  while (*(_QWORD *)(v2 + 8 * this));
  return this;
}

uint64_t Vocab::copy(uint64_t this, unsigned int *a2, const unsigned int *a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;

  v3 = *a2;
  if (*a2 == -1)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 1;
    do
    {
      *(_DWORD *)(this + 4 * v4) = v3;
      v4 = v5;
      v3 = a2[v5++];
    }
    while (v3 != -1);
  }
  *(_DWORD *)(this + 4 * v4) = -1;
  return this;
}

uint64_t Vocab::copy(uint64_t this, const char **a2, const char *const *a3)
{
  const char *v3;
  uint64_t v4;
  unsigned int v5;

  v3 = *a2;
  if (*a2)
  {
    v4 = 0;
    v5 = 1;
    do
    {
      *(_QWORD *)(this + 8 * v4) = v3;
      v4 = v5;
      v3 = a2[v5++];
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(this + 8 * v4) = 0;
  return this;
}

uint64_t Vocab::contains(Vocab *this, const unsigned int *a2)
{
  int v2;
  unsigned int v3;

  v2 = *(_DWORD *)this;
  if (*(_DWORD *)this == -1)
    return 0;
  v3 = 1;
  while (v2 != (_DWORD)a2)
  {
    v2 = *((_DWORD *)this + v3++);
    if (v2 == -1)
      return 0;
  }
  return 1;
}

uint64_t Vocab::reverse(uint64_t this, unsigned int *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;

  LODWORD(v2) = -2;
  do
  {
    v3 = *(_DWORD *)(this + 4 * (v2 + 2));
    LODWORD(v2) = v2 + 1;
  }
  while (v3 != -1);
  if ((int)v2 >= 1)
  {
    v4 = 0;
    v2 = (int)v2;
    do
    {
      v5 = *(_DWORD *)(this + 4 * v4);
      *(_DWORD *)(this + 4 * v4) = *(_DWORD *)(this + 4 * v2);
      *(_DWORD *)(this + 4 * v2) = v5;
      ++v4;
      --v2;
    }
    while (v4 < v2);
  }
  return this;
}

uint64_t Vocab::reverse(uint64_t this, const char **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  LODWORD(v2) = -2;
  do
  {
    v3 = *(_QWORD *)(this + 8 * (v2 + 2));
    LODWORD(v2) = v2 + 1;
  }
  while (v3);
  if ((int)v2 >= 1)
  {
    v4 = 0;
    v2 = (int)v2;
    do
    {
      v5 = *(_QWORD *)(this + 8 * v4);
      *(_QWORD *)(this + 8 * v4) = *(_QWORD *)(this + 8 * v2);
      *(_QWORD *)(this + 8 * v2) = v5;
      ++v4;
      --v2;
    }
    while (v4 < v2);
  }
  return this;
}

File *Vocab::write(File *this, const char **a2, const char *const *a3)
{
  const char *v3;
  File *v5;
  unsigned int v6;
  const char *v7;

  v3 = *a2;
  if (*a2)
  {
    v5 = this;
    v6 = 1;
    do
    {
      if (v6 == 1)
        v7 = "";
      else
        v7 = " ";
      this = (File *)File::fprintf(v5, "%s%s", v7, v3);
      v3 = a2[v6++];
    }
    while (v3);
  }
  return this;
}

_QWORD *operator<<(_QWORD *a1, const char **a2)
{
  unsigned int v4;
  const char **v5;
  const char *v6;
  _QWORD *v7;
  const char *v8;
  size_t v9;

  if (*a2)
  {
    v4 = 1;
    v5 = a2;
    do
    {
      if (v4 == 1)
        v6 = "";
      else
        v6 = " ";
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v6, v4 != 1);
      v8 = *v5;
      v9 = strlen(v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      v5 = &a2[v4++];
    }
    while (*v5);
  }
  return a1;
}

_QWORD *operator<<(_QWORD *a1, _DWORD *a2)
{
  _QWORD **v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int v7;
  const char *v8;
  const char *v9;
  _QWORD *v10;
  size_t v11;
  int v12;

  v4 = (_QWORD **)Vocab::outputVocabTLS();
  v5 = *v4;
  if (!*v4)
  {
    v6 = v4;
    v5 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    *v6 = v5;
  }
  if (*a2 != -1)
  {
    v7 = 1;
    do
    {
      v8 = (const char *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 32))(*v5);
      if (v7 == 1)
        v9 = "";
      else
        v9 = " ";
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v9, v7 != 1);
      if (!v8)
        v8 = "UNKNOWN";
      v11 = strlen(v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v8, v11);
      v12 = a2[v7++];
    }
    while (v12 != -1);
  }
  return a1;
}

uint64_t Vocab::compare(Vocab *this, uint64_t a2)
{
  _QWORD **v4;
  _QWORD *v5;
  _QWORD *v6;
  const char *v7;
  const char *v8;

  v4 = (_QWORD **)Vocab::compareVocabTLS();
  v5 = *v4;
  if (!*v4)
  {
    v6 = v4;
    v5 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    *v6 = v5;
  }
  if (!*v5)
    return (a2 - (_DWORD)this);
  v7 = (const char *)(*(uint64_t (**)(_QWORD, Vocab *))(*(_QWORD *)*v5 + 32))(*v5, this);
  v8 = (const char *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 32))(*v5, a2);
  return strcmp(v7, v8);
}

uint64_t Vocab::compare(Vocab *this, const unsigned int *a2, const unsigned int *a3)
{
  Vocab *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;

  v5 = (Vocab *)*(unsigned int *)this;
  if ((_DWORD)v5 == -1)
  {
    v6 = 0;
LABEL_8:
    if (a2[v6] == -1)
      return 0;
    else
      return 0xFFFFFFFFLL;
  }
  else
  {
    v6 = 0;
    v7 = 1;
    while (1)
    {
      v8 = a2[v6];
      if ((_DWORD)v8 == -1)
        return 1;
      result = Vocab::compare(v5, v8);
      if ((_DWORD)result)
        return result;
      v6 = v7;
      v5 = (Vocab *)*((unsigned int *)this + v7++);
      if ((_DWORD)v5 == -1)
        goto LABEL_8;
    }
  }
}

uint64_t (*Vocab::compareIndex(Vocab *this))(Vocab *this, uint64_t a2)
{
  _QWORD **v2;
  _QWORD *v3;

  v2 = (_QWORD **)Vocab::compareVocabTLS();
  v3 = *v2;
  if (!*v2)
  {
    v3 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    *v2 = v3;
  }
  *v3 = this;
  return Vocab::compare;
}

uint64_t (*Vocab::compareIndices(Vocab *this))(Vocab *this, const unsigned int *a2, const unsigned int *a3)
{
  _QWORD **v2;
  _QWORD *v3;

  v2 = (_QWORD **)Vocab::compareVocabTLS();
  v3 = *v2;
  if (!*v2)
  {
    v3 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    *v2 = v3;
  }
  *v3 = this;
  return Vocab::compare;
}

uint64_t Vocab::write(Vocab *this, File *a2, int a3)
{
  uint64_t (*v4)(_QWORD, _QWORD);
  uint64_t result;
  _BYTE v6[24];
  uint64_t v7;
  const char *v8;

  if (a3)
    v4 = MEMORY[0x1E0C85520];
  else
    v4 = 0;
  LHashIter<char const*,unsigned int>::LHashIter((uint64_t)v6, (_DWORD **)this + 1, (uint64_t)v4);
  while (!File::error(a2))
  {
    v8 = 0;
    if (!LHashIter<char const*,unsigned int>::next((uint64_t)v6, &v8) || !v8)
      break;
    File::fprintf(a2, "%s\n", v8);
  }
  result = v7;
  if (v7)
    return MEMORY[0x1AF44D160](v7, 0x50C80EE9192B6);
  return result;
}

void sub_1ADD9AB14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    MEMORY[0x1AF44D160](a13, 0x50C80EE9192B6);
  _Unwind_Resume(exception_object);
}

uint64_t Vocab::read(Vocab *this, File *a2)
{
  char *v4;
  char **v5;
  uint64_t v6;
  _QWORD *v7;
  MStringTokUtil *v8;
  _QWORD *v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  char v14[8];

  v4 = File::getline(a2);
  v6 = 0;
  if (v4)
  {
    v7 = (_QWORD *)MEMORY[0x1E0DE4A50];
    do
    {
      *(_QWORD *)v14 = 0;
      v8 = MStringTokUtil::strtok_r((MStringTokUtil *)v4, wordSeparators, v14, v5);
      if ((*(unsigned int (**)(Vocab *, MStringTokUtil *))(*(_QWORD *)this + 16))(this, v8) == -1)
      {
        v9 = File::position((const char **)a2, v7);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"warning: failed to add ", 23);
        v11 = strlen((const char *)v8);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v8, v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" to vocabulary\n", 15);
      }
      else
      {
        v6 = (v6 + 1);
      }
      v4 = File::getline(a2);
    }
    while (v4);
  }
  return v6;
}

uint64_t Vocab::readAliases(Vocab *this, File *a2)
{
  char *v4;
  char **v5;
  uint64_t v6;
  _QWORD *v7;
  MStringTokUtil *v8;
  char **v9;
  MStringTokUtil *v10;
  const char *v11;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  uint64_t v15;
  _QWORD *v16;
  const char *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  size_t v21;
  _QWORD *v22;
  size_t v23;
  char v25[8];

  v4 = File::getline(a2);
  v6 = 0;
  if (v4)
  {
    v7 = (_QWORD *)MEMORY[0x1E0DE4A50];
    while (1)
    {
      *(_QWORD *)v25 = 0;
      v8 = MStringTokUtil::strtok_r((MStringTokUtil *)v4, wordSeparators, v25, v5);
      v10 = MStringTokUtil::strtok_r(0, wordSeparators, v25, v9);
      if (!v10)
        break;
      v11 = (const char *)v10;
      v12 = (*(uint64_t (**)(Vocab *, MStringTokUtil *))(*(_QWORD *)this + 16))(this, v10);
      if ((_DWORD)v12 == -1)
      {
        v16 = File::position((const char **)a2, v7);
        v17 = "warning: failed to add ";
        v18 = 23;
        goto LABEL_10;
      }
      if ((*(unsigned int (**)(Vocab *, uint64_t, MStringTokUtil *))(*(_QWORD *)this + 24))(this, v12, v8) == -1)
      {
        v19 = File::position((const char **)a2, v7);
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"warning: failed to add alias ", 29);
        v21 = strlen((const char *)v8);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v8, v21);
        v17 = " for word ";
        v18 = 10;
LABEL_10:
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
        v23 = strlen(v11);
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v11, v23);
        v14 = " to vocabulary\n";
        v15 = 15;
LABEL_11:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
        goto LABEL_12;
      }
      v6 = (v6 + 1);
LABEL_12:
      v4 = File::getline(a2);
      if (!v4)
        return v6;
    }
    v13 = File::position((const char **)a2, v7);
    v14 = "warning: line contains only one token\n";
    v15 = 38;
    goto LABEL_11;
  }
  return v6;
}

uint64_t Vocab::highIndex(Vocab *this)
{
  return (*((_DWORD *)this + 10) - 1);
}

uint64_t Vocab::ngramsInRange(Vocab *this, const char **a2, const char **a3)
{
  const char **v4;
  const char *v6;
  uint64_t v7;
  char *v8;
  _BYTE v10[24];
  uint64_t v11;
  char *__s2;

  v4 = a2;
  if (a2)
  {
LABEL_2:
    if (*v4)
      goto LABEL_3;
    return 1;
  }
  else
  {
LABEL_3:
    while (a3)
    {
      if (!*a3)
        return 1;
      if (!v4)
        goto LABEL_14;
      v6 = *v4;
      if (strcmp(*v4, *a3)
        || (*(unsigned int (**)(Vocab *, const char *, uint64_t))(*(_QWORD *)this + 40))(this, v6, 0xFFFFFFFFLL) == -1)
      {
        goto LABEL_11;
      }
      ++v4;
      ++a3;
      if (v4)
        goto LABEL_2;
    }
    if (!v4)
    {
      a3 = 0;
      goto LABEL_18;
    }
LABEL_11:
    if ((*(unsigned int (**)(Vocab *, const char *, uint64_t))(*(_QWORD *)this + 40))(this, *v4, 0xFFFFFFFFLL) != -1&& Vocab::ngramsInRange(this, v4 + 1, 0))
    {
      return 1;
    }
    if (a3)
    {
LABEL_14:
      if ((*(unsigned int (**)(Vocab *, _QWORD, uint64_t))(*(_QWORD *)this + 40))(this, *a3, 0xFFFFFFFFLL) != -1
        && Vocab::ngramsInRange(this, 0, a3 + 1))
      {
        return 1;
      }
    }
LABEL_18:
    LHashIter<char const*,unsigned int>::LHashIter((uint64_t)v10, (_DWORD **)this + 1, 0);
    v7 = 0;
    while (1)
    {
      __s2 = 0;
      if (!LHashIter<char const*,unsigned int>::next((uint64_t)v10, &__s2))
        break;
      v8 = __s2;
      if (!__s2)
        break;
      if ((!v4 || strcmp(*v4, __s2) < 0) && (!a3 || strcmp(v8, *a3) < 0))
      {
        v7 = 1;
        break;
      }
    }
    if (v11)
      MEMORY[0x1AF44D160](v11, 0x50C80EE9192B6);
  }
  return v7;
}

void sub_1ADD9AF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13)
    MEMORY[0x1AF44D160](a13, 0x50C80EE9192B6);
  _Unwind_Resume(exception_object);
}

uint64_t Vocab::writeIndexMap(Vocab *this, File *a2, int a3)
{
  int *v4;
  unint64_t v5;
  int v8;
  const char **v9;

  v4 = (int *)((char *)this + 16);
  v5 = *((unsigned int *)this + 4);
  if (v5 < *((_DWORD *)this + 10))
  {
    do
    {
      if (*(_QWORD *)Array<char const*>::operator[](v4, v5))
      {
        if (!a3)
        {
          v8 = v5;
LABEL_7:
          v9 = (const char **)Array<char const*>::operator[](v4, v5);
          File::fprintf(a2, "%u %s\n", v8, *v9);
          goto LABEL_8;
        }
        v8 = v5;
        if (!(*(unsigned int (**)(Vocab *, unint64_t))(*(_QWORD *)this + 224))(this, v5))
          goto LABEL_7;
      }
LABEL_8:
      ++v5;
    }
    while (v5 < *((unsigned int *)this + 10));
  }
  return File::fprintf(a2, ".\n");
}

uint64_t Vocab::readIndexMap(uint64_t *a1, File *this, int *a3, int a4)
{
  char *i;
  char **v9;
  MStringTokUtil *v10;
  char **v11;
  MStringTokUtil *v12;
  MStringTokUtil *v13;
  uint64_t v16;
  int v17;
  _QWORD *v19;
  unsigned int v20;
  char v21[8];

  for (i = File::getline(this); i; i = File::getline(this))
  {
    v20 = 0;
    *(_QWORD *)v21 = 0;
    v10 = MStringTokUtil::strtok_r((MStringTokUtil *)i, wordSeparators, v21, v9);
    v12 = MStringTokUtil::strtok_r(0, wordSeparators, v21, v11);
    v13 = v12;
    if (*(_BYTE *)v10 == 46 && !*((_BYTE *)v10 + 1) && v12 == 0)
      break;
    if (sscanf((const char *)v10, "%u", &v20) != 1 || v13 == 0)
    {
      v19 = File::position((const char **)this, MEMORY[0x1E0DE4A50]);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"malformed vocab index line\n", 27);
      return 0;
    }
    v16 = *a1;
    if (a4)
      v17 = (*(uint64_t (**)(uint64_t *, MStringTokUtil *, uint64_t))(v16 + 40))(a1, v13, 0xFFFFFFFFLL);
    else
      v17 = (*(uint64_t (**)(uint64_t *, MStringTokUtil *))(v16 + 16))(a1, v13);
    *(_DWORD *)Array<unsigned int>::operator[](a3, v20) = v17;
  }
  return 1;
}

unsigned int *VocabIter::next(VocabIter *this, unsigned int *a2)
{
  unsigned int *result;
  uint64_t v4;

  v4 = 0;
  result = (unsigned int *)LHashIter<char const*,unsigned int>::next((uint64_t)this, &v4);
  if (result)
  {
    *a2 = *result;
    return (unsigned int *)v4;
  }
  return result;
}

uint64_t _ZTWN5Vocab14outputVocabTLSE()
{
  return Vocab::outputVocabTLS();
}

float kaldi::VecVec<float>(uint64_t a1, const float **a2)
{
  return cblas_sdot(*(_DWORD *)(a1 + 8), *(const float **)a1, 1, *a2, 1);
}

float kaldi::VecVec<signed char>(float32x4_t **a1, uint64_t a2)
{
  return kaldi::QuantizedVectorBase<signed char>::VecVec(a2, a1);
}

float kaldi::VecVec<short>(_OWORD **a1, uint64_t a2)
{
  return kaldi::QuantizedVectorBase<short>::VecVec(a2, a1);
}

float kaldi::VectorBase<float>::CopyFromVec<double>(uint64_t a1, double **a2)
{
  uint64_t v2;
  float *v3;
  double *v4;
  double v5;
  float result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = *(float **)a1;
    v4 = *a2;
    do
    {
      v5 = *v4++;
      result = v5;
      *v3++ = result;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *kaldi::VectorBase<float>::CopyFromVec(uint64_t a1, const void **a2)
{
  void *result;
  void *v4;

  result = *(void **)a1;
  v4 = (void *)*a2;
  if (result != v4)
    return memcpy(result, v4, 4 * *(int *)(a1 + 8));
  return result;
}

void *kaldi::VectorBase<double>::CopyFromVec(uint64_t a1, const void **a2)
{
  void *result;
  void *v4;

  result = *(void **)a1;
  v4 = (void *)*a2;
  if (result != v4)
    return memcpy(result, v4, 8 * *(int *)(a1 + 8));
  return result;
}

double kaldi::VectorBase<double>::CopyFromVec<float>(uint64_t a1, float **a2)
{
  uint64_t v2;
  double *v3;
  float *v4;
  float v5;
  double result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = *(double **)a1;
    v4 = *a2;
    do
    {
      v5 = *v4++;
      result = v5;
      *v3++ = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t kaldi::VectorBase<float>::CopyRowsFromMat<signed char>(uint64_t *a1, float *a2)
{
  uint64_t v4;
  int v5;
  uint64_t result;
  int v7;
  int i;
  uint64_t j;
  uint64_t v10;

  kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  kaldi::quasar::Vocab::VocabSize((kaldi::quasar::Vocab *)a2);
  v4 = *a1;
  v5 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  result = kaldi::quasar::Vocab::VocabSize((kaldi::quasar::Vocab *)a2);
  if ((int)result >= 1)
  {
    v7 = result;
    for (i = 0; i != v7; ++i)
    {
      if (v5 >= 1)
      {
        for (j = 0; j != v5; ++j)
        {
          v10 = kaldi::QuantizedMatrixBase<signed char>::Data((uint64_t)a2);
          result = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
          *(float *)(v4 + 4 * j) = (float)*(char *)(v10 + i * (int)result + j) / a2[3];
        }
      }
      v4 += 4 * v5;
    }
  }
  return result;
}

uint64_t kaldi::VectorBase<float>::CopyRowsFromMat<short>(uint64_t *a1, float *a2)
{
  uint64_t v4;
  int v5;
  uint64_t result;
  int v7;
  int i;
  uint64_t j;
  uint64_t v10;

  kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  kaldi::quasar::Vocab::VocabSize((kaldi::quasar::Vocab *)a2);
  v4 = *a1;
  v5 = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
  result = kaldi::quasar::Vocab::VocabSize((kaldi::quasar::Vocab *)a2);
  if ((int)result >= 1)
  {
    v7 = result;
    for (i = 0; i != v7; ++i)
    {
      if (v5 >= 1)
      {
        for (j = 0; j != v5; ++j)
        {
          v10 = kaldi::QuantizedMatrixBase<signed char>::Data((uint64_t)a2);
          result = kaldi::QuantizedMatrixBase<short>::NumCols((uint64_t)a2);
          *(float *)(v4 + 4 * j) = (float)*(__int16 *)(v10 + 2 * i * (int)result + 2 * j) / a2[3];
        }
      }
      v4 += 4 * v5;
    }
  }
  return result;
}

float kaldi::VectorBase<float>::CopyColFromMat<float>(uint64_t *a1, uint64_t a2, int a3)
{
  float result;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;

  kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::MatrixBase<float>::NumRows(a2);
  v7 = *((unsigned int *)a1 + 2);
  if ((int)v7 >= 1)
  {
    v8 = 0;
    v9 = (float *)(*(_QWORD *)a2 + 4 * a3);
    v10 = *a1;
    v11 = 4 * *(int *)(a2 + 16);
    do
    {
      result = *v9;
      *(float *)(v10 + 4 * v8++) = *v9;
      v9 = (float *)((char *)v9 + v11);
    }
    while (v7 != v8);
  }
  return result;
}

float kaldi::VectorBase<float>::AddVec<double>(uint64_t a1, double **a2, double a3)
{
  uint64_t v3;
  float *v4;
  double *v5;
  double v6;
  float v7;
  double v8;

  v3 = *(unsigned int *)(a1 + 8);
  v4 = *(float **)a1;
  v5 = *a2;
  if (*(float *)&a3 == 1.0)
  {
    if ((int)v3 >= 1)
    {
      do
      {
        v8 = *v5++;
        *(float *)&a3 = v8 + *v4;
        *v4++ = *(float *)&a3;
        --v3;
      }
      while (v3);
    }
  }
  else if ((int)v3 >= 1)
  {
    a3 = *(float *)&a3;
    do
    {
      v6 = *v5++;
      v7 = *v4 + a3 * v6;
      *v4++ = v7;
      --v3;
    }
    while (v3);
  }
  return *(float *)&a3;
}

double kaldi::VectorBase<double>::AddVec<float>(uint64_t a1, float **a2, double result)
{
  uint64_t v3;
  double *v4;
  float *v5;
  float v6;
  float v7;

  v3 = *(unsigned int *)(a1 + 8);
  v4 = *(double **)a1;
  v5 = *a2;
  if (result == 1.0)
  {
    if ((int)v3 >= 1)
    {
      do
      {
        v7 = *v5++;
        result = *v4 + v7;
        *v4++ = result;
        --v3;
      }
      while (v3);
    }
  }
  else if ((int)v3 >= 1)
  {
    do
    {
      v6 = *v5++;
      *v4 = *v4 + result * v6;
      ++v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

double kaldi::VectorBase<double>::AddVec2<float>(uint64_t a1, float **a2, double result)
{
  uint64_t v3;
  double *v4;
  float *v5;
  float v6;
  float v7;

  v3 = *(unsigned int *)(a1 + 8);
  v4 = *(double **)a1;
  v5 = *a2;
  if (result == 1.0)
  {
    if ((int)v3 >= 1)
    {
      do
      {
        v7 = *v5++;
        result = *v4 + (float)(v7 * v7);
        *v4++ = result;
        --v3;
      }
      while (v3);
    }
  }
  else if ((int)v3 >= 1)
  {
    do
    {
      v6 = *v5++;
      *v4 = *v4 + v6 * result * v6;
      ++v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

void kaldi::VectorBase<float>::AddMatVec(uint64_t a1, const float **a2, CBLAS_TRANSPOSE a3, uint64_t a4, float a5, float a6)
{
  int v12;
  int v13;
  const float *v14;
  int v15;

  if (a3 != CblasNoTrans
    || kaldi::MatrixBase<float>::NumCols((uint64_t)a2) != *(_DWORD *)(a4 + 8)
    || kaldi::MatrixBase<float>::NumRows((uint64_t)a2) != *(_DWORD *)(a1 + 8))
  {
    kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
    kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
  }
  v12 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  v13 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
  v14 = *a2;
  v15 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)a2);
  cblas_sgemv(CblasRowMajor, a3, v12, v13, a5, v14, v15, *(const float **)a4, 1, a6, *(float **)a1, 1);
}

void kaldi::Vector<float>::Resize(void **a1, uint64_t a2, int a3)
{
  int v3;
  int v5;
  char *v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  char *v13;
  void *__dst;
  char *v15;
  uint64_t v16;

  v3 = a2;
  if (a3 != 2)
  {
    v5 = a3;
    if (a3 == 3)
    {
      v6 = (char *)*a1;
      if (!*a1)
      {
        kaldi::Vector<float>::Init(a1, a2);
LABEL_22:
        v6 = (char *)*a1;
        v9 = 4 * *((int *)a1 + 2);
LABEL_23:
        bzero(v6, v9);
        return;
      }
      if (*((_DWORD *)a1 + 2) == (_DWORD)a2)
        return;
      v5 = 0;
      goto LABEL_13;
    }
    v6 = (char *)*a1;
LABEL_12:
    if (!v6)
      goto LABEL_16;
LABEL_13:
    if (*((_DWORD *)a1 + 3) >= (int)a2)
    {
      *((_DWORD *)a1 + 2) = a2;
    }
    else if (*((_DWORD *)a1 + 2) != (_DWORD)a2)
    {
      free(v6);
      *a1 = 0;
      a1[1] = 0;
LABEL_16:
      kaldi::Vector<float>::Init(a1, v3);
      if (v5)
        return;
      goto LABEL_22;
    }
    if (v5)
      return;
    v9 = 4 * (int)a2;
    goto LABEL_23;
  }
  v5 = 0;
  v6 = (char *)*a1;
  if (!(_DWORD)a2 || !v6)
    goto LABEL_12;
  if (*((_DWORD *)a1 + 3) >= (int)a2)
  {
    v10 = *((int *)a1 + 2);
    if ((int)a2 > (int)v10)
      bzero(&v6[4 * v10], 4 * ((int)a2 - (int)v10));
    *((_DWORD *)a1 + 2) = v3;
  }
  else
  {
    __dst = 0;
    v15 = 0;
    v16 = 0;
    kaldi::Vector<float>::Resize(&__dst, a2, 1);
    v7 = *((int *)a1 + 2);
    v8 = *a1;
    if ((int)v7 >= v3)
    {
      memcpy(__dst, v8, 4 * v3);
    }
    else
    {
      memcpy(__dst, v8, 4 * v7);
      bzero((char *)__dst + 4 * *((int *)a1 + 2), 4 * (v3 - *((_DWORD *)a1 + 2)));
    }
    v11 = (char *)__dst;
    __dst = *a1;
    v12 = __dst;
    *a1 = v11;
    v13 = v15;
    v15 = (char *)a1[1];
    a1[1] = v13;
    if (v12)
      free(v12);
  }
}

uint64_t kaldi::Vector<float>::Vector(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  kaldi::Vector<float>::Resize((void **)a1, *(unsigned int *)(a2 + 8), 1);
  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    memcpy(*(void **)a1, *(const void **)a2, 4 * *(int *)(a1 + 8));
  return a1;
}

uint64_t *kaldi::Vector<float>::Swap(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  LODWORD(v2) = *((_DWORD *)result + 2);
  *((_DWORD *)result + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v2;
  LODWORD(v2) = *((_DWORD *)result + 3);
  *((_DWORD *)result + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v2;
  return result;
}

void kaldi::Vector<float>::Destroy(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
    free(v2);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
}

void kaldi::Vector<float>::Read(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  float *v12;
  double *v13;
  double v14;
  float v15;
  int v16;
  void **v17;
  void **v18;
  _QWORD *v19;
  std::string *v20;
  std::string::size_type size;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  void **v25;
  uint64_t v26;
  _QWORD *v27;
  void *p_p;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  int data;
  _QWORD *v33;
  uint64_t *v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  int v48;
  std::string *v49;
  std::string *v50;
  std::string *v51;
  std::string *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  const char *v63;
  uint64_t v64;
  int *v65;
  unint64_t v66;
  _DWORD *v67;
  int v68;
  unsigned int v69;
  _QWORD *v71;
  std::string *v72;
  std::string::size_type v73;
  _QWORD *v74;
  uint64_t v75;
  const char *v76;
  float v77;
  void *__p;
  char *v79;
  char *v80;
  float *__X;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  char v85;
  uint64_t v86;
  std::string v87;
  void **v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v7 = *(unsigned int *)(a1 + 8);
    v82 = 0;
    v83 = 0;
    __X = 0;
    kaldi::Vector<float>::Resize((void **)&__X, v7, 0);
    kaldi::Vector<float>::Read(&__X, a2, a3, 0);
    v8 = *(_DWORD *)(a1 + 8);
    if (!v8)
    {
      kaldi::Vector<float>::Resize((void **)a1, v82, 0);
      v8 = *(_DWORD *)(a1 + 8);
    }
    if (v8 != (_DWORD)v82)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v88, (uint64_t)"Vector<Real>::Read, adding but dimensions mismatch ", 51);
      v74 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)" vs. ", 5);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v88);
    }
    cblas_saxpy(v8, 1.0, __X, 1, *(float **)a1, 1);
    if (__X)
      free(__X);
    return;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__X);
  std::istream::tellg();
  if (!(_DWORD)a3)
  {
    memset(&v87, 0, sizeof(v87));
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v87);
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)"EOF while trying to read vector.", 32);
LABEL_17:
      v16 = 2;
      goto LABEL_18;
    }
    if (!std::string::compare(&v87, "[]"))
    {
      kaldi::Vector<float>::Resize((void **)a1, 0, 0);
      v16 = 1;
      goto LABEL_18;
    }
    if (std::string::compare(&v87, "["))
    {
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)"Expected \"[\" but got ", 21);
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &v87;
      else
        v20 = (std::string *)v87.__r_.__value_.__r.__words[0];
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v87.__r_.__value_.__r.__words[2]);
      else
        size = v87.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, size);
      goto LABEL_17;
    }
    __p = 0;
    v79 = 0;
    v34 = a2 + 4;
    v75 = 22;
    v76 = "Failed to read number.";
    v80 = 0;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v35 = std::istream::peek();
          if ((v35 - 48) > 9)
            break;
          LODWORD(v88) = 0;
          MEMORY[0x1AF44CB0C](a2, &v88);
          if ((*((_BYTE *)v34 + *(_QWORD *)(*a2 - 24)) & 5) != 0)
            goto LABEL_155;
          v36 = std::istream::peek();
          if (v36 <= 0x7F)
          {
            if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v36 + 60) & 0x4000) != 0)
              goto LABEL_84;
          }
          else if (__maskrune(v36, 0x4000uLL))
          {
            goto LABEL_84;
          }
          if (std::istream::peek() != 93)
          {
            v75 = 33;
            v76 = "Expected whitespace after number.";
            goto LABEL_155;
          }
LABEL_84:
          v39 = v79;
          if (v79 >= v80)
          {
            v41 = (char *)__p;
            v42 = (v79 - (_BYTE *)__p) >> 2;
            v43 = v42 + 1;
            if ((unint64_t)(v42 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v44 = v80 - (_BYTE *)__p;
            if ((v80 - (_BYTE *)__p) >> 1 > v43)
              v43 = v44 >> 1;
            if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
              v45 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v45 = v43;
            if (v45)
            {
              v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v80, v45);
              v41 = (char *)__p;
              v39 = v79;
            }
            else
            {
              v46 = 0;
            }
            v47 = &v46[4 * v42];
            *(_DWORD *)v47 = (_DWORD)v88;
            v40 = v47 + 4;
            while (v39 != v41)
            {
              v48 = *((_DWORD *)v39 - 1);
              v39 -= 4;
              *((_DWORD *)v47 - 1) = v48;
              v47 -= 4;
            }
            __p = v47;
            v79 = v40;
            v80 = &v46[4 * v45];
            if (v41)
              operator delete(v41);
          }
          else
          {
            *(_DWORD *)v79 = (_DWORD)v88;
            v40 = v39 + 4;
          }
          v79 = v40;
        }
        if (v35 > 31)
          break;
        if (v35 > 9)
        {
          if (v35 == 10 || v35 == 13)
          {
            v63 = "Newline found while reading vector (maybe it's a matrix?)";
            v64 = 57;
LABEL_171:
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)v63, v64);
            goto LABEL_172;
          }
          goto LABEL_113;
        }
        if (v35 != 9)
        {
          if (v35 == -1)
          {
            v63 = "EOF while reading vector data.";
            v64 = 30;
            goto LABEL_171;
          }
          goto LABEL_113;
        }
LABEL_96:
        std::istream::get();
      }
      switch(v35)
      {
        case ' ':
          goto LABEL_96;
        case '-':
          std::istream::get();
          if (std::istream::peek() - 48 > 9)
          {
            std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v87);
            if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
            {
              v49 = (std::string *)v87.__r_.__value_.__r.__words[0];
              if (!strcasecmp(v87.__r_.__value_.__l.__data_, "inf"))
                goto LABEL_142;
              v50 = v49;
LABEL_138:
              if (!strcasecmp((const char *)v50, "infinity"))
                goto LABEL_142;
              if (strcasecmp((const char *)v49, "nan"))
              {
LABEL_175:
                v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)"Expecting numeric vector data, got ", 35);
                if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v72 = &v87;
                else
                  v72 = (std::string *)v87.__r_.__value_.__r.__words[0];
                if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v73 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
                else
                  v73 = v87.__r_.__value_.__l.__size_;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v72, v73);
                goto LABEL_172;
              }
              LODWORD(v88) = -4194304;
              std::vector<float>::push_back[abi:ne180100]((uint64_t)&__p, &v88);
              if (kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v88, (uint64_t)"Reading negative NaN value into vector.", 39);
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
              }
            }
            else
            {
              if (strcasecmp((const char *)&v87, "inf"))
              {
                v49 = &v87;
                v50 = &v87;
                goto LABEL_138;
              }
LABEL_142:
              LODWORD(v88) = -8388608;
              std::vector<float>::push_back[abi:ne180100]((uint64_t)&__p, &v88);
              if (kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v88, (uint64_t)"Reading negative infinite value into vector.", 44);
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
              }
            }
          }
          else
          {
            LODWORD(v88) = 0;
            MEMORY[0x1AF44CB0C](a2, &v88);
            if ((*((_BYTE *)v34 + *(_QWORD *)(*a2 - 24)) & 5) != 0)
              goto LABEL_155;
            v37 = std::istream::peek();
            if (v37 <= 0x7F)
              v38 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v37 + 60) & 0x4000;
            else
              v38 = __maskrune(v37, 0x4000uLL);
            if (!v38 && std::istream::peek() != 93)
            {
              v75 = 33;
              v76 = "Expected whitespace after number.";
LABEL_155:
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)v76, v75);
LABEL_172:
              v16 = 2;
              goto LABEL_173;
            }
            v77 = -*(float *)&v88;
            std::vector<float>::push_back[abi:ne180100]((uint64_t)&__p, &v77);
          }
          break;
        case ']':
          std::istream::get();
          kaldi::Vector<float>::Resize((void **)a1, (unint64_t)(v79 - (_BYTE *)__p) >> 2, 0);
          v65 = (int *)__p;
          if (v79 != __p)
          {
            v66 = (v79 - (_BYTE *)__p) >> 2;
            v67 = *(_DWORD **)a1;
            if (v66 <= 1)
              v66 = 1;
            do
            {
              v68 = *v65++;
              *v67++ = v68;
              --v66;
            }
            while (v66);
          }
          v69 = std::istream::peek() << 24;
          if (v69 == 167772160)
          {
LABEL_163:
            std::istream::get();
          }
          else if (v69 == 218103808)
          {
            std::istream::get();
            goto LABEL_163;
          }
          if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0 && kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v88, (uint64_t)"After end of vector data, read error.", 37);
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
          }
          v16 = 1;
LABEL_173:
          if (__p)
          {
            v79 = (char *)__p;
            operator delete(__p);
          }
LABEL_18:
          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          {
            v17 = (void **)v87.__r_.__value_.__r.__words[0];
            goto LABEL_45;
          }
LABEL_46:
          if (v16 == 2)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
            v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v88, (uint64_t)"Failed to read vector from stream.  ", 36);
            std::stringbuf::str();
            if (SHIBYTE(v80) >= 0)
              p_p = &__p;
            else
              p_p = __p;
            if (SHIBYTE(v80) >= 0)
              v29 = HIBYTE(v80);
            else
              v29 = (uint64_t)v79;
            v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)p_p, v29);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" File position at start is ", 27);
            v31 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", currently ", 12);
            std::istream::tellg();
            std::ostream::operator<<();
            if (SHIBYTE(v80) < 0)
              operator delete(__p);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v88);
          }
          goto LABEL_58;
        default:
LABEL_113:
          std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v87);
          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          {
            v51 = (std::string *)v87.__r_.__value_.__r.__words[0];
            if (!strcasecmp(v87.__r_.__value_.__l.__data_, "inf"))
              goto LABEL_122;
            v52 = v51;
          }
          else
          {
            if (!strcasecmp((const char *)&v87, "inf"))
              goto LABEL_122;
            v51 = &v87;
            v52 = &v87;
          }
          if (!strcasecmp((const char *)v52, "infinity"))
          {
LABEL_122:
            v53 = v79;
            if (v79 >= v80)
            {
              v55 = (char *)__p;
              v56 = (v79 - (_BYTE *)__p) >> 2;
              v57 = v56 + 1;
              if ((unint64_t)(v56 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v58 = v80 - (_BYTE *)__p;
              if ((v80 - (_BYTE *)__p) >> 1 > v57)
                v57 = v58 >> 1;
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
                v59 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v59 = v57;
              if (v59)
              {
                v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v80, v59);
                v55 = (char *)__p;
                v53 = v79;
              }
              else
              {
                v60 = 0;
              }
              v61 = &v60[4 * v56];
              *(_DWORD *)v61 = 2139095040;
              v54 = v61 + 4;
              while (v53 != v55)
              {
                v62 = *((_DWORD *)v53 - 1);
                v53 -= 4;
                *((_DWORD *)v61 - 1) = v62;
                v61 -= 4;
              }
              __p = v61;
              v79 = v54;
              v80 = &v60[4 * v59];
              if (v55)
                operator delete(v55);
            }
            else
            {
              *(_DWORD *)v79 = 2139095040;
              v54 = v53 + 4;
            }
            v79 = v54;
            if (kaldi::g_kaldi_verbose_level >= -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v88, (uint64_t)"Reading infinite value into vector.", 35);
              kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
            }
          }
          else
          {
            if (strcasecmp((const char *)v51, "nan"))
              goto LABEL_175;
            LODWORD(v88) = 2143289344;
            std::vector<float>::push_back[abi:ne180100]((uint64_t)&__p, &v88);
            if (kaldi::g_kaldi_verbose_level >= -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v88, (uint64_t)"Reading NaN value into vector.", 30);
              kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v88);
            }
          }
          break;
      }
    }
  }
  if (kaldi::Peek(a2, 1) != 68)
  {
    v88 = 0;
    v89 = 0;
    v90 = 0;
    kaldi::ReadToken(a2, 1, (uint64_t)&v88);
    if (SHIBYTE(v90) < 0)
    {
      if (v89 != 2)
        goto LABEL_35;
      v18 = v88;
    }
    else
    {
      if (SHIBYTE(v90) != 2)
        goto LABEL_35;
      v18 = (void **)&v88;
    }
    if (*(_WORD *)v18 == 22086)
    {
      LODWORD(v87.__r_.__value_.__l.__data_) = 0;
      kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v87);
      data = (int)v87.__r_.__value_.__l.__data_;
      if (LODWORD(v87.__r_.__value_.__l.__data_) != *(_DWORD *)(a1 + 8))
      {
        kaldi::Vector<float>::Resize((void **)a1, LODWORD(v87.__r_.__value_.__l.__data_), 0);
        data = (int)v87.__r_.__value_.__l.__data_;
      }
      if (data >= 1)
        std::istream::read();
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
      {
        v16 = 1;
LABEL_43:
        if (SHIBYTE(v90) < 0)
        {
          v17 = v88;
LABEL_45:
          operator delete(v17);
        }
        goto LABEL_46;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)"Error reading vector data (binary mode); truncated stream? (size = ",
        67);
      v33 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)")", 1);
LABEL_42:
      v16 = 2;
      goto LABEL_43;
    }
LABEL_35:
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)": Expected token ", 17);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"FV", 2);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)", got ", 6);
    if (v90 >= 0)
      v25 = (void **)&v88;
    else
      v25 = v88;
    if (v90 >= 0)
      v26 = HIBYTE(v90);
    else
      v26 = v89;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
    goto LABEL_42;
  }
  v9 = *(unsigned int *)(a1 + 8);
  v89 = 0;
  v90 = 0;
  v88 = 0;
  kaldi::Vector<double>::Resize((void **)&v88, v9, 0);
  kaldi::Vector<double>::Read((uint64_t)&v88, a2, 1, 0);
  LODWORD(v10) = *(_DWORD *)(a1 + 8);
  if ((_DWORD)v10 != (_DWORD)v89)
  {
    kaldi::Vector<float>::Resize((void **)a1, v89, 0);
    LODWORD(v10) = v89;
  }
  v11 = v88;
  if ((int)v10 < 1)
  {
    if (!v88)
      goto LABEL_58;
  }
  else
  {
    v12 = *(float **)a1;
    v10 = v10;
    v13 = (double *)v88;
    do
    {
      v14 = *v13++;
      v15 = v14;
      *v12++ = v15;
      --v10;
    }
    while (v10);
  }
  free(v11);
LABEL_58:
  __X = (float *)*MEMORY[0x1E0DE4F60];
  *(float **)((char *)&__X + *((_QWORD *)__X - 3)) = *(float **)(MEMORY[0x1E0DE4F60] + 24);
  v82 = MEMORY[0x1E0DE4FB8] + 16;
  if (v85 < 0)
    operator delete(v84);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](&v86);
}

void sub_1ADD9C6C8(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADD9C72CLL);
}

void sub_1ADD9C6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1ADD9C6E0()
{
  JUMPOUT(0x1ADD9C714);
}

void sub_1ADD9C6FC()
{
  void **v0;
  void *v1;
  char v2;

  if (v1)
    operator delete(v1);
  if (v2 < 0)
    operator delete(*v0);
  JUMPOUT(0x1ADD9C724);
}

void sub_1ADD9C734()
{
  JUMPOUT(0x1ADD9C72CLL);
}

void sub_1ADD9C73C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  if (a15)
    free(a15);
  JUMPOUT(0x1ADD9C72CLL);
}

void kaldi::VectorBase<float>::AddVec<float>(uint64_t a1, const float **a2, float a3)
{
  cblas_saxpy(*(_DWORD *)(a1 + 8), a3, *a2, 1, *(float **)a1, 1);
}

void kaldi::Vector<double>::Read(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  double *v12;
  float *v13;
  float v14;
  int v15;
  void *v16;
  _WORD *p_p;
  _QWORD *v18;
  std::string *v19;
  std::string::size_type size;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  int data;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  double *v39;
  double *v40;
  double *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  double *v47;
  uint64_t v48;
  std::string *v49;
  std::string *v50;
  std::string *v51;
  std::string *v52;
  double *v53;
  double *v54;
  double *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  double *v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unsigned int v69;
  _QWORD *v71;
  std::string *v72;
  std::string::size_type v73;
  _QWORD *v74;
  uint64_t v75;
  const char *v76;
  double v77;
  void *v78;
  double *v79;
  char *v80;
  double *__X;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  char v85;
  uint64_t v86;
  std::string v87;
  void *__p;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  if (a4)
  {
    v7 = *(unsigned int *)(a1 + 8);
    v82 = 0;
    v83 = 0;
    __X = 0;
    kaldi::Vector<double>::Resize((void **)&__X, v7, 0);
    kaldi::Vector<double>::Read(&__X, a2, a3, 0);
    v8 = *(_DWORD *)(a1 + 8);
    if (!v8)
    {
      kaldi::Vector<double>::Resize((void **)a1, v82, 0);
      v8 = *(_DWORD *)(a1 + 8);
    }
    if (v8 != (_DWORD)v82)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Vector<Real>::Read, adding but dimensions mismatch ", 51);
      v74 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)" vs. ", 5);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    cblas_daxpy(v8, 1.0, __X, 1, *(double **)a1, 1);
    if (__X)
      free(__X);
    return;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__X);
  std::istream::tellg();
  if (!(_DWORD)a3)
  {
    memset(&v87, 0, sizeof(v87));
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v87);
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)"EOF while trying to read vector.", 32);
LABEL_17:
      v15 = 2;
      goto LABEL_18;
    }
    if (!std::string::compare(&v87, "[]"))
    {
      kaldi::Vector<double>::Resize((void **)a1, 0, 0);
      v15 = 1;
      goto LABEL_18;
    }
    if (std::string::compare(&v87, "["))
    {
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)"Expected \"[\" but got ", 21);
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &v87;
      else
        v19 = (std::string *)v87.__r_.__value_.__r.__words[0];
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v87.__r_.__value_.__r.__words[2]);
      else
        size = v87.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, size);
      goto LABEL_17;
    }
    v78 = 0;
    v79 = 0;
    v33 = a2 + 4;
    v75 = 22;
    v76 = "Failed to read number.";
    v80 = 0;
    v34 = MEMORY[0x1E0C80978];
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v35 = std::istream::peek();
          if ((v35 - 48) > 9)
            break;
          *(double *)&__p = 0.0;
          MEMORY[0x1AF44CB00](a2, &__p);
          if ((*((_BYTE *)v33 + *(_QWORD *)(*a2 - 24)) & 5) != 0)
            goto LABEL_155;
          v36 = std::istream::peek();
          if (v36 <= 0x7F)
          {
            if ((*(_DWORD *)(v34 + 4 * v36 + 60) & 0x4000) != 0)
              goto LABEL_84;
          }
          else if (__maskrune(v36, 0x4000uLL))
          {
            goto LABEL_84;
          }
          if (std::istream::peek() != 93)
          {
            v75 = 33;
            v76 = "Expected whitespace after number.";
            goto LABEL_155;
          }
LABEL_84:
          v39 = v79;
          if (v79 >= (double *)v80)
          {
            v41 = (double *)v78;
            v42 = ((char *)v79 - (_BYTE *)v78) >> 3;
            v43 = v42 + 1;
            if ((unint64_t)(v42 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v44 = v80 - (_BYTE *)v78;
            if ((v80 - (_BYTE *)v78) >> 2 > v43)
              v43 = v44 >> 2;
            if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
              v45 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v45 = v43;
            if (v45)
            {
              v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v80, v45);
              v41 = (double *)v78;
              v39 = v79;
            }
            else
            {
              v46 = 0;
            }
            v47 = (double *)&v46[8 * v42];
            *v47 = *(double *)&__p;
            v40 = v47 + 1;
            while (v39 != v41)
            {
              v48 = *((_QWORD *)v39-- - 1);
              *((_QWORD *)v47-- - 1) = v48;
            }
            v78 = v47;
            v79 = v40;
            v80 = &v46[8 * v45];
            if (v41)
              operator delete(v41);
          }
          else
          {
            *v79 = *(double *)&__p;
            v40 = v39 + 1;
          }
          v79 = v40;
        }
        if (v35 > 31)
          break;
        if (v35 > 9)
        {
          if (v35 == 10 || v35 == 13)
          {
            v63 = "Newline found while reading vector (maybe it's a matrix?)";
            v64 = 57;
LABEL_171:
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)v63, v64);
            goto LABEL_172;
          }
          goto LABEL_113;
        }
        if (v35 != 9)
        {
          if (v35 == -1)
          {
            v63 = "EOF while reading vector data.";
            v64 = 30;
            goto LABEL_171;
          }
          goto LABEL_113;
        }
LABEL_96:
        std::istream::get();
      }
      switch(v35)
      {
        case ' ':
          goto LABEL_96;
        case '-':
          std::istream::get();
          if (std::istream::peek() - 48 > 9)
          {
            std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v87);
            if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
            {
              v49 = (std::string *)v87.__r_.__value_.__r.__words[0];
              if (!strcasecmp(v87.__r_.__value_.__l.__data_, "inf"))
                goto LABEL_142;
              v50 = v49;
LABEL_138:
              if (!strcasecmp((const char *)v50, "infinity"))
                goto LABEL_142;
              if (strcasecmp((const char *)v49, "nan"))
              {
LABEL_175:
                v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)"Expecting numeric vector data, got ", 35);
                if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v72 = &v87;
                else
                  v72 = (std::string *)v87.__r_.__value_.__r.__words[0];
                if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v73 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
                else
                  v73 = v87.__r_.__value_.__l.__size_;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v72, v73);
                goto LABEL_172;
              }
              *(double *)&__p = NAN;
              std::vector<double>::push_back[abi:ne180100]((uint64_t)&v78, &__p);
              if (kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Reading negative NaN value into vector.", 39);
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
              }
            }
            else
            {
              if (strcasecmp((const char *)&v87, "inf"))
              {
                v49 = &v87;
                v50 = &v87;
                goto LABEL_138;
              }
LABEL_142:
              *(double *)&__p = -INFINITY;
              std::vector<double>::push_back[abi:ne180100]((uint64_t)&v78, &__p);
              if (kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Reading negative infinite value into vector.", 44);
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
              }
            }
          }
          else
          {
            *(double *)&__p = 0.0;
            MEMORY[0x1AF44CB00](a2, &__p);
            if ((*((_BYTE *)v33 + *(_QWORD *)(*a2 - 24)) & 5) != 0)
              goto LABEL_155;
            v37 = std::istream::peek();
            if (v37 <= 0x7F)
              v38 = *(_DWORD *)(v34 + 4 * v37 + 60) & 0x4000;
            else
              v38 = __maskrune(v37, 0x4000uLL);
            if (!v38 && std::istream::peek() != 93)
            {
              v75 = 33;
              v76 = "Expected whitespace after number.";
LABEL_155:
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)v76, v75);
LABEL_172:
              v15 = 2;
              goto LABEL_173;
            }
            v77 = -*(double *)&__p;
            std::vector<double>::push_back[abi:ne180100]((uint64_t)&v78, &v77);
          }
          break;
        case ']':
          std::istream::get();
          kaldi::Vector<double>::Resize((void **)a1, (unint64_t)((char *)v79 - (_BYTE *)v78) >> 3, 0);
          v65 = (uint64_t *)v78;
          if (v79 != v78)
          {
            v66 = ((char *)v79 - (_BYTE *)v78) >> 3;
            v67 = *(_QWORD **)a1;
            if (v66 <= 1)
              v66 = 1;
            do
            {
              v68 = *v65++;
              *v67++ = v68;
              --v66;
            }
            while (v66);
          }
          v69 = std::istream::peek() << 24;
          if (v69 == 167772160)
          {
LABEL_163:
            std::istream::get();
          }
          else if (v69 == 218103808)
          {
            std::istream::get();
            goto LABEL_163;
          }
          if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0 && kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"After end of vector data, read error.", 37);
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          }
          v15 = 1;
LABEL_173:
          if (v78)
          {
            v79 = (double *)v78;
            operator delete(v78);
          }
LABEL_18:
          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          {
            v16 = (void *)v87.__r_.__value_.__r.__words[0];
            goto LABEL_45;
          }
LABEL_46:
          if (v15 == 2)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Failed to read vector from stream.  ", 36);
            std::stringbuf::str();
            if (SHIBYTE(v80) >= 0)
              v27 = &v78;
            else
              v27 = v78;
            if (SHIBYTE(v80) >= 0)
              v28 = HIBYTE(v80);
            else
              v28 = (uint64_t)v79;
            v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v27, v28);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" File position at start is ", 27);
            v30 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)", currently ", 12);
            std::istream::tellg();
            std::ostream::operator<<();
            if (SHIBYTE(v80) < 0)
              operator delete(v78);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
          }
          goto LABEL_58;
        default:
LABEL_113:
          std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v87);
          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          {
            v51 = (std::string *)v87.__r_.__value_.__r.__words[0];
            if (!strcasecmp(v87.__r_.__value_.__l.__data_, "inf"))
              goto LABEL_122;
            v52 = v51;
          }
          else
          {
            if (!strcasecmp((const char *)&v87, "inf"))
              goto LABEL_122;
            v51 = &v87;
            v52 = &v87;
          }
          if (!strcasecmp((const char *)v52, "infinity"))
          {
LABEL_122:
            v53 = v79;
            if (v79 >= (double *)v80)
            {
              v55 = (double *)v78;
              v56 = ((char *)v79 - (_BYTE *)v78) >> 3;
              v57 = v56 + 1;
              if ((unint64_t)(v56 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v58 = v80 - (_BYTE *)v78;
              if ((v80 - (_BYTE *)v78) >> 2 > v57)
                v57 = v58 >> 2;
              if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8)
                v59 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v59 = v57;
              if (v59)
              {
                v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v80, v59);
                v55 = (double *)v78;
                v53 = v79;
              }
              else
              {
                v60 = 0;
              }
              v61 = (double *)&v60[8 * v56];
              *v61 = INFINITY;
              v54 = v61 + 1;
              while (v53 != v55)
              {
                v62 = *((_QWORD *)v53-- - 1);
                *((_QWORD *)v61-- - 1) = v62;
              }
              v78 = v61;
              v79 = v54;
              v80 = &v60[8 * v59];
              if (v55)
                operator delete(v55);
            }
            else
            {
              *v79 = INFINITY;
              v54 = v53 + 1;
            }
            v79 = v54;
            if (kaldi::g_kaldi_verbose_level >= -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Reading infinite value into vector.", 35);
              kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            }
          }
          else
          {
            if (strcasecmp((const char *)v51, "nan"))
              goto LABEL_175;
            *(double *)&__p = NAN;
            std::vector<double>::push_back[abi:ne180100]((uint64_t)&v78, &__p);
            if (kaldi::g_kaldi_verbose_level >= -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Reading NaN value into vector.", 30);
              kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            }
          }
          break;
      }
    }
  }
  if (kaldi::Peek(a2, 1) != 70)
  {
    *(double *)&__p = 0.0;
    v89 = 0;
    v90 = 0;
    kaldi::ReadToken(a2, 1, (uint64_t)&__p);
    if (SHIBYTE(v90) < 0)
    {
      if (v89 != 2)
        goto LABEL_35;
      p_p = __p;
    }
    else
    {
      if (SHIBYTE(v90) != 2)
        goto LABEL_35;
      p_p = &__p;
    }
    if (*p_p == 22084)
    {
      LODWORD(v87.__r_.__value_.__l.__data_) = 0;
      kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v87);
      data = (int)v87.__r_.__value_.__l.__data_;
      if (LODWORD(v87.__r_.__value_.__l.__data_) != *(_DWORD *)(a1 + 8))
      {
        kaldi::Vector<double>::Resize((void **)a1, LODWORD(v87.__r_.__value_.__l.__data_), 0);
        data = (int)v87.__r_.__value_.__l.__data_;
      }
      if (data >= 1)
        std::istream::read();
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
      {
        v15 = 1;
LABEL_43:
        if (SHIBYTE(v90) < 0)
        {
          v16 = __p;
LABEL_45:
          operator delete(v16);
        }
        goto LABEL_46;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)"Error reading vector data (binary mode); truncated stream? (size = ",
        67);
      v32 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)")", 1);
LABEL_42:
      v15 = 2;
      goto LABEL_43;
    }
LABEL_35:
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__X, (uint64_t)": Expected token ", 17);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"DV", 2);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", got ", 6);
    if (v90 >= 0)
      v24 = &__p;
    else
      v24 = __p;
    if (v90 >= 0)
      v25 = HIBYTE(v90);
    else
      v25 = v89;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
    goto LABEL_42;
  }
  v9 = *(unsigned int *)(a1 + 8);
  v89 = 0;
  v90 = 0;
  *(double *)&__p = 0.0;
  kaldi::Vector<float>::Resize(&__p, v9, 0);
  kaldi::Vector<float>::Read(&__p, a2, 1, 0);
  LODWORD(v10) = *(_DWORD *)(a1 + 8);
  if ((_DWORD)v10 != (_DWORD)v89)
  {
    kaldi::Vector<double>::Resize((void **)a1, v89, 0);
    LODWORD(v10) = v89;
  }
  v11 = __p;
  if ((int)v10 < 1)
  {
    if (*(double *)&__p == 0.0)
      goto LABEL_58;
  }
  else
  {
    v12 = *(double **)a1;
    v10 = v10;
    v13 = (float *)__p;
    do
    {
      v14 = *v13++;
      *v12++ = v14;
      --v10;
    }
    while (v10);
  }
  free(v11);
LABEL_58:
  __X = (double *)*MEMORY[0x1E0DE4F60];
  *(double **)((char *)&__X + *((_QWORD *)__X - 3)) = *(double **)(MEMORY[0x1E0DE4F60] + 24);
  v82 = MEMORY[0x1E0DE4FB8] + 16;
  if (v85 < 0)
    operator delete(v84);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](&v86);
}

void sub_1ADD9D448(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADD9D4ACLL);
}

void sub_1ADD9D458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1ADD9D460()
{
  JUMPOUT(0x1ADD9D494);
}

void sub_1ADD9D47C()
{
  void *v0;
  void *v1;
  char v2;

  if (v0)
    operator delete(v0);
  if (v2 < 0)
    operator delete(v1);
  JUMPOUT(0x1ADD9D4A4);
}

void sub_1ADD9D4B4()
{
  JUMPOUT(0x1ADD9D4ACLL);
}

void sub_1ADD9D4BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  if (a15)
    free(a15);
  JUMPOUT(0x1ADD9D4ACLL);
}

void kaldi::VectorBase<float>::SetZero(uint64_t a1)
{
  bzero(*(void **)a1, 4 * *(int *)(a1 + 8));
}

void **kaldi::Vector<float>::Init(void **result, int a2)
{
  void **v2;
  int v4;
  std::bad_alloc *exception;
  std::bad_alloc *v6;
  _QWORD v7[34];
  void *memptr;

  v2 = result;
  if (a2)
  {
    memptr = 0;
    v4 = 4 * a2;
    result = (void **)malloc_type_posix_memalign(&memptr, 0x10uLL, 4 * a2, 0x15614AE6uLL);
    if ((_DWORD)result || !memptr)
    {
      if (v4 < 0 && kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Negative dimension: size=", 25);
        std::ostream::operator<<();
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
      }
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v6 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v6, MEMORY[0x1E0DE4EA8], (void (*)(void *))MEMORY[0x1E0DE4DC0]);
    }
    *v2 = memptr;
    *((_DWORD *)v2 + 2) = a2;
    *((_DWORD *)v2 + 3) = a2;
  }
  else
  {
    *result = 0;
    result[1] = 0;
  }
  return result;
}

void sub_1ADD9D5B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::Vector<double>::Resize(void **a1, uint64_t a2, int a3)
{
  int v3;
  int v5;
  char *v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  char *v13;
  void *__dst;
  char *v15;
  uint64_t v16;

  v3 = a2;
  if (a3 != 2)
  {
    v5 = a3;
    if (a3 == 3)
    {
      v6 = (char *)*a1;
      if (!*a1)
      {
        kaldi::Vector<double>::Init(a1, a2);
LABEL_22:
        v6 = (char *)*a1;
        v9 = 8 * *((int *)a1 + 2);
LABEL_23:
        bzero(v6, v9);
        return;
      }
      if (*((_DWORD *)a1 + 2) == (_DWORD)a2)
        return;
      v5 = 0;
      goto LABEL_13;
    }
    v6 = (char *)*a1;
LABEL_12:
    if (!v6)
      goto LABEL_16;
LABEL_13:
    if (*((_DWORD *)a1 + 3) >= (int)a2)
    {
      *((_DWORD *)a1 + 2) = a2;
    }
    else if (*((_DWORD *)a1 + 2) != (_DWORD)a2)
    {
      free(v6);
      *a1 = 0;
      a1[1] = 0;
LABEL_16:
      kaldi::Vector<double>::Init(a1, v3);
      if (v5)
        return;
      goto LABEL_22;
    }
    if (v5)
      return;
    v9 = 8 * (int)a2;
    goto LABEL_23;
  }
  v5 = 0;
  v6 = (char *)*a1;
  if (!(_DWORD)a2 || !v6)
    goto LABEL_12;
  if (*((_DWORD *)a1 + 3) >= (int)a2)
  {
    v10 = *((int *)a1 + 2);
    if ((int)a2 > (int)v10)
      bzero(&v6[8 * v10], 8 * ((int)a2 - (int)v10));
    *((_DWORD *)a1 + 2) = v3;
  }
  else
  {
    __dst = 0;
    v15 = 0;
    v16 = 0;
    kaldi::Vector<double>::Resize(&__dst, a2, 1);
    v7 = *((int *)a1 + 2);
    v8 = *a1;
    if ((int)v7 >= v3)
    {
      memcpy(__dst, v8, 8 * v3);
    }
    else
    {
      memcpy(__dst, v8, 8 * v7);
      bzero((char *)__dst + 8 * *((int *)a1 + 2), 8 * (v3 - *((_DWORD *)a1 + 2)));
    }
    v11 = (char *)__dst;
    __dst = *a1;
    v12 = __dst;
    *a1 = v11;
    v13 = v15;
    v15 = (char *)a1[1];
    a1[1] = v13;
    if (v12)
      free(v12);
  }
}

void kaldi::VectorBase<double>::AddVec<double>(uint64_t a1, const double **a2, double a3)
{
  cblas_daxpy(*(_DWORD *)(a1 + 8), a3, *a2, 1, *(double **)a1, 1);
}

void kaldi::VectorBase<double>::SetZero(uint64_t a1)
{
  bzero(*(void **)a1, 8 * *(int *)(a1 + 8));
}

void **kaldi::Vector<double>::Init(void **result, int a2)
{
  void **v2;
  int v4;
  std::bad_alloc *exception;
  std::bad_alloc *v6;
  _QWORD v7[34];
  void *memptr;

  v2 = result;
  if (a2)
  {
    memptr = 0;
    v4 = 8 * a2;
    result = (void **)malloc_type_posix_memalign(&memptr, 0x10uLL, 8 * a2, 0x15614AE6uLL);
    if ((_DWORD)result || !memptr)
    {
      if (v4 < 0 && kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Negative dimension: size=", 25);
        std::ostream::operator<<();
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
      }
      exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
      v6 = std::bad_alloc::bad_alloc(exception);
      __cxa_throw(v6, MEMORY[0x1E0DE4EA8], (void (*)(void *))MEMORY[0x1E0DE4DC0]);
    }
    *v2 = memptr;
    *((_DWORD *)v2 + 2) = a2;
    *((_DWORD *)v2 + 3) = a2;
  }
  else
  {
    *result = 0;
    result[1] = 0;
  }
  return result;
}

void sub_1ADD9D86C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::VectorBase<float>::Set(uint64_t result, float a2)
{
  uint64_t v2;
  float *v3;

  v2 = *(unsigned int *)(result + 8);
  if ((int)v2 >= 1)
  {
    v3 = *(float **)result;
    do
    {
      *v3++ = a2;
      --v2;
    }
    while (v2);
  }
  return result;
}

void kaldi::VectorBase<float>::SetRandn(uint64_t a1)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  unsigned int v7;

  v7 = kaldi::Rand(0);
  if (*(int *)(a1 + 8) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = ((double)(int)kaldi::Rand(&v7) + 1.0) / 2147483650.0;
      v4 = sqrtf(logf(v3) * -2.0);
      v5 = ((double)(int)kaldi::Rand(&v7) + 1.0) / 2147483650.0;
      v6 = v5 * 6.28318531;
      *(float *)(*(_QWORD *)a1 + 4 * v2++) = v4 * cosf(v6);
    }
    while (v2 < *(int *)(a1 + 8));
  }
}

float kaldi::VectorBase<float>::Sum(uint64_t a1)
{
  uint64_t v1;
  float *v2;
  double v3;
  float v4;

  v1 = *(unsigned int *)(a1 + 8);
  if ((int)v1 < 1)
    return 0.0;
  v2 = *(float **)a1;
  v3 = 0.0;
  do
  {
    v4 = *v2++;
    v3 = v3 + v4;
    --v1;
  }
  while (v1);
  return v3;
}

uint64_t *kaldi::VectorBase<float>::Min(uint64_t *result)
{
  unint64_t v1;
  uint64_t v2;
  int v3;
  float v4;
  uint64_t v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float *v14;
  float v15;
  float v16;
  _QWORD v17[34];

  v1 = *((unsigned int *)result + 2);
  if (!(_DWORD)v1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "Empty vector");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
  v2 = *result;
  if ((int)v1 >= 4)
  {
    v5 = 0;
    v3 = v1 & 0xFFFFFFFC;
    v4 = INFINITY;
    do
    {
      v6 = (float *)(v2 + 4 * v5);
      v7 = *v6;
      v8 = v6[1];
      v9 = v6[2];
      v10 = v6[3];
      if (*v6 < v4 || v8 < v4 || v9 < v4 || v10 < v4)
      {
        if (v7 >= v8)
          v7 = v6[1];
        if (v9 >= v10)
          v9 = v6[3];
        if (v7 < v4)
          v4 = v7;
        if (v9 < v4)
          v4 = v9;
      }
      v5 += 4;
    }
    while (v5 + 4 <= v1);
  }
  else
  {
    v3 = 0;
    v4 = INFINITY;
  }
  if (v3 < (int)v1)
  {
    v14 = (float *)(v2 + 4 * v3);
    do
    {
      v15 = *v14++;
      v16 = v15;
      if (v15 < v4)
        v4 = v16;
      ++v3;
    }
    while ((int)v1 > v3);
  }
  return result;
}

float kaldi::VectorBase<float>::ReverseCopyFromVec(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  float *v3;
  uint64_t v4;
  float result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = *(float **)a1;
    v4 = *a2;
    do
    {
      result = *(float *)(v4 + 4 * (int)--v2);
      *v3++ = result;
    }
    while (v2);
  }
  return result;
}

uint64_t kaldi::VectorBase<float>::ApplyFloor(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t result;
  float *v5;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 < 1)
    return 0;
  result = 0;
  v5 = *(float **)a1;
  do
  {
    if (*v5 < a2)
    {
      *v5 = a2;
      result = (result + 1);
    }
    ++v5;
    --v2;
  }
  while (v2);
  return result;
}

uint64_t kaldi::VectorBase<float>::ApplyCeiling(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t result;
  float *v5;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 < 1)
    return 0;
  result = 0;
  v5 = *(float **)a1;
  do
  {
    if (*v5 > a2)
    {
      *v5 = a2;
      result = (result + 1);
    }
    ++v5;
    --v2;
  }
  while (v2);
  return result;
}

float kaldi::VectorBase<float>::MulElements(uint64_t a1, float **a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  float v5;
  float result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = *a2;
    v4 = *(float **)a1;
    do
    {
      v5 = *v3++;
      result = v5 * *v4;
      *v4++ = result;
      --v2;
    }
    while (v2);
  }
  return result;
}

void kaldi::VectorBase<float>::Scale(uint64_t a1, float a2)
{
  cblas_sscal(*(_DWORD *)(a1 + 8), a2, *(float **)a1, 1);
}

float kaldi::VectorBase<float>::ApplySoftMax(uint64_t a1)
{
  float v2;
  float v3;
  int v4;
  float *v5;
  float *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  double v11;
  float v12;
  _QWORD v14[34];

  kaldi::VectorBase<float>::Max((uint64_t *)a1);
  v3 = v2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(float **)a1;
  if (v4 >= 1)
  {
    v6 = *(float **)a1;
    v7 = *(unsigned int *)(a1 + 8);
    do
    {
      *v6 = *v6 - v2;
      ++v6;
      --v7;
    }
    while (v7);
  }
  LODWORD(v14[0]) = v4;
  vvexpf(v5, v5, (const int *)v14);
  v8 = *(unsigned int *)(a1 + 8);
  if ((int)v8 < 1)
    goto LABEL_9;
  v9 = 0;
  v10 = *(float **)a1;
  v11 = 0.0;
  do
    v11 = v11 + v10[v9++];
  while (v8 != v9);
  v12 = v11;
  if (v12 == 0.0)
  {
LABEL_9:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "SoftMax produced NaN on vector");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  cblas_sscal(v8, 1.0 / v12, v10, 1);
  return v3 + logf(v12);
}

uint64_t *kaldi::VectorBase<float>::Max(uint64_t *result)
{
  unint64_t v1;
  uint64_t v2;
  int v3;
  float v4;
  uint64_t v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  float *v17;
  float v18;
  float v19;
  _QWORD v20[34];

  v1 = *((unsigned int *)result + 2);
  if (!(_DWORD)v1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, "Empty vector");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
  }
  v2 = *result;
  if ((int)v1 >= 4)
  {
    v5 = 0;
    v3 = v1 & 0xFFFFFFFC;
    v4 = -INFINITY;
    do
    {
      v6 = (float *)(v2 + 4 * v5);
      v7 = *v6;
      v8 = v6[1];
      v9 = v6[2];
      v10 = v6[3];
      if (*v6 <= v4)
      {
        v11 = v8 == v4;
        v12 = v8 < v4;
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
      if (v12 || v11)
      {
        v13 = v9 == v4;
        v14 = v9 < v4;
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
      if (v14 || v13)
      {
        v15 = v10 == v4;
        v16 = v10 < v4;
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
      if (!v16 && !v15)
      {
        if (v7 <= v8)
          v7 = v6[1];
        if (v9 <= v10)
          v9 = v6[3];
        if (v7 > v4)
          v4 = v7;
        if (v9 > v4)
          v4 = v9;
      }
      v5 += 4;
    }
    while (v5 + 4 <= v1);
  }
  else
  {
    v3 = 0;
    v4 = -INFINITY;
  }
  if (v3 < (int)v1)
  {
    v17 = (float *)(v2 + 4 * v3);
    do
    {
      v18 = *v17++;
      v19 = v18;
      if (v18 > v4)
        v4 = v19;
      ++v3;
    }
    while ((int)v1 > v3);
  }
  return result;
}

uint64_t kaldi::VectorBase<float>::Add(uint64_t result, float a2)
{
  uint64_t v2;
  float *v3;

  v2 = *(unsigned int *)(result + 8);
  if ((int)v2 >= 1)
  {
    v3 = *(float **)result;
    do
    {
      *v3 = *v3 + a2;
      ++v3;
      --v2;
    }
    while (v2);
  }
  return result;
}

void kaldi::VectorBase<float>::ApplyExp(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8);
  vvexpf(*(float **)a1, *(const float **)a1, &v1);
}

void kaldi::VectorBase<float>::Sigmoid(uint64_t a1, const void **a2)
{
  int v4;
  float *v5;
  const void *v6;
  int v7;
  float *v8;
  float *v9;
  uint64_t v10;
  int v11;

  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(float **)a1;
  v6 = *a2;
  if (*(const void **)a1 != v6)
  {
    memcpy(*(void **)a1, v6, 4 * v4);
    v4 = *(_DWORD *)(a1 + 8);
    v5 = *(float **)a1;
  }
  cblas_sscal(v4, 0.5, v5, 1);
  v11 = *(_DWORD *)(a1 + 8);
  vvtanhf(*(float **)a1, *(const float **)a1, &v11);
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(float **)a1;
  if (v7 >= 1)
  {
    v9 = *(float **)a1;
    v10 = *(unsigned int *)(a1 + 8);
    do
    {
      *v9 = *v9 + 1.0;
      ++v9;
      --v10;
    }
    while (v10);
  }
  cblas_sscal(v7, 0.5, v8, 1);
}

void kaldi::VectorBase<float>::ApplyTanh(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8);
  vvtanhf(*(float **)a1, *(const float **)a1, &v1);
}

void kaldi::VectorBase<float>::ApplyPowAbs(uint64_t a1, int a2, float a3)
{
  uint64_t v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  float *v11;
  float v12;
  uint64_t v13;
  float *v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float v19;
  float v20;
  uint64_t v21;
  float *v22;
  float v23;
  _BOOL4 v24;
  float v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[34];

  if (a3 == 1.0)
  {
    v5 = *(unsigned int *)(a1 + 8);
    if ((int)v5 >= 1)
    {
      v6 = *(float **)a1;
      do
      {
        v7 = *v6;
        if ((a2 & 1) != 0)
        {
          v8 = fabsf(v7);
          if (v7 >= 0.0)
            v9 = v8;
          else
            v9 = -v8;
        }
        else
        {
          v9 = fabsf(v7);
        }
        *v6++ = v9;
        --v5;
      }
      while (v5);
    }
  }
  if (a3 == 2.0)
  {
    v10 = *(unsigned int *)(a1 + 8);
    if ((int)v10 >= 1)
    {
      v11 = *(float **)a1;
      do
      {
        v12 = -*v11;
        if (((*v11 < 0.0) & a2) == 0)
          v12 = *v11;
        *v11 = *v11 * v12;
        ++v11;
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    if (a3 != 0.5)
    {
      v16 = *(unsigned int *)(a1 + 8);
      if (a3 >= 0.0)
      {
        if ((int)v16 < 1)
          return;
        v21 = 0;
        v22 = *(float **)a1;
        while (1)
        {
          v23 = v22[v21];
          v24 = v23 < 0.0;
          v25 = powf(fabsf(v23), a3);
          if ((v24 & a2) != 0)
            v25 = -v25;
          v22[v21] = v25;
          if (v25 == INFINITY)
            break;
          if (v16 == ++v21)
            return;
        }
      }
      else
      {
        if ((int)v16 < 1)
          return;
        v17 = 0;
        v18 = *(float **)a1;
        while (1)
        {
          v19 = v18[v17];
          v20 = 0.0;
          if (v19 != 0.0)
            v20 = powf(fabsf(v19), a3);
          if (((v20 < 0.0) & a2) != 0)
            v20 = -v20;
          v18[v17] = v20;
          if (v20 == INFINITY)
            break;
          if (v16 == ++v17)
            return;
        }
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Could not raise element ", 24);
      v26 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"to power ", 9);
      v27 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)": returned value = ", 19);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
    }
    v13 = *(unsigned int *)(a1 + 8);
    if ((int)v13 >= 1)
    {
      v14 = *(float **)a1;
      do
      {
        v15 = sqrtf(fabsf(*v14));
        if (((*v14 < 0.0) & a2) != 0)
          v15 = -v15;
        *v14++ = v15;
        --v13;
      }
      while (v13);
    }
  }
}

float kaldi::VectorBase<float>::Norm(uint64_t a1, float a2)
{
  uint64_t v3;
  float *v4;
  float result;
  float v6;
  uint64_t v8;
  const float *v9;
  char v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float *__X;
  int __N;

  if (a2 == 0.0)
  {
    v3 = *(unsigned int *)(a1 + 8);
    if ((int)v3 < 1)
    {
      return 0.0;
    }
    else
    {
      v4 = *(float **)a1;
      result = 0.0;
      do
      {
        v6 = *v4++;
        if (v6 != 0.0)
          result = result + 1.0;
        --v3;
      }
      while (v3);
    }
  }
  else if (a2 == 1.0)
  {
    return cblas_sasum(*(_DWORD *)(a1 + 8), *(const float **)a1, 1);
  }
  else
  {
    v8 = *(unsigned int *)(a1 + 8);
    if (a2 == 2.0)
    {
      return cblas_snrm2(*(_DWORD *)(a1 + 8), *(const float **)a1, 1);
    }
    else if ((int)v8 <= 0)
    {
      return powf(0.0, 1.0 / a2);
    }
    else
    {
      v9 = *(const float **)a1;
      v10 = 1;
      v11 = 0.0;
      do
      {
        v12 = *v9++;
        v13 = powf(fabsf(v12), a2);
        v10 &= v13 != INFINITY;
        v11 = v11 + v13;
        --v8;
      }
      while (v8);
      result = powf(v11, 1.0 / a2);
      if ((v10 & 1) == 0)
      {
        kaldi::VectorBase<float>::Max((uint64_t *)a1);
        v15 = v14;
        kaldi::VectorBase<float>::Min((uint64_t *)a1);
        v17 = -v16;
        if (v15 < v17)
          v15 = v17;
        kaldi::Vector<float>::Vector((uint64_t)&__X, a1);
        cblas_sscal(__N, 1.0 / v15, __X, 1);
        v18 = kaldi::VectorBase<float>::Norm(&__X, a2);
        if (__X)
          free(__X);
        return v15 * v18;
      }
    }
  }
  return result;
}

void sub_1ADD9E374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10)
    free(a10);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::VectorBase<float>::InvertElements(uint64_t result)
{
  uint64_t v1;
  float *v2;

  v1 = *(unsigned int *)(result + 8);
  if ((int)v1 >= 1)
  {
    v2 = *(float **)result;
    do
    {
      *v2 = 1.0 / *v2;
      ++v2;
      --v1;
    }
    while (v1);
  }
  return result;
}

uint64_t kaldi::VectorBase<float>::ReplaceValue(uint64_t result, float a2, float a3)
{
  uint64_t v3;
  float *v4;

  v3 = *(unsigned int *)(result + 8);
  if ((int)v3 >= 1)
  {
    v4 = *(float **)result;
    do
    {
      if (*v4 == a2)
        *v4 = a3;
      ++v4;
      --v3;
    }
    while (v3);
  }
  return result;
}

float kaldi::VectorBase<float>::DivElements(uint64_t a1, float **a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  float v5;
  float result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = *a2;
    v4 = *(float **)a1;
    do
    {
      v5 = *v3++;
      result = *v4 / v5;
      *v4++ = result;
      --v2;
    }
    while (v2);
  }
  return result;
}

void kaldi::VectorBase<float>::AddVecVec(uint64_t a1, const float **a2, const float **a3, float a4, float a5)
{
  cblas_sgbmv(CblasRowMajor, CblasNoTrans, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 8), 0, 0, a4, *a2, 1, *a3, 1, a5, *(float **)a1, 1);
}

void kaldi::VectorBase<float>::CopyRowsFromMat(uint64_t a1, uint64_t *a2)
{
  _BYTE v3[32];

  kaldi::SubMatrix<float>::SubMatrix((uint64_t)v3, *(_QWORD *)a1, 1, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 8));
  kaldi::CompressedMatrix::CopyToMat<float>(a2, (uint64_t)v3);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v3);
}

void sub_1ADD9E598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::VectorBase<float>::Max(uint64_t *result, int *a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  float v6;
  float *v7;
  unint64_t i;
  float v9;
  float v10;
  float v11;
  float v12;
  float *v16;
  float v17;
  float v18;
  _QWORD v19[34];

  v2 = *((unsigned int *)result + 2);
  if (!(_DWORD)v2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, "Empty vector");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  v3 = *result;
  if ((int)v2 >= 4)
  {
    v4 = 0;
    v5 = v2 & 0xFFFFFFFC;
    v7 = (float *)(v3 + 8);
    v6 = -INFINITY;
    for (i = 4; i <= v2; i += 4)
    {
      v10 = *(v7 - 2);
      v9 = *(v7 - 1);
      v12 = *v7;
      v11 = v7[1];
      if (v10 > v6 || v9 > v6 || v12 > v6 || v11 > v6)
      {
        if (v10 > v6)
        {
          v6 = *(v7 - 2);
          v4 = i - 4;
        }
        if (v9 > v6)
        {
          v6 = *(v7 - 1);
          v4 = i - 3;
        }
        if (v12 > v6)
        {
          v6 = *v7;
          v4 = i - 2;
        }
        if (v11 > v6)
        {
          v4 = i - 1;
          v6 = v7[1];
        }
      }
      v7 += 4;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = -INFINITY;
  }
  if (v5 < (int)v2)
  {
    v16 = (float *)(v3 + 4 * v5);
    do
    {
      v17 = *v16++;
      v18 = v17;
      if (v17 > v6)
      {
        v6 = v18;
        v4 = v5;
      }
      ++v5;
    }
    while ((int)v2 > v5);
  }
  *a2 = v4;
  return result;
}

uint64_t *kaldi::VectorBase<float>::Min(uint64_t *result, int *a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  float v6;
  float *v7;
  unint64_t i;
  float v9;
  float v10;
  float v11;
  float v12;
  float *v16;
  float v17;
  float v18;
  _QWORD v19[34];

  v2 = *((unsigned int *)result + 2);
  if (!(_DWORD)v2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, "Empty vector");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  v3 = *result;
  if ((int)v2 >= 4)
  {
    v4 = 0;
    v5 = v2 & 0xFFFFFFFC;
    v7 = (float *)(v3 + 8);
    v6 = INFINITY;
    for (i = 4; i <= v2; i += 4)
    {
      v10 = *(v7 - 2);
      v9 = *(v7 - 1);
      v12 = *v7;
      v11 = v7[1];
      if (v10 < v6 || v9 < v6 || v12 < v6 || v11 < v6)
      {
        if (v10 < v6)
        {
          v6 = *(v7 - 2);
          v4 = i - 4;
        }
        if (v9 < v6)
        {
          v6 = *(v7 - 1);
          v4 = i - 3;
        }
        if (v12 < v6)
        {
          v6 = *v7;
          v4 = i - 2;
        }
        if (v11 < v6)
        {
          v4 = i - 1;
          v6 = v7[1];
        }
      }
      v7 += 4;
    }
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = INFINITY;
  }
  if (v5 < (int)v2)
  {
    v16 = (float *)(v3 + 4 * v5);
    do
    {
      v17 = *v16++;
      v18 = v17;
      if (v17 < v6)
      {
        v6 = v18;
        v4 = v5;
      }
      ++v5;
    }
    while ((int)v2 > v5);
  }
  *a2 = v4;
  return result;
}

uint64_t kaldi::VectorBase<float>::CountZeros(uint64_t a1)
{
  uint64_t v1;
  float *v2;
  double v3;
  float v4;

  v1 = *(unsigned int *)(a1 + 8);
  if ((int)v1 < 1)
    return 0;
  v2 = *(float **)a1;
  v3 = 0.0;
  do
  {
    v4 = *v2++;
    if (v4 == 0.0)
      v3 = v3 + 1.0;
    --v1;
  }
  while (v1);
  return (int)v3;
}

uint64_t kaldi::VectorBase<float>::AddColSumMat(uint64_t *a1, uint64_t a2, float a3, float a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  float *v16;
  float v17;
  float v18;

  kaldi::MatrixBase<float>::NumRows(a2);
  result = kaldi::MatrixBase<float>::NumCols(a2);
  v9 = *((unsigned int *)a1 + 2);
  if ((int)v9 >= 1)
  {
    v10 = 0;
    v11 = *(float **)a2;
    v12 = *a1;
    v13 = 4 * *(int *)(a2 + 16);
    do
    {
      v14 = 0.0;
      if ((int)result >= 1)
      {
        v15 = result;
        v16 = v11;
        do
        {
          v17 = *v16++;
          v14 = v14 + v17;
          --v15;
        }
        while (v15);
      }
      v18 = (float)(*(float *)(v12 + 4 * v10) * a4) + a3 * v14;
      *(float *)(v12 + 4 * v10++) = v18;
      v11 = (float *)((char *)v11 + v13);
    }
    while (v10 != v9);
  }
  return result;
}

void kaldi::VectorBase<float>::AddDiagMat2(uint64_t a1, const float **a2, int a3, float a4, float a5)
{
  int v9;
  int v10;
  int v11;
  const float *v12;
  float *v13;
  uint64_t v14;
  float v15;
  int v16;
  int v17;
  int v18;
  int v19;
  const float *v20;
  float *v21;
  float v22;

  if (a3 == 111)
  {
    kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
    v9 = *(_DWORD *)(a1 + 8);
    v10 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
    v11 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)a2);
    if (v9 >= 1)
    {
      v12 = *a2;
      v13 = *(float **)a1;
      v14 = 4 * v11;
      do
      {
        v15 = *v13;
        *v13++ = (float)(cblas_sdot(v10, v12, 1, v12, 1) * a4) + (float)(a5 * v15);
        v12 = (const float *)((char *)v12 + v14);
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
    v16 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
    v17 = *(_DWORD *)(a1 + 8);
    v18 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)a2);
    if (v17 >= 1)
    {
      v19 = v18;
      v20 = *a2;
      v21 = *(float **)a1;
      do
      {
        v22 = *v21;
        *v21++ = (float)(cblas_sdot(v16, v20, v19, v20, v19) * a4) + (float)(a5 * v22);
        ++v20;
        --v17;
      }
      while (v17);
    }
  }
}

void kaldi::VectorBase<float>::AddDiagMatMat(uint64_t a1, const float **a2, int a3, const float **a4, int a5, float a6, float a7)
{
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  const float *v22;
  const float *v23;
  float *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  float v29;

  v14 = *(_DWORD *)(a1 + 8);
  if (a3 == 112)
    v15 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  else
    v15 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
  v16 = v15;
  if (a5 == 112)
    kaldi::MatrixBase<float>::NumCols((uint64_t)a4);
  else
    kaldi::MatrixBase<float>::NumRows((uint64_t)a4);
  v17 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)a2);
  v18 = v17;
  if (a3 == 112)
    v19 = v17;
  else
    v19 = 1;
  v20 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)a4);
  if (a5 == 112)
    v21 = 1;
  else
    v21 = v20;
  if (v14 >= 1)
  {
    v22 = *a4;
    v23 = *a2;
    v24 = *(float **)a1;
    if (a5 == 112)
      v25 = v20;
    else
      v25 = 1;
    if (a3 == 112)
      v26 = 1;
    else
      v26 = v18;
    v27 = 4 * v25;
    v28 = 4 * v26;
    do
    {
      v29 = *v24;
      *v24++ = (float)(cblas_sdot(v16, v23, v19, v22, v21) * a6) + (float)(a7 * v29);
      v22 = (const float *)((char *)v22 + v27);
      v23 = (const float *)((char *)v23 + v28);
      --v14;
    }
    while (v14);
  }
}

void kaldi::VectorBase<float>::Write(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;
  _QWORD *v6;
  void *__p[2];
  char v8;

  if (*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Failed to write vector to stream: stream not good");
    goto LABEL_13;
  }
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FV");
    kaldi::WriteToken(a2, 1, (char *)__p);
    kaldi::WriteBasicType<int>(a2, 1);
    std::ostream::write();
    if (v8 < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" [ ", 3);
    if (*(int *)(a1 + 8) >= 1)
    {
      v5 = 0;
      do
      {
        v6 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" ", 1);
        ++v5;
      }
      while (v5 < *(int *)(a1 + 8));
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"]\n", 2);
  }
  if (*(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Failed to write vector to stream");
LABEL_13:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
}

uint64_t kaldi::VectorBase<double>::Set(uint64_t result, double a2)
{
  uint64_t v2;
  double *v3;

  v2 = *(unsigned int *)(result + 8);
  if ((int)v2 >= 1)
  {
    v3 = *(double **)result;
    do
    {
      *v3++ = a2;
      --v2;
    }
    while (v2);
  }
  return result;
}

double kaldi::VectorBase<double>::Sum(uint64_t a1)
{
  uint64_t v1;
  double *v2;
  double result;
  double v4;

  v1 = *(unsigned int *)(a1 + 8);
  if ((int)v1 < 1)
    return 0.0;
  v2 = *(double **)a1;
  result = 0.0;
  do
  {
    v4 = *v2++;
    result = result + v4;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t kaldi::VectorBase<double>::ApplyFloor(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t result;
  double *v5;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 < 1)
    return 0;
  result = 0;
  v5 = *(double **)a1;
  do
  {
    if (*v5 < a2)
    {
      *v5 = a2;
      result = (result + 1);
    }
    ++v5;
    --v2;
  }
  while (v2);
  return result;
}

double kaldi::VectorBase<double>::MulElements(uint64_t a1, double **a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  double v5;
  double result;

  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 >= 1)
  {
    v3 = *a2;
    v4 = *(double **)a1;
    do
    {
      v5 = *v3++;
      result = v5 * *v4;
      *v4++ = result;
      --v2;
    }
    while (v2);
  }
  return result;
}

void kaldi::VectorBase<double>::Scale(uint64_t a1, double a2)
{
  cblas_dscal(*(_DWORD *)(a1 + 8), a2, *(double **)a1, 1);
}

long double kaldi::VectorBase<double>::ApplySoftMax(uint64_t a1)
{
  double v2;
  double v3;
  int v4;
  double *v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double v11;
  _QWORD v13[34];

  kaldi::VectorBase<double>::Max((uint64_t *)a1);
  v3 = v2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(double **)a1;
  if (v4 >= 1)
  {
    v6 = *(double **)a1;
    v7 = *(unsigned int *)(a1 + 8);
    do
    {
      *v6 = *v6 - v2;
      ++v6;
      --v7;
    }
    while (v7);
  }
  LODWORD(v13[0]) = v4;
  vvexp(v5, v5, (const int *)v13);
  v8 = *(unsigned int *)(a1 + 8);
  if ((int)v8 < 1)
    goto LABEL_9;
  v9 = 0;
  v10 = *(double **)a1;
  v11 = 0.0;
  do
    v11 = v11 + v10[v9++];
  while (v8 != v9);
  if (v11 == 0.0)
  {
LABEL_9:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "SoftMax produced NaN on vector");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  cblas_dscal(v8, 1.0 / v11, v10, 1);
  return v3 + log(v11);
}

uint64_t *kaldi::VectorBase<double>::Max(uint64_t *result)
{
  unint64_t v1;
  uint64_t v2;
  int v3;
  double v4;
  uint64_t v5;
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  double *v17;
  double v18;
  double v19;
  _QWORD v20[34];

  v1 = *((unsigned int *)result + 2);
  if (!(_DWORD)v1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, "Empty vector");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
  }
  v2 = *result;
  if ((int)v1 >= 4)
  {
    v5 = 0;
    v3 = v1 & 0xFFFFFFFC;
    v4 = -INFINITY;
    do
    {
      v6 = (double *)(v2 + 8 * v5);
      v7 = *v6;
      v8 = v6[1];
      v9 = v6[2];
      v10 = v6[3];
      if (*v6 <= v4)
      {
        v11 = v8 == v4;
        v12 = v8 < v4;
      }
      else
      {
        v11 = 0;
        v12 = 0;
      }
      if (v12 || v11)
      {
        v13 = v9 == v4;
        v14 = v9 < v4;
      }
      else
      {
        v13 = 0;
        v14 = 0;
      }
      if (v14 || v13)
      {
        v15 = v10 == v4;
        v16 = v10 < v4;
      }
      else
      {
        v15 = 0;
        v16 = 0;
      }
      if (!v16 && !v15)
      {
        if (v7 <= v8)
          v7 = v6[1];
        if (v9 <= v10)
          v9 = v6[3];
        if (v7 > v4)
          v4 = v7;
        if (v9 > v4)
          v4 = v9;
      }
      v5 += 4;
    }
    while (v5 + 4 <= v1);
  }
  else
  {
    v3 = 0;
    v4 = -INFINITY;
  }
  if (v3 < (int)v1)
  {
    v17 = (double *)(v2 + 8 * v3);
    do
    {
      v18 = *v17++;
      v19 = v18;
      if (v18 > v4)
        v4 = v19;
      ++v3;
    }
    while ((int)v1 > v3);
  }
  return result;
}

uint64_t kaldi::VectorBase<double>::AddVec2(uint64_t result, double **a2, double a3)
{
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;

  v3 = *(unsigned int *)(result + 8);
  if ((int)v3 >= 1)
  {
    v4 = *a2;
    v5 = *(double **)result;
    do
    {
      v6 = *v4++;
      *v5 = *v5 + v6 * a3 * v6;
      ++v5;
      --v3;
    }
    while (v3);
  }
  return result;
}

void kaldi::VectorBase<double>::AddRowSumMat(uint64_t a1, const double **a2, double a3, double a4)
{
  int v8;
  int v9;
  int v10;
  double *v11;
  const double *v12;
  uint64_t v13;

  kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
  v8 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  v9 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)a2);
  v10 = *(_DWORD *)(a1 + 8);
  v11 = *(double **)a1;
  cblas_dscal(v10, a4, v11, 1);
  if (v8 >= 1)
  {
    v12 = *a2;
    v13 = 8 * v9;
    do
    {
      cblas_daxpy(v10, a3, v12, 1, v11, 1);
      v12 = (const double *)((char *)v12 + v13);
      --v8;
    }
    while (v8);
  }
}

void kaldi::VectorBase<double>::AddDiagMat2(uint64_t a1, const double **a2, int a3, double a4, double a5)
{
  int v9;
  int v10;
  int v11;
  const double *v12;
  double *v13;
  uint64_t v14;
  double v15;
  int v16;
  int v17;
  int v18;
  int v19;
  const double *v20;
  double *v21;
  double v22;

  if (a3 == 111)
  {
    kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
    v9 = *(_DWORD *)(a1 + 8);
    v10 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
    v11 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)a2);
    if (v9 >= 1)
    {
      v12 = *a2;
      v13 = *(double **)a1;
      v14 = 8 * v11;
      do
      {
        v15 = *v13;
        *v13++ = cblas_ddot(v10, v12, 1, v12, 1) * a4 + a5 * v15;
        v12 = (const double *)((char *)v12 + v14);
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
    v16 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
    v17 = *(_DWORD *)(a1 + 8);
    v18 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)a2);
    if (v17 >= 1)
    {
      v19 = v18;
      v20 = *a2;
      v21 = *(double **)a1;
      do
      {
        v22 = *v21;
        *v21++ = cblas_ddot(v16, v20, v19, v20, v19) * a4 + a5 * v22;
        ++v20;
        --v17;
      }
      while (v17);
    }
  }
}

void kaldi::VectorBase<float>::AddMatVec<signed char>(uint64_t a1, uint64_t a2, double a3, float a4, uint64_t a5, uint64_t a6)
{
  kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::MatrixBase<float>::NumRows(a2);
  kaldi::QuantizedVectorBase<signed char>::AddMatVec(a6, a2, a1, a4);
}

void kaldi::VectorBase<float>::AddMatVec<short>(uint64_t a1, uint64_t a2, double a3, float a4, uint64_t a5, uint64_t a6)
{
  kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::MatrixBase<float>::NumRows(a2);
  kaldi::QuantizedVectorBase<short>::AddMatVec(a6, a2, a1, a4);
}

void kaldi::VectorBase<float>::ApplyPow(uint64_t a1, float a2)
{
  int v2;
  float v3;

  v3 = a2;
  v2 = *(_DWORD *)(a1 + 8);
  vvpowsf(*(float **)a1, &v3, *(const float **)a1, &v2);
}

void kaldi::VectorBase<double>::ApplyPow(uint64_t a1, double a2)
{
  int v2;
  double v3;

  v3 = a2;
  v2 = *(_DWORD *)(a1 + 8);
  vvpows(*(double **)a1, &v3, *(const double **)a1, &v2);
}

void kaldi::VectorBase<float>::ApplyLog(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8);
  vvlogf(*(float **)a1, *(const float **)a1, &v1);
}

void kaldi::VectorBase<double>::ApplyLog(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8);
  vvlog(*(double **)a1, *(const double **)a1, &v1);
}

void kaldi::VectorBase<float>::ApplyAbs(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 8);
  vvfabsf(*(float **)a1, *(const float **)a1, &v1);
}

void kaldi::VectorBase<float>::Tanh(uint64_t a1, const float **a2)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 8);
  vvtanhf(*(float **)a1, *a2, &v2);
}

void File::File(File *this, const char *a2, const char *a3, int a4)
{
  _QWORD *v8;
  void *v9;
  unint64_t v10;
  gzFile v11;

  *(_QWORD *)this = a2;
  *((_DWORD *)this + 2) = 0;
  *((_BYTE *)this + 12) = a4;
  *((_BYTE *)this + 13) = 1;
  *((_QWORD *)this + 2) = 0;
  v8 = (_QWORD *)((char *)this + 16);
  *((_QWORD *)this + 3) = 0;
  v9 = malloc_type_malloc(0x80uLL, 0x57C4CFDAuLL);
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 4) = v9;
  *((_DWORD *)this + 10) = 128;
  *((_WORD *)this + 22) = 256;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 7) = -1;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 0;
  v10 = strlen(a2);
  if (v10 >= 4 && !strcmp(&a2[v10 - 3], ".gz"))
  {
    v11 = gzopen(a2, a3);
    *((_QWORD *)this + 3) = v11;
    if (v11)
      goto LABEL_8;
  }
  else
  {
    *((_QWORD *)this + 2) = srilm_zopen(a2, a3);
    if (*((_QWORD *)this + 3))
      goto LABEL_8;
  }
  if (a4 && !*v8)
  {
    perror(a2);
    exit(a4);
  }
LABEL_8:
  MEMORY[0x1AF44C914]((char *)this + 64, "");
}

void sub_1ADD9F4B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void File::File(File *this, __sFILE *a2, char a3)
{
  void *v4;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_BYTE *)this + 12) = a3;
  *((_BYTE *)this + 13) = 1;
  *((_QWORD *)this + 2) = a2;
  *((_QWORD *)this + 3) = 0;
  v4 = malloc_type_malloc(0x80uLL, 0x43C4C94DuLL);
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 4) = v4;
  *((_DWORD *)this + 10) = 128;
  *((_WORD *)this + 22) = 256;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 7) = -1;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 0;
  MEMORY[0x1AF44C914]((char *)this + 64, "");
}

void sub_1ADD9F564(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void File::File(File *this, const char *a2, unint64_t a3, char a4, int a5)
{
  void *v8;
  uint64_t v9;

  *(_QWORD *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((_BYTE *)this + 12) = a4;
  *((_BYTE *)this + 13) = 1;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v8 = malloc_type_malloc(0x80uLL, 0x1F9E201EuLL);
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 4) = v8;
  *((_DWORD *)this + 10) = 128;
  *((_WORD *)this + 22) = 256;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 7) = -1;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 0;
  MEMORY[0x1AF44C914]((char *)this + 64, a2);
  if (*((char *)this + 87) < 0)
    v9 = *((_QWORD *)this + 9);
  else
    LODWORD(v9) = *((unsigned __int8 *)this + 87);
  *((_DWORD *)this + 22) = v9;
  *((_DWORD *)this + 24) = 1;
  if ((int)v9 < a5)
    std::string::reserve((std::string *)((char *)this + 64), a5);
}

void sub_1ADD9F658(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void File::~File(void **this)
{
  void *v2;

  if (*this)
    File::close((File *)this);
  if (this[7] != (void *)-1)
    MEMORY[0x1AF44DD78]();
  v2 = this[4];
  if (v2)
    free(v2);
  this[4] = 0;
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
}

uint64_t File::close(File *this)
{
  gzFile_s *v2;
  uint64_t result;

  v2 = (gzFile_s *)*((_QWORD *)this + 3);
  if (v2)
  {
    result = gzclose(v2);
  }
  else
  {
    result = *((_QWORD *)this + 2);
    if (!result)
    {
      *((_QWORD *)this + 2) = 0;
      *((_QWORD *)this + 3) = 0;
      return result;
    }
    result = zclose((FILE *)result);
  }
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  if ((_DWORD)result)
  {
    if (*((_BYTE *)this + 12))
      File::close((const char **)this);
  }
  return result;
}

uint64_t File::reopen(File *this, const char *a2, const char *a3)
{
  unint64_t v6;
  FILE *v7;

  MEMORY[0x1AF44C914]((char *)this + 64, "");
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 0;
  *((_BYTE *)this + 45) = 1;
  *((_DWORD *)this + 12) = 0;
  if (*((_QWORD *)this + 7) != -1)
  {
    MEMORY[0x1AF44DD78]();
    *((_QWORD *)this + 7) = -1;
  }
  if (*(_QWORD *)this)
    File::close(this);
  *(_QWORD *)this = a2;
  v6 = strlen(a2);
  if (v6 >= 4 && !strcmp(&a2[v6 - 3], ".gz"))
  {
    *((_QWORD *)this + 3) = gzopen(a2, a3);
    if (*((_QWORD *)this + 2))
      return 1;
  }
  else
  {
    v7 = srilm_zopen(a2, a3);
    *((_QWORD *)this + 2) = v7;
    if (v7)
      return 1;
  }
  if (*((_QWORD *)this + 3))
    return 1;
  if (*((_BYTE *)this + 12))
    File::reopen((const char **)this);
  return 0;
}

BOOL File::error(File *this)
{
  const char *v2;
  BOOL v3;
  FILE *v4;

  if (*((_DWORD *)this + 24))
    return 0;
  if (*((_QWORD *)this + 3))
  {
    v2 = gzerror(*((gzFile *)this + 3), 0);
    if (v2)
    {
      v3 = *v2 == 0;
      return !v3;
    }
    return 1;
  }
  v4 = (FILE *)*((_QWORD *)this + 2);
  if (!v4)
    return 1;
  v3 = ferror(v4) == 0;
  return !v3;
}

char *File::fgetsUTF8(File *this, char *a2, int a3)
{
  char *v4;
  size_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  const char *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  size_t v20;
  int v21;
  size_t __n;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _DWORD v27[2];
  uint64_t v28;
  int v29;

  v4 = a2;
  v6 = a3;
  bzero(a2, a3);
  if ((a3 & 1) != 0)
    v7 = a3;
  else
    v7 = a3 - 1;
  if (!File::fgets(this, v4, v7))
    return 0;
  if (!*((_BYTE *)this + 45))
    goto LABEL_19;
  *((_BYTE *)this + 45) = 0;
  *((_QWORD *)this + 7) = 0;
  if (!strncmp(v4, UTF8magic, 3uLL))
  {
    v9 = 0;
    v10 = 1;
    *((_DWORD *)this + 12) = 1;
    v8 = 3;
  }
  else
  {
    v8 = 2;
    if (!strncmp(v4, UTF16LEmagic, 2uLL))
    {
      *((_DWORD *)this + 12) = 2;
      v9 = MEMORY[0x1AF44DD84]("UTF-8", "UTF-16LE");
      *((_QWORD *)this + 7) = v9;
    }
    else
    {
      if (strncmp(v4, UTF16BEmagic, 2uLL))
      {
        v9 = 0;
        v10 = 0;
        v8 = 0;
        goto LABEL_14;
      }
      *((_DWORD *)this + 12) = 3;
      v9 = MEMORY[0x1AF44DD84]("UTF-8", "UTF-16BE");
      *((_QWORD *)this + 7) = v9;
      v8 = 2;
    }
    v10 = 1;
  }
LABEL_14:
  if (v9 == -1)
  {
    v14 = File::position((const char **)this, MEMORY[0x1E0DE4A50]);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"conversion from UTF-16", 22);
    if (*((_DWORD *)this + 12) == 2)
      v16 = "LE";
    else
      v16 = "BE";
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" not supported\n", 15);
    return 0;
  }
  if (!v9)
    *((_QWORD *)this + 7) = -1;
  if (v10)
  {
    memmove(v4, &v4[v8], a3 - v8);
    bzero(&v4[v6 - v8], v8);
  }
LABEL_19:
  v11 = *((_QWORD *)this + 7);
  if (v11 != -1)
  {
    v27[0] = 0;
    v27[1] = a3;
    v28 = 0;
    v29 = 0;
    if (a3)
    {
      Array<char>::alloc((uint64_t)v27, a3 - 1, 0);
      v12 = v28;
      v13 = v27[0];
      v11 = *((_QWORD *)this + 7);
    }
    else
    {
      v13 = 0;
      v12 = 0;
    }
    v18 = (a3 & 1) != 0 ? a3 - 1 : a3;
    v25 = v18;
    v26 = v4;
    __n = v6;
    v24 = v12 - v13;
    v19 = MEMORY[0x1AF44DD6C](v11, &v26, &v25, &v24, &__n);
    if (v19 == -1)
    {
      perror("iconv");
    }
    else
    {
      v20 = __n;
      memcpy(v4, (const void *)(v28 - v27[0]), __n);
      if (v6 > v20)
        bzero(&v4[v20], v6 - v20);
      if (*((_DWORD *)this + 12) == 2)
      {
        v21 = strlen(v4);
        if (v21)
        {
          if (v4[v21 - 1] == 10)
            File::fgetc(this);
        }
      }
    }
    if (v28)
      MEMORY[0x1AF44D160](v28, 0x1000C8077774924);
    if (v19 == -1)
      return 0;
  }
  return v4;
}

void sub_1ADD9FB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15)
    MEMORY[0x1AF44D160](a15, 0x1000C8077774924);
  _Unwind_Resume(exception_object);
}

char *File::fgets(File *this, char *buf, int a3)
{
  gzFile_s *v5;
  char *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v5 = (gzFile_s *)*((_QWORD *)this + 3);
  if (v5)
    return gzgets(v5, buf, a3);
  if (*((_QWORD *)this + 2))
    return fgets(buf, a3, *((FILE **)this + 2));
  result = 0;
  if (buf)
  {
    v7 = (a3 - 1);
    if (a3 >= 1)
    {
      if (a3 > 1)
      {
        v8 = 0;
        v9 = 0x100000000;
        while (1)
        {
          v10 = File::fgetc(this);
          if (v10 == -1)
            break;
          buf[v8] = v10;
          if (v10 == 10)
          {
            buf[v9 >> 32] = 0;
            return buf;
          }
          ++v8;
          v9 += 0x100000000;
          if (v7 == v8)
            goto LABEL_15;
        }
        LODWORD(v7) = v8;
LABEL_15:
        buf[(int)v7] = 0;
        result = buf;
        if ((_DWORD)v7)
          return result;
      }
      else
      {
        *buf = 0;
      }
      return 0;
    }
  }
  return result;
}

_QWORD *File::position(const char **a1, _QWORD *a2)
{
  const char *v3;
  size_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v3 = *a1;
  if (*a1)
  {
    v4 = strlen(*a1);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v3, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"line ", 5);
  v6 = (_QWORD *)std::ostream::operator<<();
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
}

uint64_t File::fgetc(File *this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  int v5;
  std::string::size_type v6;

  v1 = *((_QWORD *)this + 3);
  if (v1)
  {
    if (*(_DWORD *)v1)
    {
      --*(_DWORD *)v1;
      v2 = *(unsigned __int8 **)(v1 + 8);
      v3 = *(_QWORD *)(v1 + 16) + 1;
      *(_QWORD *)(v1 + 8) = v2 + 1;
      *(_QWORD *)(v1 + 16) = v3;
      return *v2;
    }
    else
    {
      return gzgetc(*((gzFile *)this + 3));
    }
  }
  else if (*((_QWORD *)this + 2))
  {
    return fgetc(*((FILE **)this + 2));
  }
  else if (*((_DWORD *)this + 24) && (v5 = *((_DWORD *)this + 22), v5 >= 1) && (v6 = *((int *)this + 23), (int)v6 < v5))
  {
    *((_DWORD *)this + 23) = v6 + 1;
    return *std::string::at((std::string *)((char *)this + 64), v6);
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

char *File::getline(File *this)
{
  char *result;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  size_t v9;
  unsigned __int8 v10;
  unsigned __int8 *v11;
  int v12;

  if (*((_BYTE *)this + 44))
  {
    *((_BYTE *)this + 44) = 0;
    return (char *)*((_QWORD *)this + 4);
  }
  result = File::fgetsUTF8(this, *((char **)this + 4), *((_DWORD *)this + 10));
  if (result)
  {
    v3 = 0;
    v4 = 0;
    v5 = MEMORY[0x1E0C80978];
    while (1)
    {
      while (1)
      {
        v6 = (unsigned __int8 *)*((_QWORD *)this + 4);
        v7 = strlen((const char *)&v6[v3]);
        if (v7)
        {
          v3 = (v4 + v7);
          if (v6[(v3 - 1)] != 10)
            break;
        }
LABEL_13:
        ++*((_DWORD *)this + 2);
        v10 = *v6;
        if (!*v6)
          goto LABEL_25;
        v11 = v6 + 1;
        while ((v10 & 0x80) == 0)
        {
          if ((*(_DWORD *)(v5 + 4 * (char)v10 + 60) & 0x4000) == 0)
            goto LABEL_21;
LABEL_19:
          v12 = *v11++;
          v10 = v12;
          if (!v12)
            goto LABEL_25;
        }
        if (__maskrune((char)v10, 0x4000uLL))
          goto LABEL_19;
LABEL_21:
        if (*(v11 - 1))
        {
          result = (char *)*((_QWORD *)this + 4);
          if (!*((_BYTE *)this + 13) || *result != 35 || result[1] != 35)
          {
            *((_BYTE *)this + 44) = 0;
            return result;
          }
        }
LABEL_25:
        result = File::fgetsUTF8(this, *((char **)this + 4), *((_DWORD *)this + 10));
        v3 = 0;
        v4 = 0;
        if (!result)
          return result;
      }
      v8 = *((_DWORD *)this + 10);
      if (v3 >= v8 - 128)
      {
        v9 = (2 * v8);
        *((_DWORD *)this + 10) = v9;
        v6 = (unsigned __int8 *)malloc_type_realloc(v6, v9, 0xDFB1A35BuLL);
        *((_QWORD *)this + 4) = v6;
        v8 = *((_DWORD *)this + 10);
      }
      v4 = v3;
      if (!File::fgetsUTF8(this, (char *)&v6[v3], v8 - (int)v3))
      {
        if (!(_DWORD)v3)
          return 0;
        *(_BYTE *)(*((_QWORD *)this + 4) + v3) = 0;
        v6 = (unsigned __int8 *)*((_QWORD *)this + 4);
        goto LABEL_13;
      }
    }
  }
  return result;
}

uint64_t File::ungetline(uint64_t this)
{
  *(_BYTE *)(this + 44) = 1;
  return this;
}

_QWORD *File::offset(uint64_t a1, _QWORD *a2)
{
  const char *v4;
  size_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v4 = *(const char **)a1;
  if (*(_QWORD *)a1)
  {
    v5 = strlen(*(const char **)a1);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)": ", 2);
  }
  if (*(_QWORD *)(a1 + 16))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"offset ", 7);
    ftello(*(FILE **)(a1 + 16));
    v7 = (_QWORD *)std::ostream::operator<<();
  }
  else
  {
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"offset unknown ", 15);
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)": ", 2);
}

uint64_t File::fprintf(File *this, const char *a2, ...)
{
  uint64_t v2;
  const char *v3;
  const char *v4;
  uint64_t v5;
  int v7;
  int v8;
  char *v9;
  int v10;
  BOOL v11;
  int v12;
  std::string *v13;
  char *v14;
  char __str[4096];
  uint64_t v16;
  va_list va;

  va_start(va, a2);
  v2 = MEMORY[0x1E0C80A78](this, a2);
  v4 = v3;
  v5 = v2;
  v16 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(v2 + 24))
  {
    va_copy(__str, va);
    return gzvprintf(*(gzFile *)(v2 + 24), v3, va);
  }
  if (*(_QWORD *)(v2 + 16))
  {
    va_copy(__str, va);
    return vfprintf(*(FILE **)(v2 + 16), v3, va);
  }
  if (!*(_DWORD *)(v2 + 96))
    return 0xFFFFFFFFLL;
  v7 = vsnprintf(__str, 0x1000uLL, v3, va);
  if (v7 < 0x1000)
  {
    v13 = (std::string *)(v5 + 64);
    v14 = __str;
    goto LABEL_20;
  }
  if (v7 > 4095)
    v8 = v7 + 1;
  else
    v8 = 0x2000;
  v9 = (char *)operator new[]();
  v10 = vsnprintf(v9, v8, v4, va);
  if ((v10 & 0x80000000) == 0 && v10 < v8)
  {
LABEL_17:
    std::string::append((std::string *)(v5 + 64), v9);
    MEMORY[0x1AF44D160](v9, 0x1000C8077774924);
    return 0;
  }
  while (1)
  {
    if (v8 <= 500000000)
    {
      v8 *= 2;
      goto LABEL_15;
    }
    v11 = v8 >= 0x3B9ACA00;
    v8 = 1000000000;
    if (v11)
      break;
LABEL_15:
    MEMORY[0x1AF44D160](v9, 0x1000C8077774924);
    v9 = (char *)operator new[]();
    v12 = vsnprintf(v9, v8, v4, va);
    if ((v12 & 0x80000000) == 0 && v12 < v8)
      goto LABEL_17;
  }
  MEMORY[0x1AF44D160](v9, 0x1000C8077774924);
  if (*(_BYTE *)(v5 + 12))
    exit(*(unsigned __int8 *)(v5 + 12));
  v14 = "In class File, failed writing to buffer\n";
  v13 = (std::string *)(v5 + 64);
LABEL_20:
  std::string::append(v13, v14);
  return 0;
}

size_t File::fread(File *this, void *__ptr, size_t __size, size_t __nitems)
{
  gzFile_s *v5;
  FILE *v7;

  v5 = (gzFile_s *)*((_QWORD *)this + 3);
  if (v5)
    return gzread(v5, __ptr, __nitems * __size) / __size;
  v7 = (FILE *)*((_QWORD *)this + 2);
  if (v7)
    return fread(__ptr, __size, __nitems, v7);
  else
    return 0;
}

size_t File::fwrite(File *this, const void *__ptr, size_t __size, size_t __nitems)
{
  gzFile_s *v5;
  FILE *v7;

  v5 = (gzFile_s *)*((_QWORD *)this + 3);
  if (v5)
    return gzwrite(v5, __ptr, __nitems * __size) / __size;
  v7 = (FILE *)*((_QWORD *)this + 2);
  if (v7)
    return fwrite(__ptr, __size, __nitems, v7);
  else
    return 0;
}

off_t File::ftell(File *this)
{
  if (*((_QWORD *)this + 3))
    return gztell(*((gzFile *)this + 3));
  if (*((_QWORD *)this + 2))
    return ftello(*((FILE **)this + 2));
  if (*((_DWORD *)this + 24))
    return *((int *)this + 23);
  return -1;
}

uint64_t File::fseek(File *this, off_t a2, int a3)
{
  uint64_t v3;
  int v5;

  if (*((_QWORD *)this + 3))
    return MEMORY[0x1AF44DD3C](*((_QWORD *)this + 3));
  if (!*((_QWORD *)this + 2))
  {
    if (*((_DWORD *)this + 24))
    {
      switch(a3)
      {
        case 0:
          goto LABEL_14;
        case 2:
          v5 = *((_DWORD *)this + 22);
          goto LABEL_13;
        case 1:
          v5 = *((_DWORD *)this + 23);
LABEL_13:
          LODWORD(a2) = v5 + a2;
LABEL_14:
          *((_DWORD *)this + 23) = a2;
          v3 = 0;
          if ((a2 & 0x80000000) != 0)
            *((_DWORD *)this + 23) = 0;
          return v3;
      }
    }
    return 0xFFFFFFFFLL;
  }
  return fseeko(*((FILE **)this + 2), a2, a3);
}

uint64_t File::c_str(File *this)
{
  uint64_t result;

  if (*((_QWORD *)this + 2) || *((_QWORD *)this + 3) || !*((_DWORD *)this + 24))
    return 0;
  result = (uint64_t)this + 64;
  if (*((char *)this + 87) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t quasar::lm::arpa2fst::kaldi_impl::ConvertToFST::ConvertToFST(uint64_t a1, uint64_t a2, uint64_t *a3, char a4, char a5, char a6, char a7)
{
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v12 = a3[1];
  v19 = *a3;
  v20 = (std::__shared_weak_count *)v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  quasar::lm::arpa2fst::ConvertToFST::ConvertToFST((_QWORD *)a1, a2, &v19);
  v15 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)a1 = &off_1E5D3A838;
  *(_BYTE *)(a1 + 32) = a4;
  *(_BYTE *)(a1 + 33) = a5;
  *(_BYTE *)(a1 + 34) = a6;
  *(_BYTE *)(a1 + 35) = a7;
  return a1;
}

void sub_1ADDA04D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::lm::arpa2fst::kaldi_impl::ConvertToFST::operator()(uint64_t a1, quasar::lm **a2)
{
  Ngram *v2;
  quasar::lm *v4;
  uint64_t v5;
  int v6;
  int v7;
  quasar::lm *v8;
  uint64_t v9;
  char *v10;
  int v11;
  quasar::lm *v12;
  _QWORD *Featurizer;
  _QWORD *v14;
  quasar::lm *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  int v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  _BYTE *v37;
  uint64_t v38;
  int64_t v39;
  std::vector<unsigned int>::size_type v40;
  uint64_t (*v41)(Vocab *, uint64_t);
  std::vector<unsigned int>::size_type v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t *v48;
  int v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t (*v52)(Vocab *, uint64_t);
  float *v53;
  uint64_t *v54;
  int v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  unsigned int v61;
  float *BOW;
  float v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  uint64_t v73;
  uint64_t v74;
  void **v75;
  Ngram *v76;
  uint64_t v77;
  _BYTE v78[20];
  unsigned int v79;
  _BYTE v80[32];
  _DWORD v81[20];
  __int128 v82;
  __int128 v83;
  _DWORD v84[3];
  uint64_t v85;
  _BYTE v86[72];
  void *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  _QWORD *v91;
  std::__shared_weak_count *v92;
  void *__p[2];
  char v94;
  uint64_t v95;

  v2 = (Ngram *)a2;
  v95 = *MEMORY[0x1E0C80C00];
  v4 = a2[3];
  v91 = 0;
  v92 = 0;
  if (*(_QWORD *)(a1 + 16))
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v91, (uint64_t *)(a1 + 16));
  }
  else
  {
    v5 = quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(v4, *(const Vocab **)(a1 + 8), (const fst::SymbolTable *)1);
    std::shared_ptr<std::unordered_map<unsigned int,int>>::reset[abi:ne180100]<std::unordered_map<unsigned int,int>,void>(&v91, v5);
  }
  v6 = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8), "<s>");
  v7 = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8), "</s>");
  v8 = (quasar::lm *)(*(uint64_t (**)(quasar::lm *))(*(_QWORD *)v4 + 96))(v4);
  if ((_DWORD)v8 == -1)
  {
    v11 = -1;
    if ((v6 & 0x80000000) == 0)
      goto LABEL_7;
  }
  else
  {
    v9 = (*(uint64_t (**)(quasar::lm *))(*(_QWORD *)v4 + 96))(v4);
    v10 = (char *)(*(uint64_t (**)(quasar::lm *, uint64_t))(*(_QWORD *)v4 + 32))(v4, v9);
    std::string::basic_string[abi:ne180100]<0>(__p, v10);
    v8 = (quasar::lm *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), __p);
    v11 = (int)v8;
    if (v94 < 0)
    {
      operator delete(__p[0]);
      if ((v6 & 0x80000000) == 0)
        goto LABEL_7;
    }
    else if ((v6 & 0x80000000) == 0)
    {
LABEL_7:
      v12 = (quasar::lm *)quasar::lm::nullstream(v8);
      goto LABEL_10;
    }
  }
  quasar::lm::LogMessage::LogMessage(__p, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi.cpp", 59);
  Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)__p);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"<s> is missing from FST symbol table. ", 38);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Note that this is a requirement of the Kaldi implementation even when the explicitStartEndMarkers option is set to false.", 121);
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)__p);
LABEL_10:
  if (v7 < 0)
  {
    quasar::lm::LogMessage::LogMessage(__p, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi.cpp", 62);
    v16 = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)__p);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"</s> is missing from FST symbol table. ", 39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Note that this is a requirement of the Kaldi implementation even when the explicitStartEndMarkers option is set to false.", 121);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)__p);
  }
  else
  {
    v15 = (quasar::lm *)quasar::lm::nullstream(v12);
  }
  if (v6 == v7)
  {
    quasar::lm::LogMessage::LogMessage(__p, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi.cpp", 66);
    v18 = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"<s> and </s> should be different symbols.", 41);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)__p);
  }
  else
  {
    quasar::lm::nullstream(v15);
  }
  v73 = a1;
  if (*(_BYTE *)(a1 + 32))
  {
    v19 = 0;
  }
  else
  {
    v20 = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8), "#0");
    v19 = v20;
    if (!*(_BYTE *)(v73 + 32))
    {
      if ((v20 & 0x8000000000000000) != 0)
      {
        quasar::lm::LogMessage::LogMessage(__p, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi.cpp", 76);
        v21 = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)__p);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Disambiguation symbol ", 22);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"#0", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" is missing from FST symbol table.", 34);
        quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)__p);
      }
      else
      {
        quasar::lm::nullstream((quasar::lm *)v20);
      }
    }
  }
  v84[0] = v6;
  v84[1] = v7;
  v84[2] = v11;
  v85 = 0x1E00000000;
  quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler::ArpaLmCompiler((uint64_t)v86, (__int128 *)v84, v19, *(_QWORD *)(v73 + 8), *(_BYTE *)(v73 + 34), *(_BYTE *)(v73 + 35));
  v24 = 1;
  v76 = v2;
  while (1)
  {
    v25 = (*(uint64_t (**)(Ngram *, uint64_t))(*(_QWORD *)v2 + 456))(v2, v24);
    v26 = v25;
    v27 = v88;
    if (!v25)
      break;
    if (v88 >= v89)
    {
      v29 = (char *)v87;
      v30 = (v88 - (_BYTE *)v87) >> 2;
      v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v32 = v89 - (_BYTE *)v87;
      if ((v89 - (_BYTE *)v87) >> 1 > v31)
        v31 = v32 >> 1;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
        v33 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v33 = v31;
      if (v33)
      {
        v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v89, v33);
        v29 = (char *)v87;
        v27 = v88;
      }
      else
      {
        v34 = 0;
      }
      v35 = &v34[4 * v30];
      *(_DWORD *)v35 = v26;
      v28 = v35 + 4;
      while (v27 != v29)
      {
        v36 = *((_DWORD *)v27 - 1);
        v27 -= 4;
        *((_DWORD *)v35 - 1) = v36;
        v35 -= 4;
      }
      v87 = v35;
      v88 = v28;
      v89 = &v34[4 * v33];
      if (v29)
        operator delete(v29);
    }
    else
    {
      *(_DWORD *)v88 = v25;
      v28 = v27 + 4;
    }
    v2 = v76;
    v88 = v28;
    v24 = (v24 + 1);
  }
  v37 = v87;
  quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler::HeaderAvailable((quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler *)v86);
  v38 = v27 - v37;
  v82 = 0u;
  v83 = 0u;
  v39 = (int)(v38 >> 2);
  std::vector<int>::reserve((std::vector<unsigned int> *)&v82, v39);
  if ((int)((unint64_t)v38 >> 2) >= 1)
  {
    v77 = 0;
    v75 = __p;
    v74 = ((unint64_t)v38 >> 2);
    v40 = 1;
    do
    {
      std::vector<int>::resize((std::vector<unsigned int> *)&v82, v40);
      v41 = Vocab::compareIndex(v4);
      v42 = v40 - 1;
      TrieIter2<unsigned int,BOnode>::TrieIter2(v81, (char *)v76 + 152, (char *)__p + 4, v40 - 1, v41);
      v43 = 0;
      while (1)
      {
        v44 = TrieIter2<unsigned int,BOnode>::next((uint64_t)v81);
        v45 = v44 ? v44 + 8 : 0;
        if (!v44)
          break;
        if (v40 >= 2)
        {
          v46 = 0;
          v47 = (unsigned int *)v75;
          while (1)
          {
            v48 = std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>(v91, v47);
            if (!v48)
              break;
            v49 = *((_DWORD *)v48 + 5);
            *(_DWORD *)(v82 + 4 * v46) = v49;
            if (v49 < 0)
              goto LABEL_56;
LABEL_57:
            ++v46;
            --v47;
            if (v77 == v46)
              goto LABEL_58;
          }
          *(_DWORD *)(v82 + 4 * v46) = -1;
LABEL_56:
          quasar::lm::LogMessage::LogMessage(v80, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi.cpp", 125);
          v50 = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v80);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Symbol ", 7);
          v51 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" in ARPA model has no remapping.", 32);
          quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v80);
          goto LABEL_57;
        }
LABEL_58:
        v52 = Vocab::compareIndex(v4);
        LHashIter<unsigned int,float>::LHashIter(v80, v45 + 8, v52);
        v79 = 0;
        while (1)
        {
          v53 = (float *)LHashIter<unsigned int,float>::next((uint64_t)v80, &v79);
          if (!v53)
            break;
          LODWORD(__p[0]) = v79;
          v54 = std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>(v91, &v79);
          if (v54)
          {
            v55 = *((_DWORD *)v54 + 5);
            *(_DWORD *)(v82 + 4 * v42) = v55;
            if ((v55 & 0x80000000) == 0)
              goto LABEL_67;
          }
          else
          {
            *(_DWORD *)(v82 + 4 * v42) = -1;
          }
          if ((*(unsigned int (**)(quasar::lm *, _QWORD))(*(_QWORD *)v4 + 176))(v4, v79))
          {
            quasar::lm::LogMessage::LogMessage(v78, 2, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi.cpp", 139);
            v56 = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v78);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"Non-event symbol ", 17);
            v57 = (_QWORD *)std::ostream::operator<<();
            v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)" occurs as a probabilistic event. ", 34);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Is <unk> modeled as a word?", 27);
            quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v78);
          }
          quasar::lm::LogMessage::LogMessage(v78, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi.cpp", 143);
          v59 = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v78);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"Symbol ", 7);
          v60 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)" in ARPA model has no remapping.", 32);
          quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v78);
LABEL_67:
          *(float *)&v61 = *v53 * 2.30258509;
          *((_QWORD *)&v83 + 1) = v61;
          if ((uint64_t)v40 < v39)
          {
            BOW = (float *)Ngram::findBOW(v76, (unsigned int *)__p);
            if (BOW)
            {
              v63 = *BOW * 2.30258509;
              *((float *)&v83 + 3) = v63;
            }
          }
          quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler::ConsumeNGram((quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser *)v86, (uint64_t *)&v82);
          ++v43;
        }
        LHashIter<unsigned int,double>::~LHashIter((uint64_t)v80);
      }
      if (*((_DWORD *)v87 + v42) == v43)
      {
        quasar::lm::nullstream(0);
      }
      else
      {
        quasar::lm::LogMessage::LogMessage(v80, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-kaldi.cpp", 165);
        v64 = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v80);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"Expected ", 9);
        v65 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" n-grams, but only found ", 25);
        v66 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)".", 1);
        quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v80);
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2(v81);
      ++v40;
      v75 = (void **)((char *)v75 + 4);
      ++v77;
    }
    while (v77 != v74);
  }
  quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler::ReadComplete((quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler *)v86);
  v67 = v90;
  v90 = 0;
  if (!*(_BYTE *)(v73 + 33))
  {
    v81[0] = 2;
    fst::ArcMap<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ProjectMapper<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v67, v81);
    v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 120))(v67);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v67 + 280))(v67, v68);
  }
  if ((_QWORD)v82)
  {
    *((_QWORD *)&v82 + 1) = v82;
    operator delete((void *)v82);
  }
  quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler::~ArpaLmCompiler((quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler *)v86);
  v69 = v92;
  if (v92)
  {
    p_shared_owners = (unint64_t *)&v92->__shared_owners_;
    do
      v71 = __ldaxr(p_shared_owners);
    while (__stlxr(v71 - 1, p_shared_owners));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  return v67;
}

void sub_1ADDA0D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,std::__shared_weak_count *a58)
{
  unint64_t *p_shared_owners;
  unint64_t v60;

  if (a58)
  {
    p_shared_owners = (unint64_t *)&a58->__shared_owners_;
    do
      v60 = __ldaxr(p_shared_owners);
    while (__stlxr(v60 - 1, p_shared_owners));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))a58->__on_zero_shared)(a58);
      std::__shared_weak_count::__release_weak(a58);
    }
  }
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::unordered_map<unsigned int,int>>::reset[abi:ne180100]<std::unordered_map<unsigned int,int>,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<std::unordered_map<unsigned int,int>>::shared_ptr[abi:ne180100]<std::unordered_map<unsigned int,int>,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void quasar::lm::arpa2fst::kaldi_impl::ConvertToFST::~ConvertToFST(quasar::lm::arpa2fst::kaldi_impl::ConvertToFST *this)
{
  *(_QWORD *)this = &unk_1E5D3A860;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &unk_1E5D3A860;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::lm::arpa2fst::kaldi_fork::ArpaLmCompiler::ArpaLmCompiler(uint64_t a1, __int128 *a2, int a3, uint64_t a4, char a5, char a6)
{
  uint64_t v10;
  _QWORD *v11;

  quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser::ArpaFileParser(a1, a2, a4);
  *(_QWORD *)v10 = &off_1E5D3A7A8;
  *(_DWORD *)(v10 + 96) = a3;
  *(_QWORD *)(v10 + 104) = 0;
  v11 = (_QWORD *)operator new();
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(v11);
  *(_QWORD *)(a1 + 112) = v11;
  *(_BYTE *)(a1 + 120) = a5;
  *(_BYTE *)(a1 + 121) = a6;
  return a1;
}

void sub_1ADDA10A8(_Unwind_Exception *a1)
{
  quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0xA1C40BD48D6D6);
  quasar::lm::arpa2fst::kaldi_fork::ArpaFileParser::~ArpaFileParser(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<std::unordered_map<unsigned int,int>>::shared_ptr[abi:ne180100]<std::unordered_map<unsigned int,int>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5D46690;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1ADDA1140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::unordered_map<unsigned int,int>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<std::unordered_map<unsigned int,int> *,std::shared_ptr<std::unordered_map<unsigned int,int>>::__shared_ptr_default_delete<std::unordered_map<unsigned int,int>,std::unordered_map<unsigned int,int>>,std::allocator<std::unordered_map<unsigned int,int>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<std::unordered_map<unsigned int,int> *,std::shared_ptr<std::unordered_map<unsigned int,int>>::__shared_ptr_default_delete<std::unordered_map<unsigned int,int>,std::unordered_map<unsigned int,int>>,std::allocator<std::unordered_map<unsigned int,int>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::unordered_map<unsigned int,int> *,std::shared_ptr<std::unordered_map<unsigned int,int>>::__shared_ptr_default_delete<std::unordered_map<unsigned int,int>,std::unordered_map<unsigned int,int>>,std::allocator<std::unordered_map<unsigned int,int>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void kaldi::nnet1::Xent::Eval(uint64_t a1, int32x2_t *a2, int32x2_t *a3, int32x2_t *a4, uint64_t a5)
{
  uint64_t v10;
  double v11;
  float v12;
  double v13;
  double v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD v17[34];

  kaldi::CuMatrix<float>::Resize(a4, a2[2].u32[1], a2[2].u32[0], 0, 0);
  v10 = a2[2].i32[1];
  kaldi::CuMatrix<float>::operator=(a4, a2);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)a4, (uint64_t)a3, 111, -1.0, 1.0);
  if (a5)
  {
    kaldi::CuVector<float>::Resize(a1 + 264, *(unsigned int *)(a5 + 8), 1);
    kaldi::CuVectorBase<float>::CopyFromVec<float>((void *)(a1 + 264), a5);
    kaldi::CuMatrixBase<float>::MulRowsVec((uint64_t)a4, a1 + 264);
  }
  *(_QWORD *)(a1 + 16) = -1;
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 216), a2);
  kaldi::CuMatrixBase<float>::Add(a1 + 216, 1.0e-20);
  kaldi::CuMatrixBase<float>::ApplyLog(a1 + 216);
  kaldi::CuMatrixBase<float>::MulElements(a1 + 216, (uint64_t)a3);
  if (a5)
    kaldi::CuMatrixBase<float>::MulRowsVec(a1 + 216, a1 + 264);
  kaldi::CuVector<float>::Resize(a1 + 112, v10, 0);
  kaldi::CuVectorBase<float>::AddColSumMat(a1 + 112, a1 + 216, 1.0, 0.0);
  kaldi::Vector<float>::Resize((void **)(a1 + 144), v10, 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)(a1 + 112), a1 + 144);
  v11 = (float)-kaldi::VectorBase<float>::Sum(a1 + 144);
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 216), a3);
  kaldi::CuMatrixBase<float>::Add(a1 + 216, 1.0e-20);
  kaldi::CuMatrixBase<float>::ApplyLog(a1 + 216);
  kaldi::CuMatrixBase<float>::MulElements(a1 + 216, (uint64_t)a3);
  if (a5)
    kaldi::CuMatrixBase<float>::MulRowsVec(a1 + 216, a1 + 264);
  kaldi::CuVector<float>::Resize(a1 + 112, v10, 0);
  kaldi::CuVectorBase<float>::AddColSumMat(a1 + 112, a1 + 216, 1.0, 0.0);
  kaldi::Vector<float>::Resize((void **)(a1 + 144), v10, 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)(a1 + 112), a1 + 144);
  v12 = kaldi::VectorBase<float>::Sum(a1 + 144);
  v13 = *(double *)(a1 + 24) + v11;
  v14 = *(double *)(a1 + 32) - v12;
  *(double *)(a1 + 24) = v13;
  *(double *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 8) += v10;
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Non-finite loss (", 17);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, ") in cross-entropy calculation");
    goto LABEL_12;
  }
  if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Non-finite entropy (", 20);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, ") in cross-entropy calculation");
LABEL_12:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
  }
}

uint64_t kaldi::nnet1::Xent::ExpandPosterior(int32x2_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  float v18;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD v22[34];
  int v23[4];
  int v24;

  v3 = a3;
  kaldi::Matrix<float>::Matrix((uint64_t)v23, -1431655765 * ((unint64_t)(a2[1] - *a2) >> 3), a3, 0, 0);
  v6 = *a2;
  v7 = a2[1];
  v8 = v7 - *a2;
  if (v7 != *a2)
  {
    v9 = 0;
    v10 = v8 / 24;
    if (v10 <= 1)
      v10 = 1;
    do
    {
      v11 = (uint64_t *)(v6 + 24 * v9);
      v12 = *v11;
      v13 = v11[1] - *v11;
      if (v13)
      {
        v14 = v13 >> 3;
        v15 = *(_QWORD *)v23 + 4 * v24 * (int)v9;
        if (v14 <= 1)
          v14 = 1;
        v16 = (float *)(v12 + 4);
        do
        {
          v17 = *((int *)v16 - 1);
          if ((int)v17 >= v3)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
            v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Posterior pdf-id out of NN-output dimension, please check number of pdfs by 'hmm-info'.", 87);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" nn-outputs : ", 14);
            v21 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", posterior pdf-id : ", 21);
            std::ostream::operator<<();
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
          }
          v18 = *v16;
          v16 += 2;
          *(float *)(v15 + 4 * v17) = v18 + *(float *)(v15 + 4 * v17);
          --v14;
        }
        while (v14);
      }
      ++v9;
    }
    while (v9 != v10);
  }
  kaldi::CuMatrix<float>::operator=(a1 + 21, v23);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v23);
}

float kaldi::nnet1::Xent::Eval(uint64_t a1, int32x2_t *a2, uint64_t *a3, int32x2_t *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  int v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  float *v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  float *v33;
  float v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  float v39;
  float result;
  _QWORD *v41;
  _QWORD *v42;
  std::vector<unsigned int>::size_type __sz;
  _QWORD v45[35];

  v9 = a2[2].u32[1];
  __sz = (int)v9;
  kaldi::nnet1::Xent::ExpandPosterior((int32x2_t *)a1, a3, a2[2].u32[0]);
  kaldi::CuMatrix<float>::operator=(a4, a2);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)a4, a1 + 168, 111, -1.0, 1.0);
  if (a5)
  {
    kaldi::CuVector<float>::Resize(a1 + 264, *(unsigned int *)(a5 + 8), 0);
    kaldi::CuVectorBase<float>::CopyFromVec<float>((void *)(a1 + 264), a5);
    kaldi::CuMatrixBase<float>::MulRowsVec((uint64_t)a4, a1 + 264);
  }
  *(int32x2_t *)(a1 + 384) = a4[4];
  kaldi::CuArray<int>::Resize(a1 + 368, a2[2].u32[1], 1);
  kaldi::CuMatrixBase<float>::FindRowMaxId((uint64_t)a2, (int *)(a1 + 368));
  *(int32x2_t *)(a1 + 432) = a4[4];
  kaldi::CuArray<int>::Resize(a1 + 416, *(_DWORD *)(a1 + 188), 1);
  kaldi::CuMatrixBase<float>::FindRowMaxId(a1 + 168, (int *)(a1 + 416));
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 392), (int)v9);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 440), (int)v9);
  kaldi::CuArray<int>::CopyToVec((const void **)(a1 + 368), (std::vector<unsigned int> *)(a1 + 392));
  kaldi::CuArray<int>::CopyToVec((const void **)(a1 + 416), (std::vector<unsigned int> *)(a1 + 440));
  if ((int)v9 < 1)
  {
    v11 = 0;
    v12 = a1 + 168;
    v13 = a3;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = a1 + 168;
    v13 = a3;
    do
    {
      v14 = *(_DWORD *)(*(_QWORD *)(a1 + 440) + 4 * v10);
      v15 = *(_DWORD *)(*(_QWORD *)(a1 + 392) + 4 * v10);
      if (a5)
      {
        if (v14 == v15 && *(float *)(*(_QWORD *)(a1 + 272) + 4 * v10) == 1.0)
          ++v11;
      }
      else if (v14 == v15)
      {
        ++v11;
      }
      ++v10;
    }
    while (v9 != v10);
  }
  *(int32x2_t *)(a1 + 248) = a4[4];
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 216), a2);
  kaldi::CuMatrixBase<float>::Add(a1 + 216, 1.0e-20);
  kaldi::CuMatrixBase<float>::ApplyLog(a1 + 216);
  kaldi::CuMatrixBase<float>::MulElements(a1 + 216, v12);
  if (a5)
    kaldi::CuMatrixBase<float>::MulRowsVec(a1 + 216, a1 + 264);
  *(int32x2_t *)(a1 + 136) = a4[4];
  kaldi::CuVector<float>::Resize(a1 + 112, v9, 0);
  kaldi::CuVectorBase<float>::AddColSumMat(a1 + 112, a1 + 216, 1.0, 0.0);
  v16 = -kaldi::CuVectorBase<float>::Sum(a1 + 112);
  v17 = *v13;
  v18 = v13[1] - *v13;
  if (v18)
  {
    v19 = 0;
    v20 = v18 / 24;
    if (v20 <= 1)
      v21 = 1;
    else
      v21 = v20;
    v22 = 0.0;
    do
    {
      if (a5)
      {
        if (*(float *)(*(_QWORD *)(a1 + 272) + 4 * v19) == 1.0)
        {
          v23 = *(_QWORD *)(v17 + 24 * v19);
          v24 = *(_QWORD *)(v17 + 24 * v19 + 8) - v23;
          if (v24)
          {
            v25 = v24 >> 3;
            if (v25 <= 1)
              v26 = 1;
            else
              v26 = v25;
            v27 = (float *)(v23 + 4);
            do
            {
              v28 = *v27;
              v27 += 2;
              v22 = v22 - (float)(logf(v28) * v28);
              --v26;
            }
            while (v26);
          }
        }
      }
      else
      {
        v29 = *(_QWORD *)(v17 + 24 * v19);
        v30 = *(_QWORD *)(v17 + 24 * v19 + 8) - v29;
        if (v30)
        {
          v31 = v30 >> 3;
          if (v31 <= 1)
            v32 = 1;
          else
            v32 = v31;
          v33 = (float *)(v29 + 4);
          do
          {
            v34 = *v33;
            v33 += 2;
            v22 = v22 - (float)(logf(v34) * v34);
            --v32;
          }
          while (v32);
        }
      }
      ++v19;
    }
    while (v19 != v21);
  }
  else
  {
    v22 = 0.0;
  }
  if (a5)
  {
    LODWORD(v9) = (int)kaldi::CuVectorBase<float>::Sum(a1 + 264);
    __sz = (int)v9;
  }
  v35 = *(double *)(a1 + 32);
  v36 = *(_QWORD *)(a1 + 8);
  v37 = *(_QWORD *)(a1 + 16) + v11;
  v38 = *(double *)(a1 + 24) + v16;
  *(double *)(a1 + 24) = v38;
  *(double *)(a1 + 32) = v22 + v35;
  *(_QWORD *)(a1 + 8) = v36 + __sz;
  *(_QWORD *)(a1 + 16) = v37;
  if ((*(_QWORD *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Non-finite loss (", 17);
    v41 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v41, ") in cross-entropy calculation");
    goto LABEL_46;
  }
  if (COERCE_UNSIGNED_INT64(fabs(v22 + v35)) >= 0x7FF0000000000000)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Non-finite entropy (", 20);
    v42 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v42, ") in cross-entropy calculation");
LABEL_46:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
  }
  v39 = v22;
  kaldi::nnet1::Xent::ReportProgress((kaldi::nnet1::Xent *)a1, v9, v39, v16);
  return result;
}

void kaldi::nnet1::Xent::ReportProgress(kaldi::nnet1::Xent *this, int a2, float a3, float a4)
{
  _QWORD *v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  float v14;
  float *v15;
  float *v16;
  float *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  float *v23;
  char *v24;
  int v25;
  _QWORD v26[35];

  v4 = (_QWORD *)((char *)this + 40);
  v5 = *((double *)this + 7);
  v6 = *((double *)this + 6) + a4;
  v7 = *((_QWORD *)this + 5) + a2;
  *((_QWORD *)this + 5) = v7;
  v8 = v5 + a3;
  *((double *)this + 6) = v6;
  *((double *)this + 7) = v8;
  if (v7 > 360000)
  {
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v26, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"ProgressLoss[", 13);
      v10 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"h/", 2);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"h]: ", 4);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" (Xent)", 7);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v26);
      v6 = *((double *)this + 6);
      v8 = *((double *)this + 7);
      v7 = *((_QWORD *)this + 5);
    }
    v13 = *((_QWORD *)this + 10);
    v14 = (v6 - v8) / (double)v7;
    v15 = (float *)*((_QWORD *)this + 9);
    if ((unint64_t)v15 >= v13)
    {
      v17 = (float *)*((_QWORD *)this + 8);
      v18 = v15 - v17;
      if ((unint64_t)(v18 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v19 = v13 - (_QWORD)v17;
      v20 = (uint64_t)(v13 - (_QWORD)v17) >> 1;
      if (v20 <= v18 + 1)
        v20 = v18 + 1;
      if (v19 >= 0x7FFFFFFFFFFFFFFCLL)
        v21 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v21 = v20;
      if (v21)
      {
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 80, v21);
        v17 = (float *)*((_QWORD *)this + 8);
        v15 = (float *)*((_QWORD *)this + 9);
      }
      else
      {
        v22 = 0;
      }
      v23 = (float *)&v22[4 * v18];
      v24 = &v22[4 * v21];
      *v23 = v14;
      v16 = v23 + 1;
      while (v15 != v17)
      {
        v25 = *((_DWORD *)v15-- - 1);
        *((_DWORD *)v23-- - 1) = v25;
      }
      *((_QWORD *)this + 8) = v23;
      *((_QWORD *)this + 9) = v16;
      *((_QWORD *)this + 10) = v24;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v15 = v14;
      v16 = v15 + 1;
    }
    *((_QWORD *)this + 9) = v16;
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
  }
}

void sub_1ADDA1C34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Xent::Eval(uint64_t a1, int32x2_t *a2, unsigned int *a3, int32x2_t *a4)
{
  signed int v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[34];
  _QWORD v20[4];

  kaldi::CuMatrix<float>::operator=(a4, a2);
  kaldi::CuMatrixBase<float>::AddUniqueElements((uint64_t)a4, a3, -1.0);
  *(int32x2_t *)(a1 + 200) = a4[4];
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 168), a2[2].u32[1], a2[2].u32[0], 0, 0);
  kaldi::CuMatrixBase<float>::AddUniqueElements(a1 + 168, a3, 1.0);
  v8 = a2[2].i32[1];
  *(int32x2_t *)(a1 + 384) = a4[4];
  kaldi::CuArray<int>::Resize(a1 + 368, v8, 1);
  kaldi::CuMatrixBase<float>::FindRowMaxId((uint64_t)a2, (int *)(a1 + 368));
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 200);
  kaldi::CuArray<int>::Resize(a1 + 88, a2[2].u32[1], 1);
  kaldi::CuMatrixBase<float>::FindRowMaxId(a1 + 168, (int *)(a1 + 88));
  v20[0] = &unk_1E5D341C8;
  v20[1] = 0;
  v9 = *(_QWORD *)(a1 + 200);
  v20[2] = 0;
  v20[3] = v9;
  kaldi::CuVector<float>::Resize((uint64_t)v20, a2[2].u32[1], 1);
  kaldi::CuVectorBase<float>::ElementsEqual((uint64_t)v20, a1 + 88, a1 + 368);
  v10 = kaldi::CuVectorBase<float>::Sum((uint64_t)v20);
  *(int32x2_t *)(a1 + 248) = a4[4];
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 216), a2);
  kaldi::CuMatrixBase<float>::Add(a1 + 216, 1.0e-20);
  kaldi::CuMatrixBase<float>::ApplyLog(a1 + 216);
  kaldi::CuMatrixBase<float>::MulElements(a1 + 216, a1 + 168);
  v11 = kaldi::CuMatrixBase<float>::Sum(a1 + 216);
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 216), (int32x2_t *)(a1 + 168));
  kaldi::CuMatrixBase<float>::Add(a1 + 216, 1.0e-20);
  kaldi::CuMatrixBase<float>::ApplyLog(a1 + 216);
  kaldi::CuMatrixBase<float>::MulElements(a1 + 216, a1 + 168);
  v12 = kaldi::CuMatrixBase<float>::Sum(a1 + 216);
  v13 = *(double *)(a1 + 32);
  v14 = *(double *)(a1 + 24) + (float)-v11;
  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(_QWORD *)(a1 + 16) + (int)v10;
  *(double *)(a1 + 24) = v14;
  *(double *)(a1 + 32) = v13 - v12;
  *(_QWORD *)(a1 + 8) = v15 + v8;
  *(_QWORD *)(a1 + 16) = v16;
  if ((*(_QWORD *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Non-finite loss (", 17);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)") in cross-entropy calculation", 30);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  if (COERCE_UNSIGNED_INT64(fabs(v13 - v12)) >= 0x7FF0000000000000)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Non-finite entropy (", 20);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)") in cross-entropy calculation", 30);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  kaldi::nnet1::Xent::ReportProgress((kaldi::nnet1::Xent *)a1, v8, -v12, -v11);
  v20[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v20);
}

void sub_1ADDA1F0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::CuVector<float>::~CuVector((_QWORD *)(v1 - 144));
  _Unwind_Resume(a1);
}

double kaldi::nnet1::Xent::Eval(uint64_t a1, int32x2_t *a2, uint64_t a3, int32x2_t *a4, uint64_t a5)
{
  const void **v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  double result;
  _QWORD *v19;
  _QWORD v20[34];

  v10 = (const void **)(a1 + 368);
  kaldi::CuMatrixBase<float>::FindRowMaxId((uint64_t)a2, (int *)(a1 + 368));
  kaldi::CuArray<int>::CopyToVec(v10, (std::vector<unsigned int> *)(a1 + 392));
  v11 = *(_QWORD *)(a1 + 392);
  v12 = *(_QWORD *)(a1 + 400) - v11;
  v13 = *(_DWORD **)a3;
  v14 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if ((int)(v12 >> 2) < 1)
  {
    v16 = 0;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v17 = (v12 >> 2);
    do
    {
      if (!a5 || *(float *)(*(_QWORD *)a5 + 4 * v15) == 1.0)
      {
        ++*(_QWORD *)(a1 + 8);
        if (v13[v15] == *(_DWORD *)(v11 + 4 * v15))
          ++v16;
      }
      ++v15;
    }
    while (v17 != v15);
  }
  kaldi::CuArray<int>::Resize(a1 + 88, v14 >> 2, 1);
  memcpy(*(void **)(a1 + 96), *(const void **)a3, *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
  if (a2 != a4)
    kaldi::CuMatrix<float>::operator=(a4, a2);
  kaldi::CuMatrixBase<float>::DiffXent((uint64_t)a4, (unsigned int *)(a1 + 88), a1 + 112);
  if (a5)
  {
    kaldi::CuVector<float>::Resize(a1 + 264, *(unsigned int *)(a5 + 8), 1);
    kaldi::CuVectorBase<float>::CopyFromVec<float>((void *)(a1 + 264), a5);
    kaldi::CuMatrixBase<float>::MulRowsVec((uint64_t)a4, a1 + 264);
    kaldi::CuVectorBase<float>::MulElements(a1 + 112, a1 + 264);
  }
  kaldi::Vector<float>::Resize((void **)(a1 + 144), *(unsigned int *)(a1 + 128), 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)(a1 + 112), a1 + 144);
  result = *(double *)(a1 + 24) - kaldi::VectorBase<float>::Sum(a1 + 144);
  *(double *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 16) += v16;
  if ((*(_QWORD *)&result & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Non-finite loss (", 17);
    v19 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, ") in cross-entropy calculation");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
  }
  return result;
}

double kaldi::nnet1::Xent::CollectPerformance(uint64_t a1, void *lpsrc)
{
  char *v3;
  uint64_t v4;
  float64x2_t v5;
  int64x2_t v6;
  double result;
  _QWORD v8[34];

  if ((void *)a1 != lpsrc)
  {
    if (!lpsrc
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "Can't collect performance from non Xent object");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
    }
    v4 = *(_QWORD *)(a1 + 40);
    v5 = *(float64x2_t *)(v3 + 24);
    *(float64x2_t *)(a1 + 48) = vaddq_f64(v5, *(float64x2_t *)(a1 + 48));
    *(float64x2_t *)(a1 + 24) = vaddq_f64(v5, *(float64x2_t *)(a1 + 24));
    v6 = vaddq_s64(*(int64x2_t *)(a1 + 8), *(int64x2_t *)(v3 + 8));
    *(_QWORD *)(a1 + 40) = v4 + *((_QWORD *)v3 + 1);
    *(int64x2_t *)(a1 + 8) = v6;
    *((_QWORD *)v3 + 7) = 0;
    result = 0.0;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_OWORD *)(v3 + 24) = 0u;
    *(_OWORD *)(v3 + 8) = 0u;
  }
  return result;
}

float kaldi::nnet1::Xent::GetAvgLoss(kaldi::nnet1::Xent *this, int a2)
{
  if (a2)
    return 100.0 - (double)*((uint64_t *)this + 2) * 100.0 / (double)*((uint64_t *)this + 1);
  else
    return (*((double *)this + 3) - *((double *)this + 4)) / (double)*((uint64_t *)this + 1);
}

uint64_t kaldi::nnet1::Xent::Report(kaldi::nnet1::Xent *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  _QWORD *v12;
  _QWORD v14[11];
  char v15;
  uint64_t v16;
  std::locale v17;
  const char *v18;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"AvgLoss: ", 9);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" (Xent), ", 9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"[AvgXent: ", 10);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", AvgTargetEnt: ", 16);
  v5 = (_QWORD *)std::ostream::operator<<();
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
  v7 = std::locale::use_facet(&v17, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(&v17);
  std::ostream::put();
  std::ostream::flush();
  if (*((_QWORD *)this + 9) != *((_QWORD *)this + 8))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"progress: [", 11);
    v8 = *((_QWORD *)this + 8);
    v9 = *((_QWORD *)this + 9);
    v17.__locale_ = (std::locale::__imp *)v14;
    v18 = " ";
    while (v8 != v9)
    {
      std::ostream_iterator<float,char,std::char_traits<char>>::operator=[abi:ne180100]((uint64_t)&v17);
      v8 += 4;
    }
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"]", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
    v11 = std::locale::use_facet(&v17, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v17);
    std::ostream::put();
    std::ostream::flush();
  }
  if ((*((_QWORD *)this + 2) & 0x8000000000000000) == 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nFRAME_ACCURACY >> ", 19);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"% <<", 4);
  }
  std::stringbuf::str();
  v14[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v14[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v15 < 0)
    operator delete((void *)v14[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v16);
}

void sub_1ADDA24F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::locale::~locale((std::locale *)(v2 - 64));
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Xent::GetResults(kaldi::nnet1::Xent *this@<X0>, uint64_t a2@<X8>)
{
  double v4;
  float *v5;
  float v6;
  double v7;
  float *v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  char v13;
  void **v14;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v4 = *((double *)this + 3);
  std::string::basic_string[abi:ne180100]<0>(__p, "Loss");
  v14 = __p;
  v5 = (float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v14);
  v6 = v4;
  v5[10] = v6;
  if (v13 < 0)
    operator delete(__p[0]);
  v7 = *((double *)this + 4);
  std::string::basic_string[abi:ne180100]<0>(__p, "Entropy");
  v14 = __p;
  v8 = (float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v14);
  v9 = v7;
  v8[10] = v9;
  if (v13 < 0)
    operator delete(__p[0]);
  v10 = *((_QWORD *)this + 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "Correct");
  v14 = __p;
  *((float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v14)+ 10) = (float)v10;
  if (v13 < 0)
    operator delete(__p[0]);
  v11 = *((_QWORD *)this + 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "Frames");
  v14 = __p;
  *((float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v14)+ 10) = (float)v11;
  if (v13 < 0)
    operator delete(__p[0]);
}

void sub_1ADDA26A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Mse::Eval(uint64_t a1, int32x2_t *a2, uint64_t a3, int32x2_t *a4, uint64_t a5)
{
  uint64_t v9;
  double v10;
  double v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  float v20;
  float *v21;
  float *v22;
  float *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  float *v29;
  char *v30;
  int v31;
  _QWORD *v32;
  _QWORD v33[35];

  v9 = a2[2].u32[1];
  kaldi::CuMatrix<float>::operator=(a4, a2);
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)a4, a3, 111, -1.0, 1.0);
  if (a5)
  {
    kaldi::CuVector<float>::Resize(a1 + 64, *(unsigned int *)(a5 + 8), 0);
    kaldi::CuVectorBase<float>::CopyFromVec<float>((void *)(a1 + 64), a5);
    kaldi::CuMatrixBase<float>::MulRowsVec((uint64_t)a4, a1 + 64);
  }
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 96), a4);
  kaldi::CuMatrixBase<float>::MulElements(a1 + 96, a1 + 96);
  kaldi::CuVector<float>::Resize(a1 + 144, v9, 0);
  kaldi::CuVectorBase<float>::AddColSumMat(a1 + 144, a1 + 96, 1.0, 0.0);
  kaldi::Vector<float>::Resize((void **)(a1 + 176), v9, 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)(a1 + 144), a1 + 176);
  v10 = kaldi::VectorBase<float>::Sum(a1 + 176) * 0.5;
  v11 = *(double *)(a1 + 16) + v10;
  *(double *)(a1 + 16) = v11;
  if (a5)
  {
    v12 = kaldi::CuVectorBase<float>::Sum(a1 + 64);
    v13 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) += (int)v12;
    if ((v13 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      LODWORD(v9) = (int)kaldi::CuVectorBase<float>::Sum(a1 + 64);
      goto LABEL_7;
    }
LABEL_28:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Non-finite loss (", 17);
    v32 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v32, ") in MSE calculation");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v33);
  }
  *(_QWORD *)(a1 + 8) += (int)v9;
  if ((*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    goto LABEL_28;
LABEL_7:
  v14 = *(_QWORD *)(a1 + 24) + (int)v9;
  *(_QWORD *)(a1 + 24) = v14;
  v15 = v10 + *(double *)(a1 + 32);
  *(double *)(a1 + 32) = v15;
  if (v14 >= 1000001)
  {
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v33, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"ProgressLoss[", 13);
      v16 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"h/", 2);
      v17 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"h]: ", 4);
      v18 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" (Mse)", 6);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v33);
      v15 = *(double *)(a1 + 32);
      v14 = *(_QWORD *)(a1 + 24);
    }
    v19 = *(_QWORD *)(a1 + 56);
    v20 = v15 / (double)v14;
    v21 = *(float **)(a1 + 48);
    if ((unint64_t)v21 >= v19)
    {
      v23 = *(float **)(a1 + 40);
      v24 = v21 - v23;
      if ((unint64_t)(v24 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v25 = v19 - (_QWORD)v23;
      v26 = (uint64_t)(v19 - (_QWORD)v23) >> 1;
      if (v26 <= v24 + 1)
        v26 = v24 + 1;
      if (v25 >= 0x7FFFFFFFFFFFFFFCLL)
        v27 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v27 = v26;
      if (v27)
      {
        v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v27);
        v23 = *(float **)(a1 + 40);
        v21 = *(float **)(a1 + 48);
      }
      else
      {
        v28 = 0;
      }
      v29 = (float *)&v28[4 * v24];
      v30 = &v28[4 * v27];
      *v29 = v20;
      v22 = v29 + 1;
      while (v21 != v23)
      {
        v31 = *((_DWORD *)v21-- - 1);
        *((_DWORD *)v29-- - 1) = v31;
      }
      *(_QWORD *)(a1 + 40) = v29;
      *(_QWORD *)(a1 + 48) = v22;
      *(_QWORD *)(a1 + 56) = v30;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v21 = v20;
      v22 = v21 + 1;
    }
    *(_QWORD *)(a1 + 48) = v22;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
}

void sub_1ADDA2A64(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void sub_1ADDA2A74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Mse::Eval(void (***a1)(_QWORD, uint64_t, _QWORD *, uint64_t, uint64_t), uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  float v23;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD v27[34];
  _QWORD v28[2];
  int v29;

  v10 = *(_DWORD *)(a2 + 16);
  kaldi::Matrix<float>::Matrix((uint64_t)v28, *(unsigned int *)(a2 + 20), v10, 0, 0);
  v11 = *a3;
  v12 = a3[1];
  v13 = v12 - *a3;
  if (v12 != *a3)
  {
    v14 = 0;
    v15 = v13 / 24;
    if (v15 <= 1)
      v15 = 1;
    do
    {
      v16 = (uint64_t *)(v11 + 24 * v14);
      v17 = *v16;
      v18 = v16[1] - *v16;
      if (v18)
      {
        v19 = v18 >> 3;
        v20 = v28[0] + 4 * v29 * (int)v14;
        if (v19 <= 1)
          v19 = 1;
        v21 = (float *)(v17 + 4);
        do
        {
          v22 = *((int *)v21 - 1);
          if ((int)v22 >= v10)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
            v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Posterior pdf-id out of NN-output dimension, please check number of pdfs by 'hmm-info'.", 87);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" nn-outputs : ", 14);
            v26 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", posterior pdf-id : ", 21);
            std::ostream::operator<<();
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
          }
          v23 = *v21;
          v21 += 2;
          *(float *)(v20 + 4 * v22) = v23 + *(float *)(v20 + 4 * v22);
          --v19;
        }
        while (v19);
      }
      ++v14;
    }
    while (v14 != v15);
  }
  kaldi::CuMatrix<float>::CuMatrix<float>(v27, v28, 111, 0);
  (**a1)(a1, a2, v27, a4, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v27);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v28);
}

double kaldi::nnet1::Mse::CollectPerformance(uint64_t a1, void *lpsrc)
{
  char *v3;
  double v4;
  uint64_t v5;
  double result;
  _QWORD v7[34];

  if ((void *)a1 != lpsrc)
  {
    if (!lpsrc
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "Can't collect performance from non Mse object");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
    }
    v4 = *((double *)v3 + 2);
    *(double *)(a1 + 32) = v4 + *(double *)(a1 + 32);
    v5 = *((_QWORD *)v3 + 1);
    *(_QWORD *)(a1 + 24) += v5;
    *(double *)(a1 + 16) = v4 + *(double *)(a1 + 16);
    *(_QWORD *)(a1 + 8) += v5;
    result = 0.0;
    *(_OWORD *)(v3 + 24) = 0u;
    *(_OWORD *)(v3 + 8) = 0u;
  }
  return result;
}

uint64_t kaldi::nnet1::Mse::Report(kaldi::nnet1::Mse *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  const std::locale::facet *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  _QWORD v12[11];
  char v13;
  uint64_t v14;
  std::locale v15;
  const char *v16;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"AvgLoss: ", 9);
  v2 = (_QWORD *)std::ostream::operator<<();
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" (Mse), ", 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"[RMS ", 5);
  v4 = (_QWORD *)std::ostream::operator<<();
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)));
  v6 = std::locale::use_facet(&v15, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"progress: [", 11);
  v8 = *((_QWORD *)this + 5);
  v7 = *((_QWORD *)this + 6);
  v15.__locale_ = (std::locale::__imp *)v12;
  v16 = " ";
  while (v8 != v7)
  {
    std::ostream_iterator<float,char,std::char_traits<char>>::operator=[abi:ne180100]((uint64_t)&v15);
    v8 += 4;
  }
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v15, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v15);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v14);
}

void sub_1ADDA2F58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::locale::~locale((std::locale *)(v2 - 80));
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Mse::GetResults(kaldi::nnet1::Mse *this@<X0>, uint64_t a2@<X8>)
{
  double v4;
  float *v5;
  float v6;
  uint64_t v7;
  void *__p[2];
  char v9;
  void **v10;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v4 = *((double *)this + 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "Loss");
  v10 = __p;
  v5 = (float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v10);
  v6 = v4;
  v5[10] = v6;
  if (v9 < 0)
    operator delete(__p[0]);
  v7 = *((_QWORD *)this + 1);
  std::string::basic_string[abi:ne180100]<0>(__p, "Frames");
  v10 = __p;
  *((float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a2, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v10)+ 10) = (float)v7;
  if (v9 < 0)
    operator delete(__p[0]);
}

void sub_1ADDA306C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v15);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::LossEvaluatorItf::Eval()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::LossEvaluatorItf::GetAvgLoss(kaldi::nnet1::LossEvaluatorItf *this)
{
  _QWORD v1[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v1, "Not Implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v1);
}

void kaldi::nnet1::Xent::~Xent(kaldi::nnet1::Xent *this)
{
  kaldi::nnet1::Xent::~Xent(this);
  JUMPOUT(0x1AF44D190);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  *(_QWORD *)this = &off_1E5D31CE0;
  v2 = (void *)*((_QWORD *)this + 55);
  if (v2)
  {
    *((_QWORD *)this + 56) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 53);
  if (v3)
    free(v3);
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = 0;
  v4 = (void *)*((_QWORD *)this + 49);
  if (v4)
  {
    *((_QWORD *)this + 50) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 47);
  if (v5)
    free(v5);
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = 0;
  *((_QWORD *)this + 48) = 0;
  v6 = (void *)*((_QWORD *)this + 44);
  if (v6)
    free(v6);
  *((_QWORD *)this + 43) = 0;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  v7 = (void *)*((_QWORD *)this + 41);
  if (v7)
    free(v7);
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  v8 = (void *)*((_QWORD *)this + 38);
  if (v8)
    free(v8);
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 33) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 264);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 216);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 168);
  kaldi::Vector<float>::Destroy((uint64_t)this + 144);
  *((_QWORD *)this + 14) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 112);
  v9 = (void *)*((_QWORD *)this + 12);
  if (v9)
    free(v9);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  v10 = (void *)*((_QWORD *)this + 8);
  if (v10)
  {
    *((_QWORD *)this + 9) = v10;
    operator delete(v10);
  }
}

void kaldi::nnet1::Mse::~Mse(kaldi::nnet1::Mse *this)
{
  kaldi::nnet1::Mse::~Mse(this);
  JUMPOUT(0x1AF44D190);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E5D31AC8;
  kaldi::Vector<float>::Destroy((uint64_t)this + 176);
  *((_QWORD *)this + 18) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 144);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 96);
  *((_QWORD *)this + 8) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 64);
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {
    *((_QWORD *)this + 6) = v2;
    operator delete(v2);
  }
}

uint64_t std::ostream_iterator<float,char,std::char_traits<char>>::operator=[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  size_t v3;

  std::ostream::operator<<();
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = strlen(*(const char **)(a1 + 8));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)a1, v2, v3);
  }
  return a1;
}

void kaldi::TransitionModel::~TransitionModel(kaldi::TransitionModel *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void **v9;

  kaldi::Vector<float>::Destroy((uint64_t)this + 216);
  kaldi::Vector<float>::Destroy((uint64_t)this + 192);
  v2 = (void *)*((_QWORD *)this + 21);
  if (v2)
  {
    *((_QWORD *)this + 22) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 18);
  if (v3)
  {
    *((_QWORD *)this + 19) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 15);
  if (v4)
  {
    *((_QWORD *)this + 16) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 12);
  if (v5)
  {
    *((_QWORD *)this + 13) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 9);
  if (v6)
  {
    *((_QWORD *)this + 10) = v6;
    operator delete(v6);
  }
  v9 = (void **)((char *)this + 48);
  std::vector<std::vector<kaldi::HmmTopology::HmmState>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v7 = (void *)*((_QWORD *)this + 3);
  if (v7)
  {
    *((_QWORD *)this + 4) = v7;
    operator delete(v7);
  }
  v8 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v8;
    operator delete(v8);
  }
}

uint64_t quasar::OnlineLASSpeculativeBeamSearchDecoder::OnlineLASSpeculativeBeamSearchDecoder(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  char *v4;

  v3 = quasar::Decoder::Decoder(a1, a2);
  *(_QWORD *)v3 = &off_1E5D3B520;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(_OWORD *)(v3 + 480) = 0u;
  *(_WORD *)(v3 + 496) = 257;
  *(_QWORD *)(v3 + 500) = 0x8000001F4;
  *(_DWORD *)(v3 + 508) = 0;
  *(_QWORD *)(v3 + 512) = 0x3C23D70A00000000;
  *(_OWORD *)(v3 + 520) = xmmword_1AE15FD50;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v3 + 536), "");
  *(_QWORD *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_DWORD *)(a1 + 616) = 1065353216;
  *(_BYTE *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 628) = 0x300000008;
  *(_BYTE *)(a1 + 636) = 0;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  v4 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &unk_1E5D43328;
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 19) = 0;
  *((_QWORD *)v4 + 20) = 0;
  *((_QWORD *)v4 + 18) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *((_DWORD *)v4 + 34) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_QWORD *)(a1 + 672) = v4 + 24;
  *(_QWORD *)(a1 + 680) = v4;
  *(_BYTE *)(a1 + 57) = 0;
  return a1;
}

void sub_1ADDA3634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  kaldi::quasar::CEStatelessEncoderNet **v13;
  void **v14;

  v14 = v12;
  std::unique_ptr<kaldi::quasar::OnlineLASAttentionChecker>::reset[abi:ne180100]((kaldi::quasar::OnlineLASAttentionChecker **)(v10 + 664), 0);
  std::unique_ptr<kaldi::BeamSearchDecoder>::reset[abi:ne180100]((kaldi::BeamSearchDecoder **)(v10 + 656), 0);
  std::unique_ptr<kaldi::quasar::CEStatelessDecoderNet>::reset[abi:ne180100]((kaldi::quasar::CEStatelessDecoderNet **)(v10 + 648), 0);
  std::unique_ptr<kaldi::quasar::CEStatelessEncoderNet>::reset[abi:ne180100](v13, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v10 + 584);
  a10 = v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 559) < 0)
    operator delete(*v11);
  if (*(char *)(v10 + 495) < 0)
    operator delete(*(void **)(v10 + 472));
  if (*(char *)(v10 + 471) < 0)
    operator delete(*(void **)(v10 + 448));
  quasar::Decoder::~Decoder((void **)v10);
  _Unwind_Resume(a1);
}

void quasar::OnlineLASSpeculativeBeamSearchDecoder::~OnlineLASSpeculativeBeamSearchDecoder(quasar::OnlineLASSpeculativeBeamSearchDecoder *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E5D3B520;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 672);
  std::unique_ptr<kaldi::quasar::OnlineLASAttentionChecker>::reset[abi:ne180100]((kaldi::quasar::OnlineLASAttentionChecker **)this + 83, 0);
  std::unique_ptr<kaldi::BeamSearchDecoder>::reset[abi:ne180100]((kaldi::BeamSearchDecoder **)this + 82, 0);
  std::unique_ptr<kaldi::quasar::CEStatelessDecoderNet>::reset[abi:ne180100]((kaldi::quasar::CEStatelessDecoderNet **)this + 81, 0);
  std::unique_ptr<kaldi::quasar::CEStatelessEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CEStatelessEncoderNet **)this + 80, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 584);
  v2 = (void **)((char *)this + 560);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 559) < 0)
    operator delete(*((void **)this + 67));
  if (*((char *)this + 495) < 0)
    operator delete(*((void **)this + 59));
  if (*((char *)this + 471) < 0)
    operator delete(*((void **)this + 56));
  quasar::Decoder::~Decoder((void **)this);
}

{
  quasar::OnlineLASSpeculativeBeamSearchDecoder::~OnlineLASSpeculativeBeamSearchDecoder(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::OnlineLASSpeculativeBeamSearchDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  void *v4[2];
  char v5;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "las-speculative-beam-search-decoder");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 211, 0, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  kaldi::BeamSearchDecoderOptions::Register((uint64_t)(this + 62), (uint64_t)a2);
  kaldi::quasar::OnlineLASAttentionCheckerOptions::Register((uint64_t)this + 516, (uint64_t)a2);
  quasar::QsrTextSymbolTable::Register(this[84], a2, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(__p, "encoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "LAS encoder split model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 56), (uint64_t)v4, 1, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "decoder-model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "LAS decoder split model (TF/Espresso/CoreML graph)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 59), (uint64_t)v4, 1, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "batch-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "batch size");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 532, (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "substring-delimiter");
  std::string::basic_string[abi:ne180100]<0>(v4, "Substring delimiter");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 67), (uint64_t)v4, 0, 239, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "token-delimiters");
  std::string::basic_string[abi:ne180100]<0>(v4, "List of token delimiters");
  quasar::SystemConfig::Register<std::vector<std::string>>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 70), (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "split-tokens-by-character");
  std::string::basic_string[abi:ne180100]<0>(v4, "split tokens by character");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 78), (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "speculative-steps");
  std::string::basic_string[abi:ne180100]<0>(v4, "steps to decode beyond attention checks");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 628, (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "rollback-steps");
  std::string::basic_string[abi:ne180100]<0>(v4, "steps to rollback before each speculative decoder");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 79), (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "speculative-catchup");
  std::string::basic_string[abi:ne180100]<0>(v4, "Catch up at the end of utterance by returning speculative predictions");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 636, (uint64_t)v4, 0, 211, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "unchecked-attention-heads");
  std::string::basic_string[abi:ne180100]<0>(v4, "Do not perform checks for attention heads at these indexes");
  quasar::SystemConfig::Register<std::unordered_set<std::string>>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 73), (uint64_t)v4, 0, 238, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1ADDA3C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::OnlineLASAttentionCheckerOptions::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "min-alignment-value");
  std::string::basic_string[abi:ne180100]<0>(__p, "minimum total alignment weight that must be assigned to the attention window");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "num-forbidden-frames");
  std::string::basic_string[abi:ne180100]<0>(__p, "min number of frames that must be in the encoder output buffer after the right attention boundary");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 4, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "num-forbidden-frames-silence");
  std::string::basic_string[abi:ne180100]<0>(__p, "min number of buffer frames after the right attention boundary when top prediction is silence");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 8, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "chunk-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "chunk size used in estimating attention window location");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 12, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADDA3EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlineLASSpeculativeBeamSearchDecoder::finishInit(quasar::OnlineLASSpeculativeBeamSearchDecoder *this)
{
  char *v2;
  kaldi::quasar::CEStatelessEncoderNet *v3;
  kaldi::quasar::CEStatelessDecoderNet *v4;
  BOOL v5;
  _QWORD *v6;
  kaldi::BeamSearchDecoder *v7;
  uint64_t *i;
  int v9;
  kaldi::quasar::OnlineLASAttentionChecker *v10;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v2 = (char *)this + 448;
  v3 = (kaldi::quasar::CEStatelessEncoderNet *)operator new();
  kaldi::quasar::CEStatelessEncoderNet::CEStatelessEncoderNet(v3, v2);
  std::unique_ptr<kaldi::quasar::CEStatelessEncoderNet>::reset[abi:ne180100]((kaldi::quasar::CEStatelessEncoderNet **)this + 80, v3);
  v4 = (kaldi::quasar::CEStatelessDecoderNet *)operator new();
  kaldi::quasar::CEStatelessDecoderNet::CEStatelessDecoderNet(v4, (char *)this + 472);
  std::unique_ptr<kaldi::quasar::CEStatelessDecoderNet>::reset[abi:ne180100]((kaldi::quasar::CEStatelessDecoderNet **)this + 81, v4);
  LODWORD(v4) = *((_DWORD *)this + 133);
  if ((int)v4
     % (int)kaldi::quasar::CEStatelessEncoderNet::FrameSubsamplingFactor(*((kaldi::quasar::CEStatelessEncoderNet **)this
                                                                         + 80)))
  {
    v5 = quasar::gLogLevel < 4;
  }
  else
  {
    v5 = 1;
  }
  if (!v5)
  {
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Batch size is not an integer multiple of the frame subsampling factor. ", 71);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Encoder might drop frames.", 26);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v13);
  }
  v7 = (kaldi::BeamSearchDecoder *)operator new();
  kaldi::BeamSearchDecoder::BeamSearchDecoder(v7, (char *)this + 496);
  std::unique_ptr<kaldi::BeamSearchDecoder>::reset[abi:ne180100]((kaldi::BeamSearchDecoder **)this + 82, v7);
  v13 = 0u;
  v14 = 0u;
  LODWORD(v15) = 1065353216;
  for (i = (uint64_t *)*((_QWORD *)this + 75); i; i = (uint64_t *)*i)
  {
    v12 = std::stoi((const std::string *)(i + 2), 0, 10);
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)&v13, &v12, &v12);
  }
  v9 = kaldi::quasar::CEStatelessDecoderNet::SilIndex(*((kaldi::quasar::CEStatelessDecoderNet **)this + 81));
  v10 = (kaldi::quasar::OnlineLASAttentionChecker *)operator new();
  kaldi::quasar::OnlineLASAttentionChecker::OnlineLASAttentionChecker((uint64_t)v10, *(_QWORD *)((char *)this + 516), *(_QWORD *)((char *)this + 524), v9, (uint64_t)&v13);
  std::unique_ptr<kaldi::quasar::OnlineLASAttentionChecker>::reset[abi:ne180100]((kaldi::quasar::OnlineLASAttentionChecker **)this + 83, v10);
  quasar::QsrTextSymbolTable::init(*((const std::string **)this + 84), (quasar::OnlineLASSpeculativeBeamSearchDecoder *)((char *)this + 32), 0, *((unsigned __int8 *)this + 441), 1);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v13);
}

void sub_1ADDA40FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLASSpeculativeBeamSearchDecoder::runImpl(uint64_t a1, uint64_t a2, std::vector<std::wstring> **a3, quasar::SpeechRequestData **a4)
{
  uint64_t *value;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  quasar::MultiChainMultiAudioBuffer **MultiChainMultiAudioBuffer;
  uint64_t PrimaryAudioEndMs;
  void **v19;
  int v20;
  int v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int v34;
  int v35;
  std::vector<std::wstring> *v36;
  std::vector<std::wstring> *v37;
  std::vector<std::wstring> *v38;
  std::vector<std::wstring>::pointer end;
  unsigned __int8 *begin;
  unsigned __int8 *v41;
  std::vector<std::wstring>::pointer v42;
  uint64_t v43;
  signed int v44;
  std::vector<std::wstring> *i;
  _BOOL4 IsValidFrame;
  BOOL v47;
  char v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  _QWORD *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  char *j;
  char *v71;
  std::vector<std::wstring>::pointer v72;
  std::vector<std::wstring>::pointer v73;
  std::string *v74;
  std::vector<std::wstring>::pointer v75;
  float v76;
  double *size;
  unint64_t v78;
  double *v79;
  double *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  double *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v92;
  void *v93;
  void *v94;
  uint64_t v95;
  uint64_t *v96;
  quasar::SpeechRequestData **v97;
  unsigned __int8 v98;
  int v99;
  uint64_t v100;
  std::vector<std::wstring> v101;
  int32x2_t v102;
  int32x2_t v103;
  void *v104;
  uint64_t v105;
  void *__p[2];
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  std::vector<std::wstring> *v123;
  std::vector<std::wstring> *v124;
  uint64_t v125;
  std::vector<std::wstring> v126;
  void **v127;
  void **v128;
  uint64_t v129;
  __int128 v130;
  char *v131;
  std::vector<std::wstring> v132;
  _DWORD *v133;
  _DWORD *v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  _BYTE v139[208];
  unint64_t v140;
  std::__shared_weak_count *v141;
  void **v142[3];

  quasar::SymbolTableList::clear((quasar::SymbolTableList *)(*a3)[19].__end_cap_.__value_);
  value = (uint64_t *)(*a3)[19].__end_cap_.__value_;
  v140 = *(_QWORD *)(a1 + 672);
  v9 = *(std::__shared_weak_count **)(a1 + 680);
  v141 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  quasar::SymbolTableList::addSymbolTable(value, &v140, 0, -1);
  v12 = v141;
  if (v141)
  {
    v13 = (unint64_t *)&v141->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  kaldi::quasar::OnlineLASSpeculativeDecodable::OnlineLASSpeculativeDecodable((kaldi::quasar::OnlineLASSpeculativeDecodable *)v139, *(kaldi::quasar::CEStatelessEncoderNet **)(a1 + 640), *(kaldi::quasar::CEStatelessDecoderNet **)(a1 + 648), *(kaldi::OnlineFeatureMatrix **)a2, *(const kaldi::quasar::OnlineLASAttentionChecker **)(a1 + 664), *(_DWORD *)(a1 + 532), *(_DWORD *)(a1 + 628), *(_DWORD *)(a1 + 632), *(_BYTE *)(a1 + 636));
  v136 = 0;
  v137 = 0;
  v138 = 0;
  v134 = 0;
  v135 = 0;
  memset(&v132, 0, sizeof(v132));
  v133 = 0;
  kaldi::BeamSearchDecoder::InitDecoding(*(kaldi::BeamSearchDecoder **)(a1 + 656));
  v15 = 0;
  v16 = 0;
  v95 = a1 + 536;
  v96 = (uint64_t *)(a1 + 560);
  v97 = a4;
  while (!kaldi::BeamSearchDecoder::Finished(*(kaldi::BeamSearchDecoder **)(a1 + 656)))
  {
    v130 = 0uLL;
    v131 = 0;
    MultiChainMultiAudioBuffer = (quasar::MultiChainMultiAudioBuffer **)quasar::SpeechRequestData::getMultiChainMultiAudioBuffer(*a4);
    PrimaryAudioEndMs = quasar::MultiChainMultiAudioBuffer::getPrimaryAudioEndMs(*MultiChainMultiAudioBuffer);
    if ((PrimaryAudioEndMs & 0xFF00000000) != 0)
      kaldi::quasar::OnlineLASSpeculativeDecodable::SetAudioEndMilliseconds((uint64_t)v139, PrimaryAudioEndMs);
    if ((int)kaldi::BeamSearchDecoder::AdvanceDecoding(*(kaldi::BeamSearchDecoder **)(a1 + 656), (uint64_t)v139, 1u) < 1)
    {
      if (*(int *)(a1 + 628) >= 1
        && *(_BYTE *)(a1 + 636)
        && kaldi::quasar::OnlineLASSpeculativeDecodable::EncodingFinished((kaldi::quasar::OnlineLASSpeculativeDecodable *)v139))
      {
        v21 = 3;
      }
      else
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v130, v136, (uint64_t)v137, (v137 - v136) >> 2);
        v22 = *(_QWORD *)(a1 + 656);
        if (&v133 != (_DWORD **)(v22 + 232))
          std::vector<std::pair<int,float>>::__assign_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>(&v133, *(uint64_t **)(v22 + 232), *(uint64_t **)(v22 + 240), (uint64_t)(*(_QWORD *)(v22 + 240) - *(_QWORD *)(v22 + 232)) >> 3);
        v24 = v133;
        v23 = v134;
        v25 = (_DWORD *)*((_QWORD *)&v130 + 1);
        while (v24 != v23)
        {
          if (v25 >= (_DWORD *)v131)
          {
            v27 = (_DWORD *)v130;
            v28 = (uint64_t)((uint64_t)v25 - v130) >> 2;
            v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v30 = (uint64_t)&v131[-v130];
            if ((uint64_t)&v131[-v130] >> 1 > v29)
              v29 = v30 >> 1;
            if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
              v31 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v31 = v29;
            if (v31)
            {
              v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v131, v31);
              v25 = (_DWORD *)*((_QWORD *)&v130 + 1);
              v27 = (_DWORD *)v130;
            }
            else
            {
              v32 = 0;
            }
            v33 = &v32[4 * v28];
            *(_DWORD *)v33 = *v24;
            v26 = v33 + 4;
            while (v25 != v27)
            {
              v34 = *--v25;
              *((_DWORD *)v33 - 1) = v34;
              v33 -= 4;
            }
            *(_QWORD *)&v130 = v33;
            *((_QWORD *)&v130 + 1) = v26;
            v131 = &v32[4 * v31];
            if (v27)
              operator delete(v27);
          }
          else
          {
            *v25 = *v24;
            v26 = v25 + 1;
          }
          *((_QWORD *)&v130 + 1) = v26;
          v24 += 2;
          v25 = v26;
        }
        if ((_DWORD *)((char *)v25 - v130) != (_DWORD *)(v15 - (_QWORD)v16)
          || memcmp((const void *)v130, v16, (size_t)v25 - v130))
        {
          v35 = kaldi::quasar::OnlineLASSpeculativeDecodable::FrameOffset((kaldi::quasar::OnlineLASSpeculativeDecodable *)v139);
          a4 = v97;
          v36 = *a3;
          LODWORD(v36[24].__begin_) = v35;
          quasar::SymbolTableList::lookup((uint64_t *)v36[19].__end_cap_.__value_, (int **)&v130, (uint64_t *)&v36[2], (char **)&v36[3], 1);
          if (*(_BYTE *)(a2 + 561))
          {
            v93 = v16;
            if (*(_QWORD *)(a1 + 568) != *(_QWORD *)(a1 + 560))
            {
              quasar::formatResults((uint64_t *)&(*a3)[2], v96, v95, *(unsigned __int8 *)(a1 + 624), __p);
              v37 = *a3;
              std::vector<std::string>::__vdeallocate(*a3 + 2);
              *(_OWORD *)&v37[2].__begin_ = *(_OWORD *)__p;
              v37[2].__end_cap_.__value_ = (std::wstring *)v107;
              __p[1] = 0;
              *(_QWORD *)&v107 = 0;
              __p[0] = 0;
              v127 = __p;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v127);
            }
            v38 = *a3;
            begin = (unsigned __int8 *)v132.__begin_;
            end = v132.__end_;
            v41 = (unsigned __int8 *)(*a3)[2].__begin_;
            if ((char *)v132.__end_ - (char *)v132.__begin_ == (char *)(*a3)[2].__end_ - (char *)v41)
            {
              while (1)
              {
                if (begin == (unsigned __int8 *)end)
                {
                  v16 = v93;
                  a4 = v97;
                  goto LABEL_63;
                }
                if (!std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)__p, begin, v41))
                  break;
                begin += 24;
                v41 += 24;
              }
              v38 = *a3;
            }
            v42 = v38[23].__end_;
            v43 = *((unsigned int *)*v97 + 3);
            v127 = 0;
            v128 = 0;
            v129 = 0;
            v123 = 0;
            v124 = 0;
            v125 = 0;
            memset(&v126, 0, sizeof(v126));
            LOBYTE(__p[0]) = 0;
            std::string::basic_string[abi:ne180100]<0>(&__p[1], "▁");
            LOWORD(v92) = 0;
            v16 = v93;
            (*(void (**)(std::vector<std::wstring>::pointer, std::vector<std::wstring> *, uint64_t, uint64_t, _QWORD, _QWORD, void ***, std::vector<std::wstring> *, std::vector<std::wstring> **, int, void **))(v42->__r_.__value_.__r.__words[0] + 24))(v42, v38 + 2, v43, 1, 0, 0, &v127, &v126, &v123, v92, __p);
            a4 = v97;
            if (SHIBYTE(v107) < 0)
              operator delete(__p[1]);
            __p[0] = &v123;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            __p[0] = &v126;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            __p[0] = &v127;
            std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            if (&v132 != &(*a3)[2])
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v132, (std::string *)(*a3)[2].__begin_, (__int128 *)(*a3)[2].__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)(*a3)[2].__end_ - (char *)(*a3)[2].__begin_) >> 3));
          }
LABEL_63:
          if (v16)
            operator delete(v16);
          v21 = 0;
          v15 = *((_QWORD *)&v130 + 1);
          v16 = (void *)v130;
          goto LABEL_66;
        }
        v21 = 0;
        a4 = v97;
      }
    }
    else
    {
      fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v127);
      kaldi::BeamSearchDecoder::GetBestPath(*(_QWORD *)(a1 + 656), (uint64_t)&v127);
      __p[0] = 0;
      __p[1] = 0;
      *(_QWORD *)&v107 = 0;
      v137 = v136;
      fst::GetLinearSymbolSequence<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,int>((uint64_t)&v127, (uint64_t)__p, (uint64_t)&v136, (int32x2_t *)&v126, 0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v127 = (void **)&unk_1E5D25580;
      v19 = v128;
      if (v128)
      {
        v20 = *((_DWORD *)v128 + 14) - 1;
        *((_DWORD *)v128 + 14) = v20;
        if (!v20)
          (*((void (**)(void **))*v19 + 1))(v19);
      }
      v21 = 2;
    }
    if ((_QWORD)v130)
    {
      *((_QWORD *)&v130 + 1) = v130;
      operator delete((void *)v130);
    }
LABEL_66:
    if (v21 == 3)
      break;
  }
  v94 = v16;
  kaldi::BeamSearchDecoder::FinalizeDecoding(*(kaldi::BeamSearchDecoder **)(a1 + 656));
  v44 = kaldi::quasar::OnlineLASSpeculativeDecodable::FrameOffset((kaldi::quasar::OnlineLASSpeculativeDecodable *)v139);
  for (i = *a3; ; v44 = LODWORD(i[24].__begin_) + 1)
  {
    LODWORD(i[24].__begin_) = v44;
    IsValidFrame = kaldi::OnlineFeatureMatrix::IsValidFrame(*(int32x2_t **)a2, v44, 1);
    i = *a3;
    if (!IsValidFrame)
      break;
  }
  WORD2(i[24].__begin_) = 257;
  v47 = kaldi::BeamSearchDecoder::ReachedFinal(*(kaldi::BeamSearchDecoder **)(a1 + 656), -1);
  v48 = quasar::gLogLevel < 4 || v47;
  if ((v48 & 1) == 0)
  {
    v121 = 0u;
    v122 = 0u;
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    v115 = 0u;
    v116 = 0u;
    v113 = 0u;
    v114 = 0u;
    v111 = 0u;
    v112 = 0u;
    v110 = 0u;
    v108 = 0u;
    v109 = 0u;
    *(_OWORD *)__p = 0u;
    v107 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Decoder did not reach end-state, outputting partial traceback.", 62);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&(*a3)[13].__end_, (__int128 *)__p);
  v49 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v50 = (unint64_t *)((char *)__p[1] + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if ((kaldi::BeamSearchDecoder::GetRawLattice(*(_QWORD *)(a1 + 656), (uint64_t)(*a3)[13].__end_, -1) & 1) != 0)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&(*a3)[6].__end_, (__int128 *)__p);
    v52 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v53 = (unint64_t *)((char *)__p[1] + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)(*a3)[13].__end_, (uint64_t)(*a3)[6].__end_, 1);
    kaldi::TopSortCompactLatticeIfNeeded((uint64_t)(*a3)[6].__end_);
    __asm { FMOV            V0.2S, #1.0 }
    (*a3)[21].__begin_ = _D0;
    fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v104);
    v60 = (uint64_t)(*a3)[13].__end_;
    v61 = *((unsigned int *)*a4 + 4);
    v103 = vdup_n_s32(0x7F800000u);
    fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(v60, (uint64_t)&v104, v61, 0, 0, (uint64_t *)&v103, -1, 0);
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v107 = 0;
    fst::ConvertNbestToVector<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)&v104, (uint64_t *)__p);
    v62 = operator new(0x30uLL);
    v62[2] = 0;
    *v62 = &unk_1E5D456D0;
    v62[1] = 0;
    v62[4] = 0;
    v62[5] = 0;
    v62[3] = 0;
    *(_QWORD *)&v130 = v62 + 3;
    *((_QWORD *)&v130 + 1) = v62;
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&(*a3)[14].__end_cap_, &v130);
    v63 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
    if (*((_QWORD *)&v130 + 1))
    {
      v64 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v66 = operator new(0x30uLL);
    v66[2] = 0;
    *v66 = &unk_1E5D458C8;
    v66[1] = 0;
    v66[4] = 0;
    v66[5] = 0;
    v66[3] = 0;
    *(_QWORD *)&v130 = v66 + 3;
    *((_QWORD *)&v130 + 1) = v66;
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&(*a3)[16].__end_, &v130);
    v67 = (std::__shared_weak_count *)*((_QWORD *)&v130 + 1);
    if (*((_QWORD *)&v130 + 1))
    {
      v68 = (unint64_t *)(*((_QWORD *)&v130 + 1) + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    v71 = (char *)__p[0];
    for (j = (char *)__p[1]; v71 != j; v71 += 16)
    {
      v131 = 0;
      v127 = 0;
      v128 = 0;
      v129 = 0;
      v130 = 0uLL;
      fst::GetLinearSymbolSequence<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,int>((uint64_t)v71, (uint64_t)&v130, (uint64_t)&v127, &v102, 0);
      v123 = 0;
      v124 = 0;
      v125 = 0;
      memset(&v126, 0, sizeof(v126));
      quasar::SymbolTableList::lookup((uint64_t *)(*a3)[19].__end_cap_.__value_, (int **)&v127, (uint64_t *)&v126, (char **)&v123, 1);
      if (*(_QWORD *)(a1 + 568) != *(_QWORD *)(a1 + 560))
      {
        quasar::formatResults((uint64_t *)&v126, v96, v95, *(unsigned __int8 *)(a1 + 624), &v101);
        std::vector<std::string>::__vdeallocate(&v126);
        v126 = v101;
        memset(&v101, 0, sizeof(v101));
        v142[0] = (void **)&v101;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v142);
      }
      memset(&v101, 0, sizeof(v101));
      v73 = v126.__begin_;
      v72 = v126.__end_;
      if (v126.__begin_ != v126.__end_)
      {
        v74 = 0;
        do
        {
          LODWORD(v142[0]) = 0;
          v100 = 0;
          v99 = 1;
          v98 = 1;
          if ((std::wstring *)v74 >= v101.__end_cap_.__value_)
          {
            v74 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<std::string const&,int,int,int,int,BOOL>((uint64_t *)&v101, (uint64_t)v73, (int *)v142, (int *)&v100 + 1, (int *)&v100, &v99, &v98);
          }
          else
          {
            std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string const&,int,int,int,int,BOOL>((uint64_t)&v101.__end_cap_, v74, (uint64_t)v73, (int *)v142, (int *)&v100 + 1, (int *)&v100, &v99, &v98);
            v74 = (std::string *)((char *)v74 + 224);
          }
          v101.__end_ = (std::vector<std::wstring>::pointer)v74;
          ++v73;
        }
        while (v73 != v72);
        if ((std::string *)v101.__begin_ != v74)
        {
          v74[-8].__r_.__value_.__s.__data_[12] = 0;
          std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100]((uint64_t *)(*a3)[14].__end_cap_.__value_, (uint64_t)&v101);
          v75 = (*a3)[16].__end_;
          v76 = *(float *)v102.i32 + *(float *)&v102.i32[1];
          size = (double *)v75->__r_.__value_.__l.__size_;
          v78 = v75->__r_.__value_.__r.__words[2];
          if ((unint64_t)size >= v78)
          {
            v80 = (double *)v75->__r_.__value_.__r.__words[0];
            v81 = (uint64_t)((uint64_t)size - v75->__r_.__value_.__r.__words[0]) >> 3;
            v82 = v81 + 1;
            if ((unint64_t)(v81 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v83 = v78 - (_QWORD)v80;
            if (v83 >> 2 > v82)
              v82 = v83 >> 2;
            if ((unint64_t)v83 >= 0x7FFFFFFFFFFFFFF8)
              v84 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v84 = v82;
            if (v84)
            {
              v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v75->__r_.__value_.__r.__words[2], v84);
              v80 = (double *)v75->__r_.__value_.__r.__words[0];
              size = (double *)v75->__r_.__value_.__l.__size_;
            }
            else
            {
              v85 = 0;
            }
            v86 = (double *)&v85[8 * v81];
            *v86 = v76;
            v79 = v86 + 1;
            while (size != v80)
            {
              v87 = *((_QWORD *)size-- - 1);
              *((_QWORD *)v86-- - 1) = v87;
            }
            v75->__r_.__value_.__r.__words[0] = (std::wstring::size_type)v86;
            v75->__r_.__value_.__l.__size_ = (std::wstring::size_type)v79;
            v75->__r_.__value_.__r.__words[2] = (std::wstring::size_type)&v85[8 * v84];
            if (v80)
              operator delete(v80);
          }
          else
          {
            *size = v76;
            v79 = size + 1;
          }
          v75->__r_.__value_.__l.__size_ = (std::wstring::size_type)v79;
        }
      }
      v142[0] = (void **)&v101;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v142);
      if (v123)
      {
        v124 = v123;
        operator delete(v123);
      }
      v123 = &v126;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
      if (v127)
      {
        v128 = v127;
        operator delete(v127);
      }
      if ((_QWORD)v130)
      {
        *((_QWORD *)&v130 + 1) = v130;
        operator delete((void *)v130);
      }
    }
    *(_QWORD *)&v130 = __p;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v130);
    v104 = &unk_1E5D25580;
    v88 = v105;
    if (v105)
    {
      v89 = *(_DWORD *)(v105 + 56) - 1;
      *(_DWORD *)(v105 + 56) = v89;
      if (!v89)
        (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
    }
    v90 = 0;
LABEL_137:
    v16 = v94;
  }
  else
  {
    if (quasar::gLogLevel < 4)
    {
      v90 = 2;
      goto LABEL_137;
    }
    v121 = 0u;
    v122 = 0u;
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    v115 = 0u;
    v116 = 0u;
    v113 = 0u;
    v114 = 0u;
    v111 = 0u;
    v112 = 0u;
    v110 = 0u;
    v108 = 0u;
    v109 = 0u;
    *(_OWORD *)__p = 0u;
    v107 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to get raw recognition lattice.", 38);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    v90 = 2;
  }
  __p[0] = &v132;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v133)
  {
    v134 = v133;
    operator delete(v133);
  }
  if (v136)
  {
    v137 = v136;
    operator delete(v136);
  }
  if (v16)
    operator delete(v16);
  kaldi::quasar::OnlineLASSpeculativeDecodable::~OnlineLASSpeculativeDecodable((kaldi::quasar::OnlineLASSpeculativeDecodable *)v139);
  return v90;
}

void sub_1ADDA4DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  void *v29;
  _QWORD *v30;
  void *v32;
  void *v33;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a29);
  a29 = &STACK[0x220];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  v32 = (void *)v30[51];
  if (v32)
  {
    v30[52] = v32;
    operator delete(v32);
  }
  v33 = (void *)v30[54];
  if (v33)
  {
    v30[55] = v33;
    operator delete(v33);
  }
  if (v29)
    operator delete(v29);
  kaldi::quasar::OnlineLASSpeculativeDecodable::~OnlineLASSpeculativeDecodable((kaldi::quasar::OnlineLASSpeculativeDecodable *)&STACK[0x268]);
  _Unwind_Resume(a1);
}

uint64_t quasar::anArcJumpsOver(uint64_t *a1, float a2, float a3)
{
  _BOOL4 v3;
  uint64_t v4;
  uint64_t i;
  float *v6;
  float v7;
  int v8;

  v4 = *a1;
LABEL_2:
  if (v4 == a1[1])
  {
    v8 = 0;
  }
  else
  {
    for (i = *(_QWORD *)(*(_QWORD *)v4 + 72); ; i = *(_QWORD *)(i + 8))
    {
      if (i == *(_QWORD *)v4 + 64)
      {
        v4 += 8;
        goto LABEL_2;
      }
      v6 = *(float **)(i + 16);
      v7 = *(float *)(*(_QWORD *)v6 + 132);
      v3 = v7 < a2;
      if (v7 >= a2 || *(float *)(*(_QWORD *)v6 + 140) < a2 && v6[62] > a3)
        break;
    }
    v8 = 1;
  }
  return v8 & v3;
}

void quasar::mergeNodes(quasar *this, kaldi::WordHypLattice *a2, int a3)
{
  int v4;
  unint64_t v6;
  uint64_t v7;
  kaldi::WordHypLattice::Node *v8;
  uint64_t v9;
  unint64_t v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  float *v17;
  kaldi::WordHypLattice::Node *v18;
  float v19;
  float v20;
  void *v21;
  float *v22;
  char v23;
  unint64_t v24;
  kaldi::WordHypLattice::Node **v25;
  kaldi::WordHypLattice::Node **v26;
  kaldi::WordHypLattice::Node **v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  kaldi::WordHypLattice::Node **v32;
  char *v33;
  char *v34;
  kaldi::WordHypLattice::Node *v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  _OWORD v39[16];
  kaldi::WordHypLattice::Node *v40;
  __int128 v41;
  float *v42;
  kaldi::WordHypLattice::Node *v43;
  __int128 v44;

  if (*((_QWORD *)this + 1))
  {
    v4 = (int)a2;
    kaldi::WordHypLattice::GetTimeSortedNodes(this, &v43);
    v6 = *((_QWORD *)this + 6) - *((_QWORD *)this + 5);
    v7 = *((_QWORD *)this + 3);
    *(_BYTE *)(**((_QWORD **)this + 2) + 128) = 1;
    *(_BYTE *)(*(_QWORD *)(v7 - 8) + 128) = 1;
    v8 = v43;
    v9 = v44;
    if ((kaldi::WordHypLattice::Node *)v44 != v43)
    {
      v37 = v6;
      v10 = 0;
      v11 = (float)v4;
      v12 = NAN;
      v13 = 1;
      while (1)
      {
        v42 = 0;
        v14 = *((_QWORD *)v8 + v10);
        v42 = (float *)v14;
        *(_BYTE *)(v14 + 128) = 0;
        v15 = *(float *)(v14 + 132);
        if (v15 != v12)
          break;
        ++v10;
LABEL_19:
        ++v13;
        if (v10 >= (v9 - (uint64_t)v8) >> 3)
        {
          v36 = *((_QWORD *)this + 6) - *((_QWORD *)this + 5);
          v6 = v37;
          goto LABEL_53;
        }
      }
      v16 = *(float *)(v14 + 136);
      v38 = 0uLL;
      *(_QWORD *)&v39[0] = 0;
      if (++v10 >= (v9 - (uint64_t)v8) >> 3)
      {
LABEL_10:
        v21 = (void *)v38;
        if ((_QWORD)v38 != *((_QWORD *)&v38 + 1))
        {
          if (!a3
            || (v22 = v42,
                v23 = quasar::anArcJumpsOver((uint64_t *)&v43, v42[33], v16),
                *((_BYTE *)v22 + 128) = v23 ^ 1,
                (v23 & 1) == 0))
          {
            kaldi::WordHypLattice::MergeNodes(this, (uint64_t *)&v38, (uint64_t **)&v42);
            kaldi::WordHypLattice::RecomputeTopSortedNodes(this);
            kaldi::WordHypLattice::RecomputeNodeTimestamps((uint64_t)this);
            kaldi::WordHypLattice::GetTimeSortedNodes(this, &v40);
            if (v43)
            {
              *(_QWORD *)&v44 = v43;
              operator delete(v43);
            }
            v8 = v40;
            v43 = v40;
            v44 = v41;
            v21 = (void *)v38;
            v9 = v41;
          }
        }
        if (v21)
        {
          *((_QWORD *)&v38 + 1) = v21;
          operator delete(v21);
          v8 = v43;
          v9 = v44;
        }
        v12 = v15;
        goto LABEL_19;
      }
      v40 = 0;
      v17 = (float *)*((_QWORD *)v8 + v13);
      v40 = (kaldi::WordHypLattice::Node *)v17;
      v18 = (kaldi::WordHypLattice::Node *)v42;
      v19 = v42[33];
      if ((float)(v17[33] - v19) > v11)
      {
        v20 = v16;
LABEL_9:
        v16 = v20;
        goto LABEL_10;
      }
      v24 = v13;
      while (1)
      {
        if (v16 >= v17[34])
          v20 = v16;
        else
          v20 = v17[34];
        if ((float)(v20 - v19) <= v11 && !kaldi::WordHypLattice::Node::IsSucceededBy(v18, &v40))
        {
          v26 = (kaldi::WordHypLattice::Node **)*((_QWORD *)&v38 + 1);
          v25 = (kaldi::WordHypLattice::Node **)v38;
          if ((_QWORD)v38 == *((_QWORD *)&v38 + 1))
          {
LABEL_35:
            if ((unint64_t)v25 >= *(_QWORD *)&v39[0])
            {
              v28 = (uint64_t)((uint64_t)v25 - v38) >> 3;
              if ((unint64_t)(v28 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v29 = (uint64_t)(*(_QWORD *)&v39[0] - v38) >> 2;
              if (v29 <= v28 + 1)
                v29 = v28 + 1;
              if (*(_QWORD *)&v39[0] - (_QWORD)v38 >= 0x7FFFFFFFFFFFFFF8uLL)
                v30 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v30 = v29;
              if (v30)
                v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v39, v30);
              else
                v31 = 0;
              v32 = (kaldi::WordHypLattice::Node **)&v31[8 * v28];
              *v32 = v40;
              v27 = v32 + 1;
              v33 = (char *)*((_QWORD *)&v38 + 1);
              v34 = (char *)v38;
              if (*((_QWORD *)&v38 + 1) != (_QWORD)v38)
              {
                do
                {
                  v35 = (kaldi::WordHypLattice::Node *)*((_QWORD *)v33 - 1);
                  v33 -= 8;
                  *--v32 = v35;
                }
                while (v33 != v34);
                v33 = (char *)v38;
              }
              *(_QWORD *)&v38 = v32;
              *((_QWORD *)&v38 + 1) = v27;
              *(_QWORD *)&v39[0] = &v31[8 * v30];
              if (v33)
                operator delete(v33);
            }
            else
            {
              *v25 = v40;
              v27 = v25 + 1;
            }
            *((_QWORD *)&v38 + 1) = v27;
            goto LABEL_28;
          }
          while (!kaldi::WordHypLattice::Node::IsSucceededBy(*v25, &v40))
          {
            if (++v25 == v26)
            {
              v25 = (kaldi::WordHypLattice::Node **)*((_QWORD *)&v38 + 1);
              goto LABEL_35;
            }
          }
        }
        v20 = v16;
LABEL_28:
        ++v24;
        v8 = v43;
        v9 = v44;
        if (v24 < (uint64_t)(v44 - (_QWORD)v43) >> 3)
        {
          v40 = 0;
          v17 = (float *)*((_QWORD *)v43 + v24);
          v40 = (kaldi::WordHypLattice::Node *)v17;
          v18 = (kaldi::WordHypLattice::Node *)v42;
          v19 = v42[33];
          v16 = v20;
          if ((float)(v17[33] - v19) <= v11)
            continue;
        }
        goto LABEL_9;
      }
    }
    v36 = v6;
LABEL_53:
    if (v36 >> 3 != (int)(v6 >> 3))
    {
      memset(v39, 0, sizeof(v39));
      v38 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Coding error: the number of arcs has changed after node-merging", 63);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v38);
    }
    kaldi::WordHypLattice::ReassignNodeIds((uint64_t)this);
    if (v43)
    {
      *(_QWORD *)&v44 = v43;
      operator delete(v43);
    }
  }
}

void sub_1ADDA546C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  void *v14;

  v14 = *(void **)(v12 - 152);
  if (v14)
  {
    *(_QWORD *)(v12 - 144) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::cu::RegularizeL1<float>(uint64_t a1, uint64_t a2, float a3, float a4)
{
  uint64_t v7;
  uint64_t result;
  int v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  uint64_t v15;

  v7 = a1 + 8;
  result = kaldi::MatrixBase<float>::NumRows(a1 + 8);
  if ((int)result >= 1)
  {
    v9 = 0;
    v10 = -a4;
    do
    {
      if ((int)kaldi::MatrixBase<float>::NumCols(v7) >= 1)
      {
        v11 = 0;
        do
        {
          v12 = *(_QWORD *)v7 + 4 * v9 * *(_DWORD *)(v7 + 16);
          v13 = *(float *)(v12 + 4 * v11);
          if (v13 != 0.0)
          {
            if (v13 >= 0.0)
              v14 = a3;
            else
              v14 = -a3;
            v15 = *(_QWORD *)(a2 + 8) + 4 * v9 * *(_DWORD *)(a2 + 24);
            if (v13 > 0.0 == (float)((float)(v13 + (float)(v10 * *(float *)(v15 + 4 * v11))) - v14) > 0.0)
            {
              *(float *)(v12 + 4 * v11) = v13 - v14;
            }
            else
            {
              *(_DWORD *)(v12 + 4 * v11) = 0;
              *(_DWORD *)(v15 + 4 * v11) = 0;
            }
          }
          ++v11;
        }
        while (v11 < (int)kaldi::MatrixBase<float>::NumCols(v7));
      }
      ++v9;
      result = kaldi::MatrixBase<float>::NumRows(v7);
    }
    while (v9 < (int)result);
  }
  return result;
}

uint64_t kaldi::cu::Splice<float>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t i;
  int v11;
  uint64_t v12;
  void *v13;
  const void *v14;
  int v15;

  v4 = *a2;
  v5 = *((_QWORD *)a2 + 1);
  v6 = a3 + 8;
  result = kaldi::MatrixBase<float>::NumRows(a3 + 8);
  if ((int)result >= 1)
  {
    v8 = 0;
    v9 = a1 + 8;
    do
    {
      if ((int)v4 >= 1)
      {
        for (i = 0; i != v4; ++i)
        {
          v11 = (*(_DWORD *)(v5 + 4 * i) + v8) & ~((*(_DWORD *)(v5 + 4 * i) + v8) >> 31);
          if (v11 >= (int)kaldi::MatrixBase<float>::NumRows(v9))
            v11 = kaldi::MatrixBase<float>::NumRows(v9) - 1;
          v12 = *(_QWORD *)v6 + 4 * *(_DWORD *)(v6 + 16) * v8;
          v13 = (void *)(v12 + 4 * (int)(kaldi::MatrixBase<float>::NumCols(v9) * i));
          v14 = (const void *)(*(_QWORD *)v9 + 4 * *(_DWORD *)(v9 + 16) * v11);
          v15 = kaldi::MatrixBase<float>::NumCols(v9);
          memcpy(v13, v14, 4 * v15);
        }
      }
      ++v8;
      result = kaldi::MatrixBase<float>::NumRows(v6);
    }
    while (v8 < (int)result);
  }
  return result;
}

uint64_t kaldi::cu::Copy<float>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *((_QWORD *)a2 + 1);
  v6 = a3 + 8;
  result = kaldi::MatrixBase<float>::NumRows(a3 + 8);
  if ((int)result >= 1)
  {
    v8 = 0;
    do
    {
      if ((int)v4 >= 1)
      {
        v9 = 0;
        v10 = *(_QWORD *)(a1 + 8) + 4 * *(_DWORD *)(a1 + 24) * v8;
        v11 = *(_QWORD *)v6 + 4 * *(_DWORD *)(v6 + 16) * v8;
        do
        {
          *(_DWORD *)(v11 + 4 * v9) = *(_DWORD *)(v10 + 4 * *(int *)(v5 + 4 * v9));
          ++v9;
        }
        while (v4 != v9);
      }
      ++v8;
      result = kaldi::MatrixBase<float>::NumRows(v6);
    }
    while (v8 < (int)result);
  }
  return result;
}

double quasar::KeywordDirectOutputsSyncDecoder::KeywordDirectOutputsSyncDecoder(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  double result;

  v2 = quasar::SyncDecoder::SyncDecoder(a1, a2);
  *(_QWORD *)v2 = &off_1E5CFF240;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 88) = 9999;
  *(_DWORD *)(v2 + 96) = 1;
  result = 0.0;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_QWORD *)(v2 + 168) = 0;
  return result;
}

void quasar::KeywordDirectOutputsSyncDecoder::~KeywordDirectOutputsSyncDecoder(void **this)
{
  void **v2;

  *this = &off_1E5CFF240;
  v2 = this + 19;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 13;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  quasar::SyncDecoder::~SyncDecoder(this);
}

{
  quasar::KeywordDirectOutputsSyncDecoder::~KeywordDirectOutputsSyncDecoder(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::KeywordDirectOutputsSyncDecoder::registerParams(quasar::KeywordDirectOutputsSyncDecoder *this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;
  void *v8[2];
  char v9;
  void *v10[2];
  char v11;
  void *v12[2];
  char v13;
  const void *v14[2];
  char v15;

  std::string::basic_string[abi:ne180100]<0>(v14, "keyword-direct-output-decoder");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 256, 0, (uint64_t)v14);
  if (v15 < 0)
    operator delete((void *)v14[0]);
  std::string::basic_string[abi:ne180100]<0>(v14, "keyword-array");
  std::string::basic_string[abi:ne180100]<0>(v12, "keyword names with order should match the output order from Nnet");
  quasar::SystemConfig::Register<std::vector<std::string>>((uint64_t)a2, v14, (uint64_t)this + 128, (uint64_t)v12, 1, 256, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(v10, "batch-size");
  std::string::basic_string[abi:ne180100]<0>(v8, "The batch size that is used for results querying, for example 192 means one batch contains 192 frames");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v10, (uint64_t)this + 96, (uint64_t)v8, 1, 256, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(v6, "num-batches-to-use");
  std::string::basic_string[abi:ne180100]<0>(__p, "Num of batches to use for results cutoffif analyzed batches number are larger than this value, the cutoff cached token results will be used");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 88, (uint64_t)__p, 0, 256, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  if (v15 < 0)
    operator delete((void *)v14[0]);
}

void sub_1ADDA59DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  if (*(char *)(v34 - 41) < 0)
    operator delete(*(void **)(v34 - 64));
  if (*(char *)(v34 - 17) < 0)
    operator delete(*(void **)(v34 - 40));
  _Unwind_Resume(exception_object);
}

void quasar::KeywordDirectOutputsSyncDecoder::finishInit(quasar::KeywordDirectOutputsSyncDecoder *this)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  std::string *v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  _OWORD v11[17];

  v1 = *((_QWORD *)this + 16);
  if (*((_QWORD *)this + 17) == v1)
  {
    memset(v11, 0, sizeof(v11));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "keywords from inputs config are empty");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v11);
  }
  v3 = 0;
  v4 = 0;
  v5 = (uint64_t *)((char *)this + 104);
  v6 = (_QWORD *)((char *)this + 120);
  v7 = (std::string *)*((_QWORD *)this + 14);
  do
  {
    v8 = v1 + v3;
    LODWORD(v11[0]) = 0;
    v10 = 0;
    v9 = 0;
    if ((unint64_t)v7 >= *v6)
    {
      v7 = (std::string *)std::vector<quasar::Token>::__emplace_back_slow_path<std::string &,int,int,int,float const&,BOOL>(v5, v8, (int *)v11, (int *)&v10 + 1, (int *)&v10, &quasar::negInf, &v9);
    }
    else
    {
      std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string &,int,int,int,float const&,BOOL>((uint64_t)v6, v7, v8, (int *)v11, (int *)&v10 + 1, (int *)&v10, &quasar::negInf, &v9);
      v7 = (std::string *)((char *)v7 + 224);
      *((_QWORD *)this + 14) = v7;
    }
    *((_QWORD *)this + 14) = v7;
    ++v4;
    v1 = *((_QWORD *)this + 16);
    v3 += 24;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 17) - v1) >> 3) > v4);
}

void sub_1ADDA5BE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 112) = v2;
  _Unwind_Resume(a1);
}

void quasar::KeywordDirectOutputsSyncDecoder::reset(quasar::KeywordDirectOutputsSyncDecoder *this)
{
  *((_DWORD *)this + 23) = 0;
  quasar::KeywordDirectOutputsSyncDecoder::resetScores(this);
}

void quasar::KeywordDirectOutputsSyncDecoder::resetScores(quasar::KeywordDirectOutputsSyncDecoder *this)
{
  uint64_t v2;
  std::string::size_type v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 *v8;
  __int128 v9;
  void *v10[2];
  char v11;
  __int128 *v12[3];
  void *v13[2];
  char v14;
  void *v15[2];
  char v16;
  std::string v17;
  std::string v18[2];
  void *v19;
  char v20;
  uint64_t v21;
  void *v22;
  char v23;
  uint64_t v24;
  void *v25;
  char v26;
  void *__p;
  char v28;
  void **v29[2];

  v2 = *((_QWORD *)this + 19);
  v3 = *((_QWORD *)this + 20);
  while (v3 != v2)
  {
    v3 -= 24;
    v18[0].__r_.__value_.__r.__words[0] = v3;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
  }
  *((_QWORD *)this + 20) = v2;
  v4 = *((_QWORD *)this + 16);
  if (*((_QWORD *)this + 17) != v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = (__int128 *)(v4 + v5);
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v9 = *v8;
        v17.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v9;
      }
      std::string::basic_string[abi:ne180100]<0>(v15, "");
      std::string::basic_string[abi:ne180100]<0>(v13, "");
      memset(v12, 0, sizeof(v12));
      std::string::basic_string[abi:ne180100]<0>(v10, "");
      quasar::Token::Token(v18, (__int128 *)&v17, 0, 0, 0, 0, 0, (__int128 *)v15, -3.4028e38, (__int128 *)v13, v12, 0, (__int128 *)v10, 0, 0);
      quasar::Token::operator=(*((_QWORD *)this + 13) + v6, (__int128 *)v18);
      if (v28 < 0)
        operator delete(__p);
      if (v26 < 0)
        operator delete(v25);
      v29[0] = (void **)&v24;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v29);
      if (v23 < 0)
        operator delete(v22);
      v29[0] = (void **)&v21;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v29);
      if (v20 < 0)
        operator delete(v19);
      if (SHIBYTE(v18[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18[0].__r_.__value_.__l.__data_);
      if (v11 < 0)
        operator delete(v10[0]);
      v10[0] = v12;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v10);
      if (v14 < 0)
        operator delete(v13[0]);
      if (v16 < 0)
        operator delete(v15[0]);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
      ++v7;
      v4 = *((_QWORD *)this + 16);
      v6 += 224;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 17) - v4) >> 3) > v7);
  }
}

void sub_1ADDA5E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a20 < 0)
    operator delete(__p);
  __p = &a21;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a29 < 0)
    operator delete(a24);
  if (a35 < 0)
    operator delete(a30);
  if (a41 < 0)
    operator delete(a36);
  _Unwind_Resume(a1);
}

void quasar::KeywordDirectOutputsSyncDecoder::updateProb(uint64_t a1, kaldi::OnlineFeatureMatrix **a2, signed int a3, uint64_t *a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  void *__p[3];
  _OWORD v12[17];

  if ((int)(a3 - kaldi::OnlineFeatureMatrix::GetCurrentBatchOffset(*a2)) > 1)
  {
    memset(v12, 0, sizeof(v12));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, "Output for current batch is might not be 1 dimension");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v12);
  }
  kaldi::OnlineFeatureMatrix::GetFrame(*a2, a3, (uint64_t *)v12);
  v7 = DWORD2(v12[0]);
  std::vector<float>::vector(__p, SDWORD2(v12[0]));
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = *(_QWORD *)&v12[0];
    v10 = __p[0];
    do
    {
      v10[v8] = *(_DWORD *)(v9 + 4 * v8);
      ++v8;
    }
    while (v7 != v8);
  }
  std::vector<std::vector<int>>::__clear[abi:ne180100](a4);
  std::vector<std::vector<float>>::push_back[abi:ne180100](a4, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1ADDA5F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::KeywordDirectOutputsSyncDecoder::getResultTokens(quasar::KeywordDirectOutputsSyncDecoder *this@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 *i;
  char *v14;
  uint64_t v15;
  char *v16;
  char **v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  _QWORD v21[6];
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<std::vector<quasar::Token>>::reserve(a2, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 5));
  v3 = (__int128 *)*((_QWORD *)this + 13);
  for (i = (__int128 *)*((_QWORD *)this + 14); v3 != i; v3 += 14)
  {
    v4 = *v3;
    v20 = *((_QWORD *)v3 + 2);
    v19 = v4;
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    *(_QWORD *)v3 = 0;
    v5 = *(__int128 *)((char *)v3 + 24);
    *(_QWORD *)((char *)&v21[1] + 6) = *(_QWORD *)((char *)v3 + 38);
    *(_OWORD *)v21 = v5;
    v6 = v3[3];
    v21[5] = *((_QWORD *)v3 + 8);
    *(_OWORD *)&v21[3] = v6;
    *((_QWORD *)v3 + 7) = 0;
    *((_QWORD *)v3 + 8) = 0;
    *((_QWORD *)v3 + 6) = 0;
    v22 = *(__int128 *)((char *)v3 + 72);
    v23 = *((_QWORD *)v3 + 11);
    *((_QWORD *)v3 + 9) = 0;
    *((_QWORD *)v3 + 10) = 0;
    *((_QWORD *)v3 + 11) = 0;
    v7 = v3[6];
    v25 = *((_QWORD *)v3 + 14);
    v24 = v7;
    *((_QWORD *)v3 + 13) = 0;
    *((_QWORD *)v3 + 14) = 0;
    *((_QWORD *)v3 + 12) = 0;
    v26 = *(__int128 *)((char *)v3 + 120);
    v27 = *((_QWORD *)v3 + 17);
    *((_QWORD *)v3 + 15) = 0;
    *((_QWORD *)v3 + 16) = 0;
    *((_QWORD *)v3 + 17) = 0;
    v8 = v3[9];
    v29 = *((_QWORD *)v3 + 20);
    v28 = v8;
    *((_QWORD *)v3 + 19) = 0;
    *((_QWORD *)v3 + 20) = 0;
    *((_QWORD *)v3 + 18) = 0;
    v9 = *((_DWORD *)v3 + 42);
    v31 = *((_WORD *)v3 + 86);
    v30 = v9;
    v10 = v3[11];
    v33 = *((_QWORD *)v3 + 24);
    v32 = v10;
    *((_QWORD *)v3 + 23) = 0;
    *((_QWORD *)v3 + 24) = 0;
    *((_QWORD *)v3 + 22) = 0;
    v11 = *(__int128 *)((char *)v3 + 200);
    v35 = *((_DWORD *)v3 + 54);
    v34 = v11;
    v15 = 0;
    v16 = 0;
    v14 = 0;
    v17 = &v14;
    v18 = 0;
    v14 = (char *)operator new(0xE0uLL);
    v15 = (uint64_t)v14;
    v16 = v14 + 224;
    v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token const*,quasar::Token const*,quasar::Token*>((uint64_t)&v16, (uint64_t)&v19, (uint64_t)&v36, (uint64_t)v14);
    std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100](a2, (uint64_t)&v14);
    v17 = &v14;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
    quasar::Token::~Token((void **)&v19);
  }
}

void sub_1ADDA61E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = a11;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

uint64_t quasar::KeywordDirectOutputsSyncDecoder::runSync(uint64_t a1, uint64_t a2)
{
  void **v4;
  char *v5;
  char *v6;
  int v7;
  signed int i;
  _BOOL8 IsValidFrame;
  signed int v10;
  kaldi::OnlineFeatureMatrix *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  signed int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  __int128 *v33;
  __int128 v34;
  float v35;
  uint64_t v36;
  uint64_t **v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v43;
  int v44;
  void *v45[2];
  char v46;
  __int128 *v47[3];
  void *v48[2];
  char v49;
  void *v50[2];
  char v51;
  std::string v52;
  void *v53[2];
  __int128 v54;
  __int128 v55;
  void *v56[2];
  __int128 v57;
  __int128 v58;
  void *v59[2];
  __int128 v60;
  __int128 v61;
  void *v62[2];
  __int128 v63;
  void *__p[2];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  kaldi::OnlineFeatureMatrix *v70[2];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void **v74[2];

  v4 = *(void ***)(a2 + 88);
  v5 = (char *)*v4;
  v6 = (char *)v4[1];
  while (v6 != v5)
  {
    v6 -= 24;
    v53[0] = v6;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
  }
  v4[1] = v5;
  v44 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 56) + 16) + 24))(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 16));
  v7 = 0;
  v71 = 0;
  v72 = 0;
  v73 = 0;
  for (i = *(_DWORD *)(a1 + 92); ; ++i)
  {
    IsValidFrame = kaldi::OnlineFeatureMatrix::IsValidFrame(*(int32x2_t **)(a2 + 56), i, 1);
    v10 = *(_DWORD *)(a1 + 88);
    if (i >= v10 || !IsValidFrame)
      break;
    v12 = *(kaldi::OnlineFeatureMatrix **)(a2 + 64);
    v70[0] = *(kaldi::OnlineFeatureMatrix **)(a2 + 56);
    v70[1] = v12;
    if (v12)
    {
      v13 = (unint64_t *)((char *)v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    quasar::KeywordDirectOutputsSyncDecoder::updateProb(IsValidFrame, v70, i, &v71);
    if (v12)
    {
      v15 = (unint64_t *)((char *)v12 + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        (*(void (**)(kaldi::OnlineFeatureMatrix *))(*(_QWORD *)v12 + 16))(v12);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v12);
      }
    }
    ++v7;
  }
  v17 = *(_DWORD *)(a1 + 92);
  if (v17 >= v10)
  {
    if (quasar::gLogLevel >= 4)
    {
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      *(_OWORD *)__p = 0u;
      v65 = 0u;
      *(_OWORD *)v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      *(_OWORD *)v59 = 0u;
      *(_OWORD *)v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      *(_OWORD *)v53 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"batchesSeenSoFar: ", 18);
      v38 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" hit numBatchToUse: ", 20);
      v39 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" with frame number: ", 20);
      v40 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)", use the tokens result from cutoff", 35);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v53);
    }
    v41 = *(_QWORD *)(a2 + 88);
    if (v41 != a1 + 152)
      std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(v41, *(uint64_t **)(a1 + 152), *(uint64_t **)(a1 + 160), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 3));
  }
  else
  {
    v18 = 0xAAAAAAAAAAAAAAABLL * ((v72 - v71) >> 3);
    if (v18)
    {
      if (v18 != 1)
      {
        v68 = 0u;
        v69 = 0u;
        v66 = 0u;
        v67 = 0u;
        *(_OWORD *)__p = 0u;
        v65 = 0u;
        *(_OWORD *)v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        *(_OWORD *)v59 = 0u;
        *(_OWORD *)v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        *(_OWORD *)v53 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"nnet Output is not single row", 29);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v53);
      }
      v19 = *(_QWORD *)(a1 + 128);
      v20 = *(_QWORD *)(a1 + 136);
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 5) != 0xAAAAAAAAAAAAAAABLL * ((v20 - v19) >> 3))
      {
        v68 = 0u;
        v69 = 0u;
        v66 = 0u;
        v67 = 0u;
        *(_OWORD *)__p = 0u;
        v65 = 0u;
        *(_OWORD *)v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        *(_OWORD *)v59 = 0u;
        *(_OWORD *)v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        *(_OWORD *)v53 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"bestKeywordsScores count : ", 27);
        v43 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" unmatching with keywords count: ", 33);
        std::ostream::operator<<();
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v53);
      }
      if (v20 != v19)
      {
        v21 = 0;
        v22 = 0;
        v23 = 0;
        do
        {
          v24 = *(_DWORD *)(a1 + 92);
          v25 = *(_DWORD *)(a1 + 96);
          if (quasar::gLogLevel >= 4)
          {
            v68 = 0u;
            v69 = 0u;
            v66 = 0u;
            v67 = 0u;
            *(_OWORD *)__p = 0u;
            v65 = 0u;
            *(_OWORD *)v62 = 0u;
            v63 = 0u;
            v60 = 0u;
            v61 = 0u;
            v58 = 0u;
            *(_OWORD *)v59 = 0u;
            *(_OWORD *)v56 = 0u;
            v57 = 0u;
            v54 = 0u;
            v55 = 0u;
            *(_OWORD *)v53 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v53);
            v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"KWD ", 4);
            v27 = *(_QWORD *)(a1 + 128) + v21;
            v28 = *(char *)(v27 + 23);
            if (v28 >= 0)
              v29 = *(_QWORD *)(a1 + 128) + v21;
            else
              v29 = *(_QWORD *)v27;
            if (v28 >= 0)
              v30 = *(unsigned __int8 *)(v27 + 23);
            else
              v30 = *(_QWORD *)(v27 + 8);
            v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v29, v30);
            v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" ", 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" confidence ", 12);
            std::ostream::operator<<();
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v53);
            v19 = *(_QWORD *)(a1 + 128);
          }
          v33 = (__int128 *)(v19 + v21);
          if (*((char *)v33 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)v33, *((_QWORD *)v33 + 1));
          }
          else
          {
            v34 = *v33;
            v52.__r_.__value_.__r.__words[2] = *((_QWORD *)v33 + 2);
            *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v34;
          }
          v35 = *(float *)(*(_QWORD *)(v72 - 24) + 4 * v23);
          std::string::basic_string[abi:ne180100]<0>(v50, "");
          std::string::basic_string[abi:ne180100]<0>(v48, "");
          memset(v47, 0, sizeof(v47));
          std::string::basic_string[abi:ne180100]<0>(v45, "");
          quasar::Token::Token((std::string *)v53, (__int128 *)&v52, v25 * v44 * v24, v25 * v44 * (v24 + v7), v25 * v44 * (v24 + v7), 0, 0, (__int128 *)v50, v35, (__int128 *)v48, v47, 0, (__int128 *)v45, 0, 0);
          quasar::Token::operator=(*(_QWORD *)(a1 + 104) + v22, (__int128 *)v53);
          if (SBYTE7(v65) < 0)
            operator delete(__p[0]);
          if (SBYTE7(v63) < 0)
            operator delete(v62[0]);
          v74[0] = (void **)&v60 + 1;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v74);
          if (SBYTE7(v60) < 0)
            operator delete(v59[0]);
          v74[0] = (void **)&v57 + 1;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v74);
          if (SBYTE7(v57) < 0)
            operator delete(v56[0]);
          if (SBYTE7(v54) < 0)
            operator delete(v53[0]);
          if (v46 < 0)
            operator delete(v45[0]);
          v45[0] = v47;
          std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v45);
          if (v49 < 0)
            operator delete(v48[0]);
          if (v51 < 0)
            operator delete(v50[0]);
          if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v52.__r_.__value_.__l.__data_);
          ++v23;
          v19 = *(_QWORD *)(a1 + 128);
          v22 += 224;
          v21 += 24;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 136) - v19) >> 3) > v23);
        v17 = *(_DWORD *)(a1 + 92);
      }
      *(_DWORD *)(a1 + 92) = v17 + v7;
      quasar::KeywordDirectOutputsSyncDecoder::getResultTokens((quasar::KeywordDirectOutputsSyncDecoder *)a1, (uint64_t *)v53);
      v36 = *(_QWORD *)(a2 + 88);
      std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)v36);
      *(_OWORD *)v36 = *(_OWORD *)v53;
      *(_QWORD *)(v36 + 16) = v54;
      v53[0] = 0;
      v53[1] = 0;
      *(_QWORD *)&v54 = 0;
      v50[0] = v53;
      std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)v50);
      if (*(_DWORD *)(a1 + 92) >= *(_DWORD *)(a1 + 88))
      {
        v37 = *(uint64_t ***)(a2 + 88);
        if ((uint64_t **)(a1 + 152) != v37)
          std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a1 + 152, *v37, v37[1], 0xAAAAAAAAAAAAAAABLL * (v37[1] - *v37));
      }
    }
  }
  v53[0] = &v71;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
  return 1;
}

void sub_1ADDA68E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45)
{
  uint64_t v45;

  a45 = v45 - 136;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a45);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::Token>::__emplace_back_slow_path<std::string &,int,int,int,float const&,BOOL>(uint64_t *a1, uint64_t a2, int *a3, int *a4, int *a5, float *a6, unsigned __int8 *a7)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v20;
  std::string *v21;
  std::string::value_type *v22;
  char *v23;
  uint64_t *v24;

  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) > 0x124924924924924)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5) > v9)
    v9 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492)
    v16 = 0x124924924924924;
  else
    v16 = v9;
  v24 = a1 + 2;
  if (v16)
    v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)(a1 + 2), v16);
  else
    v17 = 0;
  v20 = v17;
  v21 = (std::string *)&v17[224 * v8];
  v23 = &v17[224 * v16];
  std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string &,int,int,int,float const&,BOOL>((uint64_t)(a1 + 2), v21, a2, a3, a4, a5, a6, a7);
  v22 = &v21[9].__r_.__value_.__s.__data_[8];
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v20);
  v18 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v20);
  return v18;
}

void sub_1ADDA6B04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string &,int,int,int,float const&,BOOL>(uint64_t a1, std::string *a2, uint64_t a3, int *a4, int *a5, int *a6, float *a7, unsigned __int8 *a8)
{
  int v14;
  int v15;
  int v16;
  float v17;
  int v18;
  void *__p[2];
  char v20;
  __int128 *v21[3];
  void *v22[2];
  char v23;
  void *v24[2];
  char v25;
  std::string v26;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v26 = *(std::string *)a3;
  v14 = *a4;
  v15 = *a5;
  v16 = *a6;
  v17 = *a7;
  v18 = *a8;
  std::string::basic_string[abi:ne180100]<0>(v24, "");
  std::string::basic_string[abi:ne180100]<0>(v22, "");
  memset(v21, 0, sizeof(v21));
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::Token::Token(a2, (__int128 *)&v26, v14, v15, v16, v18 != 0, 0, (__int128 *)v24, v17, (__int128 *)v22, v21, 0, (__int128 *)__p, 0, 0);
  if (v20 < 0)
    operator delete(__p[0]);
  __p[0] = v21;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v23 < 0)
    operator delete(v22[0]);
  if (v25 < 0)
    operator delete(v24[0]);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_1ADDA6C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a20 < 0)
    operator delete(__p);
  __p = &a21;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a29 < 0)
    operator delete(a24);
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v35 - 89) < 0)
    operator delete(*(void **)(v35 - 112));
  _Unwind_Resume(a1);
}

void quasar::LmBuildConfig::~LmBuildConfig(void **this)
{
  *this = off_1E5D34E88;
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

void quasar::LmBuildConfig::ModelSysConfigParameters::~ModelSysConfigParameters(void **this)
{
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

void quasar::LmBuildConfig::getSysConfigVersion(quasar::LmBuildConfig *this@<X0>, std::string *a2@<X8>)
{
  std::string::size_type size;
  std::string *v6;
  std::string *v7;
  std::string *p_p;
  std::string::size_type v9;
  std::string *v10;
  std::string v11;
  std::string __p;
  char v13;
  std::string v14;
  char v15;
  std::string v16;

  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&v11, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    v11 = *(std::string *)((char *)this + 8);
  quasar::filesystem::Path::Path(&__p, (__int128 *)&v11);
  quasar::filesystem::Path::normalize((quasar::filesystem::Path *)&__p, &v14);
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)&v14, &v16);
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D343A0;
  if (v15 < 0)
    operator delete((void *)v14.__r_.__value_.__l.__size_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D343A0;
  if (v13 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  else
    size = v16.__r_.__value_.__l.__size_;
  v6 = &v14;
  std::string::basic_string[abi:ne180100]((uint64_t)&v14, size + 1);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v6 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if (size)
  {
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v16;
    else
      v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
    memmove(v6, v7, size);
  }
  *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + size) = 58;
  quasar::SystemConfig::getMainModelVersion(this, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v9 = __p.__r_.__value_.__l.__size_;
  v10 = std::string::append(&v14, (const std::string::value_type *)p_p, v9);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_1ADDA6F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, void *a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,void *a25,void *a26,int a27,__int16 a28,char a29,char a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a20 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (*(char *)(v34 - 33) < 0)
    operator delete(*(void **)(v34 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t quasar::LmBuildConfig::getModelType(std::string *this)
{
  std::string::size_type size;
  uint64_t v3;
  const std::string::value_type *i;
  _QWORD *v5;
  _OWORD v7[17];

  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if (!size)
    return 1;
  v3 = 0;
  for (i = "dummy"; std::string::compare(this, i); i += 20)
  {
    if (++v3 == 4)
    {
      memset(v7, 0, sizeof(v7));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"invalid model type specifier: ", 30);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, (uint64_t)this);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v7);
    }
  }
  return v3;
}

void sub_1ADDA70D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&a9);
}

void quasar::LmBuildConfig::readSysConfig(uint64_t a1, std::string *a2, uint64_t a3)
{
  std::string::size_type size;
  std::string *p_p;
  std::string *v7;
  uint64_t PtreeOptional;
  uint64_t v9;
  void **v10;
  const std::string *SpeechModelInfo;
  void *v12[2];
  char v13;
  std::string __p;
  std::string v15;

  if (*(char *)(a3 + 23) < 0)
  {
    if (*(_QWORD *)(a3 + 8))
    {
      std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      goto LABEL_7;
    }
  }
  else if (*(_BYTE *)(a3 + 23))
  {
    v15 = *(std::string *)a3;
    goto LABEL_7;
  }
  std::string::basic_string[abi:ne180100]<0>(&v15, "lm-personalize.model");
LABEL_7:
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    size = v15.__r_.__value_.__l.__size_;
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (size)
  {
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v15;
    else
      v7 = (std::string *)v15.__r_.__value_.__r.__words[0];
    memmove(p_p, v7, size);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + size) = 46;
  quasar::SystemConfig::setPrefix(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "weight");
  std::string::basic_string[abi:ne180100]<0>(v12, "Interpolation weight");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 8, (uint64_t)v12, 0, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v13 < 0)
    operator delete(v12[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "max-rescore-weight");
  std::string::basic_string[abi:ne180100]<0>(v12, "Max rescoring weight: 0 = exclude from rescoring, 1 = use in rescoring as usual, betw 0 and 1 = limit rescoring weight chosen by EM algorithm");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 12, (uint64_t)v12, 0, 178, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v13 < 0)
    operator delete(v12[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "deserialize-test");
  std::string::basic_string[abi:ne180100]<0>(v12, "Test if the new model can be read before it is installed");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 16, (uint64_t)v12, 0, 182, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v13 < 0)
    operator delete(v12[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "type");
  std::string::basic_string[abi:ne180100]<0>(v12, "Type of model. Examples: 'dummy' or 'ngram'");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 96, (uint64_t)v12, 1, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v13 < 0)
    operator delete(v12[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  quasar::SystemConfig::readPtree((uint64_t)a2, (uint64_t)&v15, 0, 0);
  *(_DWORD *)(a1 + 20) = quasar::LmBuildConfig::getModelType((std::string *)(a1 + 96));
  std::string::basic_string[abi:ne180100]<0>(&__p, "model-info");
  PtreeOptional = quasar::SystemConfig::getPtreeOptional((uint64_t)a2, (uint64_t)&__p);
  v9 = PtreeOptional;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v9)
      goto LABEL_44;
  }
  else if (!PtreeOptional)
  {
    goto LABEL_44;
  }
  quasar::LmBuildConfig::getSysConfigVersion((quasar::LmBuildConfig *)a2, &__p);
  v10 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  quasar::SystemConfig::getMainModelVersion((quasar::SystemConfig *)a2, &__p);
  std::string::operator=((std::string *)(a1 + 48), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  SpeechModelInfo = (const std::string *)quasar::SystemConfig::getSpeechModelInfo((quasar::SystemConfig *)a2);
  std::string::operator=((std::string *)(a1 + 72), SpeechModelInfo + 5);
LABEL_44:
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_1ADDA7468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void quasar::makeLmBuildConfig(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::string::size_type v5;
  std::string::size_type size;
  void **v7;
  std::string *v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  _QWORD *v12;
  std::string *v13;
  std::string::size_type v14;
  void *__p[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  void *v32[2];
  char v33;
  std::string v34;
  std::string v35[64];
  std::string v36;

  memset(&v36, 0, sizeof(v36));
  memset(&v34, 0, sizeof(v34));
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  LODWORD(v17) = 1065353216;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v35, a1, (uint64_t *)&v34, (uint64_t)__p);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  __p[0] = &v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (*(char *)(a2 + 23) < 0)
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (v5)
    {
      std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)a2, v5);
      goto LABEL_7;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    v34 = *(std::string *)a2;
    goto LABEL_7;
  }
  std::string::basic_string[abi:ne180100]<0>(&v34, "lm-personalize.model");
LABEL_7:
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  else
    size = v34.__r_.__value_.__l.__size_;
  v7 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 1);
  if (SBYTE7(v16) < 0)
    v7 = (void **)__p[0];
  if (size)
  {
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = &v34;
    else
      v8 = (std::string *)v34.__r_.__value_.__r.__words[0];
    memmove(v7, v8, size);
  }
  *(_WORD *)((char *)v7 + size) = 46;
  quasar::SystemConfig::setPrefix(v35, (const std::string *)__p);
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "type");
  std::string::basic_string[abi:ne180100]<0>(v32, "Type of model. Examples: 'dummy' or 'ngram'");
  quasar::SystemConfig::Register<std::string>((uint64_t)v35, (const void **)__p, (uint64_t)&v36, (uint64_t)v32, 1, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v33 < 0)
    operator delete(v32[0]);
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  quasar::SystemConfig::readPtree((uint64_t)v35, (uint64_t)&v34, 0, 0);
  switch(quasar::LmBuildConfig::getModelType(&v36))
  {
    case 0u:
      v9 = operator new();
      quasar::DummyConfig::DummyConfig(v9, v35, &v34);
      *a3 = v9;
      v10 = (_QWORD *)operator new();
      v10[2] = 0;
      break;
    case 1u:
      v9 = operator new();
      quasar::NgramSrilmCountConfig::NgramSrilmCountConfig(v9);
      *a3 = v9;
      v10 = (_QWORD *)operator new();
      v10[2] = 0;
      break;
    case 2u:
      v9 = operator new();
      quasar::NgramSrilmAdaptationConfig::NgramSrilmAdaptationConfig(v9, v35, &v34);
      *a3 = v9;
      v10 = (_QWORD *)operator new();
      v10[2] = 0;
      break;
    case 3u:
      v9 = operator new();
      quasar::NNLmConfig::NNLmConfig(v9, v35, &v34);
      *a3 = v9;
      v10 = (_QWORD *)operator new();
      v10[2] = 0;
      break;
    default:
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown model type: ", 20);
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v36;
      else
        v13 = (std::string *)v36.__r_.__value_.__r.__words[0];
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
      else
        v14 = v36.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  *v10 = v11 + 16;
  v10[1] = 0;
  v10[3] = v9;
  a3[1] = (uint64_t)v10;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v35);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
}

void sub_1ADDA78EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,char a62)
{
  uint64_t v62;

  if (a60 < 0)
    operator delete(__p);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a62);
  if (*(char *)(v62 - 33) < 0)
    operator delete(*(void **)(v62 - 56));
  _Unwind_Resume(a1);
}

void sub_1ADDA79F4(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  JUMPOUT(0x1ADDA79DCLL);
}

quasar::LmModel2 *quasar::LmModel2::LmModel2(quasar::LmModel2 *this, float a2, float a3, uint64_t *a4)
{
  uint64_t v5;

  v5 = *a4;
  *(_QWORD *)this = *a4;
  *(_QWORD *)((char *)this + *(_QWORD *)(v5 - 24)) = a4[1];
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *((_QWORD *)this + 6) = 0;
  quasar::PTree::PTree((quasar::LmModel2 *)((char *)this + 56));
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 34) = 3;
  *((_QWORD *)this + 18) = 0x3F80000000000000;
  *((_BYTE *)this + 152) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_QWORD *)this + 28) = 0;
  *((_BYTE *)this + 232) = 1;
  return this;
}

void sub_1ADDA7AA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;

  v4 = v2;
  std::__tree<std::string>::destroy(v4, *(char **)(v1 + 40));
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v3);
  _Unwind_Resume(a1);
}

void quasar::LmModel2::~LmModel2(quasar::LmModel2 *this, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24)) = a2[1];
  if (*((char *)this + 231) < 0)
    operator delete(*((void **)this + 26));
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
  if (*((char *)this + 183) < 0)
    operator delete(*((void **)this + 20));
  quasar::PTree::~PTree((quasar::LmModel2 *)((char *)this + 56));
  std::__tree<std::string>::destroy((uint64_t)this + 32, *((char **)this + 5));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t quasar::LmModel2::LmModel2(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = a2[1];
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  quasar::PTree::PTree((quasar::PTree *)(a1 + 56));
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 3;
  *(_QWORD *)(a1 + 144) = 0x3F80000000000000;
  *(_BYTE *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 1;
  return a1;
}

void sub_1ADDA7C04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;

  v4 = v2;
  std::__tree<std::string>::destroy(v4, *(char **)(v1 + 40));
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v3);
  _Unwind_Resume(a1);
}

void quasar::_loadLmFromDirectoryWithoutCoordinator(const void **a1, unsigned __int8 *a2, std::string *a3, uint64_t a4)
{
  _QWORD *v8;
  int v9;
  void *v10;
  uint64_t v11;
  size_t v12;
  _BYTE *v13;
  const void *v14;
  std::string *v15;
  __int128 v16;
  const std::string *String;
  uint64_t v18;
  uint64_t v19;
  std::string::size_type size;
  int v21;
  std::string *v22;
  uint64_t v23;
  __int128 v24;
  int ModelType;
  uint64_t v26;
  __int128 v27;
  double Double;
  double v29;
  float v30;
  char v31;
  float v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unint64_t *v40;
  unint64_t *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  std::string *v47;
  std::string::size_type v48;
  float v49[2];
  char v50;
  int v51;
  std::string v52;
  std::string v53;
  void *__p;
  uint64_t v55;
  uint64_t v56;
  std::string v57;
  std::string v58;
  _BYTE v59[64];
  __int128 v60;
  std::string::size_type v61;
  __int128 v62;
  _BYTE v63[32];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;

  if (quasar::gLogLevel >= 4)
  {
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v64 = 0u;
    memset(v63, 0, sizeof(v63));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v63);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"Reading LmModel currentDir=", 27);
    v9 = *((char *)a1 + 23);
    if (v9 >= 0)
      v10 = a1;
    else
      v10 = (void *)*a1;
    if (v9 >= 0)
      v11 = *((unsigned __int8 *)a1 + 23);
    else
      v11 = (uint64_t)a1[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v10, v11);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v63);
  }
  if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
  {
    *a3->__r_.__value_.__l.__data_ = 0;
    a3->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    a3->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&a3->__r_.__value_.__s + 23) = 0;
  }
  if (*(_BYTE *)(a4 + 16))
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a4);
    *(_BYTE *)(a4 + 16) = 0;
  }
  v62 = 0uLL;
  if (*((char *)a1 + 23) >= 0)
    v12 = *((unsigned __int8 *)a1 + 23);
  else
    v12 = (size_t)a1[1];
  v13 = v63;
  std::string::basic_string[abi:ne180100]((uint64_t)v63, v12 + 1);
  if (v63[23] < 0)
    v13 = *(_BYTE **)v63;
  if (v12)
  {
    if (*((char *)a1 + 23) >= 0)
      v14 = a1;
    else
      v14 = *a1;
    memmove(v13, v14, v12);
  }
  *(_WORD *)&v13[v12] = 47;
  v15 = std::string::append((std::string *)v63, "lm.json");
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v61 = v15->__r_.__value_.__r.__words[2];
  v60 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if ((v63[23] & 0x80000000) != 0)
    operator delete(*(void **)v63);
  if (!quasar::filesystem::exists((char *)&v60))
  {
    std::optional<std::shared_ptr<kaldi::WordHypLattice>>::operator=[abi:ne180100]<std::shared_ptr<kaldi::WordHypLattice>&,void>(a4, (uint64_t *)&v62);
    goto LABEL_101;
  }
  quasar::PTree::PTree((quasar::PTree *)v59);
  quasar::PTree::readJsonFromFile((uint64_t)v59, &v60);
  std::string::basic_string[abi:ne180100]<0>(v63, "language");
  String = (const std::string *)quasar::PTree::getString((uint64_t)v59, (__int128 *)v63);
  std::string::operator=(a3, String);
  if ((v63[23] & 0x80000000) != 0)
    operator delete(*(void **)v63);
  v18 = a2[23];
  if ((v18 & 0x80u) == 0)
    v19 = a2[23];
  else
    v19 = *((_QWORD *)a2 + 1);
  if (!v19)
    goto LABEL_46;
  size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  v21 = (char)size;
  if ((size & 0x80u) != 0)
    size = a3->__r_.__value_.__l.__size_;
  if (v19 != size)
    goto LABEL_100;
  if (v21 >= 0)
    v22 = a3;
  else
    v22 = (std::string *)a3->__r_.__value_.__r.__words[0];
  if ((v18 & 0x80) == 0)
  {
    if (a2[23])
    {
      while (*a2 == v22->__r_.__value_.__s.__data_[0])
      {
        ++a2;
        v22 = (std::string *)((char *)v22 + 1);
        if (!--v18)
          goto LABEL_46;
      }
      goto LABEL_100;
    }
LABEL_46:
    std::string::basic_string[abi:ne180100]<0>(v63, "type");
    v23 = quasar::PTree::getString((uint64_t)v59, (__int128 *)v63);
    if (*(char *)(v23 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)v23, *(_QWORD *)(v23 + 8));
    }
    else
    {
      v24 = *(_OWORD *)v23;
      v58.__r_.__value_.__r.__words[2] = *(_QWORD *)(v23 + 16);
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v24;
    }
    if ((v63[23] & 0x80000000) != 0)
      operator delete(*(void **)v63);
    ModelType = quasar::LmBuildConfig::getModelType(&v58);
    std::string::basic_string[abi:ne180100]<0>(v63, "version");
    v26 = quasar::PTree::getString((uint64_t)v59, (__int128 *)v63);
    if (*(char *)(v26 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v26, *(_QWORD *)(v26 + 8));
    }
    else
    {
      v27 = *(_OWORD *)v26;
      v57.__r_.__value_.__r.__words[2] = *(_QWORD *)(v26 + 16);
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v27;
    }
    if ((v63[23] & 0x80000000) != 0)
      operator delete(*(void **)v63);
    std::string::basic_string[abi:ne180100]<0>(v63, "weight");
    Double = quasar::PTree::getDouble((uint64_t)v59, (__int128 *)v63);
    if ((v63[23] & 0x80000000) != 0)
      operator delete(*(void **)v63);
    std::string::basic_string[abi:ne180100]<0>(v63, "maxRescoreWeight");
    quasar::PTree::getDoubleOptional((uint64_t)v59, (uint64_t)v63);
    v30 = Double;
    if (v31)
      v32 = v29;
    else
      v32 = 1.0;
    if ((v63[23] & 0x80000000) != 0)
      operator delete(*(void **)v63);
    v49[0] = v30;
    v49[1] = v32;
    v50 = 0;
    v51 = ModelType;
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v52, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
    else
      v52 = v57;
    if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v53, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
    else
      v53 = *a3;
    __p = 0;
    v55 = 0;
    v56 = 0;
    if (ModelType)
    {
      if (ModelType == 3)
      {
        quasar::loadNNLmModel((uint64_t)v59, v49, a1, (quasar::LmModel2 **)v63);
        v36 = *(_OWORD *)v63;
        *(_OWORD *)v63 = 0uLL;
        v37 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
        v62 = v36;
        if (v37)
        {
          p_shared_owners = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldaxr(p_shared_owners);
          while (__stlxr(v39 - 1, p_shared_owners));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        v33 = *(std::__shared_weak_count **)&v63[8];
        if (!*(_QWORD *)&v63[8])
          goto LABEL_90;
        v40 = (unint64_t *)(*(_QWORD *)&v63[8] + 8);
        do
          v35 = __ldaxr(v40);
        while (__stlxr(v35 - 1, v40));
      }
      else
      {
        if (ModelType != 1)
        {
          v77 = 0u;
          v78 = 0u;
          v75 = 0u;
          v76 = 0u;
          v73 = 0u;
          v74 = 0u;
          v71 = 0u;
          v72 = 0u;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v65 = 0u;
          v66 = 0u;
          v64 = 0u;
          memset(v63, 0, sizeof(v63));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v63);
          v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"Unknown model type: ", 20);
          if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v47 = &v58;
          else
            v47 = (std::string *)v58.__r_.__value_.__r.__words[0];
          if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v48 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
          else
            v48 = v58.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v63);
        }
        quasar::loadNgramSrilmModel((uint64_t)v59, v49, a1, (uint64_t *)v63);
        std::shared_ptr<quasar::LmModel2>::operator=[abi:ne180100]<quasar::NgramLmModel2,void>((uint64_t *)&v62, v63);
        v33 = *(std::__shared_weak_count **)&v63[8];
        if (!*(_QWORD *)&v63[8])
          goto LABEL_90;
        v34 = (unint64_t *)(*(_QWORD *)&v63[8] + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
      }
    }
    else
    {
      quasar::loadDummyModel((uint64_t)v59, (const quasar::LmBuildConfig::ModelSysConfigParameters *)v49, a1, (uint64_t *)v63);
      std::shared_ptr<quasar::LmModel2>::operator=[abi:ne180100]<quasar::NgramLmModel2,void>((uint64_t *)&v62, v63);
      v33 = *(std::__shared_weak_count **)&v63[8];
      if (!*(_QWORD *)&v63[8])
      {
LABEL_90:
        v42 = quasar::filesystem::last_write_time((char *)&v60);
        *(double *)(v62 + 128) = (double)v42;
        std::optional<std::shared_ptr<kaldi::WordHypLattice>>::operator=[abi:ne180100]<std::shared_ptr<kaldi::WordHypLattice>&,void>(a4, (uint64_t *)&v62);
        if (SHIBYTE(v56) < 0)
          operator delete(__p);
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53.__r_.__value_.__l.__data_);
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v52.__r_.__value_.__l.__data_);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v57.__r_.__value_.__l.__data_);
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v58.__r_.__value_.__l.__data_);
        goto LABEL_100;
      }
      v41 = (unint64_t *)(*(_QWORD *)&v63[8] + 8);
      do
        v35 = __ldaxr(v41);
      while (__stlxr(v35 - 1, v41));
    }
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
    goto LABEL_90;
  }
  if (!memcmp(*(const void **)a2, v22, *((_QWORD *)a2 + 1)))
    goto LABEL_46;
LABEL_100:
  quasar::PTree::~PTree((quasar::PTree *)v59);
LABEL_101:
  if (SHIBYTE(v61) < 0)
    operator delete((void *)v60);
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_1ADDA82AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  _OWORD *v60;
  int *v61;
  void *v64;
  int v65;
  void *v66;
  _QWORD *v67;
  const char *v68;
  size_t v69;

  quasar::LmBuildConfig::ModelSysConfigParameters::~ModelSysConfigParameters(&a10);
  if (a29 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  quasar::PTree::~PTree((quasar::PTree *)&a38);
  if (a51 < 0)
    operator delete(a46);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  v64 = __cxa_begin_catch(a1);
  v65 = *v61;
  if (a2 == 2)
  {
    if (v65 >= 1)
    {
      v66 = v64;
      v60[18] = 0u;
      v60[19] = 0u;
      v60[16] = 0u;
      v60[17] = 0u;
      v60[14] = 0u;
      v60[15] = 0u;
      v60[12] = 0u;
      v60[13] = 0u;
      v60[10] = 0u;
      v60[11] = 0u;
      v60[8] = 0u;
      v60[9] = 0u;
      v60[6] = 0u;
      v60[7] = 0u;
      v60[4] = 0u;
      v60[5] = 0u;
      v60[3] = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a55);
      v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a55, (uint64_t)"C++ exception: ", 15);
      v68 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v66 + 16))(v66);
      v69 = strlen(v68);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v68, v69);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a55);
    }
  }
  else if (v65 >= 1)
  {
    v60[18] = 0u;
    v60[19] = 0u;
    v60[16] = 0u;
    v60[17] = 0u;
    v60[14] = 0u;
    v60[15] = 0u;
    v60[12] = 0u;
    v60[13] = 0u;
    v60[10] = 0u;
    v60[11] = 0u;
    v60[8] = 0u;
    v60[9] = 0u;
    v60[6] = 0u;
    v60[7] = 0u;
    v60[4] = 0u;
    v60[5] = 0u;
    v60[3] = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a55, (uint64_t)"Unknown exception", 17);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a55);
  }
  __cxa_end_catch();
  JUMPOUT(0x1ADDA820CLL);
}

void sub_1ADDA84F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a43);
  __cxa_end_catch();
  JUMPOUT(0x1ADDA83D0);
}

uint64_t *std::shared_ptr<quasar::LmModel2>::operator=[abi:ne180100]<quasar::NgramLmModel2,void>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v3 = a2[1];
  if (*a2)
    v4 = *a2 + 656;
  else
    v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

void quasar::LmModel2::getMetadata(quasar::LmModel2 *this@<X0>, quasar::PTree *a2@<X8>)
{
  uint64_t i;
  char *v5;
  uint64_t ChildOptional;
  int v7;
  int v8;
  quasar *v9;
  float v10;
  quasar *v11;
  float v12;
  _QWORD *v13;
  size_t v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  void *__p[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  quasar::PTree::PTree(a2);
  for (i = 0; i != 4; ++i)
  {
    v5 = off_1E5D488F0[i];
    std::string::basic_string[abi:ne180100]<0>(__p, v5);
    ChildOptional = quasar::PTree::getChildOptional((uint64_t)a2, (uint64_t)__p);
    if (SBYTE7(v20) < 0)
      operator delete(__p[0]);
    if (ChildOptional)
    {
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reserved metadata key: ", 23);
      v14 = strlen(v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v5, v14);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v17, "version");
  quasar::PTree::PTree(__p, (char *)this + 160);
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v17, (uint64_t)__p, 1);
  quasar::PTree::~PTree((quasar::PTree *)__p);
  if (v18 < 0)
    operator delete(v17[0]);
  v7 = *((_DWORD *)this + 39);
  std::string::basic_string[abi:ne180100]<0>(v17, "type");
  if (v7 == 2)
    v8 = 1;
  else
    v8 = v7;
  std::string::basic_string[abi:ne180100]<0>(v15, &quasar::LmBuildConfig::modelTypeOptions[20 * v8]);
  quasar::PTree::PTree(__p, v15);
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v17, (uint64_t)__p, 1);
  quasar::PTree::~PTree((quasar::PTree *)__p);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  v9 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v17, "weight");
  v10 = *((float *)this + 36);
  LODWORD(__p[0]) = quasar::getType(v9, v10);
  std::to_string((std::string *)&__p[1], v10);
  v21 = 0uLL;
  *(_QWORD *)&v22 = 0;
  BYTE8(v22) = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v17, (uint64_t)__p, 1);
  quasar::PTree::~PTree((quasar::PTree *)__p);
  if (v18 < 0)
    operator delete(v17[0]);
  v11 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v17, "maxRescoreWeight");
  v12 = *((float *)this + 37);
  LODWORD(__p[0]) = quasar::getType(v11, v12);
  std::to_string((std::string *)&__p[1], v12);
  v21 = 0uLL;
  *(_QWORD *)&v22 = 0;
  BYTE8(v22) = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v17, (uint64_t)__p, 1);
  quasar::PTree::~PTree((quasar::PTree *)__p);
  if (v18 < 0)
    operator delete(v17[0]);
  std::string::basic_string[abi:ne180100]<0>(v17, "language");
  quasar::PTree::PTree(__p, (char *)this + 208);
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v17, (uint64_t)__p, 1);
  quasar::PTree::~PTree((quasar::PTree *)__p);
  if (v18 < 0)
    operator delete(v17[0]);
}

void sub_1ADDA8914()
{
  JUMPOUT(0x1ADDA8934);
}

void sub_1ADDA8920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    JUMPOUT(0x1ADDA8930);
  JUMPOUT(0x1ADDA8934);
}

uint64_t quasar::LmModel2::write(_BYTE *a1, uint64_t a2)
{
  uint64_t v3;
  quasar::AppleFileCoordinator *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  quasar::AppleFileCoordinator *v9;
  uint64_t v10;
  quasar::AppleFileCoordinator *v12;
  unsigned __int8 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!a1[232])
  {
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v14 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v14, "Model is only for inference and cannot be written");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v14);
  }
  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (!v3)
  {
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v14 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v14, "Destination is empty");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v14);
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 32))(&v14);
  v13 = 0;
  quasar::FileCoordinator::create(&v12);
  v5 = v12;
  v6 = operator new(0x20uLL);
  *v6 = &off_1E5D3ECC8;
  v6[1] = a1;
  v6[2] = &v14;
  v6[3] = &v13;
  v32 = v6;
  (*(void (**)(quasar::AppleFileCoordinator *, uint64_t, _BYTE *))(*(_QWORD *)v5 + 24))(v5, a2, v31);
  v7 = v32;
  if (v32 == v31)
  {
    v8 = 4;
    v7 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_10;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_10:
  v9 = v12;
  v12 = 0;
  if (v9)
    (*(void (**)(quasar::AppleFileCoordinator *))(*(_QWORD *)v9 + 8))(v9);
  v10 = v13;
  quasar::PTree::~PTree((quasar::PTree *)&v14);
  return v10;
}

void sub_1ADDA8B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL quasar::LmModel2::isCompatible(quasar::LmModel2 *this, const quasar::SystemConfig *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::string::size_type size;
  int v6;
  const void **v7;
  std::string *p_p;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v15;
  _BOOL8 v16;
  std::string __p;

  quasar::LmBuildConfig::getSysConfigVersion(a2, &__p);
  v3 = *((unsigned __int8 *)this + 183);
  if ((v3 & 0x80u) == 0)
    v4 = *((unsigned __int8 *)this + 183);
  else
    v4 = *((_QWORD *)this + 21);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  v6 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (v4 == size)
  {
    v7 = (const void **)((char *)this + 160);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v3 & 0x80) != 0)
    {
      v16 = memcmp(*v7, p_p, *((_QWORD *)this + 21)) == 0;
    }
    else
    {
      if (!*((_BYTE *)this + 183))
      {
        v16 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          return v16;
        goto LABEL_23;
      }
      v9 = v3 - 1;
      do
      {
        v11 = *(unsigned __int8 *)v7;
        v7 = (const void **)((char *)v7 + 1);
        v10 = v11;
        v13 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        v12 = v13;
        v15 = v9-- != 0;
        v16 = v10 == v12;
      }
      while (v10 == v12 && v15);
    }
    if (v6 < 0)
LABEL_23:
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_23;
  }
  return v16;
}

void quasar::LmModel2::getMetrics(quasar::LmModel2 *this@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  quasar *v5;
  double v6;
  int Type;
  std::string v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *__p[2];
  char v14;

  *(_DWORD *)a2 = *((_DWORD *)this + 14);
  v4 = (std::string *)(a2 + 8);
  if (*((char *)this + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 8), *((_QWORD *)this + 9));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *((_OWORD *)this + 4);
    *(_QWORD *)(a2 + 24) = *((_QWORD *)this + 10);
  }
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((std::string *)(a2 + 32), *((_QWORD *)this + 11), *((_QWORD *)this + 12), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)this + 12) - *((_QWORD *)this + 11)) >> 3));
  *(_BYTE *)(a2 + 56) = *((_BYTE *)this + 112);
  v5 = (quasar *)std::string::basic_string[abi:ne180100]<0>(__p, "totalTime");
  v6 = *((double *)this + 15);
  Type = quasar::getType(v5, *(float *)&v6);
  std::to_string(&v8, v6);
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 1;
  quasar::PTree::putChild(a2, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v14 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "times");
  quasar::times2Ptree((_QWORD *)this + 4, (quasar::PTree *)&Type);
  quasar::PTree::putChild(a2, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v14 < 0)
    operator delete(__p[0]);
}

void sub_1ADDA8DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  quasar::PTree *v23;

  quasar::PTree::~PTree((quasar::PTree *)&a10);
  if (a23 < 0)
    operator delete(__p);
  quasar::PTree::~PTree(v23);
  _Unwind_Resume(a1);
}

float quasar::LmModel2::getWeight(quasar::LmModel2 *this)
{
  return *((float *)this + 36);
}

uint64_t quasar::LmModel2::setWeight(uint64_t this, float a2)
{
  *(float *)(this + 144) = a2;
  *(float *)(this + *(_QWORD *)(*(_QWORD *)this - 24) + 12) = a2;
  return this;
}

double quasar::LmModel2::getAgeSeconds(quasar::LmModel2 *this)
{
  double result;
  std::chrono::system_clock::time_point __t;

  result = 0.0;
  if (*((double *)this + 16) != 0.0)
  {
    __t.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    return fmax((double)std::chrono::system_clock::to_time_t(&__t) - *((double *)this + 16), 0.0);
  }
  return result;
}

std::string *quasar::LmModel2::setModelSysConfigParams(quasar::LmModel2 *this, const quasar::LmBuildConfig::ModelSysConfigParameters *a2)
{
  *((_OWORD *)this + 9) = *(_OWORD *)a2;
  std::string::operator=((std::string *)((char *)this + 160), (const std::string *)((char *)a2 + 16));
  std::string::operator=((std::string *)((char *)this + 184), (const std::string *)((char *)a2 + 40));
  return std::string::operator=((std::string *)((char *)this + 208), (const std::string *)((char *)a2 + 64));
}

void quasar::buildLm(quasar::LmData *this@<X1>, const std::string **a2@<X0>, const void **a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  clockid_t v10;
  const std::string *v11;
  const std::string *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  const std::string *v16;
  const std::string *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  const std::string *v22;
  unint64_t *p_size;
  unint64_t v24;
  unint64_t v25;
  clockid_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  unint64_t *v49;
  double Seconds;
  uint64_t v51;
  const std::string *v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  __int128 v56;
  double v57[3];
  char v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;

  *a5 = 0;
  a5[1] = 0;
  if (quasar::LmData::hasEnoughData(this))
  {
    v58 = 1;
    kaldi::Timer::Reset((kaldi::Timer *)v57, v10);
    v59 = 0;
    quasar::LmData::disallowMoreData(this);
    switch((*(unsigned int (**)(const std::string *))((*a2)->__r_.__value_.__r.__words[0] + 16))(*a2))
    {
      case 0u:
        v21 = (uint64_t)*a2;
        v22 = a2[1];
        *(_QWORD *)&v60 = *a2;
        *((_QWORD *)&v60 + 1) = v22;
        if (v22)
        {
          p_size = &v22->__r_.__value_.__l.__size_;
          do
            v24 = __ldxr(p_size);
          while (__stxr(v24 + 1, p_size));
          v54 = v21;
          v55 = (std::__shared_weak_count *)v22;
          do
            v25 = __ldxr(p_size);
          while (__stxr(v25 + 1, p_size));
        }
        else
        {
          v54 = v21;
          v55 = 0;
        }
        quasar::trainDummyModel(&v54, (uint64_t *)&v56);
        std::shared_ptr<quasar::LmModel2>::operator=[abi:ne180100]<quasar::NgramLmModel2,void>(a5, &v56);
        v43 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
        if (*((_QWORD *)&v56 + 1))
        {
          v44 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
        }
        v46 = v55;
        if (v55)
        {
          p_shared_owners = (unint64_t *)&v55->__shared_owners_;
          do
            v48 = __ldaxr(p_shared_owners);
          while (__stlxr(v48 - 1, p_shared_owners));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        v33 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
        if (!*((_QWORD *)&v60 + 1))
          goto LABEL_69;
        v49 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
        do
          v35 = __ldaxr(v49);
        while (__stlxr(v35 - 1, v49));
        break;
      case 2u:
      case 4u:
        v11 = *a2;
        v12 = a2[1];
        *(_QWORD *)&v60 = *a2;
        *((_QWORD *)&v60 + 1) = v12;
        if (v12)
        {
          v13 = &v12->__r_.__value_.__l.__size_;
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
          v52 = v11;
          v53 = (std::__shared_weak_count *)v12;
          do
            v15 = __ldxr(v13);
          while (__stxr(v15 + 1, v13));
        }
        else
        {
          v52 = v11;
          v53 = 0;
        }
        quasar::trainOrAdaptNgramSrilmModel(&v52, this, a3, a4, &v56);
        std::shared_ptr<quasar::LmModel2>::operator=[abi:ne180100]<quasar::NgramLmModel2,void>(a5, &v56);
        v27 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
        if (*((_QWORD *)&v56 + 1))
        {
          v28 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v30 = v53;
        if (v53)
        {
          v31 = (unint64_t *)&v53->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        v33 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
        if (!*((_QWORD *)&v60 + 1))
          goto LABEL_69;
        v34 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        break;
      case 5u:
        v16 = *a2;
        v17 = a2[1];
        *(_QWORD *)&v60 = *a2;
        *((_QWORD *)&v60 + 1) = v17;
        if (v17)
        {
          v18 = &v17->__r_.__value_.__l.__size_;
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
          v52 = v16;
          v53 = (std::__shared_weak_count *)v17;
          do
            v20 = __ldxr(v18);
          while (__stxr(v20 + 1, v18));
        }
        else
        {
          v52 = v16;
          v53 = 0;
        }
        quasar::trainOrAdaptNNLMModel(&v52, (uint64_t)this, (uint64_t *)&v56);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a5, &v56);
        v36 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
        if (*((_QWORD *)&v56 + 1))
        {
          v37 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v39 = v53;
        if (v53)
        {
          v40 = (unint64_t *)&v53->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        v33 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
        if (!*((_QWORD *)&v60 + 1))
          goto LABEL_69;
        v42 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
        do
          v35 = __ldaxr(v42);
        while (__stlxr(v35 - 1, v42));
        break;
      default:
        v75 = 0u;
        v76 = 0u;
        v73 = 0u;
        v74 = 0u;
        v71 = 0u;
        v72 = 0u;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v60 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v60);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v60, (uint64_t)"Unsupported LmBuildConfig type", 30);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v60);
    }
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
LABEL_69:
    if (*a5)
    {
      Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v26);
      v51 = *a5;
      *(double *)(v51 + 120) = Seconds - v57[0];
      std::string::operator=((std::string *)(v51 + 8), *a2 + 2);
    }
  }
  else if (quasar::gLogLevel >= 4)
  {
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v60 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v60, (uint64_t)"Not enough data. Skip training", 30);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v60);
  }
}

void sub_1ADDA9374(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

quasar::AppleFileCoordinator *quasar::loadLmFromDirectory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  quasar::AppleFileCoordinator *v12;
  _QWORD *v13;
  __int128 *v14;
  uint64_t v15;
  quasar::AppleFileCoordinator *result;
  quasar::AppleFileCoordinator *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (quasar::gLogLevel >= 4)
  {
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Reading LmModel dir=", 20);
    v9 = *(char *)(a1 + 23);
    if (v9 >= 0)
      v10 = a1;
    else
      v10 = *(_QWORD *)a1;
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(a1 + 23);
    else
      v11 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v18);
  }
  quasar::FileCoordinator::create(&v17);
  v12 = v17;
  v13 = operator new(0x20uLL);
  *v13 = &off_1E5D3DEB0;
  v13[1] = a2;
  v13[2] = a3;
  v13[3] = a4;
  *((_QWORD *)&v19 + 1) = v13;
  (*(void (**)(quasar::AppleFileCoordinator *, uint64_t, __int128 *))(*(_QWORD *)v12 + 16))(v12, a1, &v18);
  v14 = (__int128 *)*((_QWORD *)&v19 + 1);
  if (*((__int128 **)&v19 + 1) == &v18)
  {
    v15 = 4;
    v14 = &v18;
  }
  else
  {
    if (!*((_QWORD *)&v19 + 1))
      goto LABEL_14;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_14:
  result = v17;
  v17 = 0;
  if (result)
    return (quasar::AppleFileCoordinator *)(*(uint64_t (**)(quasar::AppleFileCoordinator *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1ADDA9560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a14;
  if (a14 == v14)
  {
    v17 = 4;
    v16 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

quasar::AppleFileCoordinator *quasar::removeLm(uint64_t a1)
{
  uint64_t v1;
  __int128 *v3;
  uint64_t v4;
  quasar::AppleFileCoordinator *result;
  quasar::AppleFileCoordinator *v6;
  char v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0)
    v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v8, "Destination is empty");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v8);
  }
  v7 = 0;
  quasar::FileCoordinator::create(&v6);
  *(_QWORD *)&v8 = &off_1E5D3ED78;
  *((_QWORD *)&v8 + 1) = &v7;
  *((_QWORD *)&v9 + 1) = &v8;
  (*(void (**)(quasar::AppleFileCoordinator *, uint64_t, __int128 *))(*(_QWORD *)v6 + 24))(v6, a1, &v8);
  v3 = (__int128 *)*((_QWORD *)&v9 + 1);
  if (*((__int128 **)&v9 + 1) == &v8)
  {
    v4 = 4;
    v3 = &v8;
  }
  else
  {
    if (!*((_QWORD *)&v9 + 1))
      goto LABEL_9;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_9:
  result = v6;
  v6 = 0;
  if (result)
    result = (quasar::AppleFileCoordinator *)(*(uint64_t (**)(quasar::AppleFileCoordinator *))(*(_QWORD *)result + 8))(result);
  if (!v7)
  {
    if (quasar::gLogLevel >= 1)
    {
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      v9 = 0u;
      v10 = 0u;
      v8 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v8, (uint64_t)"Coordinated rename failed. This should never happen and is a bug!", 65);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v8);
    }
    return (quasar::AppleFileCoordinator *)quasar::removeLmHelper((const void **)a1);
  }
  return result;
}

void sub_1ADDA9798(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1ADDA97A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *a14)
{
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a14;
  if (a14 == v14)
  {
    v17 = 4;
    v16 = &a11;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  quasar::removeLm((uint64_t)&a11, &a9);
  _Unwind_Resume(a1);
}

uintmax_t quasar::removeLmHelper(const void **a1)
{
  size_t v2;
  void **v3;
  const void *v4;
  _BOOL4 v5;
  _BOOL4 v6;
  size_t v7;
  void **v8;
  const void *v9;
  size_t v10;
  void **v11;
  const void *v12;
  _BOOL4 v13;
  _BOOL4 v14;
  size_t v15;
  void **v16;
  const void *v17;
  size_t v18;
  void **v19;
  const void *v20;
  uintmax_t result;
  void *v22[2];
  char v23;
  void *__p[2];
  char v25;

  if (*((char *)a1 + 23) >= 0)
    v2 = *((unsigned __int8 *)a1 + 23);
  else
    v2 = (size_t)a1[1];
  v3 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v2 + 8);
  if (v25 < 0)
    v3 = (void **)__p[0];
  if (v2)
  {
    if (*((char *)a1 + 23) >= 0)
      v4 = a1;
    else
      v4 = *a1;
    memmove(v3, v4, v2);
  }
  strcpy((char *)v3 + v2, "/garbage");
  v5 = quasar::filesystem::exists((char *)__p);
  v6 = v5;
  if (v25 < 0)
  {
    operator delete(__p[0]);
    if (!v6)
      goto LABEL_27;
  }
  else if (!v5)
  {
    goto LABEL_27;
  }
  if (*((char *)a1 + 23) >= 0)
    v7 = *((unsigned __int8 *)a1 + 23);
  else
    v7 = (size_t)a1[1];
  v8 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v7 + 8);
  if (v25 < 0)
    v8 = (void **)__p[0];
  if (v7)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    memmove(v8, v9, v7);
  }
  strcpy((char *)v8 + v7, "/garbage");
  quasar::filesystem::remove_all((char *)__p);
  if (v25 < 0)
    operator delete(__p[0]);
LABEL_27:
  if (*((char *)a1 + 23) >= 0)
    v10 = *((unsigned __int8 *)a1 + 23);
  else
    v10 = (size_t)a1[1];
  v11 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v10 + 8);
  if (v25 < 0)
    v11 = (void **)__p[0];
  if (v10)
  {
    if (*((char *)a1 + 23) >= 0)
      v12 = a1;
    else
      v12 = *a1;
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "/current");
  v13 = quasar::filesystem::exists((char *)__p);
  v14 = v13;
  if (v25 < 0)
  {
    operator delete(__p[0]);
    if (!v14)
      goto LABEL_65;
  }
  else if (!v13)
  {
    goto LABEL_65;
  }
  if (*((char *)a1 + 23) >= 0)
    v15 = *((unsigned __int8 *)a1 + 23);
  else
    v15 = (size_t)a1[1];
  v16 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v15 + 8);
  if (v25 < 0)
    v16 = (void **)__p[0];
  if (v15)
  {
    if (*((char *)a1 + 23) >= 0)
      v17 = a1;
    else
      v17 = *a1;
    memmove(v16, v17, v15);
  }
  strcpy((char *)v16 + v15, "/current");
  if (*((char *)a1 + 23) >= 0)
    v18 = *((unsigned __int8 *)a1 + 23);
  else
    v18 = (size_t)a1[1];
  v19 = v22;
  std::string::basic_string[abi:ne180100]((uint64_t)v22, v18 + 8);
  if (v23 < 0)
    v19 = (void **)v22[0];
  if (v18)
  {
    if (*((char *)a1 + 23) >= 0)
      v20 = a1;
    else
      v20 = *a1;
    memmove(v19, v20, v18);
  }
  strcpy((char *)v19 + v18, "/garbage");
  quasar::filesystem::rename((char *)__p, (char *)v22);
  if (v23 < 0)
    operator delete(v22[0]);
  if (v25 < 0)
    operator delete(__p[0]);
LABEL_65:
  result = quasar::filesystem::exists((char *)a1);
  if ((_DWORD)result)
    return quasar::filesystem::remove_all((char *)a1);
  return result;
}

void sub_1ADDA9AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<quasar::NgramSrilmCountConfig  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::NgramSrilmCountConfig  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::NgramSrilmCountConfig  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<quasar::DummyConfig  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::DummyConfig  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::DummyConfig  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void std::__shared_ptr_pointer<quasar::NgramSrilmAdaptationConfig  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::NgramSrilmAdaptationConfig  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::NgramSrilmAdaptationConfig  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<quasar::NNLmConfig  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::NNLmConfig  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::NNLmConfig  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void std::__function::__func<quasar::LmModel2::write(std::string const&)::$_0,std::allocator<quasar::LmModel2::write(std::string const&)::$_0>,void ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::LmModel2::write(std::string const&)::$_0,std::allocator<quasar::LmModel2::write(std::string const&)::$_0>,void ()(std::string const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E5D3ECC8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<quasar::LmModel2::write(std::string const&)::$_0,std::allocator<quasar::LmModel2::write(std::string const&)::$_0>,void ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3ECC8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<quasar::LmModel2::write(std::string const&)::$_0,std::allocator<quasar::LmModel2::write(std::string const&)::$_0>,void ()(std::string const&)>::operator()(uint64_t a1, const void **a2)
{
  uint64_t v4;
  size_t v5;
  void **v6;
  const void *v7;
  _BOOL4 v8;
  _BOOL4 v9;
  size_t v10;
  void **v11;
  const void *v12;
  size_t v13;
  void **v14;
  const void *v15;
  _BOOL4 v16;
  _BOOL4 v17;
  size_t v18;
  void **v19;
  const void *v20;
  size_t v21;
  std::string *v22;
  const void *v23;
  size_t v24;
  void **v25;
  const void *v26;
  size_t v27;
  void **v28;
  const void *v29;
  _BOOL4 v30;
  _BOOL4 v31;
  size_t v32;
  void **v33;
  const void *v34;
  size_t v35;
  void **v36;
  const void *v37;
  char Directories;
  char v39;
  size_t v40;
  void **v41;
  const void *v42;
  char v43;
  char v44;
  quasar::PTreeHelper *v45;
  size_t v46;
  std::string *v47;
  const void *v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  __int128 v52;
  size_t v53;
  void **v54;
  const void *v55;
  uint64_t v56;
  std::string::size_type size;
  uint64_t v58;
  int v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  std::string *v64;
  char v65;
  size_t v66;
  void **v67;
  const void *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  size_t v72;
  void **v73;
  const void *v74;
  size_t v75;
  std::string *v76;
  const void *v77;
  void *v78[2];
  char v79;
  void *__p[2];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  std::string v97;
  std::string v98;

  v4 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  v6 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v5 + 8);
  if (SBYTE7(v81) < 0)
    v6 = (void **)__p[0];
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0)
      v7 = a2;
    else
      v7 = *a2;
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, "/garbage");
  v8 = quasar::filesystem::exists((char *)__p);
  v9 = v8;
  if (SBYTE7(v81) < 0)
  {
    operator delete(__p[0]);
    if (!v9)
      goto LABEL_27;
  }
  else if (!v8)
  {
    goto LABEL_27;
  }
  if (*((char *)a2 + 23) >= 0)
    v10 = *((unsigned __int8 *)a2 + 23);
  else
    v10 = (size_t)a2[1];
  v11 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v10 + 8);
  if (SBYTE7(v81) < 0)
    v11 = (void **)__p[0];
  if (v10)
  {
    if (*((char *)a2 + 23) >= 0)
      v12 = a2;
    else
      v12 = *a2;
    memmove(v11, v12, v10);
  }
  strcpy((char *)v11 + v10, "/garbage");
  quasar::filesystem::remove_all((char *)__p);
  if (SBYTE7(v81) < 0)
    operator delete(__p[0]);
LABEL_27:
  if (*((char *)a2 + 23) >= 0)
    v13 = *((unsigned __int8 *)a2 + 23);
  else
    v13 = (size_t)a2[1];
  v14 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v13 + 8);
  if (SBYTE7(v81) < 0)
    v14 = (void **)__p[0];
  if (v13)
  {
    if (*((char *)a2 + 23) >= 0)
      v15 = a2;
    else
      v15 = *a2;
    memmove(v14, v15, v13);
  }
  strcpy((char *)v14 + v13, "/current");
  v16 = quasar::filesystem::exists((char *)__p);
  v17 = v16;
  if (SBYTE7(v81) < 0)
  {
    operator delete(__p[0]);
    if (!v17)
      goto LABEL_77;
  }
  else if (!v16)
  {
    goto LABEL_77;
  }
  if (*((char *)a2 + 23) >= 0)
    v18 = *((unsigned __int8 *)a2 + 23);
  else
    v18 = (size_t)a2[1];
  v19 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v18 + 8);
  if (SBYTE7(v81) < 0)
    v19 = (void **)__p[0];
  if (v18)
  {
    if (*((char *)a2 + 23) >= 0)
      v20 = a2;
    else
      v20 = *a2;
    memmove(v19, v20, v18);
  }
  strcpy((char *)v19 + v18, "/current");
  if (*((char *)a2 + 23) >= 0)
    v21 = *((unsigned __int8 *)a2 + 23);
  else
    v21 = (size_t)a2[1];
  v22 = &v98;
  std::string::basic_string[abi:ne180100]((uint64_t)&v98, v21 + 8);
  if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v22 = (std::string *)v98.__r_.__value_.__r.__words[0];
  if (v21)
  {
    if (*((char *)a2 + 23) >= 0)
      v23 = a2;
    else
      v23 = *a2;
    memmove(v22, v23, v21);
  }
  strcpy((char *)v22 + v21, "/garbage");
  quasar::filesystem::rename((char *)__p, (char *)&v98);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  if (SBYTE7(v81) < 0)
    operator delete(__p[0]);
  if (*((char *)a2 + 23) >= 0)
    v24 = *((unsigned __int8 *)a2 + 23);
  else
    v24 = (size_t)a2[1];
  v25 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v24 + 8);
  if (SBYTE7(v81) < 0)
    v25 = (void **)__p[0];
  if (v24)
  {
    if (*((char *)a2 + 23) >= 0)
      v26 = a2;
    else
      v26 = *a2;
    memmove(v25, v26, v24);
  }
  strcpy((char *)v25 + v24, "/garbage");
  quasar::filesystem::remove_all((char *)__p);
  if (SBYTE7(v81) < 0)
    operator delete(__p[0]);
LABEL_77:
  if (*((char *)a2 + 23) >= 0)
    v27 = *((unsigned __int8 *)a2 + 23);
  else
    v27 = (size_t)a2[1];
  v28 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v27 + 5);
  if (SBYTE7(v81) < 0)
    v28 = (void **)__p[0];
  if (v27)
  {
    if (*((char *)a2 + 23) >= 0)
      v29 = a2;
    else
      v29 = *a2;
    memmove(v28, v29, v27);
  }
  strcpy((char *)v28 + v27, "/next");
  v30 = quasar::filesystem::exists((char *)__p);
  v31 = v30;
  if (SBYTE7(v81) < 0)
  {
    operator delete(__p[0]);
    if (!v31)
      goto LABEL_103;
  }
  else if (!v30)
  {
    goto LABEL_103;
  }
  if (*((char *)a2 + 23) >= 0)
    v32 = *((unsigned __int8 *)a2 + 23);
  else
    v32 = (size_t)a2[1];
  v33 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v32 + 5);
  if (SBYTE7(v81) < 0)
    v33 = (void **)__p[0];
  if (v32)
  {
    if (*((char *)a2 + 23) >= 0)
      v34 = a2;
    else
      v34 = *a2;
    memmove(v33, v34, v32);
  }
  strcpy((char *)v33 + v32, "/next");
  quasar::filesystem::remove_all((char *)__p);
  if (SBYTE7(v81) < 0)
    operator delete(__p[0]);
LABEL_103:
  if (*((char *)a2 + 23) >= 0)
    v35 = *((unsigned __int8 *)a2 + 23);
  else
    v35 = (size_t)a2[1];
  v36 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v35 + 5);
  if (SBYTE7(v81) < 0)
    v36 = (void **)__p[0];
  if (v35)
  {
    if (*((char *)a2 + 23) >= 0)
      v37 = a2;
    else
      v37 = *a2;
    memmove(v36, v37, v35);
  }
  strcpy((char *)v36 + v35, "/next");
  Directories = quasar::appleCreateDirectories((uint64_t)__p, *(_DWORD *)(v4 + 136));
  v39 = Directories;
  if (SBYTE7(v81) < 0)
  {
    operator delete(__p[0]);
    if ((v39 & 1) == 0)
      return;
  }
  else if ((Directories & 1) == 0)
  {
    return;
  }
  if (*((char *)a2 + 23) >= 0)
    v40 = *((unsigned __int8 *)a2 + 23);
  else
    v40 = (size_t)a2[1];
  v41 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v40 + 5);
  if (SBYTE7(v81) < 0)
    v41 = (void **)__p[0];
  if (v40)
  {
    if (*((char *)a2 + 23) >= 0)
      v42 = a2;
    else
      v42 = *a2;
    memmove(v41, v42, v40);
  }
  strcpy((char *)v41 + v40, "/next");
  v43 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v4 + 24))(v4, __p);
  v44 = v43;
  if (SBYTE7(v81) < 0)
  {
    operator delete(__p[0]);
    if ((v44 & 1) == 0)
      return;
  }
  else if ((v43 & 1) == 0)
  {
    return;
  }
  v45 = *(quasar::PTreeHelper **)(a1 + 16);
  if (*((char *)a2 + 23) >= 0)
    v46 = *((unsigned __int8 *)a2 + 23);
  else
    v46 = (size_t)a2[1];
  v47 = &v97;
  std::string::basic_string[abi:ne180100]((uint64_t)&v97, v46 + 5);
  if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v47 = (std::string *)v97.__r_.__value_.__r.__words[0];
  if (v46)
  {
    if (*((char *)a2 + 23) >= 0)
      v48 = a2;
    else
      v48 = *a2;
    memmove(v47, v48, v46);
  }
  strcpy((char *)v47 + v46, "/next");
  v49 = std::string::append(&v97, "/");
  v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  v98.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  v51 = std::string::append(&v98, "lm.json");
  v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
  *(_QWORD *)&v81 = *((_QWORD *)&v51->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v52;
  v51->__r_.__value_.__l.__size_ = 0;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = 0;
  quasar::PTree::writeJsonToFile(v45, (__int128 *)__p);
  if (SBYTE7(v81) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
  if (!*(_BYTE *)(v4 + 152))
    goto LABEL_207;
  if (quasar::gLogLevel >= 4)
  {
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Testing deserialization", 23);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  memset(&v98, 0, sizeof(v98));
  v97.__r_.__value_.__s.__data_[0] = 0;
  v97.__r_.__value_.__s.__data_[16] = 0;
  if (*((char *)a2 + 23) >= 0)
    v53 = *((unsigned __int8 *)a2 + 23);
  else
    v53 = (size_t)a2[1];
  v54 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v53 + 5);
  if (SBYTE7(v81) < 0)
    v54 = (void **)__p[0];
  if (v53)
  {
    if (*((char *)a2 + 23) >= 0)
      v55 = a2;
    else
      v55 = *a2;
    memmove(v54, v55, v53);
  }
  strcpy((char *)v54 + v53, "/next");
  std::string::basic_string[abi:ne180100]<0>(v78, "");
  quasar::_loadLmFromDirectoryWithoutCoordinator((const void **)__p, (unsigned __int8 *)v78, &v98, (uint64_t)&v97);
  if (v79 < 0)
    operator delete(v78[0]);
  if (SBYTE7(v81) < 0)
    operator delete(__p[0]);
  v56 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
  if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v98.__r_.__value_.__r.__words[2]);
  else
    size = v98.__r_.__value_.__l.__size_;
  v58 = *(unsigned __int8 *)(v4 + 231);
  v59 = (char)v58;
  if ((v58 & 0x80u) != 0)
    v58 = *(_QWORD *)(v4 + 216);
  if (size == v58)
  {
    v62 = *(unsigned __int8 **)(v4 + 208);
    v61 = (unsigned __int8 *)(v4 + 208);
    v60 = v62;
    if (v59 >= 0)
      v63 = v61;
    else
      v63 = v60;
    if ((*((_BYTE *)&v98.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v98.__r_.__value_.__l.__data_, v63, v98.__r_.__value_.__l.__size_))
        goto LABEL_183;
    }
    else if (*((_BYTE *)&v98.__r_.__value_.__s + 23))
    {
      v64 = &v98;
      while (v64->__r_.__value_.__s.__data_[0] == *v63)
      {
        v64 = (std::string *)((char *)v64 + 1);
        ++v63;
        if (!--v56)
          goto LABEL_180;
      }
      goto LABEL_183;
    }
LABEL_180:
    if (v97.__r_.__value_.__s.__data_[16] && v97.__r_.__value_.__r.__words[0])
    {
      v65 = 0;
LABEL_198:
      v69 = (std::__shared_weak_count *)v97.__r_.__value_.__l.__size_;
      if (v97.__r_.__value_.__l.__size_)
      {
        v70 = (unint64_t *)(v97.__r_.__value_.__l.__size_ + 8);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *, unsigned __int8 *))v69->__on_zero_shared)(v69, v63);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      goto LABEL_203;
    }
  }
LABEL_183:
  if (quasar::gLogLevel >= 1)
  {
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Deserialization test failed.", 28);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
  }
  if (*((char *)a2 + 23) >= 0)
    v66 = *((unsigned __int8 *)a2 + 23);
  else
    v66 = (size_t)a2[1];
  v67 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v66 + 5);
  if (SBYTE7(v81) < 0)
    v67 = (void **)__p[0];
  if (v66)
  {
    if (*((char *)a2 + 23) >= 0)
      v68 = a2;
    else
      v68 = *a2;
    memmove(v67, v68, v66);
  }
  strcpy((char *)v67 + v66, "/next");
  quasar::filesystem::remove_all((char *)__p);
  if (SBYTE7(v81) < 0)
    operator delete(__p[0]);
  **(_BYTE **)(a1 + 24) = 0;
  v65 = 1;
  if (v97.__r_.__value_.__s.__data_[16])
    goto LABEL_198;
LABEL_203:
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v98.__r_.__value_.__l.__data_);
    if ((v65 & 1) != 0)
      return;
  }
  else if ((v65 & 1) != 0)
  {
    return;
  }
LABEL_207:
  if (*((char *)a2 + 23) >= 0)
    v72 = *((unsigned __int8 *)a2 + 23);
  else
    v72 = (size_t)a2[1];
  v73 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v72 + 5);
  if (SBYTE7(v81) < 0)
    v73 = (void **)__p[0];
  if (v72)
  {
    if (*((char *)a2 + 23) >= 0)
      v74 = a2;
    else
      v74 = *a2;
    memmove(v73, v74, v72);
  }
  strcpy((char *)v73 + v72, "/next");
  if (*((char *)a2 + 23) >= 0)
    v75 = *((unsigned __int8 *)a2 + 23);
  else
    v75 = (size_t)a2[1];
  v76 = &v98;
  std::string::basic_string[abi:ne180100]((uint64_t)&v98, v75 + 8);
  if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v76 = (std::string *)v98.__r_.__value_.__r.__words[0];
  if (v75)
  {
    if (*((char *)a2 + 23) >= 0)
      v77 = a2;
    else
      v77 = *a2;
    memmove(v76, v77, v75);
  }
  strcpy((char *)v76 + v75, "/current");
  quasar::filesystem::rename((char *)__p, (char *)&v98);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__r_.__value_.__l.__data_);
  if (SBYTE7(v81) < 0)
    operator delete(__p[0]);
  **(_BYTE **)(a1 + 24) = 1;
}

void sub_1ADDAA888(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, __int128 __p, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22)
{
  _OWORD *v22;
  void *v25;
  void *v26;
  _QWORD *v27;
  const char *v28;
  size_t v29;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
  v25 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (quasar::gLogLevel >= 1)
    {
      v26 = v25;
      v22[15] = 0u;
      v22[16] = 0u;
      v22[13] = 0u;
      v22[14] = 0u;
      v22[11] = 0u;
      v22[12] = 0u;
      v22[9] = 0u;
      v22[10] = 0u;
      v22[7] = 0u;
      v22[8] = 0u;
      a21 = 0u;
      a22 = 0u;
      a19 = 0u;
      a20 = 0u;
      a17 = 0u;
      a18 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"C++ exception: ", 15);
      v28 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v26 + 16))(v26);
      v29 = strlen(v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
    }
  }
  else if (quasar::gLogLevel >= 1)
  {
    v22[15] = 0u;
    v22[16] = 0u;
    v22[13] = 0u;
    v22[14] = 0u;
    v22[11] = 0u;
    v22[12] = 0u;
    v22[9] = 0u;
    v22[10] = 0u;
    v22[7] = 0u;
    v22[8] = 0u;
    a21 = 0u;
    a22 = 0u;
    a19 = 0u;
    a20 = 0u;
    a17 = 0u;
    a18 = 0u;
    __p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown exception", 17);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1ADDAA868);
}

void sub_1ADDAAB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::LmModel2::write(std::string const&)::$_0,std::allocator<quasar::LmModel2::write(std::string const&)::$_0>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::LmModel2::write(std::string const&)::$_0,std::allocator<quasar::LmModel2::write(std::string const&)::$_0>,void ()(std::string const&)>::target_type()
{
}

void std::__function::__func<quasar::loadLmFromDirectory(std::string const&,std::string const&,std::string&,std::optional<std::shared_ptr<quasar::LmModel2>> &)::$_0,std::allocator<quasar::loadLmFromDirectory(std::string const&,std::string const&,std::string&,std::optional<std::shared_ptr<quasar::LmModel2>> &)::$_0>,void ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::loadLmFromDirectory(std::string const&,std::string const&,std::string&,std::optional<std::shared_ptr<quasar::LmModel2>> &)::$_0,std::allocator<quasar::loadLmFromDirectory(std::string const&,std::string const&,std::string&,std::optional<std::shared_ptr<quasar::LmModel2>> &)::$_0>,void ()(std::string const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E5D3DEB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<quasar::loadLmFromDirectory(std::string const&,std::string const&,std::string&,std::optional<std::shared_ptr<quasar::LmModel2>> &)::$_0,std::allocator<quasar::loadLmFromDirectory(std::string const&,std::string const&,std::string&,std::optional<std::shared_ptr<quasar::LmModel2>> &)::$_0>,void ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3DEB0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<quasar::loadLmFromDirectory(std::string const&,std::string const&,std::string&,std::optional<std::shared_ptr<quasar::LmModel2>> &)::$_0,std::allocator<quasar::loadLmFromDirectory(std::string const&,std::string const&,std::string&,std::optional<std::shared_ptr<quasar::LmModel2>> &)::$_0>,void ()(std::string const&)>::operator()(uint64_t a1, const void **a2)
{
  size_t v4;
  void **v5;
  const void *v6;
  void *__p[2];
  char v8;

  if (*((char *)a2 + 23) >= 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (size_t)a2[1];
  v5 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 8);
  if (v8 < 0)
    v5 = (void **)__p[0];
  if (v4)
  {
    if (*((char *)a2 + 23) >= 0)
      v6 = a2;
    else
      v6 = *a2;
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, "/current");
  quasar::_loadLmFromDirectoryWithoutCoordinator((const void **)__p, *(unsigned __int8 **)(a1 + 8), *(std::string **)(a1 + 16), *(_QWORD *)(a1 + 24));
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_1ADDAACFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<quasar::loadLmFromDirectory(std::string const&,std::string const&,std::string&,std::optional<std::shared_ptr<quasar::LmModel2>> &)::$_0,std::allocator<quasar::loadLmFromDirectory(std::string const&,std::string const&,std::string&,std::optional<std::shared_ptr<quasar::LmModel2>> &)::$_0>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::loadLmFromDirectory(std::string const&,std::string const&,std::string&,std::optional<std::shared_ptr<quasar::LmModel2>> &)::$_0,std::allocator<quasar::loadLmFromDirectory(std::string const&,std::string const&,std::string&,std::optional<std::shared_ptr<quasar::LmModel2>> &)::$_0>,void ()(std::string const&)>::target_type()
{
}

void std::__function::__func<quasar::removeLm(std::string const&)::$_0,std::allocator<quasar::removeLm(std::string const&)::$_0>,void ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::removeLm(std::string const&)::$_0,std::allocator<quasar::removeLm(std::string const&)::$_0>,void ()(std::string const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3ED78;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::removeLm(std::string const&)::$_0,std::allocator<quasar::removeLm(std::string const&)::$_0>,void ()(std::string const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3ED78;
  a2[1] = v2;
  return result;
}

uintmax_t std::__function::__func<quasar::removeLm(std::string const&)::$_0,std::allocator<quasar::removeLm(std::string const&)::$_0>,void ()(std::string const&)>::operator()(uint64_t a1, const void **a2)
{
  uintmax_t result;

  result = quasar::removeLmHelper(a2);
  **(_BYTE **)(a1 + 8) = 1;
  return result;
}

void sub_1ADDAAE08(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25)
{
  void *v26;
  void *v27;
  _QWORD *v28;
  const char *v29;
  size_t v30;

  v26 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (quasar::gLogLevel >= 1)
    {
      v27 = v26;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      a9 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a9, (uint64_t)"C++ exception: ", 15);
      v29 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v27 + 16))(v27);
      v30 = strlen(v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
    }
  }
  else if (quasar::gLogLevel >= 1)
  {
    a24 = 0u;
    a25 = 0u;
    a22 = 0u;
    a23 = 0u;
    a20 = 0u;
    a21 = 0u;
    a18 = 0u;
    a19 = 0u;
    a16 = 0u;
    a17 = 0u;
    a14 = 0u;
    a15 = 0u;
    a12 = 0u;
    a13 = 0u;
    a10 = 0u;
    a11 = 0u;
    a9 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a9, (uint64_t)"Unknown exception", 17);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  }
  __cxa_end_catch();
  JUMPOUT(0x1ADDAADF4);
}

void sub_1ADDAAF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::removeLm(std::string const&)::$_0,std::allocator<quasar::removeLm(std::string const&)::$_0>,void ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<quasar::removeLm(std::string const&)::$_0,std::allocator<quasar::removeLm(std::string const&)::$_0>,void ()(std::string const&)>::target_type()
{
}

uint64_t quasar::WatermarkDetector2::WatermarkDetector2(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;
  _OWORD *v4;

  v3 = (_QWORD *)quasar::Decoder::Decoder(a1, a2);
  *v3 = &off_1E5D36D28;
  v3[56] = 0x3FDBA0EC74320104;
  std::string::basic_string[abi:ne180100]<0>(v3 + 57, "VoiceTrigger");
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_DWORD *)(a1 + 512) = 1065353216;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  v4 = operator new(0x10uLL);
  *(_QWORD *)(a1 + 528) = v4;
  *v4++ = xmmword_1AE17EA00;
  *(_QWORD *)(a1 + 544) = v4;
  *(_QWORD *)(a1 + 536) = v4;
  *(_DWORD *)(a1 + 552) = 1140457472;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_QWORD *)(a1 + 624) = 0;
  *(_DWORD *)(a1 + 632) = 1127481344;
  *(_OWORD *)(a1 + 636) = xmmword_1AE17EA10;
  *(_DWORD *)(a1 + 652) = 2;
  return a1;
}

void sub_1ADDAB064(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  quasar::NotchDetector2 **v3;
  uint64_t v4;
  quasar::NotchDetector2 **v5;

  v5 = v3;
  std::unique_ptr<quasar::NotchDetector2>::reset[abi:ne180100](v5, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v4);
  if (*(char *)(v1 + 479) < 0)
    operator delete(*v2);
  quasar::Decoder::~Decoder((void **)v1);
  _Unwind_Resume(a1);
}

quasar::NotchDetector2 *quasar::WatermarkDetector2::finishInit(quasar::WatermarkDetector2 *this)
{
  const std::string *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  const std::string *v5;
  const std::string *v6;
  void **v7;
  float v8;
  float v9;
  float *v10;
  unint64_t v11;
  float *v12;
  float *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  float *v19;
  int v20;
  const std::string *v21;
  const std::string *v22;
  void **v23;
  float v24;
  float v25;
  float *v26;
  unint64_t v27;
  float *v28;
  float *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  float *v35;
  int v36;
  quasar::NotchDetector2 *v37;
  float v38;
  void *__p[2];
  char v41;
  std::string *v42;
  std::string *v43;

  v2 = (const std::string *)((char *)this + 456);
  std::string::basic_string[abi:ne180100]<0>(__p, ",");
  quasar::splitAndTrimNoEmpty(v2, (char *)__p, &v42);
  if (v41 < 0)
    operator delete(__p[0]);
  v3 = (unsigned __int8 *)v42;
  v4 = (unsigned __int8 *)v43;
  if (v42 != v43)
  {
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)this + 480, v3, (uint64_t)v3);
      v3 += 24;
    }
    while (v3 != v4);
  }
  __p[0] = &v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (*((char *)this + 631) < 0)
  {
    if (!*((_QWORD *)this + 77))
      goto LABEL_31;
  }
  else if (!*((_BYTE *)this + 631))
  {
    goto LABEL_31;
  }
  *((_QWORD *)this + 67) = *((_QWORD *)this + 66);
  std::string::basic_string[abi:ne180100]<0>(__p, ",");
  quasar::splitAndTrimNoEmpty((const std::string *)((char *)this + 608), (char *)__p, &v42);
  if (v41 < 0)
    operator delete(__p[0]);
  v5 = v42;
  v6 = v43;
  if (v42 != v43)
  {
    v7 = (void **)((char *)this + 528);
    do
    {
      v8 = std::stof(v5, 0);
      v9 = v8;
      v10 = (float *)*((_QWORD *)this + 67);
      v11 = *((_QWORD *)this + 68);
      if ((unint64_t)v10 >= v11)
      {
        v13 = (float *)*v7;
        v14 = ((char *)v10 - (_BYTE *)*v7) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v16 = v11 - (_QWORD)v13;
        if (v16 >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 544, v17);
          v10 = (float *)*((_QWORD *)this + 67);
          v13 = (float *)*((_QWORD *)this + 66);
        }
        else
        {
          v18 = 0;
        }
        v19 = (float *)&v18[4 * v14];
        *v19 = v9;
        v12 = v19 + 1;
        while (v10 != v13)
        {
          v20 = *((_DWORD *)v10-- - 1);
          *((_DWORD *)v19-- - 1) = v20;
        }
        *((_QWORD *)this + 66) = v19;
        *((_QWORD *)this + 67) = v12;
        *((_QWORD *)this + 68) = &v18[4 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v10 = v8;
        v12 = v10 + 1;
      }
      *((_QWORD *)this + 67) = v12;
      ++v5;
    }
    while (v5 != v6);
  }
  __p[0] = &v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_31:
  std::string::basic_string[abi:ne180100]<0>(__p, ",");
  quasar::splitAndTrimNoEmpty((const std::string *)((char *)this + 584), (char *)__p, &v42);
  if (v41 < 0)
    operator delete(__p[0]);
  v21 = v42;
  v22 = v43;
  if (v42 != v43)
  {
    v23 = (void **)((char *)this + 560);
    do
    {
      v24 = std::stof(v21, 0);
      v25 = v24;
      v26 = (float *)*((_QWORD *)this + 71);
      v27 = *((_QWORD *)this + 72);
      if ((unint64_t)v26 >= v27)
      {
        v29 = (float *)*v23;
        v30 = ((char *)v26 - (_BYTE *)*v23) >> 2;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v32 = v27 - (_QWORD)v29;
        if (v32 >> 1 > v31)
          v31 = v32 >> 1;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
          v33 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        if (v33)
        {
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 576, v33);
          v26 = (float *)*((_QWORD *)this + 71);
          v29 = (float *)*((_QWORD *)this + 70);
        }
        else
        {
          v34 = 0;
        }
        v35 = (float *)&v34[4 * v30];
        *v35 = v25;
        v28 = v35 + 1;
        while (v26 != v29)
        {
          v36 = *((_DWORD *)v26-- - 1);
          *((_DWORD *)v35-- - 1) = v36;
        }
        *((_QWORD *)this + 70) = v35;
        *((_QWORD *)this + 71) = v28;
        *((_QWORD *)this + 72) = &v34[4 * v33];
        if (v29)
          operator delete(v29);
      }
      else
      {
        *v26 = v24;
        v28 = v26 + 1;
      }
      *((_QWORD *)this + 71) = v28;
      ++v21;
    }
    while (v21 != v22);
  }
  __p[0] = &v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v37 = (quasar::NotchDetector2 *)operator new();
  v38 = *((double *)this + 56);
  quasar::NotchDetector2::NotchDetector2(v37, (char *)this + 528, *((unsigned int *)this + 161), *((unsigned int *)this + 162), (char *)this + 560, 0, *((float *)this + 138), *((float *)this + 158), (float)*((int *)this + 159), v38);
  return std::unique_ptr<quasar::NotchDetector2>::reset[abi:ne180100]((quasar::NotchDetector2 **)this + 65, v37);
}

void sub_1ADDAB444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::WatermarkDetector2::runImpl(uint64_t a1, uint64_t a2, uint64_t *a3, quasar::SpeechRequestData **a4)
{
  _QWORD *v8;
  unsigned __int8 *InputOrigin;
  unsigned int v10;
  float v11;
  double v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *MultiBuffer;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  const float *v23;
  unint64_t v24;
  uint64_t **v25;
  uint64_t v26;
  unint64_t v27;
  float v28;
  _BOOL4 v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  std::string v37;
  float v38;
  void *__p;
  _BYTE *v40;
  quasar::RecogAudioBuffer *v41[2];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;

  v8 = (_QWORD *)(a1 + 480);
  InputOrigin = (unsigned __int8 *)quasar::SpeechRequestData::getInputOrigin(*a4);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v8, InputOrigin))
  {
    if (quasar::gLogLevel >= 4)
    {
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      *(_OWORD *)v41 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v41);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"WatermarkDetector2 not run on input origin ", 43);
      v14 = quasar::SpeechRequestData::getInputOrigin(*a4);
      v15 = *(char *)(v14 + 23);
      if (v15 >= 0)
        v16 = v14;
      else
        v16 = *(_QWORD *)v14;
      if (v15 >= 0)
        v17 = *(unsigned __int8 *)(v14 + 23);
      else
        v17 = *(_QWORD *)(v14 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v16, v17);
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  v10 = *(_DWORD *)(*((_QWORD *)*a4 + 3) + 24);
  v11 = (float)v10;
  if (v10 != 16000)
  {
    if (quasar::gLogLevel >= 4)
    {
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      *(_OWORD *)v41 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"WatermarkDetector2 not supported for sampling rate=", 51);
      std::ostream::operator<<();
      goto LABEL_19;
    }
LABEL_20:
    *(_DWORD *)(*a3 + 684) = 0;
    return 0;
  }
  v12 = (double)quasar::SpeechRequestData::getEndpointStartMs(*a4) / 1000.0;
  if (v12 <= 0.0)
  {
    if (quasar::gLogLevel >= 4)
    {
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      *(_OWORD *)v41 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"WatermarkDetector2: missing trigger phrase endTime.", 51);
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  if (v12 > 5.0)
  {
    if (quasar::gLogLevel >= 4)
    {
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      *(_OWORD *)v41 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"WatermarkDetector2: not enough audio cached.", 44);
LABEL_19:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v41);
      goto LABEL_20;
    }
    goto LABEL_20;
  }
  MultiBuffer = (uint64_t *)quasar::SpeechRequestData::getMultiBuffer(*a4);
  quasar::MultiAudioBuffer::getBuffer(*MultiBuffer, 0, v41);
  quasar::RecogAudioBuffer::getRawAudioCache(v41[0], &__p);
  v20 = (std::__shared_weak_count *)v41[1];
  if (v41[1])
  {
    v21 = (unint64_t *)((char *)v41[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (const float *)__p;
  v24 = (v40 - (_BYTE *)__p) >> 2;
  if (v24 >= (int)(v12 * v11))
  {
    quasar::Decoder::calculateNBest(a2, a3, *((_DWORD *)*a4 + 4));
    if (quasar::DecoderChainOutput::nonEmptyTopChoice((quasar::DecoderChainOutput *)*a3))
    {
      v25 = *(uint64_t ***)(*a3 + 352);
      if (v25[1] == *v25)
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      v26 = **v25;
      v27 = *(int *)(a1 + 652);
      if (0x6DB6DB6DB6DB6DB7 * (((*v25)[1] - v26) >> 5) >= v27)
      {
        v28 = (float)*(unsigned int *)(v26 + 224 * (int)v27 - 196) / 1000.0;
        v38 = 0.0;
        v29 = quasar::NotchDetector2::notchDetected(*(quasar::NotchDetector2 **)(a1 + 520), v23, v28, v24, &v38);
        if (quasar::gLogLevel >= 4)
        {
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          *(_OWORD *)v41 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v41);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"WatermarkDetector2: score=", 26);
          v30 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" detected=", 10);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v41);
        }
        if (v29)
          v31 = 2;
        else
          v31 = 1;
        v32 = *a3;
        *(_DWORD *)(v32 + 684) = v31;
        v33 = *(_QWORD *)(v32 + 424);
        std::string::basic_string[abi:ne180100]<0>(v41, "Watermark2Score");
        quasar::SpeechRequestResultData::addDumpAA(v33, (__int128 *)v41, 1, v38);
        if (SBYTE7(v42) < 0)
          operator delete(v41[0]);
        v34 = *(_QWORD *)(*a3 + 424);
        std::string::basic_string[abi:ne180100]<0>(v41, "Watermark2Detected");
        v35 = (char *)quasar::fingerprintDetectionResultString(*(_DWORD *)(*a3 + 684));
        std::string::basic_string[abi:ne180100]<0>(&v37, v35);
        quasar::SpeechRequestResultData::addDumpAA(v34, (__int128 *)v41, &v37);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
        if (SBYTE7(v42) < 0)
          operator delete(v41[0]);
        v36 = *(_QWORD *)(*a3 + 424);
        std::string::basic_string[abi:ne180100]<0>(v41, "Watermark2StartTimeSecs");
        quasar::SpeechRequestResultData::addDumpAA(v36, (__int128 *)v41, 1, v28);
        if (SBYTE7(v42) < 0)
          operator delete(v41[0]);
        goto LABEL_37;
      }
    }
    if (quasar::gLogLevel >= 4)
    {
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      *(_OWORD *)v41 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"WatermarkDetector2: Trigger phrase not detected", 47);
      goto LABEL_35;
    }
  }
  else if (quasar::gLogLevel >= 4)
  {
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    *(_OWORD *)v41 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"WatermarkDetector2: not enough audio cached.", 44);
LABEL_35:
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v41);
  }
  *(_DWORD *)(*a3 + 684) = 0;
LABEL_37:
  if (__p)
  {
    v40 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_1ADDABA80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::WatermarkDetector2::registerParams(quasar::WatermarkDetector2 *this, quasar::SystemConfig *a2)
{
  void *v4[2];
  char v5;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "watermark-detector2");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 146, 0, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "threshold");
  std::string::basic_string[abi:ne180100]<0>(v4, "Threshold value to detect a watermark");
  quasar::SystemConfig::Register<double>((uint64_t)a2, (const void **)__p, (uint64_t)this + 448, (uint64_t)v4, 0, 146, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "anti-notch-offset");
  std::string::basic_string[abi:ne180100]<0>(v4, "Frequency (in Hz) of anti notch offset");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 552, (uint64_t)v4, 0, 146, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "notch-width");
  std::string::basic_string[abi:ne180100]<0>(v4, "Frequency (in Hz) of width of notch");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 632, (uint64_t)v4, 0, 146, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "notch-freq");
  std::string::basic_string[abi:ne180100]<0>(v4, "comma separated list of notch frequencies");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 608, (uint64_t)v4, 0, 146, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "classifier");
  std::string::basic_string[abi:ne180100]<0>(v4, "comma separated list of classifier values");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 584, (uint64_t)v4, 0, 146, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "supported-input-origins-list");
  std::string::basic_string[abi:ne180100]<0>(v4, "The input origins that are supported (should be comma separated)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 456, (uint64_t)v4, 0, 146, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "trigger-num-tokens");
  std::string::basic_string[abi:ne180100]<0>(v4, "The number of tokens in the trigger phrase (two for hey siri)");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 652, (uint64_t)v4, 0, 146, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1ADDABE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::WatermarkDetector2::affectsRecognitionResults(quasar::WatermarkDetector2 *this)
{
  return 1;
}

uint64_t quasar::WatermarkDetector2::supportsEager(quasar::WatermarkDetector2 *this)
{
  return 1;
}

uint64_t quasar::WatermarkDetector2::decoderNeedsCachedRawAudio(quasar::WatermarkDetector2 *this)
{
  return 1;
}

void quasar::WatermarkDetector2::~WatermarkDetector2(quasar::WatermarkDetector2 *this)
{
  quasar::WatermarkDetector2::~WatermarkDetector2(this);
  JUMPOUT(0x1AF44D190);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E5D36D28;
  if (*((char *)this + 631) < 0)
    operator delete(*((void **)this + 76));
  if (*((char *)this + 607) < 0)
    operator delete(*((void **)this + 73));
  v2 = (void *)*((_QWORD *)this + 70);
  if (v2)
  {
    *((_QWORD *)this + 71) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 66);
  if (v3)
  {
    *((_QWORD *)this + 67) = v3;
    operator delete(v3);
  }
  std::unique_ptr<quasar::NotchDetector2>::reset[abi:ne180100]((quasar::NotchDetector2 **)this + 65, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 480);
  if (*((char *)this + 479) < 0)
    operator delete(*((void **)this + 57));
  quasar::Decoder::~Decoder((void **)this);
}

quasar::NotchDetector2 *std::unique_ptr<quasar::NotchDetector2>::reset[abi:ne180100](quasar::NotchDetector2 **a1, quasar::NotchDetector2 *a2)
{
  quasar::NotchDetector2 *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::NotchDetector2::~NotchDetector2(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

void quasar::NotchDetector2::~NotchDetector2(quasar::NotchDetector2 *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void **v8;

  v2 = (void *)*((_QWORD *)this + 25);
  if (v2)
  {
    *((_QWORD *)this + 26) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 22);
  if (v3)
  {
    *((_QWORD *)this + 23) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 18);
  if (v4)
  {
    *((_QWORD *)this + 19) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 15);
  if (v5)
  {
    *((_QWORD *)this + 16) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 12);
  if (v6)
  {
    *((_QWORD *)this + 13) = v6;
    operator delete(v6);
  }
  v8 = (void **)((char *)this + 72);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v8);
  std::unique_ptr<kaldi::SplitRadixComplexFft<float>>::reset[abi:ne180100]((uint64_t *)this + 7, 0);
  v7 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v7;
    operator delete(v7);
  }
}

void freeChart<ChartEntryDouble>(uint64_t a1, unsigned int a2)
{
  unsigned int v4;
  uint64_t v5;

  v4 = 0;
  while (1)
  {
    v5 = *(_QWORD *)(a1 + 8 * v4);
    if (v5)
      MEMORY[0x1AF44D160](v5, 0x1000C80D9A13B51);
    if (++v4 > a2)
      JUMPOUT(0x1AF44D160);
  }
}

void freeChart<ChartEntryUnsigned>(uint64_t a1, unsigned int a2)
{
  unsigned int v4;
  uint64_t v5;

  v4 = 0;
  while (1)
  {
    v5 = *(_QWORD *)(a1 + 8 * v4);
    if (v5)
      MEMORY[0x1AF44D160](v5, 0x1000C8000313F17);
    if (++v4 > a2)
      JUMPOUT(0x1AF44D160);
  }
}

void WordMesh::freeThread(WordMesh *this)
{
  void **v1;
  uint64_t *v2;
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v6;
  void **v7;
  unsigned int *v8;
  void **v9;
  unsigned int *v10;
  void **v11;
  unsigned int *v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  void **v18;

  v1 = (void **)alignWordsChartTLS();
  v2 = (uint64_t *)*v1;
  if (!*v1)
  {
    v2 = (uint64_t *)malloc_type_calloc(1uLL, 8uLL, 0x80040B8603338uLL);
    *v1 = v2;
  }
  v3 = (uint64_t **)alignAlignmentChartTLS();
  v4 = *v3;
  if (!*v3)
  {
    v4 = (uint64_t *)malloc_type_calloc(1uLL, 8uLL, 0x80040B8603338uLL);
    *v3 = v4;
  }
  v17 = (void **)v3;
  v5 = (uint64_t **)wordErrorChartTLS();
  v6 = *v5;
  if (!*v5)
  {
    v6 = (uint64_t *)malloc_type_calloc(1uLL, 8uLL, 0x80040B8603338uLL);
    *v5 = v6;
  }
  v18 = (void **)v5;
  v7 = (void **)alignWordsMaxRefLengthTLS();
  v8 = (unsigned int *)*v7;
  if (!*v7)
  {
    v8 = (unsigned int *)malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
    *v7 = v8;
  }
  v9 = (void **)alignAlignmentMaxRefLengthTLS();
  v10 = (unsigned int *)*v9;
  if (!*v9)
  {
    v10 = (unsigned int *)malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
    *v9 = v10;
  }
  v11 = (void **)wordErrorMaxRefLengthTLS();
  v12 = (unsigned int *)*v11;
  if (!*v11)
  {
    v12 = (unsigned int *)malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
    *v11 = v12;
  }
  if (*v2)
    freeChart<ChartEntryDouble>(*v2, *v8);
  if (*v4)
    freeChart<ChartEntryDouble>(*v4, *v10);
  if (*v6)
    freeChart<ChartEntryUnsigned>(*v6, *v12);
  v13 = (void **)compareAlignTLS();
  if (*v13)
  {
    free(*v13);
    *v13 = 0;
  }
  v14 = (void **)alignWordsMaxHypLengthTLS();
  if (*v14)
  {
    free(*v14);
    *v14 = 0;
  }
  if (*v7)
  {
    free(*v7);
    *v7 = 0;
  }
  if (*v1)
  {
    free(*v1);
    *v1 = 0;
  }
  v15 = (void **)alignAlignmentMaxHypLengthTLS();
  if (*v15)
  {
    free(*v15);
    *v15 = 0;
  }
  if (*v9)
  {
    free(*v9);
    *v9 = 0;
  }
  if (*v17)
  {
    free(*v17);
    *v17 = 0;
  }
  v16 = (void **)wordErrorMaxHypLengthTLS();
  if (*v16)
  {
    free(*v16);
    *v16 = 0;
  }
  if (*v11)
  {
    free(*v11);
    *v11 = 0;
  }
  if (*v18)
  {
    free(*v18);
    *v18 = 0;
  }
}

kaldi::FbankWithPitch *kaldi::FbankWithPitch::FbankWithPitch(kaldi::FbankWithPitch *this, const kaldi::FbankWithPitchOptions *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  float v18;
  int v19;
  uint64_t v20;
  int8x8_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v29;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v4 = *(_OWORD *)a2;
  *(_QWORD *)((char *)this + 29) = *(_QWORD *)((char *)a2 + 13);
  *((_OWORD *)this + 1) = v4;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    *((_QWORD *)this + 7) = *((_QWORD *)a2 + 5);
    *(_OWORD *)((char *)this + 40) = v5;
  }
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 6);
  v6 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)this + 72) = v6;
  v7 = *(_OWORD *)((char *)a2 + 88);
  v8 = *(_OWORD *)((char *)a2 + 104);
  v9 = *(_OWORD *)((char *)a2 + 120);
  *(_OWORD *)((char *)this + 152) = *(_OWORD *)((char *)a2 + 136);
  *(_OWORD *)((char *)this + 136) = v9;
  *(_OWORD *)((char *)this + 120) = v8;
  *(_OWORD *)((char *)this + 104) = v7;
  v10 = *(_OWORD *)((char *)a2 + 152);
  v11 = *(_OWORD *)((char *)a2 + 168);
  v12 = *(_OWORD *)((char *)a2 + 184);
  *(_OWORD *)((char *)this + 216) = *(_OWORD *)((char *)a2 + 200);
  *(_OWORD *)((char *)this + 200) = v12;
  *(_OWORD *)((char *)this + 184) = v11;
  *(_OWORD *)((char *)this + 168) = v10;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 32) = (char *)this + 264;
  kaldi::FeatureWindowFunction::FeatureWindowFunction((kaldi::FbankWithPitch *)((char *)this + 280), a2);
  *((_QWORD *)this + 38) = 0;
  if (*((_BYTE *)a2 + 215))
  {
    v13 = operator new(0x90uLL);
    v13[2] = 0;
    *v13 = &unk_1E5D41418;
    v13[1] = 0;
    v14 = (int)*((float *)a2 + 1);
    v13[3] = 850045863;
    *((_OWORD *)v13 + 2) = 0u;
    *((_OWORD *)v13 + 3) = 0u;
    *((_OWORD *)v13 + 4) = 0u;
    *((_OWORD *)v13 + 5) = 0u;
    *((_OWORD *)v13 + 6) = 0u;
    *((_DWORD *)v13 + 28) = v14;
    v13[16] = 0;
    v13[17] = 0;
    v13[15] = 0;
    *(_QWORD *)&v29 = v13 + 3;
    *((_QWORD *)&v29 + 1) = v13;
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this, &v29);
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
    if (*((_QWORD *)&v29 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  v18 = *((float *)a2 + 52);
  if (v18 > 0.0)
    *((float *)this + 62) = logf(v18);
  v19 = kaldi::FrameExtractionOptions::PaddedWindowSize(a2);
  if ((v19 & (v19 - 1)) == 0)
  {
    v20 = operator new();
    v22 = v20;
    if (v19 >= 0)
      v23 = v19;
    else
      v23 = v19 + 1;
    kaldi::SplitRadixComplexFft<float>::SplitRadixComplexFft(v20, v23 >> 1, v21);
    *(_DWORD *)(v22 + 48) = v19;
    *((_QWORD *)this + 38) = v22;
  }
  kaldi::FbankWithPitch::GetMelBanks(this, 1.0);
  v24 = operator new();
  kaldi::OnlinePitchFeature::OnlinePitchFeature(v24, (char *)a2 + 80);
  *((_QWORD *)this + 29) = v24;
  v25 = operator new();
  kaldi::OnlineProcessPitch::OnlineProcessPitch(v25, (char *)a2 + 156, *((_QWORD *)this + 29));
  *((_QWORD *)this + 30) = v25;
  v26 = operator new();
  kaldi::Matrix<float>::Matrix(v26);
  *((_QWORD *)this + 39) = v26;
  v27 = operator new();
  kaldi::Matrix<float>::Matrix(v27);
  *((_QWORD *)this + 40) = v27;
  return this;
}

void sub_1ADDAC6FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::FbankWithPitch::GetMelBanks(kaldi::FbankWithPitch *this, float a2)
{
  char **v4;
  char **v5;
  char **v6;
  uint64_t *v7;
  float v9;
  float *v10;

  v9 = a2;
  v4 = (char **)*((_QWORD *)this + 33);
  if (!v4)
    goto LABEL_8;
  v5 = (char **)((char *)this + 264);
  do
  {
    v6 = v4 + 1;
    if (*((float *)v4 + 8) >= a2)
    {
      v6 = v4;
      v5 = v4;
    }
    v4 = (char **)*v6;
  }
  while (*v6);
  if (v5 != (char **)((char *)this + 264) && *((float *)v5 + 8) <= a2)
    return (uint64_t *)v5[5];
LABEL_8:
  v7 = (uint64_t *)operator new();
  kaldi::MelBanks::MelBanks(v7, (char *)this + 72, (char *)this + 16, a2);
  v10 = &v9;
  std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>((uint64_t **)this + 32, &v9, (uint64_t)&std::piecewise_construct, (_DWORD **)&v10)[5] = v7;
  return v7;
}

void sub_1ADDAC898(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A0C409C5A7551);
  _Unwind_Resume(a1);
}

void kaldi::FbankWithPitch::~FbankWithPitch(kaldi::FbankWithPitch *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  kaldi::OnlineProcessPitch *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  v2 = (char *)*((_QWORD *)this + 32);
  v3 = (char *)this + 264;
  if (v2 != (char *)this + 264)
  {
    do
    {
      v4 = *((_QWORD *)v2 + 5);
      if (v4)
      {
        v16 = (void **)(v4 + 24);
        std::vector<std::pair<int,kaldi::Vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v16);
        kaldi::Vector<float>::Destroy(v4);
        MEMORY[0x1AF44D190](v4, 0x10A0C409C5A7551);
      }
      v5 = (char *)*((_QWORD *)v2 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (char *)*((_QWORD *)v2 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
  v8 = *((_QWORD *)this + 38);
  if (v8)
  {
    v9 = kaldi::SplitRadixComplexFft<float>::~SplitRadixComplexFft(v8);
    MEMORY[0x1AF44D190](v9, 0x1090C40943DB512);
  }
  v10 = *((_QWORD *)this + 29);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 64))(v10);
  v11 = (kaldi::OnlineProcessPitch *)*((_QWORD *)this + 30);
  if (v11)
  {
    kaldi::OnlineProcessPitch::~OnlineProcessPitch(v11);
    MEMORY[0x1AF44D190]();
  }
  v12 = *((_QWORD *)this + 39);
  if (v12)
  {
    v13 = kaldi::Matrix<float>::~Matrix(v12);
    MEMORY[0x1AF44D190](v13, 0x1080C40EB13E0A1);
  }
  v14 = *((_QWORD *)this + 40);
  if (v14)
  {
    v15 = kaldi::Matrix<float>::~Matrix(v14);
    MEMORY[0x1AF44D190](v15, 0x1080C40EB13E0A1);
  }
  kaldi::Vector<float>::Destroy((uint64_t)this + 280);
  std::__tree<int>::destroy((uint64_t)this + 256, *((_QWORD **)this + 33));
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

uint64_t kaldi::FbankWithPitch::Compute(kaldi::FbankWithPitch *a1, uint64_t a2, int32x2_t *a3, uint64_t a4, float a5, uint64_t a6, int a7)
{
  uint64_t *MelBanks;

  MelBanks = kaldi::FbankWithPitch::GetMelBanks(a1, a5);
  return kaldi::FbankWithPitch::ComputeInternal((uint64_t)a1, a2, (uint64_t)MelBanks, a3, a4, a7);
}

uint64_t kaldi::FbankWithPitch::ComputeInternal(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *a4, uint64_t a5, int a6)
{
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int32x2_t *v27;
  int32x2_t *v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int32x2_t v33;
  __int32 v34;
  float *v35;
  uint64_t v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  int32x2_t v43;
  int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  float v49;
  float v50;
  float *v51;
  int32x2_t v52;
  __int32 v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  float v59;
  float *v60;
  float *v61;
  float *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  float v68;
  uint64_t v69;
  uint64_t j;
  float *v71;
  int v72;
  float v73;
  uint64_t v74;
  int32x2_t v75;
  __int32 v76;
  float *v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  uint8x8_t v81;
  int32x2_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t i;
  int32x2_t v87;
  __int32 v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v93;
  _QWORD *v94;
  void *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t *v98;
  int v99;
  int v100;
  int v101;
  float *v103;
  uint64_t *v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  float v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  void *__p;
  float *v123;
  float *v124;
  void *v125;
  void *v126;
  uint64_t v127;
  const void *v128[3];
  float *v129;
  uint64_t v130;
  uint64_t v131;
  int32x2_t v132[2];
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v103 = (float *)(a1 + 16);
  v108 = kaldi::NumFrames(*(_DWORD *)(a2 + 8), a1 + 16);
  v10 = *(_DWORD *)(a1 + 72);
  v11 = *(unsigned __int8 *)(a1 + 220);
  v12 = *(unsigned __int8 *)(a1 + 212);
  v13 = *(unsigned __int8 *)(a1 + 214);
  v101 = *(unsigned __int8 *)(a1 + 215);
  v100 = *(unsigned __int8 *)(a1 + 216);
  v14 = *(_QWORD *)(a1 + 312);
  v106 = *(unsigned __int8 *)(a1 + 213);
  if (v14)
  {
    v110 = kaldi::MatrixBase<float>::NumRows(v14);
    if (kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a1 + 320)) != v110)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v134);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v134, (uint64_t)"#remaining_frames for fbank ", 28);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" and energy ", 12);
      kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a1 + 320));
      v16 = (_QWORD *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, " don't match!");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v134);
    }
  }
  else
  {
    v110 = 0;
  }
  kaldi::Matrix<float>::Matrix((uint64_t)v132);
  v17 = kaldi::OnlineProcessPitch::NumFramesReady(*(kaldi::OnlineProcessPitch **)(a1 + 240));
  if (a5)
  {
    v18 = (*(_DWORD *)(a2 + 8) - *(_DWORD *)(a5 + 8));
    v136 = 0;
    v134 = 0;
    v135 = 0;
    kaldi::Vector<float>::Resize((void **)&v134, v18, 0);
    v19 = *(int *)(a5 + 8);
    v116 = 0;
    v117 = 0;
    v115 = *(_QWORD *)a2 + 4 * v19;
    LODWORD(v116) = v135;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v134, (const void **)&v115);
    (*(void (**)(_QWORD, uint64_t *, float))(**(_QWORD **)(a1 + 232) + 32))(*(_QWORD *)(a1 + 232), &v134, *(float *)(a1 + 96));
    kaldi::Vector<float>::Destroy((uint64_t)&v134);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, float))(**(_QWORD **)(a1 + 232) + 32))(*(_QWORD *)(a1 + 232), a2, *(float *)(a1 + 96));
  }
  if (a6)
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 232) + 40))(*(_QWORD *)(a1 + 232));
  v99 = v13;
  v20 = v12;
  v21 = v10;
  v105 = (uint64_t *)a2;
  v22 = kaldi::OnlineProcessPitch::NumFramesReady(*(kaldi::OnlineProcessPitch **)(a1 + 240));
  v23 = (v22 - v17);
  if (v22 != v17)
  {
    kaldi::Matrix<float>::Resize(v132, v23, *(unsigned int *)(*(_QWORD *)(a1 + 240) + 56), 0, 0);
    if ((int)v23 >= 1)
    {
      v24 = 0;
      do
      {
        v135 = 0;
        v136 = 0;
        v134 = *(_QWORD *)v132 + 4 * v133 * v24;
        LODWORD(v135) = kaldi::MatrixBase<float>::NumCols((uint64_t)v132);
        kaldi::OnlineProcessPitch::GetFrame(*(_QWORD *)(a1 + 240), v17 + v24++, (float **)&v134);
      }
      while ((_DWORD)v23 != v24);
    }
  }
  if ((a6 & 1) != 0)
  {
    v25 = v23 - (v110 + v108);
    if (v25 < 0)
      v25 = v110 + v108 - v23;
    if (v25 >= 2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v134);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v134, (uint64_t)"mismatch between finished pitch frames and remaining frames+new wav frames: ", 76);
      v97 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)" v.s. ", 6);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v134);
    }
    v23 = (v110 + v108);
  }
  if ((_DWORD)v23)
    v26 = (v21 + v11 + v20 + v106 + v99 + v101 + v100);
  else
    v26 = 0;
  kaldi::Matrix<float>::Resize(a4, v23, v26, 0, 0);
  if (a5)
    kaldi::ExtractWaveformRemainder((uint64_t)v105, v103, (void **)a5);
  v129 = 0;
  v130 = 0;
  v131 = 0;
  memset(v128, 0, sizeof(v128));
  v125 = 0;
  v126 = 0;
  v127 = 0;
  v27 = (int32x2_t *)operator new();
  kaldi::Matrix<float>::Matrix((uint64_t)v27);
  v28 = (int32x2_t *)operator new();
  kaldi::Matrix<float>::Matrix((uint64_t)v28);
  v29 = v110 + v108;
  v109 = v29;
  v30 = (v29 - v23);
  if ((int)v30 >= 1)
  {
    kaldi::Matrix<float>::Resize(v27, (v29 - v23), *(unsigned int *)(a1 + 72), 0, 0);
    kaldi::Matrix<float>::Resize(v28, v30, 1, 0, 0);
  }
  v98 = (uint64_t *)v28;
  __p = 0;
  v123 = 0;
  v124 = 0;
  if (v109 >= 1)
  {
    v31 = 0;
    v32 = 0;
    v107 = v23;
    do
    {
      if (v31 >= v110)
      {
        v118 = 1.0;
        if ((*(_BYTE *)(a1 + 220) || *(_BYTE *)(a1 + 231)) && *(_BYTE *)(a1 + 228))
          v51 = &v118;
        else
          v51 = 0;
        kaldi::ExtractWindow(v105, v31 - v110, (uint64_t)v103, (float **)(a1 + 280), (void **)&v129, v51);
        if (*(_BYTE *)(a1 + 220) || *(_BYTE *)(a1 + 231))
        {
          if (!*(_BYTE *)(a1 + 228))
          {
            v59 = kaldi::VecVec<float>((uint64_t)&v129, (const float **)&v129);
            if (v59 < 1.1755e-38)
              v59 = 1.1755e-38;
            v118 = v59;
          }
          if (*(_BYTE *)(a1 + 231))
          {
            v60 = v123;
            if (v123 >= v124)
            {
              v62 = (float *)__p;
              v63 = ((char *)v123 - (_BYTE *)__p) >> 2;
              v64 = v63 + 1;
              if ((unint64_t)(v63 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v65 = (char *)v124 - (_BYTE *)__p;
              if (((char *)v124 - (_BYTE *)__p) >> 1 > v64)
                v64 = v65 >> 1;
              if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
                v66 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v66 = v64;
              if (v66)
              {
                v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v124, v66);
                v62 = (float *)__p;
                v60 = v123;
              }
              else
              {
                v67 = 0;
              }
              v71 = (float *)&v67[4 * v63];
              *v71 = v118;
              v61 = v71 + 1;
              while (v60 != v62)
              {
                v72 = *((_DWORD *)v60-- - 1);
                *((_DWORD *)v71-- - 1) = v72;
              }
              __p = v71;
              v123 = v61;
              v124 = (float *)&v67[4 * v66];
              if (v62)
                operator delete(v62);
            }
            else
            {
              *v123 = v118;
              v61 = v60 + 1;
            }
            v123 = v61;
          }
        }
        v73 = logf(v118);
        if ((LODWORD(v73) & 0x7FFFFFFFu) >= 0x7F800000)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v115);
          kaldi::VectorBase<float>::Write((uint64_t)&v129, &v115, 0);
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v134);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v134, (uint64_t)"Non-finite energy found for frame ", 34);
          v93 = (_QWORD *)std::ostream::operator<<();
          v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)". Waveform is: ", 15);
          std::stringbuf::str();
          if (v121 >= 0)
            v95 = &v119;
          else
            v95 = v119;
          if (v121 >= 0)
            v96 = HIBYTE(v121);
          else
            v96 = v120;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)v95, v96);
          if (SHIBYTE(v121) < 0)
            operator delete(v119);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v134);
        }
        v74 = *(_QWORD *)(a1 + 304);
        if (v74)
          kaldi::SplitRadixRealFft<float>::Compute(v74, v129, 1, (float **)&v125);
        else
          kaldi::RealFft<float>((uint64_t)&v129, 1);
        kaldi::ComputePowerSpectrum((uint64_t)&v129);
        v136 = 0;
        v134 = (uint64_t)v129;
        v135 = ((int)v130 / 2 + 1);
        kaldi::MelBanks::Compute(a3, &v134, (uint64_t)v128);
        if (*(_BYTE *)(a1 + 230))
        {
          kaldi::VectorBase<float>::ApplyFloor((uint64_t)v128, 1.1755e-38);
          kaldi::VectorBase<float>::ApplyLog((uint64_t)v128);
        }
        if (v31 < (int)v23)
        {
          v75 = *a4;
          v76 = a4[2].i32[0];
          kaldi::MatrixBase<float>::NumCols((uint64_t)a4);
          v77 = (float *)(*(_QWORD *)&v75 + 4 * v76 * v31);
          v78 = *(unsigned __int8 *)(a1 + 220);
          v79 = *(_DWORD *)(a1 + 72);
          v117 = 0;
          v80 = v79 + v78;
          v115 = (uint64_t)&v77[v78];
          v116 = v79;
          v81.i32[0] = *(_DWORD *)(a1 + 212);
          LODWORD(v78) = (vaddv_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v81)) + *(_BYTE *)(a1 + 216));
          v121 = 0;
          v119 = &v77[v80];
          v120 = v78;
          kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v115, v128);
          v82 = v132[0];
          v83 = v133;
          v84 = kaldi::MatrixBase<float>::NumCols((uint64_t)v132);
          v113 = 0;
          v114 = 0;
          v111 = *(_QWORD *)&v82 + 4 * v83 * v31;
          v112 = v84;
          kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v119, (const void **)&v111);
          LODWORD(v23) = v107;
          if (*(_BYTE *)(a1 + 220))
          {
            if (*(float *)(a1 + 224) > 0.0 && v73 < *(float *)(a1 + 248))
              v73 = *(float *)(a1 + 248);
            *v77 = v73;
            if (*(_BYTE *)(a1 + 229))
            {
              v85 = *(unsigned int *)(a1 + 72);
              if ((int)v85 >= 1)
              {
                for (i = 0; i != v85; ++i)
                  v77[i] = v77[i + 1];
              }
              v77[(int)v85] = v73;
            }
          }
          goto LABEL_92;
        }
        v87 = *v27;
        v88 = v27[2].i32[0];
        v89 = kaldi::MatrixBase<float>::NumCols((uint64_t)v27);
        v117 = 0;
        v115 = *(_QWORD *)&v87 + 4 * v88 * v32;
        v116 = v89;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v115, v128);
      }
      else
      {
        if (v31 < (int)v23)
        {
          v33 = *a4;
          v34 = a4[2].i32[0];
          kaldi::MatrixBase<float>::NumCols((uint64_t)a4);
          v35 = (float *)(*(_QWORD *)&v33 + 4 * v34 * v31);
          v36 = *(unsigned __int8 *)(a1 + 220);
          v37 = *(_DWORD *)(a1 + 72);
          v136 = 0;
          v38 = v37 + v36;
          v134 = (uint64_t)&v35[v36];
          v135 = v37;
          LODWORD(v36) = *(unsigned __int8 *)(a1 + 213)
                       + *(unsigned __int8 *)(a1 + 212)
                       + *(unsigned __int8 *)(a1 + 214)
                       + *(unsigned __int8 *)(a1 + 215)
                       + *(unsigned __int8 *)(a1 + 216);
          v117 = 0;
          v115 = (uint64_t)&v35[v38];
          v116 = v36;
          v39 = *(_QWORD *)(a1 + 312);
          v40 = *(_QWORD *)v39;
          v41 = *(_DWORD *)(v39 + 16);
          v42 = kaldi::MatrixBase<float>::NumCols(v39);
          v121 = 0;
          v119 = (void *)(v40 + 4 * v41 * v31);
          v120 = v42;
          kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v134, (const void **)&v119);
          v43 = v132[0];
          v44 = v133;
          v45 = kaldi::MatrixBase<float>::NumCols((uint64_t)v132);
          v121 = 0;
          v119 = (void *)(*(_QWORD *)&v43 + 4 * v44 * v31);
          v120 = v45;
          kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v115, (const void **)&v119);
          LODWORD(v23) = v107;
          if (*(_BYTE *)(a1 + 220))
          {
            v46 = *(_QWORD *)(a1 + 320);
            v47 = *(_QWORD *)v46;
            v48 = *(_DWORD *)(v46 + 16);
            kaldi::MatrixBase<float>::NumCols(v46);
            v49 = *(float *)(v47 + 4 * v48 * v31);
            if (v49 < 1.1755e-38)
              v49 = 1.1755e-38;
            v50 = logf(v49);
            if (*(float *)(a1 + 224) <= 0.0)
            {
              LODWORD(v23) = v107;
            }
            else
            {
              LODWORD(v23) = v107;
              if (v50 < *(float *)(a1 + 248))
                v50 = *(float *)(a1 + 248);
            }
            *v35 = v50;
          }
          if (*(_BYTE *)(a1 + 229) && *(_BYTE *)(a1 + 220))
          {
            v68 = *v35;
            v69 = *(unsigned int *)(a1 + 72);
            if ((int)v69 >= 1)
            {
              for (j = 0; j != v69; ++j)
                v35[j] = v35[j + 1];
            }
            v35[(int)v69] = v68;
          }
          goto LABEL_92;
        }
        v52 = *v27;
        v53 = v27[2].i32[0];
        v54 = kaldi::MatrixBase<float>::NumCols((uint64_t)v27);
        v136 = 0;
        v134 = *(_QWORD *)&v52 + 4 * v53 * v32;
        v135 = v54;
        v55 = *(_QWORD *)(a1 + 312);
        v56 = *(_QWORD *)v55;
        v57 = *(_DWORD *)(v55 + 16);
        v58 = kaldi::MatrixBase<float>::NumCols(v55);
        v117 = 0;
        v115 = v56 + 4 * v57 * v31;
        v116 = v58;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v134, (const void **)&v115);
      }
      ++v32;
LABEL_92:
      ++v31;
    }
    while (v31 != v109);
  }
  if (*(_BYTE *)(a1 + 231))
    kaldi::SnrTracker::add_frame_energy(*(_QWORD *)a1, (char **)&__p);
  kaldi::Matrix<float>::Swap(*(uint64_t **)(a1 + 312), (uint64_t *)v27);
  kaldi::Matrix<float>::Swap(*(uint64_t **)(a1 + 320), v98);
  v90 = kaldi::Matrix<float>::~Matrix((uint64_t)v27);
  MEMORY[0x1AF44D190](v90, 0x1080C40EB13E0A1);
  v91 = kaldi::Matrix<float>::~Matrix((uint64_t)v98);
  MEMORY[0x1AF44D190](v91, 0x1080C40EB13E0A1);
  if (__p)
  {
    v123 = (float *)__p;
    operator delete(__p);
  }
  if (v125)
  {
    v126 = v125;
    operator delete(v125);
  }
  kaldi::Vector<float>::Destroy((uint64_t)v128);
  kaldi::Vector<float>::Destroy((uint64_t)&v129);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v132);
}

void sub_1ADDAD5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,uint64_t a54,void *a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63,...)
{
  va_list va;

  va_start(va, a63);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  if (__p)
  {
    a53 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a55)
  {
    a56 = a55;
    operator delete(a55);
  }
  kaldi::Vector<float>::Destroy((uint64_t)&a58);
  kaldi::Vector<float>::Destroy((uint64_t)&a61);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1ADDAD600()
{
  JUMPOUT(0x1ADDAD640);
}

void std::__shared_ptr_emplace<kaldi::SnrTracker>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41418;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::SnrTracker>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41418;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<kaldi::SnrTracker>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<kaldi::SnrTracker>::destroy[abi:ne180100]((int)&v1, (std::mutex *)(a1 + 24));
}

void std::allocator<kaldi::SnrTracker>::destroy[abi:ne180100](int a1, std::mutex *this)
{
  void *v3;
  void *sig;

  v3 = *(void **)&this[1].__m_.__opaque[24];
  if (v3)
    operator delete(v3);
  sig = (void *)this[1].__m_.__sig;
  if (sig)
  {
    *(_QWORD *)this[1].__m_.__opaque = sig;
    operator delete(sig);
  }
  std::mutex::~mutex(this);
}

uint64_t quasar::lm::arpa2fst::inhouse::ConvertToFST::ConvertToFST(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  int v15;
  float v16;
  quasar::lm *v17;
  uint64_t v18;
  _QWORD *Featurizer;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  void *__p[2];
  char v31;
  void *v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  std::__shared_weak_count *v36;

  v8 = a5[1];
  v35 = *a5;
  v36 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  quasar::lm::arpa2fst::ConvertToFST::ConvertToFST((_QWORD *)a1, a2, &v35);
  v11 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_QWORD *)a1 = &unk_1E5D3A888;
  *(_BYTE *)(a1 + 33) = a4;
  std::string::basic_string[abi:ne180100]<0>(&v32, "");
  v14 = v34;
  if ((v34 & 0x80u) != 0)
    v14 = v33;
  if (v14)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    v15 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a2 + 96))(a2, __p);
    if (v31 < 0)
      operator delete(__p[0]);
    if ((v34 & 0x80) != 0)
      goto LABEL_15;
  }
  else
  {
    v15 = -1;
    if ((v34 & 0x80) != 0)
LABEL_15:
      operator delete(v32);
  }
  *(_DWORD *)(a1 + 36) = v15;
  v16 = log(0.0);
  *(float *)(a1 + 40) = v16;
  *(float *)(a1 + 44) = v16;
  v17 = (quasar::lm *)std::string::basic_string[abi:ne180100]<0>(&v32, "");
  if ((char)v34 < 0)
  {
    v18 = v33;
    operator delete(v32);
    if (!v18)
      goto LABEL_33;
  }
  else if (!v34)
  {
    goto LABEL_33;
  }
  if (*(_DWORD *)(a1 + 36) == -1)
  {
    quasar::lm::LogMessage::LogMessage(__p, 5, "ConvertToFST", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 256);
    Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)__p);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"Unable to resolve silence token ", 32);
    std::string::basic_string[abi:ne180100]<0>(&v32, "");
    if ((v34 & 0x80u) == 0)
      v21 = &v32;
    else
      v21 = v32;
    if ((v34 & 0x80u) == 0)
      v22 = v34;
    else
      v22 = v33;
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)".", 1);
    if ((char)v34 < 0)
      operator delete(v32);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)__p);
  }
  else
  {
    quasar::lm::nullstream(v17);
  }
LABEL_33:
  quasar::lm::LogMessage::LogMessage(__p, 2, "ConvertToFST", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 260);
  v24 = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)__p);
  v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"SilenceOptions: {", 17);
  std::string::basic_string[abi:ne180100]<0>(&v32, "");
  if ((v34 & 0x80u) == 0)
    v26 = &v32;
  else
    v26 = v32;
  if ((v34 & 0x80u) == 0)
    v27 = v34;
  else
    v27 = v33;
  v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"}", 1);
  if ((char)v34 < 0)
    operator delete(v32);
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)__p);
  return a1;
}

void sub_1ADDAD9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  _QWORD *v21;

  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a9);
  *v21 = &unk_1E5D3A860;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v21 + 2));
  _Unwind_Resume(a1);
}

uint64_t quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::ConvertToFST(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, char a6)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14[2];

  v8 = (std::__shared_weak_count *)a5[1];
  v14[0] = *a5;
  v14[1] = (uint64_t)v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  quasar::lm::arpa2fst::inhouse::ConvertToFST::ConvertToFST(a1, a2, a3, a4, v14);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)a1 = &off_1E5D3A8D8;
  *(_BYTE *)(a1 + 48) = a6;
  return a1;
}

void sub_1ADDADB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(uint64_t a1, quasar::lm **this)
{
  int v4;
  quasar::lm *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  _DWORD **Trie;
  _QWORD *v10;
  quasar::rescoring::AdapterModel *v11;
  _QWORD *Featurizer;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t (***v22)();
  uint64_t v23;
  uint64_t (***v24)();
  uint64_t v25;
  uint64_t (***v26)();
  uint64_t v27;
  uint64_t (***v28)();
  uint64_t v29;
  uint64_t (***v30)();
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned int *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  unint64_t *p_shared_owners;
  unint64_t v52;
  void *__p;
  void *v55;
  uint64_t v56;
  _OWORD v57[2];
  int v58;
  _QWORD *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unsigned int v62;
  _BYTE v63[24];
  _BYTE *v64;
  _QWORD v65[3];
  _QWORD *v66;
  _QWORD v67[3];
  _QWORD *v68;
  _QWORD v69[3];
  _QWORD *v70;
  _QWORD v71[3];
  _QWORD *v72;
  _QWORD v73[3];
  _QWORD *v74;
  _DWORD v75[16];
  _BYTE v76[24];
  _BYTE *v77;
  uint64_t (**v78)();
  void **p_p;
  void **v80;
  uint64_t (***v81)();
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v4 = Ngram::getorder((Ngram *)this);
  v5 = this[3];
  v6 = (*(uint64_t (**)(quasar::lm *))(*(_QWORD *)v5 + 112))(v5);
  v7 = (*(uint64_t (**)(quasar::lm *))(*(_QWORD *)v5 + 128))(v5);
  v60 = 0;
  v61 = 0;
  if (*(_QWORD *)(a1 + 16))
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v60, (uint64_t *)(a1 + 16));
  }
  else
  {
    v8 = quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(v5, *(const Vocab **)(a1 + 8), 0);
    std::shared_ptr<std::unordered_map<unsigned int,int>>::reset[abi:ne180100]<std::unordered_map<unsigned int,int>,void>(&v60, v8);
  }
  Trie = (_DWORD **)Ngram::getTrie((Ngram *)this);
  v10 = (_QWORD *)operator new();
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(v10);
  v59 = v10;
  memset(v57, 0, sizeof(v57));
  v58 = 1065353216;
  if ((*(_DWORD *)(a1 + 40) & 0x7FFFFFFFu) >= 0x7F800000 && (*(_DWORD *)(a1 + 44) & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    LODWORD(v13) = -1;
  }
  else
  {
    v11 = (quasar::rescoring::AdapterModel *)quasar::lm::LogMessage::LogMessage(v75, 2, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 320);
    Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"Creating silence state.", 23);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v75);
    v13 = (*(uint64_t (**)(_QWORD *))(*v59 + 200))(v59);
    if ((*(_DWORD *)(a1 + 44) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    {
      if ((*(_DWORD *)(a1 + 40) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        (*(void (**)(_QWORD *, uint64_t, float))(*v59 + 184))(v59, v13, 0.0);
    }
    else
    {
      v14 = expf(*(float *)(a1 + 44));
      v15 = log(1.0 - v14);
      (*(void (**)(_QWORD *, uint64_t, float))(*v59 + 184))(v59, v13, -v15);
      v16 = -*(float *)(a1 + 44);
      v75[0] = *(_DWORD *)(a1 + 36);
      v75[1] = v75[0];
      *(float *)&v75[2] = v16;
      v75[3] = v13;
      (*(void (**)(_QWORD *, uint64_t, _DWORD *))(*v59 + 208))(v59, v13, v75);
    }
  }
  v17 = *(float *)(a1 + 40);
  v18 = *(float *)(a1 + 44);
  v19 = *(_DWORD *)(a1 + 36);
  v73[0] = &off_1E5D3F820;
  v73[1] = v57;
  v73[2] = &v59;
  v74 = v73;
  quasar::lm::arpa2fst::inhouse::StateInstantiator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::StateInstantiator((uint64_t)v75, v4, v4 - 1, (uint64_t)Trie, (uint64_t)v5, v6, v7, v60, v17, v18, v19, v13, (uint64_t)v73);
  v20 = v74;
  if (v74 == v73)
  {
    v21 = 4;
    v20 = v73;
  }
  else
  {
    if (!v74)
      goto LABEL_16;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_16:
  __p = 0;
  v55 = 0;
  v56 = 0;
  v72 = 0;
  v70 = 0;
  v68 = 0;
  v65[0] = &off_1E5D3F878;
  v65[1] = &v59;
  v66 = v65;
  if (*(_BYTE *)(a1 + 33))
  {
    v78 = &off_1E5D3F8D0;
    p_p = &__p;
    v81 = &v78;
    std::__function::__value_func<void ()(int)>::swap[abi:ne180100](&v78, v69);
    v22 = v81;
    if (v81 == &v78)
    {
      v23 = 4;
      v22 = &v78;
    }
    else
    {
      if (!v81)
        goto LABEL_25;
      v23 = 5;
    }
    (*v22)[v23]();
LABEL_25:
    v78 = &off_1E5D3F928;
    p_p = &__p;
    v81 = &v78;
    std::__function::__value_func<void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::swap[abi:ne180100](&v78, v71);
    v26 = v81;
    if (v81 == &v78)
    {
      v27 = 4;
      v26 = &v78;
    }
    else
    {
      if (!v81)
      {
LABEL_30:
        v78 = &off_1E5D3F980;
        p_p = (void **)&v59;
        v80 = &__p;
        goto LABEL_39;
      }
      v27 = 5;
    }
    (*v26)[v27]();
    goto LABEL_30;
  }
  v78 = &off_1E5D3F9D8;
  p_p = &__p;
  v81 = &v78;
  std::__function::__value_func<void ()(int)>::swap[abi:ne180100](&v78, v69);
  v24 = v81;
  if (v81 == &v78)
  {
    v25 = 4;
    v24 = &v78;
  }
  else
  {
    if (!v81)
      goto LABEL_33;
    v25 = 5;
  }
  (*v24)[v25]();
LABEL_33:
  v78 = &off_1E5D3FA30;
  p_p = (void **)&v59;
  v81 = &v78;
  std::__function::__value_func<void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::swap[abi:ne180100](&v78, v71);
  v28 = v81;
  if (v81 == &v78)
  {
    v29 = 4;
    v28 = &v78;
    goto LABEL_37;
  }
  if (v81)
  {
    v29 = 5;
LABEL_37:
    (*v28)[v29]();
  }
  v78 = &off_1E5D3FA88;
  p_p = &__p;
LABEL_39:
  v81 = &v78;
  std::__function::__value_func<void ()(int)>::swap[abi:ne180100](&v78, v67);
  v30 = v81;
  if (v81 == &v78)
  {
    v31 = 4;
    v30 = &v78;
  }
  else
  {
    if (!v81)
      goto LABEL_44;
    v31 = 5;
  }
  (*v30)[v31]();
LABEL_44:
  v64 = 0;
  v32 = operator new(0x30uLL);
  *v32 = &off_1E5D3FAE0;
  v32[1] = v75;
  v32[2] = v69;
  v32[3] = v71;
  v32[4] = v65;
  v32[5] = v67;
  v64 = v32;
  quasar::lm::srilm_ext::IterateTrie((uint64_t)Trie, v4, (uint64_t)v63);
  v33 = v64;
  if (v64 == v63)
  {
    v34 = 4;
    v33 = v63;
  }
  else
  {
    if (!v64)
      goto LABEL_49;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_49:
  v78 = (uint64_t (**)())(quasar::lm::srilm_ext::GetUnigramContextTrie(Trie, v6) + 8);
  v35 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(v57, &v78);
  v36 = (unsigned int *)(v35 + 3);
  if (!v35)
    v36 = (unsigned int *)&fst::kNoStateId;
  v37 = *v36;
  if ((_DWORD)v37 == -1)
  {
    v62 = (*(uint64_t (**)(_QWORD *))(*v59 + 200))(v59);
    quasar::lm::InsertOrDie<std::unordered_map<BOnode const*,int>>((uint64_t)v57, &v78, &v62);
    v37 = v62;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v59 + 176))(v59, v37);
  if (*(_BYTE *)(a1 + 48))
  {
    (*(void (**)(_QWORD *, _QWORD))(*v59 + 280))(v59, *(_QWORD *)(a1 + 8));
    (*(void (**)(_QWORD *, _QWORD))(*v59 + 288))(v59, *(_QWORD *)(a1 + 8));
  }
  v38 = v59;
  v59 = 0;
  v39 = v66;
  if (v66 == v65)
  {
    v40 = 4;
    v39 = v65;
  }
  else
  {
    if (!v66)
      goto LABEL_60;
    v40 = 5;
  }
  (*(void (**)(void))(*v39 + 8 * v40))();
LABEL_60:
  v41 = v68;
  if (v68 == v67)
  {
    v42 = 4;
    v41 = v67;
  }
  else
  {
    if (!v68)
      goto LABEL_65;
    v42 = 5;
  }
  (*(void (**)(void))(*v41 + 8 * v42))();
LABEL_65:
  v43 = v70;
  if (v70 == v69)
  {
    v44 = 4;
    v43 = v69;
  }
  else
  {
    if (!v70)
      goto LABEL_70;
    v44 = 5;
  }
  (*(void (**)(void))(*v43 + 8 * v44))();
LABEL_70:
  v45 = v72;
  if (v72 == v71)
  {
    v46 = 4;
    v45 = v71;
  }
  else
  {
    if (!v72)
      goto LABEL_75;
    v46 = 5;
  }
  (*(void (**)(void))(*v45 + 8 * v46))();
LABEL_75:
  if (__p)
  {
    v55 = __p;
    operator delete(__p);
  }
  v47 = v77;
  if (v77 == v76)
  {
    v48 = 4;
    v47 = v76;
  }
  else
  {
    if (!v77)
      goto LABEL_82;
    v48 = 5;
  }
  (*(void (**)(void))(*v47 + 8 * v48))();
LABEL_82:
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v57);
  v49 = v59;
  v59 = 0;
  if (v49)
    (*(void (**)(_QWORD *))(*v49 + 8))(v49);
  v50 = v61;
  if (v61)
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      v52 = __ldaxr(p_shared_owners);
    while (__stlxr(v52 - 1, p_shared_owners));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  return v38;
}

void sub_1ADDAE264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  uint64_t v44;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a15);
  v44 = a20;
  a20 = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

_QWORD *quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::ConvertToFST(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14[2];

  v8 = (std::__shared_weak_count *)a6[1];
  v14[0] = *a6;
  v14[1] = (uint64_t)v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  quasar::lm::arpa2fst::inhouse::ConvertToFST::ConvertToFST((uint64_t)a1, a3, a3, a5, v14);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *a1 = &off_1E5D3A8B0;
  a1[6] = a2;
  return a1;
}

void sub_1ADDAE500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(uint64_t a1, quasar::lm **this)
{
  int v4;
  quasar::lm *v5;
  unsigned int v6;
  int v7;
  _BOOL4 v8;
  _BOOL4 v9;
  uint64_t v10;
  _DWORD **Trie;
  _BYTE *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int *v17;
  int v18;
  quasar::rescoring::AdapterModel *v19;
  _QWORD *Featurizer;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  quasar::rescoring::AdapterModel *v24;
  _QWORD *v25;
  int v26;
  float v27;
  float v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;
  _BYTE *v33;
  quasar::lm *v34;
  quasar::lm *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  float v39;
  float *v40;
  float v41;
  float v42;
  quasar::lm *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  _BYTE v53[20];
  float v54;
  void *__p;
  void *v56;
  char *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  __int128 *v65;
  __int128 v66;
  __int128 v67;
  int v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  _BYTE v71[24];
  quasar::lm *v72;
  _DWORD v73[6];
  _DWORD *v74;
  _QWORD v75[3];
  _QWORD *v76;
  _QWORD v77[8];
  _BYTE v78[24];
  _BYTE *v79;
  _BYTE v80[24];
  _BYTE *v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v4 = Ngram::getorder((Ngram *)this);
  v5 = this[3];
  v6 = (*(uint64_t (**)(quasar::lm *))(*(_QWORD *)v5 + 112))(v5);
  v7 = (*(uint64_t (**)(quasar::lm *))(*(_QWORD *)v5 + 128))(v5);
  v8 = (*(_DWORD *)(a1 + 40) & 0x7FFFFFFFu) < 0x7F800000;
  v9 = (*(_DWORD *)(a1 + 44) & 0x7FFFFFFFu) < 0x7F800000;
  v69 = 0;
  v70 = 0;
  if (*(_QWORD *)(a1 + 16))
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v69, (uint64_t *)(a1 + 16));
  }
  else
  {
    v10 = quasar::lm::ComputeSRILMVocabToOpenFSTSymbolTableRemapping(v5, *(const Vocab **)(a1 + 8), 0);
    std::shared_ptr<std::unordered_map<unsigned int,int>>::reset[abi:ne180100]<std::unordered_map<unsigned int,int>,void>(&v69, v10);
  }
  Trie = (_DWORD **)Ngram::getTrie((Ngram *)this);
  v66 = 0u;
  v67 = 0u;
  v68 = 1065353216;
  v65 = &v66;
  v64 = v7;
  v63 = 0;
  v81 = 0;
  v12 = operator new(0x28uLL);
  *(_QWORD *)v12 = &off_1E5D3F718;
  v12[8] = v9;
  *((_QWORD *)v12 + 2) = &v63;
  *((_QWORD *)v12 + 3) = &v65;
  *((_QWORD *)v12 + 4) = &v64;
  v81 = v12;
  quasar::lm::srilm_ext::IterateTrie((uint64_t)Trie, v4, (uint64_t)v80);
  v13 = v81;
  if (v81 == v80)
  {
    v14 = 4;
    v13 = v80;
  }
  else
  {
    if (!v81)
      goto LABEL_9;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_9:
  v15 = *((_QWORD *)&v67 + 1);
  if (v8)
    ++v63;
  if (v9)
    ++v63;
  v77[0] = quasar::lm::srilm_ext::GetUnigramContextTrie(Trie, v6) + 8;
  v16 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(v65, v77);
  v17 = (int *)(v16 + 3);
  if (!v16)
    v17 = (int *)&fst::kNoStateId;
  v18 = *v17;
  if (*v17 == -1)
  {
    v73[0] = *((_QWORD *)v65 + 3);
    quasar::lm::InsertOrDie<std::unordered_map<BOnode const*,int>>((uint64_t)v65, v77, v73);
    v18 = v73[0];
  }
  v19 = (quasar::rescoring::AdapterModel *)quasar::lm::LogMessage::LogMessage(v77, 2, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 515);
  Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer(v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"FST will have ", 14);
  v21 = v9 | v8;
  v22 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" states and ", 12);
  v23 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" arcs.", 6);
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v77);
  quasar::lm::fst_builder::FstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::create(*(_QWORD *)(a1 + 48), v15 + v21, v63, v18, &v62);
  if ((_DWORD)v21)
  {
    v24 = (quasar::rescoring::AdapterModel *)quasar::lm::LogMessage::LogMessage(v77, 2, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 527);
    v25 = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer(v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Creating silence state.", 23);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v77);
    v26 = v15 + v21 - 1;
  }
  else
  {
    v26 = -1;
  }
  v27 = *(float *)(a1 + 40);
  v28 = *(float *)(a1 + 44);
  v29 = *(_DWORD *)(a1 + 36);
  v75[0] = &off_1E5D3F6C0;
  v75[1] = v65;
  v76 = v75;
  quasar::lm::arpa2fst::inhouse::StateInstantiator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::StateInstantiator((uint64_t)v77, v4, v4 - 1, (uint64_t)Trie, (uint64_t)v5, v6, v7, v69, v27, v28, v29, v26, (uint64_t)v75);
  v30 = v76;
  if (v76 == v75)
  {
    v31 = 4;
    v30 = v75;
  }
  else
  {
    if (!v76)
      goto LABEL_25;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_25:
  v61 = 2139095040;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v32 = *(_BYTE *)(a1 + 33);
  v33 = operator new(0x28uLL);
  *(_QWORD *)v33 = &off_1E5D3F770;
  v33[8] = v32;
  *((_QWORD *)v33 + 2) = &v62;
  *((_QWORD *)v33 + 3) = &v61;
  *((_QWORD *)v33 + 4) = &v58;
  v74 = v33;
  v72 = 0;
  v34 = (quasar::lm *)operator new(0x30uLL);
  *(_QWORD *)v34 = &off_1E5D3F7C8;
  *((_QWORD *)v34 + 1) = v77;
  *((_QWORD *)v34 + 2) = &v58;
  *((_QWORD *)v34 + 3) = &v61;
  *((_QWORD *)v34 + 4) = &v62;
  *((_QWORD *)v34 + 5) = v73;
  v72 = v34;
  quasar::lm::srilm_ext::IterateTrie((uint64_t)Trie, v4, (uint64_t)v71);
  v35 = v72;
  if (v72 == (quasar::lm *)v71)
  {
    v36 = 4;
    v35 = (quasar::lm *)v71;
  }
  else
  {
    if (!v72)
      goto LABEL_30;
    v36 = 5;
  }
  v35 = (quasar::lm *)(*(uint64_t (**)(void))(*(_QWORD *)v35 + 8 * v36))();
LABEL_30:
  if ((*(_DWORD *)(a1 + 44) & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    if ((*(_DWORD *)(a1 + 40) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      goto LABEL_45;
    if (v26 == -1)
    {
      quasar::lm::LogMessage::LogMessage(&__p, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 580);
      quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&__p);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&__p);
    }
    else
    {
      quasar::lm::nullstream(v35);
    }
    __p = 0;
    v56 = 0;
    v57 = 0;
    v54 = 0.0;
    v43 = (quasar::lm *)quasar::lm::fst_builder::FstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::addState(v62, &__p, &v54);
    if ((_DWORD)v43 == v26)
      goto LABEL_38;
    quasar::lm::LogMessage::LogMessage(v53, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 582);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v53);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v53);
  }
  else
  {
    if (v26 == -1)
    {
      quasar::lm::LogMessage::LogMessage(&__p, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 574);
      quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&__p);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&__p);
    }
    else
    {
      quasar::lm::nullstream(v35);
    }
    v37 = v62;
    v38 = *(_DWORD *)(a1 + 36);
    v39 = *(float *)(a1 + 44);
    v40 = (float *)operator new(0x10uLL);
    v56 = v40 + 4;
    v57 = (char *)(v40 + 4);
    *(_DWORD *)v40 = v38;
    *((_DWORD *)v40 + 1) = v38;
    v40[2] = -v39;
    *((_DWORD *)v40 + 3) = v26;
    __p = v40;
    v41 = expf(v39);
    v42 = log(1.0 - v41);
    v54 = -v42;
    v43 = (quasar::lm *)quasar::lm::fst_builder::FstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::addState(v37, &__p, &v54);
    if ((_DWORD)v43 == v26)
    {
LABEL_38:
      quasar::lm::nullstream(v43);
      goto LABEL_43;
    }
    quasar::lm::LogMessage::LogMessage(v53, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 578);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v53);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v53);
  }
LABEL_43:
  if (__p)
  {
    v56 = __p;
    operator delete(__p);
  }
LABEL_45:
  quasar::lm::fst_builder::FstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::build(v62);
  v44 = v74;
  if (v74 == v73)
  {
    v45 = 4;
    v44 = v73;
  }
  else
  {
    if (!v74)
      goto LABEL_50;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_50:
  if (v58)
  {
    v59 = v58;
    operator delete(v58);
  }
  v46 = v79;
  if (v79 == v78)
  {
    v47 = 4;
    v46 = v78;
  }
  else
  {
    if (!v79)
      goto LABEL_57;
    v47 = 5;
  }
  (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_57:
  v48 = v62;
  v62 = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v66);
  v49 = v70;
  if (v70)
  {
    p_shared_owners = (unint64_t *)&v70->__shared_owners_;
    do
      v51 = __ldaxr(p_shared_owners);
    while (__stlxr(v51 - 1, p_shared_owners));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  return 0;
}

void sub_1ADDAEBD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char *a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  uint64_t v44;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;

  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a14);
  v46 = a40;
  if (a40 == &a37)
  {
    v47 = 4;
    v46 = &a37;
  }
  else
  {
    if (!a40)
      goto LABEL_6;
    v47 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v46 + 8 * v47))();
LABEL_6:
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  v48 = *(_QWORD **)(v44 - 152);
  if (v48 == (_QWORD *)(v44 - 176))
  {
    v49 = 4;
    v48 = (_QWORD *)(v44 - 176);
  }
  else
  {
    if (!v48)
      goto LABEL_13;
    v49 = 5;
  }
  (*(void (**)(void))(*v48 + 8 * v49))();
LABEL_13:
  v50 = a21;
  a21 = 0;
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a25);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_1ADDAEDC0(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADDAEDB8);
}

void quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::~ConvertToFST(quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST *this)
{
  *(_QWORD *)this = &unk_1E5D3A860;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &unk_1E5D3A860;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  JUMPOUT(0x1AF44D190);
}

void quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::~ConvertToFST(quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST *this)
{
  *(_QWORD *)this = &unk_1E5D3A860;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &unk_1E5D3A860;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  JUMPOUT(0x1AF44D190);
}

void quasar::lm::InsertOrDie<std::unordered_map<BOnode const*,int>>(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  quasar::lm *v3;
  char v4;
  _QWORD *Featurizer;
  __int128 v6;

  *(_QWORD *)&v6 = *a2;
  DWORD2(v6) = *a3;
  v3 = (quasar::lm *)std::__hash_table<std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::__unordered_map_hasher<kaldi::WordHypLattice::Arc *,std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::hash<kaldi::WordHypLattice::Arc *>,std::equal_to<kaldi::WordHypLattice::Arc *>,true>,std::__unordered_map_equal<kaldi::WordHypLattice::Arc *,std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>,std::equal_to<kaldi::WordHypLattice::Arc *>,std::hash<kaldi::WordHypLattice::Arc *>,true>,std::allocator<std::__hash_value_type<kaldi::WordHypLattice::Arc *,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>>>>::__emplace_unique_key_args<kaldi::WordHypLattice::Arc *,std::pair<kaldi::WordHypLattice::Arc * const,std::__list_iterator<kaldi::WordHypLattice::Arc *,void *>> const&>(a1, &v6, &v6);
  if ((v4 & 1) != 0)
  {
    quasar::lm::nullstream(v3);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(&v6, 5, "InsertOrDie", "../libquasar/liblm/include/lm/stl_utils.h", 89);
    Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"duplicate key ", 14);
    std::ostream::operator<<();
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v6);
  }
}

void sub_1ADDAEF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_0,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_0>,unsigned long ()(BOnode const*)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_0,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_0>,unsigned long ()(BOnode const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E5D3F820;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_0,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_0>,unsigned long ()(BOnode const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3F820;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_0,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_0>,unsigned long ()(BOnode const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  int *v4;
  int v5;
  int v7;
  uint64_t v8;

  v8 = *a2;
  v3 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(*(_QWORD **)(a1 + 8), &v8);
  v4 = (int *)(v3 + 3);
  if (!v3)
    v4 = (int *)&fst::kNoStateId;
  v5 = *v4;
  if (v5 == -1)
  {
    v7 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(a1 + 16) + 200))(**(_QWORD **)(a1 + 16));
    quasar::lm::InsertOrDie<std::unordered_map<BOnode const*,int>>(*(_QWORD *)(a1 + 8), &v8, &v7);
    return v7;
  }
  return v5;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_0,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_0>,unsigned long ()(BOnode const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_0,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_0>,unsigned long ()(BOnode const*)>::target_type()
{
}

uint64_t quasar::lm::arpa2fst::inhouse::StateInstantiator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::StateInstantiator(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, float a9, float a10, int a11, int a12, uint64_t a13)
{
  float v15;
  float v16;
  float v17;
  float v18;
  quasar::lm *v19;
  float v20;
  quasar::lm *v21;
  quasar::lm *v22;
  _BYTE v24[16];

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a5;
  *(_DWORD *)(a1 + 24) = a6;
  *(_DWORD *)(a1 + 28) = a7;
  *(_QWORD *)(a1 + 32) = a8;
  *(float *)(a1 + 40) = a9;
  *(float *)(a1 + 44) = a10;
  v15 = expf(a9);
  v16 = log(1.0 - v15);
  *(float *)(a1 + 48) = v16;
  v17 = expf(a10);
  v18 = log(1.0 - v17);
  *(float *)(a1 + 52) = v18;
  *(_DWORD *)(a1 + 56) = a11;
  *(_DWORD *)(a1 + 60) = a12;
  v19 = (quasar::lm *)std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100](a1 + 64, a13);
  v20 = *(float *)(a1 + 40);
  if ((LODWORD(v20) & 0x7FFFFFFFu) < 0x7F800000 || (*(_DWORD *)(a1 + 44) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v19 = (quasar::lm *)quasar::lm::nullstream(v19);
    v20 = *(float *)(a1 + 40);
  }
  if ((LODWORD(v20) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    if (v20 <= 0.0)
    {
      v21 = (quasar::lm *)quasar::lm::nullstream(v19);
    }
    else
    {
      quasar::lm::LogMessage::LogMessage(v24, 5, "StateInstantiator", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 81);
      quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v24);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v24);
    }
    if (*(_DWORD *)(a1 + 60) == -1)
    {
      quasar::lm::LogMessage::LogMessage(v24, 5, "StateInstantiator", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 82);
      quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v24);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v24);
    }
    else
    {
      v19 = (quasar::lm *)quasar::lm::nullstream(v21);
    }
  }
  if ((*(_DWORD *)(a1 + 44) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    if (*(float *)(a1 + 44) <= 0.0)
    {
      v22 = (quasar::lm *)quasar::lm::nullstream(v19);
    }
    else
    {
      quasar::lm::LogMessage::LogMessage(v24, 5, "StateInstantiator", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 86);
      quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v24);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v24);
    }
    if (*(_DWORD *)(a1 + 60) == -1)
    {
      quasar::lm::LogMessage::LogMessage(v24, 5, "StateInstantiator", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 87);
      quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v24);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v24);
    }
    else
    {
      quasar::lm::nullstream(v22);
    }
  }
  return a1;
}

void sub_1ADDAF2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v12;
  uint64_t v13;

  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a9);
  v12 = *(_QWORD **)(v9 + 88);
  if (v12 == v10)
  {
    v13 = 4;
    v12 = v10;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_6:
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_1,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_1>,void ()(int,fst::TropicalWeightTpl<float> const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_1,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_1>,void ()(int,fst::TropicalWeightTpl<float> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3F878;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_1,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_1>,void ()(int,fst::TropicalWeightTpl<float> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3F878;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_1,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_1>,void ()(int,fst::TropicalWeightTpl<float> const&)>::operator()(uint64_t a1, unsigned int *a2, float *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, float))(***(_QWORD ***)(a1 + 8) + 184))(**(_QWORD **)(a1 + 8), *a2, *a3);
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_1,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_1>,void ()(int,fst::TropicalWeightTpl<float> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_1,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_1>,void ()(int,fst::TropicalWeightTpl<float> const&)>::target_type()
{
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_2,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_2>,void ()(int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_2,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_2>,void ()(int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3F8D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_2,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_2>,void ()(int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3F8D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_2,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_2>,void ()(int)>::operator()(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 8) + 8) = **(_QWORD **)(result + 8);
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_2,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_2>,void ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_2,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_2>,void ()(int)>::target_type()
{
}

_QWORD *std::__function::__value_func<void ()(int)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1ADDAF634(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_3,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_3>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_3,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_3>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3F928;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_3,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_3>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3F928;
  a2[1] = v2;
  return result;
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_3,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_3>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::operator()(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  void **v4;
  _OWORD *v5;
  unint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;

  v4 = *(void ***)(a1 + 8);
  v5 = v4[1];
  v6 = (unint64_t)v4[2];
  if ((unint64_t)v5 >= v6)
  {
    v8 = ((char *)v5 - (_BYTE *)*v4) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*v4;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v4 + 2), v11);
    else
      v12 = 0;
    v13 = &v12[16 * v8];
    v14 = &v12[16 * v11];
    *(_OWORD *)v13 = *a3;
    v7 = v13 + 16;
    v16 = (char *)*v4;
    v15 = (char *)v4[1];
    if (v15 != *v4)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v15 - 1);
        v13 -= 16;
        v15 -= 16;
      }
      while (v15 != v16);
      v15 = (char *)*v4;
    }
    *v4 = v13;
    v4[1] = v7;
    v4[2] = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v5 = *a3;
    v7 = v5 + 1;
  }
  v4[1] = v7;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_3,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_3>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_3,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_3>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::target_type()
{
}

_QWORD *std::__function::__value_func<void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1ADDAF948(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_4,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_4>,void ()(int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_4,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_4>,void ()(int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E5D3F980;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_4,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_4>,void ()(int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3F980;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_4,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_4>,void ()(int)>::operator()(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  __n128 *v4;
  __int128 *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(__n128 **)v3;
  v5 = *(__int128 **)(v3 + 8);
  v6 = 126 - 2 * __clz(((char *)v5 - (char *)v4) >> 4);
  v7 = *a2;
  if (v5 == (__int128 *)v4)
    v8 = 0;
  else
    v8 = v6;
  std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,false>(v4, v5, (uint64_t)&v12, v8, 1);
  v9 = *(uint64_t **)(a1 + 16);
  v10 = *v9;
  v11 = v9[1];
  while (v10 != v11)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 8) + 208))(**(_QWORD **)(a1 + 8), v7, v10);
    v10 += 16;
  }
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_4,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_4>,void ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_4,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_4>,void ()(int)>::target_type()
{
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_5,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_5>,void ()(int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_5,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_5>,void ()(int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3F9D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_5,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_5>,void ()(int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3F9D8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_5,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_5>,void ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_5,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_5>,void ()(int)>::target_type()
{
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_6,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_6>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_6,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_6>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3FA30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_6,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_6>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3FA30;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_6,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_6>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::operator()(uint64_t a1, unsigned int *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(***(_QWORD ***)(a1 + 8) + 208))(**(_QWORD **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_6,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_6>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_6,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_6>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::target_type()
{
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_7,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_7>,void ()(int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_7,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_7>,void ()(int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3FA88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_7,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_7>,void ()(int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3FA88;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_7,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_7>,void ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_7,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_7>,void ()(int)>::target_type()
{
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_8,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_8>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_8,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_8>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E5D3FAE0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_8,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_8>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E5D3FAE0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_8,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_8>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::operator()(uint64_t *a1, uint64_t *a2, int *a3, uint64_t a4, uint64_t *a5)
{
  return quasar::lm::arpa2fst::inhouse::StateInstantiator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()(a1[1], *a2, *a3, a4, *a5, a1[2], a1[4], a1[3], a1[5]);
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_8,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_8>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_8,std::allocator<quasar::lm::arpa2fst::inhouse::mutable_fst_impl::ConvertToFST::operator()(Ngram const&)::$_8>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::target_type()
{
}

uint64_t quasar::lm::arpa2fst::inhouse::StateInstantiator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  float *v10;
  uint64_t v11;
  int v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  int v24;
  uint64_t v25;
  char v26;
  _DWORD **v27;
  quasar::lm *v28;
  float v29;
  float v30;
  float v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  float v37;
  uint64_t v38;
  double v39;
  quasar::lm *v40;
  float v41;
  uint64_t *v42;
  int v43;
  _QWORD *Featurizer;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  unsigned int *v49;
  quasar::lm *PrefixTrie;
  quasar::lm *v51;
  quasar::lm *v52;
  uint64_t v53;
  quasar::lm *v54;
  int v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v60;
  char *v61;
  float v62;
  int v63;
  void *__p;
  void *v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  float v69;
  int v70;
  int v71;

  v10 = (float *)(a2 + 8);
  v68 = a2 + 8;
  v11 = *(_QWORD *)(a1 + 88);
  if (!v11)
    goto LABEL_57;
  v19 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 48))(v11, &v68);
  LODWORD(v68) = v19;
  v20 = *(_QWORD *)(a6 + 24);
  if (!v20)
    goto LABEL_57;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v20 + 48))(v20, &v68);
  v21 = 0.0;
  if (a3 == 1 && *(_DWORD *)(*(_QWORD *)a4 + 4) == *(_DWORD *)(a1 + 24))
  {
    v22 = *(float *)(a1 + 40);
    if ((LODWORD(v22) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      v23 = *(float *)(a1 + 48);
      v24 = *(_DWORD *)(a1 + 60);
      LODWORD(v68) = *(_DWORD *)(a1 + 56);
      HIDWORD(v68) = v68;
      v69 = -v22;
      v70 = v24;
      LODWORD(__p) = v19;
      v25 = *(_QWORD *)(a8 + 24);
      if (!v25)
        goto LABEL_57;
      v21 = v23 + 0.0;
      (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v25 + 48))(v25, &__p, &v68);
    }
    v26 = 1;
  }
  else
  {
    v26 = 0;
  }
  LOBYTE(v68) = 0;
  v27 = (_DWORD **)(a2 + 16);
  v28 = (quasar::lm *)LHash<unsigned int,float>::find(v27, *(_DWORD *)(a1 + 28), &v68);
  if ((_BYTE)v68)
  {
    v29 = *(float *)v28 * 2.30258509;
    v30 = v21 + v29;
  }
  else
  {
    v30 = -INFINITY;
  }
  if ((LODWORD(v30) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    if ((v26 & 1) == 0 && (*(_DWORD *)(a1 + 44) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      v31 = -(float)(v30 + *(float *)(a1 + 44));
      v32 = *(_DWORD *)(a1 + 60);
      LODWORD(v68) = *(_DWORD *)(a1 + 56);
      HIDWORD(v68) = v68;
      v69 = v31;
      v70 = v32;
      LODWORD(__p) = v19;
      v33 = *(_QWORD *)(a8 + 24);
      if (!v33)
        goto LABEL_57;
      (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &__p, &v68);
      v30 = v30 + *(float *)(a1 + 52);
    }
    *(float *)&__p = -v30;
    LODWORD(v68) = v19;
    v34 = *(_QWORD *)(a7 + 24);
    if (!v34)
      goto LABEL_57;
    v28 = (quasar::lm *)(*(uint64_t (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v34 + 48))(v34, &v68, &__p);
  }
  if (a5)
  {
    v68 = a5 + 8;
    v35 = *(_QWORD *)(a1 + 88);
    if (!v35)
      goto LABEL_57;
    v36 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v35 + 48))(v35, &v68);
    v37 = v21 + *v10 * 2.30258509;
    v68 = 0;
    v69 = -v37;
    v70 = v36;
    LODWORD(__p) = v19;
    v38 = *(_QWORD *)(a8 + 24);
    if (!v38)
      goto LABEL_57;
    (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v38 + 48))(v38, &__p, &v68);
  }
  else if (a3)
  {
    quasar::lm::LogMessage::LogMessage(&v68, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 153);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v68);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v68);
  }
  else
  {
    quasar::lm::nullstream(v28);
  }
  LHashIter<unsigned int,float>::LHashIter(&v68, v27, SArray_compareKey<unsigned int>);
  LHashIter<unsigned int,float>::init((uint64_t)&v68);
  v67 = -1;
  __p = 0;
  v65 = 0;
  v66 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  v39 = v21;
  while (1)
  {
    v40 = (quasar::lm *)LHashIter<unsigned int,float>::next((uint64_t)&v68, &v67);
    if (!v40)
      break;
    if (v67 == *(_DWORD *)(a1 + 24))
    {
      if (a3)
      {
        quasar::lm::LogMessage::LogMessage(&v61, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 176);
        quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v61);
        quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v61);
      }
      else
      {
        quasar::lm::nullstream(v40);
      }
    }
    else if (v67 != *(_DWORD *)(a1 + 28))
    {
      v41 = *(float *)v40;
      v42 = std::__hash_table<quasar::PersonalizedLmData::DocumentType,std::hash<quasar::PersonalizedLmData::DocumentType>,std::equal_to<quasar::PersonalizedLmData::DocumentType>,std::allocator<quasar::PersonalizedLmData::DocumentType>>::find<quasar::PersonalizedLmData::DocumentType>(*(_QWORD **)(a1 + 32), &v67);
      if (!v42 || (v43 = *((_DWORD *)v42 + 5), v43 == -1))
      {
        if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 176))(*(_QWORD *)(a1 + 16), v67))
        {
          quasar::lm::LogMessage::LogMessage(&v61, 2, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 188);
          Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v61);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"Non-event symbol ", 17);
          v45 = (_QWORD *)std::ostream::operator<<();
          v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" occurs as a probabilistic event. ", 34);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Is <unk> modeled as a word?", 27);
          quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v61);
        }
        quasar::lm::LogMessage::LogMessage(&v61, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 192);
        v47 = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v61);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"Symbol ", 7);
        v48 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" in ARPA model has no remapping.", 32);
        quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v61);
        v43 = -1;
      }
      v49 = (unsigned int *)__p;
      *(_DWORD *)__p = v67;
      v60 = 0;
      PrefixTrie = (quasar::lm *)Trie<unsigned int,BOnode>::findPrefixTrie(*(_DWORD ***)(a1 + 8), v49, &v60);
      v51 = PrefixTrie;
      if (PrefixTrie)
      {
        v52 = (quasar::lm *)quasar::lm::nullstream(PrefixTrie);
      }
      else
      {
        quasar::lm::LogMessage::LogMessage(&v61, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 201);
        quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v61);
        quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v61);
      }
      if (v60 <= *(_DWORD *)(a1 + 4))
      {
        quasar::lm::nullstream(v52);
      }
      else
      {
        quasar::lm::LogMessage::LogMessage(&v61, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 202);
        quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v61);
        quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v61);
      }
      v61 = (char *)v51 + 8;
      v53 = *(_QWORD *)(a1 + 88);
      if (!v53)
        std::__throw_bad_function_call[abi:ne180100]();
      v54 = (quasar::lm *)(*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v53 + 48))(v53, &v61);
      v55 = (int)v54;
      if ((_DWORD)v54 == -1)
      {
        quasar::lm::LogMessage::LogMessage(&v61, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 209);
        quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)&v61);
        quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&v61);
      }
      else
      {
        quasar::lm::nullstream(v54);
      }
      v56 = v39 + v41 * 2.30258509;
      LODWORD(v61) = v43;
      HIDWORD(v61) = v43;
      v62 = -v56;
      v63 = v55;
      v71 = v19;
      v57 = *(_QWORD *)(a8 + 24);
      if (!v57)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, int *, char **))(*(_QWORD *)v57 + 48))(v57, &v71, &v61);
    }
  }
  if (__p)
  {
    v65 = __p;
    operator delete(__p);
  }
  LHashIter<unsigned int,double>::~LHashIter((uint64_t)&v68);
  LODWORD(v68) = v19;
  v58 = *(_QWORD *)(a9 + 24);
  if (!v58)
LABEL_57:
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v58 + 48))(v58, &v68);
}

void sub_1ADDB03E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a18);
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_2,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_2>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_2,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_2>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E5D3F718;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_2,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_2>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3F718;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_2,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_2>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::operator()(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  quasar::lm *v7;
  int *v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t result;
  unsigned int *v13;
  _BOOL8 v14;
  uint64_t v15;
  unsigned __int8 v16[20];
  int v17;

  v4 = *a2;
  v5 = *a3;
  v6 = *(uint64_t **)(a1 + 24);
  *(_QWORD *)v16 = *a2 + 8;
  v7 = (quasar::lm *)std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>((_QWORD *)*v6, v16);
  v8 = (int *)((char *)v7 + 24);
  if (!v7)
    v8 = (int *)&fst::kNoStateId;
  v9 = *v8;
  if (v9 == -1)
  {
    v10 = *v6;
    v17 = *(_QWORD *)(*v6 + 24);
    quasar::lm::InsertOrDie<std::unordered_map<BOnode const*,int>>(v10, v16, &v17);
    if ((v17 & 0x80000000) == 0)
      goto LABEL_5;
  }
  else if ((v9 & 0x80000000) == 0)
  {
LABEL_5:
    quasar::lm::nullstream(v7);
    goto LABEL_8;
  }
  quasar::lm::LogMessage::LogMessage(v16, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/arpa2fst-inhouse.cpp", 468);
  quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v16);
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v16);
LABEL_8:
  v11 = *(unsigned int **)(a1 + 32);
  v16[0] = 0;
  result = LHash<unsigned int,float>::find((_DWORD **)(v4 + 16), *v11, v16);
  v13 = *(unsigned int **)(v4 + 16);
  if (v13)
    v13 = (unsigned int *)((unint64_t)*v13 >> 5);
  if (v16[0])
    v14 = *(_BYTE *)(a1 + 8) != 0;
  else
    v14 = 0;
  v15 = -1;
  if (v5)
    v15 = 1;
  **(_QWORD **)(a1 + 16) += (char *)v13 + v15 - (v16[0] != 0) + v14;
  return result;
}

void sub_1ADDB0678(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_2,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_2>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_2,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_2>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::target_type()
{
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_0,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_0>,unsigned long ()(BOnode const*)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_0,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_0>,unsigned long ()(BOnode const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3F6C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_0,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_0>,unsigned long ()(BOnode const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3F6C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_0,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_0>,unsigned long ()(BOnode const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  int *v4;
  int v5;
  uint64_t v6;
  int v8;
  uint64_t v9;

  v9 = *a2;
  v3 = std::__hash_table<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::__unordered_map_hasher<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::__unordered_map_equal<kaldi::LatticeFasterOnlineDecoder::Token *,std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>,std::equal_to<kaldi::LatticeFasterOnlineDecoder::Token *>,std::hash<kaldi::LatticeFasterOnlineDecoder::Token *>,true>,std::allocator<std::__hash_value_type<kaldi::LatticeFasterOnlineDecoder::Token *,float>>>::find<kaldi::LatticeFasterOnlineDecoder::Token *>(*(_QWORD **)(a1 + 8), &v9);
  v4 = (int *)(v3 + 3);
  if (!v3)
    v4 = (int *)&fst::kNoStateId;
  v5 = *v4;
  if (v5 == -1)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(v6 + 24);
    quasar::lm::InsertOrDie<std::unordered_map<BOnode const*,int>>(v6, &v9, &v8);
    return v8;
  }
  return v5;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_0,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_0>,unsigned long ()(BOnode const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_0,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_0>,unsigned long ()(BOnode const*)>::target_type()
{
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_3,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_3>,void ()(int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_3,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_3>,void ()(int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E5D3F770;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_3,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_3>,void ()(int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3F770;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_3,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_3>,void ()(int)>::operator()(uint64_t a1)
{
  uint64_t v2;
  __n128 *v3;
  __int128 *v4;
  unint64_t v5;
  uint64_t v6;
  char v8;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(_QWORD *)(a1 + 32);
    v3 = *(__n128 **)v2;
    v4 = *(__int128 **)(v2 + 8);
    v5 = 126 - 2 * __clz(((uint64_t)v4 - *(_QWORD *)v2) >> 4);
    if (v4 == (__int128 *)v3)
      v6 = 0;
    else
      v6 = v5;
    std::__introsort<std::_ClassicAlgPolicy,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> &,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>*,false>(v3, v4, (uint64_t)&v8, v6, 1);
  }
  return quasar::lm::fst_builder::FstBuilder<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::addState(**(_QWORD **)(a1 + 16), *(_QWORD **)(a1 + 32), *(float **)(a1 + 24));
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_3,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_3>,void ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_3,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_3>,void ()(int)>::target_type()
{
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E5D3F7C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E5D3F7C8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::operator()(_QWORD *a1, uint64_t *a2, int *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  _QWORD v18[3];
  _QWORD *v19;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = *a3;
  v7 = *a5;
  v8 = a1[3];
  v9 = a1[1];
  v21 = a1[2];
  v22 = v20;
  v20[0] = &off_1E5D3FF58;
  v20[1] = v8;
  v18[0] = &off_1E5D3FFB0;
  v18[1] = v8;
  v19 = v18;
  v16[0] = &off_1E5D40008;
  v16[1] = v21;
  v17 = v16;
  quasar::lm::arpa2fst::inhouse::StateInstantiator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::operator()(v9, v5, v6, a4, v7, (uint64_t)v20, (uint64_t)v18, (uint64_t)v16, a1[5]);
  v10 = v17;
  if (v17 == v16)
  {
    v11 = 4;
    v10 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_6:
  v12 = v19;
  if (v19 == v18)
  {
    v13 = 4;
    v12 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_11;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_11:
  result = v22;
  if (v22 == v20)
  {
    v15 = 4;
    result = v20;
  }
  else
  {
    if (!v22)
      return result;
    v15 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
}

void sub_1ADDB0B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v19 = a13;
  if (a13 == &a10)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a17;
  if (a17 == &a14)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  v23 = *(_QWORD **)(v17 - 32);
  if (v23 == (_QWORD *)(v17 - 56))
  {
    v24 = 4;
    v23 = (_QWORD *)(v17 - 56);
  }
  else
  {
    if (!v23)
      goto LABEL_16;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4,std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4>,void ()(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)>::target_type()
{
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int)#1}>,void ()(int)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int)#1}>,void ()(int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E5D3FF58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int)#1}>,void ()(int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3FF58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int)#1}>,void ()(int)>::operator()(uint64_t result)
{
  **(_DWORD **)(result + 8) = 2139095040;
  *(_QWORD *)(*(_QWORD *)(result + 16) + 8) = **(_QWORD **)(result + 16);
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int)#1}>,void ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int)#1}>,void ()(int)>::target_type()
{
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::TropicalWeightTpl<float> const&)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::TropicalWeightTpl<float> const&)#1}>,void ()(int,fst::TropicalWeightTpl<float> const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::TropicalWeightTpl<float> const&)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::TropicalWeightTpl<float> const&)#1}>,void ()(int,fst::TropicalWeightTpl<float> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3FFB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::TropicalWeightTpl<float> const&)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::TropicalWeightTpl<float> const&)#1}>,void ()(int,fst::TropicalWeightTpl<float> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3FFB0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::TropicalWeightTpl<float> const&)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::TropicalWeightTpl<float> const&)#1}>,void ()(int,fst::TropicalWeightTpl<float> const&)>::operator()(uint64_t result, uint64_t a2, _DWORD *a3)
{
  **(_DWORD **)(result + 8) = *a3;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::TropicalWeightTpl<float> const&)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::TropicalWeightTpl<float> const&)#1}>,void ()(int,fst::TropicalWeightTpl<float> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::TropicalWeightTpl<float> const&)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::TropicalWeightTpl<float> const&)#1}>,void ()(int,fst::TropicalWeightTpl<float> const&)>::target_type()
{
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)#1}>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)#1}>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D40008;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)#1}>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D40008;
  a2[1] = v2;
  return result;
}

void std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)#1}>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::operator()(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  void **v4;
  _OWORD *v5;
  unint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;

  v4 = *(void ***)(a1 + 8);
  v5 = v4[1];
  v6 = (unint64_t)v4[2];
  if ((unint64_t)v5 >= v6)
  {
    v8 = ((char *)v5 - (_BYTE *)*v4) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*v4;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v4 + 2), v11);
    else
      v12 = 0;
    v13 = &v12[16 * v8];
    v14 = &v12[16 * v11];
    *(_OWORD *)v13 = *a3;
    v7 = v13 + 16;
    v16 = (char *)*v4;
    v15 = (char *)v4[1];
    if (v15 != *v4)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v15 - 1);
        v13 -= 16;
        v15 -= 16;
      }
      while (v15 != v16);
      v15 = (char *)*v4;
    }
    *v4 = v13;
    v4[1] = v7;
    v4[2] = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v5 = *a3;
    v7 = v5 + 1;
  }
  v4[1] = v7;
}

uint64_t std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)#1}>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)#1},std::allocator<quasar::lm::arpa2fst::inhouse::fst_builder_impl::ConvertToFST::operator()(Ngram const&)::$_4::operator() const(Trie<unsigned int,BOnode> const*,unsigned int,std::vector<unsigned int> const&,Trie<unsigned int,BOnode> const*)::{lambda(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)#1}>,void ()(int,fst::ArcTpl<fst::TropicalWeightTpl<float>,int> const&)>::target_type()
{
}

uint64_t **quasar::artifact::AppLmArtifact::AppLmArtifact(uint64_t **a1, __int128 *a2, uint64_t a3)
{
  quasar::artifact::AppLmArtifactGlobals *v6;
  quasar::artifact::AppLmArtifactGlobals *v7;
  const void ***v8;
  uint64_t v9;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  std::string __p;

  v6 = (quasar::artifact::AppLmArtifactGlobals *)quasar::artifact::AppLmArtifactGlobals::get((quasar::artifact::AppLmArtifactGlobals *)a1);
  v7 = (quasar::artifact::AppLmArtifactGlobals *)quasar::artifact::AppLmArtifactGlobals::get(v6);
  v8 = (const void ***)((char *)v7 + 24);
  v9 = quasar::artifact::AppLmArtifactGlobals::get(v7);
  quasar::artifact::Artifact::Artifact((uint64_t)a1, (const void ***)v6, v8, (const void ***)(v9 + 48));
  *a1 = (uint64_t *)&off_1E5D3BB38;
  std::string::basic_string[abi:ne180100]<0>(&__p, "version");
  quasar::lm::InsertOrDie<std::map<std::string,std::string>>(a1 + 13, (uint64_t)&__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "locale");
  std::string::basic_string[abi:ne180100]<0>(v11, "_");
  quasar::Locale::toInternalShortIdentifier(a3, (uint64_t)v11);
  quasar::lm::InsertOrDie<std::map<std::string,std::string>>(a1 + 13, (uint64_t)&__p, (__int128 *)v13);
  if (v14 < 0)
    operator delete(v13[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v13, "-");
  quasar::Locale::toInternalLongIdentifier(a3, &__p);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(a1 + 22, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v14 < 0)
    operator delete(v13[0]);
  return a1;
}

void sub_1ADDB1088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  quasar::artifact::Artifact *v27;

  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  quasar::artifact::Artifact::~Artifact(v27);
  _Unwind_Resume(a1);
}

uint64_t quasar::artifact::AppLmArtifactGlobals::get(quasar::artifact::AppLmArtifactGlobals *this)
{
  unsigned __int8 v1;
  quasar::artifact::AppLmArtifactGlobals *v3;

  if ((v1 & 1) == 0
  {
    v3 = (quasar::artifact::AppLmArtifactGlobals *)operator new();
    quasar::artifact::AppLmArtifactGlobals::AppLmArtifactGlobals(v3);
    quasar::artifact::AppLmArtifactGlobals::get(void)::singleton = (uint64_t)v3;
  }
  return quasar::artifact::AppLmArtifactGlobals::get(void)::singleton;
}

void sub_1ADDB1190(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1020C40FA75F7B4);
  _Unwind_Resume(a1);
}

void quasar::lm::InsertOrDie<std::map<std::string,std::string>>(uint64_t **a1, uint64_t a2, __int128 *a3)
{
  quasar::lm *v4;
  _QWORD *Featurizer;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[16];

  v4 = (quasar::lm *)quasar::lm::InsertIfNotPresent<std::map<std::string,std::string>>(a1, (__int128 *)a2, a3);
  if ((_DWORD)v4)
  {
    quasar::lm::nullstream(v4);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v10, 5, "InsertOrDie", "../libquasar/liblm/include/lm/stl_utils.h", 89);
    Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v10);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"duplicate key ", 14);
    v7 = *(char *)(a2 + 23);
    if (v7 >= 0)
      v8 = a2;
    else
      v8 = *(_QWORD *)a2;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a2 + 23);
    else
      v9 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v10);
  }
}

void sub_1ADDB1260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a9);
  _Unwind_Resume(a1);
}

void quasar::artifact::Artifact::~Artifact(quasar::artifact::Artifact *this)
{
  *(_QWORD *)this = &off_1E5D3BCF0;
  std::__tree<std::string>::destroy((uint64_t)this + 240, *((char **)this + 31));
  if (*((char *)this + 231) < 0)
    operator delete(*((void **)this + 26));
  std::__tree<std::string>::destroy((uint64_t)this + 176, *((char **)this + 23));
  std::__tree<std::string>::destroy((uint64_t)this + 152, *((char **)this + 20));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 128, *((_QWORD **)this + 17));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 104, *((_QWORD **)this + 14));
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  std::__tree<std::string>::destroy((uint64_t)this + 56, *((char **)this + 8));
  std::__tree<std::string>::destroy((uint64_t)this + 32, *((char **)this + 5));
  std::__tree<std::string>::destroy((uint64_t)this + 8, *((char **)this + 2));
}

{
  quasar::artifact::Artifact::~Artifact(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::artifact::AppLmArtifact::AppLmArtifact(quasar::artifact::AppLmArtifactGlobals *a1, uint64_t a2)
{
  quasar::artifact::AppLmArtifactGlobals *v4;
  quasar::artifact::AppLmArtifactGlobals *v5;
  const void ***v6;
  uint64_t v7;
  uint64_t result;

  v4 = (quasar::artifact::AppLmArtifactGlobals *)quasar::artifact::AppLmArtifactGlobals::get(a1);
  v5 = (quasar::artifact::AppLmArtifactGlobals *)quasar::artifact::AppLmArtifactGlobals::get(v4);
  v6 = (const void ***)((char *)v5 + 24);
  v7 = quasar::artifact::AppLmArtifactGlobals::get(v5);
  result = quasar::artifact::Artifact::Artifact((uint64_t)a1, (const void ***)v4, v6, (const void ***)(v7 + 48), a2);
  *(_QWORD *)a1 = &off_1E5D3BB38;
  return result;
}

quasar::artifact::AppLmArtifactLifeCycleStage *quasar::artifact::AppLmArtifact::getLifeCycleStage(quasar::artifact::AppLmArtifact *this)
{
  quasar::artifact::AppLmArtifactLifeCycleStage *v2;
  _BOOL4 hasContent;
  _BOOL4 v4;
  _BOOL8 hasInfo;
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v8;
  _BOOL8 v9;
  _BOOL4 v10;
  uint64_t v11;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL8 v14;
  _BOOL4 v15;
  uint64_t v16;
  int isTextNormalized;
  _BOOL8 v18;
  _BOOL4 v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void *__p[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  const void *v41[2];
  char v42;

  v2 = (quasar::artifact::AppLmArtifactLifeCycleStage *)quasar::artifact::AppLmArtifactLifeCycleStages::get(this);
  std::string::basic_string[abi:ne180100]<0>(__p, "language-model-fst");
  hasContent = quasar::artifact::Artifact::hasContent((uint64_t)this, (const void **)__p);
  v4 = hasContent;
  if (SBYTE7(v25) < 0)
  {
    operator delete(__p[0]);
    if (v4)
    {
LABEL_3:
      std::string::basic_string[abi:ne180100]<0>(__p, "asr-datapack-version");
      hasInfo = quasar::artifact::Artifact::hasInfo((uint64_t)this, (const void **)__p);
      if (hasInfo)
      {
        std::string::basic_string[abi:ne180100]<0>(v41, "language-model-arpa");
        hasInfo = quasar::artifact::Artifact::hasContent((uint64_t)this, v41);
        v6 = hasInfo;
        if (v42 < 0)
          operator delete((void *)v41[0]);
      }
      else
      {
        v6 = 0;
      }
      if (SBYTE7(v25) < 0)
        operator delete(__p[0]);
      v11 = quasar::artifact::AppLmArtifactLifeCycleStages::get((quasar::artifact::AppLmArtifactLifeCycleStages *)hasInfo);
      if (v6)
      {
        v2 = (quasar::artifact::AppLmArtifactLifeCycleStage *)(v11 + 320);
        goto LABEL_29;
      }
      goto LABEL_18;
    }
  }
  else if (hasContent)
  {
    goto LABEL_3;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ngram-count");
  v7 = quasar::artifact::Artifact::hasContent((uint64_t)this, (const void **)__p);
  v8 = v7;
  if (SBYTE7(v25) < 0)
  {
    operator delete(__p[0]);
    if (v8)
    {
LABEL_9:
      std::string::basic_string[abi:ne180100]<0>(__p, "tokenizer-datapack-version");
      v9 = quasar::artifact::Artifact::hasInfo((uint64_t)this, (const void **)__p);
      v10 = v9;
      if (SBYTE7(v25) < 0)
        operator delete(__p[0]);
      v11 = quasar::artifact::AppLmArtifactLifeCycleStages::get((quasar::artifact::AppLmArtifactLifeCycleStages *)v9);
      if (v10)
      {
        v2 = (quasar::artifact::AppLmArtifactLifeCycleStage *)(v11 + 256);
        goto LABEL_29;
      }
LABEL_18:
      v2 = (quasar::artifact::AppLmArtifactLifeCycleStage *)(v11 + 64);
      goto LABEL_29;
    }
  }
  else if (v7)
  {
    goto LABEL_9;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "phrase-count");
  v12 = quasar::artifact::Artifact::hasContent((uint64_t)this, (const void **)__p);
  v13 = v12;
  if (SBYTE7(v25) < 0)
  {
    operator delete(__p[0]);
    if (!v13)
      goto LABEL_29;
  }
  else if (!v12)
  {
    goto LABEL_29;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "tokenizer-datapack-version");
  v14 = quasar::artifact::Artifact::hasInfo((uint64_t)this, (const void **)__p);
  v15 = v14;
  if (SBYTE7(v25) < 0)
    operator delete(__p[0]);
  v16 = quasar::artifact::AppLmArtifactLifeCycleStages::get((quasar::artifact::AppLmArtifactLifeCycleStages *)v14);
  if (v15)
    v2 = (quasar::artifact::AppLmArtifactLifeCycleStage *)(v16 + 192);
  else
    v2 = (quasar::artifact::AppLmArtifactLifeCycleStage *)(v16 + 128);
LABEL_29:
  if (quasar::artifact::AppLmArtifactLifeCycleStage::isValid(v2))
  {
    isTextNormalized = quasar::artifact::AppLmArtifactLifeCycleStage::isTextNormalized(v2);
    std::string::basic_string[abi:ne180100]<0>(__p, "tokenizer-datapack-version");
    v18 = quasar::artifact::Artifact::hasInfo((uint64_t)this, (const void **)__p);
    v19 = isTextNormalized ^ v18;
    if (SBYTE7(v25) < 0)
    {
      operator delete(__p[0]);
      if (!v19)
        return v2;
    }
    else if (!v19)
    {
      return v2;
    }
    if (quasar::gLogLevel >= 1)
    {
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Artifact in life cycle stage ", 29);
      v21 = quasar::artifact::operator<<(v20, (uint64_t)v2);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" has ", 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"incorrect text normalization meta-data.", 39);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
    return (quasar::artifact::AppLmArtifactLifeCycleStage *)(quasar::artifact::AppLmArtifactLifeCycleStages::get((quasar::artifact::AppLmArtifactLifeCycleStages *)v18)
                                                           + 64);
  }
  return v2;
}

void sub_1ADDB1654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::artifact::AppLmArtifact::loadAppLmData(quasar::artifact::AppLmArtifact *a1@<X0>, kaldi::quasar::Vocab *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  quasar::artifact::AppLmArtifactLifeCycleStage *LifeCycleStage;
  quasar::artifact::AppLmArtifactLifeCycleStages *v11;
  int v12;
  uint64_t v13;
  quasar::artifact::AppLmArtifactLifeCycleStages *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  quasar::artifact::AppLmArtifactLifeCycleStages *v19;
  int v20;
  uint64_t v21;
  int isTextNormalized;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  size_t v26;
  void **v27;
  void **v28;
  quasar::LmData *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34[2];
  unsigned __int8 v35;
  int v36;
  void *__p[2];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  LifeCycleStage = quasar::artifact::AppLmArtifact::getLifeCycleStage(a1);
  if ((quasar::artifact::AppLmArtifactLifeCycleStage::isValid(LifeCycleStage) & 1) == 0)
  {
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v43 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    *(_OWORD *)__p = 0u;
    v38 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Artifact in invalid life cycle stage.");
    goto LABEL_36;
  }
  v11 = (quasar::artifact::AppLmArtifactLifeCycleStages *)quasar::artifact::AppLmArtifactLifeCycleStage::operator int((uint64_t)LifeCycleStage);
  v12 = (int)v11;
  v13 = quasar::artifact::AppLmArtifactLifeCycleStages::get(v11);
  if (v12 == quasar::artifact::AppLmArtifactLifeCycleStage::operator int(v13 + 128)
    || (v14 = (quasar::artifact::AppLmArtifactLifeCycleStages *)quasar::artifact::AppLmArtifactLifeCycleStage::operator int((uint64_t)LifeCycleStage),
        v15 = (int)v14,
        v16 = quasar::artifact::AppLmArtifactLifeCycleStages::get(v14),
        v15 == quasar::artifact::AppLmArtifactLifeCycleStage::operator int(v16 + 192)))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "phrase-count");
    quasar::artifact::Artifact::getContentAsStream((uint64_t)a1, (const void **)__p, (uint64_t *)v34);
    v17 = v34[0];
    v34[0] = 0;
    if (SBYTE7(v38) < 0)
      operator delete(__p[0]);
    v18 = 2;
    goto LABEL_11;
  }
  v19 = (quasar::artifact::AppLmArtifactLifeCycleStages *)quasar::artifact::AppLmArtifactLifeCycleStage::operator int((uint64_t)LifeCycleStage);
  v20 = (int)v19;
  v21 = quasar::artifact::AppLmArtifactLifeCycleStages::get(v19);
  if (v20 != quasar::artifact::AppLmArtifactLifeCycleStage::operator int(v21 + 256))
  {
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v43 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    *(_OWORD *)__p = 0u;
    v38 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unable to transform artifact from ", 34);
    v32 = quasar::artifact::operator<<(v31, (uint64_t)LifeCycleStage);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" stage.", 7);
LABEL_36:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ngram-count");
  quasar::artifact::Artifact::getContentAsStream((uint64_t)a1, (const void **)__p, (uint64_t *)v34);
  v17 = v34[0];
  v34[0] = 0;
  if (SBYTE7(v38) < 0)
    operator delete(__p[0]);
  v18 = 1;
LABEL_11:
  isTextNormalized = quasar::artifact::AppLmArtifactLifeCycleStage::isTextNormalized(LifeCycleStage);
  v23 = *a3;
  if (isTextNormalized)
  {
    if (v23)
    {
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v43 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      *(_OWORD *)__p = 0u;
      v38 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"A Tokenizer instance was provided when the input data is processed.", 67);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    v24 = (_QWORD *)operator new();
    std::string::basic_string[abi:ne180100]<0>(__p, " \t\n");
    quasar::BasicTokenizer::BasicTokenizer(v24, (__int128 *)__p);
    if (SBYTE7(v38) < 0)
      operator delete(__p[0]);
    v25 = *a3;
    *a3 = (uint64_t)v24;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
  else if (!v23)
  {
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v43 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    *(_OWORD *)__p = 0u;
    v38 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"A Tokenizer instance was not provided when the input data is unprocessed.", 73);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::make_unique[abi:ne180100]<quasar::AppLmData,quasar::filesystem::Path const&,std::string const&,std::unique_ptr<quasar::TextTokenizer>,quasar::filesystem::Path const&>(a2, a4, a3, a2, a5);
  v36 = 0;
  quasar::LmData::dataTypeString(0, v34);
  if ((v35 & 0x80u) == 0)
    v26 = v35;
  else
    v26 = (size_t)v34[1];
  v27 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v26 + 1);
  if (SBYTE7(v38) < 0)
    v27 = (void **)__p[0];
  if (v26)
  {
    if ((v35 & 0x80u) == 0)
      v28 = v34;
    else
      v28 = (void **)v34[0];
    memmove(v27, v28, v26);
  }
  *(_WORD *)((char *)v27 + v26) = 95;
  if ((char)v35 < 0)
    operator delete(v34[0]);
  v29 = (quasar::LmData *)*a5;
  v33 = v17;
  quasar::LmData::loadFromStream(v29, &v33, &v36, (uint64_t)__p, v18);
  v30 = v33;
  v33 = 0;
  if (v30)
    (*(void (**)(_QWORD *))(*v30 + 8))(v30);
  if (SBYTE7(v38) < 0)
    operator delete(__p[0]);
}

void sub_1ADDB1B54(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t *v23;
  uint64_t v24;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  if (a23 < 0)
    operator delete(__p);
  v24 = *v23;
  *v23 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  JUMPOUT(0x1ADDB1BC4);
}

void std::make_unique[abi:ne180100]<quasar::AppLmData,quasar::filesystem::Path const&,std::string const&,std::unique_ptr<quasar::TextTokenizer>,quasar::filesystem::Path const&>(kaldi::quasar::Vocab *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, kaldi::quasar::Vocab *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void *__p[2];
  char v15;
  std::string v16;
  uint64_t v17;
  std::string v18;

  v10 = operator new();
  kaldi::quasar::Vocab::OOvWord(a1, &v18);
  v11 = *a3;
  *a3 = 0;
  v17 = v11;
  kaldi::quasar::Vocab::OOvWord(a4, &v16);
  std::string::basic_string[abi:ne180100]<0>(__p, "\\unknown-first");
  v13 = 10000;
  quasar::AppLmData::AppLmData(v10, &v18, a2, &v17, &v16, __p, &v13);
  *a5 = v10;
  if (v15 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v12 = v17;
  v17 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
}

void sub_1ADDB1CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (a23)
    (*(void (**)(uint64_t))(*(_QWORD *)a23 + 8))(a23);
  if (a29 < 0)
    operator delete(a24);
  MEMORY[0x1AF44D190](v29, 0x10B3C40936E0E45);
  _Unwind_Resume(a1);
}

void quasar::artifact::AppLmArtifact::loadCustomPronData(quasar::artifact::AppLmArtifact *this@<X0>, const quasar::lm::SymbolTableData *a2@<X1>, uint64_t *a3@<X8>)
{
  _BOOL4 hasContent;
  _BOOL4 v7;
  uint64_t v8;
  std::string v9;
  void *__p;
  char v11;
  void *v12[2];
  char v13;
  uint64_t v14;

  std::string::basic_string[abi:ne180100]<0>(&v9, "custom-prons");
  hasContent = quasar::artifact::Artifact::hasContent((uint64_t)this, (const void **)&v9.__r_.__value_.__l.__data_);
  v7 = hasContent;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v9.__r_.__value_.__l.__data_);
    if (v7)
      goto LABEL_3;
LABEL_12:
    *a3 = 0;
    return;
  }
  if (!hasContent)
    goto LABEL_12;
LABEL_3:
  std::string::basic_string[abi:ne180100]<0>(v12, "custom-prons");
  quasar::artifact::Artifact::getContentAsStream((uint64_t)this, (const void **)v12, &v14);
  quasar::artifact::Artifact::getLocale(this, &v9);
  quasar::CustomPronData::loadFromStream(&v14, a2, (uint64_t)&v9, a3);
  if (v11 < 0)
    operator delete(__p);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  v8 = v14;
  v14 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_1ADDB1E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  uint64_t v25;

  std::pair<std::string,std::string>::~pair((uint64_t)&a9);
  v25 = *(_QWORD *)(v23 - 40);
  *(_QWORD *)(v23 - 40) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void quasar::artifact::AppLmArtifact::loadOovs(quasar::artifact::AppLmArtifact *this@<X0>, uint64_t *a2@<X8>)
{
  _BOOL4 hasContent;
  _BOOL4 v5;
  uint64_t v6;
  _QWORD *v7;
  std::string::size_type v8;
  std::string *p_p;
  uint64_t child;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  std::string __p;
  __int128 v23;
  uint64_t v24;
  std::string v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  std::string::basic_string[abi:ne180100]<0>(&__p, "oov");
  hasContent = quasar::artifact::Artifact::hasContent((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_);
  v5 = hasContent;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v5)
      goto LABEL_3;
LABEL_13:
    *a2 = 0;
    return;
  }
  if (!hasContent)
    goto LABEL_13;
LABEL_3:
  v27 = 0uLL;
  v28 = 0;
  v6 = operator new();
  v7 = operator new(0x60uLL);
  *(_QWORD *)(v6 + 8) = v7;
  v7[7] = 0;
  v7[8] = v7 + 7;
  v7[9] = v7 + 7;
  v7[10] = v7 + 10;
  v7[11] = v7 + 10;
  *(_QWORD *)(v6 + 24) = 0;
  v29 = v6;
  std::string::basic_string[abi:ne180100]<0>(&__p, "oov");
  quasar::artifact::Artifact::getContentAsStream((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t *)&v25);
  boost::property_tree::json_parser::read_json<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>(v25.__r_.__value_.__l.__data_, &v27);
  v8 = v25.__r_.__value_.__r.__words[0];
  v25.__r_.__value_.__r.__words[0] = 0;
  if (v8)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v8 + 8))(v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "oov");
  LOBYTE(v23) = 46;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  *((_QWORD *)&v23 + 1) = p_p;
  child = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child((uint64_t)&v27, (uint64_t *)&__p);
  v11 = child;
  if (*(char *)(child + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)child, *(_QWORD *)(child + 8));
  }
  else
  {
    v12 = *(_OWORD *)child;
    v25.__r_.__value_.__r.__words[2] = *(_QWORD *)(child + 16);
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v12;
  }
  v13 = operator new();
  boost::multi_index::multi_index_container<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>>,boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::subs::by_name,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,boost::multi_index::member<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>,std::string const,&std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::first>,std::less<std::string>>,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na,mpl_::na>,std::allocator<std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>>>::multi_index_container(v13, *(_QWORD *)(v11 + 24));
  v26 = v13;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v14 = operator new();
  *(_QWORD *)v14 = 0;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  *a2 = v14;
  v15 = *(_QWORD *)(v26 + 8);
  v16 = *(_QWORD *)(v15 + 88);
  if (v16)
    v17 = v16 - 80;
  else
    v17 = 0;
  while (v17 != v15)
  {
    std::pair<std::string const,boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>>::pair[abi:ne180100](&__p, (__int128 *)v17);
    v18 = *(_QWORD *)(v14 + 8);
    if (v18 >= *(_QWORD *)(v14 + 16))
    {
      v20 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v14, &v23);
    }
    else
    {
      if (SHIBYTE(v24) < 0)
      {
        std::string::__init_copy_ctor_external(*(std::string **)(v14 + 8), (const std::string::value_type *)v23, *((std::string::size_type *)&v23 + 1));
      }
      else
      {
        v19 = v23;
        *(_QWORD *)(v18 + 16) = v24;
        *(_OWORD *)v18 = v19;
      }
      v20 = v18 + 24;
      *(_QWORD *)(v14 + 8) = v18 + 24;
    }
    *(_QWORD *)(v14 + 8) = v20;
    boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v23);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v21 = *(_QWORD *)(v17 + 88);
    if (v21)
      v17 = v21 - 80;
    else
      v17 = 0;
  }
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v25);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&v27);
}

void sub_1ADDB2170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree((uint64_t)&__p);
  boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::~basic_ptree(v25 - 80);
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::get_child(uint64_t a1, uint64_t *a2)
{
  _BOOL4 v4;
  std::string *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD v9[3];
  const void *v10[3];
  _BYTE v11[24];
  std::string v12;
  char v13;
  char *v14;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v12, (const std::string::value_type *)*a2, a2[1]);
    v4 = *((char *)a2 + 23) < 0;
  }
  else
  {
    v4 = 0;
    v12 = *(std::string *)a2;
  }
  v13 = *((_BYTE *)a2 + 24);
  v5 = &v12;
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v5 = (std::string *)v12.__r_.__value_.__r.__words[0];
  if (v4)
    v6 = (uint64_t *)*a2;
  else
    v6 = a2;
  v14 = (char *)v5 + a2[4] - (_QWORD)v6;
  v7 = boost::property_tree::basic_ptree<std::string,std::string,std::less<std::string>>::walk_path(a1, (uint64_t)&v12);
  if (!v7)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "No such node");
    boost::property_tree::ptree_bad_path::ptree_bad_path<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>((uint64_t)v11, v10, (__int128 *)a2);
    v9[0] = "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Devel"
            "oper/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/boost/property_t"
            "ree/detail/ptree_implementation.hpp";
    v9[1] = "basic_ptree<K, D, C> &boost::property_tree::basic_ptree<std::string, std::string>::get_child(const path_type"
            " &) [Key = std::string, Data = std::string, KeyCompare = std::less<std::string>]";
    v9[2] = 576;
    boost::throw_exception<boost::property_tree::ptree_bad_path>((uint64_t)v11, (uint64_t)v9);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  return v7;
}

void sub_1ADDB23A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::runtime_error a19, uint64_t a20)
{
  uint64_t v20;

  a19.__vftable = (std::runtime_error_vtbl *)&unk_1E5D29820;
  if (a20)
    (*(void (**)(uint64_t))(*(_QWORD *)a20 + 8))(a20);
  std::runtime_error::~runtime_error(&a19);
  if (a18 < 0)
    operator delete(__p);
  if (*(char *)(v20 - 41) < 0)
    operator delete(*(void **)(v20 - 64));
  _Unwind_Resume(a1);
}

uint64_t quasar::artifact::AppLmArtifact::isAdaptableToSpeechModelVersion(quasar::artifact::AppLmArtifact *a1, const Locale *a2, unsigned __int8 *a3)
{
  quasar::artifact::AppLmArtifactLifeCycleStage *LifeCycleStage;
  BOOL v7;
  quasar::artifact::AppLmArtifactLifeCycleStages *v8;
  int v9;
  uint64_t v10;
  void *v11;
  void *v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  void **v16;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v22;
  _BOOL8 v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  void *v33;
  void *__s1[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  void *v51[2];
  char v52;

  LifeCycleStage = quasar::artifact::AppLmArtifact::getLifeCycleStage(a1);
  if (!quasar::artifact::AppLmArtifactLifeCycleStage::isValid(LifeCycleStage))
    return 0;
  quasar::artifact::Artifact::getLocale(a1, (std::string *)__s1);
  v7 = quasar::Locale::operator!=((quasar::Locale *)__s1, a2);
  if (SHIBYTE(v36) < 0)
    operator delete(*((void **)&v35 + 1));
  if (SBYTE7(v35) < 0)
  {
    operator delete(__s1[0]);
    if (v7)
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v8 = (quasar::artifact::AppLmArtifactLifeCycleStages *)quasar::artifact::AppLmArtifactLifeCycleStage::operator int((uint64_t)LifeCycleStage);
  v9 = (int)v8;
  v10 = quasar::artifact::AppLmArtifactLifeCycleStages::get(v8);
  if (v9 == quasar::artifact::AppLmArtifactLifeCycleStage::operator int(v10 + 320))
  {
    std::string::basic_string[abi:ne180100]<0>(v51, "asr-datapack-version");
    quasar::artifact::Artifact::getInfo((uint64_t)a1, (uint64_t)v51, (std::string *)__s1);
    if ((SBYTE7(v35) & 0x80u) == 0)
      v11 = (void *)BYTE7(v35);
    else
      v11 = __s1[1];
    v12 = (void *)a3[23];
    v13 = (char)v12;
    if ((char)v12 < 0)
      v12 = (void *)*((_QWORD *)a3 + 1);
    if (v11 == v12)
    {
      if (v13 >= 0)
        v14 = a3;
      else
        v14 = *(unsigned __int8 **)a3;
      if ((BYTE7(v35) & 0x80) != 0)
      {
        v33 = __s1[0];
        v23 = memcmp(__s1[0], v14, (size_t)__s1[1]) == 0;
LABEL_43:
        operator delete(v33);
        goto LABEL_45;
      }
      if (!BYTE7(v35))
      {
        v23 = 1;
LABEL_45:
        if (v52 < 0)
          operator delete(v51[0]);
        return v23;
      }
      v15 = BYTE7(v35) - 1;
      v16 = __s1;
      do
      {
        v18 = *(unsigned __int8 *)v16;
        v16 = (void **)((char *)v16 + 1);
        v17 = v18;
        v20 = *v14++;
        v19 = v20;
        v22 = v15-- != 0;
        v23 = v17 == v19;
      }
      while (v17 == v19 && v22);
    }
    else
    {
      v23 = 0;
    }
    if ((BYTE7(v35) & 0x80) == 0)
      goto LABEL_45;
    v33 = __s1[0];
    goto LABEL_43;
  }
  if ((quasar::artifact::AppLmArtifactLifeCycleStage::isAdaptableToArbitraryDatapacks(LifeCycleStage) & 1) == 0)
  {
    if (quasar::gLogLevel >= 2)
    {
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      *(_OWORD *)__s1 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"Unable to determine whether model is adaptable to ", 50);
      v25 = (char)a3[23];
      if (v25 >= 0)
        v26 = (uint64_t)a3;
      else
        v26 = *(_QWORD *)a3;
      if (v25 >= 0)
        v27 = a3[23];
      else
        v27 = *((_QWORD *)a3 + 1);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" ", 1);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"in ", 3);
      v31 = quasar::artifact::operator<<(v30, (uint64_t)LifeCycleStage);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" life cycle stage.", 18);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__s1);
    }
    return 0;
  }
  return 1;
}

void sub_1ADDB2668(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 49) < 0)
    operator delete(*(void **)(v1 - 72));
  _Unwind_Resume(exception_object);
}

uint64_t quasar::artifact::AppLmArtifact::isAdaptableToSpeechModelInfo(quasar::artifact::AppLmArtifact *this, const quasar::SpeechModelInfo *a2)
{
  uint64_t isAdaptableToSpeechModelVersion;
  Locale v6;
  char v7;

  quasar::SpeechModelInfo::getLocale(a2, (std::string *)&v6);
  isAdaptableToSpeechModelVersion = quasar::artifact::AppLmArtifact::isAdaptableToSpeechModelVersion(this, &v6, (unsigned __int8 *)a2);
  if (v7 < 0)
    operator delete(*(void **)&v6.var0.__r_.var0);
  if (*((char *)&v6.var0.__r_.__value_.var0.var1 + 23) < 0)
    operator delete(v6.var0.__r_.__value_.var0.var1.__data_);
  return isAdaptableToSpeechModelVersion;
}

void sub_1ADDB2714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::artifact::AppLmArtifact::isAdaptableToSystemConfig(quasar::artifact::AppLmArtifact *this, const quasar::SystemConfig *a2)
{
  const quasar::SpeechModelInfo *SpeechModelInfo;

  SpeechModelInfo = (const quasar::SpeechModelInfo *)quasar::SystemConfig::getSpeechModelInfo(a2);
  return quasar::artifact::AppLmArtifact::isAdaptableToSpeechModelInfo(this, SpeechModelInfo);
}

BOOL quasar::artifact::AppLmArtifact::isMinimalistic(quasar::artifact::AppLmArtifact *this)
{
  const void ***LifeCycleStage;
  quasar::artifact::AppLmArtifact *v3;
  char **v4;
  quasar::artifact::AppLmArtifact *v5;
  quasar::artifact::AppLmArtifact *v6;
  BOOL v7;
  const void **v8;
  const void ***v9;
  char **v10;
  _BOOL8 result;
  const void **v12;
  const void ***v13;
  uint64_t v14;
  char *v15[2];

  LifeCycleStage = (const void ***)quasar::artifact::AppLmArtifact::getLifeCycleStage(this);
  v3 = (quasar::artifact::AppLmArtifact *)*((_QWORD *)this + 16);
  if (v3 == (quasar::artifact::AppLmArtifact *)((char *)this + 136))
  {
LABEL_9:
    v8 = (const void **)*((_QWORD *)this + 19);
    v9 = (const void ***)((char *)this + 160);
    if (v8 == (const void **)((char *)this + 160))
    {
      return 1;
    }
    else
    {
      do
      {
        quasar::artifact::AppLmArtifactLifeCycleStage::contentKeys(LifeCycleStage, &v14);
        v10 = (char **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v14, v8 + 4);
        std::__tree<std::string>::destroy((uint64_t)&v14, v15[0]);
        result = v15 != v10;
        if (v15 == v10)
          break;
        v12 = (const void **)v8[1];
        if (v12)
        {
          do
          {
            v13 = (const void ***)v12;
            v12 = (const void **)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (const void ***)v8[2];
            v7 = *v13 == v8;
            v8 = (const void **)v13;
          }
          while (!v7);
        }
        v8 = (const void **)v13;
      }
      while (v13 != v9);
    }
  }
  else
  {
    while (1)
    {
      quasar::artifact::AppLmArtifactLifeCycleStage::contentKeys(LifeCycleStage, &v14);
      v4 = (char **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v14, (const void **)v3 + 4);
      std::__tree<std::string>::destroy((uint64_t)&v14, v15[0]);
      if (v15 == v4)
        return 0;
      v5 = (quasar::artifact::AppLmArtifact *)*((_QWORD *)v3 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(quasar::artifact::AppLmArtifact **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (quasar::artifact::AppLmArtifact *)*((_QWORD *)v3 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
      if (v6 == (quasar::artifact::AppLmArtifact *)((char *)this + 136))
        goto LABEL_9;
    }
  }
  return result;
}

void sub_1ADDB28AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  std::__tree<std::string>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void quasar::artifact::AppLmArtifact::minimize(quasar::artifact::AppLmArtifact **this)
{
  const void ***LifeCycleStage;
  quasar::artifact::AppLmArtifact *v3;
  char **v4;
  quasar::artifact::AppLmArtifact *v5;
  quasar::artifact::AppLmArtifact *v6;
  BOOL v7;
  quasar::artifact::AppLmArtifact *v8;
  char **v9;
  quasar::artifact::AppLmArtifact *v10;
  quasar::artifact::AppLmArtifact *v11;
  uint64_t *v12;
  char *v13;
  char **v14;
  uint64_t v15;
  char *v16[2];
  char **v17;
  char *v18[2];

  LifeCycleStage = (const void ***)quasar::artifact::AppLmArtifact::getLifeCycleStage((quasar::artifact::AppLmArtifact *)this);
  v18[0] = 0;
  v18[1] = 0;
  v17 = v18;
  v3 = this[16];
  if (v3 != (quasar::artifact::AppLmArtifact *)(this + 17))
  {
    do
    {
      quasar::artifact::AppLmArtifactLifeCycleStage::contentKeys(LifeCycleStage, &v15);
      v4 = (char **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v15, (const void **)v3 + 4);
      std::__tree<std::string>::destroy((uint64_t)&v15, v16[0]);
      if (v16 == v4)
        quasar::lm::InsertOrDie<std::set<std::string>>((uint64_t **)&v17, (uint64_t)v3 + 32);
      v5 = (quasar::artifact::AppLmArtifact *)*((_QWORD *)v3 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(quasar::artifact::AppLmArtifact **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (quasar::artifact::AppLmArtifact *)*((_QWORD *)v3 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != (quasar::artifact::AppLmArtifact *)(this + 17));
  }
  v8 = this[19];
  if (v8 != (quasar::artifact::AppLmArtifact *)(this + 20))
  {
    do
    {
      quasar::artifact::AppLmArtifactLifeCycleStage::contentKeys(LifeCycleStage, &v15);
      if (v16 == (char **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v15, (const void **)v8 + 4))
      {
        v9 = (char **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v17, (const void **)v8 + 4);
        std::__tree<std::string>::destroy((uint64_t)&v15, v16[0]);
        if (v18 == v9)
          quasar::lm::InsertOrDie<std::set<std::string>>((uint64_t **)&v17, (uint64_t)v8 + 32);
      }
      else
      {
        std::__tree<std::string>::destroy((uint64_t)&v15, v16[0]);
      }
      v10 = (quasar::artifact::AppLmArtifact *)*((_QWORD *)v8 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(quasar::artifact::AppLmArtifact **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (quasar::artifact::AppLmArtifact *)*((_QWORD *)v8 + 2);
          v7 = *(_QWORD *)v11 == (_QWORD)v8;
          v8 = v11;
        }
        while (!v7);
      }
      v8 = v11;
    }
    while (v11 != (quasar::artifact::AppLmArtifact *)(this + 20));
  }
  v12 = (uint64_t *)v17;
  if (v17 != v18)
  {
    do
    {
      quasar::artifact::Artifact::clearContent((uint64_t **)this, (const void **)v12 + 4);
      v13 = (char *)v12[1];
      if (v13)
      {
        do
        {
          v14 = (char **)v13;
          v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (char **)v12[2];
          v7 = *v14 == (char *)v12;
          v12 = (uint64_t *)v14;
        }
        while (!v7);
      }
      v12 = (uint64_t *)v14;
    }
    while (v14 != v18);
  }
  std::__tree<std::string>::destroy((uint64_t)&v17, v18[0]);
}

void sub_1ADDB2ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
  std::__tree<std::string>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

void quasar::artifact::AppLmArtifact::getLmHandle(quasar::artifact::AppLmArtifact *this@<X0>, float a2@<S0>, _QWORD *a3@<X8>)
{
  _BOOL4 hasContent;
  _BOOL4 v7;
  _QWORD *v8;
  void *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  void *v22[2];
  char v23;
  void *__p;
  std::__shared_weak_count *v25;
  char v26;
  uint64_t v27[2];
  std::__shared_weak_count *v28;
  _QWORD *v29;

  std::string::basic_string[abi:ne180100]<0>(&__p, "language-model-fst");
  hasContent = quasar::artifact::Artifact::hasContent((uint64_t)this, (const void **)&__p);
  v7 = hasContent;
  if (v26 < 0)
  {
    operator delete(__p);
    if (!v7)
    {
LABEL_33:
      *a3 = 0;
      return;
    }
  }
  else if (!hasContent)
  {
    goto LABEL_33;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "language-model-fst");
  quasar::artifact::Artifact::getContentAsStream((uint64_t)this, (const void **)&__p, (uint64_t *)&v29);
  if (v26 < 0)
    operator delete(__p);
  v8 = v29;
  std::string::basic_string[abi:ne180100]<0>(v22, "<unspecified>");
  fst::FstReadOptions::FstReadOptions(&__p, v22, 0, 0, 0);
  quasar::readFst(v8, (uint64_t)&__p, v27);
  v9 = (void *)v27[0];
  v27[1] = v27[0];
  if (v27[0])
  {
    v10 = (std::__shared_weak_count *)operator new();
    v11 = v27[0];
    v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45BA0;
    v10->__shared_owners_ = 0;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = (std::__shared_weak_count_vtbl *)v11;
  }
  else
  {
    v10 = 0;
  }
  v28 = v10;
  v27[0] = 0;
  if (v26 < 0)
    operator delete(__p);
  if (v23 < 0)
  {
    operator delete(v22[0]);
    if (!v9)
    {
LABEL_14:
      if (!v10)
        goto LABEL_30;
      goto LABEL_26;
    }
  }
  else if (!v9)
  {
    goto LABEL_14;
  }
  v12 = operator new();
  v13 = (_QWORD *)v12;
  __p = v9;
  v25 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  quasar::FstLmHandle::FstLmHandle(v12, &__p, 0, a2, 1.0);
  v16 = v25;
  if (v25)
  {
    v17 = (unint64_t *)&v25->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *a3 = (char *)v13 + *(_QWORD *)(*v13 - 24);
  v10 = v28;
  if (v28)
  {
LABEL_26:
    v19 = (unint64_t *)&v10->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_30:
  v21 = (uint64_t)v29;
  v29 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (!v9)
    goto LABEL_33;
}

void sub_1ADDB2D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  MEMORY[0x1AF44D190](v21, 0x10A1C4054E493B5);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v22 - 72);
  v24 = *(_QWORD *)(v22 - 56);
  *(_QWORD *)(v22 - 56) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  _Unwind_Resume(a1);
}

void quasar::artifact::AppLmArtifact::~AppLmArtifact(quasar::artifact::AppLmArtifact *this)
{
  quasar::artifact::Artifact::~Artifact(this);
  JUMPOUT(0x1AF44D190);
}

quasar::artifact::AppLmArtifactGlobals *quasar::artifact::AppLmArtifactGlobals::AppLmArtifactGlobals(quasar::artifact::AppLmArtifactGlobals *this)
{
  uint64_t i;
  uint64_t j;
  unint64_t k;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  void *v9[2];
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  void *v14[2];
  char v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  void *v19[2];
  char v20;
  __int128 **v21;
  char v22;
  void *__p[2];
  char v24;
  void *v25[2];
  char v26;
  void *v27[2];
  char v28;
  std::string v29;
  _QWORD v30[3];
  std::string v31;
  uint64_t v32[3];
  std::string v33[2];
  _QWORD v34[4];

  v34[3] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v29, "phrase-count");
  std::string::basic_string[abi:ne180100]<0>(v30, "ngram-count");
  std::string::basic_string[abi:ne180100]<0>(&v31, "language-model-fst");
  std::string::basic_string[abi:ne180100]<0>(v32, "language-model-arpa");
  std::string::basic_string[abi:ne180100]<0>(v33, "oov");
  std::string::basic_string[abi:ne180100]<0>(v34, "custom-prons");
  std::set<std::string>::set[abi:ne180100]((uint64_t)this, (const void **)&v29.__r_.__value_.__l.__data_, 6);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v34[i + 2]) < 0)
      operator delete((void *)v34[i]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v29, "asr-datapack-version");
  std::string::basic_string[abi:ne180100]<0>(v30, "tokenizer-datapack-version");
  std::string::basic_string[abi:ne180100]<0>(&v31, "language-model-weight");
  std::set<std::string>::set[abi:ne180100]((uint64_t)this + 24, (const void **)&v29.__r_.__value_.__l.__data_, 3);
  for (j = 0; j != -9; j -= 3)
  {
    if (SHIBYTE(v31.__r_.__value_.__r.__words[j + 2]) < 0)
      operator delete(*(void **)((char *)&v31.__r_.__value_.__l.__data_ + j * 8));
  }
  std::string::basic_string[abi:ne180100]<0>(v19, "language-model-fst");
  std::string::basic_string[abi:ne180100]<0>(v27, "asr-datapack-version");
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v14[0] = &v16;
  LOBYTE(v14[1]) = 0;
  v16 = (std::string *)operator new(0x18uLL);
  v17 = v16;
  v18 = v16 + 1;
  v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v18, (__int128 *)v27, (__int128 *)&v29, v16);
  std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(&v29, (__int128 *)v19, (__int128 **)&v16);
  std::string::basic_string[abi:ne180100]<0>(v14, "language-model-arpa");
  std::string::basic_string[abi:ne180100]<0>(v25, "asr-datapack-version");
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v9[0] = &v11;
  LOBYTE(v9[1]) = 0;
  v11 = (std::string *)operator new(0x18uLL);
  v12 = v11;
  v13 = v11 + 1;
  v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v13, (__int128 *)v25, (__int128 *)v27, v11);
  std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(&v31, (__int128 *)v14, (__int128 **)&v11);
  std::string::basic_string[abi:ne180100]<0>(v9, "ngram-count");
  std::string::basic_string[abi:ne180100]<0>(__p, "tokenizer-datapack-version");
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v21 = (__int128 **)&v6;
  v22 = 0;
  v6 = (std::string *)operator new(0x18uLL);
  v7 = v6;
  v8 = v6 + 1;
  v7 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v8, (__int128 *)__p, (__int128 *)v25, v6);
  std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v33, (__int128 *)v9, (__int128 **)&v6);
  std::map<std::string,std::vector<std::string>>::map[abi:ne180100]((uint64_t)this + 48, (const void **)&v29.__r_.__value_.__l.__data_, 3);
  for (k = 0; k != -144; k -= 48)
  {
    v21 = (__int128 **)&v34[k / 8];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
    if (SHIBYTE(v33[0].__r_.__value_.__r.__words[k / 8 + 2]) < 0)
      operator delete(v33[k / 0x18].__r_.__value_.__l.__data_);
  }
  v21 = (__int128 **)&v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  if (v24 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  v9[0] = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v9);
  if (v26 < 0)
    operator delete(v25[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  v14[0] = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v14);
  if (v28 < 0)
    operator delete(v27[0]);
  if (v20 < 0)
    operator delete(v19[0]);
  return this;
}

void sub_1ADDB323C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,char *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t *a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t i;

  for (i = 96; i != -48; i -= 48)
    std::pair<std::string,std::vector<std::string>>::~pair(v57 + i);
  a36 = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  if (a43 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  a12 = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (a49 < 0)
    operator delete(a44);
  if (a26 < 0)
    operator delete(a21);
  a21 = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  if (a55 < 0)
    operator delete(a50);
  if (a35 < 0)
    operator delete(a30);
  std::__tree<std::string>::destroy(v56, *(char **)(v55 + 32));
  std::__tree<std::string>::destroy(v55, *(char **)(v55 + 8));
  _Unwind_Resume(a1);
}

void sub_1ADDB33A8()
{
  JUMPOUT(0x1ADDB331CLL);
}

void sub_1ADDB33B4()
{
  JUMPOUT(0x1ADDB332CLL);
}

void sub_1ADDB33C0()
{
  JUMPOUT(0x1ADDB332CLL);
}

void sub_1ADDB33D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  JUMPOUT(0x1ADDB333CLL);
}

void sub_1ADDB33F4()
{
  JUMPOUT(0x1ADDB334CLL);
}

void sub_1ADDB3404()
{
  JUMPOUT(0x1ADDB3388);
}

void sub_1ADDB340C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = 0;
  while (1)
  {
    if (*(char *)(v0 + v1 + 71) < 0)
      operator delete(*(void **)(v0 + v1 + 48));
    v1 -= 24;
    if (v1 == -72)
      JUMPOUT(0x1ADDB3394);
  }
}

void sub_1ADDB3438()
{
  JUMPOUT(0x1ADDB3394);
}

void sub_1ADDB3440()
{
  uint64_t v0;
  uint64_t v1;

  v1 = 0;
  while (1)
  {
    if (*(char *)(v0 + v1 + 143) < 0)
      operator delete(*(void **)(v0 + v1 + 120));
    v1 -= 24;
    if (v1 == -144)
      JUMPOUT(0x1ADDB33A0);
  }
}

void sub_1ADDB346C()
{
  JUMPOUT(0x1ADDB33A0);
}

void sub_1ADDB3474()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1 - 216)
      JUMPOUT(0x1ADDB3394);
  }
}

void sub_1ADDB349C()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1 - 216)
      JUMPOUT(0x1ADDB33A0);
  }
}

std::string *std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, __int128 **a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 1, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return this;
}

void sub_1ADDB353C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,std::vector<std::string>>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 48 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::string>> const&>((uint64_t **)a1, v4, a2, (__int128 *)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_1ADDB35C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t quasar::lm::InsertIfNotPresent<std::map<std::string,std::string>>(uint64_t **a1, __int128 *a2, __int128 *a3)
{
  char v4;
  char v5;
  std::string v7;
  void *__p;
  char v9;

  std::pair<std::string const,std::string>::pair[abi:ne180100]<true,0>(&v7, a2, a3);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(a1, (const void **)&v7.__r_.__value_.__l.__data_, (__int128 *)&v7);
  v5 = v4;
  if (v9 < 0)
    operator delete(__p);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  return v5 & 1;
}

void sub_1ADDB363C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t **a1, const void **a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::pair<std::string const,std::string> const&>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1ADDB3758(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void boost::throw_exception<boost::property_tree::ptree_bad_path>(uint64_t a1, uint64_t a2)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::property_tree::ptree_bad_path>::wrapexcept(exception, a1, a2);
}

void sub_1ADDB37BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::property_tree::ptree_bad_path::ptree_bad_path<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>(uint64_t a1, const void **a2, __int128 *a3)
{
  std::string v6;

  boost::property_tree::detail::prepare_bad_path_what<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>(a2, (uint64_t)a3, &v6);
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v6);
  *(_QWORD *)a1 = &unk_1E5D297F8;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &unk_1E5D29820;
  boost::any::any<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>((uint64_t *)(a1 + 16), a3);
  return a1;
}

void sub_1ADDB3854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::runtime_error *v15;

  std::runtime_error::~runtime_error(v15);
  _Unwind_Resume(a1);
}

void boost::property_tree::ptree_bad_path::~ptree_bad_path(std::runtime_error *this)
{
  std::runtime_error_vtbl *v2;

  this->__vftable = (std::runtime_error_vtbl *)&unk_1E5D29820;
  v2 = this[1].__vftable;
  if (v2)
    (*((void (**)(std::runtime_error_vtbl *))v2->~runtime_error + 1))(v2);
  std::runtime_error::~runtime_error(this);
}

{
  std::runtime_error_vtbl *v2;

  this->__vftable = (std::runtime_error_vtbl *)&unk_1E5D29820;
  v2 = this[1].__vftable;
  if (v2)
    (*((void (**)(std::runtime_error_vtbl *))v2->~runtime_error + 1))(v2);
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t boost::wrapexcept<boost::property_tree::ptree_bad_path>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 32) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  *(_QWORD *)(a1 + 8) = &unk_1E5D29820;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<boost::property_tree::ptree_bad_path>::wrapexcept(uint64_t a1, const std::runtime_error *a2, int8x16_t *a3)
{
  uint64_t v6;

  *(_QWORD *)a1 = &unk_1E5D29898;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 8) = &unk_1E5D29820;
  v6 = (uint64_t)a2[1].__vftable;
  if (v6)
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  *(_QWORD *)a1 = &unk_1E5D293E0;
  *(_QWORD *)(a1 + 8) = &unk_1E5D29410;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = &unk_1E5D29438;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 64) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 48) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

void sub_1ADDB39D8(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<boost::property_tree::ptree_bad_path>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E5D29898;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = &unk_1E5D29820;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_QWORD *)(v2 + 32) = &unk_1E5D29AE0;
  *(_QWORD *)(v2 + 24) = v3;
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 40) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 48);
  *(_DWORD *)(v2 + 64) = *(_DWORD *)(a1 + 64);
  *(_QWORD *)v2 = &unk_1E5D293E0;
  *(_QWORD *)(v2 + 8) = &unk_1E5D29410;
  *(_QWORD *)(v2 + 32) = &unk_1E5D29438;
  boost::exception_detail::copy_boost_exception(v2 + 32, a1 + 32);
  return v2;
}

void sub_1ADDB3AE4(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::runtime_error *v2;
  uint64_t v3;
  uint64_t v5;

  *(_QWORD *)(v1 + 8) = v3 + 16;
  v5 = *(_QWORD *)(v1 + 24);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::runtime_error::~runtime_error(v2);
  MEMORY[0x1AF44D190](v1, 0x10F1C403FF34BC6);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::property_tree::ptree_bad_path>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x48uLL);
  boost::wrapexcept<boost::property_tree::ptree_bad_path>::wrapexcept((uint64_t)exception, a1);
}

void sub_1ADDB3B88(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::property_tree::ptree_bad_path>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 32) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  *(_QWORD *)(a1 + 8) = &unk_1E5D29820;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'boost::wrapexcept<boost::property_tree::ptree_bad_path>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  *(_QWORD *)a1 = &unk_1E5D29820;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  *(_QWORD *)a1 = &unk_1E5D29820;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'boost::wrapexcept<boost::property_tree::ptree_bad_path>::~wrapexcept(_QWORD *a1)
{
  std::runtime_error *v2;
  std::runtime_error_vtbl *v3;

  *a1 = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  *(a1 - 3) = &unk_1E5D29820;
  v2 = (std::runtime_error *)(a1 - 3);
  v3 = v2[1].__vftable;
  if (v3)
    (*((void (**)(std::runtime_error_vtbl *))v3->~runtime_error + 1))(v3);
  std::runtime_error::~runtime_error(v2);
}

{
  uint64_t v2;

  *a1 = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  *(a1 - 3) = &unk_1E5D29820;
  v2 = *(a1 - 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 - 3));
  JUMPOUT(0x1AF44D190);
}

uint64_t boost::wrapexcept<boost::property_tree::ptree_bad_path>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)a1 = &unk_1E5D29898;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &unk_1E5D29820;
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = &unk_1E5D29AE0;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  v6 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v6;
  *(_QWORD *)a1 = &unk_1E5D293E0;
  *(_QWORD *)(a1 + 8) = &unk_1E5D29410;
  *(_QWORD *)(a1 + 32) = &unk_1E5D29438;
  return a1;
}

void sub_1ADDB3ED4(_Unwind_Exception *a1)
{
  std::runtime_error *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  *(_QWORD *)(v2 + 8) = v3 + 16;
  v5 = *(_QWORD *)(v2 + 24);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::property_tree::detail::prepare_bad_path_what<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>(const void **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  size_t v6;
  std::string *v7;
  const void *v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::string __p;
  std::string v15;
  std::string v16;

  if (*((char *)a1 + 23) >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (size_t)a1[1];
  v7 = &v15;
  std::string::basic_string[abi:ne180100]((uint64_t)&v15, v6 + 2);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a1 + 23) >= 0)
      v8 = a1;
    else
      v8 = *a1;
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, " (");
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v11 = std::string::append(&v15, (const std::string::value_type *)p_p, size);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v16, ")");
  *a3 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_1ADDB406C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *boost::any::any<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;

  v4 = operator new();
  boost::any::holder<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>::holder(v4, a2);
  *a1 = v4;
  return a1;
}

void sub_1ADDB410C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1093C40E70F46F0);
  _Unwind_Resume(a1);
}

uint64_t boost::any::holder<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>::holder(uint64_t a1, __int128 *a2)
{
  _OWORD *v4;
  __int128 v5;
  const std::string::value_type *v6;

  *(_QWORD *)a1 = &unk_1E5D29A38;
  v4 = (_OWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *v4 = v5;
  }
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 24);
  if (*(char *)(a1 + 31) < 0)
    v4 = *(_OWORD **)v4;
  *(_QWORD *)(a1 + 40) = v4;
  if (*((char *)a2 + 23) >= 0)
    v6 = (const std::string::value_type *)a2;
  else
    v6 = *(const std::string::value_type **)a2;
  *(_QWORD *)(a1 + 40) = (char *)v4 + *((_QWORD *)a2 + 4) - (_QWORD)v6;
  return a1;
}

uint64_t boost::any::holder<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>::~holder(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void boost::any::holder<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>::~holder(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1AF44D190);
}

void *boost::any::holder<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>::type()
{
}

uint64_t boost::any::holder<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>::clone(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  boost::any::holder<boost::property_tree::string_path<std::string,boost::property_tree::id_translator<std::string>>>::holder(v2, (__int128 *)(a1 + 8));
  return v2;
}

void sub_1ADDB4290(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1093C40E70F46F0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1ADDB43E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1ADDB44F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t Discount::estimate()
{
  return 1;
}

double WittenBell::discount(WittenBell *this, double a2, double a3, unint64_t a4)
{
  double result;

  result = 1.0;
  if (a2 > 0.0)
  {
    result = 0.0;
    if (*((double *)this + 4) <= a2)
      return a3 / ((double)a4 + a3);
  }
  return result;
}

uint64_t WittenBell::estimate()
{
  return 1;
}

{
  return 1;
}

double ConstDiscount::discount(ConstDiscount *this, double a2, double a3)
{
  double result;
  double v5;

  result = 1.0;
  if (a2 > 0.0)
  {
    result = 0.0;
    if (*((double *)this + 5) <= a2)
    {
      v5 = *((double *)this + 4);
      if (v5 <= a2)
        return (a2 - v5) / a2;
    }
  }
  return result;
}

uint64_t ConstDiscount::estimate()
{
  return 1;
}

uint64_t quasar::rescoring::extractSurfaceFormFromNBestListEntry(_DWORD *a1, uint64_t a2, const char *a3)
{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  unsigned int *v14;
  void **v15;
  void *v16;
  _QWORD v18[11];
  char v19;
  uint64_t v20;
  void *__dst[2];
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  v8 = *a1;
  v7 = (char *)(a1 + 1);
  v6 = v8;
  if (v8)
  {
    v9 = 4 * v6;
    do
    {
      v10 = *(unsigned int *)v7;
      v11 = (char *)v18 + *(_QWORD *)(v18[0] - 24);
      if ((v11[32] & 5) == 0)
      {
        (*(void (**)(void **__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v11 + 5) + 32))(__dst, *((_QWORD *)v11 + 5), 0, 1, 16);
        if (v23 >= 1)
        {
          v12 = strlen(a3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)a3, v12);
        }
      }
      v13 = *(_QWORD *)(a2 + 24);
      if (!v13)
        std::__throw_bad_function_call[abi:ne180100]();
      v14 = (unsigned int *)(*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v13 + 48))(v13, &v7[v10]);
      if (v14)
      {
        std::string::basic_string[abi:ne180100](__dst, v14 + 1, *v14);
        v15 = (v22 & 0x80u) == 0 ? __dst : (void **)__dst[0];
        v16 = (v22 & 0x80u) == 0 ? (void *)v22 : __dst[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v15, (uint64_t)v16);
        if ((char)v22 < 0)
          operator delete(__dst[0]);
      }
      v7 += 4;
      v9 -= 4;
    }
    while (v9);
  }
  std::stringbuf::str();
  v18[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v18[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v20);
}

void sub_1ADDB4810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *quasar::rescoring::extractPreItnFromNBestListEntry@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int16 *v2;
  uint64_t v3;
  _DWORD *v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v2 < 9u)
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
  v3 = v2[4];
  if (!v3)
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
  v4 = (int *)((char *)a1 + v3 + *(unsigned int *)((char *)a1 + v3));
  v7[0] = &unk_1E5D3CE30;
  v7[1] = quasar::rescoring::NBestListToken::text;
  v7[2] = 0;
  v8 = v7;
  quasar::rescoring::extractSurfaceFormFromNBestListEntry(v4, (uint64_t)v7, " ");
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_1ADDB495C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::rescoring::extractPostItnFromNBestListEntry@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int16 *v2;
  uint64_t v3;
  _DWORD *v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v2 < 0xBu)
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
  v3 = v2[5];
  if (!v3)
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
  v4 = (int *)((char *)a1 + v3 + *(unsigned int *)((char *)a1 + v3));
  v7[0] = &unk_1E5D3CE30;
  v7[1] = quasar::rescoring::NBestListToken::text;
  v7[2] = 0;
  v8 = v7;
  quasar::rescoring::extractSurfaceFormFromNBestListEntry(v4, (uint64_t)v7, " ");
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_1ADDB4A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t quasar::rescoring::NBestListIterator::iterateWithCallback(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  do
  {
    v4 = (**(uint64_t (***)(uint64_t))a1)(a1);
    if (!v4)
      break;
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    v6 = *(_QWORD *)(a2 + 24);
    if (!v6)
      std::__throw_bad_function_call[abi:ne180100]();
  }
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, v5) & 1) != 0);
  return v4 ^ 1u;
}

uint64_t quasar::rescoring::MultiSourceNBestListBuilder::addResultChoices(uint64_t a1, uint64_t **a2, int a3)
{
  return quasar::rescoring::MultiSourceNBestListBuilder::addResultChoices<std::__wrap_iter<std::vector<quasar::Token> const*>>(a1, *a2, a2[1], a3);
}

uint64_t quasar::rescoring::MultiSourceNBestListBuilder::finalizeAndReturnNBestList(uint64_t a1, uint64_t a2)
{
  flatbuffers_2_0_6::FlatBufferBuilder *v4;
  int v5;
  const char *v6;
  unint64_t v7;
  int String;
  uint64_t v9;
  void *v10;
  int v11;
  flatbuffers_2_0_6::FlatBufferBuilder *v12;
  char v13;
  const char *v14;
  unint64_t v15;
  int v16;
  int v17;
  char v18;
  const char *v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t result;

  v4 = *(flatbuffers_2_0_6::FlatBufferBuilder **)a1;
  v5 = *(char *)(a1 + 71);
  if (v5 >= 0)
    v6 = (const char *)(a1 + 48);
  else
    v6 = *(const char **)(a1 + 48);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 71);
  else
    v7 = *(_QWORD *)(a1 + 56);
  String = flatbuffers_2_0_6::FlatBufferBuilder::CreateString(*(flatbuffers_2_0_6::FlatBufferBuilder **)a1, v6, v7);
  v9 = *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72);
  if (v9)
    v10 = *(void **)(a1 + 72);
  else
    v10 = &flatbuffers_2_0_6::data<flatbuffers_2_0_6::Offset<quasar::rescoring::NBestListEntry>,std::allocator<flatbuffers_2_0_6::Offset<quasar::rescoring::NBestListEntry>>>(std::vector<flatbuffers_2_0_6::Offset<quasar::rescoring::NBestListEntry>> const&)::t;
  v11 = flatbuffers_2_0_6::FlatBufferBuilder::CreateVector<quasar::rescoring::NBestListToken>(*(flatbuffers_2_0_6::FlatBufferBuilder **)a1, (uint64_t)v10, v9 >> 2);
  if (a2)
  {
    v12 = *(flatbuffers_2_0_6::FlatBufferBuilder **)a1;
    v13 = *(_BYTE *)(a2 + 23);
    if (v13 < 0)
    {
      if (*(_QWORD *)(a2 + 8))
        goto LABEL_13;
    }
    else if (*(_BYTE *)(a2 + 23))
    {
LABEL_13:
      if (v13 >= 0)
        v14 = (const char *)a2;
      else
        v14 = *(const char **)a2;
      if (v13 >= 0)
        v15 = *(unsigned __int8 *)(a2 + 23);
      else
        v15 = *(_QWORD *)(a2 + 8);
      v16 = flatbuffers_2_0_6::FlatBufferBuilder::CreateString(*(flatbuffers_2_0_6::FlatBufferBuilder **)a1, v14, v15);
LABEL_23:
      v18 = *(_BYTE *)(a2 + 47);
      if (v18 < 0)
      {
        if (*(_QWORD *)(a2 + 32))
          goto LABEL_25;
      }
      else if (*(_BYTE *)(a2 + 47))
      {
LABEL_25:
        if (v18 >= 0)
          v19 = (const char *)(a2 + 24);
        else
          v19 = *(const char **)(a2 + 24);
        if (v18 >= 0)
          v20 = *(unsigned __int8 *)(a2 + 47);
        else
          v20 = *(_QWORD *)(a2 + 32);
        v21 = flatbuffers_2_0_6::FlatBufferBuilder::CreateString(v12, v19, v20);
        goto LABEL_34;
      }
      v21 = 0;
LABEL_34:
      *((_BYTE *)v12 + 78) = 1;
      v22 = *((_DWORD *)v12 + 10);
      flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((char *)v12, 6, v21);
      flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((char *)v12, 4, v16);
      v17 = flatbuffers_2_0_6::FlatBufferBuilder::EndTable(v12, v22);
      goto LABEL_35;
    }
    v16 = 0;
    goto LABEL_23;
  }
  v17 = 0;
LABEL_35:
  *((_BYTE *)v4 + 78) = 1;
  v23 = *((_DWORD *)v4 + 10);
  flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((char *)v4, 8, v17);
  flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((char *)v4, 6, v11);
  flatbuffers_2_0_6::FlatBufferBuilder::AddOffset<flatbuffers_2_0_6::String>((char *)v4, 4, String);
  v24 = flatbuffers_2_0_6::FlatBufferBuilder::EndTable(v4, v23);
  flatbuffers_2_0_6::FlatBufferBuilder::Finish(v4, v24, 0, 0);
  result = *(_QWORD *)(*(_QWORD *)a1 + 56) + **(unsigned int **)(*(_QWORD *)a1 + 56);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 72);
  return result;
}

uint64_t quasar::rescoring::createJSONResultNBestListIterator@<X0>(const quasar::SystemConfig *a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, const void ***a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t result;

  v12 = operator new();
  result = quasar::rescoring::JSONResultNBestListIterator::JSONResultNBestListIterator(v12, a1, a2, a3, a4, a5);
  *a6 = v12;
  return result;
}

void sub_1ADDB4DBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40B806F0A4);
  _Unwind_Resume(a1);
}

_QWORD *quasar::rescoring::NBestListIterator::NBestListIterator(_QWORD *a1, const void ***a2, __int128 *a3)
{
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  *a1 = &unk_1E5D3C2A0;
  v5 = (std::string *)(a1 + 4);
  std::set<std::string>::set[abi:ne180100](a1 + 1, a2);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v7 = (std::string *)(a1 + 7);
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v8 = *(__int128 *)((char *)a3 + 24);
    a1[9] = *((_QWORD *)a3 + 5);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return a1;
}

void sub_1ADDB4E80(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v3);
  std::__tree<std::string>::destroy(v2, *(char **)(v1 + 16));
  _Unwind_Resume(a1);
}

std::string *quasar::rescoring::ItnMixIn::ItnMixIn(std::string *this, const quasar::SystemConfig *a2, __int128 *a3, uint64_t a4)
{
  __int128 v7;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  quasar::InverseTextNormalizer::InverseTextNormalizer((quasar::InverseTextNormalizer *)&this[2]);
  quasar::InverseTextNormalizer::init<quasar::SystemConfig const,true>(&this[2], a2, a4);
  return this;
}

void sub_1ADDB4F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  quasar::InverseTextNormalizer *v11;

  quasar::InverseTextNormalizer::~InverseTextNormalizer(v11);
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(a1);
}

void quasar::rescoring::ItnMixIn::~ItnMixIn(void **this)
{
  void **v2;

  quasar::InverseTextNormalizer::~InverseTextNormalizer((quasar::InverseTextNormalizer *)(this + 6));
  v2 = this + 3;
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void quasar::rescoring::NBestListIterator::~NBestListIterator(quasar::rescoring::NBestListIterator *this)
{
  *(_QWORD *)this = &unk_1E5D3C2A0;
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  std::__tree<std::string>::destroy((uint64_t)this + 8, *((char **)this + 2));
}

BOOL quasar::rescoring::NBestListIterator::shouldConsiderUtterance(uint64_t a1, const void **a2)
{
  return !*(_QWORD *)(a1 + 24)
      || a1 + 16 != std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 8, a2);
}

void quasar::InverseTextNormalizer::init<quasar::SystemConfig const,true>(_DWORD *a1, const quasar::SystemConfig *a2, uint64_t a3)
{
  _BYTE v5[1544];

  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v5, a2, 1, 1);
  quasar::InverseTextNormalizer::init(a1, (uint64_t)v5, a3);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v5);
}

void sub_1ADDB50BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)va);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::KaldiObjectHolder<quasar::KaldiString>::~KaldiObjectHolder(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    MEMORY[0x1AF44D190](v2, 0x1012C40EC159624);
  }
  return a1;
}

uint64_t kaldi::KaldiObjectHolder<quasar::KaldiString>::Value(uint64_t *a1)
{
  uint64_t result;
  _QWORD v2[34];

  result = *a1;
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "KaldiObjectHolder::Value() called wrongly.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return result;
}

_QWORD *kaldi::KaldiObjectHolder<quasar::KaldiString>::Clear(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = *result;
  if (*result)
  {
    v2 = result;
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    result = (_QWORD *)MEMORY[0x1AF44D190](v1, 0x1012C40EC159624);
    *v2 = 0;
  }
  return result;
}

uint64_t kaldi::KaldiObjectHolder<quasar::KaldiString>::Read(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD v7[34];
  unsigned __int8 v8;

  v4 = *a1;
  if (*a1)
  {
    if (*(char *)(v4 + 23) < 0)
      operator delete(*(void **)v4);
    MEMORY[0x1AF44D190](v4, 0x1012C40EC159624);
  }
  v5 = (_QWORD *)operator new();
  v5[1] = 0;
  v5[2] = 0;
  *v5 = 0;
  *a1 = (uint64_t)v5;
  v8 = 0;
  if ((kaldi::InitKaldiInputStream((uint64_t)a2, &v8) & 1) != 0)
  {
    quasar::KaldiString::Read(*a1, a2, v8);
    return 1;
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Reading Table object, failed reading binary header\n", 51);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    }
    return 0;
  }
}

void sub_1ADDB52C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

_QWORD *quasar::KaldiString::Read(uint64_t a1, _QWORD *a2, int a3)
{
  const std::locale::facet *v5;
  unsigned __int8 v6;
  _QWORD *result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  if (a3)
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v8, "KaldiString does not support binary format");
    goto LABEL_6;
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v5 = std::locale::use_facet((const std::locale *)&v8, MEMORY[0x1E0DE4A90]);
  v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale((std::locale *)&v8);
  result = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, a1, v6);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v8 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v8, "Error reading KaldiString from stream.");
LABEL_6:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v8);
  }
  return result;
}

void sub_1ADDB5574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::rescoring::JSONResultNBestListIterator::JSONResultNBestListIterator(uint64_t a1, const quasar::SystemConfig *a2, __int128 *a3, __int128 *a4, const void ***a5, uint64_t a6)
{
  char **v13;
  char *v14[2];
  void *v15[2];
  char v16;
  char v17;
  std::string v18;
  std::string __p;

  if (*(char *)(a6 + 23) < 0)
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
  else
    v18 = *(std::string *)a6;
  if (*(char *)(a6 + 47) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a6 + 24), *(_QWORD *)(a6 + 32));
  else
    __p = *(std::string *)(a6 + 24);
  quasar::rescoring::NBestListIterator::NBestListIterator((_QWORD *)a1, a5, (__int128 *)&v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v15, "text-proc.itn2.default");
  quasar::rescoring::ItnMixIn::ItnMixIn((std::string *)(a1 + 80), a2, a3, (uint64_t)v15);
  if (v16 < 0)
    operator delete(v15[0]);
  *(_QWORD *)a1 = &unk_1E5D3C308;
  quasar::filesystem::Path::Path(v15, a4);
  v14[0] = 0;
  v14[1] = 0;
  v13 = v14;
  quasar::createJSONResultRecognitionResultIterator((kaldi::quasar::Vocab *)v15, (const void ***)&v13, (uint64_t *)(a1 + 912));
  std::__tree<std::string>::destroy((uint64_t)&v13, v14[0]);
  v15[0] = &unk_1E5D343A0;
  if (v17 < 0)
    operator delete(v15[1]);
  *(_QWORD *)(a1 + 920) = 0;
  *(_BYTE *)(a1 + 928) = 0;
  *(_QWORD *)(a1 + 936) = 1024;
  *(_OWORD *)(a1 + 944) = xmmword_1AE180500;
  *(_DWORD *)(a1 + 960) = 0;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_QWORD *)(a1 + 1000) = 1;
  *(_WORD *)(a1 + 1008) = 256;
  *(_QWORD *)(a1 + 1016) = 0;
  return a1;
}

void sub_1ADDB573C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, void *a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1ADDB57C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  std::pair<std::string,std::string>::~pair((uint64_t)va);
  JUMPOUT(0x1ADDB57BCLL);
}

uint64_t quasar::rescoring::JSONResultNBestListIterator::hasNext(quasar::rescoring::JSONResultNBestListIterator *this)
{
  return (***((uint64_t (****)(_QWORD))this + 114))(*((_QWORD *)this + 114));
}

uint64_t quasar::rescoring::JSONResultNBestListIterator::next(quasar::rescoring::JSONResultNBestListIterator *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v7[3];
  _QWORD *v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!(**(unsigned int (***)(quasar::rescoring::JSONResultNBestListIterator *))this)(this))
    return 0;
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 114) + 8))(*((_QWORD *)this + 114));
  v7[0] = &off_1E5D3F140;
  v7[1] = (char *)this + 80;
  v8 = v7;
  v9 = 1;
  v3 = quasar::rescoring::convertResultChoicesToNBestList((std::string::size_type)this + 920, (__int128 *)v2, (uint64_t **)(v2 + 24), (uint64_t)this + 32, (uint64_t)v7);
  if (v9)
  {
    v4 = v8;
    if (v8 == v7)
    {
      v5 = 4;
      v4 = v7;
      goto LABEL_8;
    }
    if (v8)
    {
      v5 = 5;
LABEL_8:
      (*(void (**)(void))(*v4 + 8 * v5))();
    }
  }
  return v3;
}

void sub_1ADDB58D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _QWORD *v13;

  if (a13)
    quasar::rescoring::JSONResultNBestListIterator::next(v13, &a9);
  _Unwind_Resume(exception_object);
}

void quasar::rescoring::JSONResultNBestListIterator::~JSONResultNBestListIterator(quasar::rescoring::JSONResultNBestListIterator *this)
{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = &unk_1E5D3C308;
  flatbuffers_2_0_6::FlatBufferBuilder::~FlatBufferBuilder((quasar::rescoring::JSONResultNBestListIterator *)((char *)this + 920));
  v2 = *((_QWORD *)this + 114);
  *((_QWORD *)this + 114) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  quasar::InverseTextNormalizer::~InverseTextNormalizer((quasar::rescoring::JSONResultNBestListIterator *)((char *)this + 128));
  v3 = (void **)((char *)this + 104);
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  quasar::rescoring::NBestListIterator::~NBestListIterator(this);
}

{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = &unk_1E5D3C308;
  flatbuffers_2_0_6::FlatBufferBuilder::~FlatBufferBuilder((quasar::rescoring::JSONResultNBestListIterator *)((char *)this + 920));
  v2 = *((_QWORD *)this + 114);
  *((_QWORD *)this + 114) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  quasar::InverseTextNormalizer::~InverseTextNormalizer((quasar::rescoring::JSONResultNBestListIterator *)((char *)this + 128));
  v3 = (void **)((char *)this + 104);
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  quasar::rescoring::NBestListIterator::~NBestListIterator(this);
  MEMORY[0x1AF44D190]();
}

uint64_t quasar::rescoring::convertResultChoicesToNBestList(std::string::size_type a1, __int128 *a2, uint64_t **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  std::string::size_type *p_size;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _BYTE v16[24];
  _BYTE *v17;
  char v18;
  std::string v19;
  std::string *v20;
  char v21;
  void *v22;
  char v23;
  void *__p;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  std::__optional_copy_base<std::function<std::vector<quasar::Token> ()(std::vector<quasar::Token> const&)>,false>::__optional_copy_base[abi:ne180100](v16, a5);
  quasar::rescoring::MultiSourceNBestListBuilder::MultiSourceNBestListBuilder(&v19, a1, a2, (uint64_t)v16);
  v9 = quasar::rescoring::MultiSourceNBestListBuilder::addResultChoices<std::__wrap_iter<std::vector<quasar::Token> const*>>((uint64_t)&v19, *a3, a3[1], 0);
  v10 = quasar::rescoring::MultiSourceNBestListBuilder::finalizeAndReturnNBestList(v9, a4);
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
  if (v23 < 0)
    operator delete(v22);
  if (v21)
  {
    p_size = (std::string::size_type *)v20;
    if (v20 == (std::string *)&v19.__r_.__value_.__r.__words[1])
    {
      v12 = 4;
      p_size = &v19.__r_.__value_.__l.__size_;
    }
    else
    {
      if (!v20)
        goto LABEL_11;
      v12 = 5;
    }
    (*(void (**)(void))(*p_size + 8 * v12))();
  }
LABEL_11:
  if (v18)
  {
    v13 = v17;
    if (v17 == v16)
    {
      v14 = 4;
      v13 = v16;
      goto LABEL_16;
    }
    if (v17)
    {
      v14 = 5;
LABEL_16:
      (*(void (**)(void))(*v13 + 8 * v14))();
    }
  }
  return v10;
}

void sub_1ADDB5B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17)
{
  if (a13)
    quasar::rescoring::convertResultChoicesToNBestList(&a9);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<quasar::rescoring::JSONResultNBestListIterator::next(void)::{lambda(std::vector<quasar::Token> const&)#1},std::allocator<quasar::rescoring::JSONResultNBestListIterator::next(void)::{lambda(std::vector<quasar::Token> const&)#1}>,std::vector<quasar::Token> ()(std::vector<quasar::Token> const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::rescoring::JSONResultNBestListIterator::next(void)::{lambda(std::vector<quasar::Token> const&)#1},std::allocator<quasar::rescoring::JSONResultNBestListIterator::next(void)::{lambda(std::vector<quasar::Token> const&)#1}>,std::vector<quasar::Token> ()(std::vector<quasar::Token> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3F140;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::rescoring::JSONResultNBestListIterator::next(void)::{lambda(std::vector<quasar::Token> const&)#1},std::allocator<quasar::rescoring::JSONResultNBestListIterator::next(void)::{lambda(std::vector<quasar::Token> const&)#1}>,std::vector<quasar::Token> ()(std::vector<quasar::Token> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3F140;
  a2[1] = v2;
  return result;
}

void std::__function::__func<quasar::rescoring::JSONResultNBestListIterator::next(void)::{lambda(std::vector<quasar::Token> const&)#1},std::allocator<quasar::rescoring::JSONResultNBestListIterator::next(void)::{lambda(std::vector<quasar::Token> const&)#1}>,std::vector<quasar::Token> ()(std::vector<quasar::Token> const&)>::operator()(uint64_t a1@<X0>, __int128 **a2@<X1>, uint64_t *a3@<X8>)
{
  quasar::InverseTextNormalizer::run((int *)(*(_QWORD *)(a1 + 8) + 48), a2, (uint64_t *)(*(_QWORD *)(a1 + 8) + 24), *(const void ***)(a1 + 8), 255, a3);
}

uint64_t std::__function::__func<quasar::rescoring::JSONResultNBestListIterator::next(void)::{lambda(std::vector<quasar::Token> const&)#1},std::allocator<quasar::rescoring::JSONResultNBestListIterator::next(void)::{lambda(std::vector<quasar::Token> const&)#1}>,std::vector<quasar::Token> ()(std::vector<quasar::Token> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::rescoring::JSONResultNBestListIterator::next(void)::{lambda(std::vector<quasar::Token> const&)#1},std::allocator<quasar::rescoring::JSONResultNBestListIterator::next(void)::{lambda(std::vector<quasar::Token> const&)#1}>,std::vector<quasar::Token> ()(std::vector<quasar::Token> const&)>::target_type()
{
}

kaldi::nnet1::ScaledDotAttention *kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, const kaldi::nnet1::ScaledDotAttention *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *((_QWORD *)a2 + 1);
  *(_QWORD *)this = v5;
  *(_QWORD *)((char *)this + *(_QWORD *)(v5 - 40)) = *((_QWORD *)a2 + 2);
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)) = *((_QWORD *)a2 + 3);
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = *((_QWORD *)a2 + 4);
  v6 = *(_QWORD *)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v6 - 40)) = *((_QWORD *)a2 + 5);
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)) = *((_QWORD *)a2 + 6);
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = *((_QWORD *)a2 + 7);
  *((_QWORD *)this + 1) = &unk_1E5D34170;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  v7 = *(_BYTE *)(a3 + 104);
  v8 = *(_DWORD *)(a3 + 108);
  *((_OWORD *)this + 7) = 0u;
  v9 = (uint64_t *)((char *)this + 112);
  *((_QWORD *)this + 7) = &unk_1E5D34170;
  *((_BYTE *)this + 48) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 104) = v7;
  *((_DWORD *)this + 27) = v8;
  *((_OWORD *)this + 8) = 0u;
  v10 = *(_QWORD *)(a3 + 112);
  if (v10)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    v12 = *v9;
    *v9 = v11;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = *(_QWORD *)(a3 + 120);
  if (v13)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
    v15 = *((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = v14;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  v16 = *(_QWORD *)(a3 + 128);
  if (v16)
  {
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    v18 = *((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v17;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = *(_QWORD *)(a3 + 136);
  if (v19)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
    v21 = *((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = v20;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  return this;
}

void sub_1ADDB5DF8(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *((_QWORD *)v1 + 17);
  *((_QWORD *)v1 + 17) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)v1 + 16);
  *((_QWORD *)v1 + 16) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)v1 + 15);
  *((_QWORD *)v1 + 15) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *v4;
  *v4 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  kaldi::CuMatrix<float>::~CuMatrix(v3);
  kaldi::CuMatrix<float>::~CuMatrix(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

kaldi::nnet1::ScaledDotAttention *kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, const kaldi::nnet1::ScaledDotAttention *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)(*(_QWORD *)a2 - 40);
  *((_QWORD *)this + 18) = &off_1E5D2E280;
  *((_QWORD *)this + 19) = *(_QWORD *)((char *)a2 + v4 + 8);
  *((_WORD *)this + 80) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 24) = &off_1E5D2E350;
  *(_QWORD *)this = &off_1E5D2E150;
  *((_QWORD *)this + 1) = &unk_1E5D34170;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_BYTE *)this + 48) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 7) = &unk_1E5D34170;
  *((_BYTE *)this + 96) = 0;
  LOBYTE(v4) = *((_BYTE *)a2 + 104);
  v5 = *((_DWORD *)a2 + 27);
  *((_OWORD *)this + 7) = 0u;
  v6 = (uint64_t *)((char *)this + 112);
  *((_BYTE *)this + 104) = v4;
  *((_DWORD *)this + 27) = v5;
  *((_OWORD *)this + 8) = 0u;
  v7 = *((_QWORD *)a2 + 14);
  if (v7)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    v9 = *v6;
    *v6 = v8;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  v10 = *((_QWORD *)a2 + 15);
  if (v10)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    v12 = *((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = v11;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  v13 = *((_QWORD *)a2 + 16);
  if (v13)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
    v15 = *((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v14;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  v16 = *((_QWORD *)a2 + 17);
  if (v16)
  {
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    v18 = *((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = v17;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  return this;
}

void sub_1ADDB6018(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  kaldi::nnet1::Component *v2;
  quasar::Bitmap *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = *((_QWORD *)v1 + 17);
  *((_QWORD *)v1 + 17) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)v1 + 16);
  *((_QWORD *)v1 + 16) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)v1 + 15);
  *((_QWORD *)v1 + 15) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *v6;
  *v6 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  kaldi::CuMatrix<float>::~CuMatrix(v5);
  kaldi::CuMatrix<float>::~CuMatrix(v4);
  quasar::Bitmap::~Bitmap(v1);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::nnet1::ScaledDotAttention::Copy(kaldi::nnet1::ScaledDotAttention *this, int a2)
{
  kaldi::nnet1::ScaledDotAttention *v4;
  kaldi::nnet1::ScaledDotAttention *v5;
  char *v6;
  char v7;
  int v8;
  _QWORD *result;

  v4 = (kaldi::nnet1::ScaledDotAttention *)operator new();
  v5 = v4;
  if (a2)
  {
    v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 40);
    v7 = *((_BYTE *)this + 104);
    v8 = *((_DWORD *)this + 27);
    *((_QWORD *)v4 + 18) = &off_1E5D2E280;
    result = (_QWORD *)((char *)v4 + 144);
    *((_QWORD *)v5 + 19) = *((_QWORD *)v6 + 1);
    *((_WORD *)v5 + 80) = 0;
    *((_QWORD *)v5 + 21) = 0;
    *((_QWORD *)v5 + 22) = 0;
    *((_QWORD *)v5 + 23) = 0;
    *((_QWORD *)v5 + 24) = &off_1E5D2E350;
    *((_OWORD *)v5 + 1) = 0u;
    *((_OWORD *)v5 + 2) = 0u;
    *(_QWORD *)v5 = &off_1E5D2E150;
    *((_QWORD *)v5 + 1) = &unk_1E5D34170;
    *((_BYTE *)v5 + 48) = 0;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_QWORD *)v5 + 7) = &unk_1E5D34170;
    *((_BYTE *)v5 + 96) = 0;
    *((_BYTE *)v5 + 104) = v7;
    *((_DWORD *)v5 + 27) = v8;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 8) = 0u;
  }
  else
  {
    kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(v4, this);
    return (_QWORD *)((char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 40));
  }
  return result;
}

void sub_1ADDB61A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A1C406D10C96CLL);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::ScaledDotAttention::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 v8;
  _BYTE v9[48];

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  if (*(_QWORD *)(a1 + 136))
  {
    v8 = kaldi::CuMatrix<float>::CuMatrix(v9, a3, 111);
    (*(void (**)(_QWORD, _BYTE *, uint64_t, uint64_t, __n128))(**(_QWORD **)(a1 + 136) + 112))(*(_QWORD *)(a1 + 136), v9, a3, a4, v8);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v9);
  }
  if (*(_BYTE *)(a1 + 104))
    kaldi::CuMatrixBase<float>::AddMat(a3, a2, 111, 1.0, 1.0);
}

void sub_1ADDB6264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::ScaledDotAttention::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::ScaledDotAttention::PropagateFnc((uint64_t)a1 + *(_QWORD *)(*a1 - 128), a2, a3, a4);
}

int *kaldi::nnet1::ScaledDotAttention::SetKeyValueStates(int32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int32x2_t v9;
  uint64_t v10;
  int32x2_t v11;
  int32x2_t v13;
  uint64_t v14;
  int v15;
  int32x2_t *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD v21[34];

  v6 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v6 != *(_DWORD *)(a3 + 20))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Mismatch in number of key and value pairs in ScaledDotAttention, got ", 69);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" keys and ", 10);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, " values");
    goto LABEL_20;
  }
  v9 = a1[15];
  v10 = *(unsigned int *)(a2 + 16);
  if (v9)
  {
    if ((_DWORD)v10 == *(_DWORD *)(*(_QWORD *)&v9 + 8))
    {
      kaldi::CuMatrix<float>::Resize(a1 + 1, v6, *(unsigned int *)(*(_QWORD *)&v9 + 12), 0, 0);
      (*(void (**)(_QWORD, uint64_t, int32x2_t *, uint64_t))(**(_QWORD **)&a1[15] + 112))(*(_QWORD *)&a1[15], a2, a1 + 1, a4);
      goto LABEL_7;
    }
LABEL_16:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Mismatch of key matrix input in ScaledDotAttention, expected ", 61);
    v19 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", but got ", 10);
    std::ostream::operator<<();
    goto LABEL_20;
  }
  if ((_DWORD)v10 != *(_DWORD *)(*(_QWORD *)&a1[14] + 12))
    goto LABEL_16;
  kaldi::CuMatrix<float>::Resize(a1 + 1, v6, v10, 0, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&a1[1], a2, 111);
LABEL_7:
  v11 = a1[16];
  if (v11)
  {
    if (*(_DWORD *)(a3 + 16) == *(_DWORD *)(*(_QWORD *)&v11 + 8))
    {
      kaldi::CuMatrix<float>::Resize(a1 + 7, *(unsigned int *)(a3 + 20), *(unsigned int *)(*(_QWORD *)&v11 + 12), 0, 0);
      return (int *)(*(uint64_t (**)(_QWORD, uint64_t, int32x2_t *, uint64_t))(**(_QWORD **)&a1[16] + 112))(*(_QWORD *)&a1[16], a3, a1 + 7, a4);
    }
    goto LABEL_19;
  }
  v13 = a1[17];
  v14 = *(unsigned int *)(a3 + 16);
  if (v13)
    v15 = *(_DWORD *)(*(_QWORD *)&v13 + 8);
  else
    v15 = *(__int32 *)((char *)&a1[1].i32[1] + *(_QWORD *)(*(_QWORD *)a1 - 40));
  if ((_DWORD)v14 != v15)
  {
LABEL_19:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Mismatch of value matrix input in ScaledDotAttention, expected ", 63);
    v20 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", but got ", 10);
    std::ostream::operator<<();
LABEL_20:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
  }
  v16 = a1 + 7;
  kaldi::CuMatrix<float>::Resize(v16, *(unsigned int *)(a3 + 20), v14, 0, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v16, a3, 111);
}

uint64_t kaldi::nnet1::ScaledDotAttention::ClearKeyValueStates(kaldi::nnet1::ScaledDotAttention *this)
{
  void *v3;
  __int128 v4;
  __int128 v5;
  char v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v9 = 0u;
  v8 = 0u;
  v7 = &unk_1E5D34170;
  v10 = 0;
  v5 = 0u;
  v4 = 0u;
  v3 = &unk_1E5D34170;
  v6 = 0;
  kaldi::CuMatrix<float>::Swap((uint64_t)this + 8, (uint64_t)&v7);
  kaldi::CuMatrix<float>::Swap((uint64_t)this + 56, (uint64_t)&v3);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v3);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v7);
}

void sub_1ADDB6628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ScaledDotAttention::ComputeAttention(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int32x2_t v10[34];

  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 112) + 12);
  if ((_DWORD)v5 != *(_DWORD *)(a1 + 24))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "SetKeyValueStores needs to be called in ScaledDotAttention for attention to work");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  kaldi::CuMatrix<float>::CuMatrix(v10, *(unsigned int *)(a2 + 20), v5, 0, 0, 0);
  (*(void (**)(_QWORD, uint64_t, int32x2_t *, uint64_t))(**(_QWORD **)(a1 + 112) + 112))(*(_QWORD *)(a1 + 112), a2, v10, a4);
  kaldi::nnet1::ScaledDotAttention::ComputeScaledDotAttention(a1, (uint64_t)v10, a1 + 8, a1 + 56, a3, 0);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v10);
}

void sub_1ADDB6720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::ScaledDotAttention::ComputeScaledDotAttention(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float v12;
  int32x2_t v14[6];

  kaldi::CuMatrix<float>::CuMatrix(v14, *(unsigned int *)(a2 + 20), *(unsigned int *)(a3 + 20), 0, 0, 0);
  kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)v14, a2, CblasNoTrans, a3, CblasTrans, 1.0, 0.0);
  v12 = *(float *)(a1 + 108);
  if (v12 != 1.0)
    kaldi::CuMatrixBase<float>::Scale((uint64_t)v14, v12);
  kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow((uint64_t)v14, (uint64_t)v14);
  if (a6)
    kaldi::CuMatrixBase<float>::AddMat(a6, (uint64_t)v14, 111, 1.0, 0.0);
  kaldi::CuMatrixBase<float>::AddMatMat(a5, (uint64_t)v14, CblasNoTrans, a4, CblasNoTrans, 1.0, 0.0);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v14);
}

void sub_1ADDB6828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *kaldi::nnet1::ScaledDotAttention::CopyQuantized<kaldi::nnet1::Quantizable8BitComponentItf>(const void **a1)
{
  const void *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = (const void *)(*((uint64_t (**)(const void **, uint64_t))*a1 + 11))(a1, 1);
  if (v2)
  else
    v3 = 0;
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>(a1 + 14, &v17);
  v4 = v17;
  v17 = 0;
  v5 = v3[14];
  v3[14] = v4;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v17;
    v17 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>(a1 + 15, &v17);
  v7 = v17;
  v17 = 0;
  v8 = v3[15];
  v3[15] = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = v17;
    v17 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>(a1 + 16, &v17);
  v10 = v17;
  v17 = 0;
  v11 = v3[16];
  v3[16] = v10;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>(a1 + 17, &v17);
  v13 = v17;
  v17 = 0;
  v14 = v3[17];
  v3[17] = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v17;
    v17 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  return (char *)v3 + *(_QWORD *)(*v3 - 40);
}

char *kaldi::nnet1::ScaledDotAttention::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>(const void **a1)
{
  const void *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v2 = (const void *)(*((uint64_t (**)(const void **, uint64_t))*a1 + 11))(a1, 1);
  if (v2)
  else
    v3 = 0;
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>(a1 + 14, &v17);
  v4 = v17;
  v17 = 0;
  v5 = v3[14];
  v3[14] = v4;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v17;
    v17 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>(a1 + 15, &v17);
  v7 = v17;
  v17 = 0;
  v8 = v3[15];
  v3[15] = v7;
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = v17;
    v17 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>(a1 + 16, &v17);
  v10 = v17;
  v17 = 0;
  v11 = v3[16];
  v3[16] = v10;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v17;
    v17 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>(a1 + 17, &v17);
  v13 = v17;
  v17 = 0;
  v14 = v3[17];
  v3[17] = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = v17;
    v17 = 0;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  return (char *)v3 + *(_QWORD *)(*v3 - 40);
}

char *`virtual thunk to'kaldi::nnet1::ScaledDotAttention::CopyQuantized16Bit(kaldi::nnet1::ScaledDotAttention *this)
{
  return kaldi::nnet1::ScaledDotAttention::CopyQuantized<kaldi::nnet1::Quantizable16BitComponentItf>((const void **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32)));
}

uint64_t kaldi::nnet1::ScaledDotAttention::Info(kaldi::nnet1::ScaledDotAttention *this)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  void *__p;
  uint64_t v13;
  unsigned __int8 v14;
  _QWORD v15[11];
  char v16;
  uint64_t v17;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  kaldi::WriteToken(v15, 0, "<AddQuery>");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" ", 1);
  if (*((_QWORD *)this + 14))
  {
    kaldi::WriteToken(v15, 0, "<QueryTransform>");
    (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 14) + 64))(&__p);
    v3 = (v14 & 0x80u) == 0 ? &__p : (void **)__p;
    v4 = (v14 & 0x80u) == 0 ? v14 : v13;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v3, v4);
    if ((char)v14 < 0)
      operator delete(__p);
  }
  if (*((_QWORD *)this + 15))
  {
    kaldi::WriteToken(v15, 0, "<KeyTransform>");
    (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 15) + 64))(&__p);
    v5 = (v14 & 0x80u) == 0 ? &__p : (void **)__p;
    v6 = (v14 & 0x80u) == 0 ? v14 : v13;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v5, v6);
    if ((char)v14 < 0)
      operator delete(__p);
  }
  if (*((_QWORD *)this + 16))
  {
    kaldi::WriteToken(v15, 0, "<ValueTransform>");
    (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 16) + 64))(&__p);
    v7 = (v14 & 0x80u) == 0 ? &__p : (void **)__p;
    v8 = (v14 & 0x80u) == 0 ? v14 : v13;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v7, v8);
    if ((char)v14 < 0)
      operator delete(__p);
  }
  if (*((_QWORD *)this + 17))
  {
    kaldi::WriteToken(v15, 0, "<OutputTransform>");
    (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 17) + 64))(&__p);
    v9 = (v14 & 0x80u) == 0 ? &__p : (void **)__p;
    v10 = (v14 & 0x80u) == 0 ? v14 : v13;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v9, v10);
    if ((char)v14 < 0)
      operator delete(__p);
  }
  std::stringbuf::str();
  v15[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v15[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v17);
}

void sub_1ADDB6DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::ScaledDotAttention::Info(kaldi::nnet1::ScaledDotAttention *this)
{
  return kaldi::nnet1::ScaledDotAttention::Info((kaldi::nnet1::ScaledDotAttention *)((char *)this
                                                                                   + *(_QWORD *)(*(_QWORD *)this - 80)));
}

void kaldi::nnet1::ScaledDotAttention::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  __int128 *p_p;
  uint64_t v10;
  BOOL v16;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _QWORD *v35;
  __int128 *v36;
  uint64_t v37;
  __int128 __p;
  uint64_t v39;
  _QWORD v40[36];

  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v40, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Reading ScaledDotAttention component", 36);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v40);
  }
  __p = 0uLL;
  v39 = 0;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              if (kaldi::Peek(a2, a3) != 60)
                goto LABEL_107;
              kaldi::ReadToken(a2, a3, (uint64_t)&__p);
              if (SHIBYTE(v39) < 0)
                break;
              p_p = &__p;
              switch(HIBYTE(v39))
              {
                case 7:
                  if ((_DWORD)__p != 1633899324 || *(_DWORD *)((char *)&__p + 3) != 1046834273)
                    goto LABEL_110;
                  goto LABEL_51;
                case 0xA:
                  if ((_QWORD)__p != 0x726575516464413CLL || WORD4(__p) != 15993)
                    goto LABEL_110;
                  goto LABEL_81;
                case 0xC:
                  goto LABEL_102;
                case 0xE:
                  goto LABEL_67;
                case 0x10:
                  if ((_QWORD)__p == 0x725479726575513CLL && *((_QWORD *)&__p + 1) == 0x3E6D726F66736E61)
                    goto LABEL_94;
                  if (HIBYTE(v39) == 14)
                  {
LABEL_67:
                    if ((_QWORD)__p != 0x6E61725479654B3CLL || *(_QWORD *)((char *)&__p + 6) != 0x3E6D726F66736E61)
                      goto LABEL_98;
                    goto LABEL_72;
                  }
                  if (HIBYTE(v39) != 16
                    || ((_QWORD)__p == 0x725465756C61563CLL
                      ? (v19 = *((_QWORD *)&__p + 1) == 0x3E6D726F66736E61)
                      : (v19 = 0),
                        !v19))
                  {
LABEL_98:
                    if (HIBYTE(v39) == 12)
                    {
                      p_p = &__p;
                      goto LABEL_102;
                    }
                    goto LABEL_110;
                  }
                  break;
                case 0x11:
                  if ((_QWORD)__p != 0x5474757074754F3CLL
                    || *((_QWORD *)&__p + 1) != 0x6D726F66736E6172
                    || v39 != 62)
                  {
                    goto LABEL_98;
                  }
                  goto LABEL_90;
                default:
                  goto LABEL_110;
              }
LABEL_63:
              v20 = kaldi::nnet1::Component::Read(a2, a3, a4);
              v21 = *(_QWORD *)(a1 + 128);
              *(_QWORD *)(a1 + 128) = v20;
              if (v21)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
                v20 = *(_QWORD *)(a1 + 128);
              }
              if (!v20)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"reading value transform failed", 30);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
              }
            }
            v10 = *((_QWORD *)&__p + 1);
            if (*((_QWORD *)&__p + 1) != 7)
              break;
            if (*(_DWORD *)__p != 1633899324 || *(_DWORD *)(__p + 3) != 1046834273)
            {
              v10 = *((_QWORD *)&__p + 1);
              goto LABEL_24;
            }
LABEL_51:
            kaldi::ReadBasicType<float>(a2, a3, (float *)(a1 + 108));
          }
          if (*((_QWORD *)&__p + 1) != 10)
            break;
          if (*(_QWORD *)__p != 0x726575516464413CLL || *(_WORD *)(__p + 8) != 15993)
            break;
LABEL_81:
          kaldi::ReadBasicType<BOOL>(a2, a3, (char *)(a1 + 104));
        }
LABEL_24:
        if (v10 != 16)
          goto LABEL_30;
        if (*(_QWORD *)__p != 0x725479726575513CLL || *(_QWORD *)(__p + 8) != 0x3E6D726F66736E61)
          break;
LABEL_94:
        v30 = kaldi::nnet1::Component::Read(a2, a3, a4);
        v31 = *(_QWORD *)(a1 + 112);
        *(_QWORD *)(a1 + 112) = v30;
        if (v31)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
          v30 = *(_QWORD *)(a1 + 112);
        }
        if (!v30)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"reading query transform failed", 30);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
        }
      }
      v10 = *((_QWORD *)&__p + 1);
LABEL_30:
      if (v10 != 14)
        goto LABEL_36;
      if (*(_QWORD *)__p != 0x6E61725479654B3CLL || *(_QWORD *)(__p + 6) != 0x3E6D726F66736E61)
        break;
LABEL_72:
      v23 = kaldi::nnet1::Component::Read(a2, a3, a4);
      v24 = *(_QWORD *)(a1 + 120);
      *(_QWORD *)(a1 + 120) = v23;
      if (v24)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        v23 = *(_QWORD *)(a1 + 120);
      }
      if (!v23)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"reading key transform failed", 28);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
      }
    }
    v10 = *((_QWORD *)&__p + 1);
LABEL_36:
    if (v10 == 16)
    {
      if (*(_QWORD *)__p == 0x725465756C61563CLL && *(_QWORD *)(__p + 8) == 0x3E6D726F66736E61)
        goto LABEL_63;
      v10 = *((_QWORD *)&__p + 1);
    }
    if (v10 != 17)
      goto LABEL_100;
    v16 = *(_QWORD *)__p == 0x5474757074754F3CLL && *(_QWORD *)(__p + 8) == 0x6D726F66736E6172;
    if (!v16 || *(_BYTE *)(__p + 16) != 62)
      break;
LABEL_90:
    v28 = kaldi::nnet1::Component::Read(a2, a3, a4);
    v29 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(a1 + 136) = v28;
    if (v29)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
      v28 = *(_QWORD *)(a1 + 136);
    }
    if (!v28)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"reading output transform failed", 31);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
    }
  }
  v10 = *((_QWORD *)&__p + 1);
LABEL_100:
  if (v10 != 12)
    goto LABEL_110;
  p_p = (__int128 *)__p;
LABEL_102:
  v32 = *(_QWORD *)p_p;
  v33 = *((_DWORD *)p_p + 2);
  if (v32 != 0x6E6F706D6F432F3CLL || v33 != 1047817829)
  {
LABEL_110:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Unrecognized token ", 19);
    if (v39 >= 0)
      v36 = &__p;
    else
      v36 = (__int128 *)__p;
    if (v39 >= 0)
      v37 = HIBYTE(v39);
    else
      v37 = *((_QWORD *)&__p + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v40);
  }
LABEL_107:
  if (SHIBYTE(v39) < 0)
    operator delete((void *)__p);
}

void sub_1ADDB7404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'kaldi::nnet1::ScaledDotAttention::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::ScaledDotAttention::ReadData((uint64_t)a1 + *(_QWORD *)(*a1 - 176), a2, a3, a4);
}

_QWORD *kaldi::nnet1::ScaledDotAttention::WriteData(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  kaldi::WriteToken(a2, a3, "<AddQuery>");
  kaldi::WriteBasicType<BOOL>(a2, a3, *(unsigned __int8 *)(a1 + 104));
  kaldi::WriteToken(a2, a3, "<Scale>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  if (*(_QWORD *)(a1 + 112))
  {
    kaldi::WriteToken(a2, a3, "<QueryTransform>");
    kaldi::nnet1::Component::Write(*(_QWORD *)(a1 + 112), a2, a3, a4);
  }
  if (*(_QWORD *)(a1 + 120))
  {
    kaldi::WriteToken(a2, a3, "<KeyTransform>");
    kaldi::nnet1::Component::Write(*(_QWORD *)(a1 + 120), a2, a3, a4);
  }
  if (*(_QWORD *)(a1 + 128))
  {
    kaldi::WriteToken(a2, a3, "<ValueTransform>");
    kaldi::nnet1::Component::Write(*(_QWORD *)(a1 + 128), a2, a3, a4);
  }
  if (*(_QWORD *)(a1 + 136))
  {
    kaldi::WriteToken(a2, a3, "<OutputTransform>");
    kaldi::nnet1::Component::Write(*(_QWORD *)(a1 + 136), a2, a3, a4);
  }
  return kaldi::WriteToken(a2, a3, "</Component>");
}

_QWORD *`virtual thunk to'kaldi::nnet1::ScaledDotAttention::WriteData(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::ScaledDotAttention::WriteData((uint64_t)a1 + *(_QWORD *)(*a1 - 120), a2, a3, a4);
}

kaldi::nnet1::ScaledDotAttention *kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(kaldi::nnet1::ScaledDotAttention *a1, uint64_t *a2, uint64_t a3)
{
  kaldi::nnet1::ScaledDotAttention *result;
  uint64_t v6;

  result = kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(a1, (const kaldi::nnet1::ScaledDotAttention *)(a2 + 1), a3);
  v6 = *a2;
  *(_QWORD *)result = *a2;
  *(_QWORD *)((char *)result + *(_QWORD *)(v6 - 40)) = a2[9];
  *(_QWORD *)((char *)result + *(_QWORD *)(*(_QWORD *)result - 48)) = a2[10];
  *(_QWORD *)((char *)result + *(_QWORD *)(*(_QWORD *)result - 56)) = a2[11];
  *((_DWORD *)result + 36) = *(_DWORD *)(a3 + 144);
  return result;
}

uint64_t kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)a2 - 40);
  *(_QWORD *)(a1 + 152) = off_1E5D32508;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + v4 + 8);
  *(_WORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)a1 = off_1E5D30BE0;
  *(_QWORD *)(a1 + 200) = off_1E5D30D88;
  kaldi::nnet1::ScaledDotAttention::ScaledDotAttention((kaldi::nnet1::ScaledDotAttention *)a1, (const kaldi::nnet1::ScaledDotAttention *)&off_1E5D14E98, a2);
  *(_QWORD *)(a1 + 152) = &off_1E5D2DEB0;
  *(_QWORD *)a1 = &off_1E5D2DD80;
  *(_QWORD *)(a1 + 200) = &off_1E5D2DF80;
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  return a1;
}

void sub_1ADDB76A4(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  kaldi::nnet1::Component *v2;
  quasar::Bitmap *v3;

  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MultiHeadAttention::Copy(kaldi::nnet1::MultiHeadAttention *this, int a2)
{
  kaldi::nnet1::MultiHeadAttention *v4;
  kaldi::nnet1::MultiHeadAttention *v5;

  v4 = (kaldi::nnet1::MultiHeadAttention *)operator new();
  v5 = v4;
  if (a2)
    kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(v4, *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40) + 8), *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40) + 12), *((unsigned __int8 *)this + 104), *((float *)this + 27), *((_DWORD *)this + 36));
  else
    kaldi::nnet1::MultiHeadAttention::MultiHeadAttention((uint64_t)v4, (uint64_t)this);
  return (uint64_t)v5 + *(_QWORD *)(*(_QWORD *)v5 - 40);
}

void sub_1ADDB7750(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A1C40ECDADF9FLL);
  _Unwind_Resume(a1);
}

kaldi::nnet1::MultiHeadAttention *kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this, int a2, _BOOL4 a3, int a4, float a5, int a6)
{
  *((_QWORD *)this + 19) = off_1E5D32508;
  *((_DWORD *)this + 40) = a2;
  *((_DWORD *)this + 41) = a3;
  *((_WORD *)this + 84) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 22) = 0;
  *(_QWORD *)this = off_1E5D30BE0;
  *((_QWORD *)this + 25) = off_1E5D30D88;
  kaldi::nnet1::ScaledDotAttention::ScaledDotAttention((uint64_t)this, (uint64_t *)&off_1E5D14E98, a2, a3, a5, a4 != 0);
  *((_QWORD *)this + 19) = &off_1E5D2DEB0;
  *(_QWORD *)this = &off_1E5D2DD80;
  *((_QWORD *)this + 25) = &off_1E5D2DF80;
  *((_DWORD *)this + 36) = a6;
  return this;
}

void sub_1ADDB782C(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  kaldi::nnet1::Component *v2;
  quasar::Bitmap *v3;

  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MultiHeadAttention::ComputeAttention(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[5];
  _QWORD v25[5];
  _QWORD v26[5];
  _QWORD v27[5];
  _DWORD v28[8];
  uint64_t v29;

  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 112) + 12);
  if ((_DWORD)v5 != *(_DWORD *)(a1 + 24))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v28, "SetKeyValueStores needs to be called in ScaledDotAttention for attention to work");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
  }
  kaldi::CuMatrix<float>::CuMatrix((int32x2_t *)v28, *(unsigned int *)(a2 + 20), v5, 0, 0, 0);
  (*(void (**)(_QWORD, uint64_t, _DWORD *, uint64_t))(**(_QWORD **)(a1 + 112) + 112))(*(_QWORD *)(a1 + 112), a2, v28, a4);
  v9 = *(_DWORD *)(a1 + 144);
  if (v9 >= 1)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = *(_DWORD *)(a2 + 16) / v9;
    do
    {
      v14 = 4 * v11;
      *(_QWORD *)((char *)&v27[2] + 4) = *(_QWORD *)&v28[5];
      LODWORD(v27[2]) = v13;
      HIDWORD(v27[3]) = v10 + v28[7];
      v27[4] = v29;
      v27[0] = &unk_1E5D29D40;
      v27[1] = *(_QWORD *)&v28[2] + v14;
      v15 = *(_QWORD *)(a1 + 16) + v14;
      v16 = v10 + *(_DWORD *)(a1 + 36);
      v17 = *(_QWORD *)(a1 + 40);
      LODWORD(v26[2]) = v13;
      *(_QWORD *)((char *)&v26[2] + 4) = *(_QWORD *)(a1 + 28);
      HIDWORD(v26[3]) = v16;
      v26[4] = v17;
      v26[0] = &unk_1E5D29D40;
      v26[1] = v15;
      v18 = *(_QWORD *)(a1 + 64) + v14;
      v19 = v10 + *(_DWORD *)(a1 + 84);
      v20 = *(_QWORD *)(a1 + 88);
      LODWORD(v25[2]) = v13;
      *(_QWORD *)((char *)&v25[2] + 4) = *(_QWORD *)(a1 + 76);
      HIDWORD(v25[3]) = v19;
      v25[4] = v20;
      v25[0] = &unk_1E5D29D40;
      v25[1] = v18;
      v21 = *(_QWORD *)(a3 + 8) + v14;
      LODWORD(v14) = v10 + *(_DWORD *)(a3 + 28);
      v22 = *(_QWORD *)(a3 + 32);
      LODWORD(v24[2]) = v13;
      *(_QWORD *)((char *)&v24[2] + 4) = *(_QWORD *)(a3 + 20);
      HIDWORD(v24[3]) = v14;
      v24[4] = v22;
      v24[0] = &unk_1E5D29D40;
      v24[1] = v21;
      kaldi::nnet1::ScaledDotAttention::ComputeScaledDotAttention(a1, (uint64_t)v27, (uint64_t)v26, (uint64_t)v25, (uint64_t)v24, 0);
      v24[0] = &unk_1E5D29D40;
      memset(&v24[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v24);
      v25[0] = &unk_1E5D29D40;
      memset(&v25[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v25);
      v26[0] = &unk_1E5D29D40;
      memset(&v26[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v26);
      v27[0] = &unk_1E5D29D40;
      memset(&v27[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v27);
      ++v12;
      v11 += v13;
      v10 -= v13;
    }
    while (v12 < *(int *)(a1 + 144));
  }
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v28);
}

void sub_1ADDB7ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a32);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MultiHeadAttention::Info(kaldi::nnet1::MultiHeadAttention *this)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  void *__p[2];
  unsigned __int8 v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  kaldi::WriteToken(v8, 0, "<NumberHeads>");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" ", 1);
  kaldi::nnet1::ScaledDotAttention::Info((uint64_t *)__p, this);
  if ((v7 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v4 = v7;
  else
    v4 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v3, v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v8[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v9 < 0)
    operator delete((void *)v8[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v10);
}

void sub_1ADDB7C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::MultiHeadAttention::Info(kaldi::nnet1::MultiHeadAttention *this)
{
  return kaldi::nnet1::MultiHeadAttention::Info((kaldi::nnet1::MultiHeadAttention *)((char *)this
                                                                                   + *(_QWORD *)(*(_QWORD *)this - 80)));
}

void kaldi::nnet1::MultiHeadAttention::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD v8[35];

  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v8, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Reading MultiHeadAttention component", 36);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v8);
  }
  kaldi::ExpectToken(a2, a3, "<NumberHeads>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 144);
  kaldi::nnet1::ScaledDotAttention::ReadData(a1, a2, a3, a4);
}

void sub_1ADDB7D68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::MultiHeadAttention::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::MultiHeadAttention::ReadData((uint64_t)a1 + *(_QWORD *)(*a1 - 176), a2, a3, a4);
}

_QWORD *kaldi::nnet1::MultiHeadAttention::WriteData(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  kaldi::WriteToken(a2, a3, "<NumberHeads>");
  kaldi::WriteBasicType<int>(a2, a3);
  return kaldi::nnet1::ScaledDotAttention::WriteData(a1, a2, a3, a4);
}

_QWORD *`virtual thunk to'kaldi::nnet1::MultiHeadAttention::WriteData(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::MultiHeadAttention::WriteData((uint64_t)a1 + *(_QWORD *)(*a1 - 120), a2, a3, a4);
}

kaldi::nnet1::SupervisedMultiHeadAttention *kaldi::nnet1::SupervisedMultiHeadAttention::SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this, const kaldi::nnet1::SupervisedMultiHeadAttention *a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)a2 - 40);
  *((_QWORD *)this + 25) = off_1E5D32508;
  *((_QWORD *)this + 26) = *(_QWORD *)((char *)a2 + v4 + 8);
  *((_WORD *)this + 108) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 28) = 0;
  *(_QWORD *)this = off_1E5D30BE0;
  *((_QWORD *)this + 31) = off_1E5D30D88;
  kaldi::nnet1::MultiHeadAttention::MultiHeadAttention(this, (uint64_t *)&off_1E5D15010, (uint64_t)a2);
  *((_QWORD *)this + 25) = &off_1E5D30F08;
  *(_QWORD *)this = &off_1E5D30DD8;
  *((_QWORD *)this + 31) = &off_1E5D30FD8;
  *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 152, (char *)a2 + 152, 111);
  return this;
}

void sub_1ADDB7EC8(_Unwind_Exception *a1)
{
  kaldi::nnet1::ScaledDotAttention *v1;
  kaldi::nnet1::Component *v2;
  quasar::Bitmap *v3;

  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(v1, (uint64_t *)&off_1E5D15018);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SupervisedMultiHeadAttention::Copy(kaldi::nnet1::SupervisedMultiHeadAttention *this, int a2)
{
  kaldi::nnet1::SupervisedMultiHeadAttention *v4;
  int32x2_t *v5;

  v4 = (kaldi::nnet1::SupervisedMultiHeadAttention *)operator new();
  v5 = (int32x2_t *)v4;
  if (a2)
  {
    kaldi::nnet1::SupervisedMultiHeadAttention::SupervisedMultiHeadAttention(v4, *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40) + 8), *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40) + 12), *((unsigned __int8 *)this + 104), *((float *)this + 27), *((_DWORD *)this + 36), *((_DWORD *)this + 37));
    kaldi::CuMatrix<float>::operator=(v5 + 19, (int32x2_t *)this + 19);
  }
  else
  {
    kaldi::nnet1::SupervisedMultiHeadAttention::SupervisedMultiHeadAttention(v4, this);
  }
  return (uint64_t)v5 + *(_QWORD *)(*(_QWORD *)v5 - 40);
}

void sub_1ADDB7F98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A1C403997DC88);
  _Unwind_Resume(a1);
}

kaldi::nnet1::SupervisedMultiHeadAttention *kaldi::nnet1::SupervisedMultiHeadAttention::SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this, int a2, _BOOL4 a3, int a4, float a5, int a6, int a7)
{
  *((_QWORD *)this + 25) = off_1E5D32508;
  *((_DWORD *)this + 52) = a2;
  *((_DWORD *)this + 53) = a3;
  *((_WORD *)this + 108) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 28) = 0;
  *(_QWORD *)this = off_1E5D30BE0;
  *((_QWORD *)this + 31) = off_1E5D30D88;
  kaldi::nnet1::ScaledDotAttention::ScaledDotAttention((uint64_t)this, (uint64_t *)&off_1E5D15018, a2, a3, a5, a4 != 0);
  *((_QWORD *)this + 25) = &off_1E5D30F08;
  *(_QWORD *)this = &off_1E5D30DD8;
  *((_QWORD *)this + 31) = &off_1E5D30FD8;
  *((_DWORD *)this + 36) = a6;
  *((_DWORD *)this + 37) = a7;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_QWORD *)this + 19) = &unk_1E5D34170;
  *((_BYTE *)this + 192) = 0;
  return this;
}

void sub_1ADDB809C(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  kaldi::nnet1::Component *v2;
  quasar::Bitmap *v3;

  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SupervisedMultiHeadAttention::ComputeAttention(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  float v24;
  uint64_t v26;
  _QWORD v27[5];
  _QWORD v28[5];
  _QWORD v29[5];
  _QWORD v30[5];
  int32x2_t v31[2];
  uint64_t v32;
  int v33;
  uint64_t v34;

  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 112) + 12);
  if ((_DWORD)v5 != *(_DWORD *)(a1 + 24))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v31, "SetKeyValueStores needs to be called in ScaledDotAttention for attention to work");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
  }
  kaldi::CuMatrix<float>::CuMatrix(v31, *(unsigned int *)(a2 + 20), v5, 0, 0, 0);
  (*(void (**)(_QWORD, uint64_t, int32x2_t *, uint64_t))(**(_QWORD **)(a1 + 112) + 112))(*(_QWORD *)(a1 + 112), a2, v31, a4);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 152), v32, *(unsigned int *)(a1 + 28), 0, 0);
  kaldi::CuMatrixBase<float>::SetZero(a1 + 152);
  v26 = a1 + 152;
  v9 = *(_DWORD *)(a1 + 144);
  if (v9 >= 1)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = *(_DWORD *)(a2 + 16) / v9;
    do
    {
      v14 = 4 * v11;
      *(_QWORD *)((char *)&v30[2] + 4) = v32;
      LODWORD(v30[2]) = v13;
      HIDWORD(v30[3]) = v10 + v33;
      v30[4] = v34;
      v30[0] = &unk_1E5D29D40;
      v30[1] = *(_QWORD *)&v31[1] + v14;
      v15 = *(_QWORD *)(a1 + 16) + v14;
      v16 = v10 + *(_DWORD *)(a1 + 36);
      v17 = *(_QWORD *)(a1 + 40);
      LODWORD(v29[2]) = v13;
      *(_QWORD *)((char *)&v29[2] + 4) = *(_QWORD *)(a1 + 28);
      HIDWORD(v29[3]) = v16;
      v29[4] = v17;
      v29[0] = &unk_1E5D29D40;
      v29[1] = v15;
      v18 = *(_QWORD *)(a1 + 64) + v14;
      v19 = v10 + *(_DWORD *)(a1 + 84);
      v20 = *(_QWORD *)(a1 + 88);
      LODWORD(v28[2]) = v13;
      *(_QWORD *)((char *)&v28[2] + 4) = *(_QWORD *)(a1 + 76);
      HIDWORD(v28[3]) = v19;
      v28[4] = v20;
      v28[0] = &unk_1E5D29D40;
      v28[1] = v18;
      v21 = *(_QWORD *)(a3 + 8) + v14;
      LODWORD(v14) = v10 + *(_DWORD *)(a3 + 28);
      v22 = *(_QWORD *)(a3 + 32);
      LODWORD(v27[2]) = v13;
      *(_QWORD *)((char *)&v27[2] + 4) = *(_QWORD *)(a3 + 20);
      HIDWORD(v27[3]) = v14;
      v27[4] = v22;
      v27[0] = &unk_1E5D29D40;
      v27[1] = v21;
      if (v12 >= *(int *)(a1 + 148))
        kaldi::nnet1::ScaledDotAttention::ComputeScaledDotAttention(a1, (uint64_t)v30, (uint64_t)v29, (uint64_t)v28, (uint64_t)v27, 0);
      else
        kaldi::nnet1::ScaledDotAttention::ComputeScaledDotAttention(a1, (uint64_t)v30, (uint64_t)v29, (uint64_t)v28, (uint64_t)v27, v26);
      v27[0] = &unk_1E5D29D40;
      memset(&v27[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v27);
      v28[0] = &unk_1E5D29D40;
      memset(&v28[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v28);
      v29[0] = &unk_1E5D29D40;
      memset(&v29[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v29);
      v30[0] = &unk_1E5D29D40;
      memset(&v30[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v30);
      ++v12;
      v11 += v13;
      v10 -= v13;
    }
    while (v12 < *(int *)(a1 + 144));
  }
  v23 = *(_DWORD *)(a1 + 148);
  if (v23 > 1)
  {
    v24 = 1.0 / (double)v23;
    kaldi::CuMatrixBase<float>::Scale(v26, v24);
  }
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v31);
}

uint64_t kaldi::nnet1::SupervisedMultiHeadAttention::Info(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  void *__p[2];
  unsigned __int8 v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  kaldi::WriteToken(v8, 0, "<SupervisedHeads>");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" ", 1);
  kaldi::nnet1::MultiHeadAttention::Info((uint64_t *)__p, this);
  if ((v7 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v4 = v7;
  else
    v4 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v3, v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v8[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v8[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v9 < 0)
    operator delete((void *)v8[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v10);
}

void sub_1ADDB8560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::SupervisedMultiHeadAttention::Info(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
  return kaldi::nnet1::SupervisedMultiHeadAttention::Info((kaldi::nnet1::SupervisedMultiHeadAttention *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 80)));
}

void kaldi::nnet1::SupervisedMultiHeadAttention::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD v8[35];

  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v8, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Reading SupervisedMultiHeadAttention component", 46);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v8);
  }
  kaldi::ExpectToken(a2, a3, "<SupervisedHeads>");
  kaldi::ReadBasicType<int>(a2, a3, a1 + 148);
  kaldi::nnet1::MultiHeadAttention::ReadData(a1, a2, a3, a4);
}

void sub_1ADDB8654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::SupervisedMultiHeadAttention::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::SupervisedMultiHeadAttention::ReadData((uint64_t)a1 + *(_QWORD *)(*a1 - 176), a2, a3, a4);
}

_QWORD *kaldi::nnet1::SupervisedMultiHeadAttention::WriteData(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  kaldi::WriteToken(a2, a3, "<SupervisedHeads>");
  kaldi::WriteBasicType<int>(a2, a3);
  return kaldi::nnet1::MultiHeadAttention::WriteData(a1, a2, a3, a4);
}

_QWORD *`virtual thunk to'kaldi::nnet1::SupervisedMultiHeadAttention::WriteData(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::SupervisedMultiHeadAttention::WriteData((uint64_t)a1 + *(_QWORD *)(*a1 - 120), a2, a3, a4);
}

kaldi::nnet1::SelfAttention *kaldi::nnet1::SelfAttention::SelfAttention(kaldi::nnet1::SelfAttention *this, const kaldi::nnet1::SelfAttention *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  const void *v13;
  void *v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)a2 - 40);
  *((_QWORD *)this + 10) = &off_1E5D2C4B8;
  *((_QWORD *)this + 11) = *(_QWORD *)((char *)a2 + v4 + 8);
  *((_WORD *)this + 48) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 16) = &off_1E5D2C588;
  *((_QWORD *)this + 1) = &off_1E5D2C3A0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = &unk_1E5D2C5B0;
  *((_DWORD *)this + 12) = 1;
  *(_QWORD *)this = &off_1E5D2C2E8;
  *((_QWORD *)this + 7) = 0;
  v5 = (uint64_t *)((char *)this + 56);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  v6 = *((_QWORD *)a2 + 7);
  if (v6)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    v8 = *v5;
    *v5 = v7;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  v9 = *((_QWORD *)a2 + 8);
  if (v9)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    v11 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v12 = (char *)*((_QWORD *)a2 + 9);
  if (v12)
  {
    v13 = (const void *)(*(uint64_t (**)(char *))(*(_QWORD *)&v12[*(_QWORD *)(*(_QWORD *)v12 - 40)] + 16))(&v12[*(_QWORD *)(*(_QWORD *)v12 - 40)]);
    if (v13)
    else
      v14 = 0;
    v15 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v14;
    if (v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  return this;
}

void sub_1ADDB8858(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  kaldi::nnet1::Component *v2;
  quasar::Bitmap *v3;
  kaldi::nnet1::HistoricalComponent *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *((_QWORD *)v1 + 9);
  *((_QWORD *)v1 + 9) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)v1 + 8);
  *((_QWORD *)v1 + 8) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *v5;
  *v5 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent(v4);
  quasar::Bitmap::~Bitmap(v1);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SelfAttention::PropagateFnc(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int i;
  int v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v39;
  unsigned int v40;
  void *v41;
  __int128 v42;
  __int128 v43;
  void *v44;
  __int128 v45;
  __int128 v46;
  void *v47;
  __int128 v48;
  __int128 v49;
  void *v50;
  __int128 v51;
  __int128 v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  void *v56;
  __int128 v57;
  __int128 v58;
  void *v59;
  _QWORD v60[4];
  int32x2_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;

  v8 = *((_DWORD *)a1 + 12);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v61, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)"Running forward propagation for batch size = ", 45);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", which contains ", 17);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" frames each from ", 18);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v61);
  }
  (*(void (**)(uint64_t *))(*a1 + 160))(a1);
  v12 = a1[2] + 48 * (int)a4;
  v13 = a1[7];
  if (v13)
    v14 = (unsigned int *)(v13 + 12);
  else
    v14 = (unsigned int *)((char *)a1 + *(_QWORD *)(*a1 - 40) + 8);
  v15 = *v14;
  v16 = a1[8];
  if (v16)
  {
    v17 = (unsigned int *)(v16 + 12);
    v18 = *a1;
  }
  else
  {
    v18 = *a1;
    v17 = (unsigned int *)((char *)a1 + *(_QWORD *)(*a1 - 40) + 8);
  }
  v40 = a4;
  v39 = *v17;
  v19 = *v17 + v15;
  (*(void (**)(uint64_t *))(v18 + 88))(a1);
  kaldi::CuMatrix<float>::CuMatrix(&v61, *((unsigned int *)a1 + 12), (*(_DWORD *)(a2 + 20) * v19 / v8 + *(_DWORD *)(v12 + 16)), 0, 0, 0);
  v20 = *(_DWORD *)(v12 + 16);
  *(_QWORD *)((char *)&v60[1] + 4) = v64;
  LODWORD(v60[1]) = v20;
  HIDWORD(v60[2]) = v65;
  v60[3] = v66;
  v59 = &unk_1E5D29D40;
  v60[0] = v62;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v59, v12, 111);
  v59 = &unk_1E5D29D40;
  memset(v60, 0, sizeof(v60));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v59);
  if (v8 >= 1)
  {
    v21 = 0;
    for (i = 0; i != v8; ++i)
    {
      v23 = v21 + *(_DWORD *)(a2 + 20);
      v24 = *(_DWORD *)(a2 + 24);
      v25 = *(_QWORD *)(a2 + 8) + 4 * (int)(v24 * i);
      v26 = *(_DWORD *)(a2 + 28) - v24 * i;
      v27 = *(_QWORD *)(a2 + 32);
      LODWORD(v60[1]) = *(_DWORD *)(a2 + 16);
      HIDWORD(v60[1]) = v23;
      v60[2] = __PAIR64__(v26, v24);
      v60[3] = v27;
      v59 = &unk_1E5D29D40;
      v60[0] = v25;
      if (v8 != 1)
        kaldi::CuMatrixBase<float>::SetStride((uint64_t)&v59, v24 * v8);
      v28 = v21 + *(_DWORD *)(a3 + 20);
      v29 = *(_DWORD *)(a3 + 24);
      v30 = *(_QWORD *)(a3 + 8) + 4 * (int)(v29 * i);
      v31 = *(_DWORD *)(a3 + 28) - v29 * i;
      v32 = *(_QWORD *)(a3 + 32);
      DWORD2(v57) = *(_DWORD *)(a3 + 16);
      HIDWORD(v57) = v28;
      *(_QWORD *)&v58 = __PAIR64__(v31, v29);
      *((_QWORD *)&v58 + 1) = v32;
      v56 = &unk_1E5D29D40;
      *(_QWORD *)&v57 = v30;
      if (v8 != 1)
        kaldi::CuMatrixBase<float>::SetStride((uint64_t)&v56, v29 * v8);
      v50 = &unk_1E5D29D70;
      *(_QWORD *)&v51 = v62 + 4 * HIDWORD(v64) * i;
      *(_QWORD *)&v52 = v66;
      *((_QWORD *)&v51 + 1) = v63;
      kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v53, (uint64_t)&v50, (int)v63 / v19);
      *((_QWORD *)&v51 + 1) = __PAIR64__(HIDWORD(v54), v15);
      v52 = v55;
      v50 = &unk_1E5D29D40;
      *(_QWORD *)&v51 = v54;
      *((_QWORD *)&v48 + 1) = __PAIR64__(HIDWORD(v54), v39);
      LODWORD(v49) = v55;
      DWORD1(v49) = DWORD1(v55) - v15;
      *((_QWORD *)&v49 + 1) = *((_QWORD *)&v55 + 1);
      v47 = &unk_1E5D29D40;
      *(_QWORD *)&v48 = v54 + 4 * (int)v15;
      v33 = (HIDWORD(v54) - HIDWORD(v60[1])) * v55;
      *((_QWORD *)&v45 + 1) = __PAIR64__(HIDWORD(v60[1]), v15);
      LODWORD(v46) = v55;
      DWORD1(v46) = DWORD1(v55) - v33;
      *((_QWORD *)&v46 + 1) = *((_QWORD *)&v55 + 1);
      v44 = &unk_1E5D29D40;
      *(_QWORD *)&v45 = v54 + 4 * v33;
      v34 = a1[7];
      if (v34)
        (*(void (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)v34 + 112))(v34, &v59, &v44, v40);
      else
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v44, (uint64_t)&v59, 111);
      v35 = v49 * (HIDWORD(v48) - HIDWORD(v60[1]));
      *((_QWORD *)&v42 + 1) = __PAIR64__(HIDWORD(v60[1]), DWORD2(v48));
      LODWORD(v43) = v49;
      DWORD1(v43) = DWORD1(v49) - v35;
      *((_QWORD *)&v43 + 1) = *((_QWORD *)&v49 + 1);
      v41 = &unk_1E5D29D40;
      *(_QWORD *)&v42 = v48 + 4 * v35;
      v36 = a1[8];
      if (v36)
        (*(void (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)v36 + 112))(v36, &v59, &v41, v40);
      else
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v41, (uint64_t)&v59, 111);
      (*(void (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)a1[9] + 24))(a1[9], &v50, &v47, v40);
      v37 = a1[9] + *(_QWORD *)(*(_QWORD *)a1[9] - 40);
      (*(void (**)(uint64_t, void **, void **, _QWORD))(*(_QWORD *)v37 + 112))(v37, &v59, &v56, v40);
      v41 = &unk_1E5D29D40;
      v42 = 0u;
      v43 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v41);
      v44 = &unk_1E5D29D40;
      v45 = 0u;
      v46 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v44);
      v47 = &unk_1E5D29D40;
      v48 = 0u;
      v49 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v47);
      v50 = &unk_1E5D29D40;
      v51 = 0u;
      v52 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v50);
      v53 = &unk_1E5D29D40;
      v54 = 0u;
      v55 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v53);
      v56 = &unk_1E5D29D40;
      v57 = 0u;
      v58 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v56);
      v59 = &unk_1E5D29D40;
      memset(v60, 0, sizeof(v60));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v59);
      --v21;
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1[9] + 32))(a1[9]);
  (*(void (**)(uint64_t *, int32x2_t *, _QWORD))(*a1 + 128))(a1, &v61, v40);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v61);
}

void sub_1ADDB8E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  _OWORD *v55;

  *v55 = 0u;
  v55[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a50);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a55);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::SelfAttention::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return kaldi::nnet1::SelfAttention::PropagateFnc((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 128)), a2, a3, a4);
}

uint64_t kaldi::nnet1::SelfAttention::Info(kaldi::nnet1::SelfAttention *this)
{
  void **v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  void *__p;
  uint64_t v11;
  unsigned __int8 v12;
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  if (*((_QWORD *)this + 7))
  {
    kaldi::WriteToken(v13, 0, "<KeyTransform>");
    (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 7) + 64))(&__p);
    v2 = (v12 & 0x80u) == 0 ? &__p : (void **)__p;
    v3 = (v12 & 0x80u) == 0 ? v12 : v11;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v2, v3);
    if ((char)v12 < 0)
      operator delete(__p);
  }
  if (*((_QWORD *)this + 8))
  {
    kaldi::WriteToken(v13, 0, "<ValueTransform>");
    (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 8) + 64))(&__p);
    v4 = (v12 & 0x80u) == 0 ? &__p : (void **)__p;
    v5 = (v12 & 0x80u) == 0 ? v12 : v11;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v4, v5);
    if ((char)v12 < 0)
      operator delete(__p);
  }
  v6 = (_QWORD *)*((_QWORD *)this + 9);
  if (v6)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)((char *)v6 + *(_QWORD *)(*v6 - 40)) + 64))(&__p);
    v7 = (v12 & 0x80u) == 0 ? &__p : (void **)__p;
    v8 = (v12 & 0x80u) == 0 ? v12 : v11;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v7, v8);
    if ((char)v12 < 0)
      operator delete(__p);
  }
  std::stringbuf::str();
  v13[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v13[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v15);
}

void sub_1ADDB9188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::SelfAttention::Info(kaldi::nnet1::SelfAttention *this)
{
  return kaldi::nnet1::SelfAttention::Info((kaldi::nnet1::SelfAttention *)((char *)this
                                                                         + *(_QWORD *)(*(_QWORD *)this - 80)));
}

uint64_t kaldi::nnet1::SelfAttention::CopyQuantized8Bit(const void **this)
{
  uint64_t v2;
  void (**v3)(kaldi::nnet1::SelfAttention *__hidden);
  char *v4;
  const void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = operator new();
  *(_QWORD *)(v2 + 88) = *(const void **)((char *)this + *((_QWORD *)*this - 5) + 8);
  *(_WORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = &unk_1E5D2C5B0;
  *(_DWORD *)(v2 + 48) = 1;
  v3 = &off_1E5D2C2E8;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = &off_1E5D2C588;
  *(_QWORD *)v2 = &off_1E5D2C2E8;
  *(_QWORD *)(v2 + 8) = &off_1E5D2C3A0;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = &off_1E5D2C4B8;
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>(this + 7, &v9);
  *(_QWORD *)(v2 + 56) = v9;
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>(this + 8, &v9);
  *(_QWORD *)(v2 + 64) = v9;
  v4 = (char *)this[9];
  if (v4)
  {
    v5 = (const void *)(*(uint64_t (**)(char *))(*(_QWORD *)&v4[*(_QWORD *)(*(_QWORD *)v4 - 48)] + 16))(&v4[*(_QWORD *)(*(_QWORD *)v4 - 48)]);
    if (v5)
    else
      v6 = 0;
    v7 = *(_QWORD *)(v2 + 72);
    *(_QWORD *)(v2 + 72) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v3 = *(void (***)(kaldi::nnet1::SelfAttention *__hidden))v2;
  }
  return (uint64_t)*(v3 - 5) + v2;
}

uint64_t kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable8BitComponentItf>@<X0>(const void **a1@<X0>, uint64_t *a2@<X8>)
{
  const void *v3;
  kaldi::nnet1::Quantizable8BitComponentItf *v4;
  uint64_t result;

  v3 = *a1;
  if (*a1)
  {
    if (v4)
      result = kaldi::nnet1::Quantizable8BitComponentItf::CopyQuantized(v4);
    else
      result = (*(uint64_t (**)(const void *))(*(_QWORD *)v3 + 16))(v3);
  }
  else
  {
    result = 0;
  }
  *a2 = result;
  return result;
}

uint64_t kaldi::nnet1::SelfAttention::CopyQuantized16Bit(const void **this)
{
  uint64_t v2;
  void (**v3)(kaldi::nnet1::SelfAttention *__hidden);
  char *v4;
  const void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  v2 = operator new();
  *(_QWORD *)(v2 + 88) = *(const void **)((char *)this + *((_QWORD *)*this - 5) + 8);
  *(_WORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = &unk_1E5D2C5B0;
  *(_DWORD *)(v2 + 48) = 1;
  v3 = &off_1E5D2C2E8;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 128) = &off_1E5D2C588;
  *(_QWORD *)v2 = &off_1E5D2C2E8;
  *(_QWORD *)(v2 + 8) = &off_1E5D2C3A0;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = &off_1E5D2C4B8;
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>(this + 7, &v9);
  *(_QWORD *)(v2 + 56) = v9;
  kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>(this + 8, &v9);
  *(_QWORD *)(v2 + 64) = v9;
  v4 = (char *)this[9];
  if (v4)
  {
    v5 = (const void *)(*(uint64_t (**)(char *))(*(_QWORD *)&v4[*(_QWORD *)(*(_QWORD *)v4 - 56)] + 16))(&v4[*(_QWORD *)(*(_QWORD *)v4 - 56)]);
    if (v5)
    else
      v6 = 0;
    v7 = *(_QWORD *)(v2 + 72);
    *(_QWORD *)(v2 + 72) = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v3 = *(void (***)(kaldi::nnet1::SelfAttention *__hidden))v2;
  }
  return (uint64_t)*(v3 - 5) + v2;
}

uint64_t kaldi::nnet1::ScaledDotAttention::CopyOrQuantize<kaldi::nnet1::Quantizable16BitComponentItf>@<X0>(const void **a1@<X0>, uint64_t *a2@<X8>)
{
  const void *v3;
  kaldi::nnet1::Quantizable8BitComponentItf *v4;
  uint64_t result;

  v3 = *a1;
  if (*a1)
  {
    if (v4)
      result = kaldi::nnet1::Quantizable8BitComponentItf::CopyQuantized(v4);
    else
      result = (*(uint64_t (**)(const void *))(*(_QWORD *)v3 + 16))(v3);
  }
  else
  {
    result = 0;
  }
  *a2 = result;
  return result;
}

uint64_t `virtual thunk to'kaldi::nnet1::SelfAttention::CopyQuantized16Bit(kaldi::nnet1::SelfAttention *this)
{
  return kaldi::nnet1::SelfAttention::CopyQuantized16Bit((const void **)((char *)this
                                                                       + *(_QWORD *)(*(_QWORD *)this - 32)));
}

void kaldi::nnet1::SelfAttention::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  char v8;
  __int128 *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD *v26;
  __int128 *p_p;
  uint64_t v28;
  __int128 __p;
  uint64_t v30;
  _QWORD v31[36];

  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v31, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Reading SelfAttention component", 31);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v31);
  }
  __p = 0uLL;
  v30 = 0;
  while (1)
  {
    if (kaldi::Peek(a2, a3) != 60)
    {
      v8 = HIBYTE(v30);
      goto LABEL_61;
    }
    kaldi::ReadToken(a2, a3, (uint64_t)&__p);
    v8 = HIBYTE(v30);
    if ((SHIBYTE(v30) & 0x80000000) == 0)
      break;
    v13 = *((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1) == 14
      && (*(_QWORD *)__p == 0x6E61725479654B3CLL ? (v14 = *(_QWORD *)(__p + 6) == 0x3E6D726F66736E61) : (v14 = 0), v14))
    {
LABEL_12:
      v11 = kaldi::nnet1::Component::Read(a2, a3, a4);
      v12 = a1[7];
      a1[7] = v11;
      if (v12)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        v11 = a1[7];
      }
      if (!v11)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"reading key transform failed", 28);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
      }
    }
    else
    {
      if (*((_QWORD *)&__p + 1) != 16)
        goto LABEL_27;
      if (*(_QWORD *)__p == 0x725465756C61563CLL && *(_QWORD *)(__p + 8) == 0x3E6D726F66736E61)
      {
LABEL_49:
        v21 = kaldi::nnet1::Component::Read(a2, a3, a4);
        v22 = a1[8];
        a1[8] = v21;
        if (v22)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          v21 = a1[8];
        }
        if (!v21)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"reading value transform failed", 30);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
        }
      }
      else
      {
        v13 = *((_QWORD *)&__p + 1);
LABEL_27:
        if (v13 != 11)
          goto LABEL_54;
        if (*(_QWORD *)__p != 0x69746E657474413CLL || *(_QWORD *)(__p + 3) != 0x3E6E6F69746E6574)
        {
          v13 = *((_QWORD *)&__p + 1);
LABEL_54:
          if (v13 == 12)
          {
            v9 = (__int128 *)__p;
            goto LABEL_56;
          }
LABEL_66:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
          v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Unrecognized token ", 19);
          if (v30 >= 0)
            p_p = &__p;
          else
            p_p = (__int128 *)__p;
          if (v30 >= 0)
            v28 = HIBYTE(v30);
          else
            v28 = *((_QWORD *)&__p + 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)p_p, v28);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
        }
LABEL_43:
        v19 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
        if (v19)
        v20 = a1[9];
        a1[9] = v19;
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          v19 = (const void *)a1[9];
        }
        if (!v19)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"failed to read attention component in SelfAttention", 51);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
        }
      }
    }
  }
  v9 = &__p;
  switch(HIBYTE(v30))
  {
    case 0xB:
      goto LABEL_38;
    case 0xC:
      goto LABEL_56;
    case 0xE:
      if ((_QWORD)__p != 0x6E61725479654B3CLL || *(_QWORD *)((char *)&__p + 6) != 0x3E6D726F66736E61)
        goto LABEL_66;
      goto LABEL_12;
    case 0x10:
      if ((_QWORD)__p == 0x725465756C61563CLL && *((_QWORD *)&__p + 1) == 0x3E6D726F66736E61)
        goto LABEL_49;
      if (HIBYTE(v30) == 11)
      {
LABEL_38:
        if ((_QWORD)__p != 0x69746E657474413CLL || *(_QWORD *)((char *)&__p + 3) != 0x3E6E6F69746E6574)
          goto LABEL_66;
        goto LABEL_43;
      }
      if (HIBYTE(v30) != 12)
        goto LABEL_66;
      v9 = &__p;
LABEL_56:
      v23 = *(_QWORD *)v9;
      v24 = *((_DWORD *)v9 + 2);
      if (v23 != 0x6E6F706D6F432F3CLL || v24 != 1047817829)
        goto LABEL_66;
LABEL_61:
      if (v8 < 0)
        operator delete((void *)__p);
      return;
    default:
      goto LABEL_66;
  }
}

void sub_1ADDB9954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'kaldi::nnet1::SelfAttention::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::SelfAttention::ReadData((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 176)), a2, a3, a4);
}

_QWORD *kaldi::nnet1::SelfAttention::WriteData(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  if (a1[7])
  {
    kaldi::WriteToken(a2, a3, "<KeyTransform>");
    kaldi::nnet1::Component::Write(a1[7], a2, a3, a4);
  }
  if (a1[8])
  {
    kaldi::WriteToken(a2, a3, "<ValueTransform>");
    kaldi::nnet1::Component::Write(a1[8], a2, a3, a4);
  }
  kaldi::WriteToken(a2, a3, "<Attention>");
  kaldi::nnet1::Component::Write(a1[9] + *(_QWORD *)(*(_QWORD *)a1[9] - 40), a2, a3, a4);
  return kaldi::WriteToken(a2, a3, "</Component>");
}

_QWORD *`virtual thunk to'kaldi::nnet1::SelfAttention::WriteData(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::SelfAttention::WriteData((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 120)), a2, a3, a4);
}

uint64_t *kaldi::nnet1::SelfAttention::EnsureBuffers(kaldi::nnet1::SelfAttention *this)
{
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 2, 1uLL);
}

uint64_t *`non-virtual thunk to'kaldi::nnet1::SelfAttention::EnsureBuffers(kaldi::nnet1::SelfAttention *this)
{
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 1, 1uLL);
}

uint64_t kaldi::nnet1::SelfAttention::HistoryStateSize(kaldi::nnet1::SelfAttention *this)
{
  uint64_t v1;
  int *v2;
  int v3;
  uint64_t v4;
  _DWORD *v5;

  v1 = *((_QWORD *)this + 7);
  if (v1)
    v2 = (int *)(v1 + 12);
  else
    v2 = (int *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40) + 8);
  v3 = *v2;
  v4 = *((_QWORD *)this + 8);
  if (v4)
    v5 = (_DWORD *)(v4 + 12);
  else
    v5 = (_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 40) + 8);
  return (*v5 + v3);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::SelfAttention::HistoryStateSize(kaldi::nnet1::SelfAttention *this)
{
  uint64_t v1;
  int *v2;
  int v3;
  uint64_t v4;
  _DWORD *v5;

  v1 = *((_QWORD *)this + 6);
  if (v1)
    v2 = (int *)(v1 + 12);
  else
    v2 = (int *)((char *)this + *(_QWORD *)(*((_QWORD *)this - 1) - 40));
  v3 = *v2;
  v4 = *((_QWORD *)this + 7);
  if (v4)
    v5 = (_DWORD *)(v4 + 12);
  else
    v5 = (_DWORD *)((char *)this + *(_QWORD *)(*((_QWORD *)this - 1) - 40));
  return (*v5 + v3);
}

uint64_t kaldi::nnet1::SelfAttention::ResetHistoryState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int32x2_t *v7;
  unint64_t i;
  int32x2_t v10;
  __int128 v11;
  __int128 v12;
  char v13;

  (*(void (**)(_QWORD *))(*a1 + 160))(a1);
  v6 = a2[1];
  v7 = (int32x2_t *)a1[2];
  v7[4] = (int32x2_t)a3;
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if (((*(_QWORD *)(*a2 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v10, "ResetHistoryState for SelfAttention makes only sense if all utterances get reset at the same time");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v10);
      }
    }
  }
  v12 = 0u;
  v11 = 0u;
  v10 = (int32x2_t)&unk_1E5D34170;
  v13 = 0;
  kaldi::CuMatrix<float>::operator=(v7, &v10);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v10);
}

void sub_1ADDB9BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::SelfAttention::ResetHistoryState(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return kaldi::nnet1::SelfAttention::ResetHistoryState((_QWORD *)(a1 - 8), a2, a3);
}

uint64_t kaldi::nnet1::SelfAttention::ResetHistoryState(kaldi::nnet1::SelfAttention *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;

  v3 = (_QWORD *)*((_QWORD *)this + 2);
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 != v3)
  {
    v4 = v2 - 6;
    v5 = v2 - 6;
    do
    {
      v6 = *v5;
      v5 -= 6;
      (*(void (**)(_QWORD *))(v6 + 16))(v4);
      v7 = v4 == v3;
      v4 = v5;
    }
    while (!v7);
  }
  *((_QWORD *)this + 3) = v3;
  return (*(uint64_t (**)(kaldi::nnet1::SelfAttention *))(*(_QWORD *)this + 160))(this);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::SelfAttention::ResetHistoryState(kaldi::nnet1::SelfAttention *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  char *v8;
  uint64_t v9;

  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2 != v3)
  {
    v4 = v2 - 6;
    v5 = v2 - 6;
    do
    {
      v6 = *v5;
      v5 -= 6;
      (*(void (**)(_QWORD *))(v6 + 16))(v4);
      v7 = v4 == v3;
      v4 = v5;
    }
    while (!v7);
  }
  v9 = *((_QWORD *)this - 1);
  v8 = (char *)this - 8;
  *((_QWORD *)v8 + 3) = v3;
  return (*(uint64_t (**)(char *))(v9 + 160))(v8);
}

int *kaldi::nnet1::SelfAttention::GetHistoryState(uint64_t a1, int32x2_t *a2)
{
  kaldi::CuMatrix<float>::Resize(a2, *(unsigned int *)(*(_QWORD *)(a1 + 16) + 20), *(unsigned int *)(*(_QWORD *)(a1 + 16) + 16), 1, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a2, *(_QWORD *)(a1 + 16), 111);
}

int *`non-virtual thunk to'kaldi::nnet1::SelfAttention::GetHistoryState(uint64_t a1, int32x2_t *a2)
{
  return kaldi::nnet1::SelfAttention::GetHistoryState(a1 - 8, a2);
}

void kaldi::nnet1::SelfAttention::GetHistoryState(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD v10[4];

  kaldi::CuVector<float>::Resize((uint64_t)a2, *(unsigned int *)(*(_QWORD *)(a1 + 16) + 16), 1);
  v6 = *(_QWORD *)(a1 + 16);
  if (*(int *)(v6 + 20) >= 1)
  {
    v7 = *(_QWORD *)(v6 + 8) + 4 * *(_DWORD *)(v6 + 24) * a3;
    v8 = *(_DWORD *)(v6 + 16);
    v9 = *(_QWORD *)(v6 + 32);
    v10[0] = &unk_1E5D29D70;
    v10[1] = v7;
    v10[3] = v9;
    v10[2] = v8;
    kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v10);
  }
}

void `non-virtual thunk to'kaldi::nnet1::SelfAttention::GetHistoryState(uint64_t a1, _QWORD *a2, int a3)
{
  kaldi::nnet1::SelfAttention::GetHistoryState(a1 - 8, a2, a3);
}

int *kaldi::nnet1::SelfAttention::SetHistoryState(int32x2_t **a1, uint64_t a2)
{
  ((void (*)(int32x2_t **))(*a1)[20])(a1);
  kaldi::CuMatrix<float>::Resize(a1[2], *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a1[2], a2, 111);
}

int *`non-virtual thunk to'kaldi::nnet1::SelfAttention::SetHistoryState(uint64_t a1, uint64_t a2)
{
  return kaldi::nnet1::SelfAttention::SetHistoryState((int32x2_t **)(a1 - 8), a2);
}

void kaldi::nnet1::SelfAttention::SetHistoryState(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  int32x2_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD v12[4];

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v6 = *(unsigned int *)(a2 + 16);
  v7 = *(int32x2_t **)(a1 + 16);
  if ((int)v6 < 1)
  {
    kaldi::CuMatrix<float>::Resize(v7, 0, 0, 0, 0);
  }
  else
  {
    kaldi::CuMatrix<float>::Resize(v7, *(unsigned int *)(a1 + 48), v6, 2, 0);
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(_QWORD *)(v8 + 8) + 4 * *(_DWORD *)(v8 + 24) * a3;
    v10 = *(_DWORD *)(v8 + 16);
    v11 = *(_QWORD *)(v8 + 32);
    v12[0] = &unk_1E5D29D70;
    v12[1] = v9;
    v12[3] = v11;
    v12[2] = v10;
    kaldi::CuVectorBase<float>::CopyFromVec(v12, a2);
  }
}

void `non-virtual thunk to'kaldi::nnet1::SelfAttention::SetHistoryState(uint64_t a1, uint64_t a2, int a3)
{
  kaldi::nnet1::SelfAttention::SetHistoryState(a1 - 8, a2, a3);
}

kaldi::nnet1::AverageAttention *kaldi::nnet1::AverageAttention::AverageAttention(kaldi::nnet1::AverageAttention *this, const kaldi::nnet1::Nnet **a2)
{
  uint64_t v4;
  kaldi::nnet1::Nnet **v5;
  kaldi::nnet1::Nnet **v6;
  kaldi::nnet1::Nnet *v7;
  kaldi::nnet1::Nnet *v8;

  v4 = *((_QWORD *)*a2 - 5);
  *((_QWORD *)this + 9) = &off_1E5D2D058;
  *((_QWORD *)this + 10) = *(const kaldi::nnet1::Nnet **)((char *)a2 + v4 + 8);
  *((_WORD *)this + 44) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 15) = &off_1E5D2D128;
  *((_QWORD *)this + 1) = &off_1E5D2CF40;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = &unk_1E5D2C5B0;
  *((_DWORD *)this + 12) = 1;
  *(_QWORD *)this = &off_1E5D2CE88;
  *((_QWORD *)this + 7) = 0;
  v5 = (kaldi::nnet1::Nnet **)((char *)this + 56);
  *((_QWORD *)this + 8) = 0;
  v6 = (kaldi::nnet1::Nnet **)((char *)this + 64);
  v7 = (kaldi::nnet1::Nnet *)operator new();
  kaldi::nnet1::Nnet::Nnet(v7, a2[7]);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100](v5, v7);
  if (a2[8])
  {
    v8 = (kaldi::nnet1::Nnet *)operator new();
    kaldi::nnet1::Nnet::Nnet(v8, a2[8]);
    std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100](v6, v8);
  }
  return this;
}

void sub_1ADDBA014(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  kaldi::nnet1::Component *v2;
  quasar::Bitmap *v3;
  kaldi::nnet1::HistoricalComponent *v4;
  kaldi::nnet1::Nnet **v5;
  kaldi::nnet1::Nnet **v6;
  uint64_t v7;

  MEMORY[0x1AF44D190](v7, 0x10B0C4082B712C9);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100](v6, 0);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100](v5, 0);
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent(v4);
  quasar::Bitmap::~Bitmap(v1);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v1);
  kaldi::nnet1::Component::~Component(v2);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AverageAttention::PropagateFnc(_QWORD *a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int32x2_t *v12;
  __int32 v13;
  uint64_t v14;
  int32x2_t v15;
  float v16;
  int v17;
  int v18;
  int32x2_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD v24[4];
  int32x2_t v25;
  _OWORD v26[2];
  char v27;
  int32x2_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int32x2_t v33;
  __int128 v34;
  __int128 v35;
  char v36;
  _QWORD v37[5];
  void *v38;
  __int128 v39;
  __int128 v40;
  int32x2_t v41[2];
  int v42;

  v8 = *(unsigned int *)(a2 + 20);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v41, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Running forward propagation for batch size = ", 45);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", which contains ", 17);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" frames each from ", 18);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" utterances.", 12);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v41);
  }
  (*(void (**)(_QWORD *))(*a1 + 160))(a1);
  v12 = (int32x2_t *)(a1[2] + 48 * (int)a4);
  v13 = v12[2].i32[1];
  if (!v13)
  {
    v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1);
    kaldi::CuMatrix<float>::Resize(v12, v8, v14, 0, 0);
    v13 = v12[2].i32[1];
  }
  v15 = v12[4];
  *(int32x2_t *)&v39 = v12[1];
  DWORD2(v39) = 1;
  HIDWORD(v39) = v13;
  *(int32x2_t *)&v40 = v12[3];
  *((int32x2_t *)&v40 + 1) = v15;
  v38 = &unk_1E5D29D40;
  kaldi::CuMatrixBase<float>::Add((uint64_t)&v38, 1.0);
  v16 = *(float *)v39;
  v17 = kaldi::nnet1::Nnet::InputDim((kaldi::nnet1::Nnet *)a1[7]);
  v18 = v12[3].i32[1] - 1;
  v19 = v12[4];
  v37[1] = *(_QWORD *)&v12[1] + 4;
  LODWORD(v37[2]) = v17;
  *(int32x2_t *)((char *)&v37[2] + 4) = *(int32x2_t *)((char *)v12 + 20);
  HIDWORD(v37[3]) = v18;
  v37[4] = v19;
  v37[0] = &unk_1E5D29D40;
  kaldi::CuMatrixBase<float>::AddMat((uint64_t)v37, a2, 111, 1.0, 1.0);
  kaldi::CuMatrix<float>::CuMatrix(v41, v37, 111);
  kaldi::CuMatrixBase<float>::Scale((uint64_t)v41, 1.0 / v16);
  v35 = 0u;
  v34 = 0u;
  v33 = (int32x2_t)&unk_1E5D34170;
  v36 = 0;
  kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>((uint64_t *)a1[7], v41, &v33, a4);
  if (a1[8])
  {
    kaldi::CuMatrix<float>::CuMatrix(&v28, *(unsigned int *)(a2 + 20), (v42 + *(_DWORD *)(a2 + 16)), 0, 0, 0);
    DWORD2(v26[0]) = *(_DWORD *)(a2 + 16);
    *(_QWORD *)((char *)v26 + 12) = v30;
    DWORD1(v26[1]) = v31;
    *((_QWORD *)&v26[1] + 1) = v32;
    v25 = (int32x2_t)&unk_1E5D29D40;
    *(_QWORD *)&v26[0] = v29;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v25, a2, 111);
    v25 = (int32x2_t)&unk_1E5D29D40;
    memset(v26, 0, sizeof(v26));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v25);
    v20 = *(int *)(a2 + 16);
    DWORD2(v26[0]) = v42;
    *(_QWORD *)((char *)v26 + 12) = v30;
    DWORD1(v26[1]) = v31 - v20;
    *((_QWORD *)&v26[1] + 1) = v32;
    v25 = (int32x2_t)&unk_1E5D29D40;
    *(_QWORD *)&v26[0] = v29 + 4 * v20;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v25, (uint64_t)&v33, 111);
    v25 = (int32x2_t)&unk_1E5D29D40;
    memset(v26, 0, sizeof(v26));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v25);
    memset(v26, 0, sizeof(v26));
    v25 = (int32x2_t)&unk_1E5D34170;
    v27 = 0;
    kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>((uint64_t *)a1[8], &v28, &v25, 0);
    LODWORD(v24[1]) = *(_DWORD *)(a2 + 16);
    *(_QWORD *)((char *)&v24[1] + 4) = *(_QWORD *)((char *)v26 + 12);
    HIDWORD(v24[2]) = DWORD1(v26[1]);
    v24[3] = *((_QWORD *)&v26[1] + 1);
    v23 = &unk_1E5D29D40;
    v24[0] = *(_QWORD *)&v26[0];
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v23, a2);
    v23 = &unk_1E5D29D40;
    memset(v24, 0, sizeof(v24));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
    v21 = *(int *)(a2 + 16);
    LODWORD(v24[1]) = v42;
    *(_QWORD *)((char *)&v24[1] + 4) = *(_QWORD *)((char *)v26 + 12);
    HIDWORD(v24[2]) = DWORD1(v26[1]) - v21;
    v24[3] = *((_QWORD *)&v26[1] + 1);
    v23 = &unk_1E5D29D40;
    v24[0] = *(_QWORD *)&v26[0] + 4 * v21;
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v23, (uint64_t)&v33);
    v23 = &unk_1E5D29D40;
    memset(v24, 0, sizeof(v24));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
    LODWORD(v24[1]) = *(_DWORD *)(a2 + 16);
    *(_QWORD *)((char *)&v24[1] + 4) = *(_QWORD *)((char *)v26 + 12);
    HIDWORD(v24[2]) = DWORD1(v26[1]);
    v24[3] = *((_QWORD *)&v26[1] + 1);
    v23 = &unk_1E5D29D40;
    v24[0] = *(_QWORD *)&v26[0];
    kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, (uint64_t)&v23, 111);
    v23 = &unk_1E5D29D40;
    memset(v24, 0, sizeof(v24));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
    v22 = *(int *)(a2 + 16);
    LODWORD(v24[1]) = v42;
    *(_QWORD *)((char *)&v24[1] + 4) = *(_QWORD *)((char *)v26 + 12);
    HIDWORD(v24[2]) = DWORD1(v26[1]) - v22;
    v24[3] = *((_QWORD *)&v26[1] + 1);
    v23 = &unk_1E5D29D40;
    v24[0] = *(_QWORD *)&v26[0] + 4 * v22;
    kaldi::CuMatrixBase<float>::AddMat((uint64_t)a3, (uint64_t)&v23, 111, 1.0, 1.0);
    v23 = &unk_1E5D29D40;
    memset(v24, 0, sizeof(v24));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v25);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v28);
  }
  else
  {
    kaldi::CuMatrixBase<float>::CopyFromMat<float>(a3, (uint64_t)&v33, 111);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v33);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v41);
  v37[0] = &unk_1E5D29D40;
  memset(&v37[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v37);
  v38 = &unk_1E5D29D40;
  v39 = 0u;
  v40 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v38);
}

void sub_1ADDBA59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  _OWORD *v42;
  _OWORD *v43;
  uint64_t v44;
  _OWORD *v45;

  *v42 = 0u;
  v42[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a14);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a20);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a26);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a42);
  a32 = v44 + 16;
  *v45 = 0u;
  v45[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a32);
  a37 = v44 + 16;
  *v43 = 0u;
  v43[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a37);
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::AverageAttention::PropagateFnc(_QWORD *a1, uint64_t a2, int *a3, uint64_t a4)
{
  kaldi::nnet1::AverageAttention::PropagateFnc((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 128)), a2, a3, a4);
}

uint64_t kaldi::nnet1::AverageAttention::Info(kaldi::nnet1::Nnet **this)
{
  void *p_p;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void *__p;
  uint64_t v8;
  unsigned __int8 v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  kaldi::WriteToken(v10, 0, "<AverageFfn>");
  kaldi::nnet1::Nnet::Info((uint64_t *)&__p, this[7]);
  if ((v9 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v9 & 0x80u) == 0)
    v3 = v9;
  else
    v3 = v8;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)p_p, v3);
  if ((char)v9 < 0)
    operator delete(__p);
  if (this[8])
  {
    kaldi::WriteToken(v10, 0, "<Gate>");
    kaldi::nnet1::Nnet::Info((uint64_t *)&__p, this[8]);
    v4 = (v9 & 0x80u) == 0 ? &__p : (void **)__p;
    v5 = (v9 & 0x80u) == 0 ? v9 : v8;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v4, v5);
    if ((char)v9 < 0)
      operator delete(__p);
  }
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v12);
}

void sub_1ADDBA820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::AverageAttention::Info(kaldi::nnet1::AverageAttention *this)
{
  return kaldi::nnet1::AverageAttention::Info((kaldi::nnet1::Nnet **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 80)));
}

uint64_t kaldi::nnet1::AverageAttention::CopyQuantized8Bit(const kaldi::nnet1::Nnet **this)
{
  uint64_t v2;
  const void ***v3;

  v2 = operator new();
  kaldi::nnet1::AverageAttention::AverageAttention((kaldi::nnet1::AverageAttention *)v2, this);
  kaldi::nnet1::Nnet::QuantizeComponents<kaldi::nnet1::Quantizable8BitComponentItf>(*(const void ****)(v2 + 56));
  v3 = *(const void ****)(v2 + 64);
  if (v3)
    kaldi::nnet1::Nnet::QuantizeComponents<kaldi::nnet1::Quantizable8BitComponentItf>(v3);
  return v2 + *(_QWORD *)(*(_QWORD *)v2 - 40);
}

void sub_1ADDBA8C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A1C40C7858128);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AverageAttention::CopyQuantized16Bit(const kaldi::nnet1::Nnet **this)
{
  uint64_t v2;
  const void ***v3;

  v2 = operator new();
  kaldi::nnet1::AverageAttention::AverageAttention((kaldi::nnet1::AverageAttention *)v2, this);
  kaldi::nnet1::Nnet::QuantizeComponents<kaldi::nnet1::Quantizable16BitComponentItf>(*(const void ****)(v2 + 56));
  v3 = *(const void ****)(v2 + 64);
  if (v3)
    kaldi::nnet1::Nnet::QuantizeComponents<kaldi::nnet1::Quantizable16BitComponentItf>(v3);
  return v2 + *(_QWORD *)(*(_QWORD *)v2 - 40);
}

void sub_1ADDBA94C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A1C40C7858128);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::AverageAttention::CopyQuantized16Bit(kaldi::nnet1::AverageAttention *this)
{
  return kaldi::nnet1::AverageAttention::CopyQuantized16Bit((const kaldi::nnet1::Nnet **)((char *)this
                                                                                        + *(_QWORD *)(*(_QWORD *)this - 32)));
}

void kaldi::nnet1::AverageAttention::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::Nnet **v8;
  kaldi::nnet1::Nnet **v9;
  kaldi::nnet1::Nnet *v11;
  uint64_t v12;
  kaldi::nnet1::Nnet *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  void *v23;
  _BOOL4 v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *__p;
  void *v34;

  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Reading AverageAttention component", 34);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  v30 = 0;
  v31 = 0;
  v8 = (kaldi::nnet1::Nnet **)(a1 + 64);
  v9 = (kaldi::nnet1::Nnet **)(a1 + 56);
  v32 = 0;
  while (1)
  {
    while (1)
    {
      if (kaldi::Peek(a2, a3) != 60)
        goto LABEL_48;
      kaldi::ReadToken(a2, a3, (uint64_t)&v30);
      if (SHIBYTE(v32) < 0)
        break;
      if (HIBYTE(v32) != 6)
      {
        if (HIBYTE(v32) != 12)
        {
          if (HIBYTE(v32) == 19)
          {
            v17 = (uint64_t *)&v30;
            goto LABEL_40;
          }
          goto LABEL_66;
        }
        if (v30 != (void *)0x656761726576413CLL || v31 != 1047422534)
          goto LABEL_66;
        goto LABEL_13;
      }
      if ((_DWORD)v30 != 1952532284 || WORD2(v30) != 15973)
        goto LABEL_66;
LABEL_33:
      v16 = (kaldi::nnet1::Nnet *)operator new();
      kaldi::nnet1::Nnet::Nnet(v16);
      std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100](v8, v16);
      kaldi::nnet1::Nnet::Read((uint64_t **)*v8, a2, a3, a4);
      if (!*v8)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"reading input gate network failed", 33);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      if (kaldi::g_kaldi_verbose_level >= 2)
      {
LABEL_35:
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"done", 4);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
      }
    }
    v12 = v31;
    if (v31 == 6)
      break;
    if (v31 != 12)
      goto LABEL_38;
    if (*(_QWORD *)v30 != 0x656761726576413CLL || *((_DWORD *)v30 + 2) != 1047422534)
      goto LABEL_38;
LABEL_13:
    v11 = (kaldi::nnet1::Nnet *)operator new();
    kaldi::nnet1::Nnet::Nnet(v11);
    std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100](v9, v11);
    kaldi::nnet1::Nnet::Read((uint64_t **)*v9, a2, a3, a4);
    if (!*v9)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"reading average feed-forward network failed", 43);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    if (kaldi::g_kaldi_verbose_level >= 2)
      goto LABEL_35;
  }
  if (*(_DWORD *)v30 == 1952532284 && *((_WORD *)v30 + 2) == 15973)
    goto LABEL_33;
  v12 = v31;
LABEL_38:
  if (v12 != 19)
    goto LABEL_66;
  v17 = (uint64_t *)v30;
LABEL_40:
  v18 = *v17;
  v19 = v17[1];
  v20 = *(uint64_t *)((char *)v17 + 11);
  v21 = v18 == 0x6761726576412F3CLL && v19 == 0x69746E6574744165;
  if (!v21 || v20 != 0x3E6E6F69746E6574)
  {
LABEL_66:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unrecognized token ", 19);
    if (v32 >= 0)
      v26 = &v30;
    else
      v26 = v30;
    if (v32 >= 0)
      v27 = HIBYTE(v32);
    else
      v27 = v31;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
LABEL_48:
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"done", 4);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
  kaldi::nnet1::Nnet::GetHistoricalComponents(*v9, &__p);
  v23 = __p;
  if (__p != v34)
  {
    v24 = 1;
    if (!__p)
      goto LABEL_58;
LABEL_57:
    v34 = v23;
    operator delete(v23);
    goto LABEL_58;
  }
  if (*v8)
  {
    kaldi::nnet1::Nnet::GetHistoricalComponents(*v8, &v28);
    v24 = v28 != v29;
    if (v28)
    {
      v29 = v28;
      operator delete(v28);
    }
    v23 = __p;
    if (__p)
      goto LABEL_57;
  }
  else
  {
    v24 = 0;
    if (__p)
      goto LABEL_57;
  }
LABEL_58:
  if (v24)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Recurrent neural networks are not supported inside the average attention component.", 83);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  kaldi::nnet1::Nnet::OutputDim(*v9);
  if (*v8)
  {
    kaldi::nnet1::Nnet::InputDim(*v8);
    kaldi::nnet1::Nnet::InputDim(*v9);
    kaldi::nnet1::Nnet::OutputDim(*v8);
    kaldi::nnet1::Nnet::OutputDim(*v9);
  }
  if (SHIBYTE(v32) < 0)
    operator delete(v30);
}

void sub_1ADDBAE84()
{
  uint64_t v0;

  MEMORY[0x1AF44D190](v0, 0x10B0C4082B712C9);
  JUMPOUT(0x1ADDBAEC0);
}

void sub_1ADDBAEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'kaldi::nnet1::AverageAttention::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::AverageAttention::ReadData((uint64_t)a1 + *(_QWORD *)(*a1 - 176), a2, a3, a4);
}

_QWORD *kaldi::nnet1::AverageAttention::WriteData(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  kaldi::WriteToken(a2, a3, "<AverageFfn>");
  kaldi::nnet1::Nnet::Write(*(uint64_t **)(a1 + 56), a2, a3, a4);
  if (*(_QWORD *)(a1 + 64))
  {
    kaldi::WriteToken(a2, a3, "<Gate>");
    kaldi::nnet1::Nnet::Write(*(uint64_t **)(a1 + 64), a2, a3, a4);
  }
  return kaldi::WriteToken(a2, a3, "</AverageAttention>");
}

_QWORD *`virtual thunk to'kaldi::nnet1::AverageAttention::WriteData(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return kaldi::nnet1::AverageAttention::WriteData((uint64_t)a1 + *(_QWORD *)(*a1 - 120), a2, a3, a4);
}

uint64_t *kaldi::nnet1::AverageAttention::EnsureBuffers(kaldi::nnet1::AverageAttention *this)
{
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 2, 1uLL);
}

uint64_t *`non-virtual thunk to'kaldi::nnet1::AverageAttention::EnsureBuffers(kaldi::nnet1::AverageAttention *this)
{
  return std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 1, 1uLL);
}

uint64_t kaldi::nnet1::AverageAttention::HistoryStateSize(kaldi::nnet1::Nnet **this)
{
  return kaldi::nnet1::Nnet::InputDim(this[7]) + 1;
}

uint64_t `non-virtual thunk to'kaldi::nnet1::AverageAttention::HistoryStateSize(kaldi::nnet1::Nnet **this)
{
  return kaldi::nnet1::Nnet::InputDim(this[6]) + 1;
}

uint64_t kaldi::nnet1::AverageAttention::ResetHistoryState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int32x2_t *v7;
  unint64_t i;
  int32x2_t v10;
  __int128 v11;
  __int128 v12;
  char v13;

  (*(void (**)(_QWORD *))(*a1 + 160))(a1);
  v6 = a2[1];
  v7 = (int32x2_t *)a1[2];
  v7[4] = (int32x2_t)a3;
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if (((*(_QWORD *)(*a2 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) >> i) & 1) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(&v10, "ResetHistoryState for AverageAttention makes only sense if all utterances get reset at the same time");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v10);
      }
    }
  }
  v12 = 0u;
  v11 = 0u;
  v10 = (int32x2_t)&unk_1E5D34170;
  v13 = 0;
  kaldi::CuMatrix<float>::operator=(v7, &v10);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v10);
}

void sub_1ADDBB0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::AverageAttention::ResetHistoryState(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return kaldi::nnet1::AverageAttention::ResetHistoryState((_QWORD *)(a1 - 8), a2, a3);
}

uint64_t kaldi::nnet1::AverageAttention::ResetHistoryState(kaldi::nnet1::AverageAttention *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;

  v3 = (_QWORD *)*((_QWORD *)this + 2);
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  if (v2 != v3)
  {
    v4 = v2 - 6;
    v5 = v2 - 6;
    do
    {
      v6 = *v5;
      v5 -= 6;
      (*(void (**)(_QWORD *))(v6 + 16))(v4);
      v7 = v4 == v3;
      v4 = v5;
    }
    while (!v7);
  }
  *((_QWORD *)this + 3) = v3;
  return (*(uint64_t (**)(kaldi::nnet1::AverageAttention *))(*(_QWORD *)this + 160))(this);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::AverageAttention::ResetHistoryState(kaldi::nnet1::AverageAttention *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  char *v8;
  uint64_t v9;

  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v2 = (_QWORD *)*((_QWORD *)this + 2);
  if (v2 != v3)
  {
    v4 = v2 - 6;
    v5 = v2 - 6;
    do
    {
      v6 = *v5;
      v5 -= 6;
      (*(void (**)(_QWORD *))(v6 + 16))(v4);
      v7 = v4 == v3;
      v4 = v5;
    }
    while (!v7);
  }
  v9 = *((_QWORD *)this - 1);
  v8 = (char *)this - 8;
  *((_QWORD *)v8 + 3) = v3;
  return (*(uint64_t (**)(char *))(v9 + 160))(v8);
}

int *kaldi::nnet1::AverageAttention::GetHistoryState(uint64_t a1, int32x2_t *a2)
{
  kaldi::CuMatrix<float>::Resize(a2, *(unsigned int *)(*(_QWORD *)(a1 + 16) + 20), *(unsigned int *)(*(_QWORD *)(a1 + 16) + 16), 0, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a2, *(_QWORD *)(a1 + 16), 111);
}

int *`non-virtual thunk to'kaldi::nnet1::AverageAttention::GetHistoryState(uint64_t a1, int32x2_t *a2)
{
  return kaldi::nnet1::AverageAttention::GetHistoryState(a1 - 8, a2);
}

void kaldi::nnet1::AverageAttention::GetHistoryState(_QWORD *a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD v11[4];

  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 88))(a1);
  kaldi::CuVector<float>::Resize((uint64_t)a2, v6, 0);
  v7 = a1[2];
  if (*(int *)(v7 + 20) >= 1)
  {
    v8 = *(_QWORD *)(v7 + 8) + 4 * *(_DWORD *)(v7 + 24) * a3;
    v9 = *(_DWORD *)(v7 + 16);
    v10 = *(_QWORD *)(v7 + 32);
    v11[0] = &unk_1E5D29D70;
    v11[1] = v8;
    v11[3] = v10;
    v11[2] = v9;
    kaldi::CuVectorBase<float>::CopyFromVec(a2, (uint64_t)v11);
  }
}

void `non-virtual thunk to'kaldi::nnet1::AverageAttention::GetHistoryState(uint64_t a1, _QWORD *a2, int a3)
{
  kaldi::nnet1::AverageAttention::GetHistoryState((_QWORD *)(a1 - 8), a2, a3);
}

int *kaldi::nnet1::AverageAttention::SetHistoryState(int32x2_t **a1, uint64_t a2)
{
  ((void (*)(int32x2_t **))(*a1)[20])(a1);
  kaldi::CuMatrix<float>::Resize(a1[2], *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a1[2], a2, 111);
}

int *`non-virtual thunk to'kaldi::nnet1::AverageAttention::SetHistoryState(uint64_t a1, uint64_t a2)
{
  return kaldi::nnet1::AverageAttention::SetHistoryState((int32x2_t **)(a1 - 8), a2);
}

void kaldi::nnet1::AverageAttention::SetHistoryState(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  int32x2_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD v12[4];

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v6 = *(unsigned int *)(a2 + 16);
  v7 = *(int32x2_t **)(a1 + 16);
  if ((int)v6 < 1)
  {
    kaldi::CuMatrix<float>::Resize(v7, 0, 0, 0, 0);
  }
  else
  {
    kaldi::CuMatrix<float>::Resize(v7, *(unsigned int *)(a1 + 48), v6, 2, 0);
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(_QWORD *)(v8 + 8) + 4 * *(_DWORD *)(v8 + 24) * a3;
    v10 = *(_DWORD *)(v8 + 16);
    v11 = *(_QWORD *)(v8 + 32);
    v12[0] = &unk_1E5D29D70;
    v12[1] = v9;
    v12[3] = v11;
    v12[2] = v10;
    kaldi::CuVectorBase<float>::CopyFromVec(v12, a2);
  }
}

void `non-virtual thunk to'kaldi::nnet1::AverageAttention::SetHistoryState(uint64_t a1, uint64_t a2, int a3)
{
  kaldi::nnet1::AverageAttention::SetHistoryState(a1 - 8, a2, a3);
}

void kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this)
{
  uint64_t v2;

  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v2 + 192));
  quasar::Bitmap::~Bitmap(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::ScaledDotAttention *)((char *)this + 144));
}

{
  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::nnet1::ScaledDotAttention::Copy(kaldi::nnet1::ScaledDotAttention *this)
{
  return (*(uint64_t (**)(kaldi::nnet1::ScaledDotAttention *, _QWORD))(*(_QWORD *)this + 88))(this, 0);
}

uint64_t kaldi::nnet1::ScaledDotAttention::GetType(kaldi::nnet1::ScaledDotAttention *this)
{
  return 285;
}

void `virtual thunk to'kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this)
{
  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention((kaldi::nnet1::ScaledDotAttention *)((char *)this
                                                                                           + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention((kaldi::nnet1::ScaledDotAttention *)((char *)this
                                                                                           + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1AF44D190);
}

uint64_t `virtual thunk to'kaldi::nnet1::ScaledDotAttention::Copy(kaldi::nnet1::ScaledDotAttention *this)
{
  return (*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 32))
                                                   + 88))((char *)this + *(_QWORD *)(*(_QWORD *)this - 32), 0);
}

uint64_t `virtual thunk to'kaldi::nnet1::ScaledDotAttention::GetType(kaldi::nnet1::ScaledDotAttention *this)
{
  return 285;
}

void kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this)
{
  uint64_t v2;

  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(this, (uint64_t *)&off_1E5D14E98);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v2 + 200));
  quasar::Bitmap::~Bitmap(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::MultiHeadAttention *)((char *)this + 152));
}

{
  kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::nnet1::MultiHeadAttention::GetType(kaldi::nnet1::MultiHeadAttention *this)
{
  return 286;
}

void `virtual thunk to'kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention(kaldi::nnet1::MultiHeadAttention *this)
{
  kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention((kaldi::nnet1::MultiHeadAttention *)((char *)this
                                                                                           + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  kaldi::nnet1::MultiHeadAttention::~MultiHeadAttention((kaldi::nnet1::MultiHeadAttention *)((char *)this
                                                                                           + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1AF44D190);
}

uint64_t `virtual thunk to'kaldi::nnet1::MultiHeadAttention::GetType(kaldi::nnet1::MultiHeadAttention *this)
{
  return 286;
}

void kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
  uint64_t v2;

  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v2 + 248));
  quasar::Bitmap::~Bitmap(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::SupervisedMultiHeadAttention *)((char *)this + 200));
}

{
  kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::nnet1::SupervisedMultiHeadAttention::GetType(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
  return 287;
}

void `virtual thunk to'kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
  kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention((kaldi::nnet1::SupervisedMultiHeadAttention *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention((kaldi::nnet1::SupervisedMultiHeadAttention *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1AF44D190);
}

uint64_t `virtual thunk to'kaldi::nnet1::SupervisedMultiHeadAttention::GetType(kaldi::nnet1::SupervisedMultiHeadAttention *this)
{
  return 287;
}

void kaldi::nnet1::SelfAttention::~SelfAttention(kaldi::nnet1::SelfAttention *this)
{
  uint64_t v2;

  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v2 + 128));
  quasar::Bitmap::~Bitmap(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::SelfAttention *)((char *)this + 80));
}

{
  kaldi::nnet1::SelfAttention::~SelfAttention(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::nnet1::SelfAttention::Copy(kaldi::nnet1::SelfAttention *this)
{
  kaldi::nnet1::SelfAttention *v2;

  v2 = (kaldi::nnet1::SelfAttention *)operator new();
  kaldi::nnet1::SelfAttention::SelfAttention(v2, this);
  return (uint64_t)v2 + *(_QWORD *)(*(_QWORD *)v2 - 40);
}

void sub_1ADDBB6CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A1C40975FDFB3);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::SelfAttention::GetType(kaldi::nnet1::SelfAttention *this)
{
  return 288;
}

void `non-virtual thunk to'kaldi::nnet1::SelfAttention::~SelfAttention(kaldi::nnet1::SelfAttention *this)
{
  kaldi::nnet1::SelfAttention::~SelfAttention((kaldi::nnet1::SelfAttention *)((char *)this - 8));
}

{
  kaldi::nnet1::SelfAttention::~SelfAttention((kaldi::nnet1::SelfAttention *)((char *)this - 8));
  JUMPOUT(0x1AF44D190);
}

void `virtual thunk to'kaldi::nnet1::SelfAttention::~SelfAttention(kaldi::nnet1::SelfAttention *this)
{
  kaldi::nnet1::SelfAttention::~SelfAttention((kaldi::nnet1::SelfAttention *)((char *)this
                                                                            + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  kaldi::nnet1::SelfAttention::~SelfAttention((kaldi::nnet1::SelfAttention *)((char *)this
                                                                            + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1AF44D190);
}

uint64_t `virtual thunk to'kaldi::nnet1::SelfAttention::Copy(kaldi::nnet1::SelfAttention *this)
{
  return kaldi::nnet1::SelfAttention::Copy((kaldi::nnet1::SelfAttention *)((char *)this
                                                                         + *(_QWORD *)(*(_QWORD *)this - 32)));
}

uint64_t `virtual thunk to'kaldi::nnet1::SelfAttention::GetType(kaldi::nnet1::SelfAttention *this)
{
  return 288;
}

void kaldi::nnet1::AverageAttention::~AverageAttention(kaldi::nnet1::AverageAttention *this)
{
  uint64_t v2;

  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v2 + 120));
  quasar::Bitmap::~Bitmap(this);
  kaldi::nnet1::Component::~Component((kaldi::nnet1::AverageAttention *)((char *)this + 72));
}

{
  kaldi::nnet1::AverageAttention::~AverageAttention(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::nnet1::AverageAttention::Copy(const kaldi::nnet1::Nnet **this)
{
  kaldi::nnet1::AverageAttention *v2;

  v2 = (kaldi::nnet1::AverageAttention *)operator new();
  kaldi::nnet1::AverageAttention::AverageAttention(v2, this);
  return (uint64_t)v2 + *(_QWORD *)(*(_QWORD *)v2 - 40);
}

void sub_1ADDBB83C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A1C40C7858128);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AverageAttention::GetType(kaldi::nnet1::AverageAttention *this)
{
  return 289;
}

void `non-virtual thunk to'kaldi::nnet1::AverageAttention::~AverageAttention(kaldi::nnet1::AverageAttention *this)
{
  kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this - 8));
}

{
  kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this - 8));
  JUMPOUT(0x1AF44D190);
}

void `virtual thunk to'kaldi::nnet1::AverageAttention::~AverageAttention(kaldi::nnet1::AverageAttention *this)
{
  kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this
                                                                                     + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  kaldi::nnet1::AverageAttention::~AverageAttention((kaldi::nnet1::AverageAttention *)((char *)this
                                                                                     + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1AF44D190);
}

uint64_t `virtual thunk to'kaldi::nnet1::AverageAttention::Copy(kaldi::nnet1::AverageAttention *this)
{
  return kaldi::nnet1::AverageAttention::Copy((const kaldi::nnet1::Nnet **)((char *)this
                                                                          + *(_QWORD *)(*(_QWORD *)this - 32)));
}

uint64_t `virtual thunk to'kaldi::nnet1::AverageAttention::GetType(kaldi::nnet1::AverageAttention *this)
{
  return 289;
}

uint64_t kaldi::nnet1::ScaledDotAttention::ScaledDotAttention(uint64_t this, uint64_t *a2, int a3, BOOL a4, float a5, char a6)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a2[1];
  *(_QWORD *)this = v6;
  *(_QWORD *)(this + *(_QWORD *)(v6 - 40)) = a2[2];
  *(_QWORD *)(this + *(_QWORD *)(*(_QWORD *)this - 48)) = a2[3];
  *(_QWORD *)(this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[4];
  v7 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)(this + *(_QWORD *)(v7 - 40)) = a2[5];
  *(_QWORD *)(this + *(_QWORD *)(*(_QWORD *)this - 48)) = a2[6];
  *(_QWORD *)(this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[7];
  *(_OWORD *)(this + 16) = 0u;
  *(_OWORD *)(this + 32) = 0u;
  *(_QWORD *)(this + 8) = &unk_1E5D34170;
  *(_BYTE *)(this + 48) = 0;
  *(_OWORD *)(this + 64) = 0u;
  *(_OWORD *)(this + 80) = 0u;
  *(_QWORD *)(this + 56) = &unk_1E5D34170;
  *(_BYTE *)(this + 96) = 0;
  *(_BYTE *)(this + 104) = a6;
  *(float *)(this + 108) = a5;
  *(_OWORD *)(this + 112) = 0u;
  *(_OWORD *)(this + 128) = 0u;
  return this;
}

void kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(kaldi::nnet1::ScaledDotAttention *this, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 40)) = a2[5];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)) = a2[6];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[7];
  v4 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 56);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 8);
  quasar::Bitmap::~Bitmap(this);
}

void kaldi::nnet1::SupervisedMultiHeadAttention::~SupervisedMultiHeadAttention(kaldi::nnet1::SupervisedMultiHeadAttention *this, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 40)) = a2[13];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)) = a2[14];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[15];
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 152);
  kaldi::nnet1::ScaledDotAttention::~ScaledDotAttention(this, a2 + 2);
}

void kaldi::nnet1::SelfAttention::~SelfAttention(kaldi::nnet1::SelfAttention *this, uint64_t *a2)
{
  uint64_t v3;
  kaldi::nnet1::HistoricalComponent *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 40)) = a2[5];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)) = a2[6];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[7];
  *((_QWORD *)this + 1) = &off_1E5D2C3A0;
  v4 = (kaldi::nnet1::SelfAttention *)((char *)this + 8);
  v5 = *((_QWORD *)this + 9);
  *((_QWORD *)v4 + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent(v4);
  quasar::Bitmap::~Bitmap(this);
}

void kaldi::nnet1::AverageAttention::~AverageAttention(kaldi::nnet1::AverageAttention *this, uint64_t *a2)
{
  uint64_t v3;
  kaldi::nnet1::HistoricalComponent *v4;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 40)) = a2[5];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 48)) = a2[6];
  *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 56)) = a2[7];
  *((_QWORD *)this + 1) = &off_1E5D2CF40;
  v4 = (kaldi::nnet1::AverageAttention *)((char *)this + 8);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)this + 8, 0);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)this + 7, 0);
  kaldi::nnet1::HistoricalComponent::~HistoricalComponent(v4);
  quasar::Bitmap::~Bitmap(this);
}

void ResidualAdaptiveNgram::ResidualAdaptiveNgram(ResidualAdaptiveNgram *this, Vocab *a2, int a3)
{
  _QWORD *v3;

  Ngram::Ngram(this, a2, a3);
  *v3 = &off_1E5D16CF0;
}

uint64_t ResidualAdaptiveNgram::computeEta2<unsigned long>(_QWORD **a1, uint64_t a2, uint64_t a3, unsigned int a4, double *a5, double a6)
{
  int v11;
  _QWORD *v12;
  float v13;
  int v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  const unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *inserted;
  uint64_t v27;
  float v28;
  unint64_t v29;
  _DWORD **Count;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  const std::locale::facet *v34;
  double v35;
  uint64_t v36;
  int v39;
  _BYTE v40[80];
  _DWORD v41[2];
  uint64_t v42;
  int v43;
  _BYTE v44[80];
  _DWORD v45[2];
  uint64_t v46;
  int v47;
  std::locale v48;
  unsigned int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v45[0] = 0;
  v45[1] = a4;
  v46 = 0;
  v47 = 0;
  if (!a4)
    return 0;
  v11 = a4 - 1;
  Array<unsigned int>::alloc((uint64_t)v45, a4 - 1, 0);
  v12 = (_QWORD *)(a3 + 160);
  v13 = 0.0;
  v14 = 1;
  v15 = 0.0;
  while (2)
  {
    v39 = v14;
    v16 = (v14 - 1);
    TrieIter2<unsigned int,unsigned long>::TrieIter2(v44, v12, v46 - 4 * v45[0], v16, 0);
    while (TrieIter2<unsigned int,unsigned long>::next((uint64_t)v44))
    {
      v41[0] = 0;
      v41[1] = a4;
      v42 = 0;
      v43 = 0;
      Array<unsigned int>::alloc((uint64_t)v41, v11, 0);
      v17 = v41[0];
      v18 = v42;
      v19 = (int *)(v46 - 4 * v45[0]);
      v21 = Vocab::length((uint64_t)v19, v20);
      v22 = v18 - 4 * v17;
      if (v21)
      {
        v23 = v21;
        v24 = v21;
        do
        {
          v25 = *v19++;
          *(_DWORD *)(v22 + 4 * --v24) = v25;
        }
        while (v24);
      }
      else
      {
        v23 = 0;
      }
      *(_DWORD *)(v22 + 4 * v23) = -1;
      LOBYTE(v48.__locale_) = 0;
      inserted = Trie<unsigned int,unsigned long>::insertTrie(v12, (unsigned int *)(v46 - 4 * v45[0]), &v48);
      TrieIter2<unsigned int,unsigned long>::TrieIter2(v40, inserted, &v49, 1, 0);
      while (1)
      {
        v27 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v40);
        if (!v27)
          break;
        if (!(*(unsigned int (**)(_QWORD *, _QWORD))(*a1[3] + 176))(a1[3], v49) && *(_QWORD *)(v27 + 8))
        {
          v28 = ((float (*)(_QWORD **, _QWORD, uint64_t, uint64_t))(*a1)[60])(a1, v49, v42 - 4 * v41[0], v16);
          if (v28 == -INFINITY)
          {
            v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Error: computeEta2: couldn't find dev n-gram in ARPA, ", 54);
            v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"hint: add to Vocab iterator and re-normalize Ngram.", 51);
            std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(_QWORD *)(*v33 - 24)));
            v34 = std::locale::use_facet(&v48, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
            std::locale::~locale(&v48);
            std::ostream::put();
            std::ostream::flush();
            break;
          }
          v29 = *(_QWORD *)(v27 + 8);
          Count = NgramCounts<unsigned long>::findCount(a2, (unsigned int *)(v46 - 4 * v45[0]), v49);
          v31 = v28 * (float)v29;
          v13 = v13 + v31;
          if (!Count)
            v31 = -0.0;
          v15 = v15 + v31;
        }
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2(v40);
      if (v42)
        MEMORY[0x1AF44D160](v42, 0x1000C8052888210);
      if (v27)
      {
        TrieIter2<unsigned int,unsigned int>::~TrieIter2(v44);
LABEL_28:
        v36 = 0;
        goto LABEL_29;
      }
    }
    TrieIter2<unsigned int,unsigned int>::~TrieIter2(v44);
    v14 = v39 + 1;
    if (v39 + 1 <= a4)
      continue;
    break;
  }
  if (v13 == 0.0)
    goto LABEL_28;
  v35 = (float)(v15 / v13);
  if (v35 > a6)
    v35 = a6;
  *a5 = v35;
  v36 = 1;
LABEL_29:
  if (v46)
    MEMORY[0x1AF44D160](v46, 0x1000C8052888210);
  return v36;
}

void sub_1ADDBBFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  std::locale::~locale((std::locale *)(v3 - 160));
  TrieIter2<unsigned int,unsigned int>::~TrieIter2((uint64_t *)va);
  if (v18)
    MEMORY[0x1AF44D160](v18, 0x1000C8052888210);
  TrieIter2<unsigned int,unsigned int>::~TrieIter2(va1);
  v5 = *(_QWORD *)(v3 - 176);
  if (v5)
    MEMORY[0x1AF44D160](v5, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

unint64_t ResidualAdaptiveNgram::residualAdapt2<unsigned long>(Ngram *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v10;
  unsigned int *v11;
  unint64_t v12;
  _QWORD *inserted;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  unint64_t *Count;
  double v19;
  double v20;
  double v21;
  float v22;
  float v23;
  _QWORD *v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  const unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t Trie;
  uint64_t v42;
  double v43;
  double i;
  float *v45;
  double v46;
  float v47;
  double v48;
  _QWORD *v49;
  double v50;
  double v51;
  double v52;
  uint64_t v53;
  float v54;
  double v55;
  double v56;
  double v57;
  double v58;
  float v59;
  float v60;
  float v61;
  uint64_t v62;
  float *Prob;
  float *v64;
  double v65;
  float v66;
  float v67;
  double v68;
  float *v69;
  float v70;
  unsigned int v72;
  int v73;
  _BYTE v74[80];
  _BYTE v75[80];
  _DWORD v76[2];
  uint64_t v77;
  int v78;
  char v79;
  unsigned int v80;
  _DWORD v81[2];
  uint64_t v82;
  int v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v10 = *((_QWORD *)a1 + 3);
  v11 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10);
  if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 176))(v10, *v11))
    return 0;
  v76[0] = 0;
  v76[1] = a4;
  v77 = 0;
  v78 = 0;
  if (a4)
    Array<unsigned int>::alloc((uint64_t)v76, a4 - 1, 0);
  if (*(double *)(a3 + 8) == 0.0)
    goto LABEL_27;
  TrieIter2<unsigned int,unsigned long>::TrieIter2(v75, a2 + 160, v77 - 4 * v76[0], 0, 0);
  v12 = 0;
  while (TrieIter2<unsigned int,unsigned long>::next((uint64_t)v75))
  {
    LOBYTE(v80) = 0;
    inserted = Trie<unsigned int,unsigned long>::insertTrie((_QWORD *)(a2 + 160), (unsigned int *)(v77 - 4 * v76[0]), &v80);
    TrieIter2<unsigned int,unsigned long>::TrieIter2(v74, inserted, v81, 1, 0);
    while (1)
    {
      v14 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v74);
      if (!v14)
        break;
      if (!(*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)a1 + 3) + 176))(*((_QWORD *)a1 + 3), v81[0]))
      {
        v15 = *(_QWORD *)(v14 + 8);
        if (v15)
          v12 += v15;
      }
    }
    TrieIter2<unsigned int,unsigned int>::~TrieIter2(v74);
  }
  if (v12)
  {
    TrieIter2<unsigned int,BOnode>::TrieIter2(v74, (char *)a1 + 152, v77 - 4 * v76[0], 0, 0);
    while (1)
    {
      v16 = TrieIter2<unsigned int,BOnode>::next((uint64_t)v74);
      if (!v16)
        break;
      LHashIter<unsigned int,float>::LHashIter(v81, v16 + 16, 0);
      v80 = 0;
      while (1)
      {
        v17 = (float *)LHashIter<unsigned int,float>::next((uint64_t)v81, &v80);
        if (!v17)
          break;
        if (!(*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)a1 + 3) + 176))(*((_QWORD *)a1 + 3), v80))
        {
          Count = (unint64_t *)NgramCounts<unsigned long>::findCount(a2, (unsigned int *)(v77 - 4 * v76[0]), v80);
          v19 = 0.0;
          v20 = 0.0;
          if (*v17 != -INFINITY)
            v20 = exp(*v17 * 2.30258509);
          v21 = *(double *)(a3 + 8);
          if (Count)
            v19 = (double)*Count;
          v22 = log10(v20 + v21 * v19 / (double)v12);
          v23 = log10(v21 + 1.0);
          *v17 = v22 - v23;
        }
      }
      LHashIter<unsigned int,double>::~LHashIter((uint64_t)v81);
    }
    (*(void (**)(Ngram *, _QWORD))(*(_QWORD *)a1 + 512))(a1, 0);
    TrieIter2<unsigned int,unsigned int>::~TrieIter2(v74);
    TrieIter2<unsigned int,unsigned int>::~TrieIter2(v75);
LABEL_27:
    if (a4 >= 2)
    {
      v24 = (_QWORD *)(a2 + 160);
      v73 = a5;
      v25 = 2;
      while (2)
      {
        TrieIter2<unsigned int,unsigned long>::TrieIter2(v75, v24, v77 - 4 * v76[0], v25 - 1, 0);
        v72 = v25;
        while (1)
        {
          v26 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v75);
          if (!v26)
            break;
          v27 = *(_DWORD *)(v77 + 4 * (int)(v25 - 2 - v76[0]));
          if (v27 != *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 3) + 120))(*((_QWORD *)a1 + 3)))
          {
            if (v73)
            {
              v28 = *(_QWORD *)(v26 + 8);
              if (!v28)
                goto LABEL_81;
            }
            else
            {
              LOBYTE(v80) = 0;
              v29 = Trie<unsigned int,unsigned long>::insertTrie(v24, (unsigned int *)(v77 - 4 * v76[0]), &v80);
              TrieIter2<unsigned int,unsigned long>::TrieIter2(v74, v29, v81, 1, 0);
              v28 = 0;
              while (1)
              {
                v30 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v74);
                if (!v30)
                  break;
                if (!(*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)a1 + 3) + 176))(*((_QWORD *)a1 + 3), v81[0]))
                {
                  v31 = *(_QWORD *)(v30 + 8);
                  if (v31)
                    v28 += v31;
                }
              }
              TrieIter2<unsigned int,unsigned int>::~TrieIter2(v74);
              if (!v28)
              {
LABEL_81:
                TrieIter2<unsigned int,unsigned int>::~TrieIter2(v75);
                v12 = 0;
                goto LABEL_83;
              }
            }
            v81[0] = 0;
            v81[1] = a4;
            v82 = 0;
            v83 = 0;
            Array<unsigned int>::alloc((uint64_t)v81, a4 - 1, 0);
            v32 = v82;
            v33 = v81[0];
            v34 = (int *)(v77 - 4 * v76[0]);
            v36 = Vocab::length((uint64_t)v34, v35);
            v37 = v32 - 4 * v33;
            if (v36)
            {
              v38 = v36;
              v39 = v36;
              do
              {
                v40 = *v34++;
                *(_DWORD *)(v37 + 4 * --v39) = v40;
              }
              while (v39);
            }
            else
            {
              v38 = 0;
            }
            *(_DWORD *)(v37 + 4 * v38) = -1;
            if (!Ngram::findBOW(a1, (unsigned int *)(v82 - 4 * v81[0])))
              *(_DWORD *)Ngram::insertBOW(a1, (unsigned int *)(v82 - 4 * v81[0])) = 0;
            v74[0] = 0;
            Trie = Trie<unsigned int,BOnode>::findTrie((_DWORD **)a1 + 19, (unsigned int *)(v82 - 4 * v81[0]), v74);
            v42 = Trie + 8;
            if (!Trie)
              v42 = 0;
            LHashIter<unsigned int,float>::LHashIter(v74, v42 + 8, 0);
            v80 = 0;
            v43 = 0.0;
            for (i = 0.0; ; i = i + v48)
            {
              v45 = (float *)LHashIter<unsigned int,float>::next((uint64_t)v74, &v80);
              if (!v45)
                break;
              v46 = 0.0;
              if (*v45 != -INFINITY)
                v46 = exp(*v45 * 2.30258509);
              v47 = (*(float (**)(Ngram *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 480))(a1, v80, v82 - 4 * v81[0], v25 - 2);
              v48 = 0.0;
              if (v47 != -INFINITY)
                v48 = exp(v47 * 2.30258509);
              v43 = v43 + v46;
            }
            LHashIter<unsigned int,double>::~LHashIter((uint64_t)v74);
            v79 = 0;
            v49 = Trie<unsigned int,unsigned long>::insertTrie(v24, (unsigned int *)(v77 - 4 * v76[0]), &v79);
            TrieIter2<unsigned int,unsigned long>::TrieIter2(v74, v49, &v80, 1, 0);
            v50 = 1.0 - v43;
            v51 = 1.0 - i;
            v52 = 0.0;
            while (1)
            {
              v53 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v74);
              if (!v53)
                break;
              if (!(*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)a1 + 3) + 176))(*((_QWORD *)a1 + 3), v80)&& *(_QWORD *)(v53 + 8)&& !Ngram::findProb(a1, v80, (unsigned int *)(v82 - 4 * v81[0])))
              {
                v54 = (*(float (**)(Ngram *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 480))(a1, v80, v82 - 4 * v81[0], v25 - 2);
                v55 = 0.0;
                if (v54 != -INFINITY)
                  v55 = exp(v54 * 2.30258509);
                v52 = v52 + v55;
              }
            }
            TrieIter2<unsigned int,unsigned long>::init((uint64_t)v74);
            v56 = (double)v28;
            v57 = v51 * (double)v28;
            v58 = v51 - v52;
            v59 = log10(v50);
            v60 = log10(v51);
            v61 = v59 - v60;
            while (1)
            {
              v62 = TrieIter2<unsigned int,unsigned long>::next((uint64_t)v74);
              if (!v62)
                break;
              if (!(*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)a1 + 3) + 176))(*((_QWORD *)a1 + 3), v80)&& *(_QWORD *)(v62 + 8))
              {
                Prob = (float *)Ngram::findProb(a1, v80, (unsigned int *)(v82 - 4 * v81[0]));
                v64 = Prob;
                if (Prob)
                {
                  v65 = 0.0;
                  if (*Prob != -INFINITY)
                    v65 = exp(*Prob * 2.30258509);
                  v66 = log10(v65 + *(double *)(a3 + 8 * v25)
                                  * (v50
                                   * (double)*(unint64_t *)(v62 + 8))
                                  / v57
                                  * v58);
                  *v64 = v66;
                }
                else
                {
                  v67 = (*(float (**)(Ngram *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 480))(a1, v80, v82 - 4 * v81[0], v25 - 2);
                  v68 = 0.0;
                  if (v67 != -INFINITY)
                    v68 = exp(v67 * 2.30258509);
                  v69 = (float *)Ngram::insertProb(a1, v80, (unsigned int *)(v82 - 4 * v81[0]));
                  v70 = log10(v68 + *(double *)(a3 + 8 * v25) * ((double)*(unint64_t *)(v62 + 8) / v56) * v58);
                  *v69 = v61 + v70;
                }
              }
            }
            TrieIter2<unsigned int,unsigned int>::~TrieIter2(v74);
            if (v82)
              MEMORY[0x1AF44D160](v82, 0x1000C8052888210);
          }
        }
        (*(void (**)(Ngram *, _QWORD))(*(_QWORD *)a1 + 512))(a1, v25 - 1);
        TrieIter2<unsigned int,unsigned int>::~TrieIter2(v75);
        ++v25;
        if (v72 + 1 <= a4)
          continue;
        break;
      }
    }
    v12 = 1;
    goto LABEL_83;
  }
  TrieIter2<unsigned int,unsigned int>::~TrieIter2(v75);
LABEL_83:
  if (v77)
    MEMORY[0x1AF44D160](v77, 0x1000C8052888210);
  return v12;
}

void sub_1ADDBC884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  TrieIter2<unsigned int,unsigned int>::~TrieIter2(&a14);
  TrieIter2<unsigned int,unsigned int>::~TrieIter2(&a24);
  if (a35)
    MEMORY[0x1AF44D160](a35, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

void ResidualAdaptiveNgram::~ResidualAdaptiveNgram(ResidualAdaptiveNgram *this)
{
  *(_QWORD *)this = &off_1E5D17188;
  Trie<unsigned int,BOnode>::~Trie((char *)this + 152);
  LM::~LM(this);
}

{
  *(_QWORD *)this = &off_1E5D17188;
  Trie<unsigned int,BOnode>::~Trie((char *)this + 152);
  LM::~LM(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::PMBuilder::PMBuilder(uint64_t a1, uint64_t a2, _QWORD *a3, __int128 *a4)
{
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  int v21;
  void **v22[3];
  std::string v23[64];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst((_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst((_QWORD *)(a1 + 64));
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst((_QWORD *)(a1 + 80));
  fst::SymbolTable::SymbolTable((fst::SymbolTable *)(a1 + 96));
  fst::SymbolTable::SymbolTable((fst::SymbolTable *)(a1 + 112));
  fst::SymbolTable::SymbolTable((fst::SymbolTable *)(a1 + 128));
  quasar::SpokenForm::SpokenForm((quasar::SpokenForm *)(a1 + 144));
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 208), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v8 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 208) = v8;
  }
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 368) = *a3;
  v9 = a3[1];
  *(_QWORD *)(a1 + 376) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 384) = 0uLL;
  *(_OWORD *)(a1 + 400) = 0uLL;
  *(_BYTE *)(a1 + 424) = 1;
  v12 = a1 + 560;
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 432) = 0uLL;
  *(_OWORD *)(a1 + 448) = 0uLL;
  *(_OWORD *)(a1 + 464) = 0uLL;
  *(_OWORD *)(a1 + 480) = 0uLL;
  *(_OWORD *)(a1 + 496) = 0uLL;
  *(_OWORD *)(a1 + 512) = 0uLL;
  *(_OWORD *)(a1 + 528) = 0uLL;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 552) = a1 + 560;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v23);
  memset(v22, 0, sizeof(v22));
  v19 = 0u;
  v20 = 0u;
  v21 = 1065353216;
  quasar::SystemConfig::readJsonFile((uint64_t)v23, a2, (uint64_t *)v22, (uint64_t)&v19, 0, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v19);
  *(_QWORD *)&v19 = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  if ((quasar::PMBuilder::loadSystemConfig((quasar::PMBuilder *)a1, v23) & 1) != 0)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN6quasar11ModelLoaderENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v19);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 408, &v19);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
    if (*((_QWORD *)&v19 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    quasar::DataFeedFactory::loadFeedsDataFile(a4, (__int128 *)(a1 + 256), (uint64_t *)&v19);
    std::vector<quasar::DataFeed>::__vdeallocate((void **)(a1 + 184));
    *(_OWORD *)(a1 + 184) = v19;
    *(_QWORD *)(a1 + 200) = v20;
    *(_QWORD *)&v20 = 0;
    v19 = 0uLL;
    v22[0] = (void **)&v19;
    std::vector<quasar::DataFeed>::__destroy_vector::operator()[abi:ne180100](v22);
  }
  else
  {
    *(_BYTE *)(a1 + 424) = 0;
  }
  if (*(char *)(a1 + 319) < 0)
  {
    if (!*(_QWORD *)(a1 + 304))
      goto LABEL_23;
  }
  else if (!*(_BYTE *)(a1 + 319))
  {
    goto LABEL_23;
  }
  quasar::PMBuilder::readTokenListFromLexicon(a1 + 296, (uint64_t)&v19);
  std::__tree<std::string>::destroy(a1 + 552, *(char **)(a1 + 560));
  v16 = *((_QWORD *)&v19 + 1);
  *(_QWORD *)(a1 + 552) = v19;
  *(_QWORD *)(a1 + 560) = v16;
  v17 = v20;
  *(_QWORD *)(a1 + 568) = v20;
  if (v17)
  {
    *(_QWORD *)(v16 + 16) = v12;
    *(_QWORD *)&v19 = (char *)&v19 + 8;
    *((_QWORD *)&v19 + 1) = 0;
    *(_QWORD *)&v20 = 0;
    v16 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 552) = v12;
  }
  std::__tree<std::string>::destroy((uint64_t)&v19, (char *)v16);
LABEL_23:
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v23);
  return a1;
}

void sub_1ADDBCD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, fst::SymbolTable *a11, fst::SymbolTable *a12, fst::SymbolTable *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_QWORD *a25)
{
  _QWORD *v25;
  _DWORD *v26;
  int v27;
  _DWORD *v28;
  int v29;
  _DWORD *v30;
  int v31;

  std::vector<quasar::DataFeed>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::~__hash_table(a10);
  fst::SymbolTable::~SymbolTable(a11);
  fst::SymbolTable::~SymbolTable(a12);
  fst::SymbolTable::~SymbolTable(a13);
  v25[10] = &unk_1E5D256C0;
  v26 = (_DWORD *)v25[11];
  if (v26)
  {
    v27 = v26[14] - 1;
    v26[14] = v27;
    if (!v27)
      (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
  }
  v25[8] = &unk_1E5D256C0;
  v28 = (_DWORD *)v25[9];
  if (v28)
  {
    v29 = v28[14] - 1;
    v28[14] = v29;
    if (!v29)
      (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
  }
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  v25[3] = &unk_1E5D256C0;
  v30 = (_DWORD *)v25[4];
  if (v30)
  {
    v31 = v30[14] - 1;
    v30[14] = v31;
    if (!v31)
      (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
  }
  a25 = v25;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  _Unwind_Resume(a1);
}

uint64_t quasar::PMBuilder::loadSystemConfig(quasar::PMBuilder *this, std::string *a2)
{
  uint64_t PtreeOptional;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  const std::string *SpeechModelInfo;
  void *v10[2];
  char v11;
  void *v12[2];
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19[2];
  uint64_t v20;
  std::string __p[17];
  _QWORD v22[21];

  v22[20] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "phonetic-match-building");
  PtreeOptional = quasar::SystemConfig::getPtreeOptional((uint64_t)a2, (uint64_t)__p);
  v5 = PtreeOptional;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v5)
      return 0;
  }
  else if (!PtreeOptional)
  {
    return 0;
  }
  v19[0] = 0;
  v19[1] = 0;
  v20 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "phonetic-match-building");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 210, 0, (uint64_t)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "phonetic-match-building.");
  quasar::SystemConfig::setPrefix(a2, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "process-feeds-config-file");
  std::string::basic_string[abi:ne180100]<0>(v12, "Configuration file for feed processing rules");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p[0].__r_.__value_.__l.__data_, (uint64_t)this + 256, (uint64_t)v12, 1, 210, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "spoken-forms-file");
  std::string::basic_string[abi:ne180100]<0>(v12, "Spokenforms file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p[0].__r_.__value_.__l.__data_, (uint64_t)v14, (uint64_t)v12, 1, 210, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "phonomap-file");
  std::string::basic_string[abi:ne180100]<0>(v12, "Phonomap file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p[0].__r_.__value_.__l.__data_, (uint64_t)v19, (uint64_t)v12, 1, 210, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "regex-rules-file");
  std::string::basic_string[abi:ne180100]<0>(v12, "Post-tokenization regex rule file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p[0].__r_.__value_.__l.__data_, (uint64_t)&v16, (uint64_t)v12, 0, 210, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "additional-lexicon-file");
  std::string::basic_string[abi:ne180100]<0>(v12, "Additional lexicon file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p[0].__r_.__value_.__l.__data_, (uint64_t)this + 296, (uint64_t)v12, 0, 210, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "fst-type");
  std::string::basic_string[abi:ne180100]<0>(v12, "FST type");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p[0].__r_.__value_.__l.__data_, (uint64_t)this + 384, (uint64_t)v12, 0, 210, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "lg-fst-name");
  std::string::basic_string[abi:ne180100]<0>(v12, "LG FST name");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p[0].__r_.__value_.__l.__data_, (uint64_t)this + 432, (uint64_t)v12, 1, 210, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "l-fst-name");
  std::string::basic_string[abi:ne180100]<0>(v12, "L FST name");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p[0].__r_.__value_.__l.__data_, (uint64_t)this + 456, (uint64_t)v12, 1, 210, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "g-osyms-name");
  std::string::basic_string[abi:ne180100]<0>(v12, "G output symbol name");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p[0].__r_.__value_.__l.__data_, (uint64_t)this + 480, (uint64_t)v12, 1, 210, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "wildcard-symbol");
  std::string::basic_string[abi:ne180100]<0>(v12, "Wildcard symbol for partial match");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p[0].__r_.__value_.__l.__data_, (uint64_t)this + 528, (uint64_t)v12, 1, 241, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "phonetic-match-building");
  quasar::SystemConfig::readPtree((uint64_t)a2, (uint64_t)__p, 0, 0);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  quasar::SpokenForm::SpokenForm(__p, v14);
  std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__move_assign((uint64_t)this + 144, (uint64_t *)__p);
  std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::~__hash_table((uint64_t)__p);
  std::ifstream::basic_ifstream(__p);
  std::string::basic_string[abi:ne180100]<0>(v10, "<unspecified>");
  fst::FstReadOptions::FstReadOptions(v12, v10, 0, 0, 0);
  v6 = fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read(__p, (uint64_t)v12);
  std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::reset[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,void>((_QWORD *)this + 35, (uint64_t)v6);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  v7 = HIBYTE(v18);
  if (v18 < 0)
    v7 = v17;
  if (v7)
  {
    quasar::RegexRules::RegexRules(v12, &v16);
    std::vector<quasar::RegexReplacementRule>::__vdeallocate((void **)this + 40);
    *((_OWORD *)this + 20) = *(_OWORD *)v12;
    *((_QWORD *)this + 42) = v13;
    v12[1] = 0;
    v13 = 0;
    v12[0] = 0;
    v10[0] = v12;
    std::vector<quasar::RegexReplacementRule>::__destroy_vector::operator()[abi:ne180100]((void ***)v10);
  }
  if (*((char *)this + 407) < 0)
  {
    if (!*((_QWORD *)this + 49))
LABEL_63:
      MEMORY[0x1AF44C914]((char *)this + 384, "squeezed_transducer");
  }
  else if (!*((_BYTE *)this + 407))
  {
    goto LABEL_63;
  }
  quasar::SpokenForm::getSectionNames((quasar::PMBuilder *)((char *)this + 144), (uint64_t *)v12);
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)((char *)this + 344));
  *(_OWORD *)((char *)this + 344) = *(_OWORD *)v12;
  *((_QWORD *)this + 45) = v13;
  v12[1] = 0;
  v13 = 0;
  v12[0] = 0;
  v10[0] = v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v10);
  SpeechModelInfo = (const std::string *)quasar::SystemConfig::getSpeechModelInfo((quasar::SystemConfig *)a2);
  std::string::operator=((std::string *)((char *)this + 232), SpeechModelInfo + 5);
  __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F40];
  *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                            + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40]
                                                                                                 + 24);
  MEMORY[0x1AF44CA70](&__p[0].__r_.__value_.__r.__words[2]);
  std::istream::~istream();
  MEMORY[0x1AF44D094](v22);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  if (SHIBYTE(v18) < 0)
    operator delete(v16);
  if (SHIBYTE(v20) < 0)
    operator delete(v19[0]);
  return 1;
}

void sub_1ADDBD8E4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1ADDBD900(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void quasar::PMBuilder::readTokenListFromLexicon(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::locale::id *v5;
  const std::locale::facet *v6;
  unsigned __int8 v7;
  _QWORD *v8;
  std::string::size_type size;
  _QWORD *v10;
  std::string *p_p;
  std::string::size_type v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  const void **v18[3];
  std::locale v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  std::string __p;
  _QWORD v37[2];
  _BYTE v38[408];
  _QWORD v39[22];

  v39[19] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  memset(&__p, 0, sizeof(__p));
  std::ifstream::basic_ifstream(v37);
  v4 = *(_QWORD *)(v37[0] - 24);
  if (*(_DWORD *)&v38[v4 + 16])
  {
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    *(_OWORD *)&v19[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Error opening ", 14);
    v15 = *(char *)(a1 + 23);
    if (v15 >= 0)
      v16 = a1;
    else
      v16 = *(_QWORD *)a1;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(a1 + 23);
    else
      v17 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v19);
  }
  v5 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v37 + v4));
    v6 = std::locale::use_facet(v19, v5);
    v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale(v19);
    v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v37, (uint64_t)&__p, v7);
    if ((*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) != 0)
      break;
    quasar::trim(&__p);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (size)
    {
      std::string::basic_string[abi:ne180100]<0>(v19, "\t");
      quasar::splitAndTrimNoEmpty(&__p, (char *)v19, v18);
      if (SBYTE7(v20) < 0)
        operator delete(v19[0].__locale_);
      if ((const void **)((char *)v18[1] - (char *)v18[0]) == (const void **)48)
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a2, v18[0], (uint64_t)v18[0]);
      }
      else if (quasar::gLogLevel >= 5)
      {
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v24 = 0u;
        v25 = 0u;
        v22 = 0u;
        v23 = 0u;
        v20 = 0u;
        v21 = 0u;
        *(_OWORD *)&v19[0].__locale_ = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Invalid line in lexicon: '", 26);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v12 = __p.__r_.__value_.__l.__size_;
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)p_p, v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"'", 1);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v19);
      }
      v19[0].__locale_ = (std::locale::__imp *)v18;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v19);
    }
    v4 = *(_QWORD *)(v37[0] - 24);
  }
  v37[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v37 + *(_QWORD *)(v37[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1AF44CA70](v38);
  std::istream::~istream();
  MEMORY[0x1AF44D094](v39);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1ADDBDC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::PMBuilder::PMBuilder(uint64_t a1, uint64_t a2, _QWORD *a3, quasar::DataFeed **a4)
{
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v16[2];
  int v17;
  uint64_t v18[3];
  std::string v19[64];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst((_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst((_QWORD *)(a1 + 64));
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst((_QWORD *)(a1 + 80));
  fst::SymbolTable::SymbolTable((fst::SymbolTable *)(a1 + 96));
  fst::SymbolTable::SymbolTable((fst::SymbolTable *)(a1 + 112));
  fst::SymbolTable::SymbolTable((fst::SymbolTable *)(a1 + 128));
  quasar::SpokenForm::SpokenForm((quasar::SpokenForm *)(a1 + 144));
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  std::vector<quasar::DataFeed>::__init_with_size[abi:ne180100]<quasar::DataFeed*,quasar::DataFeed*>((quasar::DataFeed *)(a1 + 184), *a4, a4[1], 0xCCCCCCCCCCCCCCCDLL * ((a4[1] - *a4) >> 5));
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 208), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v8 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 208) = v8;
  }
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 368) = *a3;
  v9 = a3[1];
  *(_QWORD *)(a1 + 376) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 416) = 0;
  *(_OWORD *)(a1 + 384) = 0uLL;
  *(_OWORD *)(a1 + 400) = 0uLL;
  *(_BYTE *)(a1 + 424) = 1;
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 432) = 0uLL;
  *(_OWORD *)(a1 + 448) = 0uLL;
  *(_OWORD *)(a1 + 464) = 0uLL;
  *(_OWORD *)(a1 + 480) = 0uLL;
  *(_OWORD *)(a1 + 496) = 0uLL;
  *(_OWORD *)(a1 + 512) = 0uLL;
  *(_OWORD *)(a1 + 528) = 0uLL;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 552) = a1 + 560;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v19);
  memset(v18, 0, sizeof(v18));
  memset(v16, 0, sizeof(v16));
  v17 = 1065353216;
  quasar::SystemConfig::readJsonFile((uint64_t)v19, a2, v18, (uint64_t)v16, 0, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v16);
  *(_QWORD *)&v16[0] = v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v16);
  if ((quasar::PMBuilder::loadSystemConfig((quasar::PMBuilder *)a1, v19) & 1) != 0)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN6quasar11ModelLoaderENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v16);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 408, v16);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v16[0] + 1);
    if (*((_QWORD *)&v16[0] + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v16[0] + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    *(_BYTE *)(a1 + 424) = 0;
  }
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v19);
  return a1;
}

void sub_1ADDBDF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, fst::SymbolTable *a13, fst::SymbolTable *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,_QWORD *a23)
{
  _QWORD *v23;
  fst::SymbolTable *v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  _DWORD *v28;
  int v29;
  _DWORD *v30;
  int v31;

  std::vector<quasar::DataFeed>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::~__hash_table(v25);
  fst::SymbolTable::~SymbolTable(v24);
  fst::SymbolTable::~SymbolTable(a13);
  fst::SymbolTable::~SymbolTable(a14);
  v23[10] = &unk_1E5D256C0;
  v26 = (_DWORD *)v23[11];
  if (v26)
  {
    v27 = v26[14] - 1;
    v26[14] = v27;
    if (!v27)
      (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
  }
  v23[8] = &unk_1E5D256C0;
  v28 = (_DWORD *)v23[9];
  if (v28)
  {
    v29 = v28[14] - 1;
    v28[14] = v29;
    if (!v29)
      (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
  }
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  v23[3] = &unk_1E5D256C0;
  v30 = (_DWORD *)v23[4];
  if (v30)
  {
    v31 = v30[14] - 1;
    v30[14] = v31;
    if (!v31)
      (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
  }
  a23 = v23;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

void quasar::PMBuilder::writeLGFst(uint64_t a1, uint64_t a2)
{
  std::string __p;
  std::string v5;
  int v6;

  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v5, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v6 = 16777217;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v5 = __p;
    v6 = 16777217;
  }
  quasar::ModelLoader::writeFst(a1 + 64, a1 + 384, &v5, a2);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_1ADDBE234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::PMBuilder::writeAlignedLFst(uint64_t a1, uint64_t a2)
{
  std::string __p;
  std::string v5;
  int v6;

  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v5, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v6 = 16777217;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v5 = __p;
    v6 = 16777217;
  }
  quasar::ModelLoader::writeFst(a1 + 80, a1 + 384, &v5, a2);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_1ADDBE310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::PMBuilder::writeSymsQuasarMap(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  std::vector<std::string>::pointer end;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  int *v24;
  int v25;
  int begin;
  unint64_t v27;
  unsigned int v28;
  char *v29;
  char *v30;
  int v31;
  std::vector<std::string>::pointer v32;
  std::vector<std::string>::pointer i;
  int v34;
  void *__p[2];
  std::string::size_type v36;
  void *v37;
  char *v38;
  char *v39;
  std::vector<std::string> v40;
  void *v41;
  char v42;
  std::__split_buffer<std::string> __v;

  std::string::basic_string[abi:ne180100]<0>(&v41, "QSR_SYM_V000");
  memset(&v40, 0, sizeof(v40));
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v3 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 128))(a1, 0);
  if (v2)
  {
    v4 = v3;
    v5 = 0;
    v6 = 0;
    do
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(__p, a1, v4);
      end = v40.__end_;
      if (v40.__end_ >= v40.__end_cap_.__value_)
      {
        v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v40.__end_ - (char *)v40.__begin_) >> 3);
        v10 = v9 + 1;
        if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v40.__end_cap_.__value_ - (char *)v40.__begin_) >> 3) > v10)
          v10 = 0x5555555555555556 * (((char *)v40.__end_cap_.__value_ - (char *)v40.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v40.__end_cap_.__value_ - (char *)v40.__begin_) >> 3) >= 0x555555555555555)
          v11 = 0xAAAAAAAAAAAAAAALL;
        else
          v11 = v10;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v40.__end_cap_;
        if (v11)
          v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v40.__end_cap_, v11);
        else
          v12 = 0;
        v13 = v12 + v9;
        __v.__first_ = v12;
        __v.__begin_ = v13;
        __v.__end_cap_.__value_ = &v12[v11];
        v14 = *(_OWORD *)__p;
        v13->__r_.__value_.__r.__words[2] = v36;
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
        __p[1] = 0;
        v36 = 0;
        __p[0] = 0;
        __v.__end_ = v13 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v40, &__v);
        v15 = v40.__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        v40.__end_ = v15;
        if (SHIBYTE(v36) < 0)
          operator delete(__p[0]);
      }
      else
      {
        v8 = *(_OWORD *)__p;
        v40.__end_->__r_.__value_.__r.__words[2] = v36;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v8;
        v40.__end_ = end + 1;
      }
      v16 = v38;
      if (v38 >= v39)
      {
        v18 = (char *)v37;
        v19 = (v38 - (_BYTE *)v37) >> 2;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v21 = v39 - (_BYTE *)v37;
        if ((v39 - (_BYTE *)v37) >> 1 > v20)
          v20 = v21 >> 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
          v22 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v39, v22);
          v18 = (char *)v37;
          v16 = v38;
        }
        else
        {
          v23 = 0;
        }
        v24 = (int *)&v23[4 * v19];
        *v24 = v5;
        v17 = (char *)(v24 + 1);
        while (v16 != v18)
        {
          v25 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *--v24 = v25;
        }
        v37 = v24;
        v38 = v17;
        v39 = &v23[4 * v22];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *(_DWORD *)v38 = v5;
        v17 = v16 + 4;
      }
      v38 = v17;
      (*(void (**)(std::__split_buffer<std::string> *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(&__v, a1, v4);
      if (SHIBYTE(__v.__end_) < 0)
      {
        begin = (int)__v.__begin_;
        operator delete(__v.__first_);
      }
      else
      {
        begin = HIBYTE(__v.__end_);
      }
      if (++v6 < v2)
        v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v6);
      v5 += begin + 1;
    }
    while (v6 != v2);
  }
  else
  {
    v5 = 0;
  }
  v27 = 0xAAAAAAAAAAAAAAABLL * (((char *)v40.__end_ - (char *)v40.__begin_) >> 3);
  v28 = vcvtd_n_s64_f64(ceil((double)v27 * 0.25), 2uLL);
  LODWORD(__v.__first_) = v28;
  std::ostream::write();
  std::ostream::write();
  v29 = (char *)v37;
  v30 = v38;
  while (v29 != v30)
  {
    LODWORD(__p[0]) = *(_DWORD *)v29;
    std::ostream::write();
    v29 += 4;
  }
  v31 = v5 - v27 + v28;
  LODWORD(__p[0]) = v5;
  if (v5 < v31)
  {
    do
    {
      std::ostream::write();
      ++LODWORD(__p[0]);
    }
    while (SLODWORD(__p[0]) < v31);
  }
  v32 = v40.__begin_;
  for (i = v40.__end_; v32 != i; ++v32)
  {
    std::ostream::write();
    std::ostream::write();
  }
  if (SLODWORD(__v.__first_) >= 1)
  {
    v34 = 0;
    do
    {
      std::ostream::write();
      ++v34;
    }
    while (v34 < SLODWORD(__v.__first_));
  }
  if (v37)
  {
    v38 = (char *)v37;
    operator delete(v37);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (v42 < 0)
    operator delete(v41);
}

void sub_1ADDBE7A8(_Unwind_Exception *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, void *__p, uint64_t a9, void *a10, char a11, uint64_t a12, int *__pa, int *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, std::__split_buffer<std::wstring> *a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (__pa)
  {
    a14 = __pa;
    operator delete(__pa);
  }
  __pa = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

void quasar::PMBuilder::writeMetadata(uint64_t a1, __int128 *a2)
{
  quasar::PTree *Ptree;
  uint64_t String;
  __int128 v6;
  quasar::PTree *v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  void *v12[2];
  char v13;
  void *v14[2];
  char v15;
  void *v16[2];
  char v17;
  void *v18[2];
  uint64_t v19;
  void *__p[4];
  std::string v21;
  char v22;
  std::string v23;
  std::string v24;
  _BYTE v25[1544];

  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v25);
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  memset(__p, 0, sizeof(__p));
  LODWORD(v21.__r_.__value_.__l.__data_) = 1065353216;
  quasar::SystemConfig::readJsonFile((uint64_t)v25, a1 + 208, (uint64_t *)v18, (uint64_t)__p, 0, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  __p[0] = v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::string::basic_string[abi:ne180100]<0>(__p, "version-major");
  Ptree = (quasar::PTree *)quasar::SystemConfig::getPtree((uint64_t)v25, (uint64_t)__p);
  String = quasar::PTree::getString(Ptree);
  if (*(char *)(String + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)String, *(_QWORD *)(String + 8));
  }
  else
  {
    v6 = *(_OWORD *)String;
    v24.__r_.__value_.__r.__words[2] = *(_QWORD *)(String + 16);
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v6;
  }
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "version-minor");
  v7 = (quasar::PTree *)quasar::SystemConfig::getPtree((uint64_t)v25, (uint64_t)__p);
  v8 = quasar::PTree::getString(v7);
  if (*(char *)(v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v8, *(_QWORD *)(v8 + 8));
  }
  else
  {
    v9 = *(_OWORD *)v8;
    v23.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 16);
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
  }
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v18, "model-info");
  v10 = quasar::SystemConfig::getPtree((uint64_t)v25, (uint64_t)v18);
  LODWORD(__p[0]) = *(_DWORD *)v10;
  if (*(char *)(v10 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__p[1], *(const std::string::value_type **)(v10 + 8), *(_QWORD *)(v10 + 16));
  }
  else
  {
    v11 = *(_OWORD *)(v10 + 8);
    __p[3] = *(void **)(v10 + 24);
    *(_OWORD *)&__p[1] = v11;
  }
  memset(&v21, 0, sizeof(v21));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v21, *(_QWORD *)(v10 + 32), *(_QWORD *)(v10 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v10 + 40) - *(_QWORD *)(v10 + 32)) >> 3));
  v22 = *(_BYTE *)(v10 + 56);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[0]);
  quasar::PTree::PTree((quasar::PTree *)v18);
  std::string::basic_string[abi:ne180100]<0>(v12, "version-major");
  quasar::PTree::PTree(v16, &v24);
  quasar::PTree::putChild((uint64_t)v18, (uint64_t)v12, (uint64_t)v16, 1);
  quasar::PTree::~PTree((quasar::PTree *)v16);
  if (v13 < 0)
    operator delete(v12[0]);
  std::string::basic_string[abi:ne180100]<0>(v12, "version-minor");
  quasar::PTree::PTree(v16, &v23);
  quasar::PTree::putChild((uint64_t)v18, (uint64_t)v12, (uint64_t)v16, 1);
  quasar::PTree::~PTree((quasar::PTree *)v16);
  if (v13 < 0)
    operator delete(v12[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "model-info");
  quasar::PTree::putChild((uint64_t)v18, (uint64_t)v16, (uint64_t)__p, 1);
  if (v17 < 0)
    operator delete(v16[0]);
  if (*(_BYTE *)(a1 + 424))
  {
    quasar::PTree::PTree((quasar::PTree *)v16);
    std::string::basic_string[abi:ne180100]<0>(v14, "lg-fst-name");
    quasar::PTree::PTree(v12, a1 + 432);
    quasar::PTree::putChild((uint64_t)v16, (uint64_t)v14, (uint64_t)v12, 1);
    quasar::PTree::~PTree((quasar::PTree *)v12);
    if (v15 < 0)
      operator delete(v14[0]);
    std::string::basic_string[abi:ne180100]<0>(v14, "l-fst-name");
    quasar::PTree::PTree(v12, a1 + 456);
    quasar::PTree::putChild((uint64_t)v16, (uint64_t)v14, (uint64_t)v12, 1);
    quasar::PTree::~PTree((quasar::PTree *)v12);
    if (v15 < 0)
      operator delete(v14[0]);
    std::string::basic_string[abi:ne180100]<0>(v14, "g-osyms-name");
    quasar::PTree::PTree(v12, a1 + 480);
    quasar::PTree::putChild((uint64_t)v16, (uint64_t)v14, (uint64_t)v12, 1);
    quasar::PTree::~PTree((quasar::PTree *)v12);
    if (v15 < 0)
      operator delete(v14[0]);
    std::string::basic_string[abi:ne180100]<0>(v14, "wildcard-symbol");
    quasar::PTree::PTree(v12, a1 + 528);
    quasar::PTree::putChild((uint64_t)v16, (uint64_t)v14, (uint64_t)v12, 1);
    quasar::PTree::~PTree((quasar::PTree *)v12);
    if (v15 < 0)
      operator delete(v14[0]);
    std::string::basic_string[abi:ne180100]<0>(v12, "phonetic-match-building");
    quasar::PTree::putChild((uint64_t)v18, (uint64_t)v12, (uint64_t)v16, 1);
    if (v13 < 0)
      operator delete(v12[0]);
    quasar::PTree::~PTree((quasar::PTree *)v16);
  }
  quasar::PTree::writeJsonToFile((quasar::PTreeHelper *)v18, a2);
  quasar::PTree::~PTree((quasar::PTree *)v18);
  quasar::PTree::~PTree((quasar::PTree *)__p);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v25);
}

void sub_1ADDBEC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61)
{
  if (a15 < 0)
    operator delete(__p);
  quasar::PTree::~PTree((quasar::PTree *)&a24);
  quasar::PTree::~PTree((quasar::PTree *)&a32);
  quasar::PTree::~PTree((quasar::PTree *)&a40);
  if (a53 < 0)
    operator delete(a48);
  if (a60 < 0)
    operator delete(a55);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&a61);
  _Unwind_Resume(a1);
}

void sub_1ADDBEDA0()
{
  JUMPOUT(0x1ADDBED68);
}

void sub_1ADDBEDA8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  JUMPOUT(0x1ADDBED70);
}

void sub_1ADDBEE0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
    JUMPOUT(0x1ADDBED7CLL);
  JUMPOUT(0x1ADDBED80);
}

void sub_1ADDBEE20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
    JUMPOUT(0x1ADDBED8CLL);
  JUMPOUT(0x1ADDBED90);
}

uint64_t quasar::PMBuilder::getIndividualLGFsts(quasar::PMBuilder *this)
{
  return (uint64_t)this + 40;
}

uint64_t quasar::PMBuilder::getSectionNames(quasar::PMBuilder *this)
{
  return (uint64_t)this + 344;
}

uint64_t quasar::PMBuilder::getSupportPhoneticMatchBuilding(quasar::PMBuilder *this)
{
  return *((unsigned __int8 *)this + 424);
}

void quasar::PMBuilder::getOsyms(quasar::PMBuilder *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::__wrap_iter<const char *> v12;
  std::__wrap_iter<const char *> v13;
  std::__shared_weak_count *cntrl;
  uint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  void *__p[2];
  unsigned __int8 v19;
  std::string v20;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v21;

  if (a2)
  {
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v21.__traits_, "^//", 0);
    fst::SymbolTable::SymbolTable((fst::SymbolTable *)a3);
    v6 = *((_QWORD *)this + 12);
    v5 = (char *)this + 96;
    v7 = (*(uint64_t (**)(char *))(v6 + 120))(v5);
    v8 = (*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)v5 + 128))(v5, 0);
    if (v7)
    {
      v9 = v8;
      v10 = 0;
      do
      {
        (*(void (**)(void **__return_ptr, char *, uint64_t))(*(_QWORD *)v5 + 88))(__p, v5, v9);
        memset(&v20, 0, sizeof(v20));
        v11 = v19;
        if ((v19 & 0x80u) == 0)
          v12.__i_ = (std::__wrap_iter<const char *>::iterator_type)__p;
        else
          v12.__i_ = (std::__wrap_iter<const char *>::iterator_type)__p[0];
        if ((v19 & 0x80u) != 0)
          v11 = (unint64_t)__p[1];
        v13.__i_ = &v12.__i_[v11];
        std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v20, v12, v13, &v21, "~w01", 0);
        if ((char)v19 < 0)
          operator delete(__p[0]);
        fst::SymbolTable::MutateCheck((std::string *)a3);
        fst::SymbolTableImpl::AddSymbol(a3[1], (uint64_t)&v20, v9);
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v20.__r_.__value_.__l.__data_);
        if (++v10 < v7)
          v9 = (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)v5 + 128))(v5, v10);
      }
      while (v7 != v10);
    }
    cntrl = v21.__start_.__cntrl_;
    if (v21.__start_.__cntrl_)
    {
      p_shared_owners = &v21.__start_.__cntrl_->__shared_owners_;
      do
        v16 = __ldaxr((unint64_t *)p_shared_owners);
      while (__stlxr(v16 - 1, (unint64_t *)p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
        std::__shared_weak_count::__release_weak(cntrl);
      }
    }
    std::locale::~locale(&v21.__traits_.__loc_);
  }
  else
  {
    v17 = *((_QWORD *)this + 13);
    *a3 = (uint64_t)&off_1E5D1AD68;
    a3[1] = v17;
    ++*(_DWORD *)(v17 + 168);
  }
}

void sub_1ADDBF004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,std::locale a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::locale::~locale(&a21);
  _Unwind_Resume(a1);
}

uint64_t quasar::PMBuilder::reset(quasar::PMBuilder *this)
{
  uint64_t v2;
  void (***v3)(_QWORD);
  void (***v4)(_QWORD);
  void (***v5)(_QWORD);
  void (**v6)(_QWORD);
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  void (***v10)(_QWORD);
  void (***v11)(_QWORD);
  void (***v12)(_QWORD);
  void (**v13)(_QWORD);
  uint64_t v14;
  void (***v15)(_QWORD);
  uint64_t v16;
  uint64_t v18;
  void (***v19)(_QWORD);
  uint64_t v20;
  void **v21;

  v3 = *(void (****)(_QWORD))this;
  v2 = *((_QWORD *)this + 1);
  if (v2 != *(_QWORD *)this)
  {
    v4 = (void (***)(_QWORD))(v2 - 16);
    v5 = (void (***)(_QWORD))(v2 - 16);
    do
    {
      v6 = *v5;
      v5 -= 2;
      (*v6)(v4);
      v7 = v4 == v3;
      v4 = v5;
    }
    while (!v7);
    v2 = *(_QWORD *)this;
  }
  v18 = v2;
  v19 = v3;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v8 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  v20 = v8;
  v21 = (void **)&v18;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100](&v21);
  v10 = (void (***)(_QWORD))*((_QWORD *)this + 5);
  v9 = *((_QWORD *)this + 6);
  if ((void (***)(_QWORD))v9 != v10)
  {
    v11 = (void (***)(_QWORD))(v9 - 16);
    v12 = (void (***)(_QWORD))(v9 - 16);
    do
    {
      v13 = *v12;
      v12 -= 2;
      (*v13)(v11);
      v7 = v11 == v10;
      v11 = v12;
    }
    while (!v7);
    v9 = *((_QWORD *)this + 5);
  }
  v18 = v9;
  v19 = v10;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  v20 = *((_QWORD *)this + 7);
  v21 = (void **)&v18;
  *((_QWORD *)this + 7) = 0;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100](&v21);
  v15 = (void (***)(_QWORD))*((_QWORD *)this + 23);
  v14 = *((_QWORD *)this + 24);
  if ((void (***)(_QWORD))v14 != v15)
  {
    do
    {
      v14 -= 160;
      std::allocator<quasar::DataFeed>::destroy[abi:ne180100]((uint64_t)this + 200, v14);
    }
    while ((void (***)(_QWORD))v14 != v15);
    v14 = *((_QWORD *)this + 23);
  }
  v18 = v14;
  v19 = v15;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  v16 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  v20 = v16;
  v21 = (void **)&v18;
  std::vector<quasar::DataFeed>::__destroy_vector::operator()[abi:ne180100](&v21);
  quasar::RegexRules::clear((quasar::PMBuilder *)((char *)this + 320));
  return quasar::SpokenForm::clear((quasar::PMBuilder *)((char *)this + 144));
}

uint64_t quasar::PMBuilder::buildGFsts(quasar::PMBuilder *this)
{
  uint64_t v2;
  void (***v3)(_QWORD);
  void (***v4)(_QWORD);
  void (***v5)(_QWORD);
  void (**v6)(_QWORD);
  BOOL v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::string::size_type v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  size_t v27;
  std::string *v28;
  char *v29;
  int v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  void *v36;
  char v37;
  unsigned __int8 *v38;
  __n128 v39;
  std::string::size_type size;
  int v41;
  uint64_t v42;
  int v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::string v48;
  std::string v49;
  void *v50;
  uint64_t v51;
  std::string v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  void *v55[2];
  char v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  char v61;
  char *v62[3];
  std::vector<std::string> *v63[5];
  void *__p[4];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 *v80[3];
  uint64_t v81[3];
  _QWORD v82[5];
  _QWORD v83[5];

  v83[2] = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 424))
    return 0;
  v3 = *(void (****)(_QWORD))this;
  v2 = *((_QWORD *)this + 1);
  if (v2 != *(_QWORD *)this)
  {
    v4 = (void (***)(_QWORD))(v2 - 16);
    v5 = (void (***)(_QWORD))(v2 - 16);
    do
    {
      v6 = *v5;
      v5 -= 2;
      (*v6)(v4);
      v7 = v4 == v3;
      v4 = v5;
    }
    while (!v7);
  }
  *((_QWORD *)this + 1) = v3;
  memset(v81, 0, sizeof(v81));
  std::vector<quasar::DataFeed>::__init_with_size[abi:ne180100]<quasar::DataFeed*,quasar::DataFeed*>((quasar::DataFeed *)v81, *((quasar::DataFeed **)this + 23), *((quasar::DataFeed **)this + 24), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 24) - *((_QWORD *)this + 23)) >> 5));
  quasar::DataFeedFactory::mergeDataFeedsByName(v81, (uint64_t)v82);
  __p[0] = v81;
  std::vector<quasar::DataFeed>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  memset(v80, 0, sizeof(v80));
  v8 = (unsigned __int8 *)*((_QWORD *)this + 43);
  v9 = (unsigned __int8 *)*((_QWORD *)this + 44);
  v63[0] = (std::vector<std::string> *)v80;
  if (v8 == v9)
  {
    v10 = v8;
  }
  else
  {
    do
    {
      std::operator+<char>();
      std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](v63, (__int128 *)__p);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      v8 += 24;
    }
    while (v8 != v9);
    v10 = (unsigned __int8 *)*((_QWORD *)this + 43);
    v8 = (unsigned __int8 *)*((_QWORD *)this + 44);
  }
  v12 = std::__find_impl[abi:ne180100]<std::string *,std::string *,char [5],std::__identity>(v10, v8, "root");
  v13 = (unsigned __int8 *)*((_QWORD *)this + 44);
  v11 = v12 != v13;
  if (v12 == v13)
  {
    if (quasar::gLogLevel >= 1)
    {
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v65 = 0u;
      memset(__p, 0, sizeof(__p));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"[root] grammar is not present.", 30);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
  }
  else
  {
    std::unordered_map<std::string,quasar::SpokenFormSection>::unordered_map((uint64_t)v63, (uint64_t)this + 144);
    v14 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
    v53 = *((_QWORD *)this + 46);
    v54 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    quasar::GrammarFST::GrammarFST((uint64_t)v55, &v53, v80, (uint64_t)this + 320, (uint64_t)this + 256, (__int128 *)this + 33, (const void ***)this + 69);
    v17 = v54;
    if (v54)
    {
      v18 = (unint64_t *)&v54->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    quasar::PMBuilder::initializeOSyms((std::string *)this);
    v20 = *((_QWORD *)this + 43);
    v21 = *((_QWORD *)this + 44);
    while (v20 != v21)
    {
      memset(&v52, 0, sizeof(v52));
      fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v50);
      if (quasar::gLogLevel >= 5)
      {
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        v66 = 0u;
        v67 = 0u;
        v65 = 0u;
        memset(__p, 0, sizeof(__p));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Generating grammar FST for ", 27);
        v23 = *(char *)(v20 + 23);
        if (v23 >= 0)
          v24 = v20;
        else
          v24 = *(_QWORD *)v20;
        if (v23 >= 0)
          v25 = *(unsigned __int8 *)(v20 + 23);
        else
          v25 = *(_QWORD *)(v20 + 8);
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" ... ", 5);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
      memset(__p, 0, 24);
      if (*((char *)this + 527) < 0)
      {
        if (*((_QWORD *)this + 64))
        {
LABEL_35:
          if (*((char *)this + 527) >= 0)
            v27 = *((unsigned __int8 *)this + 527);
          else
            v27 = *((_QWORD *)this + 64);
          std::string::basic_string[abi:ne180100]((uint64_t)&v48, v27 + 1);
          if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v28 = &v48;
          else
            v28 = (std::string *)v48.__r_.__value_.__r.__words[0];
          if (v27)
          {
            if (*((char *)this + 527) >= 0)
              v29 = (char *)this + 504;
            else
              v29 = (char *)*((_QWORD *)this + 63);
            memmove(v28, v29, v27);
          }
          *(_WORD *)((char *)&v28->__r_.__value_.__l.__data_ + v27) = 47;
          v30 = *(char *)(v20 + 23);
          if (v30 >= 0)
            v31 = (const std::string::value_type *)v20;
          else
            v31 = *(const std::string::value_type **)v20;
          if (v30 >= 0)
            v32 = *(unsigned __int8 *)(v20 + 23);
          else
            v32 = *(_QWORD *)(v20 + 8);
          v33 = std::string::append(&v48, v31, v32);
          v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
          v49.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v34;
          v33->__r_.__value_.__l.__size_ = 0;
          v33->__r_.__value_.__r.__words[2] = 0;
          v33->__r_.__value_.__r.__words[0] = 0;
          v35 = std::string::append(&v49, ".txt");
          v36 = (void *)v35->__r_.__value_.__r.__words[0];
          v83[0] = v35->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v83 + 7) = *(std::string::size_type *)((char *)&v35->__r_.__value_.__r.__words[1] + 7);
          v37 = HIBYTE(v35->__r_.__value_.__r.__words[2]);
          v35->__r_.__value_.__l.__size_ = 0;
          v35->__r_.__value_.__r.__words[2] = 0;
          v35->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__p[2]) < 0)
            operator delete(__p[0]);
          __p[0] = v36;
          __p[1] = (void *)v83[0];
          *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v83 + 7);
          HIBYTE(__p[2]) = v37;
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v49.__r_.__value_.__l.__data_);
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v48.__r_.__value_.__l.__data_);
        }
      }
      else if (*((_BYTE *)this + 527))
      {
        goto LABEL_35;
      }
      v48.__r_.__value_.__r.__words[0] = v20;
      v38 = std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v63, (unsigned __int8 *)v20, (uint64_t)&std::piecewise_construct, (__int128 **)&v48);
      quasar::DataFeedFactory::fillSpokenFormSection((uint64_t)(v38 + 40), v82, (uint64_t *)&v49);
      std::vector<quasar::SpokenFormLine>::__vdeallocate((void **)&v52.__r_.__value_.__l.__data_);
      v52 = v49;
      memset(&v49, 0, sizeof(v49));
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
      std::vector<quasar::SpokenFormLine>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
      quasar::GrammarFST::createFstWithTokenization((uint64_t)v55, (quasar::SpokenFormLine **)&v52, &v50, (uint64_t)this + 96, (uint64_t)__p);
      fst::RmEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(&v50, 1, -1, INFINITY, 0.00097656);
      fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v48);
      v49.__r_.__value_.__r.__words[0] = 0x7F8000003A800000;
      LODWORD(v49.__r_.__value_.__r.__words[1]) = -1;
      *(std::string::size_type *)((char *)&v49.__r_.__value_.__r.__words[1] + 4) = 0;
      v49.__r_.__value_.__s.__data_[20] = 0;
      fst::Determinize<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)&v50, (uint64_t)&v48, (int *)&v49, v39);
      fst::Minimize<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t *)&v48, 0, 0.00097656);
      fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(&v48);
      std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::push_back[abi:ne180100]((uint64_t *)this, (uint64_t)&v48);
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D256C0;
      size = v48.__r_.__value_.__l.__size_;
      if (v48.__r_.__value_.__l.__size_)
      {
        v41 = *(_DWORD *)(v48.__r_.__value_.__l.__size_ + 56) - 1;
        *(_DWORD *)(v48.__r_.__value_.__l.__size_ + 56) = v41;
        if (!v41)
          (*(void (**)(std::string::size_type))(*(_QWORD *)size + 8))(size);
      }
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
      v50 = &unk_1E5D256C0;
      v42 = v51;
      if (v51)
      {
        v43 = *(_DWORD *)(v51 + 56) - 1;
        *(_DWORD *)(v51 + 56) = v43;
        if (!v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      }
      __p[0] = &v52;
      std::vector<quasar::SpokenFormLine>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v20 += 24;
    }
    std::shared_ptr<quasar::LmeData>::reset[abi:ne180100]((_QWORD *)this + 46);
    std::__tree<std::string>::destroy((uint64_t)v62, v62[1]);
    if (v61 < 0)
      operator delete(v60);
    std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)&v59);
    __p[0] = &v58;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    v44 = v57;
    v11 = v11;
    if (v57)
    {
      v45 = (unint64_t *)&v57->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    if (v56 < 0)
      operator delete(v55[0]);
    std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::~__hash_table((uint64_t)v63);
  }
  __p[0] = v80;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeed>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeed>>>::~__hash_table((uint64_t)v82);
  return v11;
}

void sub_1ADDBF864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v62;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a57);
  a32 = v62 - 232;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeed>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeed>>>::~__hash_table(v62 - 184);
  _Unwind_Resume(a1);
}

std::string *quasar::PMBuilder::initializeOSyms(std::string *this)
{
  std::string *v1;
  uint64_t *i;
  _OWORD *v3;
  int v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  std::string *v16;
  std::string __p;
  std::string **v18;
  std::string *v19;
  unint64_t v20;
  std::string *v21;
  std::string *v22;
  unint64_t v23;
  _BYTE v24[16];
  uint64_t *v25;

  if (this[17].__r_.__value_.__s.__data_[16])
  {
    v1 = this;
    std::unordered_map<std::string,quasar::SpokenFormSection>::unordered_map((uint64_t)v24, (uint64_t)&this[6]);
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    for (i = v25; i; i = (uint64_t *)*i)
    {
      v3 = i + 5;
      if (*((char *)i + 63) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)i[5], i[6]);
      }
      else
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v3;
        __p.__r_.__value_.__r.__words[2] = i[7];
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__p.__r_.__value_.__l.__size_ != 4)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
LABEL_14:
          if (quasar::SpokenFormSection::containsSubgrammar((quasar::SpokenFormSection *)(i + 5)))
          {
            if (*((char *)i + 63) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)i[5], i[6]);
            }
            else
            {
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v3;
              __p.__r_.__value_.__r.__words[2] = i[7];
            }
            v5 = v22;
            if ((unint64_t)v22 >= v23)
            {
              v7 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v21, (__int128 *)&__p);
            }
            else
            {
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
              }
              else
              {
                v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                v22->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
              }
              v7 = v5 + 1;
            }
            v22 = v7;
          }
          else
          {
            if (*((char *)i + 63) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)i[5], i[6]);
            }
            else
            {
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v3;
              __p.__r_.__value_.__r.__words[2] = i[7];
            }
            v8 = v19;
            if ((unint64_t)v19 >= v20)
            {
              v10 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v18, (__int128 *)&__p);
            }
            else
            {
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v19, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
              }
              else
              {
                v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                v19->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
              }
              v10 = v8 + 1;
            }
            v19 = v10;
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          continue;
        }
        v4 = *(_DWORD *)__p.__r_.__value_.__l.__data_;
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v4 != 1953460082)
          goto LABEL_14;
      }
      else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 4 || LODWORD(__p.__r_.__value_.__l.__data_) != 1953460082)
      {
        goto LABEL_14;
      }
    }
    fst::SymbolTable::SymbolTable((fst::SymbolTable *)&__p);
    fst::SymbolTable::operator=((uint64_t)&v1[4], (uint64_t)&__p);
    fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "<eps>");
    fst::SymbolTable::MutateCheck(v1 + 4);
    fst::SymbolTableImpl::AddSymbol(v1[4].__r_.__value_.__l.__size_, (uint64_t)&__p, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v11 = v21;
    v12 = v22;
    if (v21 == v22)
    {
      v14 = 1;
    }
    else
    {
      v13 = 1;
      do
      {
        std::operator+<char>();
        fst::SymbolTable::MutateCheck(v1 + 4);
        fst::SymbolTableImpl::AddSymbol(v1[4].__r_.__value_.__l.__size_, (uint64_t)&__p, v13);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        ++v13;
        ++v11;
      }
      while (v11 != v12);
      v14 = v13;
    }
    v15 = (void **)v18;
    v16 = v19;
    if (v18 != (std::string **)v19)
    {
      do
      {
        std::operator+<char>();
        fst::SymbolTable::MutateCheck(v1 + 4);
        fst::SymbolTableImpl::AddSymbol(v1[4].__r_.__value_.__l.__size_, (uint64_t)&__p, v14);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        ++v14;
        v15 += 3;
      }
      while (v15 != (void **)v16);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    v18 = &v21;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
    return (std::string *)std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::~__hash_table((uint64_t)v24);
  }
  return this;
}

void sub_1ADDBFD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a15 = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::~__hash_table((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_1ADDBFEEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::GrammarFST::~GrammarFST(quasar::GrammarFST *this)
{
  void **v2;

  std::__tree<std::string>::destroy((uint64_t)this + 136, *((char **)this + 18));
  if (*((char *)this + 135) < 0)
    operator delete(*((void **)this + 14));
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)this + 72);
  v2 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t quasar::PMBuilder::buildLFst(quasar::PMBuilder *this)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  _BYTE *v5;
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *__p[2];
  uint64_t v29;
  void *v30[2];
  __int128 v31;
  __int128 v32;
  _OWORD v33[97];
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _BYTE v37[24];
  uint64_t v38;
  void *v39;
  void *v40;

  if (!*((_BYTE *)this + 424))
    return 0;
  if (quasar::gLogLevel >= 5)
  {
    memset(v33, 0, 224);
    v31 = 0u;
    v32 = 0u;
    *(_OWORD *)v30 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Building L FST ... ", 19);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v30);
  }
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v35);
  quasar::LexiconFST::LexiconFST((uint64_t)v30, (uint64_t)this + 208, (uint64_t)this + 296);
  __p[0] = 0;
  __p[1] = 0;
  v29 = 0;
  if (*((char *)this + 527) < 0)
    v2 = *((_QWORD *)this + 64);
  else
    v2 = *((unsigned __int8 *)this + 527);
  if (v2)
  {
    if (*((char *)this + 527) >= 0)
      v4 = *((unsigned __int8 *)this + 527);
    else
      v4 = *((_QWORD *)this + 64);
    v5 = v37;
    std::string::basic_string[abi:ne180100]((uint64_t)v37, v4 + 14);
    if (v37[23] < 0)
      v5 = *(_BYTE **)v37;
    if (v4)
    {
      if (*((char *)this + 527) >= 0)
        v6 = (char *)this + 504;
      else
        v6 = (char *)*((_QWORD *)this + 63);
      memmove(v5, v6, v4);
    }
    strcpy(&v5[v4], "/pmlexicon.txt");
    if (SHIBYTE(v29) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = *(_OWORD *)v37;
    v29 = *(_QWORD *)&v37[16];
  }
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  v26 = *((_QWORD *)this + 35);
  v27 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (char *)this + 128;
  v11 = quasar::LexiconFST::createFstWithAuxSyms((uint64_t)v30, (uint64_t)this + 96, &v26, (unsigned __int8 **)this + 43, &v35, (_QWORD *)this + 16, (uint64_t)__p);
  v3 = v11;
  v13 = v27;
  if (!v27)
    goto LABEL_29;
  v14 = (unint64_t *)&v27->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if ((v3 & 1) != 0)
      goto LABEL_30;
  }
  else
  {
LABEL_29:
    if ((v11 & 1) != 0)
    {
LABEL_30:
      v12.n128_u64[0] = 0x7F8000003A800000;
      v16 = (uint64_t *)((char *)this + 24);
      *(_QWORD *)v37 = 0x7F8000003A800000;
      *(_DWORD *)&v37[8] = -1;
      *(_QWORD *)&v37[12] = 0;
      v37[20] = 0;
      fst::Determinize<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)&v35, (uint64_t)v16, (int *)v37, v12);
      fst::Minimize<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v16, 0, 0.00097656);
      quasar::LexiconFST::removeAuxSymbols((uint64_t)v30, (uint64_t)v16, (uint64_t)v10);
      fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusLogArc>::RemoveEpsLocalClass((uint64_t *)v37, (uint64_t)v16);
      if (v39)
      {
        v40 = v39;
        operator delete(v39);
      }
      if (*(_QWORD *)&v37[16])
      {
        v38 = *(_QWORD *)&v37[16];
        operator delete(*(void **)&v37[16]);
      }
      fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v16);
    }
  }
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table((uint64_t)&v34);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)((char *)v33 + 8));
  v17 = *(std::__shared_weak_count **)&v33[0];
  if (*(_QWORD *)&v33[0])
  {
    v18 = (unint64_t *)(*(_QWORD *)&v33[0] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)v32;
  if ((_QWORD)v32)
  {
    v21 = (unint64_t *)(v32 + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (SBYTE7(v31) < 0)
    operator delete(v30[0]);
  v35 = &unk_1E5D256C0;
  v23 = v36;
  if (v36)
  {
    v24 = *(_DWORD *)(v36 + 56) - 1;
    *(_DWORD *)(v36 + 56) = v24;
    if (!v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  return v3;
}

void sub_1ADDC02E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18)
{
  uint64_t v18;
  _DWORD *v20;
  int v21;

  if (a16 < 0)
    operator delete(__p);
  quasar::LexiconFST::~LexiconFST(&a18);
  *(_QWORD *)(v18 - 144) = &unk_1E5D256C0;
  v20 = *(_DWORD **)(v18 - 136);
  if (v20)
  {
    v21 = v20[14] - 1;
    v20[14] = v21;
    if (!v21)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
  }
  _Unwind_Resume(a1);
}

void quasar::LexiconFST::~LexiconFST(void **this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table((uint64_t)(this + 200));
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)(this + 7));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 5));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t quasar::PMBuilder::buildAlignedLFst(quasar::PMBuilder *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21[2];
  void *v22[2];
  __int128 v23;
  __int128 v24;
  _OWORD v25[97];
  uint64_t v26;

  if (!*((_BYTE *)this + 424))
    return 0;
  if (quasar::gLogLevel >= 5)
  {
    memset(v25, 0, 224);
    v23 = 0u;
    v24 = 0u;
    *(_OWORD *)v22 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Building Aligned-L FST ... ", 27);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v22);
  }
  quasar::LexiconFST::LexiconFST((uint64_t)v22, (uint64_t)this + 208, (uint64_t)this + 296);
  fst::SymbolTable::SymbolTable((fst::SymbolTable *)v21);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  v19 = *((_QWORD *)this + 35);
  v20 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v5 = (char *)this + 80;
  v6 = quasar::LexiconFST::createFstWithoutAuxSyms((uint64_t)v22, (uint64_t)this + 96, &v19, (unsigned __int8 **)this + 43, (_QWORD *)this + 10, v21, (uint64_t)__p);
  if (v18 < 0)
    operator delete(__p[0]);
  v7 = v20;
  if (!v20)
    goto LABEL_13;
  v8 = (unint64_t *)&v20->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (v9)
  {
LABEL_13:
    if ((v6 & 1) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
  ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
  std::__shared_weak_count::__release_weak(v7);
  if ((v6 & 1) != 0)
LABEL_14:
    fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v5);
LABEL_15:
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)v21);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table((uint64_t)&v26);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)((char *)v25 + 8));
  v10 = *(std::__shared_weak_count **)&v25[0];
  if (*(_QWORD *)&v25[0])
  {
    v11 = (unint64_t *)(*(_QWORD *)&v25[0] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (std::__shared_weak_count *)v24;
  if ((_QWORD)v24)
  {
    v14 = (unint64_t *)(v24 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (SBYTE7(v23) < 0)
    operator delete(v22[0]);
  return v6;
}

void sub_1ADDC05C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20)
{
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&a18);
  quasar::LexiconFST::~LexiconFST(&a20);
  _Unwind_Resume(a1);
}

BOOL quasar::PMBuilder::composeLGFsts(quasar::PMBuilder *this)
{
  int v1;
  void (***v3)(_QWORD);
  uint64_t *v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void (**v8)(_QWORD);
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  _DWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t i;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  _BOOL4 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t j;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  int v43;
  _DWORD *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  void (***v48)(_QWORD);
  void (***v49)(_QWORD);
  void (***v50)(_QWORD);
  void (**v51)(_QWORD);
  uint64_t v52;
  int v53;
  int v55;
  uint64_t v56;
  void *__p[2];
  char v58;
  void *v59[2];
  char v60;
  uint64_t v61[2];
  void *v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  void *v81;
  uint64_t v82;

  v1 = *((unsigned __int8 *)this + 424);
  if (*((_BYTE *)this + 424))
  {
    v55 = *((unsigned __int8 *)this + 424);
    v5 = (void (***)(_QWORD))*((_QWORD *)this + 5);
    v3 = (void (***)(_QWORD))*((_QWORD *)this + 6);
    v4 = (uint64_t *)((char *)this + 40);
    if (v3 != v5)
    {
      v6 = v3 - 2;
      v7 = v3 - 2;
      do
      {
        v8 = *v7;
        v7 -= 2;
        (*v8)(v6);
        v9 = v6 == v5;
        v6 = v7;
      }
      while (!v9);
    }
    *((_QWORD *)this + 6) = v5;
    fst::MatcherFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>,&(quasar::olabel_lookahead_fst_type),fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::MatcherFst(&v81, (uint64_t)this + 24);
    v10 = *((_QWORD *)this + 43);
    v56 = *((_QWORD *)this + 44);
    if (v10 != v56)
    {
      v11 = 0;
      while (1)
      {
        v12 = *(_QWORD *)this;
        if (quasar::gLogLevel >= 5)
        {
          v79 = 0u;
          v80 = 0u;
          v77 = 0u;
          v78 = 0u;
          v75 = 0u;
          v76 = 0u;
          v73 = 0u;
          v74 = 0u;
          v71 = 0u;
          v72 = 0u;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v65 = 0u;
          v66 = 0u;
          v64 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v64);
          v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)"Composing LG FST for [", 22);
          v14 = *(char *)(v10 + 23);
          if (v14 >= 0)
            v15 = v10;
          else
            v15 = *(_QWORD *)v10;
          if (v14 >= 0)
            v16 = *(unsigned __int8 *)(v10 + 23);
          else
            v16 = *(_QWORD *)(v10 + 8);
          v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"] ... ", 6);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v64);
        }
        fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v62);
        fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>::Relabel<fst::MatcherFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>,&(quasar::olabel_lookahead_fst_type),fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>>((void *)(v12 + 16 * v11), (uint64_t)&v81, 1);
        fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((void *)(v12 + 16 * v11));
        LOBYTE(v64) = 1;
        DWORD1(v64) = 0;
        fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)&v81, v12 + 16 * v11, (uint64_t)&v62, (uint64_t)&v64);
        v18 = *(char *)(v10 + 23);
        if (v18 < 0)
        {
          if (*(_QWORD *)(v10 + 8) != 4)
            goto LABEL_55;
          v19 = *(_DWORD **)v10;
        }
        else
        {
          v19 = (_DWORD *)v10;
          if (v18 != 4)
            goto LABEL_55;
        }
        if (*v19 != 1953460082)
          goto LABEL_55;
        if (quasar::gLogLevel >= 5)
        {
          v79 = 0u;
          v80 = 0u;
          v77 = 0u;
          v78 = 0u;
          v75 = 0u;
          v76 = 0u;
          v73 = 0u;
          v74 = 0u;
          v71 = 0u;
          v72 = 0u;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v65 = 0u;
          v66 = 0u;
          v64 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v64);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)"Stripping out all the grammar symbols on the output side for [root] ... ", 72);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v64);
        }
        v20 = *(_QWORD *)(v63 + 72) - *(_QWORD *)(v63 + 64);
        if ((int)(v20 >> 3) >= 1)
        {
          v21 = 0;
          v22 = (v20 >> 3);
          do
          {
            *(_QWORD *)&v64 = &unk_1E5D213B0;
            *((_QWORD *)&v65 + 1) = 0;
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)&v62);
            v23 = *(_QWORD *)(*(_QWORD *)(v63 + 64) + 8 * v21);
            *((_QWORD *)&v64 + 1) = v23;
            *(_QWORD *)&v65 = v63 + 8;
            for (i = *((_QWORD *)&v65 + 1); ; i = ++*((_QWORD *)&v65 + 1))
            {
              v26 = v23 + 24;
              v25 = *(_QWORD *)(v23 + 24);
              if (i >= (*(_QWORD *)(v26 + 8) - v25) >> 4)
                break;
              *(_OWORD *)v61 = *(_OWORD *)(v25 + 16 * i);
              fst::SymbolTableImpl::Find(*((fst::SymbolTableImpl **)this + 13), SHIDWORD(v61[0]), v59);
              std::string::basic_string[abi:ne180100]<0>(__p, "$");
              v27 = quasar::startsWith((unsigned __int8 *)v59, (unsigned __int8 *)__p);
              v28 = v27;
              if (v58 < 0)
              {
                operator delete(__p[0]);
                if (!v28)
                  goto LABEL_33;
LABEL_32:
                HIDWORD(v61[0]) = 0;
                fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetValue((uint64_t)&v64, (__n128 *)v61);
                goto LABEL_33;
              }
              if (v27)
                goto LABEL_32;
LABEL_33:
              if (v60 < 0)
                operator delete(v59[0]);
              v23 = *((_QWORD *)&v64 + 1);
            }
            ++v21;
          }
          while (v21 != v22);
        }
        if (quasar::gLogLevel > 4)
        {
          v79 = 0u;
          v80 = 0u;
          v77 = 0u;
          v78 = 0u;
          v75 = 0u;
          v76 = 0u;
          v73 = 0u;
          v74 = 0u;
          v71 = 0u;
          v72 = 0u;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v65 = 0u;
          v66 = 0u;
          v64 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v64);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v64, (uint64_t)"Moving the grammar symbols from input side to output side for [root] ... ", 73);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v64);
        }
        v29 = *(_QWORD *)(v63 + 72) - *(_QWORD *)(v63 + 64);
        if ((int)(v29 >> 3) >= 1)
          break;
LABEL_55:
        fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(&v62);
        v43 = *(char *)(v10 + 23);
        if (v43 < 0)
        {
          if (*(_QWORD *)(v10 + 8) == 4)
          {
            v44 = *(_DWORD **)v10;
LABEL_60:
            if (*v44 == 1953460082)
              goto LABEL_62;
          }
        }
        else
        {
          v44 = (_DWORD *)v10;
          if (v43 == 4)
            goto LABEL_60;
        }
        fst::RmEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(&v62, 1, -1, INFINITY, 0.00097656);
LABEL_62:
        std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::push_back[abi:ne180100](v4, (uint64_t)&v62);
        v62 = &unk_1E5D256C0;
        v45 = v63;
        if (v63)
        {
          v46 = *(_DWORD *)(v63 + 56) - 1;
          *(_DWORD *)(v63 + 56) = v46;
          if (!v46)
            (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
        }
        ++v11;
        v10 += 24;
        if (v10 == v56)
          goto LABEL_66;
      }
      v30 = 0;
      v31 = (v29 >> 3);
LABEL_41:
      *(_QWORD *)&v64 = &unk_1E5D213B0;
      *((_QWORD *)&v65 + 1) = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)&v62);
      v32 = *(_QWORD *)(*(_QWORD *)(v63 + 64) + 8 * v30);
      *((_QWORD *)&v64 + 1) = v32;
      *(_QWORD *)&v65 = v63 + 8;
      for (j = *((_QWORD *)&v65 + 1); ; j = ++*((_QWORD *)&v65 + 1))
      {
        v35 = v32 + 24;
        v34 = *(_QWORD *)(v32 + 24);
        if (j >= (*(_QWORD *)(v35 + 8) - v34) >> 4)
        {
          if (++v30 == v31)
            goto LABEL_55;
          goto LABEL_41;
        }
        *(_OWORD *)v61 = *(_OWORD *)(v34 + 16 * j);
        fst::SymbolTableImpl::Find(*((fst::SymbolTableImpl **)this + 17), SLODWORD(v61[0]), v59);
        std::string::basic_string[abi:ne180100]<0>(__p, "$");
        v36 = quasar::startsWith((unsigned __int8 *)v59, (unsigned __int8 *)__p);
        v37 = v36;
        if (v58 < 0)
        {
          operator delete(__p[0]);
          if (!v37)
            goto LABEL_51;
        }
        else if (!v36)
        {
          goto LABEL_51;
        }
        v38 = (_QWORD *)*((_QWORD *)this + 13);
        v39 = fst::internal::DenseSymbolMap::Find(v38 + 5, (uint64_t)v59);
        if (v39 != -1)
        {
          v40 = v38[4];
          v41 = __OFSUB__(v39, v40);
          v42 = v39 - v40;
          if (v42 < 0 == v41)
            v39 = *(_QWORD *)(v38[15] + 8 * v42);
        }
        LODWORD(v61[0]) = 0;
        HIDWORD(v61[0]) = v39;
        fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetValue((uint64_t)&v64, (__n128 *)v61);
LABEL_51:
        if (v60 < 0)
          operator delete(v59[0]);
        v32 = *((_QWORD *)&v64 + 1);
      }
    }
LABEL_66:
    v48 = *(void (****)(_QWORD))this;
    v47 = *((_QWORD *)this + 1);
    if (v47 != *(_QWORD *)this)
    {
      v49 = (void (***)(_QWORD))(v47 - 16);
      v50 = (void (***)(_QWORD))(v47 - 16);
      do
      {
        v51 = *v50;
        v50 -= 2;
        (*v51)(v49);
        v9 = v49 == v48;
        v49 = v50;
      }
      while (!v9);
      v47 = *(_QWORD *)this;
    }
    *(_QWORD *)&v64 = v47;
    *((_QWORD *)&v64 + 1) = v48;
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *(_QWORD *)&v65 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    v59[0] = &v64;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v59);
    v81 = &unk_1E5D27AA8;
    v52 = v82;
    if (v82)
    {
      v53 = *(_DWORD *)(v82 + 56) - 1;
      *(_DWORD *)(v82 + 56) = v53;
      if (!v53)
        (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
    }
    v1 = v55;
  }
  return v1 != 0;
}

void sub_1ADDC0C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,_DWORD *a28,char a29)
{
  uint64_t v29;
  int v31;
  _DWORD *v32;
  int v33;

  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a29);
  if (a28)
  {
    v31 = a28[14] - 1;
    a28[14] = v31;
    if (!v31)
      (*(void (**)(_DWORD *))(*(_QWORD *)a28 + 8))(a28);
  }
  *(_QWORD *)(v29 - 104) = &unk_1E5D27AA8;
  v32 = *(_DWORD **)(v29 - 96);
  if (v32)
  {
    v33 = v32[14] - 1;
    v32[14] = v33;
    if (!v33)
      (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>::Relabel<fst::MatcherFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>,&(quasar::olabel_lookahead_fst_type),fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>>(void *a1, uint64_t a2, int a3)
{
  uint64_t *v5;
  uint64_t v6;
  _BYTE v8[120];

  v5 = *(uint64_t **)(*(_QWORD *)(a2 + 8) + 80);
  v6 = *v5;
  if (!*v5)
    v6 = v5[1];
  fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::LabelReachable((uint64_t)v8, v6, 0);
  fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::Relabel((uint64_t)v8, a1, a3);
  return fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::~LabelReachable((uint64_t)v8);
}

void sub_1ADDC0D64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::~LabelReachable((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *fst::MatcherFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>,&(quasar::olabel_lookahead_fst_type),fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::~MatcherFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D27AA8;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t quasar::PMBuilder::combineFsts(quasar::PMBuilder *this)
{
  std::string::size_type v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  unsigned __int8 *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  std::string::size_type size;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  unint64_t v45;
  int v46;
  float v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  _DWORD *v62;
  unsigned __int8 *v63;
  std::string::size_type v64;
  uint64_t v65;
  float v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  std::string *v70;
  __int128 v71;
  unsigned int v72;
  int v73;
  _QWORD *v74;
  _QWORD *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  void (***v106)(char *);
  void (**v107)(char *);
  BOOL v108;
  _QWORD *v109;
  int v110;
  uint64_t v111;
  int v112;
  _QWORD *v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  int v119;
  std::string v120;
  float v121[4];
  float v122[4];
  void *v123;
  _QWORD *v124;
  void *v125;
  uint64_t v126;
  void *__p[2];
  __int128 v128;
  _OWORD v129[2];
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  std::string v143[2];
  char *v144;
  char *v145;
  _QWORD v146[3];

  if (!*((_BYTE *)this + 424))
    return 0;
  v144 = 0;
  v145 = 0;
  v146[0] = 0;
  std::unordered_map<std::string,quasar::SpokenFormSection>::unordered_map((uint64_t)&v143[0].__r_.__value_.__r.__words[2], (uint64_t)this + 144);
  v2 = *((_QWORD *)this + 13);
  v143[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E5D1AD68;
  v143[0].__r_.__value_.__l.__size_ = v2;
  ++*(_DWORD *)(v2 + 168);
  v3 = *((_QWORD *)this + 43);
  v4 = *((_QWORD *)this + 44);
  if (v3 != v4)
  {
    v5 = 0;
    do
    {
      v6 = *(char *)(v3 + 23);
      if (v6 < 0)
      {
        if (*(_QWORD *)(v3 + 8) != 4)
          goto LABEL_10;
        v7 = *(_DWORD **)v3;
      }
      else
      {
        v7 = (_DWORD *)v3;
        if (v6 != 4)
          goto LABEL_10;
      }
      if (*v7 != 1953460082)
      {
LABEL_10:
        __p[0] = (void *)v3;
        v8 = std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v143[0].__r_.__value_.__r.__words[2], (unsigned __int8 *)v3, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
        if ((quasar::SpokenFormSection::containsSubgrammar((quasar::SpokenFormSection *)(v8 + 40)) & 1) != 0)
        {
          if (quasar::gLogLevel >= 5)
          {
            v141 = 0u;
            v142 = 0u;
            v139 = 0u;
            v140 = 0u;
            v137 = 0u;
            v138 = 0u;
            v135 = 0u;
            v136 = 0u;
            v133 = 0u;
            v134 = 0u;
            v131 = 0u;
            v132 = 0u;
            v130 = 0u;
            v128 = 0u;
            memset(v129, 0, sizeof(v129));
            *(_OWORD *)__p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Not combining $", 15);
            v10 = *(char *)(v3 + 23);
            if (v10 >= 0)
              v11 = v3;
            else
              v11 = *(_QWORD *)v3;
            if (v10 >= 0)
              v12 = *(unsigned __int8 *)(v3 + 23);
            else
              v12 = *(_QWORD *)(v3 + 8);
            v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" with root because it contains subgrammars", 42);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
          }
          goto LABEL_60;
        }
        std::operator+<char>();
        size = v143[0].__r_.__value_.__l.__size_;
        v15 = fst::internal::DenseSymbolMap::Find((uint64_t *)(v143[0].__r_.__value_.__l.__size_ + 40), (uint64_t)__p);
        LODWORD(v16) = v15;
        if (v15 != -1)
        {
          v17 = *(_QWORD *)(size + 32);
          v18 = __OFSUB__(v15, v17);
          v19 = v15 - v17;
          if (v19 < 0 == v18)
            v16 = *(_QWORD *)(*(_QWORD *)(size + 120) + 8 * v19);
        }
        if (SBYTE7(v128) < 0)
          operator delete(__p[0]);
        if (quasar::gLogLevel >= 5)
        {
          v141 = 0u;
          v142 = 0u;
          v139 = 0u;
          v140 = 0u;
          v137 = 0u;
          v138 = 0u;
          v135 = 0u;
          v136 = 0u;
          v133 = 0u;
          v134 = 0u;
          v131 = 0u;
          v132 = 0u;
          v130 = 0u;
          v128 = 0u;
          memset(v129, 0, sizeof(v129));
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"<", 1);
          v20 = (_QWORD *)std::ostream::operator<<();
          v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", ", 2);
          v22 = *(char *)(v3 + 23);
          if (v22 >= 0)
            v23 = v3;
          else
            v23 = *(_QWORD *)v3;
          if (v22 >= 0)
            v24 = *(unsigned __int8 *)(v3 + 23);
          else
            v24 = *(_QWORD *)(v3 + 8);
          v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)">", 1);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
        }
        v26 = *((_QWORD *)this + 5) + 16 * v5;
        v27 = v145;
        if ((unint64_t)v145 >= v146[0])
        {
          v28 = (v145 - v144) >> 4;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v30 = v146[0] - (_QWORD)v144;
          if ((uint64_t)(v146[0] - (_QWORD)v144) >> 3 > v29)
            v29 = v30 >> 3;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
            v31 = 0xFFFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v146, v31);
          v34 = &v32[16 * v28];
          *(_DWORD *)v34 = v16;
          *((_QWORD *)v34 + 1) = v26;
          v36 = v144;
          v35 = v145;
          v37 = v34;
          if (v145 != v144)
          {
            do
            {
              *((_OWORD *)v37 - 1) = *((_OWORD *)v35 - 1);
              v37 -= 16;
              v35 -= 16;
            }
            while (v35 != v36);
            goto LABEL_56;
          }
          goto LABEL_57;
        }
        *(_DWORD *)v145 = v16;
        goto LABEL_47;
      }
      if (quasar::gLogLevel >= 5)
      {
        v141 = 0u;
        v142 = 0u;
        v139 = 0u;
        v140 = 0u;
        v137 = 0u;
        v138 = 0u;
        v135 = 0u;
        v136 = 0u;
        v133 = 0u;
        v134 = 0u;
        v131 = 0u;
        v132 = 0u;
        v130 = 0u;
        v128 = 0u;
        memset(v129, 0, sizeof(v129));
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"<-2, root>", 10);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
      v26 = *((_QWORD *)this + 5) + 16 * v5;
      v27 = v145;
      if ((unint64_t)v145 >= v146[0])
      {
        v39 = (v145 - v144) >> 4;
        v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v41 = v146[0] - (_QWORD)v144;
        if ((uint64_t)(v146[0] - (_QWORD)v144) >> 3 > v40)
          v40 = v41 >> 3;
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
          v42 = 0xFFFFFFFFFFFFFFFLL;
        else
          v42 = v40;
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v146, v42);
        v34 = &v32[16 * v39];
        *(_DWORD *)v34 = -2;
        *((_QWORD *)v34 + 1) = v26;
        v43 = v144;
        v35 = v145;
        v37 = v34;
        if (v145 != v144)
        {
          do
          {
            *((_OWORD *)v37 - 1) = *((_OWORD *)v35 - 1);
            v37 -= 16;
            v35 -= 16;
          }
          while (v35 != v43);
LABEL_56:
          v35 = v144;
        }
LABEL_57:
        v38 = v34 + 16;
        v144 = v37;
        v145 = v34 + 16;
        v146[0] = &v32[16 * v33];
        if (v35)
          operator delete(v35);
        goto LABEL_59;
      }
      *(_DWORD *)v145 = -2;
LABEL_47:
      *((_QWORD *)v27 + 1) = v26;
      v38 = v27 + 16;
LABEL_59:
      v145 = v38;
LABEL_60:
      ++v5;
      v3 += 24;
    }
    while (v3 != v4);
  }
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v125);
  LOBYTE(__p[0]) = FLAGS_fst_default_cache_gc;
  __p[1] = (void *)FLAGS_fst_default_cache_gc_limit;
  *(_QWORD *)&v128 = 0;
  *((_QWORD *)&v128 + 1) = -2;
  *(_QWORD *)&v129[0] = 0x100000002;
  *(_OWORD *)((char *)v129 + 8) = xmmword_1AE146E50;
  BYTE8(v129[1]) = 0;
  *(_QWORD *)&v130 = 0;
  fst::Replace<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(&v144, (uint64_t)&v125, (uint64_t)__p);
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v123);
  v119 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState((uint64_t)&v123);
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)&v123);
  v44 = v124;
  *((_DWORD *)v124 + 22) = v119;
  v45 = (*(uint64_t (**)(_QWORD *))(*v44 + 24))(v44);
  v44[1] = v45 & 0xCCFFFFF0007 | (((v45 >> 35) & 1) << 37) | v44[1] & 4;
  v46 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState((uint64_t)&v123);
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetFinal((uint64_t)&v123, v46, 0.0);
  std::string::basic_string[abi:ne180100]<0>(__p, "$root");
  fst::SymbolTable::MutateCheck(v143);
  LODWORD(v47) = fst::SymbolTableImpl::AddSymbol(v143[0].__r_.__value_.__l.__size_, (uint64_t)__p, *(_QWORD *)(v143[0].__r_.__value_.__l.__size_ + 24));
  if (SBYTE7(v128) < 0)
    operator delete(__p[0]);
  v122[0] = 0.0;
  v122[1] = v47;
  v122[2] = 0.0;
  LODWORD(v122[3]) = v46;
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)&v123);
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(v124, v119, v122);
  v48 = v144;
  v145 = v144;
  if ((unint64_t)v144 >= v146[0])
  {
    v51 = (uint64_t)(v146[0] - (_QWORD)v144) >> 3;
    if (v51 <= 1)
      v51 = 1;
    if (v146[0] - (_QWORD)v144 >= 0x7FFFFFFFFFFFFFF0uLL)
      v52 = 0xFFFFFFFFFFFFFFFLL;
    else
      v52 = v51;
    v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v146, v52);
    v55 = &v53[16 * v54];
    *(float *)v53 = v47;
    *((_QWORD *)v53 + 1) = &v125;
    v49 = v53 + 16;
    v57 = v144;
    v56 = v145;
    if (v145 != v144)
    {
      do
      {
        *((_OWORD *)v53 - 1) = *((_OWORD *)v56 - 1);
        v53 -= 16;
        v56 -= 16;
      }
      while (v56 != v57);
      v56 = v144;
    }
    v144 = v53;
    v145 = v49;
    v146[0] = v55;
    if (v56)
      operator delete(v56);
  }
  else
  {
    *(float *)v144 = v47;
    *((_QWORD *)v48 + 1) = &v125;
    v49 = v48 + 16;
  }
  v145 = v49;
  v59 = *((_QWORD *)this + 43);
  v58 = *((_QWORD *)this + 44);
  if (v59 == v58)
  {
LABEL_119:
    if ((unint64_t)v49 >= v146[0])
    {
      v94 = (v49 - v144) >> 4;
      if ((unint64_t)(v94 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v95 = (uint64_t)(v146[0] - (_QWORD)v144) >> 3;
      if (v95 <= v94 + 1)
        v95 = v94 + 1;
      if (v146[0] - (_QWORD)v144 >= 0x7FFFFFFFFFFFFFF0uLL)
        v96 = 0xFFFFFFFFFFFFFFFLL;
      else
        v96 = v95;
      v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v146, v96);
      v98 = &v97[16 * v94];
      v100 = &v97[16 * v99];
      *(_DWORD *)v98 = -2;
      *((_QWORD *)v98 + 1) = &v123;
      v93 = v98 + 16;
      v102 = v144;
      v101 = v145;
      if (v145 != v144)
      {
        do
        {
          *((_OWORD *)v98 - 1) = *((_OWORD *)v101 - 1);
          v98 -= 16;
          v101 -= 16;
        }
        while (v101 != v102);
        v101 = v144;
      }
      v144 = v98;
      v145 = v93;
      v146[0] = v100;
      if (v101)
        operator delete(v101);
    }
    else
    {
      *(_DWORD *)v49 = -2;
      *((_QWORD *)v49 + 1) = &v123;
      v93 = v49 + 16;
    }
    v145 = v93;
    LOBYTE(__p[0]) = FLAGS_fst_default_cache_gc;
    __p[1] = (void *)FLAGS_fst_default_cache_gc_limit;
    *(_QWORD *)&v128 = 0;
    *((_QWORD *)&v128 + 1) = -2;
    *(_QWORD *)&v129[0] = 0x100000002;
    *(_OWORD *)((char *)v129 + 8) = xmmword_1AE146E50;
    BYTE8(v129[1]) = 0;
    *(_QWORD *)&v130 = 0;
    fst::Replace<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(&v144, (uint64_t)this + 64, (uint64_t)__p);
    fst::RmEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((char *)this + 64, 1, -1, INFINITY, 0.00097656);
    v104 = (char *)*((_QWORD *)this + 5);
    v103 = (char *)*((_QWORD *)this + 6);
    if (v103 != v104)
    {
      v105 = v103 - 16;
      v106 = (void (***)(char *))(v103 - 16);
      do
      {
        v107 = *v106;
        v106 -= 2;
        (*v107)(v105);
        v108 = v105 == v104;
        v105 = (char *)v106;
      }
      while (!v108);
      v103 = (char *)*((_QWORD *)this + 5);
    }
    __p[0] = v103;
    __p[1] = v104;
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 6) = 0;
    *(_QWORD *)&v128 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = 0;
    v120.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
    v50 = 1;
    goto LABEL_138;
  }
  v60 = 0;
  while (1)
  {
    v61 = *(char *)(v59 + 23);
    if (v61 < 0)
    {
      if (*(_QWORD *)(v59 + 8) != 4)
        break;
      v62 = *(_DWORD **)v59;
    }
    else
    {
      v62 = (_DWORD *)v59;
      if (v61 != 4)
        break;
    }
    if (*v62 != 1953460082)
      break;
LABEL_117:
    ++v60;
    v59 += 24;
    if (v59 == v58)
    {
      v49 = v145;
      goto LABEL_119;
    }
  }
  __p[0] = (void *)v59;
  v63 = std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v143[0].__r_.__value_.__r.__words[2], (unsigned __int8 *)v59, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
  if (!quasar::SpokenFormSection::containsSubgrammar((quasar::SpokenFormSection *)(v63 + 40)))
    goto LABEL_117;
  std::operator+<char>();
  v64 = v143[0].__r_.__value_.__l.__size_;
  v65 = fst::internal::DenseSymbolMap::Find((uint64_t *)(v143[0].__r_.__value_.__l.__size_ + 40), (uint64_t)__p);
  v66 = *(float *)&v65;
  if (v65 != -1)
  {
    v67 = *(_QWORD *)(v64 + 32);
    v18 = __OFSUB__(v65, v67);
    v68 = v65 - v67;
    if (v68 < 0 == v18)
      v66 = *(float *)(*(_QWORD *)(v64 + 120) + 8 * v68);
  }
  if (SBYTE7(v128) < 0)
    operator delete(__p[0]);
  if (v66 != NAN)
  {
    v69 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState((uint64_t)&v123);
    v121[0] = 0.0;
    v121[1] = v66;
    v121[2] = 10000.0;
    LODWORD(v121[3]) = v69;
    fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)&v123);
    fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(v124, v119, v121);
    std::operator+<char>();
    v70 = std::string::append(&v120, "1");
    v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
    *(_QWORD *)&v128 = *((_QWORD *)&v70->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v71;
    v70->__r_.__value_.__l.__size_ = 0;
    v70->__r_.__value_.__r.__words[2] = 0;
    v70->__r_.__value_.__r.__words[0] = 0;
    fst::SymbolTable::MutateCheck(v143);
    v72 = fst::SymbolTableImpl::AddSymbol(v143[0].__r_.__value_.__l.__size_, (uint64_t)__p, *(_QWORD *)(v143[0].__r_.__value_.__l.__size_ + 24));
    if (SBYTE7(v128) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v120.__r_.__value_.__l.__data_);
    v73 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState((uint64_t)&v123);
    LODWORD(v120.__r_.__value_.__l.__data_) = 0;
    *(std::string::size_type *)((char *)v120.__r_.__value_.__r.__words + 4) = v72;
    HIDWORD(v120.__r_.__value_.__r.__words[1]) = v73;
    fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)&v123);
    fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(v124, v69, (float *)&v120);
    fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetFinal((uint64_t)&v123, v73, 0.0);
    if (quasar::gLogLevel >= 5)
    {
      v141 = 0u;
      v142 = 0u;
      v139 = 0u;
      v140 = 0u;
      v137 = 0u;
      v138 = 0u;
      v135 = 0u;
      v136 = 0u;
      v133 = 0u;
      v134 = 0u;
      v131 = 0u;
      v132 = 0u;
      v130 = 0u;
      v128 = 0u;
      memset(v129, 0, sizeof(v129));
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"<", 1);
      v74 = (_QWORD *)std::ostream::operator<<();
      v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)", ", 2);
      v76 = *(char *)(v59 + 23);
      if (v76 >= 0)
        v77 = v59;
      else
        v77 = *(_QWORD *)v59;
      if (v76 >= 0)
        v78 = *(unsigned __int8 *)(v59 + 23);
      else
        v78 = *(_QWORD *)(v59 + 8);
      v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, v77, v78);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)">", 1);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    v80 = *((_QWORD *)this + 5) + 16 * v60;
    v81 = v145;
    if ((unint64_t)v145 >= v146[0])
    {
      v82 = (v145 - v144) >> 4;
      v83 = v82 + 1;
      if ((unint64_t)(v82 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v84 = v146[0] - (_QWORD)v144;
      if ((uint64_t)(v146[0] - (_QWORD)v144) >> 3 > v83)
        v83 = v84 >> 3;
      if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF0)
        v85 = 0xFFFFFFFFFFFFFFFLL;
      else
        v85 = v83;
      v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v146, v85);
      v88 = &v86[16 * v82];
      *(_DWORD *)v88 = v72;
      *((_QWORD *)v88 + 1) = v80;
      v90 = v144;
      v89 = v145;
      v91 = v88;
      if (v145 != v144)
      {
        do
        {
          *((_OWORD *)v91 - 1) = *((_OWORD *)v89 - 1);
          v91 -= 16;
          v89 -= 16;
        }
        while (v89 != v90);
        v89 = v144;
      }
      v92 = v88 + 16;
      v144 = v91;
      v145 = v88 + 16;
      v146[0] = &v86[16 * v87];
      if (v89)
        operator delete(v89);
      v145 = v92;
    }
    else
    {
      *(_DWORD *)v145 = v72;
      *((_QWORD *)v81 + 1) = v80;
      v145 = v81 + 16;
    }
    goto LABEL_117;
  }
  if (quasar::gLogLevel >= 1)
  {
    v141 = 0u;
    v142 = 0u;
    v139 = 0u;
    v140 = 0u;
    v137 = 0u;
    v138 = 0u;
    v135 = 0u;
    v136 = 0u;
    v133 = 0u;
    v134 = 0u;
    v131 = 0u;
    v132 = 0u;
    v130 = 0u;
    v128 = 0u;
    memset(v129, 0, sizeof(v129));
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v114 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unable to find symbol $", 23);
    v115 = *(char *)(v59 + 23);
    if (v115 >= 0)
      v116 = v59;
    else
      v116 = *(_QWORD *)v59;
    if (v115 >= 0)
      v117 = *(unsigned __int8 *)(v59 + 23);
    else
      v117 = *(_QWORD *)(v59 + 8);
    v118 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, v116, v117);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)" in the symbol table.", 21);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
  }
  v50 = 0;
LABEL_138:
  v123 = &unk_1E5D256C0;
  v109 = v124;
  if (v124)
  {
    v110 = *((_DWORD *)v124 + 14) - 1;
    *((_DWORD *)v124 + 14) = v110;
    if (!v110)
      (*(void (**)(_QWORD *))(*v109 + 8))(v109);
  }
  v125 = &unk_1E5D256C0;
  v111 = v126;
  if (v126)
  {
    v112 = *(_DWORD *)(v126 + 56) - 1;
    *(_DWORD *)(v126 + 56) = v112;
    if (!v112)
      (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  }
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)v143);
  std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::~__hash_table((uint64_t)&v143[0].__r_.__value_.__r.__words[2]);
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  return v50;
}

void sub_1ADDC1A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_DWORD *a25,uint64_t a26,_DWORD *a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  int v35;
  int v36;
  void *v37;

  if (a25)
  {
    v35 = a25[14] - 1;
    a25[14] = v35;
    if (!v35)
      (*(void (**)(_DWORD *))(*(_QWORD *)a25 + 8))(a25);
  }
  if (a27)
  {
    v36 = a27[14] - 1;
    a27[14] = v36;
    if (!v36)
      (*(void (**)(_DWORD *))(*(_QWORD *)a27 + 8))(a27);
  }
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)(v33 - 192));
  std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::~__hash_table(v33 - 176);
  v37 = *(void **)(v33 - 136);
  if (v37)
  {
    *(_QWORD *)(v33 - 128) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::SpokenFormSection::containsSubgrammar(quasar::SpokenFormSection *this)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  std::string v6;
  std::string v7;
  std::string *v8;

  v1 = *((_QWORD *)this + 3);
  v2 = *((_QWORD *)this + 4);
  if (v1 == v2)
    return 0;
  while (1)
  {
    if (*(char *)(v1 + 87) < 0)
    {
      std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(v1 + 64), *(_QWORD *)(v1 + 72));
    }
    else
    {
      v3 = *(_OWORD *)(v1 + 64);
      v7.__r_.__value_.__r.__words[2] = *(_QWORD *)(v1 + 80);
      *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v3;
    }
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      break;
    if (*((_BYTE *)&v7.__r_.__value_.__s + 23))
      return 1;
LABEL_9:
    memset(&v6, 0, sizeof(v6));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v6, *(__int128 **)(v1 + 88), *(__int128 **)(v1 + 96), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1 + 96) - *(_QWORD *)(v1 + 88)) >> 3));
    v4 = *(_OWORD *)&v6.__r_.__value_.__l.__data_;
    v8 = &v6;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
    if ((_QWORD)v4 != *((_QWORD *)&v4 + 1))
      return 1;
    v1 += 112;
    if (v1 == v2)
      return 0;
  }
  if (!v7.__r_.__value_.__l.__size_)
    goto LABEL_9;
  operator delete(v7.__r_.__value_.__l.__data_);
  return 1;
}

void sub_1ADDC1CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::PMBuilder::getLGFstName(quasar::PMBuilder *this)
{
  return (uint64_t)this + 432;
}

uint64_t quasar::PMBuilder::getLFstName(quasar::PMBuilder *this)
{
  return (uint64_t)this + 456;
}

uint64_t quasar::PMBuilder::getOsymsName(quasar::PMBuilder *this)
{
  return (uint64_t)this + 480;
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::vector<quasar::RegexReplacementRule>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 88;
        std::allocator<quasar::RegexReplacementRule>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::unordered_map<std::string,quasar::SpokenFormSection>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::SpokenFormSection> const&>(a1, i + 16, (__int128 *)i + 1);
  return a1;
}

void sub_1ADDC1EDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::SpokenFormSection> const&>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__construct_node_hash<std::pair<std::string const,quasar::SpokenFormSection> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1ADDC215C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__construct_node_hash<std::pair<std::string const,quasar::SpokenFormSection> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x58uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,quasar::SpokenFormSection>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1ADDC21D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,quasar::SpokenFormSection>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  std::vector<quasar::SpokenFormLine>::__init_with_size[abi:ne180100]<quasar::SpokenFormLine*,quasar::SpokenFormLine*>((quasar::SpokenFormLine *)&this[2], *((quasar::SpokenFormLine **)a2 + 6), *((quasar::SpokenFormLine **)a2 + 7), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 4));
  return this;
}

void sub_1ADDC229C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

quasar::SpokenFormLine *std::vector<quasar::SpokenFormLine>::__init_with_size[abi:ne180100]<quasar::SpokenFormLine*,quasar::SpokenFormLine*>(quasar::SpokenFormLine *result, quasar::SpokenFormLine *a2, quasar::SpokenFormLine *a3, unint64_t a4)
{
  quasar::SpokenFormLine *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::VoiceCommandInterpretation>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::SpokenFormLine>,quasar::SpokenFormLine*,quasar::SpokenFormLine*,quasar::SpokenFormLine*>((uint64_t)v6 + 16, a2, a3, *((quasar::SpokenFormLine **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_1ADDC2334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::SpokenFormLine>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

quasar::SpokenFormLine *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::SpokenFormLine>,quasar::SpokenFormLine*,quasar::SpokenFormLine*,quasar::SpokenFormLine*>(uint64_t a1, quasar::SpokenFormLine *a2, quasar::SpokenFormLine *a3, quasar::SpokenFormLine *this)
{
  quasar::SpokenFormLine *v4;
  const quasar::SpokenFormLine *v6;
  _QWORD v8[3];
  char v9;
  quasar::SpokenFormLine *v10;
  quasar::SpokenFormLine *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      quasar::SpokenFormLine::SpokenFormLine(v4, v6);
      v6 = (const quasar::SpokenFormLine *)((char *)v6 + 112);
      v4 = (quasar::SpokenFormLine *)((char *)v11 + 112);
      v11 = (quasar::SpokenFormLine *)((char *)v11 + 112);
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SpokenFormLine>,quasar::SpokenFormLine*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADDC23E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SpokenFormLine>,quasar::SpokenFormLine*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SpokenFormLine>,quasar::SpokenFormLine*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SpokenFormLine>,quasar::SpokenFormLine*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::SpokenFormLine>,quasar::SpokenFormLine*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 112;
      std::allocator<quasar::SpokenFormLine>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::SpokenFormSection>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t quasar::GrammarFST::GrammarFST(uint64_t a1, _QWORD *a2, __int128 **a3, uint64_t a4, uint64_t a5, __int128 *a6, const void ***a7)
{
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v16[5];

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *a2;
  v11 = a2[1];
  *(_QWORD *)(a1 + 32) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 40) = a4;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 48), *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 112), *(const std::string::value_type **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    v14 = *a6;
    *(_QWORD *)(a1 + 128) = *((_QWORD *)a6 + 2);
    *(_OWORD *)(a1 + 112) = v14;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)(a1 + 136), a7);
  quasar::PMRegexEnumerator::loadEnumeratorsFromConfigFile(a5, (uint64_t)v16);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>>>::__move_assign(a1 + 72, v16);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)v16);
  return a1;
}

void sub_1ADDC25E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  va_list va;

  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(v4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v3);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<kaldi::quasar::TMTools::AbstractModelCache>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<quasar::PMRegexEnumerator>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

uint64_t quasar::LexiconFST::LexiconFST(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  quasar::SystemConfig *v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const std::string *SpeechModelInfo;
  quasar::SystemConfig *v17;
  uint64_t v18;
  uint64_t v20[3];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v6 = a1 + 24;
  v7 = (_QWORD *)(a1 + 40);
  v8 = (quasar::SystemConfig *)(a1 + 56);
  *(_OWORD *)a1 = 0u;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)(a1 + 56));
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_DWORD *)(a1 + 1632) = 1065353216;
  v9 = (char *)operator new(0x68uLL);
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &unk_1E5D428E0;
  *((_QWORD *)v9 + 1) = 0;
  v9[32] = 0;
  *((_QWORD *)v9 + 3) = &unk_1E5D35128;
  *((_DWORD *)v9 + 9) = 10000;
  *((_QWORD *)v9 + 5) = v9 + 40;
  *((_QWORD *)v9 + 6) = v9 + 40;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *((_QWORD *)v9 + 11) = 0;
  *((_DWORD *)v9 + 24) = 1065353216;
  *(_QWORD *)&v21 = v9 + 24;
  *((_QWORD *)&v21 + 1) = v9;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v6, &v21);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::allocate_shared[abi:ne180100]<quasar::LmeDataFactory,std::allocator<quasar::LmeDataFactory>,std::string const&,void>(a2, &v21);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)v7, &v21);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v7 + 16))(*v7))
  {
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"lmeDataFactory initialization failed!", 37);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v21);
  }
  memset(v20, 0, sizeof(v20));
  v21 = 0u;
  v22 = 0u;
  LODWORD(v23) = 1065353216;
  quasar::SystemConfig::readJsonFile((uint64_t)v8, a2, v20, (uint64_t)&v21, 0, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v21);
  *(_QWORD *)&v21 = v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  SpeechModelInfo = (const std::string *)quasar::SystemConfig::getSpeechModelInfo(v8);
  std::string::operator=((std::string *)a1, SpeechModelInfo + 5);
  if ((quasar::QuasarG2PFactory::g2pModelExist(v8, v17) & 1) == 0)
  {
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v21 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"G2P model does not exist", 24);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v21);
  }
  v18 = *(unsigned __int8 *)(a3 + 23);
  if ((v18 & 0x80u) != 0)
    v18 = *(_QWORD *)(a3 + 8);
  if (v18)
    quasar::LexiconFST::loadAdditionalLexicon(a1, a3);
  return a1;
}

void sub_1ADDC2A8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  quasar::SystemConfig *v4;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table(v1 + 1600);
  quasar::SystemConfig::~SystemConfig(v4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t *fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusLogArc>::RemoveEpsLocalClass(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unint64_t i;

  *a1 = a2;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) != -1)
  {
    *((_DWORD *)a1 + 2) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 200))(*a1);
    fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusLogArc>::InitNumArcs(a1);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 160))(*a1);
    if (v4 >= 1)
    {
      v5 = 0;
      do
      {
        for (i = 0; i < (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, v5); ++i)
          fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusLogArc>::RemoveEps(a1, v5, i);
        v5 = (v5 + 1);
      }
      while ((_DWORD)v5 != v4);
    }
    fst::Connect<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a2);
  }
  return a1;
}

void sub_1ADDC2BE4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = (void *)v1[5];
  if (v4)
  {
    v1[6] = v4;
    operator delete(v4);
  }
  v5 = *v2;
  if (*v2)
  {
    v1[3] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusLogArc>::InitNumArcs(_QWORD *a1)
{
  int v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t i;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[3];
  _DWORD *v11;
  unint64_t v12;
  int v13;

  v2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 160))(*a1);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 2), v2);
  v3 = a1 + 5;
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 5), v2);
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  ++*(_DWORD *)(a1[2] + 4 * (int)result);
  if (v2 < 1)
    return result;
  for (i = 0; i != v2; ++i)
  {
    LODWORD(v10[0]) = (*(float (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, i);
    v13 = 2139095040;
    if (*(float *)v10 != INFINITY)
      ++*(_DWORD *)(*v3 + 4 * i);
    v6 = *a1;
    v12 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v6 + 136))(v6, i, v10);
    while (1)
    {
      result = v10[0];
      if (!v10[0])
      {
        if (v12 >= v10[2])
          goto LABEL_17;
LABEL_11:
        v9 = 0;
        v8 = v10[1] + 16 * v12;
        goto LABEL_12;
      }
      v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v10[0] + 24))(v10[0]);
      result = v10[0];
      if (v7)
        break;
      if (!v10[0])
        goto LABEL_11;
      v8 = (*(uint64_t (**)(void))(*(_QWORD *)v10[0] + 32))();
      v9 = v10[0];
LABEL_12:
      ++*(_DWORD *)(a1[2] + 4 * *(int *)(v8 + 12));
      ++*(_DWORD *)(*v3 + 4 * i);
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
      else
        ++v12;
    }
    if (v10[0])
    {
      result = (*(uint64_t (**)(void))(*(_QWORD *)v10[0] + 8))();
      continue;
    }
LABEL_17:
    if (v11)
      --*v11;
  }
  return result;
}

void sub_1ADDC2E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _DWORD **v9;

  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  else
    quasar::InverseTextNormalizer::getNumTokens(v9);
  _Unwind_Resume(a1);
}

void fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusLogArc>::RemoveEps(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v13;
  _QWORD v15[3];
  _DWORD *v16;
  uint64_t v17;

  v6 = *a1;
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v6 + 136))(v6, a2, v15);
  if (!v15[0])
  {
    v17 = a3;
    v10 = a3;
LABEL_7:
    v11 = (uint64_t *)(v15[1] + 16 * v10);
    v8 = *v11;
    v9 = v11[1];
    goto LABEL_8;
  }
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v15[0] + 64))(v15[0], a3);
  if (!v15[0])
  {
    v10 = v17;
    goto LABEL_7;
  }
  v7 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v15[0] + 32))(v15[0]);
  v8 = *v7;
  v9 = v7[1];
  if (v15[0])
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 8))(v15[0]);
    goto LABEL_10;
  }
LABEL_8:
  if (v16)
    --*v16;
LABEL_10:
  if (HIDWORD(v9) != (_DWORD)a2 && *((_DWORD *)a1 + 2) != HIDWORD(v9))
  {
    v13 = *(_DWORD *)(a1[5] + 4 * (v9 >> 32));
    if (*(_DWORD *)(a1[2] + 4 * (v9 >> 32)) != 1 || v13 < 2)
    {
      if (v13 == 1)
        fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusLogArc>::RemoveEpsPattern2(a1, a2, a3, v8, v9);
    }
    else
    {
      fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusLogArc>::RemoveEpsPattern1(a1, a2, a3, v8, v9);
    }
  }
}

void sub_1ADDC2F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    fst::ComposeFstImpl<fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::SequenceComposeFilter<fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::GenericComposeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>,fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::CompactHashStateTable<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>,fst::ComposeHash<fst::DefaultComposeStateTuple<int,fst::IntegerFilterState<signed char>>>>>>::OrderedExpand<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::Matcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusLogArc>::RemoveEpsPattern1(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  __n128 v13;
  int CanCombineArcs;
  float v15;
  float v16;
  float v17;
  float v18;
  __n128 *v19;
  __n128 *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  __n128 *v26;
  __n128 *v27;
  __n128 *v28;
  __n128 *v29;
  float v30;
  __n128 v31;
  float v32;
  float v33;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  __n128 v40;
  float v41;
  BOOL v43;
  float v44;
  float v45;
  float v46;
  float v47;
  __n128 *v48;
  uint64_t v49;
  unint64_t v50;
  __n128 v51;
  __n128 v52;
  uint64_t v53;
  __n128 *v54;
  __n128 *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;

  v57 = a4;
  v58 = a5;
  v9 = HIDWORD(a5);
  v54 = 0;
  v55 = 0;
  v56 = 0;
  (*(void (**)(_QWORD, unint64_t, uint64_t *))(*(_QWORD *)*a1 + 296))(*a1, HIDWORD(a5), &v53);
  v10 = a5 >> 32;
  v11 = INFINITY;
  v12 = INFINITY;
  while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v53 + 24))(v53))
  {
    v13 = *(__n128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 32))(v53);
    v52 = v13;
    if (v13.n128_u32[3] != *((_DWORD *)a1 + 2))
    {
      CanCombineArcs = fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::CanCombineArcs((uint64_t)a1, (float *)&v57, (float *)&v52, (uint64_t)&v51);
      v15 = v52.n128_f32[2];
      v13.n128_u32[0] = 2139095040;
      if (CanCombineArcs)
      {
        if (v12 == INFINITY)
        {
          v12 = v52.n128_f32[2];
        }
        else
        {
          v13.n128_u32[0] = 2139095040;
          if (v52.n128_f32[2] != INFINITY)
          {
            if (v12 <= v52.n128_f32[2])
            {
              v18 = expf(-(float)(v52.n128_f32[2] - v12));
              v13.n128_f32[0] = logf(v18 + 1.0);
              v12 = v12 - v13.n128_f32[0];
            }
            else
            {
              v16 = expf(-(float)(v12 - v52.n128_f32[2]));
              v13.n128_f32[0] = logf(v16 + 1.0);
              v12 = v15 - v13.n128_f32[0];
            }
          }
        }
        --*(_DWORD *)(a1[5] + 4 * v10);
        --*(_DWORD *)(a1[2] + 4 * v52.n128_i32[3]);
        v52.n128_u32[3] = *((_DWORD *)a1 + 2);
        (*(void (**)(uint64_t, __n128 *, __n128))(*(_QWORD *)v53 + 88))(v53, &v52, v13);
        v19 = v55;
        if (v55 >= (__n128 *)v56)
        {
          v21 = v55 - v54;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v23 = v56 - (char *)v54;
          if ((v56 - (char *)v54) >> 3 > v22)
            v22 = v23 >> 3;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
            v24 = 0xFFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
            v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v56, v24);
          else
            v25 = 0;
          v26 = (__n128 *)&v25[16 * v21];
          v13 = v51;
          *v26 = v51;
          v28 = v54;
          v27 = v55;
          v29 = v26;
          if (v55 != v54)
          {
            do
            {
              v13 = v27[-1];
              v29[-1] = v13;
              --v29;
              --v27;
            }
            while (v27 != v28);
            v27 = v54;
          }
          v20 = v26 + 1;
          v54 = v29;
          v55 = v26 + 1;
          v56 = &v25[16 * v24];
          if (v27)
            operator delete(v27);
        }
        else
        {
          v13 = v51;
          *v55 = v51;
          v20 = v19 + 1;
        }
        v55 = v20;
      }
      else if (v11 == INFINITY)
      {
        v11 = v52.n128_f32[2];
      }
      else
      {
        v13.n128_u32[0] = 2139095040;
        if (v52.n128_f32[2] != INFINITY)
        {
          if (v11 <= v52.n128_f32[2])
          {
            v30 = expf(-(float)(v52.n128_f32[2] - v11));
            v13.n128_f32[0] = logf(v30 + 1.0);
            v11 = v11 - v13.n128_f32[0];
          }
          else
          {
            v17 = expf(-(float)(v11 - v52.n128_f32[2]));
            v13.n128_f32[0] = logf(v17 + 1.0);
            v11 = v15 - v13.n128_f32[0];
          }
        }
      }
    }
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v53 + 40))(v53, v13);
  }
  if (v53)
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  v32 = (*(float (**)(_QWORD, unint64_t))(*(_QWORD *)*a1 + 32))(*a1, v9);
  v52.n128_f32[0] = v32;
  v51.n128_u32[0] = 2139095040;
  if (v32 == INFINITY)
    goto LABEL_58;
  if (v57)
  {
    if (v11 == INFINITY)
    {
      v11 = v32;
    }
    else if (v32 != INFINITY)
    {
      if (v11 <= v32)
      {
        v37 = expf(-(float)(v32 - v11));
        v11 = v11 - logf(v37 + 1.0);
      }
      else
      {
        v35 = expf(-(float)(v11 - v32));
        v11 = v32 - logf(v35 + 1.0);
      }
    }
LABEL_58:
    v32 = v12;
    goto LABEL_74;
  }
  v33 = NAN;
  if (*(float *)&v58 != -INFINITY && v32 != -INFINITY)
  {
    if (*(float *)&v58 == INFINITY || v32 == INFINITY)
      v33 = INFINITY;
    else
      v33 = v32 + *(float *)&v58;
  }
  if (v12 != INFINITY)
  {
    if (v32 == INFINITY)
    {
      v32 = v12;
    }
    else if (v12 <= v32)
    {
      v38 = expf(-(float)(v32 - v12));
      v32 = v12 - logf(v38 + 1.0);
    }
    else
    {
      v36 = expf(-(float)(v12 - v32));
      v32 = v32 - logf(v36 + 1.0);
    }
  }
  v52.n128_u32[0] = (*(float (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, a2);
  v51.n128_u32[0] = 2139095040;
  if (v52.n128_f32[0] == INFINITY)
    ++*(_DWORD *)(a1[5] + 4 * (int)a2);
  v39 = *a1;
  v40.n128_f32[0] = (*(float (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, a2);
  if (v40.n128_f32[0] >= v33)
    v41 = v33;
  else
    v41 = v40.n128_f32[0];
  v43 = v33 == -INFINITY || v40.n128_f32[0] == -INFINITY;
  v40.n128_u32[0] = 2143289344;
  if (!v43)
    v40.n128_f32[0] = v41;
  (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v39 + 184))(v39, a2, v40);
  --*(_DWORD *)(a1[5] + 4 * v10);
  (*(void (**)(_QWORD, unint64_t, float))(*(_QWORD *)*a1 + 184))(*a1, v9, INFINITY);
LABEL_74:
  v52.n128_f32[0] = v32;
  v51.n128_u32[0] = 2139095040;
  v31.n128_f32[0] = v32;
  if (v32 != INFINITY)
  {
    v52.n128_f32[0] = v11;
    v51.n128_u32[0] = 2139095040;
    if (v11 == INFINITY)
    {
      --*(_DWORD *)(a1[5] + 4 * (int)a2);
      --*(_DWORD *)(a1[2] + 4 * SHIDWORD(v58));
      HIDWORD(v58) = *((_DWORD *)a1 + 2);
      (*(void (**)(_QWORD, uint64_t, __n128 *, float))(*(_QWORD *)*a1 + 296))(*a1, a2, &v52, v11);
      (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v52.n128_u64[0] + 64))(v52.n128_u64[0], a3);
      (*(void (**)(unint64_t, uint64_t *))(*(_QWORD *)v52.n128_u64[0] + 88))(v52.n128_u64[0], &v57);
      if (v52.n128_u64[0])
        (*(void (**)(unint64_t))(*(_QWORD *)v52.n128_u64[0] + 8))(v52.n128_u64[0]);
    }
    else
    {
      v44 = v11;
      if (v32 != INFINITY)
      {
        if (v11 == INFINITY)
        {
          v44 = v32;
        }
        else if (v32 <= v11)
        {
          v46 = expf(-(float)(v11 - v32));
          v44 = v32 - logf(v46 + 1.0);
        }
        else
        {
          v45 = expf(-(float)(v32 - v11));
          v44 = v11 - logf(v45 + 1.0);
        }
      }
      v47 = NAN;
      if (v11 != -INFINITY)
      {
        if ((LODWORD(v44) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
        {
          v47 = INFINITY;
          if (v11 != INFINITY)
            v47 = v11 - v44;
        }
        else
        {
          v47 = NAN;
        }
      }
      fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusLogArc>::Reweight(a1, a2, a3, v47);
    }
  }
  v48 = v55;
  if (v55 != v54)
  {
    v49 = 0;
    v50 = 0;
    v48 = v54;
    do
    {
      ++*(_DWORD *)(a1[5] + 4 * (int)a2);
      ++*(_DWORD *)(a1[2] + 4 * v48[v49].n128_i32[3]);
      (*(void (**)(_QWORD, uint64_t, __n128))(*(_QWORD *)*a1 + 208))(*a1, a2, v31);
      ++v50;
      v48 = v54;
      ++v49;
    }
    while (v50 < v55 - v54);
  }
  if (v48)
  {
    v55 = v48;
    operator delete(v48);
  }
}

void sub_1ADDC36C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusLogArc>::RemoveEpsPattern2(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float v5;
  unint64_t v10;
  uint64_t v11;
  int v12;
  float v13;
  float v14;
  BOOL v15;
  float v16;
  uint64_t v17;
  __n128 v18;
  float v19;
  BOOL v21;
  int CanCombineArcs;
  _DWORD v23[3];
  int v24;
  float v25[6];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(float *)&a5;
  v27 = a4;
  v28 = a5;
  v10 = HIDWORD(a5);
  v11 = a5 >> 32;
  v12 = *(_DWORD *)(a1[2] + 4 * (a5 >> 32));
  v13 = (*(float (**)(_QWORD, unint64_t))(*(_QWORD *)*a1 + 32))(*a1, HIDWORD(a5));
  v25[0] = v13;
  v23[0] = 2139095040;
  if (v13 != INFINITY)
  {
    if (a4)
      return;
    v14 = NAN;
    if (v5 != -INFINITY && v13 != -INFINITY)
    {
      v15 = v5 == INFINITY || v13 == INFINITY;
      v16 = v13 + v5;
      if (v15)
        v14 = INFINITY;
      else
        v14 = v16;
    }
    v25[0] = (*(float (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, a2);
    v23[0] = 2139095040;
    if (v25[0] == INFINITY)
      ++*(_DWORD *)(a1[5] + 4 * (int)a2);
    v17 = *a1;
    v18.n128_f32[0] = (*(float (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, a2);
    if (v18.n128_f32[0] >= v14)
      v19 = v14;
    else
      v19 = v18.n128_f32[0];
    v21 = v14 == -INFINITY || v18.n128_f32[0] == -INFINITY;
    v18.n128_u32[0] = 2143289344;
    if (!v21)
      v18.n128_f32[0] = v19;
    (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v17 + 184))(v17, a2, v18);
    if (v12 == 1)
    {
      --*(_DWORD *)(a1[5] + 4 * v11);
      (*(void (**)(_QWORD, unint64_t, float))(*(_QWORD *)*a1 + 184))(*a1, v10, INFINITY);
    }
    goto LABEL_36;
  }
  (*(void (**)(_QWORD, unint64_t, uint64_t *))(*(_QWORD *)*a1 + 296))(*a1, v10, &v26);
  while (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26) + 12) == *((_DWORD *)a1 + 2))
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
  *(_OWORD *)v25 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
  CanCombineArcs = fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusDefault<fst::TropicalWeightTpl<float>>>::CanCombineArcs((uint64_t)a1, (float *)&v27, v25, (uint64_t)v23);
  if (CanCombineArcs)
  {
    if (v12 == 1)
    {
      --*(_DWORD *)(a1[5] + 4 * v11);
      --*(_DWORD *)(a1[2] + 4 * SLODWORD(v25[3]));
      v25[3] = *((float *)a1 + 2);
      (*(void (**)(uint64_t, float *))(*(_QWORD *)v26 + 88))(v26, v25);
    }
    ++*(_DWORD *)(a1[5] + 4 * (int)a2);
    ++*(_DWORD *)(a1[2] + 4 * v24);
    (*(void (**)(_QWORD, uint64_t, _DWORD *))(*(_QWORD *)*a1 + 208))(*a1, a2, v23);
  }
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (CanCombineArcs)
  {
LABEL_36:
    --*(_DWORD *)(a1[5] + 4 * (int)a2);
    --*(_DWORD *)(a1[2] + 4 * v11);
    HIDWORD(v28) = *((_DWORD *)a1 + 2);
    (*(void (**)(_QWORD, uint64_t, float *))(*(_QWORD *)*a1 + 296))(*a1, a2, v25);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)v25 + 64))(*(_QWORD *)v25, a3);
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)v25 + 88))(*(_QWORD *)v25, &v27);
    if (*(_QWORD *)v25)
      (*(void (**)(_QWORD))(**(_QWORD **)v25 + 8))(*(_QWORD *)v25);
  }
}

void sub_1ADDC3A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

uint64_t fst::RemoveEpsLocalClass<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ReweightPlusLogArc>::Reweight(_QWORD *a1, uint64_t a2, uint64_t a3, float a4)
{
  __n128 v7;
  float v8;
  BOOL v9;
  float v10;
  float v11;
  float v12;
  uint64_t result;
  float v14[6];
  uint64_t v15;
  __n128 v16;
  uint64_t v17;

  (*(void (**)(_QWORD, uint64_t, uint64_t *))(*(_QWORD *)*a1 + 296))(*a1, a2, &v17);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 64))(v17, a3);
  v7 = *(__n128 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
  v16 = v7;
  v7.n128_u32[0] = v7.n128_u32[2];
  v8 = NAN;
  if (v7.n128_f32[2] != -INFINITY && a4 != -INFINITY)
  {
    v8 = INFINITY;
    v9 = v16.n128_f32[2] == INFINITY || a4 == INFINITY;
    v7.n128_f32[0] = a4 + v16.n128_f32[2];
    if (!v9)
      v8 = a4 + v16.n128_f32[2];
  }
  v16.n128_f32[2] = v8;
  (*(void (**)(uint64_t, __n128 *, __n128))(*(_QWORD *)v17 + 88))(v17, &v16, v7);
  (*(void (**)(_QWORD, _QWORD, uint64_t *))(*(_QWORD *)*a1 + 296))(*a1, v16.n128_u32[3], &v15);
  while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
  {
    *(_OWORD *)v14 = *(_OWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
    if (LODWORD(v14[3]) != *((_DWORD *)a1 + 2))
    {
      v10 = v14[2] - a4;
      if (v14[2] == INFINITY)
        v10 = INFINITY;
      if (v14[2] == -INFINITY || (LODWORD(a4) & 0x7FFFFFFFu) > 0x7F7FFFFF)
        v10 = NAN;
      v14[2] = v10;
      (*(void (**)(uint64_t, float *))(*(_QWORD *)v15 + 88))(v15, v14);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v11 = (*(float (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v16.n128_u32[3]);
  v14[0] = v11;
  LODWORD(v15) = 2139095040;
  if (v11 != INFINITY)
  {
    if (v11 == -INFINITY || (LODWORD(a4) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    {
      v12 = NAN;
    }
    else
    {
      v12 = INFINITY;
      if (v11 != INFINITY)
        v12 = v11 - a4;
    }
    (*(void (**)(_QWORD, _QWORD, float))(*(_QWORD *)*a1 + 184))(*a1, v16.n128_u32[3], v12);
  }
  result = v17;
  if (v17)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  return result;
}

void sub_1ADDC3D34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + 112);
}

float fst::ImplToFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + 80) + 20 * a2);
}

uint64_t fst::ImplToFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + 80) + 20 * a2 + 8);
}

uint64_t fst::ImplToFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + 80) + 20 * a2 + 12);
}

uint64_t fst::ImplToFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + 80) + 20 * a2 + 16);
}

uint64_t fst::ImplToFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

uint64_t fst::ImplToFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

void std::vector<quasar::DataFeed>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 160;
        std::allocator<quasar::DataFeed>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

quasar::DataFeed *std::vector<quasar::DataFeed>::__init_with_size[abi:ne180100]<quasar::DataFeed*,quasar::DataFeed*>(quasar::DataFeed *result, quasar::DataFeed *a2, quasar::DataFeed *a3, unint64_t a4)
{
  quasar::DataFeed *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::DataFeed>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::DataFeed>,quasar::DataFeed*,quasar::DataFeed*,quasar::DataFeed*>((uint64_t)v6 + 16, a2, a3, *((quasar::DataFeed **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_1ADDC3F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::DataFeed>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::DataFeed>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x19999999999999ALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::DataFeed>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[160 * v4];
  return result;
}

quasar::DataFeed *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::DataFeed>,quasar::DataFeed*,quasar::DataFeed*,quasar::DataFeed*>(uint64_t a1, quasar::DataFeed *a2, quasar::DataFeed *a3, quasar::DataFeed *this)
{
  quasar::DataFeed *v4;
  const quasar::DataFeed *v6;
  _QWORD v8[3];
  char v9;
  quasar::DataFeed *v10;
  quasar::DataFeed *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      quasar::DataFeed::DataFeed(v4, v6);
      v6 = (const quasar::DataFeed *)((char *)v6 + 160);
      v4 = (quasar::DataFeed *)((char *)v11 + 160);
      v11 = (quasar::DataFeed *)((char *)v11 + 160);
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeed>,quasar::DataFeed*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADDC4088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeed>,quasar::DataFeed*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeed>,quasar::DataFeed*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeed>,quasar::DataFeed*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::DataFeed>,quasar::DataFeed*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 160;
      std::allocator<quasar::DataFeed>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeed>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeed>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeed>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeed>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::DataFeed>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::DataFeed>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::DataFeed>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::DataFeed>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::DataFeed>,0>(uint64_t a1)
{
  void **v2;
  void **v3;

  v2 = (void **)(a1 + 24);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a1 + 136);
  if (*(char *)(a1 + 135) < 0)
    operator delete(*(void **)(a1 + 112));
  v3 = (void **)(a1 + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v3 = v2;
  std::vector<quasar::DataFeedItem>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unsigned __int8 *std::__find_impl[abi:ne180100]<std::string *,std::string *,char [5],std::__identity>(unsigned __int8 *a1, unsigned __int8 *a2, char *__s)
{
  unsigned __int8 *v3;
  size_t v6;
  unsigned __int8 *v7;

  v3 = a1;
  if (a1 != a2)
  {
    v6 = strlen(__s);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((_QWORD *)v3 + 1))
        {
          if (v6 == -1)
LABEL_14:
            std::string::__throw_out_of_range[abi:ne180100]();
          v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, __s, v6))
            return v3;
        }
      }
      else if (v6 == v3[23])
      {
        v7 = v3;
        if (v6 == -1)
          goto LABEL_14;
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1ADDC4540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::SpokenFormSection>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::SpokenFormSection>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  double result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x58uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  result = 0.0;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1ADDC45E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::SpokenFormSection>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::vector<quasar::SpokenFormLine>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 112;
        std::allocator<quasar::SpokenFormLine>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_QWORD *fst::MatcherFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>,&(quasar::olabel_lookahead_fst_type),fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::MatcherFst(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "olabel_lookahead");
  v4 = fst::MatcherFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>,&(quasar::olabel_lookahead_fst_type),fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::CreateImpl(a2, &__p);
  *a1 = &unk_1E5D1F980;
  a1[1] = v4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = &unk_1E5D194A0;
  return a1;
}

void sub_1ADDC46E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::MatcherFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>,&(quasar::olabel_lookahead_fst_type),fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::CreateImpl(uint64_t a1, const std::string *a2)
{
  uint64_t Impl;
  uint64_t v4;
  int v5;
  void *v7;
  uint64_t v8;

  fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::ConstFst(&v7, a1);
  Impl = fst::MatcherFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>,&(quasar::olabel_lookahead_fst_type),fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::CreateImpl((uint64_t)&v7, a2);
  v7 = &unk_1E5D23A78;
  v4 = v8;
  if (v8)
  {
    v5 = *(_DWORD *)(v8 + 56) - 1;
    *(_DWORD *)(v8 + 56) = v5;
    if (!v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return Impl;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  _QWORD v13[23];
  uint64_t v14;
  void *v15;
  int v16;
  __int128 v17;
  int32x2_t v18[19];
  uint64_t v19;
  int v20;
  char v21;

  v16 = 0;
  v17 = xmmword_1AE182340;
  v15 = &unk_1E5D21CC8;
  fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::SortedMatcher(v18, a1, 0, 1);
  v18[18] = 0;
  v19 = 0;
  v20 = -1;
  v21 = 0;
  fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::LabelLookAheadMatcher((uint64_t)v13, a1, 1, 0, 0);
  v4 = operator new();
  v5 = v4;
  v6 = v19;
  if (v19)
    v6 = *(_QWORD *)(v19 + 80);
  v7 = v14;
  if (v14)
    v7 = *(_QWORD *)(v14 + 80);
  *(_QWORD *)v4 = v6;
  *(_QWORD *)(v4 + 8) = v7;
  *(_DWORD *)(v4 + 16) = 1;
  if (v6)
    ++*(_DWORD *)(v6 + 8);
  if (v7)
    ++*(_DWORD *)(v7 + 8);
  v8 = operator new();
  fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::AddOnImpl(v8, a1, a2, 0);
  v12 = v8;
  fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::SetAddOn(v8, v5);
  fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>::LabelLookAheadRelabeler<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>>((uint64_t)&v11, &v12);
  --*(_DWORD *)(v5 + 16);
  v9 = v12;
  fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::~LabelLookAheadMatcher(v13);
  fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::~LabelLookAheadMatcher(&v15);
  return v9;
}

void sub_1ADDC4778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    fst::Compose<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(a10);
  _Unwind_Resume(exception_object);
}

void fst::MatcherFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>,&(quasar::olabel_lookahead_fst_type),fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::~MatcherFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D27AA8;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::MatcherFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>,&(quasar::olabel_lookahead_fst_type),fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::ImplToFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ImplToFst(v4, a1, a2);
  *v4 = &unk_1E5D194A0;
  return v4;
}

void sub_1ADDC4868(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::MatcherFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>,&(quasar::olabel_lookahead_fst_type),fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::Write(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::Write(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::MatcherFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>,&(quasar::olabel_lookahead_fst_type),fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 72);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(v2 + 96);
  return result;
}

uint64_t fst::MatcherFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>,&(quasar::olabel_lookahead_fst_type),fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 72) + 80) + 20 * a2;
  v5 = *(unsigned int *)(v3 + 4);
  v4 = *(unsigned int *)(v3 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 72) + 88) + 16 * v5;
  *a3 = 0;
  a3[1] = v6;
  a3[2] = v4;
  a3[3] = 0;
  return result;
}

uint64_t fst::MatcherFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>,&(quasar::olabel_lookahead_fst_type),fst::LabelLookAheadRelabeler<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::LabelReachableData<int>>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::InitMatcher(uint64_t a1, __int32 a2)
{
  _BOOL4 v4;
  uint64_t v5;

  v4 = a2 != 0;
  v5 = operator new();
  fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::LabelLookAheadMatcher(v5, *(_QWORD *)(a1 + 8) + 64, a2, *(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80) + 8 * v4), 0);
  return v5;
}

void sub_1ADDC4944(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C406C04B374);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToExpandedFst<fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + 96);
}

void sub_1ADDC4AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::~LabelLookAheadMatcher(&a11);
  fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::~LabelLookAheadMatcher(&a36);
  _Unwind_Resume(a1);
}

uint64_t fst::AddOnImpl<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>>::SetAddOn(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t *v6;

  result = *(_QWORD *)(a1 + 80);
  if (result != a2)
  {
    if (result)
    {
      v5 = *(_DWORD *)(result + 16) - 1;
      *(_DWORD *)(result + 16) = v5;
      if (!v5)
      {
        v6 = fst::AddOnPair<fst::LabelReachableData<int>,fst::LabelReachableData<int>>::~AddOnPair((uint64_t *)result);
        result = MEMORY[0x1AF44D190](v6, 0x1020C40EDCEB4C7);
      }
    }
    *(_QWORD *)(a1 + 80) = a2;
    if (a2)
      ++*(_DWORD *)(a2 + 16);
  }
  return result;
}

uint64_t fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::LabelLookAheadMatcher(uint64_t a1, uint64_t a2, __int32 a3, _BYTE *a4, uint64_t a5)
{
  uint64_t *v10;

  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 12) = xmmword_1AE182340;
  *(_QWORD *)a1 = &unk_1E5D21CC8;
  fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::SortedMatcher((int32x2_t *)(a1 + 32), a2, a3, 1);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = -1;
  *(_BYTE *)(a1 + 198) = 0;
  if (a4)
  {
    if ((a3 == 0) == (*a4 != 0))
    {
      v10 = (uint64_t *)operator new();
      fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::LabelReachable((uint64_t)v10, (uint64_t)a4, a5);
LABEL_6:
      *(_QWORD *)(a1 + 184) = v10;
    }
  }
  else if (a3)
  {
    v10 = (uint64_t *)operator new();
    fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::LabelReachable(v10, a2, 0, a5, 0);
    goto LABEL_6;
  }
  return a1;
}

void sub_1ADDC4CA0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10A0C40F647C574);
  fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::~SortedMatcher(v1);
  _Unwind_Resume(a1);
}

void fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::~LabelLookAheadMatcher(_QWORD *a1)
{
  fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::~LabelLookAheadMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::LabelLookAheadMatcher(v4, a1, a2);
  return v4;
}

void sub_1ADDC4D54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C406C04B374);
  _Unwind_Resume(a1);
}

uint64_t fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::Type(uint64_t a1, uint64_t a2)
{
  return fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::Type(a1 + 32, a2);
}

uint64_t fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::Properties(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  if (*(_BYTE *)(a1 + 106))
    result = a2 | 4;
  else
    result = a2;
  if (*(_BYTE *)(a1 + 198))
    return a2 | 4;
  v4 = *(_QWORD *)(a1 + 184);
  if (v4)
  {
    if (*(_BYTE *)(v4 + 113) || *(_BYTE *)(*(_QWORD *)(v4 + 88) + 48))
      return a2 | 4;
  }
  return result;
}

uint64_t fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::Flags(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 184);
  if (!v1)
    return 0;
  if (**(_BYTE **)(v1 + 80))
    return 1776;
  return 1760;
}

uint64_t fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::SetState_(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 192) != a2)
  {
    *(_DWORD *)(result + 192) = a2;
    *(_WORD *)(result + 196) = 0;
  }
  return result;
}

BOOL fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::Done_(uint64_t a1)
{
  return fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::Done(a1 + 32);
}

uint64_t fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 104))
    return a1 + 88;
  else
    return **(_QWORD **)(a1 + 56) + 16 * *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16);
}

uint64_t fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::Next_(uint64_t result)
{
  if (*(_BYTE *)(result + 104))
    *(_BYTE *)(result + 104) = 0;
  else
    ++*(_QWORD *)(*(_QWORD *)(result + 56) + 16);
  return result;
}

float fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::Final_(uint64_t a1, int a2)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 80) + 20 * a2);
}

uint64_t fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::Priority_(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 80) + 20 * a2 + 8);
}

void fst::LabelLookAheadMatcher<fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,1760u,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>>::InitLookAheadFst(_QWORD *a1, uint64_t a2, char a3)
{
  _BOOL4 v6;

  a1[22] = a2;
  if (a1[23])
  {
    v6 = (*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 24))(a1, 0) == 1;
    fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::ReachInit<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1[23], a2, v6, a3);
  }
}

int32x2_t *fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::SortedMatcher(int32x2_t *a1, uint64_t a2, __int32 a3, __int32 a4)
{
  __int32 v7;
  fst *v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  *a1 = (int32x2_t)&unk_1E5D1BE28;
  a1[1] = (int32x2_t)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  a1[2].i32[0] = -1;
  a1[3] = 0;
  a1[4].i32[0] = a3;
  a1[4].i32[1] = a4;
  a1[5].i32[0] = -1;
  a1[6] = 0;
  *(_OWORD *)a1[7].i8 = xmmword_1AE142840;
  a1[9].i8[2] = 0;
  fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::MemoryPool(&a1[10], 1);
  v7 = a1[4].i32[0];
  if (v7 && v7 != 3)
  {
    if (v7 == 1)
    {
      a1[7] = vrev64_s32(a1[7]);
    }
    else
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v8 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
      if (v12 < 0)
        operator delete(__p[0]);
      a1[4].i32[0] = 3;
      a1[9].i8[2] = 1;
    }
  }
  return a1;
}

void sub_1ADDC505C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  quasar::Bitmap *v19;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *(_QWORD *)(v18 + 80) = &unk_1E5D196C0;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::Link>::~MemoryArena((_QWORD *)(v18 + 88));
  quasar::Bitmap::~Bitmap(v19);
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D196C0;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D196C0;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::~SortedMatcher(_QWORD *a1)
{
  fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::~SortedMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::SortedMatcher(v4, a1, a2);
  return v4;
}

void sub_1ADDC5170(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::Type(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 3)
    return 3;
  if (v2)
    v6 = 0x40000000;
  else
    v6 = 0x10000000;
  v7 = *(_QWORD *)(a1 + 8);
  if (v2)
    v8 = 3221225472;
  else
    v8 = 805306368;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v7, v8, a2);
  if ((v9 & v6) != 0)
    return *(unsigned int *)(a1 + 32);
  v10 = 0x80000000;
  if (!v2)
    v10 = 0x20000000;
  if ((v9 & v10) != 0)
    return 3;
  else
    return 4;
}

uint64_t fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 74))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72))
    return a1 + 56;
  else
    return **(_QWORD **)(a1 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
}

uint64_t fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::Next_(uint64_t result)
{
  if (*(_BYTE *)(result + 72))
    *(_BYTE *)(result + 72) = 0;
  else
    ++*(_QWORD *)(*(_QWORD *)(result + 24) + 16);
  return result;
}

float fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::Final_(uint64_t a1, int a2)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80) + 20 * a2);
}

uint64_t fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::Priority_(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80) + 20 * a2 + 8);
}

_QWORD *fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D196C0;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1ADDC5308(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::Size()
{
  return 24;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A678;
  a1[1] = 32 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1ADDC53EC(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A678;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::Link>::Size()
{
  return 32;
}

uint64_t fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::SortedMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = &unk_1E5D1BE28;
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), a3);
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  fst::MemoryPool<fst::ArcIterator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::MemoryPool((_QWORD *)(a1 + 80), 1);
  return a1;
}

void fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::SetState(uint64_t a1, int a2)
{
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *__p[2];
  char v12;
  char v13;

  if (*(_DWORD *)(a1 + 16) != a2)
  {
    *(_DWORD *)(a1 + 16) = a2;
    if (*(_DWORD *)(a1 + 32) == 3)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v4 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
      v5 = (_QWORD *)fst::cerr(v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
      if (v12 < 0)
        operator delete(__p[0]);
      *(_BYTE *)(a1 + 74) = 1;
    }
    v6 = *(_QWORD **)(a1 + 24);
    if (v6)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80) + 20 * a2;
      *v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 88) + 16 * *(unsigned int *)(v7 + 4);
      v8 = *(unsigned int *)(v7 + 8);
      v6[1] = v8;
      v6[2] = 0;
    }
    else
    {
      v9 = *(_QWORD **)(a1 + 136);
      if (v9)
      {
        *(_QWORD *)(a1 + 136) = v9[3];
      }
      else
      {
        v9 = (_QWORD *)fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Link>::Allocate((_QWORD *)(a1 + 88), 1);
        v9[3] = 0;
      }
      v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 80) + 20 * a2;
      *v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 88) + 16 * *(unsigned int *)(v10 + 4);
      v8 = *(unsigned int *)(v10 + 8);
      v9[1] = v8;
      v9[2] = 0;
      *(_QWORD *)(a1 + 24) = v9;
    }
    *(_QWORD *)(a1 + 48) = v8;
    *(_DWORD *)(a1 + 68) = a2;
  }
}

void sub_1ADDC568C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::Find(uint64_t a1, int a2)
{
  _BOOL8 result;
  int v4;
  int v5;
  int **v6;
  int *v7;
  unint64_t v8;
  int *v9;
  int *v10;
  int v11;
  BOOL v12;
  int v13;
  unint64_t v14;
  int *v15;
  unint64_t v16;
  int *v17;
  int v18;
  unint64_t v19;
  int *v20;
  _DWORD *v21;

  *(_BYTE *)(a1 + 73) = 1;
  if (*(_BYTE *)(a1 + 74))
  {
    result = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 40) = -1;
    return result;
  }
  result = a2 == 0;
  *(_BYTE *)(a1 + 72) = result;
  if (a2 == -1)
    v4 = 0;
  else
    v4 = a2;
  *(_DWORD *)(a1 + 40) = v4;
  v5 = *(_DWORD *)(a1 + 32);
  if (v4 < *(_DWORD *)(a1 + 36))
  {
    v6 = *(int ***)(a1 + 24);
    v7 = v6[1];
    if (v7)
    {
      v8 = 0;
      v9 = *v6;
      while (1)
      {
        v10 = v9 + 1;
        if (!v5)
          v10 = v9;
        v11 = *v10;
        v12 = v11 == v4;
        v13 = v11 <= v4 ? 0 : 7;
        if (v12)
          v13 = 1;
        if (v13)
          break;
        ++v8;
        v9 += 4;
        if (v7 == (int *)v8)
        {
          v8 = (unint64_t)v6[1];
          goto LABEL_34;
        }
      }
      if (v13 == 1)
      {
        v6[2] = (int *)v8;
        return 1;
      }
    }
    else
    {
      v8 = 0;
    }
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(a1 + 48);
  v6 = *(int ***)(a1 + 24);
  v8 = 0;
  if (!v14)
  {
LABEL_34:
    v6[2] = (int *)v8;
    return result;
  }
  v15 = *v6;
  while (1)
  {
    v16 = (v8 + v14) >> 1;
    v17 = &v15[4 * v16];
    if (v5)
      ++v17;
    v18 = *v17;
    if (v18 <= v4)
      break;
    v14 = (v8 + v14) >> 1;
LABEL_29:
    if (v8 >= v14)
      goto LABEL_34;
  }
  if (v18 < v4)
  {
    v8 = v16 + 1;
    goto LABEL_29;
  }
  v6[2] = (int *)v16;
  v19 = ((8 * (v14 + v8)) & 0xFFFFFFFFFFFFFFF0) - 16;
  v20 = v15;
  while (v16 > v8)
  {
    v6[2] = (int *)--v16;
    v21 = (int *)((char *)v15 + v19);
    if (v5)
      v21 = (int *)((char *)v20 + v19 + 4);
    else
      v20 = v15;
    v19 -= 16;
    if (*v21 != v4)
    {
      v6[2] = (int *)(v16 + 1);
      return 1;
    }
  }
  return 1;
}

BOOL fst::SortedMatcher<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::Done(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  _DWORD *v4;

  if (*(_BYTE *)(a1 + 72))
    return 0;
  v2 = *(_QWORD **)(a1 + 24);
  v3 = v2[2];
  if (v3 >= v2[1])
    return 1;
  if (!*(_BYTE *)(a1 + 73))
    return 0;
  v4 = (_DWORD *)(*v2 + 16 * v3);
  if (*(_DWORD *)(a1 + 32))
    ++v4;
  return *v4 != *(_DWORD *)(a1 + 40);
}

uint64_t fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::LabelReachable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = a3;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  *(_QWORD *)(a1 + 80) = a2;
  if (!a3)
  {
    v3 = operator new();
    *(_OWORD *)(v3 + 8) = xmmword_1AE182350;
    v5 = operator new();
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)v5 = 0u;
    *(_DWORD *)(v5 + 48) = 1;
    *(_QWORD *)(v3 + 32) = v5;
    *(_BYTE *)(v3 + 48) = 0;
    a2 = *(_QWORD *)(a1 + 80);
  }
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = v3;
  *(_WORD *)(a1 + 112) = 0;
  ++*(_DWORD *)(a2 + 8);
  return a1;
}

void sub_1ADDC595C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v1, 0x10A0C4057A1BE17);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

uint64_t *fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::LabelReachable(uint64_t *a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v10 = (_QWORD *)operator new();
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(v10, a2);
  *a1 = (uint64_t)v10;
  *((_DWORD *)a1 + 2) = -1;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_DWORD *)a1 + 12) = 1065353216;
  v11 = operator new();
  *(_BYTE *)v11 = a3;
  *(_BYTE *)(v11 + 1) = a5;
  *(_BYTE *)(v11 + 2) = 1;
  *(_QWORD *)(v11 + 4) = 0x1FFFFFFFFLL;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_DWORD *)(v11 + 48) = 1065353216;
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  *(_QWORD *)(v11 + 56) = 0;
  a1[10] = v11;
  if (!a4)
  {
    a4 = operator new();
    *(_OWORD *)(a4 + 8) = xmmword_1AE182350;
    v12 = operator new();
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_OWORD *)v12 = 0u;
    *(_DWORD *)(v12 + 48) = 1;
    *(_QWORD *)(a4 + 32) = v12;
    *(_BYTE *)(a4 + 48) = 0;
  }
  a1[12] = 0;
  a1[13] = 0;
  a1[11] = a4;
  *((_WORD *)a1 + 56) = 0;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 160))(*a1);
  fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::TransformFst(a1);
  fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::FindIntervals((uint64_t)a1, v13);
  if (*a1)
    (*(void (**)(uint64_t))(*(_QWORD *)*a1 + 8))(*a1);
  return a1;
}

void sub_1ADDC5B0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x10A0C4057A1BE17);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::TransformFst(uint64_t *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t i;
  uint64_t v8;
  __n128 *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  float v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t (*v34)(void);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int32 v38;
  __n128 v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void *__p;
  char *v45;
  char *v46;
  int *v47;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 160))(*a1);
  v40 = 0;
  std::vector<long>::vector(&__p, v2, &v40);
  if (v2 >= 1)
  {
    v3 = 0;
    v37 = v2;
    do
    {
      v4 = *a1;
      v40 = (uint64_t)&unk_1E5D213B0;
      v43 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck(v4);
      v5 = *(_QWORD *)(v4 + 8);
      v6 = *(_QWORD *)(*(_QWORD *)(v5 + 64) + 8 * v3);
      v41 = v6;
      v42 = v5 + 8;
      for (i = v43; ; i = ++v43)
      {
        v8 = *(_QWORD *)(v6 + 24);
        if (i >= (*(_QWORD *)(v6 + 32) - v8) >> 4)
          break;
        v39 = *(__n128 *)(v8 + 16 * i);
        v38 = 0;
        if (*(_BYTE *)a1[10])
          v9 = &v39;
        else
          v9 = (__n128 *)&v39.n128_u8[4];
        v38 = v9->n128_u32[0];
        if (v38)
        {
          if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a1 + 2, (int *)&v38))
          {
            v47 = (int *)&v38;
            *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(a1 + 2), (int *)&v38, (uint64_t)&std::piecewise_construct, &v47)+ 5) = v2;
            v10 = v45;
            if (v45 >= v46)
            {
              v12 = (char *)__p;
              v13 = (v45 - (_BYTE *)__p) >> 3;
              v14 = v13 + 1;
              if ((unint64_t)(v13 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v15 = v46 - (_BYTE *)__p;
              if ((v46 - (_BYTE *)__p) >> 2 > v14)
                v14 = v15 >> 2;
              if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
                v16 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v16 = v14;
              if (v16)
              {
                v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v46, v16);
                v12 = (char *)__p;
                v10 = v45;
              }
              else
              {
                v17 = 0;
              }
              v18 = &v17[8 * v13];
              *(_QWORD *)v18 = 0;
              v11 = v18 + 8;
              while (v10 != v12)
              {
                v19 = *((_QWORD *)v10 - 1);
                v10 -= 8;
                *((_QWORD *)v18 - 1) = v19;
                v18 -= 8;
              }
              __p = v18;
              v45 = v11;
              v46 = &v17[8 * v16];
              if (v12)
                operator delete(v12);
            }
            else
            {
              *(_QWORD *)v45 = 0;
              v11 = v10 + 8;
            }
            v45 = v11;
            ++v2;
          }
          v47 = (int *)&v38;
          v39.n128_u32[3] = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(a1 + 2), (int *)&v38, (uint64_t)&std::piecewise_construct, &v47)+ 5);
          fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetValue((uint64_t)&v40, &v39);
          v6 = v41;
        }
        ++*((_QWORD *)__p + v39.n128_i32[3]);
      }
      v20 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 32))(*a1, v3);
      *(float *)&v40 = v20;
      v39.n128_u32[0] = 2139095040;
      if (v20 != INFINITY)
      {
        if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(a1 + 2, &fst::kNoLabel))
        {
          v40 = (uint64_t)&fst::kNoLabel;
          *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(a1 + 2), &fst::kNoLabel, (uint64_t)&std::piecewise_construct, (_DWORD **)&v40)+ 5) = v2;
          v21 = v45;
          if (v45 >= v46)
          {
            v23 = (char *)__p;
            v24 = (v45 - (_BYTE *)__p) >> 3;
            v25 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v26 = v46 - (_BYTE *)__p;
            if ((v46 - (_BYTE *)__p) >> 2 > v25)
              v25 = v26 >> 2;
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
              v27 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v27 = v25;
            if (v27)
            {
              v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v46, v27);
              v23 = (char *)__p;
              v21 = v45;
            }
            else
            {
              v28 = 0;
            }
            v29 = &v28[8 * v24];
            *(_QWORD *)v29 = 0;
            v22 = v29 + 8;
            while (v21 != v23)
            {
              v30 = *((_QWORD *)v21 - 1);
              v21 -= 8;
              *((_QWORD *)v29 - 1) = v30;
              v29 -= 8;
            }
            __p = v29;
            v45 = v22;
            v46 = &v28[8 * v27];
            if (v23)
              operator delete(v23);
          }
          else
          {
            *(_QWORD *)v45 = 0;
            v22 = v21 + 8;
          }
          v45 = v22;
          ++v2;
        }
        v39.n128_u64[0] = (unint64_t)&fst::kNoLabel;
        v31 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(a1 + 2), &fst::kNoLabel, (uint64_t)&std::piecewise_construct, &v39)+ 5);
        v40 = -1;
        v41 = __PAIR64__(v31, LODWORD(v20));
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)*a1 + 208))(*a1, v3, &v40);
        ++*((_QWORD *)__p + SHIDWORD(v41));
        (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)*a1 + 184))(*a1, v3, INFINITY);
      }
      ++v3;
    }
    while (v3 != v37);
  }
  while (1)
  {
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 160))(*a1);
    v34 = *(uint64_t (**)(void))(*(_QWORD *)*a1 + 200);
    if (v33 >= v2)
      break;
    v32 = v34();
    (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)*a1 + 184))(*a1, v32, 0.0);
  }
  v35 = v34();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 176))(*a1, v35);
  if ((int)v35 >= 1)
  {
    v36 = 0;
    do
    {
      if (!*((_QWORD *)__p + v36))
      {
        v40 = 0;
        LODWORD(v41) = 0;
        HIDWORD(v41) = v36;
        (*(void (**)(uint64_t, _QWORD, uint64_t *))(*(_QWORD *)*a1 + 208))(*a1, v35, &v40);
      }
      ++v36;
    }
    while (v35 != v36);
  }
  if (__p)
  {
    v45 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1ADDC6028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::LabelReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::FastLogAccumulator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::LabelReachableData<int>>::FindIntervals(uint64_t a1, int a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  fst *v16;
  _QWORD *v17;
  _QWORD *v18;
  fst *v19;
  _QWORD *v20;
  fst *v21;
  _QWORD *v22;
  fst *v23;
  _QWORD *v24;
  fst *v25;
  _QWORD *v26;
  void *__p[2];
  char v28;
  int v29;
  _BYTE v30[8];
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  char v35;

  fst::StateReachable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>::StateReachable((uint64_t)v30, *(_QWORD *)a1);
  if (v35)
  {
    *(_BYTE *)(a1 + 113) = 1;
  }
  else
  {
    v4 = (uint64_t *)(*(_QWORD *)(a1 + 80) + 56);
    if (v4 != &v31)
      std::vector<fst::IntervalSet<int>>::__assign_with_size[abi:ne180100]<fst::IntervalSet<int>*,fst::IntervalSet<int>*>((uint64_t *)(*(_QWORD *)(a1 + 80) + 56), v31, v32, (v32 - v31) >> 5);
    v5 = a2;
    std::vector<fst::IntervalSet<int>>::resize(v4, a2);
    v6 = fst::LabelReachableData<int>::Label2Index(*(_QWORD *)(a1 + 80));
    v7 = *(uint64_t **)(a1 + 32);
    if (v7)
    {
      v8 = v6;
      do
      {
        v9 = *((int *)v7 + 5);
        v29 = *((_DWORD *)v7 + 4);
        v10 = *((_DWORD *)v33 + v9);
        __p[0] = &v29;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(v8, &v29, (uint64_t)&std::piecewise_construct, (_DWORD **)__p)+ 5) = v10;
        v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((_QWORD *)(a1 + 16));
    if (a2 >= 1)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0.0;
      do
      {
        v15 = (*(_QWORD *)(*v4 + v11 + 8) - *(_QWORD *)(*v4 + v11)) >> 3;
        if ((int)v15 >= 2)
        {
          ++v13;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v16 = fst::LogMessage::LogMessage((fst *)&v29, (uint64_t)__p);
            v17 = (_QWORD *)fst::cerr(v16);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"state: ", 7);
            v18 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" # of intervals: ", 17);
            std::ostream::operator<<();
            fst::LogMessage::~LogMessage((fst::LogMessage *)&v29);
            if (v28 < 0)
              operator delete(__p[0]);
          }
        }
        v14 = v14 + (double)(int)v15;
        ++v12;
        v11 += 32;
      }
      while (v5 != v12);
    }
    if (FLAGS_v > 1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v19 = fst::LogMessage::LogMessage((fst *)&v29, (uint64_t)__p);
      v20 = (_QWORD *)fst::cerr(v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"# of states: ", 13);
      std::ostream::operator<<();
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v29);
      if (v28 < 0)
        operator delete(__p[0]);
      if (FLAGS_v >= 2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v21 = fst::LogMessage::LogMessage((fst *)&v29, (uint64_t)__p);
        v22 = (_QWORD *)fst::cerr(v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"# of intervals: ", 16);
        std::ostream::operator<<();
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v29);
        if (v28 < 0)
          operator delete(__p[0]);
        if (FLAGS_v >= 2)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
          v23 = fst::LogMessage::LogMessage((fst *)&v29, (uint64_t)__p);
          v24 = (_QWORD *)fst::cerr(v23);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"# of intervals/state: ", 22);
          std::ostream::operator<<();
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v29);
          if (v28 < 0)
            operator delete(__p[0]);
          if (FLAGS_v >= 2)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v25 = fst::LogMessage::LogMessage((fst *)&v29, (uint64_t)__p);
            v26 = (_QWORD *)fst::cerr(v25);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"# of non-interval states: ", 26);
            std::ostream::operator<<();
            fst::LogMessage::~LogMessage((fst::LogMessage *)&v29);
            if (v28 < 0)
              operator delete(__p[0]);
          }
        }
      }
    }
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  __p[0] = &v31;
  std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

