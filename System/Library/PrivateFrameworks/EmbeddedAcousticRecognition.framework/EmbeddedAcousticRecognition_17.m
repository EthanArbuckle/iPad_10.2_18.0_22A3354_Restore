_QWORD *`non-virtual thunk to'quasar::AmbiguityAnnotatorBlock::inputs@<X0>(quasar::AmbiguityAnnotatorBlock *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = operator new(0x10uLL);
  a2[1] = result + 2;
  a2[2] = result + 2;
  *result = (char *)this + 8;
  result[1] = (char *)this + 64;
  *a2 = result;
  return result;
}

void `non-virtual thunk to'quasar::AmbiguityAnnotatorBlock::~AmbiguityAnnotatorBlock(quasar::AmbiguityAnnotatorBlock *this)
{
  _QWORD *v2;
  char **v3;
  void **v4;

  v2 = (_QWORD *)((char *)this - 2568);
  *((_QWORD *)this - 321) = off_1E5D39168;
  *((_QWORD *)this + 17) = off_1E5D39268;
  v3 = (char **)((char *)this + 136);
  *(_QWORD *)this = &off_1E5D391C8;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 120);
  v4 = (void **)((char *)this + 96);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 87) < 0)
    operator delete(*((void **)this + 8));
  v4 = (void **)((char *)this + 40);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  *v2 = off_1E5D05268;
  *((_QWORD *)this + 17) = &unk_1E5D052F0;
  quasar::AmbiguityAnnotatorOptions::~AmbiguityAnnotatorOptions((quasar::AmbiguityAnnotatorBlock *)((char *)this - 2560));
  quasar::ProcessingBlock::~ProcessingBlock(v3);
}

{
  quasar::AmbiguityAnnotatorBlock::~AmbiguityAnnotatorBlock((quasar::AmbiguityAnnotatorBlock *)((char *)this - 2568));
}

void `virtual thunk to'quasar::AmbiguityAnnotatorBlock::~AmbiguityAnnotatorBlock(quasar::AmbiguityAnnotatorBlock *this)
{
  char *v1;
  void **v2;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_1E5D39168;
  *((_QWORD *)v1 + 338) = off_1E5D39268;
  *((_QWORD *)v1 + 321) = &off_1E5D391C8;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 2688));
  v2 = (void **)(v1 + 2664);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (v1[2655] < 0)
    operator delete(*((void **)v1 + 329));
  v2 = (void **)(v1 + 2608);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (v1[2599] < 0)
    operator delete(*((void **)v1 + 322));
  *(_QWORD *)v1 = off_1E5D05268;
  *((_QWORD *)v1 + 338) = &unk_1E5D052F0;
  quasar::AmbiguityAnnotatorOptions::~AmbiguityAnnotatorOptions((quasar::AmbiguityAnnotatorOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 338);
}

{
  quasar::AmbiguityAnnotatorBlock::~AmbiguityAnnotatorBlock((quasar::AmbiguityAnnotatorBlock *)((char *)this
                                                                                              + *(_QWORD *)(*(_QWORD *)this - 24)));
}

const char *`virtual thunk to'quasar::AmbiguityAnnotatorBlock::blockType(quasar::AmbiguityAnnotatorBlock *this)
{
  return "AmbiguityAnnotatorBlock";
}

uint64_t std::map<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,std::allocator<std::pair<quasar::AmbiguityAnnotatorBlock::MatchSpan const,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::at(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::__map_value_compare<quasar::AmbiguityAnnotatorBlock::MatchSpan,std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,false>,std::allocator<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::__find_equal<quasar::AmbiguityAnnotatorBlock::MatchSpan>(a1, &v4, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return v2 + 40;
}

_QWORD *std::__tree<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::__map_value_compare<quasar::AmbiguityAnnotatorBlock::MatchSpan,std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,false>,std::allocator<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::__find_equal<quasar::AmbiguityAnnotatorBlock::MatchSpan>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;

  v4 = (_QWORD *)(a1 + 8);
  v5 = *(_QWORD **)(a1 + 8);
  if (v5)
  {
    v7 = *(_QWORD *)(a1 + 48);
    if (!v7)
LABEL_10:
      std::__throw_bad_function_call[abi:ne180100]();
    while (1)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v7 + 48))(v7, a3, v5 + 4))
      {
        v9 = (_QWORD *)*v5;
        v4 = v5;
        if (!*v5)
          goto LABEL_12;
      }
      else
      {
        v10 = *(_QWORD *)(a1 + 48);
        if (!v10)
          goto LABEL_10;
        if (!(*(unsigned int (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v10 + 48))(v10, v5 + 4, a3))
          goto LABEL_12;
        v4 = v5 + 1;
        v9 = (_QWORD *)v5[1];
        if (!v9)
          goto LABEL_12;
      }
      v7 = *(_QWORD *)(a1 + 48);
      v5 = v9;
      if (!v7)
        goto LABEL_10;
    }
  }
  v5 = (_QWORD *)(a1 + 8);
LABEL_12:
  *a2 = v5;
  return v4;
}

uint64_t std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__push_back_slow_path<quasar::AmbiguityAnnotatorBlock::SenseMatch const&>(uint64_t *a1, const quasar::AmbiguityAnnotatorBlock::SenseMatch *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  quasar::AmbiguityAnnotatorBlock::SenseMatch *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAF8AF8AF8AF8AF8BLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xEA0EA0EA0EA0EALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAF8AF8AF8AF8AF8BLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x75075075075075)
    v9 = 0xEA0EA0EA0EA0EALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::AmbiguityAnnotatorBlock::SenseMatch>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (quasar::AmbiguityAnnotatorBlock::SenseMatch *)&v10[280 * v4];
  v16 = &v10[280 * v9];
  quasar::AmbiguityAnnotatorBlock::SenseMatch::SenseMatch(v14, a2);
  v15 = (char *)v14 + 280;
  std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::AmbiguityAnnotatorBlock::SenseMatch>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1ADF20DE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::AmbiguityAnnotatorBlock::SenseMatch>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

quasar::AmbiguityAnnotatorBlock::SenseMatch *quasar::AmbiguityAnnotatorBlock::SenseMatch::SenseMatch(quasar::AmbiguityAnnotatorBlock::SenseMatch *this, const quasar::AmbiguityAnnotatorBlock::SenseMatch *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this, *(__int128 **)a2, *((__int128 **)a2 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3));
  v4 = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = v4;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 32), *((__int128 **)a2 + 4), *((__int128 **)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3));
  v5 = *((_QWORD *)a2 + 7);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 7) = v5;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 64), *((__int128 **)a2 + 8), *((__int128 **)a2 + 9), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 3));
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 88);
    *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
    *(_OWORD *)((char *)this + 88) = v6;
  }
  if (*((char *)a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 112), *((const std::string::value_type **)a2 + 14), *((_QWORD *)a2 + 15));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 7);
    *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
    *((_OWORD *)this + 7) = v7;
  }
  if (*((char *)a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 136), *((const std::string::value_type **)a2 + 17), *((_QWORD *)a2 + 18));
  }
  else
  {
    v8 = *(_OWORD *)((char *)a2 + 136);
    *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
    *(_OWORD *)((char *)this + 136) = v8;
  }
  if (*((char *)a2 + 183) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 160), *((const std::string::value_type **)a2 + 20), *((_QWORD *)a2 + 21));
  }
  else
  {
    v9 = *((_OWORD *)a2 + 10);
    *((_QWORD *)this + 22) = *((_QWORD *)a2 + 22);
    *((_OWORD *)this + 10) = v9;
  }
  if (*((char *)a2 + 207) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 184), *((const std::string::value_type **)a2 + 23), *((_QWORD *)a2 + 24));
  }
  else
  {
    v10 = *(_OWORD *)((char *)a2 + 184);
    *((_QWORD *)this + 25) = *((_QWORD *)a2 + 25);
    *(_OWORD *)((char *)this + 184) = v10;
  }
  if (*((char *)a2 + 231) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 208), *((const std::string::value_type **)a2 + 26), *((_QWORD *)a2 + 27));
  }
  else
  {
    v11 = *((_OWORD *)a2 + 13);
    *((_QWORD *)this + 28) = *((_QWORD *)a2 + 28);
    *((_OWORD *)this + 13) = v11;
  }
  if (*((char *)a2 + 255) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 232), *((const std::string::value_type **)a2 + 29), *((_QWORD *)a2 + 30));
  }
  else
  {
    v12 = *(_OWORD *)((char *)a2 + 232);
    *((_QWORD *)this + 31) = *((_QWORD *)a2 + 31);
    *(_OWORD *)((char *)this + 232) = v12;
  }
  v13 = (std::string *)((char *)this + 256);
  if (*((char *)a2 + 279) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *((const std::string::value_type **)a2 + 32), *((_QWORD *)a2 + 33));
  }
  else
  {
    v14 = *((_OWORD *)a2 + 16);
    *((_QWORD *)this + 34) = *((_QWORD *)a2 + 34);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
  }
  return this;
}

void sub_1ADF21048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;

  if (*(char *)(v10 + 255) < 0)
    operator delete(*v11);
  if (*(char *)(v10 + 231) < 0)
    operator delete(*v16);
  if (*(char *)(v10 + 207) < 0)
    operator delete(*v15);
  if (*(char *)(v10 + 183) < 0)
    operator delete(*v14);
  if (*(char *)(v10 + 159) < 0)
    operator delete(*v13);
  if (*(char *)(v10 + 135) < 0)
    operator delete(*v12);
  if (*(char *)(v10 + 111) < 0)
    operator delete(*a9);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void sub_1ADF2112C()
{
  JUMPOUT(0x1ADF21118);
}

void std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  if (v4 != *a1)
  {
    do
    {
      v6 -= 280;
      v4 -= 280;
      std::allocator<quasar::AmbiguityAnnotatorBlock::SenseMatch>::construct[abi:ne180100]<quasar::AmbiguityAnnotatorBlock::SenseMatch,quasar::AmbiguityAnnotatorBlock::SenseMatch>((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::AmbiguityAnnotatorBlock::SenseMatch>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xEA0EA0EA0EA0EBLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(280 * a2);
}

__n128 std::allocator<quasar::AmbiguityAnnotatorBlock::SenseMatch>::construct[abi:ne180100]<quasar::AmbiguityAnnotatorBlock::SenseMatch,quasar::AmbiguityAnnotatorBlock::SenseMatch>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v3 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v4 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 56) = v4;
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  v5 = *(_OWORD *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(_OWORD *)(a2 + 88) = v5;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  v6 = *(_OWORD *)(a3 + 112);
  *(_QWORD *)(a2 + 128) = *(_QWORD *)(a3 + 128);
  *(_OWORD *)(a2 + 112) = v6;
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  v7 = *(_OWORD *)(a3 + 136);
  *(_QWORD *)(a2 + 152) = *(_QWORD *)(a3 + 152);
  *(_OWORD *)(a2 + 136) = v7;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  v8 = *(_OWORD *)(a3 + 160);
  *(_QWORD *)(a2 + 176) = *(_QWORD *)(a3 + 176);
  *(_OWORD *)(a2 + 160) = v8;
  *(_QWORD *)(a3 + 160) = 0;
  *(_QWORD *)(a3 + 168) = 0;
  *(_QWORD *)(a3 + 176) = 0;
  v9 = *(_OWORD *)(a3 + 184);
  *(_QWORD *)(a2 + 200) = *(_QWORD *)(a3 + 200);
  *(_OWORD *)(a2 + 184) = v9;
  *(_QWORD *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 192) = 0;
  *(_QWORD *)(a3 + 200) = 0;
  v10 = *(_OWORD *)(a3 + 208);
  *(_QWORD *)(a2 + 224) = *(_QWORD *)(a3 + 224);
  *(_OWORD *)(a2 + 208) = v10;
  *(_QWORD *)(a3 + 208) = 0;
  *(_QWORD *)(a3 + 216) = 0;
  *(_QWORD *)(a3 + 224) = 0;
  v11 = *(_OWORD *)(a3 + 232);
  *(_QWORD *)(a2 + 248) = *(_QWORD *)(a3 + 248);
  *(_OWORD *)(a2 + 232) = v11;
  *(_QWORD *)(a3 + 232) = 0;
  *(_QWORD *)(a3 + 240) = 0;
  *(_QWORD *)(a3 + 248) = 0;
  result = *(__n128 *)(a3 + 256);
  *(_QWORD *)(a2 + 272) = *(_QWORD *)(a3 + 272);
  *(__n128 *)(a2 + 256) = result;
  *(_QWORD *)(a3 + 256) = 0;
  *(_QWORD *)(a3 + 264) = 0;
  *(_QWORD *)(a3 + 272) = 0;
  return result;
}

void quasar::AmbiguityAnnotatorBlock::SenseMatch::~SenseMatch(void **this)
{
  void **v2;

  if (*((char *)this + 279) < 0)
    operator delete(this[32]);
  if (*((char *)this + 255) < 0)
    operator delete(this[29]);
  if (*((char *)this + 231) < 0)
    operator delete(this[26]);
  if (*((char *)this + 207) < 0)
    operator delete(this[23]);
  if (*((char *)this + 183) < 0)
    operator delete(this[20]);
  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  v2 = this + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t std::__split_buffer<quasar::AmbiguityAnnotatorBlock::SenseMatch>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 280;
    quasar::AmbiguityAnnotatorBlock::SenseMatch::~SenseMatch((void **)(i - 280));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t **quasar::AmbiguityAnnotatorBlock::Senses::Senses(uint64_t **a1, _QWORD *a2, void (****a3)(std::pair<std::string, std::string> **__return_ptr), int *a4, int a5, int a6)
{
  uint64_t (**v7)();
  uint64_t (**v8)();
  void **v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int64_t v13;
  void **v14;
  uint64_t v15;
  void (***v16)(std::pair<std::string, std::string> **__return_ptr);
  std::vector<std::pair<std::string, std::string>>::pointer begin;
  std::vector<std::pair<std::string, std::string>>::pointer end;
  __int128 v19;
  __int128 v20;
  __int128 *v21;
  uint64_t *v22;
  void *v24;
  void *v25;
  char *v26;
  char *v27;
  void *v28;
  void *v29;
  void *v30;
  std::string *v31;
  std::string::size_type size;
  _QWORD *v33;
  std::string *v34;
  std::string::size_type v35;
  _QWORD *v36;
  std::string::size_type v38;
  std::string::size_type v39;
  std::string::size_type v40;
  void *v44[2];
  char v45;
  std::string v46;
  int v47;
  int v48;
  void *v49[2];
  char v50;
  std::string v51;
  std::string __str;
  std::string v53;
  std::string *v54;
  __int128 *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  std::vector<std::pair<std::string, std::string>> v59;
  _DWORD v60[2];
  std::string v61;
  void *v62;
  char v63;
  uint64_t v64;
  void *__p[2];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v7 = &off_1E5D3E068;
  if (a6)
    v7 = &off_1E5D3E010;
  v8 = &off_1E5D3E118;
  if (a6)
    v8 = &off_1E5D3E0C0;
  if (!a5)
    v7 = v8;
  __p[0] = v7;
  *((_QWORD *)&v66 + 1) = __p;
  std::map<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,std::allocator<std::pair<quasar::AmbiguityAnnotatorBlock::MatchSpan const,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::map[abi:ne180100](a1, (uint64_t)__p);
  v9 = (void **)*((_QWORD *)&v66 + 1);
  if (*((void ***)&v66 + 1) == __p)
  {
    v10 = 4;
    v9 = __p;
    goto LABEL_11;
  }
  if (*((_QWORD *)&v66 + 1))
  {
    v10 = 5;
LABEL_11:
    (*((void (**)(void))*v9 + v10))();
  }
  if (a2[1] == *a2)
    goto LABEL_69;
  v11 = 0;
  v39 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v40 = *MEMORY[0x1E0DE4F60];
  v38 = MEMORY[0x1E0DE4FB8] + 16;
  do
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v61);
    v12 = *a4;
    if (*a4 < 1)
      goto LABEL_66;
    v13 = 1;
    do
    {
      v60[0] = v11;
      v60[1] = v13;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) < (v13 + v11))
        continue;
      std::operator+<char>();
      if ((SBYTE7(v66) & 0x80u) == 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      if ((SBYTE7(v66) & 0x80u) == 0)
        v15 = BYTE7(v66);
      else
        v15 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v61, (uint64_t)v14, v15);
      if (SBYTE7(v66) < 0)
        operator delete(__p[0]);
      v16 = *a3;
      std::stringbuf::str();
      quasar::GenericPhraseBook::lookup(v16, 0, -1, &v59);
      if (SBYTE7(v66) < 0)
        operator delete(__p[0]);
      begin = v59.__begin_;
      end = v59.__end_;
      while (begin != end)
      {
        quasar::PTree::PTree((quasar::PTree *)&v57);
        v54 = 0;
        v55 = 0;
        v56 = 0;
        if (SHIBYTE(begin->first.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, begin->first.__r_.__value_.__l.__data_, begin->first.__r_.__value_.__l.__size_);
        }
        else
        {
          v19 = *(_OWORD *)&begin->first.__r_.__value_.__l.__data_;
          *(_QWORD *)&v66 = *((_QWORD *)&begin->first.__r_.__value_.__l + 2);
          *(_OWORD *)__p = v19;
        }
        kaldi::SplitStringToVector((const std::string *)__p, " ", 1, (uint64_t)&v54);
        if (SBYTE7(v66) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(begin->second.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v53, begin->second.__r_.__value_.__l.__data_, begin->second.__r_.__value_.__l.__size_);
        }
        else
        {
          v20 = *(_OWORD *)&begin->second.__r_.__value_.__l.__data_;
          v53.__r_.__value_.__r.__words[2] = begin->second.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v20;
        }
        quasar::json2Ptree((uint64_t)&v53, (uint64_t)&v57);
        std::string::basic_string[abi:ne180100]<0>(v49, "syn");
        quasar::PTree::getStringOptional((uint64_t)&v57, (uint64_t)v49, (std::string *)__p);
        if (BYTE8(v66))
        {
          *(_OWORD *)&v51.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
          v51.__r_.__value_.__r.__words[2] = v66;
          *(_QWORD *)&v66 = 0;
          __p[0] = 0;
          __p[1] = 0;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v51, "");
        }
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v51.__r_.__value_.__l.__size_)
          {
LABEL_42:
            std::string::basic_string[abi:ne180100]<0>(v44, "syn");
            quasar::PTree::getStringOptional((uint64_t)&v57, (uint64_t)v44, &v46);
            if ((_BYTE)v47)
              goto LABEL_46;
            goto LABEL_47;
          }
        }
        else if (*((_BYTE *)&v51.__r_.__value_.__s + 23))
        {
          goto LABEL_42;
        }
        std::string::basic_string[abi:ne180100]<0>(v44, "lexid");
        quasar::PTree::getStringOptional((uint64_t)&v57, (uint64_t)v44, &v46);
        if ((_BYTE)v47)
        {
LABEL_46:
          __str = v46;
          memset(&v46, 0, sizeof(v46));
          goto LABEL_50;
        }
LABEL_47:
        std::string::basic_string[abi:ne180100]<0>(&__str, "");
        if ((_BYTE)v47 && SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v46.__r_.__value_.__l.__data_);
LABEL_50:
        if (v45 < 0)
          operator delete(v44[0]);
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
        if (BYTE8(v66) && SBYTE7(v66) < 0)
          operator delete(__p[0]);
        if (v50 < 0)
          operator delete(v49[0]);
        v21 = (__int128 *)(*a2 + 24 * v11);
        memset(&v51, 0, sizeof(v51));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v51, v21, (__int128 *)((char *)v21 + 24 * v13), v13);
        memset(&v46, 0, sizeof(v46));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v46, (__int128 *)v51.__r_.__value_.__l.__data_, (__int128 *)v51.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51.__r_.__value_.__l.__size_ - v51.__r_.__value_.__r.__words[0]) >> 3));
        v47 = v11;
        v48 = v13;
        quasar::AmbiguityAnnotatorBlock::SenseMatch::SenseMatch((quasar::AmbiguityAnnotatorBlock::SenseMatch *)__p, (__int128 **)&v46, (const quasar::PTree *)&v57);
        v49[0] = &v46;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v49);
        v49[0] = &v51;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v49);
        std::string::operator=((std::string *)((char *)&v70 + 8), &__str);
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)&v69, v54, v55, 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (char *)v54) >> 3));
        v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
        v22 = std::__tree<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::__map_value_compare<quasar::AmbiguityAnnotatorBlock::MatchSpan,std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,false>,std::allocator<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::__emplace_unique_key_args<quasar::AmbiguityAnnotatorBlock::MatchSpan,std::piecewise_construct_t const&,std::tuple<quasar::AmbiguityAnnotatorBlock::MatchSpan const&>,std::tuple<>>(a1, (uint64_t)v60, (uint64_t)&std::piecewise_construct, (uint64_t **)&v46);
        quasar::AmbiguityAnnotatorBlock::SenseMatches::add((quasar::AmbiguityAnnotatorBlock::SenseMatches *)(v22 + 5), (const quasar::AmbiguityAnnotatorBlock::SenseMatch *)__p);
        quasar::AmbiguityAnnotatorBlock::SenseMatch::~SenseMatch(__p);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53.__r_.__value_.__l.__data_);
        __p[0] = &v54;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        quasar::PTree::~PTree((quasar::PTree *)&v57);
        ++begin;
      }
      __p[0] = &v59;
      std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      v12 = *a4;
    }
    while (v13++ < v12);
LABEL_66:
    v61.__r_.__value_.__r.__words[0] = v40;
    *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + *(_QWORD *)(v40 - 24)) = v39;
    v61.__r_.__value_.__l.__size_ = v38;
    if (v63 < 0)
      operator delete(v62);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1AF44D094](&v64);
    ++v11;
  }
  while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) > v11);
LABEL_69:
  if (quasar::gLogLevel > 4)
  {
    quasar::AmbiguityAnnotatorBlock::Senses::keys((quasar::AmbiguityAnnotatorBlock::Senses **)a1, (char **)__p);
    v24 = __p[1];
    v25 = __p[0];
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v24 == v25)
    {
      if (quasar::gLogLevel >= 5)
      {
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        v66 = 0u;
        v67 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"no source spans are ambiguous", 29);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
    }
    else
    {
      memset(&v61, 0, sizeof(v61));
      quasar::AmbiguityAnnotatorBlock::Senses::keys((quasar::AmbiguityAnnotatorBlock::Senses **)a1, &v57);
      v26 = v57;
      v27 = v58;
      if (v57 != v58)
      {
        v28 = (void *)*MEMORY[0x1E0DE4F60];
        v29 = *(void **)(MEMORY[0x1E0DE4F60] + 24);
        v30 = (void *)(MEMORY[0x1E0DE4FB8] + 16);
        do
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
          quasar::operator<<(__p);
          std::stringbuf::str();
          if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v31 = &v46;
          else
            v31 = (std::string *)v46.__r_.__value_.__r.__words[0];
          if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
          else
            size = v46.__r_.__value_.__l.__size_;
          std::string::append(&v61, (const std::string::value_type *)v31, size);
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v46.__r_.__value_.__l.__data_);
          __p[0] = v28;
          *(void **)((char *)__p + *((_QWORD *)v28 - 3)) = v29;
          __p[1] = v30;
          if (SHIBYTE(v70) < 0)
            operator delete(*((void **)&v69 + 1));
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x1AF44D094](&v72);
          v26 += 8;
        }
        while (v26 != v27);
        v26 = v57;
      }
      if (v26)
      {
        v58 = v26;
        operator delete(v26);
      }
      if (quasar::gLogLevel > 4)
      {
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        v66 = 0u;
        v67 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"these source spans: ", 20);
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v34 = &v61;
        else
          v34 = (std::string *)v61.__r_.__value_.__r.__words[0];
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v35 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
        else
          v35 = v61.__r_.__value_.__l.__size_;
        v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" are ambiguous", 14);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
    }
  }
  return a1;
}

void sub_1ADF21C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&STACK[0x270]);
  std::__tree<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::__map_value_compare<quasar::AmbiguityAnnotatorBlock::MatchSpan,std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,false>,std::allocator<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::~__tree(a16);
  _Unwind_Resume(a1);
}

_QWORD *std::map<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,std::allocator<std::pair<quasar::AmbiguityAnnotatorBlock::MatchSpan const,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::map[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v10, a2);
  if (!v11)
  {
    v13 = 0;
    a1[1] = 0;
    a1[2] = 0;
    v4 = a1 + 1;
LABEL_9:
    a1[6] = 0;
    *a1 = v4;
    goto LABEL_16;
  }
  if (v11 == v10)
  {
    v13 = v12;
    (*(void (**)(_QWORD *, _QWORD *))(v10[0] + 24))(v10, v12);
    v3 = v13;
  }
  else
  {
    v3 = (_QWORD *)(*(uint64_t (**)(void))(*v11 + 16))();
    v13 = v3;
  }
  a1[1] = 0;
  a1[2] = 0;
  v4 = a1 + 1;
  if (!v3)
    goto LABEL_9;
  if (v3 == v12)
  {
    a1[6] = a1 + 3;
    (*(void (**)(_QWORD *))(v12[0] + 24))(v12);
  }
  else
  {
    a1[6] = (*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
  }
  v5 = v13;
  *a1 = v4;
  if (v5 == v12)
  {
    v6 = 4;
    v5 = v12;
  }
  else
  {
    if (!v5)
      goto LABEL_16;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_16:
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
    goto LABEL_20;
  }
  if (v11)
  {
    v8 = 5;
LABEL_20:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void sub_1ADF22078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v18 = a17;
  if (a17 == &a14)
  {
    v19 = 4;
    v18 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  v20 = a13;
  if (a13 == &a10)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

quasar::AmbiguityAnnotatorBlock::SenseMatch *quasar::AmbiguityAnnotatorBlock::SenseMatch::SenseMatch(quasar::AmbiguityAnnotatorBlock::SenseMatch *this, __int128 **a2, const quasar::PTree *a3)
{
  __int128 *v6;
  _QWORD *v7;
  void *v9[2];
  char v10;
  std::string __p;
  char v12;
  void *v13[2];
  char v14;
  std::string v15;
  char v16;
  std::string v17;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v6 = a2[3];
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = v6;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = -1;
  *(_QWORD *)((char *)this + 60) = 0;
  *(_QWORD *)((char *)this + 76) = 0;
  *(_QWORD *)((char *)this + 68) = 0;
  *((_DWORD *)this + 21) = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "syn");
  quasar::PTree::getStringOptional((uint64_t)a3, (uint64_t)v13, &v15);
  if (v16)
  {
    v17 = v15;
    memset(&v15, 0, sizeof(v15));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, "");
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v17.__r_.__value_.__l.__size_)
    {
LABEL_6:
      std::string::basic_string[abi:ne180100]<0>(v9, "syn");
      quasar::PTree::getStringOptional((uint64_t)a3, (uint64_t)v9, &__p);
      if (!v12)
        goto LABEL_11;
LABEL_10:
      *(std::string *)((char *)this + 88) = __p;
      memset(&__p, 0, sizeof(__p));
      goto LABEL_14;
    }
  }
  else if (*((_BYTE *)&v17.__r_.__value_.__s + 23))
  {
    goto LABEL_6;
  }
  std::string::basic_string[abi:ne180100]<0>(v9, "lexid");
  quasar::PTree::getStringOptional((uint64_t)a3, (uint64_t)v9, &__p);
  if (v12)
    goto LABEL_10;
LABEL_11:
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 11, "");
  if (v12 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_14:
  if (v10 < 0)
    operator delete(v9[0]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (v16 && SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "def");
  quasar::PTree::getStringOptional((uint64_t)a3, (uint64_t)v13, &v15);
  if (v16)
  {
    v17 = v15;
    memset(&v15, 0, sizeof(v15));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v17, "");
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v17.__r_.__value_.__l.__size_)
    {
LABEL_28:
      std::string::basic_string[abi:ne180100]<0>(v9, "def");
      quasar::PTree::getStringOptional((uint64_t)a3, (uint64_t)v9, &__p);
      if (!v12)
        goto LABEL_33;
LABEL_32:
      *(std::string *)((char *)this + 112) = __p;
      memset(&__p, 0, sizeof(__p));
      goto LABEL_36;
    }
  }
  else if (*((_BYTE *)&v17.__r_.__value_.__s + 23))
  {
    goto LABEL_28;
  }
  std::string::basic_string[abi:ne180100]<0>(v9, "ind");
  quasar::PTree::getStringOptional((uint64_t)a3, (uint64_t)v9, &__p);
  if (v12)
    goto LABEL_32;
LABEL_33:
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 14, "");
  if (v12 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_36:
  if (v10 < 0)
    operator delete(v9[0]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (v16 && SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (v14 < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(&__p, "defLocale");
  quasar::PTree::getStringOptional((uint64_t)a3, (uint64_t)&__p, &v15);
  if (v16)
  {
    *(std::string *)((char *)this + 136) = v15;
    memset(&v15, 0, sizeof(v15));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 17, "");
    if (v16 && SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "att");
  quasar::PTree::getStringOptional((uint64_t)a3, (uint64_t)&__p, &v15);
  if (v16)
  {
    *(std::string *)((char *)this + 160) = v15;
    memset(&v15, 0, sizeof(v15));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 20, "");
    if (v16 && SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "formality");
  quasar::PTree::getStringOptional((uint64_t)a3, (uint64_t)&__p, &v15);
  if (v16)
  {
    *(std::string *)((char *)this + 184) = v15;
    memset(&v15, 0, sizeof(v15));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 23, "");
    if (v16 && SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "gender");
  quasar::PTree::getStringOptional((uint64_t)a3, (uint64_t)&__p, &v15);
  if (v16)
  {
    *(std::string *)((char *)this + 208) = v15;
    memset(&v15, 0, sizeof(v15));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 26, "");
    if (v16 && SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "reg");
  quasar::PTree::getStringOptional((uint64_t)a3, (uint64_t)&__p, &v15);
  if (v16)
  {
    *(std::string *)((char *)this + 232) = v15;
    memset(&v15, 0, sizeof(v15));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 29, "");
    if (v16 && SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "explicit");
  quasar::PTree::getStringOptional((uint64_t)a3, (uint64_t)&__p, &v15);
  v7 = (_QWORD *)((char *)this + 256);
  if (v16)
  {
    *(_OWORD *)v7 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 34) = *((_QWORD *)&v15.__r_.__value_.__l + 2);
    memset(&v15, 0, sizeof(v15));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "");
    if (v16 && SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return this;
}

void sub_1ADF2274C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  char *v40;
  void **v41;

  if (a21 && a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a40 < 0)
    operator delete(a35);
  if (a34 && a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  if (v40[111] < 0)
    operator delete(*v41);
  a28 = v40 + 64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  _Unwind_Resume(a1);
}

void sub_1ADF22A60()
{
  JUMPOUT(0x1ADF22A20);
}

void sub_1ADF22A7C()
{
  JUMPOUT(0x1ADF22A30);
}

uint64_t *std::__tree<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::__map_value_compare<quasar::AmbiguityAnnotatorBlock::MatchSpan,std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,false>,std::allocator<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::__emplace_unique_key_args<quasar::AmbiguityAnnotatorBlock::MatchSpan,std::piecewise_construct_t const&,std::tuple<quasar::AmbiguityAnnotatorBlock::MatchSpan const&>,std::tuple<>>(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t **matched;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v11;

  matched = (uint64_t **)std::__tree<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::__map_value_compare<quasar::AmbiguityAnnotatorBlock::MatchSpan,std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,false>,std::allocator<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::__find_equal<quasar::AmbiguityAnnotatorBlock::MatchSpan>((uint64_t)a1, &v11, a2);
  v7 = *matched;
  if (!*matched)
  {
    v8 = matched;
    v7 = (uint64_t *)operator new(0x40uLL);
    v9 = **a4;
    v7[6] = 0;
    v7[7] = 0;
    v7[4] = v9;
    v7[5] = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

void std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        quasar::AmbiguityAnnotatorBlock::SenseMatch::~SenseMatch(v4 - 35);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__tree<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::__map_value_compare<quasar::AmbiguityAnnotatorBlock::MatchSpan,std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,false>,std::allocator<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::~__tree(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  std::__tree<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::__map_value_compare<quasar::AmbiguityAnnotatorBlock::MatchSpan,std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,false>,std::allocator<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::destroy(a1, *(char **)(a1 + 8));
  v2 = *(_QWORD **)(a1 + 48);
  if (v2 == (_QWORD *)(a1 + 24))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 24);
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void std::__tree<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::__map_value_compare<quasar::AmbiguityAnnotatorBlock::MatchSpan,std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,false>,std::allocator<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::destroy(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    std::__tree<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::__map_value_compare<quasar::AmbiguityAnnotatorBlock::MatchSpan,std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,false>,std::allocator<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::__map_value_compare<quasar::AmbiguityAnnotatorBlock::MatchSpan,std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::function<BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>,false>,std::allocator<std::__value_type<quasar::AmbiguityAnnotatorBlock::MatchSpan,quasar::AmbiguityAnnotatorBlock::SenseMatches>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 40);
    std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

void std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_0,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_0>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_0,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_0>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3E010;
  return result;
}

void std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_0,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_0>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3E010;
}

BOOL std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_0,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_0>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 < *a3)
    return 1;
  if (*a2 <= *a3)
    return a2[1] > a3[1];
  return 0;
}

uint64_t std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_0,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_0>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_0,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_0>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::target_type()
{
}

void std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_1,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_1>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_1,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_1>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3E068;
  return result;
}

void std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_1,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_1>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3E068;
}

BOOL std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_1,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_1>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*a2 < *a3)
    return 1;
  if (*a2 <= *a3)
    return a2[1] < a3[1];
  return 0;
}

uint64_t std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_1,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_1>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_1,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_1>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::target_type()
{
}

void std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_2,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_2>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_2,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_2>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3E0C0;
  return result;
}

void std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_2,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_2>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3E0C0;
}

BOOL std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_2,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_2>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v3;
  int v4;

  v3 = a2[1];
  v4 = a3[1];
  if (v3 > v4)
    return 1;
  if (v3 < v4)
    return 0;
  return *a2 < *a3;
}

uint64_t std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_2,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_2>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_2,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_2>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::target_type()
{
}

void std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_3,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_3>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_3,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_3>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5D3E118;
  return result;
}

void std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_3,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_3>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5D3E118;
}

BOOL std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_3,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_3>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::operator()(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v3;
  int v4;

  v3 = a2[1];
  v4 = a3[1];
  if (v3 < v4)
    return 1;
  if (v3 <= v4)
    return *a2 < *a3;
  return 0;
}

uint64_t std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_3,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_3>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_3,std::allocator<quasar::AmbiguityAnnotatorBlock::MatchSpanCompare(BOOL,BOOL)::$_3>,BOOL ()(quasar::AmbiguityAnnotatorBlock::MatchSpan const&,quasar::AmbiguityAnnotatorBlock::MatchSpan const&)>::target_type()
{
}

_QWORD *std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1ADF23008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::AmbiguityAnnotatorBlock::SenseMatch *,quasar::AmbiguityAnnotatorBlock::SenseMatch *,quasar::AmbiguityAnnotatorBlock::SenseMatch *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      quasar::AmbiguityAnnotatorBlock::SenseMatch::operator=(a3, v4);
      v4 += 280;
      a3 += 280;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t quasar::AmbiguityAnnotatorBlock::SenseMatch::operator=(uint64_t a1, uint64_t a2)
{
  void **v4;
  __int128 v5;
  void **v6;
  __int128 v7;
  void **v8;
  __int128 v9;
  void **v10;
  __int128 v11;
  void **v12;
  __int128 v13;
  void **v14;
  __int128 v15;
  void **v16;
  __int128 v17;
  void **v18;
  __int128 v19;

  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 32));
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 64));
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v4 = (void **)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*v4);
  v5 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_OWORD *)v4 = v5;
  *(_BYTE *)(a2 + 111) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  v6 = (void **)(a1 + 112);
  if (*(char *)(a1 + 135) < 0)
    operator delete(*v6);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)v6 = v7;
  *(_BYTE *)(a2 + 135) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  v8 = (void **)(a1 + 136);
  if (*(char *)(a1 + 159) < 0)
    operator delete(*v8);
  v9 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)v8 = v9;
  *(_BYTE *)(a2 + 159) = 0;
  *(_BYTE *)(a2 + 136) = 0;
  v10 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0)
    operator delete(*v10);
  v11 = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_OWORD *)v10 = v11;
  *(_BYTE *)(a2 + 183) = 0;
  *(_BYTE *)(a2 + 160) = 0;
  v12 = (void **)(a1 + 184);
  if (*(char *)(a1 + 207) < 0)
    operator delete(*v12);
  v13 = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_OWORD *)v12 = v13;
  *(_BYTE *)(a2 + 207) = 0;
  *(_BYTE *)(a2 + 184) = 0;
  v14 = (void **)(a1 + 208);
  if (*(char *)(a1 + 231) < 0)
    operator delete(*v14);
  v15 = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_OWORD *)v14 = v15;
  *(_BYTE *)(a2 + 231) = 0;
  *(_BYTE *)(a2 + 208) = 0;
  v16 = (void **)(a1 + 232);
  if (*(char *)(a1 + 255) < 0)
    operator delete(*v16);
  v17 = *(_OWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_OWORD *)v16 = v17;
  *(_BYTE *)(a2 + 255) = 0;
  *(_BYTE *)(a2 + 232) = 0;
  v18 = (void **)(a1 + 256);
  if (*(char *)(a1 + 279) < 0)
    operator delete(*v18);
  v19 = *(_OWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_OWORD *)v18 = v19;
  *(_BYTE *)(a2 + 279) = 0;
  *(_BYTE *)(a2 + 256) = 0;
  return a1;
}

_QWORD *std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__construct_one_at_end[abi:ne180100]<quasar::AmbiguityAnnotatorBlock::SenseMatches const&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__init_with_size[abi:ne180100]<quasar::AmbiguityAnnotatorBlock::SenseMatch*,quasar::AmbiguityAnnotatorBlock::SenseMatch*>(v3, *a2, a2[1], 0xAF8AF8AF8AF8AF8BLL * ((a2[1] - *a2) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1ADF23358(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__push_back_slow_path<quasar::AmbiguityAnnotatorBlock::SenseMatches const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__init_with_size[abi:ne180100]<quasar::AmbiguityAnnotatorBlock::SenseMatch*,quasar::AmbiguityAnnotatorBlock::SenseMatch*>(v11, *a2, a2[1], 0xAF8AF8AF8AF8AF8BLL * ((a2[1] - *a2) >> 3));
  v15 += 24;
  std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<quasar::AmbiguityAnnotatorBlock::SenseMatches>::~__split_buffer(v14);
  return v12;
}

void sub_1ADF23474(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::AmbiguityAnnotatorBlock::SenseMatches>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__init_with_size[abi:ne180100]<quasar::AmbiguityAnnotatorBlock::SenseMatch*,quasar::AmbiguityAnnotatorBlock::SenseMatch*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::AmbiguityAnnotatorBlock::SenseMatch>,quasar::AmbiguityAnnotatorBlock::SenseMatch*,quasar::AmbiguityAnnotatorBlock::SenseMatch*,quasar::AmbiguityAnnotatorBlock::SenseMatch*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADF234EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xEA0EA0EA0EA0EBLL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::AmbiguityAnnotatorBlock::SenseMatch>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[280 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::AmbiguityAnnotatorBlock::SenseMatch>,quasar::AmbiguityAnnotatorBlock::SenseMatch*,quasar::AmbiguityAnnotatorBlock::SenseMatch*,quasar::AmbiguityAnnotatorBlock::SenseMatch*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      quasar::AmbiguityAnnotatorBlock::SenseMatch::SenseMatch((quasar::AmbiguityAnnotatorBlock::SenseMatch *)(a4 + v7), (const quasar::AmbiguityAnnotatorBlock::SenseMatch *)(a2 + v7));
      v7 += 280;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1ADF235BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 280;
    do
    {
      quasar::AmbiguityAnnotatorBlock::SenseMatch::~SenseMatch((void **)(v4 + v2));
      v2 -= 280;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::reverse_iterator<quasar::AmbiguityAnnotatorBlock::SenseMatches*>,std::reverse_iterator<quasar::AmbiguityAnnotatorBlock::SenseMatches*>,std::reverse_iterator<quasar::AmbiguityAnnotatorBlock::SenseMatches*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::reverse_iterator<quasar::AmbiguityAnnotatorBlock::SenseMatches*>,std::reverse_iterator<quasar::AmbiguityAnnotatorBlock::SenseMatches*>,std::reverse_iterator<quasar::AmbiguityAnnotatorBlock::SenseMatches*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::reverse_iterator<quasar::AmbiguityAnnotatorBlock::SenseMatches*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::reverse_iterator<quasar::AmbiguityAnnotatorBlock::SenseMatches*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::reverse_iterator<quasar::AmbiguityAnnotatorBlock::SenseMatches*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::AmbiguityAnnotatorBlock::SenseMatches>,std::reverse_iterator<quasar::AmbiguityAnnotatorBlock::SenseMatches*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<quasar::AmbiguityAnnotatorBlock::SenseMatches>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::AmbiguityAnnotatorBlock::SenseMatches>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::AmbiguityAnnotatorBlock::SenseMatches>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatch>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::__tree<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::__map_value_compare<int,std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>>>::destroy(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    std::__tree<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::__map_value_compare<int,std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::__map_value_compare<int,std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 40);
    std::vector<quasar::AmbiguityAnnotatorBlock::SenseMatches>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

__n128 kaldi::quasar::ShortlistDataInOneFile::ShortlistDataInOneFile(_QWORD *a1, uint64_t *a2, __n128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;

  v3 = 0;
  v4 = *a2;
  *a2 = 0;
  *a1 = &off_1E5D33C08;
  a1[1] = v4;
  do
  {
    v5 = &a1[v3];
    v6 = &a2[v3];
    v7 = a2[v3 + 2];
    v5[2] = a2[v3 + 1];
    v5[3] = v7;
    *((_BYTE *)v5 + 32) = a2[v3 + 3];
    v6[1] = 0;
    v6[2] = 0;
    *((_BYTE *)v6 + 24) = 0;
    v3 += 3;
  }
  while (v3 != 9);
  v8 = 0;
  v9 = 0;
  do
  {
    v10 = 3 * v9;
    v11 = (uint64_t)&a1[v10 + 11];
    v12 = (uint64_t)&a2[v10 + 10];
    v13 = *(_QWORD *)(v12 + 8);
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *(_QWORD *)(v11 + 8) = v13;
    *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
    LOBYTE(v11) = v8;
    *(_QWORD *)v12 = 0;
    *(_QWORD *)(v12 + 8) = 0;
    *(_BYTE *)(v12 + 16) = 0;
    v8 = 1;
    v9 = 1;
  }
  while ((v11 & 1) == 0);
  a1[17] = 0;
  a1[18] = 0;
  a1[19] = 0;
  result = *a3;
  *(__n128 *)(a1 + 17) = *a3;
  a1[19] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

uint64_t kaldi::quasar::ShortlistDataInOneFile::GetConstrainedWordIds@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, int **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int **v23;
  const void *v24;
  size_t v25;

  v7 = *(_QWORD *)(result + 136);
  v6 = *(_QWORD *)(result + 144);
  if (v6 == v7)
  {
LABEL_22:
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    *(_DWORD *)(a6 + 32) = 1065353216;
    return result;
  }
  v9 = result;
  v10 = 0;
  v11 = a2[23];
  v24 = *(const void **)a2;
  v25 = *((_QWORD *)a2 + 1);
  if ((v11 & 0x80u) == 0)
    v12 = a2[23];
  else
    v12 = *((_QWORD *)a2 + 1);
  if ((unint64_t)((v6 - v7) / 24) <= 1)
    v13 = 1;
  else
    v13 = (v6 - v7) / 24;
  while (1)
  {
    v14 = v7 + 24 * v10;
    v15 = *(unsigned __int8 *)(v14 + 23);
    v16 = (char)v15;
    if ((v15 & 0x80u) != 0)
      v15 = *(_QWORD *)(v14 + 8);
    if (v12 != v15)
      goto LABEL_21;
    v17 = v16 >= 0 ? (unsigned __int8 *)(v7 + 24 * v10) : *(unsigned __int8 **)v14;
    if ((v11 & 0x80) != 0)
      break;
    if (!(_DWORD)v11)
      return kaldi::quasar::ShortlistDataOnDisk::GetConstrainedWordIds(v9 + 8, v10, a3, a4, a5, a6);
    v18 = a2;
    v19 = v11;
    while (*v18 == *v17)
    {
      ++v18;
      ++v17;
      if (!--v19)
        return kaldi::quasar::ShortlistDataOnDisk::GetConstrainedWordIds(v9 + 8, v10, a3, a4, a5, a6);
    }
LABEL_21:
    if (++v10 == v13)
      goto LABEL_22;
  }
  v23 = a3;
  v20 = a5;
  v21 = a4;
  v22 = a6;
  result = memcmp(v24, v17, v25);
  a6 = v22;
  a3 = v23;
  a4 = v21;
  a5 = v20;
  if ((_DWORD)result)
    goto LABEL_21;
  return kaldi::quasar::ShortlistDataOnDisk::GetConstrainedWordIds(v9 + 8, v10, a3, a4, a5, a6);
}

void kaldi::quasar::ShortlistDataInOneFile::Write(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void *__p;
  char v7;

  kaldi::WriteToken(a2, a3, "<ShortlistTable>");
  kaldi::quasar::ShortlistDataOnDisk::Write(a1 + 8, a2, a3);
  kaldi::WriteToken(a2, a3, "<ShortlistLangPairs>");
  kaldi::JoinVectorToString<std::string>((uint64_t *)(a1 + 136), ",");
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (v7 < 0)
    operator delete(__p);
}

void sub_1ADF23B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL kaldi::quasar::ShortlistDataInOneFile::IsLanguagePairSupported(uint64_t a1, unsigned __int8 **a2)
{
  return std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), a2) != *(_QWORD *)(a1 + 144);
}

void *kaldi::quasar::ShortlistDataInOneFile::Combine(uint64_t a1, void *lpsrc)
{
  unsigned __int8 ***v3;
  unsigned __int8 ***v4;
  unsigned __int8 **v5;
  unsigned __int8 **v6;
  std::string *v7;
  uint64_t v8;
  std::string *v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *result;
  _QWORD v16[34];

  if (!v3)
    __cxa_bad_cast();
  v4 = v3;
  v5 = v3[17];
  v6 = v3[18];
  if (v5 == v6)
  {
    v7 = *(std::string **)(a1 + 144);
    v9 = (std::string *)v3[17];
  }
  else
  {
    v7 = *(std::string **)(a1 + 144);
    do
    {
      v8 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*(_QWORD *)(a1 + 136), (uint64_t)v7, v5);
      if (v8 != *(_QWORD *)(a1 + 144))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, "Find duplicated keys when combine 2 shortlists");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
      }
      v7 = (std::string *)v8;
      v5 += 3;
    }
    while (v5 != v6);
    v9 = (std::string *)v4[17];
    v5 = v4[18];
  }
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((std::vector<std::string> *)(a1 + 136), v7, v9, (__int128 *)v5, 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)v9) >> 3));
  for (i = 0; i != 9; i += 3)
  {
    if (i == 6)
      LODWORD(v11) = 0;
    else
      v11 = *(_QWORD *)(a1 + i * 8 + 48);
    kaldi::MappableVector<int>::append(a1 + i * 8 + 16, (uint64_t)&v4[i + 2], v11);
  }
  v12 = 0;
  v13 = (char *)(v4 + 11);
  do
  {
    if (v12 == 24)
      LODWORD(v14) = 0;
    else
      v14 = *(_QWORD *)(a1 + v12 + 120);
    result = kaldi::MappableVector<int>::append(a1 + v12 + 88, (uint64_t)&v13[v12], v14);
    v12 += 24;
  }
  while (v12 != 48);
  return result;
}

void sub_1ADF23CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t kaldi::quasar::ShortlistDataInOneFile::operator==(uint64_t a1, void *lpsrc)
{
  unsigned __int8 **v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t result;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  char v13;

  if (!v3)
    __cxa_bad_cast();
  v4 = v3;
  v5 = *(unsigned __int8 **)(a1 + 136);
  v6 = *(unsigned __int8 **)(a1 + 144);
  v7 = v3[17];
  if (v6 - v5 == v3[18] - v7)
  {
    while (v5 != v6)
    {
      result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v13, v5, v7);
      if (!(_DWORD)result)
        return result;
      v5 += 24;
      v7 += 24;
    }
    v9 = 0;
    while (1)
    {
      v10 = *(unsigned __int8 **)(a1 + v9 * 8 + 24);
      if (v10 != v4[v9 + 3] || memcmp(*(const void **)(a1 + v9 * 8 + 16), v4[v9 + 2], 4 * (_QWORD)v10))
        break;
      v9 += 3;
      if (v9 == 9)
      {
        v11 = 0;
        while (1)
        {
          v12 = *(unsigned __int8 **)(a1 + v11 * 8 + 96);
          if (v12 != v4[v11 + 12] || memcmp(*(const void **)(a1 + v11 * 8 + 88), v4[v11 + 11], 4 * (_QWORD)v12))
            break;
          v11 += 3;
          if (v11 == 6)
            return 1;
        }
        return 0;
      }
    }
  }
  return 0;
}

uint64_t kaldi::quasar::ShortlistDataInOneFile::GetVocabSize(kaldi::quasar::ShortlistDataInOneFile *this)
{
  if (*((_QWORD *)this + 3) < 2uLL)
    return (*((_DWORD *)this + 12) - **((_DWORD **)this + 2));
  else
    return (*(_DWORD *)(*((_QWORD *)this + 2) + 4) - **((_DWORD **)this + 2));
}

void kaldi::quasar::ShortlistDataInOneFile::~ShortlistDataInOneFile(kaldi::quasar::ShortlistDataInOneFile *this)
{
  uint64_t i;
  uint64_t v3;
  uint64_t j;
  uint64_t v5;
  uint64_t v6;
  void **v7;

  *(_QWORD *)this = &off_1E5D33C08;
  v7 = (void **)((char *)this + 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  for (i = 0; i != -48; i -= 24)
  {
    if (*((_BYTE *)this + i + 128))
    {
      v3 = *(_QWORD *)((char *)this + i + 112);
      if (v3)
        MEMORY[0x1AF44D160](v3, 0x1000C8077774924);
    }
  }
  for (j = 0; j != -72; j -= 24)
  {
    if (*((_BYTE *)this + j + 80))
    {
      v5 = *(_QWORD *)((char *)this + j + 64);
      if (v5)
        MEMORY[0x1AF44D160](v5, 0x1000C8077774924);
    }
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

{
  uint64_t i;
  uint64_t v3;
  uint64_t j;
  uint64_t v5;
  uint64_t v6;
  void **v7;

  *(_QWORD *)this = &off_1E5D33C08;
  v7 = (void **)((char *)this + 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  for (i = 0; i != -48; i -= 24)
  {
    if (*((_BYTE *)this + i + 128))
    {
      v3 = *(_QWORD *)((char *)this + i + 112);
      if (v3)
        MEMORY[0x1AF44D160](v3, 0x1000C8077774924);
    }
  }
  for (j = 0; j != -72; j -= 24)
  {
    if (*((_BYTE *)this + j + 80))
    {
      v5 = *(_QWORD *)((char *)this + j + 64);
      if (v5)
        MEMORY[0x1AF44D160](v5, 0x1000C8077774924);
    }
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  MEMORY[0x1AF44D190](this, 0x10F1C408308A222);
}

uint64_t quasar::SymbolTableList::clear(quasar::SymbolTableList *this)
{
  uint64_t result;
  uint64_t v3;

  result = *((_QWORD *)this + 1);
  v3 = *(_QWORD *)this;
  while (result != v3)
    result = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](result - 32);
  *((_QWORD *)this + 1) = v3;
  return result;
}

uint64_t quasar::SymbolTableList::addSymbolTable(uint64_t *a1, unint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v8 = a1[1];
  if (v8 == *a1)
    goto LABEL_8;
  v9 = *(_QWORD *)(v8 - 32);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 96) + 112))(*(_QWORD *)(v9 + 96));
  if ((v10 & 0x8000000000000000) == 0)
    v10 += *(_QWORD *)(v9 + 120);
  if (v10 <= a3)
  {
LABEL_8:
    v15 = *a2;
    v16 = (std::__shared_weak_count *)a2[1];
    v25 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
      *(_QWORD *)&v26 = v15;
      *((_QWORD *)&v26 + 1) = v16;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    else
    {
      v26 = v15;
    }
    *(_QWORD *)&v27 = a3;
    DWORD2(v27) = a4;
    std::vector<quasar::SymbolTableList::Data>::push_back[abi:ne180100](a1, (uint64_t)&v26);
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
    if (*((_QWORD *)&v26 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v25)
    {
      v23 = (unint64_t *)&v25->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    return 1;
  }
  else
  {
    if (quasar::gLogLevel >= 1)
    {
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v26 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Tried to add overlapping and/or out-of-order symbol table to symbol table list: ", 80);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"symTableFirstKey=", 17);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", previous symbol table's last key=", 35);
      v13 = *(_QWORD *)(*(_QWORD *)(a1[1] - 32) + 96);
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 112))(v13);
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v26);
    }
    return 0;
  }
}

void sub_1ADF24210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::SymbolTableList::Data>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD v17[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 5;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v5 - *a1;
    if (v12 >> 4 > v11)
      v11 = v12 >> 4;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v17[4] = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(result, v13);
    else
      v14 = 0;
    v15 = &v14[32 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[32 * v13];
    *(_OWORD *)v15 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v16 = *(_QWORD *)(a2 + 16);
    *((_DWORD *)v15 + 6) = *(_DWORD *)(a2 + 24);
    *((_QWORD *)v15 + 2) = v16;
    v17[2] = v15 + 32;
    std::vector<quasar::SymbolTableList::Data>::__swap_out_circular_buffer(a1, v17);
    v9 = a1[1];
    result = std::__split_buffer<quasar::SymbolTableList::Data>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v8 = *(_QWORD *)(a2 + 16);
    *(_DWORD *)(v7 + 24) = *(_DWORD *)(a2 + 24);
    *(_QWORD *)(v7 + 16) = v8;
    v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_1ADF2434C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::SymbolTableList::Data>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::SymbolTableList::strsToSymbolIds@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  result = (uint64_t)std::vector<long long>::vector(a3, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3), &fst::SymbolTable::kNoSymbol);
  v7 = *a2;
  if (a2[1] != *a2)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      result = quasar::SymbolTableList::strToSymbolId(a1, v7 + v8);
      *(_QWORD *)(*a3 + 8 * v9++) = result;
      v7 = *a2;
      v8 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v9);
  }
  return result;
}

void sub_1ADF24404(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::SymbolTableList::strToSymbolId(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t result;

  v2 = *(uint64_t **)a1;
  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
    return -1;
  while (1)
  {
    result = quasar::QsrTextSymbolTable::Find(*v2, a2);
    if (result << 32 != 0xFFFFFFFF00000000)
      break;
    v2 += 4;
    if (v2 == *(uint64_t **)(a1 + 8))
      return -1;
  }
  return (int)result;
}

void quasar::SymbolTableList::lookup(uint64_t *a1, int a2, unsigned __int8 *a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  quasar::QsrTextSymbolTable *v8;
  quasar::QsrTextSymbolTable *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  int v15;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v4 = *a1;
  v5 = a1[1];
  if (v5 == *a1)
    return;
  v7 = a1[1];
  while (1)
  {
    v9 = *(quasar::QsrTextSymbolTable **)(v7 - 32);
    v7 -= 32;
    v8 = v9;
    if (v9)
    {
      if (*(_QWORD *)(v5 - 16) <= a2)
        break;
    }
    v5 = v7;
    if (v7 == v4)
      return;
  }
  *a4 = *(_DWORD *)(v5 - 8);
  quasar::QsrTextSymbolTable::Find(v8, &v23);
  if ((char)a3[23] < 0)
    operator delete(*(void **)a3);
  *(_OWORD *)a3 = v23;
  *((_QWORD *)a3 + 2) = v24;
  if ((char)a3[23] < 0)
  {
    v11 = *((_QWORD *)a3 + 1);
    if (v11 != 5)
    {
      if (!v11)
        goto LABEL_15;
      goto LABEL_23;
    }
    v10 = *(unsigned __int8 **)a3;
  }
  else
  {
    v10 = a3;
    if (a3[23] != 5)
    {
      if (!a3[23])
      {
LABEL_15:
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v24 = 0u;
        v25 = 0u;
        v23 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"Word ID ", 8);
        v12 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" not in symbol table ", 21);
        v13 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" with start key ", 16);
        std::ostream::operator<<();
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v23);
      }
      goto LABEL_23;
    }
  }
  v14 = *(_DWORD *)v10;
  v15 = v10[4];
  if (v14 == 1936745788 && v15 == 62)
    MEMORY[0x1AF44C914](a3, "");
LABEL_23:
  if (quasar::gLogLevel >= 6)
  {
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v23 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v23);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"Got word: ", 10);
    v18 = (char)a3[23];
    if (v18 >= 0)
      v19 = (uint64_t)a3;
    else
      v19 = *(_QWORD *)a3;
    if (v18 >= 0)
      v20 = a3[23];
    else
      v20 = *((_QWORD *)a3 + 1);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" (", 2);
    v22 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)") from symbol table ", 20);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v23);
  }
}

void sub_1ADF246C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&a9);
}

void sub_1ADF246D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a9);
  _Unwind_Resume(a1);
}

void quasar::SymbolTableList::lookup(quasar::SymbolTableList *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v3;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v3 = 0;
  quasar::SymbolTableList::lookup((uint64_t *)this, a2, (unsigned __int8 *)a3, &v3);
}

void sub_1ADF24724(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void quasar::SymbolTableList::lookup(uint64_t *a1, int **a2, uint64_t *a3, char **a4, int a5)
{
  int *i;
  char v11;
  void **v12;
  int v13;
  int v14;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  int v30;
  void *__p[2];
  uint64_t v32;

  std::vector<std::string>::__clear[abi:ne180100](a3);
  a4[1] = *a4;
  for (i = *a2; i != a2[1]; ++i)
  {
    __p[0] = 0;
    __p[1] = 0;
    v32 = 0;
    v30 = 0;
    quasar::SymbolTableList::lookup(a1, *i, (unsigned __int8 *)__p, &v30);
    if (a5)
    {
      v11 = HIBYTE(v32);
      if (SHIBYTE(v32) < 0)
      {
        if (__p[1] == (void *)3)
        {
          v12 = (void **)__p[0];
LABEL_12:
          v13 = *(unsigned __int16 *)v12;
          v14 = *((unsigned __int8 *)v12 + 2);
          if (v13 == 16188 && v14 == 62)
            goto LABEL_39;
          goto LABEL_16;
        }
        if (!__p[1])
          goto LABEL_40;
      }
      else
      {
        if (HIBYTE(v32) == 3)
        {
          v12 = __p;
          goto LABEL_12;
        }
        if (!HIBYTE(v32))
          continue;
      }
    }
LABEL_16:
    v16 = a3[1];
    if (v16 >= a3[2])
    {
      v18 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (__int128 *)__p);
    }
    else
    {
      if (SHIBYTE(v32) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3[1], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        v17 = *(_OWORD *)__p;
        *(_QWORD *)(v16 + 16) = v32;
        *(_OWORD *)v16 = v17;
      }
      v18 = v16 + 24;
      a3[1] = v16 + 24;
    }
    a3[1] = v18;
    v20 = a4[1];
    v19 = (unint64_t)a4[2];
    if ((unint64_t)v20 >= v19)
    {
      v22 = *a4;
      v23 = (v20 - *a4) >> 2;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v25 = v19 - (_QWORD)v22;
      if (v25 >> 1 > v24)
        v24 = v25 >> 1;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
        v26 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v26 = v24;
      if (v26)
      {
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a4 + 2), v26);
        v22 = *a4;
        v20 = a4[1];
      }
      else
      {
        v27 = 0;
      }
      v28 = &v27[4 * v23];
      *(_DWORD *)v28 = v30;
      v21 = v28 + 4;
      while (v20 != v22)
      {
        v29 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *((_DWORD *)v28 - 1) = v29;
        v28 -= 4;
      }
      *a4 = v28;
      a4[1] = v21;
      a4[2] = &v27[4 * v26];
      if (v22)
        operator delete(v22);
    }
    else
    {
      *(_DWORD *)v20 = v30;
      v21 = v20 + 4;
    }
    a4[1] = v21;
    v11 = HIBYTE(v32);
LABEL_39:
    if (v11 < 0)
LABEL_40:
      operator delete(__p[0]);
  }
}

{
  int *i;
  char v11;
  void **v12;
  int v13;
  int v14;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  int v30;
  void *__p[2];
  uint64_t v32;

  std::vector<std::string>::__clear[abi:ne180100](a3);
  a4[1] = *a4;
  for (i = *a2; i != a2[1]; i += 12)
  {
    __p[0] = 0;
    __p[1] = 0;
    v32 = 0;
    v30 = 0;
    quasar::SymbolTableList::lookup(a1, *i, (unsigned __int8 *)__p, &v30);
    if (a5)
    {
      v11 = HIBYTE(v32);
      if (SHIBYTE(v32) < 0)
      {
        if (__p[1] == (void *)3)
        {
          v12 = (void **)__p[0];
LABEL_12:
          v13 = *(unsigned __int16 *)v12;
          v14 = *((unsigned __int8 *)v12 + 2);
          if (v13 == 16188 && v14 == 62)
            goto LABEL_39;
          goto LABEL_16;
        }
        if (!__p[1])
          goto LABEL_40;
      }
      else
      {
        if (HIBYTE(v32) == 3)
        {
          v12 = __p;
          goto LABEL_12;
        }
        if (!HIBYTE(v32))
          continue;
      }
    }
LABEL_16:
    v16 = a3[1];
    if (v16 >= a3[2])
    {
      v18 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (__int128 *)__p);
    }
    else
    {
      if (SHIBYTE(v32) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3[1], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        v17 = *(_OWORD *)__p;
        *(_QWORD *)(v16 + 16) = v32;
        *(_OWORD *)v16 = v17;
      }
      v18 = v16 + 24;
      a3[1] = v16 + 24;
    }
    a3[1] = v18;
    v20 = a4[1];
    v19 = (unint64_t)a4[2];
    if ((unint64_t)v20 >= v19)
    {
      v22 = *a4;
      v23 = (v20 - *a4) >> 2;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v25 = v19 - (_QWORD)v22;
      if (v25 >> 1 > v24)
        v24 = v25 >> 1;
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
        v26 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v26 = v24;
      if (v26)
      {
        v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a4 + 2), v26);
        v22 = *a4;
        v20 = a4[1];
      }
      else
      {
        v27 = 0;
      }
      v28 = &v27[4 * v23];
      *(_DWORD *)v28 = v30;
      v21 = v28 + 4;
      while (v20 != v22)
      {
        v29 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *((_DWORD *)v28 - 1) = v29;
        v28 -= 4;
      }
      *a4 = v28;
      a4[1] = v21;
      a4[2] = &v27[4 * v26];
      if (v22)
        operator delete(v22);
    }
    else
    {
      *(_DWORD *)v20 = v30;
      v21 = v20 + 4;
    }
    a4[1] = v21;
    v11 = HIBYTE(v32);
LABEL_39:
    if (v11 < 0)
LABEL_40:
      operator delete(__p[0]);
  }
}

void sub_1ADF24958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 8) = v16;
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1ADF24B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 8) = v16;
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::SymbolTableList::flatten(_QWORD *a1, _QWORD *a2)
{
  uint64_t i;
  quasar::QsrTextSymbolTable *v5;
  quasar::QsrTextSymbolTable *v6;
  unint64_t v7;
  uint64_t NthKey;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void **v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  unint64_t *v32;

  for (i = a1[1]; i != *a1; i -= 32)
  {
    v6 = *(quasar::QsrTextSymbolTable **)(i - 32);
    v5 = v6;
    if (v6)
    {
      v7 = quasar::QsrTextSymbolTable::NumSymbols(v5);
      NthKey = quasar::QsrTextSymbolTable::GetNthKey(v5);
      if (v7)
      {
        v9 = NthKey;
        v10 = 0;
        do
        {
          *(_QWORD *)&v14 = v9;
          if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(a2, (unint64_t *)&v14))
          {
            v29 = 0u;
            v30 = 0u;
            v27 = 0u;
            v28 = 0u;
            v25 = 0u;
            v26 = 0u;
            v23 = 0u;
            v24 = 0u;
            v21 = 0u;
            v22 = 0u;
            v19 = 0u;
            v20 = 0u;
            v17 = 0u;
            v18 = 0u;
            v15 = 0u;
            v16 = 0u;
            v14 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Word ID ", 8);
            v13 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" is already in the symbol list - indices in different symbol tables are not distinct", 84);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v14);
          }
          quasar::QsrTextSymbolTable::Find(v5, &v14);
          v31 = v9;
          v32 = &v31;
          v11 = std::__hash_table<std::__hash_value_type<long long,std::string>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::string>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::string>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::string>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<>>((uint64_t)a2, &v31, (uint64_t)&std::piecewise_construct, (uint64_t **)&v32);
          v12 = (void **)(v11 + 3);
          if (*((char *)v11 + 47) < 0)
            operator delete(*v12);
          *(_OWORD *)v12 = v14;
          v12[2] = (void *)v15;
          if (++v10 < v7)
            v9 = quasar::QsrTextSymbolTable::GetNthKey(v5);
        }
        while (v7 != v10);
      }
    }
  }
}

void sub_1ADF24D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::SymbolTableList::getLmeSymbolIdToNumWords(int **a1, uint64_t a2)
{
  int *v2;
  uint64_t v3;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void **v10;
  char *v11;
  unsigned int v12;
  char *i;
  char *v14;
  int64_t v17;
  _OWORD v18[17];
  void *v19[2];
  unsigned __int8 v20;

  v2 = *a1;
  v3 = (uint64_t)(*a1 + 8);
  if ((int *)v3 != a1[1])
  {
    do
    {
      v5 = v2[12];
      v2 = (int *)v3;
      while (1)
      {
        v6 = *(_QWORD *)v2;
        v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v2 + 96) + 112))(*(_QWORD *)(*(_QWORD *)v2 + 96));
        if ((v7 & 0x8000000000000000) == 0)
          v7 += *(_QWORD *)(v6 + 120);
        if (v7 <= v5)
          break;
        quasar::QsrTextSymbolTable::Find(*(quasar::QsrTextSymbolTable **)v2, v19);
        if ((v20 & 0x80u) == 0)
          v8 = v20;
        else
          v8 = (unint64_t)v19[1];
        if (v8)
        {
          v9 = 0;
          if ((v20 & 0x80u) == 0)
            v10 = v19;
          else
            v10 = (void **)v19[0];
          v11 = (char *)v10 + v8;
          v12 = 1;
LABEL_14:
          for (i = (char *)v10 + v9; v11 - i >= 4; i = v14 + 1)
          {
            v14 = (char *)memchr(i, 126, v11 - i - 3);
            if (!v14)
              break;
            if (*(_DWORD *)v14 == 808482686)
            {
              if (v14 != v11 && v14 - (char *)v10 != -1)
              {
                ++v12;
                v9 = v14 - (char *)v10 + 4;
                if (v8 >= v9)
                  goto LABEL_14;
                goto LABEL_24;
              }
              break;
            }
          }
          if (v12 < 2)
            goto LABEL_27;
LABEL_24:
          v17 = v5;
          *(_QWORD *)&v18[0] = &v17;
          *((_DWORD *)std::__hash_table<std::__hash_value_type<long long,int>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,int>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,int>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<>>(a2, (unint64_t *)&v17, (uint64_t)&std::piecewise_construct, (_QWORD **)v18)+ 6) = v12;
        }
        else if (quasar::gLogLevel >= 1)
        {
          memset(v18, 0, sizeof(v18));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Found an empty LME word, which should not happen", 48);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v18);
        }
LABEL_27:
        if ((char)v20 < 0)
          operator delete(v19[0]);
        ++v5;
        if (!v8)
          return 0;
      }
      v3 = (uint64_t)(v2 + 8);
    }
    while (v2 + 8 != a1[1]);
  }
  return 1;
}

void sub_1ADF24F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  if (*(char *)(v3 - 105) < 0)
    operator delete(*(void **)(v3 - 128));
  _Unwind_Resume(a1);
}

uint64_t *std::vector<quasar::SymbolTableList::Data>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_OWORD *)(v2 - 32);
    v2 -= 32;
    *(_OWORD *)(v4 - 32) = v5;
    v4 -= 32;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v6 = *(_QWORD *)(v2 + 16);
    *(_DWORD *)(v4 + 24) = *(_DWORD *)(v2 + 24);
    *(_QWORD *)(v4 + 16) = v6;
  }
  a2[1] = v4;
  v7 = *result;
  *result = v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<quasar::SymbolTableList::Data>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](i - 32);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,int>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,int>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,int>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,int>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long &&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  v11[2] = **a4;
  *((_DWORD *)v11 + 6) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1ADF25278(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

double quasar::SeevaGreedyDecoder::SeevaGreedyDecoder(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  double result;

  v2 = quasar::Decoder::Decoder(a1, a2);
  *(_QWORD *)v2 = &off_1E5D36B20;
  *(_BYTE *)(v2 + 57) = 0;
  result = 0.0;
  *(_OWORD *)(v2 + 448) = 0u;
  *(_OWORD *)(v2 + 464) = 0u;
  *(_OWORD *)(v2 + 480) = 0u;
  *(_OWORD *)(v2 + 496) = 0u;
  *(_QWORD *)(v2 + 512) = 0;
  *(_QWORD *)(v2 + 528) = 0;
  *(_QWORD *)(v2 + 544) = 0;
  *(_QWORD *)(v2 + 536) = 0;
  return result;
}

void quasar::SeevaGreedyDecoder::~SeevaGreedyDecoder(quasar::SeevaGreedyDecoder *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E5D36B20;
  v2 = *((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v3)
    std::default_delete<kaldi::quasar::Vocab>::operator()[abi:ne180100]((uint64_t)this + 536, v3);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)this + 66, 0);
  if (*((char *)this + 519) < 0)
    operator delete(*((void **)this + 62));
  if (*((char *)this + 495) < 0)
    operator delete(*((void **)this + 59));
  if (*((char *)this + 471) < 0)
    operator delete(*((void **)this + 56));
  quasar::Decoder::~Decoder((void **)this);
}

{
  quasar::SeevaGreedyDecoder::~SeevaGreedyDecoder(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::SeevaGreedyDecoder::registerParams(quasar::SeevaGreedyDecoder *this, quasar::SystemConfig *a2)
{
  void *v4[2];
  char v5;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "seeva-greedy");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 145, 0, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "model-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "model file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 448, (uint64_t)v4, 1, 145, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "vocab-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "list of vocab");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 472, (uint64_t)v4, 1, 145, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "transform-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "transform file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 496, (uint64_t)v4, 0, 145, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1ADF25528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::SeevaGreedyDecoder::finishInit(quasar::SeevaGreedyDecoder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  kaldi::quasar::Vocab *v6;
  kaldi::nnet1::Nnet *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type v11;
  uint64_t v12;
  std::string __p;
  uint64_t v14;
  unsigned __int8 v15;

  v15 = 0;
  v14 = 0;
  kaldi::Input::OpenInternal(&v14, (uint64_t)this + 472, 1, &v15);
  v2 = kaldi::Input::Stream((kaldi::Input *)&v14);
  v3 = operator new();
  kaldi::quasar::Vocab::Vocab(v3, v2, v15, 1);
  __p.__r_.__value_.__r.__words[0] = 0;
  v4 = *((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = v3;
  if (v4)
  {
    std::default_delete<kaldi::quasar::Vocab>::operator()[abi:ne180100]((uint64_t)this + 536, v4);
    v5 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v5)
      std::default_delete<kaldi::quasar::Vocab>::operator()[abi:ne180100]((uint64_t)&__p, v5);
  }
  kaldi::Input::Close((kaldi::Input *)&v14);
  v6 = (kaldi::quasar::Vocab *)*((_QWORD *)this + 67);
  kaldi::quasar::Vocab::EosWord(v6, &__p);
  *((_DWORD *)this + 130) = kaldi::quasar::Vocab::GetWordId((uint64_t)v6, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((*((char *)this + 519) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 519))
      goto LABEL_11;
    goto LABEL_10;
  }
  if (*((_QWORD *)this + 63))
  {
LABEL_10:
    v7 = (kaldi::nnet1::Nnet *)operator new();
    kaldi::nnet1::Nnet::Nnet(v7);
    std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)this + 66, v7);
    kaldi::nnet1::Nnet::Read(*((_QWORD *)this + 66), (uint64_t)this + 496);
  }
LABEL_11:
  kaldi::quasar::CreateComputeEngineConfig((uint64_t)this + 448, (uint64_t *)&__p);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 24))(&v12);
  v8 = v12;
  v12 = 0;
  v9 = *((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v12;
    v12 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  if (v11)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v11 + 8))(v11);
  kaldi::Input::~Input((kaldi::Input *)&v14);
}

void sub_1ADF25728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  MEMORY[0x1AF44D190](v16, 0x10B0C4082B712C9);
  kaldi::Input::~Input((kaldi::Input *)&a16);
  _Unwind_Resume(a1);
}

uint64_t quasar::SeevaGreedyDecoder::runImpl(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  void **v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  uint64_t Word;
  __int128 v41;
  int64_t size;
  char v43;
  std::string *v44;
  char *v45;
  std::string *v46;
  char *v47;
  unint64_t v48;
  std::string *v49;
  const std::string::value_type *locale;
  std::string::size_type col_high;
  std::vector<std::string>::pointer end;
  std::string *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  int64_t v59;
  std::string *v60;
  char *v61;
  std::string *v62;
  _DWORD *v63;
  char *v64;
  std::string *v66;
  std::string::size_type v67;
  int data;
  int v71;
  std::vector<std::string>::pointer v73;
  std::string *v74;
  std::string::size_type v76;
  __int32 *v77;
  char v78;
  std::string *v79;
  std::string::size_type v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  std::vector<std::string>::pointer i;
  std::vector<std::string>::pointer begin;
  std::locale::__imp *v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  int v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t **v100;
  uint64_t v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t started;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  int v113;
  uint64_t *v114;
  char v116;
  unsigned int *v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  _BYTE __v[41];
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  char v127;
  uint64_t v128;
  unsigned __int8 v129;
  uint64_t v130;
  std::string v131;
  std::vector<std::string> v132;
  void *__p;
  unsigned int *v134;
  uint64_t v135;
  _QWORD v136[3];
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140[4];
  int v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  unsigned int v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  std::regex_traits<char> v148;
  __int128 v149;
  char v150;
  std::__shared_weak_count *v151;
  uint64_t v152;

  v152 = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  v146 = *a2;
  v147 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v7 + 16) + 24))(*(_QWORD *)(v7 + 16));
  v11 = 0;
  v145 = *(_DWORD *)(v7 + 24);
  v143 = 0u;
  v144 = 0u;
  v142 = 0u;
  while (kaldi::OnlineFeatureMatrix::IsValidFrame((int32x2_t *)v7, v11, 1))
  {
    kaldi::OnlineFeatureMatrix::GetFrame((kaldi::OnlineFeatureMatrix *)v7, v11, (uint64_t *)__v);
    LODWORD(v148.__loc_.__locale_) = 0;
    std::deque<std::vector<float>>::emplace_back<int const&,int>(&v142, (int *)&v145, (int *)&v148);
    v12 = (int)v145;
    if (v145)
    {
      v13 = 0;
      v14 = 0;
      v15 = *(_QWORD *)__v;
      v16 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v142 + 1)
                                  + 8 * ((*((_QWORD *)&v144 + 1) + (_QWORD)v144 - 1) / 0xAAuLL))
                      + 24 * ((*((_QWORD *)&v144 + 1) + (_QWORD)v144 - 1) % 0xAAuLL));
      do
      {
        *(_DWORD *)(v16 + 4 * v14++) = *(_DWORD *)(v15 + (v13 >> 30));
        v13 += 0x100000000;
      }
      while (v12 != v14);
    }
    ++v11;
  }
  kaldi::Matrix<float>::Matrix((uint64_t)v140, v11, v145, 0, 0);
  v17 = (void **)*((_QWORD *)&v142 + 1);
  if ((_DWORD)v11)
  {
    v18 = 0;
    v19 = v145;
    v20 = v144;
    v21 = *(_QWORD *)v140;
    if (v145 <= 1)
      v22 = 1;
    else
      v22 = v145;
    v23 = v141;
    do
    {
      if (v19)
      {
        v24 = 0;
        v25 = 0;
        v26 = *((_QWORD *)v17[(v20 + v18) / 0xAAuLL] + 3 * ((v20 + v18) % 0xAAuLL));
        do
        {
          *(_DWORD *)(v21 + 4 * v23 * (int)v18 + (v24 >> 30)) = *(_DWORD *)(v26 + 4 * v25++);
          v24 += 0x100000000;
        }
        while (v22 != v25);
      }
      ++v18;
    }
    while (v18 != v11);
  }
  v27 = (void **)v143;
  if ((void **)v143 == v17)
  {
    v27 = v17;
  }
  else
  {
    v28 = &v17[(unint64_t)v144 / 0xAA];
    v29 = (unint64_t)*v28;
    v30 = (unint64_t)*v28 + 24 * ((unint64_t)v144 % 0xAA);
    v31 = (unint64_t)v17[(*((_QWORD *)&v144 + 1) + (_QWORD)v144) / 0xAAuLL]
        + 24 * ((*((_QWORD *)&v144 + 1) + (_QWORD)v144) % 0xAAuLL);
    if (v30 != v31)
    {
      do
      {
        v32 = *(void **)v30;
        if (*(_QWORD *)v30)
        {
          *(_QWORD *)(v30 + 8) = v32;
          operator delete(v32);
          v29 = (unint64_t)*v28;
        }
        v30 += 24;
        if (v30 - v29 == 4080)
        {
          v33 = (unint64_t)v28[1];
          ++v28;
          v29 = v33;
          v30 = v33;
        }
      }
      while (v30 != v31);
      v17 = (void **)*((_QWORD *)&v142 + 1);
      v27 = (void **)v143;
    }
  }
  *((_QWORD *)&v144 + 1) = 0;
  v34 = (char *)v27 - (char *)v17;
  if ((unint64_t)((char *)v27 - (char *)v17) >= 0x11)
  {
    do
    {
      operator delete(*v17);
      v17 = (void **)(*((_QWORD *)&v142 + 1) + 8);
      *((_QWORD *)&v142 + 1) = v17;
      v34 = v143 - (_QWORD)v17;
    }
    while ((_QWORD)v143 - (_QWORD)v17 > 0x10uLL);
  }
  if (v34 >> 3 == 1)
  {
    v35 = 85;
  }
  else
  {
    if (v34 >> 3 != 2)
      goto LABEL_35;
    v35 = 170;
  }
  *(_QWORD *)&v144 = v35;
LABEL_35:
  if (*(_QWORD *)(a1 + 528))
  {
    memset(&__v[8], 0, 33);
    *(_QWORD *)__v = &unk_1E5D34170;
    kaldi::CuMatrix<float>::operator=((int32x2_t *)__v, v140);
    v149 = 0u;
    *(_OWORD *)&v148.__ct_ = 0u;
    v148.__loc_.__locale_ = (std::locale::__imp *)&unk_1E5D34170;
    v150 = 0;
    kaldi::nnet1::Nnet::Feedforward(*(uint64_t **)(a1 + 528), (uint64_t)__v, (int32x2_t *)&v148, -1, 0);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, std::regex_traits<char> *))(**(_QWORD **)(a1 + 544) + 32))(&v137, *(_QWORD *)(a1 + 544), &v148);
    v36 = v137;
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v148);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)__v);
  }
  else
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, int *))(**(_QWORD **)(a1 + 544) + 40))(__v, *(_QWORD *)(a1 + 544), v140);
    v36 = *(_QWORD *)__v;
  }
  v138 = 0;
  v137 = 0;
  v139 = 0;
  v37 = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<char const(&)[32],kaldi::quasar::ComputeEngineBufferItf&>(&v137, "SeevaModel/__QNNI__source_input", v36);
  v38 = *(_QWORD *)(a1 + 544);
  v138 = v37;
  memset(v136, 0, sizeof(v136));
  std::string::basic_string[abi:ne180100]<0>(&v148, "SeevaModel/__QNNO__prediction");
  memset(__v, 0, 24);
  __p = __v;
  LOBYTE(v134) = 0;
  *(_QWORD *)__v = operator new(0x18uLL);
  *(_QWORD *)&__v[8] = *(_QWORD *)__v;
  *(_QWORD *)&__v[16] = *(_QWORD *)__v + 24;
  *(_QWORD *)&__v[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__v[16], (__int128 *)&v148, &v149, *(std::string **)__v);
  v134 = 0;
  __p = 0;
  v135 = 0;
  (*(void (**)(uint64_t, uint64_t *, _BYTE *, void **, _QWORD *))(*(_QWORD *)v38 + 128))(v38, &v137, __v, &__p, v136);
  v132.__begin_ = (std::vector<std::string>::pointer)&__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v132);
  __p = __v;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v148.__col_) < 0)
    operator delete(v148.__loc_.__locale_);
  v134 = 0;
  __p = 0;
  v135 = 0;
  (*(void (**)(_QWORD, void **))(**(_QWORD **)v136[0] + 48))(*(_QWORD *)v136[0], &__p);
  v113 = v10;
  v114 = a3;
  std::vector<std::string>::vector(&v132, 1uLL);
  v39 = (unsigned int *)__p;
  v117 = v134;
  if (__p != v134)
  {
    v116 = 1;
    do
    {
      if (*v39 == *(_DWORD *)(a1 + 520))
        break;
      Word = kaldi::quasar::Vocab::GetWord(*(kaldi::quasar::Vocab **)(a1 + 536), *v39);
      if (*(char *)(Word + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v131, *(const std::string::value_type **)Word, *(_QWORD *)(Word + 8));
      }
      else
      {
        v41 = *(_OWORD *)Word;
        v131.__r_.__value_.__r.__words[2] = *(_QWORD *)(Word + 16);
        *(_OWORD *)&v131.__r_.__value_.__l.__data_ = v41;
      }
      size = HIBYTE(v131.__r_.__value_.__r.__words[2]);
      v43 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
      if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        v44 = &v131;
      }
      else
      {
        size = v131.__r_.__value_.__l.__size_;
        v44 = (std::string *)v131.__r_.__value_.__r.__words[0];
      }
      if (size >= 4)
      {
        v45 = (char *)v44 + size;
        v46 = v44;
        do
        {
          v47 = (char *)memchr(v46, 126, size - 3);
          if (!v47)
            break;
          if (*(_DWORD *)v47 == 808482686)
          {
            if (v47 == v45)
              break;
            v48 = v47 - (char *)v44;
            if (v47 - (char *)v44 != -1)
            {
              do
              {
                if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v49 = &v131;
                else
                  v49 = (std::string *)v131.__r_.__value_.__r.__words[0];
                std::string::__init_with_size[abi:ne180100]<char *,char *>(&v148, (char *)v49, (char *)v49 + v48, v48);
                if (SHIBYTE(v148.__col_) >= 0)
                  locale = (const std::string::value_type *)&v148;
                else
                  locale = (const std::string::value_type *)v148.__loc_.__locale_;
                if (SHIBYTE(v148.__col_) >= 0)
                  col_high = HIBYTE(v148.__col_);
                else
                  col_high = (std::string::size_type)v148.__ct_;
                std::string::append(v132.__end_ - 1, locale, col_high);
                end = v132.__end_;
                if (v132.__end_ >= v132.__end_cap_.__value_)
                {
                  v54 = 0xAAAAAAAAAAAAAAABLL * (((char *)v132.__end_ - (char *)v132.__begin_) >> 3);
                  v55 = v54 + 1;
                  if (v54 + 1 > 0xAAAAAAAAAAAAAAALL)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  if (0x5555555555555556 * (((char *)v132.__end_cap_.__value_ - (char *)v132.__begin_) >> 3) > v55)
                    v55 = 0x5555555555555556 * (((char *)v132.__end_cap_.__value_ - (char *)v132.__begin_) >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * (((char *)v132.__end_cap_.__value_ - (char *)v132.__begin_) >> 3) >= 0x555555555555555)
                    v56 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v56 = v55;
                  *(_QWORD *)&__v[32] = &v132.__end_cap_;
                  if (v56)
                    v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v132.__end_cap_, v56);
                  else
                    v57 = 0;
                  v58 = &v57[24 * v54];
                  *(_QWORD *)__v = v57;
                  *(_QWORD *)&__v[8] = v58;
                  *(_QWORD *)&__v[24] = &v57[24 * v56];
                  *(_QWORD *)v58 = 0;
                  *((_QWORD *)v58 + 1) = 0;
                  *((_QWORD *)v58 + 2) = 0;
                  *(_QWORD *)&__v[16] = v58 + 24;
                  std::vector<std::string>::__swap_out_circular_buffer(&v132, (std::__split_buffer<std::string> *)__v);
                  v53 = v132.__end_;
                  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
                }
                else
                {
                  v132.__end_->__r_.__value_.__l.__data_ = 0;
                  end->__r_.__value_.__l.__size_ = 0;
                  v53 = end + 1;
                  end->__r_.__value_.__r.__words[2] = 0;
                }
                v132.__end_ = v53;
                std::string::erase(&v131, 0, v48 + 4);
                v59 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
                if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                {
                  v60 = &v131;
                }
                else
                {
                  v59 = v131.__r_.__value_.__l.__size_;
                  v60 = (std::string *)v131.__r_.__value_.__r.__words[0];
                }
                v61 = (char *)v60 + v59;
                if (v59 >= 4)
                {
                  v62 = v60;
                  do
                  {
                    v63 = memchr(v62, 126, v59 - 3);
                    if (!v63)
                      break;
                    v64 = (char *)v63;
                    if (*v63 == 808482686)
                      goto LABEL_87;
                    v62 = (std::string *)((char *)v63 + 1);
                    v59 = v61 - (v64 + 1);
                  }
                  while (v59 > 3);
                }
                v64 = v61;
LABEL_87:
                if (SHIBYTE(v148.__col_) < 0)
                  operator delete(v148.__loc_.__locale_);
                if (v64 == v61)
                  break;
                v48 = v64 - (char *)v60;
              }
              while (v48 != -1);
              v43 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
            }
            if (v43 < 0)
              goto LABEL_102;
            goto LABEL_93;
          }
          v46 = (std::string *)(v47 + 1);
          size = v45 - (char *)v46;
        }
        while (v45 - (char *)v46 >= 4);
      }
      if (v43 < 0)
      {
LABEL_102:
        v67 = v131.__r_.__value_.__l.__size_;
        if (v131.__r_.__value_.__l.__size_ == 3)
        {
          if (*(_WORD *)v131.__r_.__value_.__l.__data_ == 29500
            && *(_BYTE *)(v131.__r_.__value_.__r.__words[0] + 2) == 62)
          {
            goto LABEL_126;
          }
          v67 = v131.__r_.__value_.__l.__size_;
        }
        else if (v131.__r_.__value_.__l.__size_ == 5
               && *(_DWORD *)v131.__r_.__value_.__l.__data_ == 1668313916
               && *(_BYTE *)(v131.__r_.__value_.__r.__words[0] + 4) == 62)
        {
          goto LABEL_126;
        }
        if (v67 == 4)
        {
          if (*(_DWORD *)v131.__r_.__value_.__l.__data_ == 1047736124)
            goto LABEL_126;
          v67 = v131.__r_.__value_.__l.__size_;
        }
        if (v67 != 5)
          goto LABEL_133;
        v66 = (std::string *)v131.__r_.__value_.__r.__words[0];
      }
      else
      {
LABEL_93:
        if (v43 == 3)
        {
          if (LOWORD(v131.__r_.__value_.__l.__data_) == 29500 && v131.__r_.__value_.__s.__data_[2] == 62)
          {
LABEL_126:
            if ((v116 & 1) == 0)
            {
              v73 = v132.__end_;
              if (v132.__end_ >= v132.__end_cap_.__value_)
              {
                v84 = 0xAAAAAAAAAAAAAAABLL * (((char *)v132.__end_ - (char *)v132.__begin_) >> 3);
                v85 = v84 + 1;
                if (v84 + 1 > 0xAAAAAAAAAAAAAAALL)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                if (0x5555555555555556 * (((char *)v132.__end_cap_.__value_ - (char *)v132.__begin_) >> 3) > v85)
                  v85 = 0x5555555555555556 * (((char *)v132.__end_cap_.__value_ - (char *)v132.__begin_) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v132.__end_cap_.__value_ - (char *)v132.__begin_) >> 3) >= 0x555555555555555)
                  v86 = 0xAAAAAAAAAAAAAAALL;
                else
                  v86 = v85;
                *(_QWORD *)&__v[32] = &v132.__end_cap_;
                if (v86)
                  v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v132.__end_cap_, v86);
                else
                  v87 = 0;
                v88 = &v87[24 * v84];
                *(_QWORD *)__v = v87;
                *(_QWORD *)&__v[8] = v88;
                *(_QWORD *)&__v[24] = &v87[24 * v86];
                *(_QWORD *)v88 = 0;
                *((_QWORD *)v88 + 1) = 0;
                *((_QWORD *)v88 + 2) = 0;
                *(_QWORD *)&__v[16] = v88 + 24;
                std::vector<std::string>::__swap_out_circular_buffer(&v132, (std::__split_buffer<std::string> *)__v);
                v74 = v132.__end_;
                std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
              }
              else
              {
                v132.__end_->__r_.__value_.__l.__data_ = 0;
                v73->__r_.__value_.__l.__size_ = 0;
                v74 = v73 + 1;
                v73->__r_.__value_.__r.__words[2] = 0;
              }
              v132.__end_ = v74;
            }
            v116 = 1;
            goto LABEL_166;
          }
          goto LABEL_133;
        }
        if (v43 == 4)
        {
          if (LODWORD(v131.__r_.__value_.__l.__data_) == 1047736124)
            goto LABEL_126;
LABEL_133:
          std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](&v148, "@[^#]*#|#[^@]*@", 0);
          v76 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
          if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v77 = (__int32 *)&v131;
          else
            v77 = (__int32 *)v131.__r_.__value_.__r.__words[0];
          if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v76 = v131.__r_.__value_.__l.__size_;
          v121 = 0;
          v122 = 0;
          v123 = 0;
          v124 = 0;
          v125 = 0;
          v126 = 0;
          v127 = 0;
          v128 = 0;
          memset(__v, 0, sizeof(__v));
          v78 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(v77, (__int32 *)((char *)v77 + v76), (uint64_t)__v, (uint64_t)&v148, 0);
          if (*(_QWORD *)__v)
          {
            *(_QWORD *)&__v[8] = *(_QWORD *)__v;
            operator delete(*(void **)__v);
          }
          if ((v78 & 1) == 0)
          {
            if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v79 = &v131;
            else
              v79 = (std::string *)v131.__r_.__value_.__r.__words[0];
            if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v80 = HIBYTE(v131.__r_.__value_.__r.__words[2]);
            else
              v80 = v131.__r_.__value_.__l.__size_;
            std::string::append(v132.__end_ - 1, (const std::string::value_type *)v79, v80);
            v116 = 0;
          }
          v81 = v151;
          if (v151)
          {
            v82 = (unint64_t *)&v151->__shared_owners_;
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
          std::locale::~locale(&v148.__loc_);
          goto LABEL_166;
        }
        if (v43 != 5)
          goto LABEL_133;
        if (LODWORD(v131.__r_.__value_.__l.__data_) == 1668313916 && v131.__r_.__value_.__s.__data_[4] == 62)
          goto LABEL_126;
        v66 = &v131;
      }
      data = (int)v66->__r_.__value_.__l.__data_;
      v71 = v66->__r_.__value_.__s.__data_[4];
      if (data != 1802401084 || v71 != 62)
        goto LABEL_133;
LABEL_166:
      if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v131.__r_.__value_.__l.__data_);
      ++v39;
    }
    while (v39 != v117);
  }
  std::vector<std::vector<quasar::Token>>::vector(&v148, 1uLL);
  begin = v132.__begin_;
  for (i = v132.__end_; begin != i; ++begin)
  {
    v91 = v148.__loc_.__locale_;
    LODWORD(v131.__r_.__value_.__l.__data_) = 0;
    v130 = 0;
    *(_QWORD *)__v = 0x3FF0000000000000;
    v129 = 0;
    v92 = *((_QWORD *)v148.__loc_.__locale_ + 1);
    if (v92 >= *((_QWORD *)v148.__loc_.__locale_ + 2))
    {
      v93 = std::vector<quasar::Token>::__emplace_back_slow_path<std::string,int,int,int,double,BOOL>((uint64_t *)v148.__loc_.__locale_, (uint64_t)begin, (int *)&v131, (int *)&v130 + 1, (int *)&v130, (double *)__v, &v129);
    }
    else
    {
      std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int,int,int,double,BOOL>((uint64_t)v148.__loc_.__locale_ + 16, *((std::string **)v148.__loc_.__locale_ + 1), (uint64_t)begin, (int *)&v131, (int *)&v130 + 1, (int *)&v130, (double *)__v, &v129);
      v93 = v92 + 224;
      *((_QWORD *)v91 + 1) = v92 + 224;
    }
    *((_QWORD *)v91 + 1) = v93;
  }
  v94 = operator new(8uLL);
  v131.__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
  *v94 = 0x40C3878000000000;
  v131.__r_.__value_.__l.__size_ = (std::string::size_type)(v94 + 1);
  v131.__r_.__value_.__r.__words[2] = (std::string::size_type)(v94 + 1);
  v95 = *(_DWORD *)(*(_QWORD *)a4 + 8);
  quasar::RecogResult::RecogResult((quasar::RecogResult *)__v);
  v96 = *(std::__shared_weak_count **)(*(_QWORD *)a4 + 32);
  v118 = *(_QWORD *)(*(_QWORD *)a4 + 24);
  v119 = v96;
  if (v96)
  {
    v97 = (unint64_t *)&v96->__shared_owners_;
    do
      v98 = __ldxr(v97);
    while (__stxr(v98 + 1, v97));
  }
  v99 = quasar::RecogResult::setParams((uint64_t)__v, &v118);
  v100 = quasar::Token::resetSpacing((uint64_t **)&v148);
  v101 = quasar::RecogResult::setResultChoices(v99, (uint64_t)v100);
  v102 = (_QWORD *)quasar::RecogResult::setResultCosts(v101, (uint64_t)&v131);
  v103 = quasar::RecogResult::setLmeStatus(v102, (uint64_t *)(*v114 + 584));
  started = quasar::RecogResult::setUtteranceStartMillis((uint64_t)v103, v95 * v113);
  quasar::RecogResult::setUtteranceDurationMillis(started, v11 * v113);
  v105 = v119;
  if (v119)
  {
    v106 = (unint64_t *)&v119->__shared_owners_;
    do
      v107 = __ldaxr(v106);
    while (__stlxr(v107 - 1, v106));
    if (!v107)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
  (*(void (**)(_QWORD, _BYTE *, uint64_t))(**(_QWORD **)(*v114 + 560) + 40))(*(_QWORD *)(*v114 + 560), __v, 1);
  v108 = *v114;
  *(_DWORD *)(v108 + 576) = v11;
  *(_WORD *)(v108 + 580) = 257;
  quasar::RecogResult::~RecogResult((quasar::RecogResult *)__v);
  if (v131.__r_.__value_.__r.__words[0])
  {
    v131.__r_.__value_.__l.__size_ = v131.__r_.__value_.__r.__words[0];
    operator delete(v131.__r_.__value_.__l.__data_);
  }
  *(_QWORD *)__v = &v148;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
  *(_QWORD *)__v = &v132;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
  if (__p)
  {
    v134 = (unsigned int *)__p;
    operator delete(__p);
  }
  *(_QWORD *)__v = v136;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
  *(_QWORD *)__v = &v137;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  kaldi::Matrix<float>::~Matrix((uint64_t)v140);
  std::deque<std::vector<int>>::~deque[abi:ne180100](&v142);
  v109 = v147;
  if (v147)
  {
    v110 = (unint64_t *)&v147->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  return 0;
}

void sub_1ADF264FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::Matrix<float>::~Matrix((uint64_t)&STACK[0x258]);
  std::deque<std::vector<int>>::~deque[abi:ne180100]((_QWORD *)(v1 - 240));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 - 184);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::vector<float>>::emplace_back<int const&,int>(_QWORD *a1, int *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  float v19;

  v6 = a1[1];
  v7 = a1[2];
  v8 = 170 * ((v7 - v6) >> 3) - 1;
  if (v7 == v6)
    v8 = 0;
  if (v8 == a1[5] + a1[4])
  {
    std::deque<std::vector<float>>::__add_back_capacity(a1);
    v6 = a1[1];
    v7 = a1[2];
  }
  if (v7 == v6)
  {
    v10 = 0;
  }
  else
  {
    v9 = a1[5] + a1[4];
    v10 = (_QWORD *)(*(_QWORD *)(v6 + 8 * (v9 / 0xAA)) + 24 * (v9 % 0xAA));
  }
  v11 = *a2;
  v19 = (float)*a3;
  std::vector<float>::vector(v10, v11, &v19);
  v12 = a1[4];
  v13 = a1[5] + 1;
  a1[5] = v13;
  v14 = v12 + v13;
  v15 = a1[1];
  v16 = (_QWORD *)(v15 + 8 * (v14 / 0xAA));
  v17 = *v16 + 24 * (v14 % 0xAA);
  if (a1[2] == v15)
    v17 = 0;
  if (v17 == *v16)
    v17 = *(v16 - 1) + 4080;
  return v17 - 24;
}

uint64_t quasar::SeevaGreedyDecoder::affectsRecognitionResults(quasar::SeevaGreedyDecoder *this)
{
  return 1;
}

void std::default_delete<kaldi::quasar::Vocab>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  if (a2)
  {
    v3 = *(void **)(a2 + 144);
    if (v3)
    {
      *(_QWORD *)(a2 + 152) = v3;
      operator delete(v3);
    }
    v4 = (void **)(a2 + 120);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2 + 80);
    if (*(char *)(a2 + 79) < 0)
      operator delete(*(void **)(a2 + 56));
    if (*(char *)(a2 + 55) < 0)
      operator delete(*(void **)(a2 + 32));
    if (*(char *)(a2 + 31) < 0)
      operator delete(*(void **)(a2 + 8));
    MEMORY[0x1AF44D190](a2, 0x10B2C40DBFC2194);
  }
}

uint64_t std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<char const(&)[32],kaldi::quasar::ComputeEngineBufferItf&>(uint64_t *a1, char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = &v12[32 * v5];
  v17 = v16;
  v18 = &v12[32 * v11];
  std::string::basic_string[abi:ne180100]<0>(v16, a2)[3] = a3;
  v17 += 32;
  std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(a1, &v15);
  v13 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v15);
  return v13;
}

void sub_1ADF269B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::Token>::__emplace_back_slow_path<std::string,int,int,int,double,BOOL>(uint64_t *a1, uint64_t a2, int *a3, int *a4, int *a5, double *a6, unsigned __int8 *a7)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v20;
  std::string *v21;
  std::string::value_type *v22;
  char *v23;
  uint64_t *v24;

  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) > 0x124924924924924)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5) > v9)
    v9 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492)
    v16 = 0x124924924924924;
  else
    v16 = v9;
  v24 = a1 + 2;
  if (v16)
    v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)(a1 + 2), v16);
  else
    v17 = 0;
  v20 = v17;
  v21 = (std::string *)&v17[224 * v8];
  v23 = &v17[224 * v16];
  std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int,int,int,double,BOOL>((uint64_t)(a1 + 2), v21, a2, a3, a4, a5, a6, a7);
  v22 = &v21[9].__r_.__value_.__s.__data_[8];
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v20);
  v18 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v20);
  return v18;
}

void sub_1ADF26B18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string,int,int,int,double,BOOL>(uint64_t a1, std::string *a2, uint64_t a3, int *a4, int *a5, int *a6, double *a7, unsigned __int8 *a8)
{
  int v9;
  int v10;
  int v11;
  double v12;
  int v13;
  float v14;
  void *__p[2];
  char v16;
  __int128 *v17[3];
  void *v18[2];
  char v19;
  void *v20[2];
  char v21;
  __int128 v22;
  uint64_t v23;

  v22 = *(_OWORD *)a3;
  v23 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v9 = *a4;
  v10 = *a5;
  v11 = *a6;
  v12 = *a7;
  v13 = *a8;
  std::string::basic_string[abi:ne180100]<0>(v20, "");
  std::string::basic_string[abi:ne180100]<0>(v18, "");
  memset(v17, 0, sizeof(v17));
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v14 = v12;
  quasar::Token::Token(a2, &v22, v9, v10, v11, v13 != 0, 0, (__int128 *)v20, v14, (__int128 *)v18, v17, 0, (__int128 *)__p, 0, 0);
  if (v16 < 0)
    operator delete(__p[0]);
  __p[0] = v17;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v19 < 0)
    operator delete(v18[0]);
  if (v21 < 0)
    operator delete(v20[0]);
  if (SHIBYTE(v23) < 0)
    operator delete((void *)v22);
}

void sub_1ADF26C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a20 < 0)
    operator delete(__p);
  __p = &a21;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a29 < 0)
    operator delete(a24);
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v35 - 89) < 0)
    operator delete(*(void **)(v35 - 112));
  _Unwind_Resume(a1);
}

BOOL quasar::operator==(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void sub_1ADF26F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::join<std::vector<quasar::AlternativeSelectionSpan::Alternative>>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v6);
  quasar::joinToStream<std::vector<quasar::AlternativeSelectionSpan::Alternative>>(v7, a1, a2);
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v7[0] = v4;
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v9);
}

void sub_1ADF27014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1ADF2713C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::ostream & quasar::`anonymous namespace'::operator<<<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>(std::ostream &,std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription> const&)::{lambda(quasar::AlternativeSelectionSpan::Alternative::GenderDescription&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription> const&>(_QWORD ***a1, _DWORD *a2)
{
  return quasar::operator<<(**a1, a2);
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::ostream & quasar::`anonymous namespace'::operator<<<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>(std::ostream &,std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription> const&)::{lambda(quasar::AlternativeSelectionSpan::Alternative::GenderDescription&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription> const&>(_QWORD ***a1, uint64_t a2)
{
  return quasar::operator<<(**a1, a2);
}

_QWORD *quasar::joinToStream<std::vector<quasar::AlternativeSelectionSpan::Alternative>>(_QWORD *result, uint64_t **a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  _QWORD *v6;
  char v7;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v6 = result;
    v7 = 1;
    do
    {
      if ((v7 & 1) == 0)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *a3, a3[1]);
      result = quasar::operator<<(v6, v3);
      v7 = 0;
      v3 += 3;
    }
    while (v3 != v4);
  }
  return result;
}

id EARHelpers::VectorToArray<quasar::AppLmData::Oov,_EAROovToken * (*)(quasar::AppLmData::Oov const&)>(__int128 **a1, void (*a2)(std::string *))
{
  void *v4;
  __int128 *v5;
  __int128 *v6;
  __int128 v7;
  void *v8;
  void *v9;
  std::string __p;
  uint64_t v12[3];
  int v13;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *a1;
  v6 = a1[1];
  if (*a1 != v6)
  {
    do
    {
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v7 = *v5;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
      }
      std::set<std::string>::set[abi:ne180100](v12, (const void ***)v5 + 3);
      v13 = *((_DWORD *)v5 + 12);
      a2(&__p);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "addObject:", v8);

      std::__tree<std::string>::destroy((uint64_t)v12, (char *)v12[1]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v5 = (__int128 *)((char *)v5 + 56);
    }
    while (v5 != v6);
  }
  v9 = (void *)objc_msgSend(v4, "copy", __p.__r_.__value_.__r.__words[0], __p.__r_.__value_.__l.__size_, __p.__r_.__value_.__r.__words[2]);

  return v9;
}

void sub_1ADF273D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

_EAROovToken *_earOovTokenFromAppLmDataOov(const quasar::AppLmData::Oov *a1)
{
  _EAROovToken *v2;
  int v3;
  const quasar::AppLmData::Oov *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  _EAROovToken *v8;

  v2 = [_EAROovToken alloc];
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = a1;
  else
    v4 = *(const quasar::AppLmData::Oov **)a1;
  if (v3 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = *((_QWORD *)a1 + 1);
  objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  EARHelpers::ContainerToNSSet<std::set<std::string>>((_QWORD *)a1 + 3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[_EAROovToken initWithOrthography:prons:frequency:](v2, "initWithOrthography:prons:frequency:", v6, v7, *((unsigned int *)a1 + 12));

  return v8;
}

void sub_1ADF274B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1ADF27608(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1ADF27918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

void sub_1ADF27B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1ADF27DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9, char a10)
{
  void *v10;
  void *v11;
  void *v12;

  objc_destroyWeak(&a9);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1ADF28070(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__14(uint64_t a1)
{

}

void sub_1ADF28204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::SyncPSRAudioProcessor,std::allocator<quasar::SyncPSRAudioProcessor>,quasar::SystemConfig &,std::string,unsigned long &,BOOL &,long &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned int *a3@<X3>, unsigned __int8 *a4@<X4>, unsigned int *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _QWORD *result;

  v12 = operator new(0xA8uLL);
  result = std::__shared_ptr_emplace<quasar::SyncPSRAudioProcessor>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string,unsigned long &,BOOL &,long &,std::allocator<quasar::SyncPSRAudioProcessor>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1ADF284B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::SyncPSRAudioProcessor>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string,unsigned long &,BOOL &,long &,std::allocator<quasar::SyncPSRAudioProcessor>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned __int8 *a5, unsigned int *a6)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43B40;
  a1[1] = 0;
  quasar::SyncPSRAudioProcessor::SyncPSRAudioProcessor(a1 + 3, a2, a3, *a4, *a5, *a6);
  return a1;
}

void sub_1ADF28510(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::PDecEngineBlockMixin::getPhraseBookMode(uint64_t **a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD *v11;
  _OWORD v13[17];

  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    v1 = *((unsigned __int8 *)a1 + 23);
    switch(*((_BYTE *)a1 + 23))
    {
      case 0:
        return v1;
      case 1:
      case 2:
      case 3:
      case 5:
      case 6:
        goto LABEL_33;
      case 4:
        if (*(_DWORD *)a1 == 1752461154)
          return 2;
        goto LABEL_33;
      case 7:
        if (*(_DWORD *)a1 != 1634953572 || *(_DWORD *)((char *)a1 + 3) != 1701601889)
          goto LABEL_33;
        return 1;
      case 8:
        v8 = (uint64_t)*a1;
        goto LABEL_30;
      default:
        v4 = (uint64_t *)a1;
        if ((_DWORD)v1 == 16)
          goto LABEL_16;
        goto LABEL_33;
    }
  }
  v2 = a1[1];
  v1 = 0;
  switch((unint64_t)v2)
  {
    case 0uLL:
      return v1;
    case 4uLL:
      if (*(_DWORD *)*a1 == 1752461154)
        return 2;
      if (v2 != (uint64_t *)7)
        goto LABEL_13;
LABEL_8:
      if (*(_DWORD *)*a1 == 1634953572 && *(_DWORD *)((char *)*a1 + 3) == 1701601889)
        return 1;
      v2 = a1[1];
LABEL_13:
      if (v2 != (uint64_t *)16)
        goto LABEL_33;
      v4 = *a1;
LABEL_16:
      v5 = *v4;
      v6 = v4[1];
      if (v5 != 0x625F657361726870 || v6 != 0x796C6E6F5F6B6F6FLL)
      {
LABEL_33:
        memset(v13, 0, sizeof(v13));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"unknown phrase-book-mode: ", 26);
        std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, (uint64_t)a1);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v13);
      }
      return 3;
    case 7uLL:
      goto LABEL_8;
    case 8uLL:
      v8 = **a1;
LABEL_30:
      if (v8 != 0x6B6361626C6C6166)
        goto LABEL_33;
      return 0;
    default:
      goto LABEL_13;
  }
}

uint64_t quasar::PDecEngineBlockMixin::getLmModeFromStr(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v5;
  uint64_t v7;
  int v8;
  _QWORD *v13;
  _OWORD v15[17];

  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    v1 = *((unsigned __int8 *)a1 + 23);
    switch(*((_BYTE *)a1 + 23))
    {
      case 4:
        if (*(_DWORD *)a1 != 1701736302)
          goto LABEL_55;
        return 0;
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
        goto LABEL_55;
      case 0xA:
        if (*a1 != 0x7461726765746E69 || *((_WORD *)a1 + 4) != 25701)
          goto LABEL_55;
        return 1;
      case 0xB:
        if (*a1 != 0x5F65726F63736572 || *(_QWORD *)((char *)a1 + 3) != 0x6570625F65726F63)
          goto LABEL_55;
        return 3;
      case 0xC:
        if (*a1 == 0x5F65726F63736572 && *((_DWORD *)a1 + 2) == 1685221239)
          return 4;
        v5 = a1;
        if ((_DWORD)v1 == 12)
          goto LABEL_35;
        goto LABEL_55;
      default:
        if (*((_BYTE *)a1 + 23))
          goto LABEL_55;
        return v1;
    }
  }
  v1 = a1[1];
  if (v1)
  {
    if (v1 == 4 && *(_DWORD *)*a1 == 1701736302)
    {
      return 0;
    }
    else
    {
      if (v1 == 10)
      {
        if (*(_QWORD *)*a1 == 0x7461726765746E69 && *(_WORD *)(*a1 + 8) == 25701)
          return 1;
        v1 = a1[1];
      }
      if (v1 == 11)
      {
        if (*(_QWORD *)*a1 == 0x5F65726F63736572 && *(_QWORD *)(*a1 + 3) == 0x6570625F65726F63)
          return 3;
        v1 = a1[1];
      }
      if (v1 != 12)
        goto LABEL_55;
      if (*(_QWORD *)*a1 == 0x5F65726F63736572 && *(_DWORD *)(*a1 + 8) == 1685221239)
      {
        return 4;
      }
      else
      {
        if (a1[1] != 12)
          goto LABEL_55;
        v5 = (_QWORD *)*a1;
LABEL_35:
        v7 = *v5;
        v8 = *((_DWORD *)v5 + 2);
        if (v7 != 0x5F6C616974726170 || v8 != 1935763810)
        {
LABEL_55:
          memset(v15, 0, sizeof(v15));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
          v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"unknown lm-mode: ", 17);
          std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v13, (uint64_t)a1);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v15);
        }
        return 5;
      }
    }
  }
  return v1;
}

uint64_t quasar::PDecEngineBlockMixin::getNormalizationMode(uint64_t a1, char a2)
{
  int v2;
  _DWORD *v3;
  uint64_t v5;
  uint64_t v8;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v2 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (v5 == 3 && **(_WORD **)a1 == 26223 && *(_BYTE *)(*(_QWORD *)a1 + 2) == 102)
    {
      v8 = 0;
      goto LABEL_25;
    }
    if (v5 == 6)
    {
      if (**(_DWORD **)a1 == 1735288172 && *(_WORD *)(*(_QWORD *)a1 + 4) == 26740)
      {
        if ((a2 & 1) == 0)
          return 1;
        goto LABEL_38;
      }
      v5 = *(_QWORD *)(a1 + 8);
    }
    if (v5 != 4)
    {
LABEL_48:
      v13 = a1;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v14 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"unknown 'norm-mode': ", 21);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, v13);
      goto LABEL_50;
    }
    v3 = *(_DWORD **)a1;
LABEL_23:
    if (*v3 == 1953328743)
    {
      v8 = 2;
      goto LABEL_25;
    }
    goto LABEL_48;
  }
  if (v2 == 3)
  {
    if (*(_WORD *)a1 != 26223 || *(_BYTE *)(a1 + 2) != 102)
      goto LABEL_48;
    if ((a2 & 1) != 0)
    {
LABEL_40:
      if (*(_WORD *)a1 != 26223 || *(_BYTE *)(a1 + 2) != 102)
        goto LABEL_49;
      return 1;
    }
    return 0;
  }
  v3 = (_DWORD *)a1;
  if (v2 == 4)
    goto LABEL_23;
  if (v2 != 6)
    goto LABEL_48;
  if (*(_DWORD *)a1 != 1735288172 || *(_WORD *)(a1 + 4) != 26740)
    goto LABEL_48;
  v8 = 1;
LABEL_25:
  if ((a2 & 1) != 0)
  {
    if ((v2 & 0x80) == 0)
    {
      if (v2 != 3)
        goto LABEL_49;
      goto LABEL_40;
    }
LABEL_38:
    if (*(_QWORD *)(a1 + 8) != 3)
    {
LABEL_49:
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v14 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v14, "specifying both 'norm-cost' (old parameter name) and 'norm-mode' (new name) at the same time is not allowed.");
LABEL_50:
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v14);
    }
    a1 = *(_QWORD *)a1;
    goto LABEL_40;
  }
  return v8;
}

uint64_t quasar::PDecEngineBlockMixin::getStopMode(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v9;
  _OWORD v11[17];

  if (*(char *)(a1 + 23) < 0)
  {
    v1 = *(_QWORD *)(a1 + 8);
    if (!v1)
      return v1;
    if (v1 == 4)
    {
      if (**(_DWORD **)a1 == 1953719650)
        return 1;
      v1 = *(_QWORD *)(a1 + 8);
    }
    else if (v1 == 5 && **(_DWORD **)a1 == 1634034286 && *(_BYTE *)(*(_QWORD *)a1 + 4) == 109)
    {
      return 0;
    }
    if (v1 != 14)
      goto LABEL_35;
    v3 = *(uint64_t **)a1;
    goto LABEL_21;
  }
  v1 = *(unsigned __int8 *)(a1 + 23);
  if (*(unsigned __int8 *)(a1 + 23) > 4u)
  {
    if ((_DWORD)v1 != 5)
    {
      v3 = (uint64_t *)a1;
      if ((_DWORD)v1 != 14)
        goto LABEL_35;
LABEL_21:
      v4 = *v3;
      v5 = *(uint64_t *)((char *)v3 + 6);
      if (v4 == 0x64656873696E6966 && v5 == 0x65726F63735F6465)
        return 2;
LABEL_35:
      memset(v11, 0, sizeof(v11));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"unknown stop-mode: ", 19);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, a1);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v11);
    }
    if (*(_DWORD *)a1 != 1634034286 || *(_BYTE *)(a1 + 4) != 109)
      goto LABEL_35;
    return 0;
  }
  if (*(_BYTE *)(a1 + 23))
  {
    if ((_DWORD)v1 != 4 || *(_DWORD *)a1 != 1953719650)
      goto LABEL_35;
    return 1;
  }
  return v1;
}

_QWORD *quasar::PDecOptions::options@<X0>(quasar::PDecOptions *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = operator new(0x78uLL);
  a2[2] = result + 15;
  *result = (char *)this + 16;
  result[1] = (char *)this + 176;
  result[2] = (char *)this + 320;
  result[3] = (char *)this + 480;
  result[4] = (char *)this + 640;
  result[5] = (char *)this + 784;
  result[6] = (char *)this + 944;
  result[7] = (char *)this + 1088;
  result[8] = (char *)this + 1248;
  result[9] = (char *)this + 1408;
  result[10] = (char *)this + 1696;
  result[11] = (char *)this + 1552;
  result[12] = (char *)this + 1856;
  result[13] = (char *)this + 2016;
  result[14] = (char *)this + 2176;
  *a2 = result;
  a2[1] = result + 15;
  return result;
}

void quasar::PDecEngineBlockMixin::createDecoder(uint64_t a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t *a9@<X8>, float a10@<S0>, float a11@<S1>, char a12, uint64_t a13, char a14, uint64_t *a15)
{
  _QWORD *v21;
  uint64_t v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  _QWORD *v26;
  uint64_t v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  _QWORD *v33;
  uint64_t v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t **v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t **v55;
  unint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  _BYTE v98[32];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  __int128 *v115;
  std::string *v116;
  unint64_t v117;
  char v118;
  int v119;
  float v120;
  int v121;
  float v122;
  int v123;
  void **v124[2];

  v123 = a6;
  v122 = a10;
  v121 = a7;
  v120 = a11;
  v119 = a8;
  v118 = a12;
  *a9 = 0;
  a9[1] = 0;
  v115 = 0;
  v116 = 0;
  v117 = 0;
  v116 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v115, (__int128 *)a4);
  v21 = a3 + 60;
  v22 = quasar::OptionValue<std::string>::value(a3 + 60);
  v23 = v116;
  if ((unint64_t)v116 >= v117)
  {
    v25 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v115, (__int128 *)v22);
  }
  else
  {
    if (*(char *)(v22 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v116, *(const std::string::value_type **)v22, *(_QWORD *)(v22 + 8));
    }
    else
    {
      v24 = *(_OWORD *)v22;
      v116->__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 16);
      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
    }
    v25 = v23 + 1;
  }
  v116 = v25;
  v26 = a3 + 98;
  v27 = quasar::OptionValue<std::string>::value(a3 + 98);
  v28 = v116;
  if ((unint64_t)v116 >= v117)
  {
    v30 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v115, (__int128 *)v27);
  }
  else
  {
    if (*(char *)(v27 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v116, *(const std::string::value_type **)v27, *(_QWORD *)(v27 + 8));
    }
    else
    {
      v29 = *(_OWORD *)v27;
      v116->__r_.__value_.__r.__words[2] = *(_QWORD *)(v27 + 16);
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
    }
    v30 = v28 + 1;
  }
  v116 = v30;
  if ((unint64_t)v30 >= v117)
  {
    v32 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v115, (__int128 *)a5);
  }
  else
  {
    if (*(char *)(a5 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v30, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
    }
    else
    {
      v31 = *(_OWORD *)a5;
      v30->__r_.__value_.__r.__words[2] = *(_QWORD *)(a5 + 16);
      *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
    }
    v32 = v30 + 1;
  }
  v116 = v32;
  v33 = a3 + 136;
  v34 = quasar::OptionValue<std::string>::value(a3 + 136);
  v35 = v116;
  if ((unint64_t)v116 >= v117)
  {
    v37 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v115, (__int128 *)v34);
  }
  else
  {
    if (*(char *)(v34 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v116, *(const std::string::value_type **)v34, *(_QWORD *)(v34 + 8));
    }
    else
    {
      v36 = *(_OWORD *)v34;
      v116->__r_.__value_.__r.__words[2] = *(_QWORD *)(v34 + 16);
      *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
    }
    v37 = v35 + 1;
  }
  v116 = v37;
  if (a2)
  {
    v38 = std::__tree<std::vector<std::string>>::find<std::vector<std::string>>((uint64_t)a2, (const void ***)&v115);
    v39 = v38;
    if (a2 + 1 != (uint64_t **)v38)
    {
      *(_OWORD *)v98 = 0uLL;
      v40 = *(std::__shared_weak_count **)(v38 + 64);
      if (v40)
      {
        *(_QWORD *)&v98[8] = std::__shared_weak_count::lock(v40);
        if (*(_QWORD *)&v98[8])
          *(_QWORD *)v98 = *(_QWORD *)(v39 + 56);
      }
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a9, (__int128 *)v98);
      v41 = *(std::__shared_weak_count **)&v98[8];
      if (*(_QWORD *)&v98[8])
      {
        v42 = (unint64_t *)(*(_QWORD *)&v98[8] + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
    }
  }
  if (!*a9)
  {
    v44 = quasar::OptionValue<std::string>::value(a3 + 2);
    v45 = *(char *)(v44 + 23);
    if (v45 < 0)
    {
      if (*(_QWORD *)(v44 + 8) != 5)
        goto LABEL_45;
      v44 = *(_QWORD *)v44;
    }
    else if (v45 != 5)
    {
      goto LABEL_45;
    }
    if (*(_DWORD *)v44 == 1684824427 && *(_BYTE *)(v44 + 4) == 105)
    {
      v54 = operator new();
      v55 = (uint64_t **)quasar::OptionValue<std::string>::value(a3 + 40);
      LODWORD(v124[0]) = quasar::PDecEngineBlockMixin::getPhraseBookMode(v55);
      v114 = 0;
      std::__variant_detail::__alt<0ul,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>>::__alt[abi:ne180100]<int &,float &,kaldi::quasar::NormalizationMode &,BOOL &,kaldi::quasar::PhraseBookMode &,kaldi::quasar::BPEMode &,kaldi::quasar::BPEMode &,quasar::OptionValue<BOOL> const&,quasar::OptionValue<BOOL> const&,float &,int &,quasar::OptionValue<BOOL> const&>(v54, &v123, &v120, &v119, &v118, (int *)v124, (int *)&v114 + 1, (int *)&v114, a3 + 118, a3 + 80, &v122, &v121, a3 + 350);
      *(_DWORD *)(v54 + 5888) = 0;
      std::shared_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>::shared_ptr[abi:ne180100]<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>,void>(v98, v54);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a9, (__int128 *)v98);
      v51 = *(std::__shared_weak_count **)&v98[8];
      if (!*(_QWORD *)&v98[8])
      {
LABEL_60:
        v57 = *(unsigned __int8 *)(a4 + 23);
        if ((v57 & 0x80u) != 0)
          v57 = *(_QWORD *)(a4 + 8);
        if (v57)
        {
          v58 = a1;
          v59 = *a9;
          v60 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value(a3 + 22);
          v61 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value(a3 + 332);
          v62 = a15[1];
          v96 = *a15;
          v97 = (std::__shared_weak_count *)v62;
          if (v62)
          {
            v63 = (unint64_t *)(v62 + 8);
            do
              v64 = __ldxr(v63);
            while (__stxr(v64 + 1, v63));
          }
          kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Read(v59, a4, v60 != 0, v61 != 0, 1, &v96);
          v65 = v97;
          a1 = v58;
          v26 = a3 + 98;
          v21 = a3 + 60;
          v33 = a3 + 136;
          if (v97)
          {
            p_shared_owners = (unint64_t *)&v97->__shared_owners_;
            do
              v67 = __ldaxr(p_shared_owners);
            while (__stlxr(v67 - 1, p_shared_owners));
            if (!v67)
            {
              ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
              std::__shared_weak_count::__release_weak(v65);
            }
          }
        }
        v68 = quasar::OptionValue<std::string>::value(v21);
        v69 = *(unsigned __int8 *)(v68 + 23);
        if ((v69 & 0x80u) != 0)
          v69 = *(_QWORD *)(v68 + 8);
        if (v69)
        {
          v70 = *a9;
          v71 = quasar::OptionValue<std::string>::value(v21);
          v72 = quasar::OptionValue<std::string>::value(v26);
          kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::ReadPronunciationModel(v70, v71, v72);
        }
        else
        {
          v73 = quasar::OptionValue<std::string>::value(v26);
          v74 = *(unsigned __int8 *)(v73 + 23);
          if ((v74 & 0x80u) != 0)
            v74 = *(_QWORD *)(v73 + 8);
          if (v74)
          {
            v75 = *a9;
            v76 = quasar::OptionValue<std::string>::value(v26);
            kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::SetICUScripts(v75, v76);
          }
        }
        v77 = *(unsigned __int8 *)(a5 + 23);
        if ((v77 & 0x80u) != 0)
          v77 = *(_QWORD *)(a5 + 8);
        if (v77)
          kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::ReadConfidenceModel(*a9, a5, 0, 1);
        v78 = quasar::OptionValue<std::string>::value(v33);
        v79 = *(unsigned __int8 *)(v78 + 23);
        if ((v79 & 0x80u) != 0)
          v79 = *(_QWORD *)(v78 + 8);
        if (v79)
        {
          v80 = *a9;
          v81 = quasar::OptionValue<std::string>::value(v33);
          kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::ReadInputHammer(v80, v81);
        }
        if (a2)
        {
          std::pair<std::vector<std::string>,std::shared_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>::pair[abi:ne180100]<std::vector<std::string>&,std::shared_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>&,0>((std::string *)v98, &v115, (std::string::size_type *)a9);
          std::__tree<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::__map_value_compare<std::vector<std::string>,std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::less<std::vector<std::string>>,true>,std::allocator<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>>>::__emplace_unique_key_args<std::vector<std::string>,std::pair<std::vector<std::string>,std::shared_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>>(a2, (const void ***)v98, (uint64_t)v98);
          v82 = (std::__shared_weak_count *)v99;
          if ((_QWORD)v99)
          {
            v83 = (unint64_t *)(v99 + 8);
            do
              v84 = __ldaxr(v83);
            while (__stlxr(v84 - 1, v83));
            if (!v84)
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
          }
          v124[0] = (void **)v98;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v124);
        }
        goto LABEL_94;
      }
      v56 = (unint64_t *)(*(_QWORD *)&v98[8] + 8);
      do
        v53 = __ldaxr(v56);
      while (__stlxr(v53 - 1, v56));
LABEL_54:
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
      goto LABEL_60;
    }
LABEL_45:
    v47 = quasar::OptionValue<std::string>::value(a3 + 2);
    v48 = *(char *)(v47 + 23);
    if (v48 < 0)
    {
      if (*(_QWORD *)(v47 + 8) != 8)
        goto LABEL_100;
      v47 = *(_QWORD *)v47;
    }
    else if (v48 != 8)
    {
LABEL_100:
      v112 = 0u;
      v113 = 0u;
      v110 = 0u;
      v111 = 0u;
      v108 = 0u;
      v109 = 0u;
      v106 = 0u;
      v107 = 0u;
      v104 = 0u;
      v105 = 0u;
      v102 = 0u;
      v103 = 0u;
      v100 = 0u;
      v101 = 0u;
      v99 = 0u;
      memset(v98, 0, sizeof(v98));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v98);
      v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"Unknown 'model-type': ", 22);
      v92 = quasar::OptionValue<std::string>::value(a3 + 2);
      v93 = *(char *)(v92 + 23);
      if (v93 >= 0)
        v94 = v92;
      else
        v94 = *(_QWORD *)v92;
      if (v93 >= 0)
        v95 = *(unsigned __int8 *)(v92 + 23);
      else
        v95 = *(_QWORD *)(v92 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, v94, v95);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v98);
    }
    if (*(_QWORD *)v47 != 0x6F73736572707365)
      goto LABEL_100;
    v49 = operator new();
    v50 = (uint64_t **)quasar::OptionValue<std::string>::value(a3 + 40);
    LODWORD(v124[0]) = quasar::PDecEngineBlockMixin::getPhraseBookMode(v50);
    v114 = 0;
    std::__variant_detail::__alt<1ul,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::__alt[abi:ne180100]<int &,float &,kaldi::quasar::NormalizationMode &,BOOL &,kaldi::quasar::PhraseBookMode &,kaldi::quasar::BPEMode &,kaldi::quasar::BPEMode &,quasar::OptionValue<BOOL> const&,quasar::OptionValue<BOOL> const&,float &,int &,quasar::OptionValue<BOOL> const&>(v49, &v123, &v120, &v119, &v118, (int *)v124, (int *)&v114 + 1, (int *)&v114, a3 + 118, a3 + 80, &v122, &v121, a3 + 350);
    *(_DWORD *)(v49 + 5888) = 1;
    std::shared_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>::shared_ptr[abi:ne180100]<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>,void>(v98, v49);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a9, (__int128 *)v98);
    v51 = *(std::__shared_weak_count **)&v98[8];
    if (!*(_QWORD *)&v98[8])
      goto LABEL_60;
    v52 = (unint64_t *)(*(_QWORD *)&v98[8] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    goto LABEL_54;
  }
LABEL_94:
  v85 = *a9;
  v86 = quasar::OptionValue<std::string>::value(a3 + 312);
  v87 = quasar::OptionValue<std::string>::value(a3 + 272);
  kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::SelectModel(v85, v86, v87, a13, a14);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 56, (__int128 *)v98);
  v88 = *(std::__shared_weak_count **)&v98[8];
  if (*(_QWORD *)&v98[8])
  {
    v89 = (unint64_t *)(*(_QWORD *)&v98[8] + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  *(_QWORD *)v98 = &v115;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v98);
}

void sub_1ADF29684()
{
  uint64_t v0;

  MEMORY[0x1AF44D190](v0, 0x10B2C403A6CCAF3);
  JUMPOUT(0x1ADF296B0);
}

void sub_1ADF296AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  uint64_t v17;
  uint64_t v18;

  a17 = (void **)(v18 - 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a17);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v17);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Read(uint64_t a1, uint64_t a2, char a3, char a4, char a5, uint64_t *a6)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t *v21;

  v15 = a2;
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v6 = (std::__shared_weak_count *)a6[1];
  v19 = *a6;
  v20 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *(unsigned int *)(a1 + 5888);
  if ((_DWORD)v9 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v21 = &v15;
  v10 = ((uint64_t (*)(uint64_t **, uint64_t))off_1E5D48DB8[v9])(&v21, a1);
  v11 = v20;
  if (v20)
  {
    v12 = (unint64_t *)&v20->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v10;
}

void sub_1ADF297A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::ReadPronunciationModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[2];
  _QWORD *v6;

  v5[0] = a2;
  v5[1] = a3;
  v3 = *(unsigned int *)(a1 + 5888);
  if ((_DWORD)v3 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v6 = v5;
  return ((uint64_t (*)(_QWORD **, uint64_t))off_1E5D48DC8[v3])(&v6, a1);
}

uint64_t kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::SetICUScripts(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 5888);
  if ((_DWORD)v2 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_1E5D48DD8[v2])(&v5, a1);
}

uint64_t kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::ReadConfidenceModel(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v4;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t *v9;

  v6 = a2;
  v7 = a3;
  v8 = a4;
  v4 = *(unsigned int *)(a1 + 5888);
  if ((_DWORD)v4 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v9 = &v6;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_1E5D48DE8[v4])(&v9, a1);
}

uint64_t kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::ReadInputHammer(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  v4 = a2;
  v2 = *(unsigned int *)(a1 + 5888);
  if ((_DWORD)v2 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_1E5D48DF8[v2])(&v5, a1);
}

void **std::pair<std::vector<std::string>,std::shared_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>::~pair(void **a1)
{
  void **v3;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 3));
  v3 = a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::SelectModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  _QWORD v7[3];
  char v8;
  _QWORD *v9;

  v7[0] = a2;
  v7[1] = a3;
  v7[2] = a4;
  v8 = a5;
  v5 = *(unsigned int *)(a1 + 5888);
  if ((_DWORD)v5 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v9 = v7;
  return ((uint64_t (*)(_QWORD **, uint64_t))off_1E5D48E08[v5])(&v9, a1);
}

void quasar::PDecEngineBlockMixin::replaceDegenerateTranslation(uint64_t *a1, uint64_t a2, quasar::TranslationPhraseInternal **a3, char a4, int a5)
{
  quasar::TranslationPhraseInternal **v5;
  quasar::TranslationPhraseInternal *v6;
  unsigned __int16 **v8;
  unsigned __int16 **i;
  quasar::TranslationPhraseInternal **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unsigned __int16 *v18;
  _QWORD *v21;
  std::string *v22;
  std::string::size_type size;
  _QWORD *v24;
  _QWORD *v25;
  void *p_p;
  uint64_t v27;
  _QWORD *v28;
  quasar::TranslationPhraseInternal *v29;
  quasar::TranslationPhraseInternal *v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  quasar::TranslationPhraseInternal *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  char *v43;
  char **v44;
  char *v45;
  void **v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int v54;
  void *__p;
  std::string v57;
  _BYTE v58[32];
  void *v59[2];
  char v60;
  void *v61[2];
  char v62;
  std::string v63;
  unsigned __int8 v64;
  std::string v65;
  void *v66;
  char v67;
  _BYTE v68[64];
  void *v69[2];
  __int128 v70;
  __int128 v71;
  _OWORD v72[10];
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
    return;
  v5 = a3;
  v6 = *a3;
  if (a3[1] == *a3)
    return;
  v8 = (unsigned __int16 **)*((_QWORD *)v6 + 17);
  for (i = (unsigned __int16 **)*((_QWORD *)v6 + 18); v8 != i; v8 += 17)
  {
    if (a5)
    {
      v12 = v5;
      v13 = *((int *)v8 + 16);
      v14 = kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::OutputSymbols(*a1);
      v17 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v14 + 104))(v14, "▁") == v13;
      v5 = v12;
      if (!v17)
      {
        v15 = *((int *)v8 + 16);
        v16 = kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::OutputSymbols(*a1);
        v17 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v16 + 104))(v16, "") == v15;
        v5 = v12;
        if (!v17)
          return;
      }
    }
    else if (*((char *)v8 + 23) < 0)
    {
      v18 = v8[1];
      if (v18)
      {
        if (v18 != (unsigned __int16 *)3)
          return;
        if (**v8 != 38626 || *((unsigned __int8 *)*v8 + 2) != 129)
          return;
      }
    }
    else if (*((_BYTE *)v8 + 23))
    {
      if (*((_BYTE *)v8 + 23) != 3)
        return;
      v17 = *(unsigned __int16 *)v8 == 38626 && *((unsigned __int8 *)v8 + 2) == 129;
      if (!v17)
        return;
    }
  }
  if (quasar::gLogLevel >= 4)
  {
    memset(v72, 0, sizeof(v72));
    v70 = 0u;
    v71 = 0u;
    *(_OWORD *)v69 = 0u;
    memset(v68, 0, sizeof(v68));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v68);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Degenerate translation <", 24);
    quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)&v63, *v5);
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v63;
    else
      v22 = (std::string *)v63.__r_.__value_.__r.__words[0];
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v63.__r_.__value_.__r.__words[2]);
    else
      size = v63.__r_.__value_.__l.__size_;
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, size);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"> from <", 8);
    quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)&__p, *(quasar::TranslationPhraseInternal **)a2);
    if (v57.__r_.__value_.__s.__data_[15] >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v57.__r_.__value_.__s.__data_[15] >= 0)
      v27 = v57.__r_.__value_.__s.__data_[15];
    else
      v27 = v57.__r_.__value_.__r.__words[0];
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)p_p, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)">. Copying the input sequence to the output.", 44);
    if (v57.__r_.__value_.__s.__data_[15] < 0)
      operator delete(__p);
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v63.__r_.__value_.__l.__data_);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v68);
  }
  quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)v68, *(const quasar::TranslationPhraseInternal **)a2);
  std::vector<quasar::TranslationPhraseInternal>::__assign_with_size[abi:ne180100]<quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal const*>((uint64_t)v5, (uint64_t *)v68, (uint64_t *)&v72[5] + 1, 1uLL);
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v68);
  v29 = *v5;
  v30 = *(quasar::TranslationPhraseInternal **)a2;
  quasar::PTree::PTree((quasar::PTree *)&__p);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v68);
  std::ostream::operator<<();
  std::stringbuf::str();
  if ((a4 & 1) == 0)
  {
    v31 = quasar::MetaInfo::get((quasar::TranslationPhraseInternal *)((char *)v30 + 192));
    LODWORD(__p) = *(_DWORD *)v31;
    std::string::operator=(&v57, (const std::string *)(v31 + 8));
    if ((void **)v31 != &__p)
      std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((uint64_t)v58, *(std::string **)(v31 + 32), *(std::string **)(v31 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v31 + 40) - *(_QWORD *)(v31 + 32)) >> 3));
    v58[24] = *(_BYTE *)(v31 + 56);
  }
  std::string::basic_string[abi:ne180100]<0>(&v65, "source");
  std::string::basic_string[abi:ne180100]<0>(v61, "decoder");
  quasar::PTree::PTree(&v63, v61);
  quasar::PTree::putChild((uint64_t)&__p, (uint64_t)&v65, (uint64_t)&v63, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v63);
  if (v62 < 0)
    operator delete(v61[0]);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v65, "prefilter input");
  quasar::PTree::getStringOptional((uint64_t)&__p, (uint64_t)&v65, &v63);
  v32 = v64;
  if (v64 && SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v65.__r_.__value_.__l.__data_);
    if (!v32)
    {
LABEL_59:
      std::string::basic_string[abi:ne180100]<0>(&v65, "prefilter input");
      quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)v61, v30);
      quasar::PTree::PTree(&v63, v61);
      quasar::PTree::putChild((uint64_t)&__p, (uint64_t)&v65, (uint64_t)&v63, 1);
      quasar::PTree::~PTree((quasar::PTree *)&v63);
      if (v62 < 0)
        operator delete(v61[0]);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
    }
  }
  else if (!v32)
  {
    goto LABEL_59;
  }
  std::string::basic_string[abi:ne180100]<0>(&v65, "input");
  quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)v61, v30);
  quasar::PTree::PTree(&v63, v61);
  quasar::PTree::putChild((uint64_t)&__p, (uint64_t)&v65, (uint64_t)&v63, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v63);
  if (v62 < 0)
    operator delete(v61[0]);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v65, "output");
  quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)v61, v30);
  quasar::PTree::PTree(&v63, v61);
  quasar::PTree::putChild((uint64_t)&__p, (uint64_t)&v65, (uint64_t)&v63, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v63);
  if (v62 < 0)
    operator delete(v61[0]);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v65, "cost");
  std::operator+<char>();
  quasar::PTree::PTree(&v63, v61);
  quasar::PTree::putChild((uint64_t)&__p, (uint64_t)&v65, (uint64_t)&v63, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v63);
  if (v62 < 0)
    operator delete(v61[0]);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v65, "norm_cost");
  quasar::PTree::PTree(&v63, &v66);
  quasar::PTree::putChild((uint64_t)&__p, (uint64_t)&v65, (uint64_t)&v63, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v63);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v65, "status");
  std::string::basic_string[abi:ne180100]<0>(v61, "degenerate_translation");
  quasar::PTree::PTree(&v63, v61);
  quasar::PTree::putChild((uint64_t)&__p, (uint64_t)&v65, (uint64_t)&v63, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v63);
  if (v62 < 0)
    operator delete(v61[0]);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v65, "");
  if (*((_QWORD *)v30 + 18) != *((_QWORD *)v30 + 17))
  {
    v33 = 0;
    do
    {
      if (v33)
        std::string::append(&v65, " ");
      std::string::append(&v65, "0");
      ++v33;
    }
    while (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((_QWORD *)v30 + 18) - *((_QWORD *)v30 + 17)) >> 3) > v33);
  }
  std::string::basic_string[abi:ne180100]<0>(v61, "word confidences");
  quasar::PTree::PTree(&v63, &v65);
  quasar::PTree::putChild((uint64_t)&__p, (uint64_t)v61, (uint64_t)&v63, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v63);
  if (v62 < 0)
    operator delete(v61[0]);
  std::string::basic_string[abi:ne180100]<0>(v61, "sentence confidence");
  std::string::basic_string[abi:ne180100]<0>(v59, "0");
  quasar::PTree::PTree(&v63, v59);
  quasar::PTree::putChild((uint64_t)&__p, (uint64_t)v61, (uint64_t)&v63, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v63);
  if (v60 < 0)
    operator delete(v59[0]);
  if (v62 < 0)
    operator delete(v61[0]);
  std::string::basic_string[abi:ne180100]<0>(v61, "low confidence");
  std::string::basic_string[abi:ne180100]<0>(v59, "true");
  quasar::PTree::PTree(&v63, v59);
  quasar::PTree::putChild((uint64_t)&__p, (uint64_t)v61, (uint64_t)&v63, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v63);
  if (v60 < 0)
    operator delete(v59[0]);
  if (v62 < 0)
    operator delete(v61[0]);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  if (v67 < 0)
    operator delete(v66);
  *(_QWORD *)v68 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)&v68[*(_QWORD *)(*(_QWORD *)v68 - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)&v68[8] = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v70) < 0)
    operator delete(v69[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](v72);
  quasar::MetaInfo::replace((uint64_t *)v29 + 24, (uint64_t)&__p);
  quasar::PTree::~PTree((quasar::PTree *)&__p);
  v34 = *v5;
  v35 = *((_QWORD *)*v5 + 17);
  v36 = *((_QWORD *)*v5 + 18);
  if (v35 == v36)
  {
    *((_DWORD *)v34 + 1) = 0;
  }
  else
  {
    v37 = *((_QWORD *)*v5 + 17);
    do
    {
      *(_DWORD *)(v37 + 56) = 0;
      v37 += 136;
    }
    while (v37 != v36);
    *((_DWORD *)v34 + 1) = 0;
    if (v35 != v36)
    {
      v38 = 0;
      do
      {
        v39 = v35 + 136 * v38;
        v42 = *(_QWORD *)(v39 + 48);
        v41 = (_QWORD *)(v39 + 48);
        v40 = v42;
        v44 = (char **)(v41 - 1);
        v43 = (char *)*(v41 - 1);
        if ((unint64_t)v43 >= v42)
        {
          v46 = (void **)(v41 - 2);
          v47 = (char *)*(v41 - 2);
          v48 = (v43 - v47) >> 2;
          v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v50 = v40 - (_QWORD)v47;
          if (v50 >> 1 > v49)
            v49 = v50 >> 1;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
            v51 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v51 = v49;
          if (v51)
          {
            v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v41, v51);
            v43 = *v44;
            v47 = (char *)*v46;
          }
          else
          {
            v52 = 0;
          }
          v53 = &v52[4 * v48];
          *(_DWORD *)v53 = v38;
          v45 = v53 + 4;
          while (v43 != v47)
          {
            v54 = *((_DWORD *)v43 - 1);
            v43 -= 4;
            *((_DWORD *)v53 - 1) = v54;
            v53 -= 4;
          }
          *v46 = v53;
          *v44 = v45;
          *v41 = &v52[4 * v51];
          if (v47)
            operator delete(v47);
        }
        else
        {
          *(_DWORD *)v43 = v38;
          v45 = v43 + 4;
        }
        *v44 = v45;
        ++v38;
        v35 = *((_QWORD *)*v5 + 17);
      }
      while (0xF0F0F0F0F0F0F0F1 * ((*((_QWORD *)*v5 + 18) - v35) >> 3) > v38);
    }
  }
}

void sub_1ADF2A344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,char a57)
{
  quasar::PTree::~PTree((quasar::PTree *)&a34);
  if (a33 < 0)
    operator delete(__p);
  if (a50 < 0)
    operator delete(a45);
  if (a56 < 0)
    operator delete(a51);
  std::ostringstream::~ostringstream((uint64_t)&a57);
  quasar::PTree::~PTree((quasar::PTree *)&a11);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::OutputSymbols(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *(unsigned int *)(a1 + 5888);
  if ((_DWORD)v1 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_1E5D48E18[v1])(&v4, a1);
}

void quasar::PDecEngineBlockMixin::processImplementation(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int32 v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int32 v29;
  std::string::size_type size;
  const std::string *i;
  std::string *v32;
  std::string *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int32x2_t *v37;
  __int32 v38;
  int32x2_t v39;
  int32x2_t v40;
  float v41;
  float v42;
  std::string *v43;
  std::string *v44;
  int32x2_t v45;
  int32x2_t v46;
  unint64_t v47;
  unint64_t v48;
  std::string *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t ChildOptional;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int32x2_t *v66;
  _QWORD v69[8];
  std::string v70;
  _QWORD v71[3];
  uint64_t *v72;
  BOOL v73;
  char v74;
  char v75;
  std::string *v76;
  std::string *v77;
  unint64_t v78;
  int32x2_t v79;
  quasar::MetaInfo::Impl *v80;
  int v81;
  std::string v82;
  _BYTE v83[32];
  int32x2_t *v84;
  int32x2_t *v85;
  uint64_t v86;
  void *__p;
  char *v88;
  char *v89;
  std::string v90;
  _BYTE v91[32];
  void *__dst[2];
  __int128 v93;
  void *v94[8];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;

  v104 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a2;
  if (*(_QWORD *)(v6 + 136) == *(_QWORD *)(v6 + 144) && *(_BYTE *)(v6 + 128))
  {
    quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)v91, (const quasar::TranslationPhraseInternal *)v6);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v72 = a4;
    v73 = 0;
    v25 = (char *)operator new(0xC8uLL);
    *a4 = (uint64_t)v25;
    a4[1] = (uint64_t)v25;
    a4[2] = (uint64_t)(v25 + 200);
    a4[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal*>((uint64_t)(a4 + 2), (uint64_t)v91, (uint64_t)&v99 + 8, (uint64_t)v25);
    quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v91);
    *(_DWORD *)(*a4 + 4) = 1148829696;
    return;
  }
  quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)&v90, (quasar::TranslationPhraseInternal *)v6);
  __p = 0;
  v88 = 0;
  v89 = 0;
  if (*(_BYTE *)(a1[2] + 307))
  {
    v7 = *(_QWORD *)a2;
    if (!*(_BYTE *)(*(_QWORD *)a2 + 129))
    {
      v102 = 0u;
      v103 = 0u;
      v100 = 0u;
      v101 = 0u;
      v98 = 0u;
      v99 = 0u;
      v96 = 0u;
      v97 = 0u;
      v95 = 0u;
      v93 = 0u;
      memset(v94, 0, sizeof(v94));
      *(_OWORD *)__dst = 0u;
      memset(v91, 0, sizeof(v91));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v91);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"Decoding require valid SentencePiece IDs in input", 49);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v91);
    }
    v8 = *(_QWORD *)(v7 + 136);
    v9 = *(_QWORD *)(v7 + 144);
    if (v8 != v9)
    {
      v10 = 0;
      do
      {
        if (v10 >= v89)
        {
          v12 = (char *)__p;
          v13 = (v10 - (_BYTE *)__p) >> 2;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v15 = v89 - (_BYTE *)__p;
          if ((v89 - (_BYTE *)__p) >> 1 > v14)
            v14 = v15 >> 1;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v16 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v89, v16);
            v12 = (char *)__p;
            v10 = v88;
          }
          else
          {
            v17 = 0;
          }
          v18 = &v17[4 * v13];
          *(_DWORD *)v18 = *(_DWORD *)(v8 + 64);
          v11 = v18 + 4;
          while (v10 != v12)
          {
            v19 = *((_DWORD *)v10 - 1);
            v10 -= 4;
            *((_DWORD *)v18 - 1) = v19;
            v18 -= 4;
          }
          __p = v18;
          v88 = v11;
          v89 = &v17[4 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *(_DWORD *)v10 = *(_DWORD *)(v8 + 64);
          v11 = v10 + 4;
        }
        v88 = v11;
        v8 += 136;
        v10 = v11;
      }
      while (v8 != v9);
    }
  }
  v84 = 0;
  v85 = 0;
  v86 = 0;
  quasar::PTree::PTree((quasar::PTree *)&v81);
  if ((a3 & 1) == 0)
  {
    v20 = quasar::MetaInfo::get((quasar::MetaInfo *)(*(_QWORD *)a2 + 192));
    v81 = *(_DWORD *)v20;
    std::string::operator=(&v82, (const std::string *)(v20 + 8));
    if (&v81 != (int *)v20)
      std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((uint64_t)v83, *(std::string **)(v20 + 32), *(std::string **)(v20 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v20 + 40) - *(_QWORD *)(v20 + 32)) >> 3));
    v83[24] = *(_BYTE *)(v20 + 56);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v21 = a1[2];
  if (!*(_DWORD *)(v21 + 300))
  {
    if (*(_BYTE *)(*(_QWORD *)a2 + 128) || (v27 = a1[3]) == 0)
    {
      *(_BYTE *)(v21 + 306) = *(_BYTE *)(*(_QWORD *)a2 + 128);
      v26 = *a1;
      if (*(_BYTE *)(v21 + 307))
      {
        kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v26, (uint64_t)&__p, v21, (uint64_t)&v84);
        v27 = a1[4];
        if (!v27 || v84 == v85 || v84[7].i32[0] != 4)
          goto LABEL_68;
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v91);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"Repetitions detected, re-decoding with changed parameters.", 58);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v91);
          v27 = a1[4];
        }
        v28 = *a1;
LABEL_61:
        kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v28, (uint64_t)&__p, v27, (uint64_t)&v84);
        goto LABEL_68;
      }
      kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v26, (uint64_t)&v90, v21, (uint64_t)&v84);
      v27 = a1[4];
      if (!v27 || v84 == v85 || v84[7].i32[0] != 4)
        goto LABEL_68;
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v91);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"Repetitions detected, re-decoding with changed parameters.", 58);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v91);
        v27 = a1[4];
      }
      v28 = *a1;
    }
    else
    {
      *(_BYTE *)(v27 + 306) = 0;
      v28 = *a1;
      if (*(_BYTE *)(v21 + 307))
        goto LABEL_61;
    }
    kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v28, (uint64_t)&v90, v27, (uint64_t)&v84);
    goto LABEL_68;
  }
  if (*(_BYTE *)(v21 + 307))
  {
    v102 = 0u;
    v103 = 0u;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    v96 = 0u;
    v97 = 0u;
    v95 = 0u;
    v93 = 0u;
    memset(v94, 0, sizeof(v94));
    *(_OWORD *)__dst = 0u;
    memset(v91, 0, sizeof(v91));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v91);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"Streaming decoding not compatible with 'use-sentencepiece-ids'", 62);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v91);
  }
  v22 = operator new();
  kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DecodeOptions(v22, (uint64_t *)a1[2]);
  *(_BYTE *)(v22 + 306) = *(_BYTE *)(*(_QWORD *)a2 + 128);
  if (!kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::NumActiveHyps(*a1))
  {
    v23 = (_QWORD *)operator new();
    fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst(v23);
    kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Init<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(*a1, v22, (uint64_t)v23);
  }
  memset(v69, 0, 24);
  kaldi::SplitStringToVector(&v90, " ", 1, (uint64_t)v69);
  memset(&v70, 0, sizeof(v70));
  kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::StaticReadWrite<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(*a1, v22, (uint64_t)v69, (uint64_t)&v70, *(_BYTE *)(*(_QWORD *)a2 + 128));
  if (*(_BYTE *)(*(_QWORD *)a2 + 128))
  {
    kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::GetRawNbest<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(*a1, v22, (uint64_t)&v84);
    if (kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::NumActiveHyps(*a1))
    {
      v102 = 0u;
      v103 = 0u;
      v100 = 0u;
      v101 = 0u;
      v98 = 0u;
      v99 = 0u;
      v96 = 0u;
      v97 = 0u;
      v95 = 0u;
      v93 = 0u;
      memset(v94, 0, sizeof(v94));
      *(_OWORD *)__dst = 0u;
      memset(v91, 0, sizeof(v91));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v91);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"stream-decoding was closed, but decoder did not clear active hyps", 65);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v91);
    }
  }
  else
  {
    v29 = v24;
    quasar::TranslationPhraseInternal::TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&v72);
    size = v70.__r_.__value_.__l.__size_;
    for (i = (const std::string *)v70.__r_.__value_.__r.__words[0]; i != (const std::string *)size; ++i)
    {
      __dst[0] = 0;
      __dst[1] = 0;
      *(_QWORD *)&v93 = 0;
      memset(v91, 0, 26);
      *((_QWORD *)&v93 + 1) = 3212836864;
      LODWORD(v94[0]) = -1;
      memset(&v94[1], 0, 56);
      *(_QWORD *)&v95 = -1;
      std::string::operator=((std::string *)v91, i);
      v32 = v77;
      if ((unint64_t)v77 >= v78)
      {
        v33 = (std::string *)std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal const&>((uint64_t *)&v76, (const quasar::TranslationTokenInternal *)v91);
      }
      else
      {
        quasar::TranslationTokenInternal::TranslationTokenInternal(v77, (const quasar::TranslationTokenInternal *)v91);
        v33 = (std::string *)((char *)v32 + 136);
      }
      v77 = v33;
      if (v94[5])
      {
        v94[6] = v94[5];
        operator delete(v94[5]);
      }
      if (SHIBYTE(v94[3]) < 0)
        operator delete(v94[1]);
      if (__dst[0])
      {
        __dst[1] = __dst[0];
        operator delete(__dst[0]);
      }
      if ((v91[23] & 0x80000000) != 0)
        operator delete(*(void **)v91);
    }
    LODWORD(v72) = v29;
    v79.i32[0] = v29;
    v74 = 0;
    v34 = a4[1];
    if (v34 >= a4[2])
    {
      v35 = std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>(a4, (const quasar::TranslationPhraseInternal *)&v72);
      v36 = a4;
    }
    else
    {
      quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)a4[1], (const quasar::TranslationPhraseInternal *)&v72);
      v35 = v34 + 200;
      v36 = a4;
      a4[1] = v34 + 200;
    }
    v36[1] = v35;
    if (!kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::NumActiveHyps(*a1)
      && quasar::gLogLevel >= 2)
    {
      v102 = 0u;
      v103 = 0u;
      v100 = 0u;
      v101 = 0u;
      v98 = 0u;
      v99 = 0u;
      v96 = 0u;
      v97 = 0u;
      v95 = 0u;
      v93 = 0u;
      memset(v94, 0, sizeof(v94));
      *(_OWORD *)__dst = 0u;
      memset(v91, 0, sizeof(v91));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v91);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"stream-decoding unexpectly ended, as no futher hyps remain", 58);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v91);
    }
    quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&v72);
  }
  *(_QWORD *)v91 = &v70;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v91);
  *(_QWORD *)v91 = v69;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v91);
LABEL_68:
  v37 = v84;
  v66 = v85;
  if (v84 != v85)
  {
    v64 = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
    v65 = *MEMORY[0x1E0DE4F58];
    v63 = MEMORY[0x1E0DE4FB8] + 16;
    while (1)
    {
      v38 = v37[5].i32[0];
      quasar::TranslationPhraseInternal::TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&v72);
      v40 = *v37;
      v39 = v37[1];
      while (*(_QWORD *)&v40 != *(_QWORD *)&v39)
      {
        __dst[0] = 0;
        __dst[1] = 0;
        *(_QWORD *)&v93 = 0;
        memset(v91, 0, 26);
        *((_QWORD *)&v93 + 1) = 3212836864;
        LODWORD(v94[0]) = -1;
        memset(&v94[1], 0, 56);
        *(_QWORD *)&v95 = -1;
        std::string::operator=((std::string *)v91, *(const std::string **)&v40);
        LODWORD(v94[0]) = *(_DWORD *)(*(_QWORD *)&v40 + 24);
        v41 = *(float *)(*(_QWORD *)&v40 + 84);
        v42 = *(float *)(*(_QWORD *)&v40 + 80) + v41;
        HIDWORD(v94[4]) = *(_DWORD *)(*(_QWORD *)&v40 + 80);
        *((float *)&v93 + 3) = v42;
        *(float *)&v94[4] = v41;
        *((float *)&v93 + 2) = (float)*(int *)(*(_QWORD *)&v40 + 232);
        std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)__dst, (uint64_t)__dst[1], *(char **)(*(_QWORD *)&v40 + 88), *(char **)(*(_QWORD *)&v40 + 96), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v40 + 96) - *(_QWORD *)(*(_QWORD *)&v40 + 88)) >> 2);
        std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)&v94[5], (uint64_t)v94[6], *(char **)(*(_QWORD *)&v40 + 136), *(char **)(*(_QWORD *)&v40 + 144), (uint64_t)(*(_QWORD *)(*(_QWORD *)&v40 + 144) - *(_QWORD *)(*(_QWORD *)&v40 + 136)) >> 2);
        v91[24] = 1;
        v43 = v77;
        if ((unint64_t)v77 >= v78)
        {
          v44 = (std::string *)std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal const&>((uint64_t *)&v76, (const quasar::TranslationTokenInternal *)v91);
        }
        else
        {
          quasar::TranslationTokenInternal::TranslationTokenInternal(v77, (const quasar::TranslationTokenInternal *)v91);
          v44 = (std::string *)((char *)v43 + 136);
        }
        v77 = v44;
        if (v94[5])
        {
          v94[6] = v94[5];
          operator delete(v94[5]);
        }
        if (SHIBYTE(v94[3]) < 0)
          operator delete(v94[1]);
        if (__dst[0])
        {
          __dst[1] = __dst[0];
          operator delete(__dst[0]);
        }
        if ((v91[23] & 0x80000000) != 0)
          operator delete(*(void **)v91);
        *(_QWORD *)&v40 += 240;
      }
      if (v76 != v77 || !*(_BYTE *)(*(_QWORD *)a2 + 128))
        break;
LABEL_130:
      quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&v72);
      v37 += 34;
      if (v37 == v66)
        goto LABEL_131;
    }
    LODWORD(v72) = v38;
    v79 = vrev64_s32(v37[3]);
    v46 = *v37;
    v45 = v37[1];
    if (*(_QWORD *)&v45 == *v37)
    {
      LODWORD(v48) = 0;
    }
    else
    {
      LODWORD(v47) = 0;
      do
      {
        v47 = *(int *)(*(_QWORD *)&v46 + 232) + (uint64_t)(int)v47;
        *(_QWORD *)&v46 += 240;
      }
      while (*(_QWORD *)&v46 != *(_QWORD *)&v45);
      v48 = v47 / (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)&v45 - *(_QWORD *)v37) >> 4));
    }
    *((float *)&v72 + 1) = (float)(int)v48;
    v73 = *(float *)(a1[2] + 176) > (float)(int)v48;
    if (v76 != v77)
      v77[-5].__r_.__value_.__s.__data_[8] = 0;
    kaldi::quasar::TranslationUtil::NbestElement::GetMetaInfo((kaldi::quasar::TranslationUtil::NbestElement *)v37, &v70);
    quasar::PTree::PTree((quasar::PTree *)v69);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v70.__r_.__value_.__l.__size_ != 2)
        goto LABEL_100;
      v49 = (std::string *)v70.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) != 2)
        goto LABEL_100;
      v49 = &v70;
    }
    if (LOWORD(v49->__r_.__value_.__l.__data_) == 32123)
    {
LABEL_105:
      v51 = v71[0];
      v50 = v71[1];
      while (v51 != v50)
      {
        quasar::PTree::PTree(v91, v51 + 24);
        quasar::PTree::putChild((uint64_t)v69, v51, (uint64_t)v91, 1);
        quasar::PTree::~PTree((quasar::PTree *)v91);
        v51 += 48;
      }
      v52 = quasar::PTree::begin((quasar::PTree *)v69);
      v53 = quasar::PTree::end((quasar::PTree *)v69);
      while (1)
      {
        if (v52 == v53)
        {
          quasar::MetaInfo::update(&v80, (const quasar::PTree *)&v81);
          v75 = *(_BYTE *)(a1[2] + 307);
          v74 = *(_BYTE *)(*(_QWORD *)a2 + 128);
          v60 = a4[1];
          if (v60 >= a4[2])
          {
            v61 = std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>(a4, (const quasar::TranslationPhraseInternal *)&v72);
            v62 = a4;
          }
          else
          {
            quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)a4[1], (const quasar::TranslationPhraseInternal *)&v72);
            v61 = v60 + 200;
            v62 = a4;
            a4[1] = v60 + 200;
          }
          v62[1] = v61;
          quasar::PTree::~PTree((quasar::PTree *)v69);
          *(_QWORD *)v91 = v71;
          std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v91);
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v70.__r_.__value_.__l.__data_);
          goto LABEL_130;
        }
        v54 = *(char *)(v52 + 23);
        if (v54 < 0)
        {
          if (*(_QWORD *)(v52 + 8) != 15)
            goto LABEL_119;
          v55 = *(uint64_t **)v52;
        }
        else
        {
          v55 = (uint64_t *)v52;
          if (v54 != 15)
            goto LABEL_119;
        }
        v56 = *v55;
        v57 = *(uint64_t *)((char *)v55 + 7);
        if (v56 != 0x65746C6966657270 || v57 != 0x7475706E69207265)
          goto LABEL_119;
        std::string::basic_string[abi:ne180100]<0>(v91, "prefilter input");
        ChildOptional = quasar::PTree::getChildOptional((uint64_t)&v81, (uint64_t)v91);
        if ((v91[23] & 0x80000000) != 0)
          operator delete(*(void **)v91);
        if (!ChildOptional)
LABEL_119:
          quasar::PTree::putChild((uint64_t)&v81, v52, v52 + 24, 1);
        v52 += 88;
      }
    }
LABEL_100:
    if (quasar::gLogLevel >= 4)
    {
      v102 = 0u;
      v103 = 0u;
      v100 = 0u;
      v101 = 0u;
      v98 = 0u;
      v99 = 0u;
      v96 = 0u;
      v97 = 0u;
      v95 = 0u;
      v93 = 0u;
      memset(v94, 0, sizeof(v94));
      *(_OWORD *)__dst = 0u;
      memset(v91, 0, sizeof(v91));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v91);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"Using meta data from phrasebook loaded inside of PDec - deprecated in MT production!", 84);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v91);
    }
    std::istringstream::basic_istringstream[abi:ne180100](v91, &v70, 8);
    quasar::PTree::readJson((uint64_t)v69, v91);
    *(_QWORD *)v91 = v65;
    *(_QWORD *)&v91[*(_QWORD *)(v65 - 24)] = v64;
    *(_QWORD *)&v91[16] = v63;
    if (SHIBYTE(v94[4]) < 0)
      operator delete(v94[2]);
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x1AF44D094](&v94[7]);
    goto LABEL_105;
  }
LABEL_131:
  if (*(_BYTE *)(*(_QWORD *)a2 + 128))
    quasar::PDecEngineBlockMixin::replaceDegenerateTranslation(a1, a2, (quasar::TranslationPhraseInternal **)a4, a3, *(unsigned __int8 *)(a1[2] + 307));
  quasar::PTree::~PTree((quasar::PTree *)&v81);
  *(_QWORD *)v91 = &v84;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100]((void ***)v91);
  if (__p)
  {
    v88 = (char *)__p;
    operator delete(__p);
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
}

void sub_1ADF2B294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;
  void *a71;
  void *a72;

  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&a35);
  STACK[0x220] = (unint64_t)&a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  STACK[0x220] = (unint64_t)&a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  STACK[0x220] = a20;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  quasar::PTree::~PTree((quasar::PTree *)&a60);
  STACK[0x220] = (unint64_t)&a68;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  if (a71)
  {
    a72 = a71;
    operator delete(a71);
  }
  if (SLOBYTE(STACK[0x21F]) < 0)
    operator delete((void *)STACK[0x208]);
  _Unwind_Resume(a1);
}

void sub_1ADF2B2F0(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADF2B4C0);
}

void sub_1ADF2B308()
{
  JUMPOUT(0x1ADF2B3A8);
}

void sub_1ADF2B310()
{
  JUMPOUT(0x1ADF2B328);
}

void sub_1ADF2B330()
{
  JUMPOUT(0x1ADF2B490);
}

void sub_1ADF2B348()
{
  JUMPOUT(0x1ADF2B488);
}

void sub_1ADF2B358()
{
  quasar::TranslationTokenInternal::~TranslationTokenInternal((quasar::TranslationTokenInternal *)&STACK[0x220]);
  JUMPOUT(0x1ADF2B390);
}

void sub_1ADF2B368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&STACK[0x220]);
  quasar::PTree::~PTree((quasar::PTree *)&a21);
  std::pair<std::string,std::vector<std::pair<std::string,std::string>>>::~pair((uint64_t)&a29);
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&a35);
  JUMPOUT(0x1ADF2B478);
}

void sub_1ADF2B37C()
{
  JUMPOUT(0x1ADF2B4A0);
}

void sub_1ADF2B3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;

  *(_QWORD *)(a20 + 8) = v29;
  quasar::PTree::~PTree((quasar::PTree *)&a21);
  std::pair<std::string,std::vector<std::pair<std::string,std::string>>>::~pair(&a29);
  JUMPOUT(0x1ADF2B470);
}

void sub_1ADF2B3D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  std::istringstream::~istringstream((uint64_t)&STACK[0x220]);
  quasar::PTree::~PTree((quasar::PTree *)&a21);
  std::pair<std::string,std::vector<std::pair<std::string,std::string>>>::~pair((uint64_t)&a29);
  JUMPOUT(0x1ADF2B470);
}

void sub_1ADF2B3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&a35);
  JUMPOUT(0x1ADF2B478);
}

void sub_1ADF2B3F0()
{
  JUMPOUT(0x1ADF2B450);
}

void sub_1ADF2B3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a68;
  void *a71;
  void *a72;

  STACK[0x220] = a20;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&STACK[0x220]);
  quasar::PTree::~PTree((quasar::PTree *)&a60);
  STACK[0x220] = (unint64_t)&a68;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100](&STACK[0x220]);
  if (a71)
  {
    a72 = a71;
    operator delete(a71);
  }
  if (SLOBYTE(STACK[0x21F]) < 0)
    operator delete((void *)STACK[0x208]);
  _Unwind_Resume(a1);
}

void sub_1ADF2B408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  quasar::PTree::~PTree((quasar::PTree *)&a21);
  std::pair<std::string,std::vector<std::pair<std::string,std::string>>>::~pair((uint64_t)&a29);
  JUMPOUT(0x1ADF2B470);
}

void sub_1ADF2B420()
{
  quasar::TranslationTokenInternal::~TranslationTokenInternal((quasar::TranslationTokenInternal *)&STACK[0x220]);
  JUMPOUT(0x1ADF2B470);
}

void sub_1ADF2B434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  quasar::PTree::~PTree((quasar::PTree *)&a21);
  std::pair<std::string,std::vector<std::pair<std::string,std::string>>>::~pair(&a29);
  JUMPOUT(0x1ADF2B470);
}

void sub_1ADF2B43C()
{
  quasar::PTree::~PTree((quasar::PTree *)&STACK[0x220]);
  JUMPOUT(0x1ADF2B448);
}

uint64_t kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::NumActiveHyps(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *(unsigned int *)(a1 + 5888);
  if ((_DWORD)v1 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_1E5D48E28[v1])(&v4, a1);
}

uint64_t kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Init<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[2];
  _QWORD *v6;

  v5[0] = a2;
  v5[1] = a3;
  v3 = *(unsigned int *)(a1 + 5888);
  if ((_DWORD)v3 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v6 = v5;
  return ((uint64_t (*)(_QWORD **, uint64_t))off_1E5D48E38[v3])(&v6, a1);
}

uint64_t kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::StaticReadWrite<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  _QWORD v7[3];
  char v8;
  _QWORD *v9;

  v7[0] = a2;
  v7[1] = a3;
  v7[2] = a4;
  v8 = a5;
  v5 = *(unsigned int *)(a1 + 5888);
  if ((_DWORD)v5 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v9 = v7;
  return ((uint64_t (*)(_QWORD **, uint64_t))off_1E5D48E48[v5])(&v9, a1);
}

uint64_t kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::GetRawNbest<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[2];
  _QWORD *v6;

  v5[0] = a2;
  v5[1] = a3;
  v3 = *(unsigned int *)(a1 + 5888);
  if ((_DWORD)v3 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v6 = v5;
  return ((uint64_t (*)(_QWORD **, uint64_t))off_1E5D48E58[v3])(&v6, a1);
}

uint64_t kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  v4 = *(unsigned int *)(a1 + 5888);
  if ((_DWORD)v4 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v7 = v6;
  return ((uint64_t (*)(_QWORD **, uint64_t))off_1E5D48E68[v4])(&v7, a1);
}

{
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  v4 = *(unsigned int *)(a1 + 5888);
  if ((_DWORD)v4 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v7 = v6;
  return ((uint64_t (*)(_QWORD **, uint64_t))off_1E5D48E78[v4])(&v7, a1);
}

void kaldi::quasar::TranslationUtil::NbestElement::GetMetaInfo(kaldi::quasar::TranslationUtil::NbestElement *this@<X0>, std::string *a2@<X8>)
{
  _OWORD *v4;
  std::string::size_type size;
  uint64_t v6;
  char *v7;
  char *v8;
  void *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;
  kaldi::quasar::TranslationUtil::NbestElement *v16;
  kaldi::quasar::TranslationUtil::NbestElement *v17;
  kaldi::quasar::TranslationUtil::NbestElement *v18;
  uint64_t v19;
  std::string v20;
  std::string v21;
  std::string __p;
  std::vector<std::pair<std::string, std::string>> v23;

  memset(&v23, 0, sizeof(v23));
  if ((*((_DWORD *)this + 14) - 5) >= 2)
  {
    std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(&v21, "source", "decoder");
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (__int128 *)&v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
  }
  v4 = (_OWORD *)((char *)this + 120);
  if (*((char *)this + 143) < 0)
  {
    std::string::__init_copy_ctor_external(&v21, *((const std::string::value_type **)this + 15), *((_QWORD *)this + 16));
  }
  else
  {
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *v4;
    v21.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 17);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v21.__r_.__value_.__l.__size_;
    operator delete(v21.__r_.__value_.__l.__data_);
    if (!size)
      goto LABEL_22;
  }
  else if (!*((_BYTE *)&v21.__r_.__value_.__s + 23))
  {
    goto LABEL_22;
  }
  if (*((char *)this + 143) < 0)
  {
    std::string::__init_copy_ctor_external(&v20, *((const std::string::value_type **)this + 15), *((_QWORD *)this + 16));
  }
  else
  {
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *v4;
    v20.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 17);
  }
  std::string::basic_string[abi:ne180100]<0>(&v21, "prefilter input");
  __p = v20;
  memset(&v20, 0, sizeof(v20));
  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (__int128 *)&v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
LABEL_22:
  if (*((char *)this + 167) < 0)
    std::string::__init_copy_ctor_external(&v20, *((const std::string::value_type **)this + 18), *((_QWORD *)this + 19));
  else
    v20 = *(std::string *)((_BYTE *)this + 6);
  std::string::basic_string[abi:ne180100]<0>(&v21, "input");
  __p = v20;
  memset(&v20, 0, sizeof(v20));
  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (__int128 *)&v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  kaldi::quasar::TranslationUtil::NbestElement::OutputWordString(this, &v20);
  std::string::basic_string[abi:ne180100]<0>(&v21, "output");
  __p = v20;
  memset(&v20, 0, sizeof(v20));
  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (__int128 *)&v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  v19 = *((_QWORD *)this + 3);
  kaldi::quasar::TranslationUtil::NbestElement::NumToString<fst::LatticeWeightTpl<float>>((uint64_t)this, (float *)&v19);
  std::string::basic_string[abi:ne180100]<0>(&v21, "cost");
  __p = v20;
  memset(&v20, 0, sizeof(v20));
  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (__int128 *)&v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  kaldi::quasar::TranslationUtil::NbestElement::NumToString<float>();
  std::string::basic_string[abi:ne180100]<0>(&v21, "norm_cost");
  __p = v20;
  memset(&v20, 0, sizeof(v20));
  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (__int128 *)&v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  switch(*((_DWORD *)this + 14))
  {
    case 2:
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(&v21, "status", "vetoed");
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (__int128 *)&v21);
      break;
    case 3:
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(&v21, "status", "stopped");
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (__int128 *)&v21);
      break;
    case 4:
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(&v21, "status", "aborted");
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (__int128 *)&v21);
      break;
    case 5:
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[17],0>(&v21, "status", "phrasebook_exact");
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (__int128 *)&v21);
      break;
    case 6:
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[17],0>(&v21, "status", "phrasebook_fuzzy");
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (__int128 *)&v21);
      break;
    default:
      std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(&v21, "status", "fine");
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (__int128 *)&v21);
      break;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (*((char *)this + 87) < 0)
  {
    v7 = (char *)*((_QWORD *)this + 8);
    v6 = *((_QWORD *)this + 9);
  }
  else
  {
    v6 = *((unsigned __int8 *)this + 87);
    v7 = (char *)this + 64;
  }
  if (v6 >= 14)
  {
    v8 = &v7[v6];
    v9 = v7;
    do
    {
      v10 = memchr(v9, 34, v6 - 13);
      if (!v10)
        break;
      v11 = *v10 == 0x7A696E616D6F7222 && *(_QWORD *)((char *)v10 + 6) == 0x226E6F6974617A69;
      if (v11)
      {
        if (v10 != (_QWORD *)v8 && (char *)v10 - v7 != -1)
          goto LABEL_82;
        break;
      }
      v9 = (char *)v10 + 1;
      v6 = v8 - (_BYTE *)v9;
    }
    while (v8 - (_BYTE *)v9 >= 14);
  }
  if (*((char *)this + 119) < 0)
  {
    if (!*((_QWORD *)this + 13))
      goto LABEL_82;
  }
  else if (!*((_BYTE *)this + 119))
  {
    goto LABEL_82;
  }
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],std::string const&,0>(&v21, "romanization", (__int128 *)this + 6);
  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (__int128 *)&v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
LABEL_82:
  kaldi::quasar::TranslationUtil::NbestElement::ConfidenceString(this, &v20);
  std::string::basic_string[abi:ne180100]<0>(&v21, "word confidences");
  __p = v20;
  memset(&v20, 0, sizeof(v20));
  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (__int128 *)&v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (*((_QWORD *)this + 28) != *((_QWORD *)this + 27) && *((_BYTE *)this + 88))
  {
    kaldi::quasar::TranslationUtil::NbestElement::RawConfidenceString(this, &v20);
    std::string::basic_string[abi:ne180100]<0>(&v21, "subword confidences");
    __p = v20;
    memset(&v20, 0, sizeof(v20));
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (__int128 *)&v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
  }
  v13 = *(_QWORD *)this;
  v12 = *((_QWORD *)this + 1);
  if (v12 != *(_QWORD *)this)
  {
    v14 = 0;
    do
    {
      v14 += *(_DWORD *)(v13 + 232);
      v13 += 240;
    }
    while (v13 != v12);
  }
  kaldi::quasar::TranslationUtil::NbestElement::NumToString<int>();
  std::string::basic_string[abi:ne180100]<0>(&v21, "sentence confidence");
  __p = v20;
  memset(&v20, 0, sizeof(v20));
  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (__int128 *)&v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  v15 = "true";
  if (!*((_BYTE *)this + 240))
    v15 = "false";
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const*,0>(&v21, "low confidence", &v20.__r_.__value_.__l.__data_);
  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (__int128 *)&v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (*((_BYTE *)this + 88))
  {
    kaldi::quasar::TranslationUtil::NbestElement::RawSubWordString((uint64_t *)&v20, this);
    std::string::basic_string[abi:ne180100]<0>(&v21, "subword string");
    __p = v20;
    memset(&v20, 0, sizeof(v20));
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (__int128 *)&v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
  }
  v16 = (kaldi::quasar::TranslationUtil::NbestElement *)*((_QWORD *)this + 31);
  if (v16 != (kaldi::quasar::TranslationUtil::NbestElement *)((char *)this + 256))
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::NumToString<double>();
      if (*((char *)v16 + 55) < 0)
        std::string::__init_copy_ctor_external(&v21, *((const std::string::value_type **)v16 + 4), *((_QWORD *)v16 + 5));
      else
        v21 = *(std::string *)((char *)v16 + 32);
      __p = v20;
      memset(&v20, 0, sizeof(v20));
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v23, (__int128 *)&v21);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v21.__r_.__value_.__l.__data_);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      v17 = (kaldi::quasar::TranslationUtil::NbestElement *)*((_QWORD *)v16 + 1);
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = *(kaldi::quasar::TranslationUtil::NbestElement **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (kaldi::quasar::TranslationUtil::NbestElement *)*((_QWORD *)v16 + 2);
          v11 = *(_QWORD *)v18 == (_QWORD)v16;
          v16 = v18;
        }
        while (!v11);
      }
      v16 = v18;
    }
    while (v18 != (kaldi::quasar::TranslationUtil::NbestElement *)((char *)this + 256));
  }
  std::pair<std::string,std::vector<std::pair<std::string,std::string>>>::pair[abi:ne180100]<std::string const&,std::vector<std::pair<std::string,std::string>>&,0>(a2, (__int128 *)this + 4, (__int128 **)&v23);
  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
}

void sub_1ADF2BFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a18);
  a18 = &a25;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::vector<std::pair<std::string,std::string>>>::~pair(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t quasar::PDecEngineBlockMixin::setGlobalMapPtrs(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 40) = a2;
  *(_QWORD *)(result + 48) = a3;
  return result;
}

void quasar::PDecEngineBlockMixin::createPhrasebookList(_QWORD *a1@<X0>, const std::string *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t i;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  void *__p[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;

  v66 = a3;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  v63 = 0;
  v64 = 0;
  v65 = 0;
  kaldi::SplitStringToVector(a2, ",", 1, (uint64_t)&v63);
  v6 = v63;
  for (i = v64; v6 != i; v6 += 24)
  {
    v62 = 0uLL;
    if (!a1)
      goto LABEL_24;
    v8 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1, (unsigned __int8 *)v6);
    v9 = v8;
    if (v8)
    {
      v10 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
      if (v10 && (v10 = std::__shared_weak_count::lock(v10)) != 0)
        v11 = *((_QWORD *)v9 + 5);
      else
        v11 = 0;
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
      *(_QWORD *)&v62 = v11;
      *((_QWORD *)&v62 + 1) = v10;
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        v11 = v62;
      }
      if (v11)
      {
        std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100]((char **)a4, &v62);
        if (quasar::gLogLevel >= 5)
        {
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"use shared phrasebook: ", 23);
          v16 = *(char *)(v6 + 23);
          if (v16 >= 0)
            v17 = v6;
          else
            v17 = *(_QWORD *)v6;
          if (v16 >= 0)
            v18 = *(unsigned __int8 *)(v6 + 23);
          else
            v18 = *(_QWORD *)(v6 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
        }
      }
    }
    if (!(_QWORD)v62)
    {
LABEL_24:
      std::allocate_shared[abi:ne180100]<kaldi::quasar::PhraseBook,std::allocator<kaldi::quasar::PhraseBook>,BOOL &,void>(&v66, __p);
      v19 = *(_OWORD *)__p;
      __p[0] = 0;
      __p[1] = 0;
      v20 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
      v62 = v19;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      v23 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v24 = (unint64_t *)((char *)__p[1] + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = v62;
      *(_BYTE *)(v62 + 68) = v66;
      if (kaldi::quasar::PhraseBook::ReadRaw(v26, v6, 0))
      {
        std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100]((char **)a4, &v62);
        if (quasar::gLogLevel >= 5)
        {
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"load phrasebook: ", 17);
          v28 = *(char *)(v6 + 23);
          if (v28 >= 0)
            v29 = v6;
          else
            v29 = *(_QWORD *)v6;
          if (v28 >= 0)
            v30 = *(unsigned __int8 *)(v6 + 23);
          else
            v30 = *(_QWORD *)(v6 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, v29, v30);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
        }
        if (a1)
        {
          std::pair<std::string,std::shared_ptr<quasar::InverseTextNormalizer>>::pair[abi:ne180100]<true,0>((std::string *)__p, (__int128 *)v6, (std::string::size_type *)&v62);
          std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<kaldi::quasar::PhraseBook>>>((uint64_t)a1, (unsigned __int8 *)__p, (uint64_t)__p);
          v31 = (std::__shared_weak_count *)v47;
          if ((_QWORD)v47)
          {
            v32 = (unint64_t *)(v47 + 8);
            do
              v33 = __ldaxr(v32);
            while (__stlxr(v33 - 1, v32));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          if (SBYTE7(v46) < 0)
            operator delete(__p[0]);
          if (quasar::gLogLevel >= 5)
          {
            v60 = 0u;
            v61 = 0u;
            v58 = 0u;
            v59 = 0u;
            v56 = 0u;
            v57 = 0u;
            v54 = 0u;
            v55 = 0u;
            v52 = 0u;
            v53 = 0u;
            v50 = 0u;
            v51 = 0u;
            v48 = 0u;
            v49 = 0u;
            v46 = 0u;
            v47 = 0u;
            *(_OWORD *)__p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Cache phrasebook: ", 18);
            v35 = *(char *)(v6 + 23);
            if (v35 >= 0)
              v36 = v6;
            else
              v36 = *(_QWORD *)v6;
            if (v35 >= 0)
              v37 = *(unsigned __int8 *)(v6 + 23);
            else
              v37 = *(_QWORD *)(v6 + 8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v36, v37);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
          }
        }
      }
      else if (quasar::gLogLevel >= 1)
      {
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"failed loading phrasebook: ", 27);
        v39 = *(char *)(v6 + 23);
        if (v39 >= 0)
          v40 = v6;
        else
          v40 = *(_QWORD *)v6;
        if (v39 >= 0)
          v41 = *(unsigned __int8 *)(v6 + 23);
        else
          v41 = *(_QWORD *)(v6 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v40, v41);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
      }
    }
    v42 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
    if (*((_QWORD *)&v62 + 1))
    {
      v43 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
  }
  __p[0] = &v63;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1ADF2C598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  a9 = (void **)(v9 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void quasar::TranslatorOptions::~TranslatorOptions(quasar::TranslatorOptions *this)
{
  char *v2;
  void **v3;

  v2 = (char *)this + 8343;
  *(_QWORD *)this = &off_1E5D367E0;
  *((_QWORD *)this + 1064) = &unk_1E5D34828;
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)this + 8648, *((_QWORD **)this + 1082));
  v3 = (void **)((char *)this + 8616);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  *((_QWORD *)this + 1064) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 8600);
  if (v2[248] < 0)
    operator delete(*((void **)this + 1071));
  if (v2[224] < 0)
    operator delete(*((void **)this + 1068));
  if (v2[200] < 0)
    operator delete(*((void **)this + 1065));
  *((_QWORD *)this + 1039) = &unk_1E5D347B8;
  std::__tree<std::__value_type<std::string,quasar::PTree>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PTree>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::PTree>>>::destroy((uint64_t)this + 8488, *((_QWORD **)this + 1062));
  quasar::PTree::~PTree((quasar::TranslatorOptions *)((char *)this + 8416));
  *((_QWORD *)this + 1039) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 8400);
  if (v2[48] < 0)
    operator delete(*((void **)this + 1046));
  if (v2[24] < 0)
    operator delete(*((void **)this + 1043));
  if (*v2 < 0)
    operator delete(*((void **)this + 1040));
  *((_QWORD *)this + 1021) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 8288, *((char **)this + 1037));
  *((_QWORD *)this + 1021) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 8256);
  if (*((char *)this + 8247) < 0)
    operator delete(*((void **)this + 1028));
  if (*((char *)this + 8223) < 0)
    operator delete(*((void **)this + 1025));
  if (*((char *)this + 8199) < 0)
    operator delete(*((void **)this + 1022));
  *((_QWORD *)this + 1003) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 8144, *((char **)this + 1019));
  *((_QWORD *)this + 1003) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 8112);
  if (*((char *)this + 8103) < 0)
    operator delete(*((void **)this + 1010));
  if (*((char *)this + 8079) < 0)
    operator delete(*((void **)this + 1007));
  if (*((char *)this + 8055) < 0)
    operator delete(*((void **)this + 1004));
  *((_QWORD *)this + 985) = &unk_1E5D34898;
  std::__tree<std::string>::destroy((uint64_t)this + 8000, *((char **)this + 1001));
  *((_QWORD *)this + 985) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 7968);
  if (*((char *)this + 7959) < 0)
    operator delete(*((void **)this + 992));
  if (*((char *)this + 7935) < 0)
    operator delete(*((void **)this + 989));
  if (*((char *)this + 7911) < 0)
    operator delete(*((void **)this + 986));
  *((_QWORD *)this + 967) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 7856, *((char **)this + 983));
  *((_QWORD *)this + 967) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 7824);
  if (*((char *)this + 7815) < 0)
    operator delete(*((void **)this + 974));
  if (*((char *)this + 7791) < 0)
    operator delete(*((void **)this + 971));
  if (*((char *)this + 7767) < 0)
    operator delete(*((void **)this + 968));
  *((_QWORD *)this + 942) = &unk_1E5D347B8;
  std::__tree<std::__value_type<std::string,quasar::PTree>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::PTree>,std::less<void>,true>,std::allocator<std::__value_type<std::string,quasar::PTree>>>::destroy((uint64_t)this + 7712, *((_QWORD **)this + 965));
  quasar::PTree::~PTree((quasar::TranslatorOptions *)((char *)this + 7640));
  *((_QWORD *)this + 942) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 7624);
  if (*((char *)this + 7615) < 0)
    operator delete(*((void **)this + 949));
  if (*((char *)this + 7591) < 0)
    operator delete(*((void **)this + 946));
  if (*((char *)this + 7567) < 0)
    operator delete(*((void **)this + 943));
  *((_QWORD *)this + 924) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 7512, *((char **)this + 940));
  *((_QWORD *)this + 924) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 7480);
  if (*((char *)this + 7471) < 0)
    operator delete(*((void **)this + 931));
  if (*((char *)this + 7447) < 0)
    operator delete(*((void **)this + 928));
  if (*((char *)this + 7423) < 0)
    operator delete(*((void **)this + 925));
  *((_QWORD *)this + 906) = &unk_1E5D348D0;
  std::__tree<std::string>::destroy((uint64_t)this + 7368, *((char **)this + 922));
  *((_QWORD *)this + 906) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 7336);
  if (*((char *)this + 7327) < 0)
    operator delete(*((void **)this + 913));
  if (*((char *)this + 7303) < 0)
    operator delete(*((void **)this + 910));
  if (*((char *)this + 7279) < 0)
    operator delete(*((void **)this + 907));
  *((_QWORD *)this + 888) = &unk_1E5D348D0;
  std::__tree<std::string>::destroy((uint64_t)this + 7224, *((char **)this + 904));
  *((_QWORD *)this + 888) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 7192);
  if (*((char *)this + 7183) < 0)
    operator delete(*((void **)this + 895));
  if (*((char *)this + 7159) < 0)
    operator delete(*((void **)this + 892));
  if (*((char *)this + 7135) < 0)
    operator delete(*((void **)this + 889));
  *((_QWORD *)this + 870) = &unk_1E5D348D0;
  std::__tree<std::string>::destroy((uint64_t)this + 7080, *((char **)this + 886));
  *((_QWORD *)this + 870) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 7048);
  if (*((char *)this + 7039) < 0)
    operator delete(*((void **)this + 877));
  if (*((char *)this + 7015) < 0)
    operator delete(*((void **)this + 874));
  if (*((char *)this + 6991) < 0)
    operator delete(*((void **)this + 871));
  *((_QWORD *)this + 852) = &unk_1E5D348D0;
  std::__tree<std::string>::destroy((uint64_t)this + 6936, *((char **)this + 868));
  *((_QWORD *)this + 852) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 6904);
  if (*((char *)this + 6895) < 0)
    operator delete(*((void **)this + 859));
  if (*((char *)this + 6871) < 0)
    operator delete(*((void **)this + 856));
  if (*((char *)this + 6847) < 0)
    operator delete(*((void **)this + 853));
  *((_QWORD *)this + 834) = &unk_1E5D348D0;
  std::__tree<std::string>::destroy((uint64_t)this + 6792, *((char **)this + 850));
  *((_QWORD *)this + 834) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 6760);
  if (*((char *)this + 6751) < 0)
    operator delete(*((void **)this + 841));
  if (*((char *)this + 6727) < 0)
    operator delete(*((void **)this + 838));
  if (*((char *)this + 6703) < 0)
    operator delete(*((void **)this + 835));
  *((_QWORD *)this + 816) = &unk_1E5D348D0;
  std::__tree<std::string>::destroy((uint64_t)this + 6648, *((char **)this + 832));
  *((_QWORD *)this + 816) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 6616);
  if (*((char *)this + 6607) < 0)
    operator delete(*((void **)this + 823));
  if (*((char *)this + 6583) < 0)
    operator delete(*((void **)this + 820));
  if (*((char *)this + 6559) < 0)
    operator delete(*((void **)this + 817));
  *((_QWORD *)this + 796) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 6504, *((_QWORD **)this + 814));
  if (*((char *)this + 6495) < 0)
    operator delete(*((void **)this + 809));
  *((_QWORD *)this + 796) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 6456);
  if (*((char *)this + 6447) < 0)
    operator delete(*((void **)this + 803));
  if (*((char *)this + 6423) < 0)
    operator delete(*((void **)this + 800));
  if (*((char *)this + 6399) < 0)
    operator delete(*((void **)this + 797));
  *((_QWORD *)this + 776) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 6344, *((_QWORD **)this + 794));
  if (*((char *)this + 6335) < 0)
    operator delete(*((void **)this + 789));
  *((_QWORD *)this + 776) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 6296);
  if (*((char *)this + 6287) < 0)
    operator delete(*((void **)this + 783));
  if (*((char *)this + 6263) < 0)
    operator delete(*((void **)this + 780));
  if (*((char *)this + 6239) < 0)
    operator delete(*((void **)this + 777));
  *((_QWORD *)this + 756) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 6184, *((_QWORD **)this + 774));
  if (*((char *)this + 6175) < 0)
    operator delete(*((void **)this + 769));
  *((_QWORD *)this + 756) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 6136);
  if (*((char *)this + 6127) < 0)
    operator delete(*((void **)this + 763));
  if (*((char *)this + 6103) < 0)
    operator delete(*((void **)this + 760));
  if (*((char *)this + 6079) < 0)
    operator delete(*((void **)this + 757));
  *((_QWORD *)this + 736) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 6024, *((_QWORD **)this + 754));
  if (*((char *)this + 6015) < 0)
    operator delete(*((void **)this + 749));
  *((_QWORD *)this + 736) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 5976);
  if (*((char *)this + 5967) < 0)
    operator delete(*((void **)this + 743));
  if (*((char *)this + 5943) < 0)
    operator delete(*((void **)this + 740));
  if (*((char *)this + 5919) < 0)
    operator delete(*((void **)this + 737));
  *((_QWORD *)this + 716) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 5864, *((_QWORD **)this + 734));
  if (*((char *)this + 5855) < 0)
    operator delete(*((void **)this + 729));
  *((_QWORD *)this + 716) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 5816);
  if (*((char *)this + 5807) < 0)
    operator delete(*((void **)this + 723));
  if (*((char *)this + 5783) < 0)
    operator delete(*((void **)this + 720));
  if (*((char *)this + 5759) < 0)
    operator delete(*((void **)this + 717));
  *((_QWORD *)this + 698) = &unk_1E5D348D0;
  std::__tree<std::string>::destroy((uint64_t)this + 5704, *((char **)this + 714));
  *((_QWORD *)this + 698) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 5672);
  if (*((char *)this + 5663) < 0)
    operator delete(*((void **)this + 705));
  if (*((char *)this + 5639) < 0)
    operator delete(*((void **)this + 702));
  if (*((char *)this + 5615) < 0)
    operator delete(*((void **)this + 699));
  *((_QWORD *)this + 680) = &unk_1E5D34898;
  std::__tree<std::string>::destroy((uint64_t)this + 5560, *((char **)this + 696));
  *((_QWORD *)this + 680) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 5528);
  if (*((char *)this + 5519) < 0)
    operator delete(*((void **)this + 687));
  if (*((char *)this + 5495) < 0)
    operator delete(*((void **)this + 684));
  if (*((char *)this + 5471) < 0)
    operator delete(*((void **)this + 681));
  *((_QWORD *)this + 662) = &unk_1E5D348D0;
  std::__tree<std::string>::destroy((uint64_t)this + 5416, *((char **)this + 678));
  *((_QWORD *)this + 662) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 5384);
  if (*((char *)this + 5375) < 0)
    operator delete(*((void **)this + 669));
  if (*((char *)this + 5351) < 0)
    operator delete(*((void **)this + 666));
  if (*((char *)this + 5327) < 0)
    operator delete(*((void **)this + 663));
  *((_QWORD *)this + 644) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 5272, *((char **)this + 660));
  *((_QWORD *)this + 644) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 5240);
  if (*((char *)this + 5231) < 0)
    operator delete(*((void **)this + 651));
  if (*((char *)this + 5207) < 0)
    operator delete(*((void **)this + 648));
  if (*((char *)this + 5183) < 0)
    operator delete(*((void **)this + 645));
  *((_QWORD *)this + 626) = &unk_1E5D34898;
  std::__tree<std::string>::destroy((uint64_t)this + 5128, *((char **)this + 642));
  *((_QWORD *)this + 626) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 5096);
  if (*((char *)this + 5087) < 0)
    operator delete(*((void **)this + 633));
  if (*((char *)this + 5063) < 0)
    operator delete(*((void **)this + 630));
  if (*((char *)this + 5039) < 0)
    operator delete(*((void **)this + 627));
  *((_QWORD *)this + 608) = &unk_1E5D34898;
  std::__tree<std::string>::destroy((uint64_t)this + 4984, *((char **)this + 624));
  *((_QWORD *)this + 608) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 4952);
  if (*((char *)this + 4943) < 0)
    operator delete(*((void **)this + 615));
  if (*((char *)this + 4919) < 0)
    operator delete(*((void **)this + 612));
  if (*((char *)this + 4895) < 0)
    operator delete(*((void **)this + 609));
  *((_QWORD *)this + 588) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 4840, *((_QWORD **)this + 606));
  if (*((char *)this + 4831) < 0)
    operator delete(*((void **)this + 601));
  *((_QWORD *)this + 588) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 4792);
  if (*((char *)this + 4783) < 0)
    operator delete(*((void **)this + 595));
  if (*((char *)this + 4759) < 0)
    operator delete(*((void **)this + 592));
  if (*((char *)this + 4735) < 0)
    operator delete(*((void **)this + 589));
  *((_QWORD *)this + 570) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 4680, *((char **)this + 586));
  *((_QWORD *)this + 570) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 4648);
  if (*((char *)this + 4639) < 0)
    operator delete(*((void **)this + 577));
  if (*((char *)this + 4615) < 0)
    operator delete(*((void **)this + 574));
  if (*((char *)this + 4591) < 0)
    operator delete(*((void **)this + 571));
  *((_QWORD *)this + 552) = &unk_1E5D348D0;
  std::__tree<std::string>::destroy((uint64_t)this + 4536, *((char **)this + 568));
  *((_QWORD *)this + 552) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 4504);
  if (*((char *)this + 4495) < 0)
    operator delete(*((void **)this + 559));
  if (*((char *)this + 4471) < 0)
    operator delete(*((void **)this + 556));
  if (*((char *)this + 4447) < 0)
    operator delete(*((void **)this + 553));
  *((_QWORD *)this + 534) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 4392, *((char **)this + 550));
  *((_QWORD *)this + 534) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 4360);
  if (*((char *)this + 4351) < 0)
    operator delete(*((void **)this + 541));
  if (*((char *)this + 4327) < 0)
    operator delete(*((void **)this + 538));
  if (*((char *)this + 4303) < 0)
    operator delete(*((void **)this + 535));
  *((_QWORD *)this + 516) = &unk_1E5D34898;
  std::__tree<std::string>::destroy((uint64_t)this + 4248, *((char **)this + 532));
  *((_QWORD *)this + 516) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 4216);
  if (*((char *)this + 4207) < 0)
    operator delete(*((void **)this + 523));
  if (*((char *)this + 4183) < 0)
    operator delete(*((void **)this + 520));
  if (*((char *)this + 4159) < 0)
    operator delete(*((void **)this + 517));
  *((_QWORD *)this + 498) = &unk_1E5D34898;
  std::__tree<std::string>::destroy((uint64_t)this + 4104, *((char **)this + 514));
  *((_QWORD *)this + 498) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 4072);
  if (*((char *)this + 4063) < 0)
    operator delete(*((void **)this + 505));
  if (*((char *)this + 4039) < 0)
    operator delete(*((void **)this + 502));
  if (*((char *)this + 4015) < 0)
    operator delete(*((void **)this + 499));
  *((_QWORD *)this + 478) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 3960, *((_QWORD **)this + 496));
  if (*((char *)this + 3951) < 0)
    operator delete(*((void **)this + 491));
  *((_QWORD *)this + 478) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 3912);
  if (*((char *)this + 3903) < 0)
    operator delete(*((void **)this + 485));
  if (*((char *)this + 3879) < 0)
    operator delete(*((void **)this + 482));
  if (*((char *)this + 3855) < 0)
    operator delete(*((void **)this + 479));
  *((_QWORD *)this + 460) = &unk_1E5D34898;
  std::__tree<std::string>::destroy((uint64_t)this + 3800, *((char **)this + 476));
  *((_QWORD *)this + 460) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 3768);
  if (*((char *)this + 3759) < 0)
    operator delete(*((void **)this + 467));
  if (*((char *)this + 3735) < 0)
    operator delete(*((void **)this + 464));
  if (*((char *)this + 3711) < 0)
    operator delete(*((void **)this + 461));
  *((_QWORD *)this + 442) = &unk_1E5D348D0;
  std::__tree<std::string>::destroy((uint64_t)this + 3656, *((char **)this + 458));
  *((_QWORD *)this + 442) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 3624);
  if (*((char *)this + 3615) < 0)
    operator delete(*((void **)this + 449));
  if (*((char *)this + 3591) < 0)
    operator delete(*((void **)this + 446));
  if (*((char *)this + 3567) < 0)
    operator delete(*((void **)this + 443));
  *((_QWORD *)this + 424) = &unk_1E5D34898;
  std::__tree<std::string>::destroy((uint64_t)this + 3512, *((char **)this + 440));
  *((_QWORD *)this + 424) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 3480);
  if (*((char *)this + 3471) < 0)
    operator delete(*((void **)this + 431));
  if (*((char *)this + 3447) < 0)
    operator delete(*((void **)this + 428));
  if (*((char *)this + 3423) < 0)
    operator delete(*((void **)this + 425));
  *((_QWORD *)this + 406) = &unk_1E5D34898;
  std::__tree<std::string>::destroy((uint64_t)this + 3368, *((char **)this + 422));
  *((_QWORD *)this + 406) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 3336);
  if (*((char *)this + 3327) < 0)
    operator delete(*((void **)this + 413));
  if (*((char *)this + 3303) < 0)
    operator delete(*((void **)this + 410));
  if (*((char *)this + 3279) < 0)
    operator delete(*((void **)this + 407));
  *((_QWORD *)this + 388) = &unk_1E5D348D0;
  std::__tree<std::string>::destroy((uint64_t)this + 3224, *((char **)this + 404));
  *((_QWORD *)this + 388) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 3192);
  if (*((char *)this + 3183) < 0)
    operator delete(*((void **)this + 395));
  if (*((char *)this + 3159) < 0)
    operator delete(*((void **)this + 392));
  if (*((char *)this + 3135) < 0)
    operator delete(*((void **)this + 389));
  *((_QWORD *)this + 368) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 3080, *((_QWORD **)this + 386));
  if (*((char *)this + 3071) < 0)
    operator delete(*((void **)this + 381));
  *((_QWORD *)this + 368) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 3032);
  if (*((char *)this + 3023) < 0)
    operator delete(*((void **)this + 375));
  if (*((char *)this + 2999) < 0)
    operator delete(*((void **)this + 372));
  if (*((char *)this + 2975) < 0)
    operator delete(*((void **)this + 369));
  quasar::PDecOptions::~PDecOptions(this);
}

{
  quasar::TranslatorOptions::~TranslatorOptions(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::OptionValue<std::vector<std::string>>::~OptionValue(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_1E5D34828;
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1 + 136, *(_QWORD **)(a1 + 144));
  v3 = (void **)(a1 + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(_QWORD *)a1 = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 88);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

_QWORD *quasar::TranslatorOptions::TranslatorOptions(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v4;
  _QWORD *v8;
  std::string v9[2];
  std::string v10;
  std::string v11;

  *(_QWORD *)quasar::PDecOptions::PDecOptions((quasar::PDecOptions *)a1) = &off_1E5D367E0;
  std::string::basic_string[abi:ne180100]<0>(v9, "model-file");
  std::string::basic_string[abi:ne180100]<0>(&v11, "");
  std::string::basic_string[abi:ne180100]<0>(&v10, "mt model file name");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)(a1 + 368), v9, &v11, &v10, 35);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "beam");
  LODWORD(v10.__r_.__value_.__l.__data_) = 4;
  std::string::basic_string[abi:ne180100]<0>(&v11, "maximum number of active beams in pruning");
  v8 = a1 + 388;
  quasar::OptionValue<int>::OptionValue((uint64_t)(a1 + 388), v9, &v10, &v11, 35);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "as-beam");
  v10.__r_.__value_.__r.__words[0] = 0x41E0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "as_beam pruning value");
  quasar::OptionValue<double>::OptionValue((uint64_t)(a1 + 406), v9, &v10, &v11, 96);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "rs-beam");
  v10.__r_.__value_.__r.__words[0] = 0x41E0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "rs_beam pruning value");
  quasar::OptionValue<double>::OptionValue((uint64_t)(a1 + 424), v9, &v10, &v11, 96);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "beam-batch");
  LODWORD(v10.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v11, "beam batch size for (espresso) decoder model (0 = off, -1 = any)");
  quasar::OptionValue<int>::OptionValue((uint64_t)(a1 + 442), v9, &v10, &v11, 213);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "confidence-threshold");
  v10.__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v11, "confidence threshold");
  quasar::OptionValue<double>::OptionValue((uint64_t)(a1 + 460), v9, &v10, &v11, 35);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "lm-model-file");
  std::string::basic_string[abi:ne180100]<0>(&v11, "");
  std::string::basic_string[abi:ne180100]<0>(&v10, "path to language model file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)(a1 + 478), v9, &v11, &v10, 35);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "lm-weight");
  v10.__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v11, "language model weight");
  quasar::OptionValue<double>::OptionValue((uint64_t)(a1 + 498), v9, &v10, &v11, 35);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "veto-factor");
  v10.__r_.__value_.__r.__words[0] = 0x3FE0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "MT defcoding veto factor");
  quasar::OptionValue<double>::OptionValue((uint64_t)(a1 + 516), v9, &v10, &v11, 35);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "veto-factor-exclude-input-tags");
  v10.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v11, "MT decoding, exclude input tags in  veto factor computation");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)(a1 + 534), v9, &v10, &v11, 138);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "veto-factor-num-external-input-tags");
  LODWORD(v10.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v11, "MT decoding, num externally provided tags to exclude for veto factor");
  quasar::OptionValue<int>::OptionValue((uint64_t)(a1 + 552), v9, &v10, &v11, 138);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "norm-costs");
  v10.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v11, "normalize costs in mt decoding? (backward compatible version)");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)(a1 + 570), v9, &v10, &v11, 35);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "norm-mode");
  std::string::basic_string[abi:ne180100]<0>(&v11, "off");
  std::string::basic_string[abi:ne180100]<0>(&v10, "normalize costs in mt decoding? (off|length|gnmt)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)(a1 + 588), v9, &v11, &v10, 97);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "norm-alpha");
  v10.__r_.__value_.__r.__words[0] = 0x3FF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "normalization alpha parameter");
  quasar::OptionValue<double>::OptionValue((uint64_t)(a1 + 608), v9, &v10, &v11, 97);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "norm-sigma");
  v10.__r_.__value_.__r.__words[0] = 0x4014000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "normalization sigma parameter");
  quasar::OptionValue<double>::OptionValue((uint64_t)(a1 + 626), v9, &v10, &v11, 97);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "unk-replace");
  v10.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v11, "oov");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)(a1 + 644), v9, &v10, &v11, 35);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "max-seq-length");
  LODWORD(v10.__r_.__value_.__l.__data_) = 100;
  std::string::basic_string[abi:ne180100]<0>(&v11, "maximum decoding sequence length");
  quasar::OptionValue<int>::OptionValue((uint64_t)(a1 + 662), v9, &v10, &v11, 35);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "max-seq-length-relative");
  v10.__r_.__value_.__r.__words[0] = 0xBFF0000000000000;
  std::string::basic_string[abi:ne180100]<0>(&v11, "maximum decoding sequence length as factor of input length");
  quasar::OptionValue<double>::OptionValue((uint64_t)(a1 + 680), v9, &v10, &v11, 160);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "max-seq-length-floor");
  LODWORD(v10.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v11, "maximum decoding sequence length floor (used with input length factor)");
  quasar::OptionValue<int>::OptionValue((uint64_t)(a1 + 698), v9, &v10, &v11, 160);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "lm-mode");
  std::string::basic_string[abi:ne180100]<0>(&v11, "");
  std::string::basic_string[abi:ne180100]<0>(&v10, "lm mode");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)(a1 + 716), v9, &v11, &v10, 35);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "confidence-model-file");
  std::string::basic_string[abi:ne180100]<0>(&v11, "");
  std::string::basic_string[abi:ne180100]<0>(&v10, "confidence model file");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)(a1 + 736), v9, &v11, &v10, 35);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "stop-mode");
  std::string::basic_string[abi:ne180100]<0>(&v11, "");
  std::string::basic_string[abi:ne180100]<0>(&v10, "stop mode in mt decoding (nbeam|best|finished_score)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)(a1 + 756), v9, &v11, &v10, 99);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "block-control");
  std::string::basic_string[abi:ne180100]<0>(&v11, "");
  std::string::basic_string[abi:ne180100]<0>(&v10, "flow control for block sequence (<empty>|optional|optional_stop_on_success)");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)(a1 + 776), v9, &v11, &v10, 106);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "shortlist-lang-pair");
  std::string::basic_string[abi:ne180100]<0>(&v11, "");
  std::string::basic_string[abi:ne180100]<0>(&v10, "language pair used for shortlist");
  quasar::OptionValue<std::string>::OptionValue((uint64_t)(a1 + 796), v9, &v11, &v10, 121);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "shortlist-cond-n");
  LODWORD(v10.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v11, "top n in condition table used for shortlist");
  quasar::OptionValue<int>::OptionValue((uint64_t)(a1 + 816), v9, &v10, &v11, 121);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "shortlist-freq-n");
  LODWORD(v10.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v11, "top n in freq words used for shortlist");
  quasar::OptionValue<int>::OptionValue((uint64_t)(a1 + 834), v9, &v10, &v11, 121);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "nbest");
  std::string::basic_string[abi:ne180100]<0>(&v11, "maximum entries in nbest list to produce (default to same as 'beam'}");
  v4 = (_DWORD *)quasar::OptionValue<int>::value(v8);
  quasar::OptionValue<int>::OptionValue((uint64_t)(a1 + 852), v9, v4, &v11, 35);
  a1[866] = v8;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "stop-mode-finished-score-beam");
  LODWORD(v10.__r_.__value_.__l.__data_) = 1;
  std::string::basic_string[abi:ne180100]<0>(&v11, "number of finished hypotheses considered for finished score stop mode (default: 1)");
  quasar::OptionValue<int>::OptionValue((uint64_t)(a1 + 870), v9, &v10, &v11, 99);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "stream-buffer-n");
  LODWORD(v10.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v11, "stream decoding initial read length (effective read buffer)");
  quasar::OptionValue<int>::OptionValue((uint64_t)(a1 + 888), v9, &v10, &v11, 129);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "stream-block-m");
  LODWORD(v10.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v11, "stream decoding read/write length (block size for looped read/write calls)");
  quasar::OptionValue<int>::OptionValue((uint64_t)(a1 + 906), v9, &v10, &v11, 129);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "stream-stabilize");
  v10.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v11, "stabilize partial stream decoding results after each read/write block");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)(a1 + 924), v9, &v10, &v11, 129);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v11, "partial-input-override");
  quasar::PTree::PTree((quasar::PTree *)v9);
  std::string::basic_string[abi:ne180100]<0>(&v10, "optional override parameter block to change parameter settings for partial-input processing");
  quasar::OptionValue<quasar::PTree>::OptionValue((uint64_t)(a1 + 942), &v11, (uint64_t)v9, &v10, 229);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  quasar::PTree::~PTree((quasar::PTree *)v9);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "timing-meta-info");
  v10.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v11, "include decoder timing information in meta info json");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)(a1 + 967), v9, &v10, &v11, 240);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "repetition-threshold");
  v10.__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v11, "probility threshold for detecting repetitions");
  quasar::OptionValue<double>::OptionValue((uint64_t)(a1 + 985), v9, &v10, &v11, 269);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "abort-on-repetitions");
  v10.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v11, "abort decoding on detecting repetitions");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)(a1 + 1003), v9, &v10, &v11, 269);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "redecode-on-repetitions");
  v10.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v11, "retry decoding without shortlist on detecting repetitions");
  quasar::OptionValue<BOOL>::OptionValue((uint64_t)(a1 + 1021), v9, &v10, &v11, 269);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v11, "redecode-override");
  quasar::PTree::PTree((quasar::PTree *)v9);
  std::string::basic_string[abi:ne180100]<0>(&v10, "optional override parameter block to change parameter settings for redecode");
  quasar::OptionValue<quasar::PTree>::OptionValue((uint64_t)(a1 + 1039), &v11, (uint64_t)v9, &v10, 269);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  quasar::PTree::~PTree((quasar::PTree *)v9);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v9, "shortlist-suppress-tokens");
  memset(&v11, 0, sizeof(v11));
  quasar::OptionValue<std::vector<std::string>>::OptionValue((uint64_t)(a1 + 1064), v9, (uint64_t)&v11, &v10, 121);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  v10.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
  if (SHIBYTE(v9[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9[0].__r_.__value_.__l.__data_);
  quasar::OptionsBase::update((void (***)(void **__return_ptr))a1, a2, a3);
  return a1;
}

void sub_1ADF2E5FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  quasar::PDecOptions *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  *(_QWORD *)(v46 - 216) = a1;
  quasar::OptionValue<std::vector<std::string>>::~OptionValue(v38);
  quasar::OptionValue<quasar::PTree>::~OptionValue(v42);
  quasar::OptionValue<BOOL>::~OptionValue(v41);
  quasar::OptionValue<BOOL>::~OptionValue(v40);
  quasar::OptionValue<double>::~OptionValue(v39);
  quasar::OptionValue<BOOL>::~OptionValue(v37);
  quasar::OptionValue<quasar::PTree>::~OptionValue(v45);
  quasar::OptionValue<BOOL>::~OptionValue(v44);
  quasar::OptionValue<int>::~OptionValue(v43);
  quasar::OptionValue<int>::~OptionValue(a9);
  quasar::OptionValue<int>::~OptionValue(a10);
  quasar::OptionValue<int>::~OptionValue(a11);
  quasar::OptionValue<int>::~OptionValue(a12);
  quasar::OptionValue<int>::~OptionValue(a13);
  quasar::OptionValue<std::string>::~OptionValue(a14);
  quasar::OptionValue<std::string>::~OptionValue(a15);
  quasar::OptionValue<std::string>::~OptionValue(a16);
  quasar::OptionValue<std::string>::~OptionValue(a17);
  quasar::OptionValue<std::string>::~OptionValue(a18);
  quasar::OptionValue<int>::~OptionValue(a19);
  quasar::OptionValue<double>::~OptionValue(a20);
  quasar::OptionValue<int>::~OptionValue(a21);
  quasar::OptionValue<BOOL>::~OptionValue(a22);
  quasar::OptionValue<double>::~OptionValue(a23);
  quasar::OptionValue<double>::~OptionValue(a24);
  quasar::OptionValue<std::string>::~OptionValue(a25);
  quasar::OptionValue<BOOL>::~OptionValue(a26);
  quasar::OptionValue<int>::~OptionValue(a27);
  quasar::OptionValue<BOOL>::~OptionValue(a28);
  quasar::OptionValue<double>::~OptionValue(a29);
  quasar::OptionValue<double>::~OptionValue(a30);
  quasar::OptionValue<std::string>::~OptionValue(a31);
  quasar::OptionValue<double>::~OptionValue(a32);
  quasar::OptionValue<int>::~OptionValue(a33);
  quasar::OptionValue<double>::~OptionValue(a34);
  quasar::OptionValue<double>::~OptionValue(a35);
  quasar::OptionValue<int>::~OptionValue(*(_QWORD *)(v46 - 208));
  quasar::OptionValue<std::string>::~OptionValue(a36);
  quasar::PDecOptions::~PDecOptions(v36);
  _Unwind_Resume(*(_Unwind_Exception **)(v46 - 216));
}

void sub_1ADF2E7D0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 216) = a1;
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  if (*(char *)(v1 - 177) < 0)
    operator delete(*(void **)(v1 - 200));
  JUMPOUT(0x1ADF2E6A8);
}

void sub_1ADF2E800(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 216) = a1;
  JUMPOUT(0x1ADF2E6A8);
}

void sub_1ADF2E808(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 216) = a1;
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  if (*(char *)(v1 - 177) < 0)
    operator delete(*(void **)(v1 - 200));
  JUMPOUT(0x1ADF2E6B0);
}

void sub_1ADF2E838(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 216) = a1;
  JUMPOUT(0x1ADF2E6B0);
}

void sub_1ADF2E840(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 216) = a1;
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  if (*(char *)(v1 - 177) < 0)
    operator delete(*(void **)(v1 - 200));
  JUMPOUT(0x1ADF2E6B8);
}

void sub_1ADF2E870(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 216) = a1;
  JUMPOUT(0x1ADF2E6B8);
}

void sub_1ADF2E878(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 216) = a1;
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  if (*(char *)(v1 - 177) < 0)
    operator delete(*(void **)(v1 - 200));
  JUMPOUT(0x1ADF2E6C0);
}

void sub_1ADF2E8A8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 216) = a1;
  JUMPOUT(0x1ADF2E6C0);
}

void sub_1ADF2E8B0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 216) = a1;
  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  quasar::PTree::~PTree((quasar::PTree *)(v1 - 200));
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  JUMPOUT(0x1ADF2E6C8);
}

void sub_1ADF2E8F0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 216) = a1;
  JUMPOUT(0x1ADF2E6C8);
}

void sub_1ADF2E8F8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 216) = a1;
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  if (*(char *)(v1 - 177) < 0)
    operator delete(*(void **)(v1 - 200));
  JUMPOUT(0x1ADF2E6D0);
}

void sub_1ADF2E928(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 216) = a1;
  JUMPOUT(0x1ADF2E6D0);
}

void sub_1ADF2E930(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 216) = a1;
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  if (*(char *)(v1 - 177) < 0)
    operator delete(*(void **)(v1 - 200));
  JUMPOUT(0x1ADF2E6D8);
}

void sub_1ADF2E960(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 216) = a1;
  JUMPOUT(0x1ADF2E6D8);
}

void sub_1ADF2E968(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 216) = a1;
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  if (*(char *)(v1 - 177) < 0)
    operator delete(*(void **)(v1 - 200));
  JUMPOUT(0x1ADF2E6E0);
}

void sub_1ADF2E998(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 216) = a1;
  JUMPOUT(0x1ADF2E6E0);
}

void sub_1ADF2E9A0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 216) = a1;
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  if (*(char *)(v1 - 177) < 0)
    operator delete(*(void **)(v1 - 200));
  JUMPOUT(0x1ADF2E6E8);
}

void sub_1ADF2E9D0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 216) = a1;
  JUMPOUT(0x1ADF2E6E8);
}

void sub_1ADF2E9D8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 216) = a1;
  if (*(char *)(v1 - 177) < 0)
    operator delete(*(void **)(v1 - 200));
  JUMPOUT(0x1ADF2E6F0);
}

_QWORD *quasar::TranslatorOptions::options@<X0>(quasar::TranslatorOptions *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = operator new(0x1B8uLL);
  *result = (char *)this + 16;
  result[1] = (char *)this + 2944;
  result[2] = (char *)this + 3104;
  result[3] = (char *)this + 3248;
  result[4] = (char *)this + 3392;
  result[5] = (char *)this + 3536;
  result[6] = (char *)this + 6816;
  result[7] = (char *)this + 3680;
  result[8] = (char *)this + 3824;
  result[9] = (char *)this + 3984;
  result[10] = (char *)this + 4128;
  result[11] = (char *)this + 4272;
  result[12] = (char *)this + 4416;
  result[13] = (char *)this + 4560;
  result[14] = (char *)this + 4704;
  result[15] = (char *)this + 4864;
  result[16] = (char *)this + 5008;
  result[17] = (char *)this + 5152;
  result[18] = (char *)this + 5296;
  result[19] = (char *)this + 5440;
  result[20] = (char *)this + 5584;
  result[21] = (char *)this + 176;
  result[22] = (char *)this + 320;
  result[23] = (char *)this + 5728;
  result[24] = (char *)this + 480;
  result[25] = (char *)this + 640;
  result[26] = (char *)this + 784;
  result[27] = (char *)this + 944;
  result[28] = (char *)this + 5888;
  result[29] = (char *)this + 1088;
  result[30] = (char *)this + 1248;
  result[31] = (char *)this + 1552;
  result[32] = (char *)this + 2016;
  result[33] = (char *)this + 2176;
  result[34] = (char *)this + 1696;
  result[35] = (char *)this + 1856;
  result[36] = (char *)this + 6048;
  result[37] = (char *)this + 6960;
  result[38] = (char *)this + 6208;
  result[39] = (char *)this + 6368;
  result[40] = (char *)this + 6528;
  result[41] = (char *)this + 6672;
  result[42] = (char *)this + 7104;
  result[43] = (char *)this + 7248;
  result[44] = (char *)this + 7392;
  result[45] = (char *)this + 2656;
  result[46] = (char *)this + 2800;
  result[47] = (char *)this + 7536;
  result[48] = (char *)this + 7736;
  result[49] = (char *)this + 2336;
  result[50] = (char *)this + 7880;
  result[51] = (char *)this + 8024;
  result[52] = (char *)this + 8168;
  result[53] = (char *)this + 8312;
  result[54] = (char *)this + 8512;
  *a2 = result;
  a2[1] = result + 55;
  a2[2] = result + 55;
  return result;
}

void quasar::TranslatorOptions::setLocales(uint64_t a1, const std::string *a2, const std::string *a3)
{
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(&__str, "<constructor argument>");
  std::string::operator=((std::string *)(a1 + 1800), a2);
  std::string::operator=((std::string *)(a1 + 1728), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__str, "<constructor argument>");
  std::string::operator=((std::string *)(a1 + 1960), a3);
  std::string::operator=((std::string *)(a1 + 1888), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1ADF2F328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::PDecTranslatorBlock::~PDecTranslatorBlock(quasar::PDecTranslatorBlock *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[3];
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 26120);
  quasar::TranslatorOptions::~TranslatorOptions((quasar::PDecTranslatorBlock *)((char *)this + 17448));
  quasar::TranslatorOptions::~TranslatorOptions((quasar::PDecTranslatorBlock *)((char *)this + 8776));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 8760);
  v5 = *((_QWORD *)this + 1094);
  *((_QWORD *)this + 1094) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 8736);
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 1089, 0);
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 1088, 0);
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 1087, 0);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 8680);
  v6 = a2[1];
  *(_QWORD *)this = v6;
  *(_QWORD *)((char *)this + *(_QWORD *)(v6 - 24)) = a2[2];
  quasar::TranslatorOptions::~TranslatorOptions((quasar::PDecTranslatorBlock *)((char *)this + 8));
}

void quasar::PDecTranslatorBlock::~PDecTranslatorBlock(quasar::PDecTranslatorBlock *this)
{
  uint64_t v1;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 26136));
}

{
  uint64_t v1;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 26136));
  JUMPOUT(0x1AF44D190);
}

void `virtual thunk to'quasar::PDecTranslatorBlock::~PDecTranslatorBlock(quasar::PDecTranslatorBlock *this)
{
  uint64_t v1;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 26136));
}

{
  quasar::PDecTranslatorBlock::~PDecTranslatorBlock((quasar::PDecTranslatorBlock *)((char *)this
                                                                                  + *(_QWORD *)(*(_QWORD *)this - 24)));
}

void quasar::PDecTranslatorBlock::updateConfiguration(uint64_t a1, const quasar::SystemConfig *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *ModelLoaderPtr;

  quasar::ProcessingBlock::updateConfiguration(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24), a2, a3, a4);
  ModelLoaderPtr = (uint64_t *)quasar::SystemConfig::getModelLoaderPtr(a2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a1 + 8760), ModelLoaderPtr);
  quasar::OptionsBase::update((void (***)(void **__return_ptr))(a1 + 8776), a3, a4);
  quasar::OptionsBase::update((void (***)(void **__return_ptr))(a1 + 17448), a3, a4);
}

void `virtual thunk to'quasar::PDecTranslatorBlock::updateConfiguration(_QWORD *a1, const quasar::SystemConfig *a2, uint64_t a3, uint64_t a4)
{
  quasar::PDecTranslatorBlock::updateConfiguration((uint64_t)a1 + *(_QWORD *)(*a1 - 48), a2, a3, a4);
}

void quasar::PDecTranslatorBlock::createDecodeOptions(quasar::PDecTranslatorBlock *this@<X0>, quasar::TranslatorOptions *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  int NormalizationMode;
  uint64_t v10;
  float v11;
  float v12;
  const std::string *v13;
  const std::string *v14;
  _QWORD *v15;
  float v16;
  float v17;
  const std::string *v18;
  const std::string *v19;
  const std::string *v20;
  const std::string *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  const std::string *v27;
  float v28;
  _BYTE *v29;
  float v30;
  _BYTE *v31;
  uint64_t v32;

  v6 = (_QWORD *)((char *)a2 + 3104);
  v7 = quasar::OptionValue<std::string>::value((_QWORD *)a2 + 588);
  v8 = (char *)quasar::OptionValue<BOOL>::value((_QWORD *)a2 + 570);
  NormalizationMode = quasar::PDecEngineBlockMixin::getNormalizationMode(v7, *v8);
  v10 = operator new();
  LODWORD(v6) = *(_DWORD *)quasar::OptionValue<int>::value(v6);
  v11 = *(double *)quasar::OptionValue<double>::value((_QWORD *)a2 + 516);
  kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DecodeOptions(v10, (int)v6, NormalizationMode, v11);
  *a3 = v10;
  *(_DWORD *)v10 = *(_DWORD *)quasar::OptionValue<int>::value((_QWORD *)a2 + 662);
  v12 = *(double *)quasar::OptionValue<double>::value((_QWORD *)a2 + 680);
  *(float *)(v10 + 4) = v12;
  *(_DWORD *)(v10 + 8) = *(_DWORD *)quasar::OptionValue<int>::value((_QWORD *)a2 + 698);
  v13 = (const std::string *)quasar::OptionValue<std::string>::value((_QWORD *)a2 + 212);
  std::string::operator=((std::string *)(v10 + 16), v13);
  v14 = (const std::string *)quasar::OptionValue<std::string>::value((_QWORD *)a2 + 232);
  std::string::operator=((std::string *)(v10 + 40), v14);
  *(_QWORD *)(v10 + 200) = *((_QWORD *)this + 1094);
  v15 = (_QWORD *)quasar::OptionValue<std::string>::value((_QWORD *)a2 + 716);
  *(_DWORD *)(v10 + 184) = quasar::PDecEngineBlockMixin::getLmModeFromStr(v15);
  v16 = *(double *)quasar::OptionValue<double>::value((_QWORD *)a2 + 498);
  *(float *)(v10 + 180) = v16;
  *(_DWORD *)(v10 + 172) = *(_DWORD *)quasar::OptionValue<int>::value((_QWORD *)a2 + 852);
  v17 = *(double *)quasar::OptionValue<double>::value((_QWORD *)a2 + 460);
  *(float *)(v10 + 176) = v17;
  v18 = (const std::string *)quasar::OptionValue<std::string>::value((_QWORD *)a2 + 252);
  std::string::operator=((std::string *)(v10 + 64), v18);
  v19 = (const std::string *)quasar::OptionValue<std::string>::value((_QWORD *)a2 + 272);
  std::string::operator=((std::string *)(v10 + 88), v19);
  v20 = (const std::string *)quasar::OptionValue<std::string>::value((_QWORD *)a2 + 292);
  std::string::operator=((std::string *)(v10 + 112), v20);
  v21 = (const std::string *)quasar::OptionValue<std::string>::value((_QWORD *)a2 + 312);
  std::string::operator=((std::string *)(v10 + 136), v21);
  v22 = *(double *)quasar::OptionValue<double>::value((_QWORD *)a2 + 406);
  *(float *)(v10 + 164) = v22;
  v23 = *(double *)quasar::OptionValue<double>::value((_QWORD *)a2 + 424);
  *(float *)(v10 + 168) = v23;
  *(_DWORD *)(v10 + 312) = *(_DWORD *)quasar::OptionValue<int>::value((_QWORD *)a2 + 442);
  v24 = *(double *)quasar::OptionValue<double>::value((_QWORD *)a2 + 608);
  *(float *)(v10 + 220) = v24;
  v25 = *(double *)quasar::OptionValue<double>::value((_QWORD *)a2 + 626);
  *(float *)(v10 + 224) = v25;
  v26 = quasar::OptionValue<std::string>::value((_QWORD *)a2 + 756);
  *(_DWORD *)(v10 + 188) = quasar::PDecEngineBlockMixin::getStopMode(v26);
  *(_DWORD *)(v10 + 192) = *(_DWORD *)quasar::OptionValue<int>::value((_QWORD *)a2 + 870);
  v27 = (const std::string *)quasar::OptionValue<std::string>::value((_QWORD *)a2 + 796);
  std::string::operator=((std::string *)(v10 + 264), v27);
  *(_DWORD *)(v10 + 288) = *(_DWORD *)quasar::OptionValue<int>::value((_QWORD *)a2 + 816);
  *(_DWORD *)(v10 + 292) = *(_DWORD *)quasar::OptionValue<int>::value((_QWORD *)a2 + 834);
  *(_DWORD *)(v10 + 296) = *(_DWORD *)quasar::OptionValue<int>::value((_QWORD *)a2 + 888);
  *(_DWORD *)(v10 + 300) = *(_DWORD *)quasar::OptionValue<int>::value((_QWORD *)a2 + 906);
  *(_BYTE *)(v10 + 304) = *(_BYTE *)quasar::OptionValue<BOOL>::value((_QWORD *)a2 + 924);
  *(_BYTE *)(v10 + 232) = *(_BYTE *)quasar::OptionValue<BOOL>::value((_QWORD *)a2 + 534);
  *(_DWORD *)(v10 + 236) = *(_DWORD *)quasar::OptionValue<int>::value((_QWORD *)a2 + 552);
  *(_BYTE *)(v10 + 308) = *(_BYTE *)quasar::OptionValue<BOOL>::value((_QWORD *)a2 + 967);
  *(_BYTE *)(v10 + 307) = *(_BYTE *)quasar::OptionValue<BOOL>::value((_QWORD *)a2 + 350);
  v28 = *(double *)quasar::OptionValue<double>::value((_QWORD *)a2 + 985);
  *(float *)(v10 + 316) = v28;
  v29 = (_BYTE *)quasar::OptionValue<BOOL>::value((_QWORD *)a2 + 1003);
  v30 = 1.0;
  if (!*v29)
  {
    v31 = (_BYTE *)quasar::OptionValue<BOOL>::value((_QWORD *)a2 + 1021);
    v30 = 0.0;
    if (*v31)
      v30 = 1.0;
  }
  *(float *)(v10 + 320) = v30;
  v32 = quasar::OptionValue<std::vector<std::string>>::value((_QWORD *)a2 + 1064);
  if (v10 + 328 != v32)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(v10 + 328), *(std::string **)v32, *(__int128 **)(v32 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v32 + 8) - *(_QWORD *)v32) >> 3));
}

void sub_1ADF2F930(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1032C40806CDC9ALL);
  _Unwind_Resume(a1);
}

_BYTE *quasar::PDecTranslatorBlock::init(quasar::PDecTranslatorBlock *this)
{
  quasar::TranslatorOptions *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  const std::string *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  quasar::PTree *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned __int8 *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  _BYTE *result;
  quasar::PTree *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *__p[2];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  void **v84;

  v2 = (quasar::PDecTranslatorBlock *)((char *)this + 8);
  v3 = (_QWORD *)((char *)this + 3832);
  v4 = quasar::OptionValue<std::string>::value((_QWORD *)this + 479);
  v5 = *(unsigned __int8 *)(v4 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(v4 + 8);
  if (v5)
  {
    v6 = quasar::OptionValue<std::string>::value(v3);
    quasar::PDecTranslatorBlock::createDeterminizedLm((uint64_t)this, v6, (uint64_t *)__p);
    v7 = *((_QWORD *)this + 1094);
    *((void **)this + 1094) = __p[0];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
  }
  quasar::PDecTranslatorBlock::createDecodeOptions(this, v2, (uint64_t *)__p);
  v8 = __p[0];
  __p[0] = 0;
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 1087, (uint64_t)v8);
  v9 = __p[0];
  __p[0] = 0;
  if (v9)
  {
    v10 = kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~DecodeOptions((uint64_t)v9);
    MEMORY[0x1AF44D190](v10, 0x1032C40806CDC9ALL);
  }
  v11 = quasar::OptionValue<std::string>::value((_QWORD *)this + 369);
  v12 = *(unsigned __int8 *)(v11 + 23);
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(v11 + 8);
  if (!v12)
  {
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Model file name not supplied (configuration value 'model-file' is empty)");
LABEL_80:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v13 = (uint64_t **)*((_QWORD *)this + 1090);
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 3266);
  v82 = *((_QWORD *)this + 3265);
  v83 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  quasar::PDecTranslatorBlock::createDecoder((uint64_t)this, v13, v2, &v82, 0, (uint64_t *)__p);
  v17 = (char *)this + 8680;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 8680, (__int128 *)__p);
  v18 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v19 = (unint64_t *)((char *)__p[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v83;
  if (v83)
  {
    v22 = (unint64_t *)&v83->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (!*(_DWORD *)(*(_QWORD *)v17 + 5888))
  {
    quasar::PDecModelVersionChecker::PDecModelVersionChecker(__p, *(_QWORD *)(*(_QWORD *)v17 + 136));
    quasar::PDecModelVersionChecker::checkVersion((quasar::PDecModelVersionChecker *)__p, *((_DWORD *)this + 4));
  }
  v24 = quasar::OptionValue<std::string>::value((_QWORD *)this + 157);
  v25 = *(unsigned __int8 *)(v24 + 23);
  if ((v25 & 0x80u) != 0)
    v25 = *(_QWORD *)(v24 + 8);
  if (v25)
  {
    v26 = (_QWORD *)*((_QWORD *)this + 1091);
    v27 = (const std::string *)quasar::OptionValue<std::string>::value((_QWORD *)this + 157);
    v28 = (char *)quasar::OptionValue<BOOL>::value((_QWORD *)this + 119);
    quasar::PDecEngineBlockMixin::createPhrasebookList(v26, v27, *v28, (uint64_t)__p);
    v29 = *((_QWORD *)this + 1087);
    v30 = *(_OWORD *)(v29 + 240);
    *(_OWORD *)(v29 + 240) = *(_OWORD *)__p;
    *(_OWORD *)__p = v30;
    v31 = *(_QWORD *)(v29 + 256);
    *(_QWORD *)(v29 + 256) = v66;
    *(_QWORD *)&v66 = v31;
    v84 = __p;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v84);
  }
  v32 = (quasar::PTree *)quasar::OptionValue<quasar::PTree>::value((_QWORD *)this + 943);
  if (quasar::PTree::empty(v32))
  {
    quasar::PDecTranslatorBlock::createDecodeOptions(this, v2, (uint64_t *)__p);
    v33 = __p[0];
    __p[0] = 0;
    std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 1088, (uint64_t)v33);
    v34 = __p[0];
    __p[0] = 0;
    if (v34)
    {
      v35 = kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~DecodeOptions((uint64_t)v34);
      MEMORY[0x1AF44D190](v35, 0x1032C40806CDC9ALL);
    }
    *(_DWORD *)(*((_QWORD *)this + 1088) + 160) = 1;
    goto LABEL_66;
  }
  v36 = quasar::OptionValue<quasar::PTree>::value((_QWORD *)this + 943);
  v37 = quasar::OptionValue<quasar::PTree>::fallback((uint64_t)this + 16312);
  quasar::OptionsBase::update((void (***)(void **__return_ptr))this + 1097, v36, v37 + 32);
  v38 = (unsigned __int8 *)quasar::OptionValue<std::string>::value((_QWORD *)this + 369);
  v39 = quasar::OptionValue<std::string>::value((_QWORD *)this + 1465);
  v40 = v38[23];
  if ((v40 & 0x80u) == 0)
    v41 = v38[23];
  else
    v41 = *((_QWORD *)v38 + 1);
  v42 = *(unsigned __int8 *)(v39 + 23);
  v43 = (char)v42;
  if ((v42 & 0x80u) != 0)
    v42 = *(_QWORD *)(v39 + 8);
  if (v41 != v42)
    goto LABEL_78;
  if (v43 >= 0)
    v44 = (unsigned __int8 *)v39;
  else
    v44 = *(unsigned __int8 **)v39;
  if ((v40 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v38, v44, *((_QWORD *)v38 + 1)))
    {
LABEL_78:
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Model for final- and partial-inputs has to be the same for now.");
      goto LABEL_80;
    }
  }
  else if (v38[23])
  {
    while (*v38 == *v44)
    {
      ++v38;
      ++v44;
      if (!--v40)
        goto LABEL_49;
    }
    goto LABEL_78;
  }
LABEL_49:
  v45 = (unsigned __int8 *)quasar::OptionValue<std::string>::value((_QWORD *)this + 157);
  v46 = quasar::OptionValue<std::string>::value((_QWORD *)this + 1253);
  v47 = v45[23];
  if ((v47 & 0x80u) == 0)
    v48 = v45[23];
  else
    v48 = *((_QWORD *)v45 + 1);
  v49 = *(unsigned __int8 *)(v46 + 23);
  v50 = (char)v49;
  if ((v49 & 0x80u) != 0)
    v49 = *(_QWORD *)(v46 + 8);
  if (v48 != v49)
    goto LABEL_79;
  if (v50 >= 0)
    v51 = (unsigned __int8 *)v46;
  else
    v51 = *(unsigned __int8 **)v46;
  if ((v47 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v45, v51, *((_QWORD *)v45 + 1)))
      goto LABEL_64;
LABEL_79:
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Phrasebooks are not yet supported for partial-input");
    goto LABEL_80;
  }
  if (v45[23])
  {
    while (*v45 == *v51)
    {
      ++v45;
      ++v51;
      if (!--v47)
        goto LABEL_64;
    }
    goto LABEL_79;
  }
LABEL_64:
  quasar::PDecTranslatorBlock::createDecodeOptions(this, (quasar::PDecTranslatorBlock *)((char *)this + 8776), (uint64_t *)__p);
  v52 = __p[0];
  __p[0] = 0;
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 1088, (uint64_t)v52);
  v53 = __p[0];
  __p[0] = 0;
  if (v53)
  {
    v54 = kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~DecodeOptions((uint64_t)v53);
    MEMORY[0x1AF44D190](v54, 0x1032C40806CDC9ALL);
  }
LABEL_66:
  result = (_BYTE *)quasar::OptionValue<BOOL>::value((_QWORD *)this + 1022);
  if (*result)
  {
    v56 = (quasar::PTree *)quasar::OptionValue<quasar::PTree>::value((_QWORD *)this + 1040);
    if (quasar::PTree::empty(v56))
    {
      quasar::PDecTranslatorBlock::createDecodeOptions(this, v2, (uint64_t *)__p);
      v57 = __p[0];
      __p[0] = 0;
      std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 1089, (uint64_t)v57);
      v58 = __p[0];
      __p[0] = 0;
      if (v58)
      {
        v59 = kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~DecodeOptions((uint64_t)v58);
        MEMORY[0x1AF44D190](v59, 0x1032C40806CDC9ALL);
      }
      MEMORY[0x1AF44C914](*((_QWORD *)this + 1089) + 264, "");
      result = (_BYTE *)quasar::OptionValue<BOOL>::value((_QWORD *)this + 1004);
      v60 = 0.0;
      if (*result)
        v60 = 1.0;
      *(float *)(*((_QWORD *)this + 1089) + 320) = v60;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "<reset>");
      *((_BYTE *)this + 25720) = 0;
      std::string::operator=((std::string *)((char *)this + 25648), (const std::string *)__p);
      if (SBYTE7(v66) < 0)
        operator delete(__p[0]);
      v61 = quasar::OptionValue<quasar::PTree>::value((_QWORD *)this + 1040);
      v62 = quasar::OptionValue<quasar::PTree>::fallback((uint64_t)this + 17088);
      quasar::OptionsBase::update((void (***)(void **__return_ptr))this + 2181, v61, v62 + 32);
      quasar::PDecTranslatorBlock::createDecodeOptions(this, (quasar::PDecTranslatorBlock *)((char *)this + 17448), (uint64_t *)__p);
      v63 = __p[0];
      __p[0] = 0;
      std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 1089, (uint64_t)v63);
      result = __p[0];
      __p[0] = 0;
      if (result)
      {
        v64 = kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~DecodeOptions((uint64_t)result);
        return (_BYTE *)MEMORY[0x1AF44D190](v64, 0x1032C40806CDC9ALL);
      }
    }
  }
  return result;
}

void sub_1ADF30010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1ADF30040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&a9);
  __break(1u);
}

void quasar::PDecTranslatorBlock::createDeterminizedLm(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  std::__shared_weak_count *v32;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 8760) + 16))(&v31);
  v5 = v31;
  if (!v31)
  {
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to read lm fst from: ", 28);
    v11 = *(char *)(a2 + 23);
    if (v11 >= 0)
      v12 = a2;
    else
      v12 = *(_QWORD *)a2;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a2 + 23);
    else
      v13 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v15 = 0;
  v6 = operator new();
  fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::BackoffDeterministicOnDemandFst(v6, v5, (uint64_t)__p);
  *a3 = v6;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v7 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1ADF30198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v10 - 48);
  _Unwind_Resume(a1);
}

void quasar::PDecTranslatorBlock::createDecoder(uint64_t a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float v13;
  int v14;
  float v15;
  uint64_t v16;
  char *v17;
  int NormalizationMode;
  int v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v29[2];

  v9 = a1 + 8680;
  v10 = quasar::OptionValue<std::string>::value(a3 + 368);
  v11 = quasar::OptionValue<std::string>::value(a3 + 736);
  v12 = *(_DWORD *)quasar::OptionValue<int>::value(a3 + 662);
  v13 = *(double *)quasar::OptionValue<double>::value(a3 + 680);
  v14 = *(_DWORD *)quasar::OptionValue<int>::value(a3 + 698);
  v15 = *(double *)quasar::OptionValue<double>::value(a3 + 516);
  v16 = quasar::OptionValue<std::string>::value(a3 + 588);
  v17 = (char *)quasar::OptionValue<BOOL>::value(a3 + 570);
  NormalizationMode = quasar::PDecEngineBlockMixin::getNormalizationMode(v16, *v17);
  v19 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value(a3 + 644);
  v20 = quasar::OptionValue<std::string>::value(a3 + 796);
  v21 = *a4;
  v22 = (std::__shared_weak_count *)a4[1];
  v29[0] = v21;
  v29[1] = (uint64_t)v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
  }
  quasar::PDecEngineBlockMixin::createDecoder(v9, a2, a3, v10, v11, v12, v14, NormalizationMode, a6, v13, v15, v19 != 0, v20, a5, v29);
  if (v22)
  {
    v25 = (unint64_t *)&v22->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1ADF303AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_BYTE *`virtual thunk to'quasar::PDecTranslatorBlock::init(quasar::PDecTranslatorBlock *this)
{
  return quasar::PDecTranslatorBlock::init((quasar::PDecTranslatorBlock *)((char *)this
                                                                         + *(_QWORD *)(*(_QWORD *)this - 88)));
}

void quasar::PDecTranslatorBlock::initCompilationSpecs(quasar::PDecTranslatorBlock *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18[17];
  uint64_t v19;
  std::__shared_weak_count *v20;

  v2 = (_QWORD *)((char *)this + 8);
  quasar::PDecTranslatorBlock::createDecodeOptions(this, (quasar::PDecTranslatorBlock *)((char *)this + 8), (uint64_t *)v18);
  v3 = *(_QWORD *)&v18[0];
  *(_QWORD *)&v18[0] = 0;
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 1087, v3);
  v4 = *(_QWORD *)&v18[0];
  *(_QWORD *)&v18[0] = 0;
  if (v4)
  {
    v5 = kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~DecodeOptions(v4);
    MEMORY[0x1AF44D190](v5, 0x1032C40806CDC9ALL);
  }
  v6 = quasar::OptionValue<std::string>::value((_QWORD *)this + 369);
  v7 = *(unsigned __int8 *)(v6 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
  {
    memset(v18, 0, sizeof(v18));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, "Model file name not supplied (configuration value 'model-file' is empty)");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v18);
  }
  v8 = (uint64_t **)*((_QWORD *)this + 1090);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 3266);
  v19 = *((_QWORD *)this + 3265);
  v20 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  quasar::PDecTranslatorBlock::createDecoder((uint64_t)this, v8, v2, &v19, 1, (uint64_t *)v18);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 8680, v18);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v18[0] + 1);
  if (*((_QWORD *)&v18[0] + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v18[0] + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v20;
  if (v20)
  {
    v16 = (unint64_t *)&v20->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1ADF3057C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void quasar::PDecTranslatorBlock::process(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t *v6;
  char *v7;
  _OWORD v8[17];
  void **v9;

  if (*a3 == a3[1])
  {
    if (quasar::gLogLevel >= 2)
    {
      memset(v8, 0, sizeof(v8));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Empty token received", 20);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v8);
    }
    quasar::ProcessingBlock::send((uint64_t)a1 + *(_QWORD *)(*a1 - 24), (uint64_t)a3, 0);
  }
  else
  {
    v5 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v6 = a1 + 1085;
    v7 = (char *)quasar::OptionValue<BOOL>::value(a1 + 195);
    quasar::PDecEngineBlockMixin::processImplementation(v6, (uint64_t)a3, *v7, (uint64_t *)v8);
    quasar::ProcessingBlock::send(v5, (uint64_t)v8, 0);
    v9 = (void **)v8;
    std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v9);
  }
}

void sub_1ADF306A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

void `virtual thunk to'quasar::PDecTranslatorBlock::process(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  quasar::PDecTranslatorBlock::process((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 96)), a2, a3);
}

uint64_t quasar::PDecTranslatorBlock::minConfigVersion(quasar::PDecTranslatorBlock *this)
{
  return 35;
}

uint64_t `virtual thunk to'quasar::PDecTranslatorBlock::minConfigVersion(quasar::PDecTranslatorBlock *this)
{
  return 35;
}

void quasar::PDecTranslatorBlock::compilationSpecs(quasar::PDecTranslatorBlock *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  if (*((_BYTE *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 56))
    quasar::PDecTranslatorBlock::initCompilationSpecs(this);
  v4 = *((_QWORD *)this + 1085);
  if (*(_DWORD *)(v4 + 5888) == 1)
  {
    if (quasar::gLogLevel >= 5)
    {
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      v10 = 0u;
      v11 = 0u;
      v8 = 0u;
      v9 = 0u;
      v6 = 0u;
      v7 = 0u;
      v5 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Getting compilation specs", 25);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v5);
      v4 = *((_QWORD *)this + 1085);
      if (*(_DWORD *)(v4 + 5888) != 1)
        std::__throw_bad_variant_access[abi:ne180100]();
    }
    kaldi::quasar::Encdec::CompilationSpecs(*(kaldi::quasar::Encdec **)(v4 + 136), a2);
    if (quasar::gLogLevel >= 5)
    {
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      v10 = 0u;
      v11 = 0u;
      v8 = 0u;
      v9 = 0u;
      v6 = 0u;
      v7 = 0u;
      v5 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v5, (uint64_t)"Got compilation specs", 21);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v5);
    }
  }
  else
  {
    a2[2] = 0;
    a2[1] = 0;
    *a2 = (uint64_t)(a2 + 1);
  }
}

void sub_1ADF30838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy(v9, *(_QWORD **)(v9 + 8));
  _Unwind_Resume(a1);
}

uint64_t *kaldi::quasar::Encdec::CompilationSpecs@<X0>(kaldi::quasar::Encdec *this@<X0>, uint64_t *a2@<X8>)
{
  _QWORD v5[34];

  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Returning compilation spec from kaldi...", 40);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v5);
  }
  return std::set<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::set[abi:ne180100](a2, (uint64_t)this + 1104);
}

void sub_1ADF308E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a9);
  _Unwind_Resume(a1);
}

void `virtual thunk to'quasar::PDecTranslatorBlock::compilationSpecs(quasar::PDecTranslatorBlock *this@<X0>, uint64_t *a2@<X8>)
{
  quasar::PDecTranslatorBlock::compilationSpecs((quasar::PDecTranslatorBlock *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 80)), a2);
}

void quasar::PDecTranslatorBlock::setContextProvider(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v4 = (std::__shared_weak_count *)a2[1];
  v17 = *a2;
  v18 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  quasar::ConfiguredProcessingBlock<quasar::TranslatorOptions>::setContextProvider(a1, &v17);
  v7 = v18;
  if (v18)
  {
    v8 = (unint64_t *)&v18->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(_QWORD *)(*a2 + 24);
  *(_QWORD *)&v16 = *(_QWORD *)(*a2 + 16);
  *((_QWORD *)&v16 + 1) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 26120, &v16);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1ADF30A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::ConfiguredProcessingBlock<quasar::TranslatorOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15;
  uint64_t *v16;

  v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  (**v3)(&v15);
  v4 = v15;
  v5 = v16;
  if (v15 != v16)
  {
    do
    {
      v6 = *v4;
      v7 = a2[1];
      v13 = *a2;
      v14 = (std::__shared_weak_count *)v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      quasar::OptionValueBase::setContextProvider(v6, &v13);
      v10 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      ++v4;
    }
    while (v4 != v5);
    v4 = v15;
  }
  if (v4)
  {
    v16 = v4;
    operator delete(v4);
  }
}

void sub_1ADF30AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void `virtual thunk to'quasar::PDecTranslatorBlock::setContextProvider(_QWORD *a1, _QWORD *a2)
{
  quasar::PDecTranslatorBlock::setContextProvider((uint64_t)a1 + *(_QWORD *)(*a1 - 72), a2);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::TranslatorOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::TranslatorOptions>::setContextProvider(_QWORD *a1, uint64_t *a2)
{
  quasar::ConfiguredProcessingBlock<quasar::TranslatorOptions>::setContextProvider((uint64_t)a1 + *(_QWORD *)(*a1 - 72), a2);
}

uint64_t `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::TranslatorOptions>::getOptions(_QWORD *a1)
{
  return (uint64_t)a1 + *(_QWORD *)(*a1 - 104) + 8;
}

const char *quasar::PDecTranslatorBlock::blockType(quasar::PDecTranslatorBlock *this)
{
  return "PDecTranslatorBlock";
}

const char *`virtual thunk to'quasar::PDecTranslatorBlock::blockType(quasar::PDecTranslatorBlock *this)
{
  return "PDecTranslatorBlock";
}

std::string *std::pair<std::vector<std::string>,std::shared_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>::pair[abi:ne180100]<std::vector<std::string>&,std::shared_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>&,0>(std::string *a1, __int128 **a2, std::string::size_type *a3)
{
  std::string::size_type v5;
  unint64_t *v6;
  unint64_t v7;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v5 = a3[1];
  a1[1].__r_.__value_.__r.__words[0] = *a3;
  a1[1].__r_.__value_.__l.__size_ = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return a1;
}

uint64_t kaldi::quasar::TranslationUtil::NbestElement::OutputWordString@<X0>(kaldi::quasar::TranslationUtil::NbestElement *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[2];
  _QWORD v15[11];
  char v16;
  uint64_t v17;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14);
  v4 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) != *(_QWORD *)this)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = v4 + v5;
      v8 = *(char *)(v7 + 23);
      if (v8 >= 0)
        v9 = v7;
      else
        v9 = *(_QWORD *)v7;
      if (v8 >= 0)
        v10 = *(unsigned __int8 *)(v7 + 23);
      else
        v10 = *(_QWORD *)(v7 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
      ++v6;
      v4 = *(_QWORD *)this;
      v5 += 240;
    }
    while (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4) > v6);
  }
  std::stringbuf::str();
  kaldi::Trim(a2);
  v14[0] = *MEMORY[0x1E0DE4F50];
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v15[0] = v12;
  v15[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v16 < 0)
    operator delete((void *)v15[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v17);
}

void sub_1ADF30D14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationUtil::NbestElement::NumToString<fst::LatticeWeightTpl<float>>(uint64_t a1, float *a2)
{
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  fst::operator<<<float>(v6, a2);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x1E0DE4F50];
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v8);
}

void sub_1ADF30DF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationUtil::NbestElement::NumToString<float>()
{
  uint64_t v0;
  _QWORD v2[13];
  char v3;
  uint64_t v4;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x1E0DE4F50];
  v0 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v2[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v3 < 0)
    operator delete((void *)v2[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v4);
}

void sub_1ADF30EC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationUtil::NbestElement::ConfidenceString(kaldi::quasar::TranslationUtil::NbestElement *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  int v14;
  void *__p;
  char *v16;
  char *v17;

  __p = 0;
  v16 = 0;
  v17 = 0;
  v3 = *(_QWORD *)this;
  v4 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this != v4)
  {
    v5 = 0;
    do
    {
      if (v5 >= v17)
      {
        v7 = (char *)__p;
        v8 = (v5 - (_BYTE *)__p) >> 2;
        v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v10 = v17 - (_BYTE *)__p;
        if ((v17 - (_BYTE *)__p) >> 1 > v9)
          v9 = v10 >> 1;
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
          v11 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
        {
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v17, v11);
          v7 = (char *)__p;
          v5 = v16;
        }
        else
        {
          v12 = 0;
        }
        v13 = &v12[4 * v8];
        *(_DWORD *)v13 = *(_DWORD *)(v3 + 232);
        v6 = v13 + 4;
        while (v5 != v7)
        {
          v14 = *((_DWORD *)v5 - 1);
          v5 -= 4;
          *((_DWORD *)v13 - 1) = v14;
          v13 -= 4;
        }
        __p = v13;
        v16 = v6;
        v17 = &v12[4 * v11];
        if (v7)
          operator delete(v7);
      }
      else
      {
        *(_DWORD *)v5 = *(_DWORD *)(v3 + 232);
        v6 = v5 + 4;
      }
      v16 = v6;
      v3 += 240;
      v5 = v6;
    }
    while (v3 != v4);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  kaldi::JoinVectorToString<int>(&__p, " ", (uint64_t)a2);
  if (__p)
  {
    v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1ADF3102C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  if (*(char *)(v11 + 23) < 0)
    operator delete(*(void **)v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::TranslationUtil::NbestElement::RawConfidenceString@<X0>(kaldi::quasar::TranslationUtil::NbestElement *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return kaldi::JoinVectorToString<float>((_QWORD *)this + 27, " ", (uint64_t)a2);
}

void sub_1ADF3109C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::TranslationUtil::NbestElement::NumToString<int>()
{
  uint64_t v0;
  _QWORD v2[13];
  char v3;
  uint64_t v4;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x1E0DE4F50];
  v0 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v2[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v3 < 0)
    operator delete((void *)v2[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v4);
}

void sub_1ADF3116C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationUtil::NbestElement::RawSubWordString(kaldi::quasar::TranslationUtil::NbestElement *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *p_p;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *__p;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[11];
  char v18;
  uint64_t v19;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  v2 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) != *(_QWORD *)this)
  {
    v3 = 0;
    v4 = 160;
    do
    {
      __p = 0;
      v14 = 0;
      v15 = 0;
      kaldi::JoinVectorToString<std::string>((uint64_t *)(v2 + v4 - 128), " ", (uint64_t)&__p);
      if (v15 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v15 >= 0)
        v6 = HIBYTE(v15);
      else
        v6 = v14;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)p_p, v6);
      kaldi::JoinVectorToString<int>((_QWORD *)(*(_QWORD *)this + v4), " ", (uint64_t)&__p);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"(", 1);
      if (v15 >= 0)
        v8 = &__p;
      else
        v8 = __p;
      if (v15 >= 0)
        v9 = HIBYTE(v15);
      else
        v9 = v14;
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)")", 1);
      if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4) - 1 > v3)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" ", 1);
      if (SHIBYTE(v15) < 0)
        operator delete(__p);
      ++v3;
      v2 = *(_QWORD *)this;
      v4 += 240;
    }
    while (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4) > v3);
  }
  std::stringbuf::str();
  v16[0] = *MEMORY[0x1E0DE4F50];
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v17[0] = v11;
  v17[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v18 < 0)
    operator delete((void *)v17[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v19);
}

void sub_1ADF31364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationUtil::NbestElement::NumToString<double>()
{
  uint64_t v0;
  _QWORD v2[13];
  char v3;
  uint64_t v4;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v2);
  std::ostream::operator<<();
  std::stringbuf::str();
  v2[0] = *MEMORY[0x1E0DE4F50];
  v0 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v2[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v2[2] = v0;
  v2[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v3 < 0)
    operator delete((void *)v2[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v4);
}

void sub_1ADF3144C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADF31494(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[7],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADF314E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[17],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADF31534(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[7],char const(&)[5],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADF31584(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[13],std::string const&,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  std::string *v5;
  __int128 v6;

  v5 = (std::string *)(std::string::basic_string[abi:ne180100]<0>(a1, a2) + 3);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_1ADF315F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::JoinVectorToString<float>(_QWORD *a1, const char *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD v14[11];
  char v15;
  uint64_t v16;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v13);
  if (a1[1] != *a1)
  {
    v6 = 0;
    do
    {
      std::ostream::operator<<();
      ++v6;
      v7 = a1[1] - *a1;
      if (v6 < v7 >> 2)
      {
        v8 = strlen(a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)a2, v8);
        v7 = a1[1] - *a1;
      }
    }
    while (v6 < v7 >> 2);
  }
  std::stringbuf::str();
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(_OWORD *)a3 = v11;
  *(_QWORD *)(a3 + 16) = v12;
  v13[0] = *MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v14[0] = v9;
  v14[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v15 < 0)
    operator delete((void *)v14[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v16);
}

void sub_1ADF31748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[15],char const*,0>(_QWORD *a1, char *a2, char **a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, *a3);
  return a1;
}

void sub_1ADF31794(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string,std::vector<std::pair<std::string,std::string>>>::pair[abi:ne180100]<std::string const&,std::vector<std::pair<std::string,std::string>>&,0>(std::string *this, __int128 *a2, __int128 **a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::pair<std::string,std::string>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::string>*,std::pair<std::string,std::string>*>(this + 1, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
  return this;
}

void sub_1ADF31828(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::PhraseBook::ReadRaw(uint64_t a1, uint64_t a2, char a3)
{
  std::locale::id *v4;
  const std::locale::facet *v5;
  unsigned __int8 v6;
  _QWORD *v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  std::string *v19;
  std::string::size_type size;
  std::string v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  void *__p;
  char v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string *v36;
  uint64_t v37;
  uint64_t v38;
  std::string v39;
  std::string *v40;
  _QWORD v41[2];
  _QWORD v42[51];
  _QWORD v43[21];

  v43[19] = *MEMORY[0x1E0C80C00];
  if ((a3 & 1) == 0)
    std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::clear(a1);
  std::ifstream::basic_ifstream(v41);
  if (v42[15])
  {
    *(_DWORD *)(a1 + 64) = 0;
    memset(&v39, 0, sizeof(v39));
    v4 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(_QWORD *)(v41[0] - 24)));
      v5 = std::locale::use_facet((const std::locale *)&v22, v4);
      v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
      std::locale::~locale((std::locale *)&v22);
      v7 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v41, (uint64_t)&v39, v6);
      if ((*((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 5) != 0)
        break;
      kaldi::Trim(&v39);
      v36 = 0;
      v37 = 0;
      v38 = 0;
      kaldi::SplitStringOnString((uint64_t)&v39, (char *)(a1 + 40), (uint64_t *)&v36);
      if (((0xAAAAAAAAAAAAAAABLL * ((v37 - (uint64_t)v36) >> 3)) & 0xFFFFFFFFFFFFFFFELL) != 2)
      {
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
          v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Invalid entry terminating ReadRaw : ", 36);
          if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v19 = &v39;
          else
            v19 = (std::string *)v39.__r_.__value_.__r.__words[0];
          if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
          else
            size = v39.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, size);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
        }
        *(_DWORD *)(a1 + 64) = 0;
        std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::clear(a1);
        v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        goto LABEL_61;
      }
      kaldi::Trim(v36);
      v8 = v36;
      if (SHIBYTE(v36->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v35, v36->__r_.__value_.__l.__data_, v36->__r_.__value_.__l.__size_);
        v8 = v36;
      }
      else
      {
        v9 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v35.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v9;
      }
      kaldi::quasar::PhraseBook::PreProcess(a1, (uint64_t)v8, &v34);
      kaldi::Trim(v36 + 1);
      v10 = v36;
      if (SHIBYTE(v36[1].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v33, v36[1].__r_.__value_.__l.__data_, v36[1].__r_.__value_.__l.__size_);
        v10 = v36;
      }
      else
      {
        v33 = v36[1];
      }
      memset(&v32, 0, sizeof(v32));
      if (v37 - (_QWORD)v10 == 72)
      {
        kaldi::Trim(v10 + 2);
        std::string::operator=(&v32, v36 + 2);
      }
      if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)a1, (unsigned __int8 *)&v34))
      {
        memset(&v22, 0, sizeof(v22));
        v40 = &v34;
        v11 = std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)&v34, (uint64_t)&std::piecewise_construct, (__int128 **)&v40);
        std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__vdeallocate((void **)v11 + 5);
        *(std::string *)(v11 + 40) = v22;
        memset(&v22, 0, sizeof(v22));
        v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
        std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
      }
      if (v37 - (_QWORD)v36 == 72)
      {
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v31, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
        else
          v31 = v32;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v31, "");
      }
      kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(&v22, (__int128 *)&v34, (__int128 *)&v35, (__int128 *)&v33, (__int128 *)&v31);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
      v12 = std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)&v34, (uint64_t)&std::piecewise_construct, (__int128 **)&v31);
      v13 = v12;
      v14 = *((_QWORD *)v12 + 6);
      if (v14 >= *((_QWORD *)v12 + 7))
      {
        v15 = std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__push_back_slow_path<kaldi::quasar::PhraseBook::PhraseBookEntry const&>((uint64_t *)v12 + 5, (const kaldi::quasar::PhraseBook::PhraseBookEntry *)&v22);
      }
      else
      {
        kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(*((std::string **)v12 + 6), (const kaldi::quasar::PhraseBook::PhraseBookEntry *)&v22);
        v15 = v14 + 120;
        *((_QWORD *)v13 + 6) = v14 + 120;
      }
      *((_QWORD *)v13 + 6) = v15;
      ++*(_DWORD *)(a1 + 64);
      if (v30 < 0)
        operator delete(__p);
      if (v28 < 0)
        operator delete(v27);
      if (v26 < 0)
        operator delete(v25);
      if (v24 < 0)
        operator delete(v23);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"Read ", 5);
      v16 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" phrasebook entries", 19);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v22);
    }
    v17 = 1;
  }
  else
  {
LABEL_61:
    v17 = 0;
  }
  v41[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v41 + *(_QWORD *)(v41[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1AF44CA70](v42);
  std::istream::~istream();
  MEMORY[0x1AF44D094](v43);
  return v17;
}

void sub_1ADF31D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  uint64_t a67;

  std::ifstream::~ifstream(&a67);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__push_back_slow_path<kaldi::quasar::PhraseBook::PhraseBookEntry const&>(uint64_t *a1, const kaldi::quasar::PhraseBook::PhraseBookEntry *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  std::string *v14;
  std::string *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x222222222222222)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xEEEEEEEEEEEEEEEFLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x111111111111111)
    v9 = 0x222222222222222;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (std::string *)&v10[120 * v4];
  v16 = &v10[120 * v9];
  kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(v14, a2);
  v15 = v14 + 5;
  std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<kaldi::quasar::PhraseBook::PhraseBookEntry>::~__split_buffer(&v13);
  return v11;
}

void sub_1ADF32008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::PhraseBook::PhraseBookEntry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::insert[abi:ne180100]<std::__tree_const_iterator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,std::__tree_node<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1ADF32058(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>,kaldi::quasar::TMTools::SpecCmp,std::allocator<std::shared_ptr<kaldi::quasar::TMTools::CompilationSpec>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__alt<0ul,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>>::__alt[abi:ne180100]<int &,float &,kaldi::quasar::NormalizationMode &,BOOL &,kaldi::quasar::PhraseBookMode &,kaldi::quasar::BPEMode &,kaldi::quasar::BPEMode &,quasar::OptionValue<BOOL> const&,quasar::OptionValue<BOOL> const&,float &,int &,quasar::OptionValue<BOOL> const&>(uint64_t a1, int *a2, float *a3, int *a4, char *a5, int *a6, int *a7, int *a8, _QWORD *a9, _QWORD *a10, float *a11, int *a12, _QWORD *a13)
{
  float v13;
  int v14;
  char v15;
  int v16;
  int v17;
  int v18;
  char v19;
  char v20;
  float v21;
  int v23;
  int v25;
  char v26;

  v23 = *a2;
  v13 = *a3;
  v14 = *a4;
  v15 = *a5;
  v16 = *a6;
  v17 = *a7;
  v18 = *a8;
  v19 = *(_BYTE *)quasar::OptionValue<BOOL>::value(a9);
  v20 = *(_BYTE *)quasar::OptionValue<BOOL>::value(a10);
  v21 = *a11;
  v25 = *a12;
  v26 = *(_BYTE *)quasar::OptionValue<BOOL>::value(a13);
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::TranslationBeamSearch(a1, v23, v14, v15, v16, v17, v18, v19, v13, v21, 1.0, 5.0, v20, v25, v26);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::TranslationBeamSearch(uint64_t a1, int a2, int a3, char a4, int a5, int a6, int a7, char a8, float a9, float a10, float a11, float a12, char a13, int a14, char a15)
{
  clockid_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  void *v35;
  uint64_t v36;
  void *v38;
  uint64_t v39;
  unsigned __int8 v40;
  void *__p[2];
  char v42;
  char v43[9];

  v43[0] = a8;
  *(_QWORD *)a1 = &unk_1E5D33A88;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 112) = 1;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 124) = 0x400000003;
  *(_BYTE *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "UNK");
  kaldi::quasar::BPE::BPE(a1 + 152, 1, (__int128 *)__p);
  if (v42 < 0)
    operator delete(__p[0]);
  std::allocate_shared[abi:ne180100]<kaldi::quasar::PhraseBook,std::allocator<kaldi::quasar::PhraseBook>,BOOL &,void>(v43, (_QWORD *)(a1 + 392));
  kaldi::quasar::NNMTTransliterator::NNMTTransliterator((kaldi::quasar::NNMTTransliterator *)(a1 + 408), a13);
  *(_BYTE *)(a1 + 4880) = 1;
  kaldi::Timer::Reset((kaldi::Timer *)(a1 + 4856), v26);
  *(_QWORD *)(a1 + 4888) = 0;
  *(_BYTE *)(a1 + 4896) = 0;
  *(_QWORD *)(a1 + 4904) = 0;
  *(_QWORD *)(a1 + 4920) = 0;
  *(_QWORD *)(a1 + 4912) = 0;
  *(_BYTE *)(a1 + 4929) = 0;
  *(_OWORD *)(a1 + 4984) = 0u;
  *(_OWORD *)(a1 + 5000) = 0u;
  *(_QWORD *)(a1 + 4968) = 0;
  *(_OWORD *)(a1 + 4936) = 0u;
  *(_OWORD *)(a1 + 4952) = 0u;
  *(_QWORD *)(a1 + 4976) = &unk_1E5D34170;
  *(_BYTE *)(a1 + 5016) = 0;
  *(_OWORD *)(a1 + 5032) = 0u;
  *(_OWORD *)(a1 + 5048) = 0u;
  *(_QWORD *)(a1 + 5024) = &unk_1E5D34170;
  *(_BYTE *)(a1 + 5064) = 0;
  kaldi::Matrix<float>::Matrix(a1 + 5072);
  *(_OWORD *)(a1 + 5144) = 0u;
  *(_OWORD *)(a1 + 5160) = 0u;
  *(_OWORD *)(a1 + 5112) = 0u;
  *(_OWORD *)(a1 + 5128) = 0u;
  *(_QWORD *)(a1 + 5176) = -1;
  *(_DWORD *)(a1 + 5184) = -1;
  *(_DWORD *)(a1 + 5188) = a2;
  *(float *)(a1 + 5192) = a10;
  *(_DWORD *)(a1 + 5196) = a14;
  *(float *)(a1 + 5200) = a9;
  *(_OWORD *)(a1 + 5204) = 0u;
  *(_DWORD *)(a1 + 5220) = a5;
  *(_DWORD *)(a1 + 5224) = a3;
  *(float *)(a1 + 5228) = a11;
  *(float *)(a1 + 5232) = a12;
  *(_BYTE *)(a1 + 5236) = a4;
  *(_BYTE *)(a1 + 5237) = a15;
  *(_WORD *)(a1 + 5238) = 256;
  *(_BYTE *)(a1 + 5240) = 0;
  *(_DWORD *)(a1 + 5244) = a6;
  *(_DWORD *)(a1 + 5248) = a7;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 5256));
  kaldi::Matrix<float>::Matrix(a1 + 5632);
  *(_QWORD *)(a1 + 5744) = 0;
  *(_QWORD *)(a1 + 5736) = 0;
  *(_QWORD *)(a1 + 5752) = 0;
  *(_DWORD *)(a1 + 5672) = 0;
  *(_OWORD *)(a1 + 5688) = 0u;
  *(_BYTE *)(a1 + 5704) = 0;
  *(_OWORD *)(a1 + 5784) = 0u;
  *(_OWORD *)(a1 + 5800) = 0u;
  *(_OWORD *)(a1 + 5816) = 0u;
  *(_DWORD *)(a1 + 5884) = 0;
  *(_OWORD *)(a1 + 5836) = 0u;
  *(_OWORD *)(a1 + 5852) = 0u;
  *(_OWORD *)(a1 + 5868) = 0u;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Apply BPE source : ", 19);
    v28 = *(int *)(a1 + 5244);
    if (v28 > 2)
      v29 = "";
    else
      v29 = off_1E5D48E88[v28];
    std::string::basic_string[abi:ne180100]<0>(&v38, v29);
    if ((v40 & 0x80u) == 0)
      v30 = &v38;
    else
      v30 = v38;
    if ((v40 & 0x80u) == 0)
      v31 = v40;
    else
      v31 = v39;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v30, v31);
    if ((char)v40 < 0)
      operator delete(v38);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Apply BPE target : ", 19);
      v33 = *(int *)(a1 + 5248);
      if (v33 > 2)
        v34 = "";
      else
        v34 = off_1E5D48E88[v33];
      std::string::basic_string[abi:ne180100]<0>(&v38, v34);
      if ((v40 & 0x80u) == 0)
        v35 = &v38;
      else
        v35 = v38;
      if ((v40 & 0x80u) == 0)
        v36 = v40;
      else
        v36 = v39;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v35, v36);
      if ((char)v40 < 0)
        operator delete(v38);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    }
  }
  return a1;
}

void sub_1ADF32528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, kaldi::quasar::NNMTTransliterator *a13, uint64_t a14, kaldi::quasar::BPE *a15, uint64_t a16, kaldi::quasar::InputHammer *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  void **v24;
  uint64_t v25;
  uint64_t v26;
  kaldi::nnet1::Nnet *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v32;
  void *v33;
  void **v34;
  void *v35;
  void *v36;
  void *v37;

  if (a23 < 0)
    operator delete(__p);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a24);
  v32 = *(void **)(v25 + 5864);
  if (v32)
  {
    *(_QWORD *)(v25 + 5872) = v32;
    operator delete(v32);
  }
  v33 = *(void **)(v25 + 5840);
  if (v33)
  {
    *(_QWORD *)(v25 + 5848) = v33;
    operator delete(v33);
  }
  v34 = (void **)(v25 + 5736);
  v35 = *(void **)(v25 + 5808);
  if (v35)
  {
    *(_QWORD *)(v25 + 5816) = v35;
    operator delete(v35);
  }
  v36 = *v24;
  if (*v24)
  {
    *(_QWORD *)(v25 + 5792) = v36;
    operator delete(v36);
  }
  v37 = *v34;
  if (*v34)
  {
    *(_QWORD *)(v25 + 5744) = v37;
    operator delete(v37);
  }
  kaldi::Matrix<float>::~Matrix(v28);
  kaldi::nnet1::Nnet::~Nnet(v27);
  a24 = v25 + 5152;
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  a24 = v25 + 5128;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v26);
  kaldi::Matrix<float>::~Matrix(a10);
  kaldi::CuMatrix<float>::~CuMatrix(v30);
  kaldi::CuMatrix<float>::~CuMatrix(a11);
  a24 = v25 + 4952;
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a12);
  if (*(char *)(v29 + 47) < 0)
    operator delete(*(void **)(v25 + 4904));
  kaldi::quasar::NNMTTransliterator::~NNMTTransliterator(a13);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a14);
  kaldi::quasar::BPE::~BPE(a15);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a16);
  kaldi::quasar::InputHammer::~InputHammer(a17);
  _Unwind_Resume(a1);
}

void sub_1ADF3269C()
{
  JUMPOUT(0x1ADF32674);
}

void sub_1ADF326A4()
{
  JUMPOUT(0x1ADF3267CLL);
}

void sub_1ADF326AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADF32684);
}

void sub_1ADF326C4()
{
  JUMPOUT(0x1ADF32684);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::~TranslationBeamSearch(uint64_t a1)
{
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::~TranslationBeamSearch(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::~TranslationBeamSearch(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v8;

  *(_QWORD *)a1 = &unk_1E5D33A88;
  v2 = *(void **)(a1 + 5864);
  if (v2)
  {
    *(_QWORD *)(a1 + 5872) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 5840);
  if (v3)
  {
    *(_QWORD *)(a1 + 5848) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 5808);
  if (v4)
  {
    *(_QWORD *)(a1 + 5816) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 5784);
  if (v5)
  {
    *(_QWORD *)(a1 + 5792) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 5736);
  if (v6)
  {
    *(_QWORD *)(a1 + 5744) = v6;
    operator delete(v6);
  }
  kaldi::Matrix<float>::~Matrix(a1 + 5632);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(a1 + 5256));
  v8 = (void **)(a1 + 5152);
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 5128);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 5112);
  kaldi::Matrix<float>::~Matrix(a1 + 5072);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 5024);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 4976);
  v8 = (void **)(a1 + 4952);
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 4936);
  if (*(char *)(a1 + 4927) < 0)
    operator delete(*(void **)(a1 + 4904));
  kaldi::quasar::NNMTTransliterator::~NNMTTransliterator((kaldi::quasar::NNMTTransliterator *)(a1 + 408));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 392);
  kaldi::quasar::BPE::~BPE((kaldi::quasar::BPE *)(a1 + 152));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 136);
  v8 = (void **)(a1 + 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table(a1 + 48);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
  return a1;
}

_QWORD *std::shared_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>::shared_ptr[abi:ne180100]<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5CFFF50;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1ADF328C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>> *,std::shared_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>::__shared_ptr_default_delete<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>,kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>,std::allocator<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>> *,std::shared_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>::__shared_ptr_default_delete<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>,kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>,std::allocator<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>,(std::__variant_detail::_Trait)1>::~__dtor(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>> *,std::shared_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>::__shared_ptr_default_delete<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>,kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>,std::allocator<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 5888);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E5D48DA8[v2])(&v4, a1);
  *(_DWORD *)(a1 + 5888) = -1;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN5kaldi6quasar21TranslationBeamSearchINS9_19TorchEncoderDecoderEEENSA_INS9_6EncdecEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t a2)
{
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::~TranslationBeamSearch(a2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN5kaldi6quasar21TranslationBeamSearchINS9_19TorchEncoderDecoderEEENSA_INS9_6EncdecEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, uint64_t a2)
{
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::~TranslationBeamSearch(a2);
}

uint64_t std::unique_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>,(std::__variant_detail::_Trait)1>::~__dtor(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

uint64_t std::__variant_detail::__alt<1ul,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::__alt[abi:ne180100]<int &,float &,kaldi::quasar::NormalizationMode &,BOOL &,kaldi::quasar::PhraseBookMode &,kaldi::quasar::BPEMode &,kaldi::quasar::BPEMode &,quasar::OptionValue<BOOL> const&,quasar::OptionValue<BOOL> const&,float &,int &,quasar::OptionValue<BOOL> const&>(uint64_t a1, int *a2, float *a3, int *a4, char *a5, int *a6, int *a7, int *a8, _QWORD *a9, _QWORD *a10, float *a11, int *a12, _QWORD *a13)
{
  float v13;
  int v14;
  char v15;
  int v16;
  int v17;
  int v18;
  char v19;
  char v20;
  float v21;
  int v22;
  char *v23;
  int v25;

  v25 = *a2;
  v13 = *a3;
  v14 = *a4;
  v15 = *a5;
  v16 = *a6;
  v17 = *a7;
  v18 = *a8;
  v19 = *(_BYTE *)quasar::OptionValue<BOOL>::value(a9);
  v20 = *(_BYTE *)quasar::OptionValue<BOOL>::value(a10);
  v21 = *a11;
  v22 = *a12;
  v23 = (char *)quasar::OptionValue<BOOL>::value(a13);
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::TranslationBeamSearch(a1, v25, v14, v15, v16, v17, v18, v19, v13, v21, 1.0, 5.0, v20, v22, *v23);
}

BOOL _ZNKSt3__116__variant_detail12__visitation9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS5_21TranslationBeamSearchINS5_19TorchEncoderDecoderEEENS7_INS5_6EncdecEEEEE4ReadERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbbbNS_10shared_ptrINS5_7TMTools12ModelSharingEEEEUlOT_E_EclB8ne180100IJRNS0_5__altILm0ES9_EEEEEDcDpOT_(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _BOOL8 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v3 = **a1;
  v4 = *((unsigned __int8 *)*a1 + 8);
  v5 = *((unsigned __int8 *)*a1 + 9);
  v6 = *((unsigned __int8 *)*a1 + 10);
  v7 = (*a1)[3];
  v15 = (*a1)[2];
  v16 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Read(a2, v3, v4 != 0, v5 != 0, v6 != 0, &v15);
  v11 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v10;
}

void sub_1ADF32BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    _ZNKSt3__116__variant_detail12__visitation9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS5_21TranslationBeamSearchINS5_19TorchEncoderDecoderEEENS7_INS5_6EncdecEEEEE4ReadERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbbbNS_10shared_ptrINS5_7TMTools12ModelSharingEEEEUlOT_E_EclB8ne180100IJRNS0_5__altILm0ES9_EEEEEDcDpOT__cold_1();
  _Unwind_Resume(exception_object);
}

BOOL kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Read(uint64_t a1, uint64_t a2, int a3, char a4, char a5, uint64_t *a6)
{
  _BYTE *v12;
  kaldi::Input *v13;
  uint64_t *v14;
  char v15;
  char v16;
  char v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *__p[2];
  char v24;
  int v25;
  _BYTE v26[15];
  unsigned __int8 v27;

  v12 = (_BYTE *)(a1 + 4928);
  std::string::operator=((std::string *)(a1 + 4904), (const std::string *)a2);
  *v12 = a4;
  v12[1] = a5;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a1 + 4936), a6);
  if (a3)
  {
    fst::FstReadOptions::FstReadOptions(__p, a2, 0, 0, 0);
    v25 = 2;
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ReadMapped((_QWORD *)a1, (uint64_t)__p);
    if (v24 < 0)
      operator delete(__p[0]);
    return 1;
  }
  v27 = 0;
  v13 = (kaldi::Input *)kaldi::Input::Input(v26, a2, &v27);
  v14 = (uint64_t *)kaldi::Input::Stream(v13);
  v15 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Read(a1, v14, v27, 0);
  v16 = v15;
  if (kaldi::g_kaldi_verbose_level < -1)
    v17 = 1;
  else
    v17 = v15;
  if ((v17 & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to read model from ", 26);
    v19 = *(char *)(a2 + 23);
    if (v19 >= 0)
      v20 = a2;
    else
      v20 = *(_QWORD *)a2;
    if (v19 >= 0)
      v21 = *(unsigned __int8 *)(a2 + 23);
    else
      v21 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
  }
  kaldi::Input::~Input((kaldi::Input *)v26);
  return (v16 & 1) != 0;
}

void sub_1ADF32D3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  kaldi::Input::~Input((kaldi::Input *)(v14 - 80));
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ReadMapped(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  fst::MappedFile *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD v19[34];

  if (a1[639])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, "Already mapped from a file");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  v4 = a1 + 639;
  v5 = kaldi::ReadMapped<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>>(a2, (uint64_t)a1);
  std::shared_ptr<fst::MappedFile>::reset[abi:ne180100]<fst::MappedFile,void>(v4, (uint64_t)v5);
  v6 = a1[17];
  v7 = (std::__shared_weak_count *)a1[640];
  v17 = a1[639];
  v18 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  kaldi::quasar::TorchEncoderDecoder::SetMappedFile(v6, &v17);
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"memory mapped file ", 19);
    v14 = *(char *)(a2 + 23);
    if (v14 >= 0)
      v15 = a2;
    else
      v15 = *(_QWORD *)a2;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(a2 + 23);
    else
      v16 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v19);
  }
}

void sub_1ADF32EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  _BYTE *v7;
  int v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  kaldi::quasar::TorchEncoderDecoder **v14;
  std::__shared_weak_count *size;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  float v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  kaldi::quasar::TorchEncoderDecoder *v26;
  int v27;
  int v28;
  std::string v30;
  std::string v31;
  uint64_t v32;
  std::__shared_weak_count *v33;

  v4 = a3;
  v7 = (_BYTE *)(a1 + 4896);
  v8 = *(unsigned __int8 *)(a1 + 4928);
  v9 = *(_QWORD *)(a1 + 4936);
  v10 = *(std::__shared_weak_count **)(a1 + 4944);
  v11 = a1 + 4904;
  v32 = v9;
  v33 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  kaldi::quasar::TMTools::GetModel<kaldi::quasar::TorchEncoderDecoder>(v11, a2, a3, a4, v8 != 0, (uint64_t)&v32, (uint64_t *)&v31);
  v14 = (kaldi::quasar::TorchEncoderDecoder **)(a1 + 136);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 136, (__int128 *)&v31);
  size = (std::__shared_weak_count *)v31.__r_.__value_.__l.__size_;
  if (v31.__r_.__value_.__l.__size_)
  {
    v16 = (unint64_t *)(v31.__r_.__value_.__l.__size_ + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v18 = v33;
  if (v33)
  {
    v19 = (unint64_t *)&v33->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *v7 = 1;
  *(_DWORD *)(a1 + 5176) = kaldi::quasar::TorchEncoderDecoder::BosTargetId(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136))
                         - 1;
  *(_DWORD *)(a1 + 5180) = kaldi::quasar::TorchEncoderDecoder::EosTargetId(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136))
                         - 1;
  *(_DWORD *)(a1 + 5184) = kaldi::quasar::TorchEncoderDecoder::UnkTargetId(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136))
                         - 1;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Using the special symbols ids <unk>=", 36);
    v22 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", <s> = ", 8);
    v23 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)", </s> = ", 9);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v31);
  }
  v7[342] = quasar::getType(*(quasar **)(a1 + 136), v21);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Applying log to output probs ", 29);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v31);
  }
  if (kaldi::quasar::TorchEncoderDecoder::HasBpeModel(*v14))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Has BPE Model", 13);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v31);
    }
    v24 = kaldi::quasar::TorchEncoderDecoder::BpeModel(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
    kaldi::quasar::BPE::operator=(a1 + 152, v24);
    if (!*(_DWORD *)(a1 + 5244))
      *(_DWORD *)(a1 + 5244) = 1;
    if (!*(_DWORD *)(a1 + 5248))
    {
      v25 = 1;
LABEL_31:
      *(_DWORD *)(a1 + 5248) = v25;
    }
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"No embedded BPE Model", 21);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v31);
    }
    if (!*(_DWORD *)(a1 + 5244))
      *(_DWORD *)(a1 + 5244) = 2;
    if (!*(_DWORD *)(a1 + 5248))
    {
      v25 = 2;
      goto LABEL_31;
    }
  }
  v26 = *v14;
  if (*((_BYTE *)*v14 + 3921))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Configuring multilang decorator", 31);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v31);
      v26 = *v14;
    }
    if (*((char *)v26 + 3951) < 0)
    {
      std::string::__init_copy_ctor_external(&v31, *((const std::string::value_type **)v26 + 491), *((_QWORD *)v26 + 492));
      v26 = *v14;
    }
    else
    {
      v31 = *(std::string *)((char *)v26 + 3928);
    }
    if (*((char *)v26 + 3975) < 0)
      std::string::__init_copy_ctor_external(&v30, *((const std::string::value_type **)v26 + 494), *((_QWORD *)v26 + 495));
    else
      v30 = *(std::string *)((char *)v26 + 3952);
    v27 = kaldi::quasar::ToAddTag((uint64_t)&v31);
    v28 = kaldi::quasar::ToTagFormat(&v30);
    *(_BYTE *)(a1 + 120) = 1;
    *(_DWORD *)(a1 + 124) = v27;
    *(_DWORD *)(a1 + 128) = v28;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
  }
  if ((kaldi::PeekToken(a2, v4) & 0x80000000) == 0)
  {
    kaldi::ExpectToken(a2, v4, "<HasPhraseBook>");
    v7[344] = 0;
    kaldi::ReadBasicType<BOOL>(a2, v4, v7 + 344);
    if (v7[344])
      kaldi::quasar::PhraseBook::Read(*(_QWORD *)(a1 + 392), a2, v4);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"# PhraseBook entries ", 21);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v31);
    }
  }
  return 1;
}

void sub_1ADF33314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

fst::MappedFile *kaldi::ReadMapped<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  fst::MappedFile *v5;
  uint64_t *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[15];
  unsigned __int8 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD v27[35];

  v27[34] = *MEMORY[0x1E0C80C00];
  v17 = 0;
  kaldi::Input::Input(v16, a1, &v17);
  if (!v17)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Memory mapping failed. Not a valid Kaldi binary file: ", 54);
    v13 = *(char *)(a1 + 23);
    if (v13 >= 0)
      v14 = a1;
    else
      v14 = *(_QWORD *)a1;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a1 + 23);
    else
      v15 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
  v4 = kaldi::Input::Stream((kaldi::Input *)v16);
  std::istream::seekg();
  std::istream::tellg();
  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  std::istream::seekg();
  v5 = fst::MappedFile::Map(v4, a1, v27[16]);
  kaldi::Input::~Input((kaldi::Input *)v16);
  if (!v5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, "Memory mapping failed. mapped_file_ is NULL");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
  v17 = 0;
  kaldi::Input::Input(v16, a1, &v17);
  v6 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v16);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Read(a2, v6, v17, *((_QWORD *)v5 + 1));
  kaldi::Input::Close((kaldi::Input *)v16);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"memory mapped file ", 19);
    v8 = *(char *)(a1 + 23);
    if (v8 >= 0)
      v9 = a1;
    else
      v9 = *(_QWORD *)a1;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a1 + 23);
    else
      v10 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v27);
  }
  kaldi::Input::~Input((kaldi::Input *)v16);
  return v5;
}

void sub_1ADF33618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::Input::~Input((kaldi::Input *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TMTools::GetModel<kaldi::quasar::TorchEncoderDecoder>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  uint64_t **v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  kaldi::quasar::TorchEncoderDecoder *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  __int128 v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t **v49;
  uint64_t *v50;
  __int128 *v51[35];
  __int128 v52;
  uint64_t v53;
  std::__shared_weak_count *v54;

  v53 = 0;
  v54 = 0;
  if (*(_QWORD *)a6)
    v14 = (uint64_t **)kaldi::quasar::TMTools::ModelSharing::Cache<kaldi::quasar::TorchEncoderDecoder>(*(uint64_t ***)a6);
  else
    v14 = (uint64_t **)kaldi::quasar::TorchEncoderDecoder::ModelFileMap(0);
  v49 = v14;
  v50 = a7;
  if (!a5)
  {
    v17 = 0;
    v18 = 0;
    goto LABEL_12;
  }
  v51[0] = (__int128 *)a1;
  v15 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, (const void **)a1, (uint64_t)&std::piecewise_construct, v51);
  v16 = (std::__shared_weak_count *)v15[8];
  if (!v16)
  {
    v17 = 0;
    goto LABEL_10;
  }
  v17 = std::__shared_weak_count::lock(v16);
  if (!v17)
  {
LABEL_10:
    v18 = 0;
    goto LABEL_11;
  }
  v18 = v15[7];
LABEL_11:
  v53 = v18;
  v54 = v17;
LABEL_12:
  v19 = (kaldi::quasar::TorchEncoderDecoder *)operator new();
  kaldi::quasar::TorchEncoderDecoder::TorchEncoderDecoder(v19);
  std::shared_ptr<kaldi::quasar::TorchEncoderDecoder>::shared_ptr[abi:ne180100]<kaldi::quasar::TorchEncoderDecoder,void>(&v52, (uint64_t)v19);
  kaldi::quasar::TorchEncoderDecoder::Read(v52, a2, a3, a4);
  if ((a5 & 1) == 0)
  {
    v27 = v50;
    if (kaldi::g_kaldi_verbose_level < 5)
    {
LABEL_55:
      *(_OWORD *)v27 = v52;
      goto LABEL_56;
    }
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v51, 5);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"Getting model for: ", 19);
    v29 = *(char *)(a1 + 23);
    if (v29 >= 0)
      v30 = a1;
    else
      v30 = *(_QWORD *)a1;
    if (v29 >= 0)
      v31 = *(unsigned __int8 *)(a1 + 23);
    else
      v31 = *(_QWORD *)(a1 + 8);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" (sharing disabled)", 19);
LABEL_54:
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v51);
    goto LABEL_55;
  }
  if (!v18)
  {
    v33 = *(std::__shared_weak_count **)(a6 + 8);
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(p_shared_owners);
      while (__stxr(v35 + 1, p_shared_owners));
      do
        v36 = __ldaxr(p_shared_owners);
      while (__stlxr(v36 - 1, p_shared_owners));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v51[0] = (__int128 *)a1;
    v37 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v49, (const void **)a1, (uint64_t)&std::piecewise_construct, v51);
    v38 = v52;
    if (*((_QWORD *)&v52 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 16);
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    v41 = (std::__shared_weak_count *)v37[8];
    *(_OWORD *)(v37 + 7) = v38;
    v27 = v50;
    if (v41)
      std::__shared_weak_count::__release_weak(v41);
    if (kaldi::g_kaldi_verbose_level < 5)
      goto LABEL_55;
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v51, 5);
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"Getting new model for: ", 23);
    v43 = *(char *)(a1 + 23);
    if (v43 >= 0)
      v44 = a1;
    else
      v44 = *(_QWORD *)a1;
    if (v43 >= 0)
      v45 = *(unsigned __int8 *)(a1 + 23);
    else
      v45 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, v44, v45);
    goto LABEL_54;
  }
  if (kaldi::g_kaldi_verbose_level >= 5)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v51, 5);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"Getting existing model for: ", 28);
    v21 = *(char *)(a1 + 23);
    if (v21 >= 0)
      v22 = a1;
    else
      v22 = *(_QWORD *)a1;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a1 + 23);
    else
      v23 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v51);
  }
  *v50 = v18;
  v50[1] = (uint64_t)v17;
  v53 = 0;
  v54 = 0;
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
  if (*((_QWORD *)&v52 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
LABEL_56:
  v46 = v54;
  if (v54)
  {
    v47 = (unint64_t *)&v54->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_1ADF339E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 - 144);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 - 120);
  _Unwind_Resume(a1);
}

BOOL _ZNKSt3__116__variant_detail12__visitation9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS5_21TranslationBeamSearchINS5_19TorchEncoderDecoderEEENS7_INS5_6EncdecEEEEE4ReadERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbbbNS_10shared_ptrINS5_7TMTools12ModelSharingEEEEUlOT_E_EclB8ne180100IJRNS0_5__altILm1ESB_EEEEEDcDpOT_(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _BOOL8 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v3 = **a1;
  v4 = *((unsigned __int8 *)*a1 + 8);
  v5 = *((unsigned __int8 *)*a1 + 9);
  v6 = *((unsigned __int8 *)*a1 + 10);
  v7 = (*a1)[3];
  v15 = (*a1)[2];
  v16 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Read(a2, v3, v4 != 0, v5 != 0, v6 != 0, &v15);
  v11 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v10;
}

void sub_1ADF33B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    _ZNKSt3__116__variant_detail12__visitation9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS5_21TranslationBeamSearchINS5_19TorchEncoderDecoderEEENS7_INS5_6EncdecEEEEE4ReadERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbbbNS_10shared_ptrINS5_7TMTools12ModelSharingEEEEUlOT_E_EclB8ne180100IJRNS0_5__altILm0ES9_EEEEEDcDpOT__cold_1();
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS9_21TranslationBeamSearchINS9_19TorchEncoderDecoderEEENSB_INS9_6EncdecEEEEE22ReadPronunciationModelERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESO_EUlOT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEEEEDcSP_DpT0_(uint64_t **a1, uint64_t a2)
{
  return kaldi::quasar::NNMTTransliterator::Read((kaldi::quasar::TorchEncoderDecoder *)(a2 + 408), **a1, (*a1)[1], 0);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS9_21TranslationBeamSearchINS9_19TorchEncoderDecoderEEENSB_INS9_6EncdecEEEEE22ReadPronunciationModelERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESO_EUlOT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEEEEDcSP_DpT0_(uint64_t **a1, uint64_t a2)
{
  return kaldi::quasar::NNMTTransliterator::Read((kaldi::quasar::TorchEncoderDecoder *)(a2 + 408), **a1, (*a1)[1], 0);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS9_21TranslationBeamSearchINS9_19TorchEncoderDecoderEEENSB_INS9_6EncdecEEEEE13SetICUScriptsERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEUlOT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEEEEDcSP_DpT0_(uint64_t **a1, uint64_t a2)
{
  return kaldi::quasar::NNMTTransliterator::SetICUScripts(a2 + 408, **a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS9_21TranslationBeamSearchINS9_19TorchEncoderDecoderEEENSB_INS9_6EncdecEEEEE13SetICUScriptsERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEUlOT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEEEEDcSP_DpT0_(uint64_t **a1, uint64_t a2)
{
  return kaldi::quasar::NNMTTransliterator::SetICUScripts(a2 + 408, **a1);
}

BOOL _ZNKSt3__116__variant_detail12__visitation9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS5_21TranslationBeamSearchINS5_19TorchEncoderDecoderEEENS7_INS5_6EncdecEEEEE19ReadConfidenceModelERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbbEUlOT_E_EclB8ne180100IJRNS0_5__altILm0ES9_EEEEEDcDpOT_(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  char v5;
  _BOOL8 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v3 = **a1;
  v4 = *((unsigned __int8 *)*a1 + 8);
  v5 = *((_BYTE *)*a1 + 9);
  v11 = 0;
  v12 = 0;
  v6 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Read(a2, v3, v4, v5, 0, &v11);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1ADF33C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    _ZNKSt3__116__variant_detail12__visitation9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS5_21TranslationBeamSearchINS5_19TorchEncoderDecoderEEENS7_INS5_6EncdecEEEEE4ReadERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbbbNS_10shared_ptrINS5_7TMTools12ModelSharingEEEEUlOT_E_EclB8ne180100IJRNS0_5__altILm0ES9_EEEEEDcDpOT__cold_1();
  _Unwind_Resume(exception_object);
}

BOOL _ZNKSt3__116__variant_detail12__visitation9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS5_21TranslationBeamSearchINS5_19TorchEncoderDecoderEEENS7_INS5_6EncdecEEEEE19ReadConfidenceModelERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbbEUlOT_E_EclB8ne180100IJRNS0_5__altILm1ESB_EEEEEDcDpOT_(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  char v5;
  _BOOL8 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v3 = **a1;
  v4 = *((unsigned __int8 *)*a1 + 8);
  v5 = *((_BYTE *)*a1 + 9);
  v11 = 0;
  v12 = 0;
  v6 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Read(a2, v3, v4, v5, 0, &v11);
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_1ADF33CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    _ZNKSt3__116__variant_detail12__visitation9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS5_21TranslationBeamSearchINS5_19TorchEncoderDecoderEEENS7_INS5_6EncdecEEEEE4ReadERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbbbNS_10shared_ptrINS5_7TMTools12ModelSharingEEEEUlOT_E_EclB8ne180100IJRNS0_5__altILm0ES9_EEEEEDcDpOT__cold_1();
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS9_21TranslationBeamSearchINS9_19TorchEncoderDecoderEEENSB_INS9_6EncdecEEEEE15ReadInputHammerERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEUlOT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEEEEDcSP_DpT0_(uint64_t **a1, uint64_t a2)
{
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ReadInputHammer(a2, **a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS9_21TranslationBeamSearchINS9_19TorchEncoderDecoderEEENSB_INS9_6EncdecEEEEE15ReadInputHammerERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEUlOT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEEEEDcSP_DpT0_(uint64_t **a1, uint64_t a2)
{
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ReadInputHammer(a2, **a1);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ReadInputHammer(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[34];

  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Reading tag filters from : ", 27);
    v5 = *(char *)(a2 + 23);
    if (v5 >= 0)
      v6 = a2;
    else
      v6 = *(_QWORD *)a2;
    if (v5 >= 0)
      v7 = *(unsigned __int8 *)(a2 + 23);
    else
      v7 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v9);
  }
  return kaldi::quasar::InputHammer::ReadRaw(a1 + 8);
}

void sub_1ADF33D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::InputHammer::ReadRaw(uint64_t a1)
{
  uint64_t Raw;
  uint64_t v4[2];
  _QWORD v5[51];
  _QWORD v6[20];

  v6[19] = *MEMORY[0x1E0C80C00];
  std::ifstream::basic_ifstream(v4);
  if (v5[15])
    Raw = kaldi::quasar::InputHammer::ReadRaw(a1, v4);
  else
    Raw = 0;
  v4[0] = *MEMORY[0x1E0DE4F40];
  *(uint64_t *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1AF44CA70](v5);
  std::istream::~istream();
  MEMORY[0x1AF44D094](v6);
  return Raw;
}

void sub_1ADF33E60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ifstream::~ifstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::InputHammer::ReadRaw(uint64_t a1, uint64_t *a2)
{
  std::string *v3;
  std::string::size_type v4;
  int v5;
  std::locale::id *v7;
  _QWORD *v8;
  std::string *v9;
  std::string::size_type size;
  _QWORD *v11;
  const std::locale::facet *v12;
  unsigned __int8 v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  std::string::size_type v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  std::locale::id *v28;
  const std::locale::facet *v29;
  unsigned __int8 v30;
  _QWORD *v31;
  std::string *v32;
  std::string::size_type v33;
  uint64_t v34;
  __int128 v35;
  _QWORD *v36;
  std::string *v37;
  std::string::size_type v38;
  _QWORD *v39;
  std::string::size_type v40;
  std::string::size_type v41;
  char v42;
  unsigned __int8 *v43;
  uint64_t *v44;
  int v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  std::string *v49;
  std::string::size_type v50;
  _QWORD *v51;
  _QWORD *v52;
  std::string *v53;
  std::string::size_type v54;
  std::string v56;
  std::string v57;
  __int128 *v58;
  uint64_t v59;
  uint64_t v60;
  std::locale v61[2];
  __int128 v62;
  int v63;
  std::string v64;
  std::string v65;
  void *v66;
  char v67;
  std::string *v68;

  kaldi::quasar::InputHammer::Info((uint64_t *)&v66, (kaldi::quasar::InputHammer *)a1);
  if (v67 < 0)
    operator delete(v66);
  memset(&v65, 0, sizeof(v65));
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
    goto LABEL_28;
  kaldi::ReadToken(a2, 0, (uint64_t)&v65);
  std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v65.__r_.__value_.__l.__size_ != 9)
      goto LABEL_13;
    v3 = (std::string *)v65.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) != 9)
      goto LABEL_13;
    v3 = &v65;
  }
  v4 = v3->__r_.__value_.__r.__words[0];
  v5 = v3->__r_.__value_.__s.__data_[8];
  if (v4 != 0x7473694C464E443CLL || v5 != 62)
  {
LABEL_13:
    v7 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      kaldi::Trim(&v65);
      memset(&v64, 0, sizeof(v64));
      kaldi::SplitStringToVector(&v65, "\\", 1, (uint64_t)&v64);
      if (v64.__r_.__value_.__l.__size_ - v64.__r_.__value_.__r.__words[0] == 24)
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, (unsigned __int8 *)v64.__r_.__value_.__l.__data_, (uint64_t)v64.__r_.__value_.__l.__data_);
      }
      else if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v61);
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Skipping tag ", 13);
        if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v9 = &v65;
        else
          v9 = (std::string *)v65.__r_.__value_.__r.__words[0];
        if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v65.__r_.__value_.__r.__words[2]);
        else
          size = v65.__r_.__value_.__l.__size_;
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
        std::ostream::operator<<();
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v61);
      }
      v61[0].__locale_ = (std::locale::__imp *)&v64;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v61);
      std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
      v12 = std::locale::use_facet(v61, v7);
      v13 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
      std::locale::~locale(v61);
      v14 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v65, v13);
    }
    while ((*((_BYTE *)v14 + *(_QWORD *)(*v14 - 24) + 32) & 5) == 0);
    if (kaldi::g_kaldi_verbose_level < 0)
      goto LABEL_28;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Input hammer has ", 17);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" known entries it will remove", 29);
LABEL_27:
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v61);
LABEL_28:
    v16 = 1;
    goto LABEL_29;
  }
  if (kaldi::quasar::InputHammer::ReadHeader(a1, a2, 0))
  {
    *(_BYTE *)(a1 + 105) = 1;
    v19 = *(_QWORD *)(a1 + 80);
    v18 = *(_QWORD *)(a1 + 88);
    if (v19 != v18)
    {
      v20 = (_QWORD *)(a1 + 40);
      do
      {
        if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v20, (unsigned __int8 *)v19))
        {
          *(_OWORD *)&v61[0].__locale_ = 0u;
          v62 = 0u;
          v63 = 1065353216;
          v64.__r_.__value_.__r.__words[0] = v19;
          v21 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v20, (unsigned __int8 *)v19, (uint64_t)&std::piecewise_construct, (__int128 **)&v64);
          std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__move_assign((uint64_t)(v21 + 40), (uint64_t *)v61);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v61);
        }
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v61);
          v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Add tag ", 8);
          v23 = *(char *)(v19 + 23);
          if (v23 >= 0)
            v24 = v19;
          else
            v24 = *(_QWORD *)v19;
          if (v23 >= 0)
            v25 = *(unsigned __int8 *)(v19 + 23);
          else
            v25 = *(_QWORD *)(v19 + 8);
          v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" to pass lists", 14);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v61);
        }
        v19 += 24;
      }
      while (v19 != v18);
    }
    memset(&v64, 0, sizeof(v64));
    v27 = (_QWORD *)(a1 + 40);
    v28 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
      v29 = std::locale::use_facet(v61, v28);
      v30 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
      std::locale::~locale(v61);
      v31 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v64, v30);
      if ((*((_BYTE *)v31 + *(_QWORD *)(*v31 - 24) + 32) & 5) != 0)
        break;
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v61);
        if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v32 = &v64;
        else
          v32 = (std::string *)v64.__r_.__value_.__r.__words[0];
        if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v33 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
        else
          v33 = v64.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v32, v33);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v61);
      }
      kaldi::Trim(&v64);
      v58 = 0;
      v59 = 0;
      v60 = 0;
      std::string::basic_string[abi:ne180100]<0>(v61, "|||");
      kaldi::SplitStringOnString((uint64_t)&v64, (char *)v61, (uint64_t *)&v58);
      if (SBYTE7(v62) < 0)
        operator delete(v61[0].__locale_);
      v34 = (uint64_t)v58;
      if (v59 - (_QWORD)v58 == 48)
      {
        if (*((char *)v58 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v58, *((_QWORD *)v58 + 1));
          v34 = (uint64_t)v58;
        }
        else
        {
          v35 = *v58;
          v57.__r_.__value_.__r.__words[2] = *((_QWORD *)v58 + 2);
          *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v35;
        }
        if (*(char *)(v34 + 47) < 0)
          std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)(v34 + 24), *(_QWORD *)(v34 + 32));
        else
          v56 = *(std::string *)(v34 + 24);
        kaldi::Trim(&v57);
        kaldi::Trim(&v56);
        v40 = v57.__r_.__value_.__l.__size_;
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v40 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
        v41 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
        v42 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
        if (v40)
        {
          if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v41 = v56.__r_.__value_.__l.__size_;
          if (v41)
          {
            if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v27, (unsigned __int8 *)&v56))
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v61);
              v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Not configured for locale : ", 28);
              if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v49 = &v56;
              else
                v49 = (std::string *)v56.__r_.__value_.__r.__words[0];
              if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v50 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
              else
                v50 = v56.__r_.__value_.__l.__size_;
              v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v49, v50);
              v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" on line ", 9);
              if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v53 = &v64;
              else
                v53 = (std::string *)v64.__r_.__value_.__r.__words[0];
              if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v54 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
              else
                v54 = v64.__r_.__value_.__l.__size_;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, v54);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v61);
            }
            v68 = &v56;
            v43 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v27, (unsigned __int8 *)&v56, (uint64_t)&std::piecewise_construct, (__int128 **)&v68);
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)(v43 + 40), (unsigned __int8 *)&v57, (uint64_t)&v57);
            v42 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
          }
        }
        if (v42 < 0)
          operator delete(v56.__r_.__value_.__l.__data_);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v57.__r_.__value_.__l.__data_);
      }
      else if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v61);
        v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Skipping tag ", 13);
        if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &v64;
        else
          v37 = (std::string *)v64.__r_.__value_.__r.__words[0];
        if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
        else
          v38 = v64.__r_.__value_.__l.__size_;
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" ", 1);
        std::ostream::operator<<();
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v61);
      }
      v61[0].__locale_ = (std::locale::__imp *)&v58;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v61);
    }
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    if (kaldi::g_kaldi_verbose_level < 0)
      goto LABEL_28;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Input hammer has DNF ", 21);
    v44 = *(uint64_t **)(a1 + 56);
    if (v44)
    {
      v45 = 0;
      do
      {
        v45 += *((_DWORD *)v44 + 16);
        v44 = (uint64_t *)*v44;
      }
      while (v44);
    }
    v46 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" known entries across ", 22);
    v47 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" locales it will leave in place", 31);
    goto LABEL_27;
  }
  v16 = 0;
LABEL_29:
  if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v65.__r_.__value_.__l.__data_);
  return v16;
}

void sub_1ADF345D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a27);
  if (*(char *)(v32 - 129) < 0)
    operator delete(*(void **)(v32 - 152));
  _Unwind_Resume(a1);
}

void sub_1ADF34658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  JUMPOUT(0x1ADF3468CLL);
}

void sub_1ADF346A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21)
{
  std::locale::~locale(&a21);
  JUMPOUT(0x1ADF346B8);
}

void sub_1ADF346CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  JUMPOUT(0x1ADF346E0);
}

void sub_1ADF346DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  uint64_t v21;

  a21 = (void **)(v21 - 176);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a21);
  JUMPOUT(0x1ADF34708);
}

void sub_1ADF346F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21)
{
  std::locale::~locale(&a21);
  JUMPOUT(0x1ADF34708);
}

uint64_t kaldi::quasar::InputHammer::Info(kaldi::quasar::InputHammer *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  _QWORD v13[2];
  _QWORD v14[11];
  char v15;
  uint64_t v16;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"RemoveUnderScores = ", 20);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", StripTokenLocales = ", 22);
  v3 = *((_QWORD *)this + 10);
  for (i = *((_QWORD *)this + 11); v3 != i; v3 += 24)
  {
    v5 = *(char *)(v3 + 23);
    if (v5 >= 0)
      v6 = v3;
    else
      v6 = *(_QWORD *)v3;
    if (v5 >= 0)
      v7 = *(unsigned __int8 *)(v3 + 23);
    else
      v7 = *(_QWORD *)(v3 + 8);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v6, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", # of entries ", 15);
  v9 = (uint64_t *)*((_QWORD *)this + 7);
  if (v9)
  {
    v10 = 0;
    do
    {
      v10 += *((_DWORD *)v9 + 16);
      v9 = (uint64_t *)*v9;
    }
    while (v9);
  }
  std::ostream::operator<<();
  std::stringbuf::str();
  v13[0] = *MEMORY[0x1E0DE4F50];
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v14[0] = v11;
  v14[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v15 < 0)
    operator delete((void *)v14[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v16);
}

void sub_1ADF34894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::InputHammer::ReadHeader(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t *v6;
  uint64_t *v7;
  std::string::size_type size;
  std::string *v18;
  std::string::size_type v19;
  int v20;
  _QWORD *v23;
  std::string *v24;
  std::string::size_type v25;
  int v26;
  __int128 *v27;
  __int128 *v28;
  unint64_t v29;
  char *v31;
  __int128 *v32;
  __int128 *v33;
  uint64_t v34;
  std::string v35;
  int v36;
  __int128 **v37;

  v36 = -1;
  v6 = a2 + 4;
  v7 = (uint64_t *)(a1 + 80);
  v31 = (char *)(a1 + 104);
  do
  {
    while (1)
    {
      if ((*((_BYTE *)v6 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
        return 1;
      memset(&v35, 0, sizeof(v35));
      kaldi::ReadToken(a2, a3, (uint64_t)&v35);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      {
        size = v35.__r_.__value_.__l.__size_;
        if (v35.__r_.__value_.__l.__size_ == 10
          && *(_QWORD *)v35.__r_.__value_.__l.__data_ == 0x73694C464E442F3CLL
          && *(_WORD *)(v35.__r_.__value_.__r.__words[0] + 8) == 15988)
        {
LABEL_68:
          v26 = 3;
          goto LABEL_77;
        }
        if (v35.__r_.__value_.__l.__size_ != 19)
          goto LABEL_46;
        if (*(_QWORD *)v35.__r_.__value_.__l.__data_ == 0x5565766F6D65523CLL
          && *(_QWORD *)(v35.__r_.__value_.__r.__words[0] + 8) == 0x726F63537265646ELL
          && *(_QWORD *)(v35.__r_.__value_.__r.__words[0] + 11) == 0x3E7365726F635372)
        {
LABEL_67:
          kaldi::ReadBasicType<BOOL>(a2, a3, v31);
          goto LABEL_76;
        }
        size = v35.__r_.__value_.__l.__size_;
        if (*(_QWORD *)v35.__r_.__value_.__l.__data_ == 0x6F5470697274533CLL
          && *(_QWORD *)(v35.__r_.__value_.__r.__words[0] + 8) == 0x6C61636F4C6E656BLL
          && *(_QWORD *)(v35.__r_.__value_.__r.__words[0] + 11) == 0x3E73656C61636F4CLL)
        {
LABEL_69:
          kaldi::ReadToken(a2, a3, (uint64_t)&v35);
          v32 = 0;
          v33 = 0;
          v34 = 0;
          kaldi::SplitStringToVector(&v35, ",", 1, (uint64_t)&v32);
          v28 = v32;
          v27 = v33;
          if (v32 != v33)
          {
            v29 = *(_QWORD *)(a1 + 88);
            do
            {
              if (v29 >= *(_QWORD *)(a1 + 96))
              {
                v29 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v7, v28);
              }
              else
              {
                std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v7, v28);
                v29 += 24;
              }
              *(_QWORD *)(a1 + 88) = v29;
              v28 = (__int128 *)((char *)v28 + 24);
            }
            while (v28 != v27);
          }
          v37 = &v32;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
          goto LABEL_76;
        }
        if ((*((_BYTE *)&v35.__r_.__value_.__s + 23) & 0x80) != 0)
        {
LABEL_46:
          if (size != 9)
            goto LABEL_58;
          v18 = (std::string *)v35.__r_.__value_.__r.__words[0];
          goto LABEL_48;
        }
        if (HIBYTE(v35.__r_.__value_.__r.__words[2]) != 9)
          goto LABEL_58;
      }
      else if (HIBYTE(v35.__r_.__value_.__r.__words[2]) != 9)
      {
        if (HIBYTE(v35.__r_.__value_.__r.__words[2]) == 10)
        {
          if (v35.__r_.__value_.__r.__words[0] == 0x73694C464E442F3CLL
            && LOWORD(v35.__r_.__value_.__r.__words[1]) == 15988)
          {
            goto LABEL_68;
          }
        }
        else if (HIBYTE(v35.__r_.__value_.__r.__words[2]) == 19)
        {
          if (v35.__r_.__value_.__r.__words[0] == 0x5565766F6D65523CLL
            && v35.__r_.__value_.__l.__size_ == 0x726F63537265646ELL
            && *(std::string::size_type *)((char *)&v35.__r_.__value_.__r.__words[1] + 3) == 0x3E7365726F635372)
          {
            goto LABEL_67;
          }
          if (v35.__r_.__value_.__r.__words[0] == 0x6F5470697274533CLL
            && v35.__r_.__value_.__l.__size_ == 0x6C61636F4C6E656BLL
            && *(std::string::size_type *)((char *)&v35.__r_.__value_.__r.__words[1] + 3) == 0x3E73656C61636F4CLL)
          {
            goto LABEL_69;
          }
        }
        goto LABEL_58;
      }
      v18 = &v35;
LABEL_48:
      v19 = v18->__r_.__value_.__r.__words[0];
      v20 = v18->__r_.__value_.__s.__data_[8];
      if (v19 == 0x6E6F69737265563CLL && v20 == 62)
      {
        kaldi::ReadBasicType<int>(a2, a3, (uint64_t)&v36);
LABEL_76:
        std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
        v26 = 0;
        goto LABEL_77;
      }
LABEL_58:
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Unknown token ", 14);
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v24 = &v35;
        else
          v24 = (std::string *)v35.__r_.__value_.__r.__words[0];
        if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v25 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
        else
          v25 = v35.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      }
      v26 = 1;
LABEL_77:
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        break;
      if (v26)
        return v26 == 3;
    }
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  while (!v26);
  return v26 == 3;
}

void sub_1ADF34CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  *(_QWORD *)(v11 - 96) = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 96));
  if (*(char *)(v11 - 105) < 0)
    operator delete(*(void **)(v11 - 128));
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ReadInputHammer(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[34];

  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Reading tag filters from : ", 27);
    v5 = *(char *)(a2 + 23);
    if (v5 >= 0)
      v6 = a2;
    else
      v6 = *(_QWORD *)a2;
    if (v5 >= 0)
      v7 = *(unsigned __int8 *)(a2 + 23);
    else
      v7 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v9);
  }
  return kaldi::quasar::InputHammer::ReadRaw(a1 + 8);
}

void sub_1ADF34D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::__map_value_compare<std::vector<std::string>,std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::less<std::vector<std::string>>,true>,std::allocator<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>>>::__emplace_unique_key_args<std::vector<std::string>,std::pair<std::vector<std::string>,std::shared_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>>(uint64_t **a1, const void ***a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = std::__tree<std::vector<std::string>>::__find_equal<std::vector<std::string>>((uint64_t)a1, &v10, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    std::__tree<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::__map_value_compare<std::vector<std::string>,std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::less<std::vector<std::string>>,true>,std::allocator<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>>>::__construct_node<std::pair<std::vector<std::string>,std::shared_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

_OWORD *std::__tree<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::__map_value_compare<std::vector<std::string>,std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,std::less<std::vector<std::string>>,true>,std::allocator<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>>>::__construct_node<std::pair<std::vector<std::string>,std::shared_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _OWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v5 = a1 + 8;
  result = operator new(0x48uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  result[2] = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *((_QWORD *)result + 6) = v7;
  *((_QWORD *)result + 7) = v8;
  v9 = *(_QWORD *)(a2 + 32);
  *((_QWORD *)result + 8) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::vector<std::string>,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::vector<std::string> const,std::weak_ptr<kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void _ZNKSt3__116__variant_detail12__visitation9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS5_21TranslationBeamSearchINS5_19TorchEncoderDecoderEEENS7_INS5_6EncdecEEEEE11SelectModelERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESK_SK_bEUlOT_E_EclB8ne180100IJRNS0_5__altILm0ES9_EEEEEDcDpOT_(uint64_t **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  if (*(_BYTE *)(a2 + 4896))
  {
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SelectModel((_QWORD **)(a2 + 136), **a1, (*a1)[1], a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void _ZNKSt3__116__variant_detail12__visitation9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS5_21TranslationBeamSearchINS5_19TorchEncoderDecoderEEENS7_INS5_6EncdecEEEEE11SelectModelERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESK_SK_bEUlOT_E_EclB8ne180100IJRNS0_5__altILm1ESB_EEEEEDcDpOT_(std::string::size_type **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  if (*(_BYTE *)(a2 + 4896))
  {
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::SelectModel((uint64_t *)(a2 + 136), **a1, (*a1)[1], *((_BYTE *)*a1 + 24) != 0, a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS9_21TranslationBeamSearchINS9_19TorchEncoderDecoderEEENSB_INS9_6EncdecEEEEE13OutputSymbolsEvEUlOT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  return kaldi::quasar::TorchEncoderDecoder::OutputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(a2 + 136));
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN5kaldi6quasar17TranslationEngineIJNS9_21TranslationBeamSearchINS9_19TorchEncoderDecoderEEENSB_INS9_6EncdecEEEEE13OutputSymbolsEvEUlOT_E_EEJRNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 136) + 560);
}

void std::vector<quasar::TranslationPhraseInternal>::__assign_with_size[abi:ne180100]<quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal const*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0x8F5C28F5C28F5C29 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<quasar::TranslationPhraseInternal>::__vdeallocate((void **)a1);
    if (a4 > 0x147AE147AE147AELL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x1EB851EB851EB852 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0x8F5C28F5C28F5C29 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0xA3D70A3D70A3D7)
      v11 = 0x147AE147AE147AELL;
    else
      v11 = v10;
    std::vector<quasar::TranslationPhraseInternal>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal*>(v8, (uint64_t)a2, (uint64_t)a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x8F5C28F5C28F5C29 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3];
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,0>(a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationPhraseInternal>,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal const*,quasar::TranslationPhraseInternal*>(v8, (uint64_t)v13, (uint64_t)a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,quasar::TranslationPhraseInternal *,0>(a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
      quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)(v16 - 200));
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1ADF350F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADF350F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZNK5kaldi6quasar17TranslationEngineIJNS9_21TranslationBeamSearchINS9_19TorchEncoderDecoderEEENSB_INS9_6EncdecEEEEE13NumActiveHypsEvEUlOT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  if (*(_DWORD *)(a2 + 5836))
    v2 = 1;
  else
    v2 = *(_QWORD *)(a2 + 5872) == *(_QWORD *)(a2 + 5864);
  if (v2)
    return ((*(_QWORD *)(a2 + 5792) - *(_QWORD *)(a2 + 5784)) >> 3);
  else
    return 1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZNK5kaldi6quasar17TranslationEngineIJNS9_21TranslationBeamSearchINS9_19TorchEncoderDecoderEEENSB_INS9_6EncdecEEEEE13NumActiveHypsEvEUlOT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJSD_SF_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  BOOL v2;

  if (*(_DWORD *)(a2 + 5836))
    v2 = 1;
  else
    v2 = *(_QWORD *)(a2 + 5872) == *(_QWORD *)(a2 + 5864);
  if (v2)
    return ((*(_QWORD *)(a2 + 5792) - *(_QWORD *)(a2 + 5784)) >> 3);
  else
    return 1;
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Init<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const*,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>> *)::{lambda(fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>> &>(uint64_t **a1, uint64_t a2)
{
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Init<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a2, **a1, (*a1)[1]);
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Init<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const*,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>> *)::{lambda(fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>> &>(uint64_t **a1, uint64_t a2)
{
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Init<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a2, **a1, (*a1)[1]);
}

double kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Init<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  uint64_t v18;
  int v19;

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v18, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"entered Init with #ActiveHyps: ", 31);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" at decoding-position: ", 23);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v18);
  }
  *(_QWORD *)(a1 + 5712) = a3;
  kaldi::quasar::TorchEncoderDecoder::Start(*(_QWORD **)(a1 + 136), *(clockid_t *)(a2 + 312), a2 + 112);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 5712) + 224))(*(_QWORD *)(a1 + 5712));
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 200))(a3);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 5712) + 176))(*(_QWORD *)(a1 + 5712), v7);
  *(_DWORD *)(a1 + 5720) = -1;
  *(int32x2_t *)(a1 + 5728) = vdup_n_s32(0x7F800000u);
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 5736), 0, 0, 0);
  v8 = *(_DWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 5760) = 0x3F8000004F000000;
  if (v8 == 1)
    *(float *)(a1 + 5764) = 1.0 - *(float *)(a2 + 180);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::NbestCompare((uint64_t)&v18, *(_DWORD *)(a2 + 216), *(float *)(a2 + 220), *(float *)(a2 + 224));
  *(_QWORD *)(a1 + 5768) = v18;
  *(_DWORD *)(a1 + 5776) = v19;
  *(_QWORD *)(a1 + 5792) = *(_QWORD *)(a1 + 5784);
  std::vector<kaldi::Matrix<float>>::resize((uint64_t *)(a1 + 4952), 1uLL);
  kaldi::Matrix<float>::Resize(*(int32x2_t **)(a1 + 4952), 0, 0, 0, 0);
  v9 = *(_QWORD **)(a1 + 5136);
  v10 = *(_QWORD **)(a1 + 5128);
  if (v9 != v10)
  {
    v11 = v9 - 6;
    v12 = v9 - 6;
    do
    {
      v13 = *v12;
      v12 -= 6;
      (*(void (**)(_QWORD *))(v13 + 16))(v11);
      v14 = v11 == v10;
      v11 = v12;
    }
    while (!v14);
  }
  *(_QWORD *)(a1 + 5136) = v10;
  v15 = *(_QWORD *)(a1 + 5160);
  v16 = *(_QWORD *)(a1 + 5152);
  while (v15 != v16)
    v15 = kaldi::Matrix<float>::~Matrix(v15 - 40);
  *(_QWORD *)(a1 + 5160) = v16;
  result = 0.0;
  *(_QWORD *)(a1 + 5832) = 0;
  *(_QWORD *)(a1 + 5872) = *(_QWORD *)(a1 + 5864);
  return result;
}

void sub_1ADF35398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::NbestCompare(uint64_t a1, int a2, float a3, float a4)
{
  _QWORD *v5;
  _QWORD v7[35];

  *(_DWORD *)a1 = a2;
  *(float *)(a1 + 4) = a3;
  *(float *)(a1 + 8) = a4;
  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v7, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Initializing NbestCompare. alpha: ", 34);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", sigma: ", 9);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v7);
  }
  return a1;
}

void sub_1ADF35438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

float std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<float kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::StaticReadWrite<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const*,std::vector<std::string> const&,std::vector<std::string>*,BOOL)::{lambda(fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>> &>(uint64_t **a1, uint64_t a2)
{
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::StaticReadWrite<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a2, **a1, (uint64_t *)(*a1)[1], (uint64_t *)(*a1)[2], *((unsigned __int8 *)*a1 + 24));
}

float std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<float kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::StaticReadWrite<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const*,std::vector<std::string> const&,std::vector<std::string>*,BOOL)::{lambda(fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>> &>(uint64_t **a1, uint64_t a2)
{
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::StaticReadWrite<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a2, **a1, (uint64_t *)(*a1)[1], (uint64_t *)(*a1)[2], *((unsigned __int8 *)*a1 + 24));
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::StaticReadWrite<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::vector<std::string>::const_iterator v15;
  std::vector<std::string>::pointer end;
  _QWORD *v17;
  float v18;
  std::vector<std::string>::const_iterator v19;
  int v20;
  char *v21;
  unint64_t v22;
  _DWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  int v32;
  int v33;
  unint64_t v34;
  __int128 *v36;
  uint64_t v37;
  _DWORD *v38;
  __int128 *v39;
  __int128 *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  int v47;
  char *v48;
  _BYTE *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  __int128 *v53;
  __int128 *v54;
  uint64_t v55;
  _QWORD *v56;
  void *begin;
  uint64_t value_high;
  _QWORD *v59;
  void **v60;
  uint64_t v61;
  float v62;
  BOOL v63;
  _QWORD *v64;
  void *v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  void **v72;
  int v74;
  void *v75[2];
  unsigned __int8 v76;
  std::vector<std::string> v77;
  std::string v78;
  std::string v79;
  void *v80;
  __int128 *v81;
  __int128 *v82;
  void *__p[2];
  _QWORD v84[11];
  char v85;
  uint64_t v86;

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"entered StaticReadWrite final: ", 31);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" with #ActiveHyps: ", 19);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" at decoding-position: ", 23);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
  }
  v11 = kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a1 + 4952));
  memset(&v77, 0, sizeof(v77));
  v12 = *a3;
  if (a3[1] == *a3)
  {
    v15.__i_ = 0;
    end = 0;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    do
    {
      __p[0] = 0;
      __p[1] = 0;
      v84[0] = 0;
      kaldi::quasar::InputHammer::FilterTags(a1 + 8, v12 + v13, (uint64_t)__p, a2 + 64);
      v80 = 0;
      v81 = 0;
      v82 = 0;
      if (SHIBYTE(v84[0]) < 0)
      {
        std::string::__init_copy_ctor_external(&v79, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&v79.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v79.__r_.__value_.__r.__words[2] = v84[0];
      }
      kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::TokenizeInputString(a1, &v79, (uint64_t *)&v80);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v77, v77.__end_, (std::string *)v80, v81, 0xAAAAAAAAAAAAAAABLL * (((char *)v81 - (_BYTE *)v80) >> 3));
      v75[0] = &v80;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v75);
      if (SHIBYTE(v84[0]) < 0)
        operator delete(__p[0]);
      ++v14;
      v12 = *a3;
      v13 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) > v14);
    v15.__i_ = v77.__begin_;
    end = v77.__end_;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v15.__i_) >> 3) > v11 || (a5 & 1) != 0)
  {
    *(_QWORD *)(a1 + 5872) = *(_QWORD *)(a1 + 5864);
    if (v11 >= 1)
    {
      v19.__i_ = &v15.__i_[v11];
      std::vector<std::string>::erase(&v77, v15, v19);
      v15.__i_ = v77.__begin_;
    }
    memset(&v78, 0, sizeof(v78));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v78, (__int128 *)v15.__i_, (__int128 *)v77.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v77.__end_ - (char *)v15.__i_) >> 3));
    v72 = (void **)(a1 + 5864);
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Symbolize(a1, (uint64_t *)&v78, a1 + 5864, 0);
    __p[0] = &v78;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    __p[0] = &v77;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if ((a5 & 1) != 0)
    {
      v20 = kaldi::quasar::TorchEncoderDecoder::EosSourceId(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136)) - 1;
      v21 = *(char **)(a1 + 5872);
      v22 = *(_QWORD *)(a1 + 5880);
      if ((unint64_t)v21 >= v22)
      {
        v24 = (char *)*v72;
        v25 = (v21 - (_BYTE *)*v72) >> 2;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v27 = v22 - (_QWORD)v24;
        if (v27 >> 1 > v26)
          v26 = v27 >> 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
          v28 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
        {
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 5880, v28);
          v21 = *(char **)(a1 + 5872);
          v24 = *(char **)(a1 + 5864);
        }
        else
        {
          v29 = 0;
        }
        v30 = &v29[4 * v25];
        v31 = &v29[4 * v28];
        *(_DWORD *)v30 = v20;
        v23 = v30 + 4;
        while (v21 != v24)
        {
          v32 = *((_DWORD *)v21 - 1);
          v21 -= 4;
          *((_DWORD *)v30 - 1) = v32;
          v30 -= 4;
        }
        *(_QWORD *)(a1 + 5864) = v30;
        *(_QWORD *)(a1 + 5872) = v23;
        *(_QWORD *)(a1 + 5880) = v31;
        if (v24)
          operator delete(v24);
      }
      else
      {
        *(_DWORD *)v21 = v20;
        v23 = v21 + 4;
      }
      *(_QWORD *)(a1 + 5872) = v23;
    }
    if (*(_DWORD *)(a1 + 5836))
      v33 = 0;
    else
      v33 = *(_DWORD *)(a2 + 296);
    LODWORD(v34) = *(_DWORD *)(a2 + 300);
    if ((int)v34 + v33 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 5872) - *(_QWORD *)(a1 + 5864)) >> 2) && a5 == 0)
    {
      v18 = 2147500000.0;
    }
    else
    {
      v71 = (void *)*MEMORY[0x1E0DE4F50];
      v69 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      v70 = *(void **)(MEMORY[0x1E0DE4F50] + 64);
      v68 = MEMORY[0x1E0DE4FB8] + 16;
      v74 = a5;
      do
      {
        v80 = 0;
        v81 = 0;
        v82 = 0;
        if ((int)v34 + v33 >= 1)
        {
          v36 = 0;
          v37 = 0;
          while (1)
          {
            v38 = *(_DWORD **)(a1 + 5864);
            if (v37 >= (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 5872) - (_QWORD)v38) >> 2))
              break;
            if (v36 >= v82)
            {
              v40 = (__int128 *)v80;
              v41 = ((char *)v36 - (_BYTE *)v80) >> 2;
              v42 = v41 + 1;
              if ((unint64_t)(v41 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v43 = (char *)v82 - (_BYTE *)v80;
              if (((char *)v82 - (_BYTE *)v80) >> 1 > v42)
                v42 = v43 >> 1;
              if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
                v44 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v44 = v42;
              if (v44)
              {
                v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v82, v44);
                v40 = (__int128 *)v80;
                v36 = v81;
              }
              else
              {
                v45 = 0;
              }
              v46 = &v45[4 * v41];
              *(_DWORD *)v46 = v38[v37];
              v39 = (__int128 *)(v46 + 4);
              while (v36 != v40)
              {
                v47 = *((_DWORD *)v36 - 1);
                v36 = (__int128 *)((char *)v36 - 4);
                *((_DWORD *)v46 - 1) = v47;
                v46 -= 4;
              }
              v80 = v46;
              v81 = v39;
              v82 = (__int128 *)&v45[4 * v44];
              if (v40)
                operator delete(v40);
            }
            else
            {
              *(_DWORD *)v36 = v38[v37];
              v39 = (__int128 *)((char *)v36 + 4);
            }
            v81 = v39;
            ++v37;
            v36 = v39;
            if (v37 >= *(int *)(a2 + 300) + (uint64_t)v33)
            {
              v38 = *v72;
              break;
            }
          }
          if ((_DWORD)v37)
          {
            v48 = (char *)&v38[v37];
            v49 = *(_BYTE **)(a1 + 5872);
            v50 = v49 - v48;
            if (v49 != v48)
              memmove(v38, v48, v49 - v48);
            *(_QWORD *)(a1 + 5872) = (char *)v38 + v50;
          }
        }
        v51 = kaldi::g_kaldi_verbose_level;
        if (kaldi::g_kaldi_verbose_level >= 5)
        {
          v52 = kaldi::quasar::TorchEncoderDecoder::InputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
          if (v52)
          {
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
            v54 = (__int128 *)v80;
            v53 = v81;
            while (v54 != v53)
            {
              v55 = *(int *)v54;
              v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)" ", 1);
              (*(void (**)(std::vector<std::string> *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v52 + 88))(&v77, v52, v55 + 1);
              if (SHIBYTE(v77.__end_cap_.__value_) >= 0)
                begin = &v77;
              else
                begin = v77.__begin_;
              if (SHIBYTE(v77.__end_cap_.__value_) >= 0)
                value_high = HIBYTE(v77.__end_cap_.__value_);
              else
                value_high = (uint64_t)v77.__end_;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)begin, value_high);
              if (SHIBYTE(v77.__end_cap_.__value_) < 0)
                operator delete(v77.__begin_);
              v54 = (__int128 *)((char *)v54 + 4);
            }
            if (kaldi::g_kaldi_verbose_level > 4)
            {
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v77, 5);
              v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"partial_input_addition:", 23);
              std::stringbuf::str();
              if ((v76 & 0x80u) == 0)
                v60 = v75;
              else
                v60 = (void **)v75[0];
              if ((v76 & 0x80u) == 0)
                v61 = v76;
              else
                v61 = (uint64_t)v75[1];
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v60, v61);
              if ((char)v76 < 0)
                operator delete(v75[0]);
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v77);
            }
            __p[0] = v71;
            *(void **)((char *)__p + *((_QWORD *)v71 - 3)) = v70;
            v84[0] = v69;
            v84[1] = v68;
            if (v85 < 0)
              operator delete((void *)v84[9]);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x1AF44D094](&v86);
          }
          v51 = kaldi::g_kaldi_verbose_level;
        }
        if ((v51 & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"src_input_host_[0].NumRows(): ", 30);
          kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a1 + 4952));
          std::ostream::operator<<();
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
        }
        kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Read<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t *)a1, a2, (uint64_t)&v80, 0, 0.0);
        if (v74 && *(_QWORD *)(a1 + 5872) == *(_QWORD *)(a1 + 5864))
          v62 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Write<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *(_DWORD *)(a1 + 5188) - *(_DWORD *)(a1 + 5836), 1);
        else
          v62 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Write<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *(_DWORD *)(a2 + 300), 0);
        v18 = v62;
        if (*(_BYTE *)(a2 + 304))
          kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::PruneCurrentHyps(a1, 1);
        v63 = !v74 || *(_QWORD *)(a1 + 5872) != *(_QWORD *)(a1 + 5864);
        if (v80)
        {
          v81 = (__int128 *)v80;
          operator delete(v80);
        }
        if (!v63)
          break;
        v33 = 0;
        v34 = *(int *)(a2 + 300);
      }
      while (v34 <= (uint64_t)(*(_QWORD *)(a1 + 5872) - *(_QWORD *)(a1 + 5864)) >> 2 || v74);
    }
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::GetCurrentBestWords(a1, (uint64_t)a4);
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      memset(&v77, 0, sizeof(v77));
      kaldi::JoinVectorToString<std::string>(a4, " ", (uint64_t)&v77);
      if (kaldi::g_kaldi_verbose_level >= 5)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
        v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"partial_output: ", 16);
        if (SHIBYTE(v77.__end_cap_.__value_) >= 0)
          v65 = &v77;
        else
          v65 = v77.__begin_;
        if (SHIBYTE(v77.__end_cap_.__value_) >= 0)
          v66 = HIBYTE(v77.__end_cap_.__value_);
        else
          v66 = (uint64_t)v77.__end_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v65, v66);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
      }
      if (SHIBYTE(v77.__end_cap_.__value_) < 0)
        operator delete(v77.__begin_);
    }
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Input stream did not grow. Previously processed: ", 49);
      v17 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" provided: ", 11);
      std::ostream::operator<<();
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    }
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::GetCurrentBestWords(a1, (uint64_t)a4);
    __p[0] = &v77;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    return 2147500000.0;
  }
  return v18;
}

void sub_1ADF35DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::InputHammer::FilterTags(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_BYTE *)(a1 + 105))
    return kaldi::quasar::InputHammer::PassSpecifiedTags(a1, a2, a3, a4);
  else
    return kaldi::quasar::InputHammer::RemoveSpecifiedTags((_QWORD *)a1, a2, a3);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::TokenizeInputString(uint64_t a1, const std::string *a2, uint64_t *a3)
{
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  void **v8[34];
  void **v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12[3];

  if (*(_DWORD *)(a1 + 5244) == 1)
  {
    memset(v12, 0, sizeof(v12));
    kaldi::SplitStringToVector(a2, " ", 1, (uint64_t)v12);
    kaldi::quasar::BPE::Apply(a1 + 152, v12, a3);
    v9 = 0;
    v10 = 0;
    v11 = 0;
    kaldi::JoinVectorToString<std::string>(a3, " ", (uint64_t)&v9);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"BPE input ", 10);
      if (v11 >= 0)
        v6 = (void **)&v9;
      else
        v6 = v9;
      if (v11 >= 0)
        v7 = HIBYTE(v11);
      else
        v7 = v10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v8);
    }
    if (SHIBYTE(v11) < 0)
      operator delete(v9);
    v8[0] = (void **)v12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v8);
  }
  else
  {
    kaldi::SplitStringToVector(a2, " ", 1, (uint64_t)a3);
  }
}

void sub_1ADF36054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  if (*(char *)(v9 - 57) < 0)
    operator delete(*(void **)(v9 - 80));
  a9 = (void **)(v9 - 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

__n128 kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::GetCurrentBestWords(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __n128 *v9;
  __n128 result;
  uint64_t v11;
  unint64_t v12;
  __n128 *v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  std::string *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  std::string *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  std::string *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  std::string *v32;
  std::string *v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  std::string *v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  std::string *v41;
  __int128 v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  std::string __p;
  std::string v53;
  std::__split_buffer<std::string> __v;

  v4 = *(_QWORD **)(a1 + 5784);
  if (*(_QWORD **)(a1 + 5792) == v4)
    v5 = (unsigned int *)(a1 + 5832);
  else
    v5 = (unsigned int *)(*v4 + 32);
  v6 = *v5;
  if ((int)v6 < 1)
    return result;
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a2);
  do
  {
    if (*(_DWORD *)(a1 + 5248) == 1)
    {
      v7 = kaldi::quasar::TorchEncoderDecoder::OutputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 88))(&v53, v7, *(int *)(*(_QWORD *)(a1 + 5808) + 8 * v6 + 4) + 1);
      if (kaldi::quasar::BPE::IsIntraWord(a1 + 152, (uint64_t **)&v53))
      {
        kaldi::quasar::BPE::StripSeparator(a1 + 152, &v53, &__p);
        v9 = *(__n128 **)(a2 + 8);
        v8 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v9 >= v8)
        {
          v23 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *(_QWORD *)a2) >> 3);
          v24 = v23 + 1;
          if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *(_QWORD *)a2) >> 3);
          if (2 * v25 > v24)
            v24 = 2 * v25;
          if (v25 >= 0x555555555555555)
            v26 = 0xAAAAAAAAAAAAAAALL;
          else
            v26 = v24;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
          if (v26)
            v27 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v26);
          else
            v27 = 0;
          v37 = v27 + v23;
          __v.__first_ = v27;
          __v.__begin_ = v37;
          __v.__end_cap_.__value_ = &v27[v26];
          v38 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v37->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v38;
          memset(&__p, 0, sizeof(__p));
          __v.__end_ = v37 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
          v39 = *(_QWORD *)(a2 + 8);
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          v40 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          *(_QWORD *)(a2 + 8) = v39;
          if (v40 < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        else
        {
          result = *(__n128 *)&__p.__r_.__value_.__l.__data_;
          v9[1].n128_u64[0] = __p.__r_.__value_.__r.__words[2];
          *v9 = result;
          *(_QWORD *)(a2 + 8) = (char *)v9 + 24;
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, " ");
        v15 = *(_QWORD *)(a2 + 8);
        v14 = *(_QWORD *)(a2 + 16);
        if (v15 >= v14)
        {
          v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(_QWORD *)a2) >> 3);
          v29 = v28 + 1;
          if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *(_QWORD *)a2) >> 3);
          if (2 * v30 > v29)
            v29 = 2 * v30;
          if (v30 >= 0x555555555555555)
            v31 = 0xAAAAAAAAAAAAAAALL;
          else
            v31 = v29;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
          if (v31)
            v32 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v31);
          else
            v32 = 0;
          v41 = v32 + v28;
          __v.__first_ = v32;
          __v.__begin_ = v41;
          __v.__end_cap_.__value_ = &v32[v31];
          v42 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v41->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
          memset(&__p, 0, sizeof(__p));
          __v.__end_ = v41 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
          v17 = *(std::string **)(a2 + 8);
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          v43 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          *(_QWORD *)(a2 + 8) = v17;
          if (v43 < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            v17 = *(std::string **)(a2 + 8);
          }
        }
        else
        {
          v16 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v15 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)v15 = v16;
          v17 = (std::string *)(v15 + 24);
          *(_QWORD *)(a2 + 8) = v15 + 24;
        }
        if ((unint64_t)v17 >= *(_QWORD *)(a2 + 16))
        {
          v44 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, (__int128 *)&v53);
        }
        else
        {
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v17, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
          }
          else
          {
            result = *(__n128 *)&v53.__r_.__value_.__l.__data_;
            v17->__r_.__value_.__r.__words[2] = v53.__r_.__value_.__r.__words[2];
            *(__n128 *)&v17->__r_.__value_.__l.__data_ = result;
          }
          v44 = (uint64_t)&v17[1];
          *(_QWORD *)(a2 + 8) = v17 + 1;
        }
        *(_QWORD *)(a2 + 8) = v44;
      }
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_55;
    }
    else
    {
      v11 = kaldi::quasar::TorchEncoderDecoder::OutputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 88))(&v53, v11, *(int *)(*(_QWORD *)(a1 + 5808) + 8 * v6 + 4) + 1);
      v13 = *(__n128 **)(a2 + 8);
      v12 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v13 < v12)
      {
        result = *(__n128 *)&v53.__r_.__value_.__l.__data_;
        v13[1].n128_u64[0] = v53.__r_.__value_.__r.__words[2];
        *v13 = result;
        *(_QWORD *)(a2 + 8) = (char *)v13 + 24;
        goto LABEL_56;
      }
      v18 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v13 - *(_QWORD *)a2) >> 3);
      v19 = v18 + 1;
      if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *(_QWORD *)a2) >> 3);
      if (2 * v20 > v19)
        v19 = 2 * v20;
      if (v20 >= 0x555555555555555)
        v21 = 0xAAAAAAAAAAAAAAALL;
      else
        v21 = v19;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v21)
        v22 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v21);
      else
        v22 = 0;
      v33 = v22 + v18;
      __v.__first_ = v22;
      __v.__begin_ = v33;
      __v.__end_cap_.__value_ = &v22[v21];
      v34 = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
      v33->__r_.__value_.__r.__words[2] = v53.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
      memset(&v53, 0, sizeof(v53));
      __v.__end_ = v33 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
      v35 = *(_QWORD *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
      v36 = SHIBYTE(v53.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(a2 + 8) = v35;
      if (v36 < 0)
LABEL_55:
        operator delete(v53.__r_.__value_.__l.__data_);
    }
LABEL_56:
    v6 = *(unsigned int *)(*(_QWORD *)(a1 + 5808) + 8 * v6);
  }
  while ((int)v6 > 0);
  v46 = *(_QWORD *)a2;
  v45 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 != v45)
  {
    v47 = v45 - 24;
    if (v47 > v46)
    {
      v48 = v46 + 24;
      do
      {
        v49 = *(_QWORD *)(v48 - 8);
        result = *(__n128 *)(v48 - 24);
        v50 = *(_QWORD *)(v47 + 16);
        *(_OWORD *)(v48 - 24) = *(_OWORD *)v47;
        *(_QWORD *)(v48 - 8) = v50;
        *(__n128 *)v47 = result;
        *(_QWORD *)(v47 + 16) = v49;
        v47 -= 24;
        v51 = v48 >= v47;
        v48 += 24;
      }
      while (!v51);
    }
  }
  return result;
}

void sub_1ADF36534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::__split_buffer<std::wstring> *a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v22 + 8) = v23;
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Symbolize(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  unint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD v45[35];

  v8 = kaldi::quasar::TorchEncoderDecoder::InputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
  v9 = kaldi::quasar::TorchEncoderDecoder::UnkSourceId(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
  if (a2[1] != *a2)
  {
    v10 = v9;
    v11 = 0;
    do
    {
      v12 = kaldi::quasar::TorchEncoderDecoder::Reverse(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
      v13 = *a2;
      LODWORD(v14) = v11;
      if (v12)
        v14 = ~v11 - 0x5555555555555555 * ((a2[1] - v13) >> 3);
      v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 96))(v8, v13 + 24 * (int)v14);
      if (v15 == -1)
      {
        if (a4)
        {
          v17 = *(_DWORD **)(a4 + 8);
          v16 = *(_QWORD *)(a4 + 16);
          if ((unint64_t)v17 >= v16)
          {
            v19 = *(_DWORD **)a4;
            v20 = ((uint64_t)v17 - *(_QWORD *)a4) >> 2;
            v21 = v20 + 1;
            if ((unint64_t)(v20 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v22 = v16 - (_QWORD)v19;
            if (v22 >> 1 > v21)
              v21 = v22 >> 1;
            if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
              v23 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v23 = v21;
            if (v23)
            {
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 16, v23);
              v19 = *(_DWORD **)a4;
              v17 = *(_DWORD **)(a4 + 8);
            }
            else
            {
              v24 = 0;
            }
            v25 = &v24[4 * v20];
            *(_DWORD *)v25 = v11;
            v18 = v25 + 4;
            while (v17 != v19)
            {
              v26 = *--v17;
              *((_DWORD *)v25 - 1) = v26;
              v25 -= 4;
            }
            *(_QWORD *)a4 = v25;
            *(_QWORD *)(a4 + 8) = v18;
            *(_QWORD *)(a4 + 16) = &v24[4 * v23];
            if (v19)
              operator delete(v19);
          }
          else
          {
            *v17 = v11;
            v18 = v17 + 1;
          }
          *(_QWORD *)(a4 + 8) = v18;
        }
        v15 = v10;
        if (v10 == -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
          v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Couldn't find symbol ", 21);
          v40 = *a2 + 24 * v11;
          v41 = *(char *)(v40 + 23);
          if (v41 >= 0)
            v42 = *a2 + 24 * v11;
          else
            v42 = *(_QWORD *)v40;
          if (v41 >= 0)
            v43 = *(unsigned __int8 *)(v40 + 23);
          else
            v43 = *(_QWORD *)(v40 + 8);
          v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, v42, v43);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(v44, " or <unk> UNK symbol");
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
        }
      }
      v27 = v15 - 1;
      v29 = *(_DWORD **)(a3 + 8);
      v28 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v29 >= v28)
      {
        v31 = *(_DWORD **)a3;
        v32 = ((uint64_t)v29 - *(_QWORD *)a3) >> 2;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v34 = v28 - (_QWORD)v31;
        if (v34 >> 1 > v33)
          v33 = v34 >> 1;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
          v35 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v35 = v33;
        if (v35)
        {
          v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a3 + 16, v35);
          v31 = *(_DWORD **)a3;
          v29 = *(_DWORD **)(a3 + 8);
        }
        else
        {
          v36 = 0;
        }
        v37 = &v36[4 * v32];
        *(_DWORD *)v37 = v27;
        v30 = v37 + 4;
        while (v29 != v31)
        {
          v38 = *--v29;
          *((_DWORD *)v37 - 1) = v38;
          v37 -= 4;
        }
        *(_QWORD *)a3 = v37;
        *(_QWORD *)(a3 + 8) = v30;
        *(_QWORD *)(a3 + 16) = &v36[4 * v35];
        if (v31)
          operator delete(v31);
      }
      else
      {
        *v29 = v27;
        v30 = v29 + 1;
      }
      *(_QWORD *)(a3 + 8) = v30;
      ++v11;
    }
    while (v11 != 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
}

void sub_1ADF36868(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Read<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, float a5)
{
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v30[3];
  void *__p;
  void *v32;
  uint64_t v33;
  int32x2_t v34;
  __int128 v35;
  __int128 v36;
  char v37;

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v34, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"entered Read to process #tokens: ", 33);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v34);
  }
  v10 = a1 + 619;
  v11 = a1[619];
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[620] - v11) >> 3) <= a4)
  {
    std::vector<kaldi::Matrix<float>>::resize(a1 + 619, a4 + 1);
    v11 = *v10;
  }
  v36 = 0u;
  v35 = 0u;
  v34 = (int32x2_t)&unk_1E5D34170;
  v37 = 0;
  v12 = kaldi::MatrixBase<float>::NumRows(v11 + 40 * a4);
  kaldi::Matrix<float>::Resize((int32x2_t *)(*v10 + 40 * a4), v12 + ((*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2), 1, 2, 0);
  v13 = *(int **)a3;
  v14 = *v10;
  v15 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v15)
  {
    v16 = v15 >> 2;
    v17 = (uint64_t *)(v14 + 40 * a4);
    v18 = *((_DWORD *)v17 + 2);
    v19 = *v17;
    v20 = *((int *)v17 + 4);
    v21 = v12;
    if ((unint64_t)(v15 >> 2) <= 1)
      v16 = 1;
    v22 = (float *)(v19 + 4 * (int)v20 * (uint64_t)v12);
    v23 = 4 * v20;
    do
    {
      v24 = *v13++;
      *v22 = (float)v24;
      v22 = (float *)((char *)v22 + v23);
      ++v21;
      --v16;
    }
    while (v16);
  }
  else
  {
    v18 = *(_DWORD *)(v14 + 40 * a4 + 8);
  }
  kaldi::SubMatrix<float>::SubMatrix((uint64_t)&__p, v14 + 40 * a4, v12, (unint64_t)v15 >> 2, 0, v18);
  kaldi::CuMatrix<float>::operator=(&v34, (int *)&__p);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
  v25 = a1[17];
  if (v12)
  {
    kaldi::quasar::TorchEncoderDecoder::EncFeedforward(a1[17], (uint64_t)&v34, a4);
  }
  else
  {
    v26 = *(unsigned int *)(a2 + 288);
    v27 = *(unsigned int *)(a2 + 292);
    __p = 0;
    v32 = 0;
    v33 = 0;
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SuppressedIds((uint64_t)a1, a2 + 64, a2 + 88, (uint64_t *)(a2 + 328), (uint64_t)v30);
    kaldi::quasar::TorchEncoderDecoder::ConstrainSoftmax(v25, a2 + 264, v26, v27, (int **)a3, (int **)&__p, v30);
    std::__tree<int>::destroy((uint64_t)v30, (_QWORD *)v30[1]);
    if (__p)
    {
      v32 = __p;
      operator delete(__p);
    }
    kaldi::quasar::TorchEncoderDecoder::ResetHistoryState((kaldi::quasar::TorchEncoderDecoder *)a1[17], 1);
    v28 = a1[17];
    if (*(_DWORD *)(a2 + 300))
      kaldi::quasar::TorchEncoderDecoder::EncFeedforward(v28, (uint64_t)&v34, a4);
    else
      kaldi::quasar::TorchEncoderDecoder::StartFeedforward(v28, (uint64_t)&v34, a4, 0);
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::AddInitialHypToCurrent<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)a1, a2, a4, a5);
  }
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v34);
}

void sub_1ADF36B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  std::__tree<int>::destroy((uint64_t)&a9, a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a16);
  _Unwind_Resume(a1);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Write<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _QWORD *v7;
  clockid_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int32x2_t *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::vector<int> *v18;
  std::vector<int> *v19;
  int *end;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  int *v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  std::vector<unsigned int> *v53;
  std::vector<unsigned int> *v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  char *v69;
  int v70;
  int VocabWordIdx;
  char *v72;
  uint64_t v73;
  uint64_t *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  float v79;
  int v80;
  int v81;
  char v82;
  float v83;
  float v84;
  int v85;
  float v86;
  int v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  float v91;
  float v92;
  char *v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  void *v97;
  uint64_t v98;
  uint64_t *v99;
  char *v100;
  int v101;
  uint64_t *v102;
  void *v103;
  float v104;
  int SoftmaxEosId;
  int v106;
  char *v107;
  uint64_t v108;
  uint64_t *v109;
  char *v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  float *v116;
  char *v117;
  float v118;
  int v119;
  float v120;
  float v121;
  float v122;
  float v123;
  int v124;
  std::vector<int> *v125;
  std::vector<int> *v126;
  int v127;
  float v128;
  float v129;
  float v130;
  float v131;
  BOOL v132;
  int64_t v133;
  unint64_t v134;
  float v135;
  std::vector<int> *v136;
  char v137;
  float v138;
  char *v139;
  int *v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  int v144;
  int v145;
  BOOL v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  int v150;
  char *v151;
  unsigned int v152;
  unsigned int v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  unint64_t v161;
  unint64_t v162;
  int v163;
  unint64_t v164;
  int v165;
  uint64_t v166;
  int v167;
  _QWORD *v168;
  float v169;
  int v170;
  float v171;
  float v172;
  float v173;
  uint64_t v174;
  uint64_t v175;
  float v176;
  float v177;
  _BYTE *v178;
  _BYTE *v179;
  uint64_t v180;
  uint64_t v181;
  float v182;
  float *v183;
  float *v184;
  uint64_t v185;
  uint64_t v186;
  float *v187;
  uint64_t v188;
  unint64_t v189;
  float *v190;
  float v191;
  float v192;
  float *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  float *v197;
  int32x2_t v198;
  int v199;
  int v200;
  _DWORD *v201;
  int v202;
  float v203;
  float v204;
  char v205;
  uint64_t v207;
  char *v208;
  void *v209;
  int64_t v210;
  unint64_t v211;
  unint64_t v212;
  char *v213;
  uint64_t *v214;
  char *v215;
  char *v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t *v219;
  uint64_t *v220;
  uint64_t v221;
  void *v222;
  _QWORD *v223;
  uint64_t *v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  float v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  float v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v241;
  void **v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  __n128 v246;
  _BOOL4 v247;
  uint64_t v248;
  uint64_t v249;
  char v250;
  void **v251;
  int v252;
  int v253;
  _QWORD *v255;
  void **v256;
  uint64_t v257;
  _QWORD *v258;
  _QWORD *v259;
  int v260;
  int *v261;
  unint64_t v262;
  _DWORD *v263;
  int *v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t v268;
  char *v269;
  int *v270;
  int v271;
  uint64_t v272;
  int v273;
  _QWORD *v274;
  _QWORD *v275;
  _QWORD *v276;
  float v277;
  char *v278;
  int v279;
  int64_t v280;
  _QWORD *v281;
  uint64_t v282;
  int32x2_t *v283;
  int32x2_t *v284;
  uint64_t v286;
  _QWORD *v287;
  _QWORD *v288;
  float v289;
  _BOOL4 v290;
  uint64_t v291;
  uint64_t v292;
  int64_t v293;
  int BestAlignment;
  BOOL v295;
  unsigned __int8 *v296;
  int32x2_t v297;
  void *v298;
  void *v299;
  uint64_t v300;
  uint64_t v301;
  void *v302;
  void *v303;
  uint64_t v304;
  void *v305[2];
  __int128 v306;
  void **v307;
  void *v308;
  void *v309;
  _DWORD *v310;
  unint64_t v311;
  int v312;
  void *v313;
  _BYTE *v314;
  uint64_t v315;
  void *v316[2];
  __int128 v317;
  void **v318;
  void *v319;
  void *v320;
  uint64_t v321;
  _DWORD v322[2];
  void *v323;
  void *v324;
  uint64_t v325;
  void *v326;
  _BYTE *v327;
  uint64_t v328;
  _OWORD v329[2];
  int v330;
  void *v331;
  _BYTE *v332;
  uint64_t v333;
  char *v334;
  char *v335;
  unint64_t v336;
  void *v337[2];
  __int128 v338;
  int v339;
  void *v340;
  _BYTE *v341;
  uint64_t v342;
  std::vector<int> *v343;
  std::vector<int> *v344;
  std::vector<int> *v345;
  void *__src;
  void *v347;
  unint64_t v348;
  _BYTE __p[40];
  __int128 v350;

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"entered Write with #ActiveHyps: ", 32);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" at decoding-position: ", 23);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
  }
  v347 = 0;
  __src = 0;
  v348 = 0;
  v344 = 0;
  v343 = 0;
  v345 = 0;
  v341 = 0;
  v340 = 0;
  v342 = 0;
  std::priority_queue<float>::push((uint64_t)&v340, &kaldi::quasar::kMaxCost);
  if (*(float *)(a2 + 320) != 0.0)
  {
    v9 = *(_QWORD *)(a1 + 136);
    if (!*(_BYTE *)(v9 + 3922) || !*(_BYTE *)(v9 + 3923))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Decoder repetition detection requires an alignment model with shifted alignments!", 81);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
  }
  v290 = (*(_QWORD *)(a2 + 200) || *(_QWORD *)(a2 + 208)) && (*(_DWORD *)(a2 + 184) - 1) < 2;
  v291 = a2;
  if (a3 >= 1)
  {
    v296 = (unsigned __int8 *)(a1 + 5238);
    v10 = *(_DWORD *)(a2 + 188);
    v11 = *(int *)(a1 + 5836);
    v280 = v11 + a3;
    v284 = (int32x2_t *)(a1 + 4976);
    v282 = 0;
    v283 = (int32x2_t *)(a1 + 5024);
    v12 = (int32x2_t *)(a1 + 5072);
    v13 = 1.0;
    v14 = 0x4F0000004F000000;
    v277 = 2147500000.0;
    v15 = 0x4F0000004F000000;
    v279 = v10;
    v278 = (char *)(a1 + 5784);
    v281 = (_QWORD *)(a1 + 5808);
    while (1)
    {
      v16 = *(_QWORD *)(a1 + 5784);
      v17 = *(_QWORD *)(a1 + 5792);
      if (v16 == v17)
        goto LABEL_320;
      if ((v10 != 1) | v282 & 1)
      {
        if (v10 == 2)
        {
          if (*(float *)v340 < v277)
            goto LABEL_320;
        }
        else if (v10 || SHIDWORD(v282) >= *(_DWORD *)(a2 + 160))
        {
          goto LABEL_320;
        }
      }
      if (*(float *)(a2 + 320) != 0.0 && *(_BYTE *)(*(_QWORD *)v16 + 200))
        goto LABEL_320;
      v18 = v343;
      v19 = v344;
      if (v344 != v343)
      {
        do
        {
          end = v19[-2].__end_;
          if (end)
          {
            v19[-2].__end_cap_.__value_ = end;
            operator delete(end);
          }
          v19 = (std::vector<int> *)((char *)v19 - 56);
        }
        while (v19 != v18);
        v17 = *(_QWORD *)(a1 + 5792);
        v16 = *(_QWORD *)(a1 + 5784);
      }
      v344 = v18;
      *(_OWORD *)v337 = 0u;
      v338 = 0u;
      v339 = 1065353216;
      v286 = v11;
      if (v17 != v16)
      {
        v21 = 0;
        do
        {
          *(_DWORD *)__p = 0;
          *(_DWORD *)__p = **(_DWORD **)(v16 + 8 * v21);
          v307 = (void **)__p;
          v22 = std::__hash_table<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v337, (int *)__p, (uint64_t)&std::piecewise_construct, (_DWORD **)&v307);
          v23 = v22;
          v24 = (unint64_t *)v22[4];
          v25 = (uint64_t)(v22 + 5);
          v26 = v22[5];
          if ((unint64_t)v24 >= v26)
          {
            v28 = (unint64_t *)v22[3];
            v29 = v24 - v28;
            if ((unint64_t)(v29 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v30 = v26 - (_QWORD)v28;
            v31 = (uint64_t)(v26 - (_QWORD)v28) >> 2;
            if (v31 <= v29 + 1)
              v31 = v29 + 1;
            if (v30 >= 0x7FFFFFFFFFFFFFF8)
              v32 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v32 = v31;
            if (v32)
            {
              v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v25, v32);
              v28 = (unint64_t *)v23[3];
              v24 = (unint64_t *)v23[4];
            }
            else
            {
              v33 = 0;
            }
            v34 = (unint64_t *)&v33[8 * v29];
            *v34 = v21;
            v27 = v34 + 1;
            while (v24 != v28)
            {
              v35 = *--v24;
              *--v34 = v35;
            }
            v23[3] = v34;
            v23[4] = v27;
            v23[5] = &v33[8 * v32];
            if (v28)
              operator delete(v28);
          }
          else
          {
            *v24 = v21;
            v27 = v24 + 1;
          }
          v23[4] = v27;
          ++v21;
          v16 = *(_QWORD *)(a1 + 5784);
        }
        while (v21 < (*(_QWORD *)(a1 + 5792) - v16) >> 3);
        v36 = (_QWORD *)v338;
LABEL_45:
        v288 = v36;
        if (v36)
        {
          if (kaldi::g_kaldi_verbose_level >= 5)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"input_batch_idx: ", 17);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
          }
          kaldi::CuMatrix<float>::Resize(v284, (v288[4] - v288[3]) >> 3, 1, 0, 0);
          v37 = (_QWORD *)v288[3];
          v38 = (_QWORD *)v288[4];
          if (v37 != v38)
          {
            v39 = 0;
            do
            {
              if (kaldi::g_kaldi_verbose_level >= 5)
              {
                kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"hyp_idx: ", 9);
                std::ostream::operator<<();
                kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
              }
              v40 = *(_QWORD *)(*(_QWORD *)(a1 + 5784) + 8 * *v37);
              if (v11 >= 1 && *(_DWORD *)(v40 + 40) == *(_DWORD *)(a1 + 5180))
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Final word in hyp list", 22);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
              }
              v41 = *(_QWORD *)(v40 + 56);
              v42 = *(_QWORD *)(v40 + 64);
              v43 = v42 - v41;
              if (v42 != v41)
              {
                v44 = 0;
                v45 = v43 >> 2;
                if (v45 <= 1)
                  v45 = 1;
                v46 = *(_QWORD *)(a1 + 4984) + 4 * *(_DWORD *)(a1 + 5000) * (int)v39;
                do
                {
                  *(float *)(v46 + 4 * v44) = (float)*(int *)(v41 + 4 * v44);
                  ++v44;
                }
                while (v45 != v44);
              }
              kaldi::quasar::TorchEncoderDecoder::SetHistoryState(*(_QWORD *)(a1 + 136), (uint64_t *)(v40 + 8), v39, (v288[4] - v288[3]) >> 3);
              v39 = (v39 + 1);
              ++v37;
            }
            while (v37 != v38);
          }
          kaldi::quasar::TorchEncoderDecoder::Feedforward(*(_QWORD *)(a1 + 136), v284, v283, 0);
          v292 = *(unsigned int *)(a1 + 5040);
          kaldi::Matrix<float>::Resize(v12, (v288[4] - v288[3]) >> 3, v292, 0, 0);
          kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)v283, (int *)v12, 111);
          v47 = (_QWORD *)v288[3];
          v287 = (_QWORD *)v288[4];
          if (v47 == v287)
            goto LABEL_191;
          v48 = 0;
          while (1)
          {
            v49 = *(int **)(*(_QWORD *)(a1 + 5784) + 8 * *v47);
            kaldi::quasar::TorchEncoderDecoder::GetHistoryState(*(_QWORD *)(a1 + 136), (uint64_t *)v49 + 1, v48);
            ++*(_DWORD *)(a1 + 5216);
            v316[0] = 0;
            v316[1] = 0;
            *(_QWORD *)&v317 = 0;
            kaldi::quasar::TorchEncoderDecoder::GetCurrentAlignment(*(_QWORD *)(a1 + 136), v316, v48);
            v50 = (uint64_t *)(v49 + 52);
            v51 = *((_QWORD *)v49 + 27);
            if (v51 >= *((_QWORD *)v49 + 28))
            {
              v52 = std::vector<kaldi::Vector<float>>::__push_back_slow_path<kaldi::Vector<float> const&>(v50, (uint64_t)v316);
            }
            else
            {
              std::vector<kaldi::Vector<float>>::__construct_one_at_end[abi:ne180100]<kaldi::Vector<float> const&>((uint64_t)v50, (uint64_t)v316);
              v52 = v51 + 24;
            }
            *((_QWORD *)v49 + 27) = v52;
            v335 = 0;
            v334 = 0;
            v336 = 0;
            BestAlignment = kaldi::quasar::TorchEncoderDecoder::GetBestAlignment(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136), v48);
            v332 = 0;
            v331 = 0;
            v333 = 0;
            kaldi::quasar::TorchEncoderDecoder::GetAlignmentProbabilities(*(_QWORD *)(a1 + 136), (uint64_t)&v331, v48);
            if (kaldi::quasar::TorchEncoderDecoder::Reverse(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136)))
              BestAlignment = kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a1 + 4952) + 40 * *v49) + ~BestAlignment;
            if (*(float *)(a2 + 320) != 0.0)
            {
              v307 = (void **)(v49 + 10);
              v53 = (std::vector<unsigned int> *)std::__hash_table<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v49 + 20), v49 + 10, (uint64_t)&std::piecewise_construct, (_DWORD **)&v307);
              v54 = v53 + 1;
              v55 = (unint64_t)((char *)v53[1].__end_ - (char *)v53[1].__begin_) >> 2;
              if (BestAlignment + 1 > (int)v55)
                LODWORD(v55) = BestAlignment + 1;
              std::vector<int>::resize(v53 + 1, (int)v55);
              if ((int)v54->__begin_[BestAlignment] >= 1)
              {
                v307 = (void **)(v49 + 10);
                v56 = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v49 + 40), v49 + 10, (uint64_t)&std::piecewise_construct, (_DWORD **)&v307);
                ++*((_DWORD *)v56 + 5);
              }
              v307 = (void **)(v49 + 10);
              v57 = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v49 + 30), v49 + 10, (uint64_t)&std::piecewise_construct, (_DWORD **)&v307);
              ++*((_DWORD *)v57 + 5);
              ++v54->__begin_[BestAlignment];
            }
            if (*(_BYTE *)(a1 + 5673))
            {
              memset(&__p[8], 0, 32);
              *(_QWORD *)__p = &unk_1E5D34170;
              LOBYTE(v350) = 0;
              v58 = *(_QWORD *)(a1 + 5136);
              v59 = *(_QWORD *)(a1 + 5128);
              if (v58 >= *(_QWORD *)(a1 + 5144))
              {
                v60 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float> const&>((uint64_t *)(a1 + 5128), (uint64_t)__p);
              }
              else
              {
                kaldi::CuMatrix<float>::CuMatrix(*(_QWORD *)(a1 + 5136), __p, 111);
                v60 = v58 + 48;
                *(_QWORD *)(a1 + 5136) = v58 + 48;
              }
              *(_QWORD *)(a1 + 5136) = v60;
              v61 = kaldi::SubMatrix<float>::SubMatrix((uint64_t)v329, a1 + 5072, v48, 1, 0, *(_DWORD *)(a1 + 5080));
              kaldi::Matrix<float>::Matrix(&v307, v329, 111, v61);
              v62 = *(_QWORD *)(a1 + 5160);
              if (v62 >= *(_QWORD *)(a1 + 5168))
              {
                v63 = std::vector<kaldi::Matrix<float>>::__push_back_slow_path<kaldi::Matrix<float>>((uint64_t *)(a1 + 5152), (uint64_t)&v307);
              }
              else
              {
                kaldi::Matrix<float>::Matrix(*(_QWORD *)(a1 + 5160), &v307);
                v63 = v62 + 40;
                *(_QWORD *)(a1 + 5160) = v62 + 40;
              }
              v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - v59) >> 4);
              *(_QWORD *)(a1 + 5160) = v63;
              kaldi::Matrix<float>::~Matrix((uint64_t)&v307);
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)v329);
              kaldi::quasar::TorchEncoderDecoder::CopyDecoderHiddenState(*(_QWORD *)(a1 + 136), (int32x2_t *)(*(_QWORD *)(a1 + 5128) + 48 * (int)v64));
              kaldi::CuMatrix<float>::~CuMatrix((uint64_t)__p);
              BestAlignment = v64;
            }
            if (*(_DWORD *)(a2 + 184) != 2)
              break;
            v65 = *(_QWORD *)(a2 + 208);
            v66 = v49[9];
            v311 = 0;
            (*(void (**)(uint64_t, uint64_t, void ***))(*(_QWORD *)v65 + 136))(v65, v66, &v307);
            v67 = -1;
            while (1)
            {
              if (!v307)
              {
                if (v311 >= (unint64_t)v309)
                  goto LABEL_155;
LABEL_90:
                v68 = (*((_DWORD *)v308 + 4 * v311) - 1);
LABEL_91:
                v67 = *((_DWORD *)v308 + 4 * v311 + 3);
                goto LABEL_92;
              }
              if ((*((unsigned int (**)(void **))*v307 + 3))(v307))
                break;
              if (!v307)
                goto LABEL_90;
              v68 = (*(_DWORD *)(*((uint64_t (**)(void))*v307 + 4))() - 1);
              if (!v307)
                goto LABEL_91;
              v67 = *(_DWORD *)((*((uint64_t (**)(void **))*v307 + 4))(v307) + 12);
              if (v307)
              {
                v69 = (char *)(*((uint64_t (**)(void **))*v307 + 4))(v307);
                goto LABEL_93;
              }
LABEL_92:
              v69 = (char *)v308 + 16 * v311;
LABEL_93:
              v70 = *((_DWORD *)v69 + 2);
              VocabWordIdx = kaldi::quasar::TorchEncoderDecoder::GetVocabWordIdx(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136), v68);
              *(_DWORD *)__p = *(_DWORD *)(*(_QWORD *)(a1 + 5072)
                                         + 4 * *(_DWORD *)(a1 + 5088) * (int)v48
                                         + 4 * (int)v68);
              memset(&__p[8], 0, 24);
              *(_DWORD *)&__p[32] = VocabWordIdx;
              *(_DWORD *)&__p[36] = v67;
              LODWORD(v350) = v70;
              v72 = v335;
              if ((unint64_t)v335 >= v336)
              {
                v74 = (uint64_t *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement const&>((uint64_t *)&v334, (uint64_t)__p);
              }
              else
              {
                *(_QWORD *)v335 = *(_QWORD *)__p;
                *((_QWORD *)v72 + 2) = 0;
                *((_QWORD *)v72 + 3) = 0;
                *((_QWORD *)v72 + 1) = 0;
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)v72 + 1, *(const void **)&__p[8], *(uint64_t *)&__p[16], (uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)&__p[8]) >> 2);
                v73 = *(_QWORD *)&__p[32];
                *((_DWORD *)v72 + 10) = v350;
                *((_QWORD *)v72 + 4) = v73;
                v74 = (uint64_t *)(v72 + 48);
              }
              v335 = (char *)v74;
              if (*(_QWORD *)&__p[8])
              {
                *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
                operator delete(*(void **)&__p[8]);
              }
              if (v307)
                (*((void (**)(void **))*v307 + 5))(v307);
              else
                ++v311;
            }
            if (v307)
            {
              (*((void (**)(void))*v307 + 1))();
              goto LABEL_157;
            }
LABEL_155:
            if (v310)
              --*v310;
LABEL_157:
            *(_DWORD *)__p = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 208) + 32))(*(_QWORD *)(a2 + 208), v49[9]);
            LODWORD(v307) = 2139095040;
            if (*(float *)__p != INFINITY)
            {
              v104 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 208) + 32))(*(_QWORD *)(a2 + 208), v49[9]);
              SoftmaxEosId = kaldi::quasar::TorchEncoderDecoder::GetSoftmaxEosId(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
              v106 = *(_DWORD *)(a1 + 5180);
              *(_DWORD *)__p = *(_DWORD *)(*(_QWORD *)(a1 + 5072)
                                         + 4 * *(_DWORD *)(a1 + 5088) * (int)v48
                                         + 4 * SoftmaxEosId);
              memset(&__p[8], 0, 24);
              *(_DWORD *)&__p[32] = v106;
              *(_DWORD *)&__p[36] = v67;
              *(float *)&v350 = v104;
              v107 = v335;
              if ((unint64_t)v335 >= v336)
              {
                v109 = (uint64_t *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement const&>((uint64_t *)&v334, (uint64_t)__p);
              }
              else
              {
                *(_QWORD *)v335 = *(_QWORD *)__p;
                *((_QWORD *)v107 + 2) = 0;
                *((_QWORD *)v107 + 3) = 0;
                *((_QWORD *)v107 + 1) = 0;
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)v107 + 1, *(const void **)&__p[8], *(uint64_t *)&__p[16], (uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)&__p[8]) >> 2);
                v108 = *(_QWORD *)&__p[32];
                *((_DWORD *)v107 + 10) = v350;
                *((_QWORD *)v107 + 4) = v108;
                v109 = (uint64_t *)(v107 + 48);
              }
              v335 = (char *)v109;
              if (*(_QWORD *)&__p[8])
              {
                *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
                operator delete(*(void **)&__p[8]);
              }
            }
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>((uint64_t)v334, (uint64_t)v335, (uint64_t)&v307, 0xAAAAAAAAAAAAAAABLL * ((v335 - v334) >> 4));
LABEL_164:
            v110 = v335;
            v111 = v334;
            if (*(_BYTE *)(a1 + 5239))
            {
              a2 = v291;
            }
            else
            {
              v112 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v335 - v334) >> 4));
              if (v335 == v334)
                v113 = 0;
              else
                v113 = v112;
              std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *,false>((std::vector<int> *)v334, (uint64_t *)v335, (uint64_t)&v307, v113, 1);
              a2 = v291;
              std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::erase((uint64_t)&v334, (uint64_t)&v334[48 * *(int *)(v291 + 160)], (uint64_t)v335);
              v110 = v335;
              v111 = v334;
            }
            if (v110 == v111 && kaldi::g_kaldi_verbose_level >= -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Nothing left in heap", 20);
              kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            }
            if (*(_DWORD *)(a2 + 184) != 5)
            {
              v116 = (float *)v334;
              v117 = v335;
              goto LABEL_187;
            }
            v114 = *(_QWORD *)(a1 + 5840);
            v115 = *(int *)(a1 + 5836);
            v116 = (float *)v334;
            v117 = v335;
            if (v115 >= (*(_QWORD *)(a1 + 5848) - v114) >> 2)
            {
LABEL_187:
              while (v116 != (float *)v117)
              {
                v118 = *(float *)(a1 + 5764);
                v119 = *v296;
                v120 = *v116;
                v121 = logf(*v116);
                if (!v119)
                  v121 = v120;
                v122 = -(float)(v118 * v121);
                v123 = *(float *)(a2 + 180) * v116[10];
                v124 = *((_DWORD *)v116 + 8);
                *(float *)__p = v123 + (float)(v122 + (float)(*((float *)v49 + 11) + *((float *)v49 + 12)));
                *(float *)&__p[4] = v122;
                *(float *)&__p[8] = v123;
                *(_DWORD *)&__p[12] = BestAlignment;
                memset(&__p[16], 0, 24);
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[16], v331, (uint64_t)v332, (v332 - (_BYTE *)v331) >> 2);
                LODWORD(v350) = v124;
                *((float *)&v350 + 1) = v116[9];
                *((_QWORD *)&v350 + 1) = *v47;
                v125 = v344;
                if (v344 >= v345)
                {
                  v126 = (std::vector<int> *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement const&>((uint64_t *)&v343, (uint64_t)__p);
                }
                else
                {
                  *(_OWORD *)&v344->__begin_ = *(_OWORD *)__p;
                  v125[1].__begin_ = 0;
                  v125[1].__end_ = 0;
                  v125->__end_cap_.__value_ = 0;
                  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v125->__end_cap_.__value_, *(const void **)&__p[16], *(uint64_t *)&__p[24], (uint64_t)(*(_QWORD *)&__p[24] - *(_QWORD *)&__p[16]) >> 2);
                  *(_OWORD *)&v125[1].__end_cap_.__value_ = v350;
                  v126 = (std::vector<int> *)((char *)v125 + 56);
                }
                v344 = v126;
                if (*(_QWORD *)&__p[16])
                {
                  *(_QWORD *)&__p[24] = *(_QWORD *)&__p[16];
                  operator delete(*(void **)&__p[16]);
                }
                v116 += 12;
              }
            }
            else if (v335 != v334)
            {
              if (*((_DWORD *)v334 + 8) != *(_DWORD *)(v114 + 4 * v115))
                *(_QWORD *)(a1 + 5848) = v114;
              goto LABEL_187;
            }
            if (v331)
            {
              v332 = v331;
              operator delete(v331);
            }
            *(_QWORD *)__p = &v334;
            std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            kaldi::Vector<float>::Destroy((uint64_t)v316);
            v48 = (v48 + 1);
            if (++v47 == v287)
            {
LABEL_191:
              v36 = (_QWORD *)*v288;
              v12 = (int32x2_t *)(a1 + 5072);
              v11 = v286;
              goto LABEL_45;
            }
          }
          v75 = kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a1 + 4952) + 40 * *v49);
          if (!(_DWORD)v292)
            goto LABEL_164;
          v76 = 0;
          LODWORD(v77) = (int)(float)(*(float *)(a1 + 5200)
                                    * (float)(v75 - (*(_DWORD *)(a1 + 5204) + *(_DWORD *)(v291 + 236))));
          if ((int)v77 <= 1)
            v77 = 1;
          else
            v77 = v77;
          if (v286 >= v77)
            v78 = a4;
          else
            v78 = 0;
          while (1)
          {
            v79 = *(float *)(*(_QWORD *)(a1 + 5072) + 4 * (int)v48 * *(_DWORD *)(a1 + 5088) + 4 * v76);
            v80 = kaldi::quasar::TorchEncoderDecoder::GetVocabWordIdx(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136), v76);
            v81 = v80;
            if (v80 == *(_DWORD *)(a1 + 5180))
              v82 = v78;
            else
              v82 = 1;
            if ((v82 & 1) == 0)
            {
              if (!*v47)
              {
                v84 = *(float *)(a1 + 5764);
                v85 = *v296;
                v86 = logf(v79);
                if (!v85)
                  v86 = v79;
                *(float *)(a1 + 5760) = -(float)(v84 * v86);
                *(_DWORD *)(a1 + 5720) = v49[8];
              }
              if (kaldi::g_kaldi_verbose_level >= 5)
              {
                kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Skipping target eos symbol", 26);
                kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
              }
              goto LABEL_151;
            }
            if (v80 == *(_DWORD *)(a1 + 5184)
              && (kaldi::quasar::TorchEncoderDecoder::HasBpeModel(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136)) & 1) != 0)
            {
              goto LABEL_151;
            }
            if (v290)
            {
              if (v81 != *(_DWORD *)(a1 + 5180))
              {
                if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _BYTE *))(**(_QWORD **)(v291 + 200) + 32))(*(_QWORD *)(v291 + 200), v49[9], (v81 + 1), __p) & 1) == 0)
                {
                  v88 = *(_DWORD *)(a1 + 5184);
                  if (v88 < 0
                    || ((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _BYTE *))(**(_QWORD **)(v291 + 200) + 32))(*(_QWORD *)(v291 + 200), v49[9], (v88 + 1), __p) & 1) == 0)
                  {
                    goto LABEL_151;
                  }
                }
                v87 = *(_DWORD *)&__p[12];
                v83 = *(float *)&__p[8];
                goto LABEL_130;
              }
              *(_DWORD *)__p = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(v291 + 200) + 16))(*(_QWORD *)(v291 + 200), v49[9]);
              LODWORD(v307) = 2139095040;
              if (*(float *)__p == INFINITY)
                goto LABEL_151;
              v83 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(v291 + 200) + 16))(*(_QWORD *)(v291 + 200), v49[9]);
            }
            else
            {
              v83 = 0.0;
            }
            v87 = -1;
LABEL_130:
            if (*(_DWORD *)(v291 + 184) == 5)
            {
              v89 = *(_QWORD *)(a1 + 5840);
              v90 = *(int *)(a1 + 5836);
              if (v90 < (*(_QWORD *)(a1 + 5848) - v89) >> 2)
              {
                v91 = *(float *)(v291 + 180);
                v92 = (v13 - v91) * v79;
                if (*(_DWORD *)(v89 + 4 * v90) != v81)
                  v91 = -0.0;
                v79 = v91 + v92;
              }
            }
            if (*(_BYTE *)(a1 + 5239))
            {
              v93 = v335;
              v94 = 0xAAAAAAAAAAAAAAABLL * ((v335 - v334) >> 4);
              v95 = *(int *)(v291 + 160);
              if (v94 == v95 && v79 > *(float *)v334)
              {
                std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *>>((uint64_t)v334, (uint64_t)v335, (uint64_t)&v307, v94);
                v96 = v335;
                v97 = (void *)*((_QWORD *)v335 - 5);
                if (v97)
                {
                  *((_QWORD *)v335 - 4) = v97;
                  operator delete(v97);
                }
                v93 = v96 - 48;
                v335 = v93;
                v95 = *(int *)(v291 + 160);
                v94 = 0xAAAAAAAAAAAAAAABLL * ((v93 - v334) >> 4);
              }
              if (v94 >= v95)
                goto LABEL_151;
              *(float *)__p = v79;
              memset(&__p[8], 0, 24);
              *(_DWORD *)&__p[32] = v81;
              *(_DWORD *)&__p[36] = v87;
              *(float *)&v350 = v83;
              if ((unint64_t)v93 >= v336)
              {
                v99 = (uint64_t *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement const&>((uint64_t *)&v334, (uint64_t)__p);
              }
              else
              {
                *(_QWORD *)v93 = *(_QWORD *)__p;
                *((_QWORD *)v93 + 2) = 0;
                *((_QWORD *)v93 + 3) = 0;
                *((_QWORD *)v93 + 1) = 0;
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)v93 + 1, *(const void **)&__p[8], *(uint64_t *)&__p[16], (uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)&__p[8]) >> 2);
                v98 = *(_QWORD *)&__p[32];
                *((_DWORD *)v93 + 10) = v350;
                *((_QWORD *)v93 + 4) = v98;
                v99 = (uint64_t *)(v93 + 48);
              }
              v335 = (char *)v99;
              std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>((uint64_t)v334, (uint64_t)v99, (uint64_t)&v307, 0xAAAAAAAAAAAAAAABLL * (((char *)v99 - v334) >> 4));
              v103 = *(void **)&__p[8];
              if (!*(_QWORD *)&__p[8])
                goto LABEL_151;
LABEL_150:
              *(_QWORD *)&__p[16] = v103;
              operator delete(v103);
              goto LABEL_151;
            }
            *(float *)__p = v79;
            memset(&__p[8], 0, 24);
            *(_DWORD *)&__p[32] = v81;
            *(_DWORD *)&__p[36] = v87;
            *(float *)&v350 = v83;
            v100 = v335;
            if ((unint64_t)v335 >= v336)
            {
              v102 = (uint64_t *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>((uint64_t *)&v334, (uint64_t)__p);
              v103 = *(void **)&__p[8];
              v335 = (char *)v102;
              if (!*(_QWORD *)&__p[8])
                goto LABEL_151;
              goto LABEL_150;
            }
            *(_QWORD *)v335 = *(_QWORD *)__p;
            *((_QWORD *)v100 + 1) = 0;
            *((_QWORD *)v100 + 2) = 0;
            *((_QWORD *)v100 + 3) = 0;
            *(_OWORD *)(v100 + 8) = *(_OWORD *)&__p[8];
            *((_QWORD *)v100 + 3) = *(_QWORD *)&__p[24];
            memset(&__p[8], 0, 24);
            v101 = v350;
            *((_QWORD *)v100 + 4) = *(_QWORD *)&__p[32];
            *((_DWORD *)v100 + 10) = v101;
            v335 = v100 + 48;
LABEL_151:
            if (v292 == ++v76)
              goto LABEL_164;
          }
        }
      }
      if (v11 == v280 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Beam decoder hit maximum sequence length", 40);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
      }
      if (v344 == v343)
      {
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Pruned all hyps, nothing left to expand", 39);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        }
      }
      else
      {
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement *,false>(v343, (unint64_t)v344, (uint64_t)&v307, 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((char *)v344 - (char *)v343) >> 3)), 1);
        LODWORD(v14) = v343->__begin_;
        v127 = *(_DWORD *)(a1 + 5768);
        if (v127 == 2)
        {
          v129 = *(float *)(a1 + 5776);
          v130 = *(float *)(a1 + 5772);
          v131 = powf(v129 + (float)(unint64_t)(v11 + 1), v130);
          v128 = v131 / powf(v129 + 1.0, v130);
        }
        else
        {
          v128 = (float)(unint64_t)(v11 + 2);
          if (v127 != 1)
            v128 = 1.0;
        }
        v277 = *(float *)&v14 / v128;
      }
      memset(v329, 0, sizeof(v329));
      v330 = 1065353216;
      v132 = *(float *)(a2 + 164) < 2147500000.0 || *(float *)(a2 + 168) < 2147500000.0;
      v295 = v132;
      v133 = v11 + 1;
      if (*(int *)(a2 + 160) >= 1)
        break;
LABEL_307:
      if (kaldi::g_kaldi_verbose_level > 4)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"At output position ", 19);
        v218 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v218, (uint64_t)", # surviving hypotheses: ", 26);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
      }
      v219 = *(uint64_t **)(a1 + 5784);
      v220 = *(uint64_t **)(a1 + 5792);
      while (v219 != v220)
      {
        if (*v219)
        {
          v221 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Hyp::~Hyp(*v219);
          MEMORY[0x1AF44D190](v221, 0x10B0C406F3D429DLL);
        }
        ++v219;
      }
      v222 = __src;
      if (v278 == (char *)&__src)
      {
        v10 = v279;
      }
      else
      {
        std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(v278, (char *)__src, (uint64_t)v347, ((_BYTE *)v347 - (_BYTE *)__src) >> 3);
        v10 = v279;
        v222 = __src;
      }
      v347 = v222;
      ++*(_DWORD *)(a1 + 5836);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v329);
      std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)v337);
      v11 = v133;
      if (v133 >= v280)
        goto LABEL_320;
    }
    v134 = 0;
    v135 = (float)(unint64_t)v133;
    v289 = (float)(unint64_t)(v11 + 2);
    v293 = v11 + 1;
    while (1)
    {
      v136 = v343;
      if (0x6DB6DB6DB6DB6DB7 * (((char *)v344 - (char *)v343) >> 3) <= v134)
        goto LABEL_307;
      v137 = !v295;
      if (!v134)
        v137 = 1;
      if ((v137 & 1) == 0)
      {
        v138 = *((float *)&v343->__begin_ + 14 * v134);
        if ((float)(*(float *)&v14 + *(float *)(a2 + 164)) < v138
          || (float)(*(float *)&v14 * (float)(*(float *)(a2 + 168) + 1.0)) < v138)
        {
          goto LABEL_307;
        }
      }
      v139 = (char *)v343 + 56 * v134;
      v140 = *(int **)(*(_QWORD *)(a1 + 5784) + 8 * *((_QWORD *)v139 + 6));
      v141 = v139 + 40;
      if (*((_DWORD *)v139 + 10) != *(_DWORD *)(a1 + 5180))
      {
        v143 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 4960) - *(_QWORD *)(a1 + 4952)) >> 3);
        if (v143 > 1)
        {
          v145 = v140[8];
          v146 = __OFSUB__(v145, 1);
          v147 = (v145 - 1);
          if (((v147 & 0x80000000) != 0) != v146)
            v148 = 0;
          else
            v148 = v147 / v143;
          v316[0] = 0;
          v316[0] = (void *)(*(int *)v141 + (v148 << 32));
          v157 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v329, (unint64_t *)v316);
          v158 = *(_QWORD *)(a1 + 4960);
          v159 = *(_QWORD *)(a1 + 4952);
          if (v157)
          {
            v307 = v316;
            v160 = std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v329, (unint64_t *)v316, (uint64_t)&std::piecewise_construct, &v307);
            v161 = v158 - v159;
          }
          else
          {
            if (v158 == v159)
            {
              v164 = 0xCCCCCCCCCCCCCCCDLL * ((v158 - v159) >> 3);
              v165 = -1;
            }
            else
            {
              v162 = 0;
              do
              {
                v163 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 5712) + 200))(*(_QWORD *)(a1 + 5712));
                ++v162;
                v164 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 4960) - *(_QWORD *)(a1 + 4952)) >> 3);
              }
              while (v162 < v164);
              v165 = v163;
            }
            v192 = *(float *)v139;
            v307 = v316;
            v193 = (float *)std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v329, (unint64_t *)v316, (uint64_t)&std::piecewise_construct, &v307);
            v193[6] = v192;
            *((_DWORD *)v193 + 7) = (v165 - 1) / v164;
            v194 = *(_QWORD *)(a1 + 4960);
            v195 = *(_QWORD *)(a1 + 4952);
            v307 = v316;
            v160 = std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v329, (unint64_t *)v316, (uint64_t)&std::piecewise_construct, &v307);
            v161 = v194 - v195;
          }
          v144 = *v140 - 858993459 * (v161 >> 3) * *((_DWORD *)v160 + 7) + 1;
          if (kaldi::g_kaldi_verbose_level >= 5)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"using lattice state:", 20);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
          }
        }
        else
        {
          v144 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 5712) + 200))(*(_QWORD *)(a1 + 5712));
        }
        v314 = 0;
        v315 = 0;
        v313 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v313, *((const void **)&v136->__end_cap_.__value_ + 7 * v134), *((_QWORD *)&v136[1].__begin_ + 7 * v134), (uint64_t)(*((_QWORD *)&v136[1].__begin_ + 7 * v134) - *((_QWORD *)&v136->__end_cap_.__value_ + 7 * v134)) >> 2);
        *(_OWORD *)v316 = 0u;
        v317 = 0u;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v316[1], v313, (uint64_t)v314, (v314 - (_BYTE *)v313) >> 2);
        if (v313)
        {
          v314 = v313;
          operator delete(v313);
        }
        v196 = (char *)v136 + 56 * v134;
        v198 = *(int32x2_t *)(v196 + 4);
        v197 = (float *)(v196 + 4);
        v316[0] = (void *)vrev64_s32(v198);
        if (*((_DWORD *)&v136->__end_ + 14 * v134 + 1) >= (signed int)(kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a1 + 4952) + 40 * *v140)
                                                                      + *(unsigned __int8 *)(*(_QWORD *)(a1 + 136)
                                                                                           + 3918)))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Adding invalid arc ", 19);
          v274 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v274, (uint64_t)" ", 1);
          v275 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v275, (uint64_t)" ", 1);
          v276 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v276, (uint64_t)" ", 1);
          kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a1 + 4952) + 40 * *v140);
          std::ostream::operator<<();
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        v199 = *(_DWORD *)v141 + 1;
        LODWORD(v307) = *((_DWORD *)&v136->__end_ + 14 * v134 + 1);
        HIDWORD(v307) = v199;
        v308 = v316[0];
        v310 = 0;
        v311 = 0;
        v309 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v309, v316[1], v317, (uint64_t)(v317 - (unint64_t)v316[1]) >> 2);
        v312 = v144;
        (*(void (**)(_QWORD, _QWORD, void ***))(**(_QWORD **)(a1 + 5712) + 208))(*(_QWORD *)(a1 + 5712), v140[8], &v307);
        std::vector<std::pair<int,int>>::resize((uint64_t)v281, v144 + 1);
        v200 = *(_DWORD *)v141;
        v201 = (_DWORD *)(*v281 + 8 * v144);
        *v201 = v140[8];
        v201[1] = v200;
        if (*(float *)(v291 + 320) == 0.0
          || !std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)v140 + 20, (int *)v141))
        {
          v205 = 0;
        }
        else
        {
          v334 = v141;
          v202 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v140 + 40), (int *)v141, (uint64_t)&std::piecewise_construct, (_DWORD **)&v334)+ 5);
          v334 = v141;
          v203 = (float)v202
               / (float)*((int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v140 + 30), (int *)v141, (uint64_t)&std::piecewise_construct, (_DWORD **)&v334)+ 5);
          v204 = *(float *)(v291 + 316);
          v205 = v203 > v204;
          if (v203 > v204 && kaldi::g_kaldi_verbose_level >= 1)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Repeating token in beam: ", 25);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
            v205 = 1;
          }
        }
        v207 = operator new();
        kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Hyp::Hyp(v207, v144, *((_DWORD *)&v136[1].__end_cap_.__value_ + 14 * v134 + 1), *(_DWORD *)v141, v205, (uint64_t)v140, *v197, v197[1]);
        v208 = (char *)v347;
        a2 = v291;
        v133 = v293;
        v12 = (int32x2_t *)(a1 + 5072);
        if ((unint64_t)v347 >= v348)
        {
          v210 = ((_BYTE *)v347 - (_BYTE *)__src) >> 3;
          if ((unint64_t)(v210 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v211 = (uint64_t)(v348 - (_QWORD)__src) >> 2;
          if (v211 <= v210 + 1)
            v211 = v210 + 1;
          if (v348 - (unint64_t)__src >= 0x7FFFFFFFFFFFFFF8)
            v212 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v212 = v211;
          if (v212)
          {
            v213 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v348, v212);
            a2 = v291;
            v133 = v293;
            v12 = (int32x2_t *)(a1 + 5072);
          }
          else
          {
            v213 = 0;
          }
          v214 = (uint64_t *)&v213[8 * v210];
          *v214 = v207;
          v209 = v214 + 1;
          v215 = (char *)v347;
          v216 = (char *)__src;
          if (v347 != __src)
          {
            do
            {
              v217 = *((_QWORD *)v215 - 1);
              v215 -= 8;
              *--v214 = v217;
            }
            while (v215 != v216);
            v215 = (char *)__src;
          }
          __src = v214;
          v347 = v209;
          v348 = (unint64_t)&v213[8 * v212];
          if (v215)
            operator delete(v215);
        }
        else
        {
          *(_QWORD *)v347 = v207;
          v209 = v208 + 8;
        }
        v347 = v209;
        if (v309)
        {
          v310 = v309;
          operator delete(v309);
        }
        if (v316[1])
        {
          *(void **)&v317 = v316[1];
          operator delete(v316[1]);
        }
        goto LABEL_306;
      }
      LODWORD(v142) = (int)(float)(*(float *)(a1 + 5200)
                                 * (float)(int)(kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a1 + 4952) + 40 * *v140)
                                              - (*(_DWORD *)(a1 + 5204)
                                               + *(_DWORD *)(a2 + 236))));
      v142 = (int)v142 <= 1 ? 1 : v142;
      if (v286 >= v142)
        break;
      *(int32x2_t *)(a1 + 5728) = vrev64_s32((int32x2_t)vadd_f32(*(float32x2_t *)(v140 + 11), *(float32x2_t *)((char *)&v136->__begin_ + 56 * v134 + 4)));
      *(_DWORD *)(a1 + 5720) = v140[8];
      *(_DWORD *)(a1 + 5760) = *(_DWORD *)v139;
      v12 = (int32x2_t *)(a1 + 5072);
LABEL_306:
      if ((uint64_t)++v134 >= *(int *)(a2 + 160))
        goto LABEL_307;
    }
    v149 = v140[8];
    v308 = 0;
    v309 = 0;
    v310 = 0;
    if (*(_BYTE *)(a1 + 5704))
    {
      v328 = 0;
      v326 = 0;
      v327 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v326, *((const void **)&v136->__end_cap_.__value_ + 7 * v134), *((_QWORD *)&v136[1].__begin_ + 7 * v134), (uint64_t)(*((_QWORD *)&v136[1].__begin_ + 7 * v134) - *((_QWORD *)&v136->__end_cap_.__value_ + 7 * v134)) >> 2);
      memset(__p, 0, 32);
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[8], v326, (uint64_t)v327, (v327 - (_BYTE *)v326) >> 2);
      v307 = *(void ***)__p;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v308, *(char **)&__p[8], *(uint64_t *)&__p[16], (uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)&__p[8]) >> 2);
      if (*(_QWORD *)&__p[8])
      {
        *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
        operator delete(*(void **)&__p[8]);
      }
      if (v326)
      {
        v327 = v326;
        operator delete(v326);
      }
      v149 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 5712) + 200))(*(_QWORD *)(a1 + 5712));
      v150 = *(_DWORD *)v141 + 1;
      *(_DWORD *)__p = *((_DWORD *)&v136->__end_ + 14 * v134 + 1);
      *(_DWORD *)&__p[4] = v150;
      *(_QWORD *)&__p[8] = v307;
      memset(&__p[16], 0, 24);
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[16], v308, (uint64_t)v309, ((_BYTE *)v309 - (_BYTE *)v308) >> 2);
      LODWORD(v350) = v149;
      (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)(a1 + 5712) + 208))(*(_QWORD *)(a1 + 5712), v140[8], __p);
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v308, 0, 0, 0);
      if (*(_QWORD *)&__p[16])
      {
        *(_QWORD *)&__p[24] = *(_QWORD *)&__p[16];
        operator delete(*(void **)&__p[16]);
      }
    }
    v151 = (char *)v136 + 56 * v134;
    v152 = *((_DWORD *)v151 + 1);
    v153 = *((_DWORD *)v151 + 2);
    v307 = (void **)__PAIR64__(v152, v153);
    v154 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 4960) - *(_QWORD *)(a1 + 4952)) >> 3);
    if (v154 > 1)
    {
      v156 = ((int)v149 - 1) / v154;
      v334 = 0;
      v334 = (char *)(*(int *)v141 + (v156 << 32));
      v12 = (int32x2_t *)(a1 + 5072);
      if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v329, (unint64_t *)&v334))
      {
        if (kaldi::g_kaldi_verbose_level >= 5)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"dropping worse identical hyp; score-diff: ",
            42);
          v316[0] = &v334;
          std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v329, (unint64_t *)&v334, (uint64_t)&std::piecewise_construct, (_QWORD **)v316);
          std::ostream::operator<<();
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
        }
      }
      else
      {
        v166 = *(_QWORD *)(a1 + 5712);
        v318 = v307;
        v320 = 0;
        v321 = 0;
        v319 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v319, v308, (uint64_t)v309, ((_BYTE *)v309 - (_BYTE *)v308) >> 2);
        (*(void (**)(uint64_t, uint64_t, void ***))(*(_QWORD *)v166 + 184))(v166, v149, &v318);
        if (v319)
        {
          v320 = v319;
          operator delete(v319);
        }
        v167 = *(_DWORD *)v139;
        v316[0] = &v334;
        v168 = std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v329, (unint64_t *)&v334, (uint64_t)&std::piecewise_construct, (_QWORD **)v316);
        *((_DWORD *)v168 + 6) = v167;
        *((_DWORD *)v168 + 7) = v156;
      }
    }
    else
    {
      v155 = *(_QWORD *)(a1 + 5712);
      v322[0] = v153;
      v322[1] = v152;
      v324 = 0;
      v325 = 0;
      v323 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v323, v308, (uint64_t)v309, ((_BYTE *)v309 - (_BYTE *)v308) >> 2);
      (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v155 + 184))(v155, v149, v322);
      v12 = (int32x2_t *)(a1 + 5072);
      if (v323)
      {
        v324 = v323;
        operator delete(v323);
      }
    }
    v169 = *(float *)v139;
    if (*(float *)v139 <= *(float *)&v15)
    {
      *(_DWORD *)(a1 + 5832) = v149;
      *(float *)&v15 = v169;
    }
    v170 = *(_DWORD *)(a1 + 5768);
    if (v170 == 2)
    {
      v172 = *(float *)(a1 + 5776);
      v173 = *(float *)(a1 + 5772);
      v174 = v14;
      v175 = v15;
      v176 = v135;
      v177 = powf(v172 + v135, v173);
      v171 = v177 / powf(v172 + 1.0, v173);
      v135 = v176;
      v15 = v175;
      v14 = v174;
      v13 = 1.0;
      v133 = v293;
    }
    else
    {
      v171 = 1.0;
      v133 = v293;
      if (v170 == 1)
        v171 = v289;
    }
    *(float *)__p = v169 / v171;
    std::priority_queue<float>::push((uint64_t)&v340, __p);
    v178 = v341;
    v179 = v340;
    v180 = (v341 - (_BYTE *)v340) >> 2;
    if (v180 <= (unint64_t)*(int *)(a2 + 192))
    {
LABEL_268:
      if (v308)
      {
        v309 = v308;
        operator delete(v308);
      }
      LOBYTE(v282) = (v134 == 0) | v282;
      ++HIDWORD(v282);
      goto LABEL_306;
    }
    if (v341 - (_BYTE *)v340 >= 5)
    {
      v181 = 0;
      v182 = *(float *)v340;
      v183 = (float *)v340;
      do
      {
        v184 = v183;
        v183 += v181 + 1;
        v185 = 2 * v181;
        v181 = (2 * v181) | 1;
        v186 = v185 + 2;
        if (v186 < v180 && *v183 < v183[1])
        {
          ++v183;
          v181 = v186;
        }
        *v184 = *v183;
      }
      while (v181 <= (uint64_t)((unint64_t)(v180 - 2) >> 1));
      v187 = (float *)(v178 - 4);
      if (v183 != (float *)(v178 - 4))
      {
        *v183 = *v187;
        *v187 = v182;
        v188 = (char *)v183 - v179 + 4;
        if (v188 < 5)
          goto LABEL_267;
        v189 = (((unint64_t)v188 >> 2) - 2) >> 1;
        v190 = (float *)&v179[4 * v189];
        v191 = *v190;
        v182 = *v183;
        if (*v190 >= *v183)
          goto LABEL_267;
        do
        {
          *v183 = v191;
          v183 = v190;
          if (!v189)
            break;
          v189 = (v189 - 1) >> 1;
          v190 = (float *)&v179[4 * v189];
          v191 = *v190;
        }
        while (*v190 < v182);
      }
      *v183 = v182;
    }
LABEL_267:
    v341 = v178 - 4;
    goto LABEL_268;
  }
  HIDWORD(v282) = 0;
  LODWORD(v15) = 1325400064;
LABEL_320:
  if (!a4)
    goto LABEL_360;
  if (!HIDWORD(v282) && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"No hyps finished, setting ", 26);
    v223 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)" partial hyps to final", 22);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
  }
  v224 = *(uint64_t **)(a1 + 5784);
  v225 = *(uint64_t **)(a1 + 5792);
  if (v224 != v225)
  {
    while (1)
    {
      if (HIDWORD(v282))
      {
        v226 = *v224;
        if (!*v224)
          goto LABEL_344;
      }
      else
      {
        v227 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 5712) + 200))(*(_QWORD *)(a1 + 5712));
        v228 = *v224;
        if (*(_BYTE *)(*v224 + 200))
        {
          v229 = *(float *)(a2 + 320);
          if (v229 == 0.0)
            v230 = -3;
          else
            v230 = -4;
          if (v229 != 0.0 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Repetitions detected, beam search aborted.", 42);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
            v228 = *v224;
          }
        }
        else
        {
          v230 = -3;
        }
        v231 = *(_QWORD *)(a1 + 5712);
        v232 = *(unsigned int *)(v228 + 32);
        *(_DWORD *)__p = v230;
        memset(&__p[4], 0, 36);
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[16], 0, 0, 0);
        LODWORD(v350) = v227;
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v231 + 208))(v231, v232, __p);
        a2 = v291;
        if (*(_QWORD *)&__p[16])
        {
          *(_QWORD *)&__p[24] = *(_QWORD *)&__p[16];
          operator delete(*(void **)&__p[16]);
        }
        v233 = *(_QWORD *)(a1 + 5712);
        *(_OWORD *)v305 = 0u;
        v306 = 0u;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v305[1], 0, 0, 0);
        (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v233 + 184))(v233, v227, v305);
        if (v305[1])
        {
          *(void **)&v306 = v305[1];
          operator delete(v305[1]);
        }
        v226 = *v224;
        v234 = *(float *)(*v224 + 48);
        if ((float)(*(float *)(*v224 + 44) + v234) < *(float *)&v15)
          *(float *)&v15 = *(float *)(*v224 + 44) + v234;
        ++*(_DWORD *)(a1 + 5212);
      }
      v235 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Hyp::~Hyp(v226);
      MEMORY[0x1AF44D190](v235, 0x10B0C406F3D429DLL);
LABEL_344:
      if (++v224 == v225)
      {
        v224 = *(uint64_t **)(a1 + 5784);
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 5792) = v224;
  *(_DWORD *)(a1 + 5836) = 0;
  if (!HIDWORD(v282) && *(_DWORD *)(a1 + 5720) != -1)
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Setting longest vetoted translation as best ", 44);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    }
    v236 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 5712) + 200))(*(_QWORD *)(a1 + 5712));
    v237 = *(_QWORD *)(a1 + 5712);
    v238 = *(unsigned int *)(a1 + 5720);
    memset(&__p[4], 0, 36);
    *(_DWORD *)__p = -2;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[16], 0, 0, 0);
    LODWORD(v350) = v236;
    (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v237 + 208))(v237, v238, __p);
    if (*(_QWORD *)&__p[16])
    {
      *(_QWORD *)&__p[24] = *(_QWORD *)&__p[16];
      operator delete(*(void **)&__p[16]);
    }
    v239 = *(_QWORD *)(a1 + 5712);
    v301 = *(_QWORD *)(a1 + 5728);
    v303 = 0;
    v304 = 0;
    v302 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v302, *(const void **)(a1 + 5736), *(_QWORD *)(a1 + 5744), (uint64_t)(*(_QWORD *)(a1 + 5744) - *(_QWORD *)(a1 + 5736)) >> 2);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v239 + 184))(v239, v236, &v301);
    if (v302)
    {
      v303 = v302;
      operator delete(v302);
    }
    LODWORD(v15) = *(_DWORD *)(a1 + 5760);
    ++*(_DWORD *)(a1 + 5208);
  }
  kaldi::quasar::TorchEncoderDecoder::Finish(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136), v8);
  if (kaldi::g_kaldi_verbose_level >= 5)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"# of cached states ", 19);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
  }
  if (*(_DWORD *)(a2 + 184) == 5)
  {
    *(_QWORD *)(a1 + 5848) = *(_QWORD *)(a1 + 5840);
    if (*(float *)(a2 + 180) > 0.0 && !*(_BYTE *)(a2 + 306))
    {
      fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst(v329);
      v241 = *(_QWORD *)(a1 + 5712);
      v297 = vdup_n_s32(0x7F800000u);
      v299 = 0;
      v300 = 0;
      v298 = 0;
      fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(v241, (uint64_t)v329, 1, 0, 0, (uint64_t *)&v297, -1, 0);
      v242 = (void **)(a1 + 5840);
      if (v298)
      {
        v299 = v298;
        operator delete(v298);
      }
      v243 = *((_QWORD *)&v329[0] + 1);
      v244 = *(_DWORD *)(*((_QWORD *)&v329[0] + 1) + 88);
      while (1)
      {
        v245 = *(_QWORD *)(*(_QWORD *)(v243 + 64) + 8 * v244);
        *(_QWORD *)__p = *(_QWORD *)v245;
        memset(&__p[8], 0, 24);
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[8], *(const void **)(v245 + 8), *(_QWORD *)(v245 + 16), (uint64_t)(*(_QWORD *)(v245 + 16) - *(_QWORD *)(v245 + 8)) >> 2);
        LODWORD(v337[0]) = *(_DWORD *)&__p[4];
        LODWORD(v307) = *(_DWORD *)__p;
        LODWORD(v316[0]) = 2139095040;
        LODWORD(v334) = 2139095040;
        v246.n128_u32[0] = *(_DWORD *)__p;
        if (*(float *)__p == INFINITY)
        {
          v246.n128_u32[0] = (unsigned __int32)v337[0];
          v247 = *(float *)v337 == *(float *)&v334;
        }
        else
        {
          v247 = 0;
        }
        if (*(_QWORD *)&__p[8])
        {
          *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
          operator delete(*(void **)&__p[8]);
        }
        if (!v247)
        {
          *(_QWORD *)&v329[0] = &unk_1E5D25A80;
          v272 = *((_QWORD *)&v329[0] + 1);
          if (*((_QWORD *)&v329[0] + 1))
          {
            v273 = *(_DWORD *)(*((_QWORD *)&v329[0] + 1) + 56) - 1;
            *(_DWORD *)(*((_QWORD *)&v329[0] + 1) + 56) = v273;
            if (!v273)
              (*(void (**)(uint64_t, __n128))(*(_QWORD *)v272 + 8))(v272, v246);
          }
          goto LABEL_360;
        }
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v329[0] + 1) + 64) + 8 * v244) + 56) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v329[0] + 1) + 64) + 8 * v244) + 48))
          v248 = 0;
        else
          v248 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v329[0] + 1) + 64) + 8 * v244) + 48);
        v307 = *(void ***)v248;
        v308 = *(void **)(v248 + 8);
        v310 = 0;
        v311 = 0;
        v309 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v309, *(const void **)(v248 + 16), *(_QWORD *)(v248 + 24), (uint64_t)(*(_QWORD *)(v248 + 24) - *(_QWORD *)(v248 + 16)) >> 2);
        v244 = *(_DWORD *)(v248 + 40);
        v312 = v244;
        if ((v307 & 0x80000000) != 0)
          LODWORD(v307) = 0;
        if (HIDWORD(v307))
          break;
LABEL_417:
        if (v309)
        {
          v310 = v309;
          operator delete(v309);
        }
        v243 = *((_QWORD *)&v329[0] + 1);
      }
      v249 = kaldi::quasar::TorchEncoderDecoder::OutputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
      (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v249 + 88))(v337, v249, SHIDWORD(v307));
      v250 = BYTE7(v338);
      if (SBYTE7(v338) < 0)
      {
        if (v337[1] != (void *)3)
          goto LABEL_390;
        v251 = (void **)v337[0];
      }
      else
      {
        if (SBYTE7(v338) != 3)
          goto LABEL_390;
        v251 = v337;
      }
      v252 = *(unsigned __int16 *)v251;
      v253 = *((unsigned __int8 *)v251 + 2);
      if (v252 == 38626 && v253 == 129)
      {
LABEL_415:
        v244 = v312;
        if (v250 < 0)
          operator delete(v337[0]);
        goto LABEL_417;
      }
LABEL_390:
      if (kaldi::g_kaldi_verbose_level >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 3);
        v255 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"For 'partial_bias' lm-mode, storing token: ", 43);
        if ((SBYTE7(v338) & 0x80u) == 0)
          v256 = v337;
        else
          v256 = (void **)v337[0];
        if ((SBYTE7(v338) & 0x80u) == 0)
          v257 = BYTE7(v338);
        else
          v257 = (uint64_t)v337[1];
        v258 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v255, (uint64_t)v256, v257);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v258, (uint64_t)" (", 2);
        v259 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v259, (uint64_t)")", 1);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
      }
      v260 = HIDWORD(v307) - 1;
      v261 = *(int **)(a1 + 5848);
      v262 = *(_QWORD *)(a1 + 5856);
      if ((unint64_t)v261 >= v262)
      {
        v264 = (int *)*v242;
        v265 = ((char *)v261 - (_BYTE *)*v242) >> 2;
        v266 = v265 + 1;
        if ((unint64_t)(v265 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v267 = v262 - (_QWORD)v264;
        if (v267 >> 1 > v266)
          v266 = v267 >> 1;
        if ((unint64_t)v267 >= 0x7FFFFFFFFFFFFFFCLL)
          v268 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v268 = v266;
        if (v268)
        {
          v269 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 5856, v268);
          v261 = *(int **)(a1 + 5848);
          v264 = *(int **)(a1 + 5840);
        }
        else
        {
          v269 = 0;
        }
        v270 = (int *)&v269[4 * v265];
        *v270 = v260;
        v263 = v270 + 1;
        while (v261 != v264)
        {
          v271 = *--v261;
          *--v270 = v271;
        }
        *(_QWORD *)(a1 + 5840) = v270;
        *(_QWORD *)(a1 + 5848) = v263;
        *(_QWORD *)(a1 + 5856) = &v269[4 * v268];
        if (v264)
          operator delete(v264);
      }
      else
      {
        *v261 = v260;
        v263 = v261 + 1;
      }
      *(_QWORD *)(a1 + 5848) = v263;
      v250 = BYTE7(v338);
      goto LABEL_415;
    }
  }
LABEL_360:
  if (v340)
  {
    v341 = v340;
    operator delete(v340);
  }
  *(_QWORD *)__p = &v343;
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (__src)
  {
    v347 = __src;
    operator delete(__src);
  }
  return *(float *)&v15;
}

void sub_1ADF39754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  void *v62;
  void *v63;
  void *v64;

  kaldi::Matrix<float>::~Matrix((uint64_t)&a52);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x220]);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x300]);
  v62 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v62;
    operator delete(v62);
  }
  STACK[0x300] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  kaldi::Vector<float>::Destroy((uint64_t)&a61);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&STACK[0x280]);
  v63 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v63;
    operator delete(v63);
  }
  STACK[0x300] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  v64 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v64;
    operator delete(v64);
  }
  _Unwind_Resume(a1);
}

void sub_1ADF397FC()
{
  JUMPOUT(0x1ADF398F4);
}

void sub_1ADF39804()
{
  JUMPOUT(0x1ADF3990CLL);
}

void sub_1ADF39838()
{
  JUMPOUT(0x1ADF39904);
}

void sub_1ADF39840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  void *v62;
  void *v63;
  void *v64;

  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&STACK[0x300]);
  v62 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v62;
    operator delete(v62);
  }
  STACK[0x300] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  kaldi::Vector<float>::Destroy((uint64_t)&a61);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&STACK[0x280]);
  v63 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v63;
    operator delete(v63);
  }
  STACK[0x300] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  v64 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v64;
    operator delete(v64);
  }
  _Unwind_Resume(a1);
}

void sub_1ADF39858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,_DWORD *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  void *v62;
  void *v63;
  void *v64;
  void *v65;

  v62 = (void *)STACK[0x308];
  if (STACK[0x308])
  {
    STACK[0x310] = (unint64_t)v62;
    operator delete(v62);
  }
  if (a52)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a52 + 8))(a52);
  }
  else if (a55)
  {
    --*a55;
  }
  v63 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v63;
    operator delete(v63);
  }
  STACK[0x300] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  kaldi::Vector<float>::Destroy((uint64_t)&a61);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&STACK[0x280]);
  v64 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v64;
    operator delete(v64);
  }
  STACK[0x300] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  v65 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v65;
    operator delete(v65);
  }
  _Unwind_Resume(a1);
}

void sub_1ADF3987C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  void *v62;
  void *v63;
  void *v64;

  if (STACK[0x310])
  {
    STACK[0x318] = STACK[0x310];
    JUMPOUT(0x1ADF39898);
  }
  v62 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v62;
    operator delete(v62);
  }
  STACK[0x300] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x300]);
  kaldi::Vector<float>::Destroy(&a61);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table(&STACK[0x280]);
  v63 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v63;
    operator delete(v63);
  }
  STACK[0x300] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x300]);
  v64 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v64;
    operator delete(v64);
  }
  _Unwind_Resume(a1);
}

void sub_1ADF398AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  void *v62;
  void *v63;
  void *v64;

  v62 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v62;
    operator delete(v62);
  }
  STACK[0x300] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  kaldi::Vector<float>::Destroy((uint64_t)&a61);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&STACK[0x280]);
  v63 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v63;
    operator delete(v63);
  }
  STACK[0x300] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  v64 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v64;
    operator delete(v64);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::PruneCurrentHyps(uint64_t a1, int a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 5792);
  v5 = *(_QWORD *)(a1 + 5784);
  v6 = (v4 - v5) >> 3;
  if (v6 > a2)
  {
    v7 = a2;
    do
    {
      v8 = *(_QWORD *)(v5 + 8 * v7);
      if (v8)
      {
        v9 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Hyp::~Hyp(v8);
        MEMORY[0x1AF44D190](v9, 0x10B0C406F3D429DLL);
        v4 = *(_QWORD *)(a1 + 5792);
        v5 = *(_QWORD *)(a1 + 5784);
      }
      ++v7;
    }
    while (v7 < (v4 - v5) >> 3);
    v6 = (v4 - v5) >> 3;
  }
  if (v6 > v3)
    std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize(a1 + 5784, v3);
}

uint64_t kaldi::quasar::InputHammer::PassSpecifiedTags(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  const std::string::value_type *v17;
  uint64_t v18;
  const std::string::value_type *v19;
  int v20;
  std::string *v21;
  __int128 *v22;
  __int128 v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::string *v28;
  unsigned int v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  int v44;
  const void *v45;
  uint64_t v46;
  int v47;
  void *__p;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::string *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void **p_p;

  v8 = a1 + 40;
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 40), (unsigned __int8 *)a4))
  {
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, " ");
    kaldi::SplitStringOnString(a2, (char *)&__p, &v55);
    if (SHIBYTE(v51) < 0)
      operator delete(__p);
    if (*(char *)(a3 + 23) < 0)
    {
      **(_BYTE **)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 23) = 0;
    }
    p_p = (void **)a4;
    v13 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,quasar::ContextualData::QueryConfig>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a4, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
    v14 = v55;
    v15 = v56;
    if (v55 != v56)
    {
      v16 = v13 + 40;
      while (1)
      {
        if (*(char *)(v14 + 23) < 0)
        {
          v17 = *(const std::string::value_type **)v14;
          v18 = *(_QWORD *)(v14 + 8);
        }
        else
        {
          v17 = (const std::string::value_type *)v14;
          v18 = *(unsigned __int8 *)(v14 + 23);
        }
        v19 = v17 - 1;
        do
        {
          if (!v18)
            goto LABEL_30;
          v20 = v19[v18--];
        }
        while (v20 != 92);
        if (v18 != -1)
          break;
LABEL_30:
        v25 = v53;
        if ((unint64_t)v53 >= v54)
        {
          v27 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v52, (__int128 *)v14);
        }
        else
        {
          if ((*(_BYTE *)(v14 + 23) & 0x80) != 0)
          {
            std::string::__init_copy_ctor_external(v53, *(const std::string::value_type **)v14, *(_QWORD *)(v14 + 8));
          }
          else
          {
            v26 = *(_OWORD *)v14;
            v53->__r_.__value_.__r.__words[2] = *(_QWORD *)(v14 + 16);
            *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v26;
          }
          v27 = v25 + 1;
        }
        v53 = v27;
LABEL_51:
        v14 += 24;
        if (v14 == v15)
          goto LABEL_52;
      }
      __p = 0;
      v50 = 0;
      v51 = 0;
      kaldi::SplitStringToVector((const std::string *)v14, "\\", 0, (uint64_t)&__p);
      if (v50 - (_QWORD)__p == 48)
      {
        if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v16, (unsigned __int8 *)__p + 24))
        {
          v21 = v53;
          v22 = (__int128 *)v14;
          if ((unint64_t)v53 < v54)
          {
            if (*(char *)(v14 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v53, *(const std::string::value_type **)v14, *(_QWORD *)(v14 + 8));
              goto LABEL_48;
            }
            v23 = *(_OWORD *)v14;
            v24 = *(_QWORD *)(v14 + 16);
LABEL_44:
            v21->__r_.__value_.__r.__words[2] = v24;
            *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v23;
LABEL_48:
            v28 = v21 + 1;
            goto LABEL_49;
          }
          goto LABEL_45;
        }
        v22 = (__int128 *)__p;
        if ((*((char *)__p + 23) & 0x80000000) == 0)
        {
          if (!*((_BYTE *)__p + 23))
            goto LABEL_50;
LABEL_41:
          v21 = v53;
          if ((unint64_t)v53 < v54)
          {
            if ((*((_BYTE *)__p + 23) & 0x80) != 0)
            {
              std::string::__init_copy_ctor_external(v53, *(const std::string::value_type **)__p, *((_QWORD *)__p + 1));
              goto LABEL_48;
            }
            v23 = *(_OWORD *)__p;
            v24 = *((_QWORD *)__p + 2);
            goto LABEL_44;
          }
LABEL_45:
          v28 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v52, v22);
LABEL_49:
          v53 = v28;
          goto LABEL_50;
        }
        if (*((_QWORD *)__p + 1))
          goto LABEL_41;
      }
LABEL_50:
      p_p = &__p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
      goto LABEL_51;
    }
LABEL_52:
    kaldi::JoinVectorToString<std::string>(&v52, " ", a3);
    v29 = *(unsigned __int8 *)(a3 + 23);
    if (*(_BYTE *)(a1 + 104))
    {
      if ((v29 & 0x80) != 0)
      {
        v30 = *(_BYTE **)a3;
        v31 = *(_QWORD *)(a3 + 8);
        if (!v31)
          goto LABEL_61;
      }
      else
      {
        v30 = (_BYTE *)a3;
        v31 = *(unsigned __int8 *)(a3 + 23);
        if (!*(_BYTE *)(a3 + 23))
          goto LABEL_61;
      }
      do
      {
        if (*v30 == 95)
          *v30 = 32;
        ++v30;
        --v31;
      }
      while (v31);
      v29 = *(unsigned __int8 *)(a3 + 23);
    }
LABEL_61:
    v32 = v29;
    if ((v29 & 0x80u) == 0)
      v33 = v29;
    else
      v33 = *(_QWORD *)(a3 + 8);
    v34 = *(unsigned __int8 *)(a2 + 23);
    v35 = (char)v34;
    if ((v34 & 0x80u) != 0)
      v34 = *(_QWORD *)(a2 + 8);
    if (v33 != v34)
      goto LABEL_77;
    if (v35 >= 0)
      v36 = (unsigned __int8 *)a2;
    else
      v36 = *(unsigned __int8 **)a2;
    if ((v32 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a3, v36, *(_QWORD *)(a3 + 8)))
        goto LABEL_77;
    }
    else if ((_DWORD)v32)
    {
      v37 = (unsigned __int8 *)a3;
      while (*v37 == *v36)
      {
        ++v37;
        ++v36;
        if (!--v32)
          goto LABEL_90;
      }
LABEL_77:
      if (kaldi::g_kaldi_verbose_level >= 1)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 1);
        v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Input hammer removed tags ", 26);
        v39 = *(char *)(a2 + 23);
        if (v39 >= 0)
          v40 = a2;
        else
          v40 = *(_QWORD *)a2;
        if (v39 >= 0)
          v41 = *(unsigned __int8 *)(a2 + 23);
        else
          v41 = *(_QWORD *)(a2 + 8);
        v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v40, v41);
        v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" -> ", 4);
        v44 = *(char *)(a3 + 23);
        if (v44 >= 0)
          v45 = (const void *)a3;
        else
          v45 = *(const void **)a3;
        if (v44 >= 0)
          v46 = *(unsigned __int8 *)(a3 + 23);
        else
          v46 = *(_QWORD *)(a3 + 8);
        goto LABEL_97;
      }
      goto LABEL_98;
    }
LABEL_90:
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 1);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Input hammer did not change anything ", 37);
      v47 = *(char *)(a2 + 23);
      if (v47 >= 0)
        v45 = (const void *)a2;
      else
        v45 = *(const void **)a2;
      if (v47 >= 0)
        v46 = *(unsigned __int8 *)(a2 + 23);
      else
        v46 = *(_QWORD *)(a2 + 8);
LABEL_97:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v45, v46);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
LABEL_98:
    __p = &v52;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    __p = &v55;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    return 0;
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Locale not in pass list ", 24);
    v10 = *(char *)(a4 + 23);
    if (v10 >= 0)
      v11 = a4;
    else
      v11 = *(_QWORD *)a4;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(a4 + 23);
    else
      v12 = *(_QWORD *)(a4 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
  }
  std::string::operator=((std::string *)a3, (const std::string *)a2);
  return 0;
}

void sub_1ADF39EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v16 - 136) = v15;
  *(_QWORD *)(v16 - 88) = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v16 - 88));
  __p = (void *)(v16 - 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (void *)(v16 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::InputHammer::RemoveSpecifiedTags(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  const std::string::value_type *v8;
  uint64_t v9;
  const std::string::value_type *v10;
  int v11;
  __int128 *v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string *v16;
  __int128 v17;
  std::string::size_type v18;
  std::string *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  _BYTE *v33;
  uint64_t v34;
  int v35;
  void *__p;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::string *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void **p_p;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, " ");
  kaldi::SplitStringOnString(a2, (char *)&__p, &v43);
  if (SHIBYTE(v39) < 0)
    operator delete(__p);
  if (*(char *)(a3 + 23) < 0)
  {
    **(_BYTE **)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 23) = 0;
  }
  v6 = v43;
  v7 = v44;
  if (v43 != v44)
  {
    while (1)
    {
      if (*(char *)(v6 + 23) < 0)
      {
        v8 = *(const std::string::value_type **)v6;
        v9 = *(_QWORD *)(v6 + 8);
      }
      else
      {
        v8 = (const std::string::value_type *)v6;
        v9 = *(unsigned __int8 *)(v6 + 23);
      }
      v10 = v8 - 1;
      do
      {
        if (!v9)
          goto LABEL_19;
        v11 = v10[v9--];
      }
      while (v11 != 92);
      if (v9 != -1)
        break;
LABEL_19:
      v13 = v41;
      if ((unint64_t)v41 >= v42)
      {
        v15 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v40, (__int128 *)v6);
      }
      else
      {
        if ((*(_BYTE *)(v6 + 23) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(v41, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
        }
        else
        {
          v14 = *(_OWORD *)v6;
          v41->__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
          *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
        }
        v15 = v13 + 1;
      }
      v41 = v15;
LABEL_40:
      v6 += 24;
      if (v6 == v7)
        goto LABEL_41;
    }
    __p = 0;
    v38 = 0;
    v39 = 0;
    kaldi::SplitStringToVector((const std::string *)v6, "\\", 0, (uint64_t)&__p);
    if (v38 - (_QWORD)__p == 48)
    {
      if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1, (unsigned __int8 *)__p + 24))
      {
        v16 = v41;
        v12 = (__int128 *)v6;
        if ((unint64_t)v41 < v42)
        {
          if (*(char *)(v6 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v41, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
            goto LABEL_37;
          }
          v17 = *(_OWORD *)v6;
          v18 = *(_QWORD *)(v6 + 16);
          goto LABEL_33;
        }
LABEL_34:
        v19 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v40, v12);
LABEL_38:
        v41 = v19;
        goto LABEL_39;
      }
      v12 = (__int128 *)__p;
      if ((*((char *)__p + 23) & 0x80000000) == 0)
      {
        if (!*((_BYTE *)__p + 23))
          goto LABEL_39;
LABEL_30:
        v16 = v41;
        if ((unint64_t)v41 < v42)
        {
          if ((*((_BYTE *)__p + 23) & 0x80) != 0)
          {
            std::string::__init_copy_ctor_external(v41, *(const std::string::value_type **)__p, *((_QWORD *)__p + 1));
            goto LABEL_37;
          }
          v17 = *(_OWORD *)__p;
          v18 = *((_QWORD *)__p + 2);
LABEL_33:
          v16->__r_.__value_.__r.__words[2] = v18;
          *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
LABEL_37:
          v19 = v16 + 1;
          goto LABEL_38;
        }
        goto LABEL_34;
      }
      if (*((_QWORD *)__p + 1))
        goto LABEL_30;
    }
LABEL_39:
    p_p = &__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
    goto LABEL_40;
  }
LABEL_41:
  kaldi::JoinVectorToString<std::string>(&v40, " ", a3);
  v20 = *(unsigned __int8 *)(a3 + 23);
  if ((v20 & 0x80u) == 0)
    v21 = *(unsigned __int8 *)(a3 + 23);
  else
    v21 = *(_QWORD *)(a3 + 8);
  v22 = *(unsigned __int8 *)(a2 + 23);
  v23 = (char)v22;
  if ((v22 & 0x80u) != 0)
    v22 = *(_QWORD *)(a2 + 8);
  if (v21 != v22)
  {
LABEL_57:
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 1);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Input hammer removed tags ", 26);
      v27 = *(char *)(a2 + 23);
      if (v27 >= 0)
        v28 = a2;
      else
        v28 = *(_QWORD *)a2;
      if (v27 >= 0)
        v29 = *(unsigned __int8 *)(a2 + 23);
      else
        v29 = *(_QWORD *)(a2 + 8);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" -> ", 4);
      v32 = *(char *)(a3 + 23);
      if (v32 >= 0)
        v33 = (_BYTE *)a3;
      else
        v33 = *(_BYTE **)a3;
      if (v32 >= 0)
        v34 = *(unsigned __int8 *)(a3 + 23);
      else
        v34 = *(_QWORD *)(a3 + 8);
      goto LABEL_77;
    }
    goto LABEL_78;
  }
  if (v23 >= 0)
    v24 = (unsigned __int8 *)a2;
  else
    v24 = *(unsigned __int8 **)a2;
  if ((v20 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a3, v24, *(_QWORD *)(a3 + 8)))
      goto LABEL_57;
  }
  else if (*(_BYTE *)(a3 + 23))
  {
    v25 = (unsigned __int8 *)a3;
    while (*v25 == *v24)
    {
      ++v25;
      ++v24;
      if (!--v20)
        goto LABEL_70;
    }
    goto LABEL_57;
  }
LABEL_70:
  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 1);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Input hammer did not change anything ", 37);
    v35 = *(char *)(a2 + 23);
    if (v35 >= 0)
      v33 = (_BYTE *)a2;
    else
      v33 = *(_BYTE **)a2;
    if (v35 >= 0)
      v34 = *(unsigned __int8 *)(a2 + 23);
    else
      v34 = *(_QWORD *)(a2 + 8);
LABEL_77:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v33, v34);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  }
LABEL_78:
  __p = &v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return 0;
}

void sub_1ADF3A318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  __p = (void *)(v14 - 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (void *)(v14 - 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::BPE::IsIntraWord(uint64_t a1, uint64_t **a2)
{
  size_t v2;
  size_t v3;
  size_t v4;
  int v5;
  size_t v6;
  size_t v7;
  BOOL v9;
  size_t v10;
  size_t v11;
  const void *v13;
  int v14;

  v2 = *((unsigned __int8 *)a2 + 23);
  v3 = (size_t)a2[1];
  if ((v2 & 0x80u) == 0)
    v4 = *((unsigned __int8 *)a2 + 23);
  else
    v4 = (size_t)a2[1];
  v5 = *(char *)(a1 + 159);
  if (v5 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 159);
  else
    v6 = *(_QWORD *)(a1 + 144);
  v9 = v4 >= v6;
  v7 = v4 - v6;
  if (!v9)
    return 0;
  if ((v2 & 0x80) != 0)
  {
    if (v6 == -1 || v3 < v7)
LABEL_36:
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v3 - v7 >= v6)
      v11 = v6;
    else
      v11 = v3 - v7;
    a2 = (uint64_t **)*a2;
  }
  else
  {
    v9 = v6 != -1 && v2 >= v7;
    if (!v9)
      goto LABEL_36;
    v10 = v2 - v7;
    if (v10 >= v6)
      v11 = v6;
    else
      v11 = v10;
  }
  if (v5 >= 0)
    v13 = (const void *)(a1 + 136);
  else
    v13 = *(const void **)(a1 + 136);
  v14 = memcmp((char *)a2 + v7, v13, v11);
  return v11 == v6 && v14 == 0;
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SuppressedIds(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  void **v19[34];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::string v23;

  kaldi::quasar::MultiLangDecorator::GetTags(a1 + 120, a2, a3, (uint64_t)&v23);
  v20 = 0;
  v21 = 0;
  v22 = 0;
  kaldi::SplitStringToVector(&v23, " ", 1, (uint64_t)&v20);
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)a5 = a5 + 8;
  v8 = v20;
  v9 = v21;
  while (v8 != v9)
  {
    v10 = kaldi::quasar::TorchEncoderDecoder::OutputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
    LODWORD(v19[0]) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 96))(v10, v8) - 1;
    std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)a5, (int *)v19, v19);
    v8 += 24;
  }
  v12 = *a4;
  v11 = a4[1];
  while (v12 != v11)
  {
    v13 = kaldi::quasar::TorchEncoderDecoder::OutputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 96))(v13, v12);
    if (v14 == -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Token to suppress not found in symbol table: ", 45);
      v16 = *(char *)(v12 + 23);
      if (v16 >= 0)
        v17 = v12;
      else
        v17 = *(_QWORD *)v12;
      if (v16 >= 0)
        v18 = *(unsigned __int8 *)(v12 + 23);
      else
        v18 = *(_QWORD *)(v12 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
    }
    LODWORD(v19[0]) = v14 - 1;
    std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)a5, (int *)v19, v19);
    v12 += 24;
  }
  v19[0] = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v19);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_1ADF3A5FC()
{
  uint64_t v0;

  std::__tree<int>::destroy(v0, *(_QWORD **)(v0 + 8));
  JUMPOUT(0x1ADF3A618);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::AddInitialHypToCurrent<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, int a3, float a4)
{
  uint64_t (***v8)(_QWORD);
  int v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v8 = *(uint64_t (****)(_QWORD))(a2 + 200);
  if (v8)
    v9 = (**v8)(v8);
  else
    v9 = 0;
  if (*(_DWORD *)(a2 + 184) == 2)
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 208) + 24))(*(_QWORD *)(a2 + 208));
  v10 = operator new();
  v11 = *(_DWORD *)(a1 + 5176);
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 8) = 0;
  *(_DWORD *)(v10 + 32) = 0;
  *(_DWORD *)(v10 + 36) = v9;
  *(_DWORD *)(v10 + 40) = v11;
  *(_DWORD *)(v10 + 44) = 0;
  *(float *)(v10 + 48) = a4;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_QWORD *)(v10 + 104) = 0;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_DWORD *)(v10 + 112) = 1065353216;
  *(_OWORD *)(v10 + 120) = 0u;
  *(_OWORD *)(v10 + 136) = 0u;
  *(_DWORD *)(v10 + 152) = 1065353216;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 176) = 0u;
  *(_DWORD *)(v10 + 192) = 1065353216;
  *(_BYTE *)(v10 + 200) = 0;
  *(_QWORD *)(v10 + 208) = 0;
  *(_QWORD *)(v10 + 216) = 0;
  *(_OWORD *)(v10 + 240) = 0u;
  *(_OWORD *)(v10 + 256) = 0u;
  *(_QWORD *)(v10 + 224) = 0;
  *(_QWORD *)(v10 + 232) = &unk_1E5D34170;
  *(_BYTE *)(v10 + 272) = 0;
  *(_DWORD *)v10 = a3;
  v26 = v10 + 56;
  std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100](&v26, (_DWORD *)(a1 + 5176));
  kaldi::quasar::TorchEncoderDecoder::GetHistoryState(*(_QWORD *)(a1 + 136), (uint64_t *)(v10 + 8), 0);
  v12 = *(uint64_t **)(a1 + 5792);
  v13 = *(_QWORD *)(a1 + 5800);
  if ((unint64_t)v12 >= v13)
  {
    v15 = *(_QWORD *)(a1 + 5784);
    v16 = ((uint64_t)v12 - v15) >> 3;
    if ((unint64_t)(v16 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v17 = v13 - v15;
    v18 = v17 >> 2;
    if (v17 >> 2 <= (unint64_t)(v16 + 1))
      v18 = v16 + 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    if (v19)
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 5800, v19);
    else
      v20 = 0;
    v21 = (uint64_t *)&v20[8 * v16];
    v22 = &v20[8 * v19];
    *v21 = v10;
    v14 = v21 + 1;
    v23 = *(char **)(a1 + 5792);
    v24 = *(char **)(a1 + 5784);
    if (v23 != v24)
    {
      do
      {
        v25 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *--v21 = v25;
      }
      while (v23 != v24);
      v23 = *(char **)(a1 + 5784);
    }
    *(_QWORD *)(a1 + 5784) = v21;
    *(_QWORD *)(a1 + 5792) = v14;
    *(_QWORD *)(a1 + 5800) = v22;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *v12 = v10;
    v14 = v12 + 1;
  }
  *(_QWORD *)(a1 + 5792) = v14;
}

uint64_t std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v19 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[48 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v17 = v11;
  v18 = &v10[48 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 1) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)v11 + 1, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v12 = &v10[48 * v4];
  v13 = *(_QWORD *)(a2 + 32);
  *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 + 40);
  *((_QWORD *)v12 + 4) = v13;
  v17 += 48;
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement> &>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1ADF3A960(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 48);
      a3 -= 48;
      *(_QWORD *)(v7 - 48) = v8;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v9 = *(_QWORD *)(a3 + 32);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 40);
      *(_QWORD *)(v7 - 16) = v9;
      v7 = *((_QWORD *)&v15 + 1) - 48;
      *((_QWORD *)&v15 + 1) -= 48;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[48 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[48 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v12 = *(_QWORD *)(a2 + 32);
  *((_DWORD *)v11 + 10) = *(_DWORD *)(a2 + 40);
  *((_QWORD *)v11 + 4) = v12;
  v15[2] = v11 + 48;
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement> &>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1ADF3ABE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;

  if (a4 >= 2)
  {
    v8 = *(_QWORD *)a1;
    v7 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v18 = *(_QWORD *)(a1 + 32);
    v19 = *(_DWORD *)(a1 + 40);
    v11 = (_QWORD *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>(a1, a3, a4);
    v12 = v11;
    if ((_QWORD *)(a2 - 48) == v11)
    {
      *v11 = v8;
      v17 = v11 + 1;
      v16 = (void *)v11[1];
      if (v16)
      {
        v12[2] = v16;
        operator delete(v16);
        *v17 = 0;
        v12[2] = 0;
        v12[3] = 0;
      }
      v12[1] = v7;
      v12[2] = v10;
      v12[3] = v9;
      v12[4] = v18;
      *((_DWORD *)v12 + 10) = v19;
    }
    else
    {
      *v11 = *(_QWORD *)(a2 - 48);
      std::vector<int>::__move_assign((uint64_t)(v11 + 1), (__n128 *)(a2 - 40));
      v13 = *(_QWORD *)(a2 - 16);
      *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 - 8);
      v12[4] = v13;
      v14 = (uint64_t)(v12 + 6);
      *(_QWORD *)(a2 - 48) = v8;
      v15 = *(void **)(a2 - 40);
      if (v15)
      {
        *(_QWORD *)(a2 - 32) = v15;
        operator delete(v15);
        *(_QWORD *)(a2 - 40) = 0;
        *(_QWORD *)(a2 - 32) = 0;
        *(_QWORD *)(a2 - 24) = 0;
      }
      *(_QWORD *)(a2 - 40) = v7;
      *(_QWORD *)(a2 - 32) = v10;
      *(_QWORD *)(a2 - 24) = v9;
      *(_QWORD *)(a2 - 16) = v18;
      *(_DWORD *)(a2 - 8) = v19;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>(a1, v14, a3, 0xAAAAAAAAAAAAAAABLL * ((v14 - a1) >> 4));
    }
  }
}

void sub_1ADF3AD48(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *,false>(std::vector<int> *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::vector<int> *v18;
  char v19;
  _BOOL4 v20;
  float v21;
  std::vector<int> *v22;
  uint64_t *v23;
  std::vector<int> *v24;

  v7 = a2;
  v8 = (uint64_t *)a1;
  v23 = a2;
  v24 = a1;
  while (2)
  {
    v9 = 1 - a4;
LABEL_3:
    v10 = (char *)v7 - (char *)v8;
    v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v8) >> 4);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v21 = *((float *)v7 - 12);
        v23 = v7 - 6;
        if (v21 > *(float *)v8)
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v24, &v23);
        return;
      case 3uLL:
        v23 = v7 - 6;
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)v8, v8 + 6, v7 - 6);
        return;
      case 4uLL:
        v23 = v7 - 6;
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)v8, v8 + 6, v8 + 12, v7 - 6);
        return;
      case 5uLL:
        v23 = v7 - 6;
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)v8, v8 + 6, v8 + 12, v8 + 18, v7 - 6);
        return;
      default:
        if (v10 <= 1151)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((uint64_t)v8, (uint64_t)v7);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((uint64_t)v8, (uint64_t)v7);
          return;
        }
        if (v9 == 1)
        {
          if (v8 != v7)
            std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *>(v8, v7, (float *)v7, a3);
          return;
        }
        v12 = v11 >> 1;
        v13 = v7 - 6;
        if ((unint64_t)v10 < 0x1801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)&v8[6 * (v11 >> 1)], v8, v13);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)v8, &v8[6 * (v11 >> 1)], v13);
          v14 = v23;
          v15 = 3 * v12;
          v16 = 2 * v12;
          v17 = 48 * v12 - 48;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)&v24[2], (uint64_t *)((char *)v24 + v17), v23 - 12);
          v16 += 2;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)&v24[4], (uint64_t *)&v24[v16], v14 - 18);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)((char *)v24 + v17), (uint64_t *)&v24[(unint64_t)(16 * v15) / 0x18], (uint64_t *)&v24[v16]);
          v22 = &v24[(unint64_t)(16 * v15) / 0x18];
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v24, (uint64_t **)&v22);
        }
        if ((a5 & 1) == 0)
        {
          v7 = v23;
          if (*(float *)&v24[-2].__begin_ > *(float *)&v24->__begin_)
            goto LABEL_12;
          v8 = (uint64_t *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &>(v24, v23);
LABEL_21:
          a5 = 0;
          v24 = (std::vector<int> *)v8;
          a4 = -v9;
          continue;
        }
        v7 = v23;
LABEL_12:
        v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &>(v24, v7);
        if ((v19 & 1) == 0)
        {
LABEL_19:
          std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *,false>(v24, v18, a3, -v9, a5 & 1);
          v8 = (uint64_t *)&v18[2];
          goto LABEL_21;
        }
        v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *>((uint64_t)v24, (uint64_t *)v18);
        v8 = (uint64_t *)&v18[2];
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *>((uint64_t)&v18[2], v7))
        {
          if (v20)
          {
            v24 = v18 + 2;
            goto LABEL_18;
          }
          goto LABEL_19;
        }
        if (!v20)
        {
          v23 = (uint64_t *)v18;
          v8 = (uint64_t *)v24;
          v7 = (uint64_t *)v18;
LABEL_18:
          ++v9;
          goto LABEL_3;
        }
        return;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *>(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  unint64_t v4;
  _BOOL8 result;
  float v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;

  v2 = a2;
  v19 = a2;
  v20 = a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *((float *)a2 - 12);
      v19 = a2 - 6;
      if (v6 > *(float *)a1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>(&v20, &v19);
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)a1, (uint64_t *)(a1 + 48), a2 - 6);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)a1, (uint64_t *)(a1 + 48), (uint64_t *)(a1 + 96), a2 - 6);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)a1, (uint64_t *)(a1 + 48), (uint64_t *)(a1 + 96), (uint64_t *)(a1 + 144), a2 - 6);
      return 1;
    default:
      v7 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)a1, (uint64_t *)(a1 + 48), (uint64_t *)(a1 + 96));
      v8 = a1 + 144;
      if ((uint64_t *)v8 == v2)
        return 1;
      v9 = 0;
      break;
  }
  while (1)
  {
    v10 = *(float *)v8;
    if (*(float *)v8 > *(float *)v7)
      break;
LABEL_14:
    v7 = v8;
    v8 += 48;
    if ((uint64_t *)v8 == v2)
      return 1;
  }
  v11 = *(_DWORD *)(v8 + 4);
  v16 = *(_OWORD *)(v8 + 8);
  v13 = *(_QWORD *)(v8 + 24);
  v12 = *(_QWORD *)(v8 + 32);
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 8) = 0;
  v17 = v12;
  v18 = *(_DWORD *)(v8 + 40);
  do
  {
    v14 = v7;
    *(_QWORD *)(v7 + 48) = *(_QWORD *)v7;
    std::vector<int>::__move_assign(v7 + 56, (__n128 *)(v7 + 8));
    *(_QWORD *)(v7 + 80) = *(_QWORD *)(v7 + 32);
    *(_DWORD *)(v7 + 88) = *(_DWORD *)(v7 + 40);
    if (v7 == v20)
      break;
    v7 -= 48;
  }
  while (*(float *)(v14 - 48) < v10);
  *(float *)v14 = v10;
  *(_DWORD *)(v14 + 4) = v11;
  v15 = *(void **)(v14 + 8);
  if (v15)
  {
    *(_QWORD *)(v14 + 16) = v15;
    operator delete(v15);
  }
  *(_OWORD *)(v14 + 8) = v16;
  *(_QWORD *)(v14 + 24) = v13;
  *(_DWORD *)(v14 + 40) = v18;
  *(_QWORD *)(v14 + 32) = v17;
  if (++v9 != 8)
  {
    v2 = v19;
    goto LABEL_14;
  }
  return v8 + 48 == (_QWORD)v19;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *>(uint64_t *a1, uint64_t *a2, float *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float *v13;
  unint64_t v14;
  float *v17;
  float *v18;

  v18 = (float *)a1;
  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v7 = a1;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) / 48;
    if ((char *)a2 - (char *)a1 >= 49)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t)&a1[6 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((uint64_t)v7, a4, v9, v12);
        v12 -= 48;
        --v11;
      }
      while (v11);
    }
    v17 = (float *)v6;
    if ((float *)v6 == a3)
    {
      a3 = (float *)v6;
    }
    else
    {
      v13 = (float *)v6;
      do
      {
        if (*v13 > *v18)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v17, (uint64_t **)&v18);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((uint64_t)v18, a4, v9, (uint64_t)v18);
          v13 = v17;
        }
        v13 += 12;
        v17 = v13;
      }
      while (v13 != a3);
      v7 = (uint64_t *)v18;
      v8 = v6 - (_QWORD)v18;
    }
    if (v8 >= 49)
    {
      v14 = v8 / 0x30uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *>((uint64_t)v7, v6, a4, v14);
        v6 -= 48;
      }
      while (v14-- > 2);
      return (uint64_t)v17;
    }
  }
  return (uint64_t)a3;
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;

  if (a4 >= 2)
  {
    v8 = *(_QWORD *)a1;
    v7 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v18 = *(_QWORD *)(a1 + 32);
    v19 = *(_DWORD *)(a1 + 40);
    v11 = (_QWORD *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>(a1, a3, a4);
    v12 = v11;
    if (v11 == (_QWORD *)(a2 - 48))
    {
      *v11 = v8;
      v17 = v11 + 1;
      v16 = (void *)v11[1];
      if (v16)
      {
        v12[2] = v16;
        operator delete(v16);
        *v17 = 0;
        v12[2] = 0;
        v12[3] = 0;
      }
      v12[1] = v7;
      v12[2] = v10;
      v12[3] = v9;
      v12[4] = v18;
      *((_DWORD *)v12 + 10) = v19;
    }
    else
    {
      *v11 = *(_QWORD *)(a2 - 48);
      std::vector<int>::__move_assign((uint64_t)(v11 + 1), (__n128 *)(a2 - 40));
      v13 = *(_QWORD *)(a2 - 16);
      *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 - 8);
      v12[4] = v13;
      v14 = (uint64_t)(v12 + 6);
      *(_QWORD *)(a2 - 48) = v8;
      v15 = *(void **)(a2 - 40);
      if (v15)
      {
        *(_QWORD *)(a2 - 32) = v15;
        operator delete(v15);
        *(_QWORD *)(a2 - 40) = 0;
        *(_QWORD *)(a2 - 32) = 0;
        *(_QWORD *)(a2 - 24) = 0;
      }
      *(_QWORD *)(a2 - 40) = v7;
      *(_QWORD *)(a2 - 32) = v10;
      *(_QWORD *)(a2 - 24) = v9;
      *(_QWORD *)(a2 - 16) = v18;
      *(_DWORD *)(a2 - 8) = v19;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>(a1, v14, a3, 0xAAAAAAAAAAAAAAABLL * ((v14 - a1) >> 4));
    }
  }
}

void sub_1ADF3B4EC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[56 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[56 * v9];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)v11 + 2, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  *(_OWORD *)&v10[56 * v4 + 40] = *(_OWORD *)(a2 + 40);
  v15 += 56;
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement> &>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1ADF3B634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  char v11;
  __int128 v12;
  __int128 v13;

  v7 = a7;
  *(_QWORD *)&v13 = a6;
  *((_QWORD *)&v13 + 1) = a7;
  v12 = v13;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  if (a3 == a5)
  {
    v8 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(a3 - 56);
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 - 16);
      v7 = *((_QWORD *)&v13 + 1) - 56;
      *((_QWORD *)&v13 + 1) -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    v8 = v13;
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v8;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement *,false>(std::vector<int> *a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  _BOOL4 v19;
  float v20;
  uint64_t v21;
  unint64_t v22;
  std::vector<int> *v23;

  v7 = (__int128 *)a2;
  v8 = (__int128 *)a1;
  v22 = a2;
  v23 = a1;
  while (2)
  {
    v9 = 1 - a4;
LABEL_3:
    v10 = (char *)v7 - (char *)v8;
    v11 = 0x6DB6DB6DB6DB6DB7 * (((char *)v7 - (char *)v8) >> 3);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v20 = *((float *)v7 - 14);
        v22 = (unint64_t)v7 - 56;
        if (v20 < *(float *)v8)
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>((__int128 **)&v23, (uint64_t *)&v22);
        return;
      case 3uLL:
        v22 = (unint64_t)v7 - 56;
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(v8, (__int128 *)((char *)v8 + 56), (float *)v7 - 14);
        return;
      case 4uLL:
        v22 = (unint64_t)v7 - 56;
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(v8, (__int128 *)((char *)v8 + 56), v8 + 7, (unsigned __int32 *)v7 - 14);
        return;
      case 5uLL:
        v22 = (unint64_t)v7 - 56;
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(v8, (__int128 *)((char *)v8 + 56), v8 + 7, (__int128 *)((char *)v8 + 168), (unsigned __int32 *)v7 - 14);
        return;
      default:
        if (v10 <= 1343)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((uint64_t)v8, (uint64_t)v7);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((uint64_t)v8, (uint64_t)v7);
          return;
        }
        if (v9 == 1)
        {
          if (v8 != v7)
            std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement *>((float *)v8, v7, v7, a3);
          return;
        }
        v12 = v11 >> 1;
        v13 = (float *)v7 - 14;
        if ((unint64_t)v10 < 0x1C01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((__int128 *)((char *)v8 + 56 * (v11 >> 1)), v8, v13);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(v8, (__int128 *)((char *)v8 + 56 * (v11 >> 1)), v13);
          v14 = 56 * v12;
          v15 = 56 * v12 - 56;
          v16 = v22;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((__int128 *)&v23[2].__end_, (__int128 *)((char *)v23 + v15), (float *)(v22 - 112));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((__int128 *)&v23[4].__end_cap_, (__int128 *)((char *)&v23[2].__end_ + v14), (float *)(v16 - 168));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((__int128 *)((char *)v23 + v15), (__int128 *)((char *)v23 + v14), (float *)((char *)&v23[2].__end_ + v14));
          v21 = (uint64_t)v23 + v14;
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>((__int128 **)&v23, &v21);
        }
        if ((a5 & 1) == 0)
        {
          v7 = (__int128 *)v22;
          if (*(float *)&v23[-3].__end_cap_.__value_ < *(float *)&v23->__begin_)
            goto LABEL_12;
          v8 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *,std::__less<void,void> &>(v23, v22);
LABEL_21:
          a5 = 0;
          v23 = (std::vector<int> *)v8;
          a4 = -v9;
          continue;
        }
        v7 = (__int128 *)v22;
LABEL_12:
        v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *,std::__less<void,void> &>(v23, (unint64_t)v7);
        if ((v18 & 1) == 0)
        {
LABEL_19:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement *,false>(v23, v17, a3, -v9, a5 & 1);
          v8 = (__int128 *)(v17 + 56);
          goto LABEL_21;
        }
        v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement *>((__int128 *)v23, v17);
        v8 = (__int128 *)(v17 + 56);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement *>((__int128 *)(v17 + 56), (uint64_t)v7))
        {
          if (v19)
          {
            v23 = (std::vector<int> *)(v17 + 56);
            goto LABEL_18;
          }
          goto LABEL_19;
        }
        if (!v19)
        {
          v22 = v17;
          v8 = (__int128 *)v23;
          v7 = (__int128 *)v17;
LABEL_18:
          ++v9;
          goto LABEL_3;
        }
        return;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement *>(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float *v7;
  char *v8;
  int v9;
  __int128 *v10;
  float v11;
  uint64_t v12;
  __int128 v13;
  __n128 *v14;
  __int128 *v15;
  float *v16;
  __int128 *v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  char *v23;
  __int128 *v24;

  v2 = a2;
  v23 = (char *)a2;
  v24 = a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a2 - (uint64_t)a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(float *)(a2 - 56);
      v23 = (char *)(a2 - 56);
      if (v6 < *(float *)a1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>(&v24, (uint64_t *)&v23);
        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, (__int128 *)((char *)a1 + 56), (float *)(a2 - 56));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, (__int128 *)((char *)a1 + 56), a1 + 7, (unsigned __int32 *)(a2 - 56));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, (__int128 *)((char *)a1 + 56), a1 + 7, (__int128 *)((char *)a1 + 168), (unsigned __int32 *)(a2 - 56));
      return 1;
    default:
      v7 = (float *)(a1 + 7);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, (__int128 *)((char *)a1 + 56), (float *)a1 + 28);
      v8 = (char *)a1 + 168;
      if ((__int128 *)((char *)a1 + 168) == (__int128 *)v2)
        return 1;
      v9 = 0;
      v10 = a1 + 13;
      break;
  }
  while (1)
  {
    v11 = *(float *)v8;
    if (*(float *)v8 < *v7)
      break;
LABEL_15:
    v7 = (float *)v8;
    v10 = (__int128 *)((char *)v10 + 56);
    v8 += 56;
    if (v8 == (char *)v2)
      return 1;
  }
  v21 = *(_QWORD *)(v8 + 4);
  v22 = *((_DWORD *)v8 + 3);
  v12 = *((_QWORD *)v8 + 2);
  v13 = *(_OWORD *)(v8 + 24);
  *((_QWORD *)v8 + 2) = 0;
  *((_QWORD *)v8 + 3) = 0;
  *((_QWORD *)v8 + 4) = 0;
  v19 = v13;
  v20 = *(_OWORD *)(v8 + 40);
  v14 = (__n128 *)v10;
  v15 = v24;
  while (1)
  {
    v16 = (float *)v14;
    v17 = (__int128 *)&v14[-6];
    *(__n128 *)((char *)v14 - 40) = v14[-6];
    std::vector<int>::__move_assign((uint64_t)&v14[-2].n128_i64[1], v14 - 5);
    *(_OWORD *)v16 = *(_OWORD *)(v16 - 14);
    if (v17 == v15)
      break;
    v14 = (__n128 *)(v16 - 14);
    if (v11 >= *(v16 - 38))
    {
      v15 = (__int128 *)(v16 - 24);
      break;
    }
  }
  *(float *)v15 = v11;
  *(_QWORD *)((char *)v15 + 4) = v21;
  *((_DWORD *)v15 + 3) = v22;
  v18 = (void *)*((_QWORD *)v16 - 10);
  if (v18)
  {
    *((_QWORD *)v15 + 3) = v18;
    operator delete(v18);
    *((_QWORD *)v16 - 9) = 0;
    *((_QWORD *)v16 - 8) = 0;
  }
  *((_QWORD *)v16 - 10) = v12;
  *(__int128 *)((char *)v15 + 24) = v19;
  *(_OWORD *)(v16 - 14) = v20;
  if (++v9 != 8)
  {
    v2 = (uint64_t)v23;
    goto LABEL_15;
  }
  return v8 + 56 == v23;
}

__int128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement *>(float *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  unint64_t v14;
  __int128 *v17;
  float *v18;

  v18 = a1;
  if (a1 != (float *)a2)
  {
    v6 = a2;
    v7 = a1;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) / 56;
    if ((char *)a2 - (char *)a1 >= 57)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t)&a1[14 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((uint64_t)v7, a4, v9, v12);
        v12 -= 56;
        --v11;
      }
      while (v11);
    }
    v17 = v6;
    if (v6 == a3)
    {
      a3 = v6;
    }
    else
    {
      v13 = v6;
      do
      {
        if (*(float *)v13 < *v18)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>(&v17, (uint64_t *)&v18);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((uint64_t)v18, a4, v9, (uint64_t)v18);
          v13 = v17;
        }
        v13 = (__int128 *)((char *)v13 + 56);
        v17 = v13;
      }
      while (v13 != a3);
      v7 = v18;
      v8 = (char *)v6 - (char *)v18;
    }
    if (v8 >= 57)
    {
      v14 = v8 / 0x38uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement *>((uint64_t)v7, (uint64_t)v6, a4, v14);
        v6 = (__int128 *)((char *)v6 - 56);
      }
      while (v14-- > 2);
      return v17;
    }
  }
  return a3;
}

__n128 std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  __n128 result;
  void *v18;
  __n128 v19;
  __int128 v20;

  if (a4 >= 2)
  {
    v7 = *(_OWORD *)a1;
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    v19 = *(__n128 *)(a1 + 40);
    v20 = v7;
    v11 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, a3, a4);
    v12 = v11;
    v13 = (_OWORD *)(a2 - 56);
    v14 = (_QWORD *)(v11 + 16);
    if (v11 == a2 - 56)
    {
      *(_OWORD *)v11 = v20;
      v18 = *(void **)(v11 + 16);
      if (v18)
      {
        *(_QWORD *)(v12 + 24) = v18;
        operator delete(v18);
        *v14 = 0;
        v14[1] = 0;
        v14[2] = 0;
      }
      *(_QWORD *)(v12 + 16) = v8;
      *(_QWORD *)(v12 + 24) = v9;
      *(_QWORD *)(v12 + 32) = v10;
      result = v19;
      *(__n128 *)(v12 + 40) = v19;
    }
    else
    {
      *(_OWORD *)v11 = *v13;
      std::vector<int>::__move_assign(v11 + 16, (__n128 *)(a2 - 40));
      *(_OWORD *)(v12 + 40) = *(_OWORD *)(a2 - 16);
      v15 = v12 + 56;
      *v13 = v20;
      v16 = *(void **)(a2 - 40);
      if (v16)
      {
        *(_QWORD *)(a2 - 32) = v16;
        operator delete(v16);
        *(_QWORD *)(a2 - 40) = 0;
        *(_QWORD *)(a2 - 32) = 0;
        *(_QWORD *)(a2 - 24) = 0;
      }
      *(_QWORD *)(a2 - 40) = v8;
      *(_QWORD *)(a2 - 32) = v9;
      *(_QWORD *)(a2 - 24) = v10;
      *(__n128 *)(a2 - 16) = v19;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, v15, a3, 0x6DB6DB6DB6DB6DB7 * ((v15 - a1) >> 3));
    }
  }
  return result;
}

void sub_1ADF3BF6C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Hyp::Hyp(uint64_t a1, int a2, int a3, int a4, char a5, uint64_t a6, float a7, float a8)
{
  float v16;
  float v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  _DWORD *v21;
  unint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  int v31;
  unint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  int v42;

  *(_DWORD *)a1 = *(_DWORD *)a6;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)(a1 + 8), *(_QWORD *)(a6 + 8), *(_QWORD *)(a6 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a6 + 16) - *(_QWORD *)(a6 + 8)) >> 4));
  v16 = *(float *)(a6 + 44);
  v17 = *(float *)(a6 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  v18 = (void **)(a1 + 56);
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a3;
  *(_DWORD *)(a1 + 40) = a4;
  *(float *)(a1 + 44) = v16 + a7;
  *(float *)(a1 + 48) = v17 + a8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::unordered_map<int,std::vector<int>>::unordered_map(a1 + 80, a6 + 80);
  std::unordered_map<int,int>::unordered_map(a1 + 120, a6 + 120);
  std::unordered_map<int,int>::unordered_map(a1 + 160, a6 + 160);
  *(_QWORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 200) = a5;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = &unk_1E5D34170;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_BYTE *)(a1 + 272) = 0;
  v19 = *(_QWORD *)(a6 + 56);
  if ((unint64_t)(*(_QWORD *)(a6 + 64) - v19) <= 4)
  {
    v23 = *(_DWORD **)(a1 + 64);
  }
  else
  {
    v20 = (_QWORD *)(a1 + 72);
    v21 = *(_DWORD **)(a1 + 64);
    v22 = 1;
    do
    {
      if ((unint64_t)v21 >= *v20)
      {
        v24 = *v18;
        v25 = ((char *)v21 - (_BYTE *)*v18) >> 2;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v27 = *v20 - (_QWORD)v24;
        if (v27 >> 1 > v26)
          v26 = v27 >> 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
          v28 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
        {
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 72, v28);
          v24 = *(_DWORD **)(a1 + 56);
          v21 = *(_DWORD **)(a1 + 64);
        }
        else
        {
          v29 = 0;
        }
        v30 = &v29[4 * v25];
        *(_DWORD *)v30 = *(_DWORD *)(v19 + 4 * v22);
        v23 = v30 + 4;
        while (v21 != v24)
        {
          v31 = *--v21;
          *((_DWORD *)v30 - 1) = v31;
          v30 -= 4;
        }
        *(_QWORD *)(a1 + 56) = v30;
        *(_QWORD *)(a1 + 64) = v23;
        *(_QWORD *)(a1 + 72) = &v29[4 * v28];
        if (v24)
          operator delete(v24);
      }
      else
      {
        *v21 = *(_DWORD *)(v19 + 4 * v22);
        v23 = v21 + 1;
      }
      *(_QWORD *)(a1 + 64) = v23;
      ++v22;
      v19 = *(_QWORD *)(a6 + 56);
      v21 = v23;
    }
    while (v22 < (*(_QWORD *)(a6 + 64) - v19) >> 2);
  }
  v32 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v23 >= v32)
  {
    v34 = *v18;
    v35 = ((char *)v23 - (_BYTE *)*v18) >> 2;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v37 = v32 - (_QWORD)v34;
    if (v37 >> 1 > v36)
      v36 = v37 >> 1;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
      v38 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    if (v38)
    {
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 72, v38);
      v34 = *(_DWORD **)(a1 + 56);
      v23 = *(_DWORD **)(a1 + 64);
    }
    else
    {
      v39 = 0;
    }
    v40 = &v39[4 * v35];
    v41 = &v39[4 * v38];
    *(_DWORD *)v40 = a4;
    v33 = v40 + 4;
    while (v23 != v34)
    {
      v42 = *--v23;
      *((_DWORD *)v40 - 1) = v42;
      v40 -= 4;
    }
    *(_QWORD *)(a1 + 56) = v40;
    *(_QWORD *)(a1 + 64) = v33;
    *(_QWORD *)(a1 + 72) = v41;
    if (v34)
      operator delete(v34);
  }
  else
  {
    *v23 = a4;
    v33 = v23 + 1;
  }
  *(_QWORD *)(a1 + 64) = v33;
  return a1;
}

void sub_1ADF3C26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, void **a16)
{
  uint64_t v16;
  void **v17;
  void *v19;

  kaldi::CuMatrix<float>::~CuMatrix(a10);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&a16);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a11);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a12);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table(a13);
  v19 = *v17;
  if (*v17)
  {
    *(_QWORD *)(v16 + 64) = v19;
    operator delete(v19);
  }
  a16 = a14;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Hyp::~Hyp(uint64_t a1)
{
  void *v2;
  void **v4;

  kaldi::CuMatrix<float>::~CuMatrix(a1 + 232);
  v4 = (void **)(a1 + 208);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 160);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 120);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table(a1 + 80);
  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v4 = (void **)(a1 + 8);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::StaticReadWrite<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::vector<std::string>::const_iterator v15;
  std::vector<std::string>::pointer end;
  _QWORD *v17;
  float v18;
  std::vector<std::string>::const_iterator v19;
  int v20;
  int *v21;
  unint64_t v22;
  _DWORD *v23;
  int *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  int *v30;
  char *v31;
  int v32;
  int v33;
  unint64_t v34;
  __int128 *v36;
  uint64_t v37;
  _DWORD *v38;
  __int128 *v39;
  __int128 *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  int v47;
  char *v48;
  _BYTE *v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  __int128 *v54;
  __int128 *v55;
  uint64_t v56;
  _QWORD *v57;
  void *begin;
  uint64_t value_high;
  _QWORD *v60;
  void **v61;
  uint64_t v62;
  float v63;
  BOOL v64;
  _QWORD *v65;
  void *v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  void *v72;
  void **v73;
  int v75;
  void *v76[2];
  unsigned __int8 v77;
  std::vector<std::string> v78;
  std::string v79;
  std::string v80;
  void *v81;
  __int128 *v82;
  __int128 *v83;
  void *__p[2];
  _QWORD v85[11];
  char v86;
  uint64_t v87;

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"entered StaticReadWrite final: ", 31);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" with #ActiveHyps: ", 19);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" at decoding-position: ", 23);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
  }
  v11 = kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a1 + 4952));
  memset(&v78, 0, sizeof(v78));
  v12 = *a3;
  v75 = a5;
  if (a3[1] == *a3)
  {
    v15.__i_ = 0;
    end = 0;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    do
    {
      __p[0] = 0;
      __p[1] = 0;
      v85[0] = 0;
      kaldi::quasar::InputHammer::FilterTags(a1 + 8, v12 + v13, (uint64_t)__p, a2 + 64);
      v81 = 0;
      v82 = 0;
      v83 = 0;
      if (SHIBYTE(v85[0]) < 0)
      {
        std::string::__init_copy_ctor_external(&v80, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        *(_OWORD *)&v80.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v80.__r_.__value_.__r.__words[2] = v85[0];
      }
      kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::TokenizeInputString(a1, &v80, (uint64_t *)&v81);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
      std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v78, v78.__end_, (std::string *)v81, v82, 0xAAAAAAAAAAAAAAABLL * (((char *)v82 - (_BYTE *)v81) >> 3));
      v76[0] = &v81;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v76);
      if (SHIBYTE(v85[0]) < 0)
        operator delete(__p[0]);
      ++v14;
      v12 = *a3;
      v13 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) > v14);
    v15.__i_ = v78.__begin_;
    end = v78.__end_;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v15.__i_) >> 3) <= v11 && (a5 & 1) == 0)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Input stream did not grow. Previously processed: ", 49);
      v17 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" provided: ", 11);
      std::ostream::operator<<();
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    }
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::GetCurrentBestWords(a1, (uint64_t)a4);
    __p[0] = &v78;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    return 2147500000.0;
  }
  *(_QWORD *)(a1 + 5872) = *(_QWORD *)(a1 + 5864);
  if (v11 >= 1)
  {
    v19.__i_ = &v15.__i_[v11];
    std::vector<std::string>::erase(&v78, v15, v19);
    v15.__i_ = v78.__begin_;
  }
  memset(&v79, 0, sizeof(v79));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v79, (__int128 *)v15.__i_, (__int128 *)v78.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v78.__end_ - (char *)v15.__i_) >> 3));
  v73 = (void **)(a1 + 5864);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Symbolize(a1, (uint64_t *)&v79, a1 + 5864, 0);
  __p[0] = &v79;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v78;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if ((a5 & 1) != 0)
  {
    v20 = *(_DWORD *)(*(_QWORD *)(a1 + 136) + 816) - 1;
    v21 = *(int **)(a1 + 5872);
    v22 = *(_QWORD *)(a1 + 5880);
    if ((unint64_t)v21 >= v22)
    {
      v24 = (int *)*v73;
      v25 = ((char *)v21 - (_BYTE *)*v73) >> 2;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v27 = v22 - (_QWORD)v24;
      if (v27 >> 1 > v26)
        v26 = v27 >> 1;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
        v28 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
      {
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 5880, v28);
        v21 = *(int **)(a1 + 5872);
        v24 = *(int **)(a1 + 5864);
      }
      else
      {
        v29 = 0;
      }
      v30 = (int *)&v29[4 * v25];
      v31 = &v29[4 * v28];
      *v30 = v20;
      v23 = v30 + 1;
      while (v21 != v24)
      {
        v32 = *--v21;
        *--v30 = v32;
      }
      *(_QWORD *)(a1 + 5864) = v30;
      *(_QWORD *)(a1 + 5872) = v23;
      *(_QWORD *)(a1 + 5880) = v31;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *v21 = v20;
      v23 = v21 + 1;
    }
    *(_QWORD *)(a1 + 5872) = v23;
  }
  if (*(_DWORD *)(a1 + 5836))
    v33 = 0;
  else
    v33 = *(_DWORD *)(a2 + 296);
  LODWORD(v34) = *(_DWORD *)(a2 + 300);
  if ((int)v34 + v33 <= (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 5872) - *(_QWORD *)(a1 + 5864)) >> 2) || a5 != 0)
  {
    v72 = (void *)*MEMORY[0x1E0DE4F50];
    v70 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    v71 = *(void **)(MEMORY[0x1E0DE4F50] + 64);
    v69 = MEMORY[0x1E0DE4FB8] + 16;
    while (1)
    {
      v81 = 0;
      v82 = 0;
      v83 = 0;
      if ((int)v34 + v33 >= 1)
      {
        v36 = 0;
        v37 = 0;
        while (1)
        {
          v38 = *(_DWORD **)(a1 + 5864);
          if (v37 >= (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 5872) - (_QWORD)v38) >> 2))
            break;
          if (v36 >= v83)
          {
            v40 = (__int128 *)v81;
            v41 = ((char *)v36 - (_BYTE *)v81) >> 2;
            v42 = v41 + 1;
            if ((unint64_t)(v41 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v43 = (char *)v83 - (_BYTE *)v81;
            if (((char *)v83 - (_BYTE *)v81) >> 1 > v42)
              v42 = v43 >> 1;
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
              v44 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v44 = v42;
            if (v44)
            {
              v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v83, v44);
              v40 = (__int128 *)v81;
              v36 = v82;
            }
            else
            {
              v45 = 0;
            }
            v46 = &v45[4 * v41];
            *(_DWORD *)v46 = v38[v37];
            v39 = (__int128 *)(v46 + 4);
            while (v36 != v40)
            {
              v47 = *((_DWORD *)v36 - 1);
              v36 = (__int128 *)((char *)v36 - 4);
              *((_DWORD *)v46 - 1) = v47;
              v46 -= 4;
            }
            v81 = v46;
            v82 = v39;
            v83 = (__int128 *)&v45[4 * v44];
            if (v40)
              operator delete(v40);
          }
          else
          {
            *(_DWORD *)v36 = v38[v37];
            v39 = (__int128 *)((char *)v36 + 4);
          }
          v82 = v39;
          ++v37;
          v36 = v39;
          if (v37 >= *(int *)(a2 + 300) + (uint64_t)v33)
          {
            v38 = *v73;
            break;
          }
        }
        if ((_DWORD)v37)
        {
          v48 = (char *)&v38[v37];
          v49 = *(_BYTE **)(a1 + 5872);
          v50 = v49 - v48;
          if (v49 != v48)
            memmove(v38, v48, v49 - v48);
          *(_QWORD *)(a1 + 5872) = (char *)v38 + v50;
        }
      }
      v51 = kaldi::g_kaldi_verbose_level;
      v52 = v75;
      if (kaldi::g_kaldi_verbose_level < 5)
        goto LABEL_99;
      v53 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 552);
      if (v53)
        break;
LABEL_100:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"src_input_host_[0].NumRows(): ", 30);
      kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a1 + 4952));
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
LABEL_101:
      kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Read<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, (uint64_t)&v81, 0, 0.0);
      if (v52 && *(_QWORD *)(a1 + 5872) == *(_QWORD *)(a1 + 5864))
        v63 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Write<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *(_DWORD *)(a1 + 5188) - *(_DWORD *)(a1 + 5836), 1);
      else
        v63 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Write<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, *(_DWORD *)(a2 + 300), 0);
      v18 = v63;
      if (*(_BYTE *)(a2 + 304))
        kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::PruneCurrentHyps(a1, 1);
      v64 = !v52 || *(_QWORD *)(a1 + 5872) != *(_QWORD *)(a1 + 5864);
      if (v81)
      {
        v82 = (__int128 *)v81;
        operator delete(v81);
      }
      if (v64)
      {
        v33 = 0;
        v34 = *(int *)(a2 + 300);
        if (v34 <= (uint64_t)(*(_QWORD *)(a1 + 5872) - *(_QWORD *)(a1 + 5864)) >> 2 || v52)
          continue;
      }
      goto LABEL_118;
    }
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
    v55 = (__int128 *)v81;
    v54 = v82;
    while (v55 != v54)
    {
      v56 = *(int *)v55;
      v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)" ", 1);
      (*(void (**)(std::vector<std::string> *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v53 + 88))(&v78, v53, v56 + 1);
      if (SHIBYTE(v78.__end_cap_.__value_) >= 0)
        begin = &v78;
      else
        begin = v78.__begin_;
      if (SHIBYTE(v78.__end_cap_.__value_) >= 0)
        value_high = HIBYTE(v78.__end_cap_.__value_);
      else
        value_high = (uint64_t)v78.__end_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)begin, value_high);
      if (SHIBYTE(v78.__end_cap_.__value_) < 0)
        operator delete(v78.__begin_);
      v55 = (__int128 *)((char *)v55 + 4);
    }
    v52 = v75;
    if (kaldi::g_kaldi_verbose_level > 4)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v78, 5);
      v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78, (uint64_t)"partial_input_addition:", 23);
      std::stringbuf::str();
      if ((v77 & 0x80u) == 0)
        v61 = v76;
      else
        v61 = (void **)v76[0];
      if ((v77 & 0x80u) == 0)
        v62 = v77;
      else
        v62 = (uint64_t)v76[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)v61, v62);
      if ((char)v77 < 0)
        operator delete(v76[0]);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v78);
    }
    __p[0] = v72;
    *(void **)((char *)__p + *((_QWORD *)v72 - 3)) = v71;
    v85[0] = v70;
    v85[1] = v69;
    if (v86 < 0)
      operator delete((void *)v85[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1AF44D094](&v87);
    v51 = kaldi::g_kaldi_verbose_level;
LABEL_99:
    if (v51 < 0)
      goto LABEL_101;
    goto LABEL_100;
  }
  v18 = 2147500000.0;
LABEL_118:
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::GetCurrentBestWords(a1, (uint64_t)a4);
  if (kaldi::g_kaldi_verbose_level >= 5)
  {
    memset(&v78, 0, sizeof(v78));
    kaldi::JoinVectorToString<std::string>(a4, " ", (uint64_t)&v78);
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
      v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"partial_output: ", 16);
      if (SHIBYTE(v78.__end_cap_.__value_) >= 0)
        v66 = &v78;
      else
        v66 = v78.__begin_;
      if (SHIBYTE(v78.__end_cap_.__value_) >= 0)
        v67 = HIBYTE(v78.__end_cap_.__value_);
      else
        v67 = (uint64_t)v78.__end_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)v66, v67);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    }
    if (SHIBYTE(v78.__end_cap_.__value_) < 0)
      operator delete(v78.__begin_);
  }
  return v18;
}

void sub_1ADF3CC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::TokenizeInputString(uint64_t a1, const std::string *a2, uint64_t *a3)
{
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  void **v8[34];
  void **v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12[3];

  if (*(_DWORD *)(a1 + 5244) == 1)
  {
    memset(v12, 0, sizeof(v12));
    kaldi::SplitStringToVector(a2, " ", 1, (uint64_t)v12);
    kaldi::quasar::BPE::Apply(a1 + 152, v12, a3);
    v9 = 0;
    v10 = 0;
    v11 = 0;
    kaldi::JoinVectorToString<std::string>(a3, " ", (uint64_t)&v9);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"BPE input ", 10);
      if (v11 >= 0)
        v6 = (void **)&v9;
      else
        v6 = v9;
      if (v11 >= 0)
        v7 = HIBYTE(v11);
      else
        v7 = v10;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v8);
    }
    if (SHIBYTE(v11) < 0)
      operator delete(v9);
    v8[0] = (void **)v12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v8);
  }
  else
  {
    kaldi::SplitStringToVector(a2, " ", 1, (uint64_t)a3);
  }
}

void sub_1ADF3CF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  if (*(char *)(v9 - 57) < 0)
    operator delete(*(void **)(v9 - 80));
  a9 = (void **)(v9 - 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

__n128 kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::GetCurrentBestWords(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  __n128 result;
  unint64_t v10;
  __n128 *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  std::string *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  std::string *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  std::string *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  std::string *v30;
  std::string *v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  std::string *v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  std::string *v39;
  __int128 v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  std::string __p;
  std::string v51;
  std::__split_buffer<std::string> __v;

  v4 = *(_QWORD **)(a1 + 5784);
  if (*(_QWORD **)(a1 + 5792) == v4)
    v5 = (unsigned int *)(a1 + 5832);
  else
    v5 = (unsigned int *)(*v4 + 32);
  v6 = *v5;
  if ((int)v6 < 1)
    return result;
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a2);
  do
  {
    if (*(_DWORD *)(a1 + 5248) == 1)
    {
      (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 136) + 560)
                                                                         + 88))(&v51, *(_QWORD *)(*(_QWORD *)(a1 + 136) + 560), *(int *)(*(_QWORD *)(a1 + 5808) + 8 * v6 + 4) + 1);
      if (kaldi::quasar::BPE::IsIntraWord(a1 + 152, (uint64_t **)&v51))
      {
        kaldi::quasar::BPE::StripSeparator(a1 + 152, &v51, &__p);
        v8 = *(__n128 **)(a2 + 8);
        v7 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v8 >= v7)
        {
          v21 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - *(_QWORD *)a2) >> 3);
          v22 = v21 + 1;
          if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *(_QWORD *)a2) >> 3);
          if (2 * v23 > v22)
            v22 = 2 * v23;
          if (v23 >= 0x555555555555555)
            v24 = 0xAAAAAAAAAAAAAAALL;
          else
            v24 = v22;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
          if (v24)
            v25 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v24);
          else
            v25 = 0;
          v35 = v25 + v21;
          __v.__first_ = v25;
          __v.__begin_ = v35;
          __v.__end_cap_.__value_ = &v25[v24];
          v36 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v35->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
          memset(&__p, 0, sizeof(__p));
          __v.__end_ = v35 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
          v37 = *(_QWORD *)(a2 + 8);
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          v38 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          *(_QWORD *)(a2 + 8) = v37;
          if (v38 < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        else
        {
          result = *(__n128 *)&__p.__r_.__value_.__l.__data_;
          v8[1].n128_u64[0] = __p.__r_.__value_.__r.__words[2];
          *v8 = result;
          *(_QWORD *)(a2 + 8) = (char *)v8 + 24;
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, " ");
        v13 = *(_QWORD *)(a2 + 8);
        v12 = *(_QWORD *)(a2 + 16);
        if (v13 >= v12)
        {
          v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *(_QWORD *)a2) >> 3);
          v27 = v26 + 1;
          if (v26 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *(_QWORD *)a2) >> 3);
          if (2 * v28 > v27)
            v27 = 2 * v28;
          if (v28 >= 0x555555555555555)
            v29 = 0xAAAAAAAAAAAAAAALL;
          else
            v29 = v27;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
          if (v29)
            v30 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v29);
          else
            v30 = 0;
          v39 = v30 + v26;
          __v.__first_ = v30;
          __v.__begin_ = v39;
          __v.__end_cap_.__value_ = &v30[v29];
          v40 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v39->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
          memset(&__p, 0, sizeof(__p));
          __v.__end_ = v39 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
          v15 = *(std::string **)(a2 + 8);
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
          v41 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          *(_QWORD *)(a2 + 8) = v15;
          if (v41 < 0)
          {
            operator delete(__p.__r_.__value_.__l.__data_);
            v15 = *(std::string **)(a2 + 8);
          }
        }
        else
        {
          v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v13 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)v13 = v14;
          v15 = (std::string *)(v13 + 24);
          *(_QWORD *)(a2 + 8) = v13 + 24;
        }
        if ((unint64_t)v15 >= *(_QWORD *)(a2 + 16))
        {
          v42 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, (__int128 *)&v51);
        }
        else
        {
          if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v15, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
          }
          else
          {
            result = *(__n128 *)&v51.__r_.__value_.__l.__data_;
            v15->__r_.__value_.__r.__words[2] = v51.__r_.__value_.__r.__words[2];
            *(__n128 *)&v15->__r_.__value_.__l.__data_ = result;
          }
          v42 = (uint64_t)&v15[1];
          *(_QWORD *)(a2 + 8) = v15 + 1;
        }
        *(_QWORD *)(a2 + 8) = v42;
      }
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_55;
    }
    else
    {
      (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 136) + 560)
                                                                         + 88))(&v51, *(_QWORD *)(*(_QWORD *)(a1 + 136) + 560), *(int *)(*(_QWORD *)(a1 + 5808) + 8 * v6 + 4) + 1);
      v11 = *(__n128 **)(a2 + 8);
      v10 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v11 < v10)
      {
        result = *(__n128 *)&v51.__r_.__value_.__l.__data_;
        v11[1].n128_u64[0] = v51.__r_.__value_.__r.__words[2];
        *v11 = result;
        *(_QWORD *)(a2 + 8) = (char *)v11 + 24;
        goto LABEL_56;
      }
      v16 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - *(_QWORD *)a2) >> 3);
      v17 = v16 + 1;
      if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *(_QWORD *)a2) >> 3);
      if (2 * v18 > v17)
        v17 = 2 * v18;
      if (v18 >= 0x555555555555555)
        v19 = 0xAAAAAAAAAAAAAAALL;
      else
        v19 = v17;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v19)
        v20 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a2 + 16, v19);
      else
        v20 = 0;
      v31 = v20 + v16;
      __v.__first_ = v20;
      __v.__begin_ = v31;
      __v.__end_cap_.__value_ = &v20[v19];
      v32 = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
      v31->__r_.__value_.__r.__words[2] = v51.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
      memset(&v51, 0, sizeof(v51));
      __v.__end_ = v31 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
      v33 = *(_QWORD *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
      v34 = SHIBYTE(v51.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(a2 + 8) = v33;
      if (v34 < 0)
LABEL_55:
        operator delete(v51.__r_.__value_.__l.__data_);
    }
LABEL_56:
    v6 = *(unsigned int *)(*(_QWORD *)(a1 + 5808) + 8 * v6);
  }
  while ((int)v6 > 0);
  v44 = *(_QWORD *)a2;
  v43 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 != v43)
  {
    v45 = v43 - 24;
    if (v45 > v44)
    {
      v46 = v44 + 24;
      do
      {
        v47 = *(_QWORD *)(v46 - 8);
        result = *(__n128 *)(v46 - 24);
        v48 = *(_QWORD *)(v45 + 16);
        *(_OWORD *)(v46 - 24) = *(_OWORD *)v45;
        *(_QWORD *)(v46 - 8) = v48;
        *(__n128 *)v45 = result;
        *(_QWORD *)(v45 + 16) = v47;
        v45 -= 24;
        v49 = v46 >= v45;
        v46 += 24;
      }
      while (!v49);
    }
  }
  return result;
}

void sub_1ADF3D3F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::__split_buffer<std::wstring> *a22)
{
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v22 + 8) = v23;
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Symbolize(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  unint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[35];

  v4 = *a2;
  v5 = a2[1] - *a2;
  if (v5)
  {
    v10 = 0;
    v11 = *(_QWORD *)(a1 + 136);
    v12 = *(_QWORD *)(v11 + 552);
    v13 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    v14 = *(_DWORD *)(v11 + 820);
    v46 = a4 + 16;
    v47 = a3 + 16;
    do
    {
      v15 = v13 + ~(_DWORD)v10;
      if (!*(_BYTE *)(*(_QWORD *)(a1 + 136) + 1504))
        v15 = v10;
      v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 96))(v12, v4 + 24 * v15);
      if (v16 == -1)
      {
        if (a4)
        {
          v18 = *(_DWORD **)(a4 + 8);
          v17 = *(_QWORD *)(a4 + 16);
          if ((unint64_t)v18 >= v17)
          {
            v20 = *(_DWORD **)a4;
            v21 = ((uint64_t)v18 - *(_QWORD *)a4) >> 2;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v23 = v17 - (_QWORD)v20;
            if (v23 >> 1 > v22)
              v22 = v23 >> 1;
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
              v24 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v24 = v22;
            if (v24)
            {
              v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v46, v24);
              v20 = *(_DWORD **)a4;
              v18 = *(_DWORD **)(a4 + 8);
            }
            else
            {
              v25 = 0;
            }
            v26 = &v25[4 * v21];
            *(_DWORD *)v26 = v10;
            v19 = v26 + 4;
            while (v18 != v20)
            {
              v27 = *--v18;
              *((_DWORD *)v26 - 1) = v27;
              v26 -= 4;
            }
            *(_QWORD *)a4 = v26;
            *(_QWORD *)(a4 + 8) = v19;
            *(_QWORD *)(a4 + 16) = &v25[4 * v24];
            if (v20)
              operator delete(v20);
          }
          else
          {
            *v18 = v10;
            v19 = v18 + 1;
          }
          *(_QWORD *)(a4 + 8) = v19;
        }
        v16 = v14;
        if (v14 == -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v48);
          v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Couldn't find symbol ", 21);
          v41 = *a2 + 24 * v10;
          v42 = *(char *)(v41 + 23);
          if (v42 >= 0)
            v43 = *a2 + 24 * v10;
          else
            v43 = *(_QWORD *)v41;
          if (v42 >= 0)
            v44 = *(unsigned __int8 *)(v41 + 23);
          else
            v44 = *(_QWORD *)(v41 + 8);
          v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v43, v44);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(v45, " or <unk> UNK symbol");
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v48);
        }
      }
      v28 = v16 - 1;
      v30 = *(_DWORD **)(a3 + 8);
      v29 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v30 >= v29)
      {
        v32 = *(_DWORD **)a3;
        v33 = ((uint64_t)v30 - *(_QWORD *)a3) >> 2;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v35 = v29 - (_QWORD)v32;
        if (v35 >> 1 > v34)
          v34 = v35 >> 1;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL)
          v36 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        if (v36)
        {
          v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v47, v36);
          v32 = *(_DWORD **)a3;
          v30 = *(_DWORD **)(a3 + 8);
        }
        else
        {
          v37 = 0;
        }
        v38 = &v37[4 * v33];
        *(_DWORD *)v38 = v28;
        v31 = v38 + 4;
        while (v30 != v32)
        {
          v39 = *--v30;
          *((_DWORD *)v38 - 1) = v39;
          v38 -= 4;
        }
        *(_QWORD *)a3 = v38;
        *(_QWORD *)(a3 + 8) = v31;
        *(_QWORD *)(a3 + 16) = &v37[4 * v36];
        if (v32)
          operator delete(v32);
      }
      else
      {
        *v30 = v28;
        v31 = v30 + 1;
      }
      *(_QWORD *)(a3 + 8) = v31;
      ++v10;
      v4 = *a2;
      v13 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
    }
    while (v10 != v13);
  }
}

void sub_1ADF3D714(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Read<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, float a5)
{
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v29[3];
  void *__p;
  void *v31;
  uint64_t v32;
  int32x2_t v33;
  __int128 v34;
  __int128 v35;
  char v36;

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v33, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"entered Read to process #tokens: ", 33);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v33);
  }
  v10 = (uint64_t *)(a1 + 4952);
  v11 = *(_QWORD *)(a1 + 4952);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 4960) - v11) >> 3) <= a4)
  {
    std::vector<kaldi::Matrix<float>>::resize((uint64_t *)(a1 + 4952), a4 + 1);
    v11 = *v10;
  }
  v35 = 0u;
  v34 = 0u;
  v33 = (int32x2_t)&unk_1E5D34170;
  v36 = 0;
  v12 = kaldi::MatrixBase<float>::NumRows(v11 + 40 * a4);
  kaldi::Matrix<float>::Resize((int32x2_t *)(*v10 + 40 * a4), v12 + ((*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2), 1, 2, 0);
  v13 = *(int **)a3;
  v14 = *v10;
  v15 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v15)
  {
    v16 = v15 >> 2;
    v17 = (uint64_t *)(v14 + 40 * a4);
    v18 = *((_DWORD *)v17 + 2);
    v19 = *v17;
    v20 = *((int *)v17 + 4);
    v21 = v12;
    if ((unint64_t)(v15 >> 2) <= 1)
      v16 = 1;
    v22 = (float *)(v19 + 4 * (int)v20 * (uint64_t)v12);
    v23 = 4 * v20;
    do
    {
      v24 = *v13++;
      *v22 = (float)v24;
      v22 = (float *)((char *)v22 + v23);
      ++v21;
      --v16;
    }
    while (v16);
  }
  else
  {
    v18 = *(_DWORD *)(v14 + 40 * a4 + 8);
  }
  kaldi::SubMatrix<float>::SubMatrix((uint64_t)&__p, v14 + 40 * a4, v12, (unint64_t)v15 >> 2, 0, v18);
  kaldi::CuMatrix<float>::operator=(&v33, (int *)&__p);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
  v25 = *(_QWORD *)(a1 + 136);
  if (v12)
    kaldi::quasar::Encdec::EncFeedforward();
  v26 = *(unsigned int *)(a2 + 288);
  v27 = *(unsigned int *)(a2 + 292);
  __p = 0;
  v31 = 0;
  v32 = 0;
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::SuppressedIds(a1, a2 + 64, a2 + 88, (uint64_t *)(a2 + 328), (uint64_t)v29);
  kaldi::quasar::Encdec::ConstrainSoftmax(v25, a2 + 264, v26, v27, (int **)a3, (int **)&__p, v29);
  std::__tree<int>::destroy((uint64_t)v29, (_QWORD *)v29[1]);
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
  kaldi::quasar::Encdec::ResetHistoryState(*(kaldi::quasar::Encdec **)(a1 + 136));
  if (*(_DWORD *)(a2 + 300))
    kaldi::quasar::Encdec::EncFeedforward();
  kaldi::quasar::Encdec::StartFeedforward(*(_QWORD *)(a1 + 136), (uint64_t)&v33, a4, 0);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::AddInitialHypToCurrent<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a4, a5);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v33);
}

void sub_1ADF3D9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  std::__tree<int>::destroy((uint64_t)&a9, a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::PruneCurrentHyps(uint64_t a1, int a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 5792);
  v5 = *(_QWORD *)(a1 + 5784);
  v6 = (v4 - v5) >> 3;
  if (v6 > a2)
  {
    v7 = a2;
    do
    {
      v8 = *(_QWORD *)(v5 + 8 * v7);
      if (v8)
      {
        v9 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Hyp::~Hyp(v8);
        MEMORY[0x1AF44D190](v9, 0x10B0C406F3D429DLL);
        v4 = *(_QWORD *)(a1 + 5792);
        v5 = *(_QWORD *)(a1 + 5784);
      }
      ++v7;
    }
    while (v7 < (v4 - v5) >> 3);
    v6 = (v4 - v5) >> 3;
  }
  if (v6 > v3)
    std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize(a1 + 5784, v3);
}

void std::__variant_detail::__visitation::__variant::__value_visitor<void kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::GetRawNbest<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,std::vector<kaldi::quasar::TranslationUtil::NbestElement> *)::{lambda(fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>&&)#1}>::operator()[abi:ne180100]<std::__variant_detail::__alt<0ul,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>> &>(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)(*a1)[1];
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::LatticeToNbest<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a2, **a1, *(_QWORD *)(a2 + 5712), v3, 0, 0);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::JoinBPEUnitsInNbestList(a2, (uint64_t)v3);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::LatticeToNbest<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  __n128 v22;
  _BOOL4 v23;
  uint64_t *v24;
  int v25;
  _DWORD *v26;
  _DWORD *v27;
  float v28;
  float v29;
  _DWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  int v37;
  uint64_t v38;
  _DWORD *v39;
  char *v40;
  char *v41;
  _DWORD *v42;
  _DWORD *v43;
  int v44;
  char *v45;
  _DWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int v54;
  int v55;
  char *v56;
  _DWORD *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  int v65;
  char *v66;
  _DWORD *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  int v75;
  int v76;
  _BOOL4 v77;
  int v78;
  _QWORD **v79;
  _QWORD *v80;
  _QWORD **v81;
  BOOL v82;
  _QWORD *v83;
  _QWORD *v84;
  std::string *v85;
  std::string::size_type size;
  std::string *v87;
  std::string *v88;
  char *v89;
  std::string::size_type v90;
  float v91;
  float v92;
  _DWORD *v93;
  _DWORD *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t result;
  int v100;
  uint64_t *v101;
  uint64_t v102;
  int v104;
  _BYTE *v105;
  std::string __p;
  float v108;
  float v109;
  std::string::size_type v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  _QWORD v114[3];
  char v115[96];
  std::string v116;
  int v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  _QWORD v122[8];
  __int128 v123;
  _QWORD v124[8];
  uint64_t v125;
  uint64_t v126;
  void *v127;
  _BYTE *v128;
  uint64_t v129;
  unsigned int v130;
  void *__src;
  _DWORD *v132;
  unint64_t v133;
  uint64_t v134;
  std::string *v135;
  unint64_t v136;
  _QWORD **v137;
  _QWORD *v138[2];
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  std::string::size_type v144;
  void *v145[3];
  int32x2_t v146;
  void *v147;
  void *v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  float v152;
  int v153;

  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst(&v150);
  v10 = *(_DWORD *)(a2 + 172);
  if (v10 <= 0)
    v10 = *(_DWORD *)(a2 + 160);
  v146 = vdup_n_s32(0x7F800000u);
  v148 = 0;
  v149 = 0;
  v147 = 0;
  fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(a3, (uint64_t)&v150, v10 + 1, 0, 0, (uint64_t *)&v146, -1, 0);
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  fst::ShortestDistance<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>((uint64_t)&v150, (uint64_t)&v144, 0.00097656);
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst(&v142);
  v140 = 0;
  v139 = 0;
  v141 = 0;
  fst::ConvertNbestToVector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>((uint64_t)&v150, &v139);
  v11 = kaldi::quasar::TorchEncoderDecoder::OutputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SuppressedIds(a1, a2 + 64, a2 + 88, (uint64_t *)(a2 + 328), (uint64_t)&v137);
  v12 = v140;
  v13 = v139;
  if (v140 == v139 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Didn't extract any paths from the lattice", 41);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
    v12 = v140;
    v13 = v139;
  }
  if (v12 != v13)
  {
    v14 = 0;
    v105 = (_BYTE *)(a1 + 5236);
    v101 = a4;
    do
    {
      v15 = (_QWORD *)(v13 + 16 * v14);
      fst::ShortestDistance<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>((uint64_t)v15, (uint64_t)&__p, 0.00097656);
      v144 = __p.__r_.__value_.__r.__words[0];
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v145, (char *)__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__r.__words[2], (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__l.__size_) >> 2);
      v102 = v14;
      if (__p.__r_.__value_.__l.__size_)
      {
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
        operator delete((void *)__p.__r_.__value_.__l.__size_);
      }
      v135 = 0;
      v134 = 0;
      v136 = 0;
      v16 = (*(uint64_t (**)(_QWORD *))(*v15 + 24))(v15);
      v17 = 0;
      v132 = 0;
      __src = 0;
      v104 = 1;
      v18 = 0.0;
      v19 = 0.0;
      v20 = 0.0;
      v133 = 0;
      v21 = 0.0;
      while (1)
      {
        (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(*v15 + 32))(&__p, v15, v16);
        LODWORD(v125) = HIDWORD(__p.__r_.__value_.__r.__words[0]);
        LODWORD(v116.__r_.__value_.__l.__data_) = __p.__r_.__value_.__l.__data_;
        v153 = 2139095040;
        v152 = INFINITY;
        v22.n128_u32[0] = (unsigned __int32)__p.__r_.__value_.__l.__data_;
        if (*(float *)&__p.__r_.__value_.__l.__data_ == INFINITY)
        {
          v22.n128_u32[0] = v125;
          v23 = *(float *)&v125 == v152;
        }
        else
        {
          v23 = 0;
        }
        if (__p.__r_.__value_.__l.__size_)
        {
          __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
          operator delete((void *)__p.__r_.__value_.__l.__size_);
        }
        if (!v23)
          break;
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15[1] + 64) + 8 * (int)v16) + 56) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15[1] + 64) + 8 * (int)v16) + 48))
          v24 = 0;
        else
          v24 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v15[1] + 64) + 8 * (int)v16) + 48);
        v125 = *v24;
        v126 = v24[1];
        v128 = 0;
        v129 = 0;
        v127 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v127, (const void *)v24[2], v24[3], (v24[3] - v24[2]) >> 2);
        v16 = *((unsigned int *)v24 + 10);
        v130 = v16;
        if ((v125 & 0x80000000) != 0)
        {
          v104 = -(int)v125;
          LODWORD(v125) = 0;
        }
        v25 = HIDWORD(v125);
        if (!HIDWORD(v125))
        {
          v29 = *((float *)&v126 + 1);
          v28 = *(float *)&v126;
          v18 = v18 + *(float *)&v126;
          v19 = v19 + *((float *)&v126 + 1);
          goto LABEL_137;
        }
        v26 = v132;
        if ((unint64_t)v132 >= v133)
        {
          v30 = __src;
          v31 = ((char *)v132 - (_BYTE *)__src) >> 2;
          v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v33 = v133 - (_QWORD)__src;
          if ((uint64_t)(v133 - (_QWORD)__src) >> 1 > v32)
            v32 = v33 >> 1;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
            v34 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v34 = v32;
          if (v34)
          {
            v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v133, v34);
            v26 = v132;
            v30 = __src;
            v25 = HIDWORD(v125);
          }
          else
          {
            v35 = 0;
          }
          v36 = &v35[4 * v31];
          *(_DWORD *)v36 = v25;
          v27 = v36 + 4;
          while (v26 != v30)
          {
            v37 = *--v26;
            *((_DWORD *)v36 - 1) = v37;
            v36 -= 4;
          }
          __src = v36;
          v132 = v27;
          v133 = (unint64_t)&v35[4 * v34];
          if (v30)
            operator delete(v30);
        }
        else
        {
          *v132 = HIDWORD(v125);
          v27 = v26 + 1;
        }
        v132 = v27;
        memset(&v116, 0, sizeof(v116));
        v118 = 0u;
        v119 = 0u;
        v120 = 0u;
        v121 = 0u;
        memset(v122, 0, sizeof(v122));
        v123 = 0u;
        memset(v124, 0, 60);
        v39 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v122[1], 1uLL);
        v40 = (char *)v122[0];
        v41 = (char *)*((_QWORD *)&v121 + 1);
        *v39 = v125;
        v42 = v39 + 1;
        v43 = v39;
        while (v40 != v41)
        {
          v44 = *((_DWORD *)v40 - 1);
          v40 -= 4;
          *--v43 = v44;
        }
        *((_QWORD *)&v121 + 1) = v43;
        v122[0] = v39 + 1;
        v122[1] = &v39[v38];
        if (v41)
          operator delete(v41);
        v122[0] = v42;
        v45 = (char *)v124[5];
        if (v124[5] >= v124[6])
        {
          v47 = (char *)v124[4];
          v48 = (uint64_t)(v124[5] - v124[4]) >> 2;
          v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v50 = v124[6] - v124[4];
          if ((uint64_t)(v124[6] - v124[4]) >> 1 > v49)
            v49 = v50 >> 1;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
            v51 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v51 = v49;
          if (v51)
          {
            v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v124[6], v51);
            v45 = (char *)v124[5];
            v47 = (char *)v124[4];
          }
          else
          {
            v52 = 0;
          }
          v53 = &v52[4 * v48];
          *(_DWORD *)v53 = HIDWORD(v125);
          v46 = v53 + 4;
          while (v45 != v47)
          {
            v54 = *((_DWORD *)v45 - 1);
            v45 -= 4;
            *((_DWORD *)v53 - 1) = v54;
            v53 -= 4;
          }
          v124[4] = v53;
          v124[5] = v46;
          v124[6] = &v52[4 * v51];
          if (v47)
            operator delete(v47);
        }
        else
        {
          *(_DWORD *)v124[5] = HIDWORD(v125);
          v46 = v45 + 4;
        }
        v124[5] = v46;
        v55 = HIDWORD(v126);
        v56 = (char *)v124[2];
        if (v124[2] >= v124[3])
        {
          v58 = (char *)v124[1];
          v59 = (uint64_t)(v124[2] - v124[1]) >> 2;
          v60 = v59 + 1;
          if ((unint64_t)(v59 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v61 = v124[3] - v124[1];
          if ((uint64_t)(v124[3] - v124[1]) >> 1 > v60)
            v60 = v61 >> 1;
          if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
            v62 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v62 = v60;
          if (v62)
          {
            v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v124[3], v62);
            v56 = (char *)v124[2];
            v58 = (char *)v124[1];
          }
          else
          {
            v63 = 0;
          }
          v64 = &v63[4 * v59];
          *(_DWORD *)v64 = v55;
          v57 = v64 + 4;
          while (v56 != v58)
          {
            v65 = *((_DWORD *)v56 - 1);
            v56 -= 4;
            *((_DWORD *)v64 - 1) = v65;
            v64 -= 4;
          }
          v124[1] = v64;
          v124[2] = v57;
          v124[3] = &v63[4 * v62];
          if (v58)
            operator delete(v58);
        }
        else
        {
          *(_DWORD *)v124[2] = HIDWORD(v126);
          v57 = v56 + 4;
        }
        v124[2] = v57;
        v122[6] = v122[5];
        memset(&__p, 0, sizeof(__p));
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v127, (uint64_t)v128, (v128 - (_BYTE *)v127) >> 2);
        if (v122[5])
        {
          v122[6] = v122[5];
          operator delete((void *)v122[5]);
        }
        *(std::string *)&v122[5] = __p;
        v66 = (char *)*((_QWORD *)&v123 + 1);
        if (*((_QWORD *)&v123 + 1) >= v124[0])
        {
          v68 = (char *)v123;
          v69 = (uint64_t)(*((_QWORD *)&v123 + 1) - v123) >> 2;
          v70 = v69 + 1;
          if ((unint64_t)(v69 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v71 = v124[0] - v123;
          if ((uint64_t)(v124[0] - v123) >> 1 > v70)
            v70 = v71 >> 1;
          if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
            v72 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v72 = v70;
          if (v72)
          {
            v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v124, v72);
            v66 = (char *)*((_QWORD *)&v123 + 1);
            v68 = (char *)v123;
          }
          else
          {
            v73 = 0;
          }
          v74 = &v73[4 * v69];
          *(_DWORD *)v74 = v17;
          v67 = v74 + 4;
          while (v66 != v68)
          {
            v75 = *((_DWORD *)v66 - 1);
            v66 -= 4;
            *((_DWORD *)v74 - 1) = v75;
            v74 -= 4;
          }
          *(_QWORD *)&v123 = v74;
          *((_QWORD *)&v123 + 1) = v67;
          v124[0] = &v73[4 * v72];
          if (v68)
            operator delete(v68);
        }
        else
        {
          **((_DWORD **)&v123 + 1) = v17;
          v67 = v66 + 4;
        }
        *((_QWORD *)&v123 + 1) = v67;
        v29 = *((float *)&v126 + 1);
        v28 = *(float *)&v126;
        *(_QWORD *)&v121 = v126;
        v117 = HIDWORD(v125) - 1;
        if (HIDWORD(v125) == *(_DWORD *)(a1 + 5184) + 1)
        {
          v76 = *(unsigned __int8 *)(a2 + 307);
          v77 = *(_BYTE *)(a2 + 307) == 0;
          if (a5 && *v105 && !*(_BYTE *)(a2 + 307))
          {
            if (!*(_BYTE *)(a1 + 5240)
              || !kaldi::quasar::PhraseBook::Find(*(_QWORD **)(a1 + 392), *a5 + 24 * (int)v125, (uint64_t)&v116))
            {
              std::string::operator=(&v116, (const std::string *)(*a5 + 24 * (int)v125));
            }
            if (v11)
            {
              v78 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v11 + 96))(v11, &v116);
              if (v78 != -1)
                v117 = v78 - 1;
            }
            goto LABEL_114;
          }
          if (a6 && *v105)
          {
            v89 = *(char **)a6;
            v117 = *(_DWORD *)(*(_QWORD *)a6 + 4 * (int)v125);
            if (!v76)
            {
              (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 88))(&__p, v11, *(int *)&v89[4 * (int)v125] + 1);
              goto LABEL_111;
            }
            goto LABEL_114;
          }
        }
        else
        {
          v77 = *(_BYTE *)(a2 + 307) == 0;
        }
        if (v11 && v77)
        {
          (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v11 + 88))(&__p, v11);
LABEL_111:
          if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v116.__r_.__value_.__l.__data_);
          v116 = __p;
        }
LABEL_114:
        v79 = v137;
        if (v137 != v138)
        {
          while (*((_DWORD *)v79 + 7) != v117)
          {
            v80 = v79[1];
            if (v80)
            {
              do
              {
                v81 = (_QWORD **)v80;
                v80 = (_QWORD *)*v80;
              }
              while (v80);
            }
            else
            {
              do
              {
                v81 = (_QWORD **)v79[2];
                v82 = *v81 == v79;
                v79 = v81;
              }
              while (!v82);
            }
            v79 = v81;
            if (v81 == v138)
              goto LABEL_133;
          }
          if (v79 != v138)
          {
            if (kaldi::g_kaldi_verbose_level >= 5)
            {
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown replacement disabled for: ", 34);
              v83 = (_QWORD *)std::ostream::operator<<();
              v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)" / ", 3);
              if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v85 = &v116;
              else
                v85 = (std::string *)v116.__r_.__value_.__r.__words[0];
              if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v116.__r_.__value_.__r.__words[2]);
              else
                size = v116.__r_.__value_.__l.__size_;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)v85, size);
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
            }
            MEMORY[0x1AF44C914](&v116, "");
            v117 = *(_DWORD *)(a1 + 5184);
          }
        }
LABEL_133:
        v87 = v135;
        if ((unint64_t)v135 >= v136)
        {
          v88 = (std::string *)std::vector<kaldi::quasar::TranslationUtil::PathElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::PathElement const&>(&v134, (const kaldi::quasar::TranslationUtil::PathElement *)&v116);
        }
        else
        {
          kaldi::quasar::TranslationUtil::PathElement::PathElement(v135, (const kaldi::quasar::TranslationUtil::PathElement *)&v116);
          v88 = v87 + 10;
        }
        ++v17;
        v135 = v88;
        v16 = v130;
        kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&v116);
LABEL_137:
        if (v127)
        {
          v128 = v127;
          operator delete(v127);
        }
        v21 = v21 + v29;
        v20 = v20 + v28;
      }
      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t, __n128))(*v15 + 32))(&__p, v15, v16, v22);
      v90 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_)
      {
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
        operator delete((void *)__p.__r_.__value_.__l.__size_);
      }
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&__p);
      std::vector<kaldi::quasar::TranslationUtil::PathElement>::__assign_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>((uint64_t)&__p, v134, (uint64_t)v135, 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v135 - v134) >> 4));
      v108 = v20 + *(float *)&v90;
      v109 = v21 + *((float *)&v90 + 1);
      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(*v15 + 32))(&v116, v15, v16);
      v92 = *((float *)v116.__r_.__value_.__r.__words + 1);
      v91 = *(float *)&v116.__r_.__value_.__l.__data_;
      v110 = v116.__r_.__value_.__r.__words[0];
      if (v116.__r_.__value_.__l.__size_)
      {
        v116.__r_.__value_.__r.__words[2] = v116.__r_.__value_.__l.__size_;
        operator delete((void *)v116.__r_.__value_.__l.__size_);
        v92 = *((float *)&v110 + 1);
        v91 = *(float *)&v110;
      }
      *(float *)&v110 = v18 + v91;
      *((float *)&v110 + 1) = v19 + v92;
      v112 = v104;
      if (a5)
        kaldi::JoinVectorToString<std::string>(a5, " ", (uint64_t)&v113);
      if (a6)
      {
        if (v114 != (_QWORD *)a6)
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v114, *(char **)a6, *(_QWORD *)(a6 + 8), (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2);
        v111 = (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2;
        v93 = (_DWORD *)v114[0];
        v94 = (_DWORD *)v114[1];
        while (v93 != v94)
          ++*v93++;
      }
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v115, (char *)__src, (uint64_t)v132, ((char *)v132 - (_BYTE *)__src) >> 2);
      v95 = v101[1];
      if (v95 >= v101[2])
      {
        v96 = std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::NbestElement const&>(v101, (const kaldi::quasar::TranslationUtil::NbestElement *)&__p);
      }
      else
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v101[1], (const kaldi::quasar::TranslationUtil::NbestElement *)&__p);
        v96 = v95 + 272;
        v101[1] = v95 + 272;
      }
      v101[1] = v96;
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&__p);
      if (__src)
      {
        v132 = __src;
        operator delete(__src);
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v134;
      std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v14 = v102 + 1;
      v13 = v139;
    }
    while (v102 + 1 != (v140 - v139) >> 4);
  }
  std::__tree<int>::destroy((uint64_t)&v137, v138[0]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v139;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v142 = &unk_1E5D25A80;
  v97 = v143;
  if (v143)
  {
    v98 = *(_DWORD *)(v143 + 56) - 1;
    *(_DWORD *)(v143 + 56) = v98;
    if (!v98)
      (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
  }
  if (v145[0])
  {
    v145[1] = v145[0];
    operator delete(v145[0]);
  }
  v150 = &unk_1E5D25A80;
  result = v151;
  if (v151)
  {
    v100 = *(_DWORD *)(v151 + 56) - 1;
    *(_DWORD *)(v151 + 56) = v100;
    if (!v100)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1ADF3E780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  _DWORD *v31;
  int v32;
  void *v33;
  _DWORD *v34;
  int v35;

  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a29);
  std::__tree<int>::destroy((uint64_t)&STACK[0x310], (_QWORD *)STACK[0x318]);
  a29 = (uint64_t)&STACK[0x328];
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  *(_QWORD *)(v29 - 240) = &unk_1E5D25A80;
  v31 = *(_DWORD **)(v29 - 232);
  if (v31)
  {
    v32 = v31[14] - 1;
    v31[14] = v32;
    if (!v32)
      (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 8))(v31);
  }
  v33 = *(void **)(v29 - 216);
  if (v33)
  {
    *(_QWORD *)(v29 - 208) = v33;
    operator delete(v33);
  }
  *(_QWORD *)(v29 - 160) = &unk_1E5D25A80;
  v34 = *(_DWORD **)(v29 - 152);
  if (v34)
  {
    v35 = v34[14] - 1;
    v34[14] = v35;
    if (!v35)
      (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::JoinBPEUnitsInNbestList(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  _DWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  std::string *v24;
  std::string::size_type size;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string *v30;
  std::string::size_type v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  std::string *v38;
  std::string *v39;
  char *v40;
  _DWORD *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  int v49;
  std::string *v50;
  std::string *v51;
  _QWORD *v52;
  std::string *v53;
  std::string::size_type v54;
  _QWORD *v55;
  _QWORD *v56;
  void **v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v61;
  uint64_t v62;
  std::string::size_type v63;
  std::string::size_type v64;
  std::string::size_type v65;
  uint64_t v66;
  void *v67[2];
  unsigned __int8 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _BYTE v82[28];
  std::string v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _BYTE v91[152];
  uint64_t v92;
  std::string *v93;
  unint64_t v94;
  std::string v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 __dst;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 __p;
  __int128 v105;
  __int128 v106;
  _BYTE v107[28];
  _QWORD v108[2];
  _QWORD v109[11];
  char v110;
  uint64_t v111;

  if (*(_DWORD *)(a1 + 5248) == 1)
  {
    v2 = *(uint64_t **)a2;
    v62 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 != v62)
    {
      v3 = a1 + 152;
      v65 = *MEMORY[0x1E0DE4F50];
      v63 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      v64 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      v61 = MEMORY[0x1E0DE4FB8] + 16;
      do
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v108);
        memset(&v95, 0, sizeof(v95));
        v96 = 0u;
        v97 = 0u;
        v98 = 0u;
        v99 = 0u;
        __dst = 0u;
        v101 = 0u;
        v102 = 0u;
        v103 = 0u;
        __p = 0u;
        v105 = 0u;
        v106 = 0u;
        memset(v107, 0, sizeof(v107));
        v93 = 0;
        v92 = 0;
        v94 = 0;
        v66 = (uint64_t)v2;
        v5 = *v2;
        v4 = v2[1];
        if (v5 != v4)
        {
          v6 = 0;
          do
          {
            *(float32x2_t *)&v99 = vadd_f32(*(float32x2_t *)(v5 + 80), *(float32x2_t *)&v99);
            std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)((char *)&v99 + 8), __dst, *(char **)(v5 + 88), *(char **)(v5 + 96), (uint64_t)(*(_QWORD *)(v5 + 96) - *(_QWORD *)(v5 + 88)) >> 2);
            std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)&v105 + 8, v106, *(char **)(v5 + 184), *(char **)(v5 + 192), (uint64_t)(*(_QWORD *)(v5 + 192) - *(_QWORD *)(v5 + 184)) >> 2);
            v7 = *(char *)(v5 + 23);
            if (v7 >= 0)
              v8 = v5;
            else
              v8 = *(_QWORD *)v5;
            if (v7 >= 0)
              v9 = *(unsigned __int8 *)(v5 + 23);
            else
              v9 = *(_QWORD *)(v5 + 8);
            v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, v8, v9);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
            v11 = (__int128 *)*((_QWORD *)&v96 + 1);
            if (*((_QWORD *)&v96 + 1) >= (unint64_t)v97)
            {
              v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v96, (__int128 *)v5);
            }
            else
            {
              if (*(char *)(v5 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(*((std::string **)&v96 + 1), *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
              }
              else
              {
                v12 = *(_OWORD *)v5;
                *(_QWORD *)(*((_QWORD *)&v96 + 1) + 16) = *(_QWORD *)(v5 + 16);
                *v11 = v12;
              }
              v13 = (uint64_t)v11 + 24;
            }
            *((_QWORD *)&v96 + 1) = v13;
            v14 = (char *)*((_QWORD *)&__p + 1);
            if (*((_QWORD *)&__p + 1) >= (unint64_t)v105)
            {
              v16 = (char *)__p;
              v17 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2;
              v18 = v17 + 1;
              if ((unint64_t)(v17 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v19 = v105 - __p;
              if ((uint64_t)(v105 - __p) >> 1 > v18)
                v18 = v19 >> 1;
              if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
                v20 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v20 = v18;
              if (v20)
              {
                v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v105, v20);
                v14 = (char *)*((_QWORD *)&__p + 1);
                v16 = (char *)__p;
              }
              else
              {
                v21 = 0;
              }
              v22 = &v21[4 * v17];
              *(_DWORD *)v22 = v6;
              v15 = v22 + 4;
              while (v14 != v16)
              {
                v23 = *((_DWORD *)v14 - 1);
                v14 -= 4;
                *((_DWORD *)v22 - 1) = v23;
                v22 -= 4;
              }
              *(_QWORD *)&__p = v22;
              *((_QWORD *)&__p + 1) = v15;
              *(_QWORD *)&v105 = &v21[4 * v20];
              if (v16)
                operator delete(v16);
            }
            else
            {
              **((_DWORD **)&__p + 1) = v6;
              v15 = v14 + 4;
            }
            *((_QWORD *)&__p + 1) = v15;
            if (kaldi::quasar::BPE::IsIntraWord(v3, (uint64_t **)v5))
            {
              kaldi::quasar::BPE::StripSeparator(v3, (const std::string *)v5, &v83);
              if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v24 = &v83;
              else
                v24 = (std::string *)v83.__r_.__value_.__r.__words[0];
              if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v83.__r_.__value_.__r.__words[2]);
              else
                size = v83.__r_.__value_.__l.__size_;
              std::string::append(&v95, (const std::string::value_type *)v24, size);
              if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v83.__r_.__value_.__l.__data_);
            }
            else
            {
              v26 = *(char *)(v5 + 23);
              if (v26 >= 0)
                v27 = (const std::string::value_type *)v5;
              else
                v27 = *(const std::string::value_type **)v5;
              if (v26 >= 0)
                v28 = *(unsigned __int8 *)(v5 + 23);
              else
                v28 = *(_QWORD *)(v5 + 8);
              std::string::append(&v95, v27, v28);
              v29 = v93;
              if ((unint64_t)v93 >= v94)
              {
                v30 = (std::string *)std::vector<kaldi::quasar::TranslationUtil::PathElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::PathElement const&>(&v92, (const kaldi::quasar::TranslationUtil::PathElement *)&v95);
              }
              else
              {
                kaldi::quasar::TranslationUtil::PathElement::PathElement(v93, (const kaldi::quasar::TranslationUtil::PathElement *)&v95);
                v30 = v29 + 10;
              }
              v93 = v30;
              memset(&v83, 0, sizeof(v83));
              v85 = 0u;
              v86 = 0u;
              v87 = 0u;
              v88 = 0u;
              v89 = 0u;
              v90 = 0u;
              memset(v91, 0, 108);
              kaldi::quasar::TranslationUtil::PathElement::operator=((uint64_t)&v95, (__int128 *)&v83);
              kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&v83);
            }
            ++v6;
            v5 += 240;
          }
          while (v5 != v4);
          v31 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v31 = v95.__r_.__value_.__l.__size_;
          if (v31)
          {
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v83);
            v32 = *(_QWORD *)v66;
            v33 = *(_QWORD *)(v66 + 8);
            if (*(_QWORD *)v66 != v33)
            {
              do
              {
                v34 = *(char *)(v32 + 23);
                if (v34 >= 0)
                  v35 = v32;
                else
                  v35 = *(_QWORD *)v32;
                if (v34 >= 0)
                  v36 = *(unsigned __int8 *)(v32 + 23);
                else
                  v36 = *(_QWORD *)(v32 + 8);
                v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v83.__r_.__value_.__r.__words[2], v35, v36);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" ", 1);
                v32 += 240;
              }
              while (v32 != v33);
            }
            if (*(_BYTE *)(a1 + 132))
            {
              v69 = 0uLL;
              v70 = 0;
              v71 = 0u;
              v72 = 0u;
              v73 = 0u;
              v74 = 0u;
              v75 = 0u;
              v76 = 0u;
              v77 = 0u;
              v78 = 0u;
              v79 = 0u;
              v80 = 0u;
              v81 = 0u;
              memset(v82, 0, sizeof(v82));
              v38 = v93;
              if ((unint64_t)v93 >= v94)
              {
                v39 = (std::string *)std::vector<kaldi::quasar::TranslationUtil::PathElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::PathElement>(&v92, &v69);
              }
              else
              {
                std::allocator<kaldi::quasar::TranslationUtil::PathElement>::construct[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement,kaldi::quasar::TranslationUtil::PathElement>((uint64_t)&v94, (uint64_t)v93, &v69);
                v39 = v38 + 10;
              }
              v93 = v39;
              kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&v69);
            }
            else
            {
              v40 = (char *)*((_QWORD *)&__p + 1);
              if (*((_QWORD *)&__p + 1) >= (unint64_t)v105)
              {
                v42 = (char *)__p;
                v43 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2;
                v44 = v43 + 1;
                if ((unint64_t)(v43 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v45 = v105 - __p;
                if ((uint64_t)(v105 - __p) >> 1 > v44)
                  v44 = v45 >> 1;
                if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
                  v46 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v46 = v44;
                if (v46)
                {
                  v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v105, v46);
                  v40 = (char *)*((_QWORD *)&__p + 1);
                  v42 = (char *)__p;
                }
                else
                {
                  v47 = 0;
                }
                v48 = &v47[4 * v43];
                *(_DWORD *)v48 = v6;
                v41 = v48 + 4;
                while (v40 != v42)
                {
                  v49 = *((_DWORD *)v40 - 1);
                  v40 -= 4;
                  *((_DWORD *)v48 - 1) = v49;
                  v48 -= 4;
                }
                *(_QWORD *)&__p = v48;
                *((_QWORD *)&__p + 1) = v41;
                *(_QWORD *)&v105 = &v47[4 * v46];
                if (v42)
                  operator delete(v42);
              }
              else
              {
                **((_DWORD **)&__p + 1) = v6;
                v41 = v40 + 4;
              }
              *((_QWORD *)&__p + 1) = v41;
              v50 = v93;
              if ((unint64_t)v93 >= v94)
              {
                v51 = (std::string *)std::vector<kaldi::quasar::TranslationUtil::PathElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::PathElement const&>(&v92, (const kaldi::quasar::TranslationUtil::PathElement *)&v95);
              }
              else
              {
                kaldi::quasar::TranslationUtil::PathElement::PathElement(v93, (const kaldi::quasar::TranslationUtil::PathElement *)&v95);
                v51 = v50 + 10;
              }
              v93 = v51;
            }
            if (kaldi::g_kaldi_verbose_level >= -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v69);
              v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"Error converting BPE to word list ", 34);
              if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v53 = &v95;
              else
                v53 = (std::string *)v95.__r_.__value_.__r.__words[0];
              if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v54 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
              else
                v54 = v95.__r_.__value_.__l.__size_;
              v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, v54);
              v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"( ", 2);
              std::stringbuf::str();
              if ((v68 & 0x80u) == 0)
                v57 = v67;
              else
                v57 = (void **)v67[0];
              if ((v68 & 0x80u) == 0)
                v58 = v68;
              else
                v58 = (uint64_t)v67[1];
              v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v57, v58);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)")", 1);
              if ((char)v68 < 0)
                operator delete(v67[0]);
              kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v69);
            }
            v83.__r_.__value_.__r.__words[0] = v65;
            *(std::string::size_type *)((char *)v83.__r_.__value_.__r.__words + *(_QWORD *)(v65 - 24)) = v64;
            v83.__r_.__value_.__r.__words[2] = v63;
            v84 = MEMORY[0x1E0DE4FB8] + 16;
            if (SHIBYTE(v89) < 0)
              operator delete(*((void **)&v88 + 1));
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x1AF44D094](v91);
          }
        }
        if ((uint64_t *)v66 != &v92)
          std::vector<kaldi::quasar::TranslationUtil::PathElement>::__assign_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>(v66, v92, (uint64_t)v93, 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v93 - v92) >> 4));
        *(_BYTE *)(v66 + 88) = 1;
        v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v92;
        std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
        kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&v95);
        v108[0] = v65;
        *(_QWORD *)((char *)v108 + *(_QWORD *)(v65 - 24)) = v64;
        v109[0] = v63;
        v109[1] = v61;
        if (v110 < 0)
          operator delete((void *)v109[9]);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1AF44D094](&v111);
        v2 = (uint64_t *)(v66 + 272);
      }
      while (v66 + 272 != v62);
    }
  }
  else if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v108);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"Not applying BPE to target", 26);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v108);
  }
}

void sub_1ADF3F0FC(_Unwind_Exception *a1)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&STACK[0x3D0]);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationUtil::PathElement::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 32));
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 6) = 0;
  v5 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 56);
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 79) = 0;
  *((_BYTE *)a2 + 56) = 0;
  *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  std::vector<int>::__move_assign(a1 + 88, (__n128 *)((char *)a2 + 88));
  std::vector<int>::__move_assign(a1 + 112, (__n128 *)a2 + 7);
  std::vector<int>::__move_assign(a1 + 136, (__n128 *)((char *)a2 + 136));
  std::vector<int>::__move_assign(a1 + 160, (__n128 *)a2 + 10);
  std::vector<int>::__move_assign(a1 + 184, (__n128 *)((char *)a2 + 184));
  std::vector<int>::__move_assign(a1 + 208, (__n128 *)a2 + 13);
  *(_DWORD *)(a1 + 232) = *((_DWORD *)a2 + 58);
  return a1;
}

void std::__variant_detail::__visitation::__variant::__value_visitor<void kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::GetRawNbest<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,std::vector<kaldi::quasar::TranslationUtil::NbestElement> *)::{lambda(fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>&&)#1}>::operator()[abi:ne180100]<std::__variant_detail::__alt<1ul,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>> &>(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)(*a1)[1];
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::LatticeToNbest<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a2, **a1, *(_QWORD *)(a2 + 5712), v3, 0, 0);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::JoinBPEUnitsInNbestList(a2, (uint64_t)v3);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::JoinBPEUnitsInNbestList(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  char *v14;
  _DWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  std::string *v24;
  std::string::size_type size;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string *v30;
  std::string::size_type v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  std::string *v38;
  std::string *v39;
  char *v40;
  _DWORD *v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  int v49;
  std::string *v50;
  std::string *v51;
  _QWORD *v52;
  std::string *v53;
  std::string::size_type v54;
  _QWORD *v55;
  _QWORD *v56;
  void **v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v61;
  uint64_t v62;
  std::string::size_type v63;
  std::string::size_type v64;
  std::string::size_type v65;
  uint64_t v66;
  void *v67[2];
  unsigned __int8 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _BYTE v82[28];
  std::string v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _BYTE v91[152];
  uint64_t v92;
  std::string *v93;
  unint64_t v94;
  std::string v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 __dst;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 __p;
  __int128 v105;
  __int128 v106;
  _BYTE v107[28];
  _QWORD v108[2];
  _QWORD v109[11];
  char v110;
  uint64_t v111;

  if (*(_DWORD *)(a1 + 5248) == 1)
  {
    v2 = *(uint64_t **)a2;
    v62 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)a2 != v62)
    {
      v3 = a1 + 152;
      v65 = *MEMORY[0x1E0DE4F50];
      v63 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      v64 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      v61 = MEMORY[0x1E0DE4FB8] + 16;
      do
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v108);
        memset(&v95, 0, sizeof(v95));
        v96 = 0u;
        v97 = 0u;
        v98 = 0u;
        v99 = 0u;
        __dst = 0u;
        v101 = 0u;
        v102 = 0u;
        v103 = 0u;
        __p = 0u;
        v105 = 0u;
        v106 = 0u;
        memset(v107, 0, sizeof(v107));
        v93 = 0;
        v92 = 0;
        v94 = 0;
        v66 = (uint64_t)v2;
        v5 = *v2;
        v4 = v2[1];
        if (v5 != v4)
        {
          v6 = 0;
          do
          {
            *(float32x2_t *)&v99 = vadd_f32(*(float32x2_t *)(v5 + 80), *(float32x2_t *)&v99);
            std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)((char *)&v99 + 8), __dst, *(char **)(v5 + 88), *(char **)(v5 + 96), (uint64_t)(*(_QWORD *)(v5 + 96) - *(_QWORD *)(v5 + 88)) >> 2);
            std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)&v105 + 8, v106, *(char **)(v5 + 184), *(char **)(v5 + 192), (uint64_t)(*(_QWORD *)(v5 + 192) - *(_QWORD *)(v5 + 184)) >> 2);
            v7 = *(char *)(v5 + 23);
            if (v7 >= 0)
              v8 = v5;
            else
              v8 = *(_QWORD *)v5;
            if (v7 >= 0)
              v9 = *(unsigned __int8 *)(v5 + 23);
            else
              v9 = *(_QWORD *)(v5 + 8);
            v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, v8, v9);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
            v11 = (__int128 *)*((_QWORD *)&v96 + 1);
            if (*((_QWORD *)&v96 + 1) >= (unint64_t)v97)
            {
              v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v96, (__int128 *)v5);
            }
            else
            {
              if (*(char *)(v5 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(*((std::string **)&v96 + 1), *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
              }
              else
              {
                v12 = *(_OWORD *)v5;
                *(_QWORD *)(*((_QWORD *)&v96 + 1) + 16) = *(_QWORD *)(v5 + 16);
                *v11 = v12;
              }
              v13 = (uint64_t)v11 + 24;
            }
            *((_QWORD *)&v96 + 1) = v13;
            v14 = (char *)*((_QWORD *)&__p + 1);
            if (*((_QWORD *)&__p + 1) >= (unint64_t)v105)
            {
              v16 = (char *)__p;
              v17 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2;
              v18 = v17 + 1;
              if ((unint64_t)(v17 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v19 = v105 - __p;
              if ((uint64_t)(v105 - __p) >> 1 > v18)
                v18 = v19 >> 1;
              if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
                v20 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v20 = v18;
              if (v20)
              {
                v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v105, v20);
                v14 = (char *)*((_QWORD *)&__p + 1);
                v16 = (char *)__p;
              }
              else
              {
                v21 = 0;
              }
              v22 = &v21[4 * v17];
              *(_DWORD *)v22 = v6;
              v15 = v22 + 4;
              while (v14 != v16)
              {
                v23 = *((_DWORD *)v14 - 1);
                v14 -= 4;
                *((_DWORD *)v22 - 1) = v23;
                v22 -= 4;
              }
              *(_QWORD *)&__p = v22;
              *((_QWORD *)&__p + 1) = v15;
              *(_QWORD *)&v105 = &v21[4 * v20];
              if (v16)
                operator delete(v16);
            }
            else
            {
              **((_DWORD **)&__p + 1) = v6;
              v15 = v14 + 4;
            }
            *((_QWORD *)&__p + 1) = v15;
            if (kaldi::quasar::BPE::IsIntraWord(v3, (uint64_t **)v5))
            {
              kaldi::quasar::BPE::StripSeparator(v3, (const std::string *)v5, &v83);
              if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v24 = &v83;
              else
                v24 = (std::string *)v83.__r_.__value_.__r.__words[0];
              if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v83.__r_.__value_.__r.__words[2]);
              else
                size = v83.__r_.__value_.__l.__size_;
              std::string::append(&v95, (const std::string::value_type *)v24, size);
              if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v83.__r_.__value_.__l.__data_);
            }
            else
            {
              v26 = *(char *)(v5 + 23);
              if (v26 >= 0)
                v27 = (const std::string::value_type *)v5;
              else
                v27 = *(const std::string::value_type **)v5;
              if (v26 >= 0)
                v28 = *(unsigned __int8 *)(v5 + 23);
              else
                v28 = *(_QWORD *)(v5 + 8);
              std::string::append(&v95, v27, v28);
              v29 = v93;
              if ((unint64_t)v93 >= v94)
              {
                v30 = (std::string *)std::vector<kaldi::quasar::TranslationUtil::PathElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::PathElement const&>(&v92, (const kaldi::quasar::TranslationUtil::PathElement *)&v95);
              }
              else
              {
                kaldi::quasar::TranslationUtil::PathElement::PathElement(v93, (const kaldi::quasar::TranslationUtil::PathElement *)&v95);
                v30 = v29 + 10;
              }
              v93 = v30;
              memset(&v83, 0, sizeof(v83));
              v85 = 0u;
              v86 = 0u;
              v87 = 0u;
              v88 = 0u;
              v89 = 0u;
              v90 = 0u;
              memset(v91, 0, 108);
              kaldi::quasar::TranslationUtil::PathElement::operator=((uint64_t)&v95, (__int128 *)&v83);
              kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&v83);
            }
            ++v6;
            v5 += 240;
          }
          while (v5 != v4);
          v31 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v31 = v95.__r_.__value_.__l.__size_;
          if (v31)
          {
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v83);
            v32 = *(_QWORD *)v66;
            v33 = *(_QWORD *)(v66 + 8);
            if (*(_QWORD *)v66 != v33)
            {
              do
              {
                v34 = *(char *)(v32 + 23);
                if (v34 >= 0)
                  v35 = v32;
                else
                  v35 = *(_QWORD *)v32;
                if (v34 >= 0)
                  v36 = *(unsigned __int8 *)(v32 + 23);
                else
                  v36 = *(_QWORD *)(v32 + 8);
                v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v83.__r_.__value_.__r.__words[2], v35, v36);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" ", 1);
                v32 += 240;
              }
              while (v32 != v33);
            }
            if (*(_BYTE *)(a1 + 132))
            {
              v69 = 0uLL;
              v70 = 0;
              v71 = 0u;
              v72 = 0u;
              v73 = 0u;
              v74 = 0u;
              v75 = 0u;
              v76 = 0u;
              v77 = 0u;
              v78 = 0u;
              v79 = 0u;
              v80 = 0u;
              v81 = 0u;
              memset(v82, 0, sizeof(v82));
              v38 = v93;
              if ((unint64_t)v93 >= v94)
              {
                v39 = (std::string *)std::vector<kaldi::quasar::TranslationUtil::PathElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::PathElement>(&v92, &v69);
              }
              else
              {
                std::allocator<kaldi::quasar::TranslationUtil::PathElement>::construct[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement,kaldi::quasar::TranslationUtil::PathElement>((uint64_t)&v94, (uint64_t)v93, &v69);
                v39 = v38 + 10;
              }
              v93 = v39;
              kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&v69);
            }
            else
            {
              v40 = (char *)*((_QWORD *)&__p + 1);
              if (*((_QWORD *)&__p + 1) >= (unint64_t)v105)
              {
                v42 = (char *)__p;
                v43 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2;
                v44 = v43 + 1;
                if ((unint64_t)(v43 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v45 = v105 - __p;
                if ((uint64_t)(v105 - __p) >> 1 > v44)
                  v44 = v45 >> 1;
                if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
                  v46 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v46 = v44;
                if (v46)
                {
                  v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v105, v46);
                  v40 = (char *)*((_QWORD *)&__p + 1);
                  v42 = (char *)__p;
                }
                else
                {
                  v47 = 0;
                }
                v48 = &v47[4 * v43];
                *(_DWORD *)v48 = v6;
                v41 = v48 + 4;
                while (v40 != v42)
                {
                  v49 = *((_DWORD *)v40 - 1);
                  v40 -= 4;
                  *((_DWORD *)v48 - 1) = v49;
                  v48 -= 4;
                }
                *(_QWORD *)&__p = v48;
                *((_QWORD *)&__p + 1) = v41;
                *(_QWORD *)&v105 = &v47[4 * v46];
                if (v42)
                  operator delete(v42);
              }
              else
              {
                **((_DWORD **)&__p + 1) = v6;
                v41 = v40 + 4;
              }
              *((_QWORD *)&__p + 1) = v41;
              v50 = v93;
              if ((unint64_t)v93 >= v94)
              {
                v51 = (std::string *)std::vector<kaldi::quasar::TranslationUtil::PathElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::PathElement const&>(&v92, (const kaldi::quasar::TranslationUtil::PathElement *)&v95);
              }
              else
              {
                kaldi::quasar::TranslationUtil::PathElement::PathElement(v93, (const kaldi::quasar::TranslationUtil::PathElement *)&v95);
                v51 = v50 + 10;
              }
              v93 = v51;
            }
            if (kaldi::g_kaldi_verbose_level >= -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v69);
              v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"Error converting BPE to word list ", 34);
              if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v53 = &v95;
              else
                v53 = (std::string *)v95.__r_.__value_.__r.__words[0];
              if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v54 = HIBYTE(v95.__r_.__value_.__r.__words[2]);
              else
                v54 = v95.__r_.__value_.__l.__size_;
              v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, v54);
              v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"( ", 2);
              std::stringbuf::str();
              if ((v68 & 0x80u) == 0)
                v57 = v67;
              else
                v57 = (void **)v67[0];
              if ((v68 & 0x80u) == 0)
                v58 = v68;
              else
                v58 = (uint64_t)v67[1];
              v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v57, v58);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)")", 1);
              if ((char)v68 < 0)
                operator delete(v67[0]);
              kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v69);
            }
            v83.__r_.__value_.__r.__words[0] = v65;
            *(std::string::size_type *)((char *)v83.__r_.__value_.__r.__words + *(_QWORD *)(v65 - 24)) = v64;
            v83.__r_.__value_.__r.__words[2] = v63;
            v84 = MEMORY[0x1E0DE4FB8] + 16;
            if (SHIBYTE(v89) < 0)
              operator delete(*((void **)&v88 + 1));
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x1AF44D094](v91);
          }
        }
        if ((uint64_t *)v66 != &v92)
          std::vector<kaldi::quasar::TranslationUtil::PathElement>::__assign_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>(v66, v92, (uint64_t)v93, 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v93 - v92) >> 4));
        *(_BYTE *)(v66 + 88) = 1;
        v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v92;
        std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
        kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&v95);
        v108[0] = v65;
        *(_QWORD *)((char *)v108 + *(_QWORD *)(v65 - 24)) = v64;
        v109[0] = v63;
        v109[1] = v61;
        if (v110 < 0)
          operator delete((void *)v109[9]);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1AF44D094](&v111);
        v2 = (uint64_t *)(v66 + 272);
      }
      while (v66 + 272 != v62);
    }
  }
  else if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v108);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"Not applying BPE to target", 26);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v108);
  }
}

void sub_1ADF3FAEC(_Unwind_Exception *a1)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&STACK[0x3D0]);
  _Unwind_Resume(a1);
}

float std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<float kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(std::vector<int> const&,kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,std::vector<kaldi::quasar::TranslationUtil::NbestElement> *)::{lambda(fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>> &>(_QWORD ***a1, uint64_t a2)
{
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a2, **a1, (uint64_t)(*a1)[1], (*a1)[2]);
}

float std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<float kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(std::vector<int> const&,kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,std::vector<kaldi::quasar::TranslationUtil::NbestElement> *)::{lambda(fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>> &>(_QWORD ***a1, uint64_t a2)
{
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a2, **a1, (uint64_t)(*a1)[1], (*a1)[2]);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  _BYTE *v6;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  float v14;
  int v15;
  uint64_t i;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  int v20;
  char **v21;
  uint64_t v22;
  char **v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  std::string *p_p;
  std::string::size_type size;
  int *v29;
  uint64_t v30;
  int v31;
  float v32;
  float v33;
  int *v34;
  int *j;
  std::string *v36;
  std::string::size_type v37;
  float v38;
  int v40;
  std::string v41;
  std::string __p;
  std::string v43;
  char *v44;
  char *v45;
  uint64_t v46;
  int *v47;
  int *v48;

  if (!a4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v43, "Nbestlist cannot be null");
    goto LABEL_92;
  }
  if (!*(_BYTE *)(a3 + 307) || (v6 = (_BYTE *)(a1 + 4896), !*(_BYTE *)(a1 + 5237)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v43, "Decoder not configured for SentencePiece ID decoding.");
    goto LABEL_92;
  }
  v9 = *(_QWORD *)(a1 + 136);
  if (v9 && !*(_BYTE *)(v9 + 3925))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v43, "Model not configured for SentencePiece ID decoding.");
LABEL_92:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v43);
  }
  v10 = *(_DWORD *)(a1 + 5224);
  v11 = *(_DWORD *)(a1 + 5200);
  v12 = *(_DWORD *)(a1 + 5188);
  v13 = *(_DWORD *)(a1 + 5192);
  v40 = *(_DWORD *)(a1 + 5196);
  *(_DWORD *)(a1 + 5200) = *(_DWORD *)(a3 + 228);
  *(_DWORD *)(a1 + 5224) = *(_DWORD *)(a3 + 216);
  if (*(_DWORD *)a3)
    *(_DWORD *)(a1 + 5188) = *(_DWORD *)a3;
  v14 = *(float *)(a3 + 4);
  if (v14 != 0.0)
    *(float *)(a1 + 5192) = v14;
  v15 = *(_DWORD *)(a3 + 8);
  if (v15)
    *(_DWORD *)(a1 + 5196) = v15;
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ValidateDecodingParameters(*(float *)(a3 + 176), a1, *(_DWORD *)(a3 + 160), *(_DWORD *)(a3 + 172));
  v17 = *a4;
  for (i = a4[1];
        i != v17;
  a4[1] = v17;
  if (*(_BYTE *)(a1 + 113))
    v18 = 1;
  else
    v18 = *(_QWORD *)(a1 + 32) != 0;
  if (v18 && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"Input Hammer not supported for sentencepiece id decoding.", 57);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
  }
  v19 = kaldi::quasar::TorchEncoderDecoder::InputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
  kaldi::quasar::MultiLangDecorator::Apply(a1 + 120, (uint64_t)a2, a3 + 64, a3 + 88, v19, (uint64_t)&v47);
  if (*(_BYTE *)(a3 + 232))
    v20 = kaldi::quasar::MultiLangDecorator::NumTagTokens((kaldi::quasar::MultiLangDecorator *)(a1 + 120));
  else
    v20 = 0;
  *(_DWORD *)(a1 + 5204) = v20;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
    kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::LanguageInfo(a3);
    if (v46 >= 0)
      v21 = &v44;
    else
      v21 = (char **)v44;
    if (v46 >= 0)
      v22 = HIBYTE(v46);
    else
      v22 = (uint64_t)v45;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)v21, v22);
    if (SHIBYTE(v46) < 0)
      operator delete(v44);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v43);
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v43, 1);
      kaldi::JoinVectorToString<int>(a2, " ");
      if (v46 >= 0)
        v23 = &v44;
      else
        v23 = (char **)v44;
      if (v46 >= 0)
        v24 = HIBYTE(v46);
      else
        v24 = (uint64_t)v45;
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)v23, v24);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" -> ", 4);
      kaldi::JoinVectorToString<int>(&v47, " ");
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v46) < 0)
        operator delete(v44);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v43);
    }
  }
  v29 = v48;
  if (v48 == v47)
  {
    v32 = 3.4028e38;
    if (!v48)
      return v32;
    goto LABEL_87;
  }
  v44 = 0;
  v45 = 0;
  v46 = 0;
  std::vector<std::shared_ptr<kaldi::quasar::PhraseBook>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::PhraseBook>*,std::shared_ptr<kaldi::quasar::PhraseBook>*>((char *)&v44, *(_QWORD **)(a3 + 240), *(_QWORD **)(a3 + 248), (uint64_t)(*(_QWORD *)(a3 + 248) - *(_QWORD *)(a3 + 240)) >> 4);
  if (v6[344])
    std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100](&v44, (__int128 *)(a1 + 392));
  if (v45 != v44 && *(_DWORD *)(a1 + 5220) != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"Phrasebook (kaldi level) not supported for sentencepiece id decoding.", 69);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v43);
  }
  v30 = *(_QWORD *)(a1 + 136);
  if (v30 && *(_BYTE *)(v30 + 3922) && *(_BYTE *)(v30 + 3923))
    v6[808] = 1;
  v31 = *(_DWORD *)(a1 + 5220);
  if (a4[1] == *a4)
  {
    if (v31 == 3)
      goto LABEL_68;
  }
  else if (v31 != 2)
  {
    goto LABEL_68;
  }
  if (*v6)
  {
    v33 = fminf(kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeSymbolized<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, &v47, a3, a4, 0), 3.4028e38);
    goto LABEL_69;
  }
LABEL_68:
  v33 = 3.4028e38;
LABEL_69:
  memset(&v43, 0, sizeof(v43));
  v34 = v47;
  for (j = v48; v34 != j; ++v34)
  {
    std::to_string(&v41, *v34);
    std::string::push_back(&v41, 32);
    __p = v41;
    memset(&v41, 0, sizeof(v41));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = &__p;
    else
      v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v37 = __p.__r_.__value_.__l.__size_;
    std::string::append(&v43, (const std::string::value_type *)v36, v37);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
  }
  v38 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::PostProcessNbestList<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, &v43, a3, (uint64_t)a4);
  *(_DWORD *)(a1 + 5224) = v10;
  *(_DWORD *)(a1 + 5200) = v11;
  *(_DWORD *)(a1 + 5188) = v12;
  *(_DWORD *)(a1 + 5192) = v13;
  *(_DWORD *)(a1 + 5196) = v40;
  if (v38 == -1.0)
    v32 = v33;
  else
    v32 = v38;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  v29 = v47;
  if (v47)
  {
LABEL_87:
    v48 = v29;
    operator delete(v29);
  }
  return v32;
}

void sub_1ADF40210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void *v23;
  void **v24;
  char v25;

  if (a15 < 0)
    operator delete(__p);
  if (v25 < 0)
    operator delete(v24);
  v24 = (void **)(v21 - 168);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v24);
  v23 = *(void **)(v21 - 144);
  if (v23)
  {
    *(_QWORD *)(v21 - 136) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ValidateDecodingParameters(float a1, uint64_t a2, int a3, int a4)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD v8[34];

  if (a3 < 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Decoder beam (", 14);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, ") should not be negative.");
    goto LABEL_11;
  }
  if (a1 < 0.0 || a1 > 1000.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Decoder confidence threshold (", 30);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, ") should be in the range [0, 1000].");
    goto LABEL_11;
  }
  if (a4 < 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Decoder maximum nbest list size (", 33);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, ") should not be negative.");
LABEL_11:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
}

uint64_t kaldi::quasar::MultiLangDecorator::NumTagTokens(kaldi::quasar::MultiLangDecorator *this)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  BOOL v5;
  unsigned int v6;

  v1 = *((int *)this + 2);
  if (v1 > 3)
    v2 = 0;
  else
    v2 = dword_1AE18E7C0[v1];
  v3 = *((_DWORD *)this + 1);
  v4 = v3 >= 2;
  v5 = v3 == 2;
  v6 = 2 * v2;
  if (!v5)
    v6 = 0;
  if (v4)
    return v6;
  else
    return v2;
}

uint64_t kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::LanguageInfo(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD v24[2];
  _QWORD v25[11];
  char v26;
  uint64_t v27;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v24);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Source locale ", 14);
  v3 = *(char *)(a1 + 39);
  if (v3 >= 0)
    v4 = a1 + 16;
  else
    v4 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 39);
  else
    v5 = *(_QWORD *)(a1 + 24);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, v4, v5);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", Target locale ", 16);
  v8 = *(char *)(a1 + 63);
  if (v8 >= 0)
    v9 = a1 + 40;
  else
    v9 = *(_QWORD *)(a1 + 40);
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a1 + 63);
  else
    v10 = *(_QWORD *)(a1 + 48);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" source tag ", 12);
  v13 = *(char *)(a1 + 87);
  if (v13 >= 0)
    v14 = a1 + 64;
  else
    v14 = *(_QWORD *)(a1 + 64);
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a1 + 87);
  else
    v15 = *(_QWORD *)(a1 + 72);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" target locale ", 15);
  v18 = *(char *)(a1 + 111);
  if (v18 >= 0)
    v19 = a1 + 88;
  else
    v19 = *(_QWORD *)(a1 + 88);
  if (v18 >= 0)
    v20 = *(unsigned __int8 *)(a1 + 111);
  else
    v20 = *(_QWORD *)(a1 + 96);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", # of phrasebooks ", 19);
  std::ostream::operator<<();
  std::stringbuf::str();
  v24[0] = *MEMORY[0x1E0DE4F50];
  v22 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v24 + *(_QWORD *)(v24[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v25[0] = v22;
  v25[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v26 < 0)
    operator delete((void *)v25[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v27);
}

void sub_1ADF4054C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeSymbolized<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int **a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  char *v10;
  float v11;
  const kaldi::quasar::TranslationUtil::NbestElement *v12;
  const kaldi::quasar::TranslationUtil::NbestElement *v13;
  kaldi::quasar::TranslationUtil::NbestElement *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  float v26;
  void **v27;
  unint64_t v28;
  void **v29;
  void **v30;
  void **v31;
  void **v32;
  uint64_t v33;
  int v34;
  int v35;
  char *v36;
  char **v37;
  BOOL v38;
  uint64_t i;
  uint64_t v40;
  uint64_t v41;
  int v42;
  void **v44;
  float v45;
  char **v46;
  char *v47;
  uint64_t v48;
  _QWORD v49[3];
  void *v50;
  uint64_t v51;
  char **v52;
  char *v53;
  uint64_t v54;
  __int128 *v55;

  v53 = 0;
  v54 = 0;
  v52 = &v53;
  if (*(_BYTE *)(a3 + 308))
  {
    kaldi::quasar::TorchEncoderDecoder::GetTiming(*(const void ***)(a1 + 136), (uint64_t)&v46);
    std::__tree<std::string>::destroy((uint64_t)&v52, v53);
    v10 = v47;
    v52 = v46;
    v53 = v47;
    v54 = v48;
    if (v48)
    {
      *((_QWORD *)v47 + 2) = &v53;
      v46 = &v47;
      v47 = 0;
      v48 = 0;
      v10 = 0;
    }
    else
    {
      v52 = &v53;
    }
    std::__tree<std::string>::destroy((uint64_t)&v46, v10);
  }
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst(&v50);
  memset(v49, 0, sizeof(v49));
  v11 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeCore<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a3, (uint64_t)&v50);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::LatticeToNbest<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a3, (uint64_t)&v50, a4, a5, (uint64_t)a2);
  if (a4[1] == *a4 && *(_QWORD *)(a3 + 200))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"Re-decode without LM ", 21);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v46);
    }
    kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DecodeOptions((uint64_t)&v46, *(_DWORD *)(a3 + 160), *(_DWORD *)(a3 + 216), *(float *)(a3 + 228));
    v11 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeSymbolized<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, &v46, a4, a5);
    kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~DecodeOptions((uint64_t)&v46);
  }
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::NbestCompare((uint64_t)&v44, *(_DWORD *)(a1 + 5224), *(float *)(a3 + 220), *(float *)(a3 + 224));
  v12 = (const kaldi::quasar::TranslationUtil::NbestElement *)*a4;
  v13 = (const kaldi::quasar::TranslationUtil::NbestElement *)a4[1];
  v46 = (char **)v44;
  *(float *)&v47 = v45;
  if (v13 - v12 < 1)
  {
    v14 = 0;
    v16 = 0;
  }
  else
  {
    v14 = (kaldi::quasar::TranslationUtil::NbestElement *)std::get_temporary_buffer[abi:ne180100]<kaldi::quasar::TranslationUtil::NbestElement>(0xF0F0F0F0F0F0F0F1 * ((v13 - v12) >> 4));
    v16 = v15;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v12, v13, (float *)&v46, 0xF0F0F0F0F0F0F0F1 * ((v13 - v12) >> 4), v14, v16);
  if (v14)
    operator delete(v14);
  v17 = *a4;
  v18 = a4[1];
  if (*a4 != v18)
  {
    v19 = (int)v44;
    v20 = *((float *)&v44 + 1);
    v21 = v45;
    v22 = powf(v45 + 1.0, *((float *)&v44 + 1));
    do
    {
      v23 = *(float *)(v17 + 24);
      v24 = *(float *)(v17 + 28);
      v25 = (uint64_t)(*(_QWORD *)(v17 + 200) - *(_QWORD *)(v17 + 192)) >> 2;
      if (v19 == 2)
      {
        v26 = powf(v21 + (float)(unint64_t)v25, v20) / v22;
      }
      else
      {
        v26 = 1.0;
        if (v19 == 1)
          v26 = (float)(unint64_t)(v25 + 1);
      }
      *(float *)(v17 + 40) = (float)(v23 + v24) / v26;
      v17 += 272;
    }
    while (v17 != v18);
  }
  if (*(_BYTE *)(a3 + 308))
  {
    kaldi::quasar::TorchEncoderDecoder::GetTiming(*(const void ***)(a1 + 136), (uint64_t)&v46);
    v27 = (void **)v46;
    if (v46 != &v47)
    {
      do
      {
        if (*((char *)v27 + 55) < 0)
        {
          v29 = (void **)v27[4];
          v28 = (unint64_t)v27[5];
        }
        else
        {
          v28 = *((unsigned __int8 *)v27 + 55);
          v29 = v27 + 4;
        }
        if (v28 >= 4)
          v28 = 4;
        if (v28)
        {
          v30 = (void **)((char *)v29 + v28);
          v31 = v29;
          v32 = v30;
          do
          {
            if (*(_BYTE *)v31 == 116)
            {
              v33 = 1u;
              while (v33 != 4)
              {
                if ((void **)((char *)v31 + v33) == v30)
                  goto LABEL_41;
                v34 = *((unsigned __int8 *)v31 + v33);
                v35 = aTime_2[v33++];
                if (v34 != v35)
                  goto LABEL_33;
              }
              v32 = v31;
            }
LABEL_33:
            v31 = (void **)((char *)v31 + 1);
          }
          while (v31 != v30);
LABEL_41:
          if (v32 != v30 && v32 == v29)
          {
            v55 = (__int128 *)(v27 + 4);
            *((double *)v27 + 7) = *((double *)v27 + 7)
                                 - *((double *)std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v52, (const void **)v27 + 4, (uint64_t)&std::piecewise_construct, &v55)+ 7);
          }
        }
        v36 = (char *)v27[1];
        if (v36)
        {
          do
          {
            v37 = (char **)v36;
            v36 = *(char **)v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            v37 = (char **)v27[2];
            v38 = *v37 == (char *)v27;
            v27 = (void **)v37;
          }
          while (!v38);
        }
        v27 = (void **)v37;
      }
      while (v37 != &v47);
    }
    v40 = *a4;
    for (i = a4[1]; v40 != i; v40 += 272)
    {
      if ((char ***)(v40 + 248) != &v46)
        std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,double>,std::__tree_node<std::__value_type<std::string,double>,void *> *,long>>((uint64_t **)(v40 + 248), v46, &v47);
    }
    std::__tree<std::string>::destroy((uint64_t)&v46, v47);
  }
  v46 = (char **)v49;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  v50 = &unk_1E5D25A80;
  v41 = v51;
  if (v51)
  {
    v42 = *(_DWORD *)(v51 + 56) - 1;
    *(_DWORD *)(v51 + 56) = v42;
    if (!v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  std::__tree<std::string>::destroy((uint64_t)&v52, v53);
  return v11;
}

void sub_1ADF409C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  uint64_t v11;
  _DWORD *v13;
  int v14;

  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a11);
  a9 = (void **)(v11 - 192);
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100](&a9);
  *(_QWORD *)(v11 - 168) = &unk_1E5D25A80;
  v13 = *(_DWORD **)(v11 - 160);
  if (v13)
  {
    v14 = v13[14] - 1;
    v13[14] = v14;
    if (!v14)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
  }
  std::__tree<std::string>::destroy(v11 - 152, *(char **)(v11 - 144));
  _Unwind_Resume(a1);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::PostProcessNbestList<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD **v9;
  float v10;
  BOOL v11;
  _QWORD **v12;
  std::string *v13;
  std::string *v14;
  unint64_t v15;
  _QWORD v17[35];

  v8 = *(_QWORD *)(a1 + 136);
  if (v8 && *(_BYTE *)(v8 + 3922))
  {
    if (*(_BYTE *)(v8 + 3923))
      kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ShiftAlignments(a1, (uint64_t **)a4);
    kaldi::quasar::TranslationUtil::ComputeBackwardAlignments(a4);
    kaldi::quasar::TranslationUtil::MergeAlignments(a4);
  }
  v9 = *(_QWORD ***)(a3 + 200);
  v10 = -1.0;
  if (v9)
    v11 = *(_DWORD *)(a3 + 184) == 3;
  else
    v11 = 0;
  if (v11)
    v10 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Rescore<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, (const kaldi::quasar::TranslationUtil::NbestElement **)a4, v9, *(float *)(a3 + 180), *(float *)(a3 + 220), *(float *)(a3 + 224));
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::JoinBPEUnitsInNbestList(a1, a4);
  v12 = *(_QWORD ***)(a3 + 200);
  if (v12 && *(_DWORD *)(a3 + 184) == 4)
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Word level LM re-scoring", 24);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v17);
      v12 = *(_QWORD ***)(a3 + 200);
    }
    v10 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Rescore<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, (const kaldi::quasar::TranslationUtil::NbestElement **)a4, v12, *(float *)(a3 + 180), *(float *)(a3 + 220), *(float *)(a3 + 224));
  }
  v13 = *(std::string **)a4;
  v14 = *(std::string **)(a4 + 8);
  while (v13 != v14)
  {
    std::string::operator=(v13 + 5, a2);
    std::string::operator=(v13 + 6, a2);
    v13 = (std::string *)((char *)v13 + 272);
  }
  kaldi::quasar::NNMTTransliterator::Transliterate<std::vector<kaldi::quasar::TranslationUtil::NbestElement>>(a1 + 408, (uint64_t *)a4, (std::string *)(a3 + 112));
  if (kaldi::g_kaldi_verbose_level > 0)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v17, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Applying confidence scores to n-best list", 41);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v17);
  }
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(a1, (uint64_t *)a4, (int)*(float *)(a3 + 176));
  v15 = *(int *)(a3 + 172);
  if ((_DWORD)v15 && 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4) > v15)
    std::vector<kaldi::quasar::TranslationUtil::NbestElement>::resize((uint64_t *)a4, v15);
  return v10;
}

void sub_1ADF40C64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  _Unwind_Resume(a1);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeCore<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int **a2, uint64_t a3, uint64_t a4)
{
  double *v7;
  uint64_t v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  float v12;
  int v13;
  int v14;
  float v15;
  int v16;
  kaldi::quasar::TorchEncoderDecoder **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  clockid_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  clockid_t v26;
  int v28;
  uint64_t v30;
  std::__shared_weak_count *v31;
  __int128 __p;
  uint64_t v33;
  void **v34;
  _QWORD *v35;
  uint64_t v36;
  _BYTE v37[56];

  v7 = (double *)(a1 + 4856);
  v8 = a1 + 5680;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v37, v7, v8, &__p);
  if (SHIBYTE(v33) < 0)
    operator delete((void *)__p);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    v34 = 0;
    v35 = 0;
    v36 = 0;
    kaldi::JoinVectorToString<int>(a2, ",", (uint64_t)&v34);
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Input : ", 8);
      if (v36 >= 0)
        v10 = (void **)&v34;
      else
        v10 = v34;
      if (v36 >= 0)
        v11 = HIBYTE(v36);
      else
        v11 = (uint64_t)v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    if (SHIBYTE(v36) < 0)
      operator delete(v34);
  }
  v12 = (float)(int)(((unint64_t)((char *)a2[1] - (char *)*a2) >> 2)
                   - (*(_DWORD *)(a3 + 236)
                    + *(_DWORD *)(a1 + 5204)));
  v13 = (int)(float)(*(float *)(a1 + 5200) * v12);
  if (v13 <= 1)
    v13 = 1;
  v28 = v13;
  v14 = *(_DWORD *)(a1 + 5188);
  v15 = *(float *)(a1 + 5192);
  if (v15 != -1.0)
  {
    v16 = (int)(float)(v15 * v12);
    if (*(_DWORD *)(a1 + 5196) > v16)
      v16 = *(_DWORD *)(a1 + 5196);
    if (v16 < v14)
      v14 = v16;
  }
  v17 = (kaldi::quasar::TorchEncoderDecoder **)(a1 + 136);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SelectModel((_QWORD **)(a1 + 136), a3 + 136, a3 + 88, &v30);
  v18 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (*(_DWORD *)(a3 + 160))
  {
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Beam decoding", 13);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Init<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a3, a4);
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Read<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t *)a1, a3, (uint64_t)a2, 0, 0.0);
    v22 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Write<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a3, v14, 1);
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Greedy decoding", 15);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    kaldi::quasar::TorchEncoderDecoder::Start(*v17, *(clockid_t *)(a3 + 312), a3 + 112);
    v23 = *(_QWORD *)(a1 + 136);
    v24 = *(unsigned int *)(a3 + 288);
    v25 = *(unsigned int *)(a3 + 292);
    __p = 0uLL;
    v33 = 0;
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SuppressedIds(a1, a3 + 64, a3 + 88, (uint64_t *)(a3 + 328), (uint64_t)&v34);
    kaldi::quasar::TorchEncoderDecoder::ConstrainSoftmax(v23, a3 + 264, v24, v25, a2, (int **)&__p, &v34);
    std::__tree<int>::destroy((uint64_t)&v34, v35);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a4 + 224))(a4);
    __p = 0uLL;
    v33 = 0;
    v22 = kaldi::quasar::TMTools::GreedyDecode<kaldi::quasar::TorchEncoderDecoder>(*v17, (uint64_t *)a2, (uint64_t)&__p, a3 + 112, a4, v28, v14);
    kaldi::quasar::TorchEncoderDecoder::Finish(*v17, v26);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v37, v21);
  return v22;
}

void sub_1ADF4100C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  clockid_t v21;

  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v19 - 152), v21);
  _Unwind_Resume(a1);
}

void *std::get_temporary_buffer[abi:ne180100]<kaldi::quasar::TranslationUtil::NbestElement>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x78787878787878)
    v1 = 0x78787878787878;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(272 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, const kaldi::quasar::TranslationUtil::NbestElement *a2, float *a3, unint64_t a4, kaldi::quasar::TranslationUtil::NbestElement *a5, uint64_t a6)
{
  unint64_t v9;
  kaldi::quasar::TranslationUtil::NbestElement *v11;
  unint64_t v12;
  const kaldi::quasar::TranslationUtil::NbestElement *v13;
  unint64_t v14;
  uint64_t v15;
  const kaldi::quasar::TranslationUtil::NbestElement *v16;

  v16 = a1;
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      v15 = (uint64_t)a2 - 272;
      if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a3, (uint64_t)a2 - 272, (uint64_t)a1))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(&v16, &v15);
      }
    }
    else
    {
      v9 = a4;
      if ((uint64_t)a4 <= 0)
      {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(a1, a2, a3);
      }
      else
      {
        v11 = a5;
        v12 = a4 >> 1;
        v13 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272 * (a4 >> 1));
        v14 = a4 >> 1;
        if ((uint64_t)v9 <= a6)
        {
          std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(a1, v13, a3, v14, a5);
          std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272 * (v9 >> 1)), a2, a3, v9 - (v9 >> 1), (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v11 + 272 * v12));
          std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,kaldi::quasar::TranslationUtil::NbestElement *,kaldi::quasar::TranslationUtil::NbestElement *,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>((uint64_t)v11, (uint64_t)v11 + 272 * v12, (uint64_t)v11 + 272 * v12, (uint64_t)v11 + 272 * v9, (uint64_t)a1, a3);
          if (v11)
          {
            do
            {
              kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v11);
              v11 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v11 + 272);
              --v9;
            }
            while (v9);
          }
        }
        else
        {
          std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(a1, v13, a3, v14, a5, a6);
          std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>((char *)a1 + 272 * (v9 >> 1), a2, a3, v9 - (v9 >> 1), v11, a6);
          std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(a1, (uint64_t)a1 + 272 * (v9 >> 1), (char *)a2, a3, v9 >> 1, v9 - (v9 >> 1), v11, a6);
        }
      }
    }
  }
}

void sub_1ADF412C4(_Unwind_Exception *exception_object)
{
  kaldi::quasar::TranslationUtil::NbestElement *v1;
  uint64_t v2;

  if (v1)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

BOOL kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(float *a1, uint64_t a2, uint64_t a3)
{
  float v5;
  float v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;

  v5 = *a1;
  v6 = 1.0;
  if (*(_DWORD *)a1)
  {
    v7 = (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 2;
    if (LODWORD(v5) == 2)
    {
      v9 = a1[1];
      v10 = a1[2];
      v11 = powf(v10 + (float)(unint64_t)v7, v9);
      v12 = powf(v10 + 1.0, v9);
      v6 = v11 / v12;
      v8 = powf(v10 + (float)(unint64_t)((uint64_t)(*(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192)) >> 2), v9)
         / v12;
    }
    else
    {
      v8 = 1.0;
      if (LODWORD(v5) == 1)
      {
        v6 = (float)(unint64_t)(v7 + 1);
        v8 = (float)(unint64_t)(((uint64_t)(*(_QWORD *)(a3 + 200) - *(_QWORD *)(a3 + 192)) >> 2) + 1);
      }
    }
  }
  else
  {
    v8 = 1.0;
  }
  return (float)((float)(*(float *)(a2 + 24) + *(float *)(a2 + 28)) / v6) < (float)((float)(*(float *)(a3 + 24)
                                                                                          + *(float *)(a3 + 28))
                                                                                  / v8);
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(const kaldi::quasar::TranslationUtil::NbestElement **a1, uint64_t *a2)
{
  const kaldi::quasar::TranslationUtil::NbestElement *v2;
  uint64_t v3;
  _BYTE v4[272];

  v2 = *a1;
  v3 = *a2;
  kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v4, *a1);
  kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v2, v3);
  kaldi::quasar::TranslationUtil::NbestElement::operator=(v3, (uint64_t)v4);
  kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v4);
}

void sub_1ADF41438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&a9);
  _Unwind_Resume(a1);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, const kaldi::quasar::TranslationUtil::NbestElement *a2, float *a3)
{
  uint64_t v5;
  uint64_t v7;
  const kaldi::quasar::TranslationUtil::NbestElement *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[272];

  if (a1 != a2)
  {
    v5 = (uint64_t)a1 + 272;
    if ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272) != a2)
    {
      v7 = 0;
      v8 = a1;
      do
      {
        v9 = (uint64_t)v8;
        v8 = (const kaldi::quasar::TranslationUtil::NbestElement *)v5;
        if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a3, v5, v9))
        {
          kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v12, v8);
          v10 = v7;
          while (1)
          {
            kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)a1 + v10 + 272, (uint64_t)a1 + v10);
            if (!v10)
              break;
            v10 -= 272;
            if (!kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a3, (uint64_t)v12, (uint64_t)a1 + v10))
            {
              v11 = (uint64_t)a1 + v10 + 272;
              goto LABEL_10;
            }
          }
          v11 = (uint64_t)a1;
LABEL_10:
          kaldi::quasar::TranslationUtil::NbestElement::operator=(v11, (uint64_t)v12);
          kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v12);
        }
        v5 = (uint64_t)v8 + 272;
        v7 += 272;
      }
      while ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272) != a2);
    }
  }
}

void sub_1ADF4152C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&a9);
  _Unwind_Resume(a1);
}

const kaldi::quasar::TranslationUtil::NbestElement *std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(const kaldi::quasar::TranslationUtil::NbestElement *result, const kaldi::quasar::TranslationUtil::NbestElement *a2, float *a3, unint64_t a4, kaldi::quasar::TranslationUtil::NbestElement *this)
{
  const kaldi::quasar::TranslationUtil::NbestElement *v9;
  const kaldi::quasar::TranslationUtil::NbestElement *v10;
  _BOOL4 v11;
  const kaldi::quasar::TranslationUtil::NbestElement *v12;

  if (a4)
  {
    v9 = result;
    if (a4 == 2)
    {
      v10 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a2 - 272);
      v11 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a3, (uint64_t)a2 - 272, (uint64_t)result);
      if (v11)
        v12 = v10;
      else
        v12 = v9;
      if (!v11)
        v9 = v10;
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, v12);
      return kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)this + 272), v9);
    }
    else if (a4 == 1)
    {
      return kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, result);
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(result, (char *)result + 272 * (a4 >> 1), a3, a4 >> 1, this, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>((char *)v9 + 272 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), (char *)this + 272 * (a4 >> 1), a4 - (a4 >> 1));
      return std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v9, (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v9 + 272 * (a4 >> 1)), (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v9 + 272 * (a4 >> 1)), a2, this, a3);
    }
    else
    {
      return std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(result, a2, this, a3);
    }
  }
  return result;
}

void sub_1ADF41694(_Unwind_Exception *exception_object)
{
  kaldi::quasar::TranslationUtil::NbestElement *v1;

  if (v1)
    kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,kaldi::quasar::TranslationUtil::NbestElement *,kaldi::quasar::TranslationUtil::NbestElement *,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6)
{
  uint64_t v11;
  uint64_t v12;

  if (result == a2)
  {
LABEL_10:
    while (a3 != a4)
    {
      result = kaldi::quasar::TranslationUtil::NbestElement::operator=(a5, a3);
      a3 += 272;
      a5 += 272;
    }
  }
  else
  {
    v11 = result;
    while (a3 != a4)
    {
      if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a6, a3, v11))
      {
        result = kaldi::quasar::TranslationUtil::NbestElement::operator=(a5, a3);
        a3 += 272;
      }
      else
      {
        result = kaldi::quasar::TranslationUtil::NbestElement::operator=(a5, v11);
        v11 += 272;
      }
      a5 += 272;
      if (v11 == a2)
        goto LABEL_10;
    }
    if (v11 != a2)
    {
      v12 = 0;
      do
      {
        result = kaldi::quasar::TranslationUtil::NbestElement::operator=(a5 + v12, v11 + v12);
        v12 += 272;
      }
      while (v11 + v12 != a2);
    }
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, uint64_t a2, char *a3, float *a4, uint64_t a5, uint64_t a6, kaldi::quasar::TranslationUtil::NbestElement *a7, uint64_t a8)
{
  uint64_t v9;
  kaldi::quasar::TranslationUtil::NbestElement *v13;
  kaldi::quasar::TranslationUtil::NbestElement *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const kaldi::quasar::TranslationUtil::NbestElement *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  kaldi::quasar::TranslationUtil::NbestElement *v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  const kaldi::quasar::TranslationUtil::NbestElement *v32;
  char v33;
  uint64_t v34;
  int v35;

  v31 = a2;
  v32 = a1;
  if (a6)
  {
    v9 = a6;
    v13 = (kaldi::quasar::TranslationUtil::NbestElement *)a2;
    v14 = a1;
    do
    {
      if (v9 <= a8 || a5 <= a8)
      {
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v14, v13, (kaldi::quasar::TranslationUtil::NbestElement *)a3, a4, a5, v9, a7);
        return;
      }
      if (!a5)
        return;
      v15 = -a5;
      while (!kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a4, (uint64_t)v13, (uint64_t)v14))
      {
        v14 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v32 + 272);
        v32 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v32 + 272);
        if (__CFADD__(v15++, 1))
          return;
      }
      v17 = -v15;
      v29 = a8;
      if (-v15 >= v9)
      {
        if (v15 == -1)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(&v32, &v31);
          return;
        }
        if (v15 > 0)
          v17 = 1 - v15;
        v22 = v17 >> 1;
        v14 = v32;
        v21 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v32 + 272 * (v17 >> 1));
        v23 = *((_DWORD *)a4 + 2);
        v34 = *(_QWORD *)a4;
        v35 = v23;
        v33 = 0;
        v20 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,kaldi::quasar::TranslationUtil::NbestElement,std::__identity,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare>((uint64_t)v13, (uint64_t)a3, (uint64_t)v21, (float *)&v34);
        v19 = 0xF0F0F0F0F0F0F0F1 * ((v20 - (uint64_t)v13) >> 4);
      }
      else
      {
        if (v9 >= 0)
          v18 = v9;
        else
          v18 = v9 + 1;
        v19 = v18 >> 1;
        v20 = (uint64_t)v13 + 272 * (v18 >> 1);
        v14 = v32;
        v21 = (const kaldi::quasar::TranslationUtil::NbestElement *)std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,kaldi::quasar::TranslationUtil::NbestElement,std::__identity>((uint64_t)v32, (uint64_t)v13, v20, a4);
        v22 = 0xF0F0F0F0F0F0F0F1 * ((v21 - v32) >> 4);
      }
      v27 = v21;
      v28 = a3;
      if (v21 == v13)
      {
        v13 = (kaldi::quasar::TranslationUtil::NbestElement *)v20;
        a3 = (char *)v20;
      }
      else if (v13 == (kaldi::quasar::TranslationUtil::NbestElement *)v20)
      {
        v13 = (kaldi::quasar::TranslationUtil::NbestElement *)v20;
        a3 = (char *)v21;
      }
      else
      {
        v24 = (uint64_t)v13;
        v13 = (kaldi::quasar::TranslationUtil::NbestElement *)v20;
        a3 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v21, v24, v20);
      }
      a5 = -v22 - v15;
      v25 = v9 - v19;
      if (v22 + v19 >= v9 - v22 - v19 - v15)
      {
        std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(a3, v13, v28, a4, -v22 - v15, v25, a7, v29);
        v13 = v27;
        v25 = v19;
        a8 = v29;
        a5 = v22;
      }
      else
      {
        v26 = v19;
        a8 = v29;
        std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v14, v27, a3, a4, v22, v26, a7, v29);
        v32 = (const kaldi::quasar::TranslationUtil::NbestElement *)a3;
        v14 = (kaldi::quasar::TranslationUtil::NbestElement *)a3;
        a3 = v28;
      }
      v31 = (uint64_t)v13;
      v9 = v25;
    }
    while (v25);
  }
}

uint64_t kaldi::quasar::TranslationUtil::NbestElement::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (a1 != a2)
    std::vector<kaldi::quasar::TranslationUtil::PathElement>::__assign_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v4;
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  std::string::operator=((std::string *)(a1 + 96), (const std::string *)(a2 + 96));
  std::string::operator=((std::string *)(a1 + 120), (const std::string *)(a2 + 120));
  std::string::operator=((std::string *)(a1 + 144), (const std::string *)(a2 + 144));
  if (a1 == a2)
  {
    *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
  }
  else
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 168), *(char **)(a2 + 168), *(_QWORD *)(a2 + 176), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 192), *(char **)(a2 + 192), *(_QWORD *)(a2 + 200), (uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 216), *(char **)(a2 + 216), *(_QWORD *)(a2 + 224), (uint64_t)(*(_QWORD *)(a2 + 224) - *(_QWORD *)(a2 + 216)) >> 2);
    *(_BYTE *)(a1 + 240) = *(_BYTE *)(a2 + 240);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,double>,std::__tree_node<std::__value_type<std::string,double>,void *> *,long>>((uint64_t **)(a1 + 248), *(_QWORD **)(a2 + 248), (_QWORD *)(a2 + 256));
  }
  return a1;
}

const kaldi::quasar::TranslationUtil::NbestElement *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(const kaldi::quasar::TranslationUtil::NbestElement *result, const kaldi::quasar::TranslationUtil::NbestElement *a2, kaldi::quasar::TranslationUtil::NbestElement *this, float *a4)
{
  const kaldi::quasar::TranslationUtil::NbestElement *v7;
  const kaldi::quasar::TranslationUtil::NbestElement *v8;
  uint64_t v9;
  uint64_t v10;
  kaldi::quasar::TranslationUtil::NbestElement *v11;
  kaldi::quasar::TranslationUtil::NbestElement *v12;
  uint64_t v13;

  if (result != a2)
  {
    v7 = result;
    result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, result);
    v8 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v7 + 272);
    if (v8 != a2)
    {
      v9 = 0;
      v10 = 1;
      v11 = this;
      do
      {
        if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a4, (uint64_t)v8, (uint64_t)v11))
        {
          kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v11 + 272), v11);
          ++v10;
          v12 = this;
          if (v11 != this)
          {
            v13 = v9;
            while (1)
            {
              v12 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)this + v13);
              if (!kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a4, (uint64_t)v8, (uint64_t)this + v13 - 272))break;
              kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)this + v13, (uint64_t)this + v13 - 272);
              v13 -= 272;
              if (!v13)
              {
                v12 = this;
                break;
              }
            }
          }
          result = (const kaldi::quasar::TranslationUtil::NbestElement *)kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v12, (uint64_t)v8);
        }
        else
        {
          result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v11 + 272), v8);
          ++v10;
        }
        v8 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272);
        v9 += 272;
        v11 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v11 + 272);
      }
      while (v8 != a2);
    }
  }
  return result;
}

void sub_1ADF41C28(_Unwind_Exception *exception_object)
{
  kaldi::quasar::TranslationUtil::NbestElement *v1;
  uint64_t v2;

  if (v1 && v2)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

kaldi::quasar::TranslationUtil::NbestElement *std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(kaldi::quasar::TranslationUtil::NbestElement *result, const kaldi::quasar::TranslationUtil::NbestElement *a2, const kaldi::quasar::TranslationUtil::NbestElement *a3, const kaldi::quasar::TranslationUtil::NbestElement *a4, kaldi::quasar::TranslationUtil::NbestElement *a5, float *a6)
{
  const kaldi::quasar::TranslationUtil::NbestElement *v10;
  uint64_t v11;
  kaldi::quasar::TranslationUtil::NbestElement *v12;
  uint64_t v13;

  if (result == a2)
  {
    v11 = 0;
    v12 = a5;
LABEL_11:
    while (a3 != a4)
    {
      result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v12, a3);
      a3 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a3 + 272);
      v12 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v12 + 272);
      ++v11;
    }
  }
  else
  {
    v10 = result;
    v11 = 0;
    v12 = a5;
    while (a3 != a4)
    {
      if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a6, (uint64_t)a3, (uint64_t)v10))
      {
        result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v12, a3);
        a3 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a3 + 272);
      }
      else
      {
        result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v12, v10);
        v10 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v10 + 272);
      }
      ++v11;
      v12 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v12 + 272);
      if (v10 == a2)
        goto LABEL_11;
    }
    if (v10 != a2)
    {
      v13 = 0;
      do
      {
        result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v12 + v13), (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v10 + v13));
        ++v11;
        v13 += 272;
      }
      while ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v10 + v13) != a2);
    }
  }
  return result;
}

void sub_1ADF41D5C(_Unwind_Exception *exception_object)
{
  kaldi::quasar::TranslationUtil::NbestElement *v1;
  uint64_t v2;

  if (v1 && v2)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(kaldi::quasar::TranslationUtil::NbestElement *a1, kaldi::quasar::TranslationUtil::NbestElement *a2, kaldi::quasar::TranslationUtil::NbestElement *a3, float *a4, uint64_t a5, uint64_t a6, kaldi::quasar::TranslationUtil::NbestElement *this)
{
  kaldi::quasar::TranslationUtil::NbestElement *v7;
  uint64_t v12;
  kaldi::quasar::TranslationUtil::NbestElement *v13;
  const kaldi::quasar::TranslationUtil::NbestElement *v14;
  kaldi::quasar::TranslationUtil::NbestElement *v15;
  kaldi::quasar::TranslationUtil::NbestElement *v16;
  const kaldi::quasar::TranslationUtil::NbestElement *v17;
  float *v18;

  v7 = this;
  if (a5 <= a6)
  {
    if (a1 == a2)
    {
      v12 = 0;
      v16 = this;
    }
    else
    {
      v12 = 0;
      v16 = this;
      v17 = a1;
      do
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v16, v17);
        ++v12;
        v17 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v17 + 272);
        v16 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v16 + 272);
      }
      while (v17 != a2);
    }
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,kaldi::quasar::TranslationUtil::NbestElement *,kaldi::quasar::TranslationUtil::NbestElement *,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>((uint64_t)v7, (uint64_t)v16, (uint64_t)a2, (uint64_t)a3, (uint64_t)a1, a4);
  }
  else
  {
    if (a2 == a3)
    {
      v12 = 0;
      v13 = this;
    }
    else
    {
      v12 = 0;
      v13 = this;
      v14 = a2;
      do
      {
        v15 = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v13, v14);
        ++v12;
        v14 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v14 + 272);
        v13 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v15 + 272);
      }
      while (v14 != a3);
    }
    v18 = a4;
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement *>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement *>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>>((uint64_t)v13, (uint64_t)v13, (uint64_t)v7, (uint64_t)v7, (uint64_t)a2, (uint64_t)a2, (uint64_t)a1, (uint64_t)a1, (uint64_t)a3, (uint64_t)a3, &v18);
  }
  if (v7 && v12)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v7);
      v7 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v7 + 272);
      --v12;
    }
    while (v12);
  }
}

void sub_1ADF41EC4(_Unwind_Exception *exception_object)
{
  kaldi::quasar::TranslationUtil::NbestElement *v1;
  uint64_t v2;

  if (v1 && v2)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,kaldi::quasar::TranslationUtil::NbestElement,std::__identity>(uint64_t a1, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v4;
  unint64_t v7;

  v4 = a1;
  if (a2 != a1)
  {
    v7 = 0xF0F0F0F0F0F0F0F1 * ((a2 - a1) >> 4);
    do
    {
      if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a4, a3, v4 + 272 * (v7 >> 1)))
      {
        v7 >>= 1;
      }
      else
      {
        v4 += 272 * (v7 >> 1) + 272;
        v7 += ~(v7 >> 1);
      }
    }
    while (v7);
  }
  return v4;
}

uint64_t std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,kaldi::quasar::TranslationUtil::NbestElement *,kaldi::quasar::TranslationUtil::NbestElement *,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;

  if (result != a2)
  {
    v7 = a5;
    v11 = result;
    v12 = a5;
    while (a3 != a4)
    {
      if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a6, a3, v11))
      {
        result = kaldi::quasar::TranslationUtil::NbestElement::operator=(v12, a3);
        a3 += 272;
      }
      else
      {
        result = kaldi::quasar::TranslationUtil::NbestElement::operator=(v12, v11);
        v11 += 272;
      }
      v12 += 272;
      v7 += 272;
      if (v11 == a2)
        return result;
    }
    return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,kaldi::quasar::TranslationUtil::NbestElement *,kaldi::quasar::TranslationUtil::NbestElement *,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,0>(v11, a2, v7);
  }
  return result;
}

void std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement *>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement *>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, float **a11)
{
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a2 != a4)
  {
    v14 = a2;
    v15 = a10 - 272;
    while (a6 != a8)
    {
      v16 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(*a11, v14 - 272, a6 - 272);
      if (v16)
        v17 = a6 - 272;
      else
        v17 = v14 - 272;
      if (v16)
        a6 -= 272;
      else
        v14 -= 272;
      kaldi::quasar::TranslationUtil::NbestElement::operator=(v15, v17);
      v15 -= 272;
      if (v14 == a4)
        return;
    }
    v18 = 0;
    do
    {
      v19 = v15 + v18;
      v18 -= 272;
      kaldi::quasar::TranslationUtil::NbestElement::operator=(v19, v14 + v18);
    }
    while (v14 + v18 != a4);
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,kaldi::quasar::TranslationUtil::NbestElement *,kaldi::quasar::TranslationUtil::NbestElement *,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = a3;
  v4 = a1;
  if (a1 != a2)
  {
    v6 = a3;
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::operator=(v6, v4);
      v4 += 272;
      v6 += 272;
      v3 += 272;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,kaldi::quasar::TranslationUtil::NbestElement,std::__identity,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare>(uint64_t a1, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  _BOOL4 v9;

  v4 = a1;
  if (a2 != a1)
  {
    v7 = 0xF0F0F0F0F0F0F0F1 * ((a2 - a1) >> 4);
    do
    {
      v8 = v4 + 272 * (v7 >> 1);
      v9 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a4, v8, a3);
      if (v9)
        v7 += ~(v7 >> 1);
      else
        v7 >>= 1;
      if (v9)
        v4 = v8 + 272;
    }
    while (v7);
  }
  return v4;
}

char *std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  const kaldi::quasar::TranslationUtil::NbestElement *v11;

  v4 = a2;
  v10 = a2;
  v11 = a1;
  while (1)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(&v11, &v10);
    v5 = (char *)v11 + 272;
    v6 = v10 + 272;
    v10 = v6;
    v11 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v11 + 272);
    if (v6 == a3)
      break;
    if (v5 == (char *)v4)
      v4 = v6;
  }
  if (v5 != (char *)v4)
  {
    do
    {
      v10 = v4;
      while (1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(&v11, &v10);
        v7 = (char *)v11 + 272;
        v8 = v10 + 272;
        v10 = v8;
        v11 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v11 + 272);
        if (v8 == a3)
          break;
        if (v7 == (char *)v4)
          v4 = v8;
      }
    }
    while (v7 != (char *)v4);
  }
  return v5;
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ShiftAlignments(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      v6 = *v2;
      v5 = v2[1];
      if (v5 != *v2)
      {
        v7 = 0;
        v8 = -152;
        do
        {
          if (v7)
          {
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v6 + v8), *(char **)(v6 + v8 + 240), *(_QWORD *)(v6 + v8 + 248), (uint64_t)(*(_QWORD *)(v6 + v8 + 248) - *(_QWORD *)(v6 + v8 + 240)) >> 2);
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(*v2 + v8 + 24), *(char **)(*v2 + v8 + 264), *(_QWORD *)(*v2 + v8 + 272), (uint64_t)(*(_QWORD *)(*v2 + v8 + 272) - *(_QWORD *)(*v2 + v8 + 264)) >> 2);
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(*v2 + v8 + 48), *(char **)(*v2 + v8 + 288), *(_QWORD *)(*v2 + v8 + 296), (uint64_t)(*(_QWORD *)(*v2 + v8 + 296) - *(_QWORD *)(*v2 + v8 + 288)) >> 2);
            v6 = *v2;
            v5 = v2[1];
          }
          ++v7;
          v8 += 240;
        }
        while (v7 < 0xEEEEEEEEEEEEEEEFLL * ((v5 - v6) >> 4));
        if (v6 != v5 && *(_DWORD *)(v5 - 216) == *(_DWORD *)(a1 + 5180))
        {
          kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)(v5 - 240));
          v2[1] = v9;
        }
      }
      v2 += 34;
    }
    while (v2 != v3);
  }
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Rescore<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, const kaldi::quasar::TranslationUtil::NbestElement **a2, _QWORD **a3, float a4, float a5, float a6)
{
  double *v12;
  uint64_t v13;
  clockid_t v14;
  unint64_t v15;
  float v16;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const kaldi::quasar::TranslationUtil::NbestElement *v26;
  const kaldi::quasar::TranslationUtil::NbestElement *v27;
  float v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  const kaldi::quasar::TranslationUtil::NbestElement *v58;
  const kaldi::quasar::TranslationUtil::NbestElement *v59;
  kaldi::quasar::TranslationUtil::NbestElement *v60;
  uint64_t v61;
  uint64_t v62;
  const kaldi::quasar::TranslationUtil::NbestElement *v63;
  const kaldi::quasar::TranslationUtil::NbestElement *v64;
  int v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  uint64_t v71;
  float v72;
  _QWORD *v73;
  void *v74;
  uint64_t v75;
  const kaldi::quasar::TranslationUtil::NbestElement **v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  float v81[2];
  float v82[2];
  void *v83;
  uint64_t v84;
  unsigned __int8 v85;
  void *__p[2];
  char v87;
  _BYTE v88[56];

  v12 = (double *)(a1 + 4856);
  v13 = a1 + 5688;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v88, v12, v13, (__int128 *)__p);
  if (v87 < 0)
  {
    operator delete(__p[0]);
    if (!a2)
    {
LABEL_8:
      v16 = 2147500000.0;
      goto LABEL_9;
    }
  }
  else if (!a2)
  {
    goto LABEL_8;
  }
  v15 = 0xF0F0F0F0F0F0F0F1 * ((a2[1] - *a2) >> 4);
  if (!v15)
    goto LABEL_8;
  if (v15 == 1)
  {
    v16 = 0.0;
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Looking for UNK symbol ", 23);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    }
    v18 = kaldi::quasar::TorchEncoderDecoder::OutputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v18 + 88))(&v83, v18, *(int *)(a1 + 5184) + 1);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"UNK label : ", 12);
      if ((v85 & 0x80u) == 0)
        v20 = &v83;
      else
        v20 = v83;
      if ((v85 & 0x80u) == 0)
        v21 = v85;
      else
        v21 = v84;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    }
    v22 = v85;
    if ((v85 & 0x80u) != 0)
      v22 = v84;
    if (!v22)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"No UNK symbol in translation model vocabulary", 45);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
    v23 = (*(uint64_t (**)(_QWORD *))(*a3[4] + 120))(a3[4]);
    v24 = v23;
    if (!v23)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Language model does not have output symbol table", 48);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
    v25 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v23 + 96))(v23, &v83);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"LM UNK ID ", 10);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    }
    v77 = a1;
    if ((_DWORD)v25 == -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Language model does not have OOV symbol : ", 42);
      if ((v85 & 0x80u) == 0)
        v74 = &v83;
      else
        v74 = v83;
      if ((v85 & 0x80u) == 0)
        v75 = v85;
      else
        v75 = v84;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)v74, v75);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
    v26 = *a2;
    v27 = a2[1];
    v76 = a2;
    if (*a2 == v27)
    {
      v16 = 2147500000.0;
    }
    else
    {
      v28 = 1.0 - a4;
      v16 = 2147500000.0;
      do
      {
        v29 = ((uint64_t (*)(_QWORD **))**a3)(a3);
        if ((*((_DWORD *)v26 + 14) - 5) > 1)
        {
          v31 = v29;
          v33 = *(_QWORD *)v26;
          v32 = *((_QWORD *)v26 + 1);
          v34 = 0.0;
          while (v33 != v32)
          {
            v35 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 96))(v24, v33);
            if ((_DWORD)v35 == -1)
            {
              v35 = v25;
              if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to find ", 15);
                v36 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" in LM", 6);
                kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
                v35 = v25;
              }
            }
            if ((((uint64_t (*)(_QWORD **, uint64_t, uint64_t, void **))(*a3)[4])(a3, v31, v35, &v78) & 1) == 0)
            {
              if (kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Word lookup failure : ", 22);
                v38 = *(char *)(v33 + 23);
                if (v38 >= 0)
                  v39 = v33;
                else
                  v39 = *(_QWORD *)v33;
                if (v38 >= 0)
                  v40 = *(unsigned __int8 *)(v33 + 23);
                else
                  v40 = *(_QWORD *)(v33 + 8);
                v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v39, v40);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" (label=", 8);
                v42 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)")", 1);
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              }
              v34 = INFINITY;
              break;
            }
            v31 = HIDWORD(v79);
            v34 = v34 + *(float *)&v79;
            v33 += 240;
          }
          v43 = ((float (*)(_QWORD **, uint64_t))(*a3)[2])(a3, v31);
          v44 = *((float *)v26 + 7);
          v82[0] = *((float *)v26 + 6);
          v82[1] = v44;
          v45 = v28 * v44;
          *((float *)v26 + 6) = (float)(v34 + v43) * a4;
          *((float *)v26 + 7) = v45;
          *((float *)v26 + 8) = v43 * a4;
          *((float *)v26 + 9) = v28 * *((float *)v26 + 9);
          v81[0] = (float)(v34 + v43) * a4;
          v81[1] = v45;
          v78 = 0;
          v79 = 0;
          v80 = 0;
          v46 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestToString(v77, (uint64_t *)v26, (uint64_t)&v78);
          v47 = *((float *)v26 + 8);
          v48 = *((float *)v26 + 9);
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Old Cost = ", 11);
            v50 = fst::operator<<<float>(v49, v82);
            v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)", New cost = ", 13);
            v52 = fst::operator<<<float>(v51, v81);
            v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)", Hyp = ", 8);
            if (v80 >= 0)
              v54 = &v78;
            else
              v54 = v78;
            if (v80 >= 0)
              v55 = HIBYTE(v80);
            else
              v55 = v79;
            v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
            v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" finalcost=", 11);
            fst::operator<<<float>(v57, (float *)v26 + 8);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
          }
          if ((float)((float)(v46 + v47) + v48) < v16)
            v16 = (float)(v46 + v47) + v48;
          if (SHIBYTE(v80) < 0)
            operator delete(v78);
        }
        else
        {
          v30 = *((float *)v26 + 7);
          if ((float)(*((float *)v26 + 6) + v30) < v16)
            v16 = *((float *)v26 + 6) + v30;
        }
        v26 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v26 + 272);
      }
      while (v26 != v27);
    }
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::NbestCompare((uint64_t)&v78, *(_DWORD *)(v77 + 5224), a5, a6);
    v58 = *v76;
    v59 = v76[1];
    __p[0] = v78;
    LODWORD(__p[1]) = v79;
    if (v59 - v58 < 1)
    {
      v60 = 0;
      v62 = 0;
    }
    else
    {
      v60 = (kaldi::quasar::TranslationUtil::NbestElement *)std::get_temporary_buffer[abi:ne180100]<kaldi::quasar::TranslationUtil::NbestElement>(0xF0F0F0F0F0F0F0F1 * ((v59 - v58) >> 4));
      v62 = v61;
    }
    std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v58, v59, (float *)__p, 0xF0F0F0F0F0F0F0F1 * ((v59 - v58) >> 4), v60, v62);
    if (v60)
      operator delete(v60);
    v63 = *v76;
    v64 = v76[1];
    if (*v76 != v64)
    {
      v65 = (int)v78;
      v66 = *((float *)&v78 + 1);
      v67 = *(float *)&v79;
      v68 = powf(*(float *)&v79 + 1.0, *((float *)&v78 + 1));
      do
      {
        v69 = *((float *)v63 + 6);
        v70 = *((float *)v63 + 7);
        v71 = (uint64_t)(*((_QWORD *)v63 + 25) - *((_QWORD *)v63 + 24)) >> 2;
        if (v65 == 2)
        {
          v72 = powf(v67 + (float)(unint64_t)v71, v66) / v68;
        }
        else
        {
          v72 = 1.0;
          if (v65 == 1)
            v72 = (float)(unint64_t)(v71 + 1);
        }
        *((float *)v63 + 10) = (float)(v69 + v70) / v72;
        v63 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v63 + 272);
      }
      while (v63 != v64);
    }
    if ((char)v85 < 0)
      operator delete(v83);
  }
LABEL_9:
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v88, v14);
  return v16;
}

void sub_1ADF42A64(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  if (a25 < 0)
    operator delete(__p);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v31 - 200), a2);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(uint64_t a1, uint64_t *a2, int a3)
{
  double *v6;
  uint64_t v7;
  clockid_t v8;
  uint64_t v9;
  uint64_t v10;
  const kaldi::quasar::TranslationUtil::NbestElement *v11;
  const kaldi::quasar::TranslationUtil::NbestElement *v12;
  kaldi::quasar::TranslationUtil::NbestElement *v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v17;
  _BYTE v18[48];

  v6 = (double *)(a1 + 4856);
  v7 = a1 + 5696;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v18, v6, v7, (__int128 *)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  v9 = *a2;
  v10 = a2[1];
  while (v9 != v10)
  {
    if ((*(_DWORD *)(v9 + 56) - 5) > 1)
    {
      if (*(_BYTE *)(a1 + 5673))
        kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::AssignConfidencesFromConfidenceModel(a1, v9, a3);
      else
        kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::AssignConfidencesFromTranslationModel(a1, (uint64_t *)v9, a3);
    }
    else
    {
      kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::AssignHightestPossibleConfidences(a1, (uint64_t *)v9);
    }
    v9 += 272;
  }
  if (*(_BYTE *)(a1 + 5674))
  {
    v12 = (const kaldi::quasar::TranslationUtil::NbestElement *)*a2;
    v11 = (const kaldi::quasar::TranslationUtil::NbestElement *)a2[1];
    if (v11 - v12 < 1)
    {
      v13 = 0;
      v15 = 0;
    }
    else
    {
      v13 = (kaldi::quasar::TranslationUtil::NbestElement *)std::get_temporary_buffer[abi:ne180100]<kaldi::quasar::TranslationUtil::NbestElement>(0xF0F0F0F0F0F0F0F1 * ((v11 - v12) >> 4));
      v15 = v14;
    }
    std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v12, v11, (uint64_t)__p, 0xF0F0F0F0F0F0F0F1 * ((v11 - v12) >> 4), v13, v15);
    if (v13)
      operator delete(v13);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v18, v8);
}

void sub_1ADF42CAC(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  if (v16)
    operator delete(v16);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a16, a2);
  _Unwind_Resume(a1);
}

void std::vector<kaldi::quasar::TranslationUtil::NbestElement>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0xF0F0F0F0F0F0F0F1 * ((v3 - *a1) >> 4);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 272 * a2;
    while (v3 != v7)
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)(v3 - 272));
    a1[1] = v7;
  }
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestToString(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[11];
  char v18;
  uint64_t v19;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    v7 = 0.0;
  }
  else
  {
    v7 = 0.0;
    do
    {
      v8 = *(char *)(v5 + 23);
      if (v8 >= 0)
        v9 = v5;
      else
        v9 = *(_QWORD *)v5;
      if (v8 >= 0)
        v10 = *(unsigned __int8 *)(v5 + 23);
      else
        v10 = *(_QWORD *)(v5 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
      v7 = v7 + (float)(*(float *)(v5 + 80) + *(float *)(v5 + 84));
      v5 += 240;
    }
    while (v5 != v6);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    **(_BYTE **)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 23) = 0;
  }
  std::stringbuf::str();
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(_OWORD *)a3 = v14;
  *(_QWORD *)(a3 + 16) = v15;
  v16[0] = *MEMORY[0x1E0DE4F50];
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v17[0] = v12;
  v17[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v18 < 0)
    operator delete((void *)v17[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](&v19);
  return v7;
}

void sub_1ADF42ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::NNMTTransliterator::Transliterate<std::vector<kaldi::quasar::TranslationUtil::NbestElement>>(uint64_t result, uint64_t *a2, std::string *a3)
{
  uint64_t v3;
  const std::string *v4;
  const std::string *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17[3];
  void *__p[2];
  uint64_t v19;
  std::string v20;
  _QWORD v21[2];
  _QWORD v22[11];
  char v23;
  uint64_t v24;
  void **v25;

  v16 = result;
  if (*(_QWORD *)(result + 4192) || *(_BYTE *)(result + 4200))
  {
    v3 = *a2;
    v14 = a2[1];
    if (*a2 != v14)
    {
      v13 = *MEMORY[0x1E0DE4F50];
      v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      v12 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      v10 = MEMORY[0x1E0DE4FB8] + 16;
      do
      {
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v21);
        v5 = *(const std::string **)v3;
        v4 = *(const std::string **)(v3 + 8);
        while (v5 != v4)
        {
          memset(&v20, 0, sizeof(v20));
          kaldi::SplitStringToVector(v5, "\\", 1, (uint64_t)&v20);
          if (v20.__r_.__value_.__l.__size_ != v20.__r_.__value_.__r.__words[0])
          {
            __p[0] = 0;
            __p[1] = 0;
            v19 = 0;
            memset(v17, 0, sizeof(v17));
            kaldi::SplitStringToVector((const std::string *)v20.__r_.__value_.__l.__data_, "_", 1, (uint64_t)v17);
            kaldi::JoinVectorToString<std::string>(v17, " ", (uint64_t)__p);
            if (v19 >= 0)
              v6 = __p;
            else
              v6 = (void **)__p[0];
            if (v19 >= 0)
              v7 = HIBYTE(v19);
            else
              v7 = (uint64_t)__p[1];
            v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v6, v7);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
            v25 = (void **)v17;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v25);
            if (SHIBYTE(v19) < 0)
              operator delete(__p[0]);
          }
          __p[0] = &v20;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          v5 += 10;
        }
        std::stringbuf::str();
        kaldi::Trim(&v20);
        kaldi::quasar::NNMTTransliterator::Transliterate(v16, (uint64_t)&v20, a3, 0, __p);
        v9 = (void **)(v3 + 96);
        if (*(char *)(v3 + 119) < 0)
          operator delete(*v9);
        *(_OWORD *)v9 = *(_OWORD *)__p;
        *(_QWORD *)(v3 + 112) = v19;
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v20.__r_.__value_.__l.__data_);
        v21[0] = v13;
        *(_QWORD *)((char *)v21 + *(_QWORD *)(v13 - 24)) = v12;
        v22[0] = v11;
        v22[1] = v10;
        if (v23 < 0)
          operator delete((void *)v22[9]);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        result = MEMORY[0x1AF44D094](&v24);
        v3 += 272;
      }
      while (v3 != v14);
    }
  }
  return result;
}

void sub_1ADF43140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a33 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::AssignHightestPossibleConfidences(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  _DWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  int v17;

  *((_BYTE *)a2 + 240) = 0;
  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v5 = (void **)(a2 + 27);
    v6 = (uint64_t)(a2 + 29);
    do
    {
      if (*((_BYTE *)a2 + 88))
      {
        v8 = (char *)a2[28];
        v7 = a2[29];
        if ((unint64_t)v8 >= v7)
        {
          v10 = (char *)*v5;
          v11 = (v8 - (_BYTE *)*v5) >> 2;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v13 = v7 - (_QWORD)v10;
          if (v13 >> 1 > v12)
            v12 = v13 >> 1;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
            v14 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6, v14);
            v10 = (char *)a2[27];
            v8 = (char *)a2[28];
          }
          else
          {
            v15 = 0;
          }
          v16 = &v15[4 * v11];
          *(_DWORD *)v16 = 1065353216;
          v9 = v16 + 4;
          while (v8 != v10)
          {
            v17 = *((_DWORD *)v8 - 1);
            v8 -= 4;
            *((_DWORD *)v16 - 1) = v17;
            v16 -= 4;
          }
          a2[27] = (uint64_t)v16;
          a2[28] = (uint64_t)v9;
          a2[29] = (uint64_t)&v15[4 * v14];
          if (v10)
            operator delete(v10);
        }
        else
        {
          *(_DWORD *)v8 = 1065353216;
          v9 = v8 + 4;
        }
        a2[28] = (uint64_t)v9;
      }
      *(_DWORD *)(v2 + 232) = 1000;
      v2 += 240;
    }
    while (v2 != v3);
  }
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::AssignConfidencesFromConfidenceModel(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  int *v7;
  int *v8;
  char *v9;
  int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  int *v20;
  int *v21;
  char *v22;
  int v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  int v32;
  char *v33;
  char *v34;
  int v35;
  unint64_t v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  void **v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  _DWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  _QWORD *v69;
  int *v70;
  int *v71;
  double v72;
  int *v73;
  uint64_t v74;
  double v75;
  float v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v80;
  _QWORD *v81;
  int32x2_t v82[2];
  unsigned int v83;
  unsigned int v84;
  int32x2_t v85;
  int v86;
  int v87[8];
  _BYTE v88[32];
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  int32x2_t v95;
  int v96;
  int v97;
  int v98;

  kaldi::Matrix<float>::Matrix((uint64_t)&v95);
  if (*(_QWORD *)(a1 + 5136) == *(_QWORD *)(a1 + 5128) || !*(_BYTE *)(a1 + 5675))
  {
    kaldi::quasar::TorchEncoderDecoder::Align(*(_QWORD *)(a1 + 136), (uint64_t *)(a2 + 168), a2 + 192, a1 + 5632, &v95);
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v85, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v85, (uint64_t)"Alignment cost ", 15);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v85);
    }
  }
  else
  {
    v92 = 0;
    v93 = 0;
    v94 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v6 = *(_QWORD **)a2;
    v81 = *(_QWORD **)(a2 + 8);
    if (*(_QWORD **)a2 == v81)
    {
      v34 = 0;
      v33 = 0;
    }
    else
    {
      v80 = a1;
      do
      {
        v8 = (int *)v6[11];
        v7 = (int *)v6[12];
        if (v8 != v7)
        {
          v9 = v93;
          do
          {
            v10 = *v8;
            if (v9 >= v94)
            {
              v12 = v92;
              v13 = (v9 - v92) >> 2;
              v14 = v13 + 1;
              if ((unint64_t)(v13 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v15 = v94 - v92;
              if ((v94 - v92) >> 1 > v14)
                v14 = v15 >> 1;
              if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
                v16 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v16 = v14;
              if (v16)
              {
                v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v94, v16);
                v12 = v92;
                v9 = v93;
              }
              else
              {
                v17 = 0;
              }
              v18 = &v17[4 * v13];
              *(_DWORD *)v18 = v10;
              v11 = v18 + 4;
              while (v9 != v12)
              {
                v19 = *((_DWORD *)v9 - 1);
                v9 -= 4;
                *((_DWORD *)v18 - 1) = v19;
                v18 -= 4;
              }
              v92 = v18;
              v93 = v11;
              v94 = &v17[4 * v16];
              if (v12)
                operator delete(v12);
            }
            else
            {
              *(_DWORD *)v9 = v10;
              v11 = v9 + 4;
            }
            v93 = v11;
            ++v8;
            v9 = v11;
          }
          while (v8 != v7);
        }
        v21 = (int *)v6[23];
        v20 = (int *)v6[24];
        if (v21 != v20)
        {
          v22 = v90;
          do
          {
            v23 = *v21;
            if (v22 >= v91)
            {
              v25 = v89;
              v26 = (v22 - v89) >> 2;
              v27 = v26 + 1;
              if ((unint64_t)(v26 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v28 = v91 - v89;
              if ((v91 - v89) >> 1 > v27)
                v27 = v28 >> 1;
              if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
                v29 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v29 = v27;
              if (v29)
              {
                v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v91, v29);
                v25 = v89;
                v22 = v90;
              }
              else
              {
                v30 = 0;
              }
              v31 = &v30[4 * v26];
              *(_DWORD *)v31 = v23;
              v24 = v31 + 4;
              while (v22 != v25)
              {
                v32 = *((_DWORD *)v22 - 1);
                v22 -= 4;
                *((_DWORD *)v31 - 1) = v32;
                v31 -= 4;
              }
              v89 = v31;
              v90 = v24;
              v91 = &v30[4 * v29];
              if (v25)
                operator delete(v25);
            }
            else
            {
              *(_DWORD *)v22 = v23;
              v24 = v22 + 4;
            }
            v90 = v24;
            ++v21;
            v22 = v24;
          }
          while (v21 != v20);
        }
        v6 += 30;
      }
      while (v6 != v81);
      v34 = v92;
      v33 = v93;
      a1 = v80;
    }
    v35 = kaldi::MatrixBase<float>::NumCols(a1 + 5632);
    kaldi::Matrix<float>::Resize(&v95, (unint64_t)(v33 - v34) >> 2, (v35 + 1), 0, 0);
    if (v93 == v92)
    {
      v40 = 0;
    }
    else
    {
      v36 = 0;
      v37 = v96;
      do
      {
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v85, (uint64_t)&v95, v36, 1, 0, v37);
        kaldi::CuMatrixBase<float>::CopyToMat<float>(*(_QWORD *)(a1 + 5128) + 48 * *(int *)&v92[4 * v36], (int *)&v85, 111);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v85);
        v38 = *(_DWORD *)&v89[4 * v36];
        v39 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v95);
        v37 = v96;
        *(_DWORD *)(*(_QWORD *)&v95 + 4 * v98 * (int)v36++ + 4 * (v39 - 1)) = v38;
        v40 = (v93 - v92) >> 2;
      }
      while (v40 > v36);
    }
    v41 = kaldi::MatrixBase<float>::NumCols(a1 + 5632);
    kaldi::Matrix<float>::Matrix((uint64_t)&v85, v40, v41, 0, 0);
    v42 = *(_QWORD *)(a2 + 192);
    if (*(_QWORD *)(a2 + 200) != v42)
    {
      v43 = 0;
      do
      {
        v44 = *(_DWORD *)(v42 + 4 * v43);
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v82, (uint64_t)&v85, v43, 1, 0, v86);
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v88, a1 + 5632, v44 - 1, 1, 0, *(_DWORD *)(a1 + 5640));
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v87, a1 + 5632, v44 - 1, 1, 0, *(_DWORD *)(a1 + 5640));
        kaldi::MatrixBase<float>::CopyFromMat<float>((int *)v82, v87, 111);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v87);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v88);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v82);
        ++v43;
        v42 = *(_QWORD *)(a2 + 192);
      }
      while (v43 < (*(_QWORD *)(a2 + 200) - v42) >> 2);
    }
    v45 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v95);
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v82, (uint64_t)&v95, 0, v97, 0, v45 - 1);
    kaldi::MatrixBase<float>::MulElements((uint64_t)v82, (uint64_t)&v85);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v82);
    kaldi::Matrix<float>::~Matrix((uint64_t)&v85);
    if (v89)
    {
      v90 = v89;
      operator delete(v89);
    }
    if (v92)
    {
      v93 = v92;
      operator delete(v92);
    }
  }
  v46 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v95);
  v47 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v95);
  kaldi::CuMatrix<float>::CuMatrix(&v85, v46, v47, 0, 0, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat((uint64_t)&v85, (int *)&v95, 111);
  v48 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v95);
  kaldi::CuMatrix<float>::CuMatrix(v82, v48, 1, 0, 0, 0);
  kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 5256), (uint64_t)&v85, v82, -1, 0);
  kaldi::Matrix<float>::Resize(&v95, v84, v83, 0, 0);
  kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)v82, (int *)&v95, 111);
  v49 = 0;
  v50 = (void **)(a2 + 216);
  while (v49 != kaldi::MatrixBase<float>::NumRows((uint64_t)&v95))
  {
    v51 = *(_QWORD *)&v95 + 4 * v98 * v49;
    v53 = *(char **)(a2 + 224);
    v52 = *(_QWORD *)(a2 + 232);
    if ((unint64_t)v53 >= v52)
    {
      v55 = (char *)*v50;
      v56 = (v53 - (_BYTE *)*v50) >> 2;
      v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v58 = v52 - (_QWORD)v55;
      if (v58 >> 1 > v57)
        v57 = v58 >> 1;
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
        v59 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v59 = v57;
      if (v59)
      {
        v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 232, v59);
        v55 = *(char **)(a2 + 216);
        v53 = *(char **)(a2 + 224);
      }
      else
      {
        v60 = 0;
      }
      v61 = &v60[4 * v56];
      *(_DWORD *)v61 = *(_DWORD *)(v51 + 4);
      v54 = v61 + 4;
      while (v53 != v55)
      {
        v62 = *((_DWORD *)v53 - 1);
        v53 -= 4;
        *((_DWORD *)v61 - 1) = v62;
        v61 -= 4;
      }
      *(_QWORD *)(a2 + 216) = v61;
      *(_QWORD *)(a2 + 224) = v54;
      *(_QWORD *)(a2 + 232) = &v60[4 * v59];
      if (v55)
        operator delete(v55);
    }
    else
    {
      *(_DWORD *)v53 = *(_DWORD *)(v51 + 4);
      v54 = v53 + 4;
    }
    *(_QWORD *)(a2 + 224) = v54;
    ++v49;
  }
  v64 = *(_QWORD **)a2;
  v63 = *(_QWORD **)(a2 + 8);
  if (v63 == *(_QWORD **)a2)
  {
    LODWORD(v78) = 0;
  }
  else
  {
    v65 = 0;
    v66 = ((uint64_t)v63 - *(_QWORD *)a2) / 240;
    v67 = *(unsigned __int8 *)(a2 + 88);
    if (v66 <= 1)
      v68 = 1;
    else
      v68 = ((uint64_t)v63 - *(_QWORD *)a2) / 240;
    do
    {
      if (v67)
      {
        v69 = &v64[30 * v65];
        v70 = (int *)v69[20];
        v71 = (int *)v69[21];
        if (v70 == v71)
        {
          v72 = 0.0;
        }
        else
        {
          v72 = 0.0;
          v73 = v70;
          do
          {
            v74 = *v73++;
            v72 = v72 + *((float *)*v50 + v74);
          }
          while (v73 != v71);
        }
        v75 = v72 / (double)(unint64_t)(v71 - v70);
      }
      else
      {
        v75 = *((float *)*v50 + v65);
      }
      v76 = v75;
      LODWORD(v64[30 * v65++ + 29]) = llround(v76 * 998.0 + 1.0);
    }
    while (v65 != v68);
    LODWORD(v77) = 0;
    do
    {
      v77 = *((int *)v64 + 58) + (uint64_t)(int)v77;
      v64 += 30;
    }
    while (v64 != v63);
    v78 = v77 / v66;
  }
  *(_BYTE *)(a2 + 240) = (int)v78 < a3;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v82);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v85);
  return kaldi::Matrix<float>::~Matrix((uint64_t)&v95);
}

void sub_1ADF43A48(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::Matrix<float>::~Matrix(v1 - 144);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::AssignConfidencesFromTranslationModel(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  _QWORD *v7;
  float *v8;
  float *v9;
  int v10;
  float *v11;
  float v12;
  float v13;
  float *v14;
  float *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  float *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;

  v4 = *a2;
  v5 = a2[1];
  if (*a2 == v5)
  {
    LODWORD(v29) = 0;
  }
  else
  {
    v30 = a3;
    v6 = (void **)(a2 + 27);
    v7 = a2 + 29;
    v31 = a2[1];
    do
    {
      if (*((_BYTE *)a2 + 88))
      {
        v9 = *(float **)(v4 + 184);
        v8 = *(float **)(v4 + 192);
        if (v9 == v8)
          goto LABEL_25;
        v10 = 0;
        v11 = (float *)a2[28];
        do
        {
          v12 = expf(-*v9);
          v13 = v12;
          if ((unint64_t)v11 >= *v7)
          {
            v15 = (float *)*v6;
            v16 = ((char *)v11 - (_BYTE *)*v6) >> 2;
            v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v18 = *v7 - (_QWORD)v15;
            if (v18 >> 1 > v17)
              v17 = v18 >> 1;
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
              v19 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v19 = v17;
            if (v19)
            {
              v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 29), v19);
              v15 = (float *)a2[27];
              v11 = (float *)a2[28];
            }
            else
            {
              v20 = 0;
            }
            v21 = (float *)&v20[4 * v16];
            *v21 = v13;
            v14 = v21 + 1;
            while (v11 != v15)
            {
              v22 = *((_DWORD *)v11-- - 1);
              *((_DWORD *)v21-- - 1) = v22;
            }
            a2[27] = (uint64_t)v21;
            a2[28] = (uint64_t)v14;
            a2[29] = (uint64_t)&v20[4 * v19];
            if (v15)
              operator delete(v15);
          }
          else
          {
            *v11 = v12;
            v14 = v11 + 1;
          }
          v10 += llround(v13 * 998.0 + 1.0);
          a2[28] = (uint64_t)v14;
          ++v9;
          v11 = v14;
        }
        while (v9 != v8);
        v23 = *(_QWORD *)(v4 + 184);
        v24 = *(_QWORD *)(v4 + 192);
        v5 = v31;
        if (v23 == v24)
LABEL_25:
          LODWORD(v25) = 0;
        else
          v25 = v10 / (unint64_t)((v24 - v23) >> 2);
      }
      else
      {
        LODWORD(v25) = llround(expf(-*(float *)(v4 + 84)) * 998.0 + 1.0);
      }
      *(_DWORD *)(v4 + 232) = v25;
      v4 += 240;
    }
    while (v4 != v5);
    v27 = *a2;
    v26 = a2[1];
    if (v26 == *a2)
    {
      LODWORD(v29) = 0;
      a3 = v30;
    }
    else
    {
      LODWORD(v28) = 0;
      a3 = v30;
      do
      {
        v28 = *(int *)(v27 + 232) + (uint64_t)(int)v28;
        v27 += 240;
      }
      while (v27 != v26);
      v29 = v28 / (0xEEEEEEEEEEEEEEEFLL * ((v26 - *a2) >> 4));
    }
  }
  *((_BYTE *)a2 + 240) = (int)v29 < a3;
}

void std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, const kaldi::quasar::TranslationUtil::NbestElement *a2, uint64_t a3, unint64_t a4, kaldi::quasar::TranslationUtil::NbestElement *a5, uint64_t a6)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v14;
  unint64_t v15;
  kaldi::quasar::TranslationUtil::NbestElement *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const kaldi::quasar::TranslationUtil::NbestElement *v25;

  v25 = a1;
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      v24 = (uint64_t)a2 - 272;
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v22, (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a2 - 272));
      v8 = v22;
      if (v23 == v22)
      {
        LODWORD(v10) = 0;
      }
      else
      {
        LODWORD(v9) = 0;
        do
        {
          v9 = *(int *)(v8 + 232) + (uint64_t)(int)v9;
          v8 += 240;
        }
        while (v8 != v23);
        v10 = v9 / (0xEEEEEEEEEEEEEEEFLL * ((v23 - v22) >> 4));
      }
      v19 = *(_QWORD *)a1;
      v18 = *((_QWORD *)a1 + 1);
      if (v18 == *(_QWORD *)a1)
      {
        LODWORD(v21) = 0;
      }
      else
      {
        LODWORD(v20) = 0;
        do
        {
          v20 = *(int *)(v19 + 232) + (uint64_t)(int)v20;
          v19 += 240;
        }
        while (v19 != v18);
        v21 = v20 / (0xEEEEEEEEEEEEEEEFLL * ((v18 - *(_QWORD *)a1) >> 4));
      }
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v22);
      if ((int)v10 > (int)v21)
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(&v25, &v24);
    }
    else
    {
      v11 = a4;
      if ((uint64_t)a4 <= 0)
      {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(a1, a2);
      }
      else
      {
        v14 = (uint64_t *)a5;
        v15 = a4 >> 1;
        v16 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272 * (a4 >> 1));
        v17 = a4 >> 1;
        if ((uint64_t)v11 <= a6)
        {
          std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(a1, v16, a3, v17, a5);
          std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272 * (v11 >> 1)), a2, a3, v11 - (v11 >> 1), (kaldi::quasar::TranslationUtil::NbestElement *)&v14[34 * v15]);
          std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,kaldi::quasar::TranslationUtil::NbestElement*,kaldi::quasar::TranslationUtil::NbestElement*,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v14, &v14[34 * v15], (kaldi::quasar::TranslationUtil::NbestElement *)&v14[34 * v15], (kaldi::quasar::TranslationUtil::NbestElement *)&v14[34 * v11], (uint64_t)a1);
          if (v14)
          {
            do
            {
              kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v14);
              v14 += 34;
              --v11;
            }
            while (v11);
          }
        }
        else
        {
          std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(a1, v16, a3, v17, a5, a6);
          std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>((char *)a1 + 272 * (v11 >> 1), a2, a3, v11 - (v11 >> 1), v14, a6);
          std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(a1, (uint64_t)a1 + 272 * (v11 >> 1), a2, a3, v11 >> 1, v11 - (v11 >> 1), (kaldi::quasar::TranslationUtil::NbestElement *)v14, a6);
        }
      }
    }
  }
}

void sub_1ADF43F90(_Unwind_Exception *exception_object)
{
  kaldi::quasar::TranslationUtil::NbestElement *v1;
  uint64_t v2;

  if (v1)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, const kaldi::quasar::TranslationUtil::NbestElement *a2)
{
  const kaldi::quasar::TranslationUtil::NbestElement *v4;
  const kaldi::quasar::TranslationUtil::NbestElement *v5;
  const kaldi::quasar::TranslationUtil::NbestElement *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[272];
  uint64_t v27;
  uint64_t v28;

  if (a1 != a2)
  {
    v4 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272);
    if ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272) != a2)
    {
      v5 = a1;
      do
      {
        v6 = v4;
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v27, v4);
        v7 = v27;
        if (v28 == v27)
        {
          LODWORD(v9) = 0;
        }
        else
        {
          LODWORD(v8) = 0;
          do
          {
            v8 = *(int *)(v7 + 232) + (uint64_t)(int)v8;
            v7 += 240;
          }
          while (v7 != v28);
          v9 = v8 / (0xEEEEEEEEEEEEEEEFLL * ((v28 - v27) >> 4));
        }
        v11 = *(_QWORD *)v5;
        v10 = *((_QWORD *)v5 + 1);
        if (v10 == *(_QWORD *)v5)
        {
          LODWORD(v13) = 0;
        }
        else
        {
          LODWORD(v12) = 0;
          do
          {
            v12 = *(int *)(v11 + 232) + (uint64_t)(int)v12;
            v11 += 240;
          }
          while (v11 != v10);
          v13 = v12 / (0xEEEEEEEEEEEEEEEFLL * ((v10 - *(_QWORD *)v5) >> 4));
        }
        kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v27);
        if ((int)v9 > (int)v13)
        {
          kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v26, v6);
          v14 = (uint64_t)v6;
          while (1)
          {
            v15 = (uint64_t)v5;
            kaldi::quasar::TranslationUtil::NbestElement::operator=(v14, (uint64_t)v5);
            if (v5 == a1)
              break;
            kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v24, (const kaldi::quasar::TranslationUtil::NbestElement *)v26);
            v16 = v24;
            if (v25 == v24)
            {
              LODWORD(v18) = 0;
            }
            else
            {
              LODWORD(v17) = 0;
              do
              {
                v17 = *(int *)(v16 + 232) + (uint64_t)(int)v17;
                v16 += 240;
              }
              while (v16 != v25);
              v18 = v17 / (0xEEEEEEEEEEEEEEEFLL * ((v25 - v24) >> 4));
            }
            v5 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v5 - 272);
            v19 = *(_QWORD *)(v15 - 264);
            v20 = *(_QWORD *)(v15 - 272);
            if (v19 == v20)
            {
              LODWORD(v23) = 0;
            }
            else
            {
              LODWORD(v21) = 0;
              v22 = 0xEEEEEEEEEEEEEEEFLL * ((v19 - v20) >> 4);
              do
              {
                v21 = *(int *)(v20 + 232) + (uint64_t)(int)v21;
                v20 += 240;
              }
              while (v20 != v19);
              v23 = v21 / v22;
            }
            kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v24);
            v14 = v15;
            if ((int)v18 <= (int)v23)
              goto LABEL_30;
          }
          v15 = (uint64_t)a1;
LABEL_30:
          kaldi::quasar::TranslationUtil::NbestElement::operator=(v15, (uint64_t)v26);
          kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v26);
        }
        v4 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v6 + 272);
        v5 = v6;
      }
      while ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v6 + 272) != a2);
    }
  }
}

void sub_1ADF4419C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&a43);
  _Unwind_Resume(a1);
}

const kaldi::quasar::TranslationUtil::NbestElement *std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(const kaldi::quasar::TranslationUtil::NbestElement *result, kaldi::quasar::TranslationUtil::NbestElement *a2, uint64_t a3, unint64_t a4, kaldi::quasar::TranslationUtil::NbestElement *this)
{
  const kaldi::quasar::TranslationUtil::NbestElement *v8;
  const kaldi::quasar::TranslationUtil::NbestElement *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const kaldi::quasar::TranslationUtil::NbestElement *v18;
  uint64_t v19;
  uint64_t v20;

  if (a4)
  {
    v8 = result;
    if (a4 == 2)
    {
      v9 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a2 - 272);
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v19, (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a2 - 272));
      v10 = v19;
      if (v20 == v19)
      {
        LODWORD(v12) = 0;
      }
      else
      {
        LODWORD(v11) = 0;
        do
        {
          v11 = *(int *)(v10 + 232) + (uint64_t)(int)v11;
          v10 += 240;
        }
        while (v10 != v20);
        v12 = v11 / (0xEEEEEEEEEEEEEEEFLL * ((v20 - v19) >> 4));
      }
      v15 = *(_QWORD *)v8;
      v14 = *((_QWORD *)v8 + 1);
      if (v14 == *(_QWORD *)v8)
      {
        LODWORD(v17) = 0;
      }
      else
      {
        LODWORD(v16) = 0;
        do
        {
          v16 = *(int *)(v15 + 232) + (uint64_t)(int)v16;
          v15 += 240;
        }
        while (v15 != v14);
        v17 = v16 / (0xEEEEEEEEEEEEEEEFLL * ((v14 - *(_QWORD *)v8) >> 4));
      }
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v19);
      if ((int)v12 <= (int)v17)
        v18 = v8;
      else
        v18 = v9;
      if ((int)v12 <= (int)v17)
        v8 = v9;
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, v18);
      return kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)this + 272), v8);
    }
    else if (a4 == 1)
    {
      return kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, result);
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(result, (char *)result + 272 * (a4 >> 1), a3, a4 >> 1, this, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>((char *)v8 + 272 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), (char *)this + 272 * (a4 >> 1), a4 - (a4 >> 1));
      return std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v8, (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272 * (a4 >> 1)), (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272 * (a4 >> 1)), a2, this);
    }
    else
    {
      return std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(result, a2, this);
    }
  }
  return result;
}

void sub_1ADF44394(_Unwind_Exception *exception_object)
{
  kaldi::quasar::TranslationUtil::NbestElement *v1;

  if (v1)
    kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,kaldi::quasar::TranslationUtil::NbestElement*,kaldi::quasar::TranslationUtil::NbestElement*,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(uint64_t *result, uint64_t *a2, kaldi::quasar::TranslationUtil::NbestElement *a3, kaldi::quasar::TranslationUtil::NbestElement *a4, uint64_t a5)
{
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (result == a2)
  {
LABEL_20:
    while (a3 != a4)
    {
      result = (uint64_t *)kaldi::quasar::TranslationUtil::NbestElement::operator=(a5, (uint64_t)a3);
      a3 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a3 + 272);
      a5 += 272;
    }
  }
  else
  {
    v9 = result;
    while (a3 != a4)
    {
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v18, a3);
      v10 = v18;
      if (v19 == v18)
      {
        LODWORD(v12) = 0;
      }
      else
      {
        LODWORD(v11) = 0;
        do
        {
          v11 = *(int *)(v10 + 232) + (uint64_t)(int)v11;
          v10 += 240;
        }
        while (v10 != v19);
        v12 = v11 / (0xEEEEEEEEEEEEEEEFLL * ((v19 - v18) >> 4));
      }
      v14 = *v9;
      v13 = v9[1];
      if (v13 == *v9)
      {
        LODWORD(v16) = 0;
      }
      else
      {
        LODWORD(v15) = 0;
        do
        {
          v15 = *(int *)(v14 + 232) + (uint64_t)(int)v15;
          v14 += 240;
        }
        while (v14 != v13);
        v16 = v15 / (0xEEEEEEEEEEEEEEEFLL * ((v13 - *v9) >> 4));
      }
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v18);
      if ((int)v12 <= (int)v16)
      {
        result = (uint64_t *)kaldi::quasar::TranslationUtil::NbestElement::operator=(a5, (uint64_t)v9);
        v9 += 34;
      }
      else
      {
        result = (uint64_t *)kaldi::quasar::TranslationUtil::NbestElement::operator=(a5, (uint64_t)a3);
        a3 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a3 + 272);
      }
      a5 += 272;
      if (v9 == a2)
        goto LABEL_20;
    }
    if (v9 != a2)
    {
      v17 = 0;
      do
      {
        result = (uint64_t *)kaldi::quasar::TranslationUtil::NbestElement::operator=(a5 + v17 * 8, (uint64_t)&v9[v17]);
        v17 += 34;
      }
      while (&v9[v17] != a2);
    }
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, uint64_t a2, kaldi::quasar::TranslationUtil::NbestElement *a3, uint64_t a4, uint64_t a5, uint64_t a6, kaldi::quasar::TranslationUtil::NbestElement *a7, uint64_t a8)
{
  uint64_t v9;
  kaldi::quasar::TranslationUtil::NbestElement *v13;
  kaldi::quasar::TranslationUtil::NbestElement *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  kaldi::quasar::TranslationUtil::NbestElement *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  kaldi::quasar::TranslationUtil::NbestElement *v33;
  kaldi::quasar::TranslationUtil::NbestElement *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const kaldi::quasar::TranslationUtil::NbestElement *v41;
  char v42;

  v40 = a2;
  v41 = a1;
  if (a6)
  {
    v9 = a6;
    v13 = (kaldi::quasar::TranslationUtil::NbestElement *)a2;
    v14 = a1;
    do
    {
      if (v9 <= a8 || a5 <= a8)
      {
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v14, v13, a3, a4, a5, v9, a7);
        return;
      }
      if (!a5)
        return;
      while (1)
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v38, v13);
        v15 = v38;
        if (v39 == v38)
        {
          LODWORD(v17) = 0;
        }
        else
        {
          LODWORD(v16) = 0;
          do
          {
            v16 = *(int *)(v15 + 232) + (uint64_t)(int)v16;
            v15 += 240;
          }
          while (v15 != v39);
          v17 = v16 / (0xEEEEEEEEEEEEEEEFLL * ((v39 - v38) >> 4));
        }
        v19 = *(_QWORD *)v14;
        v18 = *((_QWORD *)v14 + 1);
        if (v18 == *(_QWORD *)v14)
        {
          LODWORD(v21) = 0;
        }
        else
        {
          LODWORD(v20) = 0;
          do
          {
            v20 = *(int *)(v19 + 232) + (uint64_t)(int)v20;
            v19 += 240;
          }
          while (v19 != v18);
          v21 = v20 / (0xEEEEEEEEEEEEEEEFLL * ((v18 - *(_QWORD *)v14) >> 4));
        }
        kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v38);
        if ((int)v17 > (int)v21)
          break;
        v14 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v14 + 272);
        v41 = v14;
        if (!--a5)
          return;
      }
      v36 = a4;
      if (a5 >= v9)
      {
        if (a5 == 1)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(&v41, &v40);
          return;
        }
        if (a5 >= 0)
          v27 = a5;
        else
          v27 = a5 + 1;
        v28 = v27 >> 1;
        v25 = (uint64_t *)((char *)v14 + 272 * (v27 >> 1));
        v42 = 0;
        v29 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,kaldi::quasar::TranslationUtil::NbestElement,std::__identity,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1}>((char *)v13, (char *)a3, v25);
        v26 = v28;
        v24 = (kaldi::quasar::TranslationUtil::NbestElement *)v29;
        v23 = 0xF0F0F0F0F0F0F0F1 * ((v29 - (char *)v13) >> 4);
      }
      else
      {
        if (v9 >= 0)
          v22 = v9;
        else
          v22 = v9 + 1;
        v23 = v22 >> 1;
        v24 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v13 + 272 * (v22 >> 1));
        v25 = (uint64_t *)std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,kaldi::quasar::TranslationUtil::NbestElement,std::__identity>((char *)v14, (char *)v13, v24);
        v26 = 0xF0F0F0F0F0F0F0F1 * (((char *)v25 - (char *)v14) >> 4);
      }
      v34 = a3;
      if (v25 == (uint64_t *)v13)
      {
        a3 = v24;
      }
      else if (v13 == v24)
      {
        a3 = (kaldi::quasar::TranslationUtil::NbestElement *)v25;
      }
      else
      {
        v30 = v26;
        v31 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>((const kaldi::quasar::TranslationUtil::NbestElement *)v25, (uint64_t)v13, (uint64_t)v24);
        v26 = v30;
        a3 = (kaldi::quasar::TranslationUtil::NbestElement *)v31;
      }
      a5 -= v26;
      v9 -= v23;
      if ((uint64_t)(v26 + v23) >= a5 + v9)
      {
        v33 = v34;
        v35 = v26;
        std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(a3, v24, v33, v36, a5, v9, a7, a8);
        v13 = (kaldi::quasar::TranslationUtil::NbestElement *)v25;
        a4 = v36;
        v9 = v23;
        a5 = v35;
      }
      else
      {
        v32 = v25;
        a4 = v36;
        std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v14, v32, a3, v36, v26, v23, a7, a8);
        v41 = a3;
        v14 = a3;
        v13 = v24;
        a3 = v34;
      }
      v40 = (uint64_t)v13;
    }
    while (v9);
  }
}

const kaldi::quasar::TranslationUtil::NbestElement *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(const kaldi::quasar::TranslationUtil::NbestElement *result, const kaldi::quasar::TranslationUtil::NbestElement *a2, kaldi::quasar::TranslationUtil::NbestElement *this)
{
  const kaldi::quasar::TranslationUtil::NbestElement *v5;
  const kaldi::quasar::TranslationUtil::NbestElement *v6;
  uint64_t v7;
  kaldi::quasar::TranslationUtil::NbestElement *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  kaldi::quasar::TranslationUtil::NbestElement *v16;
  kaldi::quasar::TranslationUtil::NbestElement *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  kaldi::quasar::TranslationUtil::NbestElement *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (result != a2)
  {
    v5 = result;
    result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, result);
    v6 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v5 + 272);
    if (v6 != a2)
    {
      v7 = 1;
      v8 = this;
      do
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v29, v6);
        v9 = v29;
        if (v30 == v29)
        {
          LODWORD(v11) = 0;
        }
        else
        {
          LODWORD(v10) = 0;
          do
          {
            v10 = *(int *)(v9 + 232) + (uint64_t)(int)v10;
            v9 += 240;
          }
          while (v9 != v30);
          v11 = v10 / (0xEEEEEEEEEEEEEEEFLL * ((v30 - v29) >> 4));
        }
        v13 = *(_QWORD *)v8;
        v12 = *((_QWORD *)v8 + 1);
        if (v12 == *(_QWORD *)v8)
        {
          LODWORD(v15) = 0;
        }
        else
        {
          LODWORD(v14) = 0;
          do
          {
            v14 = *(int *)(v13 + 232) + (uint64_t)(int)v14;
            v13 += 240;
          }
          while (v13 != v12);
          v15 = v14 / (0xEEEEEEEEEEEEEEEFLL * ((v12 - *(_QWORD *)v8) >> 4));
        }
        v16 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272);
        kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v29);
        if ((int)v11 <= (int)v15)
        {
          result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272), v6);
          ++v7;
        }
        else
        {
          kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272), v8);
          ++v7;
          v17 = this;
          if (v8 != this)
          {
            while (1)
            {
              kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v27, v6);
              v18 = v27;
              if (v28 == v27)
              {
                LODWORD(v20) = 0;
              }
              else
              {
                LODWORD(v19) = 0;
                do
                {
                  v19 = *(int *)(v18 + 232) + (uint64_t)(int)v19;
                  v18 += 240;
                }
                while (v18 != v28);
                v20 = v19 / (0xEEEEEEEEEEEEEEEFLL * ((v28 - v27) >> 4));
              }
              v21 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 - 272);
              v22 = *((_QWORD *)v8 - 33);
              v23 = *((_QWORD *)v8 - 34);
              if (v22 == v23)
              {
                LODWORD(v26) = 0;
              }
              else
              {
                LODWORD(v24) = 0;
                v25 = 0xEEEEEEEEEEEEEEEFLL * ((v22 - v23) >> 4);
                do
                {
                  v24 = *(int *)(v23 + 232) + (uint64_t)(int)v24;
                  v23 += 240;
                }
                while (v23 != v22);
                v26 = v24 / v25;
              }
              kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v27);
              if ((int)v20 <= (int)v26)
                break;
              kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v8, (uint64_t)v8 - 272);
              v8 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 - 272);
              if (v21 == this)
              {
                v17 = this;
                goto LABEL_31;
              }
            }
            v17 = v8;
          }
LABEL_31:
          result = (const kaldi::quasar::TranslationUtil::NbestElement *)kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v17, (uint64_t)v6);
        }
        v6 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v6 + 272);
        v8 = v16;
      }
      while (v6 != a2);
    }
  }
  return result;
}

void sub_1ADF449F8(_Unwind_Exception *exception_object)
{
  kaldi::quasar::TranslationUtil::NbestElement *v1;
  uint64_t v2;

  if (v1 && v2)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

kaldi::quasar::TranslationUtil::NbestElement *std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(kaldi::quasar::TranslationUtil::NbestElement *result, kaldi::quasar::TranslationUtil::NbestElement *a2, kaldi::quasar::TranslationUtil::NbestElement *a3, kaldi::quasar::TranslationUtil::NbestElement *a4, kaldi::quasar::TranslationUtil::NbestElement *a5)
{
  kaldi::quasar::TranslationUtil::NbestElement *v8;
  uint64_t v9;
  kaldi::quasar::TranslationUtil::NbestElement *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (result == a2)
  {
    v9 = 0;
    v10 = a5;
LABEL_21:
    while (a3 != a4)
    {
      result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v10, a3);
      a3 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a3 + 272);
      v10 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v10 + 272);
      ++v9;
    }
  }
  else
  {
    v8 = result;
    v9 = 0;
    v10 = a5;
    while (a3 != a4)
    {
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v19, a3);
      v11 = v19;
      if (v20 == v19)
      {
        LODWORD(v13) = 0;
      }
      else
      {
        LODWORD(v12) = 0;
        do
        {
          v12 = *(int *)(v11 + 232) + (uint64_t)(int)v12;
          v11 += 240;
        }
        while (v11 != v20);
        v13 = v12 / (0xEEEEEEEEEEEEEEEFLL * ((v20 - v19) >> 4));
      }
      v15 = *(_QWORD *)v8;
      v14 = *((_QWORD *)v8 + 1);
      if (v14 == *(_QWORD *)v8)
      {
        LODWORD(v17) = 0;
      }
      else
      {
        LODWORD(v16) = 0;
        do
        {
          v16 = *(int *)(v15 + 232) + (uint64_t)(int)v16;
          v15 += 240;
        }
        while (v15 != v14);
        v17 = v16 / (0xEEEEEEEEEEEEEEEFLL * ((v14 - *(_QWORD *)v8) >> 4));
      }
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v19);
      if ((int)v13 <= (int)v17)
      {
        result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v10, v8);
        v8 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272);
      }
      else
      {
        result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v10, a3);
        a3 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a3 + 272);
      }
      ++v9;
      v10 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v10 + 272);
      if (v8 == a2)
        goto LABEL_21;
    }
    if (v8 != a2)
    {
      v18 = 0;
      do
      {
        result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v10 + v18), (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + v18));
        ++v9;
        v18 += 272;
      }
      while ((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + v18) != a2);
    }
  }
  return result;
}

void sub_1ADF44BB8(_Unwind_Exception *exception_object)
{
  kaldi::quasar::TranslationUtil::NbestElement *v1;
  uint64_t v2;

  if (v1 && v2)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(kaldi::quasar::TranslationUtil::NbestElement *a1, kaldi::quasar::TranslationUtil::NbestElement *a2, kaldi::quasar::TranslationUtil::NbestElement *a3, uint64_t a4, uint64_t a5, uint64_t a6, kaldi::quasar::TranslationUtil::NbestElement *this)
{
  uint64_t *v7;
  uint64_t v12;
  kaldi::quasar::TranslationUtil::NbestElement *v13;
  const kaldi::quasar::TranslationUtil::NbestElement *v14;
  kaldi::quasar::TranslationUtil::NbestElement *v15;
  kaldi::quasar::TranslationUtil::NbestElement *v16;
  const kaldi::quasar::TranslationUtil::NbestElement *v17;
  uint64_t v18;

  v7 = (uint64_t *)this;
  if (a5 <= a6)
  {
    if (a1 == a2)
    {
      v12 = 0;
      v16 = this;
    }
    else
    {
      v12 = 0;
      v16 = this;
      v17 = a1;
      do
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v16, v17);
        ++v12;
        v17 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v17 + 272);
        v16 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v16 + 272);
      }
      while (v17 != a2);
    }
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,kaldi::quasar::TranslationUtil::NbestElement*,kaldi::quasar::TranslationUtil::NbestElement*,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v7, (uint64_t)v16, a2, a3, (uint64_t)a1);
  }
  else
  {
    if (a2 == a3)
    {
      v12 = 0;
      v13 = this;
    }
    else
    {
      v12 = 0;
      v13 = this;
      v14 = a2;
      do
      {
        v15 = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v13, v14);
        ++v12;
        v14 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v14 + 272);
        v13 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v15 + 272);
      }
      while (v14 != a3);
    }
    v18 = a4;
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement*>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement*>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>>((uint64_t)v13, (uint64_t)v13, (uint64_t)v7, (uint64_t)v7, (uint64_t)a2, (uint64_t)a2, (uint64_t)a1, (uint64_t)a1, (uint64_t)a3, (uint64_t)a3, (int)&v18);
  }
  if (v7 && v12)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v7);
      v7 += 34;
      --v12;
    }
    while (v12);
  }
}

void sub_1ADF44D20(_Unwind_Exception *exception_object)
{
  kaldi::quasar::TranslationUtil::NbestElement *v1;
  uint64_t v2;

  if (v1 && v2)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

char *std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,kaldi::quasar::TranslationUtil::NbestElement,std::__identity>(char *a1, char *a2, kaldi::quasar::TranslationUtil::NbestElement *a3)
{
  char *v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = a1;
  if (a2 != a1)
  {
    v5 = 0xF0F0F0F0F0F0F0F1 * ((a2 - a1) >> 4);
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v15, a3);
      v6 = v15;
      if (v16 == v15)
      {
        LODWORD(v8) = 0;
      }
      else
      {
        LODWORD(v7) = 0;
        do
        {
          v7 = *(int *)(v6 + 232) + (uint64_t)(int)v7;
          v6 += 240;
        }
        while (v6 != v16);
        v8 = v7 / (0xEEEEEEEEEEEEEEEFLL * ((v16 - v15) >> 4));
      }
      v9 = (uint64_t *)&v3[272 * (v5 >> 1)];
      v11 = *v9;
      v10 = v9[1];
      if (v10 == *v9)
      {
        LODWORD(v13) = 0;
      }
      else
      {
        LODWORD(v12) = 0;
        do
        {
          v12 = *(int *)(v11 + 232) + (uint64_t)(int)v12;
          v11 += 240;
        }
        while (v11 != v10);
        v13 = v12 / (0xEEEEEEEEEEEEEEEFLL * ((v10 - *v9) >> 4));
      }
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v15);
      if ((int)v8 > (int)v13)
      {
        v5 >>= 1;
      }
      else
      {
        v3 = (char *)(v9 + 34);
        v5 += ~(v5 >> 1);
      }
    }
    while (v5);
  }
  return v3;
}

uint64_t *std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,kaldi::quasar::TranslationUtil::NbestElement*,kaldi::quasar::TranslationUtil::NbestElement*,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(uint64_t *result, uint64_t a2, kaldi::quasar::TranslationUtil::NbestElement *a3, kaldi::quasar::TranslationUtil::NbestElement *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (result != (uint64_t *)a2)
  {
    v21 = v5;
    v22 = v6;
    v11 = result;
    while (a3 != a4)
    {
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v19, a3);
      v12 = v19;
      if (v20 == v19)
      {
        LODWORD(v14) = 0;
      }
      else
      {
        LODWORD(v13) = 0;
        do
        {
          v13 = *(int *)(v12 + 232) + (uint64_t)(int)v13;
          v12 += 240;
        }
        while (v12 != v20);
        v14 = v13 / (0xEEEEEEEEEEEEEEEFLL * ((v20 - v19) >> 4));
      }
      v16 = *v11;
      v15 = v11[1];
      if (v15 == *v11)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        LODWORD(v17) = 0;
        do
        {
          v17 = *(int *)(v16 + 232) + (uint64_t)(int)v17;
          v16 += 240;
        }
        while (v16 != v15);
        v18 = v17 / (0xEEEEEEEEEEEEEEEFLL * ((v15 - *v11) >> 4));
      }
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v19);
      if ((int)v14 <= (int)v18)
      {
        result = (uint64_t *)kaldi::quasar::TranslationUtil::NbestElement::operator=(a5, (uint64_t)v11);
        v11 += 34;
      }
      else
      {
        result = (uint64_t *)kaldi::quasar::TranslationUtil::NbestElement::operator=(a5, (uint64_t)a3);
        a3 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a3 + 272);
      }
      a5 += 272;
      if (v11 == (uint64_t *)a2)
        return result;
    }
    return (uint64_t *)std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,kaldi::quasar::TranslationUtil::NbestElement *,kaldi::quasar::TranslationUtil::NbestElement *,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,0>((uint64_t)v11, a2, a5);
  }
  return result;
}

void std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement*>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement*>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a2 != a4)
  {
    v14 = a2;
    v15 = a10 - 272;
    while (a6 != a8)
    {
      v16 = std::__invert<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &>::operator()[abi:ne180100]<kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement>(a11, (uint64_t *)(a6 - 272), (kaldi::quasar::TranslationUtil::NbestElement *)(v14 - 272));
      if (v16)
        v17 = a6 - 272;
      else
        v17 = v14 - 272;
      if (v16)
        a6 -= 272;
      else
        v14 -= 272;
      kaldi::quasar::TranslationUtil::NbestElement::operator=(v15, v17);
      v15 -= 272;
      if (v14 == a4)
        return;
    }
    v18 = 0;
    do
    {
      v19 = v15 + v18;
      v18 -= 272;
      kaldi::quasar::TranslationUtil::NbestElement::operator=(v19, v14 + v18);
    }
    while (v14 + v18 != a4);
  }
}

BOOL std::__invert<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &>::operator()[abi:ne180100]<kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement>(int a1, uint64_t *a2, kaldi::quasar::TranslationUtil::NbestElement *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  uint64_t v13;
  uint64_t v14;

  kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v13, a3);
  v4 = v13;
  if (v14 == v13)
  {
    LODWORD(v6) = 0;
  }
  else
  {
    LODWORD(v5) = 0;
    do
    {
      v5 = *(int *)(v4 + 232) + (uint64_t)(int)v5;
      v4 += 240;
    }
    while (v4 != v14);
    v6 = v5 / (0xEEEEEEEEEEEEEEEFLL * ((v14 - v13) >> 4));
  }
  v8 = *a2;
  v7 = a2[1];
  if (v7 == *a2)
  {
    LODWORD(v10) = 0;
  }
  else
  {
    LODWORD(v9) = 0;
    do
    {
      v9 = *(int *)(v8 + 232) + (uint64_t)(int)v9;
      v8 += 240;
    }
    while (v8 != v7);
    v10 = v9 / (0xEEEEEEEEEEEEEEEFLL * ((v7 - *a2) >> 4));
  }
  v11 = (int)v6 > (int)v10;
  kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v13);
  return v11;
}

char *std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,kaldi::quasar::TranslationUtil::NbestElement,std::__identity,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1}>(char *a1, char *a2, uint64_t *a3)
{
  char *v3;
  unint64_t v5;
  const kaldi::quasar::TranslationUtil::NbestElement *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = a1;
  if (a2 != a1)
  {
    v5 = 0xF0F0F0F0F0F0F0F1 * ((a2 - a1) >> 4);
    do
    {
      v6 = (const kaldi::quasar::TranslationUtil::NbestElement *)&v3[272 * (v5 >> 1)];
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v15, v6);
      v7 = v15;
      if (v16 == v15)
      {
        LODWORD(v9) = 0;
      }
      else
      {
        LODWORD(v8) = 0;
        do
        {
          v8 = *(int *)(v7 + 232) + (uint64_t)(int)v8;
          v7 += 240;
        }
        while (v7 != v16);
        v9 = v8 / (0xEEEEEEEEEEEEEEEFLL * ((v16 - v15) >> 4));
      }
      v11 = *a3;
      v10 = a3[1];
      if (v10 == *a3)
      {
        LODWORD(v13) = 0;
      }
      else
      {
        LODWORD(v12) = 0;
        do
        {
          v12 = *(int *)(v11 + 232) + (uint64_t)(int)v12;
          v11 += 240;
        }
        while (v11 != v10);
        v13 = v12 / (0xEEEEEEEEEEEEEEEFLL * ((v10 - *a3) >> 4));
      }
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v15);
      if ((int)v9 <= (int)v13)
        v5 >>= 1;
      else
        v5 += ~(v5 >> 1);
      if ((int)v9 > (int)v13)
        v3 = (char *)v6 + 272;
    }
    while (v5);
  }
  return v3;
}

kaldi::quasar::TranslationUtil::NbestElement *std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__append(uint64_t *a1, unint64_t a2)
{
  kaldi::quasar::TranslationUtil::NbestElement *result;
  uint64_t v5;
  uint64_t v6;
  kaldi::quasar::TranslationUtil::NbestElement *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  kaldi::quasar::TranslationUtil::NbestElement *v13;
  uint64_t v14;
  kaldi::quasar::TranslationUtil::NbestElement *v15;
  uint64_t v16;
  kaldi::quasar::TranslationUtil::NbestElement *v17;
  uint64_t v18;
  _QWORD v19[2];
  kaldi::quasar::TranslationUtil::NbestElement *v20;
  char *v21;
  kaldi::quasar::TranslationUtil::NbestElement *v22;

  v6 = a1[2];
  result = (kaldi::quasar::TranslationUtil::NbestElement *)(a1 + 2);
  v5 = v6;
  v7 = (kaldi::quasar::TranslationUtil::NbestElement *)*((_QWORD *)result - 1);
  if (0xF0F0F0F0F0F0F0F1 * ((v6 - (uint64_t)v7) >> 4) >= a2)
  {
    if (a2)
    {
      v13 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v7 + 272 * a2);
      v14 = 272 * a2;
      do
      {
        result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v7);
        v7 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v7 + 272);
        v14 -= 272;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = 0xF0F0F0F0F0F0F0F1 * (((uint64_t)v7 - *a1) >> 4);
    v9 = v8 + a2;
    if (v8 + a2 > 0xF0F0F0F0F0F0F0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xF0F0F0F0F0F0F0F1 * ((v5 - *a1) >> 4);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x78787878787878)
      v11 = 0xF0F0F0F0F0F0F0;
    else
      v11 = v9;
    v22 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::NbestElement>>((uint64_t)result, v11);
    else
      v12 = 0;
    v15 = (kaldi::quasar::TranslationUtil::NbestElement *)&v12[272 * v8];
    v19[0] = v12;
    v19[1] = v15;
    v20 = v15;
    v21 = &v12[272 * v11];
    v16 = 17 * a2;
    v17 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v15 + 272 * a2);
    v18 = 16 * v16;
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v15);
      v15 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v15 + 272);
      v18 -= 272;
    }
    while (v18);
    v20 = v17;
    std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__swap_out_circular_buffer(a1, v19);
    return (kaldi::quasar::TranslationUtil::NbestElement *)std::__split_buffer<kaldi::quasar::TranslationUtil::NbestElement>::~__split_buffer((uint64_t)v19);
  }
  return result;
}

void sub_1ADF45374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::TranslationUtil::NbestElement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  _BYTE *v6;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  float v15;
  int v16;
  uint64_t i;
  uint64_t v18;
  _BOOL4 v19;
  int v20;
  char **v21;
  uint64_t v22;
  char **v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  std::string *p_p;
  std::string::size_type size;
  int *v29;
  uint64_t v30;
  int v31;
  float v32;
  float v33;
  int *v34;
  int *j;
  std::string *v36;
  std::string::size_type v37;
  float v38;
  std::string v40;
  std::string __p;
  std::string v42;
  char *v43;
  char *v44;
  uint64_t v45;
  int *v46;
  int *v47;

  if (!a4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v42, "Nbestlist cannot be null");
    goto LABEL_92;
  }
  if (!*(_BYTE *)(a3 + 307) || (v6 = (_BYTE *)(a1 + 4896), !*(_BYTE *)(a1 + 5237)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v42, "Decoder not configured for SentencePiece ID decoding.");
    goto LABEL_92;
  }
  v9 = *(_QWORD *)(a1 + 136);
  if (v9 && !*(_BYTE *)(v9 + 2461))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v42, "Model not configured for SentencePiece ID decoding.");
LABEL_92:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v42);
  }
  v10 = *(_DWORD *)(a1 + 5224);
  v11 = *(_DWORD *)(a1 + 5200);
  v12 = *(_DWORD *)(a1 + 5188);
  v13 = *(_DWORD *)(a1 + 5192);
  v14 = *(_DWORD *)(a1 + 5196);
  *(_DWORD *)(a1 + 5200) = *(_DWORD *)(a3 + 228);
  *(_DWORD *)(a1 + 5224) = *(_DWORD *)(a3 + 216);
  if (*(_DWORD *)a3)
    *(_DWORD *)(a1 + 5188) = *(_DWORD *)a3;
  v15 = *(float *)(a3 + 4);
  if (v15 != 0.0)
    *(float *)(a1 + 5192) = v15;
  v16 = *(_DWORD *)(a3 + 8);
  if (v16)
    *(_DWORD *)(a1 + 5196) = v16;
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ValidateDecodingParameters(*(float *)(a3 + 176), a1, *(_DWORD *)(a3 + 160), *(_DWORD *)(a3 + 172));
  v18 = *a4;
  for (i = a4[1];
        i != v18;
  a4[1] = v18;
  if (*(_BYTE *)(a1 + 113))
    v19 = 1;
  else
    v19 = *(_QWORD *)(a1 + 32) != 0;
  if (v19 && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Input Hammer not supported for sentencepiece id decoding.", 57);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
  }
  kaldi::quasar::MultiLangDecorator::Apply(a1 + 120, (uint64_t)a2, a3 + 64, a3 + 88, *(_QWORD *)(*(_QWORD *)(a1 + 136) + 552), (uint64_t)&v46);
  if (*(_BYTE *)(a3 + 232))
    v20 = kaldi::quasar::MultiLangDecorator::NumTagTokens((kaldi::quasar::MultiLangDecorator *)(a1 + 120));
  else
    v20 = 0;
  *(_DWORD *)(a1 + 5204) = v20;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
    kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::LanguageInfo(a3);
    if (v45 >= 0)
      v21 = &v43;
    else
      v21 = (char **)v43;
    if (v45 >= 0)
      v22 = HIBYTE(v45);
    else
      v22 = (uint64_t)v44;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)v21, v22);
    if (SHIBYTE(v45) < 0)
      operator delete(v43);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v42);
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v42, 1);
      kaldi::JoinVectorToString<int>(a2, " ");
      if (v45 >= 0)
        v23 = &v43;
      else
        v23 = (char **)v43;
      if (v45 >= 0)
        v24 = HIBYTE(v45);
      else
        v24 = (uint64_t)v44;
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)v23, v24);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" -> ", 4);
      kaldi::JoinVectorToString<int>(&v46, " ");
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v45) < 0)
        operator delete(v43);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v42);
    }
  }
  v29 = v47;
  if (v47 == v46)
  {
    v32 = 3.4028e38;
    if (!v47)
      return v32;
    goto LABEL_87;
  }
  v43 = 0;
  v44 = 0;
  v45 = 0;
  std::vector<std::shared_ptr<kaldi::quasar::PhraseBook>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::PhraseBook>*,std::shared_ptr<kaldi::quasar::PhraseBook>*>((char *)&v43, *(_QWORD **)(a3 + 240), *(_QWORD **)(a3 + 248), (uint64_t)(*(_QWORD *)(a3 + 248) - *(_QWORD *)(a3 + 240)) >> 4);
  if (v6[344])
    std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100](&v43, (__int128 *)(a1 + 392));
  if (v44 != v43 && *(_DWORD *)(a1 + 5220) != 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Phrasebook (kaldi level) not supported for sentencepiece id decoding.", 69);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v42);
  }
  v30 = *(_QWORD *)(a1 + 136);
  if (v30 && *(_BYTE *)(v30 + 2164) && *(_BYTE *)(v30 + 2165))
    v6[808] = 1;
  v31 = *(_DWORD *)(a1 + 5220);
  if (a4[1] == *a4)
  {
    if (v31 == 3)
      goto LABEL_68;
  }
  else if (v31 != 2)
  {
    goto LABEL_68;
  }
  if (*v6)
  {
    v33 = fminf(kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::DecodeSymbolized<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, &v46, a3, a4, 0), 3.4028e38);
    goto LABEL_69;
  }
LABEL_68:
  v33 = 3.4028e38;
LABEL_69:
  memset(&v42, 0, sizeof(v42));
  v34 = v46;
  for (j = v47; v34 != j; ++v34)
  {
    std::to_string(&v40, *v34);
    std::string::push_back(&v40, 32);
    __p = v40;
    memset(&v40, 0, sizeof(v40));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = &__p;
    else
      v36 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v37 = __p.__r_.__value_.__l.__size_;
    std::string::append(&v42, (const std::string::value_type *)v36, v37);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v40.__r_.__value_.__l.__data_);
  }
  v38 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::PostProcessNbestList<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, &v42, a3, (uint64_t)a4);
  *(_DWORD *)(a1 + 5224) = v10;
  *(_DWORD *)(a1 + 5200) = v11;
  *(_DWORD *)(a1 + 5188) = v12;
  *(_DWORD *)(a1 + 5192) = v13;
  *(_DWORD *)(a1 + 5196) = v14;
  if (v38 == -1.0)
    v32 = v33;
  else
    v32 = v38;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  v29 = v46;
  if (v46)
  {
LABEL_87:
    v47 = v29;
    operator delete(v29);
  }
  return v32;
}

void sub_1ADF45978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void *v23;
  void **v24;
  char v25;

  if (a15 < 0)
    operator delete(__p);
  if (v25 < 0)
    operator delete(v24);
  v24 = (void **)(v21 - 168);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v24);
  v23 = *(void **)(v21 - 144);
  if (v23)
  {
    *(_QWORD *)(v21 - 136) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ValidateDecodingParameters(float a1, uint64_t a2, int a3, int a4)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD v8[34];

  if (a3 < 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Decoder beam (", 14);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, ") should not be negative.");
    goto LABEL_11;
  }
  if (a1 < 0.0 || a1 > 1000.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Decoder confidence threshold (", 30);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, ") should be in the range [0, 1000].");
    goto LABEL_11;
  }
  if (a4 < 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Decoder maximum nbest list size (", 33);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, ") should not be negative.");
LABEL_11:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::DecodeSymbolized<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int **a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  char *v10;
  float v11;
  const kaldi::quasar::TranslationUtil::NbestElement *v12;
  const kaldi::quasar::TranslationUtil::NbestElement *v13;
  kaldi::quasar::TranslationUtil::NbestElement *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  float v26;
  void **v27;
  unint64_t v28;
  void **v29;
  void **v30;
  void **v31;
  void **v32;
  uint64_t v33;
  int v34;
  int v35;
  char *v36;
  char **v37;
  BOOL v38;
  uint64_t i;
  uint64_t v40;
  uint64_t v41;
  int v42;
  void **v44;
  float v45;
  char **v46;
  char *v47;
  uint64_t v48;
  _QWORD v49[3];
  void *v50;
  uint64_t v51;
  char **v52;
  char *v53;
  uint64_t v54;
  __int128 *v55;

  v53 = 0;
  v54 = 0;
  v52 = &v53;
  if (*(_BYTE *)(a3 + 308))
  {
    kaldi::quasar::Encdec::GetTiming(*(const void ***)(a1 + 136), (uint64_t)&v46);
    std::__tree<std::string>::destroy((uint64_t)&v52, v53);
    v10 = v47;
    v52 = v46;
    v53 = v47;
    v54 = v48;
    if (v48)
    {
      *((_QWORD *)v47 + 2) = &v53;
      v46 = &v47;
      v47 = 0;
      v48 = 0;
      v10 = 0;
    }
    else
    {
      v52 = &v53;
    }
    std::__tree<std::string>::destroy((uint64_t)&v46, v10);
  }
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst(&v50);
  memset(v49, 0, sizeof(v49));
  v11 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::DecodeCore<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, a3, (uint64_t)&v50);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::LatticeToNbest<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a3, (uint64_t)&v50, a4, a5, (uint64_t)a2);
  if (a4[1] == *a4 && *(_QWORD *)(a3 + 200))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"Re-decode without LM ", 21);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v46);
    }
    kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DecodeOptions((uint64_t)&v46, *(_DWORD *)(a3 + 160), *(_DWORD *)(a3 + 216), *(float *)(a3 + 228));
    v11 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::DecodeSymbolized<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, &v46, a4, a5);
    kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~DecodeOptions((uint64_t)&v46);
  }
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare::NbestCompare((uint64_t)&v44, *(_DWORD *)(a1 + 5224), *(float *)(a3 + 220), *(float *)(a3 + 224));
  v12 = (const kaldi::quasar::TranslationUtil::NbestElement *)*a4;
  v13 = (const kaldi::quasar::TranslationUtil::NbestElement *)a4[1];
  v46 = (char **)v44;
  *(float *)&v47 = v45;
  if (v13 - v12 < 1)
  {
    v14 = 0;
    v16 = 0;
  }
  else
  {
    v14 = (kaldi::quasar::TranslationUtil::NbestElement *)std::get_temporary_buffer[abi:ne180100]<kaldi::quasar::TranslationUtil::NbestElement>(0xF0F0F0F0F0F0F0F1 * ((v13 - v12) >> 4));
    v16 = v15;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v12, v13, (float *)&v46, 0xF0F0F0F0F0F0F0F1 * ((v13 - v12) >> 4), v14, v16);
  if (v14)
    operator delete(v14);
  v17 = *a4;
  v18 = a4[1];
  if (*a4 != v18)
  {
    v19 = (int)v44;
    v20 = *((float *)&v44 + 1);
    v21 = v45;
    v22 = powf(v45 + 1.0, *((float *)&v44 + 1));
    do
    {
      v23 = *(float *)(v17 + 24);
      v24 = *(float *)(v17 + 28);
      v25 = (uint64_t)(*(_QWORD *)(v17 + 200) - *(_QWORD *)(v17 + 192)) >> 2;
      if (v19 == 2)
      {
        v26 = powf(v21 + (float)(unint64_t)v25, v20) / v22;
      }
      else
      {
        v26 = 1.0;
        if (v19 == 1)
          v26 = (float)(unint64_t)(v25 + 1);
      }
      *(float *)(v17 + 40) = (float)(v23 + v24) / v26;
      v17 += 272;
    }
    while (v17 != v18);
  }
  if (*(_BYTE *)(a3 + 308))
  {
    kaldi::quasar::Encdec::GetTiming(*(const void ***)(a1 + 136), (uint64_t)&v46);
    v27 = (void **)v46;
    if (v46 != &v47)
    {
      do
      {
        if (*((char *)v27 + 55) < 0)
        {
          v29 = (void **)v27[4];
          v28 = (unint64_t)v27[5];
        }
        else
        {
          v28 = *((unsigned __int8 *)v27 + 55);
          v29 = v27 + 4;
        }
        if (v28 >= 4)
          v28 = 4;
        if (v28)
        {
          v30 = (void **)((char *)v29 + v28);
          v31 = v29;
          v32 = v30;
          do
          {
            if (*(_BYTE *)v31 == 116)
            {
              v33 = 1u;
              while (v33 != 4)
              {
                if ((void **)((char *)v31 + v33) == v30)
                  goto LABEL_41;
                v34 = *((unsigned __int8 *)v31 + v33);
                v35 = aTime_2[v33++];
                if (v34 != v35)
                  goto LABEL_33;
              }
              v32 = v31;
            }
LABEL_33:
            v31 = (void **)((char *)v31 + 1);
          }
          while (v31 != v30);
LABEL_41:
          if (v32 != v30 && v32 == v29)
          {
            v55 = (__int128 *)(v27 + 4);
            *((double *)v27 + 7) = *((double *)v27 + 7)
                                 - *((double *)std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v52, (const void **)v27 + 4, (uint64_t)&std::piecewise_construct, &v55)+ 7);
          }
        }
        v36 = (char *)v27[1];
        if (v36)
        {
          do
          {
            v37 = (char **)v36;
            v36 = *(char **)v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            v37 = (char **)v27[2];
            v38 = *v37 == (char *)v27;
            v27 = (void **)v37;
          }
          while (!v38);
        }
        v27 = (void **)v37;
      }
      while (v37 != &v47);
    }
    v40 = *a4;
    for (i = a4[1]; v40 != i; v40 += 272)
    {
      if ((char ***)(v40 + 248) != &v46)
        std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,double>,std::__tree_node<std::__value_type<std::string,double>,void *> *,long>>((uint64_t **)(v40 + 248), v46, &v47);
    }
    std::__tree<std::string>::destroy((uint64_t)&v46, v47);
  }
  v46 = (char **)v49;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  v50 = &unk_1E5D25A80;
  v41 = v51;
  if (v51)
  {
    v42 = *(_DWORD *)(v51 + 56) - 1;
    *(_DWORD *)(v51 + 56) = v42;
    if (!v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  std::__tree<std::string>::destroy((uint64_t)&v52, v53);
  return v11;
}

void sub_1ADF45F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  uint64_t v11;
  _DWORD *v13;
  int v14;

  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a11);
  a9 = (void **)(v11 - 192);
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100](&a9);
  *(_QWORD *)(v11 - 168) = &unk_1E5D25A80;
  v13 = *(_DWORD **)(v11 - 160);
  if (v13)
  {
    v14 = v13[14] - 1;
    v13[14] = v14;
    if (!v14)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
  }
  std::__tree<std::string>::destroy(v11 - 152, *(char **)(v11 - 144));
  _Unwind_Resume(a1);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::PostProcessNbestList<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD **v9;
  float v10;
  BOOL v11;
  _QWORD **v12;
  std::string *v13;
  std::string *v14;
  unint64_t v15;
  _QWORD v17[35];

  v8 = *(_QWORD *)(a1 + 136);
  if (v8 && *(_BYTE *)(v8 + 2164))
  {
    if (*(_BYTE *)(v8 + 2165))
      kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ShiftAlignments(a1, (uint64_t **)a4);
    kaldi::quasar::TranslationUtil::ComputeBackwardAlignments(a4);
    kaldi::quasar::TranslationUtil::MergeAlignments(a4);
  }
  v9 = *(_QWORD ***)(a3 + 200);
  v10 = -1.0;
  if (v9)
    v11 = *(_DWORD *)(a3 + 184) == 3;
  else
    v11 = 0;
  if (v11)
    v10 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Rescore<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, (const kaldi::quasar::TranslationUtil::NbestElement **)a4, v9, *(float *)(a3 + 180), *(float *)(a3 + 220), *(float *)(a3 + 224));
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::JoinBPEUnitsInNbestList(a1, a4);
  v12 = *(_QWORD ***)(a3 + 200);
  if (v12 && *(_DWORD *)(a3 + 184) == 4)
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Word level LM re-scoring", 24);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v17);
      v12 = *(_QWORD ***)(a3 + 200);
    }
    v10 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Rescore<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, (const kaldi::quasar::TranslationUtil::NbestElement **)a4, v12, *(float *)(a3 + 180), *(float *)(a3 + 220), *(float *)(a3 + 224));
  }
  v13 = *(std::string **)a4;
  v14 = *(std::string **)(a4 + 8);
  while (v13 != v14)
  {
    std::string::operator=(v13 + 5, a2);
    std::string::operator=(v13 + 6, a2);
    v13 = (std::string *)((char *)v13 + 272);
  }
  kaldi::quasar::NNMTTransliterator::Transliterate<std::vector<kaldi::quasar::TranslationUtil::NbestElement>>(a1 + 408, (uint64_t *)a4, (std::string *)(a3 + 112));
  if (kaldi::g_kaldi_verbose_level > 0)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v17, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Applying confidence scores to n-best list", 41);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v17);
  }
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(a1, (uint64_t *)a4, (int)*(float *)(a3 + 176));
  v15 = *(int *)(a3 + 172);
  if ((_DWORD)v15 && 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4) > v15)
    std::vector<kaldi::quasar::TranslationUtil::NbestElement>::resize((uint64_t *)a4, v15);
  return v10;
}

void sub_1ADF461E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::Encdec::GetTiming(const void **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const void *v5[4];
  _QWORD v6[4];
  _QWORD v7[4];
  _QWORD v8[4];
  _QWORD v9[4];
  _QWORD v10[4];
  _QWORD v11[4];
  _QWORD v12[4];
  _QWORD v13[4];
  _QWORD v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v5, "time total");
  v5[3] = this[287];
  std::string::basic_string[abi:ne180100]<0>(v6, "time start feedforward");
  v6[3] = this[288];
  std::string::basic_string[abi:ne180100]<0>(v7, "time start ff graph");
  v7[3] = this[289];
  std::string::basic_string[abi:ne180100]<0>(v8, "time start ff input graph");
  v8[3] = this[290];
  std::string::basic_string[abi:ne180100]<0>(v9, "time start ff handover graph");
  v9[3] = this[291];
  std::string::basic_string[abi:ne180100]<0>(v10, "time get history state");
  v10[3] = this[292];
  std::string::basic_string[abi:ne180100]<0>(v11, "time set history state");
  v11[3] = this[293];
  std::string::basic_string[abi:ne180100]<0>(v12, "time feed forward");
  v12[3] = this[294];
  std::string::basic_string[abi:ne180100]<0>(v13, "time ff graph");
  v13[3] = this[295];
  std::string::basic_string[abi:ne180100]<0>(v14, "time ff readout");
  v14[3] = this[296];
  std::map<std::string,double>::map[abi:ne180100](a2, v5, 10);
  v4 = 40;
  do
  {
    if (*((char *)&v5[v4 - 1] - 1) < 0)
      operator delete((void *)v5[v4 - 4]);
    v4 -= 4;
  }
  while (v4 * 8);
}

void sub_1ADF463D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = 320;
  while (1)
  {
    if (*(char *)(v10 + v12 - 9) < 0)
      operator delete(*(void **)(v10 + v12 - 32));
    v12 -= 32;
    if (!v12)
      _Unwind_Resume(exception_object);
  }
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::DecodeCore<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, int **a2, uint64_t a3, uint64_t a4)
{
  double *v7;
  uint64_t v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  float v12;
  int v13;
  int v14;
  float v15;
  int v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  clockid_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  clockid_t v26;
  int v28;
  uint64_t v30;
  std::__shared_weak_count *v31;
  __int128 __p;
  uint64_t v33;
  void **v34;
  _QWORD *v35;
  uint64_t v36;
  _BYTE v37[56];

  v7 = (double *)(a1 + 4856);
  v8 = a1 + 5680;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v37, v7, v8, &__p);
  if (SHIBYTE(v33) < 0)
    operator delete((void *)__p);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    v34 = 0;
    v35 = 0;
    v36 = 0;
    kaldi::JoinVectorToString<int>(a2, ",", (uint64_t)&v34);
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Input : ", 8);
      if (v36 >= 0)
        v10 = (void **)&v34;
      else
        v10 = v34;
      if (v36 >= 0)
        v11 = HIBYTE(v36);
      else
        v11 = (uint64_t)v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    if (SHIBYTE(v36) < 0)
      operator delete(v34);
  }
  v12 = (float)(int)(((unint64_t)((char *)a2[1] - (char *)*a2) >> 2)
                   - (*(_DWORD *)(a3 + 236)
                    + *(_DWORD *)(a1 + 5204)));
  v13 = (int)(float)(*(float *)(a1 + 5200) * v12);
  if (v13 <= 1)
    v13 = 1;
  v28 = v13;
  v14 = *(_DWORD *)(a1 + 5188);
  v15 = *(float *)(a1 + 5192);
  if (v15 != -1.0)
  {
    v16 = (int)(float)(v15 * v12);
    if (*(_DWORD *)(a1 + 5196) > v16)
      v16 = *(_DWORD *)(a1 + 5196);
    if (v16 < v14)
      v14 = v16;
  }
  v17 = (uint64_t *)(a1 + 136);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::SelectModel((uint64_t *)(a1 + 136), a3 + 136, a3 + 88, 0, &v30);
  v18 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (*(_DWORD *)(a3 + 160))
  {
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Beam decoding", 13);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Init<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a3, a4);
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Read<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a3, (uint64_t)a2, 0, 0.0);
    v22 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Write<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a3, v14, 1);
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Greedy decoding", 15);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    kaldi::quasar::Encdec::Start(*v17, *(_DWORD *)(a3 + 312), (const std::string *)(a3 + 112));
    v23 = *(_QWORD *)(a1 + 136);
    v24 = *(unsigned int *)(a3 + 288);
    v25 = *(unsigned int *)(a3 + 292);
    __p = 0uLL;
    v33 = 0;
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::SuppressedIds(a1, a3 + 64, a3 + 88, (uint64_t *)(a3 + 328), (uint64_t)&v34);
    kaldi::quasar::Encdec::ConstrainSoftmax(v23, a3 + 264, v24, v25, a2, (int **)&__p, &v34);
    std::__tree<int>::destroy((uint64_t)&v34, v35);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a4 + 224))(a4);
    __p = 0uLL;
    v33 = 0;
    v22 = kaldi::quasar::TMTools::GreedyDecode<kaldi::quasar::Encdec>(*v17, (uint64_t *)a2, (uint64_t)&__p, (const std::string *)(a3 + 112), a4, v28, v14);
    kaldi::quasar::Encdec::Finish((kaldi::quasar::Encdec *)*v17, v26);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v37, v21);
  return v22;
}

void sub_1ADF467B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  clockid_t v21;

  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v19 - 152), v21);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,double>::map[abi:ne180100](uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,double> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_1ADF468B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

float kaldi::quasar::TMTools::GreedyDecode<kaldi::quasar::Encdec>(uint64_t a1, uint64_t *a2, uint64_t a3, const std::string *a4, uint64_t a5, int a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  float *v19;
  uint64_t v20;
  float v21;
  int32x2_t v23;
  __int128 v24;
  __int128 v25;
  char v26;

  v25 = 0u;
  v24 = 0u;
  v23 = (int32x2_t)&unk_1E5D34170;
  v26 = 0;
  kaldi::CuMatrix<float>::Resize(&v23, (unint64_t)(a2[1] - *a2) >> 2, 1, 0, 0);
  v14 = *a2;
  v15 = a2[1];
  v16 = v15 - *a2;
  if (v15 != *a2)
  {
    v17 = 0;
    v18 = v16 >> 2;
    v19 = (float *)v24;
    if (v18 <= 1)
      v18 = 1;
    v20 = 4 * (int)v25;
    do
    {
      *v19 = (float)*(int *)(v14 + 4 * v17++);
      v19 = (float *)((char *)v19 + v20);
    }
    while (v18 != v17);
  }
  v21 = kaldi::quasar::TMTools::GreedyDecode<kaldi::quasar::Encdec>(a1, (uint64_t)&v23, a3, a4, a5, a6, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v23);
  return v21;
}

void sub_1ADF469DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

float kaldi::quasar::TMTools::GreedyDecode<kaldi::quasar::Encdec>(uint64_t a1, uint64_t a2, uint64_t a3, const std::string *a4, uint64_t a5, int a6, int a7)
{
  int v14;
  float v15;
  int SoftmaxEosId;
  float v17;
  int v18;
  int v19;
  float v20;
  float *v21;
  float *v22;
  uint64_t v23;
  int VocabWordIdx;
  float *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  float *v31;
  int v32;
  _DWORD *v33;
  int v34;
  int v35;
  int *v36;
  int *v37;
  int *v38;
  int *v39;
  int *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  int *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  int *v52;
  int v53;
  _QWORD *v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  int *v58;
  _DWORD *v59;
  int *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  int *v66;
  int v67;
  int *v68;
  int v69;
  _QWORD *v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  int *v74;
  _DWORD *v75;
  int *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  int *v82;
  int v83;
  float *v84;
  float *v85;
  float *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  float *v92;
  int v93;
  _QWORD *v95;
  char *v96;
  char *v97;
  int v98;
  BOOL v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  float v107;
  float v108;
  uint64_t v110;
  _DWORD v111[2];
  void *v112;
  void *v113;
  uint64_t v114;
  void *v115;
  _BYTE *v116;
  uint64_t v117;
  void *v118;
  void *v119;
  _BYTE *v120;
  uint64_t v121;
  void **v122[2];
  void *v123;
  void *v124;
  uint64_t v125;
  int v126;
  void *__p;
  float *v128;
  char *v129;
  uint64_t v130;
  _QWORD *v131;
  unint64_t v132;
  char *v133;
  int *v134;
  char *v135;
  int32x2_t v136;
  float *v137;
  int32x2_t v138;
  __int128 v139;
  __int128 v140;
  char v141;

  kaldi::quasar::Encdec::ResetHistoryState((kaldi::quasar::Encdec *)a1);
  kaldi::quasar::Encdec::Start(a1, 1, a4);
  kaldi::quasar::Encdec::StartFeedforward(a1, a2, 0, 0);
  v140 = 0u;
  v139 = 0u;
  v138 = (int32x2_t)&unk_1E5D34170;
  v141 = 0;
  kaldi::CuMatrix<float>::CuMatrix(&v136, 1, 1, 0, 0, 0);
  *v137 = (float)(*(_DWORD *)(a1 + 824) - 1);
  v133 = 0;
  v134 = 0;
  v135 = 0;
  v130 = 0;
  v131 = 0;
  v132 = 0;
  __p = 0;
  v128 = 0;
  v129 = 0;
  v14 = 0;
  if (a7 < 0)
  {
    v15 = 0.0;
  }
  else
  {
    v110 = a3 + 16;
    v15 = 0.0;
    while (1)
    {
      kaldi::quasar::Encdec::Feedforward(a1, (uint64_t)&v136, &v138);
      kaldi::Matrix<float>::Matrix((uint64_t)v122, HIDWORD(v139), DWORD2(v139), 0, 0);
      kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v138, (int *)v122, 111);
      if (v14 == a7)
      {
        SoftmaxEosId = kaldi::quasar::Encdec::GetSoftmaxEosId((kaldi::quasar::Encdec *)a1);
        v17 = *((float *)v122[0] + SoftmaxEosId);
        v18 = *(_DWORD *)(a1 + 828) - 1;
      }
      else
      {
        v23 = 0;
        v18 = 0;
        v17 = *(_BYTE *)(a1 + 1519) ? 0.0 : -3.4028e38;
        while (v23 != kaldi::MatrixBase<float>::NumCols((uint64_t)v122))
        {
          VocabWordIdx = kaldi::quasar::Encdec::GetVocabWordIdx((kaldi::quasar::Encdec *)a1, v23);
          if ((v14 >= a6 || VocabWordIdx != *(_DWORD *)(a1 + 828) - 1)
            && (!*(_BYTE *)(a1 + 1505) || VocabWordIdx != *(_DWORD *)(a1 + 832) - 1)
            && *((float *)v122[0] + v23) > v17)
          {
            v17 = *((float *)v122[0] + v23);
            v18 = VocabWordIdx;
          }
          ++v23;
        }
      }
      v19 = *(unsigned __int8 *)(a1 + 1519);
      v20 = logf(v17);
      if (v19)
        v17 = v20;
      *v137 = (float)v18;
      v21 = v128;
      if (v128 >= (float *)v129)
      {
        v25 = (float *)__p;
        v26 = ((char *)v128 - (_BYTE *)__p) >> 2;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v28 = v129 - (_BYTE *)__p;
        if ((v129 - (_BYTE *)__p) >> 1 > v27)
          v27 = v28 >> 1;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
          v29 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v129, v29);
          v25 = (float *)__p;
          v21 = v128;
        }
        else
        {
          v30 = 0;
        }
        v31 = (float *)&v30[4 * v26];
        *v31 = v17;
        v22 = v31 + 1;
        while (v21 != v25)
        {
          v32 = *((_DWORD *)v21-- - 1);
          *((_DWORD *)v31-- - 1) = v32;
        }
        __p = v31;
        v128 = v22;
        v129 = &v30[4 * v29];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v128 = v17;
        v22 = v21 + 1;
      }
      v128 = v22;
      v33 = *(_DWORD **)(a1 + 2168);
      v34 = v33 == *(_DWORD **)(a1 + 2176) ? -1 : *v33;
      v118 = 0;
      v119 = 0;
      v120 = 0;
      kaldi::quasar::Encdec::GetAlignmentProbabilities(a1, (uint64_t)&v118, 0);
      v35 = *(_DWORD *)(a1 + 828) - 1;
      if (v18 == v35)
      {
        if (*(_BYTE *)(a1 + 2164) && *(_BYTE *)(a1 + 2165))
        {
          v36 = v134;
          if (v134 >= (int *)v135)
          {
            v46 = (int *)v133;
            v47 = ((char *)v134 - v133) >> 2;
            v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 62)
LABEL_168:
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v49 = v135 - v133;
            if ((v135 - v133) >> 1 > v48)
              v48 = v49 >> 1;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
              v50 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v50 = v48;
            if (v50)
            {
              v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v135, v50);
              v46 = (int *)v133;
              v36 = v134;
            }
            else
            {
              v51 = 0;
            }
            v68 = (int *)&v51[4 * v47];
            *v68 = v34;
            v37 = v68 + 1;
            while (v36 != v46)
            {
              v69 = *--v36;
              *--v68 = v69;
            }
            v133 = (char *)v68;
            v134 = v37;
            v135 = &v51[4 * v50];
            if (v46)
              operator delete(v46);
          }
          else
          {
            *v134 = v34;
            v37 = v36 + 1;
          }
          v134 = v37;
          v70 = v131;
          if ((unint64_t)v131 >= v132)
          {
            v71 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(&v130, (uint64_t)&v118);
          }
          else
          {
            *v131 = 0;
            v70[1] = 0;
            v70[2] = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v70, v118, (uint64_t)v119, ((_BYTE *)v119 - (_BYTE *)v118) >> 2);
            v71 = (uint64_t)(v70 + 3);
          }
          v131 = (_QWORD *)v71;
          v72 = v18 + 1;
          v74 = *(int **)(a3 + 8);
          v73 = *(_QWORD *)(a3 + 16);
          if ((unint64_t)v74 >= v73)
          {
            v76 = *(int **)a3;
            v77 = ((uint64_t)v74 - *(_QWORD *)a3) >> 2;
            v78 = v77 + 1;
            if ((unint64_t)(v77 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v79 = v73 - (_QWORD)v76;
            if (v79 >> 1 > v78)
              v78 = v79 >> 1;
            if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL)
              v80 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v80 = v78;
            if (v80)
            {
              v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v110, v80);
              v76 = *(int **)a3;
              v74 = *(int **)(a3 + 8);
            }
            else
            {
              v81 = 0;
            }
            v82 = (int *)&v81[4 * v77];
            *v82 = v72;
            v75 = v82 + 1;
            while (v74 != v76)
            {
              v83 = *--v74;
              *--v82 = v83;
            }
            *(_QWORD *)a3 = v82;
            *(_QWORD *)(a3 + 8) = v75;
            *(_QWORD *)(a3 + 16) = &v81[4 * v80];
            if (v76)
              operator delete(v76);
          }
          else
          {
            *v74 = v72;
            v75 = v74 + 1;
          }
          *(_QWORD *)(a3 + 8) = v75;
          v84 = v128;
          if (v128 >= (float *)v129)
          {
            v86 = (float *)__p;
            v87 = ((char *)v128 - (_BYTE *)__p) >> 2;
            v88 = v87 + 1;
            if ((unint64_t)(v87 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v89 = v129 - (_BYTE *)__p;
            if ((v129 - (_BYTE *)__p) >> 1 > v88)
              v88 = v89 >> 1;
            if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL)
              v90 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v90 = v88;
            if (v90)
            {
              v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v129, v90);
              v86 = (float *)__p;
              v84 = v128;
            }
            else
            {
              v91 = 0;
            }
            v92 = (float *)&v91[4 * v87];
            *v92 = 0.0;
            v85 = v92 + 1;
            while (v84 != v86)
            {
              v93 = *((_DWORD *)v84-- - 1);
              *((_DWORD *)v92-- - 1) = v93;
            }
            __p = v92;
            v128 = v85;
            v129 = &v91[4 * v90];
            if (v86)
              operator delete(v86);
          }
          else
          {
            *v128 = 0.0;
            v85 = v84 + 1;
          }
          v128 = v85;
        }
      }
      else
      {
        v38 = v134;
        if (v134 >= (int *)v135)
        {
          v40 = (int *)v133;
          v41 = ((char *)v134 - v133) >> 2;
          v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) >> 62)
            goto LABEL_168;
          v43 = v135 - v133;
          if ((v135 - v133) >> 1 > v42)
            v42 = v43 >> 1;
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
            v44 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v44 = v42;
          if (v44)
          {
            v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v135, v44);
            v40 = (int *)v133;
            v38 = v134;
          }
          else
          {
            v45 = 0;
          }
          v52 = (int *)&v45[4 * v41];
          *v52 = v34;
          v39 = v52 + 1;
          while (v38 != v40)
          {
            v53 = *--v38;
            *--v52 = v53;
          }
          v133 = (char *)v52;
          v134 = v39;
          v135 = &v45[4 * v44];
          if (v40)
            operator delete(v40);
        }
        else
        {
          *v134 = v34;
          v39 = v38 + 1;
        }
        v134 = v39;
        v54 = v131;
        if ((unint64_t)v131 >= v132)
        {
          v55 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(&v130, (uint64_t)&v118);
        }
        else
        {
          *v131 = 0;
          v54[1] = 0;
          v54[2] = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v54, v118, (uint64_t)v119, ((_BYTE *)v119 - (_BYTE *)v118) >> 2);
          v55 = (uint64_t)(v54 + 3);
        }
        v131 = (_QWORD *)v55;
        v56 = v18 + 1;
        v58 = *(int **)(a3 + 8);
        v57 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v58 >= v57)
        {
          v60 = *(int **)a3;
          v61 = ((uint64_t)v58 - *(_QWORD *)a3) >> 2;
          v62 = v61 + 1;
          if ((unint64_t)(v61 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v63 = v57 - (_QWORD)v60;
          if (v63 >> 1 > v62)
            v62 = v63 >> 1;
          if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
            v64 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v64 = v62;
          if (v64)
          {
            v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v110, v64);
            v60 = *(int **)a3;
            v58 = *(int **)(a3 + 8);
          }
          else
          {
            v65 = 0;
          }
          v66 = (int *)&v65[4 * v61];
          *v66 = v56;
          v59 = v66 + 1;
          while (v58 != v60)
          {
            v67 = *--v58;
            *--v66 = v67;
          }
          *(_QWORD *)a3 = v66;
          *(_QWORD *)(a3 + 8) = v59;
          *(_QWORD *)(a3 + 16) = &v65[4 * v64];
          if (v60)
            operator delete(v60);
        }
        else
        {
          *v58 = v56;
          v59 = v58 + 1;
        }
        *(_QWORD *)(a3 + 8) = v59;
      }
      if (v118)
      {
        v119 = v118;
        operator delete(v118);
      }
      v15 = v15 + v17;
      kaldi::Matrix<float>::~Matrix((uint64_t)v122);
      if (v18 == v35)
        break;
      if (v14++ == a7)
        goto LABEL_138;
    }
  }
  if (v14 == a7 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v122);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)"Decoder hit max sentence length : ", 34);
    v95 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)" ", 1);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v122);
  }
LABEL_138:
  if (*(_BYTE *)(a1 + 1504))
  {
    if (v133 != (char *)v134)
    {
      v96 = (char *)(v134 - 1);
      if (v134 - 1 > (int *)v133)
      {
        v97 = v133 + 4;
        do
        {
          v98 = *((_DWORD *)v97 - 1);
          *((_DWORD *)v97 - 1) = *(_DWORD *)v96;
          *(_DWORD *)v96 = v98;
          v96 -= 4;
          v99 = v97 >= v96;
          v97 += 4;
        }
        while (!v99);
      }
    }
  }
  v100 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 200))(a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 176))(a5, v100);
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3)
  {
    v102 = 0;
  }
  else
  {
    v101 = 0;
    v102 = 0;
    v103 = v100;
    do
    {
      v104 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a5 + 200))(a5);
      if (v102 >= ((char *)v134 - v133) >> 2 || v102 >= (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2)
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v131 - v130) >> 3) <= v102)
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      v100 = v104;
      v105 = *(_DWORD *)&v133[4 * v102];
      v106 = *(_DWORD *)(*(_QWORD *)a3 + 4 * v102);
      v107 = *((float *)__p + v102);
      v115 = 0;
      v116 = 0;
      v117 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v115, *(const void **)(v130 + v101), *(_QWORD *)(v130 + v101 + 8), (uint64_t)(*(_QWORD *)(v130 + v101 + 8) - *(_QWORD *)(v130 + v101)) >> 2);
      LODWORD(v118) = 0;
      *((float *)&v118 + 1) = -v107;
      v120 = 0;
      v121 = 0;
      v119 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v119, v115, (uint64_t)v116, (v116 - (_BYTE *)v115) >> 2);
      v122[0] = (void **)__PAIR64__(v106, v105);
      v122[1] = (void **)v118;
      v124 = 0;
      v125 = 0;
      v123 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v123, v119, (uint64_t)v120, (v120 - (_BYTE *)v119) >> 2);
      v126 = v100;
      (*(void (**)(uint64_t, uint64_t, void ***))(*(_QWORD *)a5 + 208))(a5, v103, v122);
      if (v123)
      {
        v124 = v123;
        operator delete(v123);
      }
      if (v119)
      {
        v120 = v119;
        operator delete(v119);
      }
      if (v115)
      {
        v116 = v115;
        operator delete(v115);
      }
      ++v102;
      v101 += 24;
      v103 = v100;
    }
    while (v102 != (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  }
  v108 = -*((float *)__p + v102);
  v111[0] = 0;
  *(float *)&v111[1] = v108;
  v113 = 0;
  v114 = 0;
  v112 = 0;
  (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)a5 + 184))(a5, v100, v111);
  if (v112)
  {
    v113 = v112;
    operator delete(v112);
  }
  if (__p)
  {
    v128 = (float *)__p;
    operator delete(__p);
  }
  v122[0] = (void **)&v130;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v122);
  if (v133)
  {
    v134 = (int *)v133;
    operator delete(v133);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v136);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v138);
  return -v15;
}

void sub_1ADF47430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,char *a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,uint64_t a59,char a60,uint64_t a61)
{
  uint64_t v61;
  void *v63;

  if (__p)
  {
    a58 = (uint64_t)__p;
    operator delete(__p);
  }
  a23 = &a60;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  v63 = *(void **)(v61 - 240);
  if (v63)
  {
    *(_QWORD *)(v61 - 232) = v63;
    operator delete(v63);
  }
  kaldi::CuMatrix<float>::~CuMatrix(v61 - 216);
  kaldi::CuMatrix<float>::~CuMatrix(v61 - 168);
  _Unwind_Resume(a1);
}

void std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, const kaldi::quasar::TranslationUtil::NbestElement *a2, float *a3, unint64_t a4, kaldi::quasar::TranslationUtil::NbestElement *a5, uint64_t a6)
{
  unint64_t v9;
  kaldi::quasar::TranslationUtil::NbestElement *v11;
  unint64_t v12;
  const kaldi::quasar::TranslationUtil::NbestElement *v13;
  unint64_t v14;
  uint64_t v15;
  const kaldi::quasar::TranslationUtil::NbestElement *v16;

  v16 = a1;
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      v15 = (uint64_t)a2 - 272;
      if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a3, (uint64_t)a2 - 272, (uint64_t)a1))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(&v16, &v15);
      }
    }
    else
    {
      v9 = a4;
      if ((uint64_t)a4 <= 0)
      {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(a1, a2, a3);
      }
      else
      {
        v11 = a5;
        v12 = a4 >> 1;
        v13 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272 * (a4 >> 1));
        v14 = a4 >> 1;
        if ((uint64_t)v9 <= a6)
        {
          std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(a1, v13, a3, v14, a5);
          std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272 * (v9 >> 1)), a2, a3, v9 - (v9 >> 1), (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v11 + 272 * v12));
          std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,kaldi::quasar::TranslationUtil::NbestElement *,kaldi::quasar::TranslationUtil::NbestElement *,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>((uint64_t)v11, (uint64_t)v11 + 272 * v12, (uint64_t)v11 + 272 * v12, (uint64_t)v11 + 272 * v9, (uint64_t)a1, a3);
          if (v11)
          {
            do
            {
              kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v11);
              v11 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v11 + 272);
              --v9;
            }
            while (v9);
          }
        }
        else
        {
          std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(a1, v13, a3, v14, a5, a6);
          std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>((char *)a1 + 272 * (v9 >> 1), a2, a3, v9 - (v9 >> 1), v11, a6);
          std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(a1, (uint64_t)a1 + 272 * (v9 >> 1), (char *)a2, a3, v9 >> 1, v9 - (v9 >> 1), v11, a6);
        }
      }
    }
  }
}

void sub_1ADF47720(_Unwind_Exception *exception_object)
{
  kaldi::quasar::TranslationUtil::NbestElement *v1;
  uint64_t v2;

  if (v1)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, const kaldi::quasar::TranslationUtil::NbestElement *a2, float *a3)
{
  uint64_t v5;
  uint64_t v7;
  const kaldi::quasar::TranslationUtil::NbestElement *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[272];

  if (a1 != a2)
  {
    v5 = (uint64_t)a1 + 272;
    if ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272) != a2)
    {
      v7 = 0;
      v8 = a1;
      do
      {
        v9 = (uint64_t)v8;
        v8 = (const kaldi::quasar::TranslationUtil::NbestElement *)v5;
        if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a3, v5, v9))
        {
          kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v12, v8);
          v10 = v7;
          while (1)
          {
            kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)a1 + v10 + 272, (uint64_t)a1 + v10);
            if (!v10)
              break;
            v10 -= 272;
            if (!kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a3, (uint64_t)v12, (uint64_t)a1 + v10))
            {
              v11 = (uint64_t)a1 + v10 + 272;
              goto LABEL_10;
            }
          }
          v11 = (uint64_t)a1;
LABEL_10:
          kaldi::quasar::TranslationUtil::NbestElement::operator=(v11, (uint64_t)v12);
          kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v12);
        }
        v5 = (uint64_t)v8 + 272;
        v7 += 272;
      }
      while ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272) != a2);
    }
  }
}

void sub_1ADF47824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&a9);
  _Unwind_Resume(a1);
}

const kaldi::quasar::TranslationUtil::NbestElement *std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(const kaldi::quasar::TranslationUtil::NbestElement *result, const kaldi::quasar::TranslationUtil::NbestElement *a2, float *a3, unint64_t a4, kaldi::quasar::TranslationUtil::NbestElement *this)
{
  const kaldi::quasar::TranslationUtil::NbestElement *v9;
  const kaldi::quasar::TranslationUtil::NbestElement *v10;
  _BOOL4 v11;
  const kaldi::quasar::TranslationUtil::NbestElement *v12;

  if (a4)
  {
    v9 = result;
    if (a4 == 2)
    {
      v10 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a2 - 272);
      v11 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a3, (uint64_t)a2 - 272, (uint64_t)result);
      if (v11)
        v12 = v10;
      else
        v12 = v9;
      if (!v11)
        v9 = v10;
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, v12);
      return kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)this + 272), v9);
    }
    else if (a4 == 1)
    {
      return kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, result);
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(result, (char *)result + 272 * (a4 >> 1), a3, a4 >> 1, this, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>((char *)v9 + 272 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), (char *)this + 272 * (a4 >> 1), a4 - (a4 >> 1));
      return std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v9, (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v9 + 272 * (a4 >> 1)), (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v9 + 272 * (a4 >> 1)), a2, this, a3);
    }
    else
    {
      return std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(result, a2, this, a3);
    }
  }
  return result;
}

void sub_1ADF4798C(_Unwind_Exception *exception_object)
{
  kaldi::quasar::TranslationUtil::NbestElement *v1;

  if (v1)
    kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
  _Unwind_Resume(exception_object);
}

void std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, uint64_t a2, char *a3, float *a4, uint64_t a5, uint64_t a6, kaldi::quasar::TranslationUtil::NbestElement *a7, uint64_t a8)
{
  uint64_t v9;
  kaldi::quasar::TranslationUtil::NbestElement *v13;
  kaldi::quasar::TranslationUtil::NbestElement *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const kaldi::quasar::TranslationUtil::NbestElement *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  kaldi::quasar::TranslationUtil::NbestElement *v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  const kaldi::quasar::TranslationUtil::NbestElement *v32;
  char v33;
  uint64_t v34;
  int v35;

  v31 = a2;
  v32 = a1;
  if (a6)
  {
    v9 = a6;
    v13 = (kaldi::quasar::TranslationUtil::NbestElement *)a2;
    v14 = a1;
    do
    {
      if (v9 <= a8 || a5 <= a8)
      {
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v14, v13, (kaldi::quasar::TranslationUtil::NbestElement *)a3, a4, a5, v9, a7);
        return;
      }
      if (!a5)
        return;
      v15 = -a5;
      while (!kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a4, (uint64_t)v13, (uint64_t)v14))
      {
        v14 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v32 + 272);
        v32 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v32 + 272);
        if (__CFADD__(v15++, 1))
          return;
      }
      v17 = -v15;
      v29 = a8;
      if (-v15 >= v9)
      {
        if (v15 == -1)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(&v32, &v31);
          return;
        }
        if (v15 > 0)
          v17 = 1 - v15;
        v22 = v17 >> 1;
        v14 = v32;
        v21 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v32 + 272 * (v17 >> 1));
        v23 = *((_DWORD *)a4 + 2);
        v34 = *(_QWORD *)a4;
        v35 = v23;
        v33 = 0;
        v20 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,kaldi::quasar::TranslationUtil::NbestElement,std::__identity,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare>((uint64_t)v13, (uint64_t)a3, (uint64_t)v21, (float *)&v34);
        v19 = 0xF0F0F0F0F0F0F0F1 * ((v20 - (uint64_t)v13) >> 4);
      }
      else
      {
        if (v9 >= 0)
          v18 = v9;
        else
          v18 = v9 + 1;
        v19 = v18 >> 1;
        v20 = (uint64_t)v13 + 272 * (v18 >> 1);
        v14 = v32;
        v21 = (const kaldi::quasar::TranslationUtil::NbestElement *)std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,kaldi::quasar::TranslationUtil::NbestElement,std::__identity>((uint64_t)v32, (uint64_t)v13, v20, a4);
        v22 = 0xF0F0F0F0F0F0F0F1 * ((v21 - v32) >> 4);
      }
      v27 = v21;
      v28 = a3;
      if (v21 == v13)
      {
        v13 = (kaldi::quasar::TranslationUtil::NbestElement *)v20;
        a3 = (char *)v20;
      }
      else if (v13 == (kaldi::quasar::TranslationUtil::NbestElement *)v20)
      {
        v13 = (kaldi::quasar::TranslationUtil::NbestElement *)v20;
        a3 = (char *)v21;
      }
      else
      {
        v24 = (uint64_t)v13;
        v13 = (kaldi::quasar::TranslationUtil::NbestElement *)v20;
        a3 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v21, v24, v20);
      }
      a5 = -v22 - v15;
      v25 = v9 - v19;
      if (v22 + v19 >= v9 - v22 - v19 - v15)
      {
        std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(a3, v13, v28, a4, -v22 - v15, v25, a7, v29);
        v13 = v27;
        v25 = v19;
        a8 = v29;
        a5 = v22;
      }
      else
      {
        v26 = v19;
        a8 = v29;
        std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v14, v27, a3, a4, v22, v26, a7, v29);
        v32 = (const kaldi::quasar::TranslationUtil::NbestElement *)a3;
        v14 = (kaldi::quasar::TranslationUtil::NbestElement *)a3;
        a3 = v28;
      }
      v31 = (uint64_t)v13;
      v9 = v25;
    }
    while (v25);
  }
}

const kaldi::quasar::TranslationUtil::NbestElement *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(const kaldi::quasar::TranslationUtil::NbestElement *result, const kaldi::quasar::TranslationUtil::NbestElement *a2, kaldi::quasar::TranslationUtil::NbestElement *this, float *a4)
{
  const kaldi::quasar::TranslationUtil::NbestElement *v7;
  const kaldi::quasar::TranslationUtil::NbestElement *v8;
  uint64_t v9;
  uint64_t v10;
  kaldi::quasar::TranslationUtil::NbestElement *v11;
  kaldi::quasar::TranslationUtil::NbestElement *v12;
  uint64_t v13;

  if (result != a2)
  {
    v7 = result;
    result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, result);
    v8 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v7 + 272);
    if (v8 != a2)
    {
      v9 = 0;
      v10 = 1;
      v11 = this;
      do
      {
        if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a4, (uint64_t)v8, (uint64_t)v11))
        {
          kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v11 + 272), v11);
          ++v10;
          v12 = this;
          if (v11 != this)
          {
            v13 = v9;
            while (1)
            {
              v12 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)this + v13);
              if (!kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a4, (uint64_t)v8, (uint64_t)this + v13 - 272))break;
              kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)this + v13, (uint64_t)this + v13 - 272);
              v13 -= 272;
              if (!v13)
              {
                v12 = this;
                break;
              }
            }
          }
          result = (const kaldi::quasar::TranslationUtil::NbestElement *)kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v12, (uint64_t)v8);
        }
        else
        {
          result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v11 + 272), v8);
          ++v10;
        }
        v8 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272);
        v9 += 272;
        v11 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v11 + 272);
      }
      while (v8 != a2);
    }
  }
  return result;
}

void sub_1ADF47D34(_Unwind_Exception *exception_object)
{
  kaldi::quasar::TranslationUtil::NbestElement *v1;
  uint64_t v2;

  if (v1 && v2)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

kaldi::quasar::TranslationUtil::NbestElement *std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(kaldi::quasar::TranslationUtil::NbestElement *result, const kaldi::quasar::TranslationUtil::NbestElement *a2, const kaldi::quasar::TranslationUtil::NbestElement *a3, const kaldi::quasar::TranslationUtil::NbestElement *a4, kaldi::quasar::TranslationUtil::NbestElement *a5, float *a6)
{
  const kaldi::quasar::TranslationUtil::NbestElement *v10;
  uint64_t v11;
  kaldi::quasar::TranslationUtil::NbestElement *v12;
  uint64_t v13;

  if (result == a2)
  {
    v11 = 0;
    v12 = a5;
LABEL_11:
    while (a3 != a4)
    {
      result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v12, a3);
      a3 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a3 + 272);
      v12 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v12 + 272);
      ++v11;
    }
  }
  else
  {
    v10 = result;
    v11 = 0;
    v12 = a5;
    while (a3 != a4)
    {
      if (kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::operator()(a6, (uint64_t)a3, (uint64_t)v10))
      {
        result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v12, a3);
        a3 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a3 + 272);
      }
      else
      {
        result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v12, v10);
        v10 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v10 + 272);
      }
      ++v11;
      v12 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v12 + 272);
      if (v10 == a2)
        goto LABEL_11;
    }
    if (v10 != a2)
    {
      v13 = 0;
      do
      {
        result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v12 + v13), (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v10 + v13));
        ++v11;
        v13 += 272;
      }
      while ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v10 + v13) != a2);
    }
  }
  return result;
}

void sub_1ADF47E68(_Unwind_Exception *exception_object)
{
  kaldi::quasar::TranslationUtil::NbestElement *v1;
  uint64_t v2;

  if (v1 && v2)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(kaldi::quasar::TranslationUtil::NbestElement *a1, kaldi::quasar::TranslationUtil::NbestElement *a2, kaldi::quasar::TranslationUtil::NbestElement *a3, float *a4, uint64_t a5, uint64_t a6, kaldi::quasar::TranslationUtil::NbestElement *this)
{
  kaldi::quasar::TranslationUtil::NbestElement *v7;
  uint64_t v12;
  kaldi::quasar::TranslationUtil::NbestElement *v13;
  const kaldi::quasar::TranslationUtil::NbestElement *v14;
  kaldi::quasar::TranslationUtil::NbestElement *v15;
  kaldi::quasar::TranslationUtil::NbestElement *v16;
  const kaldi::quasar::TranslationUtil::NbestElement *v17;
  float *v18;

  v7 = this;
  if (a5 <= a6)
  {
    if (a1 == a2)
    {
      v12 = 0;
      v16 = this;
    }
    else
    {
      v12 = 0;
      v16 = this;
      v17 = a1;
      do
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v16, v17);
        ++v12;
        v17 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v17 + 272);
        v16 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v16 + 272);
      }
      while (v17 != a2);
    }
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,kaldi::quasar::TranslationUtil::NbestElement *,kaldi::quasar::TranslationUtil::NbestElement *,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>((uint64_t)v7, (uint64_t)v16, (uint64_t)a2, (uint64_t)a3, (uint64_t)a1, a4);
  }
  else
  {
    if (a2 == a3)
    {
      v12 = 0;
      v13 = this;
    }
    else
    {
      v12 = 0;
      v13 = this;
      v14 = a2;
      do
      {
        v15 = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v13, v14);
        ++v12;
        v14 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v14 + 272);
        v13 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v15 + 272);
      }
      while (v14 != a3);
    }
    v18 = a4;
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement *>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement *>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>>((uint64_t)v13, (uint64_t)v13, (uint64_t)v7, (uint64_t)v7, (uint64_t)a2, (uint64_t)a2, (uint64_t)a1, (uint64_t)a1, (uint64_t)a3, (uint64_t)a3, &v18);
  }
  if (v7 && v12)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v7);
      v7 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v7 + 272);
      --v12;
    }
    while (v12);
  }
}

void sub_1ADF47FD0(_Unwind_Exception *exception_object)
{
  kaldi::quasar::TranslationUtil::NbestElement *v1;
  uint64_t v2;

  if (v1 && v2)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Rescore<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, const kaldi::quasar::TranslationUtil::NbestElement **a2, _QWORD **a3, float a4, float a5, float a6)
{
  double *v11;
  uint64_t v12;
  clockid_t v13;
  unint64_t v14;
  float v15;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const kaldi::quasar::TranslationUtil::NbestElement *v24;
  const kaldi::quasar::TranslationUtil::NbestElement *v25;
  float v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  const kaldi::quasar::TranslationUtil::NbestElement *v56;
  const kaldi::quasar::TranslationUtil::NbestElement *v57;
  kaldi::quasar::TranslationUtil::NbestElement *v58;
  uint64_t v59;
  uint64_t v60;
  const kaldi::quasar::TranslationUtil::NbestElement *v61;
  const kaldi::quasar::TranslationUtil::NbestElement *v62;
  int v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  uint64_t v69;
  float v70;
  _QWORD *v71;
  void *v72;
  uint64_t v73;
  const kaldi::quasar::TranslationUtil::NbestElement **v74;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  float v79[2];
  float v80[2];
  void *v81;
  uint64_t v82;
  unsigned __int8 v83;
  void *__p[2];
  char v85;
  _BYTE v86[56];

  v11 = (double *)(a1 + 4856);
  v12 = a1 + 5688;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v86, v11, v12, (__int128 *)__p);
  if (v85 < 0)
  {
    operator delete(__p[0]);
    if (!a2)
    {
LABEL_8:
      v15 = 2147500000.0;
      goto LABEL_9;
    }
  }
  else if (!a2)
  {
    goto LABEL_8;
  }
  v14 = 0xF0F0F0F0F0F0F0F1 * ((a2[1] - *a2) >> 4);
  if (!v14)
    goto LABEL_8;
  if (v14 == 1)
  {
    v15 = 0.0;
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Looking for UNK symbol ", 23);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    }
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 136) + 560) + 88))(&v81, *(_QWORD *)(*(_QWORD *)(a1 + 136) + 560), *(int *)(a1 + 5184) + 1);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"UNK label : ", 12);
      if ((v83 & 0x80u) == 0)
        v18 = &v81;
      else
        v18 = v81;
      if ((v83 & 0x80u) == 0)
        v19 = v83;
      else
        v19 = v82;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    }
    v20 = v83;
    if ((v83 & 0x80u) != 0)
      v20 = v82;
    if (!v20)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"No UNK symbol in translation model vocabulary", 45);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
    v21 = (*(uint64_t (**)(_QWORD *))(*a3[4] + 120))(a3[4]);
    v22 = v21;
    if (!v21)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Language model does not have output symbol table", 48);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
    v23 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v21 + 96))(v21, &v81);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"LM UNK ID ", 10);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    }
    if ((_DWORD)v23 == -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Language model does not have OOV symbol : ", 42);
      if ((v83 & 0x80u) == 0)
        v72 = &v81;
      else
        v72 = v81;
      if ((v83 & 0x80u) == 0)
        v73 = v83;
      else
        v73 = v82;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v72, v73);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
    v74 = a2;
    v25 = *a2;
    v24 = a2[1];
    if (v25 == v24)
    {
      v15 = 2147500000.0;
    }
    else
    {
      v26 = 1.0 - a4;
      v15 = 2147500000.0;
      do
      {
        v27 = ((uint64_t (*)(_QWORD **))**a3)(a3);
        if ((*((_DWORD *)v25 + 14) - 5) > 1)
        {
          v29 = v27;
          v31 = *(_QWORD *)v25;
          v30 = *((_QWORD *)v25 + 1);
          v32 = 0.0;
          while (v31 != v30)
          {
            v33 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 96))(v22, v31);
            if ((_DWORD)v33 == -1)
            {
              v33 = v23;
              if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to find ", 15);
                v34 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" in LM", 6);
                kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
                v33 = v23;
              }
            }
            if ((((uint64_t (*)(_QWORD **, uint64_t, uint64_t, void **))(*a3)[4])(a3, v29, v33, &v76) & 1) == 0)
            {
              if (kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Word lookup failure : ", 22);
                v36 = *(char *)(v31 + 23);
                if (v36 >= 0)
                  v37 = v31;
                else
                  v37 = *(_QWORD *)v31;
                if (v36 >= 0)
                  v38 = *(unsigned __int8 *)(v31 + 23);
                else
                  v38 = *(_QWORD *)(v31 + 8);
                v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v37, v38);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" (label=", 8);
                v40 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)")", 1);
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              }
              v32 = INFINITY;
              break;
            }
            v29 = HIDWORD(v77);
            v32 = v32 + *(float *)&v77;
            v31 += 240;
          }
          v41 = ((float (*)(_QWORD **, uint64_t))(*a3)[2])(a3, v29);
          v42 = *((float *)v25 + 7);
          v80[0] = *((float *)v25 + 6);
          v80[1] = v42;
          v43 = v26 * v42;
          *((float *)v25 + 6) = (float)(v32 + v41) * a4;
          *((float *)v25 + 7) = v43;
          *((float *)v25 + 8) = v41 * a4;
          *((float *)v25 + 9) = v26 * *((float *)v25 + 9);
          v79[0] = (float)(v32 + v41) * a4;
          v79[1] = v43;
          v76 = 0;
          v77 = 0;
          v78 = 0;
          v44 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestToString(a1, (uint64_t *)v25, (uint64_t)&v76);
          v45 = *((float *)v25 + 8);
          v46 = *((float *)v25 + 9);
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Old Cost = ", 11);
            v48 = fst::operator<<<float>(v47, v80);
            v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)", New cost = ", 13);
            v50 = fst::operator<<<float>(v49, v79);
            v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)", Hyp = ", 8);
            if (v78 >= 0)
              v52 = &v76;
            else
              v52 = v76;
            if (v78 >= 0)
              v53 = HIBYTE(v78);
            else
              v53 = v77;
            v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
            v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" finalcost=", 11);
            fst::operator<<<float>(v55, (float *)v25 + 8);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
          }
          if ((float)((float)(v44 + v45) + v46) < v15)
            v15 = (float)(v44 + v45) + v46;
          if (SHIBYTE(v78) < 0)
            operator delete(v76);
        }
        else
        {
          v28 = *((float *)v25 + 7);
          if ((float)(*((float *)v25 + 6) + v28) < v15)
            v15 = *((float *)v25 + 6) + v28;
        }
        v25 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v25 + 272);
      }
      while (v25 != v24);
    }
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare::NbestCompare((uint64_t)&v76, *(_DWORD *)(a1 + 5224), a5, a6);
    v56 = *v74;
    v57 = v74[1];
    __p[0] = v76;
    LODWORD(__p[1]) = v77;
    if (v57 - v56 < 1)
    {
      v58 = 0;
      v60 = 0;
    }
    else
    {
      v58 = (kaldi::quasar::TranslationUtil::NbestElement *)std::get_temporary_buffer[abi:ne180100]<kaldi::quasar::TranslationUtil::NbestElement>(0xF0F0F0F0F0F0F0F1 * ((v57 - v56) >> 4));
      v60 = v59;
    }
    std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v56, v57, (float *)__p, 0xF0F0F0F0F0F0F0F1 * ((v57 - v56) >> 4), v58, v60);
    if (v58)
      operator delete(v58);
    v61 = *v74;
    v62 = v74[1];
    if (*v74 != v62)
    {
      v63 = (int)v76;
      v64 = *((float *)&v76 + 1);
      v65 = *(float *)&v77;
      v66 = powf(*(float *)&v77 + 1.0, *((float *)&v76 + 1));
      do
      {
        v67 = *((float *)v61 + 6);
        v68 = *((float *)v61 + 7);
        v69 = (uint64_t)(*((_QWORD *)v61 + 25) - *((_QWORD *)v61 + 24)) >> 2;
        if (v63 == 2)
        {
          v70 = powf(v65 + (float)(unint64_t)v69, v64) / v66;
        }
        else
        {
          v70 = 1.0;
          if (v63 == 1)
            v70 = (float)(unint64_t)(v69 + 1);
        }
        *((float *)v61 + 10) = (float)(v67 + v68) / v70;
        v61 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v61 + 272);
      }
      while (v61 != v62);
    }
    if ((char)v83 < 0)
      operator delete(v81);
  }
LABEL_9:
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v86, v13);
  return v15;
}

void sub_1ADF486CC(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  if (a25 < 0)
    operator delete(__p);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v31 - 200), a2);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(uint64_t a1, uint64_t *a2, int a3)
{
  double *v6;
  uint64_t v7;
  clockid_t v8;
  uint64_t v9;
  uint64_t v10;
  const kaldi::quasar::TranslationUtil::NbestElement *v11;
  const kaldi::quasar::TranslationUtil::NbestElement *v12;
  kaldi::quasar::TranslationUtil::NbestElement *v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v17;
  _BYTE v18[48];

  v6 = (double *)(a1 + 4856);
  v7 = a1 + 5696;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v18, v6, v7, (__int128 *)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  v9 = *a2;
  v10 = a2[1];
  while (v9 != v10)
  {
    if ((*(_DWORD *)(v9 + 56) - 5) > 1)
    {
      if (*(_BYTE *)(a1 + 5673))
        kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::AssignConfidencesFromConfidenceModel(a1, v9, a3);
      else
        kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::AssignConfidencesFromTranslationModel(a1, (uint64_t *)v9, a3);
    }
    else
    {
      kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::AssignHightestPossibleConfidences(a1, (uint64_t *)v9);
    }
    v9 += 272;
  }
  if (*(_BYTE *)(a1 + 5674))
  {
    v12 = (const kaldi::quasar::TranslationUtil::NbestElement *)*a2;
    v11 = (const kaldi::quasar::TranslationUtil::NbestElement *)a2[1];
    if (v11 - v12 < 1)
    {
      v13 = 0;
      v15 = 0;
    }
    else
    {
      v13 = (kaldi::quasar::TranslationUtil::NbestElement *)std::get_temporary_buffer[abi:ne180100]<kaldi::quasar::TranslationUtil::NbestElement>(0xF0F0F0F0F0F0F0F1 * ((v11 - v12) >> 4));
      v15 = v14;
    }
    std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v12, v11, (uint64_t)__p, 0xF0F0F0F0F0F0F0F1 * ((v11 - v12) >> 4), v13, v15);
    if (v13)
      operator delete(v13);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v18, v8);
}

void sub_1ADF48914(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  if (v16)
    operator delete(v16);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a16, a2);
  _Unwind_Resume(a1);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestToString(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[11];
  char v18;
  uint64_t v19;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  v5 = *a2;
  v6 = a2[1];
  if (*a2 == v6)
  {
    v7 = 0.0;
  }
  else
  {
    v7 = 0.0;
    do
    {
      v8 = *(char *)(v5 + 23);
      if (v8 >= 0)
        v9 = v5;
      else
        v9 = *(_QWORD *)v5;
      if (v8 >= 0)
        v10 = *(unsigned __int8 *)(v5 + 23);
      else
        v10 = *(_QWORD *)(v5 + 8);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v9, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
      v7 = v7 + (float)(*(float *)(v5 + 80) + *(float *)(v5 + 84));
      v5 += 240;
    }
    while (v5 != v6);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    **(_BYTE **)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 23) = 0;
  }
  std::stringbuf::str();
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(_OWORD *)a3 = v14;
  *(_QWORD *)(a3 + 16) = v15;
  v16[0] = *MEMORY[0x1E0DE4F50];
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v17[0] = v12;
  v17[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v18 < 0)
    operator delete((void *)v17[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](&v19);
  return v7;
}

void sub_1ADF48ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::AssignConfidencesFromConfidenceModel(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  int *v7;
  int *v8;
  char *v9;
  int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  int *v20;
  int *v21;
  char *v22;
  int v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  int v32;
  char *v33;
  char *v34;
  int v35;
  unint64_t v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  void **v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  _DWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  _QWORD *v69;
  int *v70;
  int *v71;
  double v72;
  int *v73;
  uint64_t v74;
  double v75;
  float v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v80;
  _QWORD *v81;
  int32x2_t v82[2];
  unsigned int v83;
  unsigned int v84;
  int32x2_t v85;
  int v86;
  int v87[8];
  _BYTE v88[32];
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  int32x2_t v95;
  int v96;
  int v97;
  int v98;

  kaldi::Matrix<float>::Matrix((uint64_t)&v95);
  if (*(_QWORD *)(a1 + 5136) == *(_QWORD *)(a1 + 5128) || !*(_BYTE *)(a1 + 5675))
  {
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v85, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v85, (uint64_t)"Alignment cost ", 15);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v85);
    }
  }
  else
  {
    v92 = 0;
    v93 = 0;
    v94 = 0;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v6 = *(_QWORD **)a2;
    v81 = *(_QWORD **)(a2 + 8);
    if (*(_QWORD **)a2 == v81)
    {
      v34 = 0;
      v33 = 0;
    }
    else
    {
      v80 = a1;
      do
      {
        v8 = (int *)v6[11];
        v7 = (int *)v6[12];
        if (v8 != v7)
        {
          v9 = v93;
          do
          {
            v10 = *v8;
            if (v9 >= v94)
            {
              v12 = v92;
              v13 = (v9 - v92) >> 2;
              v14 = v13 + 1;
              if ((unint64_t)(v13 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v15 = v94 - v92;
              if ((v94 - v92) >> 1 > v14)
                v14 = v15 >> 1;
              if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
                v16 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v16 = v14;
              if (v16)
              {
                v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v94, v16);
                v12 = v92;
                v9 = v93;
              }
              else
              {
                v17 = 0;
              }
              v18 = &v17[4 * v13];
              *(_DWORD *)v18 = v10;
              v11 = v18 + 4;
              while (v9 != v12)
              {
                v19 = *((_DWORD *)v9 - 1);
                v9 -= 4;
                *((_DWORD *)v18 - 1) = v19;
                v18 -= 4;
              }
              v92 = v18;
              v93 = v11;
              v94 = &v17[4 * v16];
              if (v12)
                operator delete(v12);
            }
            else
            {
              *(_DWORD *)v9 = v10;
              v11 = v9 + 4;
            }
            v93 = v11;
            ++v8;
            v9 = v11;
          }
          while (v8 != v7);
        }
        v21 = (int *)v6[23];
        v20 = (int *)v6[24];
        if (v21 != v20)
        {
          v22 = v90;
          do
          {
            v23 = *v21;
            if (v22 >= v91)
            {
              v25 = v89;
              v26 = (v22 - v89) >> 2;
              v27 = v26 + 1;
              if ((unint64_t)(v26 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v28 = v91 - v89;
              if ((v91 - v89) >> 1 > v27)
                v27 = v28 >> 1;
              if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
                v29 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v29 = v27;
              if (v29)
              {
                v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v91, v29);
                v25 = v89;
                v22 = v90;
              }
              else
              {
                v30 = 0;
              }
              v31 = &v30[4 * v26];
              *(_DWORD *)v31 = v23;
              v24 = v31 + 4;
              while (v22 != v25)
              {
                v32 = *((_DWORD *)v22 - 1);
                v22 -= 4;
                *((_DWORD *)v31 - 1) = v32;
                v31 -= 4;
              }
              v89 = v31;
              v90 = v24;
              v91 = &v30[4 * v29];
              if (v25)
                operator delete(v25);
            }
            else
            {
              *(_DWORD *)v22 = v23;
              v24 = v22 + 4;
            }
            v90 = v24;
            ++v21;
            v22 = v24;
          }
          while (v21 != v20);
        }
        v6 += 30;
      }
      while (v6 != v81);
      v34 = v92;
      v33 = v93;
      a1 = v80;
    }
    v35 = kaldi::MatrixBase<float>::NumCols(a1 + 5632);
    kaldi::Matrix<float>::Resize(&v95, (unint64_t)(v33 - v34) >> 2, (v35 + 1), 0, 0);
    if (v93 == v92)
    {
      v40 = 0;
    }
    else
    {
      v36 = 0;
      v37 = v96;
      do
      {
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v85, (uint64_t)&v95, v36, 1, 0, v37);
        kaldi::CuMatrixBase<float>::CopyToMat<float>(*(_QWORD *)(a1 + 5128) + 48 * *(int *)&v92[4 * v36], (int *)&v85, 111);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v85);
        v38 = *(_DWORD *)&v89[4 * v36];
        v39 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v95);
        v37 = v96;
        *(_DWORD *)(*(_QWORD *)&v95 + 4 * v98 * (int)v36++ + 4 * (v39 - 1)) = v38;
        v40 = (v93 - v92) >> 2;
      }
      while (v40 > v36);
    }
    v41 = kaldi::MatrixBase<float>::NumCols(a1 + 5632);
    kaldi::Matrix<float>::Matrix((uint64_t)&v85, v40, v41, 0, 0);
    v42 = *(_QWORD *)(a2 + 192);
    if (*(_QWORD *)(a2 + 200) != v42)
    {
      v43 = 0;
      do
      {
        v44 = *(_DWORD *)(v42 + 4 * v43);
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v82, (uint64_t)&v85, v43, 1, 0, v86);
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v88, a1 + 5632, v44 - 1, 1, 0, *(_DWORD *)(a1 + 5640));
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v87, a1 + 5632, v44 - 1, 1, 0, *(_DWORD *)(a1 + 5640));
        kaldi::MatrixBase<float>::CopyFromMat<float>((int *)v82, v87, 111);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v87);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v88);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v82);
        ++v43;
        v42 = *(_QWORD *)(a2 + 192);
      }
      while (v43 < (*(_QWORD *)(a2 + 200) - v42) >> 2);
    }
    v45 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v95);
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v82, (uint64_t)&v95, 0, v97, 0, v45 - 1);
    kaldi::MatrixBase<float>::MulElements((uint64_t)v82, (uint64_t)&v85);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v82);
    kaldi::Matrix<float>::~Matrix((uint64_t)&v85);
    if (v89)
    {
      v90 = v89;
      operator delete(v89);
    }
    if (v92)
    {
      v93 = v92;
      operator delete(v92);
    }
  }
  v46 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v95);
  v47 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v95);
  kaldi::CuMatrix<float>::CuMatrix(&v85, v46, v47, 0, 0, 0);
  kaldi::CuMatrixBase<float>::CopyFromMat((uint64_t)&v85, (int *)&v95, 111);
  v48 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v95);
  kaldi::CuMatrix<float>::CuMatrix(v82, v48, 1, 0, 0, 0);
  kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 5256), (uint64_t)&v85, v82, -1, 0);
  kaldi::Matrix<float>::Resize(&v95, v84, v83, 0, 0);
  kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)v82, (int *)&v95, 111);
  v49 = 0;
  v50 = (void **)(a2 + 216);
  while (v49 != kaldi::MatrixBase<float>::NumRows((uint64_t)&v95))
  {
    v51 = *(_QWORD *)&v95 + 4 * v98 * v49;
    v53 = *(char **)(a2 + 224);
    v52 = *(_QWORD *)(a2 + 232);
    if ((unint64_t)v53 >= v52)
    {
      v55 = (char *)*v50;
      v56 = (v53 - (_BYTE *)*v50) >> 2;
      v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v58 = v52 - (_QWORD)v55;
      if (v58 >> 1 > v57)
        v57 = v58 >> 1;
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
        v59 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v59 = v57;
      if (v59)
      {
        v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 232, v59);
        v55 = *(char **)(a2 + 216);
        v53 = *(char **)(a2 + 224);
      }
      else
      {
        v60 = 0;
      }
      v61 = &v60[4 * v56];
      *(_DWORD *)v61 = *(_DWORD *)(v51 + 4);
      v54 = v61 + 4;
      while (v53 != v55)
      {
        v62 = *((_DWORD *)v53 - 1);
        v53 -= 4;
        *((_DWORD *)v61 - 1) = v62;
        v61 -= 4;
      }
      *(_QWORD *)(a2 + 216) = v61;
      *(_QWORD *)(a2 + 224) = v54;
      *(_QWORD *)(a2 + 232) = &v60[4 * v59];
      if (v55)
        operator delete(v55);
    }
    else
    {
      *(_DWORD *)v53 = *(_DWORD *)(v51 + 4);
      v54 = v53 + 4;
    }
    *(_QWORD *)(a2 + 224) = v54;
    ++v49;
  }
  v64 = *(_QWORD **)a2;
  v63 = *(_QWORD **)(a2 + 8);
  if (v63 == *(_QWORD **)a2)
  {
    LODWORD(v78) = 0;
  }
  else
  {
    v65 = 0;
    v66 = ((uint64_t)v63 - *(_QWORD *)a2) / 240;
    v67 = *(unsigned __int8 *)(a2 + 88);
    if (v66 <= 1)
      v68 = 1;
    else
      v68 = ((uint64_t)v63 - *(_QWORD *)a2) / 240;
    do
    {
      if (v67)
      {
        v69 = &v64[30 * v65];
        v70 = (int *)v69[20];
        v71 = (int *)v69[21];
        if (v70 == v71)
        {
          v72 = 0.0;
        }
        else
        {
          v72 = 0.0;
          v73 = v70;
          do
          {
            v74 = *v73++;
            v72 = v72 + *((float *)*v50 + v74);
          }
          while (v73 != v71);
        }
        v75 = v72 / (double)(unint64_t)(v71 - v70);
      }
      else
      {
        v75 = *((float *)*v50 + v65);
      }
      v76 = v75;
      LODWORD(v64[30 * v65++ + 29]) = llround(v76 * 998.0 + 1.0);
    }
    while (v65 != v68);
    LODWORD(v77) = 0;
    do
    {
      v77 = *((int *)v64 + 58) + (uint64_t)(int)v77;
      v64 += 30;
    }
    while (v64 != v63);
    v78 = v77 / v66;
  }
  *(_BYTE *)(a2 + 240) = (int)v78 < a3;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v82);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v85);
  return kaldi::Matrix<float>::~Matrix((uint64_t)&v95);
}

void sub_1ADF49228(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::Matrix<float>::~Matrix(v1 - 144);
  _Unwind_Resume(a1);
}

void std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, const kaldi::quasar::TranslationUtil::NbestElement *a2, uint64_t a3, unint64_t a4, kaldi::quasar::TranslationUtil::NbestElement *a5, uint64_t a6)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v14;
  unint64_t v15;
  kaldi::quasar::TranslationUtil::NbestElement *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const kaldi::quasar::TranslationUtil::NbestElement *v25;

  v25 = a1;
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      v24 = (uint64_t)a2 - 272;
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v22, (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a2 - 272));
      v8 = v22;
      if (v23 == v22)
      {
        LODWORD(v10) = 0;
      }
      else
      {
        LODWORD(v9) = 0;
        do
        {
          v9 = *(int *)(v8 + 232) + (uint64_t)(int)v9;
          v8 += 240;
        }
        while (v8 != v23);
        v10 = v9 / (0xEEEEEEEEEEEEEEEFLL * ((v23 - v22) >> 4));
      }
      v19 = *(_QWORD *)a1;
      v18 = *((_QWORD *)a1 + 1);
      if (v18 == *(_QWORD *)a1)
      {
        LODWORD(v21) = 0;
      }
      else
      {
        LODWORD(v20) = 0;
        do
        {
          v20 = *(int *)(v19 + 232) + (uint64_t)(int)v20;
          v19 += 240;
        }
        while (v19 != v18);
        v21 = v20 / (0xEEEEEEEEEEEEEEEFLL * ((v18 - *(_QWORD *)a1) >> 4));
      }
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v22);
      if ((int)v10 > (int)v21)
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(&v25, &v24);
    }
    else
    {
      v11 = a4;
      if ((uint64_t)a4 <= 0)
      {
        std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(a1, a2);
      }
      else
      {
        v14 = (uint64_t *)a5;
        v15 = a4 >> 1;
        v16 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272 * (a4 >> 1));
        v17 = a4 >> 1;
        if ((uint64_t)v11 <= a6)
        {
          std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(a1, v16, a3, v17, a5);
          std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272 * (v11 >> 1)), a2, a3, v11 - (v11 >> 1), (kaldi::quasar::TranslationUtil::NbestElement *)&v14[34 * v15]);
          std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,kaldi::quasar::TranslationUtil::NbestElement*,kaldi::quasar::TranslationUtil::NbestElement*,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v14, &v14[34 * v15], (kaldi::quasar::TranslationUtil::NbestElement *)&v14[34 * v15], (kaldi::quasar::TranslationUtil::NbestElement *)&v14[34 * v11], (uint64_t)a1);
          if (v14)
          {
            do
            {
              kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v14);
              v14 += 34;
              --v11;
            }
            while (v11);
          }
        }
        else
        {
          std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(a1, v16, a3, v17, a5, a6);
          std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>((char *)a1 + 272 * (v11 >> 1), a2, a3, v11 - (v11 >> 1), v14, a6);
          std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(a1, (uint64_t)a1 + 272 * (v11 >> 1), a2, a3, v11 >> 1, v11 - (v11 >> 1), (kaldi::quasar::TranslationUtil::NbestElement *)v14, a6);
        }
      }
    }
  }
}

void sub_1ADF49548(_Unwind_Exception *exception_object)
{
  kaldi::quasar::TranslationUtil::NbestElement *v1;
  uint64_t v2;

  if (v1)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, const kaldi::quasar::TranslationUtil::NbestElement *a2)
{
  const kaldi::quasar::TranslationUtil::NbestElement *v4;
  const kaldi::quasar::TranslationUtil::NbestElement *v5;
  const kaldi::quasar::TranslationUtil::NbestElement *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[272];
  uint64_t v27;
  uint64_t v28;

  if (a1 != a2)
  {
    v4 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272);
    if ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)a1 + 272) != a2)
    {
      v5 = a1;
      do
      {
        v6 = v4;
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v27, v4);
        v7 = v27;
        if (v28 == v27)
        {
          LODWORD(v9) = 0;
        }
        else
        {
          LODWORD(v8) = 0;
          do
          {
            v8 = *(int *)(v7 + 232) + (uint64_t)(int)v8;
            v7 += 240;
          }
          while (v7 != v28);
          v9 = v8 / (0xEEEEEEEEEEEEEEEFLL * ((v28 - v27) >> 4));
        }
        v11 = *(_QWORD *)v5;
        v10 = *((_QWORD *)v5 + 1);
        if (v10 == *(_QWORD *)v5)
        {
          LODWORD(v13) = 0;
        }
        else
        {
          LODWORD(v12) = 0;
          do
          {
            v12 = *(int *)(v11 + 232) + (uint64_t)(int)v12;
            v11 += 240;
          }
          while (v11 != v10);
          v13 = v12 / (0xEEEEEEEEEEEEEEEFLL * ((v10 - *(_QWORD *)v5) >> 4));
        }
        kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v27);
        if ((int)v9 > (int)v13)
        {
          kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v26, v6);
          v14 = (uint64_t)v6;
          while (1)
          {
            v15 = (uint64_t)v5;
            kaldi::quasar::TranslationUtil::NbestElement::operator=(v14, (uint64_t)v5);
            if (v5 == a1)
              break;
            kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v24, (const kaldi::quasar::TranslationUtil::NbestElement *)v26);
            v16 = v24;
            if (v25 == v24)
            {
              LODWORD(v18) = 0;
            }
            else
            {
              LODWORD(v17) = 0;
              do
              {
                v17 = *(int *)(v16 + 232) + (uint64_t)(int)v17;
                v16 += 240;
              }
              while (v16 != v25);
              v18 = v17 / (0xEEEEEEEEEEEEEEEFLL * ((v25 - v24) >> 4));
            }
            v5 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v5 - 272);
            v19 = *(_QWORD *)(v15 - 264);
            v20 = *(_QWORD *)(v15 - 272);
            if (v19 == v20)
            {
              LODWORD(v23) = 0;
            }
            else
            {
              LODWORD(v21) = 0;
              v22 = 0xEEEEEEEEEEEEEEEFLL * ((v19 - v20) >> 4);
              do
              {
                v21 = *(int *)(v20 + 232) + (uint64_t)(int)v21;
                v20 += 240;
              }
              while (v20 != v19);
              v23 = v21 / v22;
            }
            kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v24);
            v14 = v15;
            if ((int)v18 <= (int)v23)
              goto LABEL_30;
          }
          v15 = (uint64_t)a1;
LABEL_30:
          kaldi::quasar::TranslationUtil::NbestElement::operator=(v15, (uint64_t)v26);
          kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v26);
        }
        v4 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v6 + 272);
        v5 = v6;
      }
      while ((const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v6 + 272) != a2);
    }
  }
}

void sub_1ADF49754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&a43);
  _Unwind_Resume(a1);
}

const kaldi::quasar::TranslationUtil::NbestElement *std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(const kaldi::quasar::TranslationUtil::NbestElement *result, kaldi::quasar::TranslationUtil::NbestElement *a2, uint64_t a3, unint64_t a4, kaldi::quasar::TranslationUtil::NbestElement *this)
{
  const kaldi::quasar::TranslationUtil::NbestElement *v8;
  const kaldi::quasar::TranslationUtil::NbestElement *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  const kaldi::quasar::TranslationUtil::NbestElement *v18;
  uint64_t v19;
  uint64_t v20;

  if (a4)
  {
    v8 = result;
    if (a4 == 2)
    {
      v9 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a2 - 272);
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v19, (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a2 - 272));
      v10 = v19;
      if (v20 == v19)
      {
        LODWORD(v12) = 0;
      }
      else
      {
        LODWORD(v11) = 0;
        do
        {
          v11 = *(int *)(v10 + 232) + (uint64_t)(int)v11;
          v10 += 240;
        }
        while (v10 != v20);
        v12 = v11 / (0xEEEEEEEEEEEEEEEFLL * ((v20 - v19) >> 4));
      }
      v15 = *(_QWORD *)v8;
      v14 = *((_QWORD *)v8 + 1);
      if (v14 == *(_QWORD *)v8)
      {
        LODWORD(v17) = 0;
      }
      else
      {
        LODWORD(v16) = 0;
        do
        {
          v16 = *(int *)(v15 + 232) + (uint64_t)(int)v16;
          v15 += 240;
        }
        while (v15 != v14);
        v17 = v16 / (0xEEEEEEEEEEEEEEEFLL * ((v14 - *(_QWORD *)v8) >> 4));
      }
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v19);
      if ((int)v12 <= (int)v17)
        v18 = v8;
      else
        v18 = v9;
      if ((int)v12 <= (int)v17)
        v8 = v9;
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, v18);
      return kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)this + 272), v8);
    }
    else if (a4 == 1)
    {
      return kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, result);
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(result, (char *)result + 272 * (a4 >> 1), a3, a4 >> 1, this, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>((char *)v8 + 272 * (a4 >> 1), a2, a3, a4 - (a4 >> 1), (char *)this + 272 * (a4 >> 1), a4 - (a4 >> 1));
      return std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v8, (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272 * (a4 >> 1)), (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272 * (a4 >> 1)), a2, this);
    }
    else
    {
      return std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(result, a2, this);
    }
  }
  return result;
}

void sub_1ADF4994C(_Unwind_Exception *exception_object)
{
  kaldi::quasar::TranslationUtil::NbestElement *v1;

  if (v1)
    kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
  _Unwind_Resume(exception_object);
}

void std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(const kaldi::quasar::TranslationUtil::NbestElement *a1, uint64_t a2, kaldi::quasar::TranslationUtil::NbestElement *a3, uint64_t a4, uint64_t a5, uint64_t a6, kaldi::quasar::TranslationUtil::NbestElement *a7, uint64_t a8)
{
  uint64_t v9;
  kaldi::quasar::TranslationUtil::NbestElement *v13;
  kaldi::quasar::TranslationUtil::NbestElement *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  kaldi::quasar::TranslationUtil::NbestElement *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  kaldi::quasar::TranslationUtil::NbestElement *v33;
  kaldi::quasar::TranslationUtil::NbestElement *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const kaldi::quasar::TranslationUtil::NbestElement *v41;
  char v42;

  v40 = a2;
  v41 = a1;
  if (a6)
  {
    v9 = a6;
    v13 = (kaldi::quasar::TranslationUtil::NbestElement *)a2;
    v14 = a1;
    do
    {
      if (v9 <= a8 || a5 <= a8)
      {
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v14, v13, a3, a4, a5, v9, a7);
        return;
      }
      if (!a5)
        return;
      while (1)
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v38, v13);
        v15 = v38;
        if (v39 == v38)
        {
          LODWORD(v17) = 0;
        }
        else
        {
          LODWORD(v16) = 0;
          do
          {
            v16 = *(int *)(v15 + 232) + (uint64_t)(int)v16;
            v15 += 240;
          }
          while (v15 != v39);
          v17 = v16 / (0xEEEEEEEEEEEEEEEFLL * ((v39 - v38) >> 4));
        }
        v19 = *(_QWORD *)v14;
        v18 = *((_QWORD *)v14 + 1);
        if (v18 == *(_QWORD *)v14)
        {
          LODWORD(v21) = 0;
        }
        else
        {
          LODWORD(v20) = 0;
          do
          {
            v20 = *(int *)(v19 + 232) + (uint64_t)(int)v20;
            v19 += 240;
          }
          while (v19 != v18);
          v21 = v20 / (0xEEEEEEEEEEEEEEEFLL * ((v18 - *(_QWORD *)v14) >> 4));
        }
        kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v38);
        if ((int)v17 > (int)v21)
          break;
        v14 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v14 + 272);
        v41 = v14;
        if (!--a5)
          return;
      }
      v36 = a4;
      if (a5 >= v9)
      {
        if (a5 == 1)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *> &>(&v41, &v40);
          return;
        }
        if (a5 >= 0)
          v27 = a5;
        else
          v27 = a5 + 1;
        v28 = v27 >> 1;
        v25 = (uint64_t *)((char *)v14 + 272 * (v27 >> 1));
        v42 = 0;
        v29 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>,kaldi::quasar::TranslationUtil::NbestElement,std::__identity,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1}>((char *)v13, (char *)a3, v25);
        v26 = v28;
        v24 = (kaldi::quasar::TranslationUtil::NbestElement *)v29;
        v23 = 0xF0F0F0F0F0F0F0F1 * ((v29 - (char *)v13) >> 4);
      }
      else
      {
        if (v9 >= 0)
          v22 = v9;
        else
          v22 = v9 + 1;
        v23 = v22 >> 1;
        v24 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v13 + 272 * (v22 >> 1));
        v25 = (uint64_t *)std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,kaldi::quasar::TranslationUtil::NbestElement,std::__identity>((char *)v14, (char *)v13, v24);
        v26 = 0xF0F0F0F0F0F0F0F1 * (((char *)v25 - (char *)v14) >> 4);
      }
      v34 = a3;
      if (v25 == (uint64_t *)v13)
      {
        a3 = v24;
      }
      else if (v13 == v24)
      {
        a3 = (kaldi::quasar::TranslationUtil::NbestElement *)v25;
      }
      else
      {
        v30 = v26;
        v31 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>((const kaldi::quasar::TranslationUtil::NbestElement *)v25, (uint64_t)v13, (uint64_t)v24);
        v26 = v30;
        a3 = (kaldi::quasar::TranslationUtil::NbestElement *)v31;
      }
      a5 -= v26;
      v9 -= v23;
      if ((uint64_t)(v26 + v23) >= a5 + v9)
      {
        v33 = v34;
        v35 = v26;
        std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(a3, v24, v33, v36, a5, v9, a7, a8);
        v13 = (kaldi::quasar::TranslationUtil::NbestElement *)v25;
        a4 = v36;
        v9 = v23;
        a5 = v35;
      }
      else
      {
        v32 = v25;
        a4 = v36;
        std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v14, v32, a3, v36, v26, v23, a7, a8);
        v41 = a3;
        v14 = a3;
        v13 = v24;
        a3 = v34;
      }
      v40 = (uint64_t)v13;
    }
    while (v9);
  }
}

const kaldi::quasar::TranslationUtil::NbestElement *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(const kaldi::quasar::TranslationUtil::NbestElement *result, const kaldi::quasar::TranslationUtil::NbestElement *a2, kaldi::quasar::TranslationUtil::NbestElement *this)
{
  const kaldi::quasar::TranslationUtil::NbestElement *v5;
  const kaldi::quasar::TranslationUtil::NbestElement *v6;
  uint64_t v7;
  kaldi::quasar::TranslationUtil::NbestElement *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  kaldi::quasar::TranslationUtil::NbestElement *v16;
  kaldi::quasar::TranslationUtil::NbestElement *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  kaldi::quasar::TranslationUtil::NbestElement *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (result != a2)
  {
    v5 = result;
    result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(this, result);
    v6 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v5 + 272);
    if (v6 != a2)
    {
      v7 = 1;
      v8 = this;
      do
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v29, v6);
        v9 = v29;
        if (v30 == v29)
        {
          LODWORD(v11) = 0;
        }
        else
        {
          LODWORD(v10) = 0;
          do
          {
            v10 = *(int *)(v9 + 232) + (uint64_t)(int)v10;
            v9 += 240;
          }
          while (v9 != v30);
          v11 = v10 / (0xEEEEEEEEEEEEEEEFLL * ((v30 - v29) >> 4));
        }
        v13 = *(_QWORD *)v8;
        v12 = *((_QWORD *)v8 + 1);
        if (v12 == *(_QWORD *)v8)
        {
          LODWORD(v15) = 0;
        }
        else
        {
          LODWORD(v14) = 0;
          do
          {
            v14 = *(int *)(v13 + 232) + (uint64_t)(int)v14;
            v13 += 240;
          }
          while (v13 != v12);
          v15 = v14 / (0xEEEEEEEEEEEEEEEFLL * ((v12 - *(_QWORD *)v8) >> 4));
        }
        v16 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272);
        kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v29);
        if ((int)v11 <= (int)v15)
        {
          result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272), v6);
          ++v7;
        }
        else
        {
          kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272), v8);
          ++v7;
          v17 = this;
          if (v8 != this)
          {
            while (1)
            {
              kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v27, v6);
              v18 = v27;
              if (v28 == v27)
              {
                LODWORD(v20) = 0;
              }
              else
              {
                LODWORD(v19) = 0;
                do
                {
                  v19 = *(int *)(v18 + 232) + (uint64_t)(int)v19;
                  v18 += 240;
                }
                while (v18 != v28);
                v20 = v19 / (0xEEEEEEEEEEEEEEEFLL * ((v28 - v27) >> 4));
              }
              v21 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 - 272);
              v22 = *((_QWORD *)v8 - 33);
              v23 = *((_QWORD *)v8 - 34);
              if (v22 == v23)
              {
                LODWORD(v26) = 0;
              }
              else
              {
                LODWORD(v24) = 0;
                v25 = 0xEEEEEEEEEEEEEEEFLL * ((v22 - v23) >> 4);
                do
                {
                  v24 = *(int *)(v23 + 232) + (uint64_t)(int)v24;
                  v23 += 240;
                }
                while (v23 != v22);
                v26 = v24 / v25;
              }
              kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v27);
              if ((int)v20 <= (int)v26)
                break;
              kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v8, (uint64_t)v8 - 272);
              v8 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 - 272);
              if (v21 == this)
              {
                v17 = this;
                goto LABEL_31;
              }
            }
            v17 = v8;
          }
LABEL_31:
          result = (const kaldi::quasar::TranslationUtil::NbestElement *)kaldi::quasar::TranslationUtil::NbestElement::operator=((uint64_t)v17, (uint64_t)v6);
        }
        v6 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v6 + 272);
        v8 = v16;
      }
      while (v6 != a2);
    }
  }
  return result;
}

void sub_1ADF49E40(_Unwind_Exception *exception_object)
{
  kaldi::quasar::TranslationUtil::NbestElement *v1;
  uint64_t v2;

  if (v1 && v2)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

kaldi::quasar::TranslationUtil::NbestElement *std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(kaldi::quasar::TranslationUtil::NbestElement *result, kaldi::quasar::TranslationUtil::NbestElement *a2, kaldi::quasar::TranslationUtil::NbestElement *a3, kaldi::quasar::TranslationUtil::NbestElement *a4, kaldi::quasar::TranslationUtil::NbestElement *a5)
{
  kaldi::quasar::TranslationUtil::NbestElement *v8;
  uint64_t v9;
  kaldi::quasar::TranslationUtil::NbestElement *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (result == a2)
  {
    v9 = 0;
    v10 = a5;
LABEL_21:
    while (a3 != a4)
    {
      result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v10, a3);
      a3 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a3 + 272);
      v10 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v10 + 272);
      ++v9;
    }
  }
  else
  {
    v8 = result;
    v9 = 0;
    v10 = a5;
    while (a3 != a4)
    {
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v19, a3);
      v11 = v19;
      if (v20 == v19)
      {
        LODWORD(v13) = 0;
      }
      else
      {
        LODWORD(v12) = 0;
        do
        {
          v12 = *(int *)(v11 + 232) + (uint64_t)(int)v12;
          v11 += 240;
        }
        while (v11 != v20);
        v13 = v12 / (0xEEEEEEEEEEEEEEEFLL * ((v20 - v19) >> 4));
      }
      v15 = *(_QWORD *)v8;
      v14 = *((_QWORD *)v8 + 1);
      if (v14 == *(_QWORD *)v8)
      {
        LODWORD(v17) = 0;
      }
      else
      {
        LODWORD(v16) = 0;
        do
        {
          v16 = *(int *)(v15 + 232) + (uint64_t)(int)v16;
          v15 += 240;
        }
        while (v15 != v14);
        v17 = v16 / (0xEEEEEEEEEEEEEEEFLL * ((v14 - *(_QWORD *)v8) >> 4));
      }
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v19);
      if ((int)v13 <= (int)v17)
      {
        result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v10, v8);
        v8 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + 272);
      }
      else
      {
        result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v10, a3);
        a3 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)a3 + 272);
      }
      ++v9;
      v10 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v10 + 272);
      if (v8 == a2)
        goto LABEL_21;
    }
    if (v8 != a2)
    {
      v18 = 0;
      do
      {
        result = kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v10 + v18), (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + v18));
        ++v9;
        v18 += 272;
      }
      while ((kaldi::quasar::TranslationUtil::NbestElement *)((char *)v8 + v18) != a2);
    }
  }
  return result;
}

void sub_1ADF4A000(_Unwind_Exception *exception_object)
{
  kaldi::quasar::TranslationUtil::NbestElement *v1;
  uint64_t v2;

  if (v1 && v2)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(kaldi::quasar::TranslationUtil::NbestElement *a1, kaldi::quasar::TranslationUtil::NbestElement *a2, kaldi::quasar::TranslationUtil::NbestElement *a3, uint64_t a4, uint64_t a5, uint64_t a6, kaldi::quasar::TranslationUtil::NbestElement *this)
{
  uint64_t *v7;
  uint64_t v12;
  kaldi::quasar::TranslationUtil::NbestElement *v13;
  const kaldi::quasar::TranslationUtil::NbestElement *v14;
  kaldi::quasar::TranslationUtil::NbestElement *v15;
  kaldi::quasar::TranslationUtil::NbestElement *v16;
  const kaldi::quasar::TranslationUtil::NbestElement *v17;
  uint64_t v18;

  v7 = (uint64_t *)this;
  if (a5 <= a6)
  {
    if (a1 == a2)
    {
      v12 = 0;
      v16 = this;
    }
    else
    {
      v12 = 0;
      v16 = this;
      v17 = a1;
      do
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v16, v17);
        ++v12;
        v17 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v17 + 272);
        v16 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v16 + 272);
      }
      while (v17 != a2);
    }
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &,kaldi::quasar::TranslationUtil::NbestElement*,kaldi::quasar::TranslationUtil::NbestElement*,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>(v7, (uint64_t)v16, a2, a3, (uint64_t)a1);
  }
  else
  {
    if (a2 == a3)
    {
      v12 = 0;
      v13 = this;
    }
    else
    {
      v12 = 0;
      v13 = this;
      v14 = a2;
      do
      {
        v15 = kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v13, v14);
        ++v12;
        v14 = (const kaldi::quasar::TranslationUtil::NbestElement *)((char *)v14 + 272);
        v13 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v15 + 272);
      }
      while (v14 != a3);
    }
    v18 = a4;
    std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ConfidenceScore(std::vector<kaldi::quasar::TranslationUtil::NbestElement> *,int)::{lambda(kaldi::quasar::TranslationUtil::NbestElement,kaldi::quasar::TranslationUtil::NbestElement const&)#1} &>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement*>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement*>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>,std::reverse_iterator<std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement*>>>((uint64_t)v13, (uint64_t)v13, (uint64_t)v7, (uint64_t)v7, (uint64_t)a2, (uint64_t)a2, (uint64_t)a1, (uint64_t)a1, (uint64_t)a3, (uint64_t)a3, (int)&v18);
  }
  if (v7 && v12)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v7);
      v7 += 34;
      --v12;
    }
    while (v12);
  }
}

void sub_1ADF4A168(_Unwind_Exception *exception_object)
{
  kaldi::quasar::TranslationUtil::NbestElement *v1;
  uint64_t v2;

  if (v1 && v2)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement(v1);
      v1 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v1 + 272);
      --v2;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

float std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<float kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(std::string const&,kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,std::vector<kaldi::quasar::TranslationUtil::NbestElement> *)::{lambda(fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>> &>(uint64_t **a1, uint64_t a2)
{
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a2, **a1, (*a1)[1], (uint64_t *)(*a1)[2]);
}

float std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<float kaldi::quasar::TranslationEngine<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(std::string const&,kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> const&,std::vector<kaldi::quasar::TranslationUtil::NbestElement> *)::{lambda(fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>> &>(uint64_t **a1, uint64_t a2)
{
  return kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a2, **a1, (*a1)[1], (uint64_t *)(*a1)[2]);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  float v13;
  int v14;
  uint64_t i;
  uint64_t v16;
  int v17;
  __int128 **v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void **v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  std::string *v29;
  std::string::size_type size;
  float v31;
  float v32;
  const std::string *v33;
  const std::string *v34;
  uint64_t *v35;
  const std::string *v36;
  const std::string *v37;
  uint64_t v38;
  _DWORD *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  char *v44;
  char *v45;
  _DWORD *v46;
  int v47;
  std::string *v48;
  std::string *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  float v54;
  float v55;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  _BYTE *v61;
  const std::string *v62;
  uint64_t v63;
  std::string *v64;
  unint64_t v65;
  const std::string *v66;
  const std::string *v67;
  uint64_t v68;
  const std::string *v69;
  const std::string *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  std::string v74;
  std::string v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _QWORD v81[23];
  __int128 *v82;
  __int128 *v83;
  uint64_t v84;
  std::string v85;
  void **v86;
  uint64_t v87;
  uint64_t v88;

  if (!a4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v75, "Nbestlist cannot be null");
    goto LABEL_112;
  }
  if (*(_BYTE *)(a3 + 307) || (v5 = a1, v61 = (_BYTE *)(a1 + 4896), *(_BYTE *)(a1 + 5237)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v75, "Decoder not configured for string decoding (use SentencePiece ID decoding).");
    goto LABEL_112;
  }
  v6 = a4;
  v8 = *(_QWORD *)(a1 + 136);
  if (v8 && *(_BYTE *)(v8 + 3925))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v75, "Model lacks full symbol tables (use SentencePiece ID decoding).");
LABEL_112:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v75);
  }
  v9 = *(_DWORD *)(a1 + 5224);
  v10 = *(_DWORD *)(a1 + 5200);
  v11 = *(_DWORD *)(a1 + 5188);
  v12 = *(_DWORD *)(a1 + 5192);
  v60 = *(_DWORD *)(a1 + 5196);
  *(_DWORD *)(a1 + 5200) = *(_DWORD *)(a3 + 228);
  *(_DWORD *)(a1 + 5224) = *(_DWORD *)(a3 + 216);
  if (*(_DWORD *)a3)
    *(_DWORD *)(a1 + 5188) = *(_DWORD *)a3;
  v13 = *(float *)(a3 + 4);
  if (v13 != 0.0)
    *(float *)(a1 + 5192) = v13;
  v14 = *(_DWORD *)(a3 + 8);
  if (v14)
    *(_DWORD *)(a1 + 5196) = v14;
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ValidateDecodingParameters(*(float *)(a3 + 176), a1, *(_DWORD *)(a3 + 160), *(_DWORD *)(a3 + 172));
  v16 = *v6;
  for (i = v6[1];
        i != v16;
  v6[1] = v16;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  kaldi::quasar::InputHammer::FilterTags(v5 + 8, a2, (uint64_t)&v86, a3 + 64);
  kaldi::quasar::MultiLangDecorator::Apply(v5 + 120, (uint64_t)&v86, a3 + 64, a3 + 88, &v85);
  if (*(_BYTE *)(a3 + 232))
    v17 = kaldi::quasar::MultiLangDecorator::NumTagTokens((kaldi::quasar::MultiLangDecorator *)(v5 + 120));
  else
    v17 = 0;
  *(_DWORD *)(v5 + 5204) = v17;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
    kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::LanguageInfo(a3);
    if (v84 >= 0)
      v18 = &v82;
    else
      v18 = (__int128 **)v82;
    if (v84 >= 0)
      v19 = HIBYTE(v84);
    else
      v19 = (uint64_t)v83;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)v18, v19);
    if (SHIBYTE(v84) < 0)
      operator delete(v82);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v75);
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v75, 1);
      v20 = *(char *)(a2 + 23);
      if (v20 >= 0)
        v21 = a2;
      else
        v21 = *(_QWORD *)a2;
      if (v20 >= 0)
        v22 = *(unsigned __int8 *)(a2 + 23);
      else
        v22 = *(_QWORD *)(a2 + 8);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, v21, v22);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" -> ", 4);
      if (v88 >= 0)
        v25 = (void **)&v86;
      else
        v25 = v86;
      if (v88 >= 0)
        v26 = HIBYTE(v88);
      else
        v26 = v87;
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" -> ", 4);
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v85;
      else
        v29 = (std::string *)v85.__r_.__value_.__r.__words[0];
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      else
        size = v85.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, size);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v75);
    }
  }
  v82 = 0;
  v83 = 0;
  v84 = 0;
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v74, v85.__r_.__value_.__l.__data_, v85.__r_.__value_.__l.__size_);
  else
    v74 = v85;
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::TokenizeInputString(v5, &v74, (uint64_t *)&v82);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  if (v83 == v82)
  {
    v32 = 3.4028e38;
    goto LABEL_104;
  }
  v71 = 0;
  v72 = 0;
  v73 = 0;
  std::vector<std::shared_ptr<kaldi::quasar::PhraseBook>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::PhraseBook>*,std::shared_ptr<kaldi::quasar::PhraseBook>*>((char *)&v71, *(_QWORD **)(a3 + 240), *(_QWORD **)(a3 + 248), (uint64_t)(*(_QWORD *)(a3 + 248) - *(_QWORD *)(a3 + 240)) >> 4);
  if (v61[344])
    std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100](&v71, (__int128 *)(v5 + 392));
  if (v72 == v71 || *(_DWORD *)(v5 + 5220) == 1)
  {
    v31 = 3.4028e38;
  }
  else
  {
    v58 = v11;
    v59 = v9;
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::FindInPhraseBooks((uint64_t)&v86, &v71, (uint64_t *)&v69);
    v34 = v69;
    v33 = v70;
    if (v70 == v69)
    {
      v31 = 3.4028e38;
    }
    else
    {
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Total # of phrasebook matches : ", 32);
        std::ostream::operator<<();
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v75);
        v34 = v69;
        v33 = v70;
      }
      v31 = 0.0;
      if (v34 != v33)
      {
        v57 = v5;
        v62 = v33;
        do
        {
          v35 = v6;
          v66 = 0;
          v67 = 0;
          v68 = 0;
          kaldi::SplitStringToVector(v34 + 2, " ", 1, (uint64_t)&v66);
          v63 = 0;
          v64 = 0;
          v65 = 0;
          v37 = v66;
          v36 = v67;
          while (v37 != v36)
          {
            memset(&v75, 0, sizeof(v75));
            v77 = 0u;
            v78 = 0u;
            v79 = 0u;
            v80 = 0u;
            memset(v81, 0, 140);
            std::string::operator=(&v75, v37);
            v38 = *((_QWORD *)&v80 + 1);
            v81[0] = *((_QWORD *)&v80 + 1);
            if (*((_QWORD *)&v80 + 1) >= v81[1])
            {
              v40 = (uint64_t)(v81[1] - *((_QWORD *)&v80 + 1)) >> 1;
              if (v40 <= 1)
                v40 = 1;
              if (v81[1] - *((_QWORD *)&v80 + 1) >= 0x7FFFFFFFFFFFFFFCuLL)
                v41 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v41 = v40;
              v43 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v81[1], v41);
              v44 = (char *)*((_QWORD *)&v80 + 1);
              v45 = (char *)v81[0];
              *v43 = -1;
              v39 = v43 + 1;
              v46 = v43;
              while (v45 != v44)
              {
                v47 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *--v46 = v47;
              }
              *((_QWORD *)&v80 + 1) = v46;
              v81[0] = v43 + 1;
              v81[1] = &v43[v42];
              if (v44)
                operator delete(v44);
            }
            else
            {
              **((_DWORD **)&v80 + 1) = -1;
              v39 = (_DWORD *)(v38 + 4);
            }
            v81[0] = v39;
            *(_QWORD *)&v80 = 0;
            v48 = v64;
            if ((unint64_t)v64 >= v65)
            {
              v49 = (std::string *)std::vector<kaldi::quasar::TranslationUtil::PathElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::PathElement const&>(&v63, (const kaldi::quasar::TranslationUtil::PathElement *)&v75);
            }
            else
            {
              kaldi::quasar::TranslationUtil::PathElement::PathElement(v64, (const kaldi::quasar::TranslationUtil::PathElement *)&v75);
              v49 = v48 + 10;
            }
            v64 = v49;
            kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&v75);
            ++v37;
          }
          kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v75);
          std::vector<kaldi::quasar::TranslationUtil::PathElement>::__assign_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>((uint64_t)&v75, v63, (uint64_t)v64, 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v64 - v63) >> 4));
          v76 = 0;
          *(_QWORD *)&v77 = 0;
          *(_QWORD *)&v78 = 0xAAAAAAAAAAAAAAABLL * (((char *)v67 - (char *)v66) >> 3);
          DWORD2(v78) = 5;
          std::string::operator=((std::string *)&v79, v34 + 3);
          v50 = v35[1];
          if (v50 >= v35[2])
          {
            v51 = std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::NbestElement const&>(v35, (const kaldi::quasar::TranslationUtil::NbestElement *)&v75);
            v6 = v35;
          }
          else
          {
            kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v35[1], (const kaldi::quasar::TranslationUtil::NbestElement *)&v75);
            v51 = v50 + 272;
            v6 = v35;
            v35[1] = v51;
          }
          v6[1] = v51;
          kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v75);
          v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
          std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
          v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
          v34 += 5;
        }
        while (v34 != v62);
        v5 = v57;
      }
    }
    v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
    std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
    v11 = v58;
    v9 = v59;
  }
  v52 = *(_QWORD *)(v5 + 136);
  if (v52 && *(_BYTE *)(v52 + 3922) && *(_BYTE *)(v52 + 3923))
    v61[808] = 1;
  v53 = *(_DWORD *)(v5 + 5220);
  if (v6[1] != *v6)
  {
    if (v53 != 2)
      goto LABEL_100;
LABEL_97:
    if (*v61)
    {
      v54 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeTokenized<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v5, &v82, a3, v6);
      if (v54 < v31)
        v31 = v54;
    }
    goto LABEL_100;
  }
  if (v53 != 3)
    goto LABEL_97;
LABEL_100:
  v55 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::PostProcessNbestList<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v5, (const std::string *)a2, a3, (uint64_t)v6);
  *(_DWORD *)(v5 + 5224) = v9;
  *(_DWORD *)(v5 + 5200) = v10;
  *(_DWORD *)(v5 + 5188) = v11;
  *(_DWORD *)(v5 + 5192) = v12;
  *(_DWORD *)(v5 + 5196) = v60;
  if (v55 == -1.0)
    v32 = v31;
  else
    v32 = v55;
  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
LABEL_104:
  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v82;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88) < 0)
    operator delete(v86);
  return v32;
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::FindInPhraseBooks(uint64_t a1@<X1>, char **a2@<X2>, uint64_t *a3@<X8>)
{
  char *v6;
  char *v7;
  int v8;
  char *v9;
  const char *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v13[34];

  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"FindInPhraseBooks # ", 20);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v13);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = *a2;
  v7 = a2[1];
  if (*a2 == v7)
  {
    v8 = 0;
    v9 = *a2;
  }
  else
  {
    v8 = 0;
    do
    {
      if (*(_QWORD *)v6 && kaldi::quasar::PhraseBook::Find(*(_QWORD **)v6, a1, a3))
        break;
      ++v8;
      v6 += 16;
    }
    while (v6 != v7);
    v6 = *a2;
    v9 = a2[1];
  }
  if ((unint64_t)(v9 - v6) >= 0x11 && a3[1] != *a3 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    if (v8)
      v10 = "Phrasebook fallback match";
    else
      v10 = "Phrasebook locale match";
    if (v8)
      v11 = 25;
    else
      v11 = 23;
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", phrasebook idx=", 17);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v13);
  }
}

void sub_1ADF4ABD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeTokenized<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, __int128 **a2, uint64_t a3, uint64_t *a4)
{
  float v8;
  std::string v10;
  void *__p;
  void *v12;
  uint64_t v13;
  std::string *v14;

  __p = 0;
  v12 = 0;
  v13 = 0;
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Symbolize(a1, (uint64_t *)&v10, (uint64_t)&__p, 0);
  v14 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  v8 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeSymbolized<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, (int **)&__p, a3, a4, (uint64_t *)a2);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  return v8;
}

void sub_1ADF4ACDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::PhraseBook::Find(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  unsigned __int8 *v5;
  std::string *v6;
  uint64_t v7;
  const kaldi::quasar::PhraseBook::PhraseBookEntry *v8;
  const kaldi::quasar::PhraseBook::PhraseBookEntry *v9;
  std::string __p;

  kaldi::quasar::PhraseBook::PreProcess((uint64_t)a1, a2, &__p);
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = (std::string *)*a3;
  v7 = a3[1];
  if (v7 != *a3)
  {
    do
    {
      v7 -= 120;
      std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>::destroy[abi:ne180100]((uint64_t)(a3 + 2), v7);
    }
    while ((std::string *)v7 != v6);
  }
  a3[1] = (uint64_t)v6;
  if (v5)
  {
    v8 = (const kaldi::quasar::PhraseBook::PhraseBookEntry *)*((_QWORD *)v5 + 5);
    v9 = (const kaldi::quasar::PhraseBook::PhraseBookEntry *)*((_QWORD *)v5 + 6);
    while (v8 != v9)
    {
      if ((unint64_t)v6 >= a3[2])
      {
        v6 = (std::string *)std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__push_back_slow_path<kaldi::quasar::PhraseBook::PhraseBookEntry const&>(a3, v8);
      }
      else
      {
        kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(v6, v8);
        v6 += 5;
        a3[1] = (uint64_t)v6;
      }
      a3[1] = (uint64_t)v6;
      v8 = (const kaldi::quasar::PhraseBook::PhraseBookEntry *)((char *)v8 + 120);
    }
  }
  return v5 != 0;
}

void sub_1ADF4ADF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Decode<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  float v13;
  int v14;
  uint64_t i;
  uint64_t v16;
  int v17;
  __int128 **v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void **v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  std::string *v29;
  std::string::size_type size;
  float v31;
  float v32;
  const std::string *v33;
  const std::string *v34;
  uint64_t *v35;
  const std::string *v36;
  const std::string *v37;
  uint64_t v38;
  _DWORD *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  char *v44;
  char *v45;
  _DWORD *v46;
  int v47;
  std::string *v48;
  std::string *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  float v54;
  float v55;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  _BYTE *v61;
  const std::string *v62;
  uint64_t v63;
  std::string *v64;
  unint64_t v65;
  const std::string *v66;
  const std::string *v67;
  uint64_t v68;
  const std::string *v69;
  const std::string *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  std::string v74;
  std::string v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _QWORD v81[23];
  __int128 *v82;
  __int128 *v83;
  uint64_t v84;
  std::string v85;
  void **v86;
  uint64_t v87;
  uint64_t v88;

  if (!a4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v75, "Nbestlist cannot be null");
    goto LABEL_112;
  }
  if (*(_BYTE *)(a3 + 307) || (v5 = a1, v61 = (_BYTE *)(a1 + 4896), *(_BYTE *)(a1 + 5237)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v75, "Decoder not configured for string decoding (use SentencePiece ID decoding).");
    goto LABEL_112;
  }
  v6 = a4;
  v8 = *(_QWORD *)(a1 + 136);
  if (v8 && *(_BYTE *)(v8 + 2461))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v75, "Model lacks full symbol tables (use SentencePiece ID decoding).");
LABEL_112:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v75);
  }
  v9 = *(_DWORD *)(a1 + 5224);
  v10 = *(_DWORD *)(a1 + 5200);
  v11 = *(_DWORD *)(a1 + 5188);
  v12 = *(_DWORD *)(a1 + 5192);
  v60 = *(_DWORD *)(a1 + 5196);
  *(_DWORD *)(a1 + 5200) = *(_DWORD *)(a3 + 228);
  *(_DWORD *)(a1 + 5224) = *(_DWORD *)(a3 + 216);
  if (*(_DWORD *)a3)
    *(_DWORD *)(a1 + 5188) = *(_DWORD *)a3;
  v13 = *(float *)(a3 + 4);
  if (v13 != 0.0)
    *(float *)(a1 + 5192) = v13;
  v14 = *(_DWORD *)(a3 + 8);
  if (v14)
    *(_DWORD *)(a1 + 5196) = v14;
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ValidateDecodingParameters(*(float *)(a3 + 176), a1, *(_DWORD *)(a3 + 160), *(_DWORD *)(a3 + 172));
  v16 = *v6;
  for (i = v6[1];
        i != v16;
  v6[1] = v16;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  kaldi::quasar::InputHammer::FilterTags(v5 + 8, a2, (uint64_t)&v86, a3 + 64);
  kaldi::quasar::MultiLangDecorator::Apply(v5 + 120, (uint64_t)&v86, a3 + 64, a3 + 88, &v85);
  if (*(_BYTE *)(a3 + 232))
    v17 = kaldi::quasar::MultiLangDecorator::NumTagTokens((kaldi::quasar::MultiLangDecorator *)(v5 + 120));
  else
    v17 = 0;
  *(_DWORD *)(v5 + 5204) = v17;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
    kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::LanguageInfo(a3);
    if (v84 >= 0)
      v18 = &v82;
    else
      v18 = (__int128 **)v82;
    if (v84 >= 0)
      v19 = HIBYTE(v84);
    else
      v19 = (uint64_t)v83;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)v18, v19);
    if (SHIBYTE(v84) < 0)
      operator delete(v82);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v75);
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v75, 1);
      v20 = *(char *)(a2 + 23);
      if (v20 >= 0)
        v21 = a2;
      else
        v21 = *(_QWORD *)a2;
      if (v20 >= 0)
        v22 = *(unsigned __int8 *)(a2 + 23);
      else
        v22 = *(_QWORD *)(a2 + 8);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, v21, v22);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" -> ", 4);
      if (v88 >= 0)
        v25 = (void **)&v86;
      else
        v25 = v86;
      if (v88 >= 0)
        v26 = HIBYTE(v88);
      else
        v26 = v87;
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" -> ", 4);
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v85;
      else
        v29 = (std::string *)v85.__r_.__value_.__r.__words[0];
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      else
        size = v85.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, size);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v75);
    }
  }
  v82 = 0;
  v83 = 0;
  v84 = 0;
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v74, v85.__r_.__value_.__l.__data_, v85.__r_.__value_.__l.__size_);
  else
    v74 = v85;
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::TokenizeInputString(v5, &v74, (uint64_t *)&v82);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  if (v83 == v82)
  {
    v32 = 3.4028e38;
    goto LABEL_104;
  }
  v71 = 0;
  v72 = 0;
  v73 = 0;
  std::vector<std::shared_ptr<kaldi::quasar::PhraseBook>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::PhraseBook>*,std::shared_ptr<kaldi::quasar::PhraseBook>*>((char *)&v71, *(_QWORD **)(a3 + 240), *(_QWORD **)(a3 + 248), (uint64_t)(*(_QWORD *)(a3 + 248) - *(_QWORD *)(a3 + 240)) >> 4);
  if (v61[344])
    std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100](&v71, (__int128 *)(v5 + 392));
  if (v72 == v71 || *(_DWORD *)(v5 + 5220) == 1)
  {
    v31 = 3.4028e38;
  }
  else
  {
    v58 = v11;
    v59 = v9;
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::FindInPhraseBooks((uint64_t)&v86, &v71, (uint64_t *)&v69);
    v34 = v69;
    v33 = v70;
    if (v70 == v69)
    {
      v31 = 3.4028e38;
    }
    else
    {
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Total # of phrasebook matches : ", 32);
        std::ostream::operator<<();
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v75);
        v34 = v69;
        v33 = v70;
      }
      v31 = 0.0;
      if (v34 != v33)
      {
        v57 = v5;
        v62 = v33;
        do
        {
          v35 = v6;
          v66 = 0;
          v67 = 0;
          v68 = 0;
          kaldi::SplitStringToVector(v34 + 2, " ", 1, (uint64_t)&v66);
          v63 = 0;
          v64 = 0;
          v65 = 0;
          v37 = v66;
          v36 = v67;
          while (v37 != v36)
          {
            memset(&v75, 0, sizeof(v75));
            v77 = 0u;
            v78 = 0u;
            v79 = 0u;
            v80 = 0u;
            memset(v81, 0, 140);
            std::string::operator=(&v75, v37);
            v38 = *((_QWORD *)&v80 + 1);
            v81[0] = *((_QWORD *)&v80 + 1);
            if (*((_QWORD *)&v80 + 1) >= v81[1])
            {
              v40 = (uint64_t)(v81[1] - *((_QWORD *)&v80 + 1)) >> 1;
              if (v40 <= 1)
                v40 = 1;
              if (v81[1] - *((_QWORD *)&v80 + 1) >= 0x7FFFFFFFFFFFFFFCuLL)
                v41 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v41 = v40;
              v43 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v81[1], v41);
              v44 = (char *)*((_QWORD *)&v80 + 1);
              v45 = (char *)v81[0];
              *v43 = -1;
              v39 = v43 + 1;
              v46 = v43;
              while (v45 != v44)
              {
                v47 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *--v46 = v47;
              }
              *((_QWORD *)&v80 + 1) = v46;
              v81[0] = v43 + 1;
              v81[1] = &v43[v42];
              if (v44)
                operator delete(v44);
            }
            else
            {
              **((_DWORD **)&v80 + 1) = -1;
              v39 = (_DWORD *)(v38 + 4);
            }
            v81[0] = v39;
            *(_QWORD *)&v80 = 0;
            v48 = v64;
            if ((unint64_t)v64 >= v65)
            {
              v49 = (std::string *)std::vector<kaldi::quasar::TranslationUtil::PathElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::PathElement const&>(&v63, (const kaldi::quasar::TranslationUtil::PathElement *)&v75);
            }
            else
            {
              kaldi::quasar::TranslationUtil::PathElement::PathElement(v64, (const kaldi::quasar::TranslationUtil::PathElement *)&v75);
              v49 = v48 + 10;
            }
            v64 = v49;
            kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&v75);
            ++v37;
          }
          kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v75);
          std::vector<kaldi::quasar::TranslationUtil::PathElement>::__assign_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>((uint64_t)&v75, v63, (uint64_t)v64, 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v64 - v63) >> 4));
          v76 = 0;
          *(_QWORD *)&v77 = 0;
          *(_QWORD *)&v78 = 0xAAAAAAAAAAAAAAABLL * (((char *)v67 - (char *)v66) >> 3);
          DWORD2(v78) = 5;
          std::string::operator=((std::string *)&v79, v34 + 3);
          v50 = v35[1];
          if (v50 >= v35[2])
          {
            v51 = std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::NbestElement const&>(v35, (const kaldi::quasar::TranslationUtil::NbestElement *)&v75);
            v6 = v35;
          }
          else
          {
            kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v35[1], (const kaldi::quasar::TranslationUtil::NbestElement *)&v75);
            v51 = v50 + 272;
            v6 = v35;
            v35[1] = v51;
          }
          v6[1] = v51;
          kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&v75);
          v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v63;
          std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
          v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v66;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
          v34 += 5;
        }
        while (v34 != v62);
        v5 = v57;
      }
    }
    v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v69;
    std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
    v11 = v58;
    v9 = v59;
  }
  v52 = *(_QWORD *)(v5 + 136);
  if (v52 && *(_BYTE *)(v52 + 2164) && *(_BYTE *)(v52 + 2165))
    v61[808] = 1;
  v53 = *(_DWORD *)(v5 + 5220);
  if (v6[1] != *v6)
  {
    if (v53 != 2)
      goto LABEL_100;
LABEL_97:
    if (*v61)
    {
      v54 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::DecodeTokenized<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v5, &v82, a3, v6);
      if (v54 < v31)
        v31 = v54;
    }
    goto LABEL_100;
  }
  if (v53 != 3)
    goto LABEL_97;
LABEL_100:
  v55 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::PostProcessNbestList<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v5, (const std::string *)a2, a3, (uint64_t)v6);
  *(_DWORD *)(v5 + 5224) = v9;
  *(_DWORD *)(v5 + 5200) = v10;
  *(_DWORD *)(v5 + 5188) = v11;
  *(_DWORD *)(v5 + 5192) = v12;
  *(_DWORD *)(v5 + 5196) = v60;
  if (v55 == -1.0)
    v32 = v31;
  else
    v32 = v55;
  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v71;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
LABEL_104:
  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v82;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v75);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88) < 0)
    operator delete(v86);
  return v32;
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::FindInPhraseBooks(uint64_t a1@<X1>, char **a2@<X2>, uint64_t *a3@<X8>)
{
  char *v6;
  char *v7;
  int v8;
  char *v9;
  const char *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v13[34];

  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"FindInPhraseBooks # ", 20);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v13);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = *a2;
  v7 = a2[1];
  if (*a2 == v7)
  {
    v8 = 0;
    v9 = *a2;
  }
  else
  {
    v8 = 0;
    do
    {
      if (*(_QWORD *)v6 && kaldi::quasar::PhraseBook::Find(*(_QWORD **)v6, a1, a3))
        break;
      ++v8;
      v6 += 16;
    }
    while (v6 != v7);
    v6 = *a2;
    v9 = a2[1];
  }
  if ((unint64_t)(v9 - v6) >= 0x11 && a3[1] != *a3 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    if (v8)
      v10 = "Phrasebook fallback match";
    else
      v10 = "Phrasebook locale match";
    if (v8)
      v11 = 25;
    else
      v11 = 23;
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", phrasebook idx=", 17);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v13);
  }
}

void sub_1ADF4B81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::DecodeTokenized<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, __int128 **a2, uint64_t a3, uint64_t *a4)
{
  float v8;
  std::string v10;
  void *__p;
  void *v12;
  uint64_t v13;
  std::string *v14;

  __p = 0;
  v12 = 0;
  v13 = 0;
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Symbolize(a1, (uint64_t *)&v10, (uint64_t)&__p, 0);
  v14 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  v8 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::DecodeSymbolized<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, (int **)&__p, a3, a4, (uint64_t *)a2);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  return v8;
}

void sub_1ADF4B928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<kaldi::quasar::PhraseBook>>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD v31[2];
  char v32;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = operator new(0x38uLL);
  v31[0] = v16;
  v31[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v9;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v17 = *(_QWORD *)(a3 + 16);
  v18 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 16) = 0;
  v16[4] = v17;
  v16[5] = v18;
  v19 = *(_QWORD *)(a3 + 32);
  v16[6] = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 16);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v32 = 1;
  v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v23 = *(float *)(a1 + 32);
  if (!v10 || (float)(v23 * (float)v10) < v22)
  {
    v24 = 1;
    if (v10 >= 3)
      v24 = (v10 & (v10 - 1)) != 0;
    v25 = v24 | (2 * v10);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      v27 = v26;
    else
      v27 = v25;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v27);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v28)
  {
    *(_QWORD *)v31[0] = *v28;
    *v28 = v31[0];
  }
  else
  {
    *(_QWORD *)v31[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v31[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v31[0])
    {
      v29 = *(_QWORD *)(*(_QWORD *)v31[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v29 >= v10)
          v29 %= v10;
      }
      else
      {
        v29 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v31[0];
    }
  }
  i = (unsigned __int8 *)v31[0];
  v31[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,void *>>>>::reset[abi:ne180100]((uint64_t)v31, 0);
  return i;
}

void sub_1ADF4BBF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t quasar::OptionValue<std::vector<std::string>>::value(_QWORD *a1)
{
  uint64_t v2;
  const void ****v3;
  std::__shared_weak_count *v4;
  const void ***v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  const void **v10;
  const void **v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v2 = quasar::OptionValue<std::string>::fallback((uint64_t)a1) + 104;
  if ((*(unsigned int (**)(_QWORD *))(*a1 + 32))(a1))
  {
    v3 = (const void ****)a1[11];
    v4 = (std::__shared_weak_count *)v3[1];
    if (v4)
    {
      v5 = *v3;
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v7 = __ldxr(p_shared_weak_owners);
      while (__stxr(v7 + 1, p_shared_weak_owners));
      v8 = std::__shared_weak_count::lock(v4);
      if (!v8)
      {
        v9 = v4;
        goto LABEL_17;
      }
      v9 = v8;
      std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = *v5;
        v11 = v5[1];
        if (*v5 != v11)
        {
          v12 = (uint64_t)(a1 + 17);
          v13 = a1 + 18;
          do
          {
            v14 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v12, v10);
            if (v13 != (_QWORD *)v14)
              v2 = v14 + 56;
            v10 += 3;
          }
          while (v10 != v11);
        }
      }
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
LABEL_17:
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  return v2;
}

void sub_1ADF4BD60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::MovingAttentionComponent::MovingAttentionComponent(kaldi::nnet1::MovingAttentionComponent *this, int a2, int a3)
{
  double result;

  *((_DWORD *)this + 108) = a2;
  *((_DWORD *)this + 109) = a3;
  *((_WORD *)this + 220) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 59) = &off_1E5D2D150;
  *((_OWORD *)this + 30) = xmmword_1AE13F660;
  *((_QWORD *)this + 62) = 0x3BF800000;
  *((_DWORD *)this + 126) = 1;
  *((_WORD *)this + 254) = 0;
  *((_BYTE *)this + 510) = 0;
  *((_QWORD *)this + 1) = -1;
  *(_QWORD *)this = &off_1E5D2FF88;
  *((_QWORD *)this + 53) = &off_1E5D30190;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = &unk_1E5D34170;
  *((_BYTE *)this + 64) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 9) = &unk_1E5D34170;
  *((_BYTE *)this + 112) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_QWORD *)this + 15) = &unk_1E5D34170;
  *((_BYTE *)this + 160) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_QWORD *)this + 21) = &unk_1E5D34170;
  *((_BYTE *)this + 208) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_QWORD *)this + 27) = &unk_1E5D34170;
  *((_BYTE *)this + 256) = 0;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = &unk_1E5D34170;
  *((_BYTE *)this + 376) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 48) = 0;
  *(_QWORD *)&result = 257;
  *((_DWORD *)this + 104) = 257;
  *((_BYTE *)this + 420) = 0;
  return result;
}

int *kaldi::CuArray<int>::operator=(int *a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 != (int *)a2)
  {
    if (!*((_QWORD *)a1 + 2))
      *((_QWORD *)a1 + 2) = *(_QWORD *)(a2 + 16);
    kaldi::CuArray<int>::Resize((uint64_t)a1, *(_DWORD *)a2, 1);
    v4 = *a1;
    if ((_DWORD)v4)
      memcpy(*((void **)a1 + 1), *(const void **)(a2 + 8), 4 * v4);
  }
  return a1;
}

kaldi::nnet1::MovingAttentionComponent *kaldi::nnet1::MovingAttentionComponent::MovingAttentionComponent(kaldi::nnet1::MovingAttentionComponent *this, const kaldi::nnet1::MovingAttentionComponent *a2)
{
  int32x2_t *v4;
  int32x2_t *v5;
  int32x2_t *v6;
  int32x2_t *v7;
  char *v8;
  int *v9;
  int32x2_t *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;

  *((_QWORD *)this + 54) = *(_QWORD *)((char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 24) + 8);
  *((_WORD *)this + 220) = 0;
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 0;
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 59) = &off_1E5D2D150;
  *((_OWORD *)this + 30) = xmmword_1AE13F660;
  *((_DWORD *)this + 124) = -1082130432;
  *(_QWORD *)((char *)this + 500) = 0x100000003;
  *((_WORD *)this + 254) = 0;
  *((_BYTE *)this + 510) = 0;
  *((_QWORD *)this + 1) = -1;
  *(_QWORD *)this = &off_1E5D2FF88;
  *((_QWORD *)this + 53) = &off_1E5D30190;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 3) = &unk_1E5D34170;
  v4 = (int32x2_t *)((char *)this + 24);
  *((_BYTE *)this + 64) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 9) = &unk_1E5D34170;
  v5 = (int32x2_t *)((char *)this + 72);
  *((_BYTE *)this + 112) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_QWORD *)this + 15) = &unk_1E5D34170;
  v6 = (int32x2_t *)((char *)this + 120);
  *((_BYTE *)this + 160) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_QWORD *)this + 21) = &unk_1E5D34170;
  v7 = (int32x2_t *)((char *)this + 168);
  *((_BYTE *)this + 208) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_QWORD *)this + 27) = &unk_1E5D34170;
  v8 = (char *)this + 216;
  *((_BYTE *)this + 256) = 0;
  v14 = (char *)this + 288;
  v15 = (char *)this + 264;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  v9 = (int *)((char *)this + 312);
  v10 = (int32x2_t *)((char *)this + 336);
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = &unk_1E5D34170;
  *((_BYTE *)this + 376) = 0;
  v13 = (char *)this + 384;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  v11 = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 1) = *((_QWORD *)a2 + 1);
  *((_QWORD *)v8 + 24) = *((_QWORD *)a2 + 51);
  *((_QWORD *)this + 2) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  kaldi::CuMatrix<float>::operator=(v4, (int32x2_t *)a2 + 3);
  kaldi::CuMatrix<float>::operator=(v5, (int32x2_t *)a2 + 9);
  kaldi::CuMatrix<float>::operator=(v6, (int32x2_t *)a2 + 15);
  kaldi::CuMatrix<float>::operator=(v7, (int32x2_t *)a2 + 21);
  if (this != a2)
  {
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>((uint64_t)v15, *((_QWORD *)a2 + 33), *((_QWORD *)a2 + 34), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 34) - *((_QWORD *)a2 + 33)) >> 3));
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>((uint64_t)v14, *((_QWORD *)a2 + 36), *((_QWORD *)a2 + 37), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 37) - *((_QWORD *)a2 + 36)) >> 3));
  }
  kaldi::CuArray<int>::operator=(v9, (uint64_t)a2 + 312);
  kaldi::CuMatrix<float>::operator=(v10, (int32x2_t *)a2 + 42);
  if (this != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v13, *((char **)a2 + 48), *((_QWORD *)a2 + 49), (uint64_t)(*((_QWORD *)a2 + 49) - *((_QWORD *)a2 + 48)) >> 2);
  *((_DWORD *)this + 104) = *((_DWORD *)a2 + 104);
  *((_BYTE *)this + 420) = *((_BYTE *)a2 + 420);
  return this;
}

void sub_1ADF4C100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, kaldi::nnet1::UpdatableComponent *a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  quasar::Bitmap *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v23;
  void *v24;

  v23 = *a11;
  if (*a11)
  {
    *((_QWORD *)v14 + 49) = v23;
    operator delete(v23);
  }
  kaldi::CuMatrix<float>::~CuMatrix(v21);
  v24 = (void *)*((_QWORD *)v14 + 40);
  if (v24)
    free(v24);
  *v15 = 0;
  v15[1] = 0;
  v15[2] = 0;
  a14 = a12;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  a14 = a13;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  kaldi::CuMatrix<float>::~CuMatrix(v20);
  kaldi::CuMatrix<float>::~CuMatrix(v19);
  kaldi::CuMatrix<float>::~CuMatrix(v18);
  kaldi::CuMatrix<float>::~CuMatrix(v17);
  kaldi::CuMatrix<float>::~CuMatrix(v16);
  quasar::Bitmap::~Bitmap(v14);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(a10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MovingAttentionComponent::~MovingAttentionComponent(kaldi::nnet1::MovingAttentionComponent *this, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void **v7;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24)) = a2[3];
  v4 = *((_QWORD *)this + 2);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  *((_QWORD *)this + 2) = 0;
  v5 = (void *)*((_QWORD *)this + 48);
  if (v5)
  {
    *((_QWORD *)this + 49) = v5;
    operator delete(v5);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 336);
  v6 = (void *)*((_QWORD *)this + 40);
  if (v6)
    free(v6);
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  v7 = (void **)((char *)this + 288);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 264);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 216);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 168);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 120);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 72);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 24);
  quasar::Bitmap::~Bitmap(this);
}

void kaldi::nnet1::MovingAttentionComponent::~MovingAttentionComponent(kaldi::nnet1::MovingAttentionComponent *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 424));
}

{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 424));
  JUMPOUT(0x1AF44D190);
}

void `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::~MovingAttentionComponent(kaldi::nnet1::MovingAttentionComponent *this)
{
  uint64_t v1;

  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)(v1 + 424));
}

{
  kaldi::nnet1::MovingAttentionComponent::~MovingAttentionComponent((kaldi::nnet1::MovingAttentionComponent *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t kaldi::nnet1::MovingAttentionComponent::Copy(kaldi::nnet1::MovingAttentionComponent *this)
{
  kaldi::nnet1::MovingAttentionComponent *v2;

  v2 = (kaldi::nnet1::MovingAttentionComponent *)operator new();
  kaldi::nnet1::MovingAttentionComponent::MovingAttentionComponent(v2, this);
  return (uint64_t)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24);
}

void sub_1ADF4C370(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C40F02A9525);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::Copy(kaldi::nnet1::MovingAttentionComponent *this)
{
  return kaldi::nnet1::MovingAttentionComponent::Copy((kaldi::nnet1::MovingAttentionComponent *)((char *)this
                                                                                               + *(_QWORD *)(*(_QWORD *)this - 32)));
}

uint64_t kaldi::nnet1::MovingAttentionComponent::GetType(kaldi::nnet1::MovingAttentionComponent *this)
{
  return 281;
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::GetType(kaldi::nnet1::MovingAttentionComponent *this)
{
  return 281;
}

void kaldi::nnet1::MovingAttentionComponent::InitData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  void *v14;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v22;
  BOOL v24;
  void *v28;
  void *v29;
  int v30;
  BOOL v31;
  uint64_t v34;
  kaldi::nnet1::Component *v35;
  _QWORD *v36;
  void **v37;
  uint64_t v38;
  const void *v39;
  void *v40;
  _QWORD *v41;
  void **v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD v47[35];
  uint64_t v48;
  void **v49;
  uint64_t v50;
  uint64_t v51;
  void *v52[4];

  memset(v52, 0, 24);
  v5 = a2 + 4;
  v6 = a1 + 412;
  v7 = a1 + 408;
  v8 = a1 + 12;
  v9 = a1 + 8;
  while ((*((_BYTE *)v5 + *(_QWORD *)(*a2 - 24)) & 2) == 0)
  {
    kaldi::ReadToken(a2, 0, (uint64_t)v52);
    if ((SHIBYTE(v52[2]) & 0x80000000) == 0)
    {
      v10 = v52;
      switch(HIBYTE(v52[2]))
      {
        case 0xD:
          goto LABEL_11;
        case 0xE:
          goto LABEL_56;
        case 0xF:
          v11 = v52[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v52 + 7) == (void *)0x3E736E6F69746E65;
          v12 = v8;
          if (v11)
            break;
          if (HIBYTE(v52[2]) == 14)
          {
LABEL_56:
            v22 = v52[0] == (void *)0x6F4374686769523CLL && *(void **)((char *)v52 + 6) == (void *)0x3E747865746E6F43;
            v12 = v6;
            if (!v22)
              goto LABEL_104;
          }
          else
          {
            if (HIBYTE(v52[2]) != 13)
              goto LABEL_104;
LABEL_11:
            v13 = v52[0] == (void *)0x6E6F437466654C3CLL && *(void **)((char *)v52 + 5) == (void *)0x3E747865746E6F43;
            v12 = v7;
            if (!v13)
              goto LABEL_104;
          }
          break;
        case 0x10:
          if (v52[0] == (void *)0x52656372756F533CLL && v52[1] == (void *)0x3E64657372657665)
            goto LABEL_95;
          if (HIBYTE(v52[2]) != 16)
            goto LABEL_104;
          if (v52[0] != (void *)0x65677261546F4E3CLL || v52[1] != (void *)0x3E7461636E6F4374)
            goto LABEL_79;
          goto LABEL_96;
        case 0x14:
          goto LABEL_86;
        case 0x16:
          v24 = v52[0] == (void *)0x53656372756F533CLL
             && v52[1] == (void *)0x656D694465746174
             && *(void **)((char *)&v52[1] + 6) == (void *)0x3E6E6F69736E656DLL;
          v12 = v9;
          if (!v24)
            goto LABEL_104;
          break;
        default:
          goto LABEL_104;
      }
LABEL_69:
      kaldi::ReadBasicType<int>(a2, 0, v12);
      goto LABEL_103;
    }
    v14 = v52[1];
    if (v52[1] == (void *)15)
    {
      v17 = *(_QWORD *)v52[0] == 0x6574744178614D3CLL && *(_QWORD *)((char *)v52[0] + 7) == 0x3E736E6F69746E65;
      v12 = v8;
      if (v17)
        goto LABEL_69;
      v14 = v52[1];
    }
    else if (v52[1] == (void *)22)
    {
      v15 = *(_QWORD *)v52[0] == 0x53656372756F533CLL && *((_QWORD *)v52[0] + 1) == 0x656D694465746174;
      v16 = v15 && *(_QWORD *)((char *)v52[0] + 14) == 0x3E6E6F69736E656DLL;
      v12 = v9;
      if (v16)
        goto LABEL_69;
    }
    if (v14 == (void *)13)
    {
      v18 = *(_QWORD *)v52[0] == 0x6E6F437466654C3CLL && *(_QWORD *)((char *)v52[0] + 5) == 0x3E747865746E6F43;
      v12 = v7;
      if (v18)
        goto LABEL_69;
      v14 = v52[1];
    }
    if (v14 == (void *)14)
    {
      v19 = *(_QWORD *)v52[0] == 0x6F4374686769523CLL && *(_QWORD *)((char *)v52[0] + 6) == 0x3E747865746E6F43;
      v12 = v6;
      if (v19)
        goto LABEL_69;
      v14 = v52[1];
    }
    if (v14 == (void *)16)
    {
      if (*(_QWORD *)v52[0] == 0x52656372756F533CLL && *((_QWORD *)v52[0] + 1) == 0x3E64657372657665)
      {
LABEL_95:
        *(_BYTE *)(a1 + 416) = 0;
        goto LABEL_103;
      }
      v14 = v52[1];
      if (v52[1] == (void *)16)
      {
        if (*(_QWORD *)v52[0] == 0x65677261546F4E3CLL && *((_QWORD *)v52[0] + 1) == 0x3E7461636E6F4374)
        {
LABEL_96:
          *(_BYTE *)(a1 + 417) = 0;
          goto LABEL_103;
        }
        if ((HIBYTE(v52[2]) & 0x80) == 0)
        {
          if (HIBYTE(v52[2]) != 16)
            goto LABEL_104;
LABEL_79:
          if (v52[0] != (void *)0x636174746165523CLL || v52[1] != (void *)0x3E74656772615468)
          {
LABEL_104:
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v52, "</Component>"))
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v47);
              v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"Unknown token ", 14);
              if (SHIBYTE(v52[2]) >= 0)
                v42 = v52;
              else
                v42 = (void **)v52[0];
              if (SHIBYTE(v52[2]) >= 0)
                v43 = HIBYTE(v52[2]);
              else
                v43 = (uint64_t)v52[1];
              v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
              v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)", a typo in config?", 19);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" (SourceStateDimension|MaxAttentions|LeftContext|RightContext)", 62);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v47);
            }
            break;
          }
LABEL_102:
          *(_BYTE *)(a1 + 418) = 1;
          goto LABEL_103;
        }
        if (*(_QWORD *)v52[0] == 0x636174746165523CLL && *((_QWORD *)v52[0] + 1) == 0x3E74656772615468)
          goto LABEL_102;
        v14 = v52[1];
      }
    }
    if (v14 != (void *)20)
      goto LABEL_104;
    v10 = (void **)v52[0];
LABEL_86:
    v28 = *v10;
    v29 = v10[1];
    v30 = *((_DWORD *)v10 + 4);
    v31 = v28 == (void *)0x646F7250746F443CLL && v29 == (void *)0x74616C6552746375;
    if (!v31 || v30 != 1047424873)
      goto LABEL_104;
    *(_BYTE *)(a1 + 419) = 1;
LABEL_103:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v34 = *(_QWORD *)(a1 + 16);
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v49 = 0;
  v50 = 0;
  v51 = 0;
  kaldi::ReadToken(a2, 0, (uint64_t)&v49);
  v35 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v49);
  v48 = 0;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v47, 3);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"Initializing component of type ", 31);
    if (v51 >= 0)
      v37 = (void **)&v49;
    else
      v37 = v49;
    if (v51 >= 0)
      v38 = HIBYTE(v51);
    else
      v38 = v50;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v47);
  }
  kaldi::ExpectToken(a2, 0, "<InputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v48 + 4);
  kaldi::ExpectToken(a2, 0, "<OutputDim>");
  kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v48);
  v39 = (const void *)kaldi::nnet1::Component::NewComponentOfType(v35, HIDWORD(v48), v48);
  *(_QWORD *)(a1 + 16) = v40;
  (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v40 + 96))(v40, a2, a3);
  kaldi::nnet1::MovingAttentionComponent::Check((void *)a1);
  if (SHIBYTE(v51) < 0)
    operator delete(v49);
  if (SHIBYTE(v52[2]) < 0)
    operator delete(v52[0]);
}

void sub_1ADF4CA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;

  if (*(char *)(v10 - 89) < 0)
    operator delete(*(void **)(v10 - 112));
  _Unwind_Resume(exception_object);
}

void *kaldi::nnet1::MovingAttentionComponent::Check(void *this)
{
  uint64_t v1;
  _DWORD *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD v23[34];

  if (!*((_BYTE *)this + 420))
  {
    v1 = (uint64_t)this;
    v2 = (_DWORD *)*((_QWORD *)this + 2);
    if (v2)
    {
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "this is a non-recurrent version, cannot have a recurrent internal component");
        goto LABEL_32;
      }
      if (this)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "no recursive inclusion");
        goto LABEL_32;
      }
    }
    v3 = *(_DWORD *)(v1 + 12);
    if (v3 < 1 || (v4 = *(_DWORD *)(v1 + 8), v4 <= 0))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"component is not initialized, max attention is ", 47);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", source state dimension is ", 28);
      std::ostream::operator<<();
      goto LABEL_32;
    }
    v5 = *(_DWORD *)(v1 + 408);
    if (v5 < 1 || (v6 = *(_DWORD *)(v1 + 412), v6 <= 0))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"component is not initialized, left and right context is ", 56);
      v16 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ", 1);
      std::ostream::operator<<();
      goto LABEL_32;
    }
    if (*(_BYTE *)(v1 + 417))
    {
      if (*(_DWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 - 24) + 8) + v4 * v3 != v2[2])
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"The target input is concatenated. component has input dim ", 58);
        v7 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", attentions ", 13);
        v8 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", source state dimension ", 25);
        v9 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", however, the internal training component has input dim ", 57);
        std::ostream::operator<<();
        goto LABEL_32;
      }
    }
    else if (v4 * v3 != v2[2])
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"The target input is not concatenated. component has input dim ", 62);
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", attentions ", 13);
      v20 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", source state dimension ", 25);
      v21 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", however, the internal training component has input dim ", 57);
      std::ostream::operator<<();
      goto LABEL_32;
    }
    v10 = v1 + *(_QWORD *)(*(_QWORD *)v1 - 24);
    v11 = *(_DWORD *)(v10 + 12);
    if (*(_BYTE *)(v1 + 418))
    {
      if (v11 != v2[3] + *(_DWORD *)(v10 + 8))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"component has input dim ", 24);
        v12 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" , and output dim ", 18);
        v13 = (_QWORD *)std::ostream::operator<<();
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", and you requested to reattch the target, however, ", 52);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"the internal component has output dim ", 38);
        std::ostream::operator<<();
        goto LABEL_32;
      }
    }
    else if (v11 != v2[3])
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"component has output dim ", 25);
      v22 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" does not match the internal component's output dim ", 52);
      std::ostream::operator<<();
      goto LABEL_32;
    }
    if (v3 == v5 + v6 + 1)
    {
      if (*(_BYTE *)(v1 + 419))
      {
        if (*(_DWORD *)(v10 + 8) != v4)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "the source state must have the same dimension as the input dimension of the component if want to take the dot product between them");
          goto LABEL_32;
        }
        goto LABEL_22;
      }
      if (*(unsigned __int8 *)(v1 + 418) | *(unsigned __int8 *)(v1 + 417))
      {
LABEL_22:
        *(_BYTE *)(v1 + 420) = 1;
        return this;
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "if not taking the dot production relation from the source and target, you must at least concatenate or reattach the target");
    }
    else
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"the maximum attention is ", 25);
      v17 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" , that does not match the left_context + 1 + right_context, you defined left/right context as ", 95);
      v18 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" ", 1);
      std::ostream::operator<<();
    }
LABEL_32:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
  }
  return this;
}

void `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::InitData(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  kaldi::nnet1::MovingAttentionComponent::InitData((uint64_t)a1 + *(_QWORD *)(*a1 - 112), a2, a3);
}

void kaldi::nnet1::MovingAttentionComponent::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  BOOL v12;
  uint64_t v13;
  BOOL v14;
  void *v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v23;
  BOOL v25;
  void *v29;
  void *v30;
  int v31;
  BOOL v32;
  uint64_t v35;
  const void *v36;
  _QWORD *v37;
  void **v38;
  uint64_t v39;
  _QWORD v41[34];
  void *v42[4];

  memset(v42, 0, 24);
  v7 = a1 + 412;
  v8 = a1 + 408;
  v9 = a1 + 12;
  v10 = a1 + 8;
  while (kaldi::Peek(a2, a3) == 60)
  {
    kaldi::ReadToken(a2, a3, (uint64_t)v42);
    if (SHIBYTE(v42[2]) < 0)
    {
      v15 = v42[1];
      if (v42[1] == (void *)15)
      {
        v18 = *(_QWORD *)v42[0] == 0x6574744178614D3CLL && *(_QWORD *)((char *)v42[0] + 7) == 0x3E736E6F69746E65;
        v13 = v9;
        if (v18)
          goto LABEL_69;
        v15 = v42[1];
      }
      else if (v42[1] == (void *)22)
      {
        v16 = *(_QWORD *)v42[0] == 0x53656372756F533CLL && *((_QWORD *)v42[0] + 1) == 0x656D694465746174;
        v17 = v16 && *(_QWORD *)((char *)v42[0] + 14) == 0x3E6E6F69736E656DLL;
        v13 = v10;
        if (v17)
          goto LABEL_69;
      }
      if (v15 == (void *)13)
      {
        v19 = *(_QWORD *)v42[0] == 0x6E6F437466654C3CLL && *(_QWORD *)((char *)v42[0] + 5) == 0x3E747865746E6F43;
        v13 = v8;
        if (v19)
          goto LABEL_69;
        v15 = v42[1];
      }
      if (v15 == (void *)14)
      {
        v20 = *(_QWORD *)v42[0] == 0x6F4374686769523CLL && *(_QWORD *)((char *)v42[0] + 6) == 0x3E747865746E6F43;
        v13 = v7;
        if (v20)
          goto LABEL_69;
        v15 = v42[1];
      }
      if (v15 != (void *)16)
        goto LABEL_84;
      if (*(_QWORD *)v42[0] == 0x52656372756F533CLL && *((_QWORD *)v42[0] + 1) == 0x3E64657372657665)
      {
LABEL_95:
        *(_BYTE *)(a1 + 416) = 0;
      }
      else
      {
        v15 = v42[1];
        if (v42[1] != (void *)16)
          goto LABEL_84;
        if (*(_QWORD *)v42[0] == 0x65677261546F4E3CLL && *((_QWORD *)v42[0] + 1) == 0x3E7461636E6F4374)
        {
LABEL_96:
          *(_BYTE *)(a1 + 417) = 0;
        }
        else if ((HIBYTE(v42[2]) & 0x80) != 0)
        {
          if (*(_QWORD *)v42[0] == 0x636174746165523CLL && *((_QWORD *)v42[0] + 1) == 0x3E74656772615468)
            goto LABEL_102;
          v15 = v42[1];
LABEL_84:
          if (v15 != (void *)20)
            goto LABEL_103;
          v11 = (void **)v42[0];
LABEL_86:
          v29 = *v11;
          v30 = v11[1];
          v31 = *((_DWORD *)v11 + 4);
          v32 = v29 == (void *)0x646F7250746F443CLL && v30 == (void *)0x74616C6552746375;
          if (!v32 || v31 != 1047424873)
            goto LABEL_103;
          *(_BYTE *)(a1 + 419) = 1;
        }
        else
        {
          if (HIBYTE(v42[2]) != 16)
            goto LABEL_103;
LABEL_79:
          if (v42[0] != (void *)0x636174746165523CLL || v42[1] != (void *)0x3E74656772615468)
          {
LABEL_103:
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v42, "</Component>"))
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v41);
              v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Unrecognized token ", 19);
              if (SHIBYTE(v42[2]) >= 0)
                v38 = v42;
              else
                v38 = (void **)v42[0];
              if (SHIBYTE(v42[2]) >= 0)
                v39 = HIBYTE(v42[2]);
              else
                v39 = (uint64_t)v42[1];
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v38, v39);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v41);
            }
            break;
          }
LABEL_102:
          *(_BYTE *)(a1 + 418) = 1;
        }
      }
    }
    else
    {
      v11 = v42;
      switch(HIBYTE(v42[2]))
      {
        case 0xD:
          goto LABEL_11;
        case 0xE:
          goto LABEL_56;
        case 0xF:
          v12 = v42[0] == (void *)0x6574744178614D3CLL && *(void **)((char *)v42 + 7) == (void *)0x3E736E6F69746E65;
          v13 = v9;
          if (v12)
            break;
          if (HIBYTE(v42[2]) == 14)
          {
LABEL_56:
            v23 = v42[0] == (void *)0x6F4374686769523CLL && *(void **)((char *)v42 + 6) == (void *)0x3E747865746E6F43;
            v13 = v7;
            if (!v23)
              goto LABEL_103;
          }
          else
          {
            if (HIBYTE(v42[2]) != 13)
              goto LABEL_103;
LABEL_11:
            v14 = v42[0] == (void *)0x6E6F437466654C3CLL && *(void **)((char *)v42 + 5) == (void *)0x3E747865746E6F43;
            v13 = v8;
            if (!v14)
              goto LABEL_103;
          }
          break;
        case 0x10:
          if (v42[0] == (void *)0x52656372756F533CLL && v42[1] == (void *)0x3E64657372657665)
            goto LABEL_95;
          if (HIBYTE(v42[2]) != 16)
            goto LABEL_103;
          if (v42[0] != (void *)0x65677261546F4E3CLL || v42[1] != (void *)0x3E7461636E6F4374)
            goto LABEL_79;
          goto LABEL_96;
        case 0x14:
          goto LABEL_86;
        case 0x16:
          v25 = v42[0] == (void *)0x53656372756F533CLL
             && v42[1] == (void *)0x656D694465746174
             && *(void **)((char *)&v42[1] + 6) == (void *)0x3E6E6F69736E656DLL;
          v13 = v10;
          if (!v25)
            goto LABEL_103;
          break;
        default:
          goto LABEL_103;
      }
LABEL_69:
      kaldi::ReadBasicType<int>(a2, a3, v13);
    }
  }
  v35 = *(_QWORD *)(a1 + 16);
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
  if (v36)
  *(_QWORD *)(a1 + 16) = v36;
  kaldi::nnet1::MovingAttentionComponent::Check((void *)a1);
  if (SHIBYTE(v42[2]) < 0)
    operator delete(v42[0]);
}

void sub_1ADF4D4D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::ReadData(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::MovingAttentionComponent::ReadData((uint64_t)a1 + *(_QWORD *)(*a1 - 176), a2, a3, a4);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::WriteConfig(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  kaldi::nnet1::Component *v6;
  std::string __p;

  kaldi::WriteToken(a2, a3, "<SourceStateDimension>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxAttentions>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<LeftContext>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<RightContext>");
  kaldi::WriteBasicType<int>(a2, a3);
  if (!*(_BYTE *)(a1 + 416))
    kaldi::WriteToken(a2, a3, "<SourceReversed>");
  if (!*(_BYTE *)(a1 + 417))
    kaldi::WriteToken(a2, a3, "<NoTargetConcat>");
  if (*(_BYTE *)(a1 + 418))
    kaldi::WriteToken(a2, a3, "<ReattachTarget>");
  if (*(_BYTE *)(a1 + 419))
    kaldi::WriteToken(a2, a3, "<DotProductRelation>");
  kaldi::WriteToken(a2, a3, "</Component>");
  v6 = (kaldi::nnet1::Component *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
  kaldi::nnet1::Component::TypeToMarker(v6, &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteBasicType<int>(a2, a3);
  return kaldi::WriteBasicType<int>(a2, a3);
}

void sub_1ADF4D6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::WriteConfig(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return kaldi::nnet1::MovingAttentionComponent::WriteConfig((uint64_t)a1 + *(_QWORD *)(*a1 - 184), a2, a3);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::WriteData(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ((void (*)(_QWORD **))(*a1)[12])(a1);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*a1[2] + 104))(a1[2], a2, a3, a4);
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::WriteData(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD **v7;

  v7 = (_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 120));
  ((void (*)(_QWORD **))(*v7)[12])(v7);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v7[2] + 104))(v7[2], a2, a3, a4);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::NumParams(kaldi::nnet1::MovingAttentionComponent *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 176))(*((_QWORD *)this + 2));
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::NumParams(kaldi::nnet1::MovingAttentionComponent *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 192) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 176))(v1);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::GetParams(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 184))(*(_QWORD *)(a1 + 16));
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::GetParams(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 200) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 184))(v1);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SetParams(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 192))(*(_QWORD *)(a1 + 16));
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::SetParams(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 208) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 192))(v1);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SumParams(kaldi::nnet1::MovingAttentionComponent *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 208))(*((_QWORD *)this + 2));
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::SumParams(kaldi::nnet1::MovingAttentionComponent *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 224) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 208))(v1);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::PerturbParams(kaldi::nnet1::MovingAttentionComponent *this, float a2)
{
  return (*(uint64_t (**)(_QWORD, float))(**((_QWORD **)this + 2) + 216))(*((_QWORD *)this + 2), a2);
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::PerturbParams(kaldi::nnet1::MovingAttentionComponent *this, float a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 232) + 16);
  return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)v2 + 216))(v2, a2);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::Info(kaldi::nnet1::MovingAttentionComponent *this)
{
  void **v2;
  uint64_t v3;
  void *__p[2];
  unsigned __int8 v6;
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  (*(void (**)(kaldi::nnet1::MovingAttentionComponent *, _QWORD *, _QWORD))(*(_QWORD *)this + 96))(this, v7, 0);
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 2) + 64))(__p);
  if ((v6 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v6 & 0x80u) == 0)
    v3 = v6;
  else
    v3 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v2, v3);
  if ((char)v6 < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v7[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v9);
}

void sub_1ADF4D974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::Info(kaldi::nnet1::MovingAttentionComponent *this)
{
  return kaldi::nnet1::MovingAttentionComponent::Info((kaldi::nnet1::MovingAttentionComponent *)((char *)this
                                                                                               + *(_QWORD *)(*(_QWORD *)this - 80)));
}

uint64_t kaldi::nnet1::MovingAttentionComponent::InfoGradient(kaldi::nnet1::MovingAttentionComponent *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2));
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::InfoGradient(kaldi::nnet1::MovingAttentionComponent *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SetTrainOptions(kaldi::nnet1::MovingAttentionComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  char *v2;
  __int128 v3;

  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  v3 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)(v2 + 71) = *(_OWORD *)((char *)a2 + 23);
  *(_OWORD *)(v2 + 56) = v3;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 264))(*((_QWORD *)this + 2));
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::SetTrainOptions(kaldi::nnet1::MovingAttentionComponent *this, const kaldi::nnet1::NnetTrainOptions *a2)
{
  char *v2;
  char *v3;
  __int128 v4;

  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 280);
  v3 = &v2[*(_QWORD *)(*(_QWORD *)v2 - 24)];
  v4 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)(v3 + 71) = *(_OWORD *)((char *)a2 + 23);
  *(_OWORD *)(v3 + 56) = v4;
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 2) + 264))(*((_QWORD *)v2 + 2));
}

void kaldi::nnet1::MovingAttentionComponent::SetSourceStates(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD **v25;
  unint64_t v26;
  _QWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int *v40;
  int **v41;
  unint64_t v42;
  _QWORD *v43;
  int *v44;
  int *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  int *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  _QWORD v56[4];
  void *__p;
  __int128 v58;
  __int128 v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  kaldi::nnet1::MovingAttentionComponent::Check((void *)a1);
  v55 = a3;
  v6 = a3[1] - *a3;
  v7 = v6 >> 2;
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 24), v6 >> 2, ((*(_DWORD *)(a1 + 408) + *(_DWORD *)(a1 + 412) + *(_DWORD *)(a2 + 20) / (int)(v6 >> 2))* *(_DWORD *)(a2 + 16)), 0, 0);
  v8 = (v6 >> 2);
  v53 = v6;
  v54 = v8;
  if ((int)(v6 >> 2) >= 1)
  {
    v9 = 0;
    v10 = *(_DWORD *)(a1 + 8);
    v11 = *v55;
    do
    {
      if (*(int *)(v11 + 4 * v9) >= 1)
      {
        v12 = 0;
        v13 = v10 * *(_DWORD *)(a1 + 408);
        v14 = v9;
        do
        {
          v15 = *(_DWORD *)(a1 + 48);
          v16 = *(_QWORD *)(a1 + 32) + 4 * v13;
          v17 = *(_DWORD *)(a1 + 52) - v13;
          v18 = *(_QWORD *)(a1 + 56);
          *((_QWORD *)&v58 + 1) = __PAIR64__(*(_DWORD *)(a1 + 44), v10);
          *(_QWORD *)&v59 = __PAIR64__(v17, v15);
          *((_QWORD *)&v59 + 1) = v18;
          v60 = &unk_1E5D29D70;
          __p = &unk_1E5D29D40;
          *(_QWORD *)&v58 = v16;
          v61 = v16 + 4 * (int)(v15 * v9);
          v62 = v10;
          v63 = v18;
          v19 = *(_QWORD *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * v14;
          LODWORD(v16) = *(_DWORD *)(a2 + 16);
          v20 = *(_QWORD *)(a2 + 32);
          v56[0] = &unk_1E5D29D70;
          v56[1] = v19;
          v56[3] = v20;
          v56[2] = v16;
          kaldi::CuVectorBase<float>::CopyFromVec(&v60, (uint64_t)v56);
          v60 = &unk_1E5D29D70;
          v61 = 0;
          LODWORD(v62) = 0;
          v63 = 0;
          __p = &unk_1E5D29D40;
          v58 = 0u;
          v59 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
          v10 = *(_DWORD *)(a1 + 8);
          v13 += v10;
          ++v12;
          v11 = *v55;
          v14 += v7;
        }
        while (v12 < *(_DWORD *)(*v55 + 4 * v9));
        v8 = v54;
      }
      ++v9;
    }
    while (v9 != v8);
  }
  v21 = (int)(v53 >> 2);
  __p = 0;
  v58 = 0uLL;
  std::vector<std::vector<int>>::assign((uint64_t *)(a1 + 264), v21, (uint64_t)&__p);
  if (__p)
  {
    *(_QWORD *)&v58 = __p;
    operator delete(__p);
  }
  __p = 0;
  v58 = 0uLL;
  std::vector<std::vector<int>>::assign((uint64_t *)(a1 + 288), v21, (uint64_t)&__p);
  if (__p)
  {
    *(_QWORD *)&v58 = __p;
    operator delete(__p);
  }
  if (*(_BYTE *)(a1 + 416))
  {
    std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 384), v21);
    if ((int)v7 >= 1)
    {
      v22 = 0;
      do
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 384) + 4 * v22) = *(_DWORD *)(*v55 + 4 * v22) + *(_DWORD *)(a1 + 408) - 1;
        v23 = *(_QWORD *)(a1 + 288) + 24 * v22;
        v25 = (_DWORD **)(v23 + 8);
        v24 = *(_DWORD **)(v23 + 8);
        v27 = (_QWORD *)(v23 + 16);
        v26 = *(_QWORD *)(v23 + 16);
        if ((unint64_t)v24 >= v26)
        {
          v29 = *(_DWORD **)v23;
          v30 = ((uint64_t)v24 - *(_QWORD *)v23) >> 2;
          v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 62)
            goto LABEL_53;
          v32 = v26 - (_QWORD)v29;
          if (v32 >> 1 > v31)
            v31 = v32 >> 1;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
            v33 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v33 = v31;
          if (v33)
          {
            v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v27, v33);
            v24 = *v25;
            v29 = *(_DWORD **)v23;
          }
          else
          {
            v34 = 0;
          }
          v35 = &v34[4 * v30];
          *(_DWORD *)v35 = *(_DWORD *)(a1 + 408);
          v28 = v35 + 4;
          while (v24 != v29)
          {
            v36 = *--v24;
            *((_DWORD *)v35 - 1) = v36;
            v35 -= 4;
          }
          *(_QWORD *)v23 = v35;
          *v25 = v28;
          *v27 = &v34[4 * v33];
          if (v29)
            operator delete(v29);
        }
        else
        {
          *v24 = *(_DWORD *)(a1 + 408);
          v28 = v24 + 1;
        }
        *v25 = v28;
        ++v22;
      }
      while (v22 != v8);
    }
  }
  else if ((int)v7 >= 1)
  {
    v37 = 0;
    do
    {
      v38 = *(_QWORD *)(a1 + 288) + 24 * v37;
      v39 = *(_DWORD *)(*v55 + 4 * v37) + *(_DWORD *)(a1 + 408) - 1;
      v41 = (int **)(v38 + 8);
      v40 = *(int **)(v38 + 8);
      v43 = (_QWORD *)(v38 + 16);
      v42 = *(_QWORD *)(v38 + 16);
      if ((unint64_t)v40 >= v42)
      {
        v45 = *(int **)v38;
        v46 = ((uint64_t)v40 - *(_QWORD *)v38) >> 2;
        v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 62)
LABEL_53:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v48 = v42 - (_QWORD)v45;
        if (v48 >> 1 > v47)
          v47 = v48 >> 1;
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
          v49 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v49 = v47;
        if (v49)
        {
          v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v43, v49);
          v40 = *v41;
          v45 = *(int **)v38;
        }
        else
        {
          v50 = 0;
        }
        v51 = (int *)&v50[4 * v46];
        *v51 = v39;
        v44 = v51 + 1;
        while (v40 != v45)
        {
          v52 = *--v40;
          *--v51 = v52;
        }
        *(_QWORD *)v38 = v51;
        *v41 = v44;
        *v43 = &v50[4 * v49];
        if (v45)
          operator delete(v45);
      }
      else
      {
        *v40 = v39;
        v44 = v40 + 1;
      }
      *v41 = v44;
      ++v37;
    }
    while (v37 != v54);
  }
}

void sub_1ADF4DE80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::MovingAttentionComponent::GetSourceDiffs(uint64_t a1, uint64_t a2, _QWORD *a3, int32x2_t *a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  unsigned __int32 v22;
  int32x2_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[4];
  void *v34;
  __int128 v35;
  __int128 v36;

  kaldi::nnet1::MovingAttentionComponent::Check((void *)a1);
  v25 = a3;
  v8 = a3[1] - *a3;
  v9 = v8 >> 2;
  v11 = *(unsigned int *)(a2 + 16);
  v10 = *(unsigned int *)(a2 + 20);
  v12 = *(_DWORD *)(a1 + 408) * v11;
  v13 = *(_QWORD *)(a1 + 128) + 4 * v12;
  v14 = *(_DWORD *)(a1 + 144);
  v15 = *(_DWORD *)(a1 + 148) - v12;
  v16 = *(_QWORD *)(a1 + 152);
  DWORD2(v35) = v11 * ((int)v10 / (int)(v8 >> 2));
  HIDWORD(v35) = v8 >> 2;
  *(_QWORD *)&v36 = __PAIR64__(v15, v14);
  *((_QWORD *)&v36 + 1) = v16;
  v34 = &unk_1E5D29D40;
  *(_QWORD *)&v35 = v13;
  kaldi::CuMatrix<float>::Resize(a4, v10, v11, 0, 0);
  if (SHIDWORD(v35) >= 1)
  {
    v17 = 0;
    v24 = (v8 >> 2);
    do
    {
      if (v17 >= (uint64_t)(v25[1] - *v25) >> 2)
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      v18 = *(_DWORD *)(*v25 + 4 * v17);
      if (v18 >= 1)
      {
        v19 = 0;
        v20 = v17;
        do
        {
          v21 = *(_QWORD *)&a4[1] + 4 * a4[3].i32[0] * v20;
          v22 = a4[2].u32[0];
          v23 = a4[4];
          v33[0] = &unk_1E5D29D70;
          v33[1] = v21;
          v33[3] = v23;
          v33[2] = v22;
          DWORD2(v27) = *(_DWORD *)(a1 + 8);
          HIDWORD(v27) = HIDWORD(v35);
          LODWORD(v28) = v36;
          DWORD1(v28) = DWORD1(v36) - DWORD2(v27) * v19;
          *((_QWORD *)&v28 + 1) = *((_QWORD *)&v36 + 1);
          v29 = &unk_1E5D29D70;
          v26 = &unk_1E5D29D40;
          *(_QWORD *)&v27 = v35 + 4 * (DWORD2(v27) * v19);
          v30 = v27 + 4 * (int)v36 * (int)v17;
          v31 = DWORD2(v27);
          v32 = *((_QWORD *)&v36 + 1);
          kaldi::CuVectorBase<float>::CopyFromVec(v33, (uint64_t)&v29);
          v29 = &unk_1E5D29D70;
          v30 = 0;
          LODWORD(v31) = 0;
          v32 = 0;
          v26 = &unk_1E5D29D40;
          v27 = 0u;
          v28 = 0u;
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v26);
          ++v19;
          v20 += v9;
        }
        while (v18 != v19);
      }
      ++v17;
    }
    while (v17 != v24);
  }
  v34 = &unk_1E5D29D40;
  v35 = 0u;
  v36 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v34);
}

void sub_1ADF4E0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _OWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  a25 = &unk_1E5D29D40;
  *a9 = 0u;
  a9[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a25);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::GetCurrentAlignment(uint64_t a1, std::vector<unsigned int> *this)
{
  int v4;
  std::vector<unsigned int>::pointer begin;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v4 = -1431655765 * ((uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 3);
  std::vector<int>::resize(this, v4);
  if (v4 >= 1)
  {
    begin = this->__begin_;
    v6 = v4;
    v7 = (uint64_t *)(*(_QWORD *)(a1 + 264) + 8);
    do
    {
      v8 = *v7;
      v7 += 3;
      *begin++ = *(_DWORD *)(v8 - 4) - *(_DWORD *)(a1 + 408);
      --v6;
    }
    while (v6);
  }
  return 1;
}

uint64_t kaldi::nnet1::MovingAttentionComponent::GetOverallAlignment(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD **v7;
  _DWORD *i;
  uint64_t v9;
  int v10;
  int *v11;
  int **v12;
  unint64_t v13;
  _QWORD *v14;
  int *v15;
  int *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  int *v22;
  int v23;
  uint64_t v25;

  v4 = -1431655765 * ((uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 3);
  std::vector<std::vector<int>>::resize(a2, v4);
  if (v4 >= 1)
  {
    v5 = 0;
    v25 = v4;
    v6 = *(_QWORD *)(a1 + 264);
    do
    {
      v7 = (_DWORD **)(v6 + 24 * v5);
      for (i = *v7; i != v7[1]; ++i)
      {
        v9 = *a2 + 24 * v5;
        v10 = *i - *(_DWORD *)(a1 + 408);
        v12 = (int **)(v9 + 8);
        v11 = *(int **)(v9 + 8);
        v14 = (_QWORD *)(v9 + 16);
        v13 = *(_QWORD *)(v9 + 16);
        if ((unint64_t)v11 >= v13)
        {
          v16 = *(int **)v9;
          v17 = ((uint64_t)v11 - *(_QWORD *)v9) >> 2;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v19 = v13 - (_QWORD)v16;
          if (v19 >> 1 > v18)
            v18 = v19 >> 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v14, v20);
            v11 = *v12;
            v16 = *(int **)v9;
          }
          else
          {
            v21 = 0;
          }
          v22 = (int *)&v21[4 * v17];
          *v22 = v10;
          v15 = v22 + 1;
          while (v11 != v16)
          {
            v23 = *--v11;
            *--v22 = v23;
          }
          *(_QWORD *)v9 = v22;
          *v12 = v15;
          *v14 = &v21[4 * v20];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *v11 = v10;
          v15 = v11 + 1;
        }
        *v12 = v15;
        v6 = *(_QWORD *)(a1 + 264);
        v7 = (_DWORD **)(v6 + 24 * v5);
      }
      ++v5;
    }
    while (v5 != v25);
  }
  return 1;
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SetSourceVectorDimension(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 8) != a2)
  {
    *(_DWORD *)(this + 8) = a2;
    *(_BYTE *)(this + 420) = 0;
  }
  return this;
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SetMaxAttentions(uint64_t this, int a2)
{
  if (*(_DWORD *)(this + 12) != a2)
  {
    *(_DWORD *)(this + 12) = a2;
    *(_BYTE *)(this + 420) = 0;
  }
  return this;
}

void kaldi::nnet1::MovingAttentionComponent::PropagateFnc(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  __int128 v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  void *v52;
  __int128 v53;
  __int128 v54;
  _QWORD v55[4];
  void *v56;
  _OWORD v57[2];
  void *v58;
  _OWORD v59[2];

  kaldi::nnet1::MovingAttentionComponent::Check(a1);
  v6 = *a1;
  v7 = *((unsigned int *)a1 + 11);
  v47 = a3;
  v48 = a2;
  v8 = *(_DWORD *)(a2 + 20);
  v9 = *((_DWORD *)a1 + 2) * *((_DWORD *)a1 + 3);
  a1[13] = *(_QWORD *)(a3 + 32);
  v49 = v8 / (int)v7;
  if (*((_BYTE *)a1 + 417))
    v10 = *(_DWORD *)((char *)a1 + *(_QWORD *)(v6 - 24) + 8);
  else
    v10 = 0;
  kaldi::CuMatrix<float>::Resize((int32x2_t *)a1 + 9, v7, v10 + v9, 1, 0);
  if (v49 >= 1)
  {
    v11 = 0;
    v12 = 0uLL;
    do
    {
      v59[0] = v12;
      v59[1] = v12;
      v58 = &unk_1E5D29D40;
      v13 = v11 * v7;
      v50 = v11;
      v51 = v11 * v7;
      if (*((_BYTE *)a1 + 417))
      {
        v14 = *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
        v15 = *((_DWORD *)a1 + 25) - v9;
        v16 = a1[13];
        *(_QWORD *)&v59[0] = a1[10] + 4 * (int)v9;
        *(_QWORD *)((char *)v59 + 12) = *(uint64_t *)((char *)a1 + 92);
        DWORD2(v59[0]) = v14;
        DWORD1(v59[1]) = v15;
        *((_QWORD *)&v59[1] + 1) = v16;
        v56 = &unk_1E5D29D40;
        v57[0] = v12;
        v57[1] = v12;
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v56);
        v17 = *(_DWORD *)(v48 + 24);
        v18 = *(_QWORD *)(v48 + 8) + 4 * (int)(v17 * v13);
        v19 = *(_DWORD *)(v48 + 28) - v17 * v13;
        v20 = *(_QWORD *)(v48 + 32);
        DWORD2(v57[0]) = *(_DWORD *)(v48 + 16);
        HIDWORD(v57[0]) = v7;
        *(_QWORD *)&v57[1] = __PAIR64__(v19, v17);
        *((_QWORD *)&v57[1] + 1) = v20;
        v56 = &unk_1E5D29D40;
        *(_QWORD *)&v57[0] = v18;
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v58, (uint64_t)&v56, 111);
        v56 = &unk_1E5D29D40;
        memset(v57, 0, sizeof(v57));
      }
      else
      {
        v21 = *(_DWORD *)(v48 + 16);
        v22 = *(_DWORD *)(v48 + 24);
        v23 = *(_DWORD *)(v48 + 28) - v22 * v13;
        v24 = *(_QWORD *)(v48 + 32);
        *(_QWORD *)&v59[0] = *(_QWORD *)(v48 + 8) + 4 * (int)(v22 * v13);
        *((_QWORD *)&v59[0] + 1) = __PAIR64__(v7, v21);
        *(_QWORD *)&v59[1] = __PAIR64__(v23, v22);
        *((_QWORD *)&v59[1] + 1) = v24;
        v56 = &unk_1E5D29D40;
        v57[0] = v12;
        v57[1] = v12;
      }
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v56);
      if ((int)v7 >= 1)
      {
        v25 = 0;
        v26 = 8;
        do
        {
          v27 = *(_DWORD *)(*(_QWORD *)(a1[36] + v26) - 4) - *((_DWORD *)a1 + 102);
          v28 = a1[10];
          v29 = a1[13];
          *((_QWORD *)&v57[0] + 1) = __PAIR64__(*((_DWORD *)a1 + 23), v9);
          *(_QWORD *)&v57[1] = a1[12];
          *((_QWORD *)&v57[1] + 1) = v29;
          v56 = &unk_1E5D29D40;
          *(_QWORD *)&v57[0] = v28;
          v52 = &unk_1E5D29D70;
          *(_QWORD *)&v53 = v28 + 4 * LODWORD(v57[1]) * (int)v25;
          *(_QWORD *)&v54 = v29;
          *((_QWORD *)&v53 + 1) = v9;
          v30 = a1[7];
          v31 = a1[4] + 4 * *((_DWORD *)a1 + 12) * (int)v25 + 4 * *((_DWORD *)a1 + 2) * v27;
          v55[0] = &unk_1E5D29D70;
          v55[1] = v31;
          v55[3] = v30;
          v55[2] = v9;
          kaldi::CuVectorBase<float>::CopyFromVec(&v52, (uint64_t)v55);
          v52 = &unk_1E5D29D70;
          *(_QWORD *)&v53 = 0;
          DWORD2(v53) = 0;
          *(_QWORD *)&v54 = 0;
          v56 = &unk_1E5D29D40;
          memset(v57, 0, sizeof(v57));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v56);
          ++v25;
          v26 += 24;
        }
        while (v7 != v25);
      }
      v46 = (uint64_t)(a1 + 9);
      if (*((_BYTE *)a1 + 419) && *((int *)a1 + 3) >= 1)
      {
        v32 = 0;
        do
        {
          v33 = *((_DWORD *)a1 + 2);
          v34 = a1[10] + 4 * (v33 * v32);
          v35 = *((_DWORD *)a1 + 25) - v33 * v32;
          v36 = a1[13];
          DWORD2(v57[0]) = v33;
          *(_QWORD *)((char *)v57 + 12) = *(uint64_t *)((char *)a1 + 92);
          DWORD1(v57[1]) = v35;
          *((_QWORD *)&v57[1] + 1) = v36;
          v56 = &unk_1E5D29D40;
          *(_QWORD *)&v57[0] = v34;
          kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v56, (uint64_t)&v58);
          v56 = &unk_1E5D29D40;
          memset(v57, 0, sizeof(v57));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v56);
          ++v32;
        }
        while (v32 < *((_DWORD *)a1 + 3));
      }
      v37 = *(_DWORD *)(v47 + 16);
      v38 = *(_DWORD *)(v47 + 24);
      v39 = *(_QWORD *)(v47 + 8) + 4 * (int)(v38 * v51);
      v40 = *(_DWORD *)(v47 + 28) - v38 * v51;
      v41 = *(_QWORD *)(v47 + 32);
      v52 = &unk_1E5D29D40;
      *(_QWORD *)&v53 = v39;
      *((_QWORD *)&v53 + 1) = __PAIR64__(v7, v37);
      *(_QWORD *)&v54 = __PAIR64__(v40, v38);
      *((_QWORD *)&v54 + 1) = v41;
      DWORD2(v57[0]) = *(_DWORD *)(a1[2] + 12);
      HIDWORD(v57[0]) = v7;
      *(_QWORD *)&v57[1] = __PAIR64__(v40, v38);
      *((_QWORD *)&v57[1] + 1) = v41;
      v56 = &unk_1E5D29D40;
      *(_QWORD *)&v57[0] = v39;
      v53 = 0u;
      v54 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v52);
      (*(void (**)(uint64_t, uint64_t, void **, _QWORD))(*(_QWORD *)a1[2] + 112))(a1[2], v46, &v56, 0);
      kaldi::nnet1::MovingAttentionComponent::ComputeAlignments((int32x2_t *)a1, v46, (uint64_t)&v56);
      v56 = &unk_1E5D29D40;
      memset(v57, 0, sizeof(v57));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v56);
      v58 = &unk_1E5D29D40;
      memset(v59, 0, sizeof(v59));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v58);
      v12 = 0uLL;
      v11 = v50 + 1;
    }
    while (v50 + 1 != v49);
  }
  if (*((_BYTE *)a1 + 418))
  {
    v42 = *(int *)(a1[2] + 12);
    v43 = *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
    v44 = *(_QWORD *)(v47 + 8) + 4 * v42;
    LODWORD(v42) = *(_DWORD *)(v47 + 28) - v42;
    v45 = *(_QWORD *)(v47 + 32);
    *(_QWORD *)((char *)v59 + 12) = *(_QWORD *)(v47 + 20);
    DWORD2(v59[0]) = v43;
    DWORD1(v59[1]) = v42;
    *((_QWORD *)&v59[1] + 1) = v45;
    v58 = &unk_1E5D29D40;
    *(_QWORD *)&v59[0] = v44;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v58, v48, 111);
    v58 = &unk_1E5D29D40;
    memset(v59, 0, sizeof(v59));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v58);
  }
}

void sub_1ADF4E874(_Unwind_Exception *a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 128) = v2;
  *v1 = 0u;
  v1[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v3 - 128));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::MovingAttentionComponent::ComputeAlignments(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int *v5;
  char *v8;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  __int32 v15;
  __int32 v16;
  unsigned int *v17;
  int v18;
  int32x2_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  __int32 v27;
  unsigned int *v28;
  int v29;
  int32x2_t v30;
  uint64_t v31;
  unsigned __int32 v32;
  int32x2_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t i;
  int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int **v42;
  unint64_t v43;
  _QWORD *v44;
  unsigned int *v45;
  unsigned int *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  unsigned int *v52;
  unsigned int v53;
  int v54;
  int32x2_t v55;
  __int32 *v56;
  int v57;
  int32x2_t v58;
  uint64_t v59;
  int32x2_t *v60;
  unint64_t v61;
  int32x2_t *v62;
  __int32 v63;
  __int32 v64;
  __int32 v65;
  __int32 **v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  int32x2_t *v74;
  int32x2_t *v75;
  __int32 v76;
  __int32 v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  __int32 *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  int32x2_t *v85;
  char *v86;
  int v87;
  int v88;
  uint64_t v89;
  __int32 v90;
  uint64_t v91;
  __int32 *v92;
  __int32 **v93;
  unint64_t v94;
  _QWORD *v95;
  __int32 *v96;
  __int32 *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  int v104;
  int32x2_t v105;
  void **v106;
  __int32 v107;
  int32x2_t v108;
  __int32 v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  unint64_t v114;
  _QWORD *v115;
  __int32 v116;
  __int32 v117;
  __int32 v118;
  uint64_t v119;
  char *v120;
  unint64_t v121;
  _DWORD *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  char *v133;
  int v134;
  int v135;
  uint64_t v136;
  _QWORD v137[5];
  _QWORD v138[5];
  std::vector<unsigned int> __p;
  __int128 v140;

  v4 = *(unsigned int *)(a2 + 20);
  v5 = (unsigned int *)a1[2];
  v136 = v4;
  if (!v5)
  {
LABEL_91:
    if ((int)v4 < 1)
      return;
    v89 = 0;
    while (1)
    {
      v90 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&a1[36] + 24 * v89 + 8) - 4);
      v91 = *(_QWORD *)&a1[33] + 24 * v89;
      v93 = (__int32 **)(v91 + 8);
      v92 = *(__int32 **)(v91 + 8);
      v95 = (_QWORD *)(v91 + 16);
      v94 = *(_QWORD *)(v91 + 16);
      if ((unint64_t)v92 >= v94)
      {
        v97 = *(__int32 **)v91;
        v98 = ((uint64_t)v92 - *(_QWORD *)v91) >> 2;
        v99 = v98 + 1;
        if ((unint64_t)(v98 + 1) >> 62)
          goto LABEL_152;
        v100 = v94 - (_QWORD)v97;
        if (v100 >> 1 > v99)
          v99 = v100 >> 1;
        if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL)
          v101 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v101 = v99;
        if (v101)
        {
          v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v95, v101);
          v92 = *v93;
          v97 = *(__int32 **)v91;
        }
        else
        {
          v102 = 0;
        }
        v103 = &v102[4 * v98];
        *(_DWORD *)v103 = v90;
        v96 = (__int32 *)(v103 + 4);
        while (v92 != v97)
        {
          v104 = *--v92;
          *((_DWORD *)v103 - 1) = v104;
          v103 -= 4;
        }
        *(_QWORD *)v91 = v103;
        *v93 = v96;
        *v95 = &v102[4 * v101];
        if (v97)
          operator delete(v97);
      }
      else
      {
        *v92 = v90;
        v96 = v92 + 1;
      }
      *v93 = v96;
      v105 = a1[36];
      v106 = (void **)(*(_QWORD *)&v105 + 24 * v89);
      if (a1[52].i8[0])
      {
        v107 = v90 + 1;
        v108 = a1[48];
        v109 = *(_DWORD *)(*(_QWORD *)&v108 + 4 * v89);
        v110 = *(_QWORD *)&v105 + 24 * v89;
        v113 = *(char **)(v110 + 8);
        v112 = v110 + 8;
        v111 = v113;
        v115 = (_QWORD *)(v112 + 8);
        v114 = *(_QWORD *)(v112 + 8);
        if ((unint64_t)v113 >= v114)
        {
          v124 = (char *)*v106;
          v125 = (v111 - (_BYTE *)*v106) >> 2;
          v126 = v125 + 1;
          if ((unint64_t)(v125 + 1) >> 62)
            goto LABEL_152;
          v127 = v114 - (_QWORD)v124;
          if (v127 >> 1 > v126)
            v126 = v127 >> 1;
          if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFFCLL)
            v128 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v128 = v126;
          if (v128)
          {
            v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v112 + 8, v128);
            v111 = *(char **)v112;
            v124 = (char *)*v106;
          }
          else
          {
            v129 = 0;
          }
          if (v109 <= v90)
            v107 = *(_DWORD *)(*(_QWORD *)&v108 + 4 * v89);
          v133 = &v129[4 * v125];
          *(_DWORD *)v133 = v107;
          v122 = v133 + 4;
          while (v111 != v124)
          {
            v134 = *((_DWORD *)v111 - 1);
            v111 -= 4;
            *((_DWORD *)v133 - 1) = v134;
            v133 -= 4;
          }
LABEL_147:
          *v106 = v133;
          *(_QWORD *)v112 = v122;
          *v115 = &v129[4 * v128];
          if (v124)
            operator delete(v124);
          v123 = v136;
          goto LABEL_150;
        }
        if (v109 <= v90)
          v116 = *(_DWORD *)(*(_QWORD *)&v108 + 4 * v89);
        else
          v116 = v90 + 1;
      }
      else
      {
        v117 = v90 - 1;
        v118 = a1[51].i32[0];
        v119 = *(_QWORD *)&v105 + 24 * v89;
        v120 = *(char **)(v119 + 8);
        v112 = v119 + 8;
        v111 = v120;
        v115 = (_QWORD *)(v112 + 8);
        v121 = *(_QWORD *)(v112 + 8);
        if ((unint64_t)v120 >= v121)
        {
          v124 = (char *)*v106;
          v130 = (v111 - (_BYTE *)*v106) >> 2;
          v131 = v130 + 1;
          if ((unint64_t)(v130 + 1) >> 62)
LABEL_152:
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v132 = v121 - (_QWORD)v124;
          if (v132 >> 1 > v131)
            v131 = v132 >> 1;
          if ((unint64_t)v132 >= 0x7FFFFFFFFFFFFFFCLL)
            v128 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v128 = v131;
          if (v128)
          {
            v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v112 + 8, v128);
            v111 = *(char **)v112;
            v124 = (char *)*v106;
          }
          else
          {
            v129 = 0;
          }
          if (v90 <= v118)
            v117 = a1[51].i32[0];
          v133 = &v129[4 * v130];
          *(_DWORD *)v133 = v117;
          v122 = v133 + 4;
          while (v111 != v124)
          {
            v135 = *((_DWORD *)v111 - 1);
            v111 -= 4;
            *((_DWORD *)v133 - 1) = v135;
            v133 -= 4;
          }
          goto LABEL_147;
        }
        if (v90 <= v118)
          v116 = a1[51].i32[0];
        else
          v116 = v90 - 1;
      }
      *(_DWORD *)v111 = v116;
      v122 = v111 + 4;
      v123 = v136;
LABEL_150:
      *(_QWORD *)v112 = v122;
      if (++v89 == v123)
        return;
    }
  }
  if (!v8)
  {
    if (v10)
    {
      v9 = (uint64_t *)(v10 + 112);
      goto LABEL_6;
    }
    goto LABEL_91;
  }
  v9 = (uint64_t *)(v8 + 104);
LABEL_6:
  v11 = *v9;
  kaldi::CuMatrix<float>::Resize(a1 + 27, (v4 + v4 * a1[1].i32[1]), v5[3], 1, 0);
  v12 = a1[1].u32[1];
  if ((int)v12 >= 1)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = a1[1].i32[0];
      v16 = a1[30].i32[0];
      v17 = (unsigned int *)(*(_QWORD *)&a1[28] + 4 * v16 * v13);
      v18 = a1[30].i32[1] - v16 * v13;
      v19 = a1[31];
      LODWORD(__p.__end_cap_.__value_) = a1[29].i32[0];
      HIDWORD(__p.__end_cap_.__value_) = v4;
      *(_QWORD *)&v140 = __PAIR64__(v18, v16);
      *((int32x2_t *)&v140 + 1) = v19;
      __p.__begin_ = (std::vector<unsigned int>::pointer)&unk_1E5D29D40;
      __p.__end_ = v17;
      v20 = *(_QWORD *)(a2 + 8) + 4 * (v15 * v14);
      LODWORD(v17) = *(_DWORD *)(a2 + 28) - v15 * v14;
      v21 = *(_QWORD *)(a2 + 32);
      LODWORD(v138[2]) = v15;
      *(_QWORD *)((char *)&v138[2] + 4) = *(_QWORD *)(a2 + 20);
      HIDWORD(v138[3]) = (_DWORD)v17;
      v138[4] = v21;
      v138[0] = &unk_1E5D29D40;
      v138[1] = v20;
      v22 = *(_QWORD *)(v11 + 8) + 4 * (v15 * v14);
      v23 = *(_DWORD *)(v11 + 28) - v15 * v14;
      v24 = *(_QWORD *)(v11 + 32);
      LODWORD(v137[2]) = v15;
      *(_QWORD *)((char *)&v137[2] + 4) = *(_QWORD *)(v11 + 20);
      HIDWORD(v137[3]) = v23;
      v137[4] = v24;
      v137[0] = &unk_1E5D29D40;
      v137[1] = v22;
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&__p, (uint64_t)v138, CblasNoTrans, (uint64_t)v137, CblasTrans, 1.0, 0.0);
      v137[0] = &unk_1E5D29D40;
      memset(&v137[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v137);
      v138[0] = &unk_1E5D29D40;
      memset(&v138[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v138);
      __p.__begin_ = (std::vector<unsigned int>::pointer)&unk_1E5D29D40;
      *(_OWORD *)&__p.__end_ = 0u;
      v140 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
      ++v14;
      v12 = a1[1].u32[1];
      v13 += v4;
    }
    while (v14 < (int)v12);
  }
  kaldi::CuMatrix<float>::Resize(a1 + 42, v4, v12, 1, 0);
  if ((int)v4 >= 1)
  {
    v25 = 0;
    do
    {
      v26 = a1[1].i32[1] * v4;
      v27 = a1[30].i32[0];
      v28 = (unsigned int *)(*(_QWORD *)&a1[28] + 4 * v27 * v25);
      v29 = a1[30].i32[1] - v27 * v25;
      v30 = a1[31];
      LODWORD(__p.__end_cap_.__value_) = a1[29].i32[0];
      HIDWORD(__p.__end_cap_.__value_) = v26;
      *(_QWORD *)&v140 = __PAIR64__(v29, v27);
      *((int32x2_t *)&v140 + 1) = v30;
      __p.__begin_ = (std::vector<unsigned int>::pointer)&unk_1E5D29D40;
      __p.__end_ = v28;
      if ((_DWORD)v4 != 1)
        kaldi::CuMatrixBase<float>::SetStride((uint64_t)&__p, v27 * v4);
      v31 = *(_QWORD *)&a1[43] + 4 * a1[45].i32[0] * v25;
      v32 = a1[44].u32[0];
      v33 = a1[46];
      v138[0] = &unk_1E5D29D70;
      v138[1] = v31;
      v138[3] = v33;
      v138[2] = v32;
      v34 = *(_QWORD *)(a3 + 8) + 4 * *(_DWORD *)(a3 + 24) * v25;
      v35 = *(_DWORD *)(a3 + 16);
      v36 = *(_QWORD *)(a3 + 32);
      v137[0] = &unk_1E5D29D70;
      v137[1] = v34;
      v137[3] = v36;
      v137[2] = v35;
      kaldi::CuVectorBase<float>::AddMatVec((uint64_t)v138, (uint64_t)&__p, CblasNoTrans, (uint64_t)v137, 1.0, 0.0);
      __p.__begin_ = (std::vector<unsigned int>::pointer)&unk_1E5D29D40;
      *(_OWORD *)&__p.__end_ = 0u;
      v140 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
      ++v25;
    }
    while ((_DWORD)v4 != v25);
  }
  kaldi::CuMatrixBase<float>::FindRowMaxId((uint64_t)&a1[42], (int *)&a1[39]);
  memset(&__p, 0, sizeof(__p));
  kaldi::CuArray<int>::CopyToVec((const void **)&a1[39], &__p);
  if ((int)v4 >= 1)
  {
    for (i = 0; i != v136; ++i)
    {
      v38 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&a1[36] + 24 * i + 8) - 4);
      v39 = *(_QWORD *)&a1[33] + 24 * i;
      v40 = __p.__begin_[i] + v38 - a1[51].i32[0];
      v42 = (unsigned int **)(v39 + 8);
      v41 = *(unsigned int **)(v39 + 8);
      v44 = (_QWORD *)(v39 + 16);
      v43 = *(_QWORD *)(v39 + 16);
      if ((unint64_t)v41 >= v43)
      {
        v46 = *(unsigned int **)v39;
        v47 = ((uint64_t)v41 - *(_QWORD *)v39) >> 2;
        v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v49 = v43 - (_QWORD)v46;
        if (v49 >> 1 > v48)
          v48 = v49 >> 1;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL)
          v50 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (v50)
        {
          v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v44, v50);
          v41 = *v42;
          v46 = *(unsigned int **)v39;
        }
        else
        {
          v51 = 0;
        }
        v52 = (unsigned int *)&v51[4 * v47];
        *v52 = v40;
        v45 = v52 + 1;
        while (v41 != v46)
        {
          v53 = *--v41;
          *--v52 = v53;
        }
        *(_QWORD *)v39 = v52;
        *v42 = v45;
        *v44 = &v51[4 * v50];
        if (v46)
          operator delete(v46);
      }
      else
      {
        *v41 = v40;
        v45 = v41 + 1;
      }
      *v42 = v45;
      if (a1[52].i8[0])
      {
        v54 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&a1[33] + 24 * i + 8) - 4);
        LODWORD(v138[0]) = v54;
        v55 = a1[36];
        if (v54 == v38)
        {
          v56 = *(__int32 **)(*(_QWORD *)&v55 + 24 * i + 8);
          if ((unint64_t)v56 - *(_QWORD *)(*(_QWORD *)&v55 + 24 * i) >= 5 && *(v56 - 2) == v38)
            LODWORD(v138[0]) = ++v38;
        }
        else
        {
          v56 = *(__int32 **)(*(_QWORD *)&v55 + 24 * i + 8);
          v38 = v54;
        }
        v59 = *(_QWORD *)&v55 + 24 * i;
        if (*(_DWORD *)(*(_QWORD *)&a1[48] + 4 * i) >= v38)
          v62 = (int32x2_t *)v138;
        else
          v62 = (int32x2_t *)(*(_QWORD *)&a1[48] + 4 * i);
        v63 = v62->i32[0];
        v64 = a1[51].i32[0];
        if (v62->i32[0] <= v64)
          v65 = a1[51].i32[0];
        else
          v65 = v62->i32[0];
        v66 = (__int32 **)(v59 + 8);
        v68 = (_QWORD *)(v59 + 16);
        v67 = *(_QWORD *)(v59 + 16);
        if ((unint64_t)v56 >= v67)
        {
          v60 = *(int32x2_t **)v59;
          v69 = ((uint64_t)v56 - *(_QWORD *)v59) >> 2;
          v70 = v69 + 1;
          if ((unint64_t)(v69 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v71 = v67 - (_QWORD)v60;
          if (v71 >> 1 > v70)
            v70 = v71 >> 1;
          if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
            v72 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v72 = v70;
          if (v72)
          {
            v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v59 + 16, v72);
            v56 = *v66;
            v60 = *(int32x2_t **)v59;
            v74 = a1 + 51;
            if (v63 >= v64)
              v74 = v62;
            v65 = v74->i32[0];
          }
          else
          {
            v73 = 0;
          }
          v86 = &v73[4 * v69];
          *(_DWORD *)v86 = v65;
          v81 = (__int32 *)(v86 + 4);
          while (v56 != (__int32 *)v60)
          {
            v87 = *--v56;
            *((_DWORD *)v86 - 1) = v87;
            v86 -= 4;
          }
LABEL_86:
          *(_QWORD *)v59 = v86;
          *v66 = v81;
          *v68 = &v73[4 * v72];
          if (v60)
            operator delete(v60);
          goto LABEL_88;
        }
      }
      else
      {
        v57 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&a1[33] + 24 * i + 8) - 4);
        LODWORD(v138[0]) = v57;
        v58 = a1[36];
        v59 = *(_QWORD *)&v58 + 24 * i;
        if (v57 == v38)
        {
          v56 = *(__int32 **)(*(_QWORD *)&v58 + 24 * i + 8);
          v60 = *(int32x2_t **)v59;
          v61 = (unint64_t)v56 - *(_QWORD *)v59;
          if (v61 >= 5 && *(__int32 *)((char *)v60[-1].i32 + v61) == v38)
            LODWORD(v138[0]) = --v38;
        }
        else
        {
          v60 = *(int32x2_t **)v59;
          v56 = *(__int32 **)(*(_QWORD *)&v58 + 24 * i + 8);
          v38 = v57;
        }
        if (v60->i32[0] >= v38)
          v75 = (int32x2_t *)v138;
        else
          v75 = v60;
        v76 = v75->i32[0];
        v77 = a1[51].i32[0];
        if (v75->i32[0] <= v77)
          v65 = a1[51].i32[0];
        else
          v65 = v75->i32[0];
        v78 = *(_QWORD *)&v58 + 24 * i;
        v80 = *(_QWORD *)(v78 + 16);
        v68 = (_QWORD *)(v78 + 16);
        v79 = v80;
        v66 = (__int32 **)(v68 - 1);
        if ((unint64_t)v56 >= v80)
        {
          v82 = ((char *)v56 - (char *)v60) >> 2;
          v83 = v82 + 1;
          if ((unint64_t)(v82 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v84 = v79 - (_QWORD)v60;
          if (v84 >> 1 > v83)
            v83 = v84 >> 1;
          if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFFCLL)
            v72 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v72 = v83;
          if (v72)
          {
            v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v68, v72);
            v56 = *v66;
            v60 = *(int32x2_t **)v59;
            v85 = a1 + 51;
            if (v76 >= v77)
              v85 = v75;
            v65 = v85->i32[0];
          }
          else
          {
            v73 = 0;
          }
          v86 = &v73[4 * v82];
          *(_DWORD *)v86 = v65;
          v81 = (__int32 *)(v86 + 4);
          while (v56 != (__int32 *)v60)
          {
            v88 = *--v56;
            *((_DWORD *)v86 - 1) = v88;
            v86 -= 4;
          }
          goto LABEL_86;
        }
      }
      *v56 = v65;
      v81 = v56 + 1;
LABEL_88:
      *v66 = v81;
    }
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_1ADF4F29C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::PropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  kaldi::nnet1::MovingAttentionComponent::PropagateFnc((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 128)), a2, a3);
}

void kaldi::nnet1::MovingAttentionComponent::BackpropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  _DWORD *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t i;
  unsigned int v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  __int128 v73;
  __int128 v74;
  void *v75;
  __int128 v76;
  __int128 v77;
  void *v78;
  _QWORD v79[4];
  void *v80;
  __int128 v81;
  __int128 v82;
  void *v83;
  _QWORD v84[4];

  kaldi::nnet1::MovingAttentionComponent::Check(a1);
  v64 = a2;
  v8 = *(_DWORD *)(a2 + 20);
  v9 = *((_DWORD *)a1 + 2);
  v10 = *((_DWORD *)a1 + 3);
  v66 = a5;
  v11 = *(_QWORD *)(a5 + 32);
  a1[19] = v11;
  a1[25] = v11;
  v12 = *((unsigned int *)a1 + 11);
  v13 = (v8 / (int)v12);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)a1 + 15, v12, *((unsigned int *)a1 + 10), 0, 0);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)a1 + 21, v12, *(unsigned int *)(a1[2] + 8), 0, 0);
  if ((int)v13 >= 1)
  {
    v14 = 0;
    v15 = v9 * v10;
    v63 = v9 * v10;
    do
    {
      v16 = *(_DWORD *)(v64 + 24);
      v17 = *(_QWORD *)(v64 + 8) + 4 * (int)(v16 * v14 * v12);
      v18 = *(_DWORD *)(v64 + 28) - v16 * v14 * v12;
      v19 = *(_QWORD *)(v64 + 32);
      LODWORD(v84[1]) = *(_DWORD *)(v64 + 16);
      HIDWORD(v84[1]) = v12;
      v84[2] = __PAIR64__(v18, v16);
      v84[3] = v19;
      v83 = &unk_1E5D29D40;
      v84[0] = v17;
      v20 = (_DWORD *)a1[2];
      v21 = *(_DWORD *)(a3 + 24);
      v22 = *(_QWORD *)(a3 + 8) + 4 * (int)(v21 * v14 * v12);
      v23 = *(_DWORD *)(a3 + 28) - v21 * v14 * v12;
      v24 = *(_QWORD *)(a3 + 32);
      LODWORD(v79[1]) = *(_DWORD *)(a3 + 16);
      HIDWORD(v79[1]) = v12;
      v79[2] = __PAIR64__(v23, v21);
      v79[3] = v24;
      v80 = &unk_1E5D29D40;
      v78 = &unk_1E5D29D40;
      v79[0] = v22;
      DWORD2(v81) = v20[3];
      HIDWORD(v81) = v12;
      *(_QWORD *)&v82 = __PAIR64__(v23, v21);
      *((_QWORD *)&v82 + 1) = v24;
      *(_QWORD *)&v81 = v22;
      v25 = *(_DWORD *)(a4 + 24);
      v26 = *(_QWORD *)(a4 + 8) + 4 * (int)(v25 * v14 * v12);
      LODWORD(v24) = *(_DWORD *)(a4 + 28) - v25 * v14 * v12;
      v27 = *(_QWORD *)(a4 + 32);
      DWORD2(v73) = *(_DWORD *)(a4 + 16);
      HIDWORD(v73) = v12;
      *(_QWORD *)&v74 = __PAIR64__(v24, v25);
      *((_QWORD *)&v74 + 1) = v27;
      v75 = &unk_1E5D29D40;
      v72 = &unk_1E5D29D40;
      *(_QWORD *)&v73 = v26;
      *((_QWORD *)&v76 + 1) = __PAIR64__(v12, DWORD2(v81));
      *(_QWORD *)&v77 = __PAIR64__(v24, v25);
      *((_QWORD *)&v77 + 1) = v27;
      *(_QWORD *)&v76 = v26;
      (*(void (**)(_DWORD *, void **, void **, void **, _QWORD *, _QWORD))(*(_QWORD *)v20 + 128))(v20, &v83, &v80, &v75, a1 + 21, 0);
      v75 = &unk_1E5D29D40;
      v76 = 0u;
      v77 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v75);
      v72 = &unk_1E5D29D40;
      v73 = 0u;
      v74 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v72);
      v80 = &unk_1E5D29D40;
      v81 = 0u;
      v82 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v80);
      v78 = &unk_1E5D29D40;
      memset(v79, 0, sizeof(v79));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v78);
      v28 = *(_DWORD *)(v66 + 24);
      v29 = *(_QWORD *)(v66 + 8) + 4 * (int)(v28 * v14 * v12);
      v30 = *(_DWORD *)(v66 + 28) - v28 * v14 * v12;
      v31 = *(_QWORD *)(v66 + 32);
      DWORD2(v81) = *(_DWORD *)(v66 + 16);
      HIDWORD(v81) = v12;
      *(_QWORD *)&v82 = __PAIR64__(v30, v28);
      *((_QWORD *)&v82 + 1) = v31;
      v80 = &unk_1E5D29D40;
      *(_QWORD *)&v81 = v29;
      if (*((_BYTE *)a1 + 419) && (int)v12 >= 1)
      {
        v32 = 0;
        v33 = *((_DWORD *)a1 + 3);
        do
        {
          if (v33 >= 1)
          {
            v34 = 0;
            v35 = (*(_DWORD *)(*(_QWORD *)(a1[36] + 24 * v32) + 4 * v14) - *((_DWORD *)a1 + 102)) * *((_DWORD *)a1 + 2);
            do
            {
              v78 = &unk_1E5D29D70;
              v79[0] = v81 + 4 * (int)v82 * (int)v32;
              v79[2] = *((_QWORD *)&v82 + 1);
              v79[1] = DWORD2(v81);
              v36 = a1[7];
              v37 = *((_DWORD *)a1 + 2);
              v38 = a1[4] + 4 * *((_DWORD *)a1 + 12) * (int)v32 + 4 * (int)(v37 * v34 + v35);
              v75 = &unk_1E5D29D70;
              *(_QWORD *)&v76 = v38;
              *(_QWORD *)&v77 = v36;
              *((_QWORD *)&v76 + 1) = v37;
              v39 = a1[25];
              v40 = a1[22] + 4 * *((_DWORD *)a1 + 48) * (int)v32 + 4 * (int)(v37 * v34);
              v72 = &unk_1E5D29D70;
              *(_QWORD *)&v73 = v40;
              *(_QWORD *)&v74 = v39;
              *((_QWORD *)&v73 + 1) = v37;
              kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v78, (uint64_t)&v75, (uint64_t)&v72, 1.0, 1.0);
              ++v34;
              v33 = *((_DWORD *)a1 + 3);
            }
            while (v34 < v33);
          }
          ++v32;
        }
        while (v32 != v12);
      }
      if (*((_BYTE *)a1 + 417))
      {
        v41 = *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
        v42 = a1[22] + 4 * v63;
        v43 = *((_DWORD *)a1 + 49) - v15;
        v44 = a1[25];
        *(_QWORD *)((char *)&v79[1] + 4) = *(_QWORD *)((char *)a1 + 188);
        LODWORD(v79[1]) = v41;
        HIDWORD(v79[2]) = v43;
        v79[3] = v44;
        v78 = &unk_1E5D29D40;
        v79[0] = v42;
        kaldi::CuMatrixBase<float>::AddMat((uint64_t)&v80, (uint64_t)&v78, 111, 1.0, 1.0);
        v78 = &unk_1E5D29D40;
        memset(v79, 0, sizeof(v79));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v78);
      }
      if ((int)v12 >= 1)
      {
        for (i = 0; i != v12; ++i)
        {
          v46 = (*(_DWORD *)(*(_QWORD *)(a1[36] + 24 * i) + 4 * v14) - *((_DWORD *)a1 + 102)) * *((_DWORD *)a1 + 2);
          if (*((_BYTE *)a1 + 419))
          {
            if (*((int *)a1 + 3) >= 1)
            {
              v47 = 0;
              do
              {
                v48 = a1[19];
                v49 = *((_DWORD *)a1 + 2);
                v50 = a1[16] + 4 * *((_DWORD *)a1 + 36) * (int)i + 4 * (int)(v49 * v47 + v46);
                v78 = &unk_1E5D29D70;
                v79[0] = v50;
                v79[2] = v48;
                v79[1] = v49;
                v75 = &unk_1E5D29D70;
                *(_QWORD *)&v76 = v84[0] + 4 * LODWORD(v84[2]) * (int)i;
                *(_QWORD *)&v77 = v84[3];
                *((_QWORD *)&v76 + 1) = LODWORD(v84[1]);
                v51 = a1[25];
                v52 = a1[22] + 4 * *((_DWORD *)a1 + 48) * (int)i + 4 * (int)(v49 * v47);
                v72 = &unk_1E5D29D70;
                *(_QWORD *)&v73 = v52;
                *(_QWORD *)&v74 = v51;
                *((_QWORD *)&v73 + 1) = v49;
                kaldi::CuVectorBase<float>::AddVecVec((uint64_t)&v78, (uint64_t)&v75, (uint64_t)&v72, 1.0, 1.0);
                ++v47;
              }
              while (v47 < *((_DWORD *)a1 + 3));
            }
          }
          else
          {
            v53 = *((_DWORD *)a1 + 36);
            v54 = a1[16] + 4 * v46;
            v55 = *((_DWORD *)a1 + 37) - v46;
            v56 = a1[19];
            v79[1] = __PAIR64__(*((_DWORD *)a1 + 35), v15);
            v79[2] = __PAIR64__(v55, v53);
            v79[3] = v56;
            v78 = &unk_1E5D29D40;
            v79[0] = v54;
            v72 = &unk_1E5D29D70;
            *(_QWORD *)&v73 = v54 + 4 * (int)(v53 * i);
            *(_QWORD *)&v74 = v56;
            *((_QWORD *)&v73 + 1) = v15;
            v57 = a1[22];
            v58 = a1[25];
            *((_QWORD *)&v76 + 1) = __PAIR64__(*((_DWORD *)a1 + 47), v15);
            *(_QWORD *)&v77 = a1[24];
            *((_QWORD *)&v77 + 1) = v58;
            v75 = &unk_1E5D29D40;
            *(_QWORD *)&v76 = v57;
            v68 = &unk_1E5D29D70;
            v69 = v57 + 4 * (int)v77 * (int)i;
            v71 = v58;
            v70 = v15;
            kaldi::CuVectorBase<float>::AddVec((uint64_t)&v72, (uint64_t)&v68, 1.0, 1.0);
            v68 = &unk_1E5D29D70;
            v69 = 0;
            LODWORD(v70) = 0;
            v71 = 0;
            v75 = &unk_1E5D29D40;
            v76 = 0u;
            v77 = 0u;
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v75);
            v72 = &unk_1E5D29D70;
            *(_QWORD *)&v73 = 0;
            DWORD2(v73) = 0;
            *(_QWORD *)&v74 = 0;
            v78 = &unk_1E5D29D40;
            memset(v79, 0, sizeof(v79));
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v78);
          }
        }
      }
      v80 = &unk_1E5D29D40;
      v81 = 0u;
      v82 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v80);
      v83 = &unk_1E5D29D40;
      memset(v84, 0, sizeof(v84));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v83);
      ++v14;
    }
    while (v14 != v13);
  }
  if (*((_BYTE *)a1 + 418))
  {
    v59 = *(int *)(a1[2] + 12);
    v60 = *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
    v61 = *(_QWORD *)(a4 + 8) + 4 * v59;
    LODWORD(v59) = *(_DWORD *)(a4 + 28) - v59;
    v62 = *(_QWORD *)(a4 + 32);
    *(_QWORD *)((char *)&v84[1] + 4) = *(_QWORD *)(a4 + 20);
    LODWORD(v84[1]) = v60;
    HIDWORD(v84[2]) = v59;
    v84[3] = v62;
    v83 = &unk_1E5D29D40;
    v84[0] = v61;
    kaldi::CuMatrixBase<float>::AddMat(v66, (uint64_t)&v83, 111, 1.0, 1.0);
    v83 = &unk_1E5D29D40;
    memset(v84, 0, sizeof(v84));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v83);
  }
}

void sub_1ADF4FA24(_Unwind_Exception *a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 - 128) = v2;
  *v1 = 0u;
  v1[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v3 - 128));
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::BackpropagateFnc(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  kaldi::nnet1::MovingAttentionComponent::BackpropagateFnc((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 144)), a2, a3, a4, a5);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::SetGradientNormalization(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 240))(*(_QWORD *)(a1 + 16));
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::SetGradientNormalization(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 256) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 240))(v1);
}

void kaldi::nnet1::MovingAttentionComponent::AccumGradients(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  float v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t i;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  _DWORD *v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  int32x2_t *v53;
  void *v54;
  __int128 v55;
  __int128 v56;
  _QWORD v57[4];
  void *v58;
  _OWORD v59[2];
  _QWORD v60[5];
  void (**v61)(kaldi::nnet1::NnetTrainOptions *__hidden);
  float v62[10];

  kaldi::nnet1::MovingAttentionComponent::Check(a1);
  v7 = *a1;
  v8 = *((unsigned int *)a1 + 11);
  v9 = *(_DWORD *)(a2 + 20);
  v10 = *((_DWORD *)a1 + 2) * *((_DWORD *)a1 + 3);
  v52 = a2;
  v53 = (int32x2_t *)(a1 + 9);
  a1[13] = a4;
  v11 = (v9 / (int)v8);
  if (*((_BYTE *)a1 + 417))
    v12 = *(_DWORD *)((char *)a1 + *(_QWORD *)(v7 - 24) + 8);
  else
    v12 = 0;
  kaldi::CuMatrix<float>::Resize(v53, v8, v12 + v10, 1, 0);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[2] + 272))(a1[2]);
  v61 = &off_1E5D2D150;
  v14 = *(_OWORD *)(v13 + 23);
  *(_OWORD *)v62 = *(_OWORD *)(v13 + 8);
  *(_OWORD *)((char *)&v62[3] + 3) = v14;
  v15 = v62[0];
  v62[0] = v62[0] / (float)(int)v11;
  (*(void (**)(uint64_t, void (***)(kaldi::nnet1::NnetTrainOptions *__hidden)))(*(_QWORD *)a1[2] + 264))(a1[2], &v61);
  v50 = v11;
  if ((int)v11 >= 1)
  {
    v16 = 0;
    v17 = 0uLL;
    v49 = a4;
    do
    {
      *(_OWORD *)&v60[1] = v17;
      *(_OWORD *)&v60[3] = v17;
      v60[0] = &unk_1E5D29D40;
      if (*((_BYTE *)a1 + 417))
      {
        v18 = *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
        v19 = *((_DWORD *)a1 + 25) - v10;
        v20 = a1[13];
        v60[1] = a1[10] + 4 * (int)v10;
        *(_QWORD *)((char *)&v60[2] + 4) = *(uint64_t *)((char *)a1 + 92);
        LODWORD(v60[2]) = v18;
        HIDWORD(v60[3]) = v19;
        v60[4] = v20;
        v58 = &unk_1E5D29D40;
        v59[0] = v17;
        v59[1] = v17;
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v58);
        v21 = *(_DWORD *)(v52 + 24);
        v22 = v21 * v8 * v16;
        v23 = *(_QWORD *)(v52 + 8) + 4 * v22;
        v24 = *(_DWORD *)(v52 + 28) - v22;
        v25 = *(_QWORD *)(v52 + 32);
        DWORD2(v59[0]) = *(_DWORD *)(v52 + 16);
        HIDWORD(v59[0]) = v8;
        *(_QWORD *)&v59[1] = __PAIR64__(v24, v21);
        *((_QWORD *)&v59[1] + 1) = v25;
        v58 = &unk_1E5D29D40;
        *(_QWORD *)&v59[0] = v23;
        kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v60, (uint64_t)&v58, 111);
        v58 = &unk_1E5D29D40;
        memset(v59, 0, sizeof(v59));
      }
      else
      {
        v26 = *(_DWORD *)(v52 + 16);
        v27 = *(_DWORD *)(v52 + 24);
        v28 = v27 * v8 * v16;
        v29 = *(_QWORD *)(v52 + 8) + 4 * v28;
        v30 = *(_DWORD *)(v52 + 28) - v28;
        v31 = *(_QWORD *)(v52 + 32);
        v60[1] = v29;
        v60[2] = __PAIR64__(v8, v26);
        v60[3] = __PAIR64__(v30, v27);
        v60[4] = v31;
        v58 = &unk_1E5D29D40;
        v59[0] = v17;
        v59[1] = v17;
      }
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v58);
      if ((int)v8 >= 1)
      {
        for (i = 0; i != v8; ++i)
        {
          v33 = *(_DWORD *)(*(_QWORD *)(a1[36] + 24 * i) + 4 * v16) - *((_DWORD *)a1 + 102);
          v34 = a1[10];
          v35 = a1[13];
          *((_QWORD *)&v59[0] + 1) = __PAIR64__(*((_DWORD *)a1 + 23), v10);
          *(_QWORD *)&v59[1] = a1[12];
          *((_QWORD *)&v59[1] + 1) = v35;
          v58 = &unk_1E5D29D40;
          *(_QWORD *)&v59[0] = v34;
          v54 = &unk_1E5D29D70;
          *(_QWORD *)&v55 = v34 + 4 * LODWORD(v59[1]) * (int)i;
          *(_QWORD *)&v56 = v35;
          *((_QWORD *)&v55 + 1) = v10;
          v36 = a1[7];
          v37 = a1[4] + 4 * *((_DWORD *)a1 + 12) * (int)i + 4 * *((_DWORD *)a1 + 2) * v33;
          v57[0] = &unk_1E5D29D70;
          v57[1] = v37;
          v57[3] = v36;
          v57[2] = v10;
          kaldi::CuVectorBase<float>::CopyFromVec(&v54, (uint64_t)v57);
          v54 = &unk_1E5D29D70;
          *(_QWORD *)&v55 = 0;
          DWORD2(v55) = 0;
          *(_QWORD *)&v56 = 0;
          v58 = &unk_1E5D29D40;
          memset(v59, 0, sizeof(v59));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v58);
        }
      }
      if (*((_BYTE *)a1 + 419) && *((int *)a1 + 3) >= 1)
      {
        v38 = 0;
        do
        {
          v39 = *((_DWORD *)a1 + 2);
          v40 = a1[10] + 4 * (v39 * v38);
          v41 = *((_DWORD *)a1 + 25) - v39 * v38;
          v42 = a1[13];
          DWORD2(v59[0]) = v39;
          *(_QWORD *)((char *)v59 + 12) = *(uint64_t *)((char *)a1 + 92);
          DWORD1(v59[1]) = v41;
          *((_QWORD *)&v59[1] + 1) = v42;
          v58 = &unk_1E5D29D40;
          *(_QWORD *)&v59[0] = v40;
          kaldi::CuMatrixBase<float>::MulElements((uint64_t)&v58, (uint64_t)v60);
          v58 = &unk_1E5D29D40;
          memset(v59, 0, sizeof(v59));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v58);
          ++v38;
        }
        while (v38 < *((_DWORD *)a1 + 3));
      }
      v43 = (_DWORD *)a1[2];
      v44 = *(_DWORD *)(a3 + 24);
      v45 = v44 * v8 * v16;
      v46 = *(_QWORD *)(a3 + 8) + 4 * v45;
      v47 = *(_DWORD *)(a3 + 28) - v45;
      v48 = *(_QWORD *)(a3 + 32);
      DWORD2(v55) = *(_DWORD *)(a3 + 16);
      HIDWORD(v55) = v8;
      *(_QWORD *)&v56 = __PAIR64__(v47, v44);
      *((_QWORD *)&v56 + 1) = v48;
      v54 = &unk_1E5D29D40;
      *(_QWORD *)&v55 = v46;
      DWORD2(v59[0]) = v43[3];
      HIDWORD(v59[0]) = v8;
      *(_QWORD *)&v59[1] = __PAIR64__(v47, v44);
      *((_QWORD *)&v59[1] + 1) = v48;
      v58 = &unk_1E5D29D40;
      *(_QWORD *)&v59[0] = v46;
      (*(void (**)(_DWORD *, int32x2_t *, void **, uint64_t, _QWORD))(*(_QWORD *)v43 + 232))(v43, v53, &v58, v49, 0);
      v58 = &unk_1E5D29D40;
      memset(v59, 0, sizeof(v59));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v58);
      v54 = &unk_1E5D29D40;
      v55 = 0u;
      v56 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v54);
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1[2] + 256))(a1[2], v49, 0);
      v60[0] = &unk_1E5D29D40;
      memset(&v60[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v60);
      ++v16;
      v17 = 0uLL;
    }
    while (v16 != v50);
  }
  v62[0] = v15;
  (*(void (**)(uint64_t, void (***)(kaldi::nnet1::NnetTrainOptions *__hidden)))(*(_QWORD *)a1[2] + 264))(a1[2], &v61);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)&v61);
}

void sub_1ADF50054(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)(v1 - 144));
  _Unwind_Resume(a1);
}

void `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::AccumGradients(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  kaldi::nnet1::MovingAttentionComponent::AccumGradients((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 248)), a2, a3, a4);
}

uint64_t kaldi::nnet1::MovingAttentionComponent::GetGradient(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 224))(*(_QWORD *)(a1 + 16));
}

uint64_t `virtual thunk to'kaldi::nnet1::MovingAttentionComponent::GetGradient(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 240) + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 224))(v1);
}

quasar::MappedPgmBitmap *quasar::MappedPgmBitmap::MappedPgmBitmap(quasar::MappedPgmBitmap *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  std::ios_base *v9;

  *(_QWORD *)this = &off_1E5D35958;
  *((_QWORD *)this + 1) = -1;
  *((_WORD *)this + 8) = -1;
  *((_QWORD *)this + 3) = -1;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *((_QWORD *)this + 4) = v2;
  v4 = (_QWORD *)((char *)this + 32);
  v5 = (uint64_t *)((char *)this + 456);
  v6 = MEMORY[0x1E0DE4FA8];
  v7 = MEMORY[0x1E0DE4FA8] + 64;
  *((_QWORD *)this + 57) = MEMORY[0x1E0DE4FA8] + 64;
  v8 = (char *)this + 48;
  *(_QWORD *)((char *)this + *(_QWORD *)(v2 - 24) + 32) = v3;
  *((_QWORD *)this + 5) = 0;
  v9 = (std::ios_base *)((char *)this + *(_QWORD *)(*((_QWORD *)this + 4) - 24) + 32);
  std::ios_base::init(v9, (char *)this + 48);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  *v4 = v6 + 24;
  *v5 = v7;
  MEMORY[0x1AF44CA64](v8);
  *((_OWORD *)this + 38) = 0u;
  return this;
}

void sub_1ADF50214(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  uint64_t v2;

  std::istream::~istream();
  MEMORY[0x1AF44D094](v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::MappedPgmBitmap::getWidth(quasar::MappedPgmBitmap *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t quasar::MappedPgmBitmap::getHeight(quasar::MappedPgmBitmap *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t quasar::MappedPgmBitmap::getColorAt(quasar::MappedPgmBitmap *this, int a2, int a3)
{
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  quasar::Bitmap::CoordinatesOutOfRange *exception;
  _OWORD v11[17];

  if (a2 < 0 || a3 < 0 || (v3 = *((_DWORD *)this + 2), v3 <= a2) || (v4 = *((_DWORD *)this + 3), v4 <= a3))
  {
    exception = (quasar::Bitmap::CoordinatesOutOfRange *)__cxa_allocate_exception(0x10uLL);
    quasar::Bitmap::CoordinatesOutOfRange::CoordinatesOutOfRange(exception, a2, a3);
  }
  v5 = a2 + (v4 + ~a3) * v3;
  v6 = *((_QWORD *)this + 3);
  if (v6 == 2)
    return *(unsigned __int16 *)(*((_QWORD *)this + 78) + 2 * v5);
  if (v6 != 1)
  {
    memset(v11, 0, sizeof(v11));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Internal error, unexpected pixel size ", 38);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v11);
  }
  return *(unsigned __int8 *)(*((_QWORD *)this + 78) + v5);
}

void sub_1ADF50370(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void quasar::MappedPgmBitmap::load(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  fst::MappedFile *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *__p[2];
  char v32;
  int v33;
  __int16 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v4 = a1 + 32;
  std::ifstream::open();
  if (*(_DWORD *)(v4 + *(_QWORD *)(*(_QWORD *)(a1 + 32) - 24) + 32))
  {
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v35);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Cannot open bitmap file ", 24);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, a2);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v35);
  }
  std::istream::read();
  v32 = 2;
  LOWORD(__p[0]) = v34;
  BYTE2(__p[0]) = 0;
  if (v34 != 13648)
  {
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v35);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Unexpected magic ", 17);
    *(_DWORD *)((char *)v23 + *(_QWORD *)(*v23 - 24) + 8) = *(_DWORD *)((_BYTE *)v23 + *(_QWORD *)(*v23 - 24) + 8) & 0xFFFFFFB5 | 8;
    v24 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" ", 1);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v35);
  }
  MEMORY[0x1AF44CB18](v4, a1 + 8);
  if (*(int *)(a1 + 8) <= 0)
  {
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Bitmap width must be positive but was ", 38);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v35);
  }
  MEMORY[0x1AF44CB18](v4, a1 + 12);
  if (*(int *)(a1 + 12) <= 0)
  {
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Bitmap height must be positive but was ", 39);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v35);
  }
  MEMORY[0x1AF44CB3C](v4, a1 + 16);
  v5 = 1;
  if (*(unsigned __int16 *)(a1 + 16) >= 0x100u)
    v5 = 2;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = std::istream::get();
  if (v6 <= 0x7F)
    v7 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v6 + 60) & 0x4000;
  else
    v7 = __maskrune(v6, 0x4000uLL);
  if (!v7)
  {
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v35);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v35, "Whitespace expected before binary data");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v35);
  }
  fst::FstReadOptions::FstReadOptions(__p, a2, 0, 0, 0);
  v33 = 2;
  std::istream::tellg();
  v8 = v43;
  std::istream::seekg();
  std::istream::tellg();
  v9 = v43;
  if (v8 + *(_QWORD *)(a1 + 24) * *(int *)(a1 + 12) * (uint64_t)*(int *)(a1 + 8) != (_QWORD)v43)
  {
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"PGM header suggests different file size than actual size, expected=", 67);
    v25 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" actual=", 8);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v35);
  }
  std::istream::seekg();
  v10 = fst::MappedFile::Map(v4, (uint64_t)__p, v9);
  std::shared_ptr<fst::MappedFile>::shared_ptr[abi:ne180100]<fst::MappedFile,void>(&v35, (uint64_t)v10);
  v11 = a1 + 608;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 608, &v35);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v35 + 1);
  if (*((_QWORD *)&v35 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v35 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (!*(_QWORD *)v11)
  {
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v35);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Could not map file ", 19);
    v27 = *(char *)(a2 + 23);
    if (v27 >= 0)
      v28 = a2;
    else
      v28 = *(_QWORD *)a2;
    if (v27 >= 0)
      v29 = *(unsigned __int8 *)(a2 + 23);
    else
      v29 = *(_QWORD *)(a2 + 8);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" into memory", 12);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v35);
  }
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(*(_QWORD *)v11 + 8) + v8;
  if (quasar::gLogLevel >= 4)
  {
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v35);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Mapped a PGM bitmap fileName=", 29);
    v16 = *(char *)(a2 + 23);
    if (v16 >= 0)
      v17 = a2;
    else
      v17 = *(_QWORD *)a2;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" width=", 7);
    v20 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" height=", 8);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" maxGreyValue=", 14);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v35);
  }
  if (v32 < 0)
    operator delete(__p[0]);
}

void sub_1ADF5099C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::MappedPgmBitmap::loadFromFile(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  quasar::MappedPgmBitmap *v4;

  v4 = (quasar::MappedPgmBitmap *)operator new();
  quasar::MappedPgmBitmap::MappedPgmBitmap(v4);
  std::shared_ptr<quasar::MappedPgmBitmap>::shared_ptr[abi:ne180100]<quasar::MappedPgmBitmap,void>(a2, (uint64_t)v4);
  quasar::MappedPgmBitmap::load(*a2, a1);
}

void sub_1ADF50A5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void quasar::MappedPgmBitmap::~MappedPgmBitmap(quasar::MappedPgmBitmap *this)
{
  quasar::MappedPgmBitmap::~MappedPgmBitmap(this);
  JUMPOUT(0x1AF44D190);
}

{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E5D35958;
  v2 = (char *)this + 48;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 608);
  v3 = MEMORY[0x1E0DE4F40];
  v4 = *MEMORY[0x1E0DE4F40];
  *((_QWORD *)this + 4) = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24) + 32) = *(_QWORD *)(v3 + 24);
  MEMORY[0x1AF44CA70](v2);
  std::istream::~istream();
  MEMORY[0x1AF44D094]((char *)this + 456);
  quasar::Bitmap::~Bitmap(this);
}

_QWORD *std::shared_ptr<quasar::MappedPgmBitmap>::shared_ptr[abi:ne180100]<quasar::MappedPgmBitmap,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5D46150;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1ADF50B8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<quasar::MappedPgmBitmap *,std::shared_ptr<quasar::MappedPgmBitmap>::__shared_ptr_default_delete<quasar::MappedPgmBitmap,quasar::MappedPgmBitmap>,std::allocator<quasar::MappedPgmBitmap>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::MappedPgmBitmap *,std::shared_ptr<quasar::MappedPgmBitmap>::__shared_ptr_default_delete<quasar::MappedPgmBitmap,quasar::MappedPgmBitmap>,std::allocator<quasar::MappedPgmBitmap>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::MappedPgmBitmap *,std::shared_ptr<quasar::MappedPgmBitmap>::__shared_ptr_default_delete<quasar::MappedPgmBitmap,quasar::MappedPgmBitmap>,std::allocator<quasar::MappedPgmBitmap>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void quasar::LDLoggingInfo::addDoubleValue(quasar *a1, uint64_t a2, double a3)
{
  int Type;
  std::string v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  Type = quasar::getType(a1, *(float *)&a3);
  std::to_string(&v7, a3);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 1;
  quasar::PTree::putChild((uint64_t)a1, a2, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
}

void sub_1ADF50CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::PTree::~PTree((quasar::PTree *)&a9);
  _Unwind_Resume(a1);
}

void quasar::LDLoggingInfo::addIntValue(uint64_t a1, uint64_t a2, quasar *this)
{
  int v3;
  int Type;
  std::string v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v3 = (int)this;
  Type = quasar::getType(this);
  std::to_string(&v7, v3);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 1;
  quasar::PTree::putChild(a1, a2, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
}

void sub_1ADF50D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::PTree::~PTree((quasar::PTree *)&a9);
  _Unwind_Resume(a1);
}

void quasar::LDLoggingInfo::addStringValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v5[64];

  quasar::PTree::PTree(v5, a3);
  quasar::PTree::putChild(a1, a2, (uint64_t)v5, 1);
  quasar::PTree::~PTree((quasar::PTree *)v5);
}

void sub_1ADF50D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::PTree::~PTree((quasar::PTree *)&a9);
  _Unwind_Resume(a1);
}

void quasar::LDLoggingInfo::addBoolValue(uint64_t a1, uint64_t a2, quasar *this)
{
  int v3;
  int Type;
  std::string v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v3 = (int)this;
  Type = quasar::getType(this);
  std::to_string(&v7, v3);
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 1;
  quasar::PTree::putChild(a1, a2, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
}

void sub_1ADF50E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::PTree::~PTree((quasar::PTree *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *quasar::posteriorsToConfidences@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  double v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  double v11;
  uint64_t *v12;
  uint64_t *v13;
  __int128 *v14;

  v3 = result + 1;
  v4 = (uint64_t *)*result;
  if ((uint64_t *)*result == result + 1)
  {
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)a2 = a2 + 8;
  }
  else
  {
    v5 = 0.0;
    v6 = (uint64_t *)*result;
    do
    {
      v7 = (uint64_t *)v6[1];
      v8 = v6;
      if (v7)
      {
        do
        {
          v9 = v7;
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v8[2];
          v10 = *v9 == (_QWORD)v8;
          v8 = v9;
        }
        while (!v10);
      }
      v5 = v5 + *((double *)v6 + 10);
      v6 = v9;
    }
    while (v9 != v3);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)a2 = a2 + 8;
    if (v4 != v3)
    {
      do
      {
        v11 = *((double *)v4 + 10);
        v14 = (__int128 *)(v4 + 4);
        result = std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_unique_key_args<quasar::language_detector::Locale,std::piecewise_construct_t const&,std::tuple<quasar::language_detector::Locale const&>,std::tuple<>>((uint64_t **)a2, (unsigned __int8 *)v4 + 32, (uint64_t)&std::piecewise_construct, &v14);
        *((double *)result + 10) = v11 / v5;
        v12 = (uint64_t *)v4[1];
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = (uint64_t *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (uint64_t *)v4[2];
            v10 = *v13 == (_QWORD)v4;
            v4 = v13;
          }
          while (!v10);
        }
        v4 = v13;
      }
      while (v13 != v3);
    }
  }
  return result;
}

void sub_1ADF50F60(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *quasar::language_detector::Locale::Locale(_OWORD *a1, uint64_t a2)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  void *v35[2];
  char v36;
  std::string v37;

  v4 = (char *)a1 + 24;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v37 = *(std::string *)a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "-");
  std::string::basic_string[abi:ne180100]<0>(v35, "_");
  quasar::replaceAll((uint64_t)&v37, (uint64_t)__p, (char *)v35);
  if (v36 < 0)
    operator delete(v35[0]);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "_");
  quasar::splitAndTrimNoEmpty(&v37, (char *)__p, v35);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  v5 = v35[0];
  if ((void *)((char *)v35[1] - (char *)v35[0]) == (void *)48)
  {
    v6 = *((_QWORD *)a1 + 2);
    v7 = *a1;
    v8 = *((_QWORD *)v35[0] + 2);
    *a1 = *(_OWORD *)v35[0];
    *((_QWORD *)a1 + 2) = v8;
    *(_OWORD *)v5 = v7;
    v5[2] = v6;
    v9 = (char *)v35[0];
    v10 = *((_QWORD *)v4 + 2);
    v11 = *(_OWORD *)v4;
    v12 = *((_QWORD *)v35[0] + 5);
    *(_OWORD *)v4 = *(_OWORD *)((char *)v35[0] + 24);
    *((_QWORD *)v4 + 2) = v12;
    *(_OWORD *)(v9 + 24) = v11;
    *((_QWORD *)v9 + 5) = v10;
  }
  else if (quasar::gLogLevel >= 2)
  {
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Invalid locale string given ", 28);
    v14 = *(char *)(a2 + 23);
    if (v14 >= 0)
      v15 = a2;
    else
      v15 = *(_QWORD *)a2;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(a2 + 23);
    else
      v16 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
  }
  __p[0] = v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1ADF51158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;

  if (*(char *)(v14 + 47) < 0)
    operator delete(*v15);
  if (*(char *)(v14 + 23) < 0)
    operator delete(*(void **)v14);
  _Unwind_Resume(exception_object);
}

void quasar::language_detector::Locale::getSiriLocaleStr(quasar::language_detector::Locale *this@<X0>, std::string *a2@<X8>)
{
  size_t v4;
  std::string *p_p;
  quasar::language_detector::Locale *v6;
  const std::string::value_type *v7;
  char *v8;
  const std::string::value_type *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string __p;

  if (*((char *)this + 23) >= 0)
    v4 = *((unsigned __int8 *)this + 23);
  else
    v4 = *((_QWORD *)this + 1);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v4 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v4)
  {
    if (*((char *)this + 23) >= 0)
      v6 = this;
    else
      v6 = *(quasar::language_detector::Locale **)this;
    memmove(p_p, v6, v4);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v4) = 45;
  v9 = (const std::string::value_type *)*((_QWORD *)this + 3);
  v8 = (char *)this + 24;
  v7 = v9;
  v10 = v8[23];
  if (v10 >= 0)
    v11 = v8;
  else
    v11 = v7;
  if (v10 >= 0)
    v12 = v8[23];
  else
    v12 = *((_QWORD *)v8 + 1);
  v13 = std::string::append(&__p, v11, v12);
  *a2 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1ADF512E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::language_detector::Locale::operator<(unsigned __int8 *a1, unsigned __int8 **a2)
{
  signed __int8 v3;
  size_t v4;
  char v5;
  size_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  const void *v12;
  size_t v13;
  int v14;
  BOOL v15;
  unsigned __int8 *v16;
  unsigned __int8 **v17;
  unsigned __int8 *v18;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  int v23;
  size_t v24;
  unsigned __int8 *v25;
  size_t v26;
  unsigned __int8 **v27;
  size_t v28;
  unsigned int v29;

  v3 = a1[23];
  if (v3 >= 0)
    v4 = a1[23];
  else
    v4 = *((_QWORD *)a1 + 1);
  v5 = *((_BYTE *)a2 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  if (v5 >= 0)
    v7 = (unsigned __int8 *)a2;
  else
    v7 = *a2;
  if (v4 == v6)
  {
    if ((a1[23] & 0x80) == 0)
    {
      if (a1[23])
      {
        v9 = v7;
        v10 = a1;
        v11 = a1[23];
        while (*v10 == *v9)
        {
          ++v10;
          ++v9;
          if (!--v11)
            goto LABEL_25;
        }
        goto LABEL_18;
      }
LABEL_25:
      v18 = a2[3];
      v17 = a2 + 3;
      v16 = v18;
      v19 = *((char *)v17 + 23);
      v22 = (unsigned __int8 *)*((_QWORD *)a1 + 3);
      v21 = a1 + 24;
      v20 = v22;
      v23 = (char)v21[23];
      if (v23 >= 0)
        v24 = v21[23];
      else
        v24 = *((_QWORD *)v21 + 1);
      if (v23 >= 0)
        v25 = v21;
      else
        v25 = v20;
      if (v19 >= 0)
        v26 = *((unsigned __int8 *)v17 + 23);
      else
        v26 = (size_t)v17[1];
      if (v19 >= 0)
        v27 = v17;
      else
        v27 = (unsigned __int8 **)v16;
      if (v26 >= v24)
        v28 = v24;
      else
        v28 = v26;
      v14 = memcmp(v25, v27, v28);
      v15 = v24 >= v26;
      goto LABEL_41;
    }
    if (!memcmp(*(const void **)a1, v7, *((_QWORD *)a1 + 1)))
      goto LABEL_25;
  }
LABEL_18:
  if (v3 >= 0)
    v12 = a1;
  else
    v12 = *(const void **)a1;
  if (v6 >= v4)
    v13 = v4;
  else
    v13 = v6;
  v14 = memcmp(v12, v7, v13);
  v15 = v4 >= v6;
LABEL_41:
  v29 = !v15;
  if (v14)
    return v14 < 0;
  else
    return v29;
}

_QWORD *quasar::language_detector::operator<<(_QWORD *a1, quasar::language_detector::Locale *this)
{
  std::string *p_p;
  std::string::size_type size;
  std::string __p;

  quasar::language_detector::Locale::getSiriLocaleStr(this, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1ADF51490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::LDContext::LDContext(uint64_t this)
{
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)this = this + 8;
  *(_BYTE *)(this + 24) = 0;
  *(_BYTE *)(this + 48) = 0;
  *(_BYTE *)(this + 56) = 0;
  *(_BYTE *)(this + 104) = 0;
  *(_WORD *)(this + 112) = 0;
  *(_BYTE *)(this + 120) = 0;
  *(_BYTE *)(this + 144) = 0;
  *(_BYTE *)(this + 152) = 0;
  *(_BYTE *)(this + 176) = 0;
  *(_BYTE *)(this + 184) = 0;
  *(_BYTE *)(this + 208) = 0;
  *(_BYTE *)(this + 216) = 0;
  *(_BYTE *)(this + 264) = 0;
  *(_BYTE *)(this + 272) = 0;
  *(_BYTE *)(this + 320) = 0;
  *(_BYTE *)(this + 328) = 0;
  *(_BYTE *)(this + 352) = 0;
  return this;
}

quasar::LDContext *quasar::LDContext::LDContext(quasar::LDContext *this, const quasar::LDContext *a2)
{
  uint64_t *v4;

  v4 = std::map<quasar::language_detector::Locale,double>::map[abi:ne180100]((uint64_t *)this, (uint64_t)a2);
  std::__optional_copy_base<std::set<quasar::language_detector::Locale>,false>::__optional_copy_base[abi:ne180100]((uint64_t)(v4 + 3), (uint64_t)a2 + 24);
  std::__optional_copy_base<quasar::language_detector::Locale,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 56), (uint64_t)a2 + 56);
  *((_WORD *)this + 56) = *((_WORD *)a2 + 56);
  std::__optional_copy_base<std::vector<quasar::language_detector::Locale>,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 5, (uint64_t)a2 + 120);
  std::__optional_copy_base<std::map<quasar::language_detector::Locale,double>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 152, (uint64_t)a2 + 152);
  std::__optional_copy_base<std::map<quasar::language_detector::Locale,double>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 184, (uint64_t)a2 + 184);
  std::__optional_copy_base<quasar::language_detector::Locale,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 9, (uint64_t)a2 + 216);
  std::__optional_copy_base<quasar::language_detector::Locale,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 272), (uint64_t)a2 + 272);
  std::__optional_copy_base<std::map<quasar::language_detector::Locale,double>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 328, (uint64_t)a2 + 328);
  return this;
}

void sub_1ADF515D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va;

  va_start(va, a2);
  std::__optional_destruct_base<quasar::language_detector::Locale,false>::~__optional_destruct_base[abi:ne180100](v8);
  std::__optional_destruct_base<quasar::language_detector::Locale,false>::~__optional_destruct_base[abi:ne180100](v7);
  if (*(_BYTE *)(v2 + 208))
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v6, *(_QWORD **)(v2 + 192));
  if (*(_BYTE *)(v2 + 176))
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v5, *(_QWORD **)(v2 + 160));
  if (*(_BYTE *)(v2 + 144))
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__optional_destruct_base<quasar::language_detector::Locale,false>::~__optional_destruct_base[abi:ne180100](v4);
  if (*(_BYTE *)(v2 + 48))
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3, *(_QWORD **)(v2 + 32));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v2, *(_QWORD **)(v2 + 8));
  _Unwind_Resume(a1);
}

uint64_t quasar::LDContext::LDContext(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int16 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a1 + 8;
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    *(_QWORD *)a2 = v4;
    *v4 = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a1 = v6;
  }
  std::__optional_move_base<std::set<quasar::language_detector::Locale>,false>::__optional_move_base[abi:ne180100](a1 + 24, a2 + 24);
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (*(_BYTE *)(a2 + 104))
  {
    v8 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 56) = 0;
    v9 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = v9;
    *(_QWORD *)(a2 + 88) = 0;
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_BYTE *)(a1 + 104) = 1;
  }
  v10 = *(_WORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 112) = v10;
  *(_BYTE *)(a1 + 144) = 0;
  if (*(_BYTE *)(a2 + 144))
  {
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a2 + 120) = 0;
    *(_QWORD *)(a2 + 128) = 0;
    *(_QWORD *)(a2 + 136) = 0;
    *(_BYTE *)(a1 + 144) = 1;
  }
  std::__optional_move_base<std::set<quasar::language_detector::Locale>,false>::__optional_move_base[abi:ne180100](a1 + 152, a2 + 152);
  std::__optional_move_base<std::set<quasar::language_detector::Locale>,false>::__optional_move_base[abi:ne180100](a1 + 184, a2 + 184);
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  if (*(_BYTE *)(a2 + 264))
  {
    v11 = *(_OWORD *)(a2 + 216);
    *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = v11;
    *(_QWORD *)(a2 + 224) = 0;
    *(_QWORD *)(a2 + 232) = 0;
    *(_QWORD *)(a2 + 216) = 0;
    v12 = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = v12;
    *(_QWORD *)(a2 + 248) = 0;
    *(_QWORD *)(a2 + 256) = 0;
    *(_QWORD *)(a2 + 240) = 0;
    *(_BYTE *)(a1 + 264) = 1;
  }
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  if (*(_BYTE *)(a2 + 320))
  {
    v13 = *(_OWORD *)(a2 + 272);
    *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = v13;
    *(_QWORD *)(a2 + 280) = 0;
    *(_QWORD *)(a2 + 288) = 0;
    *(_QWORD *)(a2 + 272) = 0;
    v14 = *(_OWORD *)(a2 + 296);
    *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = v14;
    *(_QWORD *)(a2 + 304) = 0;
    *(_QWORD *)(a2 + 312) = 0;
    *(_QWORD *)(a2 + 296) = 0;
    *(_BYTE *)(a1 + 320) = 1;
  }
  std::__optional_move_base<std::set<quasar::language_detector::Locale>,false>::__optional_move_base[abi:ne180100](a1 + 328, a2 + 328);
  return a1;
}

void quasar::LDContext::~LDContext(quasar::LDContext *this)
{
  void **v2;

  if (*((_BYTE *)this + 352))
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 328, *((_QWORD **)this + 42));
  std::__optional_destruct_base<quasar::language_detector::Locale,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 272);
  std::__optional_destruct_base<quasar::language_detector::Locale,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 216);
  if (*((_BYTE *)this + 208))
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 184, *((_QWORD **)this + 24));
  if (*((_BYTE *)this + 176))
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 152, *((_QWORD **)this + 20));
  if (*((_BYTE *)this + 144))
  {
    v2 = (void **)((char *)this + 120);
    std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  }
  std::__optional_destruct_base<quasar::language_detector::Locale,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 56);
  if (*((_BYTE *)this + 48))
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
}

void quasar::LDContext::logContext(quasar::LDContext **this)
{
  _QWORD *v2;
  quasar::LDContext *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  quasar::LDContext *v7;
  quasar::LDContext *v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  void *p_p;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  quasar::LDContext *v16;
  char v17;
  quasar::LDContext *v18;
  quasar::LDContext *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  quasar::LDContext *v27;
  char v28;
  quasar::LDContext *v29;
  quasar::LDContext *v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  quasar::LDContext *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  quasar::LDContext *v40;
  quasar::LDContext *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  quasar::LDContext *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  quasar::LDContext *v52;
  quasar::LDContext *v53;
  _QWORD *v54;
  _QWORD *v55;
  void *v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  _QWORD *v61;
  _QWORD *v62;
  quasar::LDContext *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  quasar::LDContext *v67;
  quasar::LDContext *v68;
  _QWORD *v69;
  _QWORD *v70;
  void *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  void *__p;
  uint64_t v76;
  unsigned __int8 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;

  if (quasar::gLogLevel >= 4)
  {
    v110 = 0u;
    v111 = 0u;
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    v103 = 0u;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    v96 = 0u;
    v97 = 0u;
    v95 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v95);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v95, (uint64_t)"Logging LDContext", 17);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v95);
  }
  v2 = (_QWORD *)MEMORY[0x1E0DE4F50];
  if (this[2])
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v95);
    v3 = *this;
    if (*this != (quasar::LDContext *)(this + 1))
    {
      do
      {
        v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"(", 1);
        v5 = quasar::language_detector::operator<<(v4, (quasar::LDContext *)((char *)v3 + 32));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)",", 1);
        v6 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)") ", 2);
        v7 = (quasar::LDContext *)*((_QWORD *)v3 + 1);
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = *(quasar::LDContext **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (quasar::LDContext *)*((_QWORD *)v3 + 2);
            v9 = *(_QWORD *)v8 == (_QWORD)v3;
            v3 = v8;
          }
          while (!v9);
        }
        v3 = v8;
      }
      while (v8 != (quasar::LDContext *)(this + 1));
    }
    if (quasar::gLogLevel > 3)
    {
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v78 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v78);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78, (uint64_t)"priors=", 7);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"[", 1);
      std::stringbuf::str();
      if ((v77 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      if ((v77 & 0x80u) == 0)
        v13 = v77;
      else
        v13 = v76;
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)p_p, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"]", 1);
      if ((char)v77 < 0)
        operator delete(__p);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v78);
    }
    *(_QWORD *)&v95 = *v2;
    v15 = v2[9];
    *(_QWORD *)((char *)&v95 + *(_QWORD *)(v95 - 24)) = v2[8];
    *(_QWORD *)&v96 = v15;
    *((_QWORD *)&v96 + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if (SHIBYTE(v101) < 0)
      operator delete(*((void **)&v100 + 1));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1AF44D094](&v103);
  }
  if (*((_BYTE *)this + 48))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v95);
    if (!*((_BYTE *)this + 48))
      std::__throw_bad_optional_access[abi:ne180100]();
    v16 = this[3];
    if (v16 != (quasar::LDContext *)(this + 4))
    {
      v17 = 1;
      do
      {
        if ((v17 & 1) == 0)
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)", ", 2);
        quasar::language_detector::operator<<(&v96, (quasar::LDContext *)((char *)v16 + 32));
        v18 = (quasar::LDContext *)*((_QWORD *)v16 + 1);
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = *(quasar::LDContext **)v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (quasar::LDContext *)*((_QWORD *)v16 + 2);
            v9 = *(_QWORD *)v19 == (_QWORD)v16;
            v16 = v19;
          }
          while (!v9);
        }
        v17 = 0;
        v16 = v19;
      }
      while (v19 != (quasar::LDContext *)(this + 4));
    }
    if (quasar::gLogLevel > 3)
    {
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v78 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v78);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78, (uint64_t)"dictation_locales=[", 19);
      std::stringbuf::str();
      if ((v77 & 0x80u) == 0)
        v21 = &__p;
      else
        v21 = __p;
      if ((v77 & 0x80u) == 0)
        v22 = v77;
      else
        v22 = v76;
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"]", 1);
      if ((char)v77 < 0)
        operator delete(__p);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v78);
    }
    *(_QWORD *)&v95 = *v2;
    v24 = v2[9];
    *(_QWORD *)((char *)&v95 + *(_QWORD *)(v95 - 24)) = v2[8];
    *(_QWORD *)&v96 = v24;
    *((_QWORD *)&v96 + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if (SHIBYTE(v101) < 0)
      operator delete(*((void **)&v100 + 1));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1AF44D094](&v103);
  }
  v25 = quasar::gLogLevel;
  if (*((_BYTE *)this + 104) && quasar::gLogLevel >= 4)
  {
    v110 = 0u;
    v111 = 0u;
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    v103 = 0u;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    v96 = 0u;
    v97 = 0u;
    v95 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v95);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v95, (uint64_t)"current_dictaion_locale=", 24);
    if (!*((_BYTE *)this + 104))
      std::__throw_bad_optional_access[abi:ne180100]();
    quasar::language_detector::operator<<(v26, (quasar::language_detector::Locale *)(this + 7));
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v95);
    v25 = quasar::gLogLevel;
  }
  if (*((_BYTE *)this + 113) && v25 >= 4)
  {
    v110 = 0u;
    v111 = 0u;
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    v103 = 0u;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    v96 = 0u;
    v97 = 0u;
    v95 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v95);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v95, (uint64_t)"was_language_toggled=", 21);
    if (!*((_BYTE *)this + 113))
      std::__throw_bad_optional_access[abi:ne180100]();
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v95);
  }
  if (*((_BYTE *)this + 144))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v95);
    if (!*((_BYTE *)this + 48))
      std::__throw_bad_optional_access[abi:ne180100]();
    v27 = this[3];
    if (v27 != (quasar::LDContext *)(this + 4))
    {
      v28 = 1;
      do
      {
        if ((v28 & 1) == 0)
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)", ", 2);
        quasar::language_detector::operator<<(&v96, (quasar::LDContext *)((char *)v27 + 32));
        v29 = (quasar::LDContext *)*((_QWORD *)v27 + 1);
        if (v29)
        {
          do
          {
            v30 = v29;
            v29 = *(quasar::LDContext **)v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            v30 = (quasar::LDContext *)*((_QWORD *)v27 + 2);
            v9 = *(_QWORD *)v30 == (_QWORD)v27;
            v27 = v30;
          }
          while (!v9);
        }
        v28 = 0;
        v27 = v30;
      }
      while (v30 != (quasar::LDContext *)(this + 4));
    }
    if (quasar::gLogLevel > 3)
    {
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v78 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v78);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78, (uint64_t)"multilingual_keyboard_locales=[", 31);
      std::stringbuf::str();
      if ((v77 & 0x80u) == 0)
        v32 = &__p;
      else
        v32 = __p;
      if ((v77 & 0x80u) == 0)
        v33 = v77;
      else
        v33 = v76;
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"]", 1);
      if ((char)v77 < 0)
        operator delete(__p);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v78);
    }
    *(_QWORD *)&v95 = *v2;
    v35 = v2[9];
    *(_QWORD *)((char *)&v95 + *(_QWORD *)(v95 - 24)) = v2[8];
    *(_QWORD *)&v96 = v35;
    *((_QWORD *)&v96 + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if (SHIBYTE(v101) < 0)
      operator delete(*((void **)&v100 + 1));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1AF44D094](&v103);
  }
  if (*((_BYTE *)this + 176))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v95);
    if (!*((_BYTE *)this + 176))
      std::__throw_bad_optional_access[abi:ne180100]();
    v36 = this[19];
    if (v36 != (quasar::LDContext *)(this + 20))
    {
      do
      {
        v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"(", 1);
        v38 = quasar::language_detector::operator<<(v37, (quasar::LDContext *)((char *)v36 + 32));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)",", 1);
        v39 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)") ", 2);
        v40 = (quasar::LDContext *)*((_QWORD *)v36 + 1);
        if (v40)
        {
          do
          {
            v41 = v40;
            v40 = *(quasar::LDContext **)v40;
          }
          while (v40);
        }
        else
        {
          do
          {
            v41 = (quasar::LDContext *)*((_QWORD *)v36 + 2);
            v9 = *(_QWORD *)v41 == (_QWORD)v36;
            v36 = v41;
          }
          while (!v9);
        }
        v36 = v41;
      }
      while (v41 != (quasar::LDContext *)(this + 20));
    }
    if (quasar::gLogLevel > 3)
    {
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v78 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v78);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78, (uint64_t)"keyboard_convo_locale_priors=", 29);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"[ ", 2);
      std::stringbuf::str();
      if ((v77 & 0x80u) == 0)
        v44 = &__p;
      else
        v44 = __p;
      if ((v77 & 0x80u) == 0)
        v45 = v77;
      else
        v45 = v76;
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v44, v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"]", 1);
      if ((char)v77 < 0)
        operator delete(__p);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v78);
    }
    *(_QWORD *)&v95 = *v2;
    v47 = v2[9];
    *(_QWORD *)((char *)&v95 + *(_QWORD *)(v95 - 24)) = v2[8];
    *(_QWORD *)&v96 = v47;
    *((_QWORD *)&v96 + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if (SHIBYTE(v101) < 0)
      operator delete(*((void **)&v100 + 1));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1AF44D094](&v103);
  }
  if (*((_BYTE *)this + 208))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v95);
    if (!*((_BYTE *)this + 208))
      std::__throw_bad_optional_access[abi:ne180100]();
    v48 = this[23];
    if (v48 != (quasar::LDContext *)(this + 24))
    {
      do
      {
        v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"(", 1);
        v50 = quasar::language_detector::operator<<(v49, (quasar::LDContext *)((char *)v48 + 32));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)",", 1);
        v51 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)") ", 2);
        v52 = (quasar::LDContext *)*((_QWORD *)v48 + 1);
        if (v52)
        {
          do
          {
            v53 = v52;
            v52 = *(quasar::LDContext **)v52;
          }
          while (v52);
        }
        else
        {
          do
          {
            v53 = (quasar::LDContext *)*((_QWORD *)v48 + 2);
            v9 = *(_QWORD *)v53 == (_QWORD)v48;
            v48 = v53;
          }
          while (!v9);
        }
        v48 = v53;
      }
      while (v53 != (quasar::LDContext *)(this + 24));
    }
    if (quasar::gLogLevel > 3)
    {
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v78 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v78);
      v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78, (uint64_t)"keyboard_global_locale_priors=", 30);
      v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"[ ", 2);
      std::stringbuf::str();
      if ((v77 & 0x80u) == 0)
        v56 = &__p;
      else
        v56 = __p;
      if ((v77 & 0x80u) == 0)
        v57 = v77;
      else
        v57 = v76;
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v56, v57);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"]", 1);
      if ((char)v77 < 0)
        operator delete(__p);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v78);
    }
    *(_QWORD *)&v95 = *v2;
    v59 = v2[9];
    *(_QWORD *)((char *)&v95 + *(_QWORD *)(v95 - 24)) = v2[8];
    *(_QWORD *)&v96 = v59;
    *((_QWORD *)&v96 + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if (SHIBYTE(v101) < 0)
      operator delete(*((void **)&v100 + 1));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1AF44D094](&v103);
  }
  v60 = quasar::gLogLevel;
  if (*((_BYTE *)this + 264) && quasar::gLogLevel >= 4)
  {
    v110 = 0u;
    v111 = 0u;
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    v103 = 0u;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    v96 = 0u;
    v97 = 0u;
    v95 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v95);
    v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v95, (uint64_t)"previous_message_locale=", 24);
    if (!*((_BYTE *)this + 264))
      std::__throw_bad_optional_access[abi:ne180100]();
    quasar::language_detector::operator<<(v61, (quasar::language_detector::Locale *)(this + 27));
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v95);
    v60 = quasar::gLogLevel;
  }
  if (*((_BYTE *)this + 320) && v60 >= 4)
  {
    v110 = 0u;
    v111 = 0u;
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    v103 = 0u;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    v96 = 0u;
    v97 = 0u;
    v95 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v95);
    v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v95, (uint64_t)"global_last_keyboard_used=", 26);
    if (!*((_BYTE *)this + 320))
      std::__throw_bad_optional_access[abi:ne180100]();
    quasar::language_detector::operator<<(v62, (quasar::language_detector::Locale *)(this + 34));
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v95);
  }
  if (*((_BYTE *)this + 352))
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v95);
    if (!*((_BYTE *)this + 352))
      std::__throw_bad_optional_access[abi:ne180100]();
    v63 = this[41];
    if (v63 != (quasar::LDContext *)(this + 42))
    {
      do
      {
        v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v96, (uint64_t)"(", 1);
        v65 = quasar::language_detector::operator<<(v64, (quasar::LDContext *)((char *)v63 + 32));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)",", 1);
        v66 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)") ", 2);
        v67 = (quasar::LDContext *)*((_QWORD *)v63 + 1);
        if (v67)
        {
          do
          {
            v68 = v67;
            v67 = *(quasar::LDContext **)v67;
          }
          while (v67);
        }
        else
        {
          do
          {
            v68 = (quasar::LDContext *)*((_QWORD *)v63 + 2);
            v9 = *(_QWORD *)v68 == (_QWORD)v63;
            v63 = v68;
          }
          while (!v9);
        }
        v63 = v68;
      }
      while (v68 != (quasar::LDContext *)(this + 42));
    }
    if (quasar::gLogLevel > 3)
    {
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v78 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v78);
      v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v78, (uint64_t)"dictation_locale_priors=", 24);
      v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"[ ", 2);
      std::stringbuf::str();
      if ((v77 & 0x80u) == 0)
        v71 = &__p;
      else
        v71 = __p;
      if ((v77 & 0x80u) == 0)
        v72 = v77;
      else
        v72 = v76;
      v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v71, v72);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"]", 1);
      if ((char)v77 < 0)
        operator delete(__p);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v78);
    }
    *(_QWORD *)&v95 = *v2;
    v74 = v2[9];
    *(_QWORD *)((char *)&v95 + *(_QWORD *)(v95 - 24)) = v2[8];
    *(_QWORD *)&v96 = v74;
    *((_QWORD *)&v96 + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if (SHIBYTE(v101) < 0)
      operator delete(*((void **)&v100 + 1));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1AF44D094](&v103);
  }
}

void sub_1ADF5263C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a16);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a50);
  _Unwind_Resume(a1);
}

void quasar::LDConfig::registerParams(uint64_t a1, quasar::SystemConfig *this, const std::string *a3)
{
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  std::string v10;

  quasar::SystemConfig::getPrefix(this, &v10);
  quasar::SystemConfig::setPrefix((std::string *)this, a3);
  std::string::basic_string[abi:ne180100]<0>(v8, "window-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "The number of frames to be considered per decision. In flexible input size, this is the minimum window size for creating the 1st LID result. When prediction-interval is used, -1 will deactivate the minimum size.");
  quasar::SystemConfig::Register<int>((uint64_t)this, (const void **)v8, a1, (uint64_t)__p, 1, 115, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, "feature-dim");
  std::string::basic_string[abi:ne180100]<0>(__p, "The dimension size of the features.");
  quasar::SystemConfig::Register<int>((uint64_t)this, (const void **)v8, a1 + 8, (uint64_t)__p, 1, 115, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, "languages-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "Comma separated list of languages");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)v8, a1 + 16, (uint64_t)__p, 1, 115, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, "compiled-model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "The name of the compiled model file");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)v8, a1 + 64, (uint64_t)__p, 1, 115, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, "model-input-name");
  std::string::basic_string[abi:ne180100]<0>(__p, "The name of the key for the model input");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)v8, a1 + 88, (uint64_t)__p, 1, 115, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, "model-output-name");
  std::string::basic_string[abi:ne180100]<0>(__p, "The name of the key for the model output");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)v8, a1 + 112, (uint64_t)__p, 1, 115, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, "use-flexible-model");
  std::string::basic_string[abi:ne180100]<0>(__p, "Whether or not the model accepts flexible (variable) input size.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)this, (const void **)v8, a1 + 137, (uint64_t)__p, 0, 124, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, "max-window-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "The maximum size window for processing. Only works with flexible input size enabled.");
  quasar::SystemConfig::Register<int>((uint64_t)this, (const void **)v8, a1 + 196, (uint64_t)__p, 0, 124, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, "use-cpu-only");
  std::string::basic_string[abi:ne180100]<0>(__p, "Only use the CPU for inference");
  quasar::SystemConfig::Register<BOOL>((uint64_t)this, (const void **)v8, a1 + 136, (uint64_t)__p, 0, 124, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, "send-only-final-result");
  std::string::basic_string[abi:ne180100]<0>(__p, "Do not send incremental results, send only the final result. Fixed input will always only send the final result.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)this, (const void **)v8, a1 + 138, (uint64_t)__p, 0, 124, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, "minimum-confidence");
  std::string::basic_string[abi:ne180100]<0>(__p, "For flexible input size, the minimum confidence for sending early results back. Only works with flexible input size enabled.");
  quasar::SystemConfig::Register<double>((uint64_t)this, (const void **)v8, a1 + 144, (uint64_t)__p, 0, 124, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, "prediction-interval");
  std::string::basic_string[abi:ne180100]<0>(__p, "The interval which we should make decisions (-1 is only once). Only works with flexible input size enabled.");
  quasar::SystemConfig::Register<int>((uint64_t)this, (const void **)v8, a1 + 4, (uint64_t)__p, 0, 124, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, "ui-minimum-confidence");
  std::string::basic_string[abi:ne180100]<0>(__p, "Determines whether or no the UI should consider the result non-confident. Should be greater than or equal to minimum-confidence.");
  quasar::SystemConfig::Register<double>((uint64_t)this, (const void **)v8, a1 + 152, (uint64_t)__p, 0, 126, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, "input-tensor-shape");
  std::string::basic_string[abi:ne180100]<0>(__p, "The shape of the input tensor specified by (dims, row index, col index).");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)v8, a1 + 160, (uint64_t)__p, 0, 134, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  quasar::SystemConfig::setPrefix((std::string *)this, &v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
}

void sub_1ADF52D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void quasar::LDConfig::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  int v5;
  int v6;
  int v7;
  void *__p[2];
  char v9;
  void *v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void **v27;

  quasar::SystemConfig::readPtree(a2, a3, 0, 0);
  if (!*(_BYTE *)(a1 + 137) && *(int *)(a1 + 4) >= 1)
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    *(_OWORD *)v10 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Only use prediction interval with variable size input.");
    goto LABEL_30;
  }
  v4 = *(_DWORD *)(a1 + 4);
  if ((*(_DWORD *)a1 & 0x80000000) != 0)
  {
    if (v4 < 0)
    {
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      *(_OWORD *)v10 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "A negative window-size deactivates an initial minimum window size and requires a positive prediction-interval setting.");
      goto LABEL_30;
    }
  }
  else if (v4 < 0)
  {
    *(_DWORD *)(a1 + 4) = 0x7FFFFFFF;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, ",");
  quasar::splitAndTrimNoEmpty((const std::string *)(a1 + 16), (char *)__p, v10);
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)v10;
  *(_QWORD *)(a1 + 56) = v11;
  v10[1] = 0;
  *(_QWORD *)&v11 = 0;
  v10[0] = 0;
  v27 = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v27);
  if (v9 < 0)
    operator delete(__p[0]);
  v5 = *(_DWORD *)(a1 + 196);
  if (!*(_BYTE *)(a1 + 137))
  {
    if (v5 <= *(_DWORD *)a1)
      goto LABEL_13;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    *(_OWORD *)v10 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Must unable useFlexibleModel to have variable input size.");
LABEL_30:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v10);
  }
  if (v5 < 0)
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    *(_OWORD *)v10 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Max window size much be configured for flexible model");
    goto LABEL_30;
  }
LABEL_13:
  if (v5 >= 1 && v5 < *(_DWORD *)a1)
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    *(_OWORD *)v10 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Maximum window size configured to be less than window size");
    goto LABEL_30;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, ",");
  quasar::splitAndTrimNoEmpty((const std::string *)(a1 + 160), (char *)v10, __p);
  if (SBYTE7(v11) < 0)
    operator delete(v10[0]);
  if ((void *)((char *)__p[1] - (char *)__p[0]) != (void *)72)
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    *(_OWORD *)v10 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Shape of the input tensor must be specified through (dims, row index, col index).", 81);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v10);
  }
  *(_DWORD *)(a1 + 184) = std::stoi((const std::string *)__p[0], 0, 10);
  v6 = std::stoi((const std::string *)__p[0] + 1, 0, 10);
  *(_DWORD *)(a1 + 188) = v6;
  if (v6 < 0 || v6 >= *(_DWORD *)(a1 + 184))
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    *(_OWORD *)v10 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Input tensor row index must be non-negative and less than input tensor dims.", 76);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v10);
  }
  v7 = std::stoi((const std::string *)__p[0] + 2, 0, 10);
  *(_DWORD *)(a1 + 192) = v7;
  if (v7 < 0 || v7 >= *(_DWORD *)(a1 + 184))
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    *(_OWORD *)v10 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Input tensor col index must be non-negative less than input tensor dims.", 72);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v10);
  }
  v10[0] = __p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v10);
}

void sub_1ADF53288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  __p = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::LDAcousticResult::LDAcousticResult(uint64_t this, char a2)
{
  *(_BYTE *)this = a2;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 8) = this + 16;
  return this;
}

uint64_t quasar::LDResult::LDResult(uint64_t this, char a2)
{
  *(_BYTE *)this = a2;
  *(_WORD *)(this + 1) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)(this + 8) = this + 16;
  *(_QWORD *)(this + 48) = 0;
  *(_QWORD *)(this + 40) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = this + 40;
  return this;
}

_QWORD *quasar::AcousticLDModel::AcousticLDModel(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *a2;
  v2 = a2[1];
  *result = off_1E5D35850;
  result[1] = v3;
  result[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void quasar::AcousticLDModel::~AcousticLDModel(quasar::AcousticLDModel *this)
{
  *(_QWORD *)this = off_1E5D35850;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

void quasar::DummyContextAwareLDModel::makePrediction(quasar *this@<X2>, _QWORD *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  __int128 *v8;
  __int128 **v9;
  uint64_t *v10;
  uint64_t **v11;
  double *v12;
  double *v13;
  double v14;
  char v15;
  BOOL v16;
  double *v17;
  double *v18;
  BOOL v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD **v22;
  uint64_t v23;
  double v24;
  unsigned __int8 *v25;
  char v26;
  char v27;
  _QWORD *v28;
  _QWORD **v29;
  double *v30;
  unsigned __int8 *v31;
  double *v32;
  double *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  double **v37;
  uint64_t **v38;
  void *v39[2];
  char v40;
  _OWORD v41[2];
  int v42;
  _BYTE v43[32];
  __int128 v44;
  void *__p[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _QWORD **v59;
  _QWORD *v60[4];

  *(_WORD *)a4 = 1;
  *(_QWORD *)(a4 + 16) = 0;
  v8 = (__int128 *)(a4 + 16);
  *(_BYTE *)(a4 + 2) = 0;
  *(_QWORD *)(a4 + 8) = a4 + 16;
  v9 = (__int128 **)(a4 + 8);
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  v10 = (uint64_t *)(a4 + 40);
  *(_QWORD *)(a4 + 32) = a4 + 40;
  v11 = (uint64_t **)(a4 + 32);
  *(_QWORD *)(a4 + 48) = 0;
  quasar::localePriorsFromContext(this, (uint64_t)&v59);
  if (!v60[1])
  {
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v46 = 0u;
    v44 = 0u;
    *(_OWORD *)__p = 0u;
    memset(v43, 0, sizeof(v43));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Context provided no locale priors.", 34);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v43);
  }
  v36 = v10;
  v38 = v11;
  if (!a2[2])
  {
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v46 = 0u;
    v44 = 0u;
    *(_OWORD *)__p = 0u;
    memset(v43, 0, sizeof(v43));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"No acoustic posteriors.", 23);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v43);
  }
  v37 = (double **)a2;
  v13 = (double *)(a2 + 1);
  v12 = (double *)*a2;
  if (v12 == v13)
    goto LABEL_17;
  v14 = v12[7];
  v15 = 1;
  do
  {
    if (*((char *)v12 + 55) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v43, *((const std::string::value_type **)v12 + 4), *((_QWORD *)v12 + 5));
    }
    else
    {
      *(_OWORD *)v43 = *((_OWORD *)v12 + 2);
      *(double *)&v43[16] = v12[6];
    }
    *(double *)&v43[24] = v12[7];
    v16 = vabdd_f64(*(double *)&v43[24], v14) < 0.001;
    if ((v43[23] & 0x80000000) != 0)
      operator delete(*(void **)v43);
    v17 = (double *)*((_QWORD *)v12 + 1);
    if (v17)
    {
      do
      {
        v18 = v17;
        v17 = *(double **)v17;
      }
      while (v17);
    }
    else
    {
      do
      {
        v18 = (double *)*((_QWORD *)v12 + 2);
        v19 = *(_QWORD *)v18 == (_QWORD)v12;
        v12 = v18;
      }
      while (!v19);
    }
    v15 &= v16;
    v12 = v18;
  }
  while (v18 != v13);
  if ((v15 & 1) != 0)
  {
LABEL_17:
    if (quasar::gLogLevel >= 4)
    {
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v46 = 0u;
      v44 = 0u;
      *(_OWORD *)__p = 0u;
      memset(v43, 0, sizeof(v43));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Using dummy context model. Since acoustic posteriors are equal, defaulting to dictationLocales and currentDictationLocale from the context.", 139);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v43);
    }
    quasar::fallbackConfidenceFromContext(this, (uint64_t)v43);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v9, *(_QWORD **)(a4 + 16));
    v20 = *(_QWORD **)&v43[8];
    *(_QWORD *)(a4 + 8) = *(_QWORD *)v43;
    *(_QWORD *)(a4 + 16) = v20;
    v21 = *(_QWORD *)&v43[16];
    *(_QWORD *)(a4 + 24) = *(_QWORD *)&v43[16];
    if (v21)
    {
      v20[2] = v8;
      *(_QWORD *)v43 = &v43[8];
      *(_OWORD *)&v43[8] = 0uLL;
      v20 = 0;
    }
    else
    {
      *v9 = v8;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v43, v20);
    std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<quasar::language_detector::Locale,double>,std::__tree_node<std::__value_type<quasar::language_detector::Locale,double>,void *> *,long>>(v38, *v9, v8);
    goto LABEL_61;
  }
  memset(v41, 0, sizeof(v41));
  v42 = 1065353216;
  v22 = v59;
  if (v59 != v60)
  {
    do
    {
      v23 = *(_QWORD *)(a3 + 24);
      if (!v23)
        std::__throw_bad_function_call[abi:ne180100]();
      v24 = *((double *)v22 + 10);
      (*(void (**)(void **__return_ptr, uint64_t, _QWORD **))(*(_QWORD *)v23 + 48))(v39, v23, v22 + 4);
      std::pair<std::string const,quasar::language_detector::Locale>::pair[abi:ne180100]<std::string&,quasar::language_detector::Locale const&,0>((std::string *)v43, (__int128 *)v39, (__int128 *)v22 + 2);
      v25 = std::__hash_table<std::__hash_value_type<std::string,quasar::language_detector::Locale>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::language_detector::Locale>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::language_detector::Locale>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::language_detector::Locale>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::language_detector::Locale>>((uint64_t)v41, v43, (__int128 *)v43);
      v27 = v26;
      if (SBYTE7(v46) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v44) < 0)
        operator delete(*(void **)&v43[24]);
      if ((v43[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)v43);
        if ((v27 & 1) == 0)
        {
LABEL_31:
          if (v24 > *(double *)std::map<quasar::language_detector::Locale,double>::at((uint64_t)&v59, v25 + 40))
          {
            std::string::operator=((std::string *)(v25 + 40), (const std::string *)(v22 + 4));
            std::string::operator=((std::string *)(v25 + 64), (const std::string *)(v22 + 7));
          }
        }
      }
      else if ((v27 & 1) == 0)
      {
        goto LABEL_31;
      }
      if (v40 < 0)
        operator delete(v39[0]);
      v28 = v22[1];
      if (v28)
      {
        do
        {
          v29 = (_QWORD **)v28;
          v28 = (_QWORD *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          v29 = (_QWORD **)v22[2];
          v19 = *v29 == v22;
          v22 = v29;
        }
        while (!v19);
      }
      v22 = v29;
    }
    while (v29 != v60);
  }
  v30 = *v37;
  if (*v37 != v13)
  {
    do
    {
      v39[0] = *((void **)v30 + 7);
      v31 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v41, (unsigned __int8 *)v30 + 32);
      if (v31)
      {
        std::pair<quasar::language_detector::Locale const,double>::pair[abi:ne180100]<quasar::language_detector::Locale&,double &,0>((std::string *)v43, (__int128 *)(v31 + 40), (std::string::size_type *)v39);
        std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_unique_key_args<quasar::language_detector::Locale,std::pair<quasar::language_detector::Locale const,double>>((uint64_t **)v9, v43, (__int128 *)v43);
        if (SHIBYTE(v44) < 0)
          operator delete(*(void **)&v43[24]);
        if ((v43[23] & 0x80000000) != 0)
          operator delete(*(void **)v43);
      }
      v32 = (double *)*((_QWORD *)v30 + 1);
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = *(double **)v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (double *)*((_QWORD *)v30 + 2);
          v19 = *(_QWORD *)v33 == (_QWORD)v30;
          v30 = v33;
        }
        while (!v19);
      }
      v30 = v33;
    }
    while (v33 != v13);
  }
  quasar::posteriorsToConfidences((uint64_t *)v9, (uint64_t)v43);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v38, *(_QWORD **)(a4 + 40));
  v34 = *(_QWORD **)&v43[8];
  *(_QWORD *)(a4 + 32) = *(_QWORD *)v43;
  *(_QWORD *)(a4 + 40) = v34;
  v35 = *(_QWORD *)&v43[16];
  *(_QWORD *)(a4 + 48) = *(_QWORD *)&v43[16];
  if (v35)
  {
    v34[2] = v36;
    *(_QWORD *)v43 = &v43[8];
    *(_OWORD *)&v43[8] = 0uLL;
    v34 = 0;
  }
  else
  {
    *v38 = v36;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v43, v34);
  if (!*(_QWORD *)(a4 + 24))
    *(_BYTE *)a4 = 0;
  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::~__hash_table((uint64_t)v41);
LABEL_61:
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v59, v60[0]);
}

void sub_1ADF538B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  quasar::LDResult *v24;
  uint64_t v25;

  std::__hash_table<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::TranslationPairSetting>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::TranslationPairSetting>>>::~__hash_table((uint64_t)&a18);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v25 - 136, *(_QWORD **)(v25 - 128));
  quasar::LDResult::~LDResult(v24);
  _Unwind_Resume(a1);
}

void quasar::localePriorsFromContext(quasar *this@<X0>, uint64_t a2@<X8>)
{
  BOOL v4;
  unint64_t v5;
  __int128 *v6;
  char *v7;
  __int128 *v8;
  __int128 *v9;
  unsigned __int8 *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  double v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  if (*((_BYTE *)this + 352))
    v4 = *((_QWORD *)this + 43) == 0;
  else
    v4 = 1;
  if (v4)
  {
    if (*((_BYTE *)this + 48) && (v5 = *((_QWORD *)this + 5)) != 0)
    {
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)a2 = a2 + 8;
      v17 = 1.0 / (double)v5;
      v6 = (__int128 *)*((_QWORD *)this + 3);
      v7 = (char *)this + 32;
      if (v6 != (__int128 *)((char *)this + 32))
      {
        do
        {
          std::pair<quasar::language_detector::Locale const,double>::pair[abi:ne180100]<quasar::language_detector::Locale const&,double &,0>((std::string *)&v18, v6 + 2, (std::string::size_type *)&v17);
          std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_unique_key_args<quasar::language_detector::Locale,std::pair<quasar::language_detector::Locale const,double>>((uint64_t **)a2, (unsigned __int8 *)&v18, &v18);
          if (SHIBYTE(v20) < 0)
            operator delete(*((void **)&v19 + 1));
          if (SBYTE7(v19) < 0)
            operator delete((void *)v18);
          v8 = (__int128 *)*((_QWORD *)v6 + 1);
          if (v8)
          {
            do
            {
              v9 = v8;
              v8 = *(__int128 **)v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              v9 = (__int128 *)*((_QWORD *)v6 + 2);
              v4 = *(_QWORD *)v9 == (_QWORD)v6;
              v6 = v9;
            }
            while (!v4);
          }
          v6 = v9;
        }
        while (v9 != (__int128 *)v7);
      }
    }
    else
    {
      std::map<quasar::language_detector::Locale,double>::map[abi:ne180100]((uint64_t *)a2, (uint64_t)this);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)a2 = a2 + 8;
    if (!*((_BYTE *)this + 48))
    {
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v26 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"If dictation priors are defined, then dictation locales must be.", 64);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v18);
    }
    v10 = (unsigned __int8 *)*((_QWORD *)this + 3);
    v11 = (char *)this + 32;
    if (v10 != (unsigned __int8 *)((char *)this + 32))
    {
      v12 = (char *)this + 328;
      v13 = (char *)this + 336;
      do
      {
        if (v13 == (char *)std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::find<quasar::language_detector::Locale>((uint64_t)v12, (unsigned __int8 **)v10 + 4))
        {
          *(_QWORD *)&v18 = v10 + 32;
          std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_unique_key_args<quasar::language_detector::Locale,std::piecewise_construct_t const&,std::tuple<quasar::language_detector::Locale const&>,std::tuple<>>((uint64_t **)a2, v10 + 32, (uint64_t)&std::piecewise_construct, (__int128 **)&v18)[10] = 0;
        }
        else
        {
          v14 = *(_QWORD *)std::map<quasar::language_detector::Locale,double>::at((uint64_t)v12, v10 + 32);
          *(_QWORD *)&v18 = v10 + 32;
          std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_unique_key_args<quasar::language_detector::Locale,std::piecewise_construct_t const&,std::tuple<quasar::language_detector::Locale const&>,std::tuple<>>((uint64_t **)a2, v10 + 32, (uint64_t)&std::piecewise_construct, (__int128 **)&v18)[10] = v14;
        }
        v15 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
        if (v15)
        {
          do
          {
            v16 = v15;
            v15 = *(unsigned __int8 **)v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = (unsigned __int8 *)*((_QWORD *)v10 + 2);
            v4 = *(_QWORD *)v16 == (_QWORD)v10;
            v10 = v16;
          }
          while (!v4);
        }
        v10 = v16;
      }
      while (v16 != (unsigned __int8 *)v11);
    }
  }
}

void sub_1ADF53BE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

double quasar::fallbackConfidenceFromContext@<D0>(quasar *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v5;
  BOOL v6;
  __int128 *v7;
  char *v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  unint64_t v12;
  double result;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  std::string::size_type v17;
  std::string v18;
  void *__p;
  char v20;

  *(_QWORD *)(a2 + 8) = 0;
  v5 = (uint64_t *)(a2 + 8);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = a2 + 8;
  if (*((_BYTE *)this + 48))
    v6 = *((_QWORD *)this + 5) == 0;
  else
    v6 = 1;
  if (v6)
  {
    if ((quasar *)a2 != this)
      std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<quasar::language_detector::Locale,double>,std::__tree_node<std::__value_type<quasar::language_detector::Locale,double>,void *> *,long>>((uint64_t **)a2, *(__int128 **)this, (__int128 *)((char *)this + 8));
  }
  else
  {
    v7 = (__int128 *)*((_QWORD *)this + 3);
    v8 = (char *)this + 32;
    if (v7 != (__int128 *)((char *)this + 32))
    {
      do
      {
        v17 = 0;
        std::pair<quasar::language_detector::Locale const,double>::pair[abi:ne180100]<quasar::language_detector::Locale const&,double,0>(&v18, v7 + 2, &v17);
        std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_unique_key_args<quasar::language_detector::Locale,std::pair<quasar::language_detector::Locale const,double>>((uint64_t **)a2, (unsigned __int8 *)&v18, (__int128 *)&v18);
        if (v20 < 0)
          operator delete(__p);
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v18.__r_.__value_.__l.__data_);
        v9 = (__int128 *)*((_QWORD *)v7 + 1);
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = *(__int128 **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (__int128 *)*((_QWORD *)v7 + 2);
            v6 = *(_QWORD *)v10 == (_QWORD)v7;
            v7 = v10;
          }
          while (!v6);
        }
        v7 = v10;
      }
      while (v10 != (__int128 *)v8);
    }
  }
  if (*((_BYTE *)this + 104))
    v11 = std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::find<quasar::language_detector::Locale>(a2, (unsigned __int8 **)this + 7);
  else
    v11 = (uint64_t)v5;
  v12 = *(_QWORD *)(a2 + 16);
  if (v5 != (uint64_t *)v11)
    ++v12;
  result = 1.0 / (double)v12;
  v14 = *(uint64_t **)a2;
  if (*(uint64_t **)a2 != v5)
  {
    do
    {
      *((double *)v14 + 10) = result;
      v15 = (uint64_t *)v14[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (uint64_t *)v14[2];
          v6 = *v16 == (_QWORD)v14;
          v14 = v16;
        }
        while (!v6);
      }
      v14 = v16;
    }
    while (v16 != v5);
  }
  if (v5 != (uint64_t *)v11)
  {
    result = result + result;
    *(double *)(v11 + 80) = result;
  }
  return result;
}

void sub_1ADF53DA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<quasar::language_detector::Locale,double>::at(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *std::__tree<quasar::language_detector::Locale>::__find_equal<quasar::language_detector::Locale>(a1, &v4, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  return v2 + 80;
}

void quasar::LDResult::~LDResult(quasar::LDResult *this)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 8, *((_QWORD **)this + 2));
}

void quasar::LDFrontend::startNewRequest(quasar::LDFrontend *this, quasar::SystemConfig *a2, quasar::LDRequestState *a3)
{
  _DWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t Ptree;
  __int128 v11;
  uint64_t v12;
  uint64_t i;
  __int128 v14;
  size_t v15;
  std::string *v16;
  quasar::LDFrontend *v17;
  std::string *v18;
  std::string::size_type size;
  std::string *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  std::string v56;
  std::string __p;
  __int128 v58;
  std::string v59;
  __int128 v60;
  char v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _BYTE v65[41];
  int v66;
  char v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  char v71;
  int v72;
  std::string v73;
  std::string v74;
  char v75;

  v6 = (_DWORD *)((char *)a3 + 52);
  std::allocate_shared[abi:ne180100]<quasar::RecogAudioBuffer,std::allocator<quasar::RecogAudioBuffer>,int &,void>((unsigned int *)a3 + 13, &v60);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a3, &v60);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  Ptree = quasar::SystemConfig::getPtree((uint64_t)a2, (uint64_t)this);
  v72 = *(_DWORD *)Ptree;
  if (*(char *)(Ptree + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v73, *(const std::string::value_type **)(Ptree + 8), *(_QWORD *)(Ptree + 16));
  }
  else
  {
    v11 = *(_OWORD *)(Ptree + 8);
    v73.__r_.__value_.__r.__words[2] = *(_QWORD *)(Ptree + 24);
    *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v11;
  }
  memset(&v74, 0, sizeof(v74));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v74, *(_QWORD *)(Ptree + 32), *(_QWORD *)(Ptree + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(Ptree + 40) - *(_QWORD *)(Ptree + 32)) >> 3));
  v75 = *(_BYTE *)(Ptree + 56);
  LODWORD(v60) = *v6;
  *((_QWORD *)&v60 + 1) = 0;
  v61 = 0;
  v66 = 0;
  v67 = 0;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  memset(v65, 0, sizeof(v65));
  v68 = 0u;
  v69 = 0u;
  v70 = 0;
  v71 = 1;
  v12 = quasar::PTree::begin((quasar::PTree *)&v72);
  for (i = quasar::PTree::end((quasar::PTree *)&v72); v12 != i; v12 += 88)
  {
    if (*(char *)(v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)v12, *(_QWORD *)(v12 + 8));
    }
    else
    {
      v14 = *(_OWORD *)v12;
      v59.__r_.__value_.__r.__words[2] = *(_QWORD *)(v12 + 16);
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v14;
    }
    if (*((char *)this + 23) >= 0)
      v15 = *((unsigned __int8 *)this + 23);
    else
      v15 = *((_QWORD *)this + 1);
    std::string::basic_string[abi:ne180100]((uint64_t)&v56, v15 + 1);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v56;
    else
      v16 = (std::string *)v56.__r_.__value_.__r.__words[0];
    if (v15)
    {
      if (*((char *)this + 23) >= 0)
        v17 = this;
      else
        v17 = *(quasar::LDFrontend **)this;
      memmove(v16, v17, v15);
    }
    *(_WORD *)((char *)&v16->__r_.__value_.__l.__data_ + v15) = 46;
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v59;
    else
      v18 = (std::string *)v59.__r_.__value_.__r.__words[0];
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
    else
      size = v59.__r_.__value_.__l.__size_;
    v20 = std::string::append(&v56, (const std::string::value_type *)v18, size);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    quasar::FeatureExtractorSimpleFactory::createFeatureExtractor(&__p, &v58);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    quasar::FeatureExtractor::init((quasar::FeatureExtractor *)v58, a2);
    std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100]((char **)a3 + 18, &v58);
    v22 = v58;
    if (*(_QWORD *)a3)
      v23 = *(_QWORD *)a3 + 16;
    else
      v23 = 0;
    v24 = (std::__shared_weak_count *)*((_QWORD *)a3 + 17);
    v54 = *((_QWORD *)a3 + 16);
    v55 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(p_shared_owners);
      while (__stxr(v26 + 1, p_shared_owners));
    }
    quasar::FeatureExtractor::createOnlineFeInput(v22, v23, &v54);
    v27 = v55;
    if (v55)
    {
      v28 = (unint64_t *)&v55->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100]((char **)a3 + 21, (__int128 *)&__p);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)a3 + 16, (uint64_t *)(*((_QWORD *)a3 + 22) - 16));
    v30 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v31 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v33 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
    if (*((_QWORD *)&v58 + 1))
    {
      v34 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)a3 + 2, (uint64_t *)a3 + 16);
  if (SHIBYTE(v70) < 0)
    operator delete((void *)v69);
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
  if (*((_QWORD *)&v68 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = *(std::__shared_weak_count **)&v65[32];
  if (*(_QWORD *)&v65[32])
  {
    v40 = (unint64_t *)(*(_QWORD *)&v65[32] + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v65;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
  if (*((_QWORD *)&v64 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
  if (*((_QWORD *)&v63 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = *((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
  }
  quasar::PTree::~PTree((quasar::PTree *)&v72);
}

void sub_1ADF54394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33)
{
  uint64_t v33;

  quasar::FeatureExtractorArgs::~FeatureExtractorArgs(&a33);
  quasar::PTree::~PTree((quasar::PTree *)(v33 - 168));
  _Unwind_Resume(a1);
}

void quasar::ContextAwareLDModelConfig::registerParams(quasar::ContextAwareLDModelConfig *this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "path to the model file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this, (uint64_t)__p, 1, 122, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "supported-locales");
  std::string::basic_string[abi:ne180100]<0>(__p, "the locales understood by the model");
  quasar::SystemConfig::Register<std::vector<std::string>>((uint64_t)a2, (const void **)v6, (uint64_t)this + 152, (uint64_t)__p, 1, 122, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "supported-languages");
  std::string::basic_string[abi:ne180100]<0>(__p, "the languages understood by the model");
  quasar::SystemConfig::Register<std::vector<std::string>>((uint64_t)a2, (const void **)v6, (uint64_t)this + 48, (uint64_t)__p, 1, 122, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "model-file-format");
  std::string::basic_string[abi:ne180100]<0>(__p, "the format of the model file, must be \"core-ml\"");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 72, (uint64_t)__p, 1, 122, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "model-input-names");
  std::string::basic_string[abi:ne180100]<0>(__p, "the input features expected by the model");
  quasar::SystemConfig::Register<std::vector<std::string>>((uint64_t)a2, (const void **)v6, (uint64_t)this + 96, (uint64_t)__p, 1, 122, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "model-output-name");
  std::string::basic_string[abi:ne180100]<0>(__p, "the output feature that contains the locale posteriors");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 120, (uint64_t)__p, 1, 122, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "use-cpu-only");
  std::string::basic_string[abi:ne180100]<0>(__p, "Only use the CPU for inference");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 144, (uint64_t)__p, 0, 124, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADF54760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ContextAwareLDModelConfig::init(quasar::ContextAwareLDModelConfig *this)
{
  char *v2;
  uint64_t v3;
  int *v4;
  int v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  const void **v9;
  unsigned __int8 **v10;
  unint64_t v11;
  uint64_t v12;
  const std::string *v13;
  std::vector<std::string>::const_iterator v14;
  std::vector<std::string>::const_iterator v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD v31[5];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 72;
  if (*((char *)this + 95) < 0)
  {
    v4 = (int *)*((_QWORD *)this + 9);
    v3 = *((_QWORD *)this + 10);
  }
  else
  {
    v3 = *((unsigned __int8 *)this + 95);
    v4 = (int *)((char *)this + 72);
  }
  if (v3 != 7
    || ((v5 = *v4, v6 = *(int *)((char *)v4 + 3), v5 == 1701998435) ? (v7 = v6 == 1819094373) : (v7 = 0), !v7))
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v38 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Invalid model file format \"", 27);
    v27 = *((char *)this + 95);
    if (v27 >= 0)
      v28 = (uint64_t)v2;
    else
      v28 = *((_QWORD *)this + 9);
    if (v27 >= 0)
      v29 = *((unsigned __int8 *)this + 95);
    else
      v29 = *((_QWORD *)this + 10);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v30, "\"");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v32);
  }
  std::vector<quasar::language_detector::Locale>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>>((std::vector<std::pair<std::string, std::string>> *)this + 1, *((_QWORD *)this + 19), *((_QWORD *)this + 20), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 3));
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 19);
  v8 = *((_QWORD *)this + 12);
  v10 = (unsigned __int8 **)((char *)this + 104);
  v9 = (const void **)*((_QWORD *)this + 13);
  v11 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - v8) >> 3));
  if (v9 == (const void **)v8)
    v12 = 0;
  else
    v12 = v11;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(v8, v9, (uint64_t)&v32, v12, 1);
  v13 = (const std::string *)std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::__equal_to &>(*((unsigned __int8 **)this + 12), *v10, (uint64_t)&v32);
  v14.__i_ = (std::__wrap_iter<const std::string *>::iterator_type)*v10;
  if (*v10 != (unsigned __int8 *)v13)
  {
    if (quasar::gLogLevel >= 5)
    {
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v38 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Model input names contains duplicates", 37);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v32);
      v14.__i_ = (std::__wrap_iter<const std::string *>::iterator_type)*((_QWORD *)this + 13);
    }
    v15.__i_ = v13;
    std::vector<std::string>::erase((std::vector<std::string> *)this + 4, v15, v14);
  }
  v38 = xmmword_1E5D48FB8;
  v39 = *(_OWORD *)&off_1E5D48FC8;
  v40 = xmmword_1E5D48FD8;
  v41 = *(_OWORD *)&off_1E5D48FE8;
  v34 = xmmword_1E5D48F78;
  v35 = *(_OWORD *)&off_1E5D48F88;
  v36 = xmmword_1E5D48F98;
  v37 = *(_OWORD *)&off_1E5D48FA8;
  v32 = xmmword_1E5D48F58;
  v33 = *(_OWORD *)&off_1E5D48F68;
  std::unordered_set<std::string_view>::unordered_set((uint64_t)v31, &v32, 10);
  v17 = *((_QWORD *)this + 12);
  v16 = *((_QWORD *)this + 13);
  while (v17 != v16)
  {
    if (*(char *)(v17 + 23) < 0)
    {
      v19 = *(_QWORD *)v17;
      v18 = *(_QWORD *)(v17 + 8);
    }
    else
    {
      v18 = *(unsigned __int8 *)(v17 + 23);
      v19 = v17;
    }
    *(_QWORD *)&v32 = v19;
    *((_QWORD *)&v32 + 1) = v18;
    if (!std::__hash_table<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>::find<std::string_view>(v31, (uint64_t)&v32))
    {
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v38 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Invalid context-aware input feature name \"", 42);
      v22 = *(char *)(v17 + 23);
      if (v22 >= 0)
        v23 = v17;
      else
        v23 = *(_QWORD *)v17;
      if (v22 >= 0)
        v24 = *(unsigned __int8 *)(v17 + 23);
      else
        v24 = *(_QWORD *)(v17 + 8);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"\"", 1);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v32);
    }
    v17 += 24;
  }
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v31);
}

void sub_1ADF54B10(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1ADF54B20(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)va);
  JUMPOUT(0x1ADF54B2CLL);
}

_QWORD *quasar::LanguageDetector::LanguageDetector(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void **v13;

  v8 = *a3;
  *a3 = 0;
  a1[2] = 0;
  *a1 = v8;
  a1[1] = a1 + 2;
  a1[3] = 0;
  a1[5] = 0;
  a1[4] = a1 + 5;
  a1[6] = 0;
  v9 = *a4;
  *a4 = 0;
  a1[10] = 0;
  a1[9] = a1 + 10;
  a1[7] = v9;
  a1[8] = 0;
  a1[11] = 0;
  v10 = (uint64_t)(a1 + 12);
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)(a1 + 12));
  memset(v12, 0, sizeof(v12));
  quasar::SystemConfig::readJsonFile(v10, a2, v12, a5, 0, 0);
  v13 = (void **)v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v13);
  return a1;
}

void sub_1ADF54C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  quasar::SystemConfig *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  quasar::SystemConfig::~SystemConfig(v8);
  std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::destroy(v7, (_QWORD *)v4[10]);
  v10 = v4[8];
  v4[8] = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = v4[7];
  v4[7] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  std::__tree<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>>>::destroy(v6, (_QWORD *)v4[5]);
  std::__tree<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>>>::destroy(v5, (_QWORD *)v4[2]);
  v12 = *v4;
  *v4 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
  _Unwind_Resume(a1);
}

uint64_t quasar::LanguageDetector::init(uint64_t **this)
{
  quasar::SystemConfig *v2;
  uint64_t Ptree;
  __int128 v4;
  const std::string *v5;
  uint64_t v6;
  std::string *v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int *v12;
  std::string *v13;
  __int128 v14;
  int *v15;
  std::string::size_type v16;
  uint64_t **v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t PtreeOptional;
  quasar::PTree *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  const std::string *String;
  char *v30;
  std::string::size_type size;
  void **v32;
  std::string *v33;
  char *v34;
  __n128 v35;
  uint64_t *v36;
  uint64_t *v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  std::string *v44;
  std::string::size_type v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *v51[2];
  _OWORD v52[2];
  __int128 v53;
  void *v54[2];
  __int128 v55;
  __int128 v56;
  void *v57[2];
  __int128 v58;
  char v59;
  _QWORD v60[4];
  std::string v61;
  int *v62;
  std::__shared_weak_count *v63;
  void *__p[2];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  int v81;
  int v82;
  std::string v83;
  std::string v84;
  char v85;
  int *v86;

  v2 = (quasar::SystemConfig *)(this + 12);
  std::string::basic_string[abi:ne180100]<0>(__p, "language-detectors");
  Ptree = quasar::SystemConfig::getPtree((uint64_t)v2, (uint64_t)__p);
  v82 = *(_DWORD *)Ptree;
  if (*(char *)(Ptree + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)(Ptree + 8), *(_QWORD *)(Ptree + 16));
  }
  else
  {
    v4 = *(_OWORD *)(Ptree + 8);
    v83.__r_.__value_.__r.__words[2] = *(_QWORD *)(Ptree + 24);
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v4;
  }
  memset(&v84, 0, sizeof(v84));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v84, *(_QWORD *)(Ptree + 32), *(_QWORD *)(Ptree + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(Ptree + 40) - *(_QWORD *)(Ptree + 32)) >> 3));
  v85 = *(_BYTE *)(Ptree + 56);
  if (SBYTE7(v65) < 0)
    operator delete(__p[0]);
  v5 = (const std::string *)quasar::PTree::begin((quasar::PTree *)&v82);
  v6 = quasar::PTree::end((quasar::PTree *)&v82);
  if (v5 == (const std::string *)v6)
  {
LABEL_39:
    __p[0] = (void *)quasar::SystemConfig::getConfigFileVersion(v2);
    quasar::SystemConfig::Version::Version(v51, 118, 0);
    if (!quasar::SystemConfig::Version::operator>=(__p, v51))
      goto LABEL_54;
    std::string::basic_string[abi:ne180100]<0>(__p, "override-locale-language-map");
    PtreeOptional = quasar::SystemConfig::getPtreeOptional((uint64_t)v2, (uint64_t)__p);
    v25 = (quasar::PTree *)PtreeOptional;
    if (SBYTE7(v65) < 0)
    {
      operator delete(__p[0]);
      if (!v25)
        goto LABEL_54;
    }
    else if (!PtreeOptional)
    {
      goto LABEL_54;
    }
    v27 = quasar::PTree::begin(v25);
    for (i = quasar::PTree::end(v25); v27 != i; v27 += 88)
    {
      String = (const std::string *)quasar::PTree::getString((quasar::PTree *)(v27 + 24));
      quasar::language_detector::Locale::Locale(__p, v27);
      v51[0] = __p;
      v30 = std::__tree<std::__value_type<quasar::language_detector::Locale,std::string>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,std::string>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,std::string>>>::__emplace_unique_key_args<quasar::language_detector::Locale,std::piecewise_construct_t const&,std::tuple<quasar::language_detector::Locale&&>,std::tuple<>>(this + 9, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)v51);
      std::string::operator=((std::string *)(v30 + 80), String);
      if (SHIBYTE(v66) < 0)
        operator delete(*((void **)&v65 + 1));
      if (SBYTE7(v65) < 0)
        operator delete(__p[0]);
    }
LABEL_54:
    std::string::basic_string[abi:ne180100]<0>(&v61, "ld-context-aware-model");
    if (quasar::SystemConfig::hasParam((uint64_t)v2, (uint64_t)&v61))
    {
      if (this[7])
      {
        memset(v60, 0, 24);
        *(_OWORD *)v51 = 0u;
        memset(v52, 0, sizeof(v52));
        v53 = 0u;
        *(_OWORD *)v54 = 0u;
        v55 = 0u;
        v56 = 0u;
        *(_OWORD *)v57 = 0u;
        v58 = 0u;
        v59 = 0;
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
        else
          size = v61.__r_.__value_.__l.__size_;
        v32 = __p;
        std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 1);
        if (SBYTE7(v65) < 0)
          v32 = (void **)__p[0];
        if (size)
        {
          if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v33 = &v61;
          else
            v33 = (std::string *)v61.__r_.__value_.__r.__words[0];
          memmove(v32, v33, size);
        }
        *(_WORD *)((char *)v32 + size) = 46;
        quasar::SystemConfig::setPrefix((std::string *)v2, (const std::string *)__p);
        if (SBYTE7(v65) < 0)
          operator delete(__p[0]);
        quasar::ContextAwareLDModelConfig::registerParams((quasar::ContextAwareLDModelConfig *)v51, v2);
        quasar::SystemConfig::readPtree((uint64_t)v2, (uint64_t)&v61, 1u, 0);
        quasar::ContextAwareLDModelConfig::init((quasar::ContextAwareLDModelConfig *)v51);
        v34 = (char *)operator new(0xC8uLL);
        *((_QWORD *)v34 + 2) = 0;
        *(_QWORD *)v34 = &unk_1E5D40C00;
        *((_QWORD *)v34 + 1) = 0;
        v35 = std::allocator<quasar::ContextAwareLDModelConfig const>::construct[abi:ne180100]<quasar::ContextAwareLDModelConfig const,quasar::ContextAwareLDModelConfig>((uint64_t)__p, (uint64_t)(v34 + 24), (__int128 *)v51);
        v62 = (int *)(v34 + 24);
        v63 = (std::__shared_weak_count *)v34;
        (*(void (**)(void **__return_ptr, uint64_t *, int **, __n128))*this[7])(__p, this[7], &v62, v35);
        v36 = (uint64_t *)__p[0];
        __p[0] = 0;
        v37 = this[8];
        this[8] = v36;
        if (v37)
        {
          (*(void (**)(uint64_t *))(*v37 + 8))(v37);
          v38 = __p[0];
          __p[0] = 0;
          if (v38)
            (*(void (**)(void *))(*(_QWORD *)v38 + 8))(v38);
          v36 = this[8];
        }
        if (v36)
        {
          v39 = v63;
          if (v63)
          {
            p_shared_owners = (unint64_t *)&v63->__shared_owners_;
            do
              v41 = __ldaxr(p_shared_owners);
            while (__stlxr(v41 - 1, p_shared_owners));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          __p[0] = v60;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          if (SHIBYTE(v58) < 0)
            operator delete(v57[1]);
          __p[0] = &v56;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          if (SHIBYTE(v55) < 0)
            operator delete(v54[1]);
          __p[0] = &v53;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          __p[0] = (char *)v52 + 8;
          std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
          if (SBYTE7(v52[0]) < 0)
            operator delete(v51[0]);
LABEL_86:
          v26 = 1;
          goto LABEL_109;
        }
        if (quasar::gLogLevel >= 1)
        {
          v79 = 0u;
          v80 = 0u;
          v77 = 0u;
          v78 = 0u;
          v75 = 0u;
          v76 = 0u;
          v73 = 0u;
          v74 = 0u;
          v71 = 0u;
          v72 = 0u;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v65 = 0u;
          v66 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Something went wrong initializing the ContextAwareLDModelConfig.", 64);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
        }
        v47 = v63;
        if (v63)
        {
          v48 = (unint64_t *)&v63->__shared_owners_;
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
          if (!v49)
          {
            ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
            std::__shared_weak_count::__release_weak(v47);
          }
        }
        __p[0] = v60;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (SHIBYTE(v58) < 0)
          operator delete(v57[1]);
        __p[0] = &v56;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (SHIBYTE(v55) < 0)
          operator delete(v54[1]);
        __p[0] = &v53;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        __p[0] = (char *)v52 + 8;
        std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (SBYTE7(v52[0]) < 0)
          operator delete(v51[0]);
      }
      else if (quasar::gLogLevel >= 1)
      {
        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        v75 = 0u;
        v76 = 0u;
        v73 = 0u;
        v74 = 0u;
        v71 = 0u;
        v72 = 0u;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v44 = &v61;
        else
          v44 = (std::string *)v61.__r_.__value_.__r.__words[0];
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v45 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
        else
          v45 = v61.__r_.__value_.__l.__size_;
        v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v44, v45);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)" found in config file, but no ContextAwareLDModelFactory was provided.", 70);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
      }
      v26 = 0;
LABEL_109:
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      goto LABEL_111;
    }
    v42 = (uint64_t *)operator new();
    *v42 = (uint64_t)&off_1E5D395F0;
    v43 = this[8];
    this[8] = v42;
    if (v43)
      (*(void (**)(uint64_t *))(*v43 + 8))(v43);
    goto LABEL_86;
  }
  while (1)
  {
    v81 = 0;
    v81 = std::stoi(v5, 0, 10);
    v7 = (std::string *)quasar::PTree::getString((quasar::PTree *)&v5[1]);
    std::string::basic_string[abi:ne180100]<0>(__p, "::");
    quasar::splitAndTrim(v7, (char *)__p, (uint64_t *)v51);
    if (SBYTE7(v65) < 0)
      operator delete(__p[0]);
    if ((void *)((char *)v51[1] - (char *)v51[0]) != (void *)48)
      break;
    std::operator+<char>();
    std::allocate_shared[abi:ne180100]<quasar::LDFrontend const,std::allocator<quasar::LDFrontend const>,std::string,void>((__int128 *)__p, &v61);
    v62 = &v81;
    v8 = std::__tree<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::__map_value_compare<quasar::MultiAudioBuffer::BufferId,std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::less<quasar::MultiAudioBuffer::BufferId>,true>,std::allocator<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>>>::__emplace_unique_key_args<quasar::MultiAudioBuffer::BufferId,std::piecewise_construct_t const&,std::tuple<quasar::MultiAudioBuffer::BufferId const&>,std::tuple<>>(this + 1, &v81, (uint64_t)&std::piecewise_construct, &v62);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(v8 + 5), (__int128 *)&v61);
    v9 = (std::__shared_weak_count *)v61.__r_.__value_.__l.__size_;
    if (v61.__r_.__value_.__l.__size_)
    {
      v10 = (unint64_t *)(v61.__r_.__value_.__l.__size_ + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (SBYTE7(v65) < 0)
      operator delete(__p[0]);
    _ZNSt3__115allocate_sharedB8ne180100IN6quasar8LDConfigENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v62);
    v12 = v62;
    std::operator+<char>();
    v13 = std::string::append(&v61, ".");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    *(_QWORD *)&v65 = *((_QWORD *)&v13->__r_.__value_.__l + 2);
    *(_OWORD *)__p = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    quasar::LDConfig::registerParams((uint64_t)v12, v2, (const std::string *)__p);
    if (SBYTE7(v65) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v61.__r_.__value_.__l.__data_);
    v15 = v62;
    std::operator+<char>();
    quasar::LDConfig::init((uint64_t)v15, (uint64_t)v2, (uint64_t)__p);
    if (SBYTE7(v65) < 0)
      operator delete(__p[0]);
    (*(void (**)(std::string *__return_ptr, uint64_t *, int **))**this)(&v61, *this, &v62);
    v16 = v61.__r_.__value_.__r.__words[0];
    if (v61.__r_.__value_.__r.__words[0])
    {
      v86 = &v81;
      v17 = std::__tree<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::__map_value_compare<quasar::MultiAudioBuffer::BufferId,std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,std::less<quasar::MultiAudioBuffer::BufferId>,true>,std::allocator<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>>>::__emplace_unique_key_args<quasar::MultiAudioBuffer::BufferId,std::piecewise_construct_t const&,std::tuple<quasar::MultiAudioBuffer::BufferId const&>,std::tuple<>>(this + 4, &v81, (uint64_t)&std::piecewise_construct, &v86);
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v17 + 5, (uint64_t *)&v61);
    }
    else if (quasar::gLogLevel >= 1)
    {
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v73 = 0u;
      v74 = 0u;
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Something went wrong initializing the model.", 44);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
    v18 = (std::__shared_weak_count *)v61.__r_.__value_.__l.__size_;
    if (v61.__r_.__value_.__l.__size_)
    {
      v19 = (unint64_t *)(v61.__r_.__value_.__l.__size_ + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v63;
    if (v63)
    {
      v22 = (unint64_t *)&v63->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    __p[0] = v51;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (!v16)
      goto LABEL_46;
    v5 = (const std::string *)((char *)v5 + 88);
    if (v5 == (const std::string *)v6)
      goto LABEL_39;
  }
  if (quasar::gLogLevel >= 1)
  {
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Configuration is incorrect. Only two components are supported.", 62);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
  }
  __p[0] = v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_46:
  v26 = 0;
LABEL_111:
  quasar::PTree::~PTree((quasar::PTree *)&v82);
  return v26;
}

void sub_1ADF55660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a42);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a40);
  quasar::ContextAwareLDModelConfig::~ContextAwareLDModelConfig(&a11);
  if (a39 < 0)
    operator delete(__p);
  quasar::PTree::~PTree((quasar::PTree *)(v47 - 168));
  _Unwind_Resume(a1);
}

void sub_1ADF5584C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::pair<std::string,std::string>::~pair((uint64_t)&a39);
  JUMPOUT(0x1ADF5583CLL);
}

void quasar::ContextAwareLDModelConfig::~ContextAwareLDModelConfig(void **this)
{
  void **v2;

  v2 = this + 19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  v2 = this + 12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  v2 = this + 6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 3;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void quasar::LanguageDetector::startRequest(_QWORD *a1@<X0>, int a2@<W1>, quasar::LDContext ***a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  const quasar::LDContext *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  uint64_t *v19;
  _QWORD *v20;
  quasar::SystemConfig *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  void **v25;
  int *v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  char v31;
  char v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD **v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40[2];
  char v41;
  void *v42[2];
  char v43;
  void *__p[2];
  char v45;
  std::string v46;
  _QWORD **v47;
  _QWORD *v48[2];
  _BYTE v49[64];
  void *v50[2];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  int v67;

  v67 = a2;
  if (quasar::gLogLevel >= 4)
  {
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    *(_OWORD *)v50 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Resetting for new request.", 26);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v50);
  }
  quasar::LDContext::logContext(*a3);
  quasar::PTree::PTree((quasar::PTree *)v49);
  v10 = a1[2];
  if (!v10)
    goto LABEL_23;
  v11 = a1 + 2;
  do
  {
    v12 = *(_DWORD *)(v10 + 32);
    v13 = v12 < v67;
    if (v12 >= v67)
      v14 = (uint64_t *)v10;
    else
      v14 = (uint64_t *)(v10 + 8);
    if (!v13)
      v11 = (_QWORD *)v10;
    v10 = *v14;
  }
  while (*v14);
  if (v11 == a1 + 2)
    goto LABEL_23;
  if (v67 < *((_DWORD *)v11 + 8))
    goto LABEL_23;
  v15 = a1[5];
  if (!v15)
    goto LABEL_23;
  v16 = a1 + 5;
  do
  {
    v17 = *(_DWORD *)(v15 + 32);
    v18 = v17 < v67;
    if (v17 >= v67)
      v19 = (uint64_t *)v15;
    else
      v19 = (uint64_t *)(v15 + 8);
    if (!v18)
      v16 = (_QWORD *)v15;
    v15 = *v19;
  }
  while (*v19);
  if (v16 != a1 + 5 && v67 >= *((_DWORD *)v16 + 8))
  {
    quasar::LanguageDetector::checkContext((uint64_t)*a3, v9);
    _ZNSt3__115allocate_sharedB8ne180100IN6quasar14LDRequestStateENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a5);
    v21 = (quasar::SystemConfig *)(a1 + 12);
    v50[0] = (void *)quasar::SystemConfig::getConfigFileVersion((quasar::SystemConfig *)(a1 + 12));
    quasar::SystemConfig::Version::Version(v42, 118, 0);
    if (quasar::SystemConfig::Version::operator<(v50, v42))
    {
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      *(_OWORD *)v50 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Version 118 or greater is required.", 35);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v50);
    }
    *(_DWORD *)(*a5 + 52) = v67;
    v22 = std::map<int,std::set<int>>::at((uint64_t)(a1 + 1), &v67);
    v23 = std::map<int,std::set<int>>::at((uint64_t)(a1 + 4), &v67);
    v24 = *v23;
    quasar::LDFrontend::startNewRequest((quasar::LDFrontend *)*v22, v21, (quasar::LDRequestState *)*a5);
    v25 = (void **)(*a5 + 104);
    *(_QWORD *)(*a5 + 112) = *v25;
    v26 = *(int **)(v24 + 8);
    v27 = *v26;
    v28 = v26[2];
    if (*v26 < 0)
    {
      v30 = v26[49];
      if (v30 > 0)
        v27 = v30;
      std::vector<float>::reserve(v25, v27 * v28);
      v29 = *a5;
      *(_DWORD *)(*a5 + 48) = *(_DWORD *)(*(_QWORD *)(v24 + 8) + 4);
    }
    else
    {
      std::vector<float>::reserve(v25, v28 * v27);
      v29 = *a5;
    }
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(v29 + 32), a4);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(*a5 + 192), (uint64_t *)a3);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(*a5 + 208), v23);
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v23 + 16))(*v23);
    if (quasar::gLogLevel < 4)
      v32 = 1;
    else
      v32 = v31;
    if ((v32 & 1) == 0)
    {
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      *(_OWORD *)v50 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Unable to reset model.", 22);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v50);
    }
    quasar::localePriorsFromContext((quasar *)*a3, (uint64_t)&v47);
    v33 = v47;
    if (v47 != v48)
    {
      do
      {
        quasar::PTree::PTree((quasar::PTree *)v50);
        quasar::language_detector::Locale::getSiriLocaleStr((quasar::language_detector::Locale *)(v33 + 4), &v46);
        std::string::basic_string[abi:ne180100]<0>(__p, "languageCode");
        quasar::PTree::PTree(v42, &v46);
        quasar::PTree::putChild((uint64_t)v50, (uint64_t)__p, (uint64_t)v42, 1);
        quasar::PTree::~PTree((quasar::PTree *)v42);
        if (v45 < 0)
          operator delete(__p[0]);
        quasar::PTree::addChild((quasar::PTree *)v49, (const quasar::PTree *)v50);
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v46.__r_.__value_.__l.__data_);
        quasar::PTree::~PTree((quasar::PTree *)v50);
        v34 = (_QWORD *)v33[1];
        if (v34)
        {
          do
          {
            v35 = (_QWORD **)v34;
            v34 = (_QWORD *)*v34;
          }
          while (v34);
        }
        else
        {
          do
          {
            v35 = (_QWORD **)v33[2];
            v36 = *v35 == v33;
            v33 = v35;
          }
          while (!v36);
        }
        v33 = v35;
      }
      while (v35 != v48);
    }
    v37 = *a5;
    std::string::basic_string[abi:ne180100]<0>(v50, "localeSpecificMetrics");
    quasar::PTree::putChild(v37 + 224, (uint64_t)v50, (uint64_t)v49, 1);
    if (SBYTE7(v51) < 0)
      operator delete(v50[0]);
    v38 = *a5;
    std::string::basic_string[abi:ne180100]<0>(v40, "numAcousticRuns");
    quasar::LDLoggingInfo::addIntValue(v38 + 224, (uint64_t)v40, 0);
    if (v41 < 0)
      operator delete(v40[0]);
    v39 = *a5;
    std::string::basic_string[abi:ne180100]<0>(v42, "acousticScores");
    quasar::PTree::PTree((quasar::PTree *)v50);
    quasar::PTree::putChild(v39 + 224, (uint64_t)v42, (uint64_t)v50, 1);
    quasar::PTree::~PTree((quasar::PTree *)v50);
    if (v43 < 0)
      operator delete(v42[0]);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v47, v48[0]);
  }
  else
  {
LABEL_23:
    if (quasar::gLogLevel >= 1)
    {
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      *(_OWORD *)v50 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"Invalid sampling rate ", 22);
      v20 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"given.", 6);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v50);
    }
    *a5 = 0;
    a5[1] = 0;
  }
  quasar::PTree::~PTree((quasar::PTree *)v49);
}

void sub_1ADF55E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a49);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v54);
  quasar::PTree::~PTree((quasar::PTree *)&a41);
  _Unwind_Resume(a1);
}

void sub_1ADF55F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a37);
  JUMPOUT(0x1ADF55F44);
}

uint64_t quasar::LanguageDetector::checkContext(uint64_t this, const quasar::LDContext *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  if (!this)
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v5 = 0u;
    v6 = 0u;
    v3 = 0u;
    v4 = 0u;
    v2 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v2, "No context.");
    goto LABEL_10;
  }
  if ((!*(_BYTE *)(this + 352) || !*(_QWORD *)(this + 344))
    && (!*(_BYTE *)(this + 48) || !*(_QWORD *)(this + 40))
    && !*(_QWORD *)(this + 16))
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v5 = 0u;
    v6 = 0u;
    v3 = 0u;
    v4 = 0u;
    v2 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v2, "Empty priors.");
LABEL_10:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v2);
  }
  return this;
}

uint64_t quasar::LanguageDetector::processAudio(quasar::LanguageDetector *this, quasar::LDRequestState *a2)
{
  quasar::LDRequestState *v2;
  double Seconds;
  double v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t (***v8)(_QWORD, _QWORD *);
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *v17;
  _DWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  char v27;
  int v28;
  int v29;
  _QWORD *v30;
  clockid_t v31;
  double v32;
  double Double;
  double v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  quasar *v39;
  unsigned int v40;
  unsigned int v42;
  uint64_t v43;
  int v44;
  int v45;
  void *v46[2];
  char v47;
  void *v48[2];
  char v49;
  void *v50[2];
  char v51;
  void *v52[2];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 __p;
  char *v70;
  _QWORD v71[6];
  _QWORD v72[2];
  int v73;
  void *v74[2];
  char v75;
  void *v76[2];
  char v77;

  v2 = a2;
  Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, (clockid_t)a2);
  v4 = *((double *)v2 + 38);
  std::string::basic_string[abi:ne180100]<0>(v76, "acousticLatency");
  quasar::LDLoggingInfo::addDoubleValue((quasar::LDRequestState *)((char *)v2 + 224), (uint64_t)v76, 0.0);
  if (v77 < 0)
    operator delete(v76[0]);
  std::string::basic_string[abi:ne180100]<0>(v74, "contextModelLatency");
  quasar::LDLoggingInfo::addDoubleValue((quasar::LDRequestState *)((char *)v2 + 224), (uint64_t)v74, 0.0);
  v39 = (quasar::LDRequestState *)((char *)v2 + 224);
  if (v75 < 0)
    operator delete(v74[0]);
  v5 = Seconds - v4;
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 2) + 8))(*((_QWORD *)v2 + 2));
  v42 = v6;
  kaldi::Matrix<float>::Matrix((uint64_t)v72, 1, v6, 0, 0);
  v7 = 0;
  v43 = (uint64_t)v2;
  do
  {
    v8 = (uint64_t (***)(_QWORD, _QWORD *))*((_QWORD *)v2 + 2);
    kaldi::OnlineFeatInputItfIO::OnlineFeatInputItfIO(v71, (uint64_t)v72, 0, 0, 0, 0, 0);
    v45 = (**v8)(v8, v71);
    v9 = kaldi::MatrixBase<float>::NumRows((uint64_t)v72);
    v10 = v9;
    v44 = v9 - 1;
    if (v9 < 1)
    {
      if ((v45 & 1) == 0)
      {
        __p = 0uLL;
        v70 = 0;
        quasar::LanguageDetector::getAcousticResult((uint64_t)&__p, 0, v42, (uint64_t)v2, 0, (uint64_t)v52);
        if ((_QWORD)__p)
        {
          *((_QWORD *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        quasar::LanguageDetector::processAcousticResult((uint64_t)this, (uint64_t)v2, (uint64_t)v52);
        std::__tree<std::string>::destroy((uint64_t)&v52[1], (char *)v53);
      }
      v29 = 1;
    }
    else
    {
      v11 = 0;
      v40 = v7 + v9;
      while (1)
      {
        v12 = v72[0];
        v13 = v73;
        kaldi::MatrixBase<float>::NumCols((uint64_t)v72);
        v14 = 0;
        v15 = v12 + 4 * v13 * v11;
        v16 = 4 * kaldi::MatrixBase<float>::NumCols((uint64_t)v72);
        __p = 0uLL;
        v70 = 0;
        while (v14 < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v72))
        {
          v17 = (char *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1) >= (unint64_t)v70)
          {
            v19 = (char *)__p;
            v20 = (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 2;
            v21 = v20 + 1;
            if ((unint64_t)(v20 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v22 = (uint64_t)&v70[-__p];
            if ((uint64_t)&v70[-__p] >> 1 > v21)
              v21 = v22 >> 1;
            if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
              v23 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v23 = v21;
            if (v23)
            {
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v70, v23);
              v17 = (char *)*((_QWORD *)&__p + 1);
              v19 = (char *)__p;
            }
            else
            {
              v24 = 0;
            }
            v25 = &v24[4 * v20];
            *(_DWORD *)v25 = *(_DWORD *)(v15 + 4 * v14);
            v18 = v25 + 4;
            while (v17 != v19)
            {
              v26 = *((_DWORD *)v17 - 1);
              v17 -= 4;
              *((_DWORD *)v25 - 1) = v26;
              v25 -= 4;
            }
            *(_QWORD *)&__p = v25;
            *((_QWORD *)&__p + 1) = v18;
            v70 = &v24[4 * v23];
            if (v19)
              operator delete(v19);
          }
          else
          {
            **((_DWORD **)&__p + 1) = *(_DWORD *)(v15 + 4 * v14);
            v18 = v17 + 4;
          }
          *((_QWORD *)&__p + 1) = v18;
          ++v14;
        }
        if (v11 < v44)
          v27 = 1;
        else
          v27 = v45;
        quasar::LanguageDetector::getAcousticResult((uint64_t)&__p, v16, v42, v43, v27, (uint64_t)v52);
        v28 = quasar::LanguageDetector::processAcousticResult((uint64_t)this, v43, (uint64_t)v52);
        std::__tree<std::string>::destroy((uint64_t)&v52[1], (char *)v53);
        if ((_QWORD)__p)
        {
          *((_QWORD *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        v7 = (v7 + 1);
        if ((v28 & 1) != 0)
          break;
        if (++v11 == v10)
        {
          v7 = v40;
          break;
        }
      }
      v29 = v28 ^ 1;
      v2 = (quasar::LDRequestState *)v43;
    }
  }
  while ((v45 & v29 & 1) != 0);
  if (quasar::gLogLevel >= 4)
  {
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v56 = 0u;
    v54 = 0u;
    v55 = 0u;
    *(_OWORD *)v52 = 0u;
    v53 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Processed ", 10);
    v30 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" frames of audio.", 17);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v52);
  }
  std::string::basic_string[abi:ne180100]<0>(v50, "numFramesProcessed");
  quasar::LDLoggingInfo::addIntValue((uint64_t)v39, (uint64_t)v50, (quasar *)v7);
  if (v51 < 0)
    operator delete(v50[0]);
  std::string::basic_string[abi:ne180100]<0>(v48, "totalWallTime");
  v32 = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v31);
  quasar::LDLoggingInfo::addDoubleValue(v39, (uint64_t)v48, (v32 - *((double *)v2 + 38) - v5) * 1000.0);
  if (v49 < 0)
    operator delete(v48[0]);
  std::string::basic_string[abi:ne180100]<0>(v46, "latency");
  std::string::basic_string[abi:ne180100]<0>(v52, "acousticLatency");
  Double = quasar::PTree::getDouble((uint64_t)v39, (__int128 *)v52);
  std::string::basic_string[abi:ne180100]<0>(&__p, "contextModelLatency");
  v34 = quasar::PTree::getDouble((uint64_t)v39, &__p);
  quasar::LDLoggingInfo::addDoubleValue(v39, (uint64_t)v46, Double + v34);
  if (SHIBYTE(v70) < 0)
    operator delete((void *)__p);
  if (SBYTE7(v53) < 0)
    operator delete(v52[0]);
  if (v47 < 0)
    operator delete(v46[0]);
  quasar::PTree::PTree((quasar::PTree *)v52);
  v56 = 0uLL;
  std::swap[abi:ne180100]<quasar::LDLoggingInfo>((int *)v52, (int *)v39);
  (***((void (****)(_QWORD, void **))v2 + 4))(*((_QWORD *)v2 + 4), v52);
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
  if (*((_QWORD *)&v56 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  quasar::PTree::~PTree((quasar::PTree *)v52);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v72);
}

void sub_1ADF565BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::Matrix<float>::~Matrix(v1 - 200);
  _Unwind_Resume(a1);
}

void quasar::LanguageDetector::getAcousticResult(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, char a5@<W5>, uint64_t a6@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  int *v12;
  int v13;
  const void ***v14;
  char *v15;
  int v16;
  char v17;
  const void ***v18;
  _QWORD *v19;
  double Seconds;
  uint64_t v21;
  void **v22;
  double v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  clockid_t v41;
  double v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  void *__p[2];
  char v47;
  uint64_t v48;
  const void **v49[3];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;

  v10 = *(_QWORD *)(a4 + 208);
  if (a2)
  {
    std::deque<std::vector<float>>::push_back((_QWORD *)(a4 + 56), a1);
  }
  else if (quasar::gLogLevel >= 4)
  {
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v50 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Data is empty", 13);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v50);
  }
  v11 = *(_QWORD *)(a4 + 96);
  v12 = *(int **)(v10 + 8);
  v13 = v12[49];
  if (v13 <= 0)
    v13 = *v12;
  if (v11 >= v13)
  {
    if (quasar::gLogLevel < 4)
    {
      a5 = 0;
    }
    else
    {
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v50 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Reached maximum window size. Treating this as the end of audio.", 63);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v50);
      a5 = 0;
      v11 = *(_QWORD *)(a4 + 96);
      v12 = *(int **)(v10 + 8);
    }
  }
  if (*v12 > (int)v11)
  {
    if (quasar::gLogLevel >= 5)
    {
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v50 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Not enough features yet to meet minimum window size.", 52);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v50);
    }
    LOBYTE(v50) = 1;
    v14 = (const void ***)&v50 + 1;
    v51 = 0uLL;
    *((_QWORD *)&v50 + 1) = &v51;
    *(_BYTE *)a6 = 1;
    std::map<std::string,double>::map[abi:ne180100]((uint64_t *)(a6 + 8), (const void ***)&v50 + 1);
    *(_BYTE *)(a6 + 32) = 0;
    *(_BYTE *)(a6 + 33) = a5;
    v15 = (char *)v51;
LABEL_52:
    v18 = v14;
    goto LABEL_53;
  }
  v16 = *(_DWORD *)(a4 + 48);
  v17 = a5 ^ 1;
  if (v16 < 1)
    v17 = 1;
  if ((v17 & 1) != 0)
  {
    if (quasar::gLogLevel >= 5)
    {
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v50 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Running LanguageDetector with ", 30);
      v19 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" frames", 7);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v50);
    }
    v43 = a5;
    v44 = a6;
    Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, (clockid_t)a1);
    v22 = (void **)(a4 + 104);
    v21 = *(_QWORD *)(a4 + 104);
    v23 = *(double *)(a4 + 304);
    *(_DWORD *)(a4 + 48) = *(_DWORD *)(*(_QWORD *)(v10 + 8) + 4);
    *(_QWORD *)(a4 + 112) = v21;
    std::vector<float>::reserve((void **)(a4 + 104), *(_QWORD *)(a4 + 96) * (int)a3);
    v24 = *(_QWORD *)(a4 + 96);
    if (v24)
    {
      v25 = 0;
      v26 = (_QWORD *)(a4 + 120);
      v27 = a3;
      v45 = a3;
      do
      {
        if ((int)a3 >= 1)
        {
          v28 = 0;
          v29 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a4 + 64) + 8 * ((*(_QWORD *)(a4 + 88) + v25) / 0xAA))
                          + 24 * ((*(_QWORD *)(a4 + 88) + v25) % 0xAA));
          v30 = *(char **)(a4 + 112);
          do
          {
            v31 = *v29;
            if ((unint64_t)v30 >= *v26)
            {
              v33 = (char *)*v22;
              v34 = (v30 - (_BYTE *)*v22) >> 2;
              v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v36 = *v26 - (_QWORD)v33;
              if (v36 >> 1 > v35)
                v35 = v36 >> 1;
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
                v37 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v37 = v35;
              if (v37)
              {
                v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 120, v37);
                v33 = *(char **)(a4 + 104);
                v30 = *(char **)(a4 + 112);
              }
              else
              {
                v38 = 0;
              }
              v39 = &v38[4 * v34];
              *(_DWORD *)v39 = *(_DWORD *)(v31 + 4 * v28);
              v32 = v39 + 4;
              while (v30 != v33)
              {
                v40 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v39 - 1) = v40;
                v39 -= 4;
              }
              *(_QWORD *)(a4 + 104) = v39;
              *(_QWORD *)(a4 + 112) = v32;
              *(_QWORD *)(a4 + 120) = &v38[4 * v37];
              if (v33)
                operator delete(v33);
            }
            else
            {
              *(_DWORD *)v30 = *(_DWORD *)(v31 + 4 * v28);
              v32 = v30 + 4;
            }
            *(_QWORD *)(a4 + 112) = v32;
            ++v28;
            v30 = v32;
          }
          while (v28 != v27);
          v24 = *(_QWORD *)(a4 + 96);
          a3 = v45;
        }
        ++v25;
      }
      while (v24 > v25);
    }
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a4 + 208) + 24))(&v48, *(_QWORD *)(a4 + 208), a4 + 104, a3);
    if (!(_BYTE)v48 && quasar::gLogLevel > 3)
    {
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v50 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Something went wrong in LD inference.", 37);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v50);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "acousticLatency");
    v42 = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v41);
    quasar::LDLoggingInfo::addDoubleValue((quasar *)(a4 + 224), (uint64_t)__p, (v42 - *(double *)(a4 + 304) - (Seconds - v23)) * 1000.0);
    if (v47 < 0)
      operator delete(__p[0]);
    *(_BYTE *)v44 = v48;
    v14 = v49;
    std::map<std::string,double>::map[abi:ne180100]((uint64_t *)(v44 + 8), v49);
    *(_BYTE *)(v44 + 32) = 1;
    *(_BYTE *)(v44 + 33) = v43;
    v15 = (char *)v49[1];
    goto LABEL_52;
  }
  if (quasar::gLogLevel >= 5)
  {
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v50 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v50, (uint64_t)"Waiting until the next predictionInterval to run.", 49);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v50);
    v16 = *(_DWORD *)(a4 + 48);
  }
  *(_DWORD *)(a4 + 48) = v16 - 1;
  LOBYTE(v50) = 1;
  v51 = 0uLL;
  *((_QWORD *)&v50 + 1) = &v51;
  *(_BYTE *)a6 = 1;
  std::map<std::string,double>::map[abi:ne180100]((uint64_t *)(a6 + 8), (const void ***)&v50 + 1);
  *(_WORD *)(a6 + 32) = 256;
  v15 = (char *)v51;
  v18 = (const void ***)&v50 + 1;
LABEL_53:
  std::__tree<std::string>::destroy((uint64_t)v18, v15);
}

void sub_1ADF56CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char *a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a22);
  std::__tree<std::string>::destroy((uint64_t)&a19, a20);
  _Unwind_Resume(a1);
}

uint64_t quasar::LanguageDetector::processAcousticResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v5;
  double Seconds;
  double v7;
  uint64_t v8;
  const void **v9;
  const void **v10;
  double v11;
  double *v12;
  double *v13;
  double v14;
  quasar *v15;
  double *v16;
  double *v17;
  _BOOL8 v18;
  void *v19;
  int v20;
  quasar *v21;
  double *v22;
  double v23;
  double *v24;
  double *v25;
  quasar::PTree *Child;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  double *v30;
  double *v31;
  double *v32;
  double *v33;
  double v34;
  uint64_t v35;
  double v36;
  BOOL v37;
  double *v38;
  double *v39;
  double *v40;
  double *v41;
  clockid_t v42;
  double v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  uint64_t v48;
  void *v50[2];
  char v51;
  void *v52[2];
  char v53;
  void *v54[2];
  char v55;
  std::string __p;
  double *v57;
  _QWORD *v58[2];
  void *v59[2];
  char v60;
  void *v61;
  std::string v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)a3)
  {
    if (*(_BYTE *)(a3 + 32))
      v5 = 1;
    else
      v5 = *(_BYTE *)(a3 + 33) == 0;
    if (!v5)
      return 0;
    v48 = *(_QWORD *)(a2 + 208);
    Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, (clockid_t)a2);
    v7 = *(double *)(a2 + 304);
    if (!*(_BYTE *)(a3 + 32))
    {
      if (quasar::gLogLevel >= 4)
      {
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v69 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v69);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"No valid window found. Running contextual model based on equal acoustic priors.", 79);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v69);
      }
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 208) + 8);
      v9 = *(const void ***)(v8 + 40);
      v10 = *(const void ***)(v8 + 48);
      if (v10 != v9)
      {
        v11 = 1.0 / (double)(0xAAAAAAAAAAAAAAABLL * (v10 - v9));
        do
        {
          *(_QWORD *)&v69 = v9;
          *((double *)std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a3 + 8), v9, (uint64_t)&std::piecewise_construct, (__int128 **)&v69)+ 7) = v11;
          v9 += 3;
        }
        while (v9 != v10);
      }
    }
    std::atomic_load[abi:ne180100]<quasar::SpeechRequestResultData>((_QWORD *)(a2 + 192), &v67);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a2 + 288), &v67);
    if (*(_BYTE *)(v67 + 176))
    {
      quasar::PTree::PTree((quasar::PTree *)&v69);
      if (!*(_BYTE *)(v67 + 176))
        std::__throw_bad_optional_access[abi:ne180100]();
      v12 = *(double **)(v67 + 152);
      v13 = (double *)(v67 + 160);
      if (v12 != (double *)(v67 + 160))
      {
        do
        {
          quasar::language_detector::Locale::getSiriLocaleStr((quasar::language_detector::Locale *)(v12 + 4), &__p);
          v14 = v12[10];
          LODWORD(v61) = quasar::getType(v15, *(float *)&v14);
          std::to_string(&v62, v14);
          v63 = 0;
          v64 = 0;
          v65 = 0;
          v66 = 1;
          quasar::PTree::putChild((uint64_t)&v69, (uint64_t)&__p, (uint64_t)&v61, 1);
          quasar::PTree::~PTree((quasar::PTree *)&v61);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v16 = (double *)*((_QWORD *)v12 + 1);
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = *(double **)v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (double *)*((_QWORD *)v12 + 2);
              v5 = *(_QWORD *)v17 == (_QWORD)v12;
              v12 = v17;
            }
            while (!v5);
          }
          v12 = v17;
        }
        while (v17 != v13);
      }
      std::string::basic_string[abi:ne180100]<0>(&v61, "conversationMessagePriors");
      quasar::PTree::putChild(a2 + 224, (uint64_t)&v61, (uint64_t)&v69, 1);
      if (v62.__r_.__value_.__s.__data_[15] < 0)
        operator delete(v61);
      quasar::PTree::~PTree((quasar::PTree *)&v69);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v69, "conversationMessagePriors");
      quasar::PTree::erase(a2 + 224, (unsigned __int8 *)&v69);
      if (SBYTE7(v70) < 0)
        operator delete((void *)v69);
    }
    if (*(_BYTE *)(v67 + 264))
    {
      std::string::basic_string[abi:ne180100]<0>(&v61, "lastMessageLanguage");
      quasar::language_detector::Locale::getSiriLocaleStr((quasar::language_detector::Locale *)(v67 + 216), &__p);
      quasar::PTree::PTree(&v69, &__p);
      quasar::PTree::putChild(a2 + 224, (uint64_t)&v61, (uint64_t)&v69, 1);
      quasar::PTree::~PTree((quasar::PTree *)&v69);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((v62.__r_.__value_.__s.__data_[15] & 0x80000000) == 0)
      {
LABEL_40:
        std::string::basic_string[abi:ne180100]<0>(v59, "numAcousticRuns");
        std::string::basic_string[abi:ne180100]<0>(&v69, "numAcousticRuns");
        v20 = quasar::PTree::getInt<int>(a2 + 224, &v69);
        quasar::LDLoggingInfo::addIntValue(a2 + 224, (uint64_t)v59, (quasar *)(v20 + 1));
        if (SBYTE7(v70) < 0)
          operator delete((void *)v69);
        if (v60 < 0)
          operator delete(v59[0]);
        quasar::PTree::PTree((quasar::PTree *)&v61);
        v22 = *(double **)(a3 + 8);
        if (v22 != (double *)(a3 + 16))
        {
          do
          {
            v23 = v22[7];
            LODWORD(v69) = quasar::getType(v21, *(float *)&v23);
            std::to_string((std::string *)((char *)&v69 + 8), v23);
            v71 = 0uLL;
            *(_QWORD *)&v72 = 0;
            BYTE8(v72) = 1;
            quasar::PTree::addChild((quasar::PTree *)&v61, (const quasar::PTree *)&v69);
            quasar::PTree::~PTree((quasar::PTree *)&v69);
            v24 = (double *)*((_QWORD *)v22 + 1);
            if (v24)
            {
              do
              {
                v25 = v24;
                v24 = *(double **)v24;
              }
              while (v24);
            }
            else
            {
              do
              {
                v25 = (double *)*((_QWORD *)v22 + 2);
                v5 = *(_QWORD *)v25 == (_QWORD)v22;
                v22 = v25;
              }
              while (!v5);
            }
            v22 = v25;
          }
          while (v25 != (double *)(a3 + 16));
        }
        std::string::basic_string[abi:ne180100]<0>(&v69, "acousticScores");
        Child = (quasar::PTree *)quasar::PTree::getChild(a2 + 224, &v69);
        quasar::PTree::addChild(Child, (const quasar::PTree *)&v61);
        if (SBYTE7(v70) < 0)
          operator delete((void *)v69);
        v27 = *(_QWORD *)(a1 + 64);
        *(_QWORD *)&v69 = &off_1E5D3F610;
        *((_QWORD *)&v69 + 1) = a1 + 72;
        *((_QWORD *)&v70 + 1) = &v69;
        (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)v27 + 16))(&__p, v27, a3 + 8, v67, &v69);
        v28 = (__int128 *)*((_QWORD *)&v70 + 1);
        if (*((__int128 **)&v70 + 1) == &v69)
        {
          v29 = 4;
          v28 = &v69;
        }
        else
        {
          if (!*((_QWORD *)&v70 + 1))
            goto LABEL_58;
          v29 = 5;
        }
        v28 = (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_58:
        if (!__p.__r_.__value_.__s.__data_[0])
        {
          if (quasar::gLogLevel >= 1)
          {
            v84 = 0u;
            v85 = 0u;
            v82 = 0u;
            v83 = 0u;
            v80 = 0u;
            v81 = 0u;
            v78 = 0u;
            v79 = 0u;
            v76 = 0u;
            v77 = 0u;
            v74 = 0u;
            v75 = 0u;
            v72 = 0u;
            v73 = 0u;
            v70 = 0u;
            v71 = 0u;
            v69 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v69);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"Contextual model failed to run properly.", 40);
            quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v69);
          }
          quasar::LanguageDetector::handleErrorInProcessAcousticResult((uint64_t)v28, a2);
          v18 = 1;
          goto LABEL_102;
        }
        quasar::LanguageDetector::addLocaleLevelMetric(a2 + 224, (uint64_t)&__p.__r_.__value_.__l.__size_, "posterior");
        quasar::LanguageDetector::addLocaleLevelMetric(a2 + 224, (uint64_t)&v57, "confidence");
        v30 = v57;
        if (v57 != (double *)v58)
        {
          v31 = v57;
          while (1)
          {
            v32 = (double *)*((_QWORD *)v31 + 1);
            v33 = v31;
            if (v32)
            {
              do
              {
                v31 = v32;
                v32 = *(double **)v32;
              }
              while (v32);
            }
            else
            {
              do
              {
                v31 = (double *)*((_QWORD *)v33 + 2);
                v5 = *(_QWORD *)v31 == (_QWORD)v33;
                v33 = v31;
              }
              while (!v5);
            }
            if (v31 == (double *)v58)
              break;
            if (v30[10] < v31[10])
              v30 = v31;
          }
        }
        v34 = v30[10];
        if (quasar::gLogLevel >= 4)
        {
          v84 = 0u;
          v85 = 0u;
          v82 = 0u;
          v83 = 0u;
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v69 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v69);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"Language detector max confidence: ", 34);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v69);
        }
        v35 = *(_QWORD *)(v48 + 8);
        if (*(_BYTE *)(a3 + 33))
        {
          v36 = *(double *)(v35 + 144);
          v37 = v34 >= *(double *)(v35 + 152);
          __p.__r_.__value_.__s.__data_[1] = v34 >= v36;
          __p.__r_.__value_.__s.__data_[2] = v37;
          if (v34 < v36 && *(_BYTE *)(v35 + 138))
          {
LABEL_99:
            std::string::basic_string[abi:ne180100]<0>(v50, "contextModelLatency");
            v43 = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v42);
            quasar::LDLoggingInfo::addDoubleValue((quasar *)(a2 + 224), (uint64_t)v50, (v43 - *(double *)(a2 + 304) - (Seconds - v7)) * 1000.0);
            if (v51 < 0)
              operator delete(v50[0]);
            v18 = __p.__r_.__value_.__s.__data_[1] != 0;
LABEL_102:
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v57, v58[0]);
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p.__r_.__value_.__l.__size_, (_QWORD *)__p.__r_.__value_.__r.__words[2]);
            quasar::PTree::~PTree((quasar::PTree *)&v61);
            v44 = v68;
            if (v68)
            {
              p_shared_owners = (unint64_t *)&v68->__shared_owners_;
              do
                v46 = __ldaxr(p_shared_owners);
              while (__stlxr(v46 - 1, p_shared_owners));
              if (!v46)
              {
                ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
                std::__shared_weak_count::__release_weak(v44);
              }
            }
            return v18;
          }
        }
        else
        {
          __p.__r_.__value_.__s.__data_[1] = 1;
          __p.__r_.__value_.__s.__data_[2] = v34 >= *(double *)(v35 + 152);
        }
        std::string::basic_string[abi:ne180100]<0>(v54, "isConfident");
        quasar::LDLoggingInfo::addBoolValue(a2 + 224, (uint64_t)v54, (quasar *)__p.__r_.__value_.__s.__data_[2]);
        if (v55 < 0)
          operator delete(v54[0]);
        v38 = v57;
        if (v57 == (double *)v58)
        {
          v38 = (double *)v58;
        }
        else
        {
          v39 = v57;
          while (1)
          {
            v40 = (double *)*((_QWORD *)v39 + 1);
            v41 = v39;
            if (v40)
            {
              do
              {
                v39 = v40;
                v40 = *(double **)v40;
              }
              while (v40);
            }
            else
            {
              do
              {
                v39 = (double *)*((_QWORD *)v41 + 2);
                v5 = *(_QWORD *)v39 == (_QWORD)v41;
                v41 = v39;
              }
              while (!v5);
            }
            if (v39 == (double *)v58)
              break;
            if (v38[10] < v39[10])
              v38 = v39;
          }
        }
        std::string::basic_string[abi:ne180100]<0>(v52, "detectedLocale");
        quasar::language_detector::Locale::getSiriLocaleStr((quasar::language_detector::Locale *)(v38 + 4), (std::string *)&v69);
        quasar::LDLoggingInfo::addStringValue(a2 + 224, (uint64_t)v52, (uint64_t)&v69);
        if (SBYTE7(v70) < 0)
          operator delete((void *)v69);
        if (v53 < 0)
          operator delete(v52[0]);
        (*(void (**)(_QWORD, std::string *))(**(_QWORD **)(a2 + 32) + 8))(*(_QWORD *)(a2 + 32), &__p);
        goto LABEL_99;
      }
      v19 = v61;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v69, "lastMessageLanguage");
      quasar::PTree::erase(a2 + 224, (unsigned __int8 *)&v69);
      if ((SBYTE7(v70) & 0x80000000) == 0)
        goto LABEL_40;
      v19 = (void *)v69;
    }
    operator delete(v19);
    goto LABEL_40;
  }
  if (quasar::gLogLevel >= 1)
  {
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v69 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v69);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v69, (uint64_t)"Error running acoustic model.", 29);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v69);
  }
  quasar::LanguageDetector::handleErrorInProcessAcousticResult(a1, a2);
  return 1;
}

void sub_1ADF57668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
  _Unwind_Resume(a1);
}

void std::swap[abi:ne180100]<quasar::LDLoggingInfo>(int *a1, int *a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  int v10;
  std::string v11;
  std::string v12;
  char v13;
  __int128 v14;

  v10 = *a1;
  v4 = (std::string *)(a1 + 2);
  if (*((char *)a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *((const std::string::value_type **)a1 + 1), *((_QWORD *)a1 + 2));
  }
  else
  {
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = *((_QWORD *)a1 + 3);
  }
  v5 = *((_QWORD *)a1 + 4);
  v6 = *((_QWORD *)a1 + 5);
  memset(&v12, 0, sizeof(v12));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v12, v5, v6, 0x2E8BA2E8BA2E8BA3 * ((v6 - v5) >> 3));
  v13 = *((_BYTE *)a1 + 56);
  v14 = *((_OWORD *)a1 + 4);
  *((_QWORD *)a1 + 8) = 0;
  *((_QWORD *)a1 + 9) = 0;
  *a1 = *a2;
  std::string::operator=(v4, (const std::string *)(a2 + 2));
  if (a1 != a2)
    std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((uint64_t)(a1 + 8), *((std::string **)a2 + 4), *((std::string **)a2 + 5), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3));
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(a1 + 16), (__int128 *)a2 + 4);
  *a2 = v10;
  std::string::operator=((std::string *)(a2 + 2), &v11);
  if (&v10 != a2)
    std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>((uint64_t)(a2 + 8), (std::string *)v12.__r_.__value_.__l.__data_, (std::string *)v12.__r_.__value_.__l.__size_, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  *((_BYTE *)a2 + 56) = v13;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(a2 + 16), &v14);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  quasar::PTree::~PTree((quasar::PTree *)&v10);
}

void sub_1ADF57A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::LanguageDetector::updateContext(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  quasar::LDContext **v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  quasar::LanguageDetector::checkContext(*a3, (const quasar::LDContext *)a2);
  v6 = (quasar::LDContext **)a2[24];
  v5 = a2 + 24;
  quasar::LDContext::logContext(v6);
  v7 = a3[1];
  v13 = *a3;
  v14 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::atomic_store[abi:ne180100]<quasar::SpeechRequestResultData>(v5, &v13);
  v10 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1ADF57B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void quasar::LanguageDetector::handleErrorInProcessAcousticResult(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 *v7;
  __int128 v8;
  quasar *v9;
  std::__shared_weak_count *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  if (quasar::gLogLevel >= 4)
  {
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v17 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Error in processing acoustic result.", 36);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v11);
  }
  std::atomic_load[abi:ne180100]<quasar::SpeechRequestResultData>((_QWORD *)(a2 + 192), &v9);
  LOWORD(v11) = 0;
  BYTE2(v11) = 0;
  *((_QWORD *)&v11 + 1) = &v12;
  v12 = 0uLL;
  *(_QWORD *)&v14 = 0;
  v13 = (unint64_t)&v13 + 8;
  quasar::fallbackConfidenceFromContext(v9, (uint64_t)&v7);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v11 + 8, (_QWORD *)v12);
  v3 = (_QWORD *)v8;
  *((_QWORD *)&v11 + 1) = v7;
  v12 = v8;
  if (*((_QWORD *)&v8 + 1))
  {
    *(_QWORD *)(v8 + 16) = &v12;
    v7 = &v8;
    v8 = 0uLL;
    v3 = 0;
  }
  else
  {
    *((_QWORD *)&v11 + 1) = &v12;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v7, v3);
  std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<quasar::language_detector::Locale,double>,std::__tree_node<std::__value_type<quasar::language_detector::Locale,double>,void *> *,long>>((uint64_t **)&v13, *((__int128 **)&v11 + 1), &v12);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a2 + 288), (uint64_t *)&v9);
  (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a2 + 32) + 8))(*(_QWORD *)(a2 + 32), &v11);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, *((_QWORD **)&v13 + 1));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v11 + 8, (_QWORD *)v12);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1ADF57CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  _Unwind_Resume(a1);
}

void quasar::LanguageDetector::addLocaleLevelMetric(uint64_t a1, uint64_t a2, char *a3)
{
  quasar::PTree *Child;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t String;
  double *v11;
  double v12;
  quasar *v13;
  std::string *v14;
  std::string::size_type v15;
  _QWORD *v16;
  _QWORD *v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  std::string *v21;
  std::string::size_type size;
  void *__p[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  void *v40[2];
  char v41;
  std::string v42;
  __int128 v43;
  char v44;
  void *v45;
  char v46;

  std::string::basic_string[abi:ne180100]<0>(__p, "localeSpecificMetrics");
  Child = (quasar::PTree *)quasar::PTree::getChild(a1, (__int128 *)__p);
  if (SBYTE7(v24) < 0)
    operator delete(__p[0]);
  v7 = quasar::PTree::begin(Child);
  v8 = quasar::PTree::end(Child);
  if (v7 != v8)
  {
    v9 = v8;
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "languageCode");
      String = quasar::PTree::getString(v7 + 24, (__int128 *)__p);
      quasar::language_detector::Locale::Locale(&v43, String);
      if (SBYTE7(v24) < 0)
        operator delete(__p[0]);
      quasar::language_detector::Locale::getSiriLocaleStr((quasar::language_detector::Locale *)&v43, &v42);
      if (a2 + 8 != std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::find<quasar::language_detector::Locale>(a2, (unsigned __int8 **)&v43))break;
      if (quasar::gLogLevel >= 4)
      {
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v24 = 0u;
        v25 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Metrics for locale not in input: ", 33);
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = &v42;
        else
          v21 = (std::string *)v42.__r_.__value_.__r.__words[0];
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
        else
          size = v42.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, size);
LABEL_29:
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      }
LABEL_30:
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      if (v46 < 0)
        operator delete(v45);
      if (v44 < 0)
        operator delete((void *)v43);
      v7 += 88;
      if (v7 == v9)
        return;
    }
    v11 = (double *)std::map<quasar::language_detector::Locale,double>::at(a2, (unsigned __int8 *)&v43);
    if ((*(_QWORD *)v11 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      v12 = -1.0;
    else
      v12 = *v11;
    v13 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v40, a3);
    LODWORD(__p[0]) = quasar::getType(v13, *(float *)&v12);
    std::to_string((std::string *)&__p[1], v12);
    v25 = 0uLL;
    *(_QWORD *)&v26 = 0;
    BYTE8(v26) = 1;
    quasar::PTree::putChild(v7 + 24, (uint64_t)v40, (uint64_t)__p, 1);
    quasar::PTree::~PTree((quasar::PTree *)__p);
    if (v41 < 0)
      operator delete(v40[0]);
    if (quasar::gLogLevel < 4)
      goto LABEL_30;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v42;
    else
      v14 = (std::string *)v42.__r_.__value_.__r.__words[0];
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
    else
      v15 = v42.__r_.__value_.__l.__size_;
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v14, v15);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ", 1);
    v18 = strlen(a3);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)a3, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)": ", 2);
    std::ostream::operator<<();
    goto LABEL_29;
  }
}

void sub_1ADF58024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::localeToLanguageUsingOverrides(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  unsigned __int8 *v8;
  std::string::size_type v9;

  v6 = std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::find<quasar::language_detector::Locale>(a2, (unsigned __int8 **)a1);
  if (a2 + 8 == v6)
  {
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      return;
    }
    v8 = *(unsigned __int8 **)a1;
    v9 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    if ((*(char *)(v6 + 103) & 0x80000000) == 0)
    {
      v7 = *(_OWORD *)(v6 + 80);
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 96);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
      return;
    }
    v8 = *(unsigned __int8 **)(v6 + 80);
    v9 = *(_QWORD *)(v6 + 88);
  }
  std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v8, v9);
}

void quasar::DummyContextAwareLDModel::~DummyContextAwareLDModel(quasar::DummyContextAwareLDModel *this)
{
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__optional_move_base<std::set<quasar::language_detector::Locale>,false>::__optional_move_base[abi:ne180100](uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_QWORD *)result = *(_QWORD *)a2;
    v2 = (_QWORD *)(a2 + 8);
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(result + 8) = v3;
    v4 = result + 8;
    v5 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(result + 16) = v5;
    if (v5)
    {
      *(_QWORD *)(v3 + 16) = v4;
      *(_QWORD *)a2 = v2;
      *v2 = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
    else
    {
      *(_QWORD *)result = v4;
    }
    *(_BYTE *)(result + 24) = 1;
  }
  return result;
}

uint64_t **std::__tree<quasar::language_detector::Locale>::__assign_multi<std::__tree_const_iterator<quasar::language_detector::Locale,std::__tree_node<quasar::language_detector::Locale,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  __int128 *v10;
  BOOL v11;
  __int128 *v12;
  __int128 *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          std::__tree<quasar::language_detector::Locale>::__node_insert_multi(v5, (uint64_t)v16);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = *(__int128 **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v11 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<quasar::language_detector::Locale>::__emplace_multi<quasar::language_detector::Locale const&>((uint64_t)v5, a2 + 2);
      v12 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(__int128 **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (__int128 *)*((_QWORD *)a2 + 2);
          v11 = *(_QWORD *)v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1ADF5831C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<quasar::language_detector::Locale>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;

  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v5 = (uint64_t **)v4;
        if (!quasar::language_detector::Locale::operator<((unsigned __int8 *)(a2 + 32), (unsigned __int8 **)v4 + 4))break;
        v4 = *v5;
        v6 = v5;
        if (!*v5)
          goto LABEL_8;
      }
      v4 = v5[1];
    }
    while (v4);
    v6 = v5 + 1;
  }
  else
  {
    v6 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v5, v6, (uint64_t *)a2);
  return a2;
}

uint64_t std::__tree<quasar::language_detector::Locale>::__emplace_multi<quasar::language_detector::Locale const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t v7;
  _QWORD v9[3];

  std::__tree<quasar::language_detector::Locale>::__construct_node<quasar::language_detector::Locale const&>(a1, a2, (uint64_t)v9);
  v3 = v9[0];
  v5 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v5 = (uint64_t **)v4;
        if (!quasar::language_detector::Locale::operator<((unsigned __int8 *)(v3 + 32), (unsigned __int8 **)v4 + 4))break;
        v4 = *v5;
        v6 = v5;
        if (!*v5)
          goto LABEL_8;
      }
      v4 = v5[1];
    }
    while (v4);
    v6 = v5 + 1;
  }
  else
  {
    v6 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v5, v6, (uint64_t *)v3);
  v7 = v9[0];
  v9[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  return v7;
}

void std::__optional_storage_base<quasar::language_detector::Locale,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<quasar::language_detector::Locale,false> const&>(std::string *this, std::string *__str)
{
  if (this[2].__r_.__value_.__s.__data_[0] == __str[2].__r_.__value_.__s.__data_[0])
  {
    if (this[2].__r_.__value_.__s.__data_[0])
    {
      std::string::operator=(this, __str);
      std::string::operator=(this + 1, __str + 1);
    }
  }
  else if (this[2].__r_.__value_.__s.__data_[0])
  {
    std::__optional_destruct_base<quasar::language_detector::Locale,false>::reset[abi:ne180100]((uint64_t)this);
  }
  else
  {
    std::__construct_at[abi:ne180100]<quasar::language_detector::Locale,quasar::language_detector::Locale const&,quasar::language_detector::Locale*>(this, (__int128 *)__str);
    this[2].__r_.__value_.__s.__data_[0] = 1;
  }
}

void std::__optional_destruct_base<quasar::language_detector::Locale,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 48) = 0;
  }
}

std::string *std::pair<quasar::language_detector::Locale const,double>::pair[abi:ne180100]<quasar::language_detector::Locale const&,double &,0>(std::string *this, __int128 *a2, std::string::size_type *a3)
{
  __int128 v6;
  std::string *v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  v7 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v8 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  this[2].__r_.__value_.__r.__words[0] = *a3;
  return this;
}

void sub_1ADF585AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::pair<quasar::language_detector::Locale const,double>::pair[abi:ne180100]<quasar::language_detector::Locale const&,double,0>(std::string *this, __int128 *a2, std::string::size_type *a3)
{
  __int128 v6;
  std::string *v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  v7 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v8 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  this[2].__r_.__value_.__r.__words[0] = *a3;
  return this;
}

void sub_1ADF58654(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::find<quasar::language_detector::Locale>(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = quasar::language_detector::Locale::operator<((unsigned __int8 *)(v3 + 32), a2);
    v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2
    || quasar::language_detector::Locale::operator<((unsigned __int8 *)a2, (unsigned __int8 **)(v5 + 32)))
  {
    return v2;
  }
  return v5;
}

std::string *std::pair<std::string const,quasar::language_detector::Locale>::pair[abi:ne180100]<std::string&,quasar::language_detector::Locale const&,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v6 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v6;
  }
  v7 = this + 2;
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v8 = *(__int128 *)((char *)a3 + 24);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 5);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return this;
}

void sub_1ADF58798(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::pair<quasar::language_detector::Locale const,double>::pair[abi:ne180100]<quasar::language_detector::Locale&,double &,0>(std::string *this, __int128 *a2, std::string::size_type *a3)
{
  __int128 v6;
  std::string *v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
  }
  v7 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v8 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  this[2].__r_.__value_.__r.__words[0] = *a3;
  return this;
}

void sub_1ADF58858(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<quasar::language_detector::Locale,double>,std::__tree_node<std::__value_type<quasar::language_detector::Locale,double>,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  __int128 *v10;
  BOOL v11;
  __int128 *v12;
  __int128 *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          v8[10] = *((_QWORD *)v9 + 10);
          std::__tree<quasar::language_detector::Locale>::__node_insert_multi(v5, (uint64_t)v16);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = *(__int128 **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v11 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_multi<std::pair<quasar::language_detector::Locale const,double> const&>((uint64_t)v5, a2 + 2);
      v12 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(__int128 **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (__int128 *)*((_QWORD *)a2 + 2);
          v11 = *(_QWORD *)v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1ADF589D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_multi<std::pair<quasar::language_detector::Locale const,double> const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t v7;
  _QWORD v9[3];

  std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__construct_node<std::pair<quasar::language_detector::Locale const,double> const&>(a1, a2, (uint64_t)v9);
  v3 = v9[0];
  v5 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v5 = (uint64_t **)v4;
        if (!quasar::language_detector::Locale::operator<((unsigned __int8 *)(v3 + 32), (unsigned __int8 **)v4 + 4))break;
        v4 = *v5;
        v6 = v5;
        if (!*v5)
          goto LABEL_8;
      }
      v4 = v5[1];
    }
    while (v4);
    v6 = v5 + 1;
  }
  else
  {
    v6 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v5, v6, (uint64_t *)v3);
  v7 = v9[0];
  v9[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  return v7;
}

uint64_t *std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_unique_key_args<quasar::language_detector::Locale,std::pair<quasar::language_detector::Locale const,double>>(uint64_t **a1, unsigned __int8 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<quasar::language_detector::Locale>::__find_equal<quasar::language_detector::Locale>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__construct_node<std::pair<quasar::language_detector::Locale const,double>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

std::string *std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__construct_node<std::pair<quasar::language_detector::Locale const,double>>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<quasar::language_detector::Locale const,double>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1ADF58B74(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void sub_1ADF58C0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::language_detector::Locale>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::language_detector::Locale>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::language_detector::Locale>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::language_detector::Locale>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::language_detector::Locale>>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::language_detector::Locale>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::language_detector::Locale>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::language_detector::Locale>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::language_detector::Locale>>>::__construct_node_hash<std::pair<std::string const,quasar::language_detector::Locale>>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1ADF58E90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,quasar::language_detector::Locale>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::language_detector::Locale>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::language_detector::Locale>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::language_detector::Locale>>>::__construct_node_hash<std::pair<std::string const,quasar::language_detector::Locale>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x58uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,quasar::language_detector::Locale>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1ADF58F04(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::TranslationPairSetting>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,quasar::language_detector::Locale>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *(__int128 *)((char *)a2 + 24);
  this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v6 = a2[3];
  this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 6) = 0;
  return this;
}

uint64_t std::unordered_set<std::string_view>::unordered_set(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 16 * a3;
    do
    {
      std::__hash_table<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>::__emplace_unique_key_args<std::string_view,std::string_view const&>(a1, (uint64_t)a2, a2);
      ++a2;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_1ADF58FF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>::__emplace_unique_key_args<std::string_view,std::string_view const&>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  void *v14;
  uint64_t *v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_view_hash<char>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v17 = a2;
        v15 = *(uint64_t **)a2;
        v16 = *(_QWORD *)(v17 + 8);
        do
        {
          v18 = *((_QWORD *)v14 + 1);
          if (v18 == v9)
          {
            if (*((_QWORD *)v14 + 3) == v16 && !memcmp(*((const void **)v14 + 2), v15, v16))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v18 >= v10)
                v18 %= v10;
            }
            else
            {
              v18 &= v10 - 1;
            }
            if (v18 != v3)
              break;
          }
          v14 = *(void **)v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x20uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v9;
  *((_OWORD *)v14 + 1) = *a3;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    v21 = 1;
    if (v10 >= 3)
      v21 = (v10 & (v10 - 1)) != 0;
    v22 = v21 | (2 * v10);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v24);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
  {
    *(_QWORD *)v14 = *v26;
LABEL_40:
    *v26 = v14;
    goto LABEL_41;
  }
  *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v25 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)v14)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v27 >= v10)
        v27 %= v10;
    }
    else
    {
      v27 &= v10 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_40;
  }
LABEL_41:
  ++*v7;
  return v14;
}

void sub_1ADF59260(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t std::__string_view_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  char v4;

  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v4, a2, a3);
}

void std::vector<quasar::language_detector::Locale>::__assign_with_size[abi:ne180100]<std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>>(std::vector<std::pair<std::string, std::string>> *this, uint64_t a2, uint64_t a3, unint64_t a4)
{
  std::__compressed_pair<std::pair<std::string, std::string> *, std::allocator<std::pair<std::string, std::string>>> *p_end_cap;
  std::vector<std::pair<std::string, std::string>>::pointer begin;
  unint64_t v10;
  unint64_t v11;
  std::pair<std::string, std::string> *v12;
  uint64_t v13;
  std::pair<std::string, std::string> *v14;
  std::pair<std::string, std::string> *v15;
  std::vector<std::pair<std::string, std::string>>::pointer end;
  char v17;
  char v18;

  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 4) < a4)
  {
    std::vector<std::pair<std::string,std::string>>::__vdeallocate(this);
    if (a4 > 0x555555555555555)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v10;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vallocate[abi:ne180100](this, v11);
    v12 = (std::pair<std::string, std::string> *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::language_detector::Locale>,std::string *,std::string *,quasar::language_detector::Locale*>((uint64_t)p_end_cap, a2, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 4) < a4)
  {
    v13 = a2 + 8 * (((char *)this->__end_ - (char *)begin) >> 4);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,quasar::language_detector::Locale *>((uint64_t)&v17, a2, v13, (uint64_t)begin);
    v12 = (std::pair<std::string, std::string> *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::language_detector::Locale>,std::string *,std::string *,quasar::language_detector::Locale*>((uint64_t)p_end_cap, v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,quasar::language_detector::Locale *>((uint64_t)&v18, a2, a3, (uint64_t)begin);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)p_end_cap, (uint64_t)--end);
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_1ADF59408(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADF59410(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_OWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::language_detector::Locale>,std::string *,std::string *,quasar::language_detector::Locale*>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  _OWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _OWORD *v10;
  _OWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      quasar::language_detector::Locale::Locale(v4, v6);
      v6 += 24;
      v4 = v11 + 3;
      v11 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::language_detector::Locale>,quasar::language_detector::Locale*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADF594A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::language_detector::Locale>,quasar::language_detector::Locale*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,quasar::language_detector::Locale *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void **v7;
  int v8;
  void *__p[2];
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      quasar::language_detector::Locale::Locale(__p, v5);
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      *(_OWORD *)a4 = *(_OWORD *)__p;
      *(_QWORD *)(a4 + 16) = v11;
      HIBYTE(v11) = 0;
      LOBYTE(__p[0]) = 0;
      v7 = (void **)(a4 + 24);
      if (*(char *)(a4 + 47) < 0)
      {
        operator delete(*v7);
        v8 = SHIBYTE(v11);
        *(_OWORD *)v7 = v12;
        *(_QWORD *)(a4 + 40) = v13;
        HIBYTE(v13) = 0;
        LOBYTE(v12) = 0;
        if (v8 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_OWORD *)v7 = v12;
        *(_QWORD *)(a4 + 40) = v13;
      }
      v5 += 24;
      a4 += 48;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t **std::__hash_table<std::string_view,std::hash<std::string_view>,std::equal_to<std::string_view>,std::allocator<std::string_view>>::find<std::string_view>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  uint64_t *v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;

  v4 = std::__string_view_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v14 = a2;
    v12 = *(uint64_t **)a2;
    v13 = *(_QWORD *)(v14 + 8);
    do
    {
      v15 = (unint64_t)v11[1];
      if (v6 == v15)
      {
        if (v11[3] == (uint64_t *)v13 && !memcmp(v11[2], v12, v13))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v15 >= *(_QWORD *)&v5)
            v15 %= *(_QWORD *)&v5;
        }
        else
        {
          v15 &= *(_QWORD *)&v5 - 1;
        }
        if (v15 != v9)
          return 0;
      }
      v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

std::string *std::allocate_shared[abi:ne180100]<quasar::LDFrontend const,std::allocator<quasar::LDFrontend const>,std::string,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  std::string *v4;
  std::string *result;

  v4 = (std::string *)operator new(0x30uLL);
  result = std::__shared_ptr_emplace<quasar::LDFrontend const>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<quasar::LDFrontend const>,0>(v4, a1);
  *a2 = v4 + 1;
  a2[1] = v4;
  return result;
}

void sub_1ADF596FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::LDFrontend const>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<quasar::LDFrontend const>,0>(std::string *a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D40BC8;
  v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void sub_1ADF5976C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LDFrontend const>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40BC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LDFrontend const>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40BC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::LDFrontend const>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN6quasar8LDConfigENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xE0uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN6quasar8LDConfigENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADF59814(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN6quasar8LDConfigENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  char v3;

  a1[2] = 0;
  *a1 = &unk_1E5D450E8;
  a1[1] = 0;
  std::allocator<quasar::LDConfig>::construct[abi:ne180100]<quasar::LDConfig>((uint64_t)&v3, (uint64_t)(a1 + 3));
  return a1;
}

void sub_1ADF59870(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LDConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D450E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LDConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D450E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::LDConfig>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<quasar::LDConfig>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

_QWORD *std::allocator<quasar::LDConfig>::construct[abi:ne180100]<quasar::LDConfig>(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_QWORD *)(a2 + 192) = 0;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_DWORD *)(a2 + 4) = -1;
  *(_OWORD *)(a2 + 122) = 0u;
  *(_BYTE *)(a2 + 138) = 1;
  *(_QWORD *)(a2 + 152) = 0x3FE6666666666666;
  result = std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a2 + 160), "4, 1, 2");
  *(_DWORD *)(a2 + 196) = -1;
  return result;
}

void sub_1ADF59984(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 135) < 0)
    operator delete(*(void **)(v2 + 112));
  if (*(char *)(v2 + 111) < 0)
    operator delete(*(void **)(v2 + 88));
  if (*(char *)(v2 + 87) < 0)
    operator delete(*(void **)(v2 + 64));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 39) < 0)
    operator delete(*v3);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LDConfig>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  if (*(char *)(a2 + 183) < 0)
    operator delete(*(void **)(a2 + 160));
  if (*(char *)(a2 + 135) < 0)
    operator delete(*(void **)(a2 + 112));
  if (*(char *)(a2 + 111) < 0)
    operator delete(*(void **)(a2 + 88));
  if (*(char *)(a2 + 87) < 0)
    operator delete(*(void **)(a2 + 64));
  v3 = (void **)(a2 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
}

char *std::__tree<std::__value_type<quasar::language_detector::Locale,std::string>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,std::string>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,std::string>>>::__emplace_unique_key_args<quasar::language_detector::Locale,std::piecewise_construct_t const&,std::tuple<quasar::language_detector::Locale&&>,std::tuple<>>(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  void **v6;
  char *v7;
  uint64_t **v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[2];
  char v14;
  uint64_t v15;

  v6 = (void **)std::__tree<quasar::language_detector::Locale>::__find_equal<quasar::language_detector::Locale>((uint64_t)a1, &v15, a2);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (char *)operator new(0x68uLL);
    v13[1] = a1 + 1;
    v9 = *a4;
    v10 = **a4;
    *((_QWORD *)v7 + 6) = *((_QWORD *)*a4 + 2);
    *((_OWORD *)v7 + 2) = v10;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = 0;
    *(_QWORD *)v9 = 0;
    v11 = *((_QWORD *)v9 + 5);
    *(_OWORD *)(v7 + 56) = *(__int128 *)((char *)v9 + 24);
    *((_QWORD *)v7 + 9) = v11;
    *((_QWORD *)v9 + 4) = 0;
    *((_QWORD *)v9 + 5) = 0;
    *((_QWORD *)v9 + 3) = 0;
    *((_QWORD *)v7 + 11) = 0;
    *((_QWORD *)v7 + 12) = 0;
    *((_QWORD *)v7 + 10) = 0;
    v14 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v15, v8, (uint64_t *)v7);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,void *>>>>::reset[abi:ne180100]((uint64_t)v13, 0);
  }
  return v7;
}

void std::__shared_ptr_emplace<quasar::ContextAwareLDModelConfig const>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40C00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ContextAwareLDModelConfig const>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40C00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::ContextAwareLDModelConfig const>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<quasar::ContextAwareLDModelConfig const>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

__n128 std::allocator<quasar::ContextAwareLDModelConfig const>::construct[abi:ne180100]<quasar::ContextAwareLDModelConfig const,quasar::ContextAwareLDModelConfig>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  v3 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = *(__int128 *)((char *)a3 + 24);
  *(_QWORD *)(a2 + 40) = *((_QWORD *)a3 + 5);
  *((_QWORD *)a3 + 3) = 0;
  *((_QWORD *)a3 + 4) = 0;
  *((_QWORD *)a3 + 5) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 48) = a3[3];
  *(_QWORD *)(a2 + 64) = *((_QWORD *)a3 + 8);
  *((_QWORD *)a3 + 6) = 0;
  *((_QWORD *)a3 + 7) = 0;
  *((_QWORD *)a3 + 8) = 0;
  v4 = *(__int128 *)((char *)a3 + 72);
  *(_QWORD *)(a2 + 88) = *((_QWORD *)a3 + 11);
  *(_OWORD *)(a2 + 72) = v4;
  *((_QWORD *)a3 + 10) = 0;
  *((_QWORD *)a3 + 11) = 0;
  *((_QWORD *)a3 + 9) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 96) = a3[6];
  *(_QWORD *)(a2 + 112) = *((_QWORD *)a3 + 14);
  *((_QWORD *)a3 + 12) = 0;
  *((_QWORD *)a3 + 13) = 0;
  *((_QWORD *)a3 + 14) = 0;
  v5 = *(__int128 *)((char *)a3 + 120);
  *(_QWORD *)(a2 + 136) = *((_QWORD *)a3 + 17);
  *(_OWORD *)(a2 + 120) = v5;
  *((_QWORD *)a3 + 16) = 0;
  *((_QWORD *)a3 + 17) = 0;
  *((_QWORD *)a3 + 15) = 0;
  *(_BYTE *)(a2 + 144) = *((_BYTE *)a3 + 144);
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  result = *(__n128 *)((char *)a3 + 152);
  *(__n128 *)(a2 + 152) = result;
  *(_QWORD *)(a2 + 168) = *((_QWORD *)a3 + 21);
  *((_QWORD *)a3 + 19) = 0;
  *((_QWORD *)a3 + 20) = 0;
  *((_QWORD *)a3 + 21) = 0;
  return result;
}

void std::allocator<quasar::ContextAwareLDModelConfig const>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 143) < 0)
    operator delete(*(void **)(a2 + 120));
  v3 = (void **)(a2 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 95) < 0)
    operator delete(*(void **)(a2 + 72));
  v3 = (void **)(a2 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a2 + 24);
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN6quasar14LDRequestStateENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  uint64_t result;

  v2 = (char *)operator new(0x170uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN6quasar14LDRequestStateENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_1ADF59D48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__120__shared_ptr_emplaceIN6quasar14LDRequestStateENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(uint64_t a1)
{
  quasar::LDRequestState *v2;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E5D42950;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v2 = (quasar::LDRequestState *)(a1 + 24);
  *((_OWORD *)v2 + 15) = 0u;
  *((_OWORD *)v2 + 16) = 0u;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *((_OWORD *)v2 + 19) = 0u;
  *((_OWORD *)v2 + 20) = 0u;
  quasar::LDRequestState::LDRequestState(v2);
  return a1;
}

void sub_1ADF59DE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LDRequestState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42950;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LDRequestState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42950;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::LDRequestState>::__on_zero_shared(uint64_t a1)
{
  quasar::LDRequestState::~LDRequestState((quasar::LDRequestState *)(a1 + 24));
}

quasar::LDRequestState *quasar::LDRequestState::LDRequestState(quasar::LDRequestState *this)
{
  clockid_t v2;

  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  quasar::PTree::PTree((quasar::LDRequestState *)((char *)this + 224));
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  *((_BYTE *)this + 328) = 1;
  kaldi::Timer::Reset((quasar::LDRequestState *)((char *)this + 304), v2);
  *((_QWORD *)this + 42) = 0;
  return this;
}

void sub_1ADF59EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  quasar::PTree *v15;
  void *v17;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v14);
  quasar::PTree::~PTree(v15);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v13);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v12);
  a10 = (void **)(v10 + 168);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v11);
  v17 = *(void **)(v10 + 104);
  if (v17)
  {
    *(_QWORD *)(v10 + 112) = v17;
    operator delete(v17);
  }
  std::deque<std::vector<int>>::~deque[abi:ne180100]((_QWORD *)(v10 + 56));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v10 + 32);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v10 + 16);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void quasar::LDRequestState::~LDRequestState(quasar::LDRequestState *this)
{
  quasar::PTree *v2;
  void *v3;
  void **v4;

  v2 = (quasar::LDRequestState *)((char *)this + 224);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 288);
  quasar::PTree::~PTree(v2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 208);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 192);
  v4 = (void **)((char *)this + 168);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)((char *)this + 144);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 128);
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 14) = v3;
    operator delete(v3);
  }
  std::deque<std::vector<int>>::~deque[abi:ne180100]((_QWORD *)this + 7);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void std::__function::__func<quasar::LanguageDetector::processAcousticResult(quasar::LDRequestState &,quasar::LanguageDetector::WrappedLDAcousticResult &)::$_2,std::allocator<quasar::LanguageDetector::processAcousticResult(quasar::LDRequestState &,quasar::LanguageDetector::WrappedLDAcousticResult &)::$_2>,std::string ()(quasar::language_detector::Locale const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::LanguageDetector::processAcousticResult(quasar::LDRequestState &,quasar::LanguageDetector::WrappedLDAcousticResult &)::$_2,std::allocator<quasar::LanguageDetector::processAcousticResult(quasar::LDRequestState &,quasar::LanguageDetector::WrappedLDAcousticResult &)::$_2>,std::string ()(quasar::language_detector::Locale const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3F610;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::LanguageDetector::processAcousticResult(quasar::LDRequestState &,quasar::LanguageDetector::WrappedLDAcousticResult &)::$_2,std::allocator<quasar::LanguageDetector::processAcousticResult(quasar::LDRequestState &,quasar::LanguageDetector::WrappedLDAcousticResult &)::$_2>,std::string ()(quasar::language_detector::Locale const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3F610;
  a2[1] = v2;
  return result;
}

void std::__function::__func<quasar::LanguageDetector::processAcousticResult(quasar::LDRequestState &,quasar::LanguageDetector::WrappedLDAcousticResult &)::$_2,std::allocator<quasar::LanguageDetector::processAcousticResult(quasar::LDRequestState &,quasar::LanguageDetector::WrappedLDAcousticResult &)::$_2>,std::string ()(quasar::language_detector::Locale const&)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  quasar::localeToLanguageUsingOverrides(a2, *(_QWORD *)(a1 + 8), a3);
}

uint64_t std::__function::__func<quasar::LanguageDetector::processAcousticResult(quasar::LDRequestState &,quasar::LanguageDetector::WrappedLDAcousticResult &)::$_2,std::allocator<quasar::LanguageDetector::processAcousticResult(quasar::LDRequestState &,quasar::LanguageDetector::WrappedLDAcousticResult &)::$_2>,std::string ()(quasar::language_detector::Locale const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::LanguageDetector::processAcousticResult(quasar::LDRequestState &,quasar::LanguageDetector::WrappedLDAcousticResult &)::$_2,std::allocator<quasar::LanguageDetector::processAcousticResult(quasar::LDRequestState &,quasar::LanguageDetector::WrappedLDAcousticResult &)::$_2>,std::string ()(quasar::language_detector::Locale const&)>::target_type()
{
}

void tokenize_utf8_string(const std::string *__s@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  size_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  std::string *v16;
  std::string *v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  char *v21;
  std::allocator<std::string> *v22;
  int v23;
  int v24;
  int v25;
  std::string::size_type v26;
  size_t v27;
  const void *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  std::string *v35;
  char end_high;
  std::__split_buffer<std::string>::pointer first;
  std::__split_buffer<std::string>::pointer begin;
  const void *p_v;
  size_t v40;
  _BOOL4 v41;
  _BOOL4 v42;
  unint64_t v43;
  __int128 v44;
  const std::string::value_type *v45;
  std::string::size_type v46;
  std::__split_buffer<std::string>::pointer v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  std::string *v52;
  std::string *v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  std::string *v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  char *v61;
  std::string __p;
  char *__sa;
  std::__split_buffer<std::string> __v;
  char v65;

  v6 = (char *)__s;
  if (SHIBYTE(__s->__r_.__value_.__r.__words[2]) < 0)
    v6 = (char *)__s->__r_.__value_.__r.__words[0];
  __sa = v6;
  v7 = strlen(v6);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v8 = v6;
  if (std::string::compare((const std::string *)a2, ""))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    v9 = *(_QWORD *)(a3 + 16);
    v10 = *(_QWORD *)(a3 + 8);
    if (v10 >= v9)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *(_QWORD *)a3) >> 3);
      v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *(_QWORD *)a3) >> 3);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v13;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
      if (v15)
        v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a3 + 16, v15);
      else
        v16 = 0;
      v17 = v16 + v12;
      __v.__first_ = v16;
      __v.__begin_ = v17;
      __v.__end_cap_.__value_ = &v16[v15];
      v18 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v17->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
      memset(&__p, 0, sizeof(__p));
      __v.__end_ = v17 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
      v19 = *(_QWORD *)(a3 + 8);
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
      v20 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(a3 + 8) = v19;
      if (v20 < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v11 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v10 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v10 = v11;
      *(_QWORD *)(a3 + 8) = v10 + 24;
    }
    v8 = __sa;
  }
  v21 = &v6[v7 + 1];
  v22 = (std::allocator<std::string> *)(a3 + 16);
  v61 = v6;
  do
  {
    if (!utf8::next<char *>(&__sa, v21))
      goto LABEL_73;
    v23 = strlen(v6);
    v24 = v23 - strlen(v8);
    v25 = v23 - v24 - strlen(__sa);
    v26 = v24;
    if (!std::string::compare((const std::string *)a2, ""))
    {
      std::string::basic_string(&__p, __s, v24, v25, (std::allocator<char> *)&__v);
      v30 = *(_QWORD *)(a3 + 8);
      v29 = *(_QWORD *)(a3 + 16);
      if (v30 < v29)
        goto LABEL_49;
      v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *(_QWORD *)a3) >> 3);
      v32 = v31 + 1;
      if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *(_QWORD *)a3) >> 3);
      if (2 * v33 > v32)
        v32 = 2 * v33;
      if (v33 >= 0x555555555555555)
        v34 = 0xAAAAAAAAAAAAAAALL;
      else
        v34 = v32;
      __v.__end_cap_.__value_ = v22;
      if (v34)
        v35 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v22, v34);
      else
        v35 = 0;
      v53 = v35 + v31;
      __v.__first_ = v35;
      __v.__begin_ = v53;
      __v.__end_cap_.__value_ = &v35[v34];
      v54 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v53->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53->__r_.__value_.__l.__data_ = v54;
      memset(&__p, 0, sizeof(__p));
      __v.__end_ = v53 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
      v55 = *(_QWORD *)(a3 + 8);
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
      v56 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(a3 + 8) = v55;
      if (v56 < 0)
        goto LABEL_71;
    }
    else
    {
      std::string::basic_string((std::string *)&__v, __s, v24, v25, (std::allocator<char> *)&v65);
      if (*(char *)(a2 + 23) < 0)
      {
        v28 = *(const void **)a2;
        v27 = *(_QWORD *)(a2 + 8);
      }
      else
      {
        v27 = *(unsigned __int8 *)(a2 + 23);
        v28 = (const void *)a2;
      }
      end_high = HIBYTE(__v.__end_);
      first = __v.__first_;
      if (SHIBYTE(__v.__end_) >= 0)
        begin = (std::__split_buffer<std::string>::pointer)HIBYTE(__v.__end_);
      else
        begin = __v.__begin_;
      if (SHIBYTE(__v.__end_) >= 0)
        p_v = &__v;
      else
        p_v = __v.__first_;
      if ((unint64_t)begin >= v27)
        v40 = v27;
      else
        v40 = (size_t)begin;
      v41 = memcmp(v28, p_v, v40) == 0;
      v42 = begin == (std::__split_buffer<std::string>::pointer)v27 && v41;
      if (end_high < 0)
        operator delete(first);
      v22 = (std::allocator<std::string> *)(a3 + 16);
      if (v42)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        v6 = v61;
        v30 = *(_QWORD *)(a3 + 8);
        v43 = *(_QWORD *)(a3 + 16);
        if (v30 < v43)
        {
LABEL_49:
          v44 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v30 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)v30 = v44;
          *(_QWORD *)(a3 + 8) = v30 + 24;
          goto LABEL_73;
        }
        v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - *(_QWORD *)a3) >> 3);
        v49 = v48 + 1;
        if (v48 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - *(_QWORD *)a3) >> 3);
        if (2 * v50 > v49)
          v49 = 2 * v50;
        if (v50 >= 0x555555555555555)
          v51 = 0xAAAAAAAAAAAAAAALL;
        else
          v51 = v49;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
        if (v51)
          v52 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a3 + 16, v51);
        else
          v52 = 0;
        v57 = v52 + v48;
        __v.__first_ = v52;
        __v.__begin_ = v57;
        __v.__end_cap_.__value_ = &v52[v51];
        v58 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v57->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57->__r_.__value_.__l.__data_ = v58;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v57 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
        v59 = *(_QWORD *)(a3 + 8);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        v60 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(_QWORD *)(a3 + 8) = v59;
        v22 = (std::allocator<std::string> *)(a3 + 16);
        if (v60 < 0)
        {
LABEL_71:
          v47 = (std::__split_buffer<std::string>::pointer)__p.__r_.__value_.__r.__words[0];
          goto LABEL_72;
        }
      }
      else
      {
        std::string::basic_string((std::string *)&__v, __s, v26, v25, (std::allocator<char> *)&v65);
        v6 = v61;
        if (SHIBYTE(__v.__end_) >= 0)
          v45 = (const std::string::value_type *)&__v;
        else
          v45 = (const std::string::value_type *)__v.__first_;
        if (SHIBYTE(__v.__end_) >= 0)
          v46 = HIBYTE(__v.__end_);
        else
          v46 = (std::string::size_type)__v.__begin_;
        std::string::append((std::string *)(*(_QWORD *)(a3 + 8) - 24), v45, v46);
        if (SHIBYTE(__v.__end_) < 0)
        {
          v47 = __v.__first_;
LABEL_72:
          operator delete(v47);
        }
      }
    }
LABEL_73:
    v8 = __sa;
  }
  while (__sa < v21);
}

void sub_1ADF5A5C8(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, uint64_t a9, std::__split_buffer<std::wstring> *a10, void *__pa, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a18);
  if (a16 < 0)
    operator delete(__pa);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

uint64_t utf8::next<char *>(char **a1, char *a2)
{
  int v3;
  _BYTE *exception;
  char v6;
  _DWORD *v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;

  v10 = 0;
  v3 = utf8::internal::validate_next<char *>(a1, a2, &v10);
  if ((v3 - 2) < 3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v6 = **a1;
    *(_QWORD *)exception = &unk_1E5D29230;
    exception[8] = v6;
  }
  if (v3 == 5)
  {
    v7 = __cxa_allocate_exception(0x10uLL);
    v8 = v10;
    *(_QWORD *)v7 = &unk_1E5D29280;
    v7[2] = v8;
  }
  if (v3 == 1)
  {
    v9 = __cxa_allocate_exception(8uLL);
    *v9 = &unk_1E5D29258;
  }
  return v10;
}

void tokenize_entry(const std::string *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  __int128 *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _OWORD v22[17];
  uint64_t v23;
  uint64_t v24;

  if (a4)
    *a4 = 0;
  tokenize_utf8_string(a1, a2, (uint64_t)&v23);
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v8 = v23;
  if (v24 != v23)
  {
    v9 = 0;
    v10 = 1;
    do
    {
      if ((*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a3 + 96))(a3, v8 + 24 * v9) == -1)
      {
        if (a4)
          *a4 = 1;
        if (quasar::gLogLevel >= 6)
        {
          memset(v22, 0, sizeof(v22));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
          v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Symbol: '", 9);
          if (0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 3) <= v9)
            std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
          v15 = v23 + 24 * v9;
          v16 = *(char *)(v15 + 23);
          if (v16 >= 0)
            v17 = v23 + 24 * v9;
          else
            v17 = *(_QWORD *)v15;
          if (v16 >= 0)
            v18 = *(unsigned __int8 *)(v15 + 23);
          else
            v18 = *(_QWORD *)(v15 + 8);
          v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v17, v18);
          v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"' not found in input symbols table.", 35);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" Mapping to null...", 19);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v22);
        }
      }
      else
      {
        if (0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 3) <= v9)
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        v11 = (__int128 *)(v23 + 24 * v9);
        v12 = a5[1];
        if (v12 >= a5[2])
        {
          v13 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a5, v11);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a5, v11);
          v13 = v12 + 24;
        }
        a5[1] = v13;
      }
      v9 = v10;
      v8 = v23;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 3) > v10++);
  }
  *(_QWORD *)&v22[0] = &v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v22);
}

void sub_1ADF5A928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;

  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a9);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  a9 = v9 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

uint64_t utf8::internal::validate_next<char *>(char **a1, char *a2, unsigned int *a3)
{
  char *v5;
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  char v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v5 = *a1;
  v13 = 0;
  v6 = *v5;
  if (*v5 < 0)
  {
    if ((v6 & 0xE0) == 0xC0)
    {
      if (v5 == a2)
      {
        result = 1;
        goto LABEL_39;
      }
      *a1 = v5 + 1;
      if (v5 + 1 == a2)
      {
        result = 1;
      }
      else
      {
        v10 = v5[1];
        if ((v10 & 0xC0) == 0x80)
        {
          v11 = v10 & 0x3F | ((v6 & 0x1F) << 6);
          v8 = 2;
          v6 = v11;
          goto LABEL_4;
        }
        result = 3;
      }
LABEL_38:
      a2 = v5;
      goto LABEL_39;
    }
    if ((v6 & 0xF0) == 0xE0)
    {
      result = utf8::internal::get_sequence_3<std::__wrap_iter<char const*>>(a1, a2, (int *)&v13);
      v8 = 3;
      if ((_DWORD)result)
        goto LABEL_38;
    }
    else
    {
      if ((v6 & 0xF8) != 0xF0)
        return 2;
      result = utf8::internal::get_sequence_4<std::__wrap_iter<char const*>>(a1, a2, (int *)&v13);
      v8 = 4;
      if ((_DWORD)result)
        goto LABEL_38;
    }
    v6 = v13;
LABEL_4:
    if (HIWORD(v6) > 0x10u || (v6 & 0xFFFFF800) == 55296)
    {
      result = 5;
    }
    else
    {
      if (v6 > 0x7F)
      {
        if (v6 > 0x7FF)
        {
          if (HIWORD(v6))
            v12 = 1;
          else
            v12 = v8 == 3;
          if (v12)
            goto LABEL_17;
        }
        else if (v8 == 2)
        {
          goto LABEL_17;
        }
      }
      else if (v8 == 1)
      {
LABEL_17:
        if (a3)
          *a3 = v6;
        result = 0;
        a2 = *a1 + 1;
        goto LABEL_39;
      }
      result = 4;
    }
    goto LABEL_38;
  }
  result = 1;
  if (v5 != a2)
  {
    v8 = 1;
    goto LABEL_4;
  }
LABEL_39:
  *a1 = a2;
  return result;
}

void utf8::not_enough_room::~not_enough_room(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1AF44D190);
}

const char *utf8::not_enough_room::what(utf8::not_enough_room *this)
{
  return "Not enough space";
}

void utf8::invalid_utf8::~invalid_utf8(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1AF44D190);
}

const char *utf8::invalid_utf8::what(utf8::invalid_utf8 *this)
{
  return "Invalid UTF-8";
}

void utf8::invalid_code_point::~invalid_code_point(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1AF44D190);
}

const char *utf8::invalid_code_point::what(utf8::invalid_code_point *this)
{
  return "Invalid code point";
}

uint64_t kaldi::hashstring2enum(uint64_t *a1, int *a2)
{
  int v2;
  int v7;

  v2 = *((char *)a1 + 23);
  if (v2 < 0)
  {
    if (a1[1] != 3)
      return 0;
    a1 = (uint64_t *)*a1;
  }
  else if (v2 != 3)
  {
    return 0;
  }
  if (*(_WORD *)a1 == 30770 && *((_BYTE *)a1 + 2) == 50)
  {
    v7 = 0;
  }
  else if (*(_WORD *)a1 == 30771 && *((_BYTE *)a1 + 2) == 50)
  {
    v7 = 1;
  }
  else
  {
    if (*(_WORD *)a1 != 30771 || *((_BYTE *)a1 + 2) != 51)
      return 0;
    v7 = 2;
  }
  *a2 = v7;
  return 1;
}

uint64_t kaldi::computeHash(uint64_t a1, _QWORD *a2, unsigned int a3, int a4, int a5)
{
  switch(a5)
  {
    case 2:
      kaldi::computeHash3(a1, a2, a3, a4);
      return 1;
    case 1:
      kaldi::computeHash2(a1, a2, a3, a4);
      return 1;
    case 0:
      kaldi::computeHash1(a1, a2, a3, a4);
      return 1;
  }
  return 0;
}

uint64_t kaldi::computeHash1(uint64_t a1, _QWORD *a2, unsigned int a3, int a4)
{
  unsigned int v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  signed int v14;
  uint64_t v15;
  float v16;
  float v17;
  int v18;
  float v19;
  float v20;

  if (kaldi::MatrixBase<float>::NumRows(a1) >= 2)
  {
    v8 = a4 - 1;
    v9 = a4 - a3;
    v10 = 1;
    do
    {
      if (v8 <= a3)
      {
        v11 = 0;
        v14 = v10 - 1;
      }
      else
      {
        v11 = 0;
        v12 = *(_DWORD *)(a1 + 16);
        v13 = *(_QWORD *)a1 + 4 * (int)(v12 * v10);
        v14 = v10 - 1;
        v15 = *(_QWORD *)a1 + 4 * (int)(v12 * (v10 - 1));
        v16 = *(float *)(v13 + 4 * (int)a3);
        v17 = *(float *)(v15 + 4 * (int)a3);
        v18 = 1;
        do
        {
          v19 = v16;
          v16 = *(float *)(v13 + 4 * (int)(a3 + v18));
          v20 = (float)(v19 - v16) - v17;
          v17 = *(float *)(v15 + 4 * (int)(a3 + v18));
          if ((float)(v20 + v17) > 0.0)
          {
            if ((v18 - 2) >= 0x20)
              std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
            v11 |= 1 << (v18 - 2);
          }
          ++v18;
        }
        while (v9 != v18);
      }
      *(float *)(*a2 + 4 * v14) = (float)v11;
      ++v10;
    }
    while (v10 < kaldi::MatrixBase<float>::NumRows(a1));
  }
  return 1;
}

uint64_t kaldi::computeHash2(uint64_t a1, _QWORD *a2, unsigned int a3, int a4)
{
  unsigned int v8;
  int v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  float v17;
  float v18;
  int v19;
  float v20;
  float v21;
  int v22;

  if (kaldi::MatrixBase<float>::NumRows(a1) - 3 <= 0xFFFFFFFD)
  {
    v8 = a4 - 1;
    v9 = a4 - a3;
    v10 = 1;
    do
    {
      if (v8 <= a3)
      {
        v11 = 0;
        v15 = v10 - 1;
        v12 = v10 + 1;
      }
      else
      {
        v11 = 0;
        v12 = v10 + 1;
        v13 = *(_DWORD *)(a1 + 16);
        v14 = *(_QWORD *)a1 + 4 * v13 * (v10 + 1);
        v15 = v10 - 1;
        v16 = *(_QWORD *)a1 + 4 * v13 * (v10 - 1);
        v17 = *(float *)(v14 + 4 * (int)a3);
        v18 = *(float *)(v16 + 4 * (int)a3);
        v19 = 1;
        do
        {
          v20 = v17;
          v17 = *(float *)(v14 + 4 * (int)(a3 + v19));
          v21 = (float)(v20 - v17) - v18;
          v18 = *(float *)(v16 + 4 * (int)(a3 + v19));
          if ((float)(v21 + v18) > 0.0)
          {
            if ((v19 - 2) >= 0x20)
              std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
            v11 |= 1 << (v19 - 2);
          }
          ++v19;
        }
        while (v9 != v19);
      }
      *(float *)(*a2 + 4 * v15) = (float)v11;
      v22 = kaldi::MatrixBase<float>::NumRows(a1);
      v10 = v12;
    }
    while (v12 < v22 - 1);
  }
  return 1;
}

uint64_t kaldi::computeHash3(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  double v25;
  int v26;
  float v27;
  int v28;

  if (kaldi::MatrixBase<float>::NumRows(a1) - 3 <= 0xFFFFFFFD)
  {
    v8 = a4 - 1;
    v9 = a3 + 1;
    v10 = a4 - a3 - 2;
    v11 = 1;
    do
    {
      if (v9 >= v8)
      {
        v13 = 0;
        v18 = v11 - 1;
        v16 = v11 + 1;
      }
      else
      {
        v12 = 0;
        v13 = 0;
        v14 = *(_DWORD *)(a1 + 16);
        v15 = *(_QWORD *)a1 + 4 * v14 * v11;
        v16 = v11 + 1;
        v17 = *(_QWORD *)a1 + 4 * v14 * (v11 + 1);
        v18 = v11 - 1;
        v19 = *(_QWORD *)a1 + 4 * v14 * (v11 - 1);
        v20 = *(float *)(v15 + 4 * v9);
        v21 = *(float *)(v17 + 4 * v9);
        v22 = *(float *)(v19 + 4 * v9);
        do
        {
          v23 = v21;
          v24 = v22;
          v25 = v20;
          v26 = a3 + v12 + 2;
          v21 = *(float *)(v17 + 4 * v26);
          v22 = *(float *)(v19 + 4 * v26);
          v20 = *(float *)(v15 + 4 * v26);
          v27 = v25
              + (float)((float)((float)((float)((float)((float)((float)(v21 + v23)
                                                              + *(float *)(v17 + 4 * (int)(a3 + v12)))
                                                      + v22)
                                              + v24)
                                      + *(float *)(v19 + 4 * (int)(a3 + v12)))
                              + v20)
                      + *(float *)(v15 + 4 * (int)(a3 + v12)))
              * -0.125;
          if (v27 > 0.0)
          {
            if (v12 >= 0x20)
              std::__throw_out_of_range[abi:ne180100]("bitset set argument out of range");
            v13 |= 1 << v12;
          }
          ++v12;
        }
        while (v10 != v12);
      }
      *(float *)(*a2 + 4 * v18) = (float)v13;
      v28 = kaldi::MatrixBase<float>::NumRows(a1);
      v11 = v16;
    }
    while (v16 < v28 - 1);
  }
  return 1;
}

float kaldi::computeHashSimilarity(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  float v9;
  unsigned int v11;
  int8x8_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  float *v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  float *v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  int v30;
  float v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v37[2];
  int v38;

  v6 = *(unsigned int *)(a1 + 8);
  v7 = *(unsigned int *)(a2 + 8);
  if ((int)v6 >= (int)v7)
    v8 = *(_DWORD *)(a2 + 8);
  else
    v8 = *(_DWORD *)(a1 + 8);
  v9 = 10.0;
  if (a3 - 1 < v8)
  {
    if (v8 >= a4)
      v11 = a4;
    else
      v11 = v8;
    kaldi::Matrix<float>::Matrix((uint64_t)v37, v6, v7, 0, 0);
    v13 = *(unsigned int *)(a1 + 8);
    v14 = *(unsigned int *)(a2 + 8);
    if ((int)v13 >= 1)
    {
      v15 = 0;
      v16 = *(float **)a1;
      v17 = *(float **)a2;
      v18 = (float *)v37[0];
      v19 = 4 * v38;
      do
      {
        v12.i32[0] = v16[v15] ^ ~*v17;
        v12 = vcnt_s8(v12);
        v12.i16[0] = vaddlv_u8((uint8x8_t)v12);
        *v18 = (float)v12.i32[0];
        ++v15;
        v18 = (float *)((char *)v18 + v19);
      }
      while (v13 != v15);
    }
    if ((int)v14 >= 1)
    {
      v20 = 0;
      v21 = *(float **)a1;
      v22 = *(float **)a2;
      v23 = v37[0];
      do
      {
        v12.i32[0] = *v21 ^ ~v22[v20];
        v12 = vcnt_s8(v12);
        v12.i16[0] = vaddlv_u8((uint8x8_t)v12);
        *(float *)(v23 + 4 * v20++) = (float)v12.i32[0];
      }
      while (v14 != v20);
    }
    if ((int)v13 > 1)
    {
      v24 = v37[0];
      v25 = *(float **)a1;
      v26 = 4 * v38;
      v27 = *(_QWORD *)a2 + 4;
      for (i = 1; i != v13; ++i)
      {
        if ((int)v14 >= 2)
        {
          v29 = 0;
          do
          {
            v12.i32[0] = v25[i] ^ ~*(float *)(v27 + 4 * v29);
            v12 = vcnt_s8(v12);
            v12.i16[0] = vaddlv_u8((uint8x8_t)v12);
            *(float *)(v24 + v26 + 4 * v29 + 4) = *(float *)(v24 + 4 * v29) + (float)v12.i32[0];
            ++v29;
          }
          while (v14 - 1 != v29);
        }
        v24 += v26;
      }
    }
    v30 = v11 - 1;
    v31 = 10.0;
    if ((int)(v11 - 1) < (int)v13)
    {
      v32 = v11 - 1;
      v33 = 4 * v38;
      v34 = v37[0] + (v33 + 4) * v30;
      do
      {
        if (v30 < (int)v14)
        {
          v35 = 0;
          do
          {
            v31 = fmaxf(v31, *(float *)(v34 + 4 * v35)- *(float *)(v37[0] + 4 * (int)(v38 + v38 * (v32 - v11)) + 4 * (int)v35));
            ++v35;
          }
          while (v30 - (_DWORD)v14 + (_DWORD)v35);
        }
        ++v32;
        v34 += v33;
      }
      while ((_DWORD)v13 != v32);
    }
    v9 = v31 / (double)v11;
    kaldi::Matrix<float>::~Matrix((uint64_t)v37);
  }
  return v9;
}

void quasar::printSymTableToTraceLog(quasar *this, const quasar::QsrTextSymbolTable *a2)
{
  unint64_t v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  void *__p[2];
  unsigned __int8 v9;
  _OWORD v10[17];

  if (quasar::gLogLevel >= 6)
  {
    v3 = quasar::QsrTextSymbolTable::NumSymbols(this);
    quasar::QsrTextSymbolTable::GetNthKey(this);
    if (v3)
    {
      v4 = 0;
      do
      {
        if (quasar::gLogLevel >= 6)
        {
          memset(v10, 0, sizeof(v10));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
          quasar::QsrTextSymbolTable::Find(this, __p);
          if ((v9 & 0x80u) == 0)
            v5 = __p;
          else
            v5 = (void **)__p[0];
          if ((v9 & 0x80u) == 0)
            v6 = v9;
          else
            v6 = (uint64_t)__p[1];
          v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v5, v6);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" : ", 3);
          std::ostream::operator<<();
          if ((char)v9 < 0)
            operator delete(__p[0]);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v10);
        }
        if (++v4 < v3)
          quasar::QsrTextSymbolTable::GetNthKey(this);
      }
      while (v3 != v4);
    }
  }
}

void sub_1ADF5B3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a16);
  _Unwind_Resume(a1);
}

_QWORD *quasar::lmeDataStatusString@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 6)
    v2 = "Unknown";
  else
    v2 = off_1E5D48FF8[a1];
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

_QWORD *quasar::lmeUsageStatusString@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 2)
    v2 = "Unknown";
  else
    v2 = off_1E5D49030[a1];
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

void quasar::formatResultTokens(const quasar::Token **a1, _BYTE *a2)
{
  const quasar::Token *v2;
  const quasar::Token *v3;
  std::string::size_type size;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  void **v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  __int128 v37;
  void **v38;
  std::string::size_type v39;
  std::string *v40;
  std::string::size_type v41;
  char v42;
  std::string::size_type v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  uint64_t *v47;
  _BYTE v48[32];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  std::string v64;
  std::string v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;
  std::string v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  unsigned int __val;
  unsigned int v80;
  unsigned int v81;
  float v82;
  void *v83[2];
  unsigned __int8 v84;
  uint64_t v85;
  void *v86[2];
  unsigned __int8 v87;
  uint64_t v88;
  void *v89;
  char v90;
  void *__p;
  char v92;
  uint64_t v93;
  std::string *v94;
  unint64_t v95;
  _BYTE v96[24];
  _QWORD v97[5];

  v97[2] = *MEMORY[0x1E0C80C00];
  memset(v96, 0, sizeof(v96));
  v93 = 0;
  v94 = 0;
  v95 = 0;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    v47 = (uint64_t *)(a2 + 8);
    do
    {
      quasar::Token::Token(&v78, v2);
      if (*a2)
        quasar::resetWhiteSpace(&v78, v47);
      if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v78.__r_.__value_.__r.__words[2]);
      else
        size = v78.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v68, size + 3);
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v6 = &v68;
      else
        v6 = (std::string *)v68.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v7 = &v78;
        else
          v7 = (std::string *)v78.__r_.__value_.__r.__words[0];
        memmove(v6, v7, size);
      }
      *(_DWORD *)((char *)&v6->__r_.__value_.__l.__data_ + size) = 2112032;
      std::to_string(&v67, __val);
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v8 = &v67;
      else
        v8 = (std::string *)v67.__r_.__value_.__r.__words[0];
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
      else
        v9 = v67.__r_.__value_.__l.__size_;
      v10 = std::string::append(&v68, (const std::string::value_type *)v8, v9);
      v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v69.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      v12 = std::string::append(&v69, " : ");
      v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v70.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v66, v80);
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v66;
      else
        v14 = (std::string *)v66.__r_.__value_.__r.__words[0];
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
      else
        v15 = v66.__r_.__value_.__l.__size_;
      v16 = std::string::append(&v70, (const std::string::value_type *)v14, v15);
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v71.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      v18 = std::string::append(&v71, ", phoneSeq: ");
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v72.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      if ((v84 & 0x80u) == 0)
        v20 = v83;
      else
        v20 = (void **)v83[0];
      if ((v84 & 0x80u) == 0)
        v21 = v84;
      else
        v21 = (std::string::size_type)v83[1];
      v22 = std::string::append(&v72, (const std::string::value_type *)v20, v21);
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      v73.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      v24 = std::string::append(&v73, ", startSil: ");
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v74.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v65, v81);
      if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &v65;
      else
        v26 = (std::string *)v65.__r_.__value_.__r.__words[0];
      if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
      else
        v27 = v65.__r_.__value_.__l.__size_;
      v28 = std::string::append(&v74, (const std::string::value_type *)v26, v27);
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v75.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      v30 = std::string::append(&v75, ", confidence: ");
      v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v76.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v64, v82);
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = &v64;
      else
        v32 = (std::string *)v64.__r_.__value_.__r.__words[0];
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
      else
        v33 = v64.__r_.__value_.__l.__size_;
      v34 = std::string::append(&v76, (const std::string::value_type *)v32, v33);
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v77.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      v36 = std::string::append(&v77, ", ipaPhoneSeq: ");
      v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      *(_QWORD *)&v48[16] = *((_QWORD *)&v36->__r_.__value_.__l + 2);
      *(_OWORD *)v48 = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      if ((v87 & 0x80u) == 0)
        v38 = v86;
      else
        v38 = (void **)v86[0];
      if ((v87 & 0x80u) == 0)
        v39 = v87;
      else
        v39 = (std::string::size_type)v86[1];
      v40 = std::string::append((std::string *)v48, (const std::string::value_type *)v38, v39);
      v41 = v40->__r_.__value_.__r.__words[0];
      v97[0] = v40->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v97 + 7) = *(std::string::size_type *)((char *)&v40->__r_.__value_.__r.__words[1] + 7);
      v42 = HIBYTE(v40->__r_.__value_.__r.__words[2]);
      v40->__r_.__value_.__l.__size_ = 0;
      v40->__r_.__value_.__r.__words[2] = 0;
      v40->__r_.__value_.__r.__words[0] = 0;
      if ((v96[23] & 0x80000000) != 0)
        operator delete(*(void **)v96);
      *(_QWORD *)v96 = v41;
      *(_QWORD *)&v96[8] = v97[0];
      *(_QWORD *)&v96[15] = *(_QWORD *)((char *)v97 + 7);
      v96[23] = v42;
      if ((v48[23] & 0x80000000) != 0)
        operator delete(*(void **)v48);
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v77.__r_.__value_.__l.__data_);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v65.__r_.__value_.__l.__data_);
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v74.__r_.__value_.__l.__data_);
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v73.__r_.__value_.__l.__data_);
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v72.__r_.__value_.__l.__data_);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v70.__r_.__value_.__l.__data_);
      if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v69.__r_.__value_.__l.__data_);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      v43 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
      if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v43 = v78.__r_.__value_.__l.__size_;
      if (v43)
      {
        v44 = v94;
        if ((unint64_t)v94 >= v95)
        {
          v46 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v93, (__int128 *)v96);
        }
        else
        {
          if ((v96[23] & 0x80000000) != 0)
          {
            std::string::__init_copy_ctor_external(v94, *(const std::string::value_type **)v96, *(std::string::size_type *)&v96[8]);
          }
          else
          {
            v45 = *(_OWORD *)v96;
            v94->__r_.__value_.__r.__words[2] = *(_QWORD *)&v96[16];
            *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v45;
          }
          v46 = v44 + 1;
        }
        v94 = v46;
      }
      else if (quasar::gLogLevel >= 5)
      {
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v49 = 0u;
        memset(v48, 0, sizeof(v48));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v48);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"Empty tokenName", 15);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v48);
      }
      if (v92 < 0)
        operator delete(__p);
      if (v90 < 0)
        operator delete(v89);
      *(_QWORD *)v48 = &v88;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v48);
      if ((char)v87 < 0)
        operator delete(v86[0]);
      *(_QWORD *)v48 = &v85;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v48);
      if ((char)v84 < 0)
        operator delete(v83[0]);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      v2 = (const quasar::Token *)((char *)v2 + 224);
    }
    while (v2 != v3);
  }
  *(_QWORD *)v48 = " ";
  *(_QWORD *)&v48[8] = 1;
  quasar::join<std::vector<std::string>>(&v93, (uint64_t *)v48);
  *(_QWORD *)v48 = &v93;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v48);
  if ((v96[23] & 0x80000000) != 0)
    operator delete(*(void **)v96);
}

void sub_1ADF5BA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  uint64_t v13;

  __p = (void *)(v13 - 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v13 - 121) < 0)
    operator delete(*(void **)(v13 - 144));
  _Unwind_Resume(a1);
}

void quasar::resetWhiteSpace(std::string *a1, uint64_t *a2)
{
  char v4;
  char v5;
  void *__p[2];
  char v7;

  if (quasar::startsWith((unsigned __int8 *)a1, (unsigned __int8 *)a2))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    quasar::replaceFirst((uint64_t)a1, a2, (uint64_t)__p);
    if (v7 < 0)
      operator delete(__p[0]);
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  a1[1].__r_.__value_.__s.__data_[21] = v4;
  if (quasar::endsWith((uint64_t *)a1, a2))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    quasar::replaceLast(a1, a2, (uint64_t)__p);
    if (v7 < 0)
      operator delete(__p[0]);
    v5 = 1;
  }
  else
  {
    v5 = 0;
  }
  a1[1].__r_.__value_.__s.__data_[20] = v5;
}

void sub_1ADF5BCF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::formatTokensEndTime(uint64_t *a1)
{
  uint64_t i;
  std::string *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  std::string *v24;
  unint64_t v25;
  __int128 v26;
  std::string::size_type v27;

  v26 = 0uLL;
  v27 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  for (i = *a1; i != a1[1]; i += 224)
  {
    std::to_string((std::string *)&v6, *(_DWORD *)(i + 36));
    if (SHIBYTE(v27) < 0)
      operator delete((void *)v26);
    v26 = v6;
    v27 = v7;
    if (*(char *)(i + 23) < 0)
    {
      if (!*(_QWORD *)(i + 8))
      {
LABEL_10:
        if (quasar::gLogLevel >= 5)
        {
          v21 = 0u;
          v22 = 0u;
          v19 = 0u;
          v20 = 0u;
          v17 = 0u;
          v18 = 0u;
          v15 = 0u;
          v16 = 0u;
          v13 = 0u;
          v14 = 0u;
          v11 = 0u;
          v12 = 0u;
          v9 = 0u;
          v10 = 0u;
          v7 = 0u;
          v8 = 0u;
          v6 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v6);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v6, (uint64_t)"Empty tokenName", 15);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v6);
        }
        continue;
      }
    }
    else if (!*(_BYTE *)(i + 23))
    {
      goto LABEL_10;
    }
    v3 = v24;
    if ((unint64_t)v24 >= v25)
    {
      v5 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v23, &v26);
    }
    else
    {
      if (SHIBYTE(v27) < 0)
      {
        std::string::__init_copy_ctor_external(v24, (const std::string::value_type *)v26, *((std::string::size_type *)&v26 + 1));
      }
      else
      {
        v4 = v26;
        v24->__r_.__value_.__r.__words[2] = v27;
        *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
      }
      v5 = v3 + 1;
    }
    v24 = v5;
  }
  *(_QWORD *)&v6 = " ";
  *((_QWORD *)&v6 + 1) = 1;
  quasar::join<std::vector<std::string>>(&v23, (uint64_t *)&v6);
  *(_QWORD *)&v6 = &v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v6);
  if (SHIBYTE(v27) < 0)
    operator delete((void *)v26);
}

void sub_1ADF5BEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  a9 = (void **)(v9 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (*(char *)(v9 - 73) < 0)
    operator delete(*(void **)(v9 - 96));
  _Unwind_Resume(a1);
}

void quasar::formatResultTokensSimple(std::string *a1, char a2)
{
  std::string::size_type v3;
  std::string *v4;
  std::string *v5;
  __int128 v6;
  int v7;
  void **v8[2];
  void **v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  std::string *v13;
  unint64_t v14;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v3 = a1->__r_.__value_.__r.__words[0];
  if (a1->__r_.__value_.__r.__words[0] != a1->__r_.__value_.__l.__size_)
  {
    v4 = a1;
    v5 = 0;
    do
    {
      if ((unint64_t)v5 >= v14)
      {
        a1 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v12, (__int128 *)v3);
        v5 = a1;
      }
      else
      {
        if (*(char *)(v3 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v3, *(_QWORD *)(v3 + 8));
        }
        else
        {
          v6 = *(_OWORD *)v3;
          v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 16);
          *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
        }
        ++v5;
      }
      v13 = v5;
      v3 += 224;
    }
    while (v3 != v4->__r_.__value_.__l.__size_);
  }
  if ((a2 & 1) != 0)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v7 = quasar::QsrText::SingletonInstance((quasar::QsrText *)a1);
    quasar::QsrText::removeW00(v7, &v12, (uint64_t *)&v9);
    v8[0] = (void **)" ";
    v8[1] = (void **)1;
    quasar::join<std::vector<std::string>>((uint64_t *)&v9, (uint64_t *)v8);
    v8[0] = (void **)&v9;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v8);
  }
  else
  {
    v9 = (void **)" ";
    v10 = 1;
    quasar::join<std::vector<std::string>>((uint64_t *)&v12, (uint64_t *)&v9);
  }
  v9 = (void **)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v9);
}

void sub_1ADF5C03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void ***a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, char a14)
{
  a9 = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  a11 = (void **)&a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void quasar::wordPieceSequenceToWords(std::string *__str@<X0>, int a2@<W1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::size_type v6;
  std::string::size_type size;
  std::string::size_type v8;
  std::string::size_type v9;
  char v10;
  std::__split_buffer<std::wstring>::pointer end_high;
  std::__split_buffer<std::wstring>::pointer v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  int v17;
  std::__split_buffer<std::wstring>::pointer first;
  int v20;
  std::string::size_type v21;
  std::string::size_type v22;
  std::__split_buffer<std::wstring>::pointer begin;
  std::__split_buffer<std::wstring>::pointer v24;
  int v25;
  unsigned __int8 *v26;
  uint64_t v27;
  std::__split_buffer<std::wstring> *v28;
  int v29;
  int first_low;
  int v31;
  _BOOL4 v32;
  std::__split_buffer<std::wstring>::pointer v34;
  int v35;
  std::string::size_type v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  unint64_t v40;
  __int128 v41;
  std::string::size_type v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  std::wstring *v48;
  std::wstring *v49;
  __int128 v50;
  uint64_t v51;
  int v52;
  std::string::size_type v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  const std::string::value_type *v58;
  std::string::size_type v59;
  uint64_t v60;
  unint64_t *v62;
  void *__p[2];
  std::wstring::size_type v65;
  std::string v66;
  std::__split_buffer<std::wstring> v67[7];

  if ((char)a3[23] < 0)
  {
    v6 = *((_QWORD *)a3 + 1);
    if (v6)
      goto LABEL_3;
LABEL_95:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v67);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v67, "whiteSpaceCharacter.size() > 0 && \"Illegal white space character\"");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v67);
  }
  v6 = a3[23];
  if (!a3[23])
    goto LABEL_95;
LABEL_3:
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = __str->__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_90;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v62 = (unint64_t *)(a4 + 16);
  do
  {
    while (1)
    {
      std::string::basic_string((std::string *)v67, __str, v8, v6, (std::allocator<char> *)&v66);
      if (SHIBYTE(v67[0].__end_) >= 0)
        end_high = (std::__split_buffer<std::wstring>::pointer)HIBYTE(v67[0].__end_);
      else
        end_high = v67[0].__begin_;
      v12 = (std::__split_buffer<std::wstring>::pointer)a3[23];
      v13 = (char)v12;
      if ((char)v12 < 0)
        v12 = (std::__split_buffer<std::wstring>::pointer)*((_QWORD *)a3 + 1);
      if (end_high != v12)
      {
        if ((HIBYTE(v67[0].__end_) & 0x80) != 0)
          operator delete(v67[0].__first_);
        goto LABEL_29;
      }
      v14 = v13 >= 0 ? a3 : *(unsigned __int8 **)a3;
      if ((HIBYTE(v67[0].__end_) & 0x80) == 0)
        break;
      first = v67[0].__first_;
      v20 = memcmp(v67[0].__first_, v14, (size_t)v67[0].__begin_);
      operator delete(first);
      if (!v20)
        goto LABEL_66;
LABEL_29:
      v21 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      if ((v21 & 0x80u) != 0)
        v21 = __str->__r_.__value_.__l.__size_;
      v22 = v9;
      if (v21 > (int)v9)
      {
        v22 = (int)v9;
        do
        {
          std::string::basic_string((std::string *)v67, __str, v22, v6, (std::allocator<char> *)&v66);
          if (SHIBYTE(v67[0].__end_) >= 0)
            begin = (std::__split_buffer<std::wstring>::pointer)HIBYTE(v67[0].__end_);
          else
            begin = v67[0].__begin_;
          v24 = (std::__split_buffer<std::wstring>::pointer)a3[23];
          v25 = (char)v24;
          if ((char)v24 < 0)
            v24 = (std::__split_buffer<std::wstring>::pointer)*((_QWORD *)a3 + 1);
          if (begin == v24)
          {
            if (v25 >= 0)
              v26 = a3;
            else
              v26 = *(unsigned __int8 **)a3;
            if ((HIBYTE(v67[0].__end_) & 0x80) != 0)
            {
              v34 = v67[0].__first_;
              v35 = memcmp(v67[0].__first_, v26, (size_t)v67[0].__begin_);
              operator delete(v34);
              if (!v35)
                break;
              goto LABEL_57;
            }
            if (!HIBYTE(v67[0].__end_))
              break;
            v27 = HIBYTE(v67[0].__end_) - 1;
            v28 = v67;
            do
            {
              first_low = LOBYTE(v28->__first_);
              v28 = (std::__split_buffer<std::wstring> *)((char *)v28 + 1);
              v29 = first_low;
              v31 = *v26++;
              v32 = v29 != v31;
            }
            while (v29 == v31 && v27-- != 0);
            if ((HIBYTE(v67[0].__end_) & 0x80) != 0)
            {
LABEL_54:
              operator delete(v67[0].__first_);
              if (!v32)
                break;
              goto LABEL_57;
            }
          }
          else
          {
            v32 = 1;
            if ((HIBYTE(v67[0].__end_) & 0x80) != 0)
              goto LABEL_54;
          }
          if (!v32)
            break;
LABEL_57:
          ++v22;
          v36 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
          if ((v36 & 0x80u) != 0)
            v36 = __str->__r_.__value_.__l.__size_;
        }
        while (v36 > v22);
      }
      std::string::basic_string(&v66, __str, v8, (int)v22 - (int)v9, (std::allocator<char> *)v67);
      if ((v10 & 1) != 0)
      {
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a3, (const void **)&v66.__r_.__value_.__l.__data_, (uint64_t)__p);
        v38 = *(_QWORD *)(a4 + 8);
        v37 = *(_QWORD *)(a4 + 16);
        if (v38 >= v37)
        {
          v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - *(_QWORD *)a4) >> 3);
          v45 = v44 + 1;
          if (v44 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37 - *(_QWORD *)a4) >> 3);
          if (2 * v46 > v45)
            v45 = 2 * v46;
          if (v46 >= 0x555555555555555)
            v47 = 0xAAAAAAAAAAAAAAALL;
          else
            v47 = v45;
          v67[0].__end_cap_.__value_ = (std::allocator<std::wstring> *)(a4 + 16);
          if (v47)
            v48 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v62, v47);
          else
            v48 = 0;
          v49 = v48 + v44;
          v67[0].__first_ = v48;
          v67[0].__begin_ = v49;
          v67[0].__end_cap_.__value_ = &v48[v47];
          v50 = *(_OWORD *)__p;
          v49->__r_.__value_.__r.__words[2] = v65;
          *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v50;
          __p[1] = 0;
          v65 = 0;
          __p[0] = 0;
          v67[0].__end_ = v49 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, (std::__split_buffer<std::string> *)v67);
          v51 = *(_QWORD *)(a4 + 8);
          std::__split_buffer<std::string>::~__split_buffer(v67);
          v52 = SHIBYTE(v65);
          *(_QWORD *)(a4 + 8) = v51;
          if (v52 < 0)
            operator delete(__p[0]);
        }
        else
        {
          v39 = *(_OWORD *)__p;
          *(_QWORD *)(v38 + 16) = v65;
          *(_OWORD *)v38 = v39;
          *(_QWORD *)(a4 + 8) = v38 + 24;
        }
      }
      else
      {
        v40 = *(_QWORD *)(a4 + 8);
        if (v40 >= *(_QWORD *)(a4 + 16))
        {
          v43 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a4, (__int128 *)&v66);
        }
        else
        {
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(*(std::string **)(a4 + 8), v66.__r_.__value_.__l.__data_, v66.__r_.__value_.__l.__size_);
          }
          else
          {
            v41 = *(_OWORD *)&v66.__r_.__value_.__l.__data_;
            *(_QWORD *)(v40 + 16) = *((_QWORD *)&v66.__r_.__value_.__l + 2);
            *(_OWORD *)v40 = v41;
          }
          v43 = v40 + 24;
          *(_QWORD *)(a4 + 8) = v40 + 24;
        }
        *(_QWORD *)(a4 + 8) = v43;
      }
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      v10 = 0;
      v8 = (int)v22;
      v53 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      if ((v53 & 0x80u) != 0)
        v53 = __str->__r_.__value_.__l.__size_;
      v9 = v22;
      if (v53 <= (int)v22)
        goto LABEL_90;
    }
    if (HIBYTE(v67[0].__end_))
    {
      v15 = 0;
      do
      {
        v16 = *((unsigned __int8 *)&v67[0].__first_ + v15);
        v17 = v14[v15];
      }
      while (v16 == v17 && HIBYTE(v67[0].__end_) - 1 != v15++);
      if (v16 != v17)
        goto LABEL_29;
    }
LABEL_66:
    v9 = (v9 + v6);
    v8 = (int)v9;
    v42 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((v42 & 0x80u) != 0)
      v42 = __str->__r_.__value_.__l.__size_;
    v10 = 1;
  }
  while (v42 > (int)v9);
  v56 = *(_QWORD *)a4;
  v55 = *(_QWORD *)(a4 + 8);
  if (*(_QWORD *)a4 != v55)
  {
    v57 = (char)a3[23];
    if (v57 >= 0)
      v58 = (const std::string::value_type *)a3;
    else
      v58 = *(const std::string::value_type **)a3;
    if (v57 >= 0)
      v59 = a3[23];
    else
      v59 = *((_QWORD *)a3 + 1);
    std::string::append((std::string *)(v55 - 24), v58, v59);
LABEL_90:
    if (a2)
    {
      v54 = *(_QWORD *)a4;
      if (*(_QWORD *)a4 != *(_QWORD *)(a4 + 8))
      {
        std::string::basic_string[abi:ne180100]<0>(v67, "");
        quasar::replaceFirst(v54, (uint64_t *)a3, (uint64_t)v67);
        if (SHIBYTE(v67[0].__end_) < 0)
          operator delete(v67[0].__first_);
      }
    }
    return;
  }
  if ((a2 & 1) == 0)
  {
    if (v56 >= *v62)
    {
      v60 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a4, (__int128 *)a3);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a4, (__int128 *)a3);
      v60 = v56 + 24;
    }
    *(_QWORD *)(a4 + 8) = v60;
  }
}

void sub_1ADF5C5A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  __break(1u);
}

void quasar::getTopChoice(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  std::string *v3;
  _BYTE v4[8];
  void *__p;
  char v6;

  v3 = *(std::string **)a1;
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else if (a2)
  {
    quasar::formatResultTokensSimple(*(std::string **)a1, 0);
  }
  else
  {
    v4[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "▁");
    quasar::formatResultTokens((const quasar::Token **)v3, v4);
    if (v6 < 0)
      operator delete(__p);
  }
}

void sub_1ADF5C6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::getTopChoice(__int128 ***a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 **v3;
  __int128 *v4;
  __int128 *v5;
  unint64_t v6;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *a1;
  if (*a1 != a1[1])
  {
    v4 = *v3;
    v5 = v3[1];
    if (*v3 != v5)
    {
      v6 = 0;
      do
      {
        if (v6 >= a2[2])
        {
          v6 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, v4);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v4);
          v6 += 24;
        }
        a2[1] = v6;
        v4 += 14;
      }
      while (v4 != v5);
    }
  }
}

void sub_1ADF5C7A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::getTokensEndTime(uint64_t **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  v2 = *a1;
  if (a1[1] == v2)
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  else
    quasar::formatTokensEndTime(v2);
}

uint64_t quasar::tokensWithTimes(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  v2 = *a1;
  if (a1[1] != *a1)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      if (v4)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" ", 1);
      v5 = *(char *)(v2 + v3 + 23);
      if (v5 >= 0)
        v6 = v2 + v3;
      else
        v6 = *(_QWORD *)(v2 + v3);
      if (v5 >= 0)
        v7 = *(unsigned __int8 *)(v2 + v3 + 23);
      else
        v7 = *(_QWORD *)(v2 + v3 + 8);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v6, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"[", 1);
      v9 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" ", 1);
      v10 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"]", 1);
      ++v4;
      v2 = *a1;
      v3 += 224;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5) > v4);
  }
  std::stringbuf::str();
  v13[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v13[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v15);
}

void sub_1ADF5C980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *quasar::topChoiceWithTimes@<X0>(uint64_t **a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;

  v3 = *a1;
  if (v3 == a1[1])
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
  else
    return (_QWORD *)quasar::tokensWithTimes(v3);
}

void quasar::splitStringToTokens(uint64_t a1, uint64_t *a2)
{
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *__p[2];
  char v12;
  _QWORD v13[3];

  std::string::basic_string[abi:ne180100]<0>(__p, " ");
  quasar::split(a1, (uint64_t *)__p, 1, (uint64_t)v13);
  if (v12 < 0)
    operator delete(__p[0]);
  v5 = *a2;
  for (i = a2[1]; i != v5; quasar::Token::~Token((void **)(i - 224)))
    ;
  a2[1] = v5;
  std::vector<quasar::Token>::resize(a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13[1] - v13[0]) >> 3));
  v6 = *a2;
  if (a2[1] != *a2)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    do
    {
      std::string::operator=((std::string *)(v6 + v8), (const std::string *)(v13[0] + v7));
      ++v9;
      v6 = *a2;
      v10 = a2[1];
      v8 += 224;
      v7 += 24;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((v10 - *a2) >> 5) > v9);
    if (v6 != v10)
      *(_BYTE *)(v10 - 180) = 0;
  }
  __p[0] = v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1ADF5CAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::tokens2Str(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  const std::string::value_type *v5;
  std::string *v6;
  __int128 v7;
  void **v8;
  std::string::size_type v9;
  std::string v10;
  void *__p[2];
  int64_t v12;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      std::operator+<char>();
      if (*(_BYTE *)(v2 + 44))
        v5 = " ";
      else
        v5 = "";
      v6 = std::string::append(&v10, v5);
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v12 = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      if (v12 >= 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      if (v12 >= 0)
        v9 = HIBYTE(v12);
      else
        v9 = (std::string::size_type)__p[1];
      std::string::append(a2, (const std::string::value_type *)v8, v9);
      if (SHIBYTE(v12) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v10.__r_.__value_.__l.__data_);
      v2 += 224;
    }
    while (v2 != v3);
  }
}

void sub_1ADF5CC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

void quasar::tokens2Str(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4;
  const std::string::value_type *v6;
  std::string *v7;
  __int128 v8;
  void **v9;
  std::string::size_type v10;
  std::string v11;
  void *__p[2];
  int64_t v13;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  if (a1 != a2)
  {
    v4 = a1;
    do
    {
      std::operator+<char>();
      if (*(_BYTE *)(v4 + 44))
        v6 = " ";
      else
        v6 = "";
      v7 = std::string::append(&v11, v6);
      v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v13 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      if (v13 >= 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      if (v13 >= 0)
        v10 = HIBYTE(v13);
      else
        v10 = (std::string::size_type)__p[1];
      std::string::append(a3, (const std::string::value_type *)v9, v10);
      if (SHIBYTE(v13) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v11.__r_.__value_.__l.__data_);
      v4 += 224;
    }
    while (v4 != a2);
  }
}

void sub_1ADF5CD40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

void quasar::topChoice2Str(uint64_t **a1@<X0>, std::string *a2@<X8>)
{
  uint64_t *v3;

  v3 = *a1;
  if (v3 == a1[1])
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  else
    quasar::tokens2Str(v3, a2);
}

uint64_t quasar::isTokenSpanPrefixOf(uint64_t *a1, uint64_t *a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  char v20;
  void *v21;
  unint64_t v22;
  int v23;
  unsigned __int8 *locale;
  uint64_t v25;
  void **v26;
  int v27;
  int v28;
  int v29;
  int v30;
  BOOL v32;
  _BOOL4 v33;
  int v34;
  unsigned __int16 *v35;
  int v36;
  int v37;
  uint64_t result;
  int v40;
  int *v41;
  std::locale v42;
  unint64_t v43;
  unsigned __int8 v44;
  void *__s1[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;

  v4 = *a2;
  *a4 = -1;
  if (a2[1] == v4)
  {
    v40 = 0;
    result = 1;
    goto LABEL_64;
  }
  v6 = *a1;
  if (a1[1] == *a1)
    return 0;
  v41 = a4;
  while (1)
  {
    if (quasar::gLogLevel >= 5)
    {
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      *(_OWORD *)__s1 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"OriginalToken: ", 15);
      v10 = *(char *)(v6 + 23);
      if (v10 >= 0)
        v11 = v6;
      else
        v11 = *(_QWORD *)v6;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(v6 + 23);
      else
        v12 = *(_QWORD *)(v6 + 8);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"CandidateToken: ", 16);
      v15 = *(char *)(v4 + 23);
      if (v15 >= 0)
        v16 = v4;
      else
        v16 = *(_QWORD *)v4;
      if (v15 >= 0)
        v17 = *(unsigned __int8 *)(v4 + 23);
      else
        v17 = *(_QWORD *)(v4 + 8);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
      std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
      v19 = std::locale::use_facet(&v42, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
      std::locale::~locale(&v42);
      std::ostream::put();
      std::ostream::flush();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__s1);
    }
    quasar::toLower(v6, (uint64_t)__s1);
    quasar::toLower(v4, (uint64_t)&v42);
    v20 = BYTE7(v46);
    if ((SBYTE7(v46) & 0x80u) == 0)
      v21 = (void *)BYTE7(v46);
    else
      v21 = __s1[1];
    v22 = v44;
    v23 = (char)v44;
    if ((v44 & 0x80u) != 0)
      v22 = v43;
    if (v21 != (void *)v22)
    {
      v33 = 0;
      if ((char)v44 < 0)
        goto LABEL_45;
      goto LABEL_40;
    }
    if ((v44 & 0x80u) == 0)
      locale = (unsigned __int8 *)&v42;
    else
      locale = (unsigned __int8 *)v42.__locale_;
    if (SBYTE7(v46) < 0)
    {
      v33 = memcmp(__s1[0], locale, (size_t)__s1[1]) == 0;
      goto LABEL_39;
    }
    if (!BYTE7(v46))
      break;
    v25 = BYTE7(v46) - 1;
    v26 = __s1;
    do
    {
      v28 = *(unsigned __int8 *)v26;
      v26 = (void **)((char *)v26 + 1);
      v27 = v28;
      v30 = *locale++;
      v29 = v30;
      v32 = v25-- != 0;
      v33 = v27 == v29;
    }
    while (v27 == v29 && v32);
LABEL_39:
    if (v23 < 0)
      goto LABEL_45;
LABEL_40:
    if (v20 < 0)
      goto LABEL_46;
LABEL_41:
    if (v33)
      goto LABEL_42;
LABEL_47:
    if (!a3)
      goto LABEL_61;
    v34 = *(char *)(v6 + 23);
    if (v34 < 0)
    {
      if (*(_QWORD *)(v6 + 8) != 3)
        goto LABEL_61;
      v35 = *(unsigned __int16 **)v6;
    }
    else
    {
      v35 = (unsigned __int16 *)v6;
      if (v34 != 3)
        goto LABEL_61;
    }
    v36 = *v35;
    v37 = *((unsigned __int8 *)v35 + 2);
    if (v36 != 16188 || v37 != 62)
    {
LABEL_61:
      result = 0;
LABEL_62:
      v40 = -1;
      goto LABEL_63;
    }
LABEL_58:
    v6 += 224;
    if (v6 == a1[1])
      return 0;
  }
  v33 = 1;
  if (((char)v44 & 0x80000000) == 0)
    goto LABEL_40;
LABEL_45:
  operator delete(v42.__locale_);
  if ((BYTE7(v46) & 0x80) == 0)
    goto LABEL_41;
LABEL_46:
  operator delete(__s1[0]);
  if (!v33)
    goto LABEL_47;
LABEL_42:
  v4 += 224;
  if (v4 != a2[1])
    goto LABEL_58;
  if (v6 + 224 == a1[1])
  {
    result = 1;
    goto LABEL_62;
  }
  v40 = -1227133513 * ((unint64_t)(v6 - *a1) >> 5) + 1;
  result = 1;
LABEL_63:
  a4 = v41;
LABEL_64:
  *a4 = v40;
  return result;
}

void sub_1ADF5D0D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::concatNbest(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t *a4, unsigned int a5, unsigned int a6, __n128 a7)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 *v37;
  unint64_t v38;
  unint64_t v39;
  double v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  __n128 *v46;
  __n128 *v47;
  __n128 *v48;
  __n128 *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  __n128 *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  const quasar::Token **v63;
  const quasar::Token *v64;
  unsigned int v65;
  std::string *v66;
  unsigned int data;
  const quasar::Token *v68;
  unsigned int v69;
  int32x2_t v70;
  std::string *v71;
  std::string *v72;
  _QWORD *v73;
  uint64_t v74;
  char *v75;
  void *v76;
  char *v77;
  int64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  const std::locale::facet *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  std::locale::id *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  const std::locale::facet *v99;
  __int128 v100;
  uint64_t v101;
  void *v102;
  char *v103;
  unint64_t v105;
  std::locale v107;
  std::string *v108;
  unint64_t v109;
  void *v110[2];
  char *v111;
  __int128 v112;
  unint64_t v113;
  void *v114;
  __n128 *v115;
  __n128 *v116;
  void *__p;
  _QWORD *v118;
  unint64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  unint64_t v122;
  __int128 v123;
  _DWORD v124[8];
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  void **v139[3];

  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) != (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3
    || (v8 = a3,
        v9 = (_QWORD *)*a3,
        v10 = (_QWORD *)a3[1],
        v12 = *a4,
        v11 = a4[1],
        0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - *a3) >> 3) != (v11 - *a4) >> 3))
  {
    v137 = 0u;
    v138 = 0u;
    v135 = 0u;
    v136 = 0u;
    v133 = 0u;
    v134 = 0u;
    v131 = 0u;
    v132 = 0u;
    v129 = 0u;
    v130 = 0u;
    v127 = 0u;
    v128 = 0u;
    v125 = 0u;
    v126 = 0u;
    memset(v124, 0, sizeof(v124));
    v123 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v123);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v123, "There should be one cost for each result choice");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v123);
  }
  if (v9 == v10 || *v9 != v9[1])
  {
    v120 = 0;
    v121 = 0;
    v122 = 0;
    __p = 0;
    v118 = 0;
    v119 = 0;
    if (v11 != v12)
    {
      v15 = 0;
      do
      {
        v16 = (uint64_t *)(*v8 + 24 * v15);
        if (*v16 != v16[1])
        {
          v17 = v8;
          v18 = v121;
          if ((unint64_t)v121 >= v122)
          {
            v19 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v120, v16);
          }
          else
          {
            *v121 = 0;
            v18[1] = 0;
            v18[2] = 0;
            std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v18, *v16, v16[1], 0x6DB6DB6DB6DB6DB7 * ((v16[1] - *v16) >> 5));
            v19 = (uint64_t)(v18 + 3);
          }
          v8 = v17;
          v121 = (uint64_t *)v19;
          v20 = v118;
          if ((unint64_t)v118 >= v119)
          {
            v22 = __p;
            v23 = ((char *)v118 - (_BYTE *)__p) >> 3;
            v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v25 = v119 - (_QWORD)__p;
            if ((uint64_t)(v119 - (_QWORD)__p) >> 2 > v24)
              v24 = v25 >> 2;
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
              v26 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v26 = v24;
            if (v26)
            {
              v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v119, v26);
              v22 = __p;
              v20 = v118;
            }
            else
            {
              v27 = 0;
            }
            v28 = &v27[8 * v23];
            *(_QWORD *)v28 = *(_QWORD *)(v12 + 8 * v15);
            v21 = v28 + 8;
            while (v20 != v22)
            {
              v29 = *--v20;
              *((_QWORD *)v28 - 1) = v29;
              v28 -= 8;
            }
            __p = v28;
            v118 = v21;
            v119 = (unint64_t)&v27[8 * v26];
            if (v22)
              operator delete(v22);
          }
          else
          {
            *v118 = *(_QWORD *)(v12 + 8 * v15);
            v21 = v20 + 1;
          }
          v118 = v21;
          v12 = *a4;
          v11 = a4[1];
        }
        ++v15;
      }
      while (v15 < (v11 - v12) >> 3);
      v30 = v120;
      v31 = v121;
      if (v120 != v121)
      {
        a7.n128_u64[0] = (unint64_t)vdup_n_s32(a5);
        v32 = v120;
        do
        {
          v33 = *v32;
          v34 = v32[1];
          while (v33 != v34)
          {
            *(int32x2_t *)(v33 + 28) = vadd_s32(*(int32x2_t *)(v33 + 28), (int32x2_t)a7.n128_u64[0]);
            *(_DWORD *)(v33 + 36) += a5;
            v33 += 224;
          }
          v32 += 3;
        }
        while (v32 != v31);
        if (v30 != v31)
        {
          v36 = *a1;
          v35 = a1[1];
          if (*a1 == v35)
          {
            if (&v120 != (uint64_t **)a1)
              std::vector<std::vector<quasar::Token>>::__assign_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>((uint64_t)a1, v30, v31, 0xAAAAAAAAAAAAAAABLL * (v31 - v30));
            if (&__p != (void **)a2)
              std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)a2, (char *)__p, (uint64_t)v118, ((char *)v118 - (_BYTE *)__p) >> 3);
          }
          else
          {
            v37 = 0;
            v38 = 0;
            v114 = 0;
            v115 = 0;
            v116 = 0;
            do
            {
              if (v31 == v30)
              {
                v31 = v30;
              }
              else
              {
                v39 = 0;
                do
                {
                  a7.n128_u64[0] = *(_QWORD *)(*(_QWORD *)a2 + 8 * v38);
                  v40 = a7.n128_f64[0] + *((double *)__p + v39);
                  v41 = v38 | (v39 << 32);
                  if (v37 >= v116)
                  {
                    v42 = ((char *)v37 - (_BYTE *)v114) >> 4;
                    if ((unint64_t)(v42 + 1) >> 60)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    v43 = ((char *)v116 - (_BYTE *)v114) >> 3;
                    if (v43 <= v42 + 1)
                      v43 = v42 + 1;
                    if ((unint64_t)((char *)v116 - (_BYTE *)v114) >= 0x7FFFFFFFFFFFFFF0)
                      v44 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v44 = v43;
                    if (v44)
                      v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v116, v44);
                    else
                      v45 = 0;
                    v46 = (__n128 *)&v45[16 * v42];
                    v46->n128_f64[0] = v40;
                    v46->n128_u64[1] = v41;
                    v48 = (__n128 *)v114;
                    v47 = v115;
                    v49 = v46;
                    if (v115 != v114)
                    {
                      do
                      {
                        a7 = v47[-1];
                        v49[-1] = a7;
                        --v49;
                        --v47;
                      }
                      while (v47 != v48);
                      v47 = (__n128 *)v114;
                    }
                    v37 = v46 + 1;
                    v114 = v49;
                    v115 = v46 + 1;
                    v116 = (__n128 *)&v45[16 * v44];
                    if (v47)
                      operator delete(v47);
                  }
                  else
                  {
                    v37->n128_f64[0] = v40;
                    v37->n128_u64[1] = v41;
                    ++v37;
                  }
                  v115 = v37;
                  ++v39;
                  v30 = v120;
                  v31 = v121;
                }
                while (0xAAAAAAAAAAAAAAABLL * (v121 - v120) > v39);
                v36 = *a1;
                v35 = a1[1];
              }
              ++v38;
            }
            while (0xAAAAAAAAAAAAAAABLL * ((v35 - v36) >> 3) > v38);
            v50 = (char *)v37 - (_BYTE *)v114;
            if ((unint64_t)((char *)v37 - (_BYTE *)v114) > 0x10)
            {
              v51 = (char *)v37 - ((_BYTE *)v114 + 16);
              v52 = v51 >> 4;
              if (v51 < 1)
              {
                v53 = 0;
                v55 = 0;
              }
              else
              {
                v53 = (__n128 *)std::get_temporary_buffer[abi:ne180100]<std::pair<double,std::pair<int,int>>>(v51 >> 4);
                v55 = v54;
              }
              std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>((__n128 *)v114 + 1, v37, (uint64_t)&v112, v52, v53, v55, a7);
              if (v53)
                operator delete(v53);
              v50 = (char *)v115 - (_BYTE *)v114;
            }
            v112 = 0uLL;
            v113 = 0;
            v110[0] = 0;
            v110[1] = 0;
            v111 = 0;
            v56 = v50 >> 4;
            if (v56 >= a6)
              v56 = a6;
            v105 = v56;
            if ((int)v56 >= 1)
            {
              v57 = 0;
              do
              {
                v58 = (char *)v114 + 16 * v57;
                v59 = *((int *)v58 + 2);
                if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) <= v59)
                  std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                v60 = *((int *)v58 + 3);
                v61 = (uint64_t)v120;
                if (0xAAAAAAAAAAAAAAABLL * (v121 - v120) <= v60)
                  std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                v62 = (uint64_t *)(*a1 + 24 * (int)v59);
                v107.__locale_ = 0;
                v108 = 0;
                v109 = 0;
                std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(&v107, *v62, v62[1], 0x6DB6DB6DB6DB6DB7 * ((v62[1] - *v62) >> 5));
                v63 = (const quasar::Token **)(v61 + 24 * (int)v60);
                v64 = *v63;
                v65 = *((_DWORD *)*v63 + 7);
                v66 = v108;
                data = v108[-8].__r_.__value_.__l.__data_;
                if (v65 > data)
                  data = *((_DWORD *)*v63 + 7);
                LODWORD(v108[-8].__r_.__value_.__l.__data_) = data;
                v66[-8].__r_.__value_.__s.__data_[12] = 1;
                v68 = v63[1];
                if (v64 != v68)
                {
                  v69 = data - v65;
                  v70 = vdup_n_s32(data - v65);
                  do
                  {
                    quasar::Token::Token((std::string *)&v123, v64);
                    *(int32x2_t *)&v124[3] = vadd_s32(*(int32x2_t *)&v124[3], v70);
                    v124[5] += v69;
                    v71 = v108;
                    if ((unint64_t)v108 >= v109)
                    {
                      v72 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v107, (const quasar::Token *)&v123);
                    }
                    else
                    {
                      quasar::Token::Token(v108, (const quasar::Token *)&v123);
                      v72 = (std::string *)((char *)v71 + 224);
                    }
                    v108 = v72;
                    if (SBYTE7(v134) < 0)
                      operator delete((void *)v133);
                    if (SBYTE7(v132) < 0)
                      operator delete((void *)v131);
                    v139[0] = (void **)&v129 + 1;
                    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v139);
                    if (SBYTE7(v129) < 0)
                      operator delete((void *)v128);
                    v139[0] = (void **)&v126 + 1;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v139);
                    if (SBYTE7(v126) < 0)
                      operator delete((void *)v125);
                    if (SHIBYTE(v124[1]) < 0)
                      operator delete((void *)v123);
                    v64 = (const quasar::Token *)((char *)v64 + 224);
                  }
                  while (v64 != v68);
                }
                v73 = (_QWORD *)*((_QWORD *)&v112 + 1);
                if (*((_QWORD *)&v112 + 1) >= v113)
                {
                  v74 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v112, (uint64_t *)&v107);
                }
                else
                {
                  **((_QWORD **)&v112 + 1) = 0;
                  v73[1] = 0;
                  v73[2] = 0;
                  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v73, (uint64_t)v107.__locale_, (uint64_t)v108, 0x6DB6DB6DB6DB6DB7 * (((char *)v108 - (char *)v107.__locale_) >> 5));
                  v74 = (uint64_t)(v73 + 3);
                }
                *((_QWORD *)&v112 + 1) = v74;
                v75 = (char *)v110[1];
                if (v110[1] >= v111)
                {
                  v77 = (char *)v110[0];
                  v78 = ((char *)v110[1] - (char *)v110[0]) >> 3;
                  v79 = v78 + 1;
                  if ((unint64_t)(v78 + 1) >> 61)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v80 = v111 - (char *)v110[0];
                  if ((v111 - (char *)v110[0]) >> 2 > v79)
                    v79 = v80 >> 2;
                  if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8)
                    v81 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v81 = v79;
                  if (v81)
                  {
                    v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v111, v81);
                    v77 = (char *)v110[0];
                    v75 = (char *)v110[1];
                  }
                  else
                  {
                    v82 = 0;
                  }
                  v83 = &v82[8 * v78];
                  *(_QWORD *)v83 = *(_QWORD *)v58;
                  v76 = v83 + 8;
                  while (v75 != v77)
                  {
                    v84 = *((_QWORD *)v75 - 1);
                    v75 -= 8;
                    *((_QWORD *)v83 - 1) = v84;
                    v83 -= 8;
                  }
                  v110[0] = v83;
                  v110[1] = v76;
                  v111 = &v82[8 * v81];
                  if (v77)
                    operator delete(v77);
                }
                else
                {
                  *(_QWORD *)v110[1] = *(_QWORD *)v58;
                  v76 = v75 + 8;
                }
                v110[1] = v76;
                *(_QWORD *)&v123 = &v107;
                std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
                ++v57;
              }
              while (v57 != v105);
            }
            if (quasar::gLogLevel > 5)
            {
              v137 = 0u;
              v138 = 0u;
              v135 = 0u;
              v136 = 0u;
              v133 = 0u;
              v134 = 0u;
              v131 = 0u;
              v132 = 0u;
              v129 = 0u;
              v130 = 0u;
              v127 = 0u;
              v128 = 0u;
              v125 = 0u;
              v126 = 0u;
              memset(v124, 0, sizeof(v124));
              v123 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v123);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v123, (uint64_t)"concatNbest aChoices=", 21);
              v85 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)" bChoicesOrig=", 14);
              v86 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)" bChoices=", 10);
              v87 = (_QWORD *)std::ostream::operator<<();
              std::ios_base::getloc((const std::ios_base *)((char *)v87 + *(_QWORD *)(*v87 - 24)));
              v88 = std::locale::use_facet(&v107, MEMORY[0x1E0DE4A90]);
              ((void (*)(const std::locale::facet *, uint64_t))v88->__vftable[2].~facet_0)(v88, 10);
              std::locale::~locale(&v107);
              std::ostream::put();
              std::ostream::flush();
              quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v123);
              if ((int)v105 >= 1)
              {
                v89 = 0;
                v90 = 0;
                v91 = quasar::gLogLevel;
                v92 = (std::locale::id *)MEMORY[0x1E0DE4A90];
                do
                {
                  if (v91 >= 6)
                  {
                    v137 = 0u;
                    v138 = 0u;
                    v135 = 0u;
                    v136 = 0u;
                    v133 = 0u;
                    v134 = 0u;
                    v131 = 0u;
                    v132 = 0u;
                    v129 = 0u;
                    v130 = 0u;
                    v127 = 0u;
                    v128 = 0u;
                    v125 = 0u;
                    v126 = 0u;
                    memset(v124, 0, sizeof(v124));
                    v123 = 0u;
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v123);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v123, (uint64_t)"concatNbest[", 12);
                    v93 = (_QWORD *)std::ostream::operator<<();
                    v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"]:", 2);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)" cost=(", 7);
                    v95 = (_QWORD *)std::ostream::operator<<();
                    v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)")", 1);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)" aIndex=", 8);
                    v97 = (_QWORD *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)" bIndex=", 8);
                    v98 = (_QWORD *)std::ostream::operator<<();
                    std::ios_base::getloc((const std::ios_base *)((char *)v98 + *(_QWORD *)(*v98 - 24)));
                    v99 = std::locale::use_facet(&v107, v92);
                    ((void (*)(const std::locale::facet *, uint64_t))v99->__vftable[2].~facet_0)(v99, 10);
                    std::locale::~locale(&v107);
                    std::ostream::put();
                    std::ostream::flush();
                    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v123);
                    v91 = quasar::gLogLevel;
                  }
                  ++v90;
                  v89 += 16;
                }
                while (v105 != v90);
              }
            }
            v100 = *(_OWORD *)a1;
            *(_OWORD *)a1 = v112;
            v112 = v100;
            v101 = a1[2];
            a1[2] = v113;
            v113 = v101;
            v102 = *(void **)a2;
            *(_OWORD *)a2 = *(_OWORD *)v110;
            v103 = *(char **)(a2 + 16);
            *(_QWORD *)(a2 + 16) = v111;
            v110[0] = v102;
            v111 = v103;
            if (v102)
            {
              v110[1] = v102;
              operator delete(v102);
            }
            *(_QWORD *)&v123 = &v112;
            std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
            if (v114)
            {
              v115 = (__n128 *)v114;
              operator delete(v114);
            }
          }
        }
      }
      if (__p)
      {
        v118 = __p;
        operator delete(__p);
      }
    }
    *(_QWORD *)&v123 = &v120;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v123);
  }
}

void sub_1ADF5DC64()
{
  void *v0;

  if (v0)
    operator delete(v0);
  JUMPOUT(0x1ADF5DD50);
}

void sub_1ADF5DC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&a33);
}

void sub_1ADF5DC9C()
{
  JUMPOUT(0x1ADF5DD20);
}

void sub_1ADF5DCA8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14)
{
  std::locale::~locale(&a14);
  JUMPOUT(0x1ADF5DCE0);
}

void sub_1ADF5DCC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char *a33)
{
  if (__p)
    operator delete(__p);
  a33 = &a21;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
  }
  if (a27)
  {
    a28 = (uint64_t)a27;
    operator delete(a27);
  }
  a33 = &a30;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  _Unwind_Resume(a1);
}

uint64_t quasar::extendEndTime(uint64_t result, unsigned int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  unsigned int v5;

  v2 = *(_QWORD **)result;
  v3 = *(_QWORD **)(result + 8);
  while (v2 != v3)
  {
    v4 = v2[1];
    if (*v2 != v4)
    {
      v5 = *(_DWORD *)(v4 - 192);
      if (v5 <= a2)
        v5 = a2;
      *(_DWORD *)(v4 - 192) = v5;
    }
    v2 += 3;
  }
  return result;
}

void quasar::decodingSignalsToPtree(quasar *this, const quasar::Token::DecodingSignals *a2, quasar::PTree *a3)
{
  quasar *v5;
  float v6;
  quasar *v7;
  float v8;
  quasar *v9;
  float v10;
  quasar *v11;
  float v12;
  int Type;
  std::string v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19[2];
  char v20;

  v5 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v19, "graphCost");
  v6 = *(float *)this;
  Type = quasar::getType(v5, *(float *)this);
  std::to_string(&v14, v6);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v19, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v20 < 0)
    operator delete(v19[0]);
  v7 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v19, "acousticCost");
  v8 = *((float *)this + 1);
  Type = quasar::getType(v7, v8);
  std::to_string(&v14, v8);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v19, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v20 < 0)
    operator delete(v19[0]);
  v9 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v19, "acousticCostFirstPassCollapsed");
  v10 = *((float *)this + 2);
  Type = quasar::getType(v9, v10);
  std::to_string(&v14, v10);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v19, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v20 < 0)
    operator delete(v19[0]);
  v11 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v19, "acousticCostSecondPassUnpushed");
  v12 = *((float *)this + 3);
  Type = quasar::getType(v11, v12);
  std::to_string(&v14, v12);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v19, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v20 < 0)
    operator delete(v19[0]);
}

void sub_1ADF5DF9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  quasar::PTree::~PTree((quasar::PTree *)va);
  if (*(char *)(v2 - 33) < 0)
    operator delete(*(void **)(v2 - 56));
  _Unwind_Resume(a1);
}

void quasar::tokenToPtree(quasar *this, const quasar::Token *a2, quasar::PTree *a3)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  quasar *v9;
  float v10;
  int v11;
  int v12;
  char *v13;
  quasar::PTree *v14;
  int Type;
  std::string v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *__p[2];
  char v22;

  std::string::basic_string[abi:ne180100]<0>(__p, "tokenName");
  quasar::PTree::PTree(&Type, this);
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "tokenId");
  v5 = *((_DWORD *)this + 6);
  Type = quasar::getType((quasar *)v5);
  std::to_string(&v16, v5);
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "startMilliseconds");
  v6 = *((_DWORD *)this + 7);
  Type = quasar::getType((quasar *)v6);
  std::to_string(&v16, v6);
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "endMilliseconds");
  v7 = *((_DWORD *)this + 8);
  Type = quasar::getType((quasar *)v7);
  std::to_string(&v16, v7);
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "silStartMilliSeconds");
  v8 = *((_DWORD *)this + 9);
  Type = quasar::getType((quasar *)v8);
  std::to_string(&v16, v8);
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v22 < 0)
    operator delete(__p[0]);
  v9 = (quasar *)std::string::basic_string[abi:ne180100]<0>(__p, "confidence");
  v10 = *((float *)this + 10);
  Type = quasar::getType(v9, v10);
  std::to_string(&v16, v10);
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "hasSpaceAfter");
  v11 = *((unsigned __int8 *)this + 44);
  Type = quasar::getType((quasar *)*((unsigned __int8 *)this + 44));
  std::to_string(&v16, v11);
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "hasSpaceBefore");
  v12 = *((unsigned __int8 *)this + 45);
  Type = quasar::getType((quasar *)*((unsigned __int8 *)this + 45));
  std::to_string(&v16, v12);
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 1;
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "phoneSeq");
  quasar::PTree::PTree(&Type, (char *)this + 48);
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ipaPhoneSeq");
  quasar::PTree::PTree(&Type, (char *)this + 96);
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v22 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lmeType");
  v13 = quasar::lmeTypeString(*((_DWORD *)this + 42));
  quasar::PTree::PTree((quasar::PTree *)&Type, v13);
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)&Type, 1);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
  if (v22 < 0)
    operator delete(__p[0]);
  quasar::PTree::PTree((quasar::PTree *)&Type);
  quasar::decodingSignalsToPtree((quasar *)((char *)this + 204), (const quasar::Token::DecodingSignals *)&Type, v14);
  std::string::basic_string[abi:ne180100]<0>(__p, "decodingSignals");
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)__p, (uint64_t)&Type, 1);
  if (v22 < 0)
    operator delete(__p[0]);
  quasar::PTree::~PTree((quasar::PTree *)&Type);
}

void sub_1ADF5E484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  quasar::PTree::~PTree((quasar::PTree *)&a10);
  _Unwind_Resume(a1);
}

float quasar::ptreeToDecodingSignals(quasar *this, const quasar::PTree *a2)
{
  double v3;
  float v4;
  char v5;
  double v6;
  float v7;
  char v8;
  double v9;
  float v10;
  char v11;
  double v12;
  char v13;
  float v14;
  void *__p[2];
  char v17;
  float v18[4];

  quasar::Token::DecodingSignals::DecodingSignals(v18, 0.0, 0.0, 0.0, 0.0);
  std::string::basic_string[abi:ne180100]<0>(__p, "graphCost");
  quasar::PTree::getDoubleOptional((uint64_t)this, (uint64_t)__p);
  v4 = v3;
  if (!v5)
    v4 = NAN;
  v18[0] = v4;
  if (v17 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "acousticCost");
  quasar::PTree::getDoubleOptional((uint64_t)this, (uint64_t)__p);
  v7 = v6;
  if (!v8)
    v7 = NAN;
  v18[1] = v7;
  if (v17 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "acousticCostFirstPassCollapsed");
  quasar::PTree::getDoubleOptional((uint64_t)this, (uint64_t)__p);
  v10 = v9;
  if (!v11)
    v10 = NAN;
  v18[2] = v10;
  if (v17 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "acousticCostSecondPassUnpushed");
  quasar::PTree::getDoubleOptional((uint64_t)this, (uint64_t)__p);
  if (v13)
    v14 = v12;
  else
    v14 = NAN;
  v18[3] = v14;
  if (v17 < 0)
    operator delete(__p[0]);
  return v18[0];
}

void sub_1ADF5E694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ptreeToToken(quasar *this@<X0>, uint64_t a2@<X8>)
{
  quasar::PTree *Child;
  const std::string *String;
  uint64_t Int;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  quasar::PTree *v12;
  float Double;
  uint64_t v14;
  uint64_t v15;
  quasar::PTree *v16;
  const std::string *v17;
  quasar::PTree *v18;
  const std::string *v19;
  uint64_t ChildOptional;
  quasar::PTree *v21;
  uint64_t v22;
  int v23;
  quasar *v24;
  const quasar::PTree *v25;
  int v26;
  int v27;
  int v28;
  void *__p[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  quasar::Token::Token((quasar::Token *)a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "tokenName");
  Child = (quasar::PTree *)quasar::PTree::getChild((uint64_t)this, (__int128 *)__p);
  String = (const std::string *)quasar::PTree::getString(Child);
  std::string::operator=((std::string *)a2, String);
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "tokenId");
  Int = quasar::PTree::getIntOptional<int>((uint64_t)this, (uint64_t)__p);
  if ((Int & 0xFF00000000) != 0)
    v8 = Int;
  else
    v8 = -1;
  *(_DWORD *)(a2 + 24) = v8;
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "startMilliseconds");
  v9 = quasar::PTree::getChild((uint64_t)this, (__int128 *)__p);
  *(_DWORD *)(a2 + 28) = quasar::PTree::getInt<int>(v9);
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "endMilliseconds");
  v10 = quasar::PTree::getChild((uint64_t)this, (__int128 *)__p);
  *(_DWORD *)(a2 + 32) = quasar::PTree::getInt<int>(v10);
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "silStartMilliSeconds");
  v11 = quasar::PTree::getChild((uint64_t)this, (__int128 *)__p);
  *(_DWORD *)(a2 + 36) = quasar::PTree::getInt<int>(v11);
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "confidence");
  v12 = (quasar::PTree *)quasar::PTree::getChild((uint64_t)this, (__int128 *)__p);
  Double = quasar::PTree::getDouble(v12);
  *(float *)(a2 + 40) = Double;
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "hasSpaceAfter");
  v14 = quasar::PTree::getChild((uint64_t)this, (__int128 *)__p);
  *(_BYTE *)(a2 + 44) = quasar::PTree::getInt<int>(v14) != 0;
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "hasSpaceBefore");
  v15 = quasar::PTree::getChild((uint64_t)this, (__int128 *)__p);
  *(_BYTE *)(a2 + 45) = quasar::PTree::getInt<int>(v15) != 0;
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "phoneSeq");
  v16 = (quasar::PTree *)quasar::PTree::getChild((uint64_t)this, (__int128 *)__p);
  v17 = (const std::string *)quasar::PTree::getString(v16);
  std::string::operator=((std::string *)(a2 + 48), v17);
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ipaPhoneSeq");
  v18 = (quasar::PTree *)quasar::PTree::getChild((uint64_t)this, (__int128 *)__p);
  v19 = (const std::string *)quasar::PTree::getString(v18);
  std::string::operator=((std::string *)(a2 + 96), v19);
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lmeType");
  ChildOptional = quasar::PTree::getChildOptional((uint64_t)this, (uint64_t)__p);
  v21 = (quasar::PTree *)ChildOptional;
  if (SBYTE7(v30) < 0)
  {
    operator delete(__p[0]);
    if (v21)
      goto LABEL_26;
  }
  else if (ChildOptional)
  {
LABEL_26:
    v22 = quasar::PTree::getString(v21);
    v23 = quasar::lmeTypeFromString(v22);
    goto LABEL_31;
  }
  if (quasar::gLogLevel >= 2)
  {
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Field lmeType is missing from serialized Token; defaulting to invalid value.",
      76);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
  }
  v23 = 5;
LABEL_31:
  *(_DWORD *)(a2 + 168) = v23;
  std::string::basic_string[abi:ne180100]<0>(__p, "decodingSignals");
  v24 = (quasar *)quasar::PTree::getChild((uint64_t)this, (__int128 *)__p);
  *(float *)(a2 + 204) = quasar::ptreeToDecodingSignals(v24, v25);
  *(_DWORD *)(a2 + 208) = v26;
  *(_DWORD *)(a2 + 212) = v27;
  *(_DWORD *)(a2 + 216) = v28;
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
}

void sub_1ADF5EA14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void **v14;

  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
  quasar::Token::~Token(v14);
  _Unwind_Resume(a1);
}

void quasar::phraseToPtree(quasar **a1, quasar::PTree *a2)
{
  quasar *v2;
  quasar *v3;
  quasar::PTree *v5;
  _BYTE v6[64];

  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      quasar::PTree::PTree((quasar::PTree *)v6);
      quasar::tokenToPtree(v2, (const quasar::Token *)v6, v5);
      quasar::PTree::addChild(a2, (const quasar::PTree *)v6);
      quasar::PTree::~PTree((quasar::PTree *)v6);
      v2 = (quasar *)((char *)v2 + 224);
    }
    while (v2 != v3);
  }
}

void sub_1ADF5EB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::PTree::~PTree((quasar::PTree *)&a9);
  _Unwind_Resume(a1);
}

void quasar::ptreeToPhrase(quasar *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  uint64_t i;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  void *v17[2];
  uint64_t v18;
  _BYTE v19[22];
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  __int128 __p;
  uint64_t v33;
  __int128 v34;
  int v35;
  void **v36[2];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = quasar::PTree::begin(this);
  for (i = quasar::PTree::end(this); v5 != i; v5 += 88)
  {
    quasar::ptreeToToken((quasar *)(v5 + 24), (uint64_t)v17);
    v7 = a2[1];
    if (v7 >= a2[2])
    {
      v15 = std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token>(a2, (__int128 *)v17);
      v16 = SHIBYTE(v33);
      a2[1] = v15;
      if (v16 < 0)
        operator delete((void *)__p);
    }
    else
    {
      v8 = *(_OWORD *)v17;
      *(_QWORD *)(v7 + 16) = v18;
      *(_OWORD *)v7 = v8;
      v17[1] = 0;
      v18 = 0;
      v17[0] = 0;
      v9 = *(_QWORD *)&v19[14];
      *(_OWORD *)(v7 + 24) = *(_OWORD *)v19;
      *(_QWORD *)(v7 + 38) = v9;
      v10 = v21;
      *(_OWORD *)(v7 + 48) = v20;
      *(_QWORD *)(v7 + 64) = v10;
      *(_QWORD *)(v7 + 72) = 0;
      v21 = 0;
      v20 = 0uLL;
      *(_QWORD *)(v7 + 80) = 0;
      *(_QWORD *)(v7 + 88) = 0;
      *(_OWORD *)(v7 + 72) = v22;
      *(_QWORD *)(v7 + 88) = v23;
      v22 = 0uLL;
      v23 = 0;
      v11 = v24;
      *(_QWORD *)(v7 + 112) = v25;
      *(_QWORD *)(v7 + 120) = 0;
      *(_OWORD *)(v7 + 96) = v11;
      v25 = 0;
      v24 = 0uLL;
      *(_QWORD *)(v7 + 128) = 0;
      *(_QWORD *)(v7 + 136) = 0;
      *(_OWORD *)(v7 + 120) = v26;
      *(_QWORD *)(v7 + 136) = v27;
      v26 = 0uLL;
      v27 = 0;
      v12 = v28;
      *(_QWORD *)(v7 + 160) = v29;
      *(_OWORD *)(v7 + 144) = v12;
      v29 = 0;
      v28 = 0uLL;
      LODWORD(v10) = v30;
      *(_WORD *)(v7 + 172) = v31;
      *(_DWORD *)(v7 + 168) = v10;
      v13 = __p;
      *(_QWORD *)(v7 + 192) = v33;
      *(_OWORD *)(v7 + 176) = v13;
      v33 = 0;
      __p = 0uLL;
      v14 = v34;
      *(_DWORD *)(v7 + 216) = v35;
      *(_OWORD *)(v7 + 200) = v14;
      a2[1] = v7 + 224;
    }
    if (SHIBYTE(v29) < 0)
      operator delete((void *)v28);
    v36[0] = (void **)&v26;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v36);
    if (SHIBYTE(v25) < 0)
      operator delete((void *)v24);
    v36[0] = (void **)&v22;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v36);
    if (SHIBYTE(v21) < 0)
      operator delete((void *)v20);
    if (SHIBYTE(v18) < 0)
      operator delete(v17[0]);
  }
}

void sub_1ADF5ED5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::ptreeToSlice(quasar *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  uint64_t i;
  uint64_t v7[3];
  void **v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = quasar::PTree::begin(this);
  for (i = quasar::PTree::end(this); v5 != i; v5 += 88)
  {
    quasar::ptreeToPhrase((quasar *)(v5 + 24), v7);
    std::vector<std::vector<quasar::Token>>::emplace_back<std::vector<quasar::Token>>(a2, (uint64_t)v7);
    v8 = (void **)v7;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v8);
  }
}

void sub_1ADF5EE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::ptreeToFeatureMatrix@<X0>(quasar *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t Child;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[40];
  void *__p[2];
  char v18;

  std::string::basic_string[abi:ne180100]<0>(__p, "dimension");
  Child = quasar::PTree::getChild((uint64_t)this, (__int128 *)__p);
  v6 = quasar::PTree::getInt<int>(Child);
  if (v18 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "chunk-size");
  v7 = quasar::PTree::getChild((uint64_t)this, (__int128 *)__p);
  v8 = quasar::PTree::getInt<int>(v7);
  if (v18 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "frame-duration-ms");
  v9 = quasar::PTree::getChild((uint64_t)this, (__int128 *)__p);
  v10 = quasar::PTree::getInt<int>(v9);
  if (v18 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "frame-duration-ms-for-alignment");
  v11 = quasar::PTree::getChild((uint64_t)this, (__int128 *)__p);
  v12 = quasar::PTree::getInt<int>(v11);
  if (v18 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "fusion-features");
  v13 = quasar::PTree::getChild((uint64_t)this, (__int128 *)__p);
  quasar::PTree::getMatrix<float>(v13, (uint64_t)v16);
  if (v18 < 0)
    operator delete(__p[0]);
  v14 = operator new();
  kaldi::Matrix<float>::Matrix(__p, v16);
  *(_QWORD *)v14 = &unk_1E5D39888;
  *(_DWORD *)(v14 + 8) = v6;
  *(_DWORD *)(v14 + 12) = v8;
  *(_DWORD *)(v14 + 16) = v10;
  *(_DWORD *)(v14 + 20) = v12;
  kaldi::Matrix<float>::Matrix(v14 + 24, __p);
  kaldi::Matrix<float>::~Matrix((uint64_t)__p);
  *a2 = v14;
  return kaldi::Matrix<float>::~Matrix((uint64_t)v16);
}

void sub_1ADF5EFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  kaldi::Matrix<float>::~Matrix((uint64_t)&__p);
  MEMORY[0x1AF44D190](v19, 0x1081C406CEDAB82);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::readTsvFile@<X0>(int a1@<W1>, uint64_t *a2@<X8>)
{
  int v4;
  std::locale::id *v5;
  const std::locale::facet *v6;
  unsigned __int8 v7;
  _QWORD *v8;
  std::string::size_type size;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  std::string *p_p;
  std::string::size_type v17;
  _OWORD v18[17];
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  std::string __p;
  _QWORD v23[2];
  uint64_t v24;
  _QWORD v25[21];

  v25[19] = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::ifstream::basic_ifstream(v23);
  v4 = 0;
  memset(&__p, 0, sizeof(__p));
  v5 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(v23[0] - 24)));
    v6 = std::locale::use_facet((const std::locale *)v18, v5);
    v7 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
    std::locale::~locale((std::locale *)v18);
    v8 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v23, (uint64_t)&__p, v7);
    if ((*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) != 0)
      break;
    quasar::trim(&__p);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (size)
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
      kaldi::SplitStringToVector(&__p, "\t", 0, (uint64_t)&v19);
      if (v4)
      {
        if (!a1)
          goto LABEL_11;
      }
      else
      {
        v4 = -1431655765 * ((unint64_t)(v20 - (_QWORD)v19) >> 3);
        if (!a1)
          goto LABEL_11;
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v20 - (uint64_t)v19) >> 3) != v4)
      {
        memset(v18, 0, sizeof(v18));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Inconsistent number of columns. Expected ", 41);
        v13 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" got ", 5);
        v14 = (_QWORD *)std::ostream::operator<<();
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)":", 1);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          v17 = __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_p, v17);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v18);
      }
LABEL_11:
      v10 = a2[1];
      if (v10 >= a2[2])
      {
        v11 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>(a2, &v19);
      }
      else
      {
        std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)a2, &v19);
        v11 = v10 + 24;
      }
      a2[1] = v11;
      *(_QWORD *)&v18[0] = &v19;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v23[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v23 + *(_QWORD *)(v23[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1AF44CA70](&v24);
  std::istream::~istream();
  return MEMORY[0x1AF44D094](v25);
}

void sub_1ADF5F33C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void quasar::getTokenizedTokenPhraseChoiceListForEAR(uint64_t **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  unsigned int v5;
  uint64_t i;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  void **v10;

  if (a2)
  {
    quasar::getTokenizedNBestListForEAR(a1, 1, (uint64_t *)&v7);
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(&v7, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1));
  }
  v4 = v7;
  if (v7 == v8)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      for (i = *v4; i != v4[1]; i += 224)
      {
        if (v5 <= *(_DWORD *)(i + 32))
          v5 = *(_DWORD *)(i + 32);
      }
      v4 += 3;
    }
    while (v4 != v8);
  }
  quasar::TextProc::GetTokenizedPhraseChoiceList(&v7, v5, 1, a3);
  v10 = (void **)&v7;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v10);
}

void sub_1ADF5F474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::getTokenizedNBestListForEAR(uint64_t **a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  void **v5;
  __int128 **v6;
  __int128 **i;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11[3];
  void **v12;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if ((a2 & 1) != 0)
  {
    v5 = std::vector<std::vector<quasar::Token>>::reserve(a3, 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1));
    v6 = (__int128 **)*a1;
    for (i = (__int128 **)a1[1]; v6 != i; v6 += 3)
    {
      memset(v11, 0, sizeof(v11));
      v8 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v5);
      quasar::QsrText::qsrToHatTokens(v8, v6, v11, 1);
      v9 = a3[1];
      if (v9 >= a3[2])
      {
        v10 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(a3, v11);
      }
      else
      {
        std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)a3, v11);
        v10 = v9 + 24;
      }
      a3[1] = v10;
      v12 = (void **)v11;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v12);
    }
  }
  else
  {
    std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a3, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1));
  }
}

void sub_1ADF5F598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::readMemMappedLockedFile@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  fst::MappedFile *v10;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  _QWORD v37[2];
  _QWORD v38[51];
  _QWORD v39[20];

  v39[19] = *MEMORY[0x1E0C80C00];
  v4 = MEMORY[0x1E0DE4FA8];
  v5 = MEMORY[0x1E0DE4FA8] + 64;
  v6 = (_QWORD *)MEMORY[0x1E0DE4F40];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  v39[0] = MEMORY[0x1E0DE4FA8] + 64;
  v37[0] = v7;
  *(_QWORD *)((char *)v37 + *(_QWORD *)(v7 - 24)) = v8;
  v37[1] = 0;
  v9 = (std::ios_base *)((char *)v37 + *(_QWORD *)(v37[0] - 24));
  std::ios_base::init(v9, v38);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v37[0] = v4 + 24;
  v39[0] = v5;
  MEMORY[0x1AF44CA64](v38);
  std::ifstream::open();
  if (!v38[15])
  {
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Failed to open file: ", 21);
    v13 = *(char *)(a1 + 23);
    if (v13 >= 0)
      v14 = a1;
    else
      v14 = *(_QWORD *)a1;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a1 + 23);
    else
      v15 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v19);
  }
  fst::FstReadOptions::FstReadOptions(__p, a1, 0, 0, 0);
  v18 = 2;
  std::istream::seekg();
  std::istream::tellg();
  std::istream::seekg();
  v10 = fst::MappedFile::Map((uint64_t)v37, (uint64_t)__p, v36);
  std::shared_ptr<fst::MappedFile>::shared_ptr[abi:ne180100]<fst::MappedFile,void>(a2, (uint64_t)v10);
  if (!*a2)
  {
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Could not read mapped file", 26);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v19);
  }
  if (v17 < 0)
    operator delete(__p[0]);
  v37[0] = *v6;
  *(_QWORD *)((char *)v37 + *(_QWORD *)(v37[0] - 24)) = v6[3];
  MEMORY[0x1AF44CA70](v38);
  std::istream::~istream();
  return MEMORY[0x1AF44D094](v39);
}

void sub_1ADF5F850(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t quasar::findLeafValuesWithCondition(quasar::PTree *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t String;
  uint64_t v7;
  uint64_t result;
  __int128 *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (quasar::PTree::isLeaf(a1))
  {
    String = quasar::PTree::getString(a1);
    v7 = *(_QWORD *)(a2 + 24);
    if (!v7)
      std::__throw_bad_function_call[abi:ne180100]();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, String);
    if ((_DWORD)result)
    {
      v9 = (__int128 *)quasar::PTree::getString(a1);
      v10 = a3[1];
      if (v10 >= a3[2])
      {
        result = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a3, v9);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, v9);
        result = v10 + 24;
      }
      a3[1] = result;
    }
  }
  else
  {
    v11 = quasar::PTree::begin(a1);
    result = quasar::PTree::end(a1);
    if (v11 != result)
    {
      v12 = result;
      do
      {
        result = quasar::findLeafValuesWithCondition(v11 + 24, a2, a3);
        v11 += 88;
      }
      while (v11 != v12);
    }
  }
  return result;
}

void quasar::userDataToPtree(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, quasar::PTree *a4@<X8>)
{
  _QWORD *v6;
  std::string *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  std::string *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  void **v21;
  __int128 *v22;
  std::string *v23;
  __int128 v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  char *v32;
  quasar *v33;
  float v34;
  unsigned int *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  void *v49[2];
  char v50;
  int Type;
  std::string v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  void *v57[2];
  char v58;
  void *__p[2];
  char v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  void **v64;
  uint64_t v65;
  _BYTE v66[32];
  std::string v67[2];
  std::string v68;
  _BYTE v69[72];

  quasar::PTree::PTree(a4);
  v6 = (_QWORD *)*a1;
  v45 = a1 + 1;
  if ((_QWORD *)*a1 == a1 + 1)
    return;
  v7 = (std::string *)&v65;
  v8 = v66;
  do
  {
    quasar::PTree::PTree((quasar::PTree *)v69);
    v9 = (_QWORD *)v6[7];
    v46 = (_QWORD *)v6[8];
    v47 = v6;
    if (v9 == v46)
      goto LABEL_57;
    do
    {
      quasar::PTree::PTree((quasar::PTree *)&v68);
      v11 = *v9;
      v10 = v9[1];
      v48 = v9;
      while (v11 != v10)
      {
        quasar::PTree::PTree((quasar::PTree *)v67);
        std::string::basic_string[abi:ne180100]<0>(__p, "tag");
        quasar::PTree::PTree(&v64, v11 + 24);
        quasar::PTree::putChild((uint64_t)v67, (uint64_t)__p, (uint64_t)&v64, 1);
        quasar::PTree::~PTree((quasar::PTree *)&v64);
        if (v60 < 0)
          operator delete(__p[0]);
        std::string::basic_string[abi:ne180100]<0>(__p, "orth");
        quasar::PTree::PTree(&v64, v11);
        quasar::PTree::putChild((uint64_t)v67, (uint64_t)__p, (uint64_t)&v64, 1);
        quasar::PTree::~PTree((quasar::PTree *)&v64);
        if (v60 < 0)
          operator delete(__p[0]);
        std::string::basic_string[abi:ne180100]<0>(__p, "freq");
        v12 = *(_DWORD *)(v11 + 48);
        LODWORD(v64) = quasar::getType((quasar *)v12);
        std::to_string(v7, v12);
        *v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
        v66[24] = 1;
        quasar::PTree::putChild((uint64_t)v67, (uint64_t)__p, (uint64_t)&v64, 1);
        quasar::PTree::~PTree((quasar::PTree *)&v64);
        if (v60 < 0)
        {
          operator delete(__p[0]);
          if ((_DWORD)a3)
          {
LABEL_12:
            v61 = 0;
            v62 = 0;
            v63 = 0;
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v11 + 56));
            v13 = v10;
            v14 = v8;
            v15 = v7;
            v16 = a3;
            v18 = v17 + 1;
            v19 = (_QWORD *)*v17;
            v20 = v62;
            if ((_QWORD *)*v17 != v17 + 1)
            {
              do
              {
                v21 = (void **)(*((unsigned int *)v19 + 8) | ((unint64_t)*((unsigned int *)v19 + 16) << 32));
                v64 = v21;
                v22 = (__int128 *)(v19 + 5);
                if ((unint64_t)v20 >= v63)
                {
                  v20 = (uint64_t *)std::vector<std::pair<std::pair<quasar::PronType,float>,std::string>>::__emplace_back_slow_path<std::pair<quasar::PronType,float>,std::string const&>((uint64_t *)&v61, &v64, v22);
                }
                else
                {
                  *v20 = (uint64_t)v21;
                  v23 = (std::string *)(v20 + 1);
                  if (*((char *)v19 + 63) < 0)
                  {
                    std::string::__init_copy_ctor_external(v23, (const std::string::value_type *)v19[5], v19[6]);
                  }
                  else
                  {
                    v24 = *v22;
                    v20[3] = v19[7];
                    *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
                  }
                  v20 += 4;
                }
                v62 = v20;
                v25 = (_QWORD *)v19[1];
                if (v25)
                {
                  do
                  {
                    v26 = v25;
                    v25 = (_QWORD *)*v25;
                  }
                  while (v25);
                }
                else
                {
                  do
                  {
                    v26 = (_QWORD *)v19[2];
                    v27 = *v26 == (_QWORD)v19;
                    v19 = v26;
                  }
                  while (!v27);
                }
                v19 = v26;
              }
              while (v26 != v18);
            }
            v28 = 126 - 2 * __clz((uint64_t)((uint64_t)v20 - v61) >> 5);
            if (v20 == (uint64_t *)v61)
              v29 = 0;
            else
              v29 = v28;
            std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *,false>(v61, v20, (uint64_t)__p, v29, 1);
            quasar::PTree::PTree((quasar::PTree *)&v64);
            v30 = (unsigned int *)v61;
            v31 = (unsigned int *)v62;
            a3 = v16;
            v7 = v15;
            v8 = v14;
            v10 = v13;
            if ((uint64_t *)v61 != v62)
            {
              do
              {
                quasar::PTree::PTree((quasar::PTree *)__p);
                std::string::basic_string[abi:ne180100]<0>(v57, "type");
                v32 = quasar::PronTypeToString(*v30);
                std::string::basic_string[abi:ne180100]<0>(v49, v32);
                quasar::PTree::PTree(&Type, v49);
                quasar::PTree::putChild((uint64_t)__p, (uint64_t)v57, (uint64_t)&Type, 1);
                quasar::PTree::~PTree((quasar::PTree *)&Type);
                if (v50 < 0)
                  operator delete(v49[0]);
                if (v58 < 0)
                  operator delete(v57[0]);
                v33 = (quasar *)std::string::basic_string[abi:ne180100]<0>(v57, "weight");
                v34 = *((float *)v30 + 1);
                Type = quasar::getType(v33, v34);
                std::to_string(&v52, v34);
                v53 = 0;
                v54 = 0;
                v55 = 0;
                v56 = 1;
                quasar::PTree::putChild((uint64_t)__p, (uint64_t)v57, (uint64_t)&Type, 1);
                quasar::PTree::~PTree((quasar::PTree *)&Type);
                if (v58 < 0)
                  operator delete(v57[0]);
                std::string::basic_string[abi:ne180100]<0>(v57, "pron");
                v35 = v30 + 2;
                quasar::PTree::PTree(&Type, v35);
                quasar::PTree::putChild((uint64_t)__p, (uint64_t)v57, (uint64_t)&Type, 1);
                quasar::PTree::~PTree((quasar::PTree *)&Type);
                if (v58 < 0)
                  operator delete(v57[0]);
                quasar::PTree::addChild((quasar::PTree *)&v64, (const quasar::PTree *)__p);
                quasar::PTree::~PTree((quasar::PTree *)__p);
                v30 = v35 + 6;
              }
              while (v30 != v31);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "prons2");
            quasar::PTree::putChild((uint64_t)v67, (uint64_t)__p, (uint64_t)&v64, 1);
            if (v60 < 0)
              operator delete(__p[0]);
            quasar::PTree::~PTree((quasar::PTree *)&v64);
            v64 = (void **)&v61;
            std::vector<std::pair<unsigned long,std::wstring>>::__destroy_vector::operator()[abi:ne180100](&v64);
            goto LABEL_52;
          }
        }
        else if ((_DWORD)a3)
        {
          goto LABEL_12;
        }
        quasar::PTree::PTree((quasar::PTree *)&v64);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v11 + 56));
        v37 = v36 + 1;
        v38 = (_QWORD *)*v36;
        if ((_QWORD *)*v36 != v36 + 1)
        {
          do
          {
            quasar::PTree::PTree(__p, v38 + 5);
            quasar::PTree::addChild((quasar::PTree *)&v64, (const quasar::PTree *)__p);
            quasar::PTree::~PTree((quasar::PTree *)__p);
            v39 = (_QWORD *)v38[1];
            if (v39)
            {
              do
              {
                v40 = v39;
                v39 = (_QWORD *)*v39;
              }
              while (v39);
            }
            else
            {
              do
              {
                v40 = (_QWORD *)v38[2];
                v27 = *v40 == (_QWORD)v38;
                v38 = v40;
              }
              while (!v27);
            }
            v38 = v40;
          }
          while (v40 != v37);
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "prons");
        quasar::PTree::putChild((uint64_t)v67, (uint64_t)__p, (uint64_t)&v64, 1);
        if (v60 < 0)
          operator delete(__p[0]);
        quasar::PTree::~PTree((quasar::PTree *)&v64);
LABEL_52:
        quasar::PTree::addChild((quasar::PTree *)&v68, (const quasar::PTree *)v67);
        quasar::PTree::~PTree((quasar::PTree *)v67);
        v11 += 80;
      }
      v6 = v47;
      if ((quasar::PTree::isLeaf((quasar::PTree *)&v68) & 1) == 0 && !quasar::PTree::empty((quasar::PTree *)&v68))
        quasar::PTree::addChild((quasar::PTree *)v69, (const quasar::PTree *)&v68);
      quasar::PTree::~PTree((quasar::PTree *)&v68);
      v9 = v48 + 3;
    }
    while (v48 + 3 != v46);
LABEL_57:
    if (quasar::PTree::empty((quasar::PTree *)v69))
      goto LABEL_71;
    if (*((char *)v6 + 55) < 0)
      std::string::__init_copy_ctor_external(&v68, (const std::string::value_type *)v6[4], v6[5]);
    else
      v68 = *(std::string *)(v6 + 4);
    if (!a2)
      goto LABEL_69;
    quasar::SystemConfig::quasarTemplateToAceCats(a2, (const void **)&v68.__r_.__value_.__l.__data_, v67);
    if (v67[0].__r_.__value_.__l.__size_ == v67[0].__r_.__value_.__r.__words[0])
      goto LABEL_68;
    if (*(char *)(v67[0].__r_.__value_.__r.__words[0] + 23) < 0)
    {
      if (!*(_QWORD *)(v67[0].__r_.__value_.__r.__words[0] + 8))
        goto LABEL_68;
LABEL_67:
      std::string::operator=(&v68, (const std::string *)v67[0].__r_.__value_.__l.__data_);
      goto LABEL_68;
    }
    if (*(_BYTE *)(v67[0].__r_.__value_.__r.__words[0] + 23))
      goto LABEL_67;
LABEL_68:
    v64 = (void **)v67;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v64);
LABEL_69:
    quasar::PTree::putChild((uint64_t)a4, (uint64_t)&v68, (uint64_t)v69, 0);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
LABEL_71:
    quasar::PTree::~PTree((quasar::PTree *)v69);
    v41 = (_QWORD *)v6[1];
    if (v41)
    {
      do
      {
        v42 = v41;
        v41 = (_QWORD *)*v41;
      }
      while (v41);
    }
    else
    {
      do
      {
        v42 = (_QWORD *)v6[2];
        v27 = *v42 == (_QWORD)v6;
        v6 = v42;
      }
      while (!v27);
    }
    v6 = v42;
  }
  while (v42 != v45);
}

void sub_1ADF60020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, quasar::PTree *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,char *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  uint64_t v58;

  a50 = &a58;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a50);
  if (*(char *)(v58 - 217) < 0)
    operator delete(*(void **)(v58 - 240));
  quasar::PTree::~PTree((quasar::PTree *)(v58 - 168));
  quasar::PTree::~PTree(a10);
  _Unwind_Resume(a1);
}

void quasar::stringsToTokensWithDummyTimestamps(__int128 **a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  __int128 *v4;
  __int128 v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  __int128 *v17;
  void *v18[2];
  char v19;
  __int128 *v20[3];
  void *v21[2];
  char v22;
  void *v23[2];
  char v24;
  std::string v25;
  std::string v26;
  _BYTE v27[22];
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  __int16 v39;
  __int128 __p;
  uint64_t v41;
  __int128 v42;
  int v43;
  void **v44[3];

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *a1;
  v17 = a1[1];
  if (*a1 != v17)
  {
    do
    {
      if (*((char *)v4 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
      }
      else
      {
        v6 = *v4;
        v25.__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
        *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v6;
      }
      std::string::basic_string[abi:ne180100]<0>(v23, "");
      std::string::basic_string[abi:ne180100]<0>(v21, "");
      memset(v20, 0, sizeof(v20));
      std::string::basic_string[abi:ne180100]<0>(v18, "");
      quasar::Token::Token(&v26, (__int128 *)&v25, a2, a2 + 11, a2 + 11, 1, 0, (__int128 *)v23, 0.0, (__int128 *)v21, v20, 0, (__int128 *)v18, 0, 0);
      v7 = a3[1];
      if (v7 >= a3[2])
      {
        v15 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token>(a3, (__int128 *)&v26);
        v16 = SHIBYTE(v41);
        a3[1] = v15;
        if (v16 < 0)
          operator delete((void *)__p);
      }
      else
      {
        v8 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
        *(_QWORD *)(v7 + 16) = *((_QWORD *)&v26.__r_.__value_.__l + 2);
        *(_OWORD *)v7 = v8;
        memset(&v26, 0, sizeof(v26));
        v9 = *(_QWORD *)&v27[14];
        *(_OWORD *)(v7 + 24) = *(_OWORD *)v27;
        *(_QWORD *)(v7 + 38) = v9;
        v10 = v29;
        *(_OWORD *)(v7 + 48) = v28;
        *(_QWORD *)(v7 + 64) = v10;
        *(_QWORD *)(v7 + 72) = 0;
        v29 = 0;
        v28 = 0uLL;
        *(_QWORD *)(v7 + 80) = 0;
        *(_QWORD *)(v7 + 88) = 0;
        *(_OWORD *)(v7 + 72) = v30;
        *(_QWORD *)(v7 + 88) = v31;
        v30 = 0uLL;
        v31 = 0;
        v11 = v32;
        *(_QWORD *)(v7 + 112) = v33;
        *(_QWORD *)(v7 + 120) = 0;
        *(_OWORD *)(v7 + 96) = v11;
        v33 = 0;
        v32 = 0uLL;
        *(_QWORD *)(v7 + 128) = 0;
        *(_QWORD *)(v7 + 136) = 0;
        *(_OWORD *)(v7 + 120) = v34;
        *(_QWORD *)(v7 + 136) = v35;
        v34 = 0uLL;
        v35 = 0;
        v12 = v36;
        *(_QWORD *)(v7 + 160) = v37;
        *(_OWORD *)(v7 + 144) = v12;
        v37 = 0;
        v36 = 0uLL;
        LODWORD(v10) = v38;
        *(_WORD *)(v7 + 172) = v39;
        *(_DWORD *)(v7 + 168) = v10;
        v13 = __p;
        *(_QWORD *)(v7 + 192) = v41;
        *(_OWORD *)(v7 + 176) = v13;
        v41 = 0;
        __p = 0uLL;
        v14 = v42;
        *(_DWORD *)(v7 + 216) = v43;
        *(_OWORD *)(v7 + 200) = v14;
        a3[1] = v7 + 224;
      }
      if (SHIBYTE(v37) < 0)
        operator delete((void *)v36);
      v44[0] = (void **)&v34;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v44);
      if (SHIBYTE(v33) < 0)
        operator delete((void *)v32);
      v44[0] = (void **)&v30;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v44);
      if (SHIBYTE(v29) < 0)
        operator delete((void *)v28);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (v19 < 0)
        operator delete(v18[0]);
      v18[0] = v20;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
      if (v22 < 0)
        operator delete(v21[0]);
      if (v24 < 0)
        operator delete(v23[0]);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      v4 = (__int128 *)((char *)v4 + 24);
      a2 += 11;
    }
    while (v4 != v17);
  }
}

void sub_1ADF60518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46)
{
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a46);
  _Unwind_Resume(a1);
}

uint64_t quasar::getPunctuationReplacements(quasar *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  uint64_t i;
  unsigned __int8 v5[48];
  _QWORD v6[6];
  _QWORD v7[6];
  _QWORD v8[6];
  _QWORD v9[6];
  _QWORD v10[6];
  _QWORD v11[6];
  _QWORD v12[6];
  _QWORD v13[6];
  _QWORD v14[6];
  _QWORD v15[6];
  _QWORD v16[6];
  _QWORD v17[6];
  _QWORD v18[6];
  _QWORD v19[6];
  _QWORD v20[6];
  _QWORD v21[7];

  v21[6] = *MEMORY[0x1E0C80C00];
  {
    v3 = operator new();
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[19],0>(v5, "!", "!\\exclamation-mark");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[8],0>(v6, ",", ",\\comma");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[9],0>(v7, ".", ".\\period");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[12],0>(v8, ";",
      ";\\semicolon");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[8],0>(v9, ":", ":\\colon");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[16],0>(v10, "?", "?\\question-mark");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[23],0>(v11, "。", "。\\ideographic-period");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[22],0>(v12, "、", "、\\ideographic-comma");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[26],0>(v13, "¿", "¿\\inverted-question-mark");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[29],0>(v14, "¡", "¡\\inverted-exclamation-mark");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v15, "，", ",\\comma");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[16],0>(v16, "？", "?\\question-mark");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[12],0>(v17, "；", ";\\semicolon");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[8],0>(v18, "：", ":\\colon");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[19],0>(v19, "！", "!\\exclamation-mark");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[24],0>(v20, "…", "…\\horizontal-ellipsis");
    std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[10],0>(v21, "I", "I\\pronoun");
    std::unordered_map<std::string,std::string>::unordered_map(v3, v5, 17);
    for (i = 768; i != -48; i -= 48)
      std::pair<std::string,std::string>::~pair((uint64_t)&v5[i]);
    quasar::getPunctuationReplacements(void)::map = v3;
  }
  return quasar::getPunctuationReplacements(void)::map;
}

void sub_1ADF6088C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;

  for (i = 768; i != -48; i -= 48)
    std::pair<std::string,std::string>::~pair(v2 + i);
  MEMORY[0x1AF44D190](v1, 0x10A0C408EF24B1CLL);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[19],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADF60938(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[8],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADF60988(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[9],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADF609D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[12],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADF60A28(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[16],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADF60A78(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[23],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADF60AC8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[22],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADF60B18(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[26],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADF60B68(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[3],char const(&)[29],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADF60BB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[16],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADF60C08(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[19],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADF60C58(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[4],char const(&)[24],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADF60CA8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,std::string>::pair[abi:ne180100]<char const(&)[2],char const(&)[10],0>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1ADF60CF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void *std::get_temporary_buffer[abi:ne180100]<std::pair<double,std::pair<int,int>>>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x7FFFFFFFFFFFFFFLL)
    v1 = 0x7FFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(16 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

double std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, uint64_t a6, __n128 a7)
{
  double v9;
  signed __int32 v10;
  signed __int32 v11;
  unsigned __int32 v12;
  unint64_t v17;
  __n128 *v18;
  unint64_t v19;
  double v20;
  __n128 v21;
  double v22;

  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      a7.n128_u64[0] = a2[-1].n128_u64[0];
      v9 = a1->n128_f64[0];
      if (a7.n128_f64[0] < a1->n128_f64[0])
      {
        v10 = a1->n128_i32[2];
        v11 = a2[-1].n128_i32[2];
LABEL_5:
        a1->n128_u64[0] = a7.n128_u64[0];
        a2[-1].n128_f64[0] = v9;
        a1->n128_u32[2] = v11;
        a2[-1].n128_u32[2] = v10;
        v12 = a1->n128_u32[3];
        a1->n128_u32[3] = a2[-1].n128_u32[3];
        a2[-1].n128_u32[3] = v12;
        return a7.n128_f64[0];
      }
      if (v9 >= a7.n128_f64[0])
      {
        v11 = a2[-1].n128_i32[2];
        v10 = a1->n128_i32[2];
        if (v11 < v10 || v10 >= v11 && (signed __int32)a2[-1].n128_u32[3] < (signed __int32)a1->n128_u32[3])
          goto LABEL_5;
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(a1->n128_f64, a2->n128_f64);
    }
    else
    {
      v17 = a4 >> 1;
      v18 = &a1[a4 >> 1];
      v19 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        v21.n128_f64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(a1, v18, a3, v19, a5, a7);
        v22 = std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v17], v21);
        a7.n128_f64[0] = std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,std::pair<int,int>> *,std::pair<double,std::pair<int,int>> *,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>((uint64_t)a5, (uint64_t)&a5[v17], (uint64_t)&a5[v17], (uint64_t)&a5[a4], (uint64_t)a1, v22);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(a1, v18, a3, v19, a5, a6);
        v20 = std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>((uint64_t)a1, (uint64_t)&a1[a4 >> 1], a2->n128_f64, a3, a4 >> 1, a4 - (a4 >> 1), (uint64_t)a5, a6, v20);
      }
    }
  }
  return a7.n128_f64[0];
}

double *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(double *result, double *a2)
{
  double *v2;
  uint64_t v3;
  double *v4;
  double *v5;
  double v6;
  double v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  double v12;
  int v13;
  uint64_t v14;
  int v15;

  if (result == a2)
    return result;
  v2 = result + 2;
  if (result + 2 == a2)
    return result;
  v3 = 0;
  v4 = result;
  do
  {
    v5 = v4;
    v4 = v2;
    v6 = *v2;
    v7 = *v5;
    if (*v2 >= *v5)
    {
      if (v7 < v6)
        goto LABEL_18;
      v8 = *((_DWORD *)v5 + 6);
      v9 = *((_DWORD *)v5 + 2);
      if (v8 >= v9 && (v9 < v8 || *((_DWORD *)v5 + 7) >= *((_DWORD *)v5 + 3)))
        goto LABEL_18;
    }
    else
    {
      v8 = *((_DWORD *)v5 + 6);
      v9 = *((_DWORD *)v5 + 2);
    }
    v10 = *((_DWORD *)v5 + 7);
    *v4 = v7;
    *((_DWORD *)v4 + 2) = v9;
    *((_DWORD *)v4 + 3) = *((_DWORD *)v5 + 3);
    if (v5 == result)
    {
LABEL_15:
      v5 = result;
      goto LABEL_16;
    }
    v11 = v3;
    while (1)
    {
      v12 = *(double *)((char *)result + v11 - 16);
      if (v6 >= v12)
        break;
      v13 = *(_DWORD *)((char *)result + v11 - 8);
LABEL_14:
      v5 -= 2;
      v14 = (uint64_t)result + v11;
      *(double *)v14 = v12;
      v15 = *(_DWORD *)((char *)result + v11 - 4);
      *(_DWORD *)(v14 + 8) = v13;
      *(_DWORD *)(v14 + 12) = v15;
      v11 -= 16;
      if (!v11)
        goto LABEL_15;
    }
    if (v12 < v6)
      goto LABEL_16;
    v13 = *(_DWORD *)((char *)result + v11 - 8);
    if (v8 < v13)
      goto LABEL_14;
    if (v13 < v8)
      goto LABEL_16;
    if (v10 < *(_DWORD *)((char *)result + v11 - 4))
      goto LABEL_14;
    v5 = (double *)((char *)result + v11);
LABEL_16:
    *v5 = v6;
    *((_DWORD *)v5 + 2) = v8;
    *((_DWORD *)v5 + 3) = v10;
LABEL_18:
    v2 = v4 + 2;
    v3 += 16;
  }
  while (v4 + 2 != a2);
  return result;
}

double std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, __n128 a6)
{
  __n128 *v10;
  double v11;
  __n128 v13;
  signed __int32 v14;
  signed __int32 v15;

  if (a4)
  {
    if (a4 == 2)
    {
      v10 = a2 - 1;
      v11 = a2[-1].n128_f64[0];
      if (v11 < a1->n128_f64[0]
        || a1->n128_f64[0] >= v11
        && ((v14 = a2[-1].n128_i32[2], v15 = a1->n128_i32[2], v14 < v15)
         || v15 >= v14 && (signed __int32)a2[-1].n128_u32[3] < (signed __int32)a1->n128_u32[3]))
      {
        *a5 = *v10;
        a6 = *a1;
      }
      else
      {
        *a5 = *a1;
        a6 = *v10;
      }
      a5[1] = a6;
    }
    else if (a4 == 1)
    {
      a6 = *a1;
      *a5 = *a1;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(a1, &a1[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      v13.n128_f64[0] = std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      a6.n128_u64[0] = std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(a1, &a1[a4 >> 1], &a1[a4 >> 1], a2, a5, v13).n128_u64[0];
    }
    else
    {
      std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(a1->n128_f64, a2->n128_f64, a5->n128_f64);
    }
  }
  return a6.n128_f64[0];
}

double std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,std::pair<int,int>> *,std::pair<double,std::pair<int,int>> *,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double result)
{
  double v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        result = *(double *)a3;
        *(_QWORD *)a5 = *(_QWORD *)a3;
        *(_DWORD *)(a5 + 8) = *(_DWORD *)(a3 + 8);
        *(_DWORD *)(a5 + 12) = *(_DWORD *)(a3 + 12);
        a3 += 16;
        a5 += 16;
      }
      return result;
    }
    if (a3 == a4)
      break;
    result = *(double *)a3;
    v6 = *(double *)a1;
    if (*(double *)a3 < *(double *)a1)
    {
      v7 = *(_DWORD *)(a3 + 8);
LABEL_10:
      *(double *)a5 = result;
      *(_DWORD *)(a5 + 8) = v7;
      *(_DWORD *)(a5 + 12) = *(_DWORD *)(a3 + 12);
      a3 += 16;
      goto LABEL_12;
    }
    if (v6 >= result)
    {
      v7 = *(_DWORD *)(a3 + 8);
      v8 = *(_DWORD *)(a1 + 8);
      if (v7 < v8 || v8 >= v7 && *(_DWORD *)(a3 + 12) < *(_DWORD *)(a1 + 12))
        goto LABEL_10;
    }
    else
    {
      v8 = *(_DWORD *)(a1 + 8);
    }
    *(double *)a5 = v6;
    *(_DWORD *)(a5 + 8) = v8;
    *(_DWORD *)(a5 + 12) = *(_DWORD *)(a1 + 12);
    a1 += 16;
LABEL_12:
    a5 += 16;
  }
  if (a1 != a2)
  {
    v9 = 0;
    do
    {
      v10 = a1 + v9;
      v11 = a5 + v9;
      result = *(double *)(a1 + v9);
      *(double *)v11 = result;
      *(_DWORD *)(v11 + 8) = *(_DWORD *)(a1 + v9 + 8);
      *(_DWORD *)(v11 + 12) = *(_DWORD *)(a1 + v9 + 12);
      v9 += 16;
    }
    while (v10 + 16 != a2);
  }
  return result;
}

void std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v15;
  double v16;
  uint64_t v17;
  double v18;
  int v19;
  int v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  double *v42;

  if (a6)
  {
    v9 = a8;
    v10 = a6;
    do
    {
      if (v10 <= v9 || a5 <= v9)
      {
        std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(a1, a2, (uint64_t)a3, a9, a4, a5, v10, a7);
        return;
      }
      if (!a5)
        return;
      v15 = 0;
      v16 = *(double *)a2;
      v17 = -a5;
      while (1)
      {
        v18 = *(double *)(a1 + v15);
        if (v16 < v18)
          break;
        if (v18 >= v16)
        {
          v19 = *(_DWORD *)(a2 + 8);
          v20 = *(_DWORD *)(a1 + v15 + 8);
          if (v19 < v20 || v20 >= v19 && *(_DWORD *)(a2 + 12) < *(_DWORD *)(a1 + v15 + 12))
            break;
        }
        v15 += 16;
        if (__CFADD__(v17++, 1))
          return;
      }
      v22 = -v17;
      if (-v17 >= v10)
      {
        if (v17 == -1)
        {
          v38 = a1 + v15;
          *(double *)v38 = v16;
          *(double *)a2 = v18;
          v39 = *(_DWORD *)(a1 + v15 + 8);
          *(_DWORD *)(v38 + 8) = *(_DWORD *)(a2 + 8);
          *(_DWORD *)(a2 + 8) = v39;
          v40 = *(_DWORD *)(a1 + v15 + 12);
          *(_DWORD *)(v38 + 12) = *(_DWORD *)(a2 + 12);
          *(_DWORD *)(a2 + 12) = v40;
          return;
        }
        if (v17 > 0)
          v22 = 1 - v17;
        v28 = v22 >> 1;
        v26 = (uint64_t *)(a1 + 16 * (v22 >> 1) + v15);
        v29 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::pair<double,std::pair<int,int>>,std::__identity,std::__less<void,void>>((double *)a2, a3, (uint64_t)v26);
        v27 = v28;
        v25 = (uint64_t *)v29;
        v24 = ((uint64_t)v29 - a2) >> 4;
      }
      else
      {
        if (v10 >= 0)
          v23 = v10;
        else
          v23 = v10 + 1;
        v24 = v23 >> 1;
        v25 = (uint64_t *)(a2 + 16 * (v23 >> 1));
        v26 = (uint64_t *)std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::pair<double,std::pair<int,int>>,std::__identity>((double *)(a1 + v15), (double *)a2, (uint64_t)v25);
        v27 = ((uint64_t)v26 - a1 - v15) >> 4;
      }
      v42 = a3;
      if (v26 == (uint64_t *)a2)
      {
        a3 = (double *)v25;
      }
      else if (v25 == (uint64_t *)a2)
      {
        a3 = (double *)v26;
      }
      else
      {
        v30 = v27;
        v31 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(v26, (uint64_t *)a2, v25);
        v27 = v30;
        a3 = (double *)v31;
      }
      v32 = v24;
      a5 = -v27 - v17;
      v33 = v10 - v24;
      if (v27 + v32 >= v10 - (v27 + v32) - v17)
      {
        v35 = v25;
        v36 = v27;
        v37 = v32;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(a3, v35, v42, a4, -v27 - v17, v33, a7, a8);
        a1 += v15;
        a2 = (uint64_t)v26;
        v9 = a8;
        v33 = v37;
        a5 = v36;
      }
      else
      {
        v34 = v26;
        v9 = a8;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(a1 + v15, v34, a3, a4, v27, v32, a7, a8);
        a1 = (uint64_t)a3;
        a2 = (uint64_t)v25;
        a3 = v42;
      }
      v10 = v33;
    }
    while (v33);
  }
}

double *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(double *result, double *a2, double *a3)
{
  double *v3;
  uint64_t v4;
  double *v5;
  double *v6;
  double *v7;
  double v8;
  double v9;
  double *v10;
  uint64_t v11;
  double v12;
  int v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  int v18;

  if (result == a2)
    return result;
  *(_OWORD *)a3 = *(_OWORD *)result;
  v3 = result + 2;
  if (result + 2 == a2)
    return result;
  v4 = 0;
  v5 = a3;
  v6 = a3;
  do
  {
    v7 = v3;
    v8 = *v6;
    v6 += 2;
    v9 = v8;
    if (*v3 >= v8)
    {
      if (v9 < *v3
        || (v17 = *((_DWORD *)result + 6), v18 = *((_DWORD *)v5 + 2), v17 >= v18)
        && (v18 < v17 || *((_DWORD *)result + 7) >= *((_DWORD *)v5 + 3)))
      {
        *(_OWORD *)v6 = *(_OWORD *)v7;
        goto LABEL_23;
      }
    }
    *(_OWORD *)v6 = *(_OWORD *)v5;
    v10 = a3;
    if (v5 == a3)
      goto LABEL_22;
    v11 = v4;
    while (1)
    {
      v12 = *(double *)((char *)a3 + v11 - 16);
      if (*v7 < v12)
      {
        v13 = *(_DWORD *)((char *)a3 + v11 - 8);
        goto LABEL_13;
      }
      if (v12 < *v7)
        goto LABEL_21;
      v14 = *((_DWORD *)result + 6);
      v13 = *(_DWORD *)((char *)a3 + v11 - 8);
      if (v14 >= v13)
        break;
LABEL_13:
      v5 -= 2;
      v15 = (char *)a3 + v11;
      *(double *)v15 = v12;
      v16 = *(_DWORD *)((char *)a3 + v11 - 4);
      *((_DWORD *)v15 + 2) = v13;
      *((_DWORD *)v15 + 3) = v16;
      v11 -= 16;
      if (!v11)
      {
        v10 = a3;
        goto LABEL_22;
      }
    }
    if (v13 >= v14)
    {
      v10 = (double *)((char *)a3 + v11);
      if (*((_DWORD *)result + 7) >= *(_DWORD *)((char *)a3 + v11 - 4))
        goto LABEL_22;
      goto LABEL_13;
    }
LABEL_21:
    v10 = v5;
LABEL_22:
    *v10 = *v7;
    *((_DWORD *)v10 + 2) = *((_DWORD *)result + 6);
    *((_DWORD *)v10 + 3) = *((_DWORD *)result + 7);
LABEL_23:
    v3 = v7 + 2;
    v4 += 16;
    v5 = v6;
    result = v7;
  }
  while (v7 + 2 != a2);
  return result;
}

__n128 std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, __n128 result)
{
  signed __int32 v6;
  signed __int32 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  uint64_t v11;

  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        v10 = *a3++;
        result.n128_u64[0] = v10.n128_u64[0];
        *a5++ = v10;
      }
      return result;
    }
    if (a3 == a4)
      break;
    if (a3->n128_f64[0] >= a1->n128_f64[0]
      && (a1->n128_f64[0] < a3->n128_f64[0]
       || (v6 = a3->n128_i32[2], v7 = a1->n128_i32[2], v6 >= v7)
       && (v7 < v6 || (signed __int32)a3->n128_u32[3] >= (signed __int32)a1->n128_u32[3])))
    {
      v9 = *a1++;
      result = v9;
    }
    else
    {
      v8 = *a3++;
      result = v8;
    }
    *a5++ = result;
  }
  if (a1 != a2)
  {
    v11 = 0;
    do
    {
      result = a1[v11];
      a5[v11++] = result;
    }
    while (&a1[v11] != a2);
  }
  return result;
}

double std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(uint64_t a1, uint64_t a2, uint64_t a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v10;
  __int128 *v11;
  __int128 v12;
  _OWORD *v14;
  __int128 *v15;
  __int128 v16;

  if (a6 <= a7)
  {
    v14 = (_OWORD *)a8;
    if (a1 != a2)
    {
      v14 = (_OWORD *)a8;
      v15 = (__int128 *)a1;
      do
      {
        v16 = *v15++;
        a4 = *(double *)&v16;
        *v14++ = v16;
      }
      while (v15 != (__int128 *)a2);
    }
    return std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,std::pair<int,int>> *,std::pair<double,std::pair<int,int>> *,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(a8, (uint64_t)v14, a2, a3, a1, a4);
  }
  else
  {
    v10 = (_OWORD *)a8;
    if (a2 != a3)
    {
      v10 = (_OWORD *)a8;
      v11 = (__int128 *)a2;
      do
      {
        v12 = *v11++;
        a4 = *(double *)&v12;
        *v10++ = v12;
      }
      while (v11 != (__int128 *)a3);
    }
    return std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::reverse_iterator<std::pair<double,std::pair<int,int>> *>,std::reverse_iterator<std::pair<double,std::pair<int,int>> *>,std::reverse_iterator<std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>>(a4, (uint64_t)v10, (uint64_t)v10, a8, a8, a2, a2, a1, a1, a3, a3);
  }
}

double *std::__upper_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::pair<double,std::pair<int,int>>,std::__identity>(double *result, double *a2, uint64_t a3)
{
  unint64_t v3;
  double v4;
  int v5;
  unint64_t v6;
  double *v7;
  int v8;

  if (a2 != result)
  {
    v3 = ((char *)a2 - (char *)result) >> 4;
    v4 = *(double *)a3;
    v5 = *(_DWORD *)(a3 + 8);
    do
    {
      v6 = v3 >> 1;
      v7 = &result[2 * (v3 >> 1)];
      if (v4 >= *v7)
      {
        if (*v7 < v4
          || (v8 = LODWORD(result[2 * v6 + 1]), v5 >= v8)
          && (v8 < v5 || *(_DWORD *)(a3 + 12) >= SHIDWORD(result[2 * v6 + 1])))
        {
          result = v7 + 2;
          v6 = v3 + ~v6;
        }
      }
      v3 = v6;
    }
    while (v6);
  }
  return result;
}

double std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,std::pair<int,int>> *,std::pair<double,std::pair<int,int>> *,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double result)
{
  double v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  while (a1 != a2)
  {
    if (a3 == a4)
    {
      v9 = 0;
      do
      {
        v10 = a5 + v9;
        v11 = a1 + v9;
        result = *(double *)(a1 + v9);
        *(double *)v10 = result;
        *(_DWORD *)(v10 + 8) = *(_DWORD *)(a1 + v9 + 8);
        *(_DWORD *)(v10 + 12) = *(_DWORD *)(a1 + v9 + 12);
        v9 += 16;
      }
      while (v11 + 16 != a2);
      return result;
    }
    result = *(double *)a3;
    v6 = *(double *)a1;
    if (*(double *)a3 < *(double *)a1)
    {
      v7 = *(_DWORD *)(a3 + 8);
LABEL_5:
      *(double *)a5 = result;
      *(_DWORD *)(a5 + 8) = v7;
      *(_DWORD *)(a5 + 12) = *(_DWORD *)(a3 + 12);
      a3 += 16;
      goto LABEL_9;
    }
    if (v6 >= result)
    {
      v7 = *(_DWORD *)(a3 + 8);
      v8 = *(_DWORD *)(a1 + 8);
      if (v7 < v8 || v8 >= v7 && *(_DWORD *)(a3 + 12) < *(_DWORD *)(a1 + 12))
        goto LABEL_5;
    }
    else
    {
      v8 = *(_DWORD *)(a1 + 8);
    }
    *(double *)a5 = v6;
    *(_DWORD *)(a5 + 8) = v8;
    *(_DWORD *)(a5 + 12) = *(_DWORD *)(a1 + 12);
    a1 += 16;
LABEL_9:
    a5 += 16;
  }
  return result;
}

double std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::reverse_iterator<std::pair<double,std::pair<int,int>> *>,std::reverse_iterator<std::pair<double,std::pair<int,int>> *>,std::reverse_iterator<std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>>(double result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  double v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a3 != a5)
  {
    while (1)
    {
      if (a7 == a9)
      {
        v16 = 0;
        do
        {
          v17 = a11 + v16;
          result = *(double *)(a3 + v16 - 16);
          *(double *)(v17 - 16) = result;
          *(_DWORD *)(v17 - 8) = *(_DWORD *)(a3 + v16 - 8);
          *(_DWORD *)(v17 - 4) = *(_DWORD *)(a3 + v16 - 4);
          v16 -= 16;
        }
        while (a3 + v16 != a5);
        return result;
      }
      v12 = *(double *)(a7 - 16);
      result = *(double *)(a3 - 16);
      if (result < v12)
        break;
      if (v12 >= result)
      {
        v14 = *(_DWORD *)(a3 - 8);
        v13 = *(_DWORD *)(a7 - 8);
        if (v14 < v13 || v13 >= v14 && *(_DWORD *)(a3 - 4) < *(_DWORD *)(a7 - 4))
          goto LABEL_9;
      }
      else
      {
        v14 = *(_DWORD *)(a3 - 8);
      }
      v13 = v14;
      v15 = a3;
      a3 -= 16;
LABEL_10:
      *(double *)(a11 - 16) = result;
      a11 -= 16;
      *(_DWORD *)(a11 + 8) = v13;
      *(_DWORD *)(a11 + 12) = *(_DWORD *)(v15 - 4);
      if (a3 == a5)
        return result;
    }
    v13 = *(_DWORD *)(a7 - 8);
LABEL_9:
    result = *(double *)(a7 - 16);
    v15 = a7;
    a7 -= 16;
    goto LABEL_10;
  }
  return result;
}

double *std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>,std::pair<double,std::pair<int,int>>,std::__identity,std::__less<void,void>>(double *result, double *a2, uint64_t a3)
{
  unint64_t v3;
  double v4;
  int v5;
  unint64_t v6;
  double *v7;
  int v8;

  if (a2 != result)
  {
    v3 = ((char *)a2 - (char *)result) >> 4;
    v4 = *(double *)a3;
    v5 = *(_DWORD *)(a3 + 8);
    do
    {
      v6 = v3 >> 1;
      v7 = &result[2 * (v3 >> 1)];
      if (*v7 < v4
        || v4 >= *v7
        && ((v8 = LODWORD(result[2 * v6 + 1]), v8 < v5)
         || v5 >= v8 && SHIDWORD(result[2 * v6 + 1]) < *(_DWORD *)(a3 + 12)))
      {
        result = v7 + 2;
        v6 = v3 + ~v6;
      }
      v3 = v6;
    }
    while (v6);
  }
  return result;
}

uint64_t *std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<double,std::pair<int,int>> *>>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t *result;
  uint64_t *i;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;

  v3 = *a1;
  *a1 = *a2;
  *a2 = v3;
  v4 = *((_DWORD *)a1 + 2);
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v4;
  v5 = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v5;
  result = a1 + 2;
  for (i = a2 + 2; i != a3; i += 2)
  {
    if (result == a2)
      a2 = i;
    v8 = *result;
    *result = *i;
    *i = v8;
    v9 = *((_DWORD *)result + 2);
    *((_DWORD *)result + 2) = *((_DWORD *)i + 2);
    *((_DWORD *)i + 2) = v9;
    v10 = *((_DWORD *)result + 3);
    *((_DWORD *)result + 3) = *((_DWORD *)i + 3);
    *((_DWORD *)i + 3) = v10;
    result += 2;
  }
  if (result != a2)
  {
    v11 = result;
    v12 = a2;
    do
    {
      while (1)
      {
        v13 = *v11;
        *v11 = *v12;
        *v12 = v13;
        v14 = *((_DWORD *)v11 + 2);
        *((_DWORD *)v11 + 2) = *((_DWORD *)v12 + 2);
        *((_DWORD *)v12 + 2) = v14;
        v15 = *((_DWORD *)v11 + 3);
        *((_DWORD *)v11 + 3) = *((_DWORD *)v12 + 3);
        *((_DWORD *)v12 + 3) = v15;
        v11 += 2;
        v12 += 2;
        if (v12 == a3)
          break;
        if (v11 == a2)
          a2 = v12;
      }
      v12 = a2;
    }
    while (v11 != a2);
  }
  return result;
}

void quasar::DeserializedFeatureMatrix::~DeserializedFeatureMatrix(quasar::DeserializedFeatureMatrix *this)
{
  *(_QWORD *)this = &unk_1E5D39888;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 24);
}

{
  *(_QWORD *)this = &unk_1E5D39888;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 24);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::DeserializedFeatureMatrix::Dim(quasar::DeserializedFeatureMatrix *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t quasar::DeserializedFeatureMatrix::ChunkSize(quasar::DeserializedFeatureMatrix *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t quasar::DeserializedFeatureMatrix::FrameDurationMs(quasar::DeserializedFeatureMatrix *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t quasar::DeserializedFeatureMatrix::FrameDurationMsForAlignment(quasar::DeserializedFeatureMatrix *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t kaldi::FeatureMatrixItf::GetAllFusionFeat(kaldi::FeatureMatrixItf *this)
{
  return (*(uint64_t (**)(kaldi::FeatureMatrixItf *))(*(_QWORD *)this + 56))(this);
}

uint64_t quasar::DeserializedFeatureMatrix::GetCachedAllFusionFeat(quasar::DeserializedFeatureMatrix *this)
{
  return (uint64_t)this + 24;
}

uint64_t std::vector<std::pair<std::pair<quasar::PronType,float>,std::string>>::__emplace_back_slow_path<std::pair<quasar::PronType,float>,std::string const&>(uint64_t *a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  std::string *v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v18[2];
  char *v19;
  char *v20;
  uint64_t *v21;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v21 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v18[0] = v12;
  v18[1] = v13;
  v19 = v13;
  v20 = &v12[32 * v11];
  *(_QWORD *)v13 = *a2;
  v14 = (std::string *)(v13 + 8);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
    v13 = v19;
  }
  else
  {
    v15 = *a3;
    *((_QWORD *)v13 + 3) = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  v19 = v13 + 32;
  std::vector<std::pair<std::pair<quasar::PronType,float>,std::string>>::__swap_out_circular_buffer(a1, v18);
  v16 = a1[1];
  std::__split_buffer<quasar::IndexRuleLmeWordTagger::Rule>::~__split_buffer((uint64_t)v18);
  return v16;
}

void sub_1ADF61D4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::IndexRuleLmeWordTagger::Rule>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::pair<quasar::PronType,float>,std::string>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::pair<quasar::PronType,float>,std::string>>,std::reverse_iterator<std::pair<std::pair<quasar::PronType,float>,std::string>*>,std::reverse_iterator<std::pair<std::pair<quasar::PronType,float>,std::string>*>,std::reverse_iterator<std::pair<std::pair<quasar::PronType,float>,std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::pair<quasar::PronType,float>,std::string>>,std::reverse_iterator<std::pair<std::pair<quasar::PronType,float>,std::string>*>,std::reverse_iterator<std::pair<std::pair<quasar::PronType,float>,std::string>*>,std::reverse_iterator<std::pair<std::pair<quasar::PronType,float>,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 32);
      a3 -= 32;
      *(_QWORD *)(v7 - 32) = v8;
      v9 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(v7 - 24) = v9;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v7 = *((_QWORD *)&v15 + 1) - 32;
      *((_QWORD *)&v15 + 1) -= 32;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::pair<quasar::PronType,float>,std::string>>,std::reverse_iterator<std::pair<std::pair<quasar::PronType,float>,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::pair<quasar::PronType,float>,std::string>>,std::reverse_iterator<std::pair<std::pair<quasar::PronType,float>,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::IndexRuleLmeWordTagger::Rule>,std::reverse_iterator<quasar::IndexRuleLmeWordTagger::Rule*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *,false>(unint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  __int128 v18;
  unint64_t v19;
  char v20;
  BOOL v21;
  int v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

BOOL std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v3;
  float v4;
  uint64_t v6;
  const void *v7;
  const void *v8;
  int v9;
  uint64_t v10;
  const void *v11;
  const void *v12;
  int v13;
  size_t v14;
  const void *v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;

  if (*(_DWORD *)a2 < *(_DWORD *)a3)
    return 1;
  if (*(_DWORD *)a3 < *(_DWORD *)a2)
    return 0;
  v3 = *(float *)(a2 + 4);
  v4 = *(float *)(a3 + 4);
  if (v3 < v4)
    return 1;
  if (v4 < v3)
    return 0;
  v8 = *(const void **)(a3 + 8);
  v6 = a3 + 8;
  v7 = v8;
  v9 = *(char *)(v6 + 23);
  v12 = *(const void **)(a2 + 8);
  v10 = a2 + 8;
  v11 = v12;
  v13 = *(char *)(v10 + 23);
  if (v13 >= 0)
    v14 = *(unsigned __int8 *)(v10 + 23);
  else
    v14 = *(_QWORD *)(v10 + 8);
  if (v13 >= 0)
    v15 = (const void *)v10;
  else
    v15 = v11;
  if (v9 >= 0)
    v16 = *(unsigned __int8 *)(v6 + 23);
  else
    v16 = *(_QWORD *)(v6 + 8);
  if (v9 >= 0)
    v17 = (const void *)v6;
  else
    v17 = v7;
  if (v16 >= v14)
    v18 = v14;
  else
    v18 = v16;
  v19 = memcmp(v15, v17, v18);
  if (v19)
    return v19 < 0;
  else
    return v14 < v16;
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  if ((uint64_t *)a1 != a2)
  {
    v5 = a1 + 32;
    if ((uint64_t *)(a1 + 32) != a2)
    {
      v7 = 0;
      v8 = a1;
      do
      {
        v9 = (uint64_t *)v5;
        if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, v5, v8))
        {
          v14 = *v9;
          v15 = *(_OWORD *)(v8 + 40);
          v16 = *(_QWORD *)(v8 + 56);
          *(_QWORD *)(v8 + 40) = 0;
          *(_QWORD *)(v8 + 48) = 0;
          *(_QWORD *)(v8 + 56) = 0;
          v10 = v7;
          while (1)
          {
            std::pair<std::pair<quasar::PronType,float>,std::string>::operator=[abi:ne180100](a1 + v10 + 32, a1 + v10);
            if (!v10)
              break;
            v11 = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, (uint64_t)&v14, a1 + v10 - 32);
            v10 -= 32;
            if (!v11)
            {
              v12 = a1 + v10 + 32;
              goto LABEL_10;
            }
          }
          v12 = a1;
LABEL_10:
          *(_QWORD *)v12 = v14;
          v13 = v12 + 8;
          if (*(char *)(v12 + 31) < 0)
            operator delete(*(void **)v13);
          *(_OWORD *)v13 = v15;
          *(_QWORD *)(v13 + 16) = v16;
        }
        v5 = (uint64_t)(v9 + 4);
        v7 += 32;
        v8 = (uint64_t)v9;
      }
      while (v9 + 4 != a2);
    }
  }
}

void sub_1ADF62444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v7;
  uint64_t *v8;
  char *v9;
  BOOL v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  if ((uint64_t *)a1 != a2)
  {
    v4 = a1;
    v5 = a1 + 32;
    if ((uint64_t *)(a1 + 32) != a2)
    {
      v7 = (char *)(a1 + 63);
      do
      {
        v8 = (uint64_t *)v5;
        if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, v5, v4))
        {
          v12 = *v8;
          v13 = *(_OWORD *)(v4 + 40);
          v14 = *(_QWORD *)(v4 + 56);
          *(_QWORD *)(v4 + 40) = 0;
          *(_QWORD *)(v4 + 48) = 0;
          *(_QWORD *)(v4 + 56) = 0;
          v9 = v7;
          do
          {
            std::pair<std::pair<quasar::PronType,float>,std::string>::operator=[abi:ne180100]((uint64_t)(v9 - 31), (uint64_t)(v9 - 63));
            v10 = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, (uint64_t)&v12, (uint64_t)(v9 - 95));
            v9 -= 32;
          }
          while (v10);
          *(_QWORD *)(v9 - 31) = v12;
          if (*v9 < 0)
            operator delete(*(void **)(v9 - 23));
          v11 = v9 - 23;
          *(_OWORD *)v11 = v13;
          *((_QWORD *)v11 + 2) = v14;
        }
        v5 = (uint64_t)(v8 + 4);
        v7 += 32;
        v4 = (uint64_t)v8;
      }
      while (v8 + 4 != a2);
    }
  }
}

void sub_1ADF62564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v8;
  uint64_t result;
  __int128 *v10;
  int v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;

  v8 = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a4, a2, a1);
  result = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a4, a3, a2);
  if (!v8)
  {
    if (!(_DWORD)result)
      return result;
    v16 = *(_DWORD *)a2;
    *(_DWORD *)a2 = *(_DWORD *)a3;
    *(_DWORD *)a3 = v16;
    v17 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = v17;
    v18 = *(_QWORD *)(a2 + 24);
    v19 = *(_OWORD *)(a2 + 8);
    v20 = *(_QWORD *)(a3 + 24);
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a2 + 24) = v20;
    *(_OWORD *)(a3 + 8) = v19;
    *(_QWORD *)(a3 + 24) = v18;
    if (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a4, a2, a1))return 1;
    v21 = *(_DWORD *)a1;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_DWORD *)a2 = v21;
    v22 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = v22;
    v23 = *(_QWORD *)(a1 + 24);
    v24 = *(_OWORD *)(a1 + 8);
    v25 = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = v25;
    *(_OWORD *)(a2 + 8) = v24;
    *(_QWORD *)(a2 + 24) = v23;
    return 2;
  }
  v10 = (__int128 *)(a1 + 8);
  v11 = *(_DWORD *)a1;
  if (!(_DWORD)result)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_DWORD *)a2 = v11;
    v26 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = v26;
    v27 = *(_QWORD *)(a1 + 24);
    v28 = *v10;
    v29 = *(_QWORD *)(a2 + 24);
    *v10 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = v29;
    *(_OWORD *)(a2 + 8) = v28;
    *(_QWORD *)(a2 + 24) = v27;
    if (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a4, a3, a2))return 1;
    v30 = *(_DWORD *)a2;
    *(_DWORD *)a2 = *(_DWORD *)a3;
    *(_DWORD *)a3 = v30;
    v31 = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = v31;
    v32 = *(_QWORD *)(a2 + 24);
    v33 = *(_OWORD *)(a2 + 8);
    v34 = *(_QWORD *)(a3 + 24);
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a2 + 24) = v34;
    *(_OWORD *)(a3 + 8) = v33;
    *(_QWORD *)(a3 + 24) = v32;
    return 2;
  }
  *(_DWORD *)a1 = *(_DWORD *)a3;
  *(_DWORD *)a3 = v11;
  v12 = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a3 + 4);
  *(_DWORD *)(a3 + 4) = v12;
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *v10;
  v15 = *(_QWORD *)(a3 + 24);
  *v10 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 24) = v15;
  *(_OWORD *)(a3 + 8) = v14;
  *(_QWORD *)(a3 + 24) = v13;
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::pair<quasar::PronType,float>,std::string> *,std::__less<void,void> &>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void **v14;
  __int128 v15;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v4 = a2;
  v17 = *(_QWORD *)a1;
  v18 = *(_OWORD *)(a1 + 8);
  v19 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, (uint64_t)&v17, a2 - 32))
  {
    v6 = a1;
    do
      v6 += 32;
    while (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, (uint64_t)&v17, v6));
  }
  else
  {
    v7 = a1 + 32;
    do
    {
      v6 = v7;
      if (v7 >= v4)
        break;
      v8 = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, (uint64_t)&v17, v7);
      v7 = v6 + 32;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      v4 -= 32;
    while (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, (uint64_t)&v17, v4));
  }
  while (v6 < v4)
  {
    v9 = *(_DWORD *)v6;
    *(_DWORD *)v6 = *(_DWORD *)v4;
    *(_DWORD *)v4 = v9;
    v10 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)(v6 + 4) = *(_DWORD *)(v4 + 4);
    *(_DWORD *)(v4 + 4) = v10;
    v11 = *(_OWORD *)(v6 + 8);
    v21 = *(_QWORD *)(v6 + 24);
    v20 = v11;
    v12 = *(_OWORD *)(v4 + 8);
    *(_QWORD *)(v6 + 24) = *(_QWORD *)(v4 + 24);
    *(_OWORD *)(v6 + 8) = v12;
    v13 = v20;
    *(_QWORD *)(v4 + 24) = v21;
    *(_OWORD *)(v4 + 8) = v13;
    do
      v6 += 32;
    while (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, (uint64_t)&v17, v6));
    do
      v4 -= 32;
    while (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, (uint64_t)&v17, v4));
  }
  if (v6 - 32 != a1)
    std::pair<std::pair<quasar::PronType,float>,std::string>::operator=[abi:ne180100](a1, v6 - 32);
  *(_QWORD *)(v6 - 32) = v17;
  v14 = (void **)(v6 - 24);
  if (*(char *)(v6 - 1) < 0)
    operator delete(*v14);
  v15 = v18;
  *(_QWORD *)(v6 - 8) = v19;
  *(_OWORD *)v14 = v15;
  return v6;
}

void sub_1ADF62928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::pair<quasar::PronType,float>,std::string> *,std::__less<void,void> &>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  void **v16;
  __int128 v17;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v6 = 0;
  v19 = *(_QWORD *)a1;
  v21 = *(_QWORD *)(a1 + 24);
  v20 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  do
  {
    v7 = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, a1 + v6 + 32, (uint64_t)&v19);
    v6 += 32;
  }
  while (v7);
  v8 = a1 + v6;
  if (v6 == 32)
  {
    do
    {
      if (v8 >= a2)
        break;
      a2 -= 32;
    }
    while (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, a2, (uint64_t)&v19));
  }
  else
  {
    do
      a2 -= 32;
    while (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, a2, (uint64_t)&v19));
  }
  v9 = a1 + v6;
  if (v8 < a2)
  {
    v10 = a2;
    do
    {
      v11 = *(_DWORD *)v9;
      *(_DWORD *)v9 = *(_DWORD *)v10;
      *(_DWORD *)v10 = v11;
      v12 = *(_DWORD *)(v9 + 4);
      *(_DWORD *)(v9 + 4) = *(_DWORD *)(v10 + 4);
      *(_DWORD *)(v10 + 4) = v12;
      v13 = *(_OWORD *)(v9 + 8);
      v23 = *(_QWORD *)(v9 + 24);
      v22 = v13;
      v14 = *(_OWORD *)(v10 + 8);
      *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
      *(_OWORD *)(v9 + 8) = v14;
      v15 = v22;
      *(_QWORD *)(v10 + 24) = v23;
      *(_OWORD *)(v10 + 8) = v15;
      do
        v9 += 32;
      while (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, v9, (uint64_t)&v19));
      do
        v10 -= 32;
      while (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, v10, (uint64_t)&v19));
    }
    while (v9 < v10);
  }
  if (v9 - 32 != a1)
    std::pair<std::pair<quasar::PronType,float>,std::string>::operator=[abi:ne180100](a1, v9 - 32);
  *(_QWORD *)(v9 - 32) = v19;
  v16 = (void **)(v9 - 24);
  if (*(char *)(v9 - 1) < 0)
    operator delete(*v16);
  v17 = v20;
  *(_QWORD *)(v9 - 8) = v21;
  *(_OWORD *)v16 = v17;
  return v9 - 32;
}

void sub_1ADF62B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  int v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v6 = (a2 - a1) >> 5;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, a2 - 32, a1))
      {
        v8 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)(a2 - 32);
        *(_DWORD *)(a2 - 32) = v8;
        v9 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 28);
        *(_DWORD *)(a2 - 28) = v9;
        v10 = *(_QWORD *)(a1 + 24);
        v11 = *(_OWORD *)(a1 + 8);
        v12 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 24) = v12;
        *(_OWORD *)(a2 - 24) = v11;
        *(_QWORD *)(a2 - 8) = v10;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(a1, a1 + 32, a2 - 32, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(a1, a1 + 32, a1 + 64, a2 - 32, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32, a3);
      return 1;
    default:
      v13 = a1 + 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(a1, a1 + 32, a1 + 64, a3);
      v14 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      break;
  }
  while (1)
  {
    if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, v14, v13))
    {
      v21 = *(_QWORD *)v14;
      v22 = *(_OWORD *)(v14 + 8);
      v23 = *(_QWORD *)(v14 + 24);
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v14 + 16) = 0;
      *(_QWORD *)(v14 + 24) = 0;
      v17 = v15;
      while (1)
      {
        std::pair<std::pair<quasar::PronType,float>,std::string>::operator=[abi:ne180100](a1 + v17 + 96, a1 + v17 + 64);
        if (v17 == -64)
          break;
        v18 = std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, (uint64_t)&v21, a1 + v17 + 32);
        v17 -= 32;
        if (!v18)
        {
          v19 = a1 + v17 + 96;
          goto LABEL_12;
        }
      }
      v19 = a1;
LABEL_12:
      *(_QWORD *)v19 = v21;
      v20 = v19 + 8;
      if (*(char *)(v19 + 31) < 0)
        operator delete(*(void **)v20);
      *(_OWORD *)v20 = v22;
      *(_QWORD *)(v20 + 16) = v23;
      if (++v16 == 8)
        return v14 + 32 == a2;
    }
    v13 = v14;
    v15 += 32;
    v14 += 32;
    if (v14 == a2)
      return 1;
  }
}

void sub_1ADF62D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  int v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(a1, a2, a3, a5);
  if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a5, a4, a3))
  {
    v11 = *(_DWORD *)a3;
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v11;
    v12 = *(_DWORD *)(a3 + 4);
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = v12;
    v13 = *(_QWORD *)(a3 + 24);
    v14 = *(_OWORD *)(a3 + 8);
    v15 = *(_QWORD *)(a4 + 24);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
    *(_QWORD *)(a3 + 24) = v15;
    *(_OWORD *)(a4 + 8) = v14;
    *(_QWORD *)(a4 + 24) = v13;
    if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a5, a3, a2))
    {
      v16 = *(_DWORD *)a2;
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v16;
      v17 = *(_DWORD *)(a2 + 4);
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = v17;
      v18 = *(_QWORD *)(a2 + 24);
      v19 = *(_OWORD *)(a2 + 8);
      v20 = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(a2 + 24) = v20;
      *(_OWORD *)(a3 + 8) = v19;
      *(_QWORD *)(a3 + 24) = v18;
      if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a5, a2, a1))
      {
        v21 = *(_DWORD *)a1;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v21;
        v22 = *(_DWORD *)(a1 + 4);
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
        *(_DWORD *)(a2 + 4) = v22;
        v23 = *(_QWORD *)(a1 + 24);
        result = *(__n128 *)(a1 + 8);
        v24 = *(_QWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(_QWORD *)(a1 + 24) = v24;
        *(__n128 *)(a2 + 8) = result;
        *(_QWORD *)(a2 + 24) = v23;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __n128 result;
  int v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(a1, a2, a3, a4, a6);
  if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a6, a5, a4))
  {
    v13 = *(_DWORD *)a4;
    *(_DWORD *)a4 = *(_DWORD *)a5;
    *(_DWORD *)a5 = v13;
    v14 = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a4 + 4) = *(_DWORD *)(a5 + 4);
    *(_DWORD *)(a5 + 4) = v14;
    v15 = *(_QWORD *)(a4 + 24);
    v16 = *(_OWORD *)(a4 + 8);
    v17 = *(_QWORD *)(a5 + 24);
    *(_OWORD *)(a4 + 8) = *(_OWORD *)(a5 + 8);
    *(_QWORD *)(a4 + 24) = v17;
    *(_OWORD *)(a5 + 8) = v16;
    *(_QWORD *)(a5 + 24) = v15;
    if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a6, a4, a3))
    {
      v18 = *(_DWORD *)a3;
      *(_DWORD *)a3 = *(_DWORD *)a4;
      *(_DWORD *)a4 = v18;
      v19 = *(_DWORD *)(a3 + 4);
      *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
      *(_DWORD *)(a4 + 4) = v19;
      v20 = *(_QWORD *)(a3 + 24);
      v21 = *(_OWORD *)(a3 + 8);
      v22 = *(_QWORD *)(a4 + 24);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
      *(_QWORD *)(a3 + 24) = v22;
      *(_OWORD *)(a4 + 8) = v21;
      *(_QWORD *)(a4 + 24) = v20;
      if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a6, a3, a2))
      {
        v23 = *(_DWORD *)a2;
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(_DWORD *)a3 = v23;
        v24 = *(_DWORD *)(a2 + 4);
        *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
        *(_DWORD *)(a3 + 4) = v24;
        v25 = *(_QWORD *)(a2 + 24);
        v26 = *(_OWORD *)(a2 + 8);
        v27 = *(_QWORD *)(a3 + 24);
        *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
        *(_QWORD *)(a2 + 24) = v27;
        *(_OWORD *)(a3 + 8) = v26;
        *(_QWORD *)(a3 + 24) = v25;
        if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a6, a2, a1))
        {
          v28 = *(_DWORD *)a1;
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(_DWORD *)a2 = v28;
          v29 = *(_DWORD *)(a1 + 4);
          *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
          *(_DWORD *)(a2 + 4) = v29;
          v30 = *(_QWORD *)(a1 + 24);
          result = *(__n128 *)(a1 + 8);
          v31 = *(_QWORD *)(a2 + 24);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
          *(_QWORD *)(a1 + 24) = v31;
          *(__n128 *)(a2 + 8) = result;
          *(_QWORD *)(a2 + 24) = v30;
        }
      }
    }
  }
  return result;
}

uint64_t std::pair<std::pair<quasar::PronType,float>,std::string>::operator=[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v4 = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v4);
  v5 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)v4 = v5;
  *(_BYTE *)(a2 + 31) = 0;
  *(_BYTE *)(a2 + 8) = 0;
  return a1;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *,std::pair<std::pair<quasar::PronType,float>,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 5;
    if (a2 - a1 >= 33)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = a1 + 32 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(a1, a4, v9, v12);
        v12 -= 32;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = (_OWORD *)(a1 + 8);
      v15 = v6;
      do
      {
        if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a4, v15, a1))
        {
          v16 = *(_DWORD *)v15;
          *(_DWORD *)v15 = *(_DWORD *)a1;
          *(_DWORD *)a1 = v16;
          v17 = *(_DWORD *)(v15 + 4);
          *(_DWORD *)(v15 + 4) = *(_DWORD *)(a1 + 4);
          *(_DWORD *)(a1 + 4) = v17;
          v18 = *(_QWORD *)(v15 + 24);
          v19 = *(_OWORD *)(v15 + 8);
          v20 = *(_QWORD *)(a1 + 24);
          *(_OWORD *)(v15 + 8) = *v14;
          *(_QWORD *)(v15 + 24) = v20;
          *v14 = v19;
          *(_QWORD *)(a1 + 24) = v18;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(a1, a4, v9, a1);
        }
        v15 += 32;
      }
      while (v15 != a3);
      v13 = a3;
    }
    if (v8 >= 33)
    {
      v21 = (unint64_t)v8 >> 5;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<std::pair<quasar::PronType,float>,std::string> *>(a1, v6, a4, v21);
        v6 -= 32;
      }
      while (v21-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (a4 - a1) >> 5)
    {
      v10 = (a4 - a1) >> 4;
      v11 = v10 + 1;
      v12 = a1 + 32 * (v10 + 1);
      v13 = v10 + 2;
      if (v10 + 2 < a3
        && std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a2, a1 + 32 * (v10 + 1), v12 + 32))
      {
        v12 += 32;
        v11 = v13;
      }
      if (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a2, v12, v5))
      {
        v18 = *(_QWORD *)v5;
        v19 = *(__n128 *)(v5 + 8);
        v20 = *(_QWORD *)(v5 + 24);
        *(_QWORD *)(v5 + 8) = 0;
        *(_QWORD *)(v5 + 16) = 0;
        *(_QWORD *)(v5 + 24) = 0;
        do
        {
          v15 = v12;
          std::pair<std::pair<quasar::PronType,float>,std::string>::operator=[abi:ne180100](v5, v12);
          if (v7 < v11)
            break;
          v16 = (2 * v11) | 1;
          v12 = a1 + 32 * v16;
          v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            v11 = v16;
          }
          else if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a2, a1 + 32 * v16, v12 + 32))
          {
            v12 += 32;
          }
          else
          {
            v11 = v16;
          }
          v5 = v15;
        }
        while (!std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a2, v12, (uint64_t)&v18));
        *(_QWORD *)v15 = v18;
        v17 = (void **)(v15 + 8);
        if (*(char *)(v15 + 31) < 0)
          operator delete(*v17);
        result = v19;
        *(_QWORD *)(v15 + 24) = v20;
        *(__n128 *)v17 = result;
      }
    }
  }
  return result;
}

void sub_1ADF633E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::pair<std::pair<quasar::PronType,float>,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7;
  int v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[15];

  if (a4 >= 2)
  {
    v7 = *(_DWORD *)a1;
    v8 = *(_DWORD *)(a1 + 4);
    v9 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)&v14[7] = *(_QWORD *)(a1 + 23);
    v10 = *(_BYTE *)(a1 + 31);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v11 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(a1, a3, a4);
    v12 = v11;
    if (v11 == a2 - 32)
    {
      *(_DWORD *)v11 = v7;
      *(_DWORD *)(v11 + 4) = v8;
      if (*(char *)(v11 + 31) < 0)
        operator delete(*(void **)(v11 + 8));
      *(_QWORD *)(v12 + 8) = v9;
      *(_QWORD *)(v12 + 16) = *(_QWORD *)v14;
      *(_QWORD *)(v12 + 23) = *(_QWORD *)&v14[7];
      *(_BYTE *)(v12 + 31) = v10;
    }
    else
    {
      std::pair<std::pair<quasar::PronType,float>,std::string>::operator=[abi:ne180100](v11, a2 - 32);
      v13 = v12 + 32;
      *(_DWORD *)(a2 - 32) = v7;
      *(_DWORD *)(a2 - 28) = v8;
      if (*(char *)(a2 - 1) < 0)
        operator delete(*(void **)(a2 - 24));
      *(_QWORD *)(a2 - 24) = v9;
      *(_QWORD *)(a2 - 16) = *(_QWORD *)v14;
      *(_QWORD *)(a2 - 9) = *(_QWORD *)&v14[7];
      *(_BYTE *)(a2 - 1) = v10;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(a1, v13, a3, (v13 - a1) >> 5);
    }
  }
}

void sub_1ADF6353C(_Unwind_Exception *exception_object)
{
  void *v1;
  int v2;

  if (v2 < 0)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 32 * v6 + 32;
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3
      && std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a2, a1 + 32 * v6 + 32, a1 + 32 * v6 + 64))
    {
      v9 += 32;
      v10 = v11;
    }
    std::pair<std::pair<quasar::PronType,float>,std::string>::operator=[abi:ne180100](a1, v9);
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<std::pair<quasar::PronType,float>,std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v8 = v4 >> 1;
    v9 = a1 + 32 * (v4 >> 1);
    v10 = a2 - 32;
    if (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, v9, a2 - 32))
    {
      v14 = *(_QWORD *)(a2 - 32);
      v15 = *(_OWORD *)(a2 - 24);
      v16 = *(_QWORD *)(a2 - 8);
      *(_QWORD *)(a2 - 24) = 0;
      *(_QWORD *)(a2 - 16) = 0;
      *(_QWORD *)(a2 - 8) = 0;
      do
      {
        v12 = v9;
        std::pair<std::pair<quasar::PronType,float>,std::string>::operator=[abi:ne180100](v10, v9);
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = a1 + 32 * v8;
        v10 = v12;
      }
      while (std::__less<void,void>::operator()[abi:ne180100]<std::pair<std::pair<quasar::PronType,float>,std::string>,std::pair<std::pair<quasar::PronType,float>,std::string>>(a3, v9, (uint64_t)&v14));
      *(_QWORD *)v12 = v14;
      v13 = (void **)(v12 + 8);
      if (*(char *)(v12 + 31) < 0)
        operator delete(*v13);
      result = *(double *)&v15;
      *(_OWORD *)v13 = v15;
      *(_QWORD *)(v12 + 24) = v16;
    }
  }
  return result;
}

void sub_1ADF63704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::CTCAlignedDecoder::CTCAlignedDecoder(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)quasar::Decoder::Decoder(a1, a2);
  *v3 = &off_1E5CFF0E0;
  std::string::basic_string[abi:ne180100]<0>(v3 + 56, "▁");
  return a1;
}

void sub_1ADF63760(_Unwind_Exception *a1)
{
  void **v1;

  quasar::Decoder::~Decoder(v1);
  _Unwind_Resume(a1);
}

void quasar::CTCAlignedDecoder::makeLatticeFromCTCAlignment(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>, float a8@<S0>)
{
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  std::string *v28;
  char v29;
  char *v30;
  int64_t v31;
  int64_t size;
  char v33;
  std::string::value_type *v34;
  std::string::value_type *v35;
  int v36;
  int64_t v37;
  int64_t v38;
  std::string::value_type *v39;
  std::string::value_type *v40;
  std::string::size_type v41;
  std::__wrap_iter<const char *> v42;
  std::__wrap_iter<const char *> v43;
  std::__shared_weak_count *cntrl;
  uint64_t *p_shared_owners;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  std::string::size_type v52;
  _QWORD *v53;
  _QWORD *v54;
  std::string *p_traits;
  std::string::size_type v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  std::string *v60;
  uint64_t p_size;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  char col_high;
  std::locale::__imp *locale;
  void *v68;
  char v69;
  char *v70;
  int64_t v71;
  const std::ctype<char> *ct;
  char *v73;
  char *v74;
  uint64_t v75;
  int v76;
  void *v77;
  char *v78;
  char *v79;
  BOOL v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD *v92;
  int v93;
  int v94;
  _QWORD *v95;
  uint64_t *v96;
  int v99;
  std::string::value_type *__s;
  uint64_t v102;
  std::string *v105;
  _DWORD v106[2];
  unsigned __int8 v107;
  unsigned __int8 v108;
  int v109;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  void *v124[2];
  char v125;
  int v126;
  std::string traits;
  int v128;
  _QWORD *v129;
  std::__shared_weak_count *v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  std::string v133;

  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v131);
  (*(void (**)(uint64_t))(*(_QWORD *)v131 + 224))(v131);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v131 + 200))(v131);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v131 + 176))(v131, v11);
  v12 = operator new(0x30uLL);
  v13 = v12;
  v12[2] = 0;
  *v12 = &unk_1E5CFFE70;
  v12[1] = 0;
  v12[3] = 0;
  v14 = v12 + 3;
  v12[4] = 0;
  v12[5] = 0;
  v129 = v12 + 3;
  v130 = (std::__shared_weak_count *)v12;
  v15 = *a2;
  v16 = a2[1] - *a2;
  v17 = v16 >> 2;
  v95 = v12;
  v96 = v12 + 3;
  v92 = a7;
  if (v16)
  {
    v18 = 0;
    if (v17 <= 1)
      v19 = 1;
    else
      v19 = v16 >> 2;
    while (*(_DWORD *)(v15 + 4 * v18) == a4)
    {
      if (v19 == ++v18)
      {
        LODWORD(v18) = v17;
        break;
      }
    }
    v20 = 0;
    v102 = (uint64_t)(v12 + 5);
    v94 = -1;
    v93 = v18;
    do
    {
      if (v20)
        v21 = v20;
      else
        v21 = v18;
      v22 = *(_DWORD *)(v15 + 4 * v21);
      if (v22 == a4)
        v23 = -1;
      else
        v23 = v21;
      if (v22 == a4)
        std::string::basic_string[abi:ne180100]<0>(&v110, "");
      else
        (*(void (**)(std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *__return_ptr))(*(_QWORD *)a3 + 88))(&v110);
      v24 = v21 + 1;
      v25 = *a2;
      v26 = a2[1];
      while (v24 < (v26 - v25) >> 2)
      {
        if ((v21 < 0 || *(_DWORD *)(v25 + 4 * v24) != *(_DWORD *)(v25 + 4 * v21))
          && *(_DWORD *)(v25 + 4 * v24) != a4)
        {
          v99 = v23;
          v27 = a2;
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)a3 + 88))(&v133);
          v28 = &v133;
          if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v28 = (std::string *)v133.__r_.__value_.__r.__words[0];
          __s = (std::string::value_type *)v28;
          v29 = *(_BYTE *)(a1 + 471);
          if (v29 >= 0)
            v30 = (char *)(a1 + 448);
          else
            v30 = *(char **)(a1 + 448);
          if (v29 >= 0)
            v31 = *(unsigned __int8 *)(a1 + 471);
          else
            v31 = *(_QWORD *)(a1 + 456);
          if (v31)
          {
            if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v133.__r_.__value_.__r.__words[2]);
            else
              size = v133.__r_.__value_.__l.__size_;
            if (size >= v31)
            {
              v34 = __s;
              v35 = &__s[size];
              v36 = *v30;
              v37 = size;
              do
              {
                v38 = v37 - v31;
                if (v38 == -1)
                  break;
                v39 = (std::string::value_type *)memchr(v34, v36, v38 + 1);
                if (!v39)
                  break;
                v40 = v39;
                if (!memcmp(v39, v30, v31))
                {
                  if (v40 == v35 || v40 != __s)
                    break;
                  goto LABEL_45;
                }
                v34 = v40 + 1;
                v37 = v35 - (v40 + 1);
              }
              while (v37 >= v31);
            }
            std::string::append((std::string *)&v110, __s, size);
            a2 = v27;
            v33 = 0;
            v23 = v24;
          }
          else
          {
LABEL_45:
            v126 = v24;
            if (SHIBYTE(v110.__traits_.__col_) < 0)
              std::string::__init_copy_ctor_external(&traits, (const std::string::value_type *)v110.__traits_.__loc_.__locale_, (std::string::size_type)v110.__traits_.__ct_);
            else
              traits = (std::string)v110.__traits_;
            a2 = v27;
            v23 = v99;
            v128 = v99;
            v33 = 1;
          }
          v13 = v95;
          v14 = v96;
          if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v133.__r_.__value_.__l.__data_);
          if ((v33 & 1) != 0)
            goto LABEL_58;
          v25 = *a2;
          v26 = a2[1];
        }
        v21 = v24++;
      }
      v126 = (unint64_t)(v26 - v25) >> 2;
      if (SHIBYTE(v110.__traits_.__col_) < 0)
        std::string::__init_copy_ctor_external(&traits, (const std::string::value_type *)v110.__traits_.__loc_.__locale_, (std::string::size_type)v110.__traits_.__ct_);
      else
        traits = (std::string)v110.__traits_;
      v128 = v23;
LABEL_58:
      if (SHIBYTE(v110.__traits_.__col_) < 0)
        operator delete(v110.__traits_.__loc_.__locale_);
      std::operator+<char>();
      std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(&v110.__traits_, (uint64_t)v124, 0);
      memset(&v133, 0, sizeof(v133));
      v41 = HIBYTE(traits.__r_.__value_.__r.__words[2]);
      if ((traits.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42.__i_ = (std::__wrap_iter<const char *>::iterator_type)&traits;
      else
        v42.__i_ = (std::__wrap_iter<const char *>::iterator_type)traits.__r_.__value_.__r.__words[0];
      if ((traits.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v41 = traits.__r_.__value_.__l.__size_;
      v43.__i_ = &v42.__i_[v41];
      std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v133, v42, v43, &v110, "", 0);
      if (SHIBYTE(traits.__r_.__value_.__r.__words[2]) < 0)
        operator delete(traits.__r_.__value_.__l.__data_);
      traits = v133;
      *((_BYTE *)&v133.__r_.__value_.__s + 23) = 0;
      v133.__r_.__value_.__s.__data_[0] = 0;
      cntrl = v110.__start_.__cntrl_;
      if (v110.__start_.__cntrl_)
      {
        p_shared_owners = &v110.__start_.__cntrl_->__shared_owners_;
        do
          v46 = __ldaxr((unint64_t *)p_shared_owners);
        while (__stlxr(v46 - 1, (unint64_t *)p_shared_owners));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
          std::__shared_weak_count::__release_weak(cntrl);
        }
      }
      std::locale::~locale(&v110.__traits_.__loc_);
      if (v125 < 0)
        operator delete(v124[0]);
      v47 = v20;
      v48 = v11;
      do
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v131 + 200))(v131);
        v49 = *(_DWORD *)(*a2 + 4 * v47);
        v50 = v128;
        if (v128 == (_DWORD)v47)
        {
          v51 = quasar::QsrTextSymbolTable::Find(a6, (uint64_t)&traits);
          if (v51 == -1)
          {
            v52 = HIBYTE(traits.__r_.__value_.__r.__words[2]);
            if ((traits.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v52 = traits.__r_.__value_.__l.__size_;
            if (v52)
            {
              v51 = quasar::QsrTextSymbolTable::AddSymbol(a6);
              if (quasar::gLogLevel >= 4)
              {
                v122 = 0u;
                v123 = 0u;
                v120 = 0u;
                v121 = 0u;
                v118 = 0u;
                v119 = 0u;
                v116 = 0u;
                v117 = 0u;
                v114 = 0u;
                v115 = 0u;
                v112 = 0u;
                v113 = 0u;
                v111 = 0u;
                memset(&v110, 0, sizeof(v110));
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v110);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v110, (uint64_t)"detected OOV: (", 15);
                v53 = (_QWORD *)std::ostream::operator<<();
                v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)", ", 2);
                if ((traits.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  p_traits = &traits;
                else
                  p_traits = (std::string *)traits.__r_.__value_.__r.__words[0];
                if ((traits.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v56 = HIBYTE(traits.__r_.__value_.__r.__words[2]);
                else
                  v56 = traits.__r_.__value_.__l.__size_;
                v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)p_traits, v56);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)")", 1);
                quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v110);
              }
            }
            else
            {
              v51 = 0;
              v94 = v50;
            }
          }
        }
        else
        {
          v51 = 0;
        }
        v58 = v131;
        LODWORD(v133.__r_.__value_.__l.__data_) = v49;
        v59 = *(_QWORD *)(a5 + 24);
        if (!v59)
          std::__throw_bad_function_call[abi:ne180100]();
        LODWORD(v110.__traits_.__loc_.__locale_) = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v59 + 48))(v59, &v133);
        HIDWORD(v110.__traits_.__loc_.__locale_) = v51;
        v110.__traits_.__ct_ = 0;
        LODWORD(v110.__traits_.__col_) = v11;
        (*(void (**)(uint64_t, uint64_t, std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *))(*(_QWORD *)v58 + 208))(v58, v48, &v110);
        if (v51)
        {
          v109 = 0;
          LODWORD(v110.__traits_.__loc_.__locale_) = 0;
          LODWORD(v133.__r_.__value_.__l.__data_) = ++v47;
          LODWORD(v124[0]) = v47;
          v108 = 0;
          v107 = 1;
          v60 = (std::string *)v13[4];
          if ((unint64_t)v60 >= v13[5])
          {
            p_size = std::vector<quasar::Token>::__emplace_back_slow_path<std::string &,int,int,int,float,BOOL,BOOL>(v14, (uint64_t)&traits, (int *)&v110, (int *)&v133, (int *)v124, (float *)&v109, &v108, &v107);
          }
          else
          {
            std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string &,int,int,int,float,BOOL,BOOL>(v102, v60, (uint64_t)&traits, (int *)&v110, (int *)&v133, (int *)v124, (float *)&v109, &v108, &v107);
            p_size = (uint64_t)&v60[9].__r_.__value_.__l.__size_;
            v13[4] = (char *)v60 + 224;
          }
          v13[4] = p_size;
        }
        else
        {
          ++v47;
        }
        v20 = v126;
        v48 = v11;
      }
      while (v47 < v126);
      if (SHIBYTE(traits.__r_.__value_.__r.__words[2]) < 0)
        operator delete(traits.__r_.__value_.__l.__data_);
      v15 = *a2;
      LODWORD(v18) = v93;
    }
    while (v20 < (unint64_t)((uint64_t)(a2[1] - *a2) >> 2));
    LODWORD(v17) = v93;
  }
  else
  {
    v94 = -1;
  }
  v106[0] = 0;
  *(float *)&v106[1] = a8;
  (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v131 + 184))(v131, v11, v106);
  v62 = v13[3];
  v63 = v13[4];
  v64 = v94;
  if (v63 != v62)
  {
    v65 = 0;
    v105 = (std::string *)(int)v17;
    do
    {
      if (v65)
      {
        *(_DWORD *)(v62 + 224 * v65 + 28) = *(_DWORD *)(v62 + 224 * v65 - 192);
      }
      else
      {
        (*(void (**)(std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a3 + 88))(&v110, a3, *(int *)(*a2 + 4 * (_QWORD)v105));
        col_high = HIBYTE(v110.__traits_.__col_);
        locale = v110.__traits_.__loc_.__locale_;
        if (SHIBYTE(v110.__traits_.__col_) >= 0)
          v68 = &v110;
        else
          v68 = v110.__traits_.__loc_.__locale_;
        v69 = *(_BYTE *)(a1 + 471);
        if (v69 >= 0)
          v70 = (char *)(a1 + 448);
        else
          v70 = *(char **)(a1 + 448);
        if (v69 >= 0)
          v71 = *(unsigned __int8 *)(a1 + 471);
        else
          v71 = *(_QWORD *)(a1 + 456);
        if (v71)
        {
          if (SHIBYTE(v110.__traits_.__col_) >= 0)
            ct = (const std::ctype<char> *)HIBYTE(v110.__traits_.__col_);
          else
            ct = v110.__traits_.__ct_;
          v73 = (char *)ct + (_QWORD)v68;
          if ((uint64_t)ct >= v71)
          {
            v76 = *v70;
            v77 = v68;
            do
            {
              v78 = (char *)ct - v71;
              if (v78 == (char *)-1)
                break;
              v79 = (char *)memchr(v77, v76, (size_t)(v78 + 1));
              if (!v79)
                break;
              v74 = v79;
              if (!memcmp(v79, v70, v71))
                goto LABEL_130;
              v77 = v74 + 1;
              ct = (const std::ctype<char> *)(v73 - (v74 + 1));
            }
            while ((uint64_t)ct >= v71);
            v74 = v73;
LABEL_130:
            v64 = v94;
          }
          else
          {
            v74 = (char *)ct + (_QWORD)v68;
          }
          v75 = v74 - (_BYTE *)v68;
          if (v74 == v73)
            v75 = -1;
          v13 = v95;
        }
        else
        {
          v75 = 0;
        }
        v80 = v75 == 0;
        v62 = *v96;
        *(_BYTE *)(*v96 + 45) = v80;
        if (col_high < 0)
        {
          operator delete(locale);
          v62 = *v96;
        }
        v63 = v13[4];
      }
      v81 = 0x6DB6DB6DB6DB6DB7 * ((v63 - v62) >> 5);
      if (v81 - 1 == v65)
      {
        if (v64 != -1 && v64 > *(_DWORD *)(v62 + 224 * v65 + 32))
          *(_BYTE *)(v62 + 224 * v65 + 44) = 1;
        *(_DWORD *)(v62 + 224 * v65 + 32) = (a2[1] - *a2) >> 2;
      }
      ++v65;
    }
    while (v81 > v65);
  }
  v82 = v132;
  *v92 = v131;
  v92[1] = v82;
  if (v82)
  {
    v83 = (unint64_t *)&v82->__shared_owners_;
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
  }
  v85 = v130;
  v92[2] = v129;
  v92[3] = v85;
  if (v85)
  {
    v86 = (unint64_t *)&v85->__shared_owners_;
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
    do
      v88 = __ldaxr(v86);
    while (__stlxr(v88 - 1, v86));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v89 = v132;
  if (v132)
  {
    v90 = (unint64_t *)&v132->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
}

void sub_1ADF640B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v32 - 160);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v32 - 144);
  _Unwind_Resume(a1);
}

void quasar::CTCAlignedDecoder::forcedAlignCTC(char **a1@<X1>, std::vector<int>::value_type a2@<W2>, uint64_t a3@<X3>, unint64_t *a4@<X8>)
{
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  int *value;
  std::vector<int>::pointer end;
  int *v14;
  std::vector<int>::pointer begin;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  char *v20;
  int *v21;
  int v22;
  int *v23;
  std::vector<int>::pointer v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  int *v30;
  int v31;
  float v32;
  float *v33;
  float *v34;
  float *v35;
  float *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  float *v42;
  int v43;
  float *v44;
  float *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  int *v51;
  int v52;
  int v53;
  unint64_t v54;
  std::vector<int>::size_type v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  float *v63;
  std::vector<int>::pointer v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  float v68;
  float v69;
  float v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  _QWORD *v74;
  _DWORD *v75;
  uint64_t v76;
  std::vector<int>::pointer v77;
  _DWORD *v78;
  _DWORD *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  int v86;
  unint64_t v87;
  _DWORD *v88;
  unint64_t v89;
  int v90;
  BOOL v91;
  int v92;
  unint64_t v93;
  _BYTE v94[32];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  std::vector<int>::value_type v110;
  _QWORD v111[3];
  float *v112;
  float *v113;
  float *v114;
  std::vector<int> v115;
  __int128 v116;
  uint64_t v117;
  void *v118[3];
  int v119;
  std::vector<int>::value_type __x[3];

  __x[0] = a2;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v5 = a1[1] - *a1;
  if (v5)
  {
    v119 = 2139095040;
    v93 = v5 >> 1;
    v8 = (v5 >> 1) & 0xFFFFFFFE;
    v9 = (int)v8 + 3;
    std::vector<float>::vector(v118, v9, &v119);
    std::vector<float>::vector(&v116, v9, &v119);
    std::vector<int>::vector(&v115, 1uLL, __x);
    *(_DWORD *)v94 = 0;
    std::vector<float>::vector(&v112, 1uLL, v94);
    v92 = v8;
    v10 = *a1;
    if (a1[1] != *a1)
    {
      v11 = 0;
      do
      {
        end = v115.__end_;
        value = v115.__end_cap_.__value_;
        if (v115.__end_ >= v115.__end_cap_.__value_)
        {
          begin = v115.__begin_;
          v16 = v115.__end_ - v115.__begin_;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 62)
            goto LABEL_134;
          v18 = (char *)v115.__end_cap_.__value_ - (char *)v115.__begin_;
          if (((char *)v115.__end_cap_.__value_ - (char *)v115.__begin_) >> 1 > v17)
            v17 = v18 >> 1;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
            v19 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v115.__end_cap_, v19);
            begin = v115.__begin_;
            end = v115.__end_;
          }
          else
          {
            v20 = 0;
          }
          v21 = (int *)&v20[4 * v16];
          *v21 = *(_DWORD *)&v10[4 * v11];
          v14 = v21 + 1;
          while (end != begin)
          {
            v22 = *--end;
            *--v21 = v22;
          }
          value = (int *)&v20[4 * v19];
          v115.__begin_ = v21;
          v115.__end_ = v14;
          v115.__end_cap_.__value_ = value;
          if (begin)
          {
            operator delete(begin);
            value = v115.__end_cap_.__value_;
          }
        }
        else
        {
          *v115.__end_ = *(_DWORD *)&v10[4 * v11];
          v14 = end + 1;
        }
        v115.__end_ = v14;
        if (v14 >= value)
        {
          v24 = v115.__begin_;
          v25 = v14 - v115.__begin_;
          v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 62)
LABEL_134:
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v27 = (char *)value - (char *)v115.__begin_;
          if (v27 >> 1 > v26)
            v26 = v27 >> 1;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
            v28 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v28 = v26;
          if (v28)
          {
            v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v115.__end_cap_, v28);
            v24 = v115.__begin_;
            v14 = v115.__end_;
          }
          else
          {
            v29 = 0;
          }
          v30 = (int *)&v29[4 * v25];
          *v30 = __x[0];
          v23 = v30 + 1;
          while (v14 != v24)
          {
            v31 = *--v14;
            *--v30 = v31;
          }
          v115.__begin_ = v30;
          v115.__end_ = v23;
          v115.__end_cap_.__value_ = (int *)&v29[4 * v28];
          if (v24)
            operator delete(v24);
        }
        else
        {
          *v14 = __x[0];
          v23 = v14 + 1;
        }
        v115.__end_ = v23;
        if (v11)
        {
          if (*(_DWORD *)&(*a1)[4 * v11] == *(_DWORD *)&(*a1)[4 * (v11 - 1)])
            v32 = INFINITY;
          else
            v32 = 0.0;
        }
        else
        {
          v32 = 0.0;
        }
        v34 = v113;
        v33 = v114;
        if (v113 >= v114)
        {
          v36 = v112;
          v37 = v113 - v112;
          v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v39 = (char *)v114 - (char *)v112;
          if (((char *)v114 - (char *)v112) >> 1 > v38)
            v38 = v39 >> 1;
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
            v40 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v40 = v38;
          if (v40)
          {
            v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v114, v40);
            v36 = v112;
            v34 = v113;
          }
          else
          {
            v41 = 0;
          }
          v42 = (float *)&v41[4 * v37];
          *v42 = v32;
          v35 = v42 + 1;
          while (v34 != v36)
          {
            v43 = *((_DWORD *)v34-- - 1);
            *((_DWORD *)v42-- - 1) = v43;
          }
          v33 = (float *)&v41[4 * v40];
          v112 = v42;
          v113 = v35;
          v114 = v33;
          if (v36)
          {
            operator delete(v36);
            v33 = v114;
          }
        }
        else
        {
          *v113 = v32;
          v35 = v34 + 1;
        }
        v113 = v35;
        if (v35 >= v33)
        {
          v45 = v112;
          v46 = v35 - v112;
          v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v48 = (char *)v33 - (char *)v112;
          if (v48 >> 1 > v47)
            v47 = v48 >> 1;
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
            v49 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v49 = v47;
          if (v49)
          {
            v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v114, v49);
            v45 = v112;
            v35 = v113;
          }
          else
          {
            v50 = 0;
          }
          v51 = (int *)&v50[4 * v46];
          *v51 = v119;
          v44 = (float *)(v51 + 1);
          while (v35 != v45)
          {
            v52 = *((_DWORD *)v35-- - 1);
            *--v51 = v52;
          }
          v112 = (float *)v51;
          v113 = v44;
          v114 = (float *)&v50[4 * v49];
          if (v45)
            operator delete(v45);
        }
        else
        {
          *(_DWORD *)v35 = v119;
          v44 = v35 + 1;
        }
        v113 = v44;
        ++v11;
        v10 = *a1;
      }
      while (v11 < (a1[1] - *a1) >> 2);
    }
    v53 = v93 | 1;
    v54 = *(int *)(a3 + 20);
    v55 = (int)(v93 | 1);
    v110 = 0;
    std::vector<int>::vector((std::vector<int> *)v94, v55, &v110);
    std::vector<std::vector<int>>::vector(v111, v54, (uint64_t)v94);
    if (*(_QWORD *)v94)
    {
      *(_QWORD *)&v94[8] = *(_QWORD *)v94;
      operator delete(*(void **)v94);
    }
    LODWORD(v56) = *(_DWORD *)(a3 + 20);
    if ((int)v56 >= 1)
    {
      v57 = 0;
      if (v53 <= 1)
        v58 = 1;
      else
        v58 = v93 | 1;
      v59 = 4 * v58;
      do
      {
        if (v57)
        {
          v60 = v116;
          if ((v93 & 0x80000000) == 0)
          {
            v61 = 0;
            v62 = (_QWORD *)(v111[0] + 24 * v57);
            v63 = v112;
            v64 = v115.__begin_;
            v65 = *(_QWORD *)(a3 + 8);
            v66 = v116 + 8;
            v67 = (char *)v118[0] + 4;
            do
            {
              v68 = *(float *)&v67[v61 + 4];
              *(float *)(v66 + v61) = v68;
              v69 = *(float *)&v67[v61];
              if (v69 < v68)
              {
                *(float *)(v66 + v61) = v69;
                *(_DWORD *)(*v62 + v61) = 1;
                v68 = v69;
              }
              v70 = *(float *)&v67[v61 - 4];
              if (v70 <= v63[v61 / 4])
                v70 = v63[v61 / 4];
              if (v70 < v68)
              {
                *(float *)(v66 + v61) = v70;
                *(_DWORD *)(*v62 + v61) = 2;
                v68 = v70;
              }
              *(float *)(v66 + v61) = v68 - *(float *)(v65 + 4 * *(_DWORD *)(a3 + 24) * (int)v57 + 4 * v64[v61 / 4]);
              v61 += 4;
            }
            while (v59 != v61);
          }
        }
        else
        {
          v71 = *(_QWORD *)(a3 + 8);
          v60 = v116;
          *(float *)(v116 + 8) = -*(float *)(v71 + 4 * __x[0]);
          *(float *)(v60 + 12) = -*(float *)(v71 + 4 * *(int *)*a1);
        }
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v118, (char *)v60, *((uint64_t *)&v116 + 1), (*((_QWORD *)&v116 + 1) - v60) >> 2);
        std::vector<float>::vector(v94, v9, &v119);
        if ((_QWORD)v116)
        {
          *((_QWORD *)&v116 + 1) = v116;
          operator delete((void *)v116);
        }
        v116 = *(_OWORD *)v94;
        v117 = *(_QWORD *)&v94[16];
        ++v57;
        v56 = *(int *)(a3 + 20);
      }
      while (v57 < v56);
      v55 = v53;
    }
    if (quasar::gLogLevel > 3)
    {
      v108 = 0u;
      v109 = 0u;
      v106 = 0u;
      v107 = 0u;
      v104 = 0u;
      v105 = 0u;
      v102 = 0u;
      v103 = 0u;
      v100 = 0u;
      v101 = 0u;
      v98 = 0u;
      v99 = 0u;
      v96 = 0u;
      v97 = 0u;
      v95 = 0u;
      memset(v94, 0, sizeof(v94));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v94);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"cost of best path in CTC forced alignment: ", 43);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v94);
      LODWORD(v56) = *(_DWORD *)(a3 + 20);
    }
    if ((int)v56 <= 0)
    {
      v78 = (_DWORD *)a4[1];
    }
    else
    {
      v72 = 0;
      v73 = v92 - (*((float *)v118[0] + v92 + 2) >= *((float *)v118[0] + v55));
      v74 = a4 + 2;
      v75 = (_DWORD *)a4[1];
      do
      {
        v76 = v73;
        v77 = v115.__begin_;
        if ((unint64_t)v75 >= *v74)
        {
          v79 = (_DWORD *)*a4;
          v80 = (uint64_t)((uint64_t)v75 - *a4) >> 2;
          v81 = v80 + 1;
          if ((unint64_t)(v80 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v82 = *v74 - (_QWORD)v79;
          if (v82 >> 1 > v81)
            v81 = v82 >> 1;
          if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
            v83 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v83 = v81;
          if (v83)
          {
            v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a4 + 2), v83);
            v79 = (_DWORD *)*a4;
            v75 = (_DWORD *)a4[1];
          }
          else
          {
            v84 = 0;
          }
          v85 = &v84[4 * v80];
          *(_DWORD *)v85 = v77[v76];
          v78 = v85 + 4;
          while (v75 != v79)
          {
            v86 = *--v75;
            *((_DWORD *)v85 - 1) = v86;
            v85 -= 4;
          }
          *a4 = (unint64_t)v85;
          a4[1] = (unint64_t)v78;
          a4[2] = (unint64_t)&v84[4 * v83];
          if (v79)
            operator delete(v79);
        }
        else
        {
          *v75 = v115.__begin_[v73];
          v78 = v75 + 1;
        }
        a4[1] = (unint64_t)v78;
        v73 = v76 - *(_DWORD *)(*(_QWORD *)(v111[0] + 24 * ((int)v56 + ~v72++)) + 4 * v76);
        LODWORD(v56) = *(_DWORD *)(a3 + 20);
        v75 = v78;
      }
      while (v72 < (int)v56);
    }
    v87 = *a4;
    if ((_DWORD *)*a4 != v78)
    {
      v88 = v78 - 1;
      if ((unint64_t)(v78 - 1) > v87)
      {
        v89 = v87 + 4;
        do
        {
          v90 = *(_DWORD *)(v89 - 4);
          *(_DWORD *)(v89 - 4) = *v88;
          *v88-- = v90;
          v91 = v89 >= (unint64_t)v88;
          v89 += 4;
        }
        while (!v91);
      }
    }
    *(_QWORD *)v94 = v111;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v94);
    if (v112)
    {
      v113 = v112;
      operator delete(v112);
    }
    if (v115.__begin_)
    {
      v115.__end_ = v115.__begin_;
      operator delete(v115.__begin_);
    }
    if ((_QWORD)v116)
    {
      *((_QWORD *)&v116 + 1) = v116;
      operator delete((void *)v116);
    }
    if (v118[0])
    {
      v118[1] = v118[0];
      operator delete(v118[0]);
    }
  }
}

void sub_1ADF64980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  __p = (void *)(v15 - 232);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v17 = *(void **)(v15 - 208);
  if (v17)
  {
    *(_QWORD *)(v15 - 200) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(v15 - 184);
  if (v18)
  {
    *(_QWORD *)(v15 - 176) = v18;
    operator delete(v18);
  }
  v19 = *(void **)(v15 - 160);
  if (v19)
  {
    *(_QWORD *)(v15 - 152) = v19;
    operator delete(v19);
  }
  v20 = *(void **)(v15 - 136);
  if (v20)
  {
    *(_QWORD *)(v15 - 128) = v20;
    operator delete(v20);
  }
  v21 = *(void **)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::CTCAlignedDecoder::compactLatticeToString(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  kaldi::WriteCompactLattice(v6, 0, a2);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x1E0DE4F50];
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v8);
}

void sub_1ADF64B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::CTCAlignedDecoder::latticeToString(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  kaldi::WriteLattice(v6, 0, a2);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x1E0DE4F50];
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v8);
}

void sub_1ADF64BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *quasar::CTCAlignedDecoder::getDecoderContextKey@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CTCAlignedDecoder");
}

void std::__shared_ptr_emplace<std::vector<quasar::Token>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5CFFE70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<quasar::Token>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5CFFE70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<std::vector<quasar::Token>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t std::vector<quasar::Token>::__emplace_back_slow_path<std::string &,int,int,int,float,BOOL,BOOL>(uint64_t *a1, uint64_t a2, int *a3, int *a4, int *a5, float *a6, unsigned __int8 *a7, unsigned __int8 *a8)
{
  uint64_t v9;
  unint64_t v10;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v22;
  std::string *v23;
  std::string::value_type *v24;
  char *v25;
  uint64_t *v26;

  v9 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) > 0x124924924924924)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5) > v10)
    v10 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492)
    v18 = 0x124924924924924;
  else
    v18 = v10;
  v26 = a1 + 2;
  if (v18)
    v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)(a1 + 2), v18);
  else
    v19 = 0;
  v22 = v19;
  v23 = (std::string *)&v19[224 * v9];
  v25 = &v19[224 * v18];
  std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string &,int,int,int,float,BOOL,BOOL>((uint64_t)(a1 + 2), v23, a2, a3, a4, a5, a6, a7, a8);
  v24 = &v23[9].__r_.__value_.__s.__data_[8];
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v22);
  v20 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v22);
  return v20;
}

void sub_1ADF64DD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string &,int,int,int,float,BOOL,BOOL>(uint64_t a1, std::string *a2, uint64_t a3, int *a4, int *a5, int *a6, float *a7, unsigned __int8 *a8, unsigned __int8 *a9)
{
  int v15;
  int v16;
  int v17;
  float v18;
  int v19;
  int v20;
  void *__p[2];
  char v22;
  __int128 *v23[3];
  void *v24[2];
  char v25;
  void *v26[2];
  char v27;
  std::string v28;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v28 = *(std::string *)a3;
  v15 = *a4;
  v16 = *a5;
  v17 = *a6;
  v18 = *a7;
  v19 = *a8;
  v20 = *a9;
  std::string::basic_string[abi:ne180100]<0>(v26, "");
  std::string::basic_string[abi:ne180100]<0>(v24, "");
  memset(v23, 0, sizeof(v23));
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::Token::Token(a2, (__int128 *)&v28, v15, v16, v17, v19 != 0, v20 != 0, (__int128 *)v26, v18, (__int128 *)v24, v23, 0, (__int128 *)__p, 0, 0);
  if (v22 < 0)
    operator delete(__p[0]);
  __p[0] = v23;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v25 < 0)
    operator delete(v24[0]);
  if (v27 < 0)
    operator delete(v26[0]);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
}

void sub_1ADF64F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a20 < 0)
    operator delete(__p);
  __p = &a21;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a29 < 0)
    operator delete(a24);
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v35 - 89) < 0)
    operator delete(*(void **)(v35 - 112));
  _Unwind_Resume(a1);
}

void quasar::OnlineLatticeConfidenceDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  kaldi::WordBoundaryInfoNewOpts::Register((uint64_t)(this + 58), (uint64_t)a2);
  quasar::QsrTextSymbolTable::Register(this[56], a2, 16, 1, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(v6, "word-boundary-int-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Word boundary file with format <integer-phone-id> [begin|end|singleton|internal|nonword]");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 83), (uint64_t)__p, 1, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "unpronounced-word-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing newline-separated list of words with no pronunciation.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 86), (uint64_t)__p, 0, 20, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-expand");
  std::string::basic_string[abi:ne180100]<0>(__p, "If >0, the max amount by which lattices will be expanded.");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 89), (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-slot-depth");
  std::string::basic_string[abi:ne180100]<0>(__p, "If >0, the max number of words to allow in each slot of the confusion network.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 724, (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "confidence-model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename for confidence model file, format <FEATURE> <WEIGHT> (one per line)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 66), (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "alt-confidence-model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename for confidence model file, format <FEATURE> <WEIGHT> (one per line)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 69), (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "eps-confidence-model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Filename for epsilon confidence model file, format <FEATURE> <WEIGHT> (one per line)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 72), (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "scale-low");
  std::string::basic_string[abi:ne180100]<0>(__p, "Acoustic scaling factor (divisor) for low-end, eg, 2 (for a standard divisor of 12 = 0.08333)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 508, (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "scale-high");
  std::string::basic_string[abi:ne180100]<0>(__p, "Acoustic scaling factor (divisor) for high-end, eg, 20 (for a standard divisor of 12 = 0.08333)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 64), (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "acoustic-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for acoustic likelihoods, default 0.08333");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 62), (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "do-acoustic-stability");
  std::string::basic_string[abi:ne180100]<0>(__p, "Turn computation of acoustic stability features (at multiple acoustic scales) on/off with true(default)/false.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 654, (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "do-process-alternatives");
  std::string::basic_string[abi:ne180100]<0>(__p, "Control whether or not to process alternatives in the sausage network, or run in 1-Best mode, using true(default)/false.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 650, (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "do-process-sausage");
  std::string::basic_string[abi:ne180100]<0>(__p, "Turn computation of features derived from the structure of the sausage network on/off with true(default)/false.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 653, (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "do-process-rank");
  std::string::basic_string[abi:ne180100]<0>(__p, "Turn computation of rank-based features (at multiple acoustic scales) on/off with true(default)/false.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 652, (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "do-process-faninout");
  std::string::basic_string[abi:ne180100]<0>(__p, "Turn computation of contextual posterior features related to fan-in and fan-out context on/off with true(default)/false.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 651, (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "do-process-post");
  std::string::basic_string[abi:ne180100]<0>(__p, "Turn computation of lattice state posteriors (used for time-based-posterior and other measures) on/off with true(default)/false.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 655, (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "do-use-confmodel");
  std::string::basic_string[abi:ne180100]<0>(__p, "Turn computation of confidence score from the model off, effectively generating the time-based posterior as the confidence score,turn on/off with true(default)/false.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 81), (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "do-add-epsilon");
  std::string::basic_string[abi:ne180100]<0>(__p, "Turn computation of epsilon confidence score on, this will use the supplied epsilon confidence model parameters score,turn on/off with true(default)/false.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 82), (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "decode-mbr");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, do Minimum Bayes Risk decoding (else, Maximum a Posteriori)");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 649, (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "nbest-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "number of NBest hypotheses to produce hypotheses (with confidence) for.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 90), (uint64_t)__p, 0, 12, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "lattice-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Prune incoming lattice to this beam");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 716, (uint64_t)__p, 0, 116, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADF658F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLatticeConfidenceDecoder::finishInit(quasar::OnlineLatticeConfidenceDecoder *this)
{
  const quasar::SystemConfig::Version *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  int v24;
  _QWORD *v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v2 = (quasar::OnlineLatticeConfidenceDecoder *)((char *)this + 32);
  quasar::SystemConfig::Version::Version(&v27, 16, 1);
  if (quasar::SystemConfig::Version::operator>(v2, &v27))
  {
    quasar::QsrTextSymbolTable::init(*((const std::string **)this + 56), v2, 0, *((unsigned __int8 *)this + 441), 1);
    v3 = quasar::QsrTextSymbolTable::Find(*((quasar::QsrTextSymbolTable **)this + 56), "<?>");
    if (v3 != -1)
    {
      v4 = v3;
      v5 = *((int *)this + 116);
      if ((_DWORD)v5 && v3 != v5 && quasar::gLogLevel >= 5)
      {
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v27 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Silence label is set to ", 24);
        v6 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" but does not match the auto-determined silence label ", 54);
        v7 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)". Will use latter.", 18);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v27);
      }
      *((_DWORD *)this + 116) = v4;
    }
  }
  if (*((char *)this + 687) < 0)
  {
    if (!*((_QWORD *)this + 84))
      goto LABEL_17;
  }
  else if (!*((_BYTE *)this + 687))
  {
    goto LABEL_17;
  }
  quasar::ModelLoader::readWordBoundaryInfo(*((_QWORD **)this + 46), (unsigned int *)this + 116, (uint64_t)this + 664, (uint64_t)this + 688, (uint64_t *)&v27);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 480, &v27);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_17:
  std::allocate_shared[abi:ne180100]<kaldi::quasar::WordConf,std::allocator<kaldi::quasar::WordConf>,std::string &,void>((uint64_t)this + 528, &v27);
  v11 = (uint64_t *)((char *)this + 600);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 600, &v27);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  std::allocate_shared[abi:ne180100]<kaldi::quasar::WordConf,std::allocator<kaldi::quasar::WordConf>,std::string &,void>((uint64_t)this + 552, &v27);
  v15 = (_QWORD *)((char *)this + 616);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 616, &v27);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  std::allocate_shared[abi:ne180100]<kaldi::quasar::WordConf,std::allocator<kaldi::quasar::WordConf>,std::string &,void>((uint64_t)this + 576, &v27);
  v19 = (_QWORD *)((char *)this + 632);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)v19, &v27);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (_QWORD *)*v15;
  v24 = *(char *)(*v15 + 23);
  if (v24 < 0)
  {
    if (v23[1] != 4)
      goto LABEL_39;
    v23 = (_QWORD *)*v23;
  }
  else if (v24 != 4)
  {
    goto LABEL_39;
  }
  if (*(_DWORD *)v23 == 1280070990)
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v15, v11);
LABEL_39:
  v25 = (_QWORD *)*v19;
  v26 = *(char *)(*v19 + 23);
  if (v26 < 0)
  {
    if (v25[1] != 4)
      goto LABEL_46;
    v25 = (_QWORD *)*v25;
  }
  else if (v26 != 4)
  {
    goto LABEL_46;
  }
  if (*(_DWORD *)v25 == 1280070990)
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v19, v11);
LABEL_46:
  if (quasar::gLogLevel >= 4)
  {
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v27 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Finished initializing OnlineLatticeConfidenceDecoder.", 53);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v27);
  }
}

void sub_1ADF65D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineLatticeConfidenceDecoder::runImpl(uint64_t a1, quasar::PTree **a2, uint64_t *a3, uint64_t a4)
{
  clockid_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  float v15;
  float64x2_t v16;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  int v31;
  _DWORD *v32;
  int v33;
  double v34;
  double v35;
  double v36;
  double v37;
  float v38;
  float v39;
  uint64_t v40;
  float v41;
  float v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  float *v47;
  float v48;
  float v49;
  float v50;
  float *v51;
  float v52;
  float v53;
  float v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  std::__shared_weak_count *v60;
  unint64_t *p_shared_owners;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  float v66;
  int v67;
  const kaldi::TransitionModel *v68;
  const fst::SymbolTable *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  void **v78;
  unint64_t v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  void **v83;
  _QWORD *v84;
  uint64_t *v85;
  uint64_t *v86;
  unint64_t v87;
  _BYTE *v88;
  unint64_t v89;
  char *v90;
  const std::string::value_type **v91;
  __int128 v92;
  uint64_t v93;
  float *v94;
  float v95;
  float v96;
  float v97;
  std::string *v98;
  std::string *v99;
  uint64_t v100;
  _QWORD *v101;
  void *v102;
  std::string *v103;
  std::string *v104;
  int64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  _BYTE *v114;
  _BYTE *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  std::string *v119;
  uint64_t v120;
  const quasar::Token *v121;
  _QWORD *v123;
  uint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  void ***v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  _DWORD *v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v140;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  _DWORD *v163;
  int v164;
  _DWORD *v165;
  int v166;
  _DWORD *v167;
  int v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  __int128 __str;
  __int128 __str_16;
  __int128 v199;
  void *v200[2];
  __int128 v201;
  __int128 v202;
  void *v203[2];
  __int128 v204;
  __int128 v205;
  void *v206[2];
  __int128 v207;
  void *v208[2];
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  void *__p[2];
  char v215;
  __int128 *v216[3];
  void *v217[2];
  char v218;
  std::string v219;
  void *v220;
  void *v221;
  unint64_t v222;
  uint64_t v223;
  std::string *v224;
  unint64_t v225;
  uint64_t v226;
  std::string *v227;
  unint64_t v228;
  uint64_t *v229;
  std::__shared_weak_count *v230;
  void *v231;
  uint64_t v232;
  std::string v233;
  _QWORD *v234;
  std::__shared_weak_count *v235;
  uint64_t v236;
  std::__shared_weak_count *v237;
  uint64_t v238;
  std::__shared_weak_count *v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  void *v245;
  void *v246;
  uint64_t v247;
  void *v248;
  _BYTE *v249;
  uint64_t v250;
  void *v251;
  void *v252;
  uint64_t v253;
  void **v254;
  uint64_t *v255;
  uint64_t v256;
  _OWORD v257[2];
  int v258;
  uint64_t v259[3];
  uint64_t v260[3];
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  void *v264;
  _DWORD *v265;
  void *v266;
  _DWORD *v267;
  void *v268;
  _DWORD *v269;
  int v270;
  uint64_t v271;
  std::__shared_weak_count *v272;
  uint64_t v273;
  std::__shared_weak_count *v274;
  uint64_t v275;
  std::__shared_weak_count *v276;
  uint64_t v277;
  std::__shared_weak_count *v278;
  uint64_t v279;
  std::__shared_weak_count *v280;
  uint64_t v281;
  std::__shared_weak_count *v282;
  _OWORD v283[2];
  int v284;
  _OWORD v285[2];
  int v286;
  double v287;
  double v288;
  double v289;
  _OWORD v290[2];
  int v291;
  __int128 v292;
  _BYTE v293[32];
  uint64_t v294;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*a3 + 152) + 24))(*(_QWORD *)(*a3 + 152)) == -1)
    return 2;
  v293[24] = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v293, v8);
  v294 = 0;
  v196 = a1;
  v9 = *(float *)(a1 + 716);
  if (v9 > 0.0)
    kaldi::PruneLattice<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>(*(_QWORD **)(*a3 + 152), v9);
  v10 = *a3;
  v12 = *(_QWORD *)(*a3 + 152);
  v11 = *(_QWORD *)(*a3 + 160);
  *(_QWORD *)&v292 = v12;
  *((_QWORD *)&v292 + 1) = v11;
  if (v11)
  {
    v13 = (unint64_t *)(v11 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v10 = *a3;
  }
  if (*(_BYTE *)(v10 + 145))
    goto LABEL_9;
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&__str);
  v59 = __str;
  __str = 0uLL;
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
  v292 = v59;
  if (v60)
  {
    p_shared_owners = (unint64_t *)&v60->__shared_owners_;
    do
      v62 = __ldaxr(p_shared_owners);
    while (__stlxr(v62 - 1, p_shared_owners));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = (std::__shared_weak_count *)*((_QWORD *)&__str + 1);
  if (*((_QWORD *)&__str + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&__str + 1) + 8);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
  v66 = *(float *)(a1 + 712);
  if (v66 <= 0.0)
    v67 = 0;
  else
    v67 = (int)(float)((float)(v66
                             * (float)(*(int (**)(_QWORD))(**(_QWORD **)(*a3 + 152) + 160))(*(_QWORD *)(*a3 + 152)))
                     + 1000.0);
  v187 = *(_QWORD *)(*a3 + 152);
  v188 = quasar::PTree::begin(a2[4]);
  if (kaldi::WordAlignLattice(v187, v188, *(_QWORD *)(a1 + 480), v67, v292))
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v292 + 24))(v292) != -1)
    {
      v12 = v292;
LABEL_9:
      kaldi::TopSortCompactLatticeIfNeeded(v12);
      memset(v290, 0, sizeof(v290));
      v291 = 1065353216;
      v15 = *(float *)(a1 + 496);
      if (v15 == 1.0)
      {
        v15 = *(float *)(*a3 + 504);
        *(float *)(a1 + 496) = v15;
      }
      v16 = vmulq_n_f64((float64x2_t)xmmword_1AE18EDD0, (float)(1.0 / v15));
      __asm { FMOV            V1.2D, #1.0 }
      *(float32x2_t *)(a1 + 500) = vcvt_f32_f64(vdivq_f64(_Q1, v16));
      v22 = *(float *)(a1 + 508);
      if (v22 > 0.0)
      {
        *(float *)(a1 + 500) = 1.0 / v22;
        *(float *)(a1 + 504) = 1.0 / *(float *)(a1 + 512);
      }
      v289 = 0.0;
      v288 = 0.0;
      v287 = 0.0;
      memset(v285, 0, sizeof(v285));
      v286 = 1065353216;
      memset(v283, 0, sizeof(v283));
      v284 = 1065353216;
      std::allocate_shared[abi:ne180100]<fst::SymbolTable,std::allocator<fst::SymbolTable>,char const(&)[15],void>("sausage-labels", &v281);
      _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_17TropicalWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v279);
      std::allocate_shared[abi:ne180100]<fst::SymbolTable,std::allocator<fst::SymbolTable>,char const(&)[15],void>("sausage-labels", &v277);
      _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_17TropicalWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v275);
      std::allocate_shared[abi:ne180100]<fst::SymbolTable,std::allocator<fst::SymbolTable>,char const(&)[15],void>("sausage-labels", &v273);
      _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_17TropicalWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v271);
      v270 = 0;
      fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v268);
      fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>(v12, (uint64_t)&v268, 1);
      fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v266);
      fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v264);
      v262 = 0;
      v261 = 0;
      v263 = 0;
      memset(v260, 0, sizeof(v260));
      memset(v259, 0, sizeof(v259));
      if (((*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v269 + 32))(v269, 0x3FFFFFFF0007) & 0x4000000000) == 0
        && !fst::TopSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)&v268))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Cycles detected in lattice.", 27);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__str);
      }
      v23 = *(float *)(a1 + 496);
      v24 = *(float *)(*a3 + 504);
      v25 = *(float *)(a1 + 516);
      v26 = *(float *)(*a3 + 508);
      if (v23 != v24 || v25 != v26)
      {
        std::vector<std::vector<double>>::vector(&__str, 2uLL);
        *(_QWORD *)&v257[0] = 0;
        std::vector<fst::LatticeWeightTpl<float>>::resize(__str, 2uLL, v257);
        *(_QWORD *)&v257[0] = 0;
        std::vector<fst::LatticeWeightTpl<float>>::resize(__str + 24, 2uLL, v257);
        v27 = __str;
        **(double **)__str = (float)(v25 / v26);
        *(double *)(*(_QWORD *)(v27 + 24) + 8) = (float)(v23 / v24);
        fst::ScaleLattice<fst::LatticeWeightTpl<float>,double>((double ***)&__str, (uint64_t)&v268);
        *(_QWORD *)&v257[0] = &__str;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v257);
      }
      *(float *)(a1 + 660) = (float)(*(int (**)(_QWORD))(**((_QWORD **)*a2 + 2) + 24))(*((_QWORD *)*a2 + 2));
      if (*(_BYTE *)(a1 + 654))
      {
        v28 = v269;
        ++v269[14];
        v29 = v267;
        v30 = v28;
        if (v267)
        {
          v30 = v28;
          v31 = v267[14] - 1;
          v267[14] = v31;
          if (!v31)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
            v30 = v269;
          }
        }
        v267 = v28;
        ++v30[14];
        v32 = v265;
        if (v265)
        {
          v33 = v265[14] - 1;
          v265[14] = v33;
          if (!v33)
            (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
        }
        v265 = v30;
      }
      v34 = 0.0;
      v35 = 0.0;
      v36 = 0.0;
      if (*(_BYTE *)(v196 + 655))
      {
        v35 = kaldi::LatticeForwardBackward(&v268, &v261, &v289);
        v36 = (double)(0xAAAAAAAAAAAAAAABLL * ((v262 - v261) >> 3));
      }
      v37 = 0.0;
      if (*(_BYTE *)(v196 + 654))
      {
        v38 = *(float *)(v196 + 500);
        v39 = *(float *)(v196 + 496);
        std::vector<std::vector<double>>::vector(&__str, 2uLL);
        *(_QWORD *)&v257[0] = 0;
        std::vector<fst::LatticeWeightTpl<float>>::resize(__str, 2uLL, v257);
        *(_QWORD *)&v257[0] = 0;
        std::vector<fst::LatticeWeightTpl<float>>::resize(__str + 24, 2uLL, v257);
        v40 = __str;
        **(_QWORD **)__str = 0x3FF0000000000000;
        *(double *)(*(_QWORD *)(v40 + 24) + 8) = (float)(v38 / v39);
        fst::ScaleLattice<fst::LatticeWeightTpl<float>,double>((double ***)&__str, (uint64_t)&v266);
        *(_QWORD *)&v257[0] = &__str;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v257);
        v41 = *(float *)(v196 + 504);
        v42 = *(float *)(v196 + 496);
        std::vector<std::vector<double>>::vector(&__str, 2uLL);
        *(_QWORD *)&v257[0] = 0;
        std::vector<fst::LatticeWeightTpl<float>>::resize(__str, 2uLL, v257);
        *(_QWORD *)&v257[0] = 0;
        std::vector<fst::LatticeWeightTpl<float>>::resize(__str + 24, 2uLL, v257);
        v43 = __str;
        **(_QWORD **)__str = 0x3FF0000000000000;
        *(double *)(*(_QWORD *)(v43 + 24) + 8) = (float)(v41 / v42);
        fst::ScaleLattice<fst::LatticeWeightTpl<float>,double>((double ***)&__str, (uint64_t)&v264);
        *(_QWORD *)&v257[0] = &__str;
        std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v257);
        v34 = kaldi::LatticeForwardBackward(&v266, v260, &v288);
        v37 = kaldi::LatticeForwardBackward(&v264, v259, &v287);
      }
      v44 = v289;
      v45 = v288;
      v46 = v287;
      *(_QWORD *)&v257[0] = *(_QWORD *)(*(_QWORD *)a4 + 24) + 128;
      v47 = (float *)std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v285, *(unsigned __int8 **)&v257[0], (uint64_t)&std::piecewise_construct, (__int128 **)v257);
      v48 = v37 / v36;
      v49 = v34 / v36;
      v50 = v35 / v36;
      v47[10] = v50;
      v47[11] = v49;
      v47[12] = v48;
      *(_QWORD *)&v257[0] = *(_QWORD *)(*(_QWORD *)a4 + 24) + 128;
      v51 = (float *)std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v283, *(unsigned __int8 **)&v257[0], (uint64_t)&std::piecewise_construct, (__int128 **)v257);
      v52 = v44 / v36;
      v53 = v45 / v36;
      v54 = v46 / v36;
      v51[10] = v52;
      v51[11] = v53;
      v51[12] = v54;
      memset(v257, 0, sizeof(v257));
      v258 = 1065353216;
      LODWORD(v251) = 0;
      if (v262 != v261)
      {
        LODWORD(v55) = 0;
        do
        {
          kaldi::quasar::GetStatePosts(v55, &v261, v260, v259, (uint64_t)&__str);
          v254 = &v251;
          v56 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v257, (int *)&v251, (uint64_t)&std::piecewise_construct, (_DWORD **)&v254);
          std::__hash_table<std::__hash_value_type<int,unsigned long>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned long>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned long>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned long>>>::__move_assign((uint64_t)(v56 + 3), (uint64_t *)&__str);
          std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&__str);
          v55 = (int)v251 + 1;
          LODWORD(v251) = (_DWORD)v251 + 1;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v262 - v261) >> 3) > v55);
      }
      v255 = 0;
      v254 = 0;
      v256 = 0;
      v252 = 0;
      v251 = 0;
      v253 = 0;
      v249 = 0;
      v248 = 0;
      v250 = 0;
      v246 = 0;
      v245 = 0;
      v247 = 0;
      v243 = 0;
      v242 = 0;
      v244 = 0;
      _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v240);
      _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v238);
      _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v236);
      _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v234);
      v57 = *(_QWORD *)(*(_QWORD *)a4 + 24);
      if (*(char *)(v57 + 151) < 0)
        std::string::__init_copy_ctor_external(&v233, *(const std::string::value_type **)(v57 + 128), *(_QWORD *)(v57 + 136));
      else
        v233 = *(std::string *)(v57 + 128);
      v68 = (const kaldi::TransitionModel *)quasar::PTree::begin(a2[4]);
      v69 = a2[21];
      v70 = *(_QWORD *)(v12 + 8);
      ++*(_DWORD *)(v70 + 56);
      v232 = v70;
      v231 = &unk_1E5D28AB0;
      kaldi::quasar::LatticeGenerateConfidenceSausagesOnline((uint64_t)&v233, (kaldi::SilencePhoneSet *)(a2 + 12), v68, v69, v196 + 648, v257, (uint64_t)&v231, v290, v285, v283, *(const kaldi::quasar::WordConf **)(v196 + 600), *(const kaldi::quasar::WordConf **)(v196 + 616), *(const kaldi::quasar::WordConf **)(v196 + 632), *(_DWORD *)(v196 + 720), *(_DWORD *)(*(_QWORD *)(v196 + 480) + 24), (uint64_t *)&v254, &v270, v281, v279,
        v234,
        v238,
        (char **)&v251,
        (uint64_t)&v248);
      v231 = &unk_1E5D25800;
      v71 = v232;
      if (v232)
      {
        v72 = *(_DWORD *)(v232 + 56) - 1;
        *(_DWORD *)(v232 + 56) = v72;
        if (!v72)
          (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
      }
      if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v233.__r_.__value_.__l.__data_);
      *((_BYTE *)a2 + 552) = 1;
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(*a3 + 152), (uint64_t *)&v234);
      v73 = *a3;
      *(_BYTE *)(v73 + 145) = 1;
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(v73 + 168), (uint64_t *)&v292);
      quasar::SymbolTableList::lookup(*(uint64_t **)(*a3 + 472), (int **)&v251, (uint64_t *)(*a3 + 48), (char **)(*a3 + 72), 1);
      quasar::SymbolTableList::lookup(*(uint64_t **)(*a3 + 472), (int **)&v248, &v242, (char **)&v245, 0);
      v74 = (int *)v248;
      if (0xAAAAAAAAAAAAAAABLL * ((v243 - v242) >> 3) == (v249 - (_BYTE *)v248) >> 2)
      {
        if (v249 != v248)
        {
          v75 = 0;
          v76 = 0;
          do
          {
            (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v281 + 24))(v281, v242 + v75, v74[v76++]);
            v74 = (int *)v248;
            v75 += 24;
          }
          while (v76 < (v249 - (_BYTE *)v248) >> 2);
        }
        v77 = v255;
        v78 = v254;
        if (v255 != (uint64_t *)v254)
        {
          v79 = 0;
          do
          {
            v80 = (char *)v78[3 * v79];
            if (v78[3 * v79 + 1] != v80)
            {
              v81 = 0;
              v82 = 144;
              do
              {
                (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v281 + 88))(&__str, v281, *(int *)&v80[v82]);
                std::string::operator=((std::string *)((char *)v254[3 * v79] + v82 - 120), (const std::string *)&__str);
                if (SBYTE7(__str_16) < 0)
                  operator delete((void *)__str);
                ++v81;
                v78 = v254;
                v83 = &v254[3 * v79];
                v80 = (char *)*v83;
                v82 += 264;
              }
              while (v81 < 0xF83E0F83E0F83E1 * (((_BYTE *)v83[1] - (_BYTE *)*v83) >> 3));
              v77 = v255;
            }
            ++v79;
          }
          while (v79 < 0xAAAAAAAAAAAAAAABLL * (((char *)v77 - (char *)v78) >> 3));
        }
      }
      else if (quasar::gLogLevel >= 5)
      {
        v212 = 0u;
        v213 = 0u;
        v210 = 0u;
        v211 = 0u;
        *(_OWORD *)v208 = 0u;
        v209 = 0u;
        *(_OWORD *)v206 = 0u;
        v207 = 0u;
        v204 = 0u;
        v205 = 0u;
        v202 = 0u;
        *(_OWORD *)v203 = 0u;
        *(_OWORD *)v200 = 0u;
        v201 = 0u;
        __str_16 = 0u;
        v199 = 0u;
        __str = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"symList.size() != symListWords.size()", 37);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__str);
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v279 + 280))(v279, v281);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v279 + 288))(v279, v281);
      v195 = a4;
      v84 = operator new(0x30uLL);
      v84[2] = 0;
      *v84 = &unk_1E5D456D0;
      v84[1] = 0;
      v84[4] = 0;
      v84[5] = 0;
      v84[3] = 0;
      v229 = v84 + 3;
      v230 = (std::__shared_weak_count *)v84;
      v85 = v255;
      v86 = (uint64_t *)v254;
      v194 = (uint64_t)a2;
      if (v255 == (uint64_t *)v254)
      {
        v127 = 0xAAAAAAAAAAAAAAABLL * (((char *)v255 - (char *)v254) >> 3);
        v86 = v255;
      }
      else
      {
        v87 = 0;
        do
        {
          v227 = 0;
          v226 = 0;
          v228 = 0;
          v224 = 0;
          v223 = 0;
          v225 = 0;
          v221 = 0;
          v220 = 0;
          v222 = 0;
          v88 = (_BYTE *)v86[3 * v87];
          if ((_BYTE *)v86[3 * v87 + 1] == v88)
          {
            v115 = 0;
            v114 = 0;
          }
          else
          {
            v89 = 0;
            do
            {
              v90 = &v88[264 * v89];
              v91 = (const std::string::value_type **)(v90 + 24);
              if (v90[47] < 0)
              {
                std::string::__init_copy_ctor_external(&v219, *v91, *((_QWORD *)v90 + 4));
                v86 = (uint64_t *)v254;
              }
              else
              {
                v92 = *(_OWORD *)v91;
                v219.__r_.__value_.__r.__words[2] = *((_QWORD *)v90 + 5);
                *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v92;
              }
              v93 = v86[3 * v87] + 264 * v89;
              v94 = *(float **)(v93 + 168);
              v95 = *v94;
              v96 = v94[1];
              v97 = *(float *)(v93 + 192);
              std::string::basic_string[abi:ne180100]<0>(v217, "");
              memset(v216, 0, sizeof(v216));
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              quasar::Token::Token((std::string *)&__str, (__int128 *)&v219, (float)(v95 * 1000.0), (float)((float)(v96 * 1000.0) + (float)(v95 * 1000.0)), (float)((float)(v96 * 1000.0) + (float)(v95 * 1000.0)), 1, 0, (__int128 *)(v93 + 120), v97, (__int128 *)v217, v216, 0, (__int128 *)__p, 0, 0);
              if (v215 < 0)
                operator delete(__p[0]);
              __p[0] = v216;
              std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              if (v218 < 0)
                operator delete(v217[0]);
              if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v219.__r_.__value_.__l.__data_);
              v98 = v224;
              if ((unint64_t)v224 >= v225)
              {
                v99 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(&v223, (const quasar::Token *)&__str);
              }
              else
              {
                quasar::Token::Token(v224, (const quasar::Token *)&__str);
                v99 = (std::string *)((char *)v98 + 224);
              }
              v224 = v99;
              if (v89)
              {
                v100 = *((unsigned int *)v254[3 * v87] + 66 * v89 + 48);
                v101 = v221;
                if ((unint64_t)v221 >= v222)
                {
                  v105 = ((_BYTE *)v221 - (_BYTE *)v220) >> 4;
                  v106 = v105 + 1;
                  if ((unint64_t)(v105 + 1) >> 60)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v107 = v222 - (_QWORD)v220;
                  if ((uint64_t)(v222 - (_QWORD)v220) >> 3 > v106)
                    v106 = v107 >> 3;
                  if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF0)
                    v108 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v108 = v106;
                  if (v108)
                    v109 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v222, v108);
                  else
                    v109 = 0;
                  v110 = &v109[16 * v105];
                  *(_QWORD *)v110 = v100;
                  *((_QWORD *)v110 + 1) = v89;
                  v111 = (char *)v221;
                  v112 = (char *)v220;
                  v113 = v110;
                  if (v221 != v220)
                  {
                    do
                    {
                      *((_OWORD *)v113 - 1) = *((_OWORD *)v111 - 1);
                      v113 -= 16;
                      v111 -= 16;
                    }
                    while (v111 != v112);
                    v111 = (char *)v220;
                  }
                  v102 = v110 + 16;
                  v220 = v113;
                  v221 = v110 + 16;
                  v222 = (unint64_t)&v109[16 * v108];
                  if (v111)
                    operator delete(v111);
                }
                else
                {
                  *(_QWORD *)v221 = v100;
                  v101[1] = v89;
                  v102 = v101 + 2;
                }
                v221 = v102;
              }
              else
              {
                v103 = v227;
                if ((unint64_t)v227 >= v228)
                {
                  v104 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(&v226, (const quasar::Token *)&__str);
                }
                else
                {
                  quasar::Token::Token(v227, (const quasar::Token *)&__str);
                  v104 = (std::string *)((char *)v103 + 224);
                }
                v227 = v104;
              }
              if (SBYTE7(v209) < 0)
                operator delete(v208[0]);
              if (SBYTE7(v207) < 0)
                operator delete(v206[0]);
              v217[0] = (char *)&v204 + 8;
              std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v217);
              if (SBYTE7(v204) < 0)
                operator delete(v203[0]);
              v217[0] = (char *)&v201 + 8;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v217);
              if (SBYTE7(v201) < 0)
                operator delete(v200[0]);
              if (SBYTE7(__str_16) < 0)
                operator delete((void *)__str);
              ++v89;
              v86 = (uint64_t *)v254;
              v88 = v254[3 * v87];
            }
            while (v89 < 0xF83E0F83E0F83E1 * (((_BYTE *)v254[3 * v87 + 1] - v88) >> 3));
            v114 = v220;
            v115 = v221;
          }
          v116 = 126 - 2 * __clz((v115 - v114) >> 4);
          if (v115 == v114)
            v117 = 0;
          else
            v117 = v116;
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *,false>((uint64_t)v114, (unint64_t)v115, (uint64_t)v217, v117, 1);
          v118 = (unint64_t)((_BYTE *)v221 - (_BYTE *)v220) >> 4;
          v119 = v227;
          if ((int)v118 - 1 >= 0)
          {
            v120 = (16 * (v118 - 1)) | 8;
            do
            {
              if (0x6DB6DB6DB6DB6DB7 * (((uint64_t)v119 - v226) >> 5) < (unint64_t)*(int *)(v196 + 724))
              {
                v121 = (const quasar::Token *)(v223 + 224 * *(_QWORD *)((char *)v220 + v120));
                if ((unint64_t)v119 >= v228)
                {
                  v119 = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(&v226, v121);
                }
                else
                {
                  quasar::Token::Token(v119, v121);
                  v119 = (std::string *)((char *)v119 + 224);
                }
                v227 = v119;
              }
              LODWORD(v118) = v118 - 1;
              v120 -= 16;
            }
            while ((int)v118 > 0);
          }
          if ((char *)v224 - v223 != (char *)v119 - v226 && kaldi::g_kaldi_verbose_level > 2)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__str, 3);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Note: Have trimmed confusion network slot depth from ", 53);
            v123 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)" to ", 4);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__str);
          }
          v124 = v229;
          v125 = v229[1];
          if (v125 >= v229[2])
          {
            v126 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(v229, &v226);
          }
          else
          {
            std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)v229, &v226);
            v126 = v125 + 24;
          }
          v124[1] = v126;
          if (v220)
          {
            v221 = v220;
            operator delete(v220);
          }
          *(_QWORD *)&__str = &v223;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          *(_QWORD *)&__str = &v226;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
          ++v87;
          v85 = v255;
          v86 = (uint64_t *)v254;
          v127 = 0xAAAAAAAAAAAAAAABLL * (((char *)v255 - (char *)v254) >> 3);
        }
        while (v87 < v127);
      }
      if (*(_BYTE *)(*(_QWORD *)a4 + 216))
      {
        v128 = (void ***)(*a3 + 840);
        if (v128 != &v254)
          std::vector<std::vector<kaldi::quasar::WordConf>>::__assign_with_size[abi:ne180100]<std::vector<kaldi::quasar::WordConf>*,std::vector<kaldi::quasar::WordConf>*>((uint64_t)v128, v86, v85, v127);
      }
      v129 = v229;
      v130 = *v229;
      if (0xAAAAAAAAAAAAAAABLL * ((v229[1] - *v229) >> 3) >= 2)
      {
        v131 = 0;
        v132 = 1;
        do
        {
          v133 = *(_QWORD *)(v130 + v131);
          v134 = *(_DWORD **)(v130 + v131 + 24);
          v135 = v134[7];
          if (v135 != *(_DWORD *)(v133 + 32))
          {
            v136 = v134[9];
            v137 = v134[8] - v135;
            v138 = quasar::gLogLevel;
            if (v137 <= 0 && quasar::gLogLevel >= 4)
            {
              v212 = 0u;
              v213 = 0u;
              v210 = 0u;
              v211 = 0u;
              *(_OWORD *)v208 = 0u;
              v209 = 0u;
              *(_OWORD *)v206 = 0u;
              v207 = 0u;
              v204 = 0u;
              v205 = 0u;
              v202 = 0u;
              *(_OWORD *)v203 = 0u;
              *(_OWORD *)v200 = 0u;
              v201 = 0u;
              __str_16 = 0u;
              v199 = 0u;
              __str = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"tokenDur: ", 10);
              std::ostream::operator<<();
              quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__str);
              v138 = quasar::gLogLevel;
            }
            v140 = v136 - v135;
            if (v140 <= 0 && v138 >= 4)
            {
              v212 = 0u;
              v213 = 0u;
              v210 = 0u;
              v211 = 0u;
              *(_OWORD *)v208 = 0u;
              v209 = 0u;
              *(_OWORD *)v206 = 0u;
              v207 = 0u;
              v204 = 0u;
              v205 = 0u;
              v202 = 0u;
              *(_OWORD *)v203 = 0u;
              *(_OWORD *)v200 = 0u;
              v201 = 0u;
              __str_16 = 0u;
              v199 = 0u;
              __str = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"speechDur: ", 11);
              std::ostream::operator<<();
              quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__str);
            }
            v142 = *(_DWORD *)(v133 + 32);
            v134[7] = v142;
            v143 = v134[8];
            if (v143 <= v142)
            {
              v143 = v142 + v137;
              v134[8] = v142 + v137;
            }
            v144 = v143 - v142;
            if (v140 < v144)
              v144 = v140;
            v134[9] = v144 + v142;
            v129 = v229;
            v130 = *v229;
          }
          ++v132;
          v131 += 24;
        }
        while (v132 < 0xAAAAAAAAAAAAAAABLL * ((v129[1] - v130) >> 3));
      }
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(*a3 + 304), (uint64_t *)&v229);
      if (*(_BYTE *)(v194 + 561))
      {
        v145 = *a3;
        v146 = *(_QWORD *)(*a3 + 560);
        v147 = *(unsigned int *)(*(_QWORD *)v195 + 12);
        v227 = 0;
        v226 = 0;
        v228 = 0;
        v224 = 0;
        v223 = 0;
        v225 = 0;
        v221 = 0;
        v220 = 0;
        v222 = 0;
        LOBYTE(__str) = 0;
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)&__str + 1, "▁");
        LOWORD(v193) = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t *, uint64_t *, void **, int, __int128 *))(*(_QWORD *)v146 + 24))(v146, v145 + 48, v147, 1, 0, 0, &v226, &v223, &v220, v193, &__str);
        if (SHIBYTE(__str_16) < 0)
          operator delete(*((void **)&__str + 1));
        *(_QWORD *)&__str = &v220;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        *(_QWORD *)&__str = &v223;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        *(_QWORD *)&__str = &v226;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      }
      fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>(v238, v236, 1);
      v58 = quasar::Decoder::reportResults(v236, a3, v195, v194);
      v148 = v230;
      if (v230)
      {
        v149 = (unint64_t *)&v230->__shared_owners_;
        do
          v150 = __ldaxr(v149);
        while (__stlxr(v150 - 1, v149));
        if (!v150)
        {
          ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
          std::__shared_weak_count::__release_weak(v148);
        }
      }
      v151 = v235;
      if (v235)
      {
        v152 = (unint64_t *)&v235->__shared_owners_;
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
        if (!v153)
        {
          ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
          std::__shared_weak_count::__release_weak(v151);
        }
      }
      v154 = v237;
      if (v237)
      {
        v155 = (unint64_t *)&v237->__shared_owners_;
        do
          v156 = __ldaxr(v155);
        while (__stlxr(v156 - 1, v155));
        if (!v156)
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
        }
      }
      v157 = v239;
      if (v239)
      {
        v158 = (unint64_t *)&v239->__shared_owners_;
        do
          v159 = __ldaxr(v158);
        while (__stlxr(v159 - 1, v158));
        if (!v159)
        {
          ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
          std::__shared_weak_count::__release_weak(v157);
        }
      }
      v160 = v241;
      if (v241)
      {
        v161 = (unint64_t *)&v241->__shared_owners_;
        do
          v162 = __ldaxr(v161);
        while (__stlxr(v162 - 1, v161));
        if (!v162)
        {
          ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
          std::__shared_weak_count::__release_weak(v160);
        }
      }
      *(_QWORD *)&__str = &v242;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (v245)
      {
        v246 = v245;
        operator delete(v245);
      }
      if (v248)
      {
        v249 = v248;
        operator delete(v248);
      }
      if (v251)
      {
        v252 = v251;
        operator delete(v251);
      }
      *(_QWORD *)&__str = &v254;
      std::vector<std::vector<kaldi::quasar::WordConf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>>>::~__hash_table((uint64_t)v257);
      *(_QWORD *)&__str = v259;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      *(_QWORD *)&__str = v260;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      *(_QWORD *)&__str = &v261;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      v264 = &unk_1E5D25580;
      v163 = v265;
      if (v265)
      {
        v164 = v265[14] - 1;
        v265[14] = v164;
        if (!v164)
          (*(void (**)(_DWORD *))(*(_QWORD *)v163 + 8))(v163);
      }
      v266 = &unk_1E5D25580;
      v165 = v267;
      if (v267)
      {
        v166 = v267[14] - 1;
        v267[14] = v166;
        if (!v166)
          (*(void (**)(_DWORD *))(*(_QWORD *)v165 + 8))(v165);
      }
      v268 = &unk_1E5D25580;
      v167 = v269;
      if (v269)
      {
        v168 = v269[14] - 1;
        v269[14] = v168;
        if (!v168)
          (*(void (**)(_DWORD *))(*(_QWORD *)v167 + 8))(v167);
      }
      v169 = v272;
      if (v272)
      {
        v170 = (unint64_t *)&v272->__shared_owners_;
        do
          v171 = __ldaxr(v170);
        while (__stlxr(v171 - 1, v170));
        if (!v171)
        {
          ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
          std::__shared_weak_count::__release_weak(v169);
        }
      }
      v172 = v274;
      if (v274)
      {
        v173 = (unint64_t *)&v274->__shared_owners_;
        do
          v174 = __ldaxr(v173);
        while (__stlxr(v174 - 1, v173));
        if (!v174)
        {
          ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
          std::__shared_weak_count::__release_weak(v172);
        }
      }
      v175 = v276;
      if (v276)
      {
        v176 = (unint64_t *)&v276->__shared_owners_;
        do
          v177 = __ldaxr(v176);
        while (__stlxr(v177 - 1, v176));
        if (!v177)
        {
          ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
          std::__shared_weak_count::__release_weak(v175);
        }
      }
      v178 = v278;
      if (v278)
      {
        v179 = (unint64_t *)&v278->__shared_owners_;
        do
          v180 = __ldaxr(v179);
        while (__stlxr(v180 - 1, v179));
        if (!v180)
        {
          ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
          std::__shared_weak_count::__release_weak(v178);
        }
      }
      v181 = v280;
      if (v280)
      {
        v182 = (unint64_t *)&v280->__shared_owners_;
        do
          v183 = __ldaxr(v182);
        while (__stlxr(v183 - 1, v182));
        if (!v183)
        {
          ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
          std::__shared_weak_count::__release_weak(v181);
        }
      }
      v184 = v282;
      if (v282)
      {
        v185 = (unint64_t *)&v282->__shared_owners_;
        do
          v186 = __ldaxr(v185);
        while (__stlxr(v186 - 1, v185));
        if (!v186)
        {
          ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
          std::__shared_weak_count::__release_weak(v184);
        }
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v283);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v285);
      std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table((uint64_t)v290);
      goto LABEL_252;
    }
    if (quasar::gLogLevel >= 4)
    {
      v212 = 0u;
      v213 = 0u;
      v210 = 0u;
      v211 = 0u;
      *(_OWORD *)v208 = 0u;
      v209 = 0u;
      *(_OWORD *)v206 = 0u;
      v207 = 0u;
      v204 = 0u;
      v205 = 0u;
      v202 = 0u;
      *(_OWORD *)v203 = 0u;
      *(_OWORD *)v200 = 0u;
      v201 = 0u;
      __str_16 = 0u;
      v199 = 0u;
      __str = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Empty aligned lattice. MBR decoding failed.", 43);
      goto LABEL_250;
    }
  }
  else if (quasar::gLogLevel >= 4)
  {
    v212 = 0u;
    v213 = 0u;
    v210 = 0u;
    v211 = 0u;
    *(_OWORD *)v208 = 0u;
    v209 = 0u;
    *(_OWORD *)v206 = 0u;
    v207 = 0u;
    v204 = 0u;
    v205 = 0u;
    v202 = 0u;
    *(_OWORD *)v203 = 0u;
    *(_OWORD *)v200 = 0u;
    v201 = 0u;
    __str_16 = 0u;
    v199 = 0u;
    __str = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"Word alignment for MBR decoding failed.", 39);
LABEL_250:
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__str);
  }
  v58 = 2;
LABEL_252:
  v189 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
  if (*((_QWORD *)&v292 + 1))
  {
    v190 = (unint64_t *)(*((_QWORD *)&v292 + 1) + 8);
    do
      v191 = __ldaxr(v190);
    while (__stlxr(v191 - 1, v190));
    if (!v191)
    {
      ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
      std::__shared_weak_count::__release_weak(v189);
    }
  }
  return v58;
}

void sub_1ADF67684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  _DWORD *v33;
  int v34;
  _DWORD *v35;
  int v36;
  _DWORD *v37;
  int v38;

  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a29);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x298]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2A8]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2B8]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2C8]);
  a29 = (uint64_t)&STACK[0x2D8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  v30 = (void *)STACK[0x2F0];
  if (STACK[0x2F0])
  {
    STACK[0x2F8] = (unint64_t)v30;
    operator delete(v30);
  }
  v31 = (void *)STACK[0x308];
  if (STACK[0x308])
  {
    STACK[0x310] = (unint64_t)v31;
    operator delete(v31);
  }
  v32 = (void *)STACK[0x320];
  if (STACK[0x320])
  {
    STACK[0x328] = (unint64_t)v32;
    operator delete(v32);
  }
  a29 = (uint64_t)&STACK[0x338];
  std::vector<std::vector<kaldi::quasar::WordConf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>>>::~__hash_table((uint64_t)&STACK[0x350]);
  a29 = (uint64_t)&STACK[0x380];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  a29 = (uint64_t)&STACK[0x398];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  a29 = (uint64_t)&STACK[0x3B0];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  STACK[0x3C8] = (unint64_t)&unk_1E5D25580;
  v33 = (_DWORD *)STACK[0x3D0];
  if (STACK[0x3D0])
  {
    v34 = v33[14] - 1;
    v33[14] = v34;
    if (!v34)
      (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
  }
  STACK[0x3D8] = (unint64_t)&unk_1E5D25580;
  v35 = (_DWORD *)STACK[0x3E0];
  if (STACK[0x3E0])
  {
    v36 = v35[14] - 1;
    v35[14] = v36;
    if (!v36)
      (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
  }
  STACK[0x3E8] = (unint64_t)&unk_1E5D25580;
  v37 = (_DWORD *)STACK[0x3F0];
  if (STACK[0x3F0])
  {
    v38 = v37[14] - 1;
    v37[14] = v38;
    if (!v38)
      (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 8))(v37);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x400]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x410]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x420]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x430]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x440]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x450]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&STACK[0x460]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&STACK[0x490]);
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table(v29 - 256);
  JUMPOUT(0x1ADF67AF4);
}

void sub_1ADF676A0()
{
  unint64_t v0;

  STACK[0x350] = v0;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x350]);
  JUMPOUT(0x1ADF679E0);
}

void sub_1ADF67744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  uint64_t v29;
  _DWORD *v30;
  int v31;
  void *v32;
  void *v33;
  void *v34;
  _DWORD *v35;
  int v36;
  _DWORD *v37;
  int v38;
  _DWORD *v39;
  int v40;

  STACK[0x270] = (unint64_t)&unk_1E5D25800;
  v30 = (_DWORD *)STACK[0x278];
  if (STACK[0x278])
  {
    v31 = v30[14] - 1;
    v30[14] = v31;
    if (!v31)
      (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
  }
  if (SLOBYTE(STACK[0x297]) < 0)
    operator delete((void *)STACK[0x280]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x298]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2A8]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2B8]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x2C8]);
  a29 = (void **)&STACK[0x2D8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a29);
  v32 = (void *)STACK[0x2F0];
  if (STACK[0x2F0])
  {
    STACK[0x2F8] = (unint64_t)v32;
    operator delete(v32);
  }
  v33 = (void *)STACK[0x308];
  if (STACK[0x308])
  {
    STACK[0x310] = (unint64_t)v33;
    operator delete(v33);
  }
  v34 = (void *)STACK[0x320];
  if (STACK[0x320])
  {
    STACK[0x328] = (unint64_t)v34;
    operator delete(v34);
  }
  a29 = (void **)&STACK[0x338];
  std::vector<std::vector<kaldi::quasar::WordConf>>::__destroy_vector::operator()[abi:ne180100](&a29);
  std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>>>::~__hash_table((uint64_t)&STACK[0x350]);
  a29 = (void **)&STACK[0x380];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a29);
  a29 = (void **)&STACK[0x398];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a29);
  a29 = (void **)&STACK[0x3B0];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a29);
  STACK[0x3C8] = (unint64_t)&unk_1E5D25580;
  v35 = (_DWORD *)STACK[0x3D0];
  if (STACK[0x3D0])
  {
    v36 = v35[14] - 1;
    v35[14] = v36;
    if (!v36)
      (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
  }
  STACK[0x3D8] = (unint64_t)&unk_1E5D25580;
  v37 = (_DWORD *)STACK[0x3E0];
  if (STACK[0x3E0])
  {
    v38 = v37[14] - 1;
    v37[14] = v38;
    if (!v38)
      (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 8))(v37);
  }
  STACK[0x3E8] = (unint64_t)&unk_1E5D25580;
  v39 = (_DWORD *)STACK[0x3F0];
  if (STACK[0x3F0])
  {
    v40 = v39[14] - 1;
    v39[14] = v40;
    if (!v40)
      (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 8))(v39);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x400]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x410]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x420]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x430]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x440]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x450]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&STACK[0x460]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&STACK[0x490]);
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table(v29 - 256);
  JUMPOUT(0x1ADF67AF4);
}

void sub_1ADF67794()
{
  JUMPOUT(0x1ADF67970);
}

void sub_1ADF6779C()
{
  JUMPOUT(0x1ADF67978);
}

void sub_1ADF677A4()
{
  JUMPOUT(0x1ADF67980);
}

void sub_1ADF677AC()
{
  JUMPOUT(0x1ADF67988);
}

void sub_1ADF677B4()
{
  JUMPOUT(0x1ADF67A44);
}

void sub_1ADF677BC()
{
  JUMPOUT(0x1ADF67A78);
}

void sub_1ADF677C8()
{
  JUMPOUT(0x1ADF67AACLL);
}

void sub_1ADF677D0()
{
  JUMPOUT(0x1ADF67AB4);
}

void sub_1ADF677D8()
{
  JUMPOUT(0x1ADF67ABCLL);
}

void sub_1ADF677E0()
{
  JUMPOUT(0x1ADF67AC4);
}

void sub_1ADF677E8()
{
  JUMPOUT(0x1ADF67ACCLL);
}

void sub_1ADF677F0()
{
  JUMPOUT(0x1ADF67AD4);
}

void sub_1ADF677F8()
{
  JUMPOUT(0x1ADF67ADCLL);
}

void sub_1ADF67804(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 - 208);
  _Unwind_Resume(a1);
}

void sub_1ADF67810()
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](&STACK[0x260]);
  JUMPOUT(0x1ADF67968);
}

void sub_1ADF67824()
{
  JUMPOUT(0x1ADF679E0);
}

void sub_1ADF6782C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a29);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x260]);
  JUMPOUT(0x1ADF67968);
}

void sub_1ADF67840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  void *v29;

  v29 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v29;
    operator delete(v29);
  }
  a29 = (uint64_t)&STACK[0x230];
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  a29 = (uint64_t)&STACK[0x248];
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  JUMPOUT(0x1ADF67960);
}

void sub_1ADF678A0()
{
  unint64_t v0;

  STACK[0x238] = v0;
  JUMPOUT(0x1ADF678D0);
}

void sub_1ADF678AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,unint64_t *a29)
{
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  _DWORD *v33;
  int v34;
  _DWORD *v35;
  int v36;
  _DWORD *v37;
  int v38;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](&STACK[0x298]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](&STACK[0x2A8]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](&STACK[0x2B8]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](&STACK[0x2C8]);
  a29 = &STACK[0x2D8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a29);
  v30 = (void *)STACK[0x2F0];
  if (STACK[0x2F0])
  {
    STACK[0x2F8] = (unint64_t)v30;
    operator delete(v30);
  }
  v31 = (void *)STACK[0x308];
  if (STACK[0x308])
  {
    STACK[0x310] = (unint64_t)v31;
    operator delete(v31);
  }
  v32 = (void *)STACK[0x320];
  if (STACK[0x320])
  {
    STACK[0x328] = (unint64_t)v32;
    operator delete(v32);
  }
  a29 = &STACK[0x338];
  std::vector<std::vector<kaldi::quasar::WordConf>>::__destroy_vector::operator()[abi:ne180100](&a29);
  std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>>>::~__hash_table(&STACK[0x350]);
  a29 = &STACK[0x380];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a29);
  a29 = &STACK[0x398];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a29);
  a29 = &STACK[0x3B0];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a29);
  STACK[0x3C8] = (unint64_t)&unk_1E5D25580;
  v33 = (_DWORD *)STACK[0x3D0];
  if (STACK[0x3D0])
  {
    v34 = v33[14] - 1;
    v33[14] = v34;
    if (!v34)
      (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
  }
  STACK[0x3D8] = (unint64_t)&unk_1E5D25580;
  v35 = (_DWORD *)STACK[0x3E0];
  if (STACK[0x3E0])
  {
    v36 = v35[14] - 1;
    v35[14] = v36;
    if (!v36)
      (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
  }
  STACK[0x3E8] = (unint64_t)&unk_1E5D25580;
  v37 = (_DWORD *)STACK[0x3F0];
  if (STACK[0x3F0])
  {
    v38 = v37[14] - 1;
    v37[14] = v38;
    if (!v38)
      (*(void (**)(_DWORD *))(*(_QWORD *)v37 + 8))(v37);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](&STACK[0x400]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](&STACK[0x410]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](&STACK[0x420]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](&STACK[0x430]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](&STACK[0x440]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](&STACK[0x450]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(&STACK[0x460]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(&STACK[0x490]);
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table(v29 - 256);
  JUMPOUT(0x1ADF67AF4);
}

void sub_1ADF678B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,unint64_t *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  _DWORD *v38;
  int v39;
  _DWORD *v40;
  int v41;
  _DWORD *v42;
  int v43;

  if (a34 < 0)
    JUMPOUT(0x1ADF678C4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](&STACK[0x298]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](&STACK[0x2A8]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](&STACK[0x2B8]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](&STACK[0x2C8]);
  a29 = &STACK[0x2D8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a29);
  v35 = (void *)STACK[0x2F0];
  if (STACK[0x2F0])
  {
    STACK[0x2F8] = (unint64_t)v35;
    operator delete(v35);
  }
  v36 = (void *)STACK[0x308];
  if (STACK[0x308])
  {
    STACK[0x310] = (unint64_t)v36;
    operator delete(v36);
  }
  v37 = (void *)STACK[0x320];
  if (STACK[0x320])
  {
    STACK[0x328] = (unint64_t)v37;
    operator delete(v37);
  }
  a29 = &STACK[0x338];
  std::vector<std::vector<kaldi::quasar::WordConf>>::__destroy_vector::operator()[abi:ne180100](&a29);
  std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>>>::~__hash_table(&STACK[0x350]);
  a29 = &STACK[0x380];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a29);
  a29 = &STACK[0x398];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a29);
  a29 = &STACK[0x3B0];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a29);
  STACK[0x3C8] = (unint64_t)&unk_1E5D25580;
  v38 = (_DWORD *)STACK[0x3D0];
  if (STACK[0x3D0])
  {
    v39 = v38[14] - 1;
    v38[14] = v39;
    if (!v39)
      (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 8))(v38);
  }
  STACK[0x3D8] = (unint64_t)&unk_1E5D25580;
  v40 = (_DWORD *)STACK[0x3E0];
  if (STACK[0x3E0])
  {
    v41 = v40[14] - 1;
    v40[14] = v41;
    if (!v41)
      (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
  }
  STACK[0x3E8] = (unint64_t)&unk_1E5D25580;
  v42 = (_DWORD *)STACK[0x3F0];
  if (STACK[0x3F0])
  {
    v43 = v42[14] - 1;
    v42[14] = v43;
    if (!v43)
      (*(void (**)(_DWORD *))(*(_QWORD *)v42 + 8))(v42);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](&STACK[0x400]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](&STACK[0x410]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](&STACK[0x420]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](&STACK[0x430]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](&STACK[0x440]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](&STACK[0x450]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(&STACK[0x460]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(&STACK[0x490]);
  std::__hash_table<std::__hash_value_type<int,std::string>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::string>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::string>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::string>>>::~__hash_table(v34 - 256);
  JUMPOUT(0x1ADF67AF4);
}

void sub_1ADF678DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void **a29)
{
  void *v29;

  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  v29 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v29;
    operator delete(v29);
  }
  a29 = (void **)&STACK[0x230];
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a29);
  a29 = (void **)&STACK[0x248];
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a29);
  JUMPOUT(0x1ADF67960);
}

uint64_t quasar::OnlineLatticeConfidenceDecoder::supportsEager(quasar::OnlineLatticeConfidenceDecoder *this)
{
  return 1;
}

void quasar::OnlineLatticeConfidenceDecoder::~OnlineLatticeConfidenceDecoder(void **this)
{
  quasar::OnlineLatticeConfidenceDecoder::~OnlineLatticeConfidenceDecoder(this);
  JUMPOUT(0x1AF44D190);
}

{
  *this = &off_1E5D3A970;
  if (*((char *)this + 711) < 0)
    operator delete(this[86]);
  if (*((char *)this + 687) < 0)
    operator delete(this[83]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 79));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 77));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 75));
  if (*((char *)this + 599) < 0)
    operator delete(this[72]);
  if (*((char *)this + 575) < 0)
    operator delete(this[69]);
  if (*((char *)this + 551) < 0)
    operator delete(this[66]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 60));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 56));
  quasar::Decoder::~Decoder(this);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::WordConf,std::allocator<kaldi::quasar::WordConf>,std::string &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x120uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::WordConf>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<kaldi::quasar::WordConf>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADF67C1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::WordConf>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<kaldi::quasar::WordConf>,0>(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E5D42288;
  a1[1] = 0;
  std::allocator<kaldi::quasar::WordConf>::construct[abi:ne180100]<kaldi::quasar::WordConf,std::string &>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADF67C7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::WordConf>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42288;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::WordConf>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42288;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<kaldi::quasar::WordConf>::__on_zero_shared(uint64_t a1)
{
  kaldi::quasar::WordConf::~WordConf((kaldi::quasar::WordConf *)(a1 + 24));
}

void std::allocator<kaldi::quasar::WordConf>::construct[abi:ne180100]<kaldi::quasar::WordConf,std::string &>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string __p;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  kaldi::quasar::WordConf::WordConf(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1ADF67D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::SymbolTable,std::allocator<fst::SymbolTable>,char const(&)[15],void>@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  result = std::__shared_ptr_emplace<fst::SymbolTable>::__shared_ptr_emplace[abi:ne180100]<char const(&)[15],std::allocator<fst::SymbolTable>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADF67DAC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::SymbolTable>::__shared_ptr_emplace[abi:ne180100]<char const(&)[15],std::allocator<fst::SymbolTable>,0>(_QWORD *a1, char *__s)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E5D40EA0;
  a1[1] = 0;
  std::allocator<fst::SymbolTable>::construct[abi:ne180100]<fst::SymbolTable,char const(&)[15]>((int)&v4, a1 + 3, __s);
  return a1;
}

void sub_1ADF67E0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<fst::SymbolTable>::construct[abi:ne180100]<fst::SymbolTable,char const(&)[15]>(int a1, _QWORD *a2, char *__s)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  fst::SymbolTable::SymbolTable(a2, (__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1ADF67E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_1ADF680F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ScoreTuple>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x38uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,kaldi::quasar::ScoreTuple>::pair[abi:ne180100]<std::string const&>((std::string *)(v8 + 16), *a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1ADF68184(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,kaldi::quasar::ScoreTuple>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = 0;
  return this;
}

uint64_t *std::__hash_table<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return i;
}

void sub_1ADF68448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_map<int,kaldi::quasar::ScoreTuple>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *,false>(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  unint64_t v19;
  char v20;
  BOOL v21;
  float v22;
  float v23;
  unint64_t v24;
  unint64_t v25;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = a2 - v9;
    v13 = (uint64_t)(a2 - v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v22 = *(float *)(a2 - 16);
        v23 = *(float *)v9;
        if (v22 < *(float *)v9)
        {
          v24 = *(_QWORD *)(v9 + 8);
          v25 = *(_QWORD *)(a2 - 8);
LABEL_34:
          *(float *)v9 = v22;
          *(float *)(a2 - 16) = v23;
          *(_QWORD *)(v9 + 8) = v25;
          *(_QWORD *)(a2 - 8) = v24;
          return result;
        }
        if (v23 >= v22)
        {
          v25 = *(_QWORD *)(a2 - 8);
          v24 = *(_QWORD *)(v9 + 8);
          if (v25 < v24)
            goto LABEL_34;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(v9, v9 + 16, a2 - 16);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(v9, v9 + 16, v9 + 32, a2 - 16);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(v9, v9 + 16, v9 + 32, v9 + 48, a2 - 16);
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            return std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(v9, a2);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = v9 + 16 * (v13 >> 1);
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(v9 + 16 * (v13 >> 1), v9, a2 - 16);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(v9, v9 + 16 * (v13 >> 1), a2 - 16);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(v9 + 16, v15 - 16, a2 - 32);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(v9 + 32, v9 + 16 + 16 * v14, a2 - 48);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(v15 - 16, v15, v9 + 16 + 16 * v14);
            v16 = *(float *)v9;
            *(_DWORD *)v9 = *(_DWORD *)v15;
            *(float *)v15 = v16;
            v17 = *(_QWORD *)(v9 + 8);
            *(_QWORD *)(v9 + 8) = *(_QWORD *)(v15 + 8);
            *(_QWORD *)(v15 + 8) = v17;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v18 = *(float *)(v9 - 16);
          if (v18 >= *(float *)v9 && (*(float *)v9 < v18 || *(_QWORD *)(v9 - 8) >= *(_QWORD *)(v9 + 8)))
          {
            result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<float,unsigned long> *,std::__less<void,void> &>(v9, a2);
            v9 = result;
            goto LABEL_19;
          }
LABEL_14:
          v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<float,unsigned long> *,std::__less<void,void> &>(v9, a2);
          if ((v20 & 1) == 0)
            goto LABEL_17;
          v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(v9, v19);
          v9 = v19 + 16;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(v19 + 16, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v21)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *,false>(v8, v19, a3, -v11, a5 & 1);
            v9 = v19 + 16;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v19;
          if (v21)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *,std::pair<float,unsigned long> *>(v9, a2, a2, a3);
        return result;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  unint64_t v13;
  uint64_t v14;

  if (result == a2)
    return result;
  v2 = result + 16;
  if (result + 16 == a2)
    return result;
  v3 = 0;
  v4 = result;
  do
  {
    v5 = v4;
    v4 = v2;
    v6 = *(float *)(v5 + 16);
    v7 = *(float *)v5;
    if (v6 >= *(float *)v5)
    {
      if (v7 < v6)
        goto LABEL_19;
      v8 = *(_QWORD *)(v5 + 24);
      v9 = *(_QWORD *)(v5 + 8);
      if (v8 >= v9)
        goto LABEL_19;
    }
    else
    {
      v8 = *(_QWORD *)(v5 + 24);
      v9 = *(_QWORD *)(v5 + 8);
    }
    *(float *)(v5 + 16) = v7;
    *(_QWORD *)(v4 + 8) = v9;
    v10 = result;
    if (v5 == result)
      goto LABEL_18;
    v11 = v3;
    while (1)
    {
      v12 = *(float *)(result + v11 - 16);
      if (v6 >= v12)
        break;
      v13 = *(_QWORD *)(result + v11 - 8);
LABEL_12:
      v5 -= 16;
      v14 = result + v11;
      *(float *)v14 = v12;
      *(_QWORD *)(v14 + 8) = v13;
      v11 -= 16;
      if (!v11)
      {
        v10 = result;
        goto LABEL_18;
      }
    }
    if (v12 >= v6)
    {
      v10 = result + v11;
      v13 = *(_QWORD *)(result + v11 - 8);
      if (v8 >= v13)
        goto LABEL_18;
      goto LABEL_12;
    }
    v10 = v5;
LABEL_18:
    *(float *)v10 = v6;
    *(_QWORD *)(v10 + 8) = v8;
LABEL_19:
    v2 = v4 + 16;
    v3 += 16;
  }
  while (v4 + 16 != a2);
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  float v5;
  float v6;
  unint64_t v7;
  uint64_t j;

  if (result != a2)
  {
    v2 = result + 16;
    if (result + 16 != a2)
    {
      for (i = result + 8; ; i += 16)
      {
        v4 = result;
        result = v2;
        v5 = *(float *)(v4 + 16);
        v6 = *(float *)v4;
        if (v5 < *(float *)v4)
          break;
        if (v6 >= v5)
        {
          v7 = *(_QWORD *)(v4 + 24);
          if (v7 < *(_QWORD *)(v4 + 8))
            goto LABEL_6;
        }
LABEL_14:
        v2 = result + 16;
        if (result + 16 == a2)
          return result;
      }
      v7 = *(_QWORD *)(v4 + 24);
LABEL_6:
      for (j = i; ; j -= 16)
      {
        *(float *)(j + 8) = v6;
        *(_QWORD *)(j + 16) = *(_QWORD *)j;
        v6 = *(float *)(j - 24);
        if (v5 >= v6 && (v6 < v5 || v7 >= *(_QWORD *)(j - 16)))
          break;
      }
      *(float *)(j - 8) = v5;
      *(_QWORD *)j = v7;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v3;
  float v4;
  float v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  float v9;
  unint64_t v10;
  unint64_t v11;
  float v12;
  float v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  float v18;
  unint64_t v19;

  v3 = *(float *)a2;
  v4 = *(float *)a1;
  if (*(float *)a2 >= *(float *)a1 && (v4 < v3 || *(_QWORD *)(a2 + 8) >= *(_QWORD *)(a1 + 8)))
  {
    v9 = *(float *)a3;
    if (*(float *)a3 >= v3)
    {
      if (v3 < v9)
        return 0;
      v11 = *(_QWORD *)(a3 + 8);
      v10 = *(_QWORD *)(a2 + 8);
      if (v11 >= v10)
        return 0;
    }
    else
    {
      v10 = *(_QWORD *)(a2 + 8);
      v11 = *(_QWORD *)(a3 + 8);
    }
    *(float *)a2 = v9;
    *(float *)a3 = v3;
    *(_QWORD *)(a2 + 8) = v11;
    *(_QWORD *)(a3 + 8) = v10;
    v12 = *(float *)a2;
    v13 = *(float *)a1;
    if (*(float *)a2 >= *(float *)a1)
    {
      if (v13 < v12)
        return 1;
      v15 = *(_QWORD *)(a2 + 8);
      v14 = *(_QWORD *)(a1 + 8);
      if (v15 >= v14)
        return 1;
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 8);
      v15 = *(_QWORD *)(a2 + 8);
    }
    *(float *)a1 = v12;
    *(float *)a2 = v13;
    *(_QWORD *)(a1 + 8) = v15;
    result = 2;
    *(_QWORD *)(a2 + 8) = v14;
  }
  else
  {
    v5 = *(float *)a3;
    if (*(float *)a3 < v3)
    {
      v6 = *(_QWORD *)(a3 + 8);
LABEL_6:
      *(float *)a1 = v5;
      *(float *)a3 = v4;
      v7 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a3 + 8) = v7;
      return 1;
    }
    if (v3 >= v5)
    {
      v6 = *(_QWORD *)(a3 + 8);
      v16 = *(_QWORD *)(a2 + 8);
      if (v6 < v16)
        goto LABEL_6;
    }
    else
    {
      v16 = *(_QWORD *)(a2 + 8);
    }
    *(float *)a1 = v3;
    *(float *)a2 = v4;
    v17 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v16;
    *(_QWORD *)(a2 + 8) = v17;
    v18 = *(float *)a3;
    if (*(float *)a3 >= v4)
    {
      if (v4 < v18)
        return 1;
      v19 = *(_QWORD *)(a3 + 8);
      if (v19 >= v17)
        return 1;
    }
    else
    {
      v19 = *(_QWORD *)(a3 + 8);
    }
    *(float *)a2 = v18;
    *(float *)a3 = v4;
    *(_QWORD *)(a2 + 8) = v19;
    result = 2;
    *(_QWORD *)(a3 + 8) = v17;
  }
  return result;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<float,unsigned long> *,std::__less<void,void> &>(unint64_t a1, unint64_t a2)
{
  float v2;
  unint64_t v3;
  float v4;
  unint64_t i;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  float v13;
  float v14;

  v2 = *(float *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(float *)(a2 - 16);
  if (*(float *)a1 >= v4 && (v4 < v2 || v3 >= *(_QWORD *)(a2 - 8)))
  {
    for (i = a1 + 16; i < a2 && v2 >= *(float *)i && (*(float *)i < v2 || v3 >= *(_QWORD *)(i + 8)); i += 16)
      ;
  }
  else
  {
    i = a1;
    do
    {
      v6 = *(float *)(i + 16);
      i += 16;
      v7 = v6;
    }
    while (v2 >= v6 && (v7 < v2 || v3 >= *(_QWORD *)(i + 8)));
  }
  if (i < a2)
  {
    for (a2 -= 16; v2 < v4 || v4 >= v2 && v3 < *(_QWORD *)(a2 + 8); a2 -= 16)
    {
      v8 = *(float *)(a2 - 16);
      v4 = v8;
    }
  }
  if (i < a2)
  {
    v9 = *(float *)i;
    v10 = *(float *)a2;
    do
    {
      *(float *)i = v10;
      *(float *)a2 = v9;
      v11 = *(float *)(i + 16);
      i += 16;
      v9 = v11;
      v12 = *(_QWORD *)(i - 8);
      *(_QWORD *)(i - 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v12;
      while (v2 >= v9 && (v9 < v2 || v3 >= *(_QWORD *)(i + 8)))
      {
        v13 = *(float *)(i + 16);
        i += 16;
        v9 = v13;
      }
      do
      {
        do
        {
          v14 = *(float *)(a2 - 16);
          a2 -= 16;
          v10 = v14;
        }
        while (v2 < v14);
      }
      while (v10 >= v2 && v3 < *(_QWORD *)(a2 + 8));
    }
    while (i < a2);
  }
  if (i - 16 != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(i - 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(i - 8);
  }
  *(float *)(i - 16) = v2;
  *(_QWORD *)(i - 8) = v3;
  return i;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<float,unsigned long> *,std::__less<void,void> &>(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  float v3;
  unint64_t v4;
  float v5;
  unint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  float v17;

  v2 = 0;
  v3 = *(float *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  while (1)
  {
    v5 = *(float *)(a1 + v2 + 16);
    if (v5 >= v3 && (v3 < v5 || *(_QWORD *)(a1 + v2 + 24) >= v4))
      break;
    v2 += 16;
  }
  v6 = a1 + v2 + 16;
  if (v2)
  {
    do
    {
      v7 = *(float *)(a2 - 16);
      a2 -= 16;
      v8 = v7;
    }
    while (v7 >= v3 && (v3 < v8 || *(_QWORD *)(a2 + 8) >= v4));
  }
  else
  {
LABEL_19:
    if (v6 < a2)
    {
      do
      {
        v9 = *(float *)(a2 - 16);
        a2 -= 16;
        v10 = v9;
        if (v9 < v3)
          break;
        if (v3 < v10)
          goto LABEL_19;
      }
      while (*(_QWORD *)(a2 + 8) >= v4 && v6 < a2);
    }
  }
  if (v6 >= a2)
  {
    v13 = a1 + v2 + 16;
  }
  else
  {
    v12 = *(float *)a2;
    v13 = a1 + v2 + 16;
    v14 = a2;
    do
    {
      *(float *)v13 = v12;
      *(float *)v14 = v5;
      v15 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
      *(_QWORD *)(v14 + 8) = v15;
      do
      {
        do
        {
          v16 = *(float *)(v13 + 16);
          v13 += 16;
          v5 = v16;
        }
        while (v16 < v3);
      }
      while (v3 >= v5 && *(_QWORD *)(v13 + 8) < v4);
      do
      {
        v17 = *(float *)(v14 - 16);
        v14 -= 16;
        v12 = v17;
      }
      while (v17 >= v3 && (v3 < v12 || *(_QWORD *)(v14 + 8) >= v4));
    }
    while (v13 < v14);
  }
  if (v13 - 16 != a1)
  {
    *(_DWORD *)a1 = *(_DWORD *)(v13 - 16);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v13 - 8);
  }
  *(float *)(v13 - 16) = v3;
  *(_QWORD *)(v13 - 8) = v4;
  return v13 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  float v14;
  float v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  unint64_t v22;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(float *)(a2 - 16);
      v7 = *(float *)a1;
      if (v6 < *(float *)a1)
      {
        v8 = *(_QWORD *)(a1 + 8);
        v9 = *(_QWORD *)(a2 - 8);
LABEL_30:
        *(float *)a1 = v6;
        *(float *)(a2 - 16) = v7;
        *(_QWORD *)(a1 + 8) = v9;
        *(_QWORD *)(a2 - 8) = v8;
        return result;
      }
      if (v7 >= v6)
      {
        v9 = *(_QWORD *)(a2 - 8);
        v8 = *(_QWORD *)(a1 + 8);
        if (v9 < v8)
          goto LABEL_30;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(a1, a1 + 16, a1 + 32, a1 + 48, a2 - 16);
      return 1;
    default:
      v10 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(a1, a1 + 16, a1 + 32);
      v11 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
LABEL_6:
  v14 = *(float *)v11;
  v15 = *(float *)v10;
  if (*(float *)v11 >= *(float *)v10)
  {
    if (v15 < v14)
      goto LABEL_21;
    v16 = *(_QWORD *)(v11 + 8);
    v17 = *(_QWORD *)(v10 + 8);
    if (v16 >= v17)
      goto LABEL_21;
  }
  else
  {
    v16 = *(_QWORD *)(v11 + 8);
    v17 = *(_QWORD *)(v10 + 8);
  }
  *(float *)v11 = v15;
  *(_QWORD *)(v11 + 8) = v17;
  v18 = a1;
  if (v10 == a1)
    goto LABEL_20;
  v19 = v12;
  while (1)
  {
    v20 = a1 + v19;
    v21 = *(float *)(a1 + v19 + 16);
    if (v14 >= v21)
    {
      if (v21 < v14)
      {
        v18 = v10;
        goto LABEL_20;
      }
      v22 = *(_QWORD *)(a1 + v19 + 24);
      if (v16 >= v22)
      {
        v18 = a1 + v19 + 32;
LABEL_20:
        *(float *)v18 = v14;
        *(_QWORD *)(v18 + 8) = v16;
        if (++v13 == 8)
          return v11 + 16 == a2;
LABEL_21:
        v10 = v11;
        v12 += 16;
        v11 += 16;
        if (v11 == a2)
          return 1;
        goto LABEL_6;
      }
    }
    else
    {
      v22 = *(_QWORD *)(v20 + 24);
    }
    v10 -= 16;
    *(float *)(v20 + 32) = v21;
    *(_QWORD *)(a1 + v19 + 40) = v22;
    v19 -= 16;
    if (v19 == -32)
    {
      v18 = a1;
      goto LABEL_20;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  float v9;
  float v10;
  unint64_t v11;
  unint64_t v12;
  float v13;
  float v14;
  unint64_t v15;
  unint64_t v16;
  float v17;
  float v18;
  unint64_t v19;
  unint64_t v20;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(a1, a2, a3);
  v9 = *(float *)a4;
  v10 = *(float *)a3;
  if (*(float *)a4 >= *(float *)a3)
  {
    if (v10 < v9)
      return result;
    v12 = *(_QWORD *)(a4 + 8);
    v11 = *(_QWORD *)(a3 + 8);
    if (v12 >= v11)
      return result;
  }
  else
  {
    v11 = *(_QWORD *)(a3 + 8);
    v12 = *(_QWORD *)(a4 + 8);
  }
  *(float *)a3 = v9;
  *(float *)a4 = v10;
  *(_QWORD *)(a3 + 8) = v12;
  *(_QWORD *)(a4 + 8) = v11;
  v13 = *(float *)a3;
  v14 = *(float *)a2;
  if (*(float *)a3 >= *(float *)a2)
  {
    if (v14 < v13)
      return result;
    v16 = *(_QWORD *)(a3 + 8);
    v15 = *(_QWORD *)(a2 + 8);
    if (v16 >= v15)
      return result;
  }
  else
  {
    v15 = *(_QWORD *)(a2 + 8);
    v16 = *(_QWORD *)(a3 + 8);
  }
  *(float *)a2 = v13;
  *(float *)a3 = v14;
  *(_QWORD *)(a2 + 8) = v16;
  *(_QWORD *)(a3 + 8) = v15;
  v17 = *(float *)a2;
  v18 = *(float *)a1;
  if (*(float *)a2 < *(float *)a1)
  {
    v19 = *(_QWORD *)(a1 + 8);
    v20 = *(_QWORD *)(a2 + 8);
LABEL_15:
    *(float *)a1 = v17;
    *(float *)a2 = v18;
    *(_QWORD *)(a1 + 8) = v20;
    *(_QWORD *)(a2 + 8) = v19;
    return result;
  }
  if (v18 >= v17)
  {
    v20 = *(_QWORD *)(a2 + 8);
    v19 = *(_QWORD *)(a1 + 8);
    if (v20 < v19)
      goto LABEL_15;
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  float v11;
  float v12;
  unint64_t v13;
  unint64_t v14;
  float v15;
  float v16;
  unint64_t v17;
  unint64_t v18;
  float v19;
  float v20;
  unint64_t v21;
  unint64_t v22;
  float v23;
  float v24;
  unint64_t v25;
  unint64_t v26;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(a1, a2, a3, a4);
  v11 = *(float *)a5;
  v12 = *(float *)a4;
  if (*(float *)a5 >= *(float *)a4)
  {
    if (v12 < v11)
      return result;
    v14 = *(_QWORD *)(a5 + 8);
    v13 = *(_QWORD *)(a4 + 8);
    if (v14 >= v13)
      return result;
  }
  else
  {
    v13 = *(_QWORD *)(a4 + 8);
    v14 = *(_QWORD *)(a5 + 8);
  }
  *(float *)a4 = v11;
  *(float *)a5 = v12;
  *(_QWORD *)(a4 + 8) = v14;
  *(_QWORD *)(a5 + 8) = v13;
  v15 = *(float *)a4;
  v16 = *(float *)a3;
  if (*(float *)a4 >= *(float *)a3)
  {
    if (v16 < v15)
      return result;
    v18 = *(_QWORD *)(a4 + 8);
    v17 = *(_QWORD *)(a3 + 8);
    if (v18 >= v17)
      return result;
  }
  else
  {
    v17 = *(_QWORD *)(a3 + 8);
    v18 = *(_QWORD *)(a4 + 8);
  }
  *(float *)a3 = v15;
  *(float *)a4 = v16;
  *(_QWORD *)(a3 + 8) = v18;
  *(_QWORD *)(a4 + 8) = v17;
  v19 = *(float *)a3;
  v20 = *(float *)a2;
  if (*(float *)a3 >= *(float *)a2)
  {
    if (v20 < v19)
      return result;
    v22 = *(_QWORD *)(a3 + 8);
    v21 = *(_QWORD *)(a2 + 8);
    if (v22 >= v21)
      return result;
  }
  else
  {
    v21 = *(_QWORD *)(a2 + 8);
    v22 = *(_QWORD *)(a3 + 8);
  }
  *(float *)a2 = v19;
  *(float *)a3 = v20;
  *(_QWORD *)(a2 + 8) = v22;
  *(_QWORD *)(a3 + 8) = v21;
  v23 = *(float *)a2;
  v24 = *(float *)a1;
  if (*(float *)a2 < *(float *)a1)
  {
    v25 = *(_QWORD *)(a1 + 8);
    v26 = *(_QWORD *)(a2 + 8);
LABEL_9:
    *(float *)a1 = v23;
    *(float *)a2 = v24;
    *(_QWORD *)(a1 + 8) = v26;
    *(_QWORD *)(a2 + 8) = v25;
    return result;
  }
  if (v24 >= v23)
  {
    v26 = *(_QWORD *)(a2 + 8);
    v25 = *(_QWORD *)(a1 + 8);
    if (v26 < v25)
      goto LABEL_9;
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *,std::pair<float,unsigned long> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 4;
    if (a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = a1 + 16 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(a1, a4, v9, v12);
        v12 -= 16;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      while (1)
      {
        v15 = *(float *)v14;
        v16 = *(float *)a1;
        if (*(float *)v14 >= *(float *)a1)
        {
          if (v16 < v15)
            goto LABEL_12;
          v17 = *(_QWORD *)(v14 + 8);
          v18 = *(_QWORD *)(a1 + 8);
          if (v17 >= v18)
            goto LABEL_12;
        }
        else
        {
          v17 = *(_QWORD *)(v14 + 8);
          v18 = *(_QWORD *)(a1 + 8);
        }
        *(float *)v14 = v16;
        *(float *)a1 = v15;
        *(_QWORD *)(v14 + 8) = v18;
        *(_QWORD *)(a1 + 8) = v17;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(a1, a4, v9, a1);
LABEL_12:
        v14 += 16;
        if (v14 == a3)
        {
          v13 = a3;
          break;
        }
      }
    }
    if (v8 >= 17)
    {
      v19 = (unint64_t)v8 >> 4;
      v20 = a2 - 16;
      do
      {
        v21 = *(float *)a1;
        v22 = *(_QWORD *)(a1 + 8);
        std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(a1, a4, v19);
        if (v20 == v23)
        {
          *(float *)v23 = v21;
          *(_QWORD *)(v23 + 8) = v22;
        }
        else
        {
          *(_DWORD *)v23 = *(_DWORD *)v20;
          *(_QWORD *)(v23 + 8) = *(_QWORD *)(v20 + 8);
          *(float *)v20 = v21;
          *(_QWORD *)(v20 + 8) = v22;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(a1, v23 + 16, a4, (v23 + 16 - a1) >> 4);
        }
        v20 -= 16;
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  unint64_t v20;

  if (a3 >= 2)
  {
    v4 = a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= (a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = result + 16 * v7;
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = *(float *)(v8 + 16);
        if (*(float *)v8 < v10 || v10 >= *(float *)v8 && *(_QWORD *)(result + 16 * v7 + 8) < *(_QWORD *)(v8 + 24))
        {
          v8 += 16;
          v7 = v9;
        }
      }
      v11 = *(float *)v8;
      v12 = *(float *)a4;
      if (*(float *)v8 >= *(float *)a4)
      {
        if (v12 >= v11)
        {
          v14 = *(_QWORD *)(v8 + 8);
          v13 = *(_QWORD *)(a4 + 8);
          if (v14 < v13)
            return result;
        }
        else
        {
          v13 = *(_QWORD *)(a4 + 8);
          v14 = *(_QWORD *)(v8 + 8);
        }
        *(float *)a4 = v11;
        *(_QWORD *)(a4 + 8) = v14;
        if (v5 >= v7)
        {
          while (1)
          {
            v16 = 2 * v7;
            v7 = (2 * v7) | 1;
            v15 = result + 16 * v7;
            v17 = v16 + 2;
            if (v17 < a3)
            {
              v18 = *(float *)(v15 + 16);
              if (*(float *)v15 < v18
                || v18 >= *(float *)v15 && *(_QWORD *)(result + 16 * v7 + 8) < *(_QWORD *)(v15 + 24))
              {
                v15 += 16;
                v7 = v17;
              }
            }
            v19 = *(float *)v15;
            if (*(float *)v15 < v12)
              break;
            v20 = *(_QWORD *)(v15 + 8);
            if (v12 >= v19 && v20 < v13)
              break;
            *(float *)v8 = v19;
            *(_QWORD *)(v8 + 8) = v20;
            v8 = v15;
            if (v5 < v7)
              goto LABEL_14;
          }
        }
        v15 = v8;
LABEL_14:
        *(float *)v15 = v12;
        *(_QWORD *)(v15 + 8) = v13;
      }
    }
  }
  return result;
}

float std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float result;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = a1;
    v7 = v3 + 1;
    a1 += 16 * (v3 + 1);
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3)
    {
      v10 = *(float *)(a1 + 16);
      if (*(float *)a1 < v10 || v10 >= *(float *)a1 && *(_QWORD *)(v6 + 16 * v7 + 8) < *(_QWORD *)(a1 + 24))
      {
        a1 += 16;
        v3 = v9;
      }
    }
    result = *(float *)a1;
    *(_DWORD *)v6 = *(_DWORD *)a1;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(a1 + 8);
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,unsigned long> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  float v13;
  unint64_t v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = result + 16 * (v4 >> 1);
    v7 = *(float *)v6;
    v8 = *(float *)(a2 - 16);
    if (*(float *)v6 >= v8)
    {
      if (v8 < v7)
        return result;
      v10 = *(_QWORD *)(result + 16 * v5 + 8);
      v9 = *(_QWORD *)(a2 - 8);
      if (v10 >= v9)
        return result;
    }
    else
    {
      v9 = *(_QWORD *)(a2 - 8);
      v10 = *(_QWORD *)(v6 + 8);
    }
    *(float *)(a2 - 16) = v7;
    *(_QWORD *)(a2 - 8) = v10;
    if (v4 >= 2)
    {
      while (1)
      {
        v12 = v5 - 1;
        v5 = (v5 - 1) >> 1;
        v11 = result + 16 * v5;
        v13 = *(float *)v11;
        if (*(float *)v11 >= v8)
        {
          if (v8 < v13)
            break;
          v14 = *(_QWORD *)(result + 16 * v5 + 8);
          if (v14 >= v9)
            break;
        }
        else
        {
          v14 = *(_QWORD *)(v11 + 8);
        }
        *(float *)v6 = v13;
        *(_QWORD *)(v6 + 8) = v14;
        v6 = result + 16 * v5;
        if (v12 <= 1)
          goto LABEL_13;
      }
    }
    v11 = v6;
LABEL_13:
    *(float *)v11 = v8;
    *(_QWORD *)(v11 + 8) = v9;
  }
  return result;
}

_QWORD *BM_malloc(size_t a1)
{
  void ***v2;
  void **v3;
  void ***v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _DWORD *v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *result;
  unint64_t v13;
  size_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  size_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;

  v2 = (void ***)mallocListTLS();
  v3 = *v2;
  if (!*v2)
  {
    v4 = v2;
    v3 = (void **)operator new();
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    *v4 = v3;
  }
  v5 = (_QWORD *)freeListsTLS();
  v6 = (_QWORD *)*v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = malloc_type_calloc(0x10uLL, 8uLL, 0x2004093837F09uLL);
    *v7 = v6;
  }
  v8 = (_QWORD *)allocCountsTLS();
  v9 = (_DWORD *)*v8;
  if (!*v8)
  {
    v10 = v8;
    v9 = malloc_type_calloc(0x10uLL, 4uLL, 0x100004052888210uLL);
    *v10 = v9;
  }
  v11 = a1 - 1;
  if (a1 - 1 >= 0x78)
    return malloc_type_malloc(a1, 0x99638375uLL);
  v13 = (v11 >> 3) + 1;
  result = (_QWORD *)v6[v13];
  if (!result)
  {
    v14 = 0x100000 - 8 * (0x20000 % v13);
    result = malloc_type_malloc(v14, 0xA6B1BAA0uLL);
    if (!result)
      return result;
    v15 = result;
    v16 = (unint64_t)v3[2];
    v17 = v3[1];
    if ((unint64_t)v17 >= v16)
    {
      v19 = ((char *)v17 - (_BYTE *)*v3) >> 3;
      if ((unint64_t)(v19 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v20 = v16 - (_QWORD)*v3;
      v21 = v20 >> 2;
      if (v20 >> 2 <= (unint64_t)(v19 + 1))
        v21 = v19 + 1;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v22 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v22 = v21;
      if (v22)
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v3 + 2), v22);
      else
        v23 = 0;
      v24 = &v23[8 * v19];
      v25 = &v23[8 * v22];
      *(_QWORD *)v24 = v15;
      v18 = v24 + 8;
      v27 = (char *)*v3;
      v26 = (char *)v3[1];
      if (v26 != *v3)
      {
        do
        {
          v28 = *((_QWORD *)v26 - 1);
          v26 -= 8;
          *((_QWORD *)v24 - 1) = v28;
          v24 -= 8;
        }
        while (v26 != v27);
        v26 = (char *)*v3;
      }
      *v3 = v24;
      v3[1] = v18;
      v3[2] = v25;
      if (v26)
        operator delete(v26);
    }
    else
    {
      *v17 = result;
      v18 = v17 + 1;
    }
    v29 = ~(v11 >> 3);
    v3[1] = v18;
    result = (_QWORD *)((char *)v15 + v14);
    v30 = (unint64_t)&v15[v29] + v14;
    v31 = v6[v13];
    if (v30 >= (unint64_t)v15)
    {
      v32 = 8 * v29;
      do
      {
        result = (_QWORD *)((char *)result + v32);
        *result = v31;
        v6[v13] = result;
        v31 = v30;
        v30 += v32;
      }
      while (&result[(unint64_t)v32 / 8] >= v15);
    }
    else
    {
      result = (_QWORD *)v6[v13];
    }
    ++v9[v13];
  }
  v6[v13] = *result;
  return result;
}

void BM_free(_QWORD *a1, uint64_t a2)
{
  char **v4;
  char *v5;
  char *v6;

  v4 = (char **)freeListsTLS();
  v5 = *v4;
  if (!*v4)
  {
    v5 = (char *)malloc_type_calloc(0x10uLL, 8uLL, 0x2004093837F09uLL);
    *v4 = v5;
  }
  if ((unint64_t)(a2 - 1) < 0x78)
  {
    v6 = &v5[(a2 - 1) & 0xFFFFFFFFFFFFFFF8];
    *a1 = *((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = a1;
  }
  else
  {
    free(a1);
  }
}

void BM_freeThread()
{
  uint64_t *v0;
  uint64_t v1;
  void **v2;
  void **v3;
  void *v4;
  void **v5;
  void **v6;

  v0 = (uint64_t *)mallocListTLS();
  v1 = *v0;
  if (*v0)
  {
    v2 = *(void ***)v1;
  }
  else
  {
    v1 = operator new();
    v2 = 0;
    *(_QWORD *)(v1 + 8) = 0;
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)v1 = 0;
    *v0 = v1;
  }
  v3 = *(void ***)(v1 + 8);
  if (v2 != v3)
  {
    do
    {
      v4 = *v2++;
      free(v4);
    }
    while (v2 != v3);
    v2 = *(void ***)v1;
  }
  *(_QWORD *)(v1 + 8) = v2;
  TLSWrapper<std::vector<void *>,1,true>::release(v0);
  v5 = (void **)allocCountsTLS();
  if (*v5)
  {
    free(*v5);
    *v5 = 0;
  }
  v6 = (void **)freeListsTLS();
  if (*v6)
  {
    free(*v6);
    *v6 = 0;
  }
}

_QWORD *TLSWrapper<std::vector<void *>,1,true>::release(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  void *v3;

  v1 = *result;
  if (*result)
  {
    v2 = result;
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    result = (_QWORD *)MEMORY[0x1AF44D190](v1, 0x80C40D6874129);
    *v2 = 0;
  }
  return result;
}

uint64_t BM_printstats()
{
  uint64_t result;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  FILE **v4;

  result = allocCountsTLS();
  v1 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
  {
    v2 = (_QWORD *)result;
    result = (uint64_t)malloc_type_calloc(0x10uLL, 4uLL, 0x100004052888210uLL);
    v1 = result;
    *v2 = result;
  }
  v3 = 0;
  v4 = (FILE **)MEMORY[0x1E0C80C10];
  do
  {
    if (*(_DWORD *)(v1 + 4 * v3))
      result = fprintf(*v4, "%u blocks of %u-word chunks\n", *(_DWORD *)(v1 + 4 * v3), v3);
    ++v3;
  }
  while (v3 != 16);
  return result;
}

void quasar::QuasarEuclid::~QuasarEuclid(void **this)
{
  void **v2;

  *this = off_1E5D34D78;
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  v2 = this + 9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 4));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 2));
}

void quasar::QuasarEuclid::createQuasarEuclid(uint64_t a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, unsigned __int8 a4@<W3>, _QWORD *a5@<X8>)
{
  size_t v10;
  void **v11;
  void **v12;
  std::string *v13;
  void **v14;
  unsigned __int8 v15;
  _QWORD *v16;
  void (**v17)(quasar::QuasarEuclidGrapheme *__hidden);
  size_t v18;
  void **v19;
  void **v20;
  std::string *v21;
  void **v22;
  unsigned __int8 v23;
  void *__p[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  void **v41;
  _BYTE v42[15];
  unsigned __int8 v43;
  _QWORD v44[3];

  v44[2] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v41, "euclid");
  if (a3 >= 2)
  {
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unrecognized EuclidInitFlag: ", 29);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  if (a2 == 1)
  {
    if ((v43 & 0x80u) == 0)
      v18 = v43;
    else
      v18 = *(_QWORD *)v42;
    v19 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v18 + 1);
    if (SBYTE7(v25) < 0)
      v19 = (void **)__p[0];
    if (v18)
    {
      if ((v43 & 0x80u) == 0)
        v20 = (void **)&v41;
      else
        v20 = v41;
      memmove(v19, v20, v18);
    }
    *(_WORD *)((char *)v19 + v18) = 46;
    v21 = std::string::append((std::string *)__p, "phoneme-encoder");
    v22 = (void **)v21->__r_.__value_.__r.__words[0];
    v44[0] = v21->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v44 + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
    v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if ((char)v43 < 0)
      operator delete(v41);
    v41 = v22;
    *(_QWORD *)v42 = v44[0];
    *(_QWORD *)&v42[7] = *(_QWORD *)((char *)v44 + 7);
    v43 = v23;
    if (SBYTE7(v25) < 0)
      operator delete(__p[0]);
    v16 = (_QWORD *)operator new();
    quasar::QuasarEuclid::QuasarEuclid((uint64_t)v16, a1, (uint64_t)&v41, 1, a3, a4);
    v17 = &off_1E5D37788;
  }
  else
  {
    if (a2)
    {
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unrecognized EuclidEncoderType:", 31);
      std::ostream::operator<<();
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    if ((v43 & 0x80u) == 0)
      v10 = v43;
    else
      v10 = *(_QWORD *)v42;
    v11 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v10 + 1);
    if (SBYTE7(v25) < 0)
      v11 = (void **)__p[0];
    if (v10)
    {
      if ((v43 & 0x80u) == 0)
        v12 = (void **)&v41;
      else
        v12 = v41;
      memmove(v11, v12, v10);
    }
    *(_WORD *)((char *)v11 + v10) = 46;
    v13 = std::string::append((std::string *)__p, "grapheme-encoder");
    v14 = (void **)v13->__r_.__value_.__r.__words[0];
    v44[0] = v13->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v44 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if ((char)v43 < 0)
      operator delete(v41);
    v41 = v14;
    *(_QWORD *)v42 = v44[0];
    *(_QWORD *)&v42[7] = *(_QWORD *)((char *)v44 + 7);
    v43 = v15;
    if (SBYTE7(v25) < 0)
      operator delete(__p[0]);
    v16 = (_QWORD *)operator new();
    quasar::QuasarEuclid::QuasarEuclid((uint64_t)v16, a1, (uint64_t)&v41, 0, a3, a4);
    v17 = &off_1E5D37C30;
  }
  *v16 = v17;
  *a5 = v16;
  if ((char)v43 < 0)
    operator delete(v41);
}

void sub_1ADF69F78()
{
  uint64_t v0;

  MEMORY[0x1AF44D190](v0, 0x10B3C40FFC5DC83);
  JUMPOUT(0x1ADF69FDCLL);
}

void sub_1ADF69FA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADF69FDCLL);
}

void sub_1ADF69FC8(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1ADF69FD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 113) < 0)
    operator delete(*(void **)(v1 - 136));
  _Unwind_Resume(exception_object);
}

void quasar::QuasarEuclid::registerParams(quasar::QuasarEuclid *this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "version");
  std::string::basic_string[abi:ne180100]<0>(__p, "Euclid asset version in semantic versioning format(MAJOR.MINOR.PATCH)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 48, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADF6A090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::QuasarEuclid::QuasarEuclid(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, unsigned __int8 a6)
{
  _QWORD *v11;
  size_t v12;
  void **v13;
  const void *v14;
  size_t v15;
  std::string *v16;
  const void *v17;
  std::string *v18;
  __int128 v19;
  std::string::size_type v20;
  std::__shared_weak_count *size;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const std::string *v30;
  void **v32;
  std::string v33;
  void *__p[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;

  *(_QWORD *)a1 = off_1E5D34D78;
  *(_BYTE *)(a1 + 8) = a6;
  *(_OWORD *)(a1 + 16) = 0u;
  v11 = (_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 32) = 0u;
  v29 = a1 + 32;
  v30 = (const std::string *)(a1 + 48);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 48), "0.0.0");
  *(_OWORD *)(a1 + 72) = 0u;
  v32 = (void **)(a1 + 96);
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  if (*(char *)(a3 + 23) >= 0)
    v12 = *(unsigned __int8 *)(a3 + 23);
  else
    v12 = *(_QWORD *)(a3 + 8);
  v13 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v12 + 1);
  if (SBYTE7(v35) < 0)
    v13 = (void **)__p[0];
  if (v12)
  {
    if (*(char *)(a3 + 23) >= 0)
      v14 = (const void *)a3;
    else
      v14 = *(const void **)a3;
    memmove(v13, v14, v12);
  }
  *(_WORD *)((char *)v13 + v12) = 46;
  quasar::SystemConfig::setPrefix((std::string *)a2, (const std::string *)__p);
  if (SBYTE7(v35) < 0)
    operator delete(__p[0]);
  quasar::QuasarEuclid::registerParams((quasar::QuasarEuclid *)a1, (quasar::SystemConfig *)a2);
  quasar::SystemConfig::readPtree(a2, a3, 0, 0);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a2 + 8);
    *(_QWORD *)&v35 = *(_QWORD *)(a2 + 24);
  }
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v32);
  *(_OWORD *)v32 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 112) = v35;
  std::string::operator=((std::string *)(a1 + 120), (const std::string *)a3);
  *(_DWORD *)(a1 + 144) = a5;
  if (*(char *)(a1 + 71) < 0)
  {
    if (!*(_QWORD *)(a1 + 56))
      goto LABEL_23;
    goto LABEL_22;
  }
  if (*(_BYTE *)(a1 + 71))
LABEL_22:
    kaldi::SplitStringToVector(v30, ".", 1, a1 + 72);
LABEL_23:
  if (*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72) != 72)
  {
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"euclidAssetVersion format is invalid: ", 38);
    v26 = *(_BYTE *)(a1 + 71);
    if (v26 >= 0)
      v27 = (uint64_t)v30;
    else
      v27 = *(_QWORD *)(a1 + 48);
    if (v26 >= 0)
      v28 = *(unsigned __int8 *)(a1 + 71);
    else
      v28 = *(_QWORD *)(a1 + 56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  if (*(char *)(a3 + 23) >= 0)
    v15 = *(unsigned __int8 *)(a3 + 23);
  else
    v15 = *(_QWORD *)(a3 + 8);
  v16 = &v33;
  std::string::basic_string[abi:ne180100]((uint64_t)&v33, v15 + 1);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v16 = (std::string *)v33.__r_.__value_.__r.__words[0];
  if (v15)
  {
    if (*(char *)(a3 + 23) >= 0)
      v17 = (const void *)a3;
    else
      v17 = *(const void **)a3;
    memmove(v16, v17, v15);
  }
  *(_WORD *)((char *)&v16->__r_.__value_.__l.__data_ + v15) = 46;
  v18 = std::string::append(&v33, "text-encoder");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  *(_QWORD *)&v35 = *((_QWORD *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  quasar::TextEmbedder::createTextEmbedder((std::string *)a2, (uint64_t)__p, a4, &v33);
  std::shared_ptr<quasar::TextEmbedder>::operator=[abi:ne180100]<quasar::TextEmbedder,std::default_delete<quasar::TextEmbedder>,void>(v11, (uint64_t *)&v33);
  v20 = v33.__r_.__value_.__r.__words[0];
  v33.__r_.__value_.__r.__words[0] = 0;
  if (v20)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v20 + 8))(v20);
  if (!a5)
  {
    quasar::loadNearestNeighborSearch(a2, (const void **)a3, a6, &v33);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v29, (__int128 *)&v33);
    size = (std::__shared_weak_count *)v33.__r_.__value_.__l.__size_;
    if (v33.__r_.__value_.__l.__size_)
    {
      v23 = (unint64_t *)(v33.__r_.__value_.__l.__size_ + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  if (SBYTE7(v35) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1ADF6A490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  JUMPOUT(0x1ADF6A4D0);
}

void sub_1ADF6A4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void **a4, uint64_t a5, void **a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, ...)
{
  char *v12;
  uint64_t v13;
  void **v14;
  va_list va;

  va_start(va, a12);
  if ((a12 & 0x80000000) == 0)
  {
    if (v12[143] < 0)
      operator delete(*v14);
    if (v12[119] < 0)
      operator delete(*a6);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((uint64_t *)va);
    if (v12[71] < 0)
      operator delete(*a4);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a3);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v13);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1ADF6A4DCLL);
}

void sub_1ADF6A4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  char *v22;
  uint64_t v23;
  void **v24;

  if (a22 < 0)
    operator delete(__p);
  if (v22[143] < 0)
    operator delete(*v24);
  if (v22[119] < 0)
    operator delete(*a13);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v22[71] < 0)
    operator delete(*a11);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v23);
  _Unwind_Resume(a1);
}

void sub_1ADF6A4E8()
{
  JUMPOUT(0x1ADF6A538);
}

_QWORD *std::shared_ptr<quasar::TextEmbedder>::operator=[abi:ne180100]<quasar::TextEmbedder,std::default_delete<quasar::TextEmbedder>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1E5D45F90;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void quasar::loadNearestNeighborSearch(uint64_t a1@<X0>, const void **a2@<X1>, unsigned __int8 a3@<W2>, _QWORD *a4@<X8>)
{
  size_t v7;
  std::string *v8;
  const void *v9;
  std::string *v10;
  __int128 v11;
  std::string v12;
  void *__p[2];
  std::string::size_type v14;
  unsigned __int8 v15;

  v15 = a3;
  if (*((char *)a2 + 23) >= 0)
    v7 = *((unsigned __int8 *)a2 + 23);
  else
    v7 = (size_t)a2[1];
  v8 = &v12;
  std::string::basic_string[abi:ne180100]((uint64_t)&v12, v7 + 1);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = (std::string *)v12.__r_.__value_.__r.__words[0];
  if (v7)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    memmove(v8, v9, v7);
  }
  *(_WORD *)((char *)&v8->__r_.__value_.__l.__data_ + v7) = 46;
  v10 = std::string::append(&v12, "nearest-neighbor-search");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v14 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (quasar::SystemConfig::getPtreeOptional(a1, (uint64_t)__p))
  {
    std::allocate_shared[abi:ne180100]<quasar::NearestNeighborSearch,std::allocator<quasar::NearestNeighborSearch>,quasar::SystemConfig &,std::string &,BOOL &,void>(a1, (uint64_t)__p, &v15, a4);
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
}

void sub_1ADF6A714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::QuasarEuclid::findNearestNeighbors(uint64_t a1@<X0>, __int128 *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  void *__p[2];
  __int128 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  void **v43;

  v12 = (uint64_t *)(a1 + 32);
  if (!*(_QWORD *)(a1 + 32))
  {
    if (!*(_DWORD *)(a1 + 144))
      goto LABEL_21;
    if (quasar::gLogLevel >= 4)
    {
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v26 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"No nearest neighbor created due to EuclidInitFlag during init. Try to reload the asset", 86);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v26);
    }
    quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)&v26);
    v23 = 0;
    v24 = 0;
    v25 = 0;
    *(_OWORD *)__p = 0u;
    v21 = 0u;
    v22 = 1065353216;
    quasar::SystemConfig::readJsonFile((uint64_t)&v26, a1 + 96, &v23, (uint64_t)__p, 1, 1);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
    __p[0] = &v23;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    quasar::loadNearestNeighborSearch((uint64_t)&v26, (const void **)(a1 + 120), *(_BYTE *)(a1 + 8), __p);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)v12, (__int128 *)__p);
    v13 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v14 = (unint64_t *)((char *)__p[1] + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&v26);
    if (!*v12)
    {
LABEL_21:
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v26 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v26, "No nearest neighbor asset configured");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v26);
    }
  }
  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (a3 >= 1)
  {
    quasar::QuasarEuclid::preprocessInput(a1, (uint64_t)a2, 1, __p);
    v16 = (void *)BYTE7(v21);
    v17 = BYTE7(v21);
    if (SBYTE7(v21) < 0)
      v16 = __p[1];
    if (v16)
    {
      quasar::QuasarEuclid::computeEmbeddingVectorWithPreprocessedInput(a1, (uint64_t)__p, &v26);
      v23 = 0;
      v24 = 0;
      v25 = 0;
      if (a4)
        v24 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v23, a2);
      quasar::NearestNeighborSearch::findNearestNeighbors(*v12, (uint64_t)&v26, a3, &v23, a5, &v18);
      std::vector<std::pair<std::string,float>>::__vdeallocate(a6);
      *(_OWORD *)a6 = v18;
      a6[2] = v19;
      v19 = 0;
      v18 = 0uLL;
      v43 = (void **)&v18;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v43);
      *(_QWORD *)&v18 = &v23;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
      std::__optional_destruct_base<kaldi::CuVector<float>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v26);
      v17 = BYTE7(v21);
    }
    if (v17 < 0)
      operator delete(__p[0]);
  }
}

uint64_t quasar::QuasarEuclid::preprocessInput@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a4, a3);
}

void sub_1ADF6AACC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::QuasarEuclid::computeEmbeddingVectorWithPreprocessedInput@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[5];

  *a3 = 0;
  a3[32] = 0;
  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v6 = result;
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)result + 24))(v7);
    std::__optional_storage_base<kaldi::CuVector<float>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<kaldi::CuVector<float>,false>>((uint64_t)a3, (uint64_t)v7);
    result = std::__optional_destruct_base<kaldi::CuVector<float>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v7);
    if (!a3[32])
    {
      quasar::QuasarEuclid::inferEmbeddingVectorWithPreprocessedInput(v6, a2, v7);
      std::__optional_storage_base<kaldi::CuVector<float>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<kaldi::CuVector<float>,false>>((uint64_t)a3, (uint64_t)v7);
      return std::__optional_destruct_base<kaldi::CuVector<float>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v7);
    }
  }
  return result;
}

void sub_1ADF6AB8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::__optional_destruct_base<kaldi::CuVector<float>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  std::__optional_destruct_base<kaldi::CuVector<float>,false>::~__optional_destruct_base[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

float quasar::QuasarEuclid::computeDistance(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  float v4;
  uint64_t v6;
  _BYTE v9[40];
  _BYTE v10[40];

  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  v4 = -1.0;
  if (v3)
  {
    v6 = *(unsigned __int8 *)(a3 + 23);
    if ((v6 & 0x80u) != 0)
      v6 = *(_QWORD *)(a3 + 8);
    if (v6)
    {
      quasar::QuasarEuclid::computeEmbeddingVector(a1, a2, v10);
      quasar::QuasarEuclid::computeEmbeddingVector(a1, a3, v9);
      if (v10[32] && v9[32])
        v4 = quasar::computeL2Dist((uint64_t)v10, (uint64_t)v9);
      std::__optional_destruct_base<kaldi::CuVector<float>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v9);
      std::__optional_destruct_base<kaldi::CuVector<float>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v10);
    }
  }
  return v4;
}

void sub_1ADF6AC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::__optional_destruct_base<kaldi::CuVector<float>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a9);
  std::__optional_destruct_base<kaldi::CuVector<float>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t quasar::QuasarEuclid::computeEmbeddingVector@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  void *__p[2];
  char v8;
  _BYTE v9[40];

  v9[0] = 0;
  v9[32] = 0;
  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    quasar::QuasarEuclid::preprocessInput(a1, a2, 0, __p);
    quasar::QuasarEuclid::computeEmbeddingVectorWithPreprocessedInput(a1, (uint64_t)__p, a3);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::__optional_move_base<kaldi::CuVector<float>,false>::__optional_move_base[abi:ne180100](a3, (uint64_t)v9);
  }
  return std::__optional_destruct_base<kaldi::CuVector<float>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v9);
}

void sub_1ADF6AD18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::__optional_destruct_base<kaldi::CuVector<float>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t quasar::QuasarEuclid::getMaxInputLength(quasar::TextEmbedder **this)
{
  return quasar::TextEmbedder::getMaxInputLength(this[2]);
}

uint64_t quasar::QuasarEuclid::getEmbeddingDim(quasar::TextEmbedder **this)
{
  return quasar::TextEmbedder::getEmbeddingDim(this[2]);
}

std::string *quasar::QuasarEuclid::getAssetVersionInVector@<X0>(__int128 **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[9], this[10], 0xAAAAAAAAAAAAAAABLL * (((char *)this[10] - (char *)this[9]) >> 3));
}

void quasar::QuasarEuclid::inferEmbeddingVectorWithPreprocessedInput(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  _QWORD v5[2];
  uint64_t v6;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v6 = 0;
    v7 = 0;
    v5[0] = &unk_1E5D341C8;
    v5[1] = 0;
    quasar::TextEmbedder::computeTextEmbeddingVector(*(_DWORD **)(a1 + 16), a2, (uint64_t)v5);
    if ((_DWORD)v6)
    {
      std::__optional_destruct_base<kaldi::CuVector<float>,false>::__optional_destruct_base[abi:ne180100]<kaldi::CuVector<float>>((uint64_t)a3, (uint64_t)v5);
    }
    else
    {
      *a3 = 0;
      a3[32] = 0;
    }
    v5[0] = &unk_1E5D341C8;
    kaldi::CuVector<float>::Destroy((uint64_t)v5);
  }
  else
  {
    *a3 = 0;
    a3[32] = 0;
  }
}

void sub_1ADF6AE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuVector<float>::~CuVector(&a9);
  _Unwind_Resume(a1);
}

void quasar::QuasarEuclidGrapheme::findNearestNeighbors(uint64_t a1@<X0>, __int128 *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  quasar::QuasarEuclid::findNearestNeighbors(a1, a2, a3, 1, a4, a5);
}

void quasar::QuasarEuclidGrapheme::lookupEmbedding(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    quasar::NearestNeighborSearch::lookupEmbedding(v3, a2, 0, a3);
  }
  else
  {
    *a3 = 0;
    a3[32] = 0;
  }
}

void quasar::QuasarEuclidPhoneme::findNearestNeighbors(uint64_t a1@<X0>, __int128 *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  quasar::QuasarEuclid::findNearestNeighbors(a1, a2, a3, 0, a4, a5);
}

void quasar::QuasarEuclidPhoneme::lookupEmbedding(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    quasar::NearestNeighborSearch::lookupEmbedding(v3, a2, 1, a3);
  }
  else
  {
    *a3 = 0;
    a3[32] = 0;
  }
}

void quasar::QuasarEuclidGrapheme::~QuasarEuclidGrapheme(void **this)
{
  quasar::QuasarEuclid::~QuasarEuclid(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::QuasarEuclidPhoneme::~QuasarEuclidPhoneme(void **this)
{
  quasar::QuasarEuclid::~QuasarEuclid(this);
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::NearestNeighborSearch,std::allocator<quasar::NearestNeighborSearch>,quasar::SystemConfig &,std::string &,BOOL &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned __int8 *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x138uLL);
  result = std::__shared_ptr_emplace<quasar::NearestNeighborSearch>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string &,BOOL &,std::allocator<quasar::NearestNeighborSearch>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1ADF6AF2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::NearestNeighborSearch>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string &,BOOL &,std::allocator<quasar::NearestNeighborSearch>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D43AD0;
  quasar::NearestNeighborSearch::NearestNeighborSearch(a1 + 3, a2, a3, *a4);
  return a1;
}

void sub_1ADF6AF7C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::NearestNeighborSearch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43AD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::NearestNeighborSearch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43AD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::NearestNeighborSearch>::__on_zero_shared(uint64_t a1)
{
  quasar::NearestNeighborSearch::~NearestNeighborSearch((void **)(a1 + 24));
}

void quasar::NearestNeighborSearch::~NearestNeighborSearch(void **this)
{
  if (*((char *)this + 279) < 0)
    operator delete(this[32]);
  if (*((char *)this + 255) < 0)
    operator delete(this[29]);
  if (*((char *)this + 231) < 0)
    operator delete(this[26]);
  if (*((char *)this + 207) < 0)
    operator delete(this[23]);
  if (*((char *)this + 183) < 0)
    operator delete(this[20]);
  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 14));
  this[10] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)(this + 10));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 8));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 6));
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this);
}

_BYTE *std::__optional_move_base<kaldi::CuVector<float>,false>::__optional_move_base[abi:ne180100](_BYTE *a1, uint64_t a2)
{
  *a1 = 0;
  a1[32] = 0;
  if (*(_BYTE *)(a2 + 32))
    std::__optional_storage_base<kaldi::CuVector<float>,false>::__construct[abi:ne180100]<kaldi::CuVector<float>>((uint64_t)a1, a2);
  return a1;
}

void sub_1ADF6B0D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__optional_destruct_base<kaldi::CuVector<float>,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<quasar::TextEmbedder  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::TextEmbedder  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::TextEmbedder  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void quasar::readFst(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _BYTE *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  _BYTE *v15;
  int v16;
  uint64_t *v17;
  BOOL v18;
  uint64_t v20;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  void *__p[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _BYTE v61[8];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::string v69;
  __int128 v70;
  __int128 v71;
  int v72;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v69, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v69 = *(std::string *)a2;
  v70 = *(_OWORD *)(a2 + 24);
  v71 = *(_OWORD *)(a2 + 40);
  v72 = *(_DWORD *)(a2 + 56);
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v67 = 0;
  v68 = 0;
  v66 = -1;
  v6 = (_BYTE *)v70;
  if (!(_QWORD)v70)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    v7 = fst::FstHeader::Read((uint64_t)v61, (uint64_t)a1, (uint64_t)__p, 0);
    if (SBYTE7(v45) < 0)
      operator delete(__p[0]);
    if ((v7 & 1) == 0)
    {
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reading FST: error reading FST header.", 38);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    v6 = v61;
    *(_QWORD *)&v70 = v61;
  }
  v8 = fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type();
  v9 = v6[55];
  if ((v9 & 0x80u) == 0)
    v10 = v6[55];
  else
    v10 = *((_QWORD *)v6 + 5);
  v11 = *(unsigned __int8 *)(v8 + 23);
  v12 = (char)v11;
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(v8 + 8);
  if (v10 != v11)
    goto LABEL_127;
  if (v12 >= 0)
    v13 = (unsigned __int8 *)v8;
  else
    v13 = *(unsigned __int8 **)v8;
  if ((v9 & 0x80) != 0)
  {
    if (memcmp(*((const void **)v6 + 4), v13, *((_QWORD *)v6 + 5)))
      goto LABEL_127;
  }
  else if (v6[55])
  {
    v14 = v6 + 32;
    while (*v14 == *v13)
    {
      ++v14;
      ++v13;
      if (!--v9)
        goto LABEL_25;
    }
LABEL_127:
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"FST with arc type ", 18);
    v36 = (char)v6[55];
    if (v36 >= 0)
      v37 = (uint64_t)(v6 + 32);
    else
      v37 = *((_QWORD *)v6 + 4);
    if (v36 >= 0)
      v38 = v6[55];
    else
      v38 = *((_QWORD *)v6 + 5);
    v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v37, v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" not supported.\n", 16);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
LABEL_25:
  *a3 = 0;
  v15 = v6 + 8;
  v16 = v6[31];
  if ((v16 & 0x80) != 0)
  {
    v20 = *((_QWORD *)v6 + 2);
    if (v20 == 5)
    {
      if (**(_DWORD **)v15 == 1936617315 && *(_BYTE *)(*(_QWORD *)v15 + 4) == 116)
        goto LABEL_106;
      v20 = *((_QWORD *)v6 + 2);
      if (v20 == 5)
      {
        if (**(_DWORD **)v15 == 1634887534 && *(_BYTE *)(*(_QWORD *)v15 + 4) == 109)
          goto LABEL_112;
        if ((v16 & 0x80) == 0)
          goto LABEL_100;
      }
    }
    else if (v20 == 6 && **(_DWORD **)v15 == 1952671094 && *(_WORD *)(*(_QWORD *)v15 + 4) == 29295)
    {
      goto LABEL_85;
    }
    if (v20 == 15)
    {
      if (**(_QWORD **)v15 == 0x75715F6D6172676ELL && *(_QWORD *)(*(_QWORD *)v15 + 7) == 0x64657A69746E6175)
        goto LABEL_91;
      v20 = *((_QWORD *)v6 + 2);
    }
    if (v20 == 18)
    {
      if (**(_QWORD **)v15 == 0x5F64656375646572
        && *(_QWORD *)(*(_QWORD *)v15 + 8) == 0x637564736E617274
        && *(_WORD *)(*(_QWORD *)v15 + 16) == 29285)
      {
        goto LABEL_107;
      }
      v20 = *((_QWORD *)v6 + 2);
    }
    if (v20 != 16)
      goto LABEL_100;
    v17 = *(uint64_t **)v15;
LABEL_72:
    v27 = *v17;
    v28 = v17[1];
    if (v27 == 0x5F64656375646572 && v28 == 0x726F747065636361)
    {
      v30 = (uint64_t)fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::Read(a1, (uint64_t)&v69);
      goto LABEL_119;
    }
    goto LABEL_100;
  }
  if (v6[31] <= 0xEu)
  {
    if (v16 != 5)
    {
      if (v16 != 6)
        goto LABEL_100;
      if (*(_DWORD *)v15 != 1952671094 || *((_WORD *)v6 + 6) != 29295)
        goto LABEL_100;
LABEL_85:
      v30 = (uint64_t)fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read(a1, (uint64_t)&v69);
      goto LABEL_119;
    }
    if (*(_DWORD *)v15 != 1936617315 || v6[12] != 116)
    {
      if (*(_DWORD *)v15 != 1634887534 || v6[12] != 109)
        goto LABEL_100;
LABEL_112:
      v30 = fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Read(a1, (uint64_t)&v69);
      goto LABEL_119;
    }
LABEL_106:
    v30 = (uint64_t)fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::Read(a1, (uint64_t)&v69);
    goto LABEL_119;
  }
  if (v16 != 15)
  {
    v17 = (uint64_t *)(v6 + 8);
    if (v16 != 16)
    {
      if (v16 != 18)
        goto LABEL_100;
      v18 = *(_QWORD *)v15 == 0x5F64656375646572 && *((_QWORD *)v6 + 2) == 0x637564736E617274;
      if (!v18 || *((_WORD *)v6 + 12) != 29285)
        goto LABEL_100;
LABEL_107:
      v30 = (uint64_t)fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::Read(a1, (uint64_t)&v69);
      goto LABEL_119;
    }
    goto LABEL_72;
  }
  if (*(_QWORD *)v15 == 0x75715F6D6172676ELL && *(_QWORD *)(v6 + 15) == 0x64657A69746E6175)
  {
LABEL_91:
    v30 = fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Read(a1, (uint64_t)&v69);
    goto LABEL_119;
  }
LABEL_100:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v6 + 1, "reduced_quantized_transducer"))
  {
    v30 = (uint64_t)fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::Read(a1, (uint64_t)&v69);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v6 + 1, "reduced_quantized_acceptor"))
  {
    v30 = (uint64_t)fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::Read(a1, (uint64_t)&v69);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v6 + 1, "squeezed_transducer"))
  {
    v30 = (uint64_t)fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::Read(a1, (uint64_t)&v69);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v6 + 1, "squeezed_acceptor"))
  {
    v30 = (uint64_t)fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::Read(a1, (uint64_t)&v69);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v6 + 1, "squeezed_quantized_transducer"))
  {
    v30 = (uint64_t)fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::Read(a1, (uint64_t)&v69);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v6 + 1, "squeezed_quantized_acceptor"))
  {
    v30 = (uint64_t)fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::Read(a1, (uint64_t)&v69);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v6 + 1, "enumeration"))
  {
    v30 = (uint64_t)fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Read(a1, (uint64_t)&v69);
  }
  else
  {
    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v6 + 1, "quantized_enumeration"))
    {
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reading FST: unsupported FST type: ", 35);
      v41 = (char)v6[31];
      if (v41 >= 0)
        v42 = (uint64_t)(v6 + 8);
      else
        v42 = *((_QWORD *)v6 + 1);
      if (v41 >= 0)
        v43 = v6[31];
      else
        v43 = *((_QWORD *)v6 + 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    v30 = (uint64_t)fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Read(a1, (uint64_t)&v69);
  }
LABEL_119:
  *a3 = v30;
  if (!v30)
  {
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Error reading FST (after reading header).", 41);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  if (SHIBYTE(v64) < 0)
    operator delete(*((void **)&v63 + 1));
  if (SBYTE7(v63) < 0)
    operator delete((void *)v62);
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
}

uint64_t fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Read(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Read(a1, a2);
  if (result)
  {
    v3 = result;
    result = operator new();
    *(_QWORD *)result = &unk_1E5D22B80;
    *(_QWORD *)(result + 8) = v3;
    *(_DWORD *)(result + 16) = -1;
    *(_DWORD *)(result + 48) = -1;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_DWORD *)(result + 80) = -1;
  }
  return result;
}

uint64_t fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Read(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  result = fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Read(a1, a2);
  if (result)
  {
    v3 = result;
    result = operator new();
    *(_QWORD *)result = &unk_1E5D22C38;
    *(_QWORD *)(result + 8) = v3;
    *(_DWORD *)(result + 16) = -1;
    *(_DWORD *)(result + 48) = -1;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 56) = 0;
    *(_DWORD *)(result + 80) = -1;
  }
  return result;
}

_QWORD *fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::Read(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;

  result = (_QWORD *)fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::Read(a1, a2);
  if (result)
  {
    v3 = result;
    result = (_QWORD *)operator new();
    *result = &unk_1E5D19B80;
    result[1] = v3;
  }
  return result;
}

_QWORD *fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::Read(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;

  result = (_QWORD *)fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::Read(a1, a2);
  if (result)
  {
    v3 = result;
    result = (_QWORD *)operator new();
    *result = &unk_1E5D19CF0;
    result[1] = v3;
  }
  return result;
}

_QWORD *fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::Read(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;

  result = (_QWORD *)fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::Read(a1, a2);
  if (result)
  {
    v3 = result;
    result = (_QWORD *)operator new();
    *result = &unk_1E5D19C38;
    result[1] = v3;
  }
  return result;
}

_QWORD *fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::Read(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;

  result = (_QWORD *)fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::Read(a1, a2);
  if (result)
  {
    v3 = result;
    result = (_QWORD *)operator new();
    *result = &unk_1E5D19DA8;
    result[1] = v3;
  }
  return result;
}

_QWORD *fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::Read(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;

  result = (_QWORD *)fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::Read(a1, a2);
  if (result)
  {
    v3 = result;
    result = (_QWORD *)operator new();
    *result = &unk_1E5D1AA88;
    result[1] = v3;
  }
  return result;
}

_QWORD *fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::Read(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;

  result = (_QWORD *)fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::Read(a1, a2);
  if (result)
  {
    v3 = result;
    result = (_QWORD *)operator new();
    *result = &unk_1E5D1ABF8;
    result[1] = v3;
  }
  return result;
}

_QWORD *fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::Read(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;

  result = (_QWORD *)fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::Read(a1, a2);
  if (result)
  {
    v3 = result;
    result = (_QWORD *)operator new();
    *result = &unk_1E5D1AB40;
    result[1] = v3;
  }
  return result;
}

_QWORD *fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::Read(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;

  result = (_QWORD *)fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::Read(a1, a2);
  if (result)
  {
    v3 = result;
    result = (_QWORD *)operator new();
    *result = &unk_1E5D1ACB0;
    result[1] = v3;
  }
  return result;
}

_QWORD *fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Read(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;

  result = (_QWORD *)fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Read(a1, a2);
  if (result)
  {
    v3 = result;
    result = (_QWORD *)operator new();
    *result = &unk_1E5D1E3A8;
    result[1] = v3;
  }
  return result;
}

_QWORD *fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Read(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;

  result = (_QWORD *)fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Read(a1, a2);
  if (result)
  {
    v3 = result;
    result = (_QWORD *)operator new();
    *result = &unk_1E5D1E460;
    result[1] = v3;
  }
  return result;
}

double quasar::ModelLoader::ModelLoader(quasar::ModelLoader *this)
{
  double result;

  *(_QWORD *)this = &off_1E5D34710;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 1065353216;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 40) = 1065353216;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 50) = 1065353216;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 60) = 1065353216;
  *((_DWORD *)this + 70) = 1065353216;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_DWORD *)this + 80) = 1065353216;
  *((_DWORD *)this + 90) = 1065353216;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_DWORD *)this + 100) = 1065353216;
  *((_DWORD *)this + 110) = 1065353216;
  *((_QWORD *)this + 62) = 0;
  *((_QWORD *)this + 63) = 0;
  *(_OWORD *)((char *)this + 475) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_QWORD *)this + 64) = 850045863;
  *((_DWORD *)this + 154) = 1065353216;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 561) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  return result;
}

void quasar::ModelLoader::~ModelLoader(std::mutex *this)
{
  char *opaque;
  std::mutex *v3;

  this->__m_.__sig = (uint64_t)&off_1E5D34710;
  opaque = this->__m_.__opaque;
  quasar::ModelLoader::releaseDispatchResource((quasar::ModelLoader *)this);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this[9].__m_.__opaque);
  std::mutex::~mutex(this + 8);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&this[7].__m_.__opaque[40]);
  v3 = this + 7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v3);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)&this[6].__m_.__opaque[16]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)&this[5].__m_.__opaque[40]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)this[5].__m_.__opaque);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)&this[4].__m_.__opaque[24]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)&this[3].__m_.__opaque[48]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)&this[3].__m_.__opaque[8]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)&this[2].__m_.__opaque[32]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)&this[2]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)&this[1].__m_.__opaque[16]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)&this->__m_.__opaque[40]);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)opaque);
}

{
  quasar::ModelLoader::~ModelLoader(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::ModelLoader::releaseDispatchResource(quasar::ModelLoader *this)
{
  unsigned __int8 v2;

  if (*((_QWORD *)this + 60) && *((_QWORD *)this + 59))
  {
    v2 = atomic_load((unsigned __int8 *)this + 489);
    if ((v2 & 1) != 0)
    {
      dispatch_release(*((dispatch_object_t *)this + 60));
      dispatch_release(*((dispatch_object_t *)this + 59));
    }
  }
}

BOOL quasar::fileExists()
{
  _BOOL8 v0;
  _QWORD v2[2];
  _BYTE v3[408];
  _QWORD v4[20];

  v4[19] = *MEMORY[0x1E0C80C00];
  std::ifstream::basic_ifstream(v2);
  v0 = *(_DWORD *)&v3[*(_QWORD *)(v2[0] - 24) + 16] == 0;
  v2[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v2[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1AF44CA70](v3);
  std::istream::~istream();
  MEMORY[0x1AF44D094](v4);
  return v0;
}

void quasar::ModelLoader::readNnetWordMap(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  size_t v14;
  void **v15;
  const void *v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  char v22;
  size_t v23;
  void **v24;
  char *v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  uint64_t v31;
  size_t v32;
  void **v33;
  const void *v34;
  int v35;
  const std::string::value_type *v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  _BOOL4 v40;
  const std::string *v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  std::string *v53;
  std::string::size_type size;
  unsigned __int8 *v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  char v59;
  void *__p[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  std::string::size_type v78;
  std::string v79;
  _QWORD v80[3];
  std::string v81;
  std::string v82;
  void *v83[2];
  char v84;
  __int128 v85;
  std::string::size_type v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v82, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v82 = *(std::string *)a2;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v81 = *(std::string *)a3;
  quasar::MakeCacheKey<std::string,std::string>((uint64_t)&v82, (uint64_t)&v81);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1 + 16, (unsigned __int8 *)v83))
  {
    __p[0] = v83;
    v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 16), (unsigned __int8 *)v83, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
    *a4 = *((_QWORD *)v8 + 5);
    v9 = *((_QWORD *)v8 + 6);
    a4[1] = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, ":");
    quasar::splitAndTrimNoEmpty((const std::string *)a2, (char *)__p, v80);
    if (SBYTE7(v61) < 0)
      operator delete(__p[0]);
    memset(&v79, 0, sizeof(v79));
    v12 = (char *)v80[0];
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80[1] - v80[0]) >> 3);
    if (v13 == 2)
    {
      if (*(char *)(v80[0] + 23) >= 0)
        v23 = *(unsigned __int8 *)(v80[0] + 23);
      else
        v23 = *(_QWORD *)(v80[0] + 8);
      v24 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v23 + 1);
      if (SBYTE7(v61) < 0)
        v24 = (void **)__p[0];
      if (v23)
      {
        if (v12[23] >= 0)
          v25 = v12;
        else
          v25 = *(char **)v12;
        memmove(v24, v25, v23);
      }
      *(_WORD *)((char *)v24 + v23) = 46;
      v26 = *(char *)(a3 + 23);
      if (v26 >= 0)
        v27 = (const std::string::value_type *)a3;
      else
        v27 = *(const std::string::value_type **)a3;
      if (v26 >= 0)
        v28 = *(unsigned __int8 *)(a3 + 23);
      else
        v28 = *(_QWORD *)(a3 + 8);
      v29 = std::string::append((std::string *)__p, v27, v28);
      v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v86 = v29->__r_.__value_.__r.__words[2];
      v85 = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      if (SBYTE7(v61) < 0)
        operator delete(__p[0]);
      v31 = v80[0];
      if (*(char *)(v80[0] + 47) >= 0)
        v32 = *(unsigned __int8 *)(v80[0] + 47);
      else
        v32 = *(_QWORD *)(v80[0] + 32);
      v33 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v32 + 1);
      if (SBYTE7(v61) < 0)
        v33 = (void **)__p[0];
      if (v32)
      {
        if (*(char *)(v31 + 47) >= 0)
          v34 = (const void *)(v31 + 24);
        else
          v34 = *(const void **)(v31 + 24);
        memmove(v33, v34, v32);
      }
      *(_WORD *)((char *)v33 + v32) = 46;
      v35 = *(char *)(a3 + 23);
      if (v35 >= 0)
        v36 = (const std::string::value_type *)a3;
      else
        v36 = *(const std::string::value_type **)a3;
      if (v35 >= 0)
        v37 = *(unsigned __int8 *)(a3 + 23);
      else
        v37 = *(_QWORD *)(a3 + 8);
      v38 = std::string::append((std::string *)__p, v36, v37);
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v78 = v38->__r_.__value_.__r.__words[2];
      v77 = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      if (SBYTE7(v61) < 0)
        operator delete(__p[0]);
      v40 = quasar::fileExists();
      if (((v40 | quasar::fileExists()) & 1) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"leftNnetWordmapExist || rightNnetWordmapExist", 45);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      if (v40)
        v41 = (const std::string *)&v85;
      else
        v41 = (const std::string *)&v77;
      std::string::operator=(&v79, v41);
      if (SHIBYTE(v78) < 0)
        operator delete((void *)v77);
      if (SHIBYTE(v86) < 0)
        operator delete((void *)v85);
    }
    else if (v13 == 1)
    {
      if (*(char *)(a2 + 23) >= 0)
        v14 = *(unsigned __int8 *)(a2 + 23);
      else
        v14 = *(_QWORD *)(a2 + 8);
      v15 = __p;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v14 + 1);
      if (SBYTE7(v61) < 0)
        v15 = (void **)__p[0];
      if (v14)
      {
        if (*(char *)(a2 + 23) >= 0)
          v16 = (const void *)a2;
        else
          v16 = *(const void **)a2;
        memmove(v15, v16, v14);
      }
      *(_WORD *)((char *)v15 + v14) = 46;
      v17 = *(char *)(a3 + 23);
      if (v17 >= 0)
        v18 = (const std::string::value_type *)a3;
      else
        v18 = *(const std::string::value_type **)a3;
      if (v17 >= 0)
        v19 = *(unsigned __int8 *)(a3 + 23);
      else
        v19 = *(_QWORD *)(a3 + 8);
      v20 = std::string::append((std::string *)__p, v18, v19);
      v21 = v20->__r_.__value_.__r.__words[0];
      *(_QWORD *)&v85 = v20->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)&v85 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
      v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      v79.__r_.__value_.__r.__words[0] = v21;
      v79.__r_.__value_.__l.__size_ = v85;
      *(std::string::size_type *)((char *)&v79.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v85 + 7);
      *((_BYTE *)&v79.__r_.__value_.__s + 23) = v22;
      if (SBYTE7(v61) < 0)
        operator delete(__p[0]);
    }
    else if ((quasar::gLogLevel & 0x80000000) == 0)
    {
      v75 = 0u;
      v76 = 0u;
      v73 = 0u;
      v74 = 0u;
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v68 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      *(_OWORD *)__p = 0u;
      v61 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Malformed wordmap files. fileBasename=", 38);
      v43 = *(char *)(a2 + 23);
      if (v43 >= 0)
        v44 = a2;
      else
        v44 = *(_QWORD *)a2;
      if (v43 >= 0)
        v45 = *(unsigned __int8 *)(a2 + 23);
      else
        v45 = *(_QWORD *)(a2 + 8);
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, v44, v45);
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)", fileExtension=", 16);
      v48 = *(char *)(a3 + 23);
      if (v48 >= 0)
        v49 = a3;
      else
        v49 = *(_QWORD *)a3;
      if (v48 >= 0)
        v50 = *(unsigned __int8 *)(a3 + 23);
      else
        v50 = *(_QWORD *)(a3 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, v49, v50);
      quasar::QuasarFatalMessage::~QuasarFatalMessage((quasar::QuasarFatalMessage *)__p);
    }
    v59 = 0;
    kaldi::Input::Input(&v77, &v79, &v59);
    v51 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)&v77);
    if (*(_DWORD *)((char *)v51 + *(_QWORD *)(*v51 - 24) + 32) && (quasar::gLogLevel & 0x80000000) == 0)
    {
      v75 = 0u;
      v76 = 0u;
      v73 = 0u;
      v74 = 0u;
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v68 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v62 = 0u;
      v63 = 0u;
      *(_OWORD *)__p = 0u;
      v61 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not read the NNLM word map file ", 38);
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = &v79;
      else
        v53 = (std::string *)v79.__r_.__value_.__r.__words[0];
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v79.__r_.__value_.__r.__words[2]);
      else
        size = v79.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, size);
      quasar::QuasarFatalMessage::~QuasarFatalMessage((quasar::QuasarFatalMessage *)__p);
    }
    _ZNSt3__115allocate_sharedB8ne180100IN5kaldi6quasar15NnlmDecoderWordENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a4);
    fst::FstReadOptions::FstReadOptions(__p, &v79, 0, 0, 0);
    LODWORD(v63) = 2;
    kaldi::quasar::NnlmDecoderWord::ReadMapped(*a4, (uint64_t)__p);
    *(_QWORD *)&v85 = v83;
    v55 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 16), (unsigned __int8 *)v83, (uint64_t)&std::piecewise_construct, (__int128 **)&v85);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)v55 + 5, a4);
    v56 = a1 + 56;
    v57 = a1[57];
    if (v57 >= a1[58])
    {
      v58 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v56, (__int128 *)a2);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v56, (__int128 *)a2);
      v58 = v57 + 24;
    }
    a1[57] = v58;
    if (SBYTE7(v61) < 0)
      operator delete(__p[0]);
    kaldi::Input::~Input((kaldi::Input *)&v77);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    __p[0] = v80;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  if (v84 < 0)
    operator delete(v83[0]);
}

void sub_1ADF6C770(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADF6C7D8);
}

uint64_t quasar::MakeCacheKey<std::string,std::string>(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  v4 = *(char *)(a1 + 23);
  if (v4 >= 0)
    v5 = a1;
  else
    v5 = *(_QWORD *)a1;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_QWORD *)(a1 + 8);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  v8 = *(char *)(a2 + 23);
  if (v8 >= 0)
    v9 = a2;
  else
    v9 = *(_QWORD *)a2;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v14);
}

void sub_1ADF6C8C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::ModelLoader::loadIntoTFInferenceNet(_QWORD *a1@<X8>)
{
  _OWORD v1[17];

  *a1 = 0;
  a1[1] = 0;
  memset(v1, 0, sizeof(v1));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"Compile with USE_TENSORFLOW=ON to use TensorFlow models", 55);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v1);
}

void sub_1ADF6C958(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void quasar::ModelLoader::readNeuralNetwork(_QWORD *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, unsigned __int8 a4@<W3>, int a5@<W4>, unsigned __int8 **a6@<X5>, uint64_t *a7@<X8>)
{
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  size_t v20;
  BOOL v21;
  unint64_t v22;
  _BOOL4 v23;
  size_t v24;
  size_t v25;
  uint64_t v26;
  void **v27;
  int v28;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 v34;
  size_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 v40;
  size_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned __int8 v46;
  size_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned __int8 v52;
  size_t v53;
  unint64_t v54;
  _BOOL4 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  size_t v59;
  size_t v60;
  uint64_t v61;
  size_t v62;
  size_t v63;
  uint64_t v64;
  size_t v65;
  size_t v66;
  uint64_t v67;
  size_t v68;
  size_t v69;
  uint64_t v70;
  void **v71;
  int v72;
  unint64_t *v73;
  unsigned __int8 *v74;
  uint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  void **v78;
  int v79;
  void **v80;
  int v81;
  void **v82;
  int v83;
  void *v84[2];
  char v85;
  void *v86[2];
  char v87;
  void *v88[2];
  char v89;
  void *v90[2];
  unsigned __int8 v91;
  void *v92[2];
  unsigned __int8 v93;
  void *v94[2];
  unsigned __int8 v95;
  void *__p[2];
  unsigned __int8 v97;
  BOOL IsOne;
  std::string v99;
  void *v100[2];
  char v101;
  unsigned __int8 v102;
  unsigned __int8 v103;

  v103 = a3;
  v102 = a4;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v99, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v99 = *(std::string *)a2;
  quasar::MakeCacheKey<std::string,BOOL,BOOL>((uint64_t)&v99);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1 + 6, (unsigned __int8 *)v100))
  {
    IsOne = 0;
    if (*a6)
      IsOne = quasar::ModelLoader::EmbeddedMlockContext::IsOne(*a6, (unsigned __int8 *)a2);
    *a7 = 0;
    a7[1] = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, ".pb");
    v16 = *(unsigned __int8 *)(a2 + 23);
    v17 = *(_QWORD *)(a2 + 8);
    if ((v16 & 0x80u) == 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
    v19 = (char)v97;
    if ((v97 & 0x80u) == 0)
      v20 = v97;
    else
      v20 = (size_t)__p[1];
    v21 = v18 >= v20;
    v22 = v18 - v20;
    if (!v21)
    {
      v23 = 0;
      goto LABEL_44;
    }
    if ((v16 & 0x80) != 0)
    {
      if (v20 == -1 || v17 < v22)
LABEL_195:
        std::string::__throw_out_of_range[abi:ne180100]();
      if (v17 - v22 >= v20)
        v25 = v20;
      else
        v25 = v17 - v22;
      v26 = *(_QWORD *)a2;
    }
    else
    {
      if (v20 == -1)
        goto LABEL_195;
      v21 = v16 >= v22;
      v24 = v16 - v22;
      if (!v21)
        goto LABEL_195;
      if (v24 >= v20)
        v25 = v20;
      else
        v25 = v24;
      v26 = a2;
    }
    if ((v97 & 0x80u) == 0)
      v27 = __p;
    else
      v27 = (void **)__p[0];
    v28 = memcmp((const void *)(v26 + v22), v27, v25);
    v23 = v25 == v20 && v28 == 0;
LABEL_44:
    v30 = v23 & a5;
    if (v19 < 0)
      operator delete(__p[0]);
    if (v30)
      quasar::ModelLoader::loadIntoTFInferenceNet(__p);
    std::string::basic_string[abi:ne180100]<0>(__p, ".bnns.mil");
    v31 = *(unsigned __int8 *)(a2 + 23);
    v32 = *(_QWORD *)(a2 + 8);
    if ((v31 & 0x80u) == 0)
      v33 = *(unsigned __int8 *)(a2 + 23);
    else
      v33 = *(_QWORD *)(a2 + 8);
    v34 = v97;
    if ((v97 & 0x80u) == 0)
      v35 = v97;
    else
      v35 = (size_t)__p[1];
    v21 = v33 >= v35;
    v36 = v33 - v35;
    if (!v21)
      goto LABEL_54;
    if ((v31 & 0x80) != 0)
    {
      if (v35 == -1 || v32 < v36)
LABEL_196:
        std::string::__throw_out_of_range[abi:ne180100]();
      if (v32 - v36 >= v35)
        v60 = v35;
      else
        v60 = v32 - v36;
      v61 = *(_QWORD *)a2;
    }
    else
    {
      if (v35 == -1)
        goto LABEL_196;
      v21 = v31 >= v36;
      v59 = v31 - v36;
      if (!v21)
        goto LABEL_196;
      if (v59 >= v35)
        v60 = v35;
      else
        v60 = v59;
      v61 = a2;
    }
    if ((v97 & 0x80u) == 0)
      v71 = __p;
    else
      v71 = (void **)__p[0];
    v72 = memcmp((const void *)(v61 + v36), v71, v60);
    if (v60 == v35 && !v72)
    {
      v55 = 1;
      if ((v34 & 0x80) == 0)
      {
LABEL_87:
        if (v55)
          goto LABEL_88;
        goto LABEL_137;
      }
LABEL_136:
      operator delete(__p[0]);
      if (v55)
      {
LABEL_88:
        std::allocate_shared[abi:ne180100]<kaldi::quasar::CEInferenceNet,std::allocator<kaldi::quasar::CEInferenceNet>,std::string const&,BOOL &,void>(a2, (char *)&IsOne, __p);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a7, (__int128 *)__p);
        v56 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v57 = (unint64_t *)((char *)__p[1] + 8);
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          goto LABEL_140;
        }
        goto LABEL_142;
      }
LABEL_137:
      std::allocate_shared[abi:ne180100]<kaldi::nnet1::Nnet1InferenceNet,std::allocator<kaldi::nnet1::Nnet1InferenceNet>,std::string const&,BOOL &,BOOL &,BOOL &,void>(a2, &v103, &v102, (unsigned __int8 *)&IsOne, __p);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a7, (__int128 *)__p);
      v56 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v73 = (unint64_t *)((char *)__p[1] + 8);
        do
          v58 = __ldaxr(v73);
        while (__stlxr(v58 - 1, v73));
LABEL_140:
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
LABEL_142:
      __p[0] = v100;
      v74 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 6), (unsigned __int8 *)v100, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)v74 + 5, a7);
      v75 = a1 + 56;
      v76 = a1[57];
      if (v76 >= a1[58])
      {
        v77 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v75, (__int128 *)a2);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v75, (__int128 *)a2);
        v77 = v76 + 24;
      }
      a1[57] = v77;
      goto LABEL_146;
    }
LABEL_54:
    std::string::basic_string[abi:ne180100]<0>(v94, ".pt");
    v37 = *(unsigned __int8 *)(a2 + 23);
    v38 = *(_QWORD *)(a2 + 8);
    if ((v37 & 0x80u) == 0)
      v39 = *(unsigned __int8 *)(a2 + 23);
    else
      v39 = *(_QWORD *)(a2 + 8);
    v40 = v95;
    if ((v95 & 0x80u) == 0)
      v41 = v95;
    else
      v41 = (size_t)v94[1];
    v21 = v39 >= v41;
    v42 = v39 - v41;
    if (!v21)
      goto LABEL_61;
    if ((v37 & 0x80) != 0)
    {
      if (v41 == -1 || v38 < v42)
LABEL_197:
        std::string::__throw_out_of_range[abi:ne180100]();
      if (v38 - v42 >= v41)
        v63 = v41;
      else
        v63 = v38 - v42;
      v64 = *(_QWORD *)a2;
    }
    else
    {
      if (v41 == -1)
        goto LABEL_197;
      v21 = v37 >= v42;
      v62 = v37 - v42;
      if (!v21)
        goto LABEL_197;
      if (v62 >= v41)
        v63 = v41;
      else
        v63 = v62;
      v64 = a2;
    }
    if ((v95 & 0x80u) == 0)
      v78 = v94;
    else
      v78 = (void **)v94[0];
    v79 = memcmp((const void *)(v64 + v42), v78, v63);
    if (v63 == v41 && !v79)
    {
      v55 = 1;
      if ((v40 & 0x80) == 0)
      {
LABEL_86:
        if ((v97 & 0x80) == 0)
          goto LABEL_87;
        goto LABEL_136;
      }
LABEL_85:
      operator delete(v94[0]);
      goto LABEL_86;
    }
LABEL_61:
    std::string::basic_string[abi:ne180100]<0>(v92, ".espresso/code.nitroir");
    v43 = *(unsigned __int8 *)(a2 + 23);
    v44 = *(_QWORD *)(a2 + 8);
    if ((v43 & 0x80u) == 0)
      v45 = *(unsigned __int8 *)(a2 + 23);
    else
      v45 = *(_QWORD *)(a2 + 8);
    v46 = v93;
    if ((v93 & 0x80u) == 0)
      v47 = v93;
    else
      v47 = (size_t)v92[1];
    v21 = v45 >= v47;
    v48 = v45 - v47;
    if (!v21)
      goto LABEL_68;
    if ((v43 & 0x80) != 0)
    {
      if (v47 == -1 || v44 < v48)
LABEL_198:
        std::string::__throw_out_of_range[abi:ne180100]();
      if (v44 - v48 >= v47)
        v66 = v47;
      else
        v66 = v44 - v48;
      v67 = *(_QWORD *)a2;
    }
    else
    {
      if (v47 == -1)
        goto LABEL_198;
      v21 = v43 >= v48;
      v65 = v43 - v48;
      if (!v21)
        goto LABEL_198;
      if (v65 >= v47)
        v66 = v47;
      else
        v66 = v65;
      v67 = a2;
    }
    if ((v93 & 0x80u) == 0)
      v80 = v92;
    else
      v80 = (void **)v92[0];
    v81 = memcmp((const void *)(v67 + v48), v80, v66);
    if (v66 == v47 && !v81)
    {
      v55 = 1;
      if ((v46 & 0x80) == 0)
      {
LABEL_84:
        if ((v95 & 0x80) == 0)
          goto LABEL_86;
        goto LABEL_85;
      }
LABEL_83:
      operator delete(v92[0]);
      goto LABEL_84;
    }
LABEL_68:
    std::string::basic_string[abi:ne180100]<0>(v90, ".espresso.net");
    v49 = *(unsigned __int8 *)(a2 + 23);
    v50 = *(_QWORD *)(a2 + 8);
    if ((v49 & 0x80u) == 0)
      v51 = *(unsigned __int8 *)(a2 + 23);
    else
      v51 = *(_QWORD *)(a2 + 8);
    v52 = v91;
    if ((v91 & 0x80u) == 0)
      v53 = v91;
    else
      v53 = (size_t)v90[1];
    v21 = v51 >= v53;
    v54 = v51 - v53;
    if (!v21)
      goto LABEL_75;
    if ((v49 & 0x80) != 0)
    {
      if (v53 == -1 || v50 < v54)
LABEL_199:
        std::string::__throw_out_of_range[abi:ne180100]();
      if (v50 - v54 >= v53)
        v69 = v53;
      else
        v69 = v50 - v54;
      v70 = *(_QWORD *)a2;
    }
    else
    {
      if (v53 == -1)
        goto LABEL_199;
      v21 = v49 >= v54;
      v68 = v49 - v54;
      if (!v21)
        goto LABEL_199;
      if (v68 >= v53)
        v69 = v53;
      else
        v69 = v68;
      v70 = a2;
    }
    if ((v91 & 0x80u) == 0)
      v82 = v90;
    else
      v82 = (void **)v90[0];
    v83 = memcmp((const void *)(v70 + v54), v82, v69);
    if (v69 == v53 && !v83)
    {
      v55 = 1;
      if ((v52 & 0x80) != 0)
LABEL_81:
        operator delete(v90[0]);
LABEL_82:
      if ((v93 & 0x80) == 0)
        goto LABEL_84;
      goto LABEL_83;
    }
LABEL_75:
    std::string::basic_string[abi:ne180100]<0>(v88, ".bundle");
    if (kaldi::EndsWith((uint64_t **)a2, v88) || kaldi::quasar::isEspressoV2Mil((uint64_t *)a2))
    {
      v55 = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v86, ".pb");
      if (kaldi::EndsWith((uint64_t **)a2, v86))
      {
        v55 = 1;
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v84, ".mlmodelc");
        v55 = kaldi::EndsWith((uint64_t **)a2, v84);
        if (v85 < 0)
          operator delete(v84[0]);
      }
      if (v87 < 0)
        operator delete(v86[0]);
    }
    if (v89 < 0)
      operator delete(v88[0]);
    if ((v91 & 0x80) != 0)
      goto LABEL_81;
    goto LABEL_82;
  }
  __p[0] = v100;
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 6), (unsigned __int8 *)v100, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
  *a7 = *((_QWORD *)v12 + 5);
  v13 = *((_QWORD *)v12 + 6);
  a7[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
LABEL_146:
  if (v101 < 0)
    operator delete(v100[0]);
}

void sub_1ADF6D064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;
  uint64_t v48;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  if (a35 < 0)
    operator delete(a30);
  if (a41 < 0)
    operator delete(a36);
  if (a47 < 0)
    operator delete(a42);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v47);
  if (*(char *)(v48 - 89) < 0)
    operator delete(*(void **)(v48 - 112));
  _Unwind_Resume(a1);
}

uint64_t quasar::MakeCacheKey<std::string,BOOL,BOOL>(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v6);
  v2 = *(char *)(a1 + 23);
  if (v2 >= 0)
    v3 = a1;
  else
    v3 = *(_QWORD *)a1;
  if (v2 >= 0)
    v4 = *(unsigned __int8 *)(a1 + 23);
  else
    v4 = *(_QWORD *)(a1 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v3, v4);
  std::ostream::operator<<();
  std::ostream::operator<<();
  std::stringbuf::str();
  v6[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v6 + *(_QWORD *)(v6[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v6[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v8);
}

void sub_1ADF6D24C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL quasar::ModelLoader::EmbeddedMlockContext::IsOne(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v7;

  v2 = a2[23];
  if ((v2 & 0x80u) == 0)
    v3 = a2[23];
  else
    v3 = *((_QWORD *)a2 + 1);
  v4 = a1[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a1 + 1);
  if (v3 != v4)
    return 0;
  if (v5 >= 0)
    v7 = a1;
  else
    v7 = *(unsigned __int8 **)a1;
  if ((v2 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a2, v7, *((_QWORD *)a2 + 1)))
      return *((float *)a1 + 6) == 1.0;
    return 0;
  }
  if (a2[23])
  {
    while (*a2 == *v7)
    {
      ++a2;
      ++v7;
      if (!--v2)
        return *((float *)a1 + 6) == 1.0;
    }
    return 0;
  }
  return *((float *)a1 + 6) == 1.0;
}

unsigned __int8 *quasar::ModelLoader::readAcousticEncoder@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unsigned __int8 *result;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 *v15;

  v5 = a1 + 88;
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 88), (unsigned __int8 *)a2))
  {
    std::allocate_shared[abi:ne180100]<kaldi::quasar::CEAcousticEncoderNet,std::allocator<kaldi::quasar::CEAcousticEncoderNet>,std::string const&,void>(&v14);
    v15 = a2;
    v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v15);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(v10 + 40), &v14);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
    if (*((_QWORD *)&v14 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  *(_QWORD *)&v14 = a2;
  result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v14);
  v7 = *((_QWORD *)result + 6);
  *a3 = *((_QWORD *)result + 5);
  a3[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

void sub_1ADF6D404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void quasar::ModelLoader::readFeedForwardNetwork(_QWORD *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, unsigned __int8 a4@<W3>, int a5@<W4>, unsigned __int8 a6@<W5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  size_t v20;
  unint64_t v21;
  _BOOL4 v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  BOOL v29;
  int v30;
  size_t v31;
  size_t v32;
  uint64_t v33;
  void **v35;
  int v36;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  _QWORD *v45;
  unsigned __int8 *v46;
  std::__shared_weak_count *v47;
  void *__p[2];
  unsigned __int8 v49;

  *a8 = 0;
  a8[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, ".mlmodelc");
  v16 = *(unsigned __int8 *)(a2 + 23);
  v17 = *(_QWORD *)(a2 + 8);
  if ((v16 & 0x80u) == 0)
    v18 = *(unsigned __int8 *)(a2 + 23);
  else
    v18 = *(_QWORD *)(a2 + 8);
  v19 = (char)v49;
  if ((v49 & 0x80u) == 0)
    v20 = v49;
  else
    v20 = (size_t)__p[1];
  v29 = v18 >= v20;
  v21 = v18 - v20;
  if (!v29)
  {
    v22 = 0;
    if (((char)v49 & 0x80000000) == 0)
      goto LABEL_9;
LABEL_43:
    operator delete(__p[0]);
    if (v22)
      goto LABEL_10;
    goto LABEL_44;
  }
  v45 = a1;
  v26 = a6;
  v27 = a3;
  v28 = a4;
  if ((v16 & 0x80) != 0)
  {
    if (v20 == -1 || v17 < v21)
LABEL_58:
      std::string::__throw_out_of_range[abi:ne180100]();
    v30 = a5;
    if (v17 - v21 >= v20)
      v32 = v20;
    else
      v32 = v17 - v21;
    v33 = *(_QWORD *)a2;
  }
  else
  {
    v29 = v20 != -1 && v16 >= v21;
    if (!v29)
      goto LABEL_58;
    v30 = a5;
    v31 = v16 - v21;
    if (v31 >= v20)
      v32 = v20;
    else
      v32 = v31;
    v33 = a2;
  }
  if ((v49 & 0x80u) == 0)
    v35 = __p;
  else
    v35 = (void **)__p[0];
  v36 = memcmp((const void *)(v33 + v21), v35, v32);
  v22 = v32 == v20 && v36 == 0;
  a5 = v30;
  a4 = v28;
  a3 = v27;
  a6 = v26;
  a1 = v45;
  if (v19 < 0)
    goto LABEL_43;
LABEL_9:
  if (v22)
  {
LABEL_10:
    quasar::ModelLoader::readCoreMLModel((uint64_t)a1, (unsigned __int8 *)a2, a6, __p);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a8, (__int128 *)__p);
    v23 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      return;
    v24 = (unint64_t *)((char *)__p[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    goto LABEL_55;
  }
LABEL_44:
  v38 = *(std::__shared_weak_count **)(a7 + 8);
  v46 = *(unsigned __int8 **)a7;
  v47 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(p_shared_owners);
    while (__stxr(v40 + 1, p_shared_owners));
  }
  quasar::ModelLoader::readNeuralNetwork(a1, a2, a3, a4, a5, &v46, (uint64_t *)__p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a8, (__int128 *)__p);
  v41 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v42 = (unint64_t *)((char *)__p[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v23 = v47;
  if (v47)
  {
    v44 = (unint64_t *)&v47->__shared_owners_;
    do
      v25 = __ldaxr(v44);
    while (__stlxr(v25 - 1, v44));
LABEL_55:
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_1ADF6D670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void quasar::ModelLoader::readCoreMLModel(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, unsigned __int8 a3@<W2>, _QWORD *a4@<X8>)
{
  std::mutex *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __n128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  __int128 v29;
  unsigned __int8 *v30;

  v8 = (std::mutex *)(a1 + 512);
  std::mutex::lock((std::mutex *)(a1 + 512));
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 288), a2))
  {
    *(_QWORD *)&v29 = a2;
    v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 288, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v29);
    v10 = *((_QWORD *)v9 + 6);
    *a4 = *((_QWORD *)v9 + 5);
    a4[1] = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
  }
  else
  {
    v13 = *(std::__shared_weak_count **)(a1 + 504);
    v27 = *(_QWORD *)(a1 + 496);
    v28 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v16.n128_f64[0] = kaldi::ReadCoreMLModelNet((__int128 *)a2, a3, &v27, &v29);
    v17 = v28;
    if (v28)
    {
      v18 = (unint64_t *)&v28->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v17->__on_zero_shared)(v17, v16);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v30 = a2;
    v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 288, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v30);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)v20 + 5, (uint64_t *)&v29);
    v21 = *((_QWORD *)&v29 + 1);
    *a4 = v29;
    a4[1] = v21;
    if (v21)
    {
      v22 = (unint64_t *)(v21 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
      if (*((_QWORD *)&v29 + 1))
      {
        v25 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
  }
  std::mutex::unlock(v8);
}

void sub_1ADF6D838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::mutex *v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::mutex::unlock(v3);
  _Unwind_Resume(a1);
}

void quasar::ModelLoader::readNeuralNetworkLm(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t *v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t *v43;
  unsigned __int8 *v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  void *__p[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  kaldi::InferenceNetItf *v65;
  __int128 v66;
  unsigned __int8 *v67[2];
  unsigned __int8 *v68[2];
  kaldi::InferenceNetItf *v69;
  kaldi::InferenceNetItf *v70;
  __int128 v71;
  kaldi::InferenceNetItf *v72;
  std::__shared_weak_count *v73;
  unsigned __int8 *v74[2];
  uint64_t v75[3];
  std::string v76;
  std::string v77;
  void *v78[2];
  char v79;
  int v80;
  float v81;

  v81 = a7;
  v80 = a5;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v77 = *(std::string *)a2;
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v76 = *(std::string *)a3;
  quasar::MakeCacheKey<std::string,std::string,BOOL,float,int>((uint64_t)&v77, (uint64_t)&v76);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1 + 21, (unsigned __int8 *)v78))
  {
    *a6 = 0;
    a6[1] = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, ":");
    quasar::splitAndTrimNoEmpty((const std::string *)a2, (char *)__p, v75);
    if (SBYTE7(v49) < 0)
      operator delete(__p[0]);
    v16 = v75[0];
    v17 = 0xAAAAAAAAAAAAAAABLL * ((v75[1] - v75[0]) >> 3);
    if (v17 != 2)
    {
      if (v17 != 1)
      {
        if ((quasar::gLogLevel & 0x80000000) == 0)
        {
          v63 = 0u;
          v64 = 0u;
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          v49 = 0u;
          v50 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Malformed LM neural network file name, fileBasename=", 52);
          v25 = *(char *)(a2 + 23);
          if (v25 >= 0)
            v26 = a2;
          else
            v26 = *(_QWORD *)a2;
          if (v25 >= 0)
            v27 = *(unsigned __int8 *)(a2 + 23);
          else
            v27 = *(_QWORD *)(a2 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
          quasar::QuasarFatalMessage::~QuasarFatalMessage((quasar::QuasarFatalMessage *)__p);
        }
        goto LABEL_81;
      }
      v74[0] = 0;
      v74[1] = 0;
      quasar::ModelLoader::readNeuralNetwork(a1, a2, a4, 1u, 0, v74, (uint64_t *)__p);
      quasar::ModelLoader::readNnetWordMap(a1, a2, a3, (uint64_t *)&v72);
      if ((*(unsigned int (**)(void *))(*(_QWORD *)__p[0] + 168))(__p[0]))
      {
        *(_QWORD *)&v66 = v72;
        v69 = 0;
        v70 = (kaldi::InferenceNetItf *)__p[0];
        std::allocate_shared[abi:ne180100]<kaldi::quasar::FofeLmEvaluator,std::allocator<kaldi::quasar::FofeLmEvaluator>,kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,decltype(nullptr),float &,int &,void>((const kaldi::quasar::NnlmDecoderWord **)&v66, &v70, (uint64_t)&v69, &v81, &v80, &v71);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a6, &v71);
        v18 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
        if (*((_QWORD *)&v71 + 1))
        {
          v19 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
          goto LABEL_69;
        }
LABEL_71:
        v40 = v73;
        if (v73)
        {
          p_shared_owners = (unint64_t *)&v73->__shared_owners_;
          do
            v42 = __ldaxr(p_shared_owners);
          while (__stlxr(v42 - 1, p_shared_owners));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        v35 = (std::__shared_weak_count *)__p[1];
        if (!__p[1])
          goto LABEL_81;
        v43 = (unint64_t *)((char *)__p[1] + 8);
        do
          v37 = __ldaxr(v43);
        while (__stlxr(v37 - 1, v43));
LABEL_79:
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
LABEL_81:
        v72 = (kaldi::InferenceNetItf *)v78;
        v44 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 21), (unsigned __int8 *)v78, (uint64_t)&std::piecewise_construct, (__int128 **)&v72);
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)v44 + 5, a6);
        v45 = a1 + 56;
        v46 = a1[57];
        if (v46 >= a1[58])
        {
          v47 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v45, (__int128 *)a2);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v45, (__int128 *)a2);
          v47 = v46 + 24;
        }
        a1[57] = v47;
        __p[0] = v75;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        goto LABEL_85;
      }
      if ((*(unsigned int (**)(void *))(*(_QWORD *)__p[0] + 160))(__p[0]))
      {
        *(_QWORD *)&v66 = v72;
        v69 = 0;
        v70 = (kaldi::InferenceNetItf *)__p[0];
        std::allocate_shared[abi:ne180100]<kaldi::quasar::RnnlmEvaluator,std::allocator<kaldi::quasar::RnnlmEvaluator>,kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,decltype(nullptr),float &,int &,void>((const kaldi::quasar::NnlmDecoderWord **)&v66, &v70, (uint64_t)&v69, &v81, &v80, &v71);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a6, &v71);
        v18 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
        if (!*((_QWORD *)&v71 + 1))
          goto LABEL_71;
        v38 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
        do
          v20 = __ldaxr(v38);
        while (__stlxr(v20 - 1, v38));
      }
      else
      {
        *(_QWORD *)&v66 = v72;
        v69 = 0;
        v70 = (kaldi::InferenceNetItf *)__p[0];
        std::allocate_shared[abi:ne180100]<kaldi::quasar::DnnlmEvaluator,std::allocator<kaldi::quasar::DnnlmEvaluator>,kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,decltype(nullptr),float &,void>((const kaldi::quasar::NnlmDecoderWord **)&v66, &v70, (uint64_t)&v69, &v81, &v71);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a6, &v71);
        v18 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
        if (!*((_QWORD *)&v71 + 1))
          goto LABEL_71;
        v39 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
        do
          v20 = __ldaxr(v39);
        while (__stlxr(v20 - 1, v39));
      }
LABEL_69:
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      goto LABEL_71;
    }
    v68[0] = 0;
    v68[1] = 0;
    quasar::ModelLoader::readNeuralNetwork(a1, v75[0], a4, 1u, 0, v68, (uint64_t *)__p);
    v67[0] = 0;
    v67[1] = 0;
    quasar::ModelLoader::readNeuralNetwork(a1, v16 + 24, a4, 1u, 0, v67, (uint64_t *)&v72);
    quasar::ModelLoader::readNnetWordMap(a1, a2, a3, (uint64_t *)&v71);
    if ((*(unsigned int (**)(void *))(*(_QWORD *)__p[0] + 168))(__p[0])
      && (*(unsigned int (**)(kaldi::InferenceNetItf *))(*(_QWORD *)v72 + 168))(v72))
    {
      v69 = (kaldi::InferenceNetItf *)__p[0];
      v70 = (kaldi::InferenceNetItf *)v71;
      v65 = v72;
      std::allocate_shared[abi:ne180100]<kaldi::quasar::FofeLmEvaluator,std::allocator<kaldi::quasar::FofeLmEvaluator>,kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,kaldi::InferenceNetItf *,float &,int &,void>(&v70, &v69, &v65, &v81, &v80, &v66);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a6, &v66);
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
      if (*((_QWORD *)&v66 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        goto LABEL_45;
      }
    }
    else if ((*(unsigned int (**)(void *))(*(_QWORD *)__p[0] + 160))(__p[0])
           && (*(unsigned int (**)(kaldi::InferenceNetItf *))(*(_QWORD *)v72 + 160))(v72))
    {
      v69 = (kaldi::InferenceNetItf *)__p[0];
      v70 = (kaldi::InferenceNetItf *)v71;
      v65 = v72;
      std::allocate_shared[abi:ne180100]<kaldi::quasar::RnnlmEvaluator,std::allocator<kaldi::quasar::RnnlmEvaluator>,kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,kaldi::InferenceNetItf *,float &,int &,void>(&v70, &v69, &v65, &v81, &v80, &v66);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a6, &v66);
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v66);
    }
    else
    {
      v69 = (kaldi::InferenceNetItf *)__p[0];
      v70 = (kaldi::InferenceNetItf *)v71;
      v65 = v72;
      std::allocate_shared[abi:ne180100]<kaldi::quasar::DnnlmEvaluator,std::allocator<kaldi::quasar::DnnlmEvaluator>,kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,kaldi::InferenceNetItf *,float &,void>(&v70, &v69, &v65, &v81, &v66);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a6, &v66);
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v66 + 1);
      if (*((_QWORD *)&v66 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v66 + 1) + 8);
        do
          v23 = __ldaxr(v28);
        while (__stlxr(v23 - 1, v28));
LABEL_45:
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
    if (*((_QWORD *)&v71 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    v32 = v73;
    if (v73)
    {
      v33 = (unint64_t *)&v73->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_81;
    v36 = (unint64_t *)((char *)__p[1] + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    goto LABEL_79;
  }
  __p[0] = v78;
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 21), (unsigned __int8 *)v78, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
  *a6 = *((_QWORD *)v12 + 5);
  v13 = *((_QWORD *)v12 + 6);
  a6[1] = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
LABEL_85:
  if (v79 < 0)
    operator delete(v78[0]);
}

void sub_1ADF6DF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,char a51)
{
  uint64_t v51;
  uint64_t v52;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v52 - 232);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v52 - 216);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  __p = (void *)(v52 - 184);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v51);
  if (*(char *)(v52 - 81) < 0)
    operator delete(*(void **)(v52 - 104));
  _Unwind_Resume(a1);
}

uint64_t quasar::MakeCacheKey<std::string,std::string,BOOL,float,int>(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  v4 = *(char *)(a1 + 23);
  if (v4 >= 0)
    v5 = a1;
  else
    v5 = *(_QWORD *)a1;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_QWORD *)(a1 + 8);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v5, v6);
  v8 = *(char *)(a2 + 23);
  if (v8 >= 0)
    v9 = a2;
  else
    v9 = *(_QWORD *)a2;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
  std::ostream::operator<<();
  std::ostream::operator<<();
  std::ostream::operator<<();
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v14);
}

void sub_1ADF6E198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::ModelLoader::readFstNetwork(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned __int8 *v3[2];

  v3[0] = 0;
  v3[1] = 0;
  quasar::ModelLoader::readFstNetwork(a1, a2, v3, a3);
}

void sub_1ADF6E1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void quasar::ModelLoader::readFstNetwork(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 *v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[8];
  void *v27[2];
  void *v28[2];
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[8];
  void *__p[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 *v52;

  v7 = a1 + 8;
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 8), (unsigned __int8 *)a2))
  {
    if (quasar::gLogLevel >= 5)
    {
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      *(_OWORD *)__p = 0u;
      v36 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"found object in map for fst ", 28);
      v9 = *(char *)(a2 + 23);
      if (v9 >= 0)
        v10 = a2;
      else
        v10 = *(_QWORD *)a2;
      if (v9 >= 0)
        v11 = *(unsigned __int8 *)(a2 + 23);
      else
        v11 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    __p[0] = (void *)a2;
    v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
    *a4 = *((_QWORD *)v12 + 5);
    v13 = *((_QWORD *)v12 + 6);
    a4[1] = v13;
    if (v13)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }
  else
  {
    kaldi::Input::Input(v34, a2, 0);
    v16 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)v34);
    if (*(_DWORD *)((char *)v16 + *(_QWORD *)(*v16 - 24) + 32))
    {
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      *(_OWORD *)__p = 0u;
      v36 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not open decoding-graph FST ", 34);
      v23 = *(char *)(a2 + 23);
      if (v23 >= 0)
        v24 = a2;
      else
        v24 = *(_QWORD *)a2;
      if (v23 >= 0)
        v25 = *(unsigned __int8 *)(a2 + 23);
      else
        v25 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    v29 = 0u;
    v30 = 0u;
    *(_OWORD *)v27 = 0u;
    *(_OWORD *)v28 = 0u;
    v32 = 0;
    v33 = 0;
    v31 = -1;
    v17 = kaldi::Input::Stream((kaldi::Input *)v34);
    if ((fst::FstHeader::Read((uint64_t)v26, v17, a2, 0) & 1) == 0)
    {
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      *(_OWORD *)__p = 0u;
      v36 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reading FST: error reading FST header.", 38);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    fst::FstReadOptions::FstReadOptions(__p, a2, v26, 0, 0);
    LODWORD(v38) = 2;
    if (*a3)
      DWORD2(v38) = quasar::ModelLoader::EmbeddedMlockContext::GetFraction(*a3, (unsigned __int8 *)a2);
    v18 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)v34);
    quasar::readFst(v18, (uint64_t)__p, (uint64_t *)&v52);
    v19 = v52;
    *a4 = (uint64_t)v52;
    if (v19)
    {
      v20 = (_QWORD *)operator new();
      *v20 = &unk_1E5D45BA0;
      v20[1] = 0;
      v20[2] = 0;
      v20[3] = v19;
    }
    else
    {
      v20 = 0;
    }
    a4[1] = (uint64_t)v20;
    v52 = (__int128 *)a2;
    v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v52);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)v21 + 5, a4);
    if (SBYTE7(v36) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v29) < 0)
      operator delete(v28[1]);
    if (SHIBYTE(v28[0]) < 0)
      operator delete(v27[0]);
    kaldi::Input::~Input((kaldi::Input *)v34);
  }
}

void sub_1ADF6E524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  if (a28 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a10);
  kaldi::Input::~Input((kaldi::Input *)&a22);
  _Unwind_Resume(a1);
}

float quasar::ModelLoader::EmbeddedMlockContext::GetFraction(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  float v6;
  unsigned __int8 *v8;

  v2 = a2[23];
  if ((v2 & 0x80u) == 0)
    v3 = a2[23];
  else
    v3 = *((_QWORD *)a2 + 1);
  v4 = a1[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a1 + 1);
  v6 = 0.0;
  if (v3 != v4)
    return v6;
  if (v5 >= 0)
    v8 = a1;
  else
    v8 = *(unsigned __int8 **)a1;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v8, *((_QWORD *)a2 + 1)))
      return v6;
    return *((float *)a1 + 6);
  }
  if (!a2[23])
    return *((float *)a1 + 6);
  while (*a2 == *v8)
  {
    ++a2;
    ++v8;
    if (!--v2)
      return *((float *)a1 + 6);
  }
  return v6;
}

uint64_t quasar::ModelLoader::readWordBoundaryInfo@<X0>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  std::string __p;
  std::string v24;
  void *v25[2];
  char v26;
  _QWORD v27[11];
  char v28;
  uint64_t v29;
  void **v30;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v27);
  v10 = *a2;
  v11 = a2[1];
  v12 = *((unsigned __int8 *)a2 + 8);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v24 = *(std::string *)a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  quasar::MakeCacheKey<int,int,BOOL,std::string,std::string>(v10, v11, v12 != 0, (uint64_t)&v24, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1 + 51, (unsigned __int8 *)v25);
  if (v13)
  {
    *a5 = *((_QWORD *)v13 + 5);
    v14 = *((_QWORD *)v13 + 6);
    a5[1] = v14;
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
  }
  else
  {
    std::allocate_shared[abi:ne180100]<kaldi::WordBoundaryInfo,std::allocator<kaldi::WordBoundaryInfo>,kaldi::WordBoundaryInfoNewOpts const&,std::string const&,std::string const&,void>((uint64_t)a2, a3, a4, a5);
    v30 = v25;
    v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 51), (unsigned __int8 *)v25, (uint64_t)&std::piecewise_construct, (__int128 **)&v30);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)v17 + 5, a5);
    v18 = a1[57];
    if (v18 >= a1[58])
    {
      v19 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a1 + 56, (__int128 *)a3);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)(a1 + 56), (__int128 *)a3);
      v19 = v18 + 24;
    }
    a1[57] = v19;
    v20 = *(unsigned __int8 *)(a4 + 23);
    if ((v20 & 0x80u) != 0)
      v20 = *(_QWORD *)(a4 + 8);
    if (v20)
    {
      if (v19 >= a1[58])
      {
        v21 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a1 + 56, (__int128 *)a4);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)(a1 + 56), (__int128 *)a4);
        v21 = v19 + 24;
      }
      a1[57] = v21;
    }
  }
  if (v26 < 0)
    operator delete(v25[0]);
  v27[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v27 + *(_QWORD *)(v27[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v27[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v28 < 0)
    operator delete((void *)v27[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v29);
}

void sub_1ADF6E8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a21 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t quasar::MakeCacheKey<int,int,BOOL,std::string,std::string>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  std::ostream::operator<<();
  std::ostream::operator<<();
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = *(char *)(a4 + 23);
  if (v8 >= 0)
    v9 = a4;
  else
    v9 = *(_QWORD *)a4;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a4 + 23);
  else
    v10 = *(_QWORD *)(a4 + 8);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
  v12 = *(char *)(a5 + 23);
  if (v12 >= 0)
    v13 = a5;
  else
    v13 = *(_QWORD *)a5;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a5 + 23);
  else
    v14 = *(_QWORD *)(a5 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
  std::stringbuf::str();
  v16[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v16[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v18);
}

void sub_1ADF6EA40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::ModelLoader::writeFst(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[17];
  uint64_t v14;
  _QWORD v15[51];
  _QWORD v16[20];

  v16[19] = *MEMORY[0x1E0C80C00];
  std::ofstream::basic_ofstream(&v14);
  if (!v15[15])
  {
    memset(v13, 0, sizeof(v13));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Writing FST: unable to open file to write: ", 43);
    v10 = *(char *)(a4 + 23);
    if (v10 >= 0)
      v11 = a4;
    else
      v11 = *(_QWORD *)a4;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(a4 + 23);
    else
      v12 = *(_QWORD *)(a4 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v13);
  }
  quasar::ModelLoader::writeFst(a1, a2, a3, &v14);
  v14 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x1AF44CA70](v15);
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](v16);
}

void sub_1ADF6EBA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ModelLoader::writeFst(uint64_t a1, uint64_t a2, _BYTE *a3, _QWORD *a4)
{
  int v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  uint64_t result;
  int v28;
  _QWORD *v29;
  _OWORD v30[3];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v8 = *(unsigned __int8 *)(a2 + 23);
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned __int8 *)(a2 + 23) > 0xEu)
    {
      if (v8 != 15)
      {
        v9 = (uint64_t *)a2;
        if (v8 != 16)
        {
          if (v8 != 18)
            goto LABEL_78;
          v10 = *(_QWORD *)a2 == 0x5F64656375646572 && *(_QWORD *)(a2 + 8) == 0x637564736E617274;
          if (!v10 || *(_WORD *)(a2 + 16) != 29285)
            goto LABEL_78;
LABEL_85:
          fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::ReducedFst(v30, a1);
          fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::WriteFst<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>(v30, a4, a3);
          goto LABEL_95;
        }
        goto LABEL_48;
      }
      if (*(_QWORD *)a2 != 0x75715F6D6172676ELL || *(_QWORD *)(a2 + 7) != 0x64657A69746E6175)
      {
LABEL_78:
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a2, "reduced_quantized_transducer"))
        {
          fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::ReducedFst(v30, a1);
          fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::WriteFst<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>(v30, a4, a3);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a2, "reduced_quantized_acceptor"))
        {
          fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::ReducedFst(v30, a1);
          fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::WriteFst<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>(v30, a4, a3);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a2, "squeezed_transducer"))
        {
          fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::SqueezedFst(v30, a1);
          fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::WriteFst<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>((uint64_t)v30, a4, a3);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a2, "squeezed_acceptor"))
        {
          fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::SqueezedFst(v30, a1);
          fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::WriteFst<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>((uint64_t)v30, a4, a3);
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a2, "squeezed_quantized_transducer"))
        {
          fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::SqueezedFst(v30, a1);
          fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::WriteFst<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>((uint64_t)v30, a4, a3);
        }
        else
        {
          if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a2, "squeezed_quantized_acceptor"))
          {
            v43 = 0u;
            v44 = 0u;
            v41 = 0u;
            v42 = 0u;
            v39 = 0u;
            v40 = 0u;
            v37 = 0u;
            v38 = 0u;
            v35 = 0u;
            v36 = 0u;
            v33 = 0u;
            v34 = 0u;
            v31 = 0u;
            v32 = 0u;
            memset(v30, 0, sizeof(v30));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
            v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Writing FST: unsupported FST type: ", 35);
            std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v29, a2);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v30);
          }
          fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::SqueezedFst(v30, a1);
          fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::WriteFst<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>((uint64_t)v30, a4, a3);
        }
        goto LABEL_95;
      }
      goto LABEL_67;
    }
    if (v8 != 5)
    {
      if (v8 != 6)
        goto LABEL_78;
      if (*(_DWORD *)a2 != 1952671094 || *(_WORD *)(a2 + 4) != 29295)
        goto LABEL_78;
LABEL_61:
      fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(v30, a1);
      fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::WriteFst<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>(v30, a4, (uint64_t)a3);
      goto LABEL_95;
    }
    if (*(_DWORD *)a2 != 1936617315 || *(_BYTE *)(a2 + 4) != 116)
    {
      if (*(_DWORD *)a2 != 1634887534 || *(_BYTE *)(a2 + 4) != 109)
        goto LABEL_78;
      goto LABEL_90;
    }
LABEL_84:
    fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::ConstFst(v30, a1);
    fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::WriteFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>(v30, a4, (uint64_t)a3);
    goto LABEL_95;
  }
  v12 = *(_QWORD *)(a2 + 8);
  if (v12 != 5)
  {
    if (v12 == 6 && **(_DWORD **)a2 == 1952671094 && *(_WORD *)(*(_QWORD *)a2 + 4) == 29295)
      goto LABEL_61;
    goto LABEL_31;
  }
  if (**(_DWORD **)a2 == 1936617315 && *(_BYTE *)(*(_QWORD *)a2 + 4) == 116)
    goto LABEL_84;
  v12 = *(_QWORD *)(a2 + 8);
  if (v12 != 5)
  {
LABEL_31:
    if (v12 == 15)
    {
      if (**(_QWORD **)a2 == 0x75715F6D6172676ELL && *(_QWORD *)(*(_QWORD *)a2 + 7) == 0x64657A69746E6175)
      {
LABEL_67:
        fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::NGramFst((uint64_t)v30, a1);
        fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Write(*((uint64_t *)&v30[0] + 1), a4, a3);
        *(_QWORD *)&v30[0] = &unk_1E5D22C38;
        if (*((_QWORD *)&v31 + 1))
        {
          *(_QWORD *)&v32 = *((_QWORD *)&v31 + 1);
          operator delete(*((void **)&v31 + 1));
        }
        goto LABEL_95;
      }
      v12 = *(_QWORD *)(a2 + 8);
    }
    if (v12 == 18)
    {
      if (**(_QWORD **)a2 == 0x5F64656375646572
        && *(_QWORD *)(*(_QWORD *)a2 + 8) == 0x637564736E617274
        && *(_WORD *)(*(_QWORD *)a2 + 16) == 29285)
      {
        goto LABEL_85;
      }
      v12 = *(_QWORD *)(a2 + 8);
    }
    if (v12 != 16)
      goto LABEL_78;
    v9 = *(uint64_t **)a2;
LABEL_48:
    v19 = *v9;
    v20 = v9[1];
    if (v19 == 0x5F64656375646572 && v20 == 0x726F747065636361)
    {
      fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::ReducedFst(v30, a1);
      fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::WriteFst<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>(v30, a4, a3);
      goto LABEL_95;
    }
    goto LABEL_78;
  }
  if (**(_DWORD **)a2 != 1634887534 || *(_BYTE *)(*(_QWORD *)a2 + 4) != 109)
  {
    if ((v8 & 0x80) == 0)
      goto LABEL_78;
    goto LABEL_31;
  }
LABEL_90:
  fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::NGramFst((uint64_t)v30, a1);
  fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Write(*((uint64_t *)&v30[0] + 1), a4, a3);
  *(_QWORD *)&v30[0] = &unk_1E5D22B80;
  if (*((_QWORD *)&v31 + 1))
  {
    *(_QWORD *)&v32 = *((_QWORD *)&v31 + 1);
    operator delete(*((void **)&v31 + 1));
  }
LABEL_95:
  *(_QWORD *)&v30[0] = v22 + 16;
  result = *((_QWORD *)&v30[0] + 1);
  if (*((_QWORD *)&v30[0] + 1))
  {
    v28 = *(_DWORD *)(*((_QWORD *)&v30[0] + 1) + 56) - 1;
    *(_DWORD *)(*((_QWORD *)&v30[0] + 1) + 56) = v28;
    if (!v28)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1ADF6F1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    fst::Compose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>();
  _Unwind_Resume(exception_object);
}

void quasar::ModelLoader::readTransitionModel(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  std::vector<int> *v14;
  uint64_t *v15;
  unsigned __int8 *v16;
  _BYTE v17[14];
  unsigned __int8 v18;
  unsigned __int8 *v19;

  v7 = 208;
  if (a3)
    v7 = 248;
  v8 = a1 + v7;
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + v7), a2);
  if (v9)
  {
    *a4 = *((_QWORD *)v9 + 5);
    v10 = *((_QWORD *)v9 + 6);
    a4[1] = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
  }
  else
  {
    v13 = (char *)operator new(0x110uLL);
    *((_QWORD *)v13 + 2) = 0;
    *(_QWORD *)v13 = &unk_1E5D41648;
    *((_QWORD *)v13 + 1) = 0;
    *(_OWORD *)(v13 + 40) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    *(_OWORD *)(v13 + 88) = 0u;
    *(_OWORD *)(v13 + 104) = 0u;
    *(_OWORD *)(v13 + 120) = 0u;
    *(_OWORD *)(v13 + 136) = 0u;
    *(_OWORD *)(v13 + 152) = 0u;
    *(_OWORD *)(v13 + 168) = 0u;
    *(_OWORD *)(v13 + 184) = 0u;
    *(_OWORD *)(v13 + 200) = 0u;
    *(_OWORD *)(v13 + 216) = 0u;
    *(_OWORD *)(v13 + 232) = 0u;
    *(_OWORD *)(v13 + 248) = 0u;
    a4[1] = (uint64_t)v13;
    *(_OWORD *)(v13 + 24) = 0u;
    *a4 = (uint64_t)(v13 + 24);
    v18 = 0;
    kaldi::Input::Input(v17, a2, &v18);
    v14 = (std::vector<int> *)*a4;
    v15 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v17);
    kaldi::TransitionModel::Read(v14, v15, v18, a3);
    v19 = a2;
    v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v19);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)v16 + 5, a4);
    kaldi::Input::~Input((kaldi::Input *)v17);
  }
}

void sub_1ADF6F4A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *quasar::ModelLoader::readContextDependency@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  unsigned __int8 *result;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned __int8 *v13;
  unsigned __int8 v14;
  unsigned __int8 *v15;

  v5 = a1 + 328;
  result = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 328), a2);
  if (result)
  {
    *a3 = *((_QWORD *)result + 5);
    v7 = *((_QWORD *)result + 6);
    a3[1] = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
  }
  else
  {
    v10 = operator new(0x30uLL);
    v10[2] = 0;
    *v10 = &unk_1E5D41728;
    v10[1] = 0;
    v10[4] = 0;
    v10[5] = 0;
    v10[3] = off_1E5D2A4D0;
    v11 = (uint64_t)(v10 + 3);
    *a3 = (uint64_t)(v10 + 3);
    a3[1] = (uint64_t)v10;
    v14 = 0;
    kaldi::Input::Input(&v15, a2, &v14);
    v12 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)&v15);
    kaldi::ContextDependency::Read(v11, v12, v14);
    kaldi::Input::~Input((kaldi::Input *)&v15);
    v15 = a2;
    v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v15);
    return (unsigned __int8 *)std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)v13 + 5, a3);
  }
  return result;
}

void sub_1ADF6F5C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::ModelLoader::readSymbolTable@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t *v25;
  unsigned __int8 *v26;
  const char *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  int *v37;
  char *v38;
  size_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  stat v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;

  v9 = a1 + 368;
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 368), (unsigned __int8 *)a2))
  {
    if (quasar::gLogLevel >= 5)
    {
      v62 = 0u;
      v63 = 0u;
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v47 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"found object in map for symbol table ", 37);
      v11 = *(char *)(a2 + 23);
      if (v11 >= 0)
        v12 = a2;
      else
        v12 = *(_QWORD *)a2;
      if (v11 >= 0)
        v13 = *(unsigned __int8 *)(a2 + 23);
      else
        v13 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v47);
    }
    *(_QWORD *)&v47 = a2;
    result = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v47);
    v15 = result;
    if (a4)
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 40) + 144))(*(_QWORD *)(result + 40));
      if ((result & 1) == 0)
      {
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v47 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Requested SymbolTable implementation with support for efficient reverse symbol lookups, ", 88);
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"but previous call did not enforce that requirement and the result was cached. ", 78);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v35, "Use a fresh ModelLoader instance to work-around the problem.");
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v47);
      }
    }
    *a5 = *(_QWORD *)(v15 + 40);
    v16 = *(_QWORD *)(v15 + 48);
    a5[1] = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
    switch(a3)
    {
      case 1:
        quasar::SymbolMap::ReadMarisa<std::shared_ptr<fst::SymbolTable>>(a2, &v47);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a5, &v47);
        v19 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
        if (!*((_QWORD *)&v47 + 1))
          goto LABEL_39;
        v20 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        goto LABEL_37;
      case 2:
        if (a4)
        {
          quasar::SymbolMap::ReadAndSortQuasarBinary<std::shared_ptr<fst::SymbolTable>>(a2, &v47);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a5, &v47);
          v19 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
          if (!*((_QWORD *)&v47 + 1))
            goto LABEL_39;
          v24 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
          do
            v21 = __ldaxr(v24);
          while (__stlxr(v21 - 1, v24));
        }
        else
        {
          quasar::SymbolMap::ReadQuasarBinary<std::shared_ptr<fst::SymbolTable>>(a2, &v47);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a5, &v47);
          v19 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
          if (!*((_QWORD *)&v47 + 1))
            goto LABEL_39;
          v25 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
          do
            v21 = __ldaxr(v25);
          while (__stlxr(v21 - 1, v25));
        }
LABEL_37:
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
LABEL_39:
        if (!*a5)
        {
LABEL_42:
          if (*(char *)(a2 + 23) >= 0)
            v27 = (const char *)a2;
          else
            v27 = *(const char **)a2;
          if (!stat(v27, &v46))
          {
            v62 = 0uLL;
            v63 = 0uLL;
            v60 = 0uLL;
            v61 = 0uLL;
            v58 = 0uLL;
            v59 = 0uLL;
            v56 = 0uLL;
            v57 = 0uLL;
            v54 = 0uLL;
            v55 = 0uLL;
            v52 = 0uLL;
            v53 = 0uLL;
            v50 = 0uLL;
            v51 = 0uLL;
            v48 = 0uLL;
            v49 = 0uLL;
            v47 = 0uLL;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Failed to read symbol table file. ", 34);
            v28 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" bytes, table type ", 19);
            v29 = (_QWORD *)std::ostream::operator<<();
            v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", path: ", 8);
            v31 = *(char *)(a2 + 23);
            if (v31 >= 0)
              v32 = a2;
            else
              v32 = *(_QWORD *)a2;
            if (v31 >= 0)
              v33 = *(unsigned __int8 *)(a2 + 23);
            else
              v33 = *(_QWORD *)(a2 + 8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v47);
          }
          v62 = 0uLL;
          v63 = 0uLL;
          v60 = 0uLL;
          v61 = 0uLL;
          v58 = 0uLL;
          v59 = 0uLL;
          v56 = 0uLL;
          v57 = 0uLL;
          v54 = 0uLL;
          v55 = 0uLL;
          v52 = 0uLL;
          v53 = 0uLL;
          v50 = 0uLL;
          v51 = 0uLL;
          v48 = 0uLL;
          v49 = 0uLL;
          v47 = 0uLL;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v47);
          v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Failed to read symbol table file. ", 34);
          v37 = __error();
          v38 = strerror(*v37);
          v39 = strlen(v38);
          v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v38, v39);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)", table type ", 13);
          v41 = (_QWORD *)std::ostream::operator<<();
          v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)", path: ", 8);
          v43 = *(char *)(a2 + 23);
          if (v43 >= 0)
            v44 = a2;
          else
            v44 = *(_QWORD *)a2;
          if (v43 >= 0)
            v45 = *(unsigned __int8 *)(a2 + 23);
          else
            v45 = *(_QWORD *)(a2 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, v44, v45);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v47);
        }
        *(_QWORD *)&v47 = a2;
        v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::FstTokenTransform>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v47);
        result = (uint64_t)std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)v26 + 5, a5);
        break;
      case 3:
        quasar::SymbolMap::ReadFstBinary<std::shared_ptr<fst::SymbolTable>>(a2, &v47);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a5, &v47);
        v19 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
        if (!*((_QWORD *)&v47 + 1))
          goto LABEL_39;
        v22 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
        do
          v21 = __ldaxr(v22);
        while (__stlxr(v21 - 1, v22));
        goto LABEL_37;
      case 4:
        quasar::SymbolMap::ReadFstText<std::shared_ptr<fst::SymbolTable>>(a2, &v47);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a5, &v47);
        v19 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
        if (!*((_QWORD *)&v47 + 1))
          goto LABEL_39;
        v23 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
        do
          v21 = __ldaxr(v23);
        while (__stlxr(v21 - 1, v23));
        goto LABEL_37;
      default:
        goto LABEL_42;
    }
  }
  return result;
}

void sub_1ADF6FAD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a27);
  JUMPOUT(0x1ADF6FADCLL);
}

uint64_t quasar::ModelLoader::compileModel(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  void *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  size_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  void **v32;
  int v33;
  void *__p[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  std::string::basic_string[abi:ne180100]<0>(__p, ".espresso.net");
  v3 = *(unsigned __int8 *)(a2 + 23);
  v4 = *(_QWORD *)(a2 + 8);
  if ((v3 & 0x80u) == 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *(_QWORD *)(a2 + 8);
  v6 = SBYTE7(v36);
  if ((SBYTE7(v36) & 0x80u) == 0)
    v7 = (void *)BYTE7(v36);
  else
    v7 = __p[1];
  v18 = v5 >= (unint64_t)v7;
  v8 = v5 - (_QWORD)v7;
  if (!v18)
  {
    v9 = 0;
    if ((SBYTE7(v36) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
  if ((v3 & 0x80) != 0)
  {
    if (v7 == (void *)-1 || v4 < v8)
LABEL_80:
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v4 - v8 >= (unint64_t)v7)
      v20 = (size_t)v7;
    else
      v20 = v4 - v8;
    v21 = *(_QWORD *)a2;
  }
  else
  {
    v18 = v7 != (void *)-1 && v3 >= v8;
    if (!v18)
      goto LABEL_80;
    v19 = v3 - v8;
    if (v19 >= (unint64_t)v7)
      v20 = (size_t)v7;
    else
      v20 = v19;
    v21 = a2;
  }
  if ((SBYTE7(v36) & 0x80u) == 0)
    v32 = __p;
  else
    v32 = (void **)__p[0];
  v33 = memcmp((const void *)(v21 + v8), v32, v20);
  v9 = (void *)v20 == v7 && v33 == 0;
  if (v6 < 0)
LABEL_9:
    operator delete(__p[0]);
LABEL_10:
  if (v9)
  {
    if (quasar::gLogLevel >= 5)
    {
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v43 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      *(_OWORD *)__p = 0u;
      v36 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Compiling espresso model: ", 26);
      v11 = *(char *)(a2 + 23);
      if (v11 >= 0)
        v12 = a2;
      else
        v12 = *(_QWORD *)a2;
      if (v11 >= 0)
        v13 = *(unsigned __int8 *)(a2 + 23);
      else
        v13 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    if (espresso_ane_cache_has_network())
    {
      std::allocate_shared[abi:ne180100]<kaldi::quasar::CEInferenceNet,std::allocator<kaldi::quasar::CEInferenceNet>,std::string const&,void>(a2, __p);
      v27 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v28 = (unint64_t *)((char *)__p[1] + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      if (quasar::gLogLevel <= 3)
        return 1;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v43 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      *(_OWORD *)__p = 0u;
      v36 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Successfully compiled model in ANE cache: ", 42);
      v30 = *(char *)(a2 + 23);
      if (v30 >= 0)
        v16 = a2;
      else
        v16 = *(_QWORD *)a2;
      if (v30 >= 0)
        v17 = *(unsigned __int8 *)(a2 + 23);
      else
        v17 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      if (quasar::gLogLevel < 4)
        return 1;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v43 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      *(_OWORD *)__p = 0u;
      v36 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Skipping already compiled ANE model: ", 37);
      v15 = *(char *)(a2 + 23);
      if (v15 >= 0)
        v16 = a2;
      else
        v16 = *(_QWORD *)a2;
      if (v15 >= 0)
        v17 = *(unsigned __int8 *)(a2 + 23);
      else
        v17 = *(_QWORD *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    return 1;
  }
  if (quasar::gLogLevel >= 4)
  {
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v43 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    *(_OWORD *)__p = 0u;
    v36 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Model is not in espresso format: ", 33);
    v23 = *(char *)(a2 + 23);
    if (v23 >= 0)
      v24 = a2;
    else
      v24 = *(_QWORD *)a2;
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(a2 + 23);
    else
      v25 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  return 0;
}

void sub_1ADF6FE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a11);
  _Unwind_Resume(a1);
}

uint64_t quasar::ModelLoader::purgeModel(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  void *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  size_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void **v29;
  int v30;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  void *__p[2];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;

  std::string::basic_string[abi:ne180100]<0>(__p, ".espresso.net");
  v3 = *(unsigned __int8 *)(a2 + 23);
  v4 = *(_QWORD *)(a2 + 8);
  if ((v3 & 0x80u) == 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *(_QWORD *)(a2 + 8);
  v6 = SBYTE7(v42);
  if ((SBYTE7(v42) & 0x80u) == 0)
    v7 = (void *)BYTE7(v42);
  else
    v7 = __p[1];
  v19 = v5 >= (unint64_t)v7;
  v8 = v5 - (_QWORD)v7;
  if (!v19)
  {
    v9 = 0;
    if ((SBYTE7(v42) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
  if ((v3 & 0x80) != 0)
  {
    if (v7 == (void *)-1 || v4 < v8)
LABEL_86:
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v4 - v8 >= (unint64_t)v7)
      v21 = (size_t)v7;
    else
      v21 = v4 - v8;
    v22 = *(_QWORD *)a2;
  }
  else
  {
    v19 = v7 != (void *)-1 && v3 >= v8;
    if (!v19)
      goto LABEL_86;
    v20 = v3 - v8;
    if (v20 >= (unint64_t)v7)
      v21 = (size_t)v7;
    else
      v21 = v20;
    v22 = a2;
  }
  if ((SBYTE7(v42) & 0x80u) == 0)
    v29 = __p;
  else
    v29 = (void **)__p[0];
  v30 = memcmp((const void *)(v22 + v8), v29, v21);
  v9 = (void *)v21 == v7 && v30 == 0;
  if (v6 < 0)
LABEL_9:
    operator delete(__p[0]);
LABEL_10:
  if (!v9)
  {
    if (quasar::gLogLevel >= 4)
    {
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v49 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      *(_OWORD *)__p = 0u;
      v42 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Model is not in espresso format: ", 33);
      v24 = *(char *)(a2 + 23);
      if (v24 >= 0)
        v25 = a2;
      else
        v25 = *(_QWORD *)a2;
      if (v24 >= 0)
        v26 = *(unsigned __int8 *)(a2 + 23);
      else
        v26 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
      goto LABEL_46;
    }
    return 0;
  }
  if (quasar::gLogLevel >= 5)
  {
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v49 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    *(_OWORD *)__p = 0u;
    v42 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Purging espresso model: ", 24);
    v11 = *(char *)(a2 + 23);
    if (v11 >= 0)
      v12 = a2;
    else
      v12 = *(_QWORD *)a2;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a2 + 23);
    else
      v13 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  if (espresso_ane_cache_has_network())
  {
    if (quasar::gLogLevel >= 4)
    {
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v49 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      *(_OWORD *)__p = 0u;
      v42 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to check ANE cache existence, network: ", 46);
      v15 = *(char *)(a2 + 23);
      if (v15 >= 0)
        v16 = a2;
      else
        v16 = *(_QWORD *)a2;
      if (v15 >= 0)
        v17 = *(unsigned __int8 *)(a2 + 23);
      else
        v17 = *(_QWORD *)(a2 + 8);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", status: ", 10);
      std::ostream::operator<<();
LABEL_46:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      return 0;
    }
    return 0;
  }
  if (espresso_ane_cache_purge_network())
  {
    if (quasar::gLogLevel >= 2)
    {
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v49 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      *(_OWORD *)__p = 0u;
      v42 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to purge model from ANE cache, network: ", 47);
      v33 = *(char *)(a2 + 23);
      if (v33 >= 0)
        v34 = a2;
      else
        v34 = *(_QWORD *)a2;
      if (v33 >= 0)
        v35 = *(unsigned __int8 *)(a2 + 23);
      else
        v35 = *(_QWORD *)(a2 + 8);
      v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)", status: ", 10);
      std::ostream::operator<<();
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
    }
    return 0;
  }
  if (quasar::gLogLevel >= 4)
  {
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v49 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    *(_OWORD *)__p = 0u;
    v42 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Successfully purged model from ANE cache: ", 42);
    v38 = *(char *)(a2 + 23);
    if (v38 >= 0)
      v39 = a2;
    else
      v39 = *(_QWORD *)a2;
    if (v38 >= 0)
      v40 = *(unsigned __int8 *)(a2 + 23);
    else
      v40 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v39, v40);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  return 1;
}

void sub_1ADF703A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::ModelLoader::makeMilANEReadyOnLowEnd(uint64_t this)
{
  atomic_store(1u, (unsigned __int8 *)(this + 488));
  return this;
}

uint64_t quasar::ModelLoader::milIsANEReadyOnLowEnd(quasar::ModelLoader *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)this + 488);
  return v1 & 1;
}

dispatch_group_t quasar::ModelLoader::enableParallelLoading(quasar::ModelLoader *this)
{
  dispatch_group_t result;

  *((_QWORD *)this + 59) = dispatch_queue_create("backgroundLoading", 0);
  result = dispatch_group_create();
  *((_QWORD *)this + 60) = result;
  atomic_store(1u, (unsigned __int8 *)this + 489);
  return result;
}

BOOL quasar::ModelLoader::isParallelLoadingEnabled(uint64_t a1, uint64_t **a2)
{
  unsigned __int8 v2;
  _BOOL8 v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  size_t v9;
  unint64_t v10;
  BOOL v12;
  size_t v13;
  size_t v14;
  void **v16;
  int v17;
  void *__p[2];
  unsigned __int8 v20;

  v2 = atomic_load((unsigned __int8 *)(a1 + 489));
  if ((v2 & 1) == 0)
    return 0;
  std::string::basic_string[abi:ne180100]<0>(__p, ".mlmodelc");
  v5 = *((unsigned __int8 *)a2 + 23);
  v6 = (unint64_t)a2[1];
  if ((v5 & 0x80u) == 0)
    v7 = *((unsigned __int8 *)a2 + 23);
  else
    v7 = (unint64_t)a2[1];
  v8 = (char)v20;
  if ((v20 & 0x80u) == 0)
    v9 = v20;
  else
    v9 = (size_t)__p[1];
  v12 = v7 >= v9;
  v10 = v7 - v9;
  if (!v12)
  {
    v3 = 0;
    if (((char)v20 & 0x80000000) == 0)
      return v3;
LABEL_11:
    operator delete(__p[0]);
    return v3;
  }
  if ((v5 & 0x80) != 0)
  {
    if (v9 == -1 || v6 < v10)
LABEL_42:
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v6 - v10 >= v9)
      v14 = v9;
    else
      v14 = v6 - v10;
    a2 = (uint64_t **)*a2;
  }
  else
  {
    v12 = v9 != -1 && v5 >= v10;
    if (!v12)
      goto LABEL_42;
    v13 = v5 - v10;
    if (v13 >= v9)
      v14 = v9;
    else
      v14 = v13;
  }
  if ((v20 & 0x80u) == 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  v17 = memcmp((char *)a2 + v10, v16, v14);
  v3 = v14 == v9 && v17 == 0;
  if (v8 < 0)
    goto LABEL_11;
  return v3;
}

uint64_t quasar::ModelLoader::keepANEModelLoadedEnabled(uint64_t this)
{
  atomic_store(1u, (unsigned __int8 *)(this + 490));
  return this;
}

BOOL quasar::ModelLoader::isKeepANEModelLoadedEnabled(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  _BOOL8 isEspressoV2Mil;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  size_t v9;
  unint64_t v10;
  BOOL v11;
  size_t v12;
  size_t v13;
  uint64_t v14;
  void **v16;
  int v17;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 v22;
  size_t v23;
  unint64_t v24;
  size_t v26;
  size_t v27;
  uint64_t v28;
  void **v29;
  int v30;
  void *__p[2];
  unsigned __int8 v32;
  void *v33[2];
  unsigned __int8 v34;

  v2 = atomic_load((unsigned __int8 *)(a1 + 490));
  if ((v2 & 1) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v33, ".mlmodelc");
    v5 = *(unsigned __int8 *)(a2 + 23);
    v6 = *(_QWORD *)(a2 + 8);
    if ((v5 & 0x80u) == 0)
      v7 = *(unsigned __int8 *)(a2 + 23);
    else
      v7 = *(_QWORD *)(a2 + 8);
    v8 = v34;
    if ((v34 & 0x80u) == 0)
      v9 = v34;
    else
      v9 = (size_t)v33[1];
    v11 = v7 >= v9;
    v10 = v7 - v9;
    if (!v11)
      goto LABEL_37;
    if ((v5 & 0x80) != 0)
    {
      if (v9 == -1 || v6 < v10)
LABEL_72:
        std::string::__throw_out_of_range[abi:ne180100]();
      if (v6 - v10 >= v9)
        v13 = v9;
      else
        v13 = v6 - v10;
      v14 = *(_QWORD *)a2;
    }
    else
    {
      v11 = v9 != -1 && v5 >= v10;
      if (!v11)
        goto LABEL_72;
      v12 = v5 - v10;
      if (v12 >= v9)
        v13 = v9;
      else
        v13 = v12;
      v14 = a2;
    }
    if ((v34 & 0x80u) == 0)
      v16 = v33;
    else
      v16 = (void **)v33[0];
    v17 = memcmp((const void *)(v14 + v10), v16, v13);
    if (v13 == v9 && v17 == 0)
    {
      isEspressoV2Mil = 1;
      if ((v8 & 0x80) == 0)
        return isEspressoV2Mil;
      goto LABEL_47;
    }
LABEL_37:
    std::string::basic_string[abi:ne180100]<0>(__p, ".bundle");
    v19 = *(unsigned __int8 *)(a2 + 23);
    v20 = *(_QWORD *)(a2 + 8);
    if ((v19 & 0x80u) == 0)
      v21 = *(unsigned __int8 *)(a2 + 23);
    else
      v21 = *(_QWORD *)(a2 + 8);
    v22 = v32;
    if ((v32 & 0x80u) == 0)
      v23 = v32;
    else
      v23 = (size_t)__p[1];
    v11 = v21 >= v23;
    v24 = v21 - v23;
    if (!v11)
      goto LABEL_44;
    if ((v19 & 0x80) != 0)
    {
      if (v23 == -1 || v20 < v24)
LABEL_73:
        std::string::__throw_out_of_range[abi:ne180100]();
      if (v20 - v24 >= v23)
        v27 = v23;
      else
        v27 = v20 - v24;
      v28 = *(_QWORD *)a2;
    }
    else
    {
      if (v23 == -1)
        goto LABEL_73;
      v11 = v19 >= v24;
      v26 = v19 - v24;
      if (!v11)
        goto LABEL_73;
      if (v26 >= v23)
        v27 = v23;
      else
        v27 = v26;
      v28 = a2;
    }
    if ((v32 & 0x80u) == 0)
      v29 = __p;
    else
      v29 = (void **)__p[0];
    v30 = memcmp((const void *)(v28 + v24), v29, v27);
    if (v27 == v23 && !v30)
    {
      isEspressoV2Mil = 1;
      if ((v22 & 0x80) == 0)
      {
LABEL_46:
        if ((v34 & 0x80) == 0)
          return isEspressoV2Mil;
LABEL_47:
        operator delete(v33[0]);
        return isEspressoV2Mil;
      }
LABEL_45:
      operator delete(__p[0]);
      goto LABEL_46;
    }
LABEL_44:
    isEspressoV2Mil = kaldi::quasar::isEspressoV2Mil((uint64_t *)a2);
    if ((v32 & 0x80) == 0)
      goto LABEL_46;
    goto LABEL_45;
  }
  return 0;
}

void sub_1ADF70758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ModelLoader::getModelInitializeContext@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 504);
  *a2 = *(_QWORD *)(this + 496);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *quasar::ModelLoader::setModelInitializeContext(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a1 + 496), a2);
}

NSObject *quasar::ModelLoader::waitUntilLoadingFinishes(quasar::ModelLoader *this)
{
  NSObject *result;

  result = *((_QWORD *)this + 60);
  if (result)
    return dispatch_group_wait(result, 0xFFFFFFFFFFFFFFFFLL);
  return result;
}

uint64_t quasar::ModelLoader::getDispatchQueue(quasar::ModelLoader *this)
{
  return *((_QWORD *)this + 59);
}

uint64_t quasar::ModelLoader::getDispatchGroup(quasar::ModelLoader *this)
{
  return *((_QWORD *)this + 60);
}

uint64_t quasar::ModelLoader::enableEmbeddedMlock(uint64_t this, char a2)
{
  *(_BYTE *)(this + 576) = a2;
  return this;
}

void quasar::ModelLoader::setEmbeddedMlockOverrides(quasar::ModelLoader *this, const quasar::PTree *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *String;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v3 = (char *)this + 584;
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear((uint64_t)this + 584);
  v4 = quasar::PTree::begin(a2);
  v5 = quasar::PTree::end(a2);
  if (v4 != v5)
  {
    v6 = v5;
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "model-file");
      String = (unsigned __int8 *)quasar::PTree::getString(v4 + 24, (__int128 *)__p);
      if (SBYTE7(v11) < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "fraction");
      quasar::PTree::getDoubleOptional(v4 + 24, (uint64_t)__p);
      v27 = v9;
      v28 = v8;
      if (SBYTE7(v11) < 0)
        break;
      if ((_BYTE)v8)
        goto LABEL_7;
LABEL_8:
      v4 += 88;
      if (v4 == v6)
        goto LABEL_12;
    }
    operator delete(__p[0]);
    if (!(_BYTE)v28)
      goto LABEL_8;
LABEL_7:
    std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::string const&,double &>((uint64_t)v3, String, (uint64_t)String, (double *)&v27);
    goto LABEL_8;
  }
LABEL_12:
  if (quasar::gLogLevel > 3)
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ModelLoader embedded mlock overrides: ", 38);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
}

void sub_1ADF70964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
  _Unwind_Resume(a1);
}

std::string *quasar::ModelLoader::requestEmbeddedMlock@<X0>(std::string *result@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>, float a4@<S0>)
{
  uint64_t p_size;
  unsigned __int8 *v7;
  float *v8;
  float v9;

  v9 = a4;
  if (result[24].__r_.__value_.__s.__data_[0])
  {
    p_size = (uint64_t)&result[24].__r_.__value_.__l.__size_;
    v7 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(&result[24].__r_.__value_.__l.__size_, a2);
    if (v7)
    {
      v8 = (float *)(v7 + 40);
    }
    else
    {
      std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::string const&,float &>(p_size, a2, (uint64_t)a2, &v9);
      v8 = &v9;
    }
    return std::allocate_shared[abi:ne180100]<quasar::ModelLoader::EmbeddedMlockContext,std::allocator<quasar::ModelLoader::EmbeddedMlockContext>,std::string const&,float &,void>((__int128 *)a2, v8, a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t quasar::ModelLoader::dumpInCoreStats(quasar::ModelLoader *this)
{
  _QWORD *i;
  _QWORD *j;
  _QWORD *k;
  _QWORD *m;
  _QWORD *n;
  _QWORD *ii;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void **v12;
  void *__p[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[11];
  char v35;
  uint64_t v36;
  _QWORD *v37[4];
  _QWORD *v38[4];
  _QWORD *v39[4];
  _QWORD *v40[4];
  _QWORD *v41[4];
  _QWORD *v42[4];

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v34);
  v32 = 0;
  v33 = 0;
  v31 = sysconf(29);
  if (v31 == -1)
  {
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"could not sysconf(_SC_PAGESIZE): ", 33);
    __error();
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  for (i = (_QWORD *)*((_QWORD *)this + 3); i; i = (_QWORD *)*i)
  {
    __p[0] = v34;
    __p[1] = &v31;
    *(_QWORD *)&v15 = &v33;
    *((_QWORD *)&v15 + 1) = &v32;
    quasar::ModelLoader::enumerateSubFiles<quasar::ModelLoader::dumpInCoreStats(void)::$_0>((uint64_t)(i + 2), (_QWORD **)__p);
  }
  for (j = (_QWORD *)*((_QWORD *)this + 38); j; j = (_QWORD *)*j)
  {
    v42[0] = v34;
    v42[1] = &v31;
    v42[2] = &v33;
    v42[3] = &v32;
    quasar::ModelLoader::enumerateSubFiles<quasar::ModelLoader::dumpInCoreStats(void)::$_0>((uint64_t)(j + 2), v42);
  }
  for (k = (_QWORD *)*((_QWORD *)this + 28); k; k = (_QWORD *)*k)
  {
    v41[0] = v34;
    v41[1] = &v31;
    v41[2] = &v33;
    v41[3] = &v32;
    quasar::ModelLoader::enumerateSubFiles<quasar::ModelLoader::dumpInCoreStats(void)::$_0>((uint64_t)(k + 2), v41);
  }
  for (m = (_QWORD *)*((_QWORD *)this + 33); m; m = (_QWORD *)*m)
  {
    v40[0] = v34;
    v40[1] = &v31;
    v40[2] = &v33;
    v40[3] = &v32;
    quasar::ModelLoader::enumerateSubFiles<quasar::ModelLoader::dumpInCoreStats(void)::$_0>((uint64_t)(m + 2), v40);
  }
  for (n = (_QWORD *)*((_QWORD *)this + 43); n; n = (_QWORD *)*n)
  {
    v39[0] = v34;
    v39[1] = &v31;
    v39[2] = &v33;
    v39[3] = &v32;
    quasar::ModelLoader::enumerateSubFiles<quasar::ModelLoader::dumpInCoreStats(void)::$_0>((uint64_t)(n + 2), v39);
  }
  for (ii = (_QWORD *)*((_QWORD *)this + 48); ii; ii = (_QWORD *)*ii)
  {
    v38[0] = v34;
    v38[1] = &v31;
    v38[2] = &v33;
    v38[3] = &v32;
    quasar::ModelLoader::enumerateSubFiles<quasar::ModelLoader::dumpInCoreStats(void)::$_0>((uint64_t)(ii + 2), v38);
  }
  v9 = *((_QWORD *)this + 56);
  v8 = *((_QWORD *)this + 57);
  if (v9 != v8)
  {
    v37[0] = v34;
    v37[1] = &v31;
    v37[2] = &v33;
    v37[3] = &v32;
    do
    {
      quasar::ModelLoader::enumerateSubFiles<quasar::ModelLoader::dumpInCoreStats(void)::$_0>(v9, v37);
      v9 += 24;
    }
    while (v9 != v8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"total ", 6);
  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" pages loaded of ", 17);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n", 1);
  std::stringbuf::str();
  if ((SBYTE7(v15) & 0x80u) == 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  fputs((const char *)v12, (FILE *)*MEMORY[0x1E0C80C10]);
  if (SBYTE7(v15) < 0)
    operator delete(__p[0]);
  v34[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v34[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v35 < 0)
    operator delete((void *)v34[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v36);
}

void sub_1ADF70D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  std::ostringstream::~ostringstream((uint64_t)&a49);
  _Unwind_Resume(a1);
}

uint64_t fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Read(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  fst::MappedFile *v6;
  fst *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  fst::LogMessage *v13;
  fst *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];
  void *v26[2];
  void *__p[2];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  void *v42[2];
  char v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::NGramFstImpl(v4);
  v29 = 0u;
  v28 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v26 = 0u;
  v31 = 0;
  v32 = 0;
  v30 = -1;
  if ((fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ReadHeader(v4, a1, a2, 4, (uint64_t)v25) & 1) != 0)
  {
    if ((BYTE4(v29) & 4) != 0 && (fst::AlignInput() & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v42, "ERROR");
      v14 = fst::LogMessage::LogMessage((fst *)&v24, (uint64_t)v42);
      v15 = (_QWORD *)fst::cerr(v14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"NGramFst::Read: Alignment failed: ", 34);
      v17 = *(char *)(a2 + 23);
      if (v17 >= 0)
        v18 = a2;
      else
        v18 = *(_QWORD *)a2;
      if (v17 >= 0)
        v19 = *(unsigned __int8 *)(a2 + 23);
      else
        v19 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
      v13 = (fst::LogMessage *)&v24;
    }
    else
    {
      v23 = 0;
      v24 = 0;
      v22 = 0;
      std::istream::tellg();
      v5 = v44;
      std::istream::read();
      std::istream::read();
      std::istream::read();
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v34 = 0u;
      v33 = 0u;
      v41 = v5;
      std::istream::seekg();
      v6 = fst::MappedFile::Map((uint64_t)a1, a2, 0x34uLL);
      if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0 && v6)
      {
        fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Init(v4, *((const unint64_t **)v6 + 1), 0, (uint64_t)v6);
        goto LABEL_25;
      }
      std::string::basic_string[abi:ne180100]<0>(v42, "ERROR");
      v7 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)v42);
      v8 = (_QWORD *)fst::cerr(v7);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"NGramFst::Read: Read failed: ", 29);
      v10 = *(char *)(a2 + 23);
      if (v10 >= 0)
        v11 = a2;
      else
        v11 = *(_QWORD *)a2;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(a2 + 23);
      else
        v12 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      v13 = (fst::LogMessage *)&v21;
    }
    fst::LogMessage::~LogMessage(v13);
    if (v43 < 0)
      operator delete(v42[0]);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  v4 = 0;
LABEL_25:
  if (SHIBYTE(v28) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v26[0]);
  return v4;
}

void sub_1ADF71058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  if (*(char *)(v6 - 169) < 0)
    operator delete(*(void **)(v5 + 144));
  fst::FstHeader::~FstHeader((void **)va);
  _Unwind_Resume(a1);
}

uint64_t fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::NGramFstImpl(uint64_t a1)
{
  std::string *v2;
  _QWORD *v3;
  uint64_t v9;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v3 = (_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 64) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 68) = _D0;
  *(_QWORD *)a1 = &unk_1E5D1AFB8;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  std::string::basic_string[abi:ne180100]<0>(&__str, "ngram");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (*v3)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    *v3 = 0;
  }
  v9 = *(_QWORD *)(a1 + 48);
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    *(_QWORD *)(a1 + 48) = 0;
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x25A555550001;
  return a1;
}

void sub_1ADF71210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  _QWORD *v16;

  if (a15 < 0)
    operator delete(__p);
  fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::~CompactLatticeMinimizer((_QWORD *)(v15 + 344));
  fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::~CompactLatticeMinimizer((_QWORD *)(v15 + 280));
  fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::~CompactLatticeMinimizer(v16);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Read(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  fst::MappedFile *v6;
  fst *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  fst::LogMessage *v13;
  fst *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[8];
  void *v26[2];
  void *__p[2];
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  void *v42[2];
  char v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::NGramFstImpl(v4);
  v29 = 0u;
  v28 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v26 = 0u;
  v31 = 0;
  v32 = 0;
  v30 = -1;
  if ((fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ReadHeader(v4, a1, a2, 4, (uint64_t)v25) & 1) != 0)
  {
    if ((BYTE4(v29) & 4) != 0 && (fst::AlignInput() & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v42, "ERROR");
      v14 = fst::LogMessage::LogMessage((fst *)&v24, (uint64_t)v42);
      v15 = (_QWORD *)fst::cerr(v14);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"NGramFst::Read: Alignment failed: ", 34);
      v17 = *(char *)(a2 + 23);
      if (v17 >= 0)
        v18 = a2;
      else
        v18 = *(_QWORD *)a2;
      if (v17 >= 0)
        v19 = *(unsigned __int8 *)(a2 + 23);
      else
        v19 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
      v13 = (fst::LogMessage *)&v24;
    }
    else
    {
      v23 = 0;
      v24 = 0;
      v22 = 0;
      std::istream::read();
      std::istream::read();
      std::istream::read();
      std::istream::read();
      std::istream::tellg();
      v5 = v44;
      std::istream::read();
      std::istream::read();
      std::istream::read();
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v34 = 0u;
      v33 = 0u;
      v41 = v5;
      std::istream::seekg();
      v6 = fst::MappedFile::Map((uint64_t)a1, a2, 0x2CuLL);
      if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0 && v6)
      {
        fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Init(v4, *((const unint64_t **)v6 + 1), 0, (uint64_t)v6);
        goto LABEL_25;
      }
      std::string::basic_string[abi:ne180100]<0>(v42, "ERROR");
      v7 = fst::LogMessage::LogMessage((fst *)&v21, (uint64_t)v42);
      v8 = (_QWORD *)fst::cerr(v7);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"NGramFst::Read: Read failed: ", 29);
      v10 = *(char *)(a2 + 23);
      if (v10 >= 0)
        v11 = a2;
      else
        v11 = *(_QWORD *)a2;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(a2 + 23);
      else
        v12 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
      v13 = (fst::LogMessage *)&v21;
    }
    fst::LogMessage::~LogMessage(v13);
    if (v43 < 0)
      operator delete(v42[0]);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  v4 = 0;
LABEL_25:
  if (SHIBYTE(v28) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v26[0]);
  return v4;
}

void sub_1ADF71550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  if (*(char *)(v6 - 169) < 0)
    operator delete(*(void **)(v5 + 144));
  fst::FstHeader::~FstHeader((void **)va);
  _Unwind_Resume(a1);
}

uint64_t fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::NGramFstImpl(uint64_t a1)
{
  std::string *v2;
  _QWORD *v3;
  uint64_t v9;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v3 = (_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 64) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 68) = _D0;
  *(_QWORD *)a1 = &unk_1E5D1AFF0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::TypeString(&__str);
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (*v3)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
    *v3 = 0;
  }
  v9 = *(_QWORD *)(a1 + 48);
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    *(_QWORD *)(a1 + 48) = 0;
  }
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x25A555550001;
  return a1;
}

void sub_1ADF71704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  _QWORD *v16;

  if (a15 < 0)
    operator delete(__p);
  fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::~CompactLatticeMinimizer((_QWORD *)(v15 + 344));
  fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::~CompactLatticeMinimizer((_QWORD *)(v15 + 280));
  fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::~CompactLatticeMinimizer(v16);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::Read(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  fst::MappedFile *v6;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  fst *v14;
  _QWORD *v15;
  int v16;
  void *__p[2];
  char v19;
  char v20;
  _BYTE v21[8];
  void *v22[2];
  void *v23[2];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = operator new();
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::ReducedFstImpl(v4);
  v25 = 0u;
  v24 = 0u;
  *(_OWORD *)v23 = 0u;
  *(_OWORD *)v22 = 0u;
  v27 = 0;
  v28 = 0;
  v26 = -1;
  if ((fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ReadHeader(v4, a1, a2, 3, (uint64_t)v21) & 1) != 0)
  {
    v5 = v27;
    *(_DWORD *)(v4 + 96) = v26;
    *(_DWORD *)(v4 + 80) = v5;
    *(_QWORD *)(v4 + 88) = v28;
    if ((_DWORD)v25 == 3)
      DWORD1(v25) |= 4u;
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    if ((BYTE4(v25) & 4) != 0 && (fst::AlignInput() & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v14 = fst::LogMessage::LogMessage((fst *)&v20, (uint64_t)__p);
      v15 = (_QWORD *)fst::cerr(v14);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"ReducedFst::Read: Alignment failed: ", 36);
      v16 = *(char *)(a2 + 23);
      if (v16 >= 0)
        v12 = a2;
      else
        v12 = *(_QWORD *)a2;
      if (v16 >= 0)
        v13 = *(unsigned __int8 *)(a2 + 23);
      else
        v13 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      v6 = fst::MappedFile::Map((uint64_t)a1, a2, 8 * *(int *)(v4 + 80) + 16 * *(_QWORD *)(v4 + 88));
      *(_QWORD *)(v4 + 64) = v6;
      if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0 && v6 != 0)
      {
        *(_QWORD *)(v4 + 72) = *((_QWORD *)v6 + 1);
        goto LABEL_26;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v8 = fst::LogMessage::LogMessage((fst *)&v20, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ReducedFst::Read: Read failed: ", 31);
      v11 = *(char *)(a2 + 23);
      if (v11 >= 0)
        v12 = a2;
      else
        v12 = *(_QWORD *)a2;
      if (v11 >= 0)
        v13 = *(unsigned __int8 *)(a2 + 23);
      else
        v13 = *(_QWORD *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v20);
    if (v19 < 0)
      operator delete(__p[0]);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v4 = 0;
LABEL_26:
  if (SHIBYTE(v24) < 0)
    operator delete(v23[1]);
  if (SHIBYTE(v23[0]) < 0)
    operator delete(v22[0]);
  return v4;
}

void sub_1ADF71994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *a19)
{
  if (a14 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a19);
  _Unwind_Resume(a1);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::ReducedFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1E550;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 96) = -1;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::TypeString(&__str);
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950001;
  return a1;
}

void sub_1ADF71AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::Read(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  fst::MappedFile *v6;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  fst *v14;
  _QWORD *v15;
  int v16;
  void *__p[2];
  char v19;
  char v20;
  _BYTE v21[8];
  void *v22[2];
  void *v23[2];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = operator new();
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::ReducedFstImpl(v4);
  v25 = 0u;
  v24 = 0u;
  *(_OWORD *)v23 = 0u;
  *(_OWORD *)v22 = 0u;
  v27 = 0;
  v28 = 0;
  v26 = -1;
  if ((fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ReadHeader(v4, a1, a2, 3, (uint64_t)v21) & 1) != 0)
  {
    v5 = v27;
    *(_DWORD *)(v4 + 96) = v26;
    *(_DWORD *)(v4 + 80) = v5;
    *(_QWORD *)(v4 + 88) = v28;
    if ((_DWORD)v25 == 3)
      DWORD1(v25) |= 4u;
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    if ((BYTE4(v25) & 4) != 0 && (fst::AlignInput() & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v14 = fst::LogMessage::LogMessage((fst *)&v20, (uint64_t)__p);
      v15 = (_QWORD *)fst::cerr(v14);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"ReducedFst::Read: Alignment failed: ", 36);
      v16 = *(char *)(a2 + 23);
      if (v16 >= 0)
        v12 = a2;
      else
        v12 = *(_QWORD *)a2;
      if (v16 >= 0)
        v13 = *(unsigned __int8 *)(a2 + 23);
      else
        v13 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      v6 = fst::MappedFile::Map((uint64_t)a1, a2, 12 * *(_QWORD *)(v4 + 88) + 8 * *(int *)(v4 + 80));
      *(_QWORD *)(v4 + 64) = v6;
      if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0 && v6 != 0)
      {
        *(_QWORD *)(v4 + 72) = *((_QWORD *)v6 + 1);
        goto LABEL_26;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v8 = fst::LogMessage::LogMessage((fst *)&v20, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ReducedFst::Read: Read failed: ", 31);
      v11 = *(char *)(a2 + 23);
      if (v11 >= 0)
        v12 = a2;
      else
        v12 = *(_QWORD *)a2;
      if (v11 >= 0)
        v13 = *(unsigned __int8 *)(a2 + 23);
      else
        v13 = *(_QWORD *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v20);
    if (v19 < 0)
      operator delete(__p[0]);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v4 = 0;
LABEL_26:
  if (SHIBYTE(v24) < 0)
    operator delete(v23[1]);
  if (SHIBYTE(v23[0]) < 0)
    operator delete(v22[0]);
  return v4;
}

void sub_1ADF71D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *a19)
{
  if (a14 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a19);
  _Unwind_Resume(a1);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::ReducedFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1E5C0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 96) = -1;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::TypeString(&__str);
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950001;
  return a1;
}

void sub_1ADF71E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::Read(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  fst::MappedFile *v6;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  fst *v14;
  _QWORD *v15;
  int v16;
  void *__p[2];
  char v19;
  char v20;
  _BYTE v21[8];
  void *v22[2];
  void *v23[2];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = operator new();
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::ReducedFstImpl(v4);
  v25 = 0u;
  v24 = 0u;
  *(_OWORD *)v23 = 0u;
  *(_OWORD *)v22 = 0u;
  v27 = 0;
  v28 = 0;
  v26 = -1;
  if ((fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ReadHeader(v4, a1, a2, 3, (uint64_t)v21) & 1) != 0)
  {
    v5 = v27;
    *(_DWORD *)(v4 + 96) = v26;
    *(_DWORD *)(v4 + 80) = v5;
    *(_QWORD *)(v4 + 88) = v28;
    if ((_DWORD)v25 == 3)
      DWORD1(v25) |= 4u;
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    if ((BYTE4(v25) & 4) != 0 && (fst::AlignInput() & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v14 = fst::LogMessage::LogMessage((fst *)&v20, (uint64_t)__p);
      v15 = (_QWORD *)fst::cerr(v14);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"ReducedFst::Read: Alignment failed: ", 36);
      v16 = *(char *)(a2 + 23);
      if (v16 >= 0)
        v12 = a2;
      else
        v12 = *(_QWORD *)a2;
      if (v16 >= 0)
        v13 = *(unsigned __int8 *)(a2 + 23);
      else
        v13 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      v6 = fst::MappedFile::Map((uint64_t)a1, a2, 12 * *(_QWORD *)(v4 + 88) + 8 * *(int *)(v4 + 80));
      *(_QWORD *)(v4 + 64) = v6;
      if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0 && v6 != 0)
      {
        *(_QWORD *)(v4 + 72) = *((_QWORD *)v6 + 1);
        goto LABEL_26;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v8 = fst::LogMessage::LogMessage((fst *)&v20, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ReducedFst::Read: Read failed: ", 31);
      v11 = *(char *)(a2 + 23);
      if (v11 >= 0)
        v12 = a2;
      else
        v12 = *(_QWORD *)a2;
      if (v11 >= 0)
        v13 = *(unsigned __int8 *)(a2 + 23);
      else
        v13 = *(_QWORD *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v20);
    if (v19 < 0)
      operator delete(__p[0]);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v4 = 0;
LABEL_26:
  if (SHIBYTE(v24) < 0)
    operator delete(v23[1]);
  if (SHIBYTE(v23[0]) < 0)
    operator delete(v22[0]);
  return v4;
}

void sub_1ADF720DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *a19)
{
  if (a14 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a19);
  _Unwind_Resume(a1);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::ReducedFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1E588;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 96) = -1;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::TypeString(&__str);
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950001;
  return a1;
}

void sub_1ADF72208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::Read(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  fst::MappedFile *v6;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  fst *v14;
  _QWORD *v15;
  int v16;
  void *__p[2];
  char v19;
  char v20;
  _BYTE v21[8];
  void *v22[2];
  void *v23[2];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = operator new();
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::ReducedFstImpl(v4);
  v25 = 0u;
  v24 = 0u;
  *(_OWORD *)v23 = 0u;
  *(_OWORD *)v22 = 0u;
  v27 = 0;
  v28 = 0;
  v26 = -1;
  if ((fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ReadHeader(v4, a1, a2, 3, (uint64_t)v21) & 1) != 0)
  {
    v5 = v27;
    *(_DWORD *)(v4 + 96) = v26;
    *(_DWORD *)(v4 + 80) = v5;
    *(_QWORD *)(v4 + 88) = v28;
    if ((_DWORD)v25 == 3)
      DWORD1(v25) |= 4u;
    std::istream::read();
    std::istream::read();
    std::istream::read();
    std::istream::read();
    if ((BYTE4(v25) & 4) != 0 && (fst::AlignInput() & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v14 = fst::LogMessage::LogMessage((fst *)&v20, (uint64_t)__p);
      v15 = (_QWORD *)fst::cerr(v14);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"ReducedFst::Read: Alignment failed: ", 36);
      v16 = *(char *)(a2 + 23);
      if (v16 >= 0)
        v12 = a2;
      else
        v12 = *(_QWORD *)a2;
      if (v16 >= 0)
        v13 = *(unsigned __int8 *)(a2 + 23);
      else
        v13 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      v6 = fst::MappedFile::Map((uint64_t)a1, a2, 8 * (*(_QWORD *)(v4 + 88) + *(int *)(v4 + 80)));
      *(_QWORD *)(v4 + 64) = v6;
      if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0 && v6 != 0)
      {
        *(_QWORD *)(v4 + 72) = *((_QWORD *)v6 + 1);
        goto LABEL_26;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v8 = fst::LogMessage::LogMessage((fst *)&v20, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ReducedFst::Read: Read failed: ", 31);
      v11 = *(char *)(a2 + 23);
      if (v11 >= 0)
        v12 = a2;
      else
        v12 = *(_QWORD *)a2;
      if (v11 >= 0)
        v13 = *(unsigned __int8 *)(a2 + 23);
      else
        v13 = *(_QWORD *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v20);
    if (v19 < 0)
      operator delete(__p[0]);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v4 = 0;
LABEL_26:
  if (SHIBYTE(v24) < 0)
    operator delete(v23[1]);
  if (SHIBYTE(v23[0]) < 0)
    operator delete(v22[0]);
  return v4;
}

void sub_1ADF7247C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *a19)
{
  if (a14 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a19);
  _Unwind_Resume(a1);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::ReducedFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1E5F8;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 96) = -1;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::TypeString(&__str);
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950001;
  return a1;
}

void sub_1ADF725A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::Read(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  fst::MappedFile *v12;
  fst *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  fst *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  const char *v23;
  fst *v24;
  _QWORD *v25;
  int v26;
  fst *v28;
  _QWORD *v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  int *v36;
  char *v37;
  size_t v38;
  uint64_t v39;
  int *v40;
  int v41;
  fst *v42;
  _QWORD *v43;
  int v44;
  off_t st_size;
  fst::MappedFile *v46;
  fst *v48;
  _QWORD *v49;
  int v50;
  stat __p;
  _BYTE v52[8];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[128];
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::SqueezedFstImpl(v4);
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v58 = 0;
  v59 = 0;
  v57 = -1;
  if ((fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ReadHeader(v4, a1, a2, 3, (uint64_t)v52) & 1) == 0)
  {
LABEL_39:
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v4 = 0;
    goto LABEL_40;
  }
  v5 = v58;
  *(_DWORD *)(v4 + 136) = v57;
  *(_DWORD *)(v4 + 112) = v5;
  *(_QWORD *)(v4 + 120) = v59;
  *(_QWORD *)(v4 + 128) = 0;
  if ((_DWORD)v56 == 3)
    DWORD1(v56) |= 4u;
  v6 = fst::SqueezedQuantizationOptions<false,false>::Read(&__p);
  v7 = *(_QWORD *)&__p.st_dev;
  *(_QWORD *)&__p.st_dev = 0;
  v8 = *(_QWORD *)(v4 + 144);
  *(_QWORD *)(v4 + 144) = v7;
  if (v8)
  {
    MEMORY[0x1AF44D190](v8, 0x1000C40451B5BE8, v6);
    v9 = *(_QWORD *)&__p.st_dev;
    *(_QWORD *)&__p.st_dev = 0;
    if (v9)
      MEMORY[0x1AF44D190](v9, 0x1000C40451B5BE8);
  }
  v10 = *(int *)(v4 + 112);
  v11 = *(_QWORD *)(v4 + 120);
  if ((BYTE4(v56) & 4) != 0 && (fst::AlignInput() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v19 = fst::LogMessage::LogMessage((fst *)v60, (uint64_t)&__p);
    v20 = (_QWORD *)fst::cerr(v19);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"SqueezedFst::Read: Alignment failed before aligning states region: ", 67);
    v21 = *(char *)(a2 + 23);
    if (v21 >= 0)
      v17 = a2;
    else
      v17 = *(_QWORD *)a2;
    if (v21 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
LABEL_37:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
    fst::LogMessage::~LogMessage((fst::LogMessage *)v60);
    if (SHIBYTE(__p.st_gid) < 0)
      operator delete(*(void **)&__p.st_dev);
    goto LABEL_39;
  }
  *(_QWORD *)(v4 + 64) = fst::MappedFile::Map((uint64_t)a1, a2, 4 * v10);
  if ((BYTE4(v56) & 4) != 0 && (fst::AlignInput() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v24 = fst::LogMessage::LogMessage((fst *)v60, (uint64_t)&__p);
    v25 = (_QWORD *)fst::cerr(v24);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"SqueezedFst::Read: Alignment failed before aligning arcs region: ", 65);
    v26 = *(char *)(a2 + 23);
    if (v26 >= 0)
      v17 = a2;
    else
      v17 = *(_QWORD *)a2;
    if (v26 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
    goto LABEL_37;
  }
  v12 = fst::MappedFile::Map((uint64_t)a1, a2, 16 * v11);
  *(_QWORD *)(v4 + 80) = v12;
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0 || (v22 = *(_QWORD *)(v4 + 64)) == 0 || !v12)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v13 = fst::LogMessage::LogMessage((fst *)v60, (uint64_t)&__p);
    v14 = (_QWORD *)fst::cerr(v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"SqueezedFst::Read: Read failed after reading states and arcs: ", 62);
    v16 = *(char *)(a2 + 23);
    if (v16 >= 0)
      v17 = a2;
    else
      v17 = *(_QWORD *)a2;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
    goto LABEL_37;
  }
  *(_QWORD *)(v4 + 72) = *(_QWORD *)(v22 + 8);
  *(_QWORD *)(v4 + 88) = *((_QWORD *)v12 + 1);
  if ((BYTE4(v56) & 4) != 0 && (fst::AlignInput() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v42 = fst::LogMessage::LogMessage((fst *)v60, (uint64_t)&__p);
    v43 = (_QWORD *)fst::cerr(v42);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"SqueezedFst::Read: Alignment failed before aligning final states region: ", 73);
    v44 = *(char *)(a2 + 23);
    if (v44 >= 0)
      v17 = a2;
    else
      v17 = *(_QWORD *)a2;
    if (v44 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
    goto LABEL_37;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
      goto LABEL_48;
    v23 = *(const char **)a2;
  }
  else
  {
    if (!*(_BYTE *)(a2 + 23))
      goto LABEL_48;
    v23 = (const char *)a2;
  }
  if (!stat(v23, &__p))
  {
    st_size = __p.st_size;
    std::istream::tellg();
    *(_QWORD *)(v4 + 128) = (unint64_t)(st_size - v61) >> 3;
    goto LABEL_69;
  }
LABEL_48:
  std::string::basic_string[abi:ne180100]<0>(&__p, "WARNING");
  v28 = fst::LogMessage::LogMessage((fst *)v60, (uint64_t)&__p);
  v29 = (_QWORD *)fst::cerr(v28);
  v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Falling back to slow loading for ", 33);
  v31 = *(char *)(a2 + 23);
  if (v31 >= 0)
    v32 = a2;
  else
    v32 = *(_QWORD *)a2;
  if (v31 >= 0)
    v33 = *(unsigned __int8 *)(a2 + 23);
  else
    v33 = *(_QWORD *)(a2 + 8);
  v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
  v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)": ", 2);
  v36 = __error();
  v37 = strerror(*v36);
  v38 = strlen(v37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v37, v38);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v60);
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  v39 = *(unsigned int *)(v4 + 112);
  if ((int)v39 >= 1)
  {
    v40 = *(int **)(v4 + 72);
    do
    {
      v41 = *v40++;
      if (v41 <= 0)
        ++*(_QWORD *)(v4 + 128);
      --v39;
    }
    while (v39);
  }
LABEL_69:
  v46 = fst::MappedFile::Map((uint64_t)a1, a2, 8 * *(_QWORD *)(v4 + 128));
  *(_QWORD *)(v4 + 96) = v46;
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0 || v46 == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v48 = fst::LogMessage::LogMessage((fst *)v60, (uint64_t)&__p);
    v49 = (_QWORD *)fst::cerr(v48);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"SqueezedFst::Read: Read failed after reading final states: ", 59);
    v50 = *(char *)(a2 + 23);
    if (v50 >= 0)
      v17 = a2;
    else
      v17 = *(_QWORD *)a2;
    if (v50 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
    goto LABEL_37;
  }
  *(_QWORD *)(v4 + 104) = *((_QWORD *)v46 + 1);
LABEL_40:
  if (SHIBYTE(v55) < 0)
    operator delete(*((void **)&v54 + 1));
  if (SBYTE7(v54) < 0)
    operator delete((void *)v53);
  return v4;
}

void sub_1ADF72B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  fst::FstHeader::~FstHeader(&a30);
  _Unwind_Resume(a1);
}

float fst::SqueezedQuantizationOptions<false,false>::Read@<S0>(_QWORD *a1@<X8>)
{
  _DWORD *v2;
  float result;

  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  v2 = (_DWORD *)operator new();
  result = 0.0;
  *v2 = 0;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  *a1 = v2;
  return result;
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::SqueezedFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1EDD0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = -1;
  *(_QWORD *)(a1 + 144) = 0;
  fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::TypeString(&__str);
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950001;
  return a1;
}

void sub_1ADF72D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v17;

  if (a15 < 0)
    operator delete(__p);
  v17 = *(_QWORD *)(v15 + 144);
  *(_QWORD *)(v15 + 144) = 0;
  if (v17)
    MEMORY[0x1AF44D190](v17, 0x1000C40451B5BE8);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::Read(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  fst::MappedFile *v12;
  fst *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  fst *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  const char *v23;
  fst *v24;
  _QWORD *v25;
  int v26;
  fst *v28;
  _QWORD *v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  int *v36;
  char *v37;
  size_t v38;
  uint64_t v39;
  int *v40;
  int v41;
  fst *v42;
  _QWORD *v43;
  int v44;
  off_t st_size;
  fst::MappedFile *v46;
  fst *v48;
  _QWORD *v49;
  int v50;
  stat __p;
  _BYTE v52[8];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[128];
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::SqueezedFstImpl(v4);
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v58 = 0;
  v59 = 0;
  v57 = -1;
  if ((fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ReadHeader(v4, a1, a2, 3, (uint64_t)v52) & 1) == 0)
  {
LABEL_39:
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v4 = 0;
    goto LABEL_40;
  }
  v5 = v58;
  *(_DWORD *)(v4 + 136) = v57;
  *(_DWORD *)(v4 + 112) = v5;
  *(_QWORD *)(v4 + 120) = v59;
  *(_QWORD *)(v4 + 128) = 0;
  if ((_DWORD)v56 == 3)
    DWORD1(v56) |= 4u;
  v6 = fst::SqueezedQuantizationOptions<false,false>::Read(&__p);
  v7 = *(_QWORD *)&__p.st_dev;
  *(_QWORD *)&__p.st_dev = 0;
  v8 = *(_QWORD *)(v4 + 144);
  *(_QWORD *)(v4 + 144) = v7;
  if (v8)
  {
    MEMORY[0x1AF44D190](v8, 0x1000C40451B5BE8, v6);
    v9 = *(_QWORD *)&__p.st_dev;
    *(_QWORD *)&__p.st_dev = 0;
    if (v9)
      MEMORY[0x1AF44D190](v9, 0x1000C40451B5BE8);
  }
  v10 = *(int *)(v4 + 112);
  v11 = *(_QWORD *)(v4 + 120);
  if ((BYTE4(v56) & 4) != 0 && (fst::AlignInput() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v19 = fst::LogMessage::LogMessage((fst *)v60, (uint64_t)&__p);
    v20 = (_QWORD *)fst::cerr(v19);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"SqueezedFst::Read: Alignment failed before aligning states region: ", 67);
    v21 = *(char *)(a2 + 23);
    if (v21 >= 0)
      v17 = a2;
    else
      v17 = *(_QWORD *)a2;
    if (v21 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
LABEL_37:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
    fst::LogMessage::~LogMessage((fst::LogMessage *)v60);
    if (SHIBYTE(__p.st_gid) < 0)
      operator delete(*(void **)&__p.st_dev);
    goto LABEL_39;
  }
  *(_QWORD *)(v4 + 64) = fst::MappedFile::Map((uint64_t)a1, a2, 4 * v10);
  if ((BYTE4(v56) & 4) != 0 && (fst::AlignInput() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v24 = fst::LogMessage::LogMessage((fst *)v60, (uint64_t)&__p);
    v25 = (_QWORD *)fst::cerr(v24);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"SqueezedFst::Read: Alignment failed before aligning arcs region: ", 65);
    v26 = *(char *)(a2 + 23);
    if (v26 >= 0)
      v17 = a2;
    else
      v17 = *(_QWORD *)a2;
    if (v26 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
    goto LABEL_37;
  }
  v12 = fst::MappedFile::Map((uint64_t)a1, a2, 12 * v11);
  *(_QWORD *)(v4 + 80) = v12;
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0 || (v22 = *(_QWORD *)(v4 + 64)) == 0 || !v12)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v13 = fst::LogMessage::LogMessage((fst *)v60, (uint64_t)&__p);
    v14 = (_QWORD *)fst::cerr(v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"SqueezedFst::Read: Read failed after reading states and arcs: ", 62);
    v16 = *(char *)(a2 + 23);
    if (v16 >= 0)
      v17 = a2;
    else
      v17 = *(_QWORD *)a2;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
    goto LABEL_37;
  }
  *(_QWORD *)(v4 + 72) = *(_QWORD *)(v22 + 8);
  *(_QWORD *)(v4 + 88) = *((_QWORD *)v12 + 1);
  if ((BYTE4(v56) & 4) != 0 && (fst::AlignInput() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v42 = fst::LogMessage::LogMessage((fst *)v60, (uint64_t)&__p);
    v43 = (_QWORD *)fst::cerr(v42);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"SqueezedFst::Read: Alignment failed before aligning final states region: ", 73);
    v44 = *(char *)(a2 + 23);
    if (v44 >= 0)
      v17 = a2;
    else
      v17 = *(_QWORD *)a2;
    if (v44 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
    goto LABEL_37;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
      goto LABEL_48;
    v23 = *(const char **)a2;
  }
  else
  {
    if (!*(_BYTE *)(a2 + 23))
      goto LABEL_48;
    v23 = (const char *)a2;
  }
  if (!stat(v23, &__p))
  {
    st_size = __p.st_size;
    std::istream::tellg();
    *(_QWORD *)(v4 + 128) = (unint64_t)(st_size - v61) >> 3;
    goto LABEL_69;
  }
LABEL_48:
  std::string::basic_string[abi:ne180100]<0>(&__p, "WARNING");
  v28 = fst::LogMessage::LogMessage((fst *)v60, (uint64_t)&__p);
  v29 = (_QWORD *)fst::cerr(v28);
  v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Falling back to slow loading for ", 33);
  v31 = *(char *)(a2 + 23);
  if (v31 >= 0)
    v32 = a2;
  else
    v32 = *(_QWORD *)a2;
  if (v31 >= 0)
    v33 = *(unsigned __int8 *)(a2 + 23);
  else
    v33 = *(_QWORD *)(a2 + 8);
  v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
  v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)": ", 2);
  v36 = __error();
  v37 = strerror(*v36);
  v38 = strlen(v37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v37, v38);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v60);
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  v39 = *(unsigned int *)(v4 + 112);
  if ((int)v39 >= 1)
  {
    v40 = *(int **)(v4 + 72);
    do
    {
      v41 = *v40++;
      if (v41 <= 0)
        ++*(_QWORD *)(v4 + 128);
      --v39;
    }
    while (v39);
  }
LABEL_69:
  v46 = fst::MappedFile::Map((uint64_t)a1, a2, 8 * *(_QWORD *)(v4 + 128));
  *(_QWORD *)(v4 + 96) = v46;
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0 || v46 == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v48 = fst::LogMessage::LogMessage((fst *)v60, (uint64_t)&__p);
    v49 = (_QWORD *)fst::cerr(v48);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"SqueezedFst::Read: Read failed after reading final states: ", 59);
    v50 = *(char *)(a2 + 23);
    if (v50 >= 0)
      v17 = a2;
    else
      v17 = *(_QWORD *)a2;
    if (v50 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
    goto LABEL_37;
  }
  *(_QWORD *)(v4 + 104) = *((_QWORD *)v46 + 1);
LABEL_40:
  if (SHIBYTE(v55) < 0)
    operator delete(*((void **)&v54 + 1));
  if (SBYTE7(v54) < 0)
    operator delete((void *)v53);
  return v4;
}

void sub_1ADF73288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  fst::FstHeader::~FstHeader(&a30);
  _Unwind_Resume(a1);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::SqueezedFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1EE40;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = -1;
  *(_QWORD *)(a1 + 144) = 0;
  fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::TypeString(&__str);
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950001;
  return a1;
}

void sub_1ADF73400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v17;

  if (a15 < 0)
    operator delete(__p);
  v17 = *(_QWORD *)(v15 + 144);
  *(_QWORD *)(v15 + 144) = 0;
  if (v17)
    MEMORY[0x1AF44D190](v17, 0x1000C40451B5BE8);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::Read(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  fst::MappedFile *v12;
  fst *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  fst *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  const char *v23;
  fst *v24;
  _QWORD *v25;
  int v26;
  fst *v28;
  _QWORD *v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  int *v36;
  char *v37;
  size_t v38;
  uint64_t v39;
  int *v40;
  int v41;
  fst *v42;
  _QWORD *v43;
  int v44;
  off_t st_size;
  fst::MappedFile *v46;
  fst *v48;
  _QWORD *v49;
  int v50;
  stat __p;
  _BYTE v52[8];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[128];
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::SqueezedFstImpl(v4);
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v58 = 0;
  v59 = 0;
  v57 = -1;
  if ((fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ReadHeader(v4, a1, a2, 3, (uint64_t)v52) & 1) == 0)
  {
LABEL_39:
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v4 = 0;
    goto LABEL_40;
  }
  v5 = v58;
  *(_DWORD *)(v4 + 136) = v57;
  *(_DWORD *)(v4 + 112) = v5;
  *(_QWORD *)(v4 + 120) = v59;
  *(_QWORD *)(v4 + 128) = 0;
  if ((_DWORD)v56 == 3)
    DWORD1(v56) |= 4u;
  v6 = fst::SqueezedQuantizationOptions<false,true>::Read((uint64_t *)&__p.st_dev);
  v7 = *(_QWORD *)&__p.st_dev;
  *(_QWORD *)&__p.st_dev = 0;
  v8 = *(_QWORD *)(v4 + 144);
  *(_QWORD *)(v4 + 144) = v7;
  if (v8)
  {
    MEMORY[0x1AF44D190](v8, 0x1000C40504FFAC1, v6);
    v9 = *(_QWORD *)&__p.st_dev;
    *(_QWORD *)&__p.st_dev = 0;
    if (v9)
      MEMORY[0x1AF44D190](v9, 0x1000C40504FFAC1);
  }
  v10 = *(int *)(v4 + 112);
  v11 = *(_QWORD *)(v4 + 120);
  if ((BYTE4(v56) & 4) != 0 && (fst::AlignInput() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v19 = fst::LogMessage::LogMessage((fst *)v60, (uint64_t)&__p);
    v20 = (_QWORD *)fst::cerr(v19);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"SqueezedFst::Read: Alignment failed before aligning states region: ", 67);
    v21 = *(char *)(a2 + 23);
    if (v21 >= 0)
      v17 = a2;
    else
      v17 = *(_QWORD *)a2;
    if (v21 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
LABEL_37:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
    fst::LogMessage::~LogMessage((fst::LogMessage *)v60);
    if (SHIBYTE(__p.st_gid) < 0)
      operator delete(*(void **)&__p.st_dev);
    goto LABEL_39;
  }
  *(_QWORD *)(v4 + 64) = fst::MappedFile::Map((uint64_t)a1, a2, 4 * v10);
  if ((BYTE4(v56) & 4) != 0 && (fst::AlignInput() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v24 = fst::LogMessage::LogMessage((fst *)v60, (uint64_t)&__p);
    v25 = (_QWORD *)fst::cerr(v24);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"SqueezedFst::Read: Alignment failed before aligning arcs region: ", 65);
    v26 = *(char *)(a2 + 23);
    if (v26 >= 0)
      v17 = a2;
    else
      v17 = *(_QWORD *)a2;
    if (v26 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
    goto LABEL_37;
  }
  v12 = fst::MappedFile::Map((uint64_t)a1, a2, 12 * v11);
  *(_QWORD *)(v4 + 80) = v12;
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0 || (v22 = *(_QWORD *)(v4 + 64)) == 0 || !v12)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v13 = fst::LogMessage::LogMessage((fst *)v60, (uint64_t)&__p);
    v14 = (_QWORD *)fst::cerr(v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"SqueezedFst::Read: Read failed after reading states and arcs: ", 62);
    v16 = *(char *)(a2 + 23);
    if (v16 >= 0)
      v17 = a2;
    else
      v17 = *(_QWORD *)a2;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
    goto LABEL_37;
  }
  *(_QWORD *)(v4 + 72) = *(_QWORD *)(v22 + 8);
  *(_QWORD *)(v4 + 88) = *((_QWORD *)v12 + 1);
  if ((BYTE4(v56) & 4) != 0 && (fst::AlignInput() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v42 = fst::LogMessage::LogMessage((fst *)v60, (uint64_t)&__p);
    v43 = (_QWORD *)fst::cerr(v42);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"SqueezedFst::Read: Alignment failed before aligning final states region: ", 73);
    v44 = *(char *)(a2 + 23);
    if (v44 >= 0)
      v17 = a2;
    else
      v17 = *(_QWORD *)a2;
    if (v44 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
    goto LABEL_37;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
      goto LABEL_48;
    v23 = *(const char **)a2;
  }
  else
  {
    if (!*(_BYTE *)(a2 + 23))
      goto LABEL_48;
    v23 = (const char *)a2;
  }
  if (!stat(v23, &__p))
  {
    st_size = __p.st_size;
    std::istream::tellg();
    *(_QWORD *)(v4 + 128) = (unint64_t)(st_size - v61) >> 3;
    goto LABEL_69;
  }
LABEL_48:
  std::string::basic_string[abi:ne180100]<0>(&__p, "WARNING");
  v28 = fst::LogMessage::LogMessage((fst *)v60, (uint64_t)&__p);
  v29 = (_QWORD *)fst::cerr(v28);
  v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Falling back to slow loading for ", 33);
  v31 = *(char *)(a2 + 23);
  if (v31 >= 0)
    v32 = a2;
  else
    v32 = *(_QWORD *)a2;
  if (v31 >= 0)
    v33 = *(unsigned __int8 *)(a2 + 23);
  else
    v33 = *(_QWORD *)(a2 + 8);
  v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
  v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)": ", 2);
  v36 = __error();
  v37 = strerror(*v36);
  v38 = strlen(v37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v37, v38);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v60);
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  v39 = *(unsigned int *)(v4 + 112);
  if ((int)v39 >= 1)
  {
    v40 = *(int **)(v4 + 72);
    do
    {
      v41 = *v40++;
      if (v41 <= 0)
        ++*(_QWORD *)(v4 + 128);
      --v39;
    }
    while (v39);
  }
LABEL_69:
  v46 = fst::MappedFile::Map((uint64_t)a1, a2, 8 * *(_QWORD *)(v4 + 128));
  *(_QWORD *)(v4 + 96) = v46;
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0 || v46 == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v48 = fst::LogMessage::LogMessage((fst *)v60, (uint64_t)&__p);
    v49 = (_QWORD *)fst::cerr(v48);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"SqueezedFst::Read: Read failed after reading final states: ", 59);
    v50 = *(char *)(a2 + 23);
    if (v50 >= 0)
      v17 = a2;
    else
      v17 = *(_QWORD *)a2;
    if (v50 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
    goto LABEL_37;
  }
  *(_QWORD *)(v4 + 104) = *((_QWORD *)v46 + 1);
LABEL_40:
  if (SHIBYTE(v55) < 0)
    operator delete(*((void **)&v54 + 1));
  if (SBYTE7(v54) < 0)
    operator delete((void *)v53);
  return v4;
}

void sub_1ADF7397C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  fst::FstHeader::~FstHeader(&a30);
  _Unwind_Resume(a1);
}

float fst::SqueezedQuantizationOptions<false,true>::Read@<S0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  float result;

  std::istream::read();
  std::istream::read();
  std::istream::read();
  std::istream::read();
  v2 = operator new();
  result = 0.0;
  *(_DWORD *)v2 = 0;
  *(_DWORD *)(v2 + 4) = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *a1 = v2;
  return result;
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::SqueezedFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1EE08;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = -1;
  *(_QWORD *)(a1 + 144) = 0;
  fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::TypeString(&__str);
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950001;
  return a1;
}

void sub_1ADF73B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v17;

  if (a15 < 0)
    operator delete(__p);
  v17 = *(_QWORD *)(v15 + 144);
  *(_QWORD *)(v15 + 144) = 0;
  if (v17)
    MEMORY[0x1AF44D190](v17, 0x1000C40504FFAC1);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::Read(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  fst::MappedFile *v12;
  fst *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  fst *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  const char *v23;
  fst *v24;
  _QWORD *v25;
  int v26;
  fst *v28;
  _QWORD *v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  int *v36;
  char *v37;
  size_t v38;
  uint64_t v39;
  int *v40;
  int v41;
  fst *v42;
  _QWORD *v43;
  int v44;
  off_t st_size;
  fst::MappedFile *v46;
  fst *v48;
  _QWORD *v49;
  int v50;
  stat __p;
  _BYTE v52[8];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[128];
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::SqueezedFstImpl(v4);
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v58 = 0;
  v59 = 0;
  v57 = -1;
  if ((fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ReadHeader(v4, a1, a2, 3, (uint64_t)v52) & 1) == 0)
  {
LABEL_39:
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v4 = 0;
    goto LABEL_40;
  }
  v5 = v58;
  *(_DWORD *)(v4 + 136) = v57;
  *(_DWORD *)(v4 + 112) = v5;
  *(_QWORD *)(v4 + 120) = v59;
  *(_QWORD *)(v4 + 128) = 0;
  if ((_DWORD)v56 == 3)
    DWORD1(v56) |= 4u;
  v6 = fst::SqueezedQuantizationOptions<false,false>::Read(&__p);
  v7 = *(_QWORD *)&__p.st_dev;
  *(_QWORD *)&__p.st_dev = 0;
  v8 = *(_QWORD *)(v4 + 144);
  *(_QWORD *)(v4 + 144) = v7;
  if (v8)
  {
    MEMORY[0x1AF44D190](v8, 0x1000C40451B5BE8, v6);
    v9 = *(_QWORD *)&__p.st_dev;
    *(_QWORD *)&__p.st_dev = 0;
    if (v9)
      MEMORY[0x1AF44D190](v9, 0x1000C40451B5BE8);
  }
  v10 = *(int *)(v4 + 112);
  v11 = *(_QWORD *)(v4 + 120);
  if ((BYTE4(v56) & 4) != 0 && (fst::AlignInput() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v19 = fst::LogMessage::LogMessage((fst *)v60, (uint64_t)&__p);
    v20 = (_QWORD *)fst::cerr(v19);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"SqueezedFst::Read: Alignment failed before aligning states region: ", 67);
    v21 = *(char *)(a2 + 23);
    if (v21 >= 0)
      v17 = a2;
    else
      v17 = *(_QWORD *)a2;
    if (v21 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
LABEL_37:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v17, v18);
    fst::LogMessage::~LogMessage((fst::LogMessage *)v60);
    if (SHIBYTE(__p.st_gid) < 0)
      operator delete(*(void **)&__p.st_dev);
    goto LABEL_39;
  }
  *(_QWORD *)(v4 + 64) = fst::MappedFile::Map((uint64_t)a1, a2, 4 * v10);
  if ((BYTE4(v56) & 4) != 0 && (fst::AlignInput() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v24 = fst::LogMessage::LogMessage((fst *)v60, (uint64_t)&__p);
    v25 = (_QWORD *)fst::cerr(v24);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"SqueezedFst::Read: Alignment failed before aligning arcs region: ", 65);
    v26 = *(char *)(a2 + 23);
    if (v26 >= 0)
      v17 = a2;
    else
      v17 = *(_QWORD *)a2;
    if (v26 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
    goto LABEL_37;
  }
  v12 = fst::MappedFile::Map((uint64_t)a1, a2, 8 * v11);
  *(_QWORD *)(v4 + 80) = v12;
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0 || (v22 = *(_QWORD *)(v4 + 64)) == 0 || !v12)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v13 = fst::LogMessage::LogMessage((fst *)v60, (uint64_t)&__p);
    v14 = (_QWORD *)fst::cerr(v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"SqueezedFst::Read: Read failed after reading states and arcs: ", 62);
    v16 = *(char *)(a2 + 23);
    if (v16 >= 0)
      v17 = a2;
    else
      v17 = *(_QWORD *)a2;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
    goto LABEL_37;
  }
  *(_QWORD *)(v4 + 72) = *(_QWORD *)(v22 + 8);
  *(_QWORD *)(v4 + 88) = *((_QWORD *)v12 + 1);
  if ((BYTE4(v56) & 4) != 0 && (fst::AlignInput() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v42 = fst::LogMessage::LogMessage((fst *)v60, (uint64_t)&__p);
    v43 = (_QWORD *)fst::cerr(v42);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"SqueezedFst::Read: Alignment failed before aligning final states region: ", 73);
    v44 = *(char *)(a2 + 23);
    if (v44 >= 0)
      v17 = a2;
    else
      v17 = *(_QWORD *)a2;
    if (v44 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
    goto LABEL_37;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
      goto LABEL_48;
    v23 = *(const char **)a2;
  }
  else
  {
    if (!*(_BYTE *)(a2 + 23))
      goto LABEL_48;
    v23 = (const char *)a2;
  }
  if (!stat(v23, &__p))
  {
    st_size = __p.st_size;
    std::istream::tellg();
    *(_QWORD *)(v4 + 128) = (unint64_t)(st_size - v61) >> 3;
    goto LABEL_69;
  }
LABEL_48:
  std::string::basic_string[abi:ne180100]<0>(&__p, "WARNING");
  v28 = fst::LogMessage::LogMessage((fst *)v60, (uint64_t)&__p);
  v29 = (_QWORD *)fst::cerr(v28);
  v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Falling back to slow loading for ", 33);
  v31 = *(char *)(a2 + 23);
  if (v31 >= 0)
    v32 = a2;
  else
    v32 = *(_QWORD *)a2;
  if (v31 >= 0)
    v33 = *(unsigned __int8 *)(a2 + 23);
  else
    v33 = *(_QWORD *)(a2 + 8);
  v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, v32, v33);
  v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)": ", 2);
  v36 = __error();
  v37 = strerror(*v36);
  v38 = strlen(v37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v37, v38);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v60);
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  v39 = *(unsigned int *)(v4 + 112);
  if ((int)v39 >= 1)
  {
    v40 = *(int **)(v4 + 72);
    do
    {
      v41 = *v40++;
      if (v41 <= 0)
        ++*(_QWORD *)(v4 + 128);
      --v39;
    }
    while (v39);
  }
LABEL_69:
  v46 = fst::MappedFile::Map((uint64_t)a1, a2, 8 * *(_QWORD *)(v4 + 128));
  *(_QWORD *)(v4 + 96) = v46;
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0 || v46 == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v48 = fst::LogMessage::LogMessage((fst *)v60, (uint64_t)&__p);
    v49 = (_QWORD *)fst::cerr(v48);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)"SqueezedFst::Read: Read failed after reading final states: ", 59);
    v50 = *(char *)(a2 + 23);
    if (v50 >= 0)
      v17 = a2;
    else
      v17 = *(_QWORD *)a2;
    if (v50 >= 0)
      v18 = *(unsigned __int8 *)(a2 + 23);
    else
      v18 = *(_QWORD *)(a2 + 8);
    goto LABEL_37;
  }
  *(_QWORD *)(v4 + 104) = *((_QWORD *)v46 + 1);
LABEL_40:
  if (SHIBYTE(v55) < 0)
    operator delete(*((void **)&v54 + 1));
  if (SBYTE7(v54) < 0)
    operator delete((void *)v53);
  return v4;
}

void sub_1ADF7410C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  fst::FstHeader::~FstHeader(&a30);
  _Unwind_Resume(a1);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::SqueezedFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1EE78;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = -1;
  *(_QWORD *)(a1 + 144) = 0;
  fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::TypeString(&__str);
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950001;
  return a1;
}

void sub_1ADF74284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v17;

  if (a15 < 0)
    operator delete(__p);
  v17 = *(_QWORD *)(v15 + 144);
  *(_QWORD *)(v15 + 144) = 0;
  if (v17)
    MEMORY[0x1AF44D190](v17, 0x1000C40451B5BE8);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Read(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int Header;
  int v6;
  fst *v7;
  _QWORD *v8;
  fst::MappedFile *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char v17;
  char v18;
  fst *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  fst *v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  fst *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  fst *v43;
  _QWORD *v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  std::string::size_type size;
  int v51;
  std::string *v52;
  uint64_t v53;
  __int128 *v54;
  int v55;
  int v56;
  int v57;
  _BOOL4 v58;
  fst *v60;
  _QWORD *v61;
  _QWORD *v62;
  __int128 *v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  std::string *v67;
  std::string::size_type v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  std::string v80;
  char v81;
  std::string v82;
  void *v83[2];
  char v84;
  int v85;
  void *__p;
  __int128 v87;
  __int128 v88;
  __int128 __n;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  std::__shared_weak_count *v96;
  int v97;
  _BYTE v98[8];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v102 = 0u;
  v101 = 0u;
  v100 = 0u;
  v99 = 0u;
  v104 = 0;
  v105 = 0;
  v103 = -1;
  v4 = operator new();
  fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::EnumerationFstImpl(v4);
  Header = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ReadHeader(v4, a1, a2, 0, (uint64_t)v98);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (!Header)
  {
LABEL_38:
    v26 = 0;
    goto LABEL_39;
  }
  v6 = v102;
  if (v102 >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    v7 = fst::LogMessage::LogMessage((fst *)v83, (uint64_t)&__p);
    v8 = (_QWORD *)fst::cerr(v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"EnumerationFst::Read: Unsupported file version: ", 48);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)v83);
    if (SHIBYTE(v87) < 0)
      operator delete(__p);
  }
  v97 = 0;
  std::istream::read();
  if (v6 >= 1 && (fst::AlignInput() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v27 = fst::LogMessage::LogMessage((fst *)v83, (uint64_t)&__p);
    v28 = (_QWORD *)fst::cerr(v27);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"EnumerationFst::Read: Alignment failed before internal FST: ", 60);
    v30 = *(char *)(a2 + 23);
    if (v30 >= 0)
      v31 = a2;
    else
      v31 = *(_QWORD *)a2;
    if (v30 >= 0)
      v32 = *(unsigned __int8 *)(a2 + 23);
    else
      v32 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
    fst::LogMessage::~LogMessage((fst::LogMessage *)v83);
    if (SHIBYTE(v87) < 0)
      operator delete(__p);
    goto LABEL_38;
  }
  v9 = fst::MappedFile::Map((uint64_t)a1, a2, v97);
  std::shared_ptr<fst::MappedFile>::shared_ptr[abi:ne180100]<fst::MappedFile,void>(&v95, (uint64_t)v9);
  v10 = (uint64_t *)operator new();
  v11 = (uint64_t)v10;
  __p = v95;
  *(_QWORD *)&v87 = v96;
  if (v96)
  {
    p_shared_owners = (unint64_t *)&v96->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  fst::EnumerationData::EnumerationData(v10, (uint64_t *)&__p);
  v94 = v11;
  v14 = (std::__shared_weak_count *)v87;
  if ((_QWORD)v87)
  {
    v15 = (unint64_t *)(v87 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if ((fst::AlignInput() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v19 = fst::LogMessage::LogMessage((fst *)v83, (uint64_t)&__p);
    v20 = (_QWORD *)fst::cerr(v19);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"EnumerationFst::Read: Alignment failed before internal FST: ", 60);
    v22 = *(char *)(a2 + 23);
    if (v22 >= 0)
      v23 = a2;
    else
      v23 = *(_QWORD *)a2;
    if (v22 >= 0)
      v24 = *(unsigned __int8 *)(a2 + 23);
    else
      v24 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
    fst::LogMessage::~LogMessage((fst::LogMessage *)v83);
    if (SHIBYTE(v87) < 0)
      operator delete(__p);
    if (v94)
    {
      v25 = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v94);
      MEMORY[0x1AF44D190](v25, 0x20C40A4A59CD2);
    }
    v26 = 0;
    goto LABEL_119;
  }
  v90 = 0u;
  __n = 0u;
  v88 = 0u;
  v87 = 0u;
  v92 = 0;
  v93 = 0;
  v91 = -1;
  std::string::basic_string[abi:ne180100]<0>(v83, "embedded");
  v17 = fst::FstHeader::Read((uint64_t)&__p, (uint64_t)a1, (uint64_t)v83, 0);
  v18 = v17;
  if (v84 < 0)
  {
    operator delete(v83[0]);
    if ((v18 & 1) != 0)
      goto LABEL_47;
  }
  else if ((v17 & 1) != 0)
  {
    goto LABEL_47;
  }
  std::string::basic_string[abi:ne180100]<0>(v83, "FATAL");
  v34 = fst::LogMessage::LogMessage((fst *)&v82, (uint64_t)v83);
  v35 = (_QWORD *)fst::cerr(v34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Unable to read header of inner FST.", 35);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v82);
  if (v84 < 0)
    operator delete(v83[0]);
LABEL_47:
  v36 = fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type();
  v37 = HIBYTE(__n);
  if (__n >= 0)
    v38 = HIBYTE(__n);
  else
    v38 = __n;
  v39 = *(unsigned __int8 *)(v36 + 23);
  v40 = (char)v39;
  if ((v39 & 0x80u) != 0)
    v39 = *(_QWORD *)(v36 + 8);
  if (v38 == v39)
  {
    if (v40 >= 0)
      v41 = (unsigned __int8 *)v36;
    else
      v41 = *(unsigned __int8 **)v36;
    if ((HIBYTE(__n) & 0x80) != 0)
    {
      if (!memcmp(*((const void **)&v88 + 1), v41, __n))
        goto LABEL_71;
    }
    else
    {
      if (!HIBYTE(__n))
        goto LABEL_71;
      v42 = (unsigned __int8 *)&v88 + 8;
      while (*v42 == *v41)
      {
        ++v42;
        ++v41;
        if (!--v37)
          goto LABEL_71;
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v83, "FATAL");
  v43 = fst::LogMessage::LogMessage((fst *)&v82, (uint64_t)v83);
  v44 = (_QWORD *)fst::cerr(v43);
  v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"FST with arc type ", 18);
  if (__n >= 0)
    v46 = (char *)&v88 + 8;
  else
    v46 = (char *)*((_QWORD *)&v88 + 1);
  if (__n >= 0)
    v47 = HIBYTE(__n);
  else
    v47 = __n;
  v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v46, v47);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" not supported.", 15);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v82);
  if (v84 < 0)
    operator delete(v83[0]);
LABEL_71:
  fst::FstReadOptions::FstReadOptions(v83, a2, &__p, 0, 0);
  v85 = *(_DWORD *)(a2 + 48);
  fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::TypeString(&v82);
  if ((SBYTE7(v88) & 0x80u) == 0)
    v49 = BYTE7(v88);
  else
    v49 = *((_QWORD *)&v87 + 1);
  size = HIBYTE(v82.__r_.__value_.__r.__words[2]);
  v51 = SHIBYTE(v82.__r_.__value_.__r.__words[2]);
  if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v82.__r_.__value_.__l.__size_;
  if (v49 == size)
  {
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = &v82;
    else
      v52 = (std::string *)v82.__r_.__value_.__r.__words[0];
    if ((BYTE7(v88) & 0x80) != 0)
    {
      v58 = memcmp((const void *)v87, v52, *((size_t *)&v87 + 1)) != 0;
      if ((v51 & 0x80000000) == 0)
        goto LABEL_89;
    }
    else if (BYTE7(v88))
    {
      v53 = BYTE7(v88) - 1;
      v54 = &v87;
      do
      {
        v56 = *(unsigned __int8 *)v54;
        v54 = (__int128 *)((char *)v54 + 1);
        v55 = v56;
        v57 = v52->__r_.__value_.__s.__data_[0];
        v52 = (std::string *)((char *)v52 + 1);
        v58 = v55 != v57;
      }
      while (v55 == v57 && v53-- != 0);
      if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_89:
        if (!v58)
          goto LABEL_109;
LABEL_93:
        std::string::basic_string[abi:ne180100]<0>(&v82, "FATAL");
        v60 = fst::LogMessage::LogMessage((fst *)&v81, (uint64_t)&v82);
        v61 = (_QWORD *)fst::cerr(v60);
        v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Unexpected type ", 16);
        if ((SBYTE7(v88) & 0x80u) == 0)
          v63 = &v87;
        else
          v63 = (__int128 *)v87;
        if ((SBYTE7(v88) & 0x80u) == 0)
          v64 = BYTE7(v88);
        else
          v64 = *((_QWORD *)&v87 + 1);
        v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)v63, v64);
        v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" for inner FST (expected ", 25);
        fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::TypeString(&v80);
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v67 = &v80;
        else
          v67 = (std::string *)v80.__r_.__value_.__r.__words[0];
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v68 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
        else
          v68 = v80.__r_.__value_.__l.__size_;
        v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, v68);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)")", 1);
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v80.__r_.__value_.__l.__data_);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v81);
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v82.__r_.__value_.__l.__data_);
        goto LABEL_109;
      }
    }
    else
    {
      v58 = 0;
      if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_89;
    }
  }
  else
  {
    v58 = 1;
    if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_89;
  }
  operator delete(v82.__r_.__value_.__l.__data_);
  if (v58)
    goto LABEL_93;
LABEL_109:
  v70 = fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::Read(a1, (uint64_t)v83);
  v26 = operator new();
  v71 = v94;
  v94 = 0;
  v78 = v70;
  v79 = v71;
  fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::EnumerationFstImpl(v26, &v79, (uint64_t *)&v78);
  v72 = (uint64_t)v78;
  v78 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  v73 = v79;
  v79 = 0;
  if (v73)
  {
    v74 = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v73);
    MEMORY[0x1AF44D190](v74, 0x20C40A4A59CD2);
  }
  if (v84 < 0)
    operator delete(v83[0]);
  if (SHIBYTE(__n) < 0)
    operator delete(*((void **)&v88 + 1));
  if (SBYTE7(v88) < 0)
    operator delete((void *)v87);
LABEL_119:
  v75 = v96;
  if (v96)
  {
    v76 = (unint64_t *)&v96->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
LABEL_39:
  if (SHIBYTE(v101) < 0)
    operator delete(*((void **)&v100 + 1));
  if (SBYTE7(v100) < 0)
    operator delete((void *)v99);
  return v26;
}

void sub_1ADF749F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a21);
  if (a27 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  fst::FstHeader::~FstHeader(&a39);
  std::unique_ptr<fst::EnumerationData const>::reset[abi:ne180100]((uint64_t *)(v44 - 176), 0);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v44 - 168);
  fst::FstHeader::~FstHeader((void **)(v44 - 144));
  _Unwind_Resume(a1);
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::EnumerationFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D20DF0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "enumeration");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x555550001;
  return a1;
}

void sub_1ADF74CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v19;
  uint64_t v20;

  if (a15 < 0)
    operator delete(__p);
  v19 = *v17;
  *v17 = 0;
  if (v19)
    std::default_delete<fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>> const>::operator()[abi:ne180100]((uint64_t)v17, v19);
  v20 = *(_QWORD *)(v15 + 72);
  *(_QWORD *)(v15 + 72) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  std::unique_ptr<fst::EnumerationData const>::reset[abi:ne180100](v16, 0);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~EnumerationFstImpl(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &unk_1E5D20DF0;
  v4 = a1[10];
  v2 = a1 + 10;
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>> const>::operator()[abi:ne180100]((uint64_t)v2, v3);
  v5 = a1[9];
  a1[9] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<fst::EnumerationData const>::reset[abi:ne180100](a1 + 8, 0);
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

void fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~EnumerationFstImpl(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &unk_1E5D20DF0;
  v4 = a1[10];
  v2 = a1 + 10;
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>> const>::operator()[abi:ne180100]((uint64_t)v2, v3);
  v5 = a1[9];
  a1[9] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<fst::EnumerationData const>::reset[abi:ne180100](a1 + 8, 0);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::EnumerationFstImpl(v2, *(fst::EnumerationData **)(a1 + 64), *(_QWORD *)(a1 + 72));
  return v2;
}

void sub_1ADF74E58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40F083FB34);
  _Unwind_Resume(a1);
}

void std::default_delete<fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>> const>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  if (a2)
  {
    v3 = *(void **)(a2 + 216);
    if (v3)
    {
      *(_QWORD *)(a2 + 224) = v3;
      operator delete(v3);
    }
    std::__tree<int>::destroy(a2 + 192, *(_QWORD **)(a2 + 200));
    *(_QWORD *)(a2 + 16) = &unk_1E5D221D8;
    fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~SortedMatcher((_QWORD *)(a2 + 24));
    JUMPOUT(0x1AF44D190);
  }
}

uint64_t fst::FstStateDenseDistribution<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::GetWeight(uint64_t a1, int a2)
{
  uint64_t v2;
  char v3;

  v2 = a1 + 8;
  v3 = fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Find(a1 + 8, a2);
  FstCheck(v3, "(const_cast<fst::SortedMatcher<InnerFstT>*>(&matcher_)->Find(label)) == (true)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  return fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Value(v2) + 8;
}

uint64_t fst::FstStateDenseDistribution<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Final(uint64_t a1)
{
  return a1 + 152;
}

_QWORD *fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~SortedMatcher(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E5D1BAA8;
  v2 = a1[3];
  if (v2)
  {
    (**(void (***)(_QWORD))v2)(a1[3]);
    *(_QWORD *)(v2 + 64) = a1[17];
    a1[17] = v2;
  }
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  a1[10] = &unk_1E5D195A8;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Link>::~MemoryArena(a1 + 11);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(a1 + 10));
  return a1;
}

void fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D195A8;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D195A8;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~SortedMatcher(_QWORD *a1)
{
  fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~SortedMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SortedMatcher(v4, a1, a2);
  return v4;
}

void sub_1ADF75074(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Type(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 3)
    return 3;
  if (v2)
    v6 = 0x40000000;
  else
    v6 = 0x10000000;
  v7 = *(_QWORD *)(a1 + 8);
  if (v2)
    v8 = 3221225472;
  else
    v8 = 805306368;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v7, v8, a2);
  if ((v9 & v6) != 0)
    return *(unsigned int *)(a1 + 32);
  v10 = 0x80000000;
  if (!v2)
    v10 = 0x20000000;
  if ((v9 & v10) != 0)
    return 3;
  else
    return 4;
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 74))
    return a2 | 4;
  else
    return a2;
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Next_(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 72))
  {
    *(_BYTE *)(result + 72) = 0;
  }
  else
  {
    v1 = *(_QWORD *)(result + 24);
    ++*(_QWORD *)(v1 + 48);
    return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(v1);
  }
  return result;
}

float fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Final_(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = *(_DWORD *)(*(_QWORD *)(v2 + 72) + 4 * a2);
  if (v3 <= 0)
    return *(float *)(*(_QWORD *)(v2 + 104) + 8 * -v3);
  else
    return INFINITY;
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Priority_(uint64_t a1, int a2)
{
  return fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Size()
{
  return 64;
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A560;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

{
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Link>::Size()
{
  return 72;
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SortedMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = &unk_1E5D1BAA8;
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), a3);
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::MemoryPool((_QWORD *)(a1 + 80), 1);
  return a1;
}

_QWORD *fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D195A8;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1ADF7536C(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A560;
  a1[1] = 72 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1ADF75404(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetState(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  fst *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void *__p[2];
  char v12;
  char v13;

  if (*(_DWORD *)(result + 16) != (_DWORD)a2)
  {
    v3 = result;
    *(_DWORD *)(result + 16) = a2;
    if (*(_DWORD *)(result + 32) == 3)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v4 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
      v5 = (_QWORD *)fst::cerr(v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
      if (v12 < 0)
        operator delete(__p[0]);
      *(_BYTE *)(v3 + 74) = 1;
    }
    v6 = *(_QWORD *)(v3 + 24);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
      v7 = *(_QWORD *)(v3 + 24);
    }
    else
    {
      v8 = *(_QWORD *)(v3 + 136);
      if (v8)
      {
        *(_QWORD *)(v3 + 136) = *(_QWORD *)(v8 + 64);
      }
      else
      {
        v8 = fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::Link>::Allocate((_QWORD *)(v3 + 88), 1);
        *(_QWORD *)(v8 + 64) = 0;
      }
      v7 = fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ArcIterator(v8, *(_QWORD *)(v3 + 8), a2);
      *(_QWORD *)(v3 + 24) = v7;
    }
    v9 = *(_DWORD *)(v7 + 56);
    *(_DWORD *)(v7 + 56) = v9 & 0xFFFFFFEF;
    if (v9 != 15 && v9 != (v9 & 0xFFFFFFEF))
      fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(v7);
    result = fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(*(_QWORD *)(v3 + 8), a2);
    *(_QWORD *)(v3 + 48) = result;
    *(_DWORD *)(v3 + 68) = a2;
  }
  return result;
}

void sub_1ADF75574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Find(uint64_t a1, int a2)
{
  _BOOL8 result;
  int v4;

  *(_BYTE *)(a1 + 73) = 1;
  if (*(_BYTE *)(a1 + 74))
  {
    result = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 40) = -1;
  }
  else
  {
    *(_BYTE *)(a1 + 72) = a2 == 0;
    if (a2 == -1)
      v4 = 0;
    else
      v4 = a2;
    *(_DWORD *)(a1 + 40) = v4;
    return (fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Search(a1) & 1) != 0
        || *(_BYTE *)(a1 + 72) != 0;
  }
  return result;
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Search(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t result;
  uint64_t v24;

  v2 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(a1 + 32))
    v3 = 2;
  else
    v3 = 1;
  v4 = *(_DWORD *)(v2 + 56);
  v5 = v4 & 0xFFFFFFF0 | v3;
  *(_DWORD *)(v2 + 56) = v5;
  if (v4 != 15 && v4 != v5)
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(v2);
  if (*(_DWORD *)(a1 + 40) < *(_DWORD *)(a1 + 36))
  {
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v7 + 48) = 0;
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(v7);
    v8 = *(_QWORD *)(a1 + 24);
    v9 = (_QWORD *)(v8 + 48);
    v10 = *(_QWORD *)(v8 + 48);
    if (v10 < *(_QWORD *)(v8 + 40))
    {
      while (1)
      {
        v11 = *(_DWORD *)(a1 + 32) ? 28 : 24;
        v12 = *(_DWORD *)(v8 + v11);
        v13 = *(_DWORD *)(a1 + 40);
        v14 = v12 == v13;
        v15 = v12 <= v13 ? 0 : 7;
        if (v14)
          v15 = 1;
        if (v15)
          break;
        *v9 = v10 + 1;
        fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(v8);
        v8 = *(_QWORD *)(a1 + 24);
        v9 = (_QWORD *)(v8 + 48);
        v10 = *(_QWORD *)(v8 + 48);
        if (v10 >= *(_QWORD *)(v8 + 40))
          return 0;
      }
      result = 0;
      if (v15 == 1)
        return 1;
      return result;
    }
    return 0;
  }
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_QWORD *)(a1 + 24);
  v18 = 0;
  if (!v16)
  {
LABEL_32:
    *(_QWORD *)(v17 + 48) = v18;
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(v17);
    return 0;
  }
  while (1)
  {
    v19 = (v16 + v18) >> 1;
    *(_QWORD *)(v17 + 48) = v19;
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(v17);
    v17 = *(_QWORD *)(a1 + 24);
    v20 = *(_DWORD *)(a1 + 32) ? 28 : 24;
    v21 = *(_DWORD *)(v17 + v20);
    v22 = *(_DWORD *)(a1 + 40);
    if (v21 <= v22)
      break;
    v16 = (v16 + v18) >> 1;
LABEL_31:
    if (v18 >= v16)
      goto LABEL_32;
  }
  if (v21 < v22)
  {
    v18 = v19 + 1;
    goto LABEL_31;
  }
  while (v19 > v18)
  {
    *(_QWORD *)(v17 + 48) = --v19;
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(v17);
    v17 = *(_QWORD *)(a1 + 24);
    if (*(_DWORD *)(a1 + 32))
      v24 = 28;
    else
      v24 = 24;
    if (*(_DWORD *)(v17 + v24) != *(_DWORD *)(a1 + 40))
    {
      *(_QWORD *)(v17 + 48) = v19 + 1;
      fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(v17);
      return 1;
    }
  }
  return 1;
}

BOOL fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Done(uint64_t a1)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;

  if (*(_BYTE *)(a1 + 72))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(v3 + 48) >= *(_QWORD *)(v3 + 40))
    return 1;
  if (!*(_BYTE *)(a1 + 73))
    return 0;
  v4 = *(_DWORD *)(a1 + 32);
  if (v4)
    v5 = 2;
  else
    v5 = 1;
  v6 = *(_DWORD *)(v3 + 56);
  v7 = v6 & 0xFFFFFFF0 | v5;
  *(_DWORD *)(v3 + 56) = v7;
  v8 = v6 == 15 || v6 == v7;
  if (!v8)
  {
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(v3);
    v4 = *(_DWORD *)(a1 + 32);
  }
  v8 = v4 == 0;
  v9 = 28;
  if (v8)
    v9 = 24;
  return *(_DWORD *)(*(_QWORD *)(a1 + 24) + v9) != *(_DWORD *)(a1 + 40);
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Value(uint64_t a1)
{
  uint64_t v3;
  int v4;

  if (*(_BYTE *)(a1 + 72))
    return a1 + 56;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_DWORD *)(v3 + 56);
  *(_DWORD *)(v3 + 56) = v4 | 0xF;
  if (v4 != 15 && v4 != (v4 | 0xF))
  {
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(v3);
    v3 = *(_QWORD *)(a1 + 24);
  }
  return v3 + 24;
}

uint64_t std::unique_ptr<fst::EnumerationData const>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::EnumerationFstImpl(uint64_t a1, fst::EnumerationData *a2, uint64_t a3)
{
  std::string *v6;
  uint64_t v7;
  fst::EnumerationData *v8;
  uint64_t v9;
  char v10;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D20DF0;
  fst::EnumerationData::Copy(a2, (uint64_t **)&__str);
  *(_QWORD *)(a1 + 64) = __str.__r_.__value_.__r.__words[0];
  v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 88))(a3, 0);
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(fst::EnumerationData **)(a1 + 64);
  v9 = operator new();
  fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::VirtualStateSpaceManager(v9, v8, v7);
  *(_QWORD *)(a1 + 80) = v9;
  std::string::basic_string[abi:ne180100]<0>(&__str, "enumeration");
  std::string::operator=(v6, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x555550001;
  v10 = (~(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 64))(*(_QWORD *)(a1 + 72), 0x3FFFFFFF0004, 1) & 0x155550000) == 0;
  FstCheck(v10, "(true) == ((properties & kAcceptor) && (properties & kIDeterministic) && (properties & kODeterministic) && (properties & kEpsilons) && (properties & kIEpsilons) && (properties & kOEpsilons) && (properties & kILabelSorted) && (properties & kOLabelSorted) && (properties & kWeighted))", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  return a1;
}

void sub_1ADF75B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t *v16;
  uint64_t v18;
  uint64_t v19;

  if (a15 < 0)
    operator delete(__p);
  v18 = *v16;
  *v16 = 0;
  if (v18)
    std::default_delete<fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>> const>::operator()[abi:ne180100]((uint64_t)v16, v18);
  v19 = *(_QWORD *)(v15 + 72);
  *(_QWORD *)(v15 + 72) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  std::unique_ptr<fst::EnumerationData const>::reset[abi:ne180100]((uint64_t *)(v15 + 64), 0);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

void fst::EnumerationData::Copy(fst::EnumerationData *this@<X0>, uint64_t **a2@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v4 = (uint64_t *)operator new();
  v5 = v4;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  v12 = *(_QWORD *)this;
  v13 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  fst::EnumerationData::EnumerationData(v4, &v12);
  *a2 = v5;
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1ADF75CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  uint64_t v10;

  if (a10)
    fst::EnumerationData::Copy(a10);
  MEMORY[0x1AF44D190](v10, 0x20C40A4A59CD2);
  _Unwind_Resume(a1);
}

uint64_t *fst::EnumerationData::EnumerationData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v3 = *a1;
  }
  FstCheck(*(_QWORD *)(v3 + 24) != 0, "(region_->Size()) > (0)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  return a1;
}

void sub_1ADF75D60(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::VirtualStateSpaceManager(uint64_t a1, fst::EnumerationData *a2, uint64_t a3)
{
  uint64_t v5;
  long double v6;
  float v7;
  int v8;
  int v9;
  float v10;
  int v11;
  void **v12;
  int v13;
  int v14;
  int v15;
  int *v16;
  fst *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  char *v21;
  _DWORD *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  int v30;
  void *__p[2];
  char v33;
  char v34;
  int v35;
  int v36;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  fst::FstStateDenseDistribution<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::FstStateDenseDistribution(a1 + 16, a3, **(unsigned int **)(*(_QWORD *)a2 + 8));
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v6 = *(double *)(v5 + 12);
  v7 = log(v6);
  v8 = *(_DWORD *)(v5 + 20);
  v9 = *(_DWORD *)(v5 + 24);
  LODWORD(v5) = *(_DWORD *)(v5 + 8);
  *(_QWORD *)(a1 + 200) = 0;
  *(float *)(a1 + 176) = -v7;
  v10 = log(1.0 - v6);
  *(float *)(a1 + 180) = -v10;
  v11 = v9 + v8 - v5;
  *(_DWORD *)(a1 + 184) = v11;
  *(_DWORD *)(a1 + 188) = v11;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  v12 = (void **)(a1 + 216);
  *(_QWORD *)(a1 + 192) = a1 + 200;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  FstCheck(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 20) == 0, "(metadata.MainFst().start_state_id) == (0)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  FstCheck(*(float *)(a1 + 176) > 0.0, "(smoothing_alpha_.Value()) > (0.0)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  FstCheck(*(float *)(a1 + 180) > 0.0, "(smoothing_alpha_complement_.Value()) > (0.0)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  std::vector<int>::reserve((std::vector<unsigned int> *)(a1 + 216), *(int *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 8));
  v13 = *(_DWORD *)(a1 + 184);
  v36 = 0;
  v14 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 8);
  if (v14 >= 1)
  {
    v15 = 0;
    do
    {
      v16 = (int *)fst::EnumerationData::TeleportationPoint(a2, v15);
      FstCheck(*v16 >= 0, "(teleportation_point.sub_fst_idx) >= (0)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
      FstCheck(*v16 < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 4), "(teleportation_point.sub_fst_idx) < (metadata.NumSubFsts())", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
      v35 = v13;
      v13 += *(_DWORD *)(fst::EnumerationData::SubFst(a2, *v16) + 4);
      if (v13 < 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        v17 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)__p);
        v18 = (_QWORD *)fst::cerr(v17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Encountered integer overflow when loading teleportation point ", 62);
        v19 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)".", 1);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v34);
        if (v33 < 0)
          operator delete(__p[0]);
      }
      std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,int const&,int &>((uint64_t **)(a1 + 192), &v35, &v35, &v36);
      v21 = *(char **)(a1 + 224);
      v20 = *(_QWORD *)(a1 + 232);
      if ((unint64_t)v21 >= v20)
      {
        v23 = (char *)*v12;
        v24 = (v21 - (_BYTE *)*v12) >> 2;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v26 = v20 - (_QWORD)v23;
        if (v26 >> 1 > v25)
          v25 = v26 >> 1;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
          v27 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
        {
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 232, v27);
          v23 = *(char **)(a1 + 216);
          v21 = *(char **)(a1 + 224);
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[4 * v24];
        *(_DWORD *)v29 = v35;
        v22 = v29 + 4;
        while (v21 != v23)
        {
          v30 = *((_DWORD *)v21 - 1);
          v21 -= 4;
          *((_DWORD *)v29 - 1) = v30;
          v29 -= 4;
        }
        *(_QWORD *)(a1 + 216) = v29;
        *(_QWORD *)(a1 + 224) = v22;
        *(_QWORD *)(a1 + 232) = &v28[4 * v27];
        if (v23)
          operator delete(v23);
      }
      else
      {
        *(_DWORD *)v21 = v35;
        v22 = v21 + 4;
      }
      *(_QWORD *)(a1 + 224) = v22;
      v15 = v36 + 1;
      v36 = v15;
      v14 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 8);
    }
    while (v15 < v14);
  }
  FstCheck(*(_QWORD *)(a1 + 208) == v14, "(virtual_start_state_id_to_teleportation_point_idx_.size()) == (metadata.NumTeleportationPoints())", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  FstCheck(*(int *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 8) == (uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 2, "(teleportation_point_idx_to_virtual_start_state_id_.size()) == (metadata.NumTeleportationPoints())", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  *(_DWORD *)(a1 + 240) = v13;
  return a1;
}

void sub_1ADF76128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t v20;
  void **v21;
  void *v23;

  v23 = *v21;
  if (*v21)
  {
    *(_QWORD *)(v19 + 224) = v23;
    operator delete(v23);
  }
  std::__tree<int>::destroy(v20, *(_QWORD **)(v19 + 200));
  *(_QWORD *)(v19 + 16) = &unk_1E5D221D8;
  fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~SortedMatcher((_QWORD *)(v19 + 24));
  _Unwind_Resume(a1);
}

uint64_t fst::EnumerationData::TeleportationPoint(fst::EnumerationData *this, int a2)
{
  FstCheck(a2 >= 0, "(idx) >= (0)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  FstCheck(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 8) > a2, "(idx) < (Header().num_teleportation_points)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  return *(_QWORD *)(*(_QWORD *)this + 8) + 12 * a2 + 40;
}

uint64_t fst::EnumerationData::SubFst(fst::EnumerationData *this, int a2)
{
  FstCheck(a2 >= 0, "(idx) >= (0)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  FstCheck(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 4) > a2, "(idx) < (NumSubFsts())", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  return *(_QWORD *)(*(_QWORD *)this + 8) + 12 * *(int *)(*(_QWORD *)(*(_QWORD *)this + 8) + 8) + 20 * a2 + 40;
}

uint64_t fst::FstStateDenseDistribution<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::FstStateDenseDistribution(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  *(_QWORD *)a1 = &unk_1E5D221D8;
  v6 = a1 + 8;
  fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SortedMatcher((int32x2_t *)(a1 + 8), a2, 0, 1);
  *(float *)(a1 + 152) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3);
  fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetState(v6, a3);
  return a1;
}

void sub_1ADF76338(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~SortedMatcher(v1);
  _Unwind_Resume(a1);
}

int32x2_t *fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SortedMatcher(int32x2_t *a1, uint64_t a2, __int32 a3, __int32 a4)
{
  __int32 v7;
  fst *v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  *a1 = (int32x2_t)&unk_1E5D1BAA8;
  a1[1] = (int32x2_t)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  a1[2].i32[0] = -1;
  a1[3] = 0;
  a1[4].i32[0] = a3;
  a1[4].i32[1] = a4;
  a1[5].i32[0] = -1;
  a1[6] = 0;
  *(_OWORD *)a1[7].i8 = xmmword_1AE142840;
  a1[9].i8[2] = 0;
  fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::MemoryPool(&a1[10], 1);
  v7 = a1[4].i32[0];
  if (v7 && v7 != 3)
  {
    if (v7 == 1)
    {
      a1[7] = vrev64_s32(a1[7]);
    }
    else
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v8 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
      if (v12 < 0)
        operator delete(__p[0]);
      a1[4].i32[0] = 3;
      a1[9].i8[2] = 1;
    }
  }
  return a1;
}

void sub_1ADF76498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  quasar::Bitmap *v19;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *(_QWORD *)(v18 + 80) = &unk_1E5D195A8;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Link>::~MemoryArena((_QWORD *)(v18 + 88));
  quasar::Bitmap::~Bitmap(v19);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,int const&,int &>(uint64_t **a1, int *a2, _DWORD *a3, int *a4)
{
  uint64_t *v7;
  uint64_t **v8;
  int v9;
  uint64_t **v10;
  int v11;
  uint64_t *v12;
  int v13;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v11 = *((_DWORD *)v7 + 7);
        if (v9 >= v11)
          break;
        v7 = *v10;
        v8 = v10;
        if (!*v10)
          goto LABEL_10;
      }
      if (v11 >= v9)
        break;
      v7 = v10[1];
      if (!v7)
      {
        v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_10:
    v12 = (uint64_t *)operator new(0x28uLL);
    v13 = *a4;
    *((_DWORD *)v12 + 7) = *a3;
    *((_DWORD *)v12 + 8) = v13;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v8, v12);
    return (uint64_t **)v12;
  }
  return v10;
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::EnumerationFstImpl(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  std::string *v6;
  uint64_t v7;
  uint64_t v8;
  fst::EnumerationData *v9;
  uint64_t v10;
  char v11;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &unk_1E5D20DF0;
  v7 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 64) = v7;
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 72) = v8;
  v9 = *(fst::EnumerationData **)(a1 + 64);
  v10 = operator new();
  fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::VirtualStateSpaceManager(v10, v9, v8);
  *(_QWORD *)(a1 + 80) = v10;
  std::string::basic_string[abi:ne180100]<0>(&__str, "enumeration");
  std::string::operator=(v6, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x555550001;
  v11 = (~(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 64))(*(_QWORD *)(a1 + 72), 0x3FFFFFFF0004, 1) & 0x155550000) == 0;
  FstCheck(v11, "(true) == ((properties & kAcceptor) && (properties & kIDeterministic) && (properties & kODeterministic) && (properties & kEpsilons) && (properties & kIEpsilons) && (properties & kOEpsilons) && (properties & kILabelSorted) && (properties & kOLabelSorted) && (properties & kWeighted))", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  return a1;
}

void sub_1ADF7671C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v19;
  uint64_t v20;

  if (a15 < 0)
    operator delete(__p);
  v19 = *v17;
  *v17 = 0;
  if (v19)
    std::default_delete<fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>> const>::operator()[abi:ne180100]((uint64_t)v17, v19);
  v20 = *(_QWORD *)(v15 + 72);
  *(_QWORD *)(v15 + 72) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  std::unique_ptr<fst::EnumerationData const>::reset[abi:ne180100](v16, 0);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

_QWORD *fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~EnumerationFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D26A18;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~EnumerationFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D26A18;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 72) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72));
}

float fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Final(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::NumArcs(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons()
{
  return fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::NumInputEpsilons();
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::NumOutputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Copy(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)operator new();
  v3 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), 0);
  *v2 = &unk_1E5D1E3A8;
  v2[1] = v3;
  return v2;
}

void sub_1ADF7699C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(*(_QWORD *)(v2 + 80) + 240);
  return result;
}

uint64_t fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::InitArcIterator(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::IsMemoryMapped(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 72) + 152))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72));
}

uint64_t fst::ImplToExpandedFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80) + 240);
}

float fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Final(uint64_t a1, int a2)
{
  int v2;
  float v4;
  float v5;
  uint64_t v6;
  int v7;
  fst::EnumerationData *v8;
  int *v9;
  _DWORD *v10;
  uint64_t v11;
  float v12;
  BOOL v13;
  float v14;

  if (*(_DWORD *)(*(_QWORD *)(a1 + 80) + 184) <= a2)
    return INFINITY;
  v2 = a2;
  v4 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 32))(*(_QWORD *)(a1 + 72));
  v5 = v4;
  if (v4 != INFINITY)
  {
    v6 = *(_QWORD *)(a1 + 80);
    if (*(_DWORD *)(v6 + 184) <= v2)
    {
      v7 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ToTeleportationPointIdx(v6, v2);
      v8 = *(fst::EnumerationData **)v6;
      v9 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v6, v7);
      v10 = (_DWORD *)fst::EnumerationData::SubFst(v8, *v9);
      v11 = *(_QWORD *)(v6 + 216);
      if (v7 >= (unint64_t)((*(_QWORD *)(v6 + 224) - v11) >> 2))
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      v2 = *v10 + v2 - *(_DWORD *)(v11 + 4 * v7);
    }
    if (v2 != **(_DWORD **)(**(_QWORD **)v6 + 8))
    {
      v5 = NAN;
      if (v4 != -INFINITY)
      {
        v12 = *(float *)(v6 + 176);
        v5 = NAN;
        if (v12 != -INFINITY)
        {
          v13 = v12 == INFINITY || v4 == INFINITY;
          v14 = v4 + v12;
          if (v13)
            return INFINITY;
          else
            return v14;
        }
      }
    }
  }
  return v5;
}

uint64_t fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ToTeleportationPointIdx(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  fst *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  void *__p[2];
  char v17;
  char v18;

  FstCheck(*(_DWORD *)(a1 + 184) <= a2, "(IsMainGraph(virtual_state_id)) == (false)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  v5 = (uint64_t *)(a1 + 200);
  v4 = *(_QWORD *)(a1 + 200);
  if (v4)
  {
    do
    {
      v6 = *(_DWORD *)(v4 + 28);
      v7 = v6 <= a2;
      if (v6 <= a2)
        v8 = (uint64_t *)(v4 + 8);
      else
        v8 = (uint64_t *)v4;
      if (!v7)
        v5 = (uint64_t *)v4;
      v4 = *v8;
    }
    while (*v8);
  }
  if (v5 == *(uint64_t **)(a1 + 192))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v9 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    v10 = (_QWORD *)fst::cerr(v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Unable to find teleportation point index for virtual state ", 59);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)".", 1);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v18);
    if (v17 < 0)
      operator delete(__p[0]);
  }
  v12 = *v5;
  if (*v5)
  {
    do
    {
      v13 = v12;
      v12 = *(_QWORD *)(v12 + 8);
    }
    while (v12);
  }
  else
  {
    do
    {
      v13 = v5[2];
      v14 = *(_QWORD *)v13 == (_QWORD)v5;
      v5 = (uint64_t *)v13;
    }
    while (v14);
  }
  return *(unsigned int *)(v13 + 32);
}

void sub_1ADF76C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::NumArcs(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int HasVirtualBackoffArc;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  fst::EnumerationData *v9;
  int *v10;
  _DWORD *v11;
  uint64_t v12;
  int v14;
  fst::EnumerationData *v15;
  int *v16;
  _DWORD *v17;
  uint64_t v18;

  v2 = a2;
  HasVirtualBackoffArc = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::HasVirtualBackoffArc(*(_QWORD *)(a1 + 80), a2);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_DWORD *)(v6 + 184);
  if (HasVirtualBackoffArc)
  {
    if (v7 > (int)v2)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v2) + 1;
    v8 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ToTeleportationPointIdx(v6, v2);
    v9 = *(fst::EnumerationData **)v6;
    v10 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v6, v8);
    v11 = (_DWORD *)fst::EnumerationData::SubFst(v9, *v10);
    v12 = *(_QWORD *)(v6 + 216);
    if (v8 < (unint64_t)((*(_QWORD *)(v6 + 224) - v12) >> 2))
    {
      v2 = (*v11 + v2 - *(_DWORD *)(v12 + 4 * v8));
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v2) + 1;
    }
LABEL_10:
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  }
  if (v7 <= (int)v2)
  {
    v14 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ToTeleportationPointIdx(v6, v2);
    v15 = *(fst::EnumerationData **)v6;
    v16 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v6, v14);
    v17 = (_DWORD *)fst::EnumerationData::SubFst(v15, *v16);
    v18 = *(_QWORD *)(v6 + 216);
    if (v14 >= (unint64_t)((*(_QWORD *)(v6 + 224) - v18) >> 2))
      goto LABEL_10;
    v2 = (*v17 + v2 - *(_DWORD *)(v18 + 4 * v14));
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v2);
}

uint64_t fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::HasVirtualBackoffArc(uint64_t a1, int a2)
{
  int v4;
  int v5;
  fst::EnumerationData *v6;
  int *v7;
  _DWORD *v8;
  uint64_t v9;
  char v10;
  BOOL v12;
  _DWORD v14[10];
  unint64_t v15;
  unint64_t v16;

  v4 = a2;
  if (*(_DWORD *)(a1 + 184) <= a2)
  {
    v5 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ToTeleportationPointIdx(a1, a2);
    v6 = *(fst::EnumerationData **)a1;
    v7 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)a1, v5);
    v8 = (_DWORD *)fst::EnumerationData::SubFst(v6, *v7);
    v9 = *(_QWORD *)(a1 + 216);
    if (v5 >= (unint64_t)((*(_QWORD *)(a1 + 224) - v9) >> 2))
      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
    v4 = *v8 + a2 - *(_DWORD *)(v9 + 4 * v5);
  }
  if (v4 == **(_DWORD **)(**(_QWORD **)a1 + 8))
  {
    v10 = 0;
  }
  else if (*(_DWORD *)(a1 + 184) <= a2)
  {
    v10 = 1;
  }
  else
  {
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ArcIterator((uint64_t)v14, *(_QWORD *)(a1 + 8), a2);
    v12 = v16 < v15 && v14[6] == 0;
    v10 = !v12;
  }
  return v10 & 1;
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::NumInputEpsilons()
{
  fst *v0;
  _QWORD *v1;
  void *__p[2];
  char v4;
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  v0 = fst::LogMessage::LogMessage((fst *)&v5, (uint64_t)__p);
  v1 = (_QWORD *)fst::cerr(v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"NumInputEpsilons is not implemented on EnumerationFst since it cannot be computed efficiently.", 94);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v5);
  if (v4 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1ADF76F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v3;
  BOOL v4;
  _DWORD v6[10];
  unint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(a1 + 80);
  if (*(_DWORD *)(v3 + 184) > a2
    && ((fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ArcIterator((uint64_t)v6, *(_QWORD *)(v3 + 8), a2), v8 < v7)? (v4 = v6[6] == 0): (v4 = 0), v4))
  {
    return 1;
  }
  else
  {
    return fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::HasVirtualBackoffArc(v3, a2);
  }
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::InitArcIterator(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::ArcIterator(v6, a1, a2);
  *a3 = v6;
  a3[3] = 0;
  return result;
}

void sub_1ADF7705C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40C8A3FF7BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::ArcIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = &unk_1E5D1A2D0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 56) = -1;
  *(_QWORD *)(a1 + 64) = -1;
  *(_DWORD *)(a1 + 72) = 15;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ArcIterator(a1 + 80, *(_QWORD *)(a2 + 72), 0);
  *(_BYTE *)(a1 + 144) = 0;
  fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::SetState(a1, a3);
  return a1;
}

uint64_t fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::SetState(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  fst::EnumerationData *v6;
  int *v7;
  _DWORD *v8;
  uint64_t v9;

  v2 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (*(_DWORD *)(v4 + 184) <= (int)a2)
  {
    v5 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ToTeleportationPointIdx(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80), a2);
    v6 = *(fst::EnumerationData **)v4;
    v7 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v4, v5);
    v8 = (_DWORD *)fst::EnumerationData::SubFst(v6, *v7);
    v9 = *(_QWORD *)(v4 + 216);
    if (v5 >= (unint64_t)((*(_QWORD *)(v4 + 224) - v9) >> 2))
      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
    a2 = (*v8 + v2 - *(_DWORD *)(v9 + 4 * v5));
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 80) + 16))(a1 + 80, a2);
  *(_BYTE *)(a1 + 144) = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::HasVirtualBackoffArc(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80), v2);
  *(_DWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 56) = fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::NumArcs(*(_QWORD *)(a1 + 8), v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::~ArcIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Reinit(uint64_t a1, uint64_t a2)
{
  fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::SetState(a1, a2);
  return 1;
}

BOOL fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64) >= *(_QWORD *)(a1 + 56);
}

uint64_t fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 144) && !*(_QWORD *)(a1 + 64))
    return a1 + 36;
  else
    return a1 + 20;
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Next_(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 64) + 1;
  *(_QWORD *)(a1 + 64) = v2;
  FstCheck(v2 != 0, "(i_) >= (1)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  if (!*(_BYTE *)(a1 + 144) || *(_QWORD *)(a1 + 64) >= 2uLL)
  {
    ++*(_QWORD *)(a1 + 128);
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(a1 + 80);
  }
  fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::ComputeFullArc(a1);
}

uint64_t fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Reset_(uint64_t a1)
{
  *(_QWORD *)(a1 + 128) = 0;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(a1 + 80);
  *(_QWORD *)(a1 + 64) = 0;
  if (*(_BYTE *)(a1 + 144))
    fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::ComputeBackoffArc(a1);
  else
    fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::ComputeFullArc(a1);
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Seek_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(a1 + 144);
  if (*(_BYTE *)(a1 + 144))
    v5 = a2 == 0;
  else
    v5 = 0;
  v6 = a1 + 80;
  if (v5)
    v7 = 0;
  else
    v7 = a2 - v4;
  *(_QWORD *)(a1 + 128) = v7;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(v6);
  *(_QWORD *)(a1 + 64) = a2;
  if (a2 || !*(_BYTE *)(a1 + 144))
    fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::ComputeFullArc(a1);
}

uint64_t fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::Flags_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::SetFlags_(uint64_t a1, char a2, int a3)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v9;
  int v10;

  v4 = *(_DWORD *)(a1 + 136);
  v5 = ~a3;
  v6 = a2 & 0xF;
  v7 = v4 & ~a3 | v6;
  *(_DWORD *)(a1 + 136) = v7;
  if (v4 != 15 && v4 != v7)
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(a1 + 80);
  v9 = *(_DWORD *)(a1 + 72);
  v10 = v9 & v5 | v6;
  *(_DWORD *)(a1 + 72) = v10;
  if (v9 != 15 && v9 != v10)
  {
    if (*(_BYTE *)(a1 + 144) && !*(_QWORD *)(a1 + 64))
      fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::ComputeBackoffArc(a1);
    else
      fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::ComputeFullArc(a1);
  }
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::ComputeFullArc(uint64_t a1)
{
  unint64_t v1;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  fst::EnumerationData *v10;
  int *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  fst::EnumerationData *v17;
  int *v18;
  _DWORD *v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  BOOL v24;
  float v25;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1 < *(_QWORD *)(a1 + 56))
  {
    if (*(_BYTE *)(a1 + 144))
      FstCheck(v1 != 0, "(i_) >= (1)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
    v3 = *(_DWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 20) = *(_QWORD *)(a1 + 104);
    if ((v3 & 0xFu) - 1 >= 2)
    {
      if ((v3 & 8) != 0)
      {
        v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
        v5 = *(_DWORD *)(a1 + 16);
        v6 = *(_DWORD *)(a1 + 116);
        if (*(_DWORD *)(v4 + 184) <= v5)
        {
          v9 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ToTeleportationPointIdx(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80), v5);
          v10 = *(fst::EnumerationData **)v4;
          v11 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v4, v9);
          v12 = (_DWORD *)fst::EnumerationData::SubFst(v10, *v11);
          v13 = *(_QWORD *)(v4 + 216);
          if (v9 >= (unint64_t)((*(_QWORD *)(v4 + 224) - v13) >> 2))
            std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
          v6 = *(_DWORD *)(v13 + 4 * v9) + v6 - *v12;
        }
        else
        {
          v7 = *(_DWORD *)(v4 + 188);
          v8 = v6 - v7;
          if (v6 >= v7)
          {
            FstCheck(v8 < *(_DWORD *)(*(_QWORD *)(**(_QWORD **)v4 + 8) + 8), "(teleportation_point_idx) < (metadata_.NumTeleportationPoints())", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
            v6 = *(_DWORD *)(*(_QWORD *)(v4 + 216) + 4 * v8);
          }
        }
        *(_DWORD *)(a1 + 32) = v6;
        v3 = *(_DWORD *)(a1 + 72);
      }
      if ((v3 & 4) != 0)
      {
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 112);
        if (*(_DWORD *)(a1 + 20))
        {
          v14 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
          v15 = *(_DWORD *)(a1 + 16);
          if (*(_DWORD *)(v14 + 184) <= v15)
          {
            v16 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ToTeleportationPointIdx(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80), *(_DWORD *)(a1 + 16));
            v17 = *(fst::EnumerationData **)v14;
            v18 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v14, v16);
            v19 = (_DWORD *)fst::EnumerationData::SubFst(v17, *v18);
            v20 = *(_QWORD *)(v14 + 216);
            if (v16 >= (unint64_t)((*(_QWORD *)(v14 + 224) - v20) >> 2))
              std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
            v15 = *v19 + v15 - *(_DWORD *)(v20 + 4 * v16);
          }
          if (v15 != **(_DWORD **)(**(_QWORD **)v14 + 8))
          {
            v21 = *(float *)(a1 + 28);
            v22 = NAN;
            if (v21 != -INFINITY)
            {
              v23 = *(float *)(v14 + 176);
              v22 = NAN;
              if (v23 != -INFINITY)
              {
                v22 = INFINITY;
                v24 = v23 == INFINITY || v21 == INFINITY;
                v25 = v21 + v23;
                if (!v24)
                  v22 = v25;
              }
            }
            *(float *)(a1 + 28) = v22;
          }
        }
      }
    }
  }
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>>::ComputeBackoffArc(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  _DWORD *v5;
  int v6;

  FstCheck(*(_BYTE *)(a1 + 144), "(has_virtual_backoff_arc_) == (true)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  v2 = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if ((v2 & 0xFu) - 1 >= 2)
  {
    if ((v2 & 8) != 0)
    {
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
      v4 = *(_DWORD *)(a1 + 16);
      if (*(_DWORD *)(v3 + 184) <= v4)
      {
        v6 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ToTeleportationPointIdx(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80), v4);
        v5 = (_DWORD *)(fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v3, v6) + 8);
        v2 = *(_DWORD *)(a1 + 72);
      }
      else
      {
        v5 = *(_DWORD **)(**(_QWORD **)v3 + 8);
      }
      *(_DWORD *)(a1 + 48) = *v5;
    }
    if ((v2 & 4) != 0)
      *(float *)(a1 + 44) = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::GetBackoffWeight(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80), *(unsigned int *)(a1 + 16));
  }
}

float fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::GetBackoffWeight(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  fst::EnumerationData *v6;
  int *v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  fst::EnumerationData *v13;
  int *v14;
  _DWORD *v15;
  uint64_t v16;
  fst::EnumerationData *v17;
  float v18;
  float v19;
  float v20;
  int v21;
  int *v22;
  int v23;
  int v24;
  int v25;
  int *v26;
  int v27;
  int v28;
  fst *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  int v34;
  double v35;
  double v36;
  fst *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  double v47;
  int v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  int v55;
  double v56;
  float *Weight;
  BOOL *v58;
  fst *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  float v68;
  BOOL *v69;
  __n128 v70;
  double v71;
  fst *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  float v79;
  double v80;
  double v81;
  double v82;
  double v83;
  int v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  int v92;
  double v93;
  long double v94;
  void *v96[2];
  char v97;
  char v98;
  void *v99[2];
  char v100;
  int v101;
  float v102;
  unint64_t v103;
  unint64_t v104;
  char v105;
  void *__p[2];
  char v107;
  int v108;
  unint64_t v109;
  unint64_t v110;

  v4 = a2;
  if (*(_DWORD *)(a1 + 184) <= (int)a2)
  {
    v5 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ToTeleportationPointIdx(a1, a2);
    v6 = *(fst::EnumerationData **)a1;
    v7 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)a1, v5);
    v8 = (_DWORD *)fst::EnumerationData::SubFst(v6, *v7);
    v9 = *(_QWORD *)(a1 + 216);
    if (v5 >= (unint64_t)((*(_QWORD *)(a1 + 224) - v9) >> 2))
      goto LABEL_74;
    v4 = *v8 + a2 - *(_DWORD *)(v9 + 4 * v5);
  }
  FstCheck(v4 != **(_DWORD **)(**(_QWORD **)a1 + 8), "(IsUnigramState(virtual_state_id)) == (false)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  v10 = *(_DWORD *)(a1 + 184);
  v11 = a2;
  if (v10 > (int)a2)
    goto LABEL_7;
  v12 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ToTeleportationPointIdx(a1, a2);
  v13 = *(fst::EnumerationData **)a1;
  v14 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)a1, v12);
  v15 = (_DWORD *)fst::EnumerationData::SubFst(v13, *v14);
  v16 = *(_QWORD *)(a1 + 216);
  if (v12 >= (unint64_t)((*(_QWORD *)(a1 + 224) - v16) >> 2))
LABEL_74:
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  v11 = (*v15 + a2 - *(_DWORD *)(v16 + 4 * v12));
  v10 = *(_DWORD *)(a1 + 184);
LABEL_7:
  v17 = *(fst::EnumerationData **)a1;
  if (v10 <= (int)a2)
  {
    v21 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ToTeleportationPointIdx(a1, a2);
    v22 = (int *)fst::EnumerationData::TeleportationPoint(v17, v21);
    v23 = *v22;
    v24 = *(_DWORD *)fst::EnumerationData::SubFst(*(fst::EnumerationData **)a1, *v22);
    v25 = *(_DWORD *)(a1 + 184);
    if (v25 <= (int)a2)
    {
      v27 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ToTeleportationPointIdx(a1, a2);
      v26 = (int *)(fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)a1, v27) + 8);
      v25 = *(_DWORD *)(a1 + 184);
    }
    else
    {
      v26 = *(int **)(**(_QWORD **)a1 + 8);
    }
    v28 = *v26;
    FstCheck(v25 > *v26, "(IsMainGraph(backoff_state_id)) == (true)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
    if (*(_DWORD *)(a1 + 184) > v28)
    {
      fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ArcIterator((uint64_t)__p, *(_QWORD *)(a1 + 8), v28);
      if (v110 < v109 && !v108)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "WARNING");
        v29 = fst::LogMessage::LogMessage((fst *)v99, (uint64_t)__p);
        v30 = (_QWORD *)fst::cerr(v29);
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Backing off to a state with an explicit back-off arc ", 53);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"is not supported and will yield an unnormalized model.", 54);
        fst::LogMessage::~LogMessage((fst::LogMessage *)v99);
        if (v107 < 0)
          operator delete(__p[0]);
      }
    }
    fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SortedMatcher((int32x2_t *)__p, *(_QWORD *)(a1 + 8), 0, 1);
    fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetState((uint64_t)__p, v11);
    v32 = *(_QWORD *)(**(_QWORD **)a1 + 8);
    v33 = *(_DWORD *)(v32 + 4);
    v34 = *(_DWORD *)(v32 + 8);
    v35 = (float)-*(float *)(v32
                           + 12 * v34
                           + 20 * v33
                           + 4 * *(int *)(fst::EnumerationData::SubFst(*(fst::EnumerationData **)a1, v23) + 16)
                           + 4 * ((int)v11 - v24)
                           + 40);
    v36 = fabs(v35);
    if ((unint64_t)(*(_QWORD *)&v36 - 0x10000000000000) >> 53 >= 0x3FF && *(_QWORD *)&v36 != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v99, "FATAL");
      v38 = fst::LogMessage::LogMessage((fst *)v96, (uint64_t)v99);
      v39 = (_QWORD *)fst::cerr(v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Stored sum-of-unigrams probabilities for state ", 47);
      v40 = (_QWORD *)std::ostream::operator<<();
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" ", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"within sub-fst ", 15);
      v42 = (_QWORD *)std::ostream::operator<<();
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" is infinite. ", 14);
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"", 0);
      v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"This can occur when unigram distribution used during model estimation ", 70);
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"has missing or non-finite probabilities for symbol table tokens that occur ", 75);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"in terminals.", 13);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v96);
      if (v100 < 0)
        operator delete(v99[0]);
    }
    v105 = 0;
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ArcIterator((uint64_t)v99, *(_QWORD *)(a1 + 8), v28);
    v47 = INFINITY;
    while (v104 < v103)
    {
      v48 = v101;
      if (v101
        && fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Find((uint64_t)__p, v101))
      {
        v49 = (float)(*(float *)(a1 + 176) + v102);
        while (1)
        {
          v50 = v49;
          if (v47 == INFINITY)
            break;
          v49 = v47;
          if (v50 == INFINITY)
          {
            v50 = v47;
            break;
          }
          v47 = v50;
          if (v49 <= v50)
          {
            v51 = exp(v49 - v50);
            v52 = log(v51 + 1.0);
            if (v51 >= 0.001)
            {
              v56 = -v52;
            }
            else
            {
              v53 = -v51;
              v54 = 2.0;
              v55 = 3;
              v56 = v53;
              do
              {
                v56 = v56 + pow(v53, v54) / v54;
                v54 = v54 + 1.0;
                --v55;
              }
              while (v55);
            }
            v50 = v49 + v56;
            break;
          }
        }
        Weight = (float *)fst::FstStateDenseDistribution<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::GetWeight(a1 + 16, v48);
        v35 = fst::NegLogDiff((fst *)&v105, v35, *Weight, v58, 0.001);
        if (v105)
        {
          std::string::basic_string[abi:ne180100]<0>(v96, "WARNING");
          v59 = fst::LogMessage::LogMessage((fst *)&v98, (uint64_t)v96);
          v60 = (_QWORD *)fst::cerr(v59);
          v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"Encountered error when updating the sum of ", 43);
          v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"unigram probabilities for explicitly-defined events ", 52);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"for label ", 10);
          v63 = (_QWORD *)std::ostream::operator<<();
          v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" ", 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"with unigram weight ", 20);
          fst::FstStateDenseDistribution<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::GetWeight(a1 + 16, v48);
          v65 = (_QWORD *)std::ostream::operator<<();
          v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)".", 1);
          v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" ", 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"This can happen when the internal graph uses quantized weights. Is that the case?", 81);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v98);
          if (v97 < 0)
            operator delete(v96[0]);
          v105 = 0;
        }
      }
      else
      {
        v50 = v47;
      }
      ++v104;
      fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc((uint64_t)v99);
      v47 = v50;
    }
    v68 = *(float *)(a1 + 180);
    v70.n128_f32[0] = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v11);
    v71 = v68;
    LODWORD(v99[0]) = v70.n128_u32[0];
    LODWORD(v96[0]) = 2139095040;
    if (v70.n128_f32[0] != INFINITY)
    {
      v35 = fst::NegLogDiff((fst *)&v105, v35, *(float *)(a1 + 168), v69, 0.001);
      if (v105)
      {
        std::string::basic_string[abi:ne180100]<0>(v99, "WARNING");
        v72 = fst::LogMessage::LogMessage((fst *)v96, (uint64_t)v99);
        v73 = (_QWORD *)fst::cerr(v72);
        v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Encountered error when updating the sum of ", 43);
        v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"unigram probabilities for explicitly-defined events ", 52);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"for end-of-sentence with unigram weight ", 40);
        v76 = (_QWORD *)std::ostream::operator<<();
        v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)".", 1);
        v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)" ", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"This can happen when the internal graph uses quantized weights. Is that the case?", 81);
        fst::LogMessage::~LogMessage((fst::LogMessage *)v96);
        if (v100 < 0)
          operator delete(v99[0]);
        v105 = 0;
      }
      v79 = *(float *)(a1 + 176);
      v80 = (float)(v79
                  + (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v11));
      do
      {
        v70.n128_f64[0] = v80;
        if (v71 == INFINITY)
        {
          v71 = v80;
          goto LABEL_61;
        }
        v80 = v71;
        if (v70.n128_f64[0] == INFINITY)
          goto LABEL_61;
        v71 = v70.n128_f64[0];
      }
      while (v80 > v70.n128_f64[0]);
      v81 = exp(v80 - v70.n128_f64[0]);
      v70.n128_f64[0] = log(v81 + 1.0);
      if (v81 >= 0.001)
      {
        v85 = -v70.n128_f64[0];
      }
      else
      {
        v82 = -v81;
        v83 = 2.0;
        v84 = 3;
        v85 = v82;
        do
        {
          v70.n128_f64[0] = pow(v82, v83) / v83;
          v85 = v85 + v70.n128_f64[0];
          v83 = v83 + 1.0;
          --v84;
        }
        while (v84);
      }
      v71 = v80 + v85;
    }
LABEL_61:
    v86 = v35
        + fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::GetBackoffWeight(a1, v28, v70);
    while (1)
    {
      v87 = v86;
      if (v47 == INFINITY)
        break;
      v86 = v47;
      if (v87 == INFINITY)
      {
        v87 = v47;
        break;
      }
      v47 = v87;
      if (v86 <= v87)
      {
        v88 = exp(v86 - v87);
        v89 = log(v88 + 1.0);
        if (v88 >= 0.001)
        {
          v93 = -v89;
        }
        else
        {
          v90 = -v88;
          v91 = 2.0;
          v92 = 3;
          v93 = v90;
          do
          {
            v93 = v93 + pow(v90, v91) / v91;
            v91 = v91 + 1.0;
            --v92;
          }
          while (v92);
        }
        v87 = v86 + v93;
        break;
      }
    }
    v94 = exp(-v87);
    v20 = v71 + log1p(-v94);
    fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~SortedMatcher(__p);
  }
  else
  {
    v18 = *(float *)(a1 + 180);
    v19 = expf(*(float *)(*(_QWORD *)(*(_QWORD *)v17 + 8)
                        + 12 * *(int *)(*(_QWORD *)(*(_QWORD *)v17 + 8) + 8)
                        + 20 * *(int *)(*(_QWORD *)(*(_QWORD *)v17 + 8) + 4)
                        + 4 * *(int *)(*(_QWORD *)(*(_QWORD *)v17 + 8) + 36)
                        + 4 * (int)v11
                        + 40));
    return v18 + log1pf(-v19);
  }
  return v20;
}

void sub_1ADF77FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double fst::NegLogDiff(fst *this, double a2, double a3, BOOL *a4, double a5)
{
  double v5;
  long double v7;
  fst *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *__p[2];
  char v14;
  char v15;

  v5 = a2;
  if (a3 != INFINITY)
  {
    if (a2 >= a3)
    {
      if (a2 - a3 >= a5)
      {
        if (FLAGS_v >= 1)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
          v9 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
          v10 = (_QWORD *)fst::cerr(v9);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"NegLogDiff: undefined ", 22);
          v11 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
          std::ostream::operator<<();
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
          if (v14 < 0)
            operator delete(__p[0]);
        }
        if (this)
          *(_BYTE *)this = 1;
      }
      return INFINITY;
    }
    else
    {
      v7 = exp(a3 - a2);
      return a3 - log(v7 + -1.0);
    }
  }
  return v5;
}

void sub_1ADF78198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Read(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int Header;
  int v6;
  fst *v7;
  _QWORD *v8;
  fst::MappedFile *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char v17;
  char v18;
  fst *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  fst *v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  fst *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  fst *v43;
  _QWORD *v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  std::string::size_type size;
  int v51;
  std::string *v52;
  uint64_t v53;
  __int128 *v54;
  int v55;
  int v56;
  int v57;
  _BOOL4 v58;
  fst *v60;
  _QWORD *v61;
  _QWORD *v62;
  __int128 *v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  std::string *v67;
  std::string::size_type v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  std::string v80;
  char v81;
  std::string v82;
  void *v83[2];
  char v84;
  int v85;
  void *__p;
  __int128 v87;
  __int128 v88;
  __int128 __n;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  std::__shared_weak_count *v96;
  int v97;
  _BYTE v98[8];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v102 = 0u;
  v101 = 0u;
  v100 = 0u;
  v99 = 0u;
  v104 = 0;
  v105 = 0;
  v103 = -1;
  v4 = operator new();
  fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::EnumerationFstImpl(v4);
  Header = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ReadHeader(v4, a1, a2, 0, (uint64_t)v98);
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (!Header)
  {
LABEL_38:
    v26 = 0;
    goto LABEL_39;
  }
  v6 = v102;
  if (v102 >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    v7 = fst::LogMessage::LogMessage((fst *)v83, (uint64_t)&__p);
    v8 = (_QWORD *)fst::cerr(v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"EnumerationFst::Read: Unsupported file version: ", 48);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)v83);
    if (SHIBYTE(v87) < 0)
      operator delete(__p);
  }
  v97 = 0;
  std::istream::read();
  if (v6 >= 1 && (fst::AlignInput() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v27 = fst::LogMessage::LogMessage((fst *)v83, (uint64_t)&__p);
    v28 = (_QWORD *)fst::cerr(v27);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"EnumerationFst::Read: Alignment failed before internal FST: ", 60);
    v30 = *(char *)(a2 + 23);
    if (v30 >= 0)
      v31 = a2;
    else
      v31 = *(_QWORD *)a2;
    if (v30 >= 0)
      v32 = *(unsigned __int8 *)(a2 + 23);
    else
      v32 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
    fst::LogMessage::~LogMessage((fst::LogMessage *)v83);
    if (SHIBYTE(v87) < 0)
      operator delete(__p);
    goto LABEL_38;
  }
  v9 = fst::MappedFile::Map((uint64_t)a1, a2, v97);
  std::shared_ptr<fst::MappedFile>::shared_ptr[abi:ne180100]<fst::MappedFile,void>(&v95, (uint64_t)v9);
  v10 = (uint64_t *)operator new();
  v11 = (uint64_t)v10;
  __p = v95;
  *(_QWORD *)&v87 = v96;
  if (v96)
  {
    p_shared_owners = (unint64_t *)&v96->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  fst::EnumerationData::EnumerationData(v10, (uint64_t *)&__p);
  v94 = v11;
  v14 = (std::__shared_weak_count *)v87;
  if ((_QWORD)v87)
  {
    v15 = (unint64_t *)(v87 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if ((fst::AlignInput() & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v19 = fst::LogMessage::LogMessage((fst *)v83, (uint64_t)&__p);
    v20 = (_QWORD *)fst::cerr(v19);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"EnumerationFst::Read: Alignment failed before internal FST: ", 60);
    v22 = *(char *)(a2 + 23);
    if (v22 >= 0)
      v23 = a2;
    else
      v23 = *(_QWORD *)a2;
    if (v22 >= 0)
      v24 = *(unsigned __int8 *)(a2 + 23);
    else
      v24 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
    fst::LogMessage::~LogMessage((fst::LogMessage *)v83);
    if (SHIBYTE(v87) < 0)
      operator delete(__p);
    if (v94)
    {
      v25 = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v94);
      MEMORY[0x1AF44D190](v25, 0x20C40A4A59CD2);
    }
    v26 = 0;
    goto LABEL_119;
  }
  v90 = 0u;
  __n = 0u;
  v88 = 0u;
  v87 = 0u;
  v92 = 0;
  v93 = 0;
  v91 = -1;
  std::string::basic_string[abi:ne180100]<0>(v83, "embedded");
  v17 = fst::FstHeader::Read((uint64_t)&__p, (uint64_t)a1, (uint64_t)v83, 0);
  v18 = v17;
  if (v84 < 0)
  {
    operator delete(v83[0]);
    if ((v18 & 1) != 0)
      goto LABEL_47;
  }
  else if ((v17 & 1) != 0)
  {
    goto LABEL_47;
  }
  std::string::basic_string[abi:ne180100]<0>(v83, "FATAL");
  v34 = fst::LogMessage::LogMessage((fst *)&v82, (uint64_t)v83);
  v35 = (_QWORD *)fst::cerr(v34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Unable to read header of inner FST.", 35);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v82);
  if (v84 < 0)
    operator delete(v83[0]);
LABEL_47:
  v36 = fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type();
  v37 = HIBYTE(__n);
  if (__n >= 0)
    v38 = HIBYTE(__n);
  else
    v38 = __n;
  v39 = *(unsigned __int8 *)(v36 + 23);
  v40 = (char)v39;
  if ((v39 & 0x80u) != 0)
    v39 = *(_QWORD *)(v36 + 8);
  if (v38 == v39)
  {
    if (v40 >= 0)
      v41 = (unsigned __int8 *)v36;
    else
      v41 = *(unsigned __int8 **)v36;
    if ((HIBYTE(__n) & 0x80) != 0)
    {
      if (!memcmp(*((const void **)&v88 + 1), v41, __n))
        goto LABEL_71;
    }
    else
    {
      if (!HIBYTE(__n))
        goto LABEL_71;
      v42 = (unsigned __int8 *)&v88 + 8;
      while (*v42 == *v41)
      {
        ++v42;
        ++v41;
        if (!--v37)
          goto LABEL_71;
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v83, "FATAL");
  v43 = fst::LogMessage::LogMessage((fst *)&v82, (uint64_t)v83);
  v44 = (_QWORD *)fst::cerr(v43);
  v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"FST with arc type ", 18);
  if (__n >= 0)
    v46 = (char *)&v88 + 8;
  else
    v46 = (char *)*((_QWORD *)&v88 + 1);
  if (__n >= 0)
    v47 = HIBYTE(__n);
  else
    v47 = __n;
  v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v46, v47);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" not supported.", 15);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v82);
  if (v84 < 0)
    operator delete(v83[0]);
LABEL_71:
  fst::FstReadOptions::FstReadOptions(v83, a2, &__p, 0, 0);
  v85 = *(_DWORD *)(a2 + 48);
  fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::TypeString(&v82);
  if ((SBYTE7(v88) & 0x80u) == 0)
    v49 = BYTE7(v88);
  else
    v49 = *((_QWORD *)&v87 + 1);
  size = HIBYTE(v82.__r_.__value_.__r.__words[2]);
  v51 = SHIBYTE(v82.__r_.__value_.__r.__words[2]);
  if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v82.__r_.__value_.__l.__size_;
  if (v49 == size)
  {
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = &v82;
    else
      v52 = (std::string *)v82.__r_.__value_.__r.__words[0];
    if ((BYTE7(v88) & 0x80) != 0)
    {
      v58 = memcmp((const void *)v87, v52, *((size_t *)&v87 + 1)) != 0;
      if ((v51 & 0x80000000) == 0)
        goto LABEL_89;
    }
    else if (BYTE7(v88))
    {
      v53 = BYTE7(v88) - 1;
      v54 = &v87;
      do
      {
        v56 = *(unsigned __int8 *)v54;
        v54 = (__int128 *)((char *)v54 + 1);
        v55 = v56;
        v57 = v52->__r_.__value_.__s.__data_[0];
        v52 = (std::string *)((char *)v52 + 1);
        v58 = v55 != v57;
      }
      while (v55 == v57 && v53-- != 0);
      if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_89:
        if (!v58)
          goto LABEL_109;
LABEL_93:
        std::string::basic_string[abi:ne180100]<0>(&v82, "FATAL");
        v60 = fst::LogMessage::LogMessage((fst *)&v81, (uint64_t)&v82);
        v61 = (_QWORD *)fst::cerr(v60);
        v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Unexpected type ", 16);
        if ((SBYTE7(v88) & 0x80u) == 0)
          v63 = &v87;
        else
          v63 = (__int128 *)v87;
        if ((SBYTE7(v88) & 0x80u) == 0)
          v64 = BYTE7(v88);
        else
          v64 = *((_QWORD *)&v87 + 1);
        v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)v63, v64);
        v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" for inner FST (expected ", 25);
        fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::TypeString(&v80);
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v67 = &v80;
        else
          v67 = (std::string *)v80.__r_.__value_.__r.__words[0];
        if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v68 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
        else
          v68 = v80.__r_.__value_.__l.__size_;
        v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, v68);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)")", 1);
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v80.__r_.__value_.__l.__data_);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v81);
        if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v82.__r_.__value_.__l.__data_);
        goto LABEL_109;
      }
    }
    else
    {
      v58 = 0;
      if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_89;
    }
  }
  else
  {
    v58 = 1;
    if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_89;
  }
  operator delete(v82.__r_.__value_.__l.__data_);
  if (v58)
    goto LABEL_93;
LABEL_109:
  v70 = fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::Read(a1, (uint64_t)v83);
  v26 = operator new();
  v71 = v94;
  v94 = 0;
  v78 = v70;
  v79 = v71;
  fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::EnumerationFstImpl(v26, &v79, (uint64_t *)&v78);
  v72 = (uint64_t)v78;
  v78 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  v73 = v79;
  v79 = 0;
  if (v73)
  {
    v74 = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v73);
    MEMORY[0x1AF44D190](v74, 0x20C40A4A59CD2);
  }
  if (v84 < 0)
    operator delete(v83[0]);
  if (SHIBYTE(__n) < 0)
    operator delete(*((void **)&v88 + 1));
  if (SBYTE7(v88) < 0)
    operator delete((void *)v87);
LABEL_119:
  v75 = v96;
  if (v96)
  {
    v76 = (unint64_t *)&v96->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
LABEL_39:
  if (SHIBYTE(v101) < 0)
    operator delete(*((void **)&v100 + 1));
  if (SBYTE7(v100) < 0)
    operator delete((void *)v99);
  return v26;
}

void sub_1ADF788EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a21);
  if (a27 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  fst::FstHeader::~FstHeader(&a39);
  std::unique_ptr<fst::EnumerationData const>::reset[abi:ne180100]((uint64_t *)(v44 - 176), 0);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v44 - 168);
  fst::FstHeader::~FstHeader((void **)(v44 - 144));
  _Unwind_Resume(a1);
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::EnumerationFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D20E30;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "quantized_enumeration");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x555550001;
  return a1;
}

void sub_1ADF78BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v19;
  uint64_t v20;

  if (a15 < 0)
    operator delete(__p);
  v19 = *v17;
  *v17 = 0;
  if (v19)
    std::default_delete<fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>> const>::operator()[abi:ne180100]((uint64_t)v17, v19);
  v20 = *(_QWORD *)(v15 + 72);
  *(_QWORD *)(v15 + 72) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  std::unique_ptr<fst::EnumerationData const>::reset[abi:ne180100](v16, 0);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~EnumerationFstImpl(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &unk_1E5D20E30;
  v4 = a1[10];
  v2 = a1 + 10;
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>> const>::operator()[abi:ne180100]((uint64_t)v2, v3);
  v5 = a1[9];
  a1[9] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<fst::EnumerationData const>::reset[abi:ne180100](a1 + 8, 0);
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

void fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~EnumerationFstImpl(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &unk_1E5D20E30;
  v4 = a1[10];
  v2 = a1 + 10;
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>> const>::operator()[abi:ne180100]((uint64_t)v2, v3);
  v5 = a1[9];
  a1[9] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::unique_ptr<fst::EnumerationData const>::reset[abi:ne180100](a1 + 8, 0);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::EnumerationFstImpl(v2, *(fst::EnumerationData **)(a1 + 64), *(_QWORD *)(a1 + 72));
  return v2;
}

void sub_1ADF78D4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40F083FB34);
  _Unwind_Resume(a1);
}

void std::default_delete<fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>> const>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  if (a2)
  {
    v3 = *(void **)(a2 + 216);
    if (v3)
    {
      *(_QWORD *)(a2 + 224) = v3;
      operator delete(v3);
    }
    std::__tree<int>::destroy(a2 + 192, *(_QWORD **)(a2 + 200));
    *(_QWORD *)(a2 + 16) = &unk_1E5D221F8;
    fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~SortedMatcher((_QWORD *)(a2 + 24));
    JUMPOUT(0x1AF44D190);
  }
}

uint64_t fst::FstStateDenseDistribution<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::GetWeight(uint64_t a1, int a2)
{
  uint64_t v2;
  char v3;

  v2 = a1 + 8;
  v3 = fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Find(a1 + 8, a2);
  FstCheck(v3, "(const_cast<fst::SortedMatcher<InnerFstT>*>(&matcher_)->Find(label)) == (true)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  return fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Value(v2) + 8;
}

uint64_t fst::FstStateDenseDistribution<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Final(uint64_t a1)
{
  return a1 + 152;
}

_QWORD *fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~SortedMatcher(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E5D1BB28;
  v2 = a1[3];
  if (v2)
  {
    (**(void (***)(_QWORD))v2)(a1[3]);
    *(_QWORD *)(v2 + 64) = a1[17];
    a1[17] = v2;
  }
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  a1[10] = &unk_1E5D195D0;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Link>::~MemoryArena(a1 + 11);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(a1 + 10));
  return a1;
}

void fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D195D0;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D195D0;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~SortedMatcher(_QWORD *a1)
{
  fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~SortedMatcher(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SortedMatcher(v4, a1, a2);
  return v4;
}

void sub_1ADF78F68(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C4003B7394BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Type(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2 == 3)
    return 3;
  if (v2)
    v6 = 0x40000000;
  else
    v6 = 0x10000000;
  v7 = *(_QWORD *)(a1 + 8);
  if (v2)
    v8 = 3221225472;
  else
    v8 = 805306368;
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v7, v8, a2);
  if ((v9 & v6) != 0)
    return *(unsigned int *)(a1 + 32);
  v10 = 0x80000000;
  if (!v2)
    v10 = 0x20000000;
  if ((v9 & v10) != 0)
    return 3;
  else
    return 4;
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Properties(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 74))
    return a2 | 4;
  else
    return a2;
}

float fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Next_(uint64_t a1)
{
  uint64_t v1;
  float result;

  if (*(_BYTE *)(a1 + 72))
  {
    *(_BYTE *)(a1 + 72) = 0;
  }
  else
  {
    v1 = *(_QWORD *)(a1 + 24);
    ++*(_QWORD *)(v1 + 48);
    return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(v1);
  }
  return result;
}

float fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Final_(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v3 = *(_DWORD *)(*(_QWORD *)(v2 + 72) + 4 * a2);
  if (v3 <= 0)
    return *(float *)(*(_QWORD *)(v2 + 104) + 8 * -v3);
  else
    return INFINITY;
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Priority_(uint64_t a1, int a2)
{
  return fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Size()
{
  return 64;
}

void fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Link>::~MemoryArena(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A588;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

{
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Link>::Size()
{
  return 72;
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SortedMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = &unk_1E5D1BB28;
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 88))(*(_QWORD *)(a2 + 8), a3);
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::MemoryPool((_QWORD *)(a1 + 80), 1);
  return a1;
}

_QWORD *fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D195D0;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1ADF79260(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A588;
  a1[1] = 72 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1ADF792F8(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetState(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  fst *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void *__p[2];
  char v12;
  char v13;

  if (*(_DWORD *)(result + 16) != (_DWORD)a2)
  {
    v3 = result;
    *(_DWORD *)(result + 16) = a2;
    if (*(_DWORD *)(result + 32) == 3)
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v4 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
      v5 = (_QWORD *)fst::cerr(v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
      if (v12 < 0)
        operator delete(__p[0]);
      *(_BYTE *)(v3 + 74) = 1;
    }
    v6 = *(_QWORD *)(v3 + 24);
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
      v7 = *(_QWORD *)(v3 + 24);
    }
    else
    {
      v8 = *(_QWORD *)(v3 + 136);
      if (v8)
      {
        *(_QWORD *)(v3 + 136) = *(_QWORD *)(v8 + 64);
      }
      else
      {
        v8 = fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::CompactFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::UnweightedCompactor<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,unsigned int,fst::DefaultCompactStore<std::pair<std::pair<int,int>,int>,unsigned int>>>>::Link>::Allocate((_QWORD *)(v3 + 88), 1);
        *(_QWORD *)(v8 + 64) = 0;
      }
      v7 = fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ArcIterator(v8, *(_QWORD *)(v3 + 8), a2);
      *(_QWORD *)(v3 + 24) = v7;
    }
    v9 = *(_DWORD *)(v7 + 56);
    *(_DWORD *)(v7 + 56) = v9 & 0xFFFFFFEF;
    if (v9 != 15 && v9 != (v9 & 0xFFFFFFEF))
      fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(v7);
    result = fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(*(_QWORD *)(v3 + 8), a2);
    *(_QWORD *)(v3 + 48) = result;
    *(_DWORD *)(v3 + 68) = a2;
  }
  return result;
}

void sub_1ADF79468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Find(uint64_t a1, int a2)
{
  _BOOL8 result;
  int v4;

  *(_BYTE *)(a1 + 73) = 1;
  if (*(_BYTE *)(a1 + 74))
  {
    result = 0;
    *(_BYTE *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 40) = -1;
  }
  else
  {
    *(_BYTE *)(a1 + 72) = a2 == 0;
    if (a2 == -1)
      v4 = 0;
    else
      v4 = a2;
    *(_DWORD *)(a1 + 40) = v4;
    return (fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Search(a1) & 1) != 0
        || *(_BYTE *)(a1 + 72) != 0;
  }
  return result;
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Search(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t result;
  uint64_t v24;

  v2 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)(a1 + 32))
    v3 = 2;
  else
    v3 = 1;
  v4 = *(_DWORD *)(v2 + 56);
  v5 = v4 & 0xFFFFFFF0 | v3;
  *(_DWORD *)(v2 + 56) = v5;
  if (v4 != 15 && v4 != v5)
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(v2);
  if (*(_DWORD *)(a1 + 40) < *(_DWORD *)(a1 + 36))
  {
    v7 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v7 + 48) = 0;
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(v7);
    v8 = *(_QWORD *)(a1 + 24);
    v9 = (_QWORD *)(v8 + 48);
    v10 = *(_QWORD *)(v8 + 48);
    if (v10 < *(_QWORD *)(v8 + 40))
    {
      while (1)
      {
        v11 = *(_DWORD *)(a1 + 32) ? 28 : 24;
        v12 = *(_DWORD *)(v8 + v11);
        v13 = *(_DWORD *)(a1 + 40);
        v14 = v12 == v13;
        v15 = v12 <= v13 ? 0 : 7;
        if (v14)
          v15 = 1;
        if (v15)
          break;
        *v9 = v10 + 1;
        fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(v8);
        v8 = *(_QWORD *)(a1 + 24);
        v9 = (_QWORD *)(v8 + 48);
        v10 = *(_QWORD *)(v8 + 48);
        if (v10 >= *(_QWORD *)(v8 + 40))
          return 0;
      }
      result = 0;
      if (v15 == 1)
        return 1;
      return result;
    }
    return 0;
  }
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(_QWORD *)(a1 + 24);
  v18 = 0;
  if (!v16)
  {
LABEL_32:
    *(_QWORD *)(v17 + 48) = v18;
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(v17);
    return 0;
  }
  while (1)
  {
    v19 = (v16 + v18) >> 1;
    *(_QWORD *)(v17 + 48) = v19;
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(v17);
    v17 = *(_QWORD *)(a1 + 24);
    v20 = *(_DWORD *)(a1 + 32) ? 28 : 24;
    v21 = *(_DWORD *)(v17 + v20);
    v22 = *(_DWORD *)(a1 + 40);
    if (v21 <= v22)
      break;
    v16 = (v16 + v18) >> 1;
LABEL_31:
    if (v18 >= v16)
      goto LABEL_32;
  }
  if (v21 < v22)
  {
    v18 = v19 + 1;
    goto LABEL_31;
  }
  while (v19 > v18)
  {
    *(_QWORD *)(v17 + 48) = --v19;
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(v17);
    v17 = *(_QWORD *)(a1 + 24);
    if (*(_DWORD *)(a1 + 32))
      v24 = 28;
    else
      v24 = 24;
    if (*(_DWORD *)(v17 + v24) != *(_DWORD *)(a1 + 40))
    {
      *(_QWORD *)(v17 + 48) = v19 + 1;
      fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(v17);
      return 1;
    }
  }
  return 1;
}

BOOL fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Done(uint64_t a1)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;

  if (*(_BYTE *)(a1 + 72))
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(v3 + 48) >= *(_QWORD *)(v3 + 40))
    return 1;
  if (!*(_BYTE *)(a1 + 73))
    return 0;
  v4 = *(_DWORD *)(a1 + 32);
  if (v4)
    v5 = 2;
  else
    v5 = 1;
  v6 = *(_DWORD *)(v3 + 56);
  v7 = v6 & 0xFFFFFFF0 | v5;
  *(_DWORD *)(v3 + 56) = v7;
  v8 = v6 == 15 || v6 == v7;
  if (!v8)
  {
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(v3);
    v4 = *(_DWORD *)(a1 + 32);
  }
  v8 = v4 == 0;
  v9 = 28;
  if (v8)
    v9 = 24;
  return *(_DWORD *)(*(_QWORD *)(a1 + 24) + v9) != *(_DWORD *)(a1 + 40);
}

uint64_t fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Value(uint64_t a1)
{
  uint64_t v3;
  int v4;

  if (*(_BYTE *)(a1 + 72))
    return a1 + 56;
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_DWORD *)(v3 + 56);
  *(_DWORD *)(v3 + 56) = v4 | 0xF;
  if (v4 != 15 && v4 != (v4 | 0xF))
  {
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(v3);
    v3 = *(_QWORD *)(a1 + 24);
  }
  return v3 + 24;
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::EnumerationFstImpl(uint64_t a1, fst::EnumerationData *a2, uint64_t a3)
{
  std::string *v6;
  uint64_t v7;
  fst::EnumerationData *v8;
  uint64_t v9;
  char v10;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D20E30;
  fst::EnumerationData::Copy(a2, (uint64_t **)&__str);
  *(_QWORD *)(a1 + 64) = __str.__r_.__value_.__r.__words[0];
  v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 88))(a3, 0);
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(fst::EnumerationData **)(a1 + 64);
  v9 = operator new();
  fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::VirtualStateSpaceManager(v9, v8, v7);
  *(_QWORD *)(a1 + 80) = v9;
  std::string::basic_string[abi:ne180100]<0>(&__str, "quantized_enumeration");
  std::string::operator=(v6, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x555550001;
  v10 = (~(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 64))(*(_QWORD *)(a1 + 72), 0x3FFFFFFF0004, 1) & 0x155550000) == 0;
  FstCheck(v10, "(true) == ((properties & kAcceptor) && (properties & kIDeterministic) && (properties & kODeterministic) && (properties & kEpsilons) && (properties & kIEpsilons) && (properties & kOEpsilons) && (properties & kILabelSorted) && (properties & kOLabelSorted) && (properties & kWeighted))", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  return a1;
}

void sub_1ADF79A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t *v16;
  uint64_t v18;
  uint64_t v19;

  if (a15 < 0)
    operator delete(__p);
  v18 = *v16;
  *v16 = 0;
  if (v18)
    std::default_delete<fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>> const>::operator()[abi:ne180100]((uint64_t)v16, v18);
  v19 = *(_QWORD *)(v15 + 72);
  *(_QWORD *)(v15 + 72) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  std::unique_ptr<fst::EnumerationData const>::reset[abi:ne180100]((uint64_t *)(v15 + 64), 0);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::VirtualStateSpaceManager(uint64_t a1, fst::EnumerationData *a2, uint64_t a3)
{
  uint64_t v5;
  long double v6;
  float v7;
  int v8;
  int v9;
  float v10;
  int v11;
  void **v12;
  int v13;
  int v14;
  int v15;
  int *v16;
  fst *v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  char *v21;
  _DWORD *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  int v30;
  void *__p[2];
  char v33;
  char v34;
  int v35;
  int v36;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  fst::FstStateDenseDistribution<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::FstStateDenseDistribution(a1 + 16, a3, **(unsigned int **)(*(_QWORD *)a2 + 8));
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v6 = *(double *)(v5 + 12);
  v7 = log(v6);
  v8 = *(_DWORD *)(v5 + 20);
  v9 = *(_DWORD *)(v5 + 24);
  LODWORD(v5) = *(_DWORD *)(v5 + 8);
  *(_QWORD *)(a1 + 200) = 0;
  *(float *)(a1 + 176) = -v7;
  v10 = log(1.0 - v6);
  *(float *)(a1 + 180) = -v10;
  v11 = v9 + v8 - v5;
  *(_DWORD *)(a1 + 184) = v11;
  *(_DWORD *)(a1 + 188) = v11;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  v12 = (void **)(a1 + 216);
  *(_QWORD *)(a1 + 192) = a1 + 200;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  FstCheck(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 20) == 0, "(metadata.MainFst().start_state_id) == (0)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  FstCheck(*(float *)(a1 + 176) > 0.0, "(smoothing_alpha_.Value()) > (0.0)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  FstCheck(*(float *)(a1 + 180) > 0.0, "(smoothing_alpha_complement_.Value()) > (0.0)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  std::vector<int>::reserve((std::vector<unsigned int> *)(a1 + 216), *(int *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 8));
  v13 = *(_DWORD *)(a1 + 184);
  v36 = 0;
  v14 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 8);
  if (v14 >= 1)
  {
    v15 = 0;
    do
    {
      v16 = (int *)fst::EnumerationData::TeleportationPoint(a2, v15);
      FstCheck(*v16 >= 0, "(teleportation_point.sub_fst_idx) >= (0)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
      FstCheck(*v16 < *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 4), "(teleportation_point.sub_fst_idx) < (metadata.NumSubFsts())", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
      v35 = v13;
      v13 += *(_DWORD *)(fst::EnumerationData::SubFst(a2, *v16) + 4);
      if (v13 < 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        v17 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)__p);
        v18 = (_QWORD *)fst::cerr(v17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Encountered integer overflow when loading teleportation point ", 62);
        v19 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)".", 1);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v34);
        if (v33 < 0)
          operator delete(__p[0]);
      }
      std::__tree<std::__value_type<int,int>,std::__map_value_compare<int,std::__value_type<int,int>,std::less<int>,true>,std::allocator<std::__value_type<int,int>>>::__emplace_unique_key_args<int,int const&,int &>((uint64_t **)(a1 + 192), &v35, &v35, &v36);
      v21 = *(char **)(a1 + 224);
      v20 = *(_QWORD *)(a1 + 232);
      if ((unint64_t)v21 >= v20)
      {
        v23 = (char *)*v12;
        v24 = (v21 - (_BYTE *)*v12) >> 2;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v26 = v20 - (_QWORD)v23;
        if (v26 >> 1 > v25)
          v25 = v26 >> 1;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
          v27 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
        {
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 232, v27);
          v23 = *(char **)(a1 + 216);
          v21 = *(char **)(a1 + 224);
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[4 * v24];
        *(_DWORD *)v29 = v35;
        v22 = v29 + 4;
        while (v21 != v23)
        {
          v30 = *((_DWORD *)v21 - 1);
          v21 -= 4;
          *((_DWORD *)v29 - 1) = v30;
          v29 -= 4;
        }
        *(_QWORD *)(a1 + 216) = v29;
        *(_QWORD *)(a1 + 224) = v22;
        *(_QWORD *)(a1 + 232) = &v28[4 * v27];
        if (v23)
          operator delete(v23);
      }
      else
      {
        *(_DWORD *)v21 = v35;
        v22 = v21 + 4;
      }
      *(_QWORD *)(a1 + 224) = v22;
      v15 = v36 + 1;
      v36 = v15;
      v14 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 8);
    }
    while (v15 < v14);
  }
  FstCheck(*(_QWORD *)(a1 + 208) == v14, "(virtual_start_state_id_to_teleportation_point_idx_.size()) == (metadata.NumTeleportationPoints())", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  FstCheck(*(int *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 8) == (uint64_t)(*(_QWORD *)(a1 + 224) - *(_QWORD *)(a1 + 216)) >> 2, "(teleportation_point_idx_to_virtual_start_state_id_.size()) == (metadata.NumTeleportationPoints())", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  *(_DWORD *)(a1 + 240) = v13;
  return a1;
}

void sub_1ADF79E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t v20;
  void **v21;
  void *v23;

  v23 = *v21;
  if (*v21)
  {
    *(_QWORD *)(v19 + 224) = v23;
    operator delete(v23);
  }
  std::__tree<int>::destroy(v20, *(_QWORD **)(v19 + 200));
  *(_QWORD *)(v19 + 16) = &unk_1E5D221F8;
  fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~SortedMatcher((_QWORD *)(v19 + 24));
  _Unwind_Resume(a1);
}

uint64_t fst::FstStateDenseDistribution<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::FstStateDenseDistribution(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  *(_QWORD *)a1 = &unk_1E5D221F8;
  v6 = a1 + 8;
  fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SortedMatcher((int32x2_t *)(a1 + 8), a2, 0, 1);
  *(float *)(a1 + 152) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3);
  fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetState(v6, a3);
  return a1;
}

void sub_1ADF79F70(_Unwind_Exception *a1)
{
  _QWORD *v1;

  fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~SortedMatcher(v1);
  _Unwind_Resume(a1);
}

int32x2_t *fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SortedMatcher(int32x2_t *a1, uint64_t a2, __int32 a3, __int32 a4)
{
  __int32 v7;
  fst *v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  *a1 = (int32x2_t)&unk_1E5D1BB28;
  a1[1] = (int32x2_t)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  a1[2].i32[0] = -1;
  a1[3] = 0;
  a1[4].i32[0] = a3;
  a1[4].i32[1] = a4;
  a1[5].i32[0] = -1;
  a1[6] = 0;
  *(_OWORD *)a1[7].i8 = xmmword_1AE142840;
  a1[9].i8[2] = 0;
  fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::MemoryPool(&a1[10], 1);
  v7 = a1[4].i32[0];
  if (v7 && v7 != 3)
  {
    if (v7 == 1)
    {
      a1[7] = vrev64_s32(a1[7]);
    }
    else
    {
      if (FLAGS_fst_error_fatal)
        std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
      else
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v8 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"SortedMatcher: bad match type", 29);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
      if (v12 < 0)
        operator delete(__p[0]);
      a1[4].i32[0] = 3;
      a1[9].i8[2] = 1;
    }
  }
  return a1;
}

void sub_1ADF7A0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  quasar::Bitmap *v19;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *(_QWORD *)(v18 + 80) = &unk_1E5D195D0;
  fst::MemoryArena<fst::MemoryPool<fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Link>::~MemoryArena((_QWORD *)(v18 + 88));
  quasar::Bitmap::~Bitmap(v19);
  _Unwind_Resume(a1);
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::EnumerationFstImpl(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  std::string *v6;
  uint64_t v7;
  uint64_t v8;
  fst::EnumerationData *v9;
  uint64_t v10;
  char v11;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &unk_1E5D20E30;
  v7 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 64) = v7;
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 72) = v8;
  v9 = *(fst::EnumerationData **)(a1 + 64);
  v10 = operator new();
  fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::VirtualStateSpaceManager(v10, v9, v8);
  *(_QWORD *)(a1 + 80) = v10;
  std::string::basic_string[abi:ne180100]<0>(&__str, "quantized_enumeration");
  std::string::operator=(v6, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x555550001;
  v11 = (~(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 64))(*(_QWORD *)(a1 + 72), 0x3FFFFFFF0004, 1) & 0x155550000) == 0;
  FstCheck(v11, "(true) == ((properties & kAcceptor) && (properties & kIDeterministic) && (properties & kODeterministic) && (properties & kEpsilons) && (properties & kIEpsilons) && (properties & kOEpsilons) && (properties & kILabelSorted) && (properties & kOLabelSorted) && (properties & kWeighted))", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  return a1;
}

void sub_1ADF7A294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v19;
  uint64_t v20;

  if (a15 < 0)
    operator delete(__p);
  v19 = *v17;
  *v17 = 0;
  if (v19)
    std::default_delete<fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>> const>::operator()[abi:ne180100]((uint64_t)v17, v19);
  v20 = *(_QWORD *)(v15 + 72);
  *(_QWORD *)(v15 + 72) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  std::unique_ptr<fst::EnumerationData const>::reset[abi:ne180100](v16, 0);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

_QWORD *fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~EnumerationFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D26AD0;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~EnumerationFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D26AD0;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 72) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72));
}

float fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Final(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::NumArcs(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons()
{
  return fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::NumInputEpsilons();
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::NumOutputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Copy(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)operator new();
  v3 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), 0);
  *v2 = &unk_1E5D1E460;
  v2[1] = v3;
  return v2;
}

void sub_1ADF7A514(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(*(_QWORD *)(v2 + 80) + 240);
  return result;
}

uint64_t fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::InitArcIterator(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::IsMemoryMapped(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 72) + 152))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72));
}

uint64_t fst::ImplToExpandedFst<fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80) + 240);
}

float fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Final(uint64_t a1, int a2)
{
  int v2;
  float v4;
  float v5;
  uint64_t v6;
  int v7;
  fst::EnumerationData *v8;
  int *v9;
  _DWORD *v10;
  uint64_t v11;
  float v12;
  BOOL v13;
  float v14;

  if (*(_DWORD *)(*(_QWORD *)(a1 + 80) + 184) <= a2)
    return INFINITY;
  v2 = a2;
  v4 = (*(float (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 32))(*(_QWORD *)(a1 + 72));
  v5 = v4;
  if (v4 != INFINITY)
  {
    v6 = *(_QWORD *)(a1 + 80);
    if (*(_DWORD *)(v6 + 184) <= v2)
    {
      v7 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ToTeleportationPointIdx(v6, v2);
      v8 = *(fst::EnumerationData **)v6;
      v9 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v6, v7);
      v10 = (_DWORD *)fst::EnumerationData::SubFst(v8, *v9);
      v11 = *(_QWORD *)(v6 + 216);
      if (v7 >= (unint64_t)((*(_QWORD *)(v6 + 224) - v11) >> 2))
        std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
      v2 = *v10 + v2 - *(_DWORD *)(v11 + 4 * v7);
    }
    if (v2 != **(_DWORD **)(**(_QWORD **)v6 + 8))
    {
      v5 = NAN;
      if (v4 != -INFINITY)
      {
        v12 = *(float *)(v6 + 176);
        v5 = NAN;
        if (v12 != -INFINITY)
        {
          v13 = v12 == INFINITY || v4 == INFINITY;
          v14 = v4 + v12;
          if (v13)
            return INFINITY;
          else
            return v14;
        }
      }
    }
  }
  return v5;
}

uint64_t fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ToTeleportationPointIdx(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  fst *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  void *__p[2];
  char v17;
  char v18;

  FstCheck(*(_DWORD *)(a1 + 184) <= a2, "(IsMainGraph(virtual_state_id)) == (false)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  v5 = (uint64_t *)(a1 + 200);
  v4 = *(_QWORD *)(a1 + 200);
  if (v4)
  {
    do
    {
      v6 = *(_DWORD *)(v4 + 28);
      v7 = v6 <= a2;
      if (v6 <= a2)
        v8 = (uint64_t *)(v4 + 8);
      else
        v8 = (uint64_t *)v4;
      if (!v7)
        v5 = (uint64_t *)v4;
      v4 = *v8;
    }
    while (*v8);
  }
  if (v5 == *(uint64_t **)(a1 + 192))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v9 = fst::LogMessage::LogMessage((fst *)&v18, (uint64_t)__p);
    v10 = (_QWORD *)fst::cerr(v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Unable to find teleportation point index for virtual state ", 59);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)".", 1);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v18);
    if (v17 < 0)
      operator delete(__p[0]);
  }
  v12 = *v5;
  if (*v5)
  {
    do
    {
      v13 = v12;
      v12 = *(_QWORD *)(v12 + 8);
    }
    while (v12);
  }
  else
  {
    do
    {
      v13 = v5[2];
      v14 = *(_QWORD *)v13 == (_QWORD)v5;
      v5 = (uint64_t *)v13;
    }
    while (v14);
  }
  return *(unsigned int *)(v13 + 32);
}

void sub_1ADF7A814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::NumArcs(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int HasVirtualBackoffArc;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  fst::EnumerationData *v9;
  int *v10;
  _DWORD *v11;
  uint64_t v12;
  int v14;
  fst::EnumerationData *v15;
  int *v16;
  _DWORD *v17;
  uint64_t v18;

  v2 = a2;
  HasVirtualBackoffArc = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::HasVirtualBackoffArc(*(_QWORD *)(a1 + 80), a2);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  v7 = *(_DWORD *)(v6 + 184);
  if (HasVirtualBackoffArc)
  {
    if (v7 > (int)v2)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v2) + 1;
    v8 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ToTeleportationPointIdx(v6, v2);
    v9 = *(fst::EnumerationData **)v6;
    v10 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v6, v8);
    v11 = (_DWORD *)fst::EnumerationData::SubFst(v9, *v10);
    v12 = *(_QWORD *)(v6 + 216);
    if (v8 < (unint64_t)((*(_QWORD *)(v6 + 224) - v12) >> 2))
    {
      v2 = (*v11 + v2 - *(_DWORD *)(v12 + 4 * v8));
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v2) + 1;
    }
LABEL_10:
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  }
  if (v7 <= (int)v2)
  {
    v14 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ToTeleportationPointIdx(v6, v2);
    v15 = *(fst::EnumerationData **)v6;
    v16 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v6, v14);
    v17 = (_DWORD *)fst::EnumerationData::SubFst(v15, *v16);
    v18 = *(_QWORD *)(v6 + 216);
    if (v14 >= (unint64_t)((*(_QWORD *)(v6 + 224) - v18) >> 2))
      goto LABEL_10;
    v2 = (*v17 + v2 - *(_DWORD *)(v18 + 4 * v14));
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v2);
}

uint64_t fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::HasVirtualBackoffArc(uint64_t a1, int a2)
{
  int v4;
  int v5;
  fst::EnumerationData *v6;
  int *v7;
  _DWORD *v8;
  uint64_t v9;
  char v10;
  BOOL v12;
  _DWORD v14[10];
  unint64_t v15;
  unint64_t v16;

  v4 = a2;
  if (*(_DWORD *)(a1 + 184) <= a2)
  {
    v5 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ToTeleportationPointIdx(a1, a2);
    v6 = *(fst::EnumerationData **)a1;
    v7 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)a1, v5);
    v8 = (_DWORD *)fst::EnumerationData::SubFst(v6, *v7);
    v9 = *(_QWORD *)(a1 + 216);
    if (v5 >= (unint64_t)((*(_QWORD *)(a1 + 224) - v9) >> 2))
      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
    v4 = *v8 + a2 - *(_DWORD *)(v9 + 4 * v5);
  }
  if (v4 == **(_DWORD **)(**(_QWORD **)a1 + 8))
  {
    v10 = 0;
  }
  else if (*(_DWORD *)(a1 + 184) <= a2)
  {
    v10 = 1;
  }
  else
  {
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ArcIterator((uint64_t)v14, *(_QWORD *)(a1 + 8), a2);
    v12 = v16 < v15 && v14[6] == 0;
    v10 = !v12;
  }
  return v10 & 1;
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::NumInputEpsilons()
{
  fst *v0;
  _QWORD *v1;
  void *__p[2];
  char v4;
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  v0 = fst::LogMessage::LogMessage((fst *)&v5, (uint64_t)__p);
  v1 = (_QWORD *)fst::cerr(v0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"NumInputEpsilons is not implemented on EnumerationFst since it cannot be computed efficiently.", 94);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v5);
  if (v4 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1ADF7AADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v3;
  BOOL v4;
  _DWORD v6[10];
  unint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(a1 + 80);
  if (*(_DWORD *)(v3 + 184) > a2
    && ((fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ArcIterator((uint64_t)v6, *(_QWORD *)(v3 + 8), a2), v8 < v7)? (v4 = v6[6] == 0): (v4 = 0), v4))
  {
    return 1;
  }
  else
  {
    return fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::HasVirtualBackoffArc(v3, a2);
  }
}

uint64_t fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::InitArcIterator(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::ArcIterator(v6, a1, a2);
  *a3 = v6;
  a3[3] = 0;
  return result;
}

void sub_1ADF7ABD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C40C8A3FF7BLL);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::ArcIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = &unk_1E5D1A338;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 56) = -1;
  *(_QWORD *)(a1 + 64) = -1;
  *(_DWORD *)(a1 + 72) = 15;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ArcIterator(a1 + 80, *(_QWORD *)(a2 + 72), 0);
  *(_BYTE *)(a1 + 144) = 0;
  fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::SetState(a1, a3);
  return a1;
}

uint64_t fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::SetState(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  fst::EnumerationData *v6;
  int *v7;
  _DWORD *v8;
  uint64_t v9;

  v2 = a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
  if (*(_DWORD *)(v4 + 184) <= (int)a2)
  {
    v5 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ToTeleportationPointIdx(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80), a2);
    v6 = *(fst::EnumerationData **)v4;
    v7 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v4, v5);
    v8 = (_DWORD *)fst::EnumerationData::SubFst(v6, *v7);
    v9 = *(_QWORD *)(v4 + 216);
    if (v5 >= (unint64_t)((*(_QWORD *)(v4 + 224) - v9) >> 2))
      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
    a2 = (*v8 + v2 - *(_DWORD *)(v9 + 4 * v5));
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 80) + 16))(a1 + 80, a2);
  *(_BYTE *)(a1 + 144) = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::HasVirtualBackoffArc(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80), v2);
  *(_DWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 56) = fst::EnumerationFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::NumArcs(*(_QWORD *)(a1 + 8), v2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::~ArcIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Reinit(uint64_t a1, uint64_t a2)
{
  fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::SetState(a1, a2);
  return 1;
}

BOOL fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64) >= *(_QWORD *)(a1 + 56);
}

uint64_t fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 144) && !*(_QWORD *)(a1 + 64))
    return a1 + 36;
  else
    return a1 + 20;
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Next_(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 64) + 1;
  *(_QWORD *)(a1 + 64) = v2;
  FstCheck(v2 != 0, "(i_) >= (1)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  if (!*(_BYTE *)(a1 + 144) || *(_QWORD *)(a1 + 64) >= 2uLL)
  {
    ++*(_QWORD *)(a1 + 128);
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(a1 + 80);
  }
  fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::ComputeFullArc(a1);
}

uint64_t fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Reset_(uint64_t a1)
{
  *(_QWORD *)(a1 + 128) = 0;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(a1 + 80);
  *(_QWORD *)(a1 + 64) = 0;
  if (*(_BYTE *)(a1 + 144))
    fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::ComputeBackoffArc(a1);
  else
    fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::ComputeFullArc(a1);
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Seek_(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(unsigned __int8 *)(a1 + 144);
  if (*(_BYTE *)(a1 + 144))
    v5 = a2 == 0;
  else
    v5 = 0;
  v6 = a1 + 80;
  if (v5)
    v7 = 0;
  else
    v7 = a2 - v4;
  *(_QWORD *)(a1 + 128) = v7;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(v6);
  *(_QWORD *)(a1 + 64) = a2;
  if (a2 || !*(_BYTE *)(a1 + 144))
    fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::ComputeFullArc(a1);
}

uint64_t fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::Flags_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::SetFlags_(uint64_t a1, char a2, int a3)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v9;
  int v10;

  v4 = *(_DWORD *)(a1 + 136);
  v5 = ~a3;
  v6 = a2 & 0xF;
  v7 = v4 & ~a3 | v6;
  *(_DWORD *)(a1 + 136) = v7;
  if (v4 != 15 && v4 != v7)
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(a1 + 80);
  v9 = *(_DWORD *)(a1 + 72);
  v10 = v9 & v5 | v6;
  *(_DWORD *)(a1 + 72) = v10;
  if (v9 != 15 && v9 != v10)
  {
    if (*(_BYTE *)(a1 + 144) && !*(_QWORD *)(a1 + 64))
      fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::ComputeBackoffArc(a1);
    else
      fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::ComputeFullArc(a1);
  }
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::ComputeFullArc(uint64_t a1)
{
  unint64_t v1;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  fst::EnumerationData *v10;
  int *v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  fst::EnumerationData *v17;
  int *v18;
  _DWORD *v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  BOOL v24;
  float v25;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1 < *(_QWORD *)(a1 + 56))
  {
    if (*(_BYTE *)(a1 + 144))
      FstCheck(v1 != 0, "(i_) >= (1)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
    v3 = *(_DWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 20) = *(_QWORD *)(a1 + 104);
    if ((v3 & 0xFu) - 1 >= 2)
    {
      if ((v3 & 8) != 0)
      {
        v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
        v5 = *(_DWORD *)(a1 + 16);
        v6 = *(_DWORD *)(a1 + 116);
        if (*(_DWORD *)(v4 + 184) <= v5)
        {
          v9 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ToTeleportationPointIdx(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80), v5);
          v10 = *(fst::EnumerationData **)v4;
          v11 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v4, v9);
          v12 = (_DWORD *)fst::EnumerationData::SubFst(v10, *v11);
          v13 = *(_QWORD *)(v4 + 216);
          if (v9 >= (unint64_t)((*(_QWORD *)(v4 + 224) - v13) >> 2))
            std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
          v6 = *(_DWORD *)(v13 + 4 * v9) + v6 - *v12;
        }
        else
        {
          v7 = *(_DWORD *)(v4 + 188);
          v8 = v6 - v7;
          if (v6 >= v7)
          {
            FstCheck(v8 < *(_DWORD *)(*(_QWORD *)(**(_QWORD **)v4 + 8) + 8), "(teleportation_point_idx) < (metadata_.NumTeleportationPoints())", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
            v6 = *(_DWORD *)(*(_QWORD *)(v4 + 216) + 4 * v8);
          }
        }
        *(_DWORD *)(a1 + 32) = v6;
        v3 = *(_DWORD *)(a1 + 72);
      }
      if ((v3 & 4) != 0)
      {
        *(_DWORD *)(a1 + 28) = *(_DWORD *)(a1 + 112);
        if (*(_DWORD *)(a1 + 20))
        {
          v14 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
          v15 = *(_DWORD *)(a1 + 16);
          if (*(_DWORD *)(v14 + 184) <= v15)
          {
            v16 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ToTeleportationPointIdx(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80), *(_DWORD *)(a1 + 16));
            v17 = *(fst::EnumerationData **)v14;
            v18 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v14, v16);
            v19 = (_DWORD *)fst::EnumerationData::SubFst(v17, *v18);
            v20 = *(_QWORD *)(v14 + 216);
            if (v16 >= (unint64_t)((*(_QWORD *)(v14 + 224) - v20) >> 2))
              std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
            v15 = *v19 + v15 - *(_DWORD *)(v20 + 4 * v16);
          }
          if (v15 != **(_DWORD **)(**(_QWORD **)v14 + 8))
          {
            v21 = *(float *)(a1 + 28);
            v22 = NAN;
            if (v21 != -INFINITY)
            {
              v23 = *(float *)(v14 + 176);
              v22 = NAN;
              if (v23 != -INFINITY)
              {
                v22 = INFINITY;
                v24 = v23 == INFINITY || v21 == INFINITY;
                v25 = v21 + v23;
                if (!v24)
                  v22 = v25;
              }
            }
            *(float *)(a1 + 28) = v22;
          }
        }
      }
    }
  }
}

void fst::ArcIterator<fst::EnumerationFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>>::ComputeBackoffArc(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  _DWORD *v5;
  int v6;

  FstCheck(*(_BYTE *)(a1 + 144), "(has_virtual_backoff_arc_) == (true)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  v2 = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if ((v2 & 0xFu) - 1 >= 2)
  {
    if ((v2 & 8) != 0)
    {
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 80);
      v4 = *(_DWORD *)(a1 + 16);
      if (*(_DWORD *)(v3 + 184) <= v4)
      {
        v6 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ToTeleportationPointIdx(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80), v4);
        v5 = (_DWORD *)(fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)v3, v6) + 8);
        v2 = *(_DWORD *)(a1 + 72);
      }
      else
      {
        v5 = *(_DWORD **)(**(_QWORD **)v3 + 8);
      }
      *(_DWORD *)(a1 + 48) = *v5;
    }
    if ((v2 & 4) != 0)
      *(float *)(a1 + 44) = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::GetBackoffWeight(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80), *(unsigned int *)(a1 + 16));
  }
}

float fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::GetBackoffWeight(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  fst::EnumerationData *v6;
  int *v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  fst::EnumerationData *v13;
  int *v14;
  _DWORD *v15;
  uint64_t v16;
  fst::EnumerationData *v17;
  float v18;
  float v19;
  float v20;
  int v21;
  int *v22;
  int v23;
  int v24;
  int v25;
  int *v26;
  int v27;
  int v28;
  fst *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  int v34;
  double v35;
  double v36;
  fst *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  double v47;
  int v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  int v55;
  double v56;
  float *Weight;
  BOOL *v58;
  fst *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  float v68;
  BOOL *v69;
  __n128 v70;
  double v71;
  fst *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  float v79;
  double v80;
  double v81;
  double v82;
  double v83;
  int v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  int v92;
  double v93;
  long double v94;
  void *v96[2];
  char v97;
  char v98;
  void *v99[2];
  char v100;
  int v101;
  float v102;
  unint64_t v103;
  unint64_t v104;
  char v105;
  void *__p[2];
  char v107;
  int v108;
  unint64_t v109;
  unint64_t v110;

  v4 = a2;
  if (*(_DWORD *)(a1 + 184) <= (int)a2)
  {
    v5 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ToTeleportationPointIdx(a1, a2);
    v6 = *(fst::EnumerationData **)a1;
    v7 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)a1, v5);
    v8 = (_DWORD *)fst::EnumerationData::SubFst(v6, *v7);
    v9 = *(_QWORD *)(a1 + 216);
    if (v5 >= (unint64_t)((*(_QWORD *)(a1 + 224) - v9) >> 2))
      goto LABEL_74;
    v4 = *v8 + a2 - *(_DWORD *)(v9 + 4 * v5);
  }
  FstCheck(v4 != **(_DWORD **)(**(_QWORD **)a1 + 8), "(IsUnigramState(virtual_state_id)) == (false)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
  v10 = *(_DWORD *)(a1 + 184);
  v11 = a2;
  if (v10 > (int)a2)
    goto LABEL_7;
  v12 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ToTeleportationPointIdx(a1, a2);
  v13 = *(fst::EnumerationData **)a1;
  v14 = (int *)fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)a1, v12);
  v15 = (_DWORD *)fst::EnumerationData::SubFst(v13, *v14);
  v16 = *(_QWORD *)(a1 + 216);
  if (v12 >= (unint64_t)((*(_QWORD *)(a1 + 224) - v16) >> 2))
LABEL_74:
    std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
  v11 = (*v15 + a2 - *(_DWORD *)(v16 + 4 * v12));
  v10 = *(_DWORD *)(a1 + 184);
LABEL_7:
  v17 = *(fst::EnumerationData **)a1;
  if (v10 <= (int)a2)
  {
    v21 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ToTeleportationPointIdx(a1, a2);
    v22 = (int *)fst::EnumerationData::TeleportationPoint(v17, v21);
    v23 = *v22;
    v24 = *(_DWORD *)fst::EnumerationData::SubFst(*(fst::EnumerationData **)a1, *v22);
    v25 = *(_DWORD *)(a1 + 184);
    if (v25 <= (int)a2)
    {
      v27 = fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ToTeleportationPointIdx(a1, a2);
      v26 = (int *)(fst::EnumerationData::TeleportationPoint(*(fst::EnumerationData **)a1, v27) + 8);
      v25 = *(_DWORD *)(a1 + 184);
    }
    else
    {
      v26 = *(int **)(**(_QWORD **)a1 + 8);
    }
    v28 = *v26;
    FstCheck(v25 > *v26, "(IsMainGraph(backoff_state_id)) == (true)", "../libquasar/libkaldi/tools/openfst/src/include/fst/enumeration-fst.h");
    if (*(_DWORD *)(a1 + 184) > v28)
    {
      fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ArcIterator((uint64_t)__p, *(_QWORD *)(a1 + 8), v28);
      if (v110 < v109 && !v108)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "WARNING");
        v29 = fst::LogMessage::LogMessage((fst *)v99, (uint64_t)__p);
        v30 = (_QWORD *)fst::cerr(v29);
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Backing off to a state with an explicit back-off arc ", 53);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"is not supported and will yield an unnormalized model.", 54);
        fst::LogMessage::~LogMessage((fst::LogMessage *)v99);
        if (v107 < 0)
          operator delete(__p[0]);
      }
    }
    fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SortedMatcher((int32x2_t *)__p, *(_QWORD *)(a1 + 8), 0, 1);
    fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetState((uint64_t)__p, v11);
    v32 = *(_QWORD *)(**(_QWORD **)a1 + 8);
    v33 = *(_DWORD *)(v32 + 4);
    v34 = *(_DWORD *)(v32 + 8);
    v35 = (float)-*(float *)(v32
                           + 12 * v34
                           + 20 * v33
                           + 4 * *(int *)(fst::EnumerationData::SubFst(*(fst::EnumerationData **)a1, v23) + 16)
                           + 4 * ((int)v11 - v24)
                           + 40);
    v36 = fabs(v35);
    if ((unint64_t)(*(_QWORD *)&v36 - 0x10000000000000) >> 53 >= 0x3FF && *(_QWORD *)&v36 != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v99, "FATAL");
      v38 = fst::LogMessage::LogMessage((fst *)v96, (uint64_t)v99);
      v39 = (_QWORD *)fst::cerr(v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Stored sum-of-unigrams probabilities for state ", 47);
      v40 = (_QWORD *)std::ostream::operator<<();
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" ", 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"within sub-fst ", 15);
      v42 = (_QWORD *)std::ostream::operator<<();
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" is infinite. ", 14);
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"", 0);
      v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"This can occur when unigram distribution used during model estimation ", 70);
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"has missing or non-finite probabilities for symbol table tokens that occur ", 75);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"in terminals.", 13);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v96);
      if (v100 < 0)
        operator delete(v99[0]);
    }
    v105 = 0;
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ArcIterator((uint64_t)v99, *(_QWORD *)(a1 + 8), v28);
    v47 = INFINITY;
    while (v104 < v103)
    {
      v48 = v101;
      if (v101
        && fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Find((uint64_t)__p, v101))
      {
        v49 = (float)(*(float *)(a1 + 176) + v102);
        while (1)
        {
          v50 = v49;
          if (v47 == INFINITY)
            break;
          v49 = v47;
          if (v50 == INFINITY)
          {
            v50 = v47;
            break;
          }
          v47 = v50;
          if (v49 <= v50)
          {
            v51 = exp(v49 - v50);
            v52 = log(v51 + 1.0);
            if (v51 >= 0.001)
            {
              v56 = -v52;
            }
            else
            {
              v53 = -v51;
              v54 = 2.0;
              v55 = 3;
              v56 = v53;
              do
              {
                v56 = v56 + pow(v53, v54) / v54;
                v54 = v54 + 1.0;
                --v55;
              }
              while (v55);
            }
            v50 = v49 + v56;
            break;
          }
        }
        Weight = (float *)fst::FstStateDenseDistribution<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::GetWeight(a1 + 16, v48);
        v35 = fst::NegLogDiff((fst *)&v105, v35, *Weight, v58, 0.001);
        if (v105)
        {
          std::string::basic_string[abi:ne180100]<0>(v96, "INFO");
          v59 = fst::LogMessage::LogMessage((fst *)&v98, (uint64_t)v96);
          v60 = (_QWORD *)fst::cerr(v59);
          v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"Encountered error when updating the sum of ", 43);
          v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"unigram probabilities for explicitly-defined events ", 52);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"for label ", 10);
          v63 = (_QWORD *)std::ostream::operator<<();
          v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" ", 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"with unigram weight ", 20);
          fst::FstStateDenseDistribution<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::GetWeight(a1 + 16, v48);
          v65 = (_QWORD *)std::ostream::operator<<();
          v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)".", 1);
          v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)" ", 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"This can happen when the internal graph uses quantized weights. Is that the case?", 81);
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v98);
          if (v97 < 0)
            operator delete(v96[0]);
          v105 = 0;
        }
      }
      else
      {
        v50 = v47;
      }
      ++v104;
      fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc((uint64_t)v99);
      v47 = v50;
    }
    v68 = *(float *)(a1 + 180);
    v70.n128_f32[0] = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v11);
    v71 = v68;
    LODWORD(v99[0]) = v70.n128_u32[0];
    LODWORD(v96[0]) = 2139095040;
    if (v70.n128_f32[0] != INFINITY)
    {
      v35 = fst::NegLogDiff((fst *)&v105, v35, *(float *)(a1 + 168), v69, 0.001);
      if (v105)
      {
        std::string::basic_string[abi:ne180100]<0>(v99, "INFO");
        v72 = fst::LogMessage::LogMessage((fst *)v96, (uint64_t)v99);
        v73 = (_QWORD *)fst::cerr(v72);
        v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Encountered error when updating the sum of ", 43);
        v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"unigram probabilities for explicitly-defined events ", 52);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"for end-of-sentence with unigram weight ", 40);
        v76 = (_QWORD *)std::ostream::operator<<();
        v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)".", 1);
        v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)" ", 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"This can happen when the internal graph uses quantized weights. Is that the case?", 81);
        fst::LogMessage::~LogMessage((fst::LogMessage *)v96);
        if (v100 < 0)
          operator delete(v99[0]);
        v105 = 0;
      }
      v79 = *(float *)(a1 + 176);
      v80 = (float)(v79
                  + (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v11));
      do
      {
        v70.n128_f64[0] = v80;
        if (v71 == INFINITY)
        {
          v71 = v80;
          goto LABEL_61;
        }
        v80 = v71;
        if (v70.n128_f64[0] == INFINITY)
          goto LABEL_61;
        v71 = v70.n128_f64[0];
      }
      while (v80 > v70.n128_f64[0]);
      v81 = exp(v80 - v70.n128_f64[0]);
      v70.n128_f64[0] = log(v81 + 1.0);
      if (v81 >= 0.001)
      {
        v85 = -v70.n128_f64[0];
      }
      else
      {
        v82 = -v81;
        v83 = 2.0;
        v84 = 3;
        v85 = v82;
        do
        {
          v70.n128_f64[0] = pow(v82, v83) / v83;
          v85 = v85 + v70.n128_f64[0];
          v83 = v83 + 1.0;
          --v84;
        }
        while (v84);
      }
      v71 = v80 + v85;
    }
LABEL_61:
    v86 = v35
        + fst::VirtualStateSpaceManager<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::GetBackoffWeight(a1, v28, v70);
    while (1)
    {
      v87 = v86;
      if (v47 == INFINITY)
        break;
      v86 = v47;
      if (v87 == INFINITY)
      {
        v87 = v47;
        break;
      }
      v47 = v87;
      if (v86 <= v87)
      {
        v88 = exp(v86 - v87);
        v89 = log(v88 + 1.0);
        if (v88 >= 0.001)
        {
          v93 = -v89;
        }
        else
        {
          v90 = -v88;
          v91 = 2.0;
          v92 = 3;
          v93 = v90;
          do
          {
            v93 = v93 + pow(v90, v91) / v91;
            v91 = v91 + 1.0;
            --v92;
          }
          while (v92);
        }
        v87 = v86 + v93;
        break;
      }
    }
    v94 = exp(-v87);
    v20 = v71 + log1p(-v94);
    fst::SortedMatcher<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~SortedMatcher(__p);
  }
  else
  {
    v18 = *(float *)(a1 + 180);
    v19 = expf(*(float *)(*(_QWORD *)(*(_QWORD *)v17 + 8)
                        + 12 * *(int *)(*(_QWORD *)(*(_QWORD *)v17 + 8) + 8)
                        + 20 * *(int *)(*(_QWORD *)(*(_QWORD *)v17 + 8) + 4)
                        + 4 * *(int *)(*(_QWORD *)(*(_QWORD *)v17 + 8) + 36)
                        + 4 * (int)v11
                        + 40));
    return v18 + log1pf(-v19);
  }
  return v20;
}

void sub_1ADF7BB4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN5kaldi6quasar15NnlmDecoderWordENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xE8uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN5kaldi6quasar15NnlmDecoderWordENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADF7BC3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN5kaldi6quasar15NnlmDecoderWordENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41F40;
  a1[1] = 0;
  kaldi::quasar::NnlmDecoderWord::NnlmDecoderWord((kaldi::quasar::NnlmDecoderWord *)(a1 + 3));
  return a1;
}

void sub_1ADF7BC88(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::NnlmDecoderWord>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41F40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::NnlmDecoderWord>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41F40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<kaldi::quasar::NnlmDecoderWord>::__on_zero_shared(uint64_t a1)
{
  kaldi::quasar::NnlmDecoderWord::~NnlmDecoderWord((kaldi::quasar::NnlmDecoderWord *)(a1 + 24));
}

void kaldi::quasar::NnlmDecoderWord::~NnlmDecoderWord(kaldi::quasar::NnlmDecoderWord *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 175) < 0)
    operator delete(*((void **)this + 19));
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  std::__tree<int>::destroy((uint64_t)this + 48, *((_QWORD **)this + 7));
  if (*((_BYTE *)this + 40))
  {
    v3 = *((_QWORD *)this + 3);
    if (v3)
      MEMORY[0x1AF44D160](v3, 0x1000C8077774924);
  }
  if (*((_BYTE *)this + 16))
  {
    if (*(_QWORD *)this)
      MEMORY[0x1AF44D160](*(_QWORD *)this, 0x1000C8077774924);
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::CEInferenceNet,std::allocator<kaldi::quasar::CEInferenceNet>,std::string const&,BOOL &,void>@<X0>(uint64_t a1@<X1>, char *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x250uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::CEInferenceNet>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,std::allocator<kaldi::quasar::CEInferenceNet>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADF7BE08(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::CEInferenceNet>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,std::allocator<kaldi::quasar::CEInferenceNet>,0>(_QWORD *a1, uint64_t a2, char *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D41E60;
  kaldi::quasar::CEInferenceNet::CEInferenceNet((uint64_t)(a1 + 3), a2, *a3, 0);
  return a1;
}

void sub_1ADF7BE5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEInferenceNet>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41E60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEInferenceNet>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41E60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::CEInferenceNet>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::nnet1::Nnet1InferenceNet,std::allocator<kaldi::nnet1::Nnet1InferenceNet>,std::string const&,BOOL &,BOOL &,BOOL &,void>@<X0>(uint64_t a1@<X1>, unsigned __int8 *a2@<X2>, unsigned __int8 *a3@<X3>, unsigned __int8 *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x1C0uLL);
  result = std::__shared_ptr_emplace<kaldi::nnet1::Nnet1InferenceNet>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,BOOL &,BOOL &,std::allocator<kaldi::nnet1::Nnet1InferenceNet>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1ADF7BF2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::nnet1::Nnet1InferenceNet>::__shared_ptr_emplace[abi:ne180100]<std::string const&,BOOL &,BOOL &,BOOL &,std::allocator<kaldi::nnet1::Nnet1InferenceNet>,0>(_QWORD *a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41C30;
  a1[1] = 0;
  kaldi::nnet1::Nnet1InferenceNet::Nnet1InferenceNet(a1 + 3, a2, *a3, *a4, *a5);
  return a1;
}

void sub_1ADF7BF84(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::CEAcousticEncoderNet,std::allocator<kaldi::quasar::CEAcousticEncoderNet>,std::string const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x118uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::CEAcousticEncoderNet>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<kaldi::quasar::CEAcousticEncoderNet>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADF7BFDC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::CEAcousticEncoderNet>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<kaldi::quasar::CEAcousticEncoderNet>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D42020;
  a1[1] = 0;
  kaldi::quasar::CEAcousticEncoderNet::CEAcousticEncoderNet(a1 + 3);
  return a1;
}

void sub_1ADF7C028(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEAcousticEncoderNet>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42020;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEAcousticEncoderNet>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42020;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEAcousticEncoderNet>::__on_zero_shared(uint64_t a1)
{
  kaldi::quasar::CEAcousticEncoderNet::~CEAcousticEncoderNet((kaldi::quasar::CEAcousticEncoderNet *)(a1 + 24));
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::FofeLmEvaluator,std::allocator<kaldi::quasar::FofeLmEvaluator>,kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,decltype(nullptr),float &,int &,void>@<X0>(const kaldi::quasar::NnlmDecoderWord **a1@<X1>, kaldi::InferenceNetItf **a2@<X2>, uint64_t a3@<X3>, float *a4@<X4>, int *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _QWORD *result;

  v12 = operator new(0x250uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::FofeLmEvaluator>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,decltype(nullptr),float &,int &,std::allocator<kaldi::quasar::FofeLmEvaluator>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1ADF7C104(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::FofeLmEvaluator>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,decltype(nullptr),float &,int &,std::allocator<kaldi::quasar::FofeLmEvaluator>,0>(_QWORD *a1, const kaldi::quasar::NnlmDecoderWord **a2, kaldi::InferenceNetItf **a3, uint64_t a4, float *a5, int *a6)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41F08;
  a1[1] = 0;
  kaldi::quasar::FofeLmEvaluator::FofeLmEvaluator((kaldi::quasar::FofeLmEvaluator *)(a1 + 3), *a2, *a3, 0, *a5, *a6, 0x2000, 0x20000);
  return a1;
}

void sub_1ADF7C16C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::FofeLmEvaluator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41F08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::FofeLmEvaluator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41F08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::FofeLmEvaluator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::RnnlmEvaluator,std::allocator<kaldi::quasar::RnnlmEvaluator>,kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,decltype(nullptr),float &,int &,void>@<X0>(const kaldi::quasar::NnlmDecoderWord **a1@<X1>, kaldi::InferenceNetItf **a2@<X2>, uint64_t a3@<X3>, float *a4@<X4>, int *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _QWORD *result;

  v12 = operator new(0x1F0uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::RnnlmEvaluator>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,decltype(nullptr),float &,int &,std::allocator<kaldi::quasar::RnnlmEvaluator>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1ADF7C24C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::RnnlmEvaluator>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,decltype(nullptr),float &,int &,std::allocator<kaldi::quasar::RnnlmEvaluator>,0>(_QWORD *a1, const kaldi::quasar::NnlmDecoderWord **a2, kaldi::InferenceNetItf **a3, uint64_t a4, float *a5, int *a6)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41ED0;
  a1[1] = 0;
  kaldi::quasar::RnnlmEvaluator::RnnlmEvaluator((kaldi::quasar::RnnlmEvaluator *)(a1 + 3), *a2, *a3, 0, *a5, *a6, 0x2000, 0, 0x20000);
  return a1;
}

void sub_1ADF7C2B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::RnnlmEvaluator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41ED0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::RnnlmEvaluator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41ED0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::RnnlmEvaluator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::DnnlmEvaluator,std::allocator<kaldi::quasar::DnnlmEvaluator>,kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,decltype(nullptr),float &,void>@<X0>(const kaldi::quasar::NnlmDecoderWord **a1@<X1>, kaldi::InferenceNetItf **a2@<X2>, uint64_t a3@<X3>, float *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x148uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::DnnlmEvaluator>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,decltype(nullptr),float &,std::allocator<kaldi::quasar::DnnlmEvaluator>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1ADF7C388(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::DnnlmEvaluator>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,decltype(nullptr),float &,std::allocator<kaldi::quasar::DnnlmEvaluator>,0>(_QWORD *a1, const kaldi::quasar::NnlmDecoderWord **a2, kaldi::InferenceNetItf **a3, uint64_t a4, float *a5)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41E98;
  a1[1] = 0;
  kaldi::quasar::DnnlmEvaluator::DnnlmEvaluator((kaldi::quasar::DnnlmEvaluator *)(a1 + 3), *a2, *a3, 0, *a5, 0x2000, 0x20000);
  return a1;
}

void sub_1ADF7C3EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::DnnlmEvaluator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41E98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::DnnlmEvaluator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41E98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::DnnlmEvaluator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::FofeLmEvaluator,std::allocator<kaldi::quasar::FofeLmEvaluator>,kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,kaldi::InferenceNetItf *,float &,int &,void>@<X0>(const kaldi::quasar::NnlmDecoderWord **a1@<X1>, kaldi::InferenceNetItf **a2@<X2>, kaldi::InferenceNetItf **a3@<X3>, float *a4@<X4>, int *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _QWORD *result;

  v12 = operator new(0x250uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::FofeLmEvaluator>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,kaldi::InferenceNetItf *,float &,int &,std::allocator<kaldi::quasar::FofeLmEvaluator>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1ADF7C4CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::FofeLmEvaluator>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,kaldi::InferenceNetItf *,float &,int &,std::allocator<kaldi::quasar::FofeLmEvaluator>,0>(_QWORD *a1, const kaldi::quasar::NnlmDecoderWord **a2, kaldi::InferenceNetItf **a3, kaldi::InferenceNetItf **a4, float *a5, int *a6)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41F08;
  a1[1] = 0;
  kaldi::quasar::FofeLmEvaluator::FofeLmEvaluator((kaldi::quasar::FofeLmEvaluator *)(a1 + 3), *a2, *a3, *a4, *a5, *a6, 0x2000, 0x20000);
  return a1;
}

void sub_1ADF7C534(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::RnnlmEvaluator,std::allocator<kaldi::quasar::RnnlmEvaluator>,kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,kaldi::InferenceNetItf *,float &,int &,void>@<X0>(const kaldi::quasar::NnlmDecoderWord **a1@<X1>, kaldi::InferenceNetItf **a2@<X2>, kaldi::InferenceNetItf **a3@<X3>, float *a4@<X4>, int *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _QWORD *result;

  v12 = operator new(0x1F0uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::RnnlmEvaluator>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,kaldi::InferenceNetItf *,float &,int &,std::allocator<kaldi::quasar::RnnlmEvaluator>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1ADF7C5BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::RnnlmEvaluator>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,kaldi::InferenceNetItf *,float &,int &,std::allocator<kaldi::quasar::RnnlmEvaluator>,0>(_QWORD *a1, const kaldi::quasar::NnlmDecoderWord **a2, kaldi::InferenceNetItf **a3, kaldi::InferenceNetItf **a4, float *a5, int *a6)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41ED0;
  a1[1] = 0;
  kaldi::quasar::RnnlmEvaluator::RnnlmEvaluator((kaldi::quasar::RnnlmEvaluator *)(a1 + 3), *a2, *a3, *a4, *a5, *a6, 0x2000, 0, 0x20000);
  return a1;
}

void sub_1ADF7C628(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::DnnlmEvaluator,std::allocator<kaldi::quasar::DnnlmEvaluator>,kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,kaldi::InferenceNetItf *,float &,void>@<X0>(const kaldi::quasar::NnlmDecoderWord **a1@<X1>, kaldi::InferenceNetItf **a2@<X2>, kaldi::InferenceNetItf **a3@<X3>, float *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x148uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::DnnlmEvaluator>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,kaldi::InferenceNetItf *,float &,std::allocator<kaldi::quasar::DnnlmEvaluator>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1ADF7C6A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::DnnlmEvaluator>::__shared_ptr_emplace[abi:ne180100]<kaldi::quasar::NnlmDecoderWord *,kaldi::InferenceNetItf *,kaldi::InferenceNetItf *,float &,std::allocator<kaldi::quasar::DnnlmEvaluator>,0>(_QWORD *a1, const kaldi::quasar::NnlmDecoderWord **a2, kaldi::InferenceNetItf **a3, kaldi::InferenceNetItf **a4, float *a5)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41E98;
  a1[1] = 0;
  kaldi::quasar::DnnlmEvaluator::DnnlmEvaluator((kaldi::quasar::DnnlmEvaluator *)(a1 + 3), *a2, *a3, *a4, *a5, 0x2000, 0x20000);
  return a1;
}

void sub_1ADF7C704(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::WordBoundaryInfo,std::allocator<kaldi::WordBoundaryInfo>,kaldi::WordBoundaryInfoNewOpts const&,std::string const&,std::string const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<kaldi::WordBoundaryInfo>::__shared_ptr_emplace[abi:ne180100]<kaldi::WordBoundaryInfoNewOpts const&,std::string const&,std::string const&,std::allocator<kaldi::WordBoundaryInfo>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1ADF7C774(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::WordBoundaryInfo>::__shared_ptr_emplace[abi:ne180100]<kaldi::WordBoundaryInfoNewOpts const&,std::string const&,std::string const&,std::allocator<kaldi::WordBoundaryInfo>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v6;

  a1[2] = 0;
  *a1 = &unk_1E5D416F0;
  a1[1] = 0;
  std::allocator<kaldi::WordBoundaryInfo>::construct[abi:ne180100]<kaldi::WordBoundaryInfo,kaldi::WordBoundaryInfoNewOpts const&,std::string const&,std::string const&>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1ADF7C7DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<kaldi::WordBoundaryInfo>::construct[abi:ne180100]<kaldi::WordBoundaryInfo,kaldi::WordBoundaryInfoNewOpts const&,std::string const&,std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::string __p;
  std::string v9;

  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v9 = *(std::string *)a4;
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    __p = *(std::string *)a5;
  kaldi::WordBoundaryInfo::WordBoundaryInfo(a2, a3, &v9, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_1ADF7C8A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<kaldi::TransitionModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41648;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::TransitionModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41648;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<kaldi::TransitionModel>::__on_zero_shared(uint64_t a1)
{
  kaldi::TransitionModel::~TransitionModel((kaldi::TransitionModel *)(a1 + 24));
}

void std::__shared_ptr_emplace<kaldi::ContextDependency>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41728;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::ContextDependency>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41728;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::ContextDependency>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 48))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::CEInferenceNet,std::allocator<kaldi::quasar::CEInferenceNet>,std::string const&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x250uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::CEInferenceNet>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<kaldi::quasar::CEInferenceNet>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADF7C9CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::CEInferenceNet>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<kaldi::quasar::CEInferenceNet>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41E60;
  a1[1] = 0;
  kaldi::quasar::CEInferenceNet::CEInferenceNet((uint64_t)(a1 + 3), a2, 0, 0);
  return a1;
}

void sub_1ADF7CA20(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::string const&,double &>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, double *a4)
{
  unint64_t v4;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[3];

  v9 = (_QWORD *)(a1 + 24);
  v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node_hash<std::string const&,double &>(a1, v11, a3, a4, (uint64_t)v27);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v23);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12)
          v25 %= v12;
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  i = (unsigned __int8 *)v27[0];
  ++*v9;
  return i;
}

void sub_1ADF7CC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

float std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node_hash<std::string const&,double &>@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char *v10;
  std::string *v11;
  float result;

  v9 = a1 + 16;
  v10 = (char *)operator new(0x30uLL);
  *(_QWORD *)(a5 + 8) = v9;
  *(_QWORD *)a5 = v10;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = a2;
  v11 = (std::string *)(v10 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v10 + 4) = *(_QWORD *)(a3 + 16);
  }
  result = *a4;
  *((float *)v10 + 10) = result;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_1ADF7CD54(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

std::string *std::allocate_shared[abi:ne180100]<quasar::ModelLoader::EmbeddedMlockContext,std::allocator<quasar::ModelLoader::EmbeddedMlockContext>,std::string const&,float &,void>@<X0>(__int128 *a1@<X1>, float *a2@<X2>, _QWORD *a3@<X8>)
{
  std::string *v6;
  std::string *result;

  v6 = (std::string *)operator new(0x38uLL);
  result = std::__shared_ptr_emplace<quasar::ModelLoader::EmbeddedMlockContext>::__shared_ptr_emplace[abi:ne180100]<std::string const&,float &,std::allocator<quasar::ModelLoader::EmbeddedMlockContext>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_1ADF7CDBC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::ModelLoader::EmbeddedMlockContext>::__shared_ptr_emplace[abi:ne180100]<std::string const&,float &,std::allocator<quasar::ModelLoader::EmbeddedMlockContext>,0>(std::string *a1, __int128 *a2, float *a3)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D424F0;
  quasar::ModelLoader::EmbeddedMlockContext::EmbeddedMlockContext(a1 + 1, a2, *a3);
  return a1;
}

void sub_1ADF7CE0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ModelLoader::EmbeddedMlockContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D424F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ModelLoader::EmbeddedMlockContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D424F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::ModelLoader::EmbeddedMlockContext>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

std::string *quasar::ModelLoader::EmbeddedMlockContext::EmbeddedMlockContext(std::string *this, __int128 *a2, float a3)
{
  __int128 v5;
  float v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = 1.0;
  if (a3 <= 1.0)
    v6 = a3;
  if (v6 < 0.0)
    v6 = 0.0;
  *(float *)&this[1].__r_.__value_.__l.__data_ = v6;
  return this;
}

void quasar::ModelLoader::enumerateSubFiles<quasar::ModelLoader::dumpInCoreStats(void)::$_0>(uint64_t a1, _QWORD **a2)
{
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;
  size_t v8;
  size_t v9;
  _BOOL4 v10;
  size_t v11;
  __int128 *v12;
  const char *v13;
  BOOL v14;
  size_t v15;
  size_t v16;
  const char *v17;
  size_t v18;
  size_t v19;
  size_t v20;
  int v21;
  size_t v22;
  size_t v23;
  _BOOL4 v24;
  size_t v25;
  size_t v26;
  uint64_t v27;
  __int128 *p_p;
  int v30;
  __int128 *v32;
  int v33;
  const char *v35;
  char *v36;
  std::string *v37;
  char *v38;
  char v39;
  const char *v40;
  _QWORD *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  size_t gl_pathc;
  size_t v47;
  char *v48;
  glob_t v49;
  char *v50[4];
  _QWORD v51[2];
  __int128 __p;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  memset(v50, 0, 24);
  std::string::basic_string[abi:ne180100]<0>(&__p, ".mlmodelc");
  v4 = *(unsigned __int8 *)(a1 + 23);
  v5 = *(_QWORD *)(a1 + 8);
  if ((v4 & 0x80u) == 0)
    v6 = *(unsigned __int8 *)(a1 + 23);
  else
    v6 = *(_QWORD *)(a1 + 8);
  v7 = SBYTE7(v53);
  if ((SBYTE7(v53) & 0x80u) == 0)
    v8 = BYTE7(v53);
  else
    v8 = *((_QWORD *)&__p + 1);
  v14 = v6 >= v8;
  v9 = v6 - v8;
  if (!v14)
  {
    v10 = 0;
    if ((SBYTE7(v53) & 0x80000000) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
  if ((v4 & 0x80) != 0)
  {
    if (v8 == -1 || v5 < v9)
LABEL_122:
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v5 - v9 >= v8)
      v16 = v8;
    else
      v16 = v5 - v9;
    v17 = *(const char **)a1;
  }
  else
  {
    v14 = v8 != -1 && v4 >= v9;
    if (!v14)
      goto LABEL_122;
    v15 = v4 - v9;
    if (v15 >= v8)
      v16 = v8;
    else
      v16 = v15;
    v17 = (const char *)a1;
  }
  if ((SBYTE7(v53) & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = (__int128 *)__p;
  v30 = memcmp(&v17[v9], p_p, v16);
  v10 = v16 == v8 && v30 == 0;
  if (v7 < 0)
LABEL_9:
    operator delete((void *)__p);
LABEL_10:
  if (v10)
  {
    if (*(char *)(a1 + 23) >= 0)
      v11 = *(unsigned __int8 *)(a1 + 23);
    else
      v11 = *(_QWORD *)(a1 + 8);
    v12 = &__p;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v11 + 10);
    if (SBYTE7(v53) < 0)
      v12 = (__int128 *)__p;
    if (v11)
    {
      if (*(char *)(a1 + 23) >= 0)
        v13 = (const char *)a1;
      else
        v13 = *(const char **)a1;
      memmove(v12, v13, v11);
    }
    strcpy((char *)v12 + v11, "/*.weights");
    if (SHIBYTE(v50[2]) < 0)
      operator delete(v50[0]);
    *(_OWORD *)v50 = __p;
    v50[2] = (char *)v53;
    goto LABEL_96;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, ".espresso.net");
  v18 = *(unsigned __int8 *)(a1 + 23);
  v19 = *(_QWORD *)(a1 + 8);
  if ((v18 & 0x80u) == 0)
    v20 = *(unsigned __int8 *)(a1 + 23);
  else
    v20 = *(_QWORD *)(a1 + 8);
  v21 = SBYTE7(v53);
  if ((SBYTE7(v53) & 0x80u) == 0)
    v22 = BYTE7(v53);
  else
    v22 = *((_QWORD *)&__p + 1);
  v14 = v20 >= v22;
  v23 = v20 - v22;
  if (!v14)
  {
    v24 = 0;
    if ((SBYTE7(v53) & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_88;
  }
  if ((v18 & 0x80) != 0)
  {
    if (v22 == -1 || v19 < v23)
LABEL_123:
      std::string::__throw_out_of_range[abi:ne180100]();
    if (v19 - v23 >= v22)
      v26 = v22;
    else
      v26 = v19 - v23;
    v27 = *(_QWORD *)a1;
  }
  else
  {
    if (v22 == -1)
      goto LABEL_123;
    v14 = v18 >= v23;
    v25 = v18 - v23;
    if (!v14)
      goto LABEL_123;
    if (v25 >= v22)
      v26 = v22;
    else
      v26 = v25;
    v27 = a1;
  }
  if ((SBYTE7(v53) & 0x80u) == 0)
    v32 = &__p;
  else
    v32 = (__int128 *)__p;
  v33 = memcmp((const void *)(v27 + v23), v32, v26);
  v24 = v26 == v22 && v33 == 0;
  if ((v21 & 0x80000000) == 0)
  {
LABEL_42:
    if (!v24)
      goto LABEL_96;
    goto LABEL_89;
  }
LABEL_88:
  operator delete((void *)__p);
  if (!v24)
    goto LABEL_96;
LABEL_89:
  if (*(char *)(a1 + 23) >= 0)
    v35 = (const char *)a1;
  else
    v35 = *(const char **)a1;
  v36 = dirname_r(v35, (char *)&__p);
  std::string::basic_string[abi:ne180100]<0>(&v49, v36);
  v37 = std::string::append((std::string *)&v49, "/*.weights");
  v38 = (char *)v37->__r_.__value_.__r.__words[0];
  v51[0] = v37->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v51 + 7) = *(std::string::size_type *)((char *)&v37->__r_.__value_.__r.__words[1] + 7);
  v39 = HIBYTE(v37->__r_.__value_.__r.__words[2]);
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v50[2]) < 0)
    operator delete(v50[0]);
  v50[0] = v38;
  v50[1] = (char *)v51[0];
  *(char **)((char *)&v50[1] + 7) = *(char **)((char *)v51 + 7);
  HIBYTE(v50[2]) = v39;
  if (SHIBYTE(v49.gl_offs) < 0)
    operator delete((void *)v49.gl_pathc);
LABEL_96:
  if ((SHIBYTE(v50[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v50[2]))
    {
      v40 = (const char *)v50;
      goto LABEL_101;
    }
LABEL_110:
    quasar::ModelLoader::dumpInCoreStats(void)const::$_0::operator()(a2, a1);
    goto LABEL_119;
  }
  if (!v50[1])
    goto LABEL_110;
  v40 = v50[0];
LABEL_101:
  if (glob(v40, 0, 0, &v49))
  {
    if (quasar::gLogLevel >= 2)
    {
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"could not find weights for: ", 28);
      v42 = *(char *)(a1 + 23);
      if (v42 >= 0)
        v43 = a1;
      else
        v43 = *(_QWORD *)a1;
      if (v42 >= 0)
        v44 = *(unsigned __int8 *)(a1 + 23);
      else
        v44 = *(_QWORD *)(a1 + 8);
      v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, v43, v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)": ", 2);
      std::ostream::operator<<();
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
    }
  }
  else
  {
    gl_pathc = v49.gl_pathc;
    if (v49.gl_pathc)
    {
      v47 = 0;
      do
      {
        v48 = v49.gl_pathv[v47];
        if (v48)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, v48);
          quasar::ModelLoader::dumpInCoreStats(void)const::$_0::operator()(a2, (uint64_t)&__p);
          if (SBYTE7(v53) < 0)
            operator delete((void *)__p);
          gl_pathc = v49.gl_pathc;
        }
        ++v47;
      }
      while (v47 < gl_pathc);
    }
    globfree(&v49);
  }
LABEL_119:
  if (SHIBYTE(v50[2]) < 0)
    operator delete(v50[0]);
}

void sub_1ADF7D36C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a15 < 0)
    operator delete(a10);
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ModelLoader::dumpInCoreStats(void)const::$_0::operator()(_QWORD **a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  const char *v9;
  int v10;
  int v11;
  off_t v12;
  int64_t v13;
  void *v14;
  void *v15;
  char *v16;
  char *v17;
  int v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  char *v30[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;

  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"\n", 1);
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = a2;
  else
    v6 = *(_QWORD *)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)":\n", 2);
  if (*(char *)(a2 + 23) >= 0)
    v9 = (const char *)a2;
  else
    v9 = *(const char **)a2;
  v10 = open(v9, 0);
  if (v10 == -1)
  {
    if (quasar::gLogLevel < 2)
      return;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    *(_OWORD *)v30 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"could not open: ", 16);
    v20 = *(char *)(a2 + 23);
    if (v20 >= 0)
      v21 = a2;
    else
      v21 = *(_QWORD *)a2;
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a2 + 23);
    else
      v22 = *(_QWORD *)(a2 + 8);
LABEL_41:
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)": ", 2);
    __error();
    std::ostream::operator<<();
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v30);
    return;
  }
  v11 = v10;
  v12 = lseek(v10, 0, 2);
  if (v12 == -1)
  {
    if (quasar::gLogLevel < 2)
      return;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    *(_OWORD *)v30 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"could not lseek: ", 17);
    v23 = *(char *)(a2 + 23);
    if (v23 >= 0)
      v21 = a2;
    else
      v21 = *(_QWORD *)a2;
    if (v23 >= 0)
      v22 = *(unsigned __int8 *)(a2 + 23);
    else
      v22 = *(_QWORD *)(a2 + 8);
    goto LABEL_41;
  }
  v13 = v12;
  lseek(v11, 0, 0);
  v14 = mmap(0, v13, 1, 1, v11, 0);
  if (v14 == (void *)-1)
  {
    if (quasar::gLogLevel < 2)
      return;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    *(_OWORD *)v30 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"could not mmap: ", 16);
    v24 = *(char *)(a2 + 23);
    if (v24 >= 0)
      v21 = a2;
    else
      v21 = *(_QWORD *)a2;
    if (v24 >= 0)
      v22 = *(unsigned __int8 *)(a2 + 23);
    else
      v22 = *(_QWORD *)(a2 + 8);
    goto LABEL_41;
  }
  v15 = v14;
  close(v11);
  std::vector<char>::vector((std::vector<char> *)v30, v13 / *a1[1] + 1);
  mincore(v15, v13, v30[0]);
  munmap(v15, v13);
  v16 = v30[0];
  v17 = v30[1];
  if (v30[0] == v30[1])
  {
    v18 = 0;
  }
  else
  {
    v18 = 0;
    do
    {
      if ((*v16 & 1) != 0)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"#", 1);
        ++v18;
      }
      else
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)".", 1);
      }
      ++v16;
    }
    while (v16 != v17);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*a1, (uint64_t)"\nloaded ", 8);
  v26 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" pages of ", 10);
  v27 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" = ", 3);
  v28 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"%\n", 2);
  *a1[2] += v18;
  v29 = v30[0];
  *a1[3] += v30[1] - v30[0];
  if (v29)
  {
    v30[1] = v29;
    operator delete(v29);
  }
}

void sub_1ADF7D820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CEDecoderConfig::Read(uint64_t a1, uint64_t a2)
{
  size_t v4;
  std::string *v5;
  const void *v6;
  uint64_t *v7;
  std::string::size_type v8;
  uint64_t v9;
  std::string::size_type v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  std::string::size_type size;
  uint64_t i;
  std::string::size_type v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  uint64_t v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  _BOOL4 v45;
  uint64_t v46;
  int v47;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  __int128 *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t *v62;
  std::string __p[11];
  std::string *v64;
  std::string *v65;
  uint64_t v66;
  std::string v67;
  __int128 v68;
  uint64_t v69;
  _BYTE v70[15];
  char v71[17];

  v71[0] = 0;
  if (*(char *)(a2 + 23) >= 0)
    v4 = *(unsigned __int8 *)(a2 + 23);
  else
    v4 = *(_QWORD *)(a2 + 8);
  v5 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 7);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v5 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  if (v4)
  {
    if (*(char *)(a2 + 23) >= 0)
      v6 = (const void *)a2;
    else
      v6 = *(const void **)a2;
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, ".config");
  kaldi::Input::Input(v70, __p, v71);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v7 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v70);
  kaldi::quasar::CreateComputeEngineConfig(a2, (uint64_t *)__p);
  v8 = __p[0].__r_.__value_.__r.__words[0];
  __p[0].__r_.__value_.__r.__words[0] = 0;
  v9 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 376) = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = __p[0].__r_.__value_.__r.__words[0];
    __p[0].__r_.__value_.__r.__words[0] = 0;
    if (v10)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v10 + 8))(v10);
  }
  if ((*((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 2) == 0)
  {
    v62 = (uint64_t *)(a1 + 264);
    do
    {
      v68 = 0uLL;
      v69 = 0;
      kaldi::ReadToken(v7, v71[0], (uint64_t)&v68);
      if ((SHIBYTE(v69) & 0x80000000) == 0)
      {
        switch(HIBYTE(v69))
        {
          case 6:
            goto LABEL_142;
          case 8:
            goto LABEL_150;
          case 9:
            goto LABEL_20;
          case 0xC:
LABEL_124:
            v36 = (_QWORD)v68 == 0x6C61564B706F543CLL && DWORD2(v68) == 1047750005;
            v12 = a1 + 72;
            if (v36)
              goto LABEL_151;
            if (HIBYTE(v69) == 6)
              goto LABEL_142;
            if (HIBYTE(v69) == 8)
              goto LABEL_150;
            if (HIBYTE(v69) != 9)
              goto LABEL_146;
LABEL_20:
            v11 = (_QWORD)v68 == 0x626F7250676F4C3CLL && BYTE8(v68) == 62;
            v12 = a1 + 120;
            if (v11)
              goto LABEL_151;
            if (HIBYTE(v69) == 8)
            {
LABEL_150:
              v12 = a1 + 168;
              if ((_QWORD)v68 != 0x3E74657366664F3CLL)
                goto LABEL_146;
              goto LABEL_151;
            }
            if (HIBYTE(v69) != 6)
              goto LABEL_146;
LABEL_142:
            v38 = (_DWORD)v68 == 1935756604 && WORD2(v68) == 15979;
            v12 = a1 + 144;
            if (v38)
              goto LABEL_151;
            break;
          case 0xD:
            if ((_QWORD)v68 == 0x746E65727275433CLL && *(_QWORD *)((char *)&v68 + 5) == 0x3E70657453746E65)
              goto LABEL_132;
LABEL_119:
            v35 = (_QWORD)v68 == 0x6F4C65686361433CLL && *(_QWORD *)((char *)&v68 + 5) == 0x3E70756B6F6F4C65;
            v12 = a1 + 48;
            if (!v35)
            {
              switch(HIBYTE(v69))
              {
                case 6:
                  goto LABEL_142;
                case 8:
                  goto LABEL_150;
                case 9:
                  goto LABEL_20;
                case 0xC:
                  goto LABEL_124;
                case 0xD:
                  v37 = (_QWORD)v68 == 0x646E494B706F543CLL && *(_QWORD *)((char *)&v68 + 5) == 0x3E73656369646E49;
                  v12 = a1 + 96;
                  if (!v37)
                  {
                    switch(HIBYTE(v69))
                    {
                      case 6:
                        goto LABEL_142;
                      case 8:
                        goto LABEL_150;
                      case 9:
                        goto LABEL_20;
                      case 0xD:
                        if ((_QWORD)v68 != 0x74537475706E493CLL
                          || *(_QWORD *)((char *)&v68 + 5) != 0x3E73657461745374)
                        {
                          goto LABEL_113;
                        }
                        goto LABEL_171;
                      default:
                        goto LABEL_146;
                    }
                  }
                  goto LABEL_151;
                default:
                  goto LABEL_146;
              }
            }
            goto LABEL_151;
          case 0xE:
            v32 = (_QWORD)v68 == 0x7265646F636E453CLL && *(_QWORD *)((char *)&v68 + 6) == 0x3E65686361437265;
            v12 = a1 + 24;
            if (v32)
              goto LABEL_151;
            switch(HIBYTE(v69))
            {
              case 6:
                goto LABEL_142;
              case 8:
                goto LABEL_150;
              case 9:
                goto LABEL_20;
              case 0xC:
                goto LABEL_124;
              case 0xD:
                goto LABEL_119;
              case 0xE:
                if ((_QWORD)v68 == 0x5374757074754F3CLL && *(_QWORD *)((char *)&v68 + 6) == 0x3E73657461745374)
                  goto LABEL_133;
LABEL_113:
                if (HIBYTE(v69) != 13)
                  goto LABEL_146;
                v23 = (uint64_t *)&v68;
                break;
              default:
                goto LABEL_146;
            }
            goto LABEL_85;
          default:
            goto LABEL_146;
        }
        goto LABEL_146;
      }
      v13 = *((_QWORD *)&v68 + 1);
      if (*((_QWORD *)&v68 + 1) == 13
        && *(_QWORD *)v68 == 0x746E65727275433CLL
        && *(_QWORD *)(v68 + 5) == 0x3E70657453746E65)
      {
LABEL_132:
        kaldi::ReadToken(v7, v71[0], a1);
        goto LABEL_152;
      }
      if (*((_QWORD *)&v68 + 1) == 14)
      {
        v15 = *(_QWORD *)v68 == 0x7265646F636E453CLL && *(_QWORD *)(v68 + 6) == 0x3E65686361437265;
        v12 = a1 + 24;
        if (v15)
        {
LABEL_151:
          kaldi::ReadToken(v7, v71[0], v12);
          goto LABEL_152;
        }
        v13 = *((_QWORD *)&v68 + 1);
      }
      if (v13 == 13)
      {
        v16 = *(_QWORD *)v68 == 0x6F4C65686361433CLL && *(_QWORD *)(v68 + 5) == 0x3E70756B6F6F4C65;
        v12 = a1 + 48;
        if (v16)
          goto LABEL_151;
        v13 = *((_QWORD *)&v68 + 1);
      }
      if (v13 == 12)
      {
        v17 = *(_QWORD *)v68 == 0x6C61564B706F543CLL && *(_DWORD *)(v68 + 8) == 1047750005;
        v12 = a1 + 72;
        if (v17)
          goto LABEL_151;
        v13 = *((_QWORD *)&v68 + 1);
      }
      if (v13 == 13)
      {
        v18 = *(_QWORD *)v68 == 0x646E494B706F543CLL && *(_QWORD *)(v68 + 5) == 0x3E73656369646E49;
        v12 = a1 + 96;
        if (v18)
          goto LABEL_151;
        v13 = *((_QWORD *)&v68 + 1);
      }
      if (v13 == 9)
      {
        v19 = *(_QWORD *)v68 == 0x626F7250676F4C3CLL && *(_BYTE *)(v68 + 8) == 62;
        v12 = a1 + 120;
        if (v19)
          goto LABEL_151;
        v13 = *((_QWORD *)&v68 + 1);
      }
      if (v13 == 6)
      {
        v20 = *(_DWORD *)v68 == 1935756604 && *(_WORD *)(v68 + 4) == 15979;
        v12 = a1 + 144;
        if (v20)
          goto LABEL_151;
        v13 = *((_QWORD *)&v68 + 1);
      }
      if (v13 == 8)
      {
        v12 = a1 + 168;
        if (*(_QWORD *)v68 == 0x3E74657366664F3CLL)
          goto LABEL_151;
        v13 = *((_QWORD *)&v68 + 1);
      }
      if (v13 == 13)
      {
        if (*(_QWORD *)v68 == 0x74537475706E493CLL && *(_QWORD *)(v68 + 5) == 0x3E73657461745374)
        {
LABEL_171:
          memset(__p, 0, 24);
          kaldi::ReadToken(v7, v71[0], (uint64_t)__p);
          std::string::basic_string[abi:ne180100]<0>(&v67, ",");
          kaldi::SplitStringOnString((uint64_t)__p, (char *)&v67, (uint64_t *)(a1 + 216));
          goto LABEL_172;
        }
        v13 = *((_QWORD *)&v68 + 1);
      }
      if (v13 != 14)
        goto LABEL_83;
      if (*(_QWORD *)v68 != 0x5374757074754F3CLL || *(_QWORD *)(v68 + 6) != 0x3E73657461745374)
      {
        v13 = *((_QWORD *)&v68 + 1);
LABEL_83:
        if (v13 == 13)
        {
          v23 = (uint64_t *)v68;
LABEL_85:
          v24 = *v23;
          v25 = *(uint64_t *)((char *)v23 + 5);
          if (v24 == 0x685365746174533CLL && v25 == 0x3E73657061685365)
          {
            memset(__p, 0, 24);
            kaldi::ReadToken(v7, v71[0], (uint64_t)__p);
            size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
            if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = __p[0].__r_.__value_.__l.__size_;
            std::string::basic_string(&v67, __p, 1uLL, size - 2, (std::allocator<char> *)&v64);
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p[0].__r_.__value_.__l.__data_);
            __p[0] = v67;
            memset(&v67, 0, sizeof(v67));
            std::string::basic_string[abi:ne180100]<0>(&v64, "),(");
            kaldi::SplitStringOnString((uint64_t)__p, (char *)&v64, (uint64_t *)&v67);
            if (SHIBYTE(v66) < 0)
              operator delete(v64);
            v29 = v67.__r_.__value_.__l.__size_;
            for (i = v67.__r_.__value_.__r.__words[0]; i != v29; i += 24)
            {
              v64 = 0;
              v65 = 0;
              v66 = 0;
              kaldi::SplitStringToIntegers<long long>(i, ",", 1, &v64);
              v30 = *(_QWORD *)(a1 + 272);
              if (v30 >= *(_QWORD *)(a1 + 280))
              {
                v31 = std::vector<std::vector<long long>>::__push_back_slow_path<std::vector<long long> const&>(v62, (uint64_t)&v64);
              }
              else
              {
                std::vector<std::vector<long long>>::__construct_one_at_end[abi:ne180100]<std::vector<long long> const&>((uint64_t)v62, (uint64_t)&v64);
                v31 = v30 + 24;
              }
              *(_QWORD *)(a1 + 272) = v31;
              if (v64)
              {
                v65 = v64;
                operator delete(v64);
              }
            }
            v64 = &v67;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p[0].__r_.__value_.__l.__data_);
            goto LABEL_152;
          }
        }
LABEL_146:
        v39 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v68, "<BeamSize>");
        v40 = a1 + 288;
        if (v39)
          goto LABEL_149;
        v41 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v68, "<MaxEncoderSize>");
        v40 = a1 + 296;
        if (v41)
          goto LABEL_149;
        v42 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v68, "<MaxContextSize>");
        v40 = a1 + 292;
        if (v42)
          goto LABEL_149;
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v68, "<StartOfTranscript>"))
        {
          memset(__p, 0, 24);
          kaldi::ReadToken(v7, v71[0], (uint64_t)__p);
          kaldi::SplitStringToIntegers<int>((uint64_t)__p, ",", 1, (std::vector<unsigned int> *)(a1 + 304));
        }
        else
        {
          if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v68, "<StartOfPrevious>"))
          {
            v43 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v68, "<EndOfTranscript>");
            v40 = a1 + 352;
            if (!v43)
            {
              v44 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v68, "<PrintableLowerLimit>");
              v40 = a1 + 364;
              if (!v44)
              {
                v45 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v68, "<PrintableUpperLimit>");
                v40 = a1 + 368;
                if (!v45)
                {
                  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v68, "<Engine>"))
                  {
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                    v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown token ", 14);
                    if (v69 >= 0)
                      v59 = &v68;
                    else
                      v59 = (__int128 *)v68;
                    if (v69 >= 0)
                      v60 = HIBYTE(v69);
                    else
                      v60 = *((_QWORD *)&v68 + 1);
                    v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)v59, v60);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)", a typo in config file?", 24);
                    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
                  }
                  v46 = *(_QWORD *)(a1 + 376);
                  v47 = v71[0];
                  std::string::basic_string[abi:ne180100]<0>(__p, "</Engine>");
                  (*(void (**)(uint64_t, uint64_t *, BOOL, std::string *))(*(_QWORD *)v46 + 16))(v46, v7, v47 != 0, __p);
                  if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_152;
LABEL_175:
                  operator delete(__p[0].__r_.__value_.__l.__data_);
                  goto LABEL_152;
                }
              }
            }
LABEL_149:
            kaldi::ReadBasicType<int>(v7, v71[0], v40);
            goto LABEL_152;
          }
          memset(__p, 0, 24);
          kaldi::ReadToken(v7, v71[0], (uint64_t)__p);
          kaldi::SplitStringToIntegers<int>((uint64_t)__p, ",", 1, (std::vector<unsigned int> *)(a1 + 328));
        }
        goto LABEL_174;
      }
LABEL_133:
      memset(__p, 0, 24);
      kaldi::ReadToken(v7, v71[0], (uint64_t)__p);
      std::string::basic_string[abi:ne180100]<0>(&v67, ",");
      kaldi::SplitStringOnString((uint64_t)__p, (char *)&v67, (uint64_t *)(a1 + 240));
LABEL_172:
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
LABEL_174:
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_175;
LABEL_152:
      std::ws[abi:ne180100]<char,std::char_traits<char>>(v7);
      if (SHIBYTE(v69) < 0)
        operator delete((void *)v68);
    }
    while ((*((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 2) == 0);
  }
  v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264)) >> 3);
  v50 = *(_QWORD *)(a1 + 216);
  v51 = *(_QWORD *)(a1 + 224);
  if (v49 != 0xAAAAAAAAAAAAAAABLL * ((v51 - v50) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"state_shapes.size() == input_states.size()", 42);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  if (v49 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 248) - *(_QWORD *)(a1 + 240)) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"state_shapes.size() == output_states.size()", 43);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  v52 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(v50, v51, (unsigned __int8 **)(a1 + 144));
  v53 = *(_QWORD *)(a1 + 216);
  v54 = *(_QWORD *)(a1 + 224);
  if (v52 != v54)
  {
    *(_DWORD *)(a1 + 356) = -1431655765 * ((unint64_t)(v52 - v53) >> 3);
    if (kaldi::g_kaldi_verbose_level < 0)
    {
      v52 = v54;
    }
    else
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Mask == InputStates[", 20);
      v55 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"]", 1);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
      v53 = *(_QWORD *)(a1 + 216);
      v52 = *(_QWORD *)(a1 + 224);
    }
  }
  v56 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(v53, v52, (unsigned __int8 **)(a1 + 168));
  if (v56 != *(_QWORD *)(a1 + 224))
  {
    *(_DWORD *)(a1 + 360) = -1431655765 * ((unint64_t)(v56 - *(_QWORD *)(a1 + 216)) >> 3);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Offset == InputStates[", 22);
      v57 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"]", 1);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    }
  }
  kaldi::Input::~Input((kaldi::Input *)v70);
}

void sub_1ADF7E688(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::Input::~Input((kaldi::Input *)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEDecoder::CEDecoder(uint64_t a1, uint64_t a2)
{
  _BYTE **v4;
  size_t v5;
  void *p_p;
  const void *v7;
  _BYTE *v8;
  int v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  void *__p;
  void *v28;
  _QWORD *v29;

  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 288) = 0x8000000005;
  *(_DWORD *)(a1 + 296) = 256;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = xmmword_1AE18FB80;
  *(_DWORD *)(a1 + 368) = 0x7FFFFFFF;
  v4 = (_BYTE **)(a1 + 376);
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_QWORD *)(a1 + 472) = 0;
  if (*(char *)(a2 + 23) >= 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *(_QWORD *)(a2 + 8);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v5 + 7);
  if (SHIBYTE(v29) < 0)
    p_p = __p;
  if (v5)
  {
    if (*(char *)(a2 + 23) >= 0)
      v7 = (const void *)a2;
    else
      v7 = *(const void **)a2;
    memmove(p_p, v7, v5);
  }
  strcpy((char *)p_p + v5, ".config");
  kaldi::quasar::CEDecoderConfig::Read(a1, a2);
  if (SHIBYTE(v29) < 0)
    operator delete(__p);
  v8 = *v4;
  v8[32] = 1;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v8 + 32))(&__p);
  v9 = __p;
  v10 = v28;
  v28 = 0;
  v11 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(a1 + 384) = v10;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v28;
    v28 = 0;
    if (v12)
      (*(void (**)(void *))(*(_QWORD *)v12 + 8))(v12);
  }
  if (v9 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Compute engine is fallback", 26);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
  }
  v13 = *(_QWORD *)(a1 + 384);
  if (!v13)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unable to create compute engine", 31);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  v14 = *(int *)(a1 + 288);
  v15 = operator new(0x10uLL);
  v28 = v15 + 2;
  v29 = v15 + 2;
  *v15 = v14;
  v15[1] = 1;
  __p = v15;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v13 + 56))(&v26, v13, &__p);
  v16 = v26;
  v26 = 0;
  v17 = *(_QWORD *)(a1 + 440);
  *(_QWORD *)(a1 + 440) = v16;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v26;
    v26 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  if (__p)
  {
    v28 = __p;
    operator delete(__p);
  }
  v19 = *(_QWORD *)(a1 + 384);
  v20 = *(int *)(a1 + 288);
  v21 = operator new(0x10uLL);
  v28 = v21 + 2;
  v29 = v21 + 2;
  *v21 = v20;
  v21[1] = 1;
  __p = v21;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v19 + 56))(&v26, v19, &__p);
  v22 = v26;
  v26 = 0;
  v23 = *(_QWORD *)(a1 + 448);
  *(_QWORD *)(a1 + 448) = v22;
  if (v23)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v24 = v26;
    v26 = 0;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
  if (__p)
  {
    v28 = __p;
    operator delete(__p);
  }
  kaldi::quasar::CEDecoder::ResetStates(a1);
  return a1;
}

void sub_1ADF7E9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
  v18 = v16[59];
  v16[59] = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = v16[58];
  v16[58] = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = v16[57];
  v16[57] = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = v16[56];
  v16[56] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = v16[55];
  v16[55] = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  __p = v16 + 52;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = v16 + 49;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v23 = v16[48];
  v16[48] = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  kaldi::quasar::CEDecoderConfig::~CEDecoderConfig((kaldi::quasar::CEDecoderConfig *)v16);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEDecoder::BeamSize(kaldi::quasar::CEDecoder *this)
{
  return *((unsigned int *)this + 72);
}

uint64_t kaldi::quasar::CEDecoder::ResetStates(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int64x2_t *v8;
  uint64_t v9;
  uint64_t v10;
  int64x2_t *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  int64x2_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t *v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  int64x2_t v45;
  char *v46;
  uint64_t v47;
  kaldi::quasar::ComputeEngineBufferItf *v48;
  uint64_t v49;
  uint64_t v50;
  int64x2_t v51;
  char *v52;
  uint64_t v53;

  v1 = this;
  v2 = *(_QWORD **)(this + 392);
  v3 = *(_QWORD **)(this + 400);
  while (v3 != v2)
  {
    v4 = *--v3;
    this = v4;
    *v3 = 0;
    if (v4)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_QWORD *)(v1 + 400) = v2;
  v5 = *(_QWORD **)(v1 + 416);
  v6 = *(_QWORD **)(v1 + 424);
  while (v6 != v5)
  {
    v7 = *--v6;
    this = v7;
    *v6 = 0;
    if (v7)
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
  }
  *(_QWORD *)(v1 + 424) = v5;
  if (*(_QWORD *)(v1 + 216) != *(_QWORD *)(v1 + 224))
  {
    v8 = (int64x2_t *)(v1 + 392);
    v9 = *(_QWORD *)(v1 + 264);
    v10 = *(_QWORD *)(v1 + 272);
    if (v9 != v10)
    {
      v11 = (int64x2_t *)(v1 + 416);
      do
      {
        (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v1 + 384) + 56))(&v49, *(_QWORD *)(v1 + 384), v9);
        v13 = *(uint64_t **)(v1 + 400);
        v12 = *(_QWORD *)(v1 + 408);
        if ((unint64_t)v13 >= v12)
        {
          v16 = ((uint64_t)v13 - v8->i64[0]) >> 3;
          if ((unint64_t)(v16 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v17 = v12 - v8->i64[0];
          v18 = v17 >> 2;
          if (v17 >> 2 <= (unint64_t)(v16 + 1))
            v18 = v16 + 1;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
            v19 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v19 = v18;
          v53 = v1 + 408;
          if (v19)
            v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v1 + 408, v19);
          else
            v20 = 0;
          v21 = (uint64_t *)&v20[8 * v16];
          v22 = &v20[8 * v19];
          v52 = v22;
          v23 = v49;
          v49 = 0;
          *v21 = v23;
          v15 = v21 + 1;
          v51.i64[1] = (uint64_t)(v21 + 1);
          v25 = *(_QWORD **)(v1 + 392);
          v24 = *(_QWORD **)(v1 + 400);
          if (v24 == v25)
          {
            v27 = vdupq_n_s64((unint64_t)v24);
          }
          else
          {
            do
            {
              v26 = *--v24;
              *v24 = 0;
              *--v21 = v26;
            }
            while (v24 != v25);
            v27 = *v8;
            v15 = (_QWORD *)v51.i64[1];
            v22 = v52;
          }
          *(_QWORD *)(v1 + 392) = v21;
          *(_QWORD *)(v1 + 400) = v15;
          v51 = v27;
          v28 = *(char **)(v1 + 408);
          *(_QWORD *)(v1 + 408) = v22;
          v52 = v28;
          v50 = v27.i64[0];
          std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v50);
        }
        else
        {
          v14 = v49;
          v49 = 0;
          *v13 = v14;
          v15 = v13 + 1;
        }
        *(_QWORD *)(v1 + 400) = v15;
        v29 = v49;
        v49 = 0;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(v1 + 384) + 56))(&v49, *(_QWORD *)(v1 + 384), v9);
        v31 = *(uint64_t **)(v1 + 424);
        v30 = *(_QWORD *)(v1 + 432);
        if ((unint64_t)v31 >= v30)
        {
          v34 = ((uint64_t)v31 - v11->i64[0]) >> 3;
          if ((unint64_t)(v34 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v35 = v30 - v11->i64[0];
          v36 = v35 >> 2;
          if (v35 >> 2 <= (unint64_t)(v34 + 1))
            v36 = v34 + 1;
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
            v37 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v37 = v36;
          v53 = v1 + 432;
          if (v37)
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v1 + 432, v37);
          else
            v38 = 0;
          v39 = (uint64_t *)&v38[8 * v34];
          v40 = &v38[8 * v37];
          v52 = v40;
          v41 = v49;
          v49 = 0;
          *v39 = v41;
          v33 = v39 + 1;
          v51.i64[1] = (uint64_t)(v39 + 1);
          v43 = *(_QWORD **)(v1 + 416);
          v42 = *(_QWORD **)(v1 + 424);
          if (v42 == v43)
          {
            v45 = vdupq_n_s64((unint64_t)v42);
          }
          else
          {
            do
            {
              v44 = *--v42;
              *v42 = 0;
              *--v39 = v44;
            }
            while (v42 != v43);
            v45 = *v11;
            v33 = (_QWORD *)v51.i64[1];
            v40 = v52;
          }
          *(_QWORD *)(v1 + 416) = v39;
          *(_QWORD *)(v1 + 424) = v33;
          v51 = v45;
          v46 = *(char **)(v1 + 432);
          *(_QWORD *)(v1 + 432) = v40;
          v52 = v46;
          v50 = v45.i64[0];
          std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v50);
        }
        else
        {
          v32 = v49;
          v49 = 0;
          *v31 = v32;
          v33 = v31 + 1;
        }
        *(_QWORD *)(v1 + 424) = v33;
        this = v49;
        v49 = 0;
        if (this)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
        v9 += 24;
      }
      while (v9 != v10);
    }
    v47 = *(unsigned int *)(v1 + 356);
    if ((v47 & 0x80000000) == 0)
    {
      v48 = *(kaldi::quasar::ComputeEngineBufferItf **)(v8->i64[0] + 8 * v47);
      this = kaldi::quasar::ComputeEngineBufferItf::GetSize(v48);
      if (this >= 1)
        return (*(uint64_t (**)(kaldi::quasar::ComputeEngineBufferItf *, uint64_t, _QWORD))(*(_QWORD *)v48 + 96))(v48, 1, (this - 1));
    }
  }
  return this;
}

void sub_1ADF7EE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CEDecoder::~CEDecoder(kaldi::quasar::CEDecoder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  v2 = *((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v8 = (void **)((char *)this + 416);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)((char *)this + 392);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v7 = *((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  kaldi::quasar::CEDecoderConfig::~CEDecoderConfig(this);
}

uint64_t kaldi::quasar::CEDecoder::Engine(kaldi::quasar::CEDecoder *this)
{
  return (uint64_t)this + 384;
}

BOOL kaldi::quasar::CEDecoder::IsPrintable(kaldi::quasar::CEDecoder *this, int a2)
{
  return *((_DWORD *)this + 91) <= a2 && *((_DWORD *)this + 92) >= a2;
}

uint64_t kaldi::quasar::CEDecoder::MaxEncoderSize(kaldi::quasar::CEDecoder *this)
{
  return *((unsigned int *)this + 74);
}

uint64_t kaldi::quasar::CEDecoder::StartOfTranscript(kaldi::quasar::CEDecoder *this)
{
  return (uint64_t)this + 304;
}

uint64_t kaldi::quasar::CEDecoder::StartOfPrevious(kaldi::quasar::CEDecoder *this)
{
  return (uint64_t)this + 328;
}

char **kaldi::quasar::CEDecoder::GetStates@<X0>(kaldi::quasar::CEDecoder *this@<X0>, char ***a2@<X8>)
{
  char **result;
  char **v5;
  kaldi::quasar::ComputeEngineBufferItf **v6;
  kaldi::quasar::ComputeEngineBufferItf **i;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void *__p[3];
  uint64_t v28;
  _QWORD v29[2];
  char *v30;
  char *v31;
  _QWORD *v32;

  result = (char **)operator new(0x30uLL);
  result[2] = 0;
  *result = (char *)&unk_1E5D457E8;
  result[1] = 0;
  result[4] = 0;
  result[5] = 0;
  result[3] = 0;
  v5 = result + 3;
  *a2 = result + 3;
  a2[1] = result;
  v6 = (kaldi::quasar::ComputeEngineBufferItf **)*((_QWORD *)this + 49);
  for (i = (kaldi::quasar::ComputeEngineBufferItf **)*((_QWORD *)this + 50); v6 != i; ++v6)
  {
    v8 = *((_QWORD *)this + 48);
    kaldi::quasar::ComputeEngineBufferItf::GetShape(*v6, (char **)__p);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v8 + 56))(&v28, v8, __p);
    v9 = (unint64_t)v5[2];
    v10 = v5[1];
    if ((unint64_t)v10 >= v9)
    {
      v13 = (v10 - *v5) >> 3;
      if ((unint64_t)(v13 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v14 = v9 - (_QWORD)*v5;
      v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
        v16 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      v32 = v5 + 2;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v5 + 2), v16);
      else
        v17 = 0;
      v18 = &v17[8 * v13];
      v19 = &v17[8 * v16];
      v31 = v19;
      v20 = v28;
      v28 = 0;
      *(_QWORD *)v18 = v20;
      v12 = v18 + 8;
      v30 = v18 + 8;
      v22 = *v5;
      v21 = v5[1];
      if (v21 == *v5)
      {
        v24 = v5[1];
      }
      else
      {
        do
        {
          v23 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *(_QWORD *)v21 = 0;
          *((_QWORD *)v18 - 1) = v23;
          v18 -= 8;
        }
        while (v21 != v22);
        v24 = *v5;
        v21 = v5[1];
        v12 = v30;
        v19 = v31;
      }
      *v5 = v18;
      v29[0] = v24;
      v29[1] = v24;
      v5[1] = v12;
      v30 = v21;
      v25 = v5[2];
      v5[2] = v19;
      v31 = v25;
      std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)v29);
    }
    else
    {
      v11 = v28;
      v28 = 0;
      *(_QWORD *)v10 = v11;
      v12 = v10 + 8;
    }
    v5[1] = v12;
    v26 = v28;
    v28 = 0;
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v5 = *a2;
    result = (char **)kaldi::quasar::ComputeEngineBufferItf::CopyFrom(*((kaldi::quasar::ComputeEngineBufferItf **)(*a2)[1] - 1), *v6);
  }
  return result;
}

void sub_1ADF7F144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  if (__p)
    operator delete(__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v13);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CEDecoder::SetStates(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 392);
  if (*(_QWORD *)(result + 400) != v2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = kaldi::quasar::ComputeEngineBufferItf::CopyFrom(*(kaldi::quasar::ComputeEngineBufferItf **)(v2 + 8 * v5), *(const kaldi::quasar::ComputeEngineBufferItf **)(*a2 + 8 * v5));
      ++v5;
      v2 = *(_QWORD *)(v4 + 392);
    }
    while (v5 < (*(_QWORD *)(v4 + 400) - v2) >> 3);
  }
  return result;
}

void kaldi::quasar::CEDecoder::Compute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int32x2_t *a5, int32x2_t *a6, int32x2_t *a7)
{
  uint64_t v14;
  _QWORD *v15;
  kaldi::quasar::ComputeEngineItf **v16;
  kaldi::quasar::ComputeEngineBufferItf *v17;
  void **v18;
  uint64_t v19;
  void **v20;
  kaldi::quasar::ComputeEngineBufferItf *v21;
  uint64_t v22;
  _QWORD *v23;
  kaldi::quasar::ComputeEngineBufferItf *v24;
  void **v25;
  uint64_t v26;
  void **v27;
  kaldi::quasar::ComputeEngineBufferItf *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 *v33;
  std::string::size_type v34;
  __int128 v35;
  std::string *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 v39;
  std::string *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  std::string::size_type v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  int64x2_t v62;
  char *v63;
  uint64_t v64;
  std::string *v65;
  __int128 v66;
  std::string *v67;
  __int128 *v68;
  int32x2_t *v69;
  int32x2_t *v70;
  int32x2_t *v71;
  __int128 v72;
  std::string *v73;
  __int128 *v74;
  __int128 v75;
  std::string *v76;
  __int128 *v77;
  __int128 v78;
  std::string *v79;
  kaldi::quasar::ComputeEngineItf *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t Size;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  void *v109;
  int32x2_t *v110;
  void *__p;
  int64x2_t v112;
  char *v113;
  _QWORD *v114;
  kaldi::quasar::ComputeEngineBufferItf *v115;
  kaldi::quasar::ComputeEngineBufferItf *v116;
  uint64_t v117;
  std::string *v118;
  unint64_t v119;
  int64x2_t v120;
  _QWORD v121[2];
  uint64_t v122;
  std::string *v123;
  unint64_t v124;
  void **v125[3];

  v122 = 0;
  v123 = 0;
  v124 = 0;
  v120 = 0uLL;
  v121[0] = 0;
  v117 = 0;
  v118 = 0;
  v119 = 0;
  v14 = *(int *)(a1 + 288);
  v15 = operator new(0x10uLL);
  v16 = (kaldi::quasar::ComputeEngineItf **)(a1 + 384);
  v112.i64[0] = (uint64_t)(v15 + 2);
  v112.i64[1] = (uint64_t)(v15 + 2);
  *v15 = v14;
  v15[1] = 1;
  __p = v15;
  v17 = *(kaldi::quasar::ComputeEngineBufferItf **)(a1 + 440);
  *(_QWORD *)(a1 + 440) = 0;
  v116 = v17;
  kaldi::quasar::CreateBufferFromMatrix((_QWORD *)(a1 + 384), a2, (uint64_t)&__p, &v116, (kaldi::quasar::ComputeEngineBufferItf **)v125);
  v18 = v125[0];
  v125[0] = 0;
  v19 = *(_QWORD *)(a1 + 440);
  *(_QWORD *)(a1 + 440) = v18;
  if (v19)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = v125[0];
    v125[0] = 0;
    if (v20)
      (*((void (**)(void **))*v20 + 1))(v20);
  }
  v21 = v116;
  v116 = 0;
  if (v21)
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v21 + 8))(v21);
  if (__p)
  {
    v112.i64[0] = (uint64_t)__p;
    operator delete(__p);
  }
  v22 = *(int *)(a1 + 288);
  v23 = operator new(0x10uLL);
  v112.i64[0] = (uint64_t)(v23 + 2);
  v112.i64[1] = (uint64_t)(v23 + 2);
  *v23 = v22;
  v23[1] = 1;
  __p = v23;
  v24 = *(kaldi::quasar::ComputeEngineBufferItf **)(a1 + 448);
  *(_QWORD *)(a1 + 448) = 0;
  v115 = v24;
  kaldi::quasar::CreateBufferFromMatrix((_QWORD *)(a1 + 384), a3, (uint64_t)&__p, &v115, (kaldi::quasar::ComputeEngineBufferItf **)v125);
  v25 = v125[0];
  v125[0] = 0;
  v26 = *(_QWORD *)(a1 + 448);
  *(_QWORD *)(a1 + 448) = v25;
  if (v26)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    v27 = v125[0];
    v125[0] = 0;
    if (v27)
      (*((void (**)(void **))*v27 + 1))(v27);
  }
  v28 = v115;
  v115 = 0;
  if (v28)
    (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v28 + 8))(v28);
  if (__p)
  {
    v112.i64[0] = (uint64_t)__p;
    operator delete(__p);
  }
  v29 = *(_QWORD *)(a1 + 440);
  v30 = v123;
  if ((unint64_t)v123 >= v124)
  {
    v32 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v122, (__int128 *)a1, *(_QWORD *)(a1 + 440));
  }
  else
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v123, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      v31 = *(_OWORD *)a1;
      v123->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
    }
    v30[1].__r_.__value_.__r.__words[0] = v29;
    v32 = (std::string *)((char *)v30 + 32);
  }
  v123 = v32;
  v33 = (__int128 *)(a1 + 48);
  v34 = *(_QWORD *)(a1 + 448);
  if ((unint64_t)v32 >= v124)
  {
    v36 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v122, v33, *(_QWORD *)(a1 + 448));
  }
  else
  {
    if (*(char *)(a1 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(v32, *(const std::string::value_type **)(a1 + 48), *(_QWORD *)(a1 + 56));
    }
    else
    {
      v35 = *v33;
      v32->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 64);
      *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v35;
    }
    v32[1].__r_.__value_.__r.__words[0] = v34;
    v36 = (std::string *)((char *)v32 + 32);
  }
  v123 = v36;
  v37 = (__int128 *)(a1 + 24);
  v38 = *a4;
  if ((unint64_t)v36 >= v124)
  {
    v40 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v122, v37, v38);
  }
  else
  {
    if (*(char *)(a1 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(v36, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
    }
    else
    {
      v39 = *v37;
      v36->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 40);
      *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v39;
    }
    v36[1].__r_.__value_.__r.__words[0] = v38;
    v40 = (std::string *)((char *)v36 + 32);
  }
  v110 = a7;
  v123 = v40;
  v41 = *(_QWORD *)(a1 + 216);
  if (*(_QWORD *)(a1 + 224) == v41)
  {
    v67 = v118;
  }
  else
  {
    v42 = 0;
    do
    {
      v43 = v41 + 24 * v42;
      v44 = *(_QWORD *)(*(_QWORD *)(a1 + 392) + 8 * v42);
      v45 = v123;
      if ((unint64_t)v123 >= v124)
      {
        v47 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v122, (__int128 *)v43, *(_QWORD *)(*(_QWORD *)(a1 + 392) + 8 * v42));
      }
      else
      {
        if (*(char *)(v43 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v123, *(const std::string::value_type **)v43, *(_QWORD *)(v43 + 8));
        }
        else
        {
          v46 = *(_OWORD *)v43;
          v123->__r_.__value_.__r.__words[2] = *(_QWORD *)(v43 + 16);
          *(_OWORD *)&v45->__r_.__value_.__l.__data_ = v46;
        }
        v45[1].__r_.__value_.__r.__words[0] = v44;
        v47 = (std::string *)((char *)v45 + 32);
      }
      v123 = v47;
      v48 = *(_QWORD *)(a1 + 416);
      v49 = *(_QWORD *)(v48 + 8 * v42);
      if (v49)
      {
        v50 = (_QWORD *)v120.i64[1];
        if (v120.i64[1] >= v121[0])
        {
          v52 = (v120.i64[1] - v120.i64[0]) >> 3;
          if ((unint64_t)(v52 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v53 = (v121[0] - v120.i64[0]) >> 2;
          if (v53 <= v52 + 1)
            v53 = v52 + 1;
          if (v121[0] - v120.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
            v54 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v54 = v53;
          v114 = v121;
          if (v54)
            v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v121, v54);
          else
            v55 = 0;
          v56 = &v55[8 * v52];
          v57 = &v55[8 * v54];
          v113 = v57;
          v58 = *(_QWORD *)(v48 + 8 * v42);
          *(_QWORD *)(v48 + 8 * v42) = 0;
          *(_QWORD *)v56 = v58;
          v51 = v56 + 8;
          v112.i64[1] = (uint64_t)(v56 + 8);
          v59 = (_QWORD *)v120.i64[1];
          v60 = (_QWORD *)v120.i64[0];
          if (v120.i64[1] == v120.i64[0])
          {
            v62 = vdupq_n_s64(v120.u64[1]);
          }
          else
          {
            do
            {
              v61 = *--v59;
              *v59 = 0;
              *((_QWORD *)v56 - 1) = v61;
              v56 -= 8;
            }
            while (v59 != v60);
            v62 = v120;
            v51 = (_QWORD *)v112.i64[1];
            v57 = v113;
          }
          v120.i64[0] = (uint64_t)v56;
          v120.i64[1] = (uint64_t)v51;
          v112 = v62;
          v63 = (char *)v121[0];
          v121[0] = v57;
          v113 = v63;
          __p = (void *)v62.i64[0];
          std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&__p);
        }
        else
        {
          *(_QWORD *)(v48 + 8 * v42) = 0;
          *v50 = v49;
          v51 = v50 + 1;
        }
        v120.i64[1] = (uint64_t)v51;
      }
      v64 = *(_QWORD *)(a1 + 240) + 24 * v42;
      v65 = v118;
      if ((unint64_t)v118 >= v119)
      {
        v67 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v117, (__int128 *)v64);
      }
      else
      {
        if (*(char *)(v64 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v118, *(const std::string::value_type **)v64, *(_QWORD *)(v64 + 8));
        }
        else
        {
          v66 = *(_OWORD *)v64;
          v118->__r_.__value_.__r.__words[2] = *(_QWORD *)(v64 + 16);
          *(_OWORD *)&v65->__r_.__value_.__l.__data_ = v66;
        }
        v67 = v65 + 1;
      }
      v118 = v67;
      ++v42;
      v41 = *(_QWORD *)(a1 + 216);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 224) - v41) >> 3) > v42);
  }
  v68 = (__int128 *)(a1 + 72);
  if ((unint64_t)v67 >= v119)
  {
    v70 = a6;
    v69 = a5;
    v71 = v110;
    v73 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v117, v68);
  }
  else
  {
    v70 = a6;
    v69 = a5;
    v71 = v110;
    if (*(char *)(a1 + 95) < 0)
    {
      std::string::__init_copy_ctor_external(v67, *(const std::string::value_type **)(a1 + 72), *(_QWORD *)(a1 + 80));
    }
    else
    {
      v72 = *v68;
      v67->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 88);
      *(_OWORD *)&v67->__r_.__value_.__l.__data_ = v72;
    }
    v73 = v67 + 1;
  }
  v118 = v73;
  v74 = (__int128 *)(a1 + 96);
  if ((unint64_t)v73 >= v119)
  {
    v76 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v117, v74);
  }
  else
  {
    if (*(char *)(a1 + 119) < 0)
    {
      std::string::__init_copy_ctor_external(v73, *(const std::string::value_type **)(a1 + 96), *(_QWORD *)(a1 + 104));
    }
    else
    {
      v75 = *v74;
      v73->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 112);
      *(_OWORD *)&v73->__r_.__value_.__l.__data_ = v75;
    }
    v76 = v73 + 1;
  }
  v118 = v76;
  v77 = (__int128 *)(a1 + 120);
  if ((unint64_t)v76 >= v119)
  {
    v79 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v117, v77);
  }
  else
  {
    if (*(char *)(a1 + 143) < 0)
    {
      std::string::__init_copy_ctor_external(v76, *(const std::string::value_type **)(a1 + 120), *(_QWORD *)(a1 + 128));
    }
    else
    {
      v78 = *v77;
      v76->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 136);
      *(_OWORD *)&v76->__r_.__value_.__l.__data_ = v78;
    }
    v79 = v76 + 1;
  }
  v118 = v79;
  v80 = *v16;
  __p = 0;
  v112 = 0uLL;
  (*(void (**)(kaldi::quasar::ComputeEngineItf *, uint64_t *, uint64_t *, void **, int64x2_t *))(*(_QWORD *)v80 + 128))(v80, &v122, &v117, &__p, &v120);
  v125[0] = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v125);
  v81 = v120.i64[1];
  v82 = *(_QWORD *)(a1 + 472);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(v120.i64[1] - 8);
  *(_QWORD *)(v81 - 8) = v82;
  if (v71)
  {
    v83 = *(_QWORD *)(a1 + 472);
    v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v83 + 152))(v83);
    v85 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v83 + 160))(v83, (v84 - 1));
    kaldi::quasar::CopyBufferToMatrix(v83, 0xFFFFFFFFLL, v85, v71);
  }
  v86 = v120.i64[1];
  v88 = v120.i64[1] - 8;
  v87 = *(_QWORD *)(v120.i64[1] - 8);
  *(_QWORD *)(v120.i64[1] - 8) = 0;
  if (v87)
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
  v120.i64[1] = v88;
  v89 = *(_QWORD *)(a1 + 464);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(v86 - 16);
  *(_QWORD *)(v86 - 16) = v89;
  if (v70)
  {
    v90 = *(_QWORD *)(a1 + 464);
    v91 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v90 + 152))(v90);
    v92 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v90 + 160))(v90, (v91 - 1));
    kaldi::quasar::CopyBufferToMatrix(v90, 0xFFFFFFFFLL, v92, v70);
  }
  v93 = v120.i64[1];
  v95 = v120.i64[1] - 8;
  v94 = *(_QWORD *)(v120.i64[1] - 8);
  *(_QWORD *)(v120.i64[1] - 8) = 0;
  if (v94)
    (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
  v120.i64[1] = v95;
  v96 = *(_QWORD *)(a1 + 456);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(v93 - 16);
  *(_QWORD *)(v93 - 16) = v96;
  if (v69)
  {
    v97 = *(_QWORD *)(a1 + 456);
    v98 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v97 + 152))(v97);
    v99 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v97 + 160))(v97, (v98 - 1));
    kaldi::quasar::CopyBufferToMatrix(v97, 0xFFFFFFFFLL, v99, v69);
  }
  v101 = v120.i64[1] - 8;
  v100 = *(_QWORD *)(v120.i64[1] - 8);
  *(_QWORD *)(v120.i64[1] - 8) = 0;
  if (v100)
    (*(void (**)(uint64_t))(*(_QWORD *)v100 + 8))(v100);
  v120.i64[1] = v101;
  if (*(_QWORD *)(a1 + 400) - *(_QWORD *)(a1 + 392) != v101 - v120.i64[0])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"input_states_.size() == outputs.size()", 38);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
  }
  v102 = (_QWORD *)(a1 + 416);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((_QWORD *)(a1 + 416));
  *(int64x2_t *)(a1 + 416) = v120;
  *(_QWORD *)(a1 + 432) = v121[0];
  v121[0] = 0;
  v120 = 0uLL;
  v103 = *(_QWORD *)(a1 + 392);
  if (*(_QWORD *)(a1 + 400) != v103)
  {
    v104 = 0;
    do
    {
      Size = kaldi::quasar::ComputeEngineBufferItf::GetSize(*(kaldi::quasar::ComputeEngineBufferItf **)(v103 + 8 * v104));
      if (Size == kaldi::quasar::ComputeEngineBufferItf::GetSize(*(kaldi::quasar::ComputeEngineBufferItf **)(*v102 + 8 * v104)))
      {
        kaldi::quasar::ComputeEngineBufferItf::CopyFrom(*(kaldi::quasar::ComputeEngineBufferItf **)(*(_QWORD *)(a1 + 392) + 8 * v104), *(const kaldi::quasar::ComputeEngineBufferItf **)(*(_QWORD *)(a1 + 416) + 8 * v104));
      }
      else
      {
        kaldi::quasar::ComputeEngineItf::CreateCopyFloat(*v16, *(const kaldi::quasar::ComputeEngineBufferItf **)(*v102 + 8 * v104), &__p);
        v106 = *(_QWORD *)(a1 + 392);
        v107 = __p;
        __p = 0;
        v108 = *(_QWORD *)(v106 + 8 * v104);
        *(_QWORD *)(v106 + 8 * v104) = v107;
        if (v108)
          (*(void (**)(uint64_t))(*(_QWORD *)v108 + 8))(v108);
        v109 = __p;
        __p = 0;
        if (v109)
          (*(void (**)(void *))(*(_QWORD *)v109 + 8))(v109);
      }
      ++v104;
      v103 = *(_QWORD *)(a1 + 392);
    }
    while (v104 < (*(_QWORD *)(a1 + 400) - v103) >> 3);
  }
  __p = &v117;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &v120;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &v122;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void kaldi::quasar::CEDecoderConfig::~CEDecoderConfig(kaldi::quasar::CEDecoderConfig *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void **v5;

  v2 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 41);
  if (v3)
  {
    *((_QWORD *)this + 42) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 38);
  if (v4)
  {
    *((_QWORD *)this + 39) = v4;
    operator delete(v4);
  }
  v5 = (void **)((char *)this + 264);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)((char *)this + 240);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)((char *)this + 216);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void kaldi::quasar::SeevaBeamSearchBigLm::InitAuxiliaryCrumbs(kaldi::quasar::SeevaBeamSearchBigLm *this)
{
  std::vector<int>::size_type v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::vector<int> v7;

  v2 = *(int *)(*((_QWORD *)this + 2) + 152);
  std::vector<int>::vector(&v7, v2, (const std::vector<int>::value_type *)this + 142);
  v3 = (void *)*((_QWORD *)this + 79);
  if (v3)
  {
    *((_QWORD *)this + 80) = v3;
    operator delete(v3);
  }
  *(std::vector<int> *)((char *)this + 632) = v7;
  std::vector<int>::vector(&v7, v2, (const std::vector<int>::value_type *)this + 143);
  v4 = (void *)*((_QWORD *)this + 82);
  if (v4)
  {
    *((_QWORD *)this + 83) = v4;
    operator delete(v4);
  }
  *(std::vector<int> *)((char *)this + 656) = v7;
  v5 = *((_QWORD *)this + 86);
  v6 = *((_QWORD *)this + 85);
  while (v5 != v6)
  {
    v5 -= 48;
    std::allocator<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>::destroy[abi:ne180100]((uint64_t)this + 696, v5);
  }
  *((_QWORD *)this + 86) = v6;
}

void kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(uint64_t a1, int a2, uint64_t a3, char *a4, uint64_t a5)
{
  char *v6;
  uint64_t v9;
  unint64_t v10;
  float *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  float v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  char *v35;
  int v36;
  char *v37;
  float v38;
  float v39;
  double v40;
  char *v41;
  char *v42;
  float v43;
  float v44;
  float v45;
  BOOL v46;
  float v47;
  float v48;
  char *v49;
  char *v50;
  float v51;
  float v52;
  float v53;
  BOOL v54;
  float v55;
  char *v56;
  uint64_t v57;
  double v58;
  float v59;
  unint64_t v60;
  __n128 *v61;
  __n128 *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  float *v66;
  _DWORD *v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  int v78;
  uint64_t v79;
  char *v80;
  double v81;
  double v82;
  void *v83;
  _BYTE *v84;
  void *v85;
  void *v86;
  uint64_t v87;
  void *v88;
  void *v89;
  uint64_t v90;
  double v91;
  unsigned int v92;
  int v93;
  void *__p;
  __n128 *v95;
  uint64_t v96;
  std::vector<int> v97;
  int v98[3];

  v6 = a4;
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 152);
  v98[0] = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 152);
  v10 = *(int *)(*(_QWORD *)(a1 + 560) + 220);
  if (a2)
  {
    if (a4 != (char *)a3)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a4, *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
    v11 = *(float **)v6;
    v12 = *(int *)(a1 + 44);
    v13 = *(_QWORD *)v6 + 4 * v12;
    v95 = 0;
    v96 = 0;
    __p = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(&__p, v11, v13, v12);
    kaldi::quasar::argsortn<float,false>((uint64_t *)&__p, v10, &v97);
    goto LABEL_18;
  }
  kaldi::quasar::SeevaBeamSearchBase::MaskEos(a1, (_QWORD *)a3);
  kaldi::quasar::SeevaBeamSearchBase::UpdateBeamLength((_QWORD *)a1);
  if (v6 != (char *)a3)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v6, *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  if ((int)v9 >= 1)
  {
    v14 = 0;
    v15 = *(unsigned int *)(a1 + 44);
    v16 = *(float **)v6;
    do
    {
      if ((int)v15 >= 1)
      {
        v17 = *(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 112) - 1;
        v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * (v17 / 0xAA)) + 24 * (v17 % 0xAA));
        v19 = v15;
        v20 = v16;
        do
        {
          *v20 = *(float *)(v18 + 4 * v14) + *v20;
          ++v20;
          --v19;
        }
        while (v19);
      }
      ++v14;
      v16 += (int)v15;
    }
    while (v14 != v9);
  }
  if (*(float *)(*(_QWORD *)(a1 + 16) + 8) != 0.0)
  {
    kaldi::quasar::SeevaBeamSearchBase::ApplyLengthNorm(a1, (uint64_t)v6, (float **)&__p);
    kaldi::quasar::argsortn<float,false>((uint64_t *)&__p, v10, &v97);
LABEL_18:
    v22 = *(_DWORD **)a5;
    if (*(_QWORD *)a5)
    {
      *(_QWORD *)(a5 + 8) = v22;
      operator delete(v22);
      *(_QWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
    }
    *(std::vector<int> *)a5 = v97;
    memset(&v97, 0, sizeof(v97));
    if (__p)
    {
      v95 = (__n128 *)__p;
      operator delete(__p);
    }
    goto LABEL_22;
  }
  kaldi::quasar::argsortn<float,false>((uint64_t *)v6, v10, &v97);
  v21 = *(_DWORD **)a5;
  if (*(_QWORD *)a5)
  {
    *(_QWORD *)(a5 + 8) = v21;
    operator delete(v21);
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
  }
  *(std::vector<int> *)a5 = v97;
LABEL_22:
  v23 = *(_DWORD **)a5;
  memset(&v97, 0, sizeof(v97));
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int *>,std::__wrap_iter<int *>>(&v97, v23, (uint64_t)&v23[v10], v10);
  __p = 0;
  v95 = 0;
  v96 = 0;
  if ((int)v10 < 1)
  {
    v61 = 0;
    v62 = 0;
  }
  else
  {
    v79 = a5;
    v25 = 0;
    v80 = v6;
    do
    {
      v26 = v97.__begin_[v25];
      v27 = *(_DWORD *)(a1 + 44);
      v28 = (int)v26 / v27;
      v29 = *(float *)(*(_QWORD *)v6 + 4 * v26);
      v93 = 0;
      v30 = *(unsigned int *)(*(_QWORD *)(a1 + 656) + 4 * ((int)v26 / v27));
      v92 = 0;
      v93 = v30;
      v92 = *(_DWORD *)(*(_QWORD *)(a1 + 632) + 4 * ((int)v26 / v27));
      v90 = 0;
      v91 = 0.0;
      v88 = 0;
      v89 = 0;
      v85 = 0;
      v86 = 0;
      v87 = 0;
      kaldi::quasar::SeevaBeamSearchBigLm::Traverse(a1, v30, v92, (int)v26 % v27, &v88, &v85, (int **)&v83);
      v31 = v83;
      if ((int)((unint64_t)(v84 - (_BYTE *)v83) >> 2) >= 1)
      {
        v32 = 0;
        v33 = v29;
        v34 = (v84 - (_BYTE *)v83) & 0x3FFFFFFFCLL;
        do
        {
          switch(*(_DWORD *)((char *)v83 + v32))
          {
            case 0:
              v93 = *(_DWORD *)(a1 + 572);
              v39 = *(float *)(*(_QWORD *)(a1 + 560) + 212);
              goto LABEL_55;
            case 1:
              v93 = *(_DWORD *)(a1 + 572);
              v40 = 0.0;
              break;
            case 2:
            case 4:
              v35 = (char *)v88 + 4 * v32;
              v36 = *((_DWORD *)v35 + 3);
              goto LABEL_41;
            case 3:
              v37 = (char *)v88 + 4 * v32;
              v93 = *((_DWORD *)v37 + 3);
              goto LABEL_51;
            case 5:
              v35 = (char *)v85 + 4 * v32;
              v92 = *((_DWORD *)v35 + 3);
              v36 = *(_DWORD *)(a1 + 572);
LABEL_41:
              v93 = v36;
              v38 = *((float *)v35 + 2);
              v48 = *(float *)(*(_QWORD *)(a1 + 560) + 212);
              goto LABEL_54;
            case 6:
              v49 = (char *)v88 + 4 * v32;
              v93 = *((_DWORD *)v49 + 3);
              v50 = (char *)v85 + 4 * v32;
              v92 = *((_DWORD *)v50 + 3);
              v51 = *((float *)v49 + 2);
              v52 = NAN;
              if (v51 != -INFINITY)
              {
                v53 = *((float *)v50 + 2);
                v52 = NAN;
                if (v53 != -INFINITY)
                {
                  v52 = INFINITY;
                  v54 = v53 == INFINITY || v51 == INFINITY;
                  v55 = v51 + v53;
                  if (!v54)
                    v52 = v55;
                }
              }
              v40 = v52;
              break;
            case 7:
              v41 = (char *)v88 + 4 * v32;
              v93 = *((_DWORD *)v41 + 3);
              v42 = (char *)v85 + 4 * v32;
              v92 = *((_DWORD *)v42 + 3);
              v43 = *((float *)v41 + 2);
              v44 = NAN;
              if (v43 != -INFINITY)
              {
                v45 = *((float *)v42 + 2);
                v44 = NAN;
                if (v45 != -INFINITY)
                {
                  v44 = INFINITY;
                  v46 = v45 == INFINITY || v43 == INFINITY;
                  v47 = v43 + v45;
                  if (!v46)
                    v44 = v47;
                }
              }
              v39 = v44 + *(float *)(*(_QWORD *)(a1 + 560) + 212);
              goto LABEL_55;
            case 8:
              v93 = *(_DWORD *)(a1 + 572);
              v37 = (char *)v85 + 4 * v32;
LABEL_51:
              v39 = *((float *)v37 + 2);
              goto LABEL_55;
            case 9:
              v93 = *(_DWORD *)(a1 + 572);
              v38 = *((float *)v85 + v32 + 2);
              goto LABEL_53;
            case 0xA:
              v56 = (char *)v88 + 4 * v32;
              v93 = *((_DWORD *)v56 + 3);
              v38 = *((float *)v85 + v32 + 2) + *((float *)v56 + 2);
LABEL_53:
              v48 = *(float *)(*(_QWORD *)(a1 + 560) + 216);
LABEL_54:
              v39 = v38 + v48;
LABEL_55:
              v40 = v39;
              break;
            default:
              v40 = v91;
              break;
          }
          v91 = -v40;
          v57 = *(_QWORD *)(a1 + 560);
          v58 = v33 - *(float *)(v57 + 208) * v40;
          v82 = v58;
          v81 = 0.0;
          v59 = *(float *)(v57 + 228);
          if (v59 > 0.0)
          {
            v60 = *(_QWORD *)(a1 + 216) + *(_QWORD *)(a1 + 208) - 1;
            v58 = v58
                * kaldi::quasar::InverseLengthPenaltyValue((kaldi::quasar *)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 184) + 8 * (v60 / 0xAA))+ 24 * (v60 % 0xAA))+ 4 * v28), v59);
          }
          v81 = v58;
          std::vector<kaldi::quasar::LmScoreState>::emplace_back<double &,double &,int &,int &,double &,int &>(&__p, &v81, &v82, &v97.__begin_[v25], (int *)&v92, &v91, &v93);
          v32 += 4;
        }
        while (v34 != v32);
        v31 = v83;
      }
      if (v31)
      {
        v84 = v31;
        operator delete(v31);
      }
      v6 = v80;
      if (v85)
      {
        v86 = v85;
        operator delete(v85);
      }
      if (v88)
      {
        v89 = v88;
        operator delete(v88);
      }
      ++v25;
    }
    while (v25 != v10);
    v62 = (__n128 *)__p;
    v61 = v95;
    a5 = v79;
  }
  if ((char *)v61 - (char *)v62 < 3073)
  {
    v63 = 0;
    v65 = 0;
  }
  else
  {
    v63 = std::get_temporary_buffer[abi:ne180100]<kaldi::quasar::LmScoreState>(0xAAAAAAAAAAAAAAABLL * (((char *)v61 - (char *)v62) >> 3));
    v65 = v64;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(BOOL,std::vector<float> &,std::vector<float> &,std::vector<int> &)::$_0 &,std::__wrap_iter<kaldi::quasar::LmScoreState *>>(v62, v61, 0xAAAAAAAAAAAAAAABLL * (((char *)v61 - (char *)v62) >> 3), (uint64_t)v63, v65, v24);
  if (v63)
    operator delete(v63);
  if ((int)v10 >= 1)
  {
    v66 = *(float **)v6;
    v67 = *(_DWORD **)a5;
    v68 = v10;
    v69 = (int *)((char *)__p + 8);
    do
    {
      v70 = *v69;
      LODWORD(v66[v70]) = *(v69 - 1);
      *v67++ = v70;
      v69 += 6;
      --v68;
    }
    while (v68);
  }
  v71 = *(_QWORD *)(a1 + 688);
  if (v71 >= *(_QWORD *)(a1 + 696))
  {
    v72 = std::vector<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb>::__emplace_back_slow_path<int const&>((uint64_t *)(a1 + 680), v98);
    LODWORD(v9) = v98[0];
  }
  else
  {
    kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb::Cookiecrumb(*(kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb **)(a1 + 688), v9);
    v72 = v71 + 48;
    *(_QWORD *)(a1 + 688) = v71 + 48;
  }
  *(_QWORD *)(a1 + 688) = v72;
  if ((int)v9 >= 1)
  {
    v73 = 0;
    v74 = *(_QWORD *)(v72 - 24);
    v75 = *(_QWORD *)(v72 - 48);
    v76 = *(_QWORD *)(a1 + 656);
    v77 = (int *)((char *)__p + 20);
    do
    {
      *(_DWORD *)(v74 + 4 * v73) = *(v77 - 2);
      *(_DWORD *)(v75 + 4 * v73) = *(v77 - 1);
      v78 = *v77;
      v77 += 6;
      *(_DWORD *)(v76 + 4 * v73++) = v78;
    }
    while (v73 < v98[0]);
  }
  if (a1 + 632 != v72 - 24)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 632), *(char **)(v72 - 24), *(_QWORD *)(v72 - 16), (uint64_t)(*(_QWORD *)(v72 - 16) - *(_QWORD *)(v72 - 24)) >> 2);
  if (__p)
  {
    v95 = (__n128 *)__p;
    operator delete(__p);
  }
  if (v97.__begin_)
  {
    v97.__end_ = v97.__begin_;
    operator delete(v97.__begin_);
  }
}

void sub_1ADF804C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::SeevaBeamSearchBigLm::Traverse(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void **a5@<X4>, void **a6@<X5>, int **a7@<X8>)
{
  int v11;
  uint64_t v14;
  float v15;
  float v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  _OWORD *v22;
  unsigned int *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  int v29;
  _OWORD *v30;
  _OWORD *v31;
  unint64_t v32;
  _OWORD *v33;
  _OWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  unint64_t v44;
  int *v45;
  int v46;
  int v47;
  unint64_t v48;
  int *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  int *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  int v63;
  int v64;
  int v65;
  unint64_t v66;
  _OWORD *v67;
  _OWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  unint64_t v78;
  int *v79;
  int v80;
  float *v81;
  char *v82;
  char *v83;
  char *v84;
  unint64_t v85;
  _OWORD *v86;
  unint64_t v87;
  _OWORD *v88;
  _OWORD *v89;
  int *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  unint64_t v96;
  _OWORD *v97;
  unint64_t v98;
  _OWORD *v99;
  _OWORD *v100;
  uint64_t v101;
  uint64_t v102;
  int *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  int *v126;
  int v127;
  unint64_t v128;
  _OWORD *v129;
  _OWORD *v130;
  _OWORD *v131;
  unint64_t v132;
  _OWORD *v133;
  _OWORD *v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  float v144;
  float v145;
  float v146;
  BOOL v147;
  float v148;
  unint64_t v149;
  _OWORD *v150;
  _OWORD *v151;
  int v152;
  int v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  unint64_t v159;
  int *v160;
  int *v161;
  char *v162;
  char *v163;
  char *v164;
  char *v165;
  unint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  char *v171;
  int v172;
  char *v173;
  char *v174;
  char *v175;
  char *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  char *v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  char *v191;
  char *v192;
  char *v193;
  char *v194;
  char *v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  unint64_t v200;
  char *v201;
  int v202;
  char *v203;
  char *v204;
  char *v205;
  char *v206;
  unint64_t v207;
  int *v208;
  int *v209;
  int *v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  char *v215;
  int *v216;
  int *v217;
  int v218;
  int v219;
  int v220;
  unsigned int *v221;
  unint64_t v222;
  int *v223;
  int v224;
  int v225;
  unint64_t v226;
  int *v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  unint64_t v231;
  char *v232;
  int *v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  char *v240;
  int v241;
  int v242;
  int v243;
  unint64_t v244;
  _OWORD *v245;
  _OWORD *v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  unint64_t v250;
  char *v251;
  char *v252;
  char *v253;
  char *v254;
  char *v255;
  char *v256;
  char *v257;
  char *v258;
  char *v259;
  unint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  char *v265;
  int v266;
  int v267;
  uint64_t v268;
  int v269;
  int v270;
  __int128 v271;
  unint64_t v272;
  _DWORD *v273;
  unint64_t v274;

  v11 = a2;
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  v14 = a1 + 408;
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetState(a1 + 408, a2);
  if (*(_DWORD *)(a1 + 36) == a4)
  {
    v15 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 392) + 16))(*(_QWORD *)(a1 + 392), a3);
    v16 = v15;
    v17 = (char *)a6[2];
    v18 = (char *)a6[1];
    if (v18 >= v17)
    {
      v24 = (v18 - (_BYTE *)*a6) >> 4;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v26 = v17 - (_BYTE *)*a6;
      if (v26 >> 3 > v25)
        v25 = v26 >> 3;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
        v27 = 0xFFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
        v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a6 + 2), v27);
      else
        v28 = 0;
      v81 = (float *)&v28[16 * v24];
      v82 = &v28[16 * v27];
      v81[2] = v16;
      v19 = (char *)(v81 + 4);
      v84 = (char *)*a6;
      v83 = (char *)a6[1];
      if (v83 != *a6)
      {
        do
        {
          *((_OWORD *)v81 - 1) = *((_OWORD *)v83 - 1);
          v81 -= 4;
          v83 -= 16;
        }
        while (v83 != v84);
        v83 = (char *)*a6;
      }
      *a6 = v81;
      a6[1] = v19;
      a6[2] = v82;
      if (v83)
        operator delete(v83);
    }
    else
    {
      *((float *)v18 + 2) = v15;
      v19 = v18 + 16;
    }
    a6[1] = v19;
    if (*(_DWORD *)(a1 + 572) == v11)
    {
      v85 = (unint64_t)a7[2];
      v79 = a7[1];
      if ((unint64_t)v79 < v85)
      {
        v80 = 8;
        goto LABEL_397;
      }
      v90 = *a7;
      v91 = v79 - *a7;
      v92 = v91 + 1;
      if ((unint64_t)(v91 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v93 = v85 - (_QWORD)v90;
      if (v93 >> 1 > v92)
        v92 = v93 >> 1;
      if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL)
        v94 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v94 = v92;
      if (v94)
      {
        v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a7 + 2), v94);
        v90 = *a7;
        v79 = a7[1];
      }
      else
      {
        v95 = 0;
      }
      v124 = &v95[4 * v91];
      v125 = &v95[4 * v94];
      *(_DWORD *)v124 = 8;
      v126 = (int *)(v124 + 4);
      while (v79 != v90)
      {
        v127 = *--v79;
        *((_DWORD *)v124 - 1) = v127;
        v124 -= 4;
      }
    }
    else if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(v14, 0))
    {
      v86 = (_OWORD *)fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(v14);
      v87 = (unint64_t)a5[2];
      v88 = a5[1];
      if ((unint64_t)v88 >= v87)
      {
        v114 = ((char *)v88 - (_BYTE *)*a5) >> 4;
        v115 = v114 + 1;
        if ((unint64_t)(v114 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v116 = v87 - (_QWORD)*a5;
        if (v116 >> 3 > v115)
          v115 = v116 >> 3;
        if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF0)
          v117 = 0xFFFFFFFFFFFFFFFLL;
        else
          v117 = v115;
        if (v117)
          v118 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v117);
        else
          v118 = 0;
        v162 = &v118[16 * v114];
        v163 = &v118[16 * v117];
        *(_OWORD *)v162 = *v86;
        v89 = v162 + 16;
        v165 = (char *)*a5;
        v164 = (char *)a5[1];
        if (v164 != *a5)
        {
          do
          {
            *((_OWORD *)v162 - 1) = *((_OWORD *)v164 - 1);
            v162 -= 16;
            v164 -= 16;
          }
          while (v164 != v165);
          v164 = (char *)*a5;
        }
        *a5 = v162;
        a5[1] = v89;
        a5[2] = v163;
        if (v164)
          operator delete(v164);
      }
      else
      {
        *v88 = *v86;
        v89 = v88 + 1;
      }
      a5[1] = v89;
      v166 = (unint64_t)a7[2];
      v79 = a7[1];
      if ((unint64_t)v79 < v166)
      {
        v80 = 10;
        goto LABEL_397;
      }
      v90 = *a7;
      v167 = v79 - *a7;
      v168 = v167 + 1;
      if ((unint64_t)(v167 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v169 = v166 - (_QWORD)v90;
      if (v169 >> 1 > v168)
        v168 = v169 >> 1;
      if ((unint64_t)v169 >= 0x7FFFFFFFFFFFFFFCLL)
        v170 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v170 = v168;
      if (v170)
      {
        v171 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a7 + 2), v170);
        v90 = *a7;
        v79 = a7[1];
      }
      else
      {
        v171 = 0;
      }
      v124 = &v171[4 * v167];
      v125 = &v171[4 * v170];
      *(_DWORD *)v124 = 10;
      v126 = (int *)(v124 + 4);
      while (v79 != v90)
      {
        v172 = *--v79;
        *((_DWORD *)v124 - 1) = v172;
        v124 -= 4;
      }
    }
    else
    {
      v96 = (unint64_t)a7[2];
      v79 = a7[1];
      if ((unint64_t)v79 < v96)
      {
        v80 = 9;
        goto LABEL_397;
      }
      v90 = *a7;
      v109 = v79 - *a7;
      v110 = v109 + 1;
      if ((unint64_t)(v109 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v111 = v96 - (_QWORD)v90;
      if (v111 >> 1 > v110)
        v110 = v111 >> 1;
      if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFFCLL)
        v112 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v112 = v110;
      if (v112)
      {
        v113 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a7 + 2), v112);
        v90 = *a7;
        v79 = a7[1];
      }
      else
      {
        v113 = 0;
      }
      v124 = &v113[4 * v109];
      v125 = &v113[4 * v112];
      *(_DWORD *)v124 = 9;
      v126 = (int *)(v124 + 4);
      while (v79 != v90)
      {
        v153 = *--v79;
        *((_DWORD *)v124 - 1) = v153;
        v124 -= 4;
      }
    }
    goto LABEL_415;
  }
  if (*(_DWORD *)(a1 + 624) <= a4 && *(_DWORD *)(a1 + 628) >= a4)
  {
    v78 = (unint64_t)a7[2];
    v79 = a7[1];
    if ((unint64_t)v79 < v78)
    {
      v80 = 1;
LABEL_397:
      *v79 = v80;
      v161 = v79 + 1;
      goto LABEL_398;
    }
    v90 = *a7;
    v104 = v79 - *a7;
    v105 = v104 + 1;
    if ((unint64_t)(v104 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v106 = v78 - (_QWORD)v90;
    if (v106 >> 1 > v105)
      v105 = v106 >> 1;
    if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL)
      v107 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v107 = v105;
    if (v107)
    {
      v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a7 + 2), v107);
      v90 = *a7;
      v79 = a7[1];
    }
    else
    {
      v108 = 0;
    }
    v124 = &v108[4 * v104];
    v125 = &v108[4 * v107];
    *(_DWORD *)v124 = 1;
    v126 = (int *)(v124 + 4);
    while (v79 != v90)
    {
      v152 = *--v79;
      *((_DWORD *)v124 - 1) = v152;
      v124 -= 4;
    }
LABEL_415:
    *a7 = (int *)v124;
    a7[1] = v126;
    a7[2] = (int *)v125;
    if (v90)
      operator delete(v90);
    goto LABEL_417;
  }
  if (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(v14, a4 + 1))
  {
    v29 = *(_DWORD *)(a1 + 44) + 1;
    if (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(v14, v29))
    {
      if (fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(v14, 0))
      {
        v97 = (_OWORD *)fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(v14);
        v98 = (unint64_t)a5[2];
        v99 = a5[1];
        if ((unint64_t)v99 >= v98)
        {
          v154 = ((char *)v99 - (_BYTE *)*a5) >> 4;
          v155 = v154 + 1;
          if ((unint64_t)(v154 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v156 = v98 - (_QWORD)*a5;
          if (v156 >> 3 > v155)
            v155 = v156 >> 3;
          if ((unint64_t)v156 >= 0x7FFFFFFFFFFFFFF0)
            v157 = 0xFFFFFFFFFFFFFFFLL;
          else
            v157 = v155;
          if (v157)
            v158 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v157);
          else
            v158 = 0;
          v192 = &v158[16 * v154];
          v193 = &v158[16 * v157];
          *(_OWORD *)v192 = *v97;
          v100 = v192 + 16;
          v195 = (char *)*a5;
          v194 = (char *)a5[1];
          if (v194 != *a5)
          {
            do
            {
              *((_OWORD *)v192 - 1) = *((_OWORD *)v194 - 1);
              v192 -= 16;
              v194 -= 16;
            }
            while (v194 != v195);
            v194 = (char *)*a5;
          }
          *a5 = v192;
          a5[1] = v100;
          a5[2] = v193;
          if (v194)
            operator delete(v194);
        }
        else
        {
          *v99 = *v97;
          v100 = v99 + 1;
        }
        a5[1] = v100;
        v196 = (unint64_t)a7[2];
        v79 = a7[1];
        if ((unint64_t)v79 < v196)
        {
          v80 = 2;
          goto LABEL_397;
        }
        v90 = *a7;
        v197 = v79 - *a7;
        v198 = v197 + 1;
        if ((unint64_t)(v197 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v199 = v196 - (_QWORD)v90;
        if (v199 >> 1 > v198)
          v198 = v199 >> 1;
        if ((unint64_t)v199 >= 0x7FFFFFFFFFFFFFFCLL)
          v200 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v200 = v198;
        if (v200)
        {
          v201 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a7 + 2), v200);
          v90 = *a7;
          v79 = a7[1];
        }
        else
        {
          v201 = 0;
        }
        v124 = &v201[4 * v197];
        v125 = &v201[4 * v200];
        *(_DWORD *)v124 = 2;
        v126 = (int *)(v124 + 4);
        while (v79 != v90)
        {
          v202 = *--v79;
          *((_DWORD *)v124 - 1) = v202;
          v124 -= 4;
        }
      }
      else if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD, __int128 *))(**(_QWORD **)(a1 + 392) + 32))(*(_QWORD *)(a1 + 392), a3, *(unsigned int *)(a1 + 552), &v271))
      {
        v128 = (unint64_t)a6[2];
        v129 = a6[1];
        if ((unint64_t)v129 >= v128)
        {
          v182 = ((char *)v129 - (_BYTE *)*a6) >> 4;
          v183 = v182 + 1;
          if ((unint64_t)(v182 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v184 = v128 - (_QWORD)*a6;
          if (v184 >> 3 > v183)
            v183 = v184 >> 3;
          if ((unint64_t)v184 >= 0x7FFFFFFFFFFFFFF0)
            v185 = 0xFFFFFFFFFFFFFFFLL;
          else
            v185 = v183;
          if (v185)
            v186 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a6 + 2), v185);
          else
            v186 = 0;
          v256 = &v186[16 * v182];
          v257 = &v186[16 * v185];
          *(_OWORD *)v256 = v271;
          v130 = v256 + 16;
          v259 = (char *)*a6;
          v258 = (char *)a6[1];
          if (v258 != *a6)
          {
            do
            {
              *((_OWORD *)v256 - 1) = *((_OWORD *)v258 - 1);
              v256 -= 16;
              v258 -= 16;
            }
            while (v258 != v259);
            v258 = (char *)*a6;
          }
          *a6 = v256;
          a6[1] = v130;
          a6[2] = v257;
          if (v258)
            operator delete(v258);
        }
        else
        {
          *v129 = v271;
          v130 = v129 + 1;
        }
        a6[1] = v130;
        v260 = (unint64_t)a7[2];
        v79 = a7[1];
        if ((unint64_t)v79 < v260)
        {
          v80 = 5;
          goto LABEL_397;
        }
        v90 = *a7;
        v261 = v79 - *a7;
        v262 = v261 + 1;
        if ((unint64_t)(v261 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v263 = v260 - (_QWORD)v90;
        if (v263 >> 1 > v262)
          v262 = v263 >> 1;
        if ((unint64_t)v263 >= 0x7FFFFFFFFFFFFFFCLL)
          v264 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v264 = v262;
        if (v264)
        {
          v265 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a7 + 2), v264);
          v90 = *a7;
          v79 = a7[1];
        }
        else
        {
          v265 = 0;
        }
        v124 = &v265[4 * v261];
        v125 = &v265[4 * v264];
        *(_DWORD *)v124 = 5;
        v126 = (int *)(v124 + 4);
        while (v79 != v90)
        {
          v267 = *--v79;
          *((_DWORD *)v124 - 1) = v267;
          v124 -= 4;
        }
      }
      else
      {
        v159 = (unint64_t)a7[2];
        v160 = a7[1];
        if ((unint64_t)v160 < v159)
        {
          *v160 = 0;
          v161 = v160 + 1;
LABEL_398:
          v126 = v161;
LABEL_417:
          a7[1] = v126;
          return;
        }
        v90 = *a7;
        v187 = v160 - *a7;
        v188 = v187 + 1;
        if ((unint64_t)(v187 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v189 = v159 - (_QWORD)v90;
        if (v189 >> 1 > v188)
          v188 = v189 >> 1;
        if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFFCLL)
          v190 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v190 = v188;
        if (v190)
        {
          v191 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a7 + 2), v190);
          v90 = *a7;
          v160 = a7[1];
        }
        else
        {
          v191 = 0;
        }
        v124 = &v191[4 * v187];
        v125 = &v191[4 * v190];
        *(_DWORD *)v124 = 0;
        v126 = (int *)(v124 + 4);
        while (v160 != v90)
        {
          v266 = *--v160;
          *((_DWORD *)v124 - 1) = v266;
          v124 -= 4;
        }
      }
      goto LABEL_415;
    }
    v268 = (uint64_t)(a7 + 2);
    while (1)
    {
      v30 = (_OWORD *)fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(v14);
      v31 = v30;
      v33 = a5[1];
      v32 = (unint64_t)a5[2];
      if ((unint64_t)v33 >= v32)
      {
        v35 = ((char *)v33 - (_BYTE *)*a5) >> 4;
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 60)
          goto LABEL_420;
        v37 = v32 - (_QWORD)*a5;
        if (v37 >> 3 > v36)
          v36 = v37 >> 3;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
          v38 = 0xFFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
          v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v38);
        else
          v39 = 0;
        v40 = &v39[16 * v35];
        *(_OWORD *)v40 = *v31;
        v42 = (char *)*a5;
        v41 = (char *)a5[1];
        v43 = v40;
        if (v41 != *a5)
        {
          do
          {
            *((_OWORD *)v43 - 1) = *((_OWORD *)v41 - 1);
            v43 -= 16;
            v41 -= 16;
          }
          while (v41 != v42);
          v41 = (char *)*a5;
        }
        v34 = v40 + 16;
        *a5 = v43;
        a5[1] = v40 + 16;
        a5[2] = &v39[16 * v38];
        if (v41)
          operator delete(v41);
      }
      else
      {
        *v33 = *v30;
        v34 = v33 + 1;
      }
      a5[1] = v34;
      if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD, __int128 *))(**(_QWORD **)(a1 + 392) + 32))(*(_QWORD *)(a1 + 392), a3, *((unsigned int *)v31 + 1), &v271))
      {
        v45 = a7[1];
        v44 = (unint64_t)a7[2];
        if ((unint64_t)v45 >= v44)
        {
          v49 = *a7;
          v50 = v45 - *a7;
          v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v52 = v44 - (_QWORD)v49;
          if (v52 >> 1 > v51)
            v51 = v52 >> 1;
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL)
            v53 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v53 = v51;
          if (v53)
          {
            v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v268, v53);
            v49 = *a7;
            v45 = a7[1];
          }
          else
          {
            v54 = 0;
          }
          v62 = &v54[4 * v50];
          *(_DWORD *)v62 = 6;
          v55 = (int *)(v62 + 4);
          while (v45 != v49)
          {
            v63 = *--v45;
            *((_DWORD *)v62 - 1) = v63;
            v62 -= 4;
          }
LABEL_81:
          *a7 = (int *)v62;
          a7[1] = v55;
          a7[2] = (int *)&v54[4 * v53];
          if (v49)
            operator delete(v49);
          goto LABEL_83;
        }
        v46 = 6;
      }
      else
      {
        v47 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, __int128 *))(**(_QWORD **)(a1 + 392) + 32))(*(_QWORD *)(a1 + 392), a3, *(unsigned int *)(a1 + 552), &v271);
        v45 = a7[1];
        v48 = (unint64_t)a7[2];
        if (v47)
        {
          if ((unint64_t)v45 >= v48)
          {
            v49 = *a7;
            v56 = v45 - *a7;
            v57 = v56 + 1;
            if ((unint64_t)(v56 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v58 = v48 - (_QWORD)v49;
            if (v58 >> 1 > v57)
              v57 = v58 >> 1;
            if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
              v53 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v53 = v57;
            if (v53)
            {
              v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v268, v53);
              v49 = *a7;
              v45 = a7[1];
            }
            else
            {
              v54 = 0;
            }
            v62 = &v54[4 * v56];
            *(_DWORD *)v62 = 7;
            v55 = (int *)(v62 + 4);
            while (v45 != v49)
            {
              v64 = *--v45;
              *((_DWORD *)v62 - 1) = v64;
              v62 -= 4;
            }
            goto LABEL_81;
          }
          v46 = 7;
        }
        else
        {
          if ((unint64_t)v45 >= v48)
          {
            v49 = *a7;
            v59 = v45 - *a7;
            v60 = v59 + 1;
            if ((unint64_t)(v59 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v61 = v48 - (_QWORD)v49;
            if (v61 >> 1 > v60)
              v60 = v61 >> 1;
            if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
              v53 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v53 = v60;
            if (v53)
            {
              v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v268, v53);
              v49 = *a7;
              v45 = a7[1];
            }
            else
            {
              v54 = 0;
            }
            v62 = &v54[4 * v59];
            *(_DWORD *)v62 = 4;
            v55 = (int *)(v62 + 4);
            while (v45 != v49)
            {
              v65 = *--v45;
              *((_DWORD *)v62 - 1) = v65;
              v62 -= 4;
            }
            goto LABEL_81;
          }
          v46 = 4;
        }
      }
      *v45 = v46;
      v55 = v45 + 1;
LABEL_83:
      a7[1] = v55;
      v67 = a6[1];
      v66 = (unint64_t)a6[2];
      if ((unint64_t)v67 >= v66)
      {
        v69 = ((char *)v67 - (_BYTE *)*a6) >> 4;
        v70 = v69 + 1;
        if ((unint64_t)(v69 + 1) >> 60)
LABEL_420:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v71 = v66 - (_QWORD)*a6;
        if (v71 >> 3 > v70)
          v70 = v71 >> 3;
        if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF0)
          v72 = 0xFFFFFFFFFFFFFFFLL;
        else
          v72 = v70;
        if (v72)
          v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a6 + 2), v72);
        else
          v73 = 0;
        v74 = &v73[16 * v69];
        *(_OWORD *)v74 = v271;
        v76 = (char *)*a6;
        v75 = (char *)a6[1];
        v77 = v74;
        if (v75 != *a6)
        {
          do
          {
            *((_OWORD *)v77 - 1) = *((_OWORD *)v75 - 1);
            v77 -= 16;
            v75 -= 16;
          }
          while (v75 != v76);
          v75 = (char *)*a6;
        }
        v68 = v74 + 16;
        *a6 = v77;
        a6[1] = v74 + 16;
        a6[2] = &v73[16 * v72];
        if (v75)
          operator delete(v75);
      }
      else
      {
        *v67 = v271;
        v68 = v67 + 1;
      }
      a6[1] = v68;
      if (!fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Find(v14, ++v29))
        return;
    }
  }
  v20 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Value(v14);
  if (*(_DWORD *)(v20 + 4))
  {
    v21 = (unint64_t)a5[2];
    v22 = a5[1];
    if ((unint64_t)v22 >= v21)
    {
      v119 = ((char *)v22 - (_BYTE *)*a5) >> 4;
      v120 = v119 + 1;
      if ((unint64_t)(v119 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v121 = v21 - (_QWORD)*a5;
      if (v121 >> 3 > v120)
        v120 = v121 >> 3;
      if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF0)
        v122 = 0xFFFFFFFFFFFFFFFLL;
      else
        v122 = v120;
      if (v122)
        v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v122);
      else
        v123 = 0;
      v173 = &v123[16 * v119];
      v174 = &v123[16 * v122];
      *(_OWORD *)v173 = *(_OWORD *)v20;
      v23 = (unsigned int *)(v173 + 16);
      v176 = (char *)*a5;
      v175 = (char *)a5[1];
      if (v175 != *a5)
      {
        do
        {
          *((_OWORD *)v173 - 1) = *((_OWORD *)v175 - 1);
          v173 -= 16;
          v175 -= 16;
        }
        while (v175 != v176);
        v175 = (char *)*a5;
      }
      *a5 = v173;
      a5[1] = v23;
      a5[2] = v174;
      if (v175)
        operator delete(v175);
    }
    else
    {
      *v22 = *(_OWORD *)v20;
      v23 = (unsigned int *)(v22 + 1);
    }
    a5[1] = v23;
LABEL_323:
    v221 = (unsigned int *)*a5;
    if (*a5 == v23)
      return;
    while (1)
    {
      if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD, __int128 *))(**(_QWORD **)(a1 + 392) + 32))(*(_QWORD *)(a1 + 392), a3, v221[1], &v271))
      {
        v223 = a7[1];
        v222 = (unint64_t)a7[2];
        if ((unint64_t)v223 >= v222)
        {
          v227 = *a7;
          v228 = v223 - *a7;
          v229 = v228 + 1;
          if ((unint64_t)(v228 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v230 = v222 - (_QWORD)v227;
          if (v230 >> 1 > v229)
            v229 = v230 >> 1;
          if ((unint64_t)v230 >= 0x7FFFFFFFFFFFFFFCLL)
            v231 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v231 = v229;
          if (v231)
          {
            v232 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a7 + 2), v231);
            v227 = *a7;
            v223 = a7[1];
          }
          else
          {
            v232 = 0;
          }
          v240 = &v232[4 * v228];
          *(_DWORD *)v240 = 6;
          v233 = (int *)(v240 + 4);
          while (v223 != v227)
          {
            v241 = *--v223;
            *((_DWORD *)v240 - 1) = v241;
            v240 -= 4;
          }
LABEL_369:
          *a7 = (int *)v240;
          a7[1] = v233;
          a7[2] = (int *)&v232[4 * v231];
          if (v227)
            operator delete(v227);
          goto LABEL_371;
        }
        v224 = 6;
      }
      else
      {
        v225 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, __int128 *))(**(_QWORD **)(a1 + 392) + 32))(*(_QWORD *)(a1 + 392), a3, *(unsigned int *)(a1 + 552), &v271);
        v223 = a7[1];
        v226 = (unint64_t)a7[2];
        if (v225)
        {
          if ((unint64_t)v223 >= v226)
          {
            v227 = *a7;
            v234 = v223 - *a7;
            v235 = v234 + 1;
            if ((unint64_t)(v234 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v236 = v226 - (_QWORD)v227;
            if (v236 >> 1 > v235)
              v235 = v236 >> 1;
            if ((unint64_t)v236 >= 0x7FFFFFFFFFFFFFFCLL)
              v231 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v231 = v235;
            if (v231)
            {
              v232 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a7 + 2), v231);
              v227 = *a7;
              v223 = a7[1];
            }
            else
            {
              v232 = 0;
            }
            v240 = &v232[4 * v234];
            *(_DWORD *)v240 = 7;
            v233 = (int *)(v240 + 4);
            while (v223 != v227)
            {
              v242 = *--v223;
              *((_DWORD *)v240 - 1) = v242;
              v240 -= 4;
            }
            goto LABEL_369;
          }
          v224 = 7;
        }
        else
        {
          if ((unint64_t)v223 >= v226)
          {
            v227 = *a7;
            v237 = v223 - *a7;
            v238 = v237 + 1;
            if ((unint64_t)(v237 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v239 = v226 - (_QWORD)v227;
            if (v239 >> 1 > v238)
              v238 = v239 >> 1;
            if ((unint64_t)v239 >= 0x7FFFFFFFFFFFFFFCLL)
              v231 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v231 = v238;
            if (v231)
            {
              v232 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a7 + 2), v231);
              v227 = *a7;
              v223 = a7[1];
            }
            else
            {
              v232 = 0;
            }
            v240 = &v232[4 * v237];
            *(_DWORD *)v240 = 4;
            v233 = (int *)(v240 + 4);
            while (v223 != v227)
            {
              v243 = *--v223;
              *((_DWORD *)v240 - 1) = v243;
              v240 -= 4;
            }
            goto LABEL_369;
          }
          v224 = 4;
        }
      }
      *v223 = v224;
      v233 = v223 + 1;
LABEL_371:
      a7[1] = v233;
      v245 = a6[1];
      v244 = (unint64_t)a6[2];
      if ((unint64_t)v245 >= v244)
      {
        v247 = ((char *)v245 - (_BYTE *)*a6) >> 4;
        v248 = v247 + 1;
        if ((unint64_t)(v247 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v249 = v244 - (_QWORD)*a6;
        if (v249 >> 3 > v248)
          v248 = v249 >> 3;
        if ((unint64_t)v249 >= 0x7FFFFFFFFFFFFFF0)
          v250 = 0xFFFFFFFFFFFFFFFLL;
        else
          v250 = v248;
        if (v250)
          v251 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a6 + 2), v250);
        else
          v251 = 0;
        v252 = &v251[16 * v247];
        *(_OWORD *)v252 = v271;
        v254 = (char *)*a6;
        v253 = (char *)a6[1];
        v255 = v252;
        if (v253 != *a6)
        {
          do
          {
            *((_OWORD *)v255 - 1) = *((_OWORD *)v253 - 1);
            v255 -= 16;
            v253 -= 16;
          }
          while (v253 != v254);
          v253 = (char *)*a6;
        }
        v246 = v252 + 16;
        *a6 = v255;
        a6[1] = v252 + 16;
        a6[2] = &v251[16 * v250];
        if (v253)
          operator delete(v253);
      }
      else
      {
        *v245 = v271;
        v246 = v245 + 1;
      }
      a6[1] = v246;
      v221 += 4;
      if (v221 == v23)
        return;
    }
  }
  v101 = *(_QWORD *)(a1 + 400);
  v102 = *(unsigned int *)(v20 + 12);
  v274 = 0;
  (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v101 + 136))(v101, v102, &v271);
  if ((_QWORD)v271)
    v103 = (int *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v271 + 32))(v271);
  else
    v103 = (int *)(*((_QWORD *)&v271 + 1) + 16 * v274);
  v270 = *v103;
  v269 = *(_DWORD *)(a1 + 44);
  if (*v103 > v269)
  {
    while (1)
    {
      if ((_QWORD)v271)
      {
        if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v271 + 24))(v271) & 1) != 0)
          goto LABEL_317;
        if ((_QWORD)v271)
        {
          v131 = (_OWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v271 + 32))(v271);
          goto LABEL_177;
        }
      }
      else if (v274 >= v272)
      {
        goto LABEL_317;
      }
      v131 = (_OWORD *)(*((_QWORD *)&v271 + 1) + 16 * v274);
LABEL_177:
      v133 = a5[1];
      v132 = (unint64_t)a5[2];
      if ((unint64_t)v133 >= v132)
      {
        v135 = ((char *)v133 - (_BYTE *)*a5) >> 4;
        v136 = v135 + 1;
        if ((unint64_t)(v135 + 1) >> 60)
          goto LABEL_423;
        v137 = v132 - (_QWORD)*a5;
        if (v137 >> 3 > v136)
          v136 = v137 >> 3;
        if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF0)
          v138 = 0xFFFFFFFFFFFFFFFLL;
        else
          v138 = v136;
        if (v138)
          v139 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v138);
        else
          v139 = 0;
        v140 = &v139[16 * v135];
        *(_OWORD *)v140 = *v131;
        v142 = (char *)*a5;
        v141 = (char *)a5[1];
        v143 = v140;
        if (v141 != *a5)
        {
          do
          {
            *((_OWORD *)v143 - 1) = *((_OWORD *)v141 - 1);
            v143 -= 16;
            v141 -= 16;
          }
          while (v141 != v142);
          v141 = (char *)*a5;
        }
        v134 = v140 + 16;
        *a5 = v143;
        a5[1] = v140 + 16;
        a5[2] = &v139[16 * v138];
        if (v141)
          operator delete(v141);
      }
      else
      {
        *v133 = *v131;
        v134 = v133 + 1;
      }
      a5[1] = v134;
      v144 = *(float *)(v20 + 8);
      v145 = NAN;
      if (v144 != -INFINITY)
      {
        v146 = *((float *)v134 - 2);
        v145 = NAN;
        if (v146 != -INFINITY)
        {
          v145 = INFINITY;
          v147 = v146 == INFINITY || v144 == INFINITY;
          v148 = v144 + v146;
          if (!v147)
            v145 = v148;
        }
      }
      *((float *)v134 - 2) = v145;
      if ((_QWORD)v271)
        (*(void (**)(_QWORD))(*(_QWORD *)v271 + 40))(v271);
      else
        ++v274;
    }
  }
  v149 = (unint64_t)a5[2];
  v150 = a5[1];
  if ((unint64_t)v150 >= v149)
  {
    v177 = ((char *)v150 - (_BYTE *)*a5) >> 4;
    v178 = v177 + 1;
    if ((unint64_t)(v177 + 1) >> 60)
LABEL_423:
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v179 = v149 - (_QWORD)*a5;
    if (v179 >> 3 > v178)
      v178 = v179 >> 3;
    if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFF0)
      v180 = 0xFFFFFFFFFFFFFFFLL;
    else
      v180 = v178;
    if (v180)
      v181 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v180);
    else
      v181 = 0;
    v203 = &v181[16 * v177];
    v204 = &v181[16 * v180];
    *(_OWORD *)v203 = *(_OWORD *)v20;
    v151 = v203 + 16;
    v206 = (char *)*a5;
    v205 = (char *)a5[1];
    if (v205 != *a5)
    {
      do
      {
        *((_OWORD *)v203 - 1) = *((_OWORD *)v205 - 1);
        v203 -= 16;
        v205 -= 16;
      }
      while (v205 != v206);
      v205 = (char *)*a5;
    }
    *a5 = v203;
    a5[1] = v151;
    a5[2] = v204;
    if (v205)
      operator delete(v205);
  }
  else
  {
    *v150 = *(_OWORD *)v20;
    v151 = v150 + 1;
  }
  a5[1] = v151;
  v207 = (unint64_t)a7[2];
  v208 = a7[1];
  if ((unint64_t)v208 >= v207)
  {
    v210 = *a7;
    v211 = v208 - *a7;
    v212 = v211 + 1;
    if ((unint64_t)(v211 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v213 = v207 - (_QWORD)v210;
    if (v213 >> 1 > v212)
      v212 = v213 >> 1;
    if ((unint64_t)v213 >= 0x7FFFFFFFFFFFFFFCLL)
      v214 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v214 = v212;
    if (v214)
    {
      v215 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a7 + 2), v214);
      v210 = *a7;
      v208 = a7[1];
    }
    else
    {
      v215 = 0;
    }
    v216 = (int *)&v215[4 * v211];
    v217 = (int *)&v215[4 * v214];
    *v216 = 3;
    v209 = v216 + 1;
    while (v208 != v210)
    {
      v218 = *--v208;
      *--v216 = v218;
    }
    *a7 = v216;
    a7[1] = v209;
    a7[2] = v217;
    if (v210)
      operator delete(v210);
  }
  else
  {
    *v208 = 3;
    v209 = v208 + 1;
  }
  a7[1] = v209;
LABEL_317:
  if ((_QWORD)v271)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v271 + 8))(v271);
    v219 = v270;
    v220 = v269;
  }
  else
  {
    v219 = v270;
    v220 = v269;
    if (v273)
      --*v273;
  }
  if (v219 > v220)
  {
    v23 = (unsigned int *)a5[1];
    goto LABEL_323;
  }
}

void sub_1ADF81A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  void *v17;

  v17 = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)(v15 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<kaldi::quasar::LmScoreState>::emplace_back<double &,double &,int &,int &,double &,int &>(void **a1, double *a2, double *a3, int *a4, int *a5, double *a6, int *a7)
{
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  unint64_t v17;
  float v18;
  float v19;
  int v20;
  int v21;
  float v22;
  int v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  float *v30;
  uint64_t v31;
  char *v32;
  float v33;
  float v34;
  int v35;
  int v36;
  float v37;
  int v38;
  char *v39;
  char *v40;
  __int128 v41;

  v16 = a1[2];
  v14 = (uint64_t)(a1 + 2);
  v15 = v16;
  v17 = *(_QWORD *)(v14 - 8);
  if (v17 >= (unint64_t)v16)
  {
    v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (_QWORD)*a1) >> 3);
    v26 = v25 + 1;
    if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v27 = 0xAAAAAAAAAAAAAAABLL * ((v15 - (_BYTE *)*a1) >> 3);
    if (2 * v27 > v26)
      v26 = 2 * v27;
    if (v27 >= 0x555555555555555)
      v28 = 0xAAAAAAAAAAAAAAALL;
    else
      v28 = v26;
    v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v14, v28);
    v30 = (float *)&v29[24 * v25];
    v32 = &v29[24 * v31];
    v33 = *a2;
    v34 = *a3;
    v35 = *a4;
    v36 = *a5;
    v37 = *a6;
    v38 = *a7;
    *v30 = v33;
    v30[1] = v34;
    *((_DWORD *)v30 + 2) = v35;
    *((_DWORD *)v30 + 3) = v36;
    v30[4] = v37;
    *((_DWORD *)v30 + 5) = v38;
    v24 = (char *)(v30 + 6);
    v40 = (char *)*a1;
    v39 = (char *)a1[1];
    if (v39 != *a1)
    {
      do
      {
        v41 = *(_OWORD *)(v39 - 24);
        *((_QWORD *)v30 - 1) = *((_QWORD *)v39 - 1);
        *(_OWORD *)(v30 - 6) = v41;
        v30 -= 6;
        v39 -= 24;
      }
      while (v39 != v40);
      v39 = (char *)*a1;
    }
    *a1 = v30;
    a1[1] = v24;
    a1[2] = v32;
    if (v39)
      operator delete(v39);
  }
  else
  {
    v18 = *a2;
    v19 = *a3;
    v20 = *a4;
    v21 = *a5;
    v22 = *a6;
    v23 = *a7;
    *(float *)v17 = v18;
    *(float *)(v17 + 4) = v19;
    *(_DWORD *)(v17 + 8) = v20;
    *(_DWORD *)(v17 + 12) = v21;
    *(float *)(v17 + 16) = v22;
    *(_DWORD *)(v17 + 20) = v23;
    v24 = (char *)(v17 + 24);
  }
  a1[1] = v24;
  return v24 - 24;
}

void *std::get_temporary_buffer[abi:ne180100]<kaldi::quasar::LmScoreState>(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0x555555555555555)
    v1 = 0x555555555555555;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
  while (1)
  {
    result = operator new(24 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

__n128 std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(BOOL,std::vector<float> &,std::vector<float> &,std::vector<int> &)::$_0 &,std::__wrap_iter<kaldi::quasar::LmScoreState *>>(__n128 *a1, __n128 *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  __n128 *v7;
  __n128 *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int32 *v12;
  uint64_t v13;
  __n128 *v14;
  unsigned __int32 *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  __n128 *v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  __n128 *v26;
  __n128 *v27;
  unint64_t v28;
  __n128 *v29;
  uint64_t v30;
  __n128 *v31;
  __n128 v32;
  unsigned __int32 v33;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      v8 = (__n128 *)((char *)a2 - 24);
      result.n128_u32[0] = a2[-2].n128_u32[2];
      if (result.n128_f32[0] > a1->n128_f32[0])
      {
        v9 = a1[1].n128_u64[0];
        result = *a1;
        v10 = a2[-1].n128_u64[1];
        *a1 = *v8;
        a1[1].n128_u64[0] = v10;
        *v8 = result;
        a2[-1].n128_u64[1] = v9;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v20 = a4;
      v21 = a3 >> 1;
      v22 = (__n128 *)((char *)a1 + 24 * (a3 >> 1));
      v23 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v24 = std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(BOOL,std::vector<float> &,std::vector<float> &,std::vector<int> &)::$_0 &,std::__wrap_iter<kaldi::quasar::LmScoreState *>>(a1, v22, v23, a4, result);
        v25 = v20 + 24 * v21;
        result.n128_u64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(BOOL,std::vector<float> &,std::vector<float> &,std::vector<int> &)::$_0 &,std::__wrap_iter<kaldi::quasar::LmScoreState *>>((__n128 *)((char *)v7 + 24 * (a3 >> 1)), a2, a3 - (a3 >> 1), v25, v24).n128_u64[0];
        v26 = (__n128 *)(v20 + 24 * a3);
        v27 = (__n128 *)v25;
        while (v27 != v26)
        {
          if (v27->n128_f32[0] <= *(float *)v20)
          {
            result = *(__n128 *)v20;
            v7[1].n128_u64[0] = *(_QWORD *)(v20 + 16);
            *v7 = result;
            v20 += 24;
          }
          else
          {
            result = *v27;
            v7[1].n128_u64[0] = v27[1].n128_u64[0];
            *v7 = result;
            v27 = (__n128 *)((char *)v27 + 24);
          }
          v7 = (__n128 *)((char *)v7 + 24);
          if (v20 == v25)
          {
            if (v27 != v26)
            {
              v28 = 0;
              do
              {
                v29 = (__n128 *)((char *)v7 + v28);
                result = *(__n128 *)((char *)v27 + v28);
                v29[1].n128_u64[0] = v27[1].n128_u64[v28 / 8];
                *v29 = result;
                v28 += 24;
              }
              while ((__n128 *)((char *)v27 + v28) != v26);
            }
            return result;
          }
        }
        if (v20 != v25)
        {
          v30 = 0;
          do
          {
            v31 = (__n128 *)((char *)v7 + v30);
            result = *(__n128 *)(v20 + v30);
            v31[1].n128_u64[0] = *(_QWORD *)(v20 + v30 + 16);
            *v31 = result;
            v30 += 24;
          }
          while (v20 + v30 != v25);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(BOOL,std::vector<float> &,std::vector<float> &,std::vector<int> &)::$_0 &,std::__wrap_iter<kaldi::quasar::LmScoreState *>>(a1, v22, v23, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(BOOL,std::vector<float> &,std::vector<float> &,std::vector<int> &)::$_0 &,std::__wrap_iter<kaldi::quasar::LmScoreState *>>((char *)v7 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), v20, a5);
        std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(BOOL,std::vector<float> &,std::vector<float> &,std::vector<int> &)::$_0 &,std::__wrap_iter<kaldi::quasar::LmScoreState *>>((char *)v7, (char *)v7 + 24 * (a3 >> 1), (__int128 *)a2, a3 >> 1, a3 - (a3 >> 1), (char *)v20, a5);
      }
    }
    else if (a1 != a2)
    {
      v12 = &a1[1].n128_u32[2];
      if (&a1[1].n128_i8[8] != (__int8 *)a2)
      {
        v13 = 0;
        v14 = a1;
        do
        {
          v15 = v12;
          result.n128_u32[0] = *v12;
          if (*(float *)v12 > v14->n128_f32[0])
          {
            v32 = *(__n128 *)((char *)v14 + 28);
            v33 = v14[2].n128_u32[3];
            v16 = v13;
            while (1)
            {
              v17 = (char *)a1 + v16;
              *(__n128 *)(v17 + 24) = *(__n128 *)((char *)a1 + v16);
              *((_QWORD *)v17 + 5) = *(unint64_t *)((char *)a1[1].n128_u64 + v16);
              if (!v16)
                break;
              v16 -= 24;
              if (result.n128_f32[0] <= *((float *)v17 - 6))
              {
                v18 = (uint64_t)&a1[1].n128_i64[1] + v16;
                goto LABEL_15;
              }
            }
            v18 = (uint64_t)a1;
LABEL_15:
            *(_DWORD *)v18 = result.n128_u32[0];
            result = v32;
            *(__n128 *)(v18 + 4) = v32;
            *(_DWORD *)(v18 + 20) = v33;
          }
          v12 = v15 + 6;
          v13 += 24;
          v14 = (__n128 *)v15;
        }
        while (v15 + 6 != (unsigned __int32 *)a2);
      }
    }
  }
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(BOOL,std::vector<float> &,std::vector<float> &,std::vector<int> &)::$_0 &,std::__wrap_iter<kaldi::quasar::LmScoreState *>>(__n128 *a1, __n128 *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  __n128 *v5;
  __n128 *v8;
  __n128 *v9;
  __n128 v10;
  unint64_t v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  __n128 *v20;
  __n128 *v21;
  unint64_t v22;
  __n128 *v23;
  unint64_t v24;
  __n128 *v25;

  if (a3)
  {
    v5 = (__n128 *)a4;
    v8 = a1;
    if (a3 == 2)
    {
      v9 = (__n128 *)((char *)a2 - 24);
      if (a2[-2].n128_f32[2] <= a1->n128_f32[0])
      {
        v19 = *a1;
        *(_QWORD *)(a4 + 16) = a1[1].n128_u64[0];
        *(__n128 *)a4 = v19;
        result = *v9;
        v11 = a2[-1].n128_u64[1];
      }
      else
      {
        v10 = *v9;
        *(_QWORD *)(a4 + 16) = a2[-1].n128_u64[1];
        *(__n128 *)a4 = v10;
        result = *a1;
        v11 = a1[1].n128_u64[0];
      }
      *(_QWORD *)(a4 + 40) = v11;
      *(__n128 *)(a4 + 24) = result;
    }
    else if (a3 == 1)
    {
      result = *a1;
      *(_QWORD *)(a4 + 16) = a1[1].n128_u64[0];
      *(__n128 *)a4 = result;
    }
    else if ((uint64_t)a3 > 8)
    {
      v20 = (__n128 *)((char *)a1 + 24 * (a3 >> 1));
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(BOOL,std::vector<float> &,std::vector<float> &,std::vector<int> &)::$_0 &,std::__wrap_iter<kaldi::quasar::LmScoreState *>>(a1, v20, a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(BOOL,std::vector<float> &,std::vector<float> &,std::vector<int> &)::$_0 &,std::__wrap_iter<kaldi::quasar::LmScoreState *>>((char *)v8 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), (char *)v5 + 24 * (a3 >> 1), a3 - (a3 >> 1));
      v21 = (__n128 *)((char *)v8 + 24 * (a3 >> 1));
      while (v21 != a2)
      {
        if (v21->n128_f32[0] <= v8->n128_f32[0])
        {
          result = *v8;
          v5[1].n128_u64[0] = v8[1].n128_u64[0];
          *v5 = result;
          v8 = (__n128 *)((char *)v8 + 24);
        }
        else
        {
          result = *v21;
          v5[1].n128_u64[0] = v21[1].n128_u64[0];
          *v5 = result;
          v21 = (__n128 *)((char *)v21 + 24);
        }
        v5 = (__n128 *)((char *)v5 + 24);
        if (v8 == v20)
        {
          if (v21 != a2)
          {
            v22 = 0;
            do
            {
              v23 = (__n128 *)((char *)v5 + v22);
              result = *(__n128 *)((char *)v21 + v22);
              v23[1].n128_u64[0] = v21[1].n128_u64[v22 / 8];
              *v23 = result;
              v22 += 24;
            }
            while ((__n128 *)((char *)v21 + v22) != a2);
          }
          return result;
        }
      }
      if (v8 != v20)
      {
        v24 = 0;
        do
        {
          v25 = (__n128 *)((char *)v5 + v24);
          result = *(__n128 *)((char *)v8 + v24);
          v25[1].n128_u64[0] = v8[1].n128_u64[v24 / 8];
          *v25 = result;
          v24 += 24;
        }
        while ((__n128 *)((char *)v8 + v24) != v20);
      }
    }
    else if (a1 != a2)
    {
      result = *a1;
      *(_QWORD *)(a4 + 16) = a1[1].n128_u64[0];
      *(__n128 *)a4 = result;
      v12 = (__n128 *)((char *)a1 + 24);
      if (&a1[1].n128_i8[8] != (__int8 *)a2)
      {
        v13 = 0;
        v14 = a4;
        do
        {
          v15 = v14;
          v16 = *(float *)v14;
          v14 += 24;
          v17 = v14;
          if (v12->n128_f32[0] > v16)
          {
            *(_OWORD *)v14 = *(_OWORD *)v15;
            *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
            v17 = a4;
            if (v15 != a4)
            {
              v18 = v13;
              while (1)
              {
                v17 = a4 + v18;
                if (v12->n128_f32[0] <= *(float *)(a4 + v18 - 24))
                  break;
                *(_OWORD *)v17 = *(_OWORD *)(a4 + v18 - 24);
                *(_QWORD *)(v17 + 16) = *(_QWORD *)(a4 + v18 - 8);
                v18 -= 24;
                if (!v18)
                {
                  v17 = a4;
                  break;
                }
              }
            }
          }
          result = *v12;
          *(_QWORD *)(v17 + 16) = v12[1].n128_u64[0];
          *(__n128 *)v17 = result;
          v12 = (__n128 *)((char *)v12 + 24);
          v13 += 24;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

char *std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(BOOL,std::vector<float> &,std::vector<float> &,std::vector<int> &)::$_0 &,std::__wrap_iter<kaldi::quasar::LmScoreState *>>(char *result, char *a2, __int128 *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  float *v22;
  char *v23;
  float v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float *v28;
  __int128 *v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  __int128 *v33;
  uint64_t v34;
  __int128 *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __int128 v41;
  float *v42;
  uint64_t v43;
  float v44;
  float v45;
  BOOL v46;
  char *v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  __int128 v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  char *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  __int128 *v61;
  char *__src;
  __int128 v63;
  uint64_t v64;

  if (a5)
  {
    v9 = a5;
    v11 = result;
    while (v9 > a7 && a4 > a7)
    {
      if (!a4)
        return result;
      v12 = 0;
      v13 = -a4;
      while (*(float *)a2 <= *(float *)&v11[v12])
      {
        v12 += 24;
        if (__CFADD__(v13++, 1))
          return result;
      }
      v15 = -v13;
      v61 = a3;
      __src = a6;
      v60 = a7;
      if (-v13 >= v9)
      {
        if (v13 == -1)
        {
          v55 = &v11[v12];
          v64 = *(_QWORD *)&v11[v12 + 16];
          v63 = *(_OWORD *)&v11[v12];
          v56 = *(_OWORD *)a2;
          *((_QWORD *)v55 + 2) = *((_QWORD *)a2 + 2);
          *(_OWORD *)v55 = v56;
          *(_OWORD *)a2 = v63;
          *((_QWORD *)a2 + 2) = v64;
          return result;
        }
        if (v13 > 0)
          v15 = 1 - v13;
        v25 = v15 >> 1;
        v19 = &v11[24 * (v15 >> 1) + v12];
        v18 = (__int128 *)a2;
        if (a2 != (char *)a3)
        {
          v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - a2) >> 3);
          v18 = (__int128 *)a2;
          do
          {
            v27 = v26 >> 1;
            v28 = (float *)v18 + 6 * (v26 >> 1);
            v30 = *v28;
            v29 = (__int128 *)(v28 + 6);
            v26 += ~(v26 >> 1);
            if (v30 > *(float *)v19)
              v18 = v29;
            else
              v26 = v27;
          }
          while (v26);
        }
        v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v18 - a2) >> 3);
      }
      else
      {
        if (v9 >= 0)
          v16 = v9;
        else
          v16 = v9 + 1;
        v17 = v16 >> 1;
        v18 = (__int128 *)&a2[24 * (v16 >> 1)];
        v19 = a2;
        if (a2 - v11 != v12)
        {
          v20 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v11 - v12) >> 3);
          v19 = &v11[v12];
          do
          {
            v21 = v20 >> 1;
            v22 = (float *)&v19[24 * (v20 >> 1)];
            v24 = *v22;
            v23 = (char *)(v22 + 6);
            v20 += ~(v20 >> 1);
            if (*(float *)v18 > v24)
              v20 = v21;
            else
              v19 = v23;
          }
          while (v20);
        }
        v25 = 0xAAAAAAAAAAAAAAABLL * ((v19 - v11 - v12) >> 3);
      }
      a4 = -v25 - v13;
      v31 = v9 - v17;
      v32 = v25;
      v33 = std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::LmScoreState *>,std::__wrap_iter<kaldi::quasar::LmScoreState *>>(v19, (__int128 *)a2, v18);
      v34 = v32;
      v35 = v33;
      if (v34 + v17 >= v9 - (v34 + v17) - v13)
      {
        v38 = v34;
        result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(BOOL,std::vector<float> &,std::vector<float> &,std::vector<int> &)::$_0 &,std::__wrap_iter<kaldi::quasar::LmScoreState *>>(v33, v18, v61, a4, v31, __src, v60);
        a2 = v19;
        a7 = v60;
        v31 = v17;
        a6 = __src;
        a4 = v38;
        a3 = v35;
        v11 += v12;
      }
      else
      {
        v36 = v19;
        v37 = v17;
        a6 = __src;
        a7 = v60;
        result = (char *)std::__inplace_merge<std::_ClassicAlgPolicy,kaldi::quasar::SeevaBeamSearchBigLm::UpdateBeamScore(BOOL,std::vector<float> &,std::vector<float> &,std::vector<int> &)::$_0 &,std::__wrap_iter<kaldi::quasar::LmScoreState *>>(&v11[v12], v36, v33, v34, v37, __src, v60);
        v11 = (char *)v35;
        a2 = (char *)v18;
        a3 = v61;
      }
      v9 = v31;
      if (!v31)
        return result;
    }
    if (a4 <= v9)
    {
      if (v11 != a2)
      {
        v49 = 0;
        do
        {
          v50 = &a6[v49];
          v51 = *(_OWORD *)&v11[v49];
          *((_QWORD *)v50 + 2) = *(_QWORD *)&v11[v49 + 16];
          *(_OWORD *)v50 = v51;
          v49 += 24;
        }
        while (&v11[v49] != a2);
        if (v49)
        {
          v52 = a6;
          while (a2 != (char *)a3)
          {
            if (*(float *)a2 <= *(float *)v52)
            {
              v54 = *(_OWORD *)v52;
              *((_QWORD *)v11 + 2) = *((_QWORD *)v52 + 2);
              *(_OWORD *)v11 = v54;
              v52 += 24;
            }
            else
            {
              v53 = *(_OWORD *)a2;
              *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
              *(_OWORD *)v11 = v53;
              a2 += 24;
            }
            v11 += 24;
            if (&a6[v49] == v52)
              return result;
          }
          return (char *)memmove(v11, v52, a6 - v52 + v49);
        }
      }
    }
    else if (a3 != (__int128 *)a2)
    {
      v39 = 0;
      do
      {
        v40 = &a6[v39];
        v41 = *(_OWORD *)&a2[v39];
        *((_QWORD *)v40 + 2) = *(_QWORD *)&a2[v39 + 16];
        *(_OWORD *)v40 = v41;
        v39 += 24;
      }
      while (&a2[v39] != (char *)a3);
      if (v39)
      {
        v42 = (float *)&a6[v39];
        v43 = (uint64_t)a3 - 24;
        while (a2 != v11)
        {
          v44 = *(v42 - 6);
          v45 = *((float *)a2 - 6);
          v46 = v44 <= v45;
          if (v44 <= v45)
            v47 = (char *)(v42 - 6);
          else
            v47 = a2 - 24;
          if (v44 > v45)
            a2 -= 24;
          v48 = *(_OWORD *)v47;
          if (v46)
            v42 -= 6;
          *(_QWORD *)(v43 + 16) = *((_QWORD *)v47 + 2);
          *(_OWORD *)v43 = v48;
          v43 -= 24;
          if (v42 == (float *)a6)
            return result;
        }
        v57 = 0;
        do
        {
          v58 = v43 + v57 * 4;
          v59 = *(_OWORD *)&v42[v57 - 6];
          *(_QWORD *)(v58 + 16) = *(_QWORD *)&v42[v57 - 2];
          *(_OWORD *)v58 = v59;
          v57 -= 6;
        }
        while (&v42[v57] != (float *)a6);
      }
    }
  }
  return result;
}

__int128 *std::__rotate[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::LmScoreState *>,std::__wrap_iter<kaldi::quasar::LmScoreState *>>(char *__src, __int128 *a2, __int128 *a3)
{
  __int128 *v4;
  int64_t v6;
  size_t v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a3;
  if (__src != (char *)a2)
  {
    if (a2 == a3)
    {
      return (__int128 *)__src;
    }
    else if (__src + 24 == (char *)a2)
    {
      v9 = *(_OWORD *)__src;
      v11 = *((_QWORD *)__src + 2);
      v6 = (char *)a3 - (char *)a2;
      memmove(__src, a2, (char *)a3 - (char *)a2);
      v4 = (__int128 *)&__src[v6];
      *v4 = v9;
      *((_QWORD *)v4 + 2) = v11;
    }
    else if ((__int128 *)((char *)a2 + 24) == a3)
    {
      v4 = (__int128 *)(__src + 24);
      v10 = *(__int128 *)((char *)a3 - 24);
      v12 = *((_QWORD *)a3 - 1);
      v7 = (char *)a3 - 24 - __src;
      if ((char *)a3 - 24 != __src)
        memmove(__src + 24, __src, v7);
      *(_OWORD *)__src = v10;
      *((_QWORD *)__src + 2) = v12;
    }
    else
    {
      return std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::LmScoreState *>>((__int128 *)__src, a2, a3);
    }
  }
  return v4;
}

__int128 *std::__rotate_gcd[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<kaldi::quasar::LmScoreState *>>(__int128 *a1, __int128 *a2, __int128 *a3)
{
  unint64_t v3;
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  __int128 *v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  unint64_t v20;
  BOOL v21;
  char v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v26;
  uint64_t v27;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 3);
  if (v3 == 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)a2) >> 3))
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = (__int128 *)((char *)a1 + 24);
      v5 = (__int128 *)((char *)a2 + 24);
      do
      {
        v6 = *((_QWORD *)v4 - 1);
        v7 = *(__int128 *)((char *)v4 - 24);
        v8 = *((_QWORD *)v5 - 1);
        *(__int128 *)((char *)v4 - 24) = *(__int128 *)((char *)v5 - 24);
        *((_QWORD *)v4 - 1) = v8;
        *(__int128 *)((char *)v5 - 24) = v7;
        *((_QWORD *)v5 - 1) = v6;
        if (v4 == a2)
          break;
        v4 = (__int128 *)((char *)v4 + 24);
        v9 = v5 == a3;
        v5 = (__int128 *)((char *)v5 + 24);
      }
      while (!v9);
    }
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)a2) >> 3);
    v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 3);
    do
    {
      v12 = v11;
      v11 = v10;
      v10 = v12 % v10;
    }
    while (v10);
    if (v11)
    {
      v13 = (__int128 *)((char *)a1 + 24 * v11);
      do
      {
        v14 = *(__int128 *)((char *)v13 - 24);
        v15 = *((_QWORD *)v13 - 1);
        v13 = (__int128 *)((char *)v13 - 24);
        v26 = v14;
        v27 = v15;
        v16 = (__int128 *)((char *)v13 + 8 * (((char *)a2 - (char *)a1) >> 3));
        v17 = v13;
        do
        {
          v18 = v16;
          v19 = *v16;
          *((_QWORD *)v17 + 2) = *((_QWORD *)v16 + 2);
          *v17 = v19;
          v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)v16) >> 3);
          v16 = (__int128 *)((char *)v16 + 8 * (((char *)a2 - (char *)a1) >> 3));
          v21 = __OFSUB__(v3, v20);
          v23 = v3 - v20;
          v22 = (v23 < 0) ^ v21;
          v24 = (__int128 *)((char *)a1 + 24 * v23);
          if (!v22)
            v16 = v24;
          v17 = v18;
        }
        while (v16 != v13);
        *((_QWORD *)v18 + 2) = v27;
        *v18 = v26;
      }
      while (v13 != a1);
    }
    return (__int128 *)((char *)a1 + 8 * (((char *)a3 - (char *)a2) >> 3));
  }
  return a2;
}

uint64_t std::vector<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb>::__emplace_back_slow_path<int const&>(uint64_t *a1, int *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb *v14;
  kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb *)&v10[48 * v4];
  v15 = v14;
  v16 = &v10[48 * v9];
  kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb::Cookiecrumb(v14, *a2);
  v15 = (kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb *)((char *)v14 + 48);
  std::vector<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<std::pair<std::vector<int>,std::vector<int>>>::~__split_buffer(&v13);
  return v11;
}

void sub_1ADF8291C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,std::vector<int>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb *kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb::Cookiecrumb(kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb *this, int a2)
{
  char *v3;
  std::vector<int>::size_type v4;
  void *v5;
  void *v6;
  std::vector<int> v8;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  v3 = (char *)this + 24;
  *(_OWORD *)this = 0u;
  v4 = a2;
  std::vector<float>::vector(&v8, a2);
  v5 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v5;
    operator delete(v5);
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  *(std::vector<int> *)this = v8;
  std::vector<int>::vector(&v8, v4);
  v6 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    *((_QWORD *)this + 4) = v6;
    operator delete(v6);
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
  }
  *((std::vector<int> *)this + 1) = v8;
  return this;
}

void sub_1ADF829DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb*>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb*>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb*>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb*>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      v8 = *(_OWORD *)(a3 - 48);
      a3 -= 48;
      *(_OWORD *)(v7 - 48) = v8;
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 40);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 48;
      *((_QWORD *)&v14 + 1) -= 48;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb>,std::reverse_iterator<kaldi::quasar::SeevaBeamSearchBigLm::Cookiecrumb*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,std::vector<int>>>,std::reverse_iterator<std::pair<std::vector<int>,std::vector<int>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t TLocaleInfo::unicodeToMultiByte(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v7;
  char *v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;

  if (*(_DWORD *)(a1 + 64) == 1)
  {
    if ((int)a2 < 128 || a2 - 160 < 0x60)
    {
      v9 = a2;
      v7 = *(_QWORD *)(a3 + 16);
      v8 = &v9;
    }
    else
    {
      v5 = 0;
      while (s_pszCodePage1252ToUnicode[v5 + 1] != a2)
      {
        v5 += 2;
        if (v5 == 66)
          return 1;
      }
      v10 = s_pszCodePage1252ToUnicode[v5];
      v7 = *(_QWORD *)(a3 + 16);
      v8 = &v10;
    }
    goto LABEL_16;
  }
  if ((int)a2 <= 127)
  {
    v11 = a2;
    v7 = *(_QWORD *)(a3 + 16);
    v8 = &v11;
LABEL_16:
    TBuffer<char>::insert(a3, v7, v8, 1uLL);
    return 0;
  }
  if (a2 <= 0x7FF)
  {
    v12 = (a2 >> 6) | 0xC0;
    TBuffer<char>::insert(a3, *(_QWORD *)(a3 + 16), &v12, 1uLL);
    v13 = a2 & 0x3F | 0x80;
    v7 = *(_QWORD *)(a3 + 16);
    v8 = &v13;
    goto LABEL_16;
  }
  if (!HIWORD(a2))
  {
    v14 = (a2 >> 12) | 0xE0;
    TBuffer<char>::insert(a3, *(_QWORD *)(a3 + 16), &v14, 1uLL);
    v15 = (a2 >> 6) & 0x3F | 0x80;
    TBuffer<char>::insert(a3, *(_QWORD *)(a3 + 16), &v15, 1uLL);
    v16 = a2 & 0x3F | 0x80;
    v7 = *(_QWORD *)(a3 + 16);
    v8 = &v16;
    goto LABEL_16;
  }
  return 0;
}

BOOL TLocaleInfo::unicodeToMultiByte(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unsigned int v6;

  do
  {
    v6 = *a2;
    if (!*a2)
      break;
    ++a2;
  }
  while (!TLocaleInfo::unicodeToMultiByte(a1, v6, a3));
  return v6 != 0;
}

uint64_t TLocaleInfo::unicodeToMultiByte(uint64_t a1, unsigned int *a2, uint64_t *a3, unint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  char v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = a3;
  v11 = a4;
  v12 = 0;
  v14 = 0;
  while (1)
  {
    v6 = *a2;
    if (!*a2)
      break;
    ++a2;
    if ((TLocaleInfo::unicodeToMultiByte(a1, v6, (uint64_t)&v10) & 1) != 0)
    {
      v7 = 0xFFFFFFFFLL;
      goto LABEL_12;
    }
  }
  if (v12 >= v11)
  {
    if (v14)
    {
      v9 = 0;
      TBuffer<char>::insert((uint64_t)&v10, v12--, &v9, 1uLL);
    }
    else if (v11)
    {
      *((_BYTE *)v10 + v11 - 1) = 0;
    }
  }
  else
  {
    *((_BYTE *)v10 + v12) = 0;
  }
  v7 = (v12 + 1);
LABEL_12:
  if (v14 && v10 != &v13 && v10)
    MEMORY[0x1AF44D160]();
  return v7;
}

void sub_1ADF82E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (a45 && a10 != &a13)
  {
    if (a10)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(exception_object);
}

uint64_t TLocaleInfo::multiByteToUnicode(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  unsigned int v3;
  uint64_t result;
  int v5;
  uint64_t v6;
  char *v7;
  char v8;
  int v9;
  int v10;
  int v11;

  v3 = *a2;
  if (*(_DWORD *)(a1 + 64) == 1)
  {
    if ((char)v3 <= -97)
    {
      v3 = s_pszCodePage1252ToUnicode[2 * v3 - 255];
      if (v3 == 0xFFFF)
        result = 0xFFFFFFFFLL;
      else
        result = 1;
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if ((v3 & 0x80) == 0)
  {
LABEL_7:
    result = 1;
LABEL_8:
    *a3 = v3;
    return result;
  }
  if ((v3 & 0xE0) == 0xC0)
  {
    v5 = v3 & 0x1F;
    *a3 = v5;
    if (v3 >= 0xC2)
    {
      result = 2;
      goto LABEL_19;
    }
LABEL_16:
    result = 0xFFFFFFFFLL;
    v3 = 0xFFFF;
    goto LABEL_8;
  }
  if ((v3 & 0xF0) != 0xE0)
    goto LABEL_16;
  v5 = v3 & 0xF;
  *a3 = v5;
  if (v3 == 237)
  {
    if ((a2[1] & 0xE0) != 0x80)
      goto LABEL_16;
  }
  else if (v3 == 224 && (a2[1] & 0xE0) != 0xA0)
  {
    goto LABEL_16;
  }
  result = 3;
LABEL_19:
  v6 = result - 1;
  v7 = (char *)(a2 + 1);
  while (1)
  {
    v8 = *v7++;
    v9 = v8 & 0xC0;
    v10 = v8 & 0x3F | (v5 << 6);
    v11 = v9 == 128 ? v10 : 0xFFFF;
    *a3 = v11;
    if (v9 != 128)
      break;
    v5 = v10;
    if (!--v6)
      return result;
  }
  return 0xFFFFFFFFLL;
}

uint64_t TLocaleInfo::multiByteToUnicode(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 *v4;
  int v6;
  int v7;
  int v9;
  int v10;

  if (!*a2)
    return 0;
  v4 = a2;
  while (1)
  {
    v9 = 0;
    v6 = TLocaleInfo::multiByteToUnicode(a1, v4, &v9);
    if (v6 == -1)
      break;
    v7 = v6;
    v10 = v9;
    TBuffer<wchar_t>::insert(a3, *(_QWORD *)(a3 + 16), &v10, 1uLL);
    v4 += v7;
    if (!*v4)
      return 0;
  }
  return 1;
}

uint64_t TLocaleInfo::multiByteToUnicode(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  uint64_t result;
  unsigned __int8 *v6;
  unint64_t v9;
  int v10;
  uint64_t v12;
  int v14;
  int v15;

  result = 0;
  if (a3)
  {
    v6 = a2;
    if (*a2)
    {
      v9 = 0;
      while (1)
      {
        v14 = 0;
        v10 = TLocaleInfo::multiByteToUnicode(a1, v6, &v14);
        v9 += v10;
        if (v10 == -1 || v9 > a3)
          break;
        v12 = v10;
        v15 = v14;
        TBuffer<wchar_t>::insert(a4, *(_QWORD *)(a4 + 16), &v15, 1uLL);
        v6 += v12;
        if (v9 >= a3 || *v6 == 0)
          return 0;
      }
      return 1;
    }
  }
  return result;
}

void sub_1ADF83278(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1ADF83444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1ADF834E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1ADF83898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c62_ZTSNSt3__110shared_ptrIN6quasar25SilencePosteriorGeneratorEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c62_ZTSNSt3__110shared_ptrIN6quasar25SilencePosteriorGeneratorEEE(uint64_t a1)
{
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 40);
}

void sub_1ADF83A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1ADF83AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)EARCaesuraSilencePosteriorGenerator;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::SilencePosteriorGenerator,std::allocator<quasar::SilencePosteriorGenerator>,std::string,unsigned long &,void>@<X0>(uint64_t a1@<X1>, unsigned int *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x78uLL);
  result = std::__shared_ptr_emplace<quasar::SilencePosteriorGenerator>::__shared_ptr_emplace[abi:ne180100]<std::string,unsigned long &,std::allocator<quasar::SilencePosteriorGenerator>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADF83B84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::SilencePosteriorGenerator>::__shared_ptr_emplace[abi:ne180100]<std::string,unsigned long &,std::allocator<quasar::SilencePosteriorGenerator>,0>(_QWORD *a1, uint64_t a2, unsigned int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D44470;
  quasar::SilencePosteriorGenerator::SilencePosteriorGenerator(a1 + 3, a2, *a3, 0, 120);
  return a1;
}

void sub_1ADF83BDC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *quasar::ptt::operator<<(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", (", 3);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"))", 2);
  return a1;
}

{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;

  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"PartialPath(", 12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"prevId=", 7);
  v3 = (_QWORD *)std::ostream::operator<<();
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"observation=", 12);
  v5 = (_QWORD *)std::ostream::operator<<();
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ilabel=", 7);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"olabel=", 7);
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"totalCost=", 10);
  v11 = (_QWORD *)std::ostream::operator<<();
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"totalAcousticCost=", 18);
  v13 = (_QWORD *)std::ostream::operator<<();
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"nextState=", 10);
  v16 = quasar::ptt::operator<<(v15);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)")", 1);
  return a1;
}

uint64_t quasar::ptt::UnigramPhoneticConfusion::loadFromPhonomapFst@<X0>(quasar::ptt::UnigramPhoneticConfusion *this@<X0>, float a2@<S0>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  float *v24;
  uint64_t v25;
  _QWORD v27[2];
  int v28;
  void *__p[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  kaldi::quasar::Vocab::OOvWord(this, (std::string *)__p);
  v6 = fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read((uint64_t)__p);
  if (SBYTE7(v30) < 0)
    operator delete(__p[0]);
  if (!(*(uint64_t (**)(_QWORD *))(*v6 + 112))(v6))
  {
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v35 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    *(_OWORD *)__p = 0u;
    v30 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Phonomap FST does not have input symbols attached.", 50);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  if (!(*(uint64_t (**)(_QWORD *))(*v6 + 120))(v6))
  {
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v35 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    *(_OWORD *)__p = 0u;
    v30 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Phonomap FST does not have output symbols attached.", 51);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v7 = (*(uint64_t (**)(_QWORD *))(*v6 + 112))(v6);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 120))(v7);
  v9 = (*(uint64_t (**)(_QWORD *))(*v6 + 120))(v6);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 120))(v9);
  kaldi::Matrix<float>::Matrix((uint64_t)v27, v8, v10, 0, 0);
  v11 = *(_QWORD *)(v6[1] + 64);
  v12 = *(_QWORD *)(v6[1] + 72) - v11;
  if ((int)(v12 >> 3) >= 1)
  {
    v13 = 0;
    v14 = v27[0];
    v15 = v28;
    v16 = (v12 >> 3);
    do
    {
      v17 = *(_QWORD *)(v11 + 8 * v13);
      v19 = *(_QWORD *)(v17 + 24);
      v18 = *(_QWORD *)(v17 + 32);
      v21 = v18 - v19;
      v20 = v18 == v19;
      if (v18 == v19)
        v22 = 0;
      else
        v22 = v19;
      if (!v20)
      {
        v23 = v21 >> 4;
        if (v23 <= 1)
          v23 = 1;
        v24 = (float *)(v22 + 8);
        do
        {
          *(float *)(v14 + 4 * v15 * *((_DWORD *)v24 - 2) + 4 * *((int *)v24 - 1)) = *v24 * a2;
          v24 += 4;
          --v23;
        }
        while (v23);
      }
      ++v13;
    }
    while (v13 != v16);
  }
  *(_DWORD *)v27[0] = 0;
  v25 = operator new();
  kaldi::Matrix<float>::Matrix(__p, v27);
  quasar::ptt::UnigramPhoneticConfusion::UnigramPhoneticConfusion(v25, (uint64_t)__p);
  *a3 = v25;
  kaldi::Matrix<float>::~Matrix((uint64_t)__p);
  kaldi::Matrix<float>::~Matrix((uint64_t)v27);
  return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
}

void sub_1ADF83EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  _Unwind_Resume(a1);
}

uint64_t quasar::ptt::UnigramPhoneticConfusion::UnigramPhoneticConfusion(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t i;
  uint64_t v5;
  unint64_t j;
  float v7;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  *(_QWORD *)a1 = &off_1E5D3B708;
  v3 = a1 + 8;
  kaldi::Matrix<float>::Matrix(a1 + 8, a2);
  for (i = 0; i < (int)kaldi::MatrixBase<float>::NumRows(v3); ++i)
  {
    v5 = 0;
    for (j = 0; j < (int)kaldi::MatrixBase<float>::NumCols(v3); ++j)
    {
      if (i | j)
      {
        v7 = *(float *)(*(_QWORD *)(a1 + 8) + 4 * *(_DWORD *)(a1 + 24) * (int)i + (v5 >> 30));
        if (v7 == 0.0)
        {
          v28 = 0u;
          v29 = 0u;
          v26 = 0u;
          v27 = 0u;
          v24 = 0u;
          v25 = 0u;
          v22 = 0u;
          v23 = 0u;
          v20 = 0u;
          v21 = 0u;
          v18 = 0u;
          v19 = 0u;
          v16 = 0u;
          v17 = 0u;
          v14 = 0u;
          v15 = 0u;
          v13 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Confusion matrix contains zero weight at (", 42);
          v9 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
          v10 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)").", 2);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v13);
        }
        if (v7 < 0.0)
        {
          v28 = 0u;
          v29 = 0u;
          v26 = 0u;
          v27 = 0u;
          v24 = 0u;
          v25 = 0u;
          v22 = 0u;
          v23 = 0u;
          v20 = 0u;
          v21 = 0u;
          v18 = 0u;
          v19 = 0u;
          v16 = 0u;
          v17 = 0u;
          v14 = 0u;
          v15 = 0u;
          v13 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v13, (uint64_t)"Confusion matrix contains negative weight at (", 46);
          v11 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
          v12 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)").", 2);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v13);
        }
      }
      v5 += 0x100000000;
    }
  }
  return a1;
}

void sub_1ADF84144(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::Matrix<float>::~Matrix(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::ptt::UnigramPhoneticConfusion::start(quasar::ptt::UnigramPhoneticConfusion *this)
{
  return 0;
}

unint64_t quasar::ptt::UnigramPhoneticConfusion::score(quasar::ptt::UnigramPhoneticConfusion *this, int a2, unsigned int a3, uint64_t a4)
{
  return a3 | (unint64_t)(a4 << 32);
}

BOOL quasar::ptt::UnigramPhoneticConfusion::write(quasar::ptt::UnigramPhoneticConfusion *this, const quasar::filesystem::Path *a2)
{
  _BOOL8 v3;
  std::string __p;
  uint64_t v6;
  _BYTE v7[408];
  _QWORD v8[20];

  v8[19] = *MEMORY[0x1E0C80C00];
  kaldi::quasar::Vocab::OOvWord(a2, &__p);
  std::ofstream::basic_ofstream(&v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::MatrixBase<float>::Write((_DWORD *)this + 2, &v6, 0, 0);
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)&v7[*(_QWORD *)(v6 - 24) - 8], *(_DWORD *)&v7[*(_QWORD *)(v6 - 24) + 24] | 4);
  v3 = *(_DWORD *)&v7[*(_QWORD *)(v6 - 24) + 24] == 0;
  v6 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)&v7[*(_QWORD *)(v6 - 24) - 8] = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x1AF44CA70](v7);
  std::ostream::~ostream();
  MEMORY[0x1AF44D094](v8);
  return v3;
}

void sub_1ADF842A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ptt::UnigramPhoneticConfusion::write(uint64_t a1, _QWORD *a2)
{
  kaldi::MatrixBase<float>::Write((_DWORD *)(a1 + 8), a2, 0, 0);
  return 1;
}

_QWORD *quasar::ptt::operator<<(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  float v10;
  const char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;

  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"DynamicGraph::Arc(", 18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"ilabel=", 7);
  v5 = (_QWORD *)std::ostream::operator<<();
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"olabel=", 7);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"weight=", 7);
  v10 = *(float *)(a2 + 8);
  if (v10 == INFINITY)
  {
    v11 = "Infinity";
    v12 = 8;
  }
  else
  {
    if (v10 != -INFINITY)
    {
      v13 = (_QWORD *)std::ostream::operator<<();
      goto LABEL_6;
    }
    v11 = "-Infinity";
    v12 = 9;
  }
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
LABEL_6:
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"nextstate=(", 11);
  v15 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
  v16 = (_QWORD *)std::ostream::operator<<();
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"), ", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)")", 1);
  return a1;
}

double quasar::ptt::Decoder::Params::Params(quasar::ptt::Decoder::Params *this)
{
  double result;

  *(_DWORD *)this = 1097859072;
  result = NAN;
  *(_QWORD *)((char *)this + 4) = -1;
  *(_QWORD *)((char *)this + 12) = 0x3F800000FFFFFFFFLL;
  *((_WORD *)this + 10) = 0;
  *((_BYTE *)this + 22) = 0;
  *((_QWORD *)this + 3) = 0x4000000000020000;
  *((_DWORD *)this + 8) = 6291456;
  return result;
}

void quasar::ptt::Decoder::Params::registerParams(quasar::ptt::Decoder::Params *this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decoding beam");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this, (uint64_t)__p, 0, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "process-emitting-max-active");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum size of frontier during ProcessedEmitting");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 4, (uint64_t)__p, 0, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "process-non-emitting-initial-queue-max-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum size of queue used during ProcessNonEmitting (if set, should also set option for expansion queue)");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 8, (uint64_t)__p, 0, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "process-non-emitting-expansion-queue-max-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum size of queue used during ProcessNonEmitting (if set, should also set option for initial queue)");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 12, (uint64_t)__p, 0, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "lg-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scale factor applied to LG log-probabilities");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 16, (uint64_t)__p, 0, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "lg-fst-is-weight-sorted");
  std::string::basic_string[abi:ne180100]<0>(__p, "If set, the LG FST arcs are expected to be sorted according to their weight");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 20, (uint64_t)__p, 0, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "lg-fst-ilabel-epsion-arcs-first");
  std::string::basic_string[abi:ne180100]<0>(__p, "If set, arcs with ilabel epsilons are first; only works when LG arcs are weight-sorted");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 21, (uint64_t)__p, 0, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "validate-lg-fst");
  std::string::basic_string[abi:ne180100]<0>(__p, "If set, the decoder will verify the structure of the LG FST upon intialization");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 22, (uint64_t)__p, 0, 273, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "big-g-cache-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "Size of cache to use for the Big G DeterministicFST.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 24, (uint64_t)__p, 0, 273, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "hash-ratio");
  std::string::basic_string[abi:ne180100]<0>(__p, "Controls behavior of the underlying hash list");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 28, (uint64_t)__p, 0, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-total-tokens");
  std::string::basic_string[abi:ne180100]<0>(__p, "Decoder max total tokens");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 32, (uint64_t)__p, 0, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADF8495C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::ptt::Decoder::create(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _BYTE v36[24];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  std::allocate_shared[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,void>(a4, a5, &v37);
  v54 = v37;
  if (*(int *)(a1 + 24) >= 1)
  {
    std::allocate_shared[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,int const&,void>((uint64_t *)&v54, (int *)(a1 + 24), &v37);
    v10 = v37;
    v37 = 0uLL;
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
    v54 = v10;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  if (!v17)
  {
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"LG FST should be squeezed_quantized. This is due to an technical limitation.", 76);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v37);
  }
  v18 = v54;
  if (*((_QWORD *)&v54 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    *(_QWORD *)v36 = v17;
    *(_OWORD *)&v36[8] = v18;
    do
      v21 = __ldxr(v19);
    while (__stxr(v21 + 1, v19));
    do
      v22 = __ldaxr(v19);
    while (__stlxr(v22 - 1, v19));
    if (!v22)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v18 + 1) + 16))(*((_QWORD *)&v18 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v18 + 1));
    }
  }
  else
  {
    *(_QWORD *)v36 = v17;
    *(_QWORD *)&v36[8] = v54;
    *(_QWORD *)&v36[16] = 0;
  }
  v24 = *(_DWORD *)(a1 + 8);
  v23 = *(_DWORD *)(a1 + 12);
  if (v24 <= 0 && v23 < 1)
  {
    v26 = operator new();
    v37 = *(_OWORD *)v36;
    v38 = *(unint64_t *)&v36[16];
    quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::DecoderImpl(v26, (__int128 *)a1, a2, (uint64_t)&v37);
    v31 = *((_QWORD *)&v38 + 1);
    *((_QWORD *)&v38 + 1) = 0;
    if (v31)
      MEMORY[0x1AF44D190](v31, 0x10E0C4059286A48);
    v28 = (std::__shared_weak_count *)v38;
    if ((_QWORD)v38)
    {
      v32 = (unint64_t *)(v38 + 8);
      do
        v30 = __ldaxr(v32);
      while (__stlxr(v30 - 1, v32));
LABEL_39:
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  else
  {
    if (v24 <= 0)
    {
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"process_non_emitting_initial_queue_max_size should be configured.", 65);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v37);
    }
    if (v23 <= 0)
    {
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"process_non_emitting_expansion_queue_max_size be configured.", 60);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v37);
    }
    v26 = operator new();
    v37 = *(_OWORD *)v36;
    v38 = *(unint64_t *)&v36[16];
    quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::DecoderImpl(v26, (__int128 *)a1, a2, (uint64_t)&v37);
    v27 = *((_QWORD *)&v38 + 1);
    *((_QWORD *)&v38 + 1) = 0;
    if (v27)
      MEMORY[0x1AF44D190](v27, 0x10E0C4059286A48);
    v28 = (std::__shared_weak_count *)v38;
    if ((_QWORD)v38)
    {
      v29 = (unint64_t *)(v38 + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      goto LABEL_39;
    }
  }
  *a6 = v26;
  v33 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v34 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_1ADF84E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::~DynamicGraph((uint64_t)&a9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v9 - 64);
  _Unwind_Resume(a1);
}

uint64_t quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::~DynamicGraph(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    MEMORY[0x1AF44D190](v2, 0x10E0C4059286A48);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 8);
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x90uLL);
  result = std::__shared_ptr_emplace<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADF84F58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E5D41060;
  a1[1] = 0;
  std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1ADF84FBC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v4 = (std::__shared_weak_count *)a3[1];
  v24 = *a3;
  v25 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (std::__shared_weak_count *)a4[1];
  v22 = *a4;
  v23 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  __asm { FMOV            V0.2S, #1.0 }
  v21 = _D0;
  fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeDeterministicOnDemandFst(a2, &v24, &v22, &v21);
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v25;
  if (v25)
  {
    v19 = (unint64_t *)&v25->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1ADF850BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,int const&,void>@<X0>(uint64_t *a1@<X1>, int *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x60uLL);
  result = std::__shared_ptr_emplace<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,int const&,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADF85124(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,int const&,std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,0>(_QWORD *a1, uint64_t *a2, int *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E5D40FF0;
  a1[1] = 0;
  std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,int const&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1ADF85188(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::construct[abi:ne180100]<fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,int const&>(uint64_t a1, _QWORD *a2, uint64_t *a3, int *a4)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a3[1];
  v10 = *a3;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheDeterministicOnDemandFst(a2, &v10, *a4);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1ADF85224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::DecoderImpl(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  __int128 v6;
  __int128 v7;
  _OWORD v9[17];

  *(_QWORD *)a1 = &unk_1E5CFF2B8;
  v6 = *a2;
  v7 = a2[1];
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 8);
  *(_OWORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 48) = &off_1E5D3B708;
  kaldi::Matrix<float>::Matrix(a1 + 56, a3 + 8);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)a4;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  quasar::ptt::DynamicArrayPartialPathStorage<quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>>::DynamicArrayPartialPathStorage((unint64_t *)(a1 + 128), *(int *)(a1 + 40));
  quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(a1, 1, (_QWORD *)(a1 + 152));
  quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(a1, 0, (_QWORD *)(a1 + 216));
  quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::Frontier::Frontier(a1 + 280, a1 + 128, *(float *)(a1 + 36));
  if (*(_BYTE *)(a1 + 30)
    && *(_BYTE *)(a1 + 28)
    && (quasar::ptt::IsLGGraphValid<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>(*(_QWORD *)(a1 + 96), *(unsigned __int8 *)(a1 + 29)) & 1) == 0)
  {
    memset(v9, 0, sizeof(v9));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"LG failed invariants.", 21);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v9);
  }
  return a1;
}

void sub_1ADF853B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::Frontier::~Frontier(v6);
  quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>::~TopKSet(v5);
  quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>::~TopKSet(v4);
  v9 = *(_QWORD *)(v1 + 136);
  if (v9)
    MEMORY[0x1AF44D160](v9, 0x1000C808AA14F5FLL);
  quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::~DynamicGraph(v3);
  *(_QWORD *)(v1 + 48) = v7;
  kaldi::Matrix<float>::~Matrix(v2);
  _Unwind_Resume(a1);
}

void quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(uint64_t a1@<X1>, int a2@<W2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  fst *v7;
  _QWORD *v8;
  void *__p[2];
  char v10;
  char v11;

  v5 = 20;
  if (a2)
    v5 = 16;
  v6 = *(int *)(a1 + v5);
  if (!(_DWORD)v6)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v7 = fst::LogMessage::LogMessage((fst *)&v11, (uint64_t)__p);
    v8 = (_QWORD *)fst::cerr(v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Maximum queue size should be specified when using weight-sorted-set implementation", 82);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v11);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  *a3 = &off_1E5CFF960;
  a3[1] = a1;
  a3[3] = a3;
  a3[4] = v6;
  a3[7] = 0;
  a3[6] = 0;
  a3[5] = a3 + 6;
}

void sub_1ADF854DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>::~TopKSet(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  std::__tree<int>::destroy(a1 + 40, *(_QWORD **)(a1 + 48));
  v2 = *(_QWORD **)(a1 + 24);
  if (v2 == (_QWORD *)a1)
  {
    v3 = 4;
    v2 = (_QWORD *)a1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::~DecoderImpl(uint64_t a1)
{
  quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::~DecoderImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::decode(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (***v33)(_QWORD);
  void (***v34)(_QWORD);
  void (**v35)(_QWORD);
  BOOL v36;
  std::runtime_error *exception;
  uint64_t *v39;
  void *__p[2];
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _QWORD v59[3];

  v10 = *(_QWORD *)(a1 + 304);
  if (v10 != -1)
  {
    v11 = *(_QWORD *)(a1 + 320);
    do
    {
      v12 = (uint64_t *)(v11 + 16 * v10);
      v12[1] = 0;
      v10 = *v12;
    }
    while (v10 != -1);
  }
  v13 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = -1;
  if (v13)
  {
    v14 = *(_QWORD *)(a1 + 344);
    do
    {
      v15 = v13;
      v13 = *(_QWORD *)(v13 + 16);
      *(_QWORD *)(v15 + 16) = v14;
      v14 = v15;
    }
    while (v13);
    *(_QWORD *)(a1 + 344) = v15;
  }
  v17 = (_QWORD *)(a1 + 200);
  v16 = *(_QWORD **)(a1 + 200);
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2139095040;
  std::__tree<int>::destroy(a1 + 192, v16);
  *(_QWORD *)(a1 + 192) = a1 + 200;
  *v17 = 0;
  *(_QWORD *)(a1 + 208) = 0;
  std::__tree<int>::destroy(a1 + 256, *(_QWORD **)(a1 + 264));
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = a1 + 264;
  *(_QWORD *)(a1 + 144) = 0;
  v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 24))(*(_QWORD *)(a1 + 96));
  v19 = (***(uint64_t (****)(_QWORD))(a1 + 104))(*(_QWORD *)(a1 + 104));
  LODWORD(v42) = 0;
  *(_QWORD *)((char *)&v42 + 4) = v18 | ((unint64_t)v19 << 32);
  v20 = *(_QWORD **)(a1 + 280);
  v21 = v20[2];
  if ((unint64_t)(v21 + 1) >= *v20)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    quasar::ptt::TooManyTokensError::TooManyTokensError(exception, "Ran out of token storage");
  }
  v39 = a4;
  v22 = v42;
  v20[2] = v21 + 1;
  v23 = v20[1] + 36 * (int)v21;
  *(_DWORD *)v23 = v21;
  *(_QWORD *)(v23 + 12) = 0;
  *(_QWORD *)(v23 + 4) = 0;
  *(_DWORD *)(v23 + 20) = 0;
  *(_QWORD *)(v23 + 24) = v22;
  *(_DWORD *)(v23 + 32) = v19;
  kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Insert((uint64_t *)(a1 + 296), v22, v19, v21);
  ++*(_QWORD *)(a1 + 376);
  quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessNonemitting(a1, *(float *)(a1 + 8));
  if (quasar::gLogLevel >= 6)
  {
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v42 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Frontier after ProcessNonemitting size=", 39);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v42);
  }
  v24 = *a2;
  if (a2[1] != *a2)
  {
    v25 = 0;
    v26 = quasar::gLogLevel;
    do
    {
      if (v26 >= 6)
      {
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v42 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Processing frame ", 17);
        v27 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" with observation ", 18);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v42);
        v24 = *a2;
      }
      v28 = quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmitting(a1, *(_DWORD *)(v24 + 4 * v25));
      if (quasar::gLogLevel >= 6)
      {
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v42 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Frontier after ProcessEmitting size=", 36);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v42);
      }
      if (a5)
      {
        v42 = 0uLL;
        *(_QWORD *)&v43 = 0;
        quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::GetBestPaths(a1, 0xFFFFFFFFFFFFFFFFLL, 0, (uint64_t *)&v42, 1);
        std::string::basic_string[abi:ne180100]<0>(__p, "AfterProcessEmitting");
        v59[0] = v25;
        v29 = *(_QWORD *)(a5 + 24);
        if (!v29)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, void **, __int128 *))(*(_QWORD *)v29 + 48))(v29, v59, __p, &v42);
        if (v41 < 0)
          operator delete(__p[0]);
        __p[0] = &v42;
        std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      }
      quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessNonemitting(a1, v28);
      if (quasar::gLogLevel >= 6)
      {
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v42 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"Frontier after ProcessNonemitting size=", 39);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v42);
      }
      if (a5)
      {
        v42 = 0uLL;
        *(_QWORD *)&v43 = 0;
        quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::GetBestPaths(a1, 0xFFFFFFFFFFFFFFFFLL, 0, (uint64_t *)&v42, 1);
        std::string::basic_string[abi:ne180100]<0>(__p, "AfterProcessNonemitting");
        v59[0] = v25;
        v30 = *(_QWORD *)(a5 + 24);
        if (!v30)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, void **, __int128 *))(*(_QWORD *)v30 + 48))(v30, v59, __p, &v42);
        if (v41 < 0)
          operator delete(__p[0]);
        __p[0] = &v42;
        std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      }
      v26 = quasar::gLogLevel;
      if (quasar::gLogLevel >= 6)
      {
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v42 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"NumPaths=", 9);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v42);
        v26 = quasar::gLogLevel;
      }
      ++v25;
      v24 = *a2;
    }
    while (v25 != (a2[1] - *a2) >> 2);
  }
  if (v39)
  {
    v32 = *v39;
    v31 = v39[1];
    if (v31 != *v39)
    {
      v33 = (void (***)(_QWORD))(v31 - 16);
      v34 = (void (***)(_QWORD))(v31 - 16);
      do
      {
        v35 = *v34;
        v34 -= 2;
        (*v35)(v33);
        v36 = v33 == (void (***)(_QWORD))v32;
        v33 = v34;
      }
      while (!v36);
    }
    v39[1] = v32;
    quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::GetBestPaths(a1, a3, 1, v39, 0);
  }
  return 1;
}

void sub_1ADF85B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  fst *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  const char *v28;
  size_t v29;

  if (a2 == 1)
  {
    v23 = __cxa_begin_catch(a1);
    std::string::basic_string[abi:ne180100]<0>(&__p, "INFO");
    v24 = fst::LogMessage::LogMessage((fst *)&a12, (uint64_t)&__p);
    v25 = (_QWORD *)fst::cerr(v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Max tokens ", 11);
    v26 = (_QWORD *)std::ostream::operator<<();
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" exceeded - ", 12);
    v28 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v23 + 16))(v23);
    v29 = strlen(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&a12);
    if (a23 < 0)
      operator delete(__p);
    __cxa_end_catch();
    JUMPOUT(0x1ADF85AA0);
  }
  _Unwind_Resume(a1);
}

void sub_1ADF85C5C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1ADF85B18);
}

unint64_t *quasar::ptt::DynamicArrayPartialPathStorage<quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>>::DynamicArrayPartialPathStorage(unint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;

  *a1 = a2;
  v4 = 36 * a2;
  is_mul_ok(a2, 0x24uLL);
  v5 = operator new[]();
  if (a2)
  {
    v6 = (_DWORD *)(v5 + 32);
    do
    {
      *((_QWORD *)v6 - 1) = 0;
      *v6 = 0;
      v6 += 9;
      v4 -= 36;
    }
    while (v4);
  }
  a1[1] = v5;
  a1[2] = 0;
  return a1;
}

void std::__function::__func<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1},std::allocator<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1}>,float ()(std::pair<int,std::pair<int,int>>)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1},std::allocator<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1}>,float ()(std::pair<int,std::pair<int,int>>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5CFF960;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1},std::allocator<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1}>,float ()(std::pair<int,std::pair<int,int>>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5CFF960;
  a2[1] = v2;
  return result;
}

float std::__function::__func<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1},std::allocator<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1}>,float ()(std::pair<int,std::pair<int,int>>)>::operator()(uint64_t a1, uint64_t a2)
{
  return std::__invoke_void_return_wrapper<float,false>::__call[abi:ne180100]<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1} &,std::pair<int,std::pair<int,int>>>((uint64_t *)(a1 + 8), a2);
}

uint64_t std::__function::__func<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1},std::allocator<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1}>,float ()(std::pair<int,std::pair<int,int>>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1},std::allocator<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1}>,float ()(std::pair<int,std::pair<int,int>>)>::target_type()
{
}

float std::__invoke_void_return_wrapper<float,false>::__call[abi:ne180100]<quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::operator()(quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>> *,BOOL)::{lambda(std::pair<int,std::pair<int,int>>)#1} &,std::pair<int,std::pair<int,int>>>(uint64_t *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  _DWORD **v14;

  v2 = *(_DWORD *)(a2 + 8);
  v3 = *a1;
  v4 = HIDWORD(*(_QWORD *)a2);
  v5 = 73244475 * (*(_QWORD *)a2 ^ ((int)*(_QWORD *)a2 >> 16));
  v6 = ((((73244475 * (v5 ^ (v5 >> 16))) ^ ((73244475 * (v5 ^ (v5 >> 16))) >> 16)) - 1640531527) ^ 3u) + 192;
  v7 = 73244475 * ((*(uint64_t *)a2 >> 48) ^ v4);
  v8 = (((73244475 * (v7 ^ (v7 >> 16))) ^ ((73244475 * (v7 ^ (v7 >> 16))) >> 16))
      - 1640531527
      + (v6 << 6)
      + (v6 >> 2)) ^ v6;
  v9 = 73244475 * ((73244475 * (v2 ^ (v2 >> 16))) ^ ((73244475 * (v2 ^ (v2 >> 16))) >> 16));
  v10 = ((v9 ^ (v9 >> 16)) - 1640531527 + (v8 << 6) + (v8 >> 2)) ^ v8;
  v11 = *(_QWORD *)(*a1 + 320);
  v12 = *(_QWORD *)(v11 + 16 * (v10 % *(_QWORD *)(*a1 + 312)));
  if (v12 == -1)
  {
    v14 = (_DWORD **)(v3 + 296);
    goto LABEL_5;
  }
  v13 = *(_DWORD **)(v11 + 16 * v12 + 8);
  do
  {
    v14 = (_DWORD **)(v13 + 4);
LABEL_5:
    v13 = *v14;
  }
  while (*v13 != *(_QWORD *)a2 || v13[1] != (_DWORD)v4 || v13[2] != v2);
  return *(float *)(*(_QWORD *)(v3 + 136) + 36 * (int)v13[3] + 16);
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::Frontier::Frontier(uint64_t a1, uint64_t a2, float a3)
{
  *(_QWORD *)a1 = a2;
  *(float *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 24) = xmmword_1AE146E50;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 112) = 2139095040;
  kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize(a1 + 16, 0x3E8uLL);
  return a1;
}

void sub_1ADF85F20(_Unwind_Exception *a1)
{
  _QWORD *v1;

  kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::~HashList(v1);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::~HashList(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _BYTE *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  _QWORD v13[34];

  v2 = a1[6];
  if (v2)
  {
    v3 = 0;
    do
    {
      ++v3;
      v2 = *(_QWORD *)(v2 + 16);
    }
    while (v2);
  }
  else
  {
    v3 = 0;
  }
  v4 = (_QWORD *)a1[7];
  v5 = (_BYTE *)a1[8];
  if (v5 == (_BYTE *)v4)
  {
    v7 = 0;
    v4 = (_QWORD *)a1[8];
  }
  else
  {
    v6 = 0;
    v7 = 0;
    do
    {
      if (v4[v6])
      {
        MEMORY[0x1AF44D160](v4[v6], 0x1020C803ED2C137);
        v4 = (_QWORD *)a1[7];
        v5 = (_BYTE *)a1[8];
      }
      ++v6;
      v7 += 1024;
    }
    while (v6 < (v5 - (_BYTE *)v4) >> 3);
  }
  if (v3 != v7 && kaldi::g_kaldi_verbose_level > -2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Possible memory leak: ", 22);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" != ", 4);
    v9 = (_QWORD *)std::ostream::operator<<();
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": you might have forgotten to call Delete on ", 45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"some Elems", 10);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    v4 = (_QWORD *)a1[7];
  }
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  v11 = (void *)a1[3];
  if (v11)
  {
    a1[4] = v11;
    operator delete(v11);
  }
  return a1;
}

uint64_t quasar::ptt::IsLGGraphValid<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>(uint64_t a1, int a2)
{
  __n128 v4;
  int v5;
  unsigned __int8 v6;
  float v7;
  int v8;
  uint64_t v9;
  _OWORD v11[17];
  _BYTE v12[24];
  int v13;
  float v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;

  v19 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v17);
  while (v17)
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17) & 1) != 0)
      goto LABEL_25;
    if (!v17)
      goto LABEL_7;
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
LABEL_8:
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::ArcIterator((uint64_t)v12, a1, v5);
    v6 = 0;
    v7 = -INFINITY;
    while (v16 < v15)
    {
      if (!a2)
        goto LABEL_13;
      v8 = v13;
      if (((v13 == 0) & v6) == 1)
      {
        if (quasar::gLogLevel >= 2)
        {
          memset(v11, 0, sizeof(v11));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Observed epsilon arc after observing non-epsilon arc.", 53);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v11);
        }
LABEL_21:
        v9 = 0;
        goto LABEL_22;
      }
      if (v13)
      {
LABEL_13:
        v4.n128_f32[0] = v14;
        if (v14 < v7)
          goto LABEL_21;
        v8 = v13;
        v7 = v14;
      }
      v6 |= v8 != 0;
      ++v16;
      v4.n128_f32[0] = fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc((uint64_t)v12);
    }
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
    else
      ++v19;
  }
  if (v19 < v18)
  {
LABEL_7:
    v5 = v19;
    goto LABEL_8;
  }
LABEL_25:
  v9 = 1;
LABEL_22:
  if (v17)
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v17 + 8))(v17, v4);
  return v9;
}

void sub_1ADF86240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;

  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  v11 = *(_QWORD *)(v9 - 72);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  _Unwind_Resume(a1);
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::Frontier::~Frontier(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 != -1)
  {
    v4 = *(_QWORD *)(a1 + 40);
    do
    {
      v5 = (uint64_t *)(v4 + 16 * v3);
      v5[1] = 0;
      v3 = *v5;
    }
    while (v3 != -1);
  }
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = -1;
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 64);
    do
    {
      v8 = v6;
      v6 = *(_QWORD *)(v6 + 16);
      *(_QWORD *)(v8 + 16) = v7;
      v7 = v8;
    }
    while (v6);
    *(_QWORD *)(a1 + 64) = v8;
  }
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 2139095040;
  kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::~HashList(v2);
  return a1;
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::~DecoderImpl(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = &unk_1E5CFF2B8;
  quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::Frontier::~Frontier(a1 + 280);
  std::__tree<int>::destroy(a1 + 256, *(_QWORD **)(a1 + 264));
  v2 = *(_QWORD **)(a1 + 240);
  if (v2 == (_QWORD *)(a1 + 216))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 216);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  std::__tree<int>::destroy(a1 + 192, *(_QWORD **)(a1 + 200));
  v4 = *(_QWORD **)(a1 + 176);
  if (v4 == (_QWORD *)(a1 + 152))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 152);
  }
  else
  {
    if (!v4)
      goto LABEL_11;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_11:
  v6 = *(_QWORD *)(a1 + 136);
  if (v6)
    MEMORY[0x1AF44D160](v6, 0x1000C808AA14F5FLL);
  v7 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v7)
    MEMORY[0x1AF44D190](v7, 0x10E0C4059286A48);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 104);
  *(_QWORD *)(a1 + 48) = &off_1E5D3B708;
  kaldi::Matrix<float>::~Matrix(a1 + 56);
  return a1;
}

void quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessNonemitting(uint64_t a1, float a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t **v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD **v23;
  uint64_t v24;
  _DWORD *v25;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  BOOL v45;
  float v46;
  unsigned int v47;
  int v48;
  int *v49;
  int v50;
  _QWORD *v51;
  _QWORD *v52;
  int v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t **v57;
  uint64_t *v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  _BYTE v62[12];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;

  if (quasar::gLogLevel >= 6)
  {
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v63 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"Process non-emitting with cutoff=", 33);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v63);
  }
  v6 = *(_QWORD *)(a1 + 296);
  if (v6)
  {
    v7 = 0;
    v3 = 36;
    do
    {
      if (*(float *)(*(_QWORD *)(a1 + 136) + 36 * *(int *)(v6 + 12) + 16) <= a2)
      {
        ++v7;
        v2 = v2 & 0xFFFFFFFF00000000 | *(unsigned int *)(v6 + 8);
        quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>::push_back((_QWORD *)(a1 + 152), *(_QWORD *)v6, v2);
      }
      v6 = *(_QWORD *)(v6 + 16);
    }
    while (v6);
  }
  if (quasar::gLogLevel > 5)
  {
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v63 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"Process non-emitting considered ", 32);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" initial states.", 16);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v63);
  }
  if (*(_QWORD *)(a1 + 208))
  {
    v9 = (uint64_t **)(a1 + 192);
    v10 = *(_QWORD *)(a1 + 192);
  }
  else
  {
    if (!*(_QWORD *)(a1 + 272))
    {
      v12 = -1;
      v11 = -1;
      goto LABEL_15;
    }
    v9 = (uint64_t **)(a1 + 256);
    v10 = *(_QWORD *)(a1 + 256);
  }
  v11 = *(_QWORD *)(v10 + 32);
  v12 = *(_DWORD *)(v10 + 40);
  std::__tree<std::string>::__remove_node_pointer(v9, (uint64_t *)v10);
  operator delete((void *)v10);
LABEL_15:
  *(_QWORD *)v62 = v11;
  v13 = HIDWORD(v11);
  while (1)
  {
    *(_DWORD *)&v62[8] = v12;
    if ((_DWORD)v11 == -1 && (_DWORD)v13 == -1 && v12 == -1)
      break;
    v14 = *(_QWORD *)v62;
    v15 = 73244475
        * ((73244475 * (*(_DWORD *)v62 ^ (*(int *)v62 >> 16))) ^ ((73244475 * (*(_DWORD *)v62 ^ (*(int *)v62 >> 16))) >> 16));
    v16 = (((v15 ^ (v15 >> 16)) - 1640531527) ^ 3u) + 192;
    v17 = 73244475
        * ((73244475 * ((*(uint64_t *)v62 >> 48) ^ *(_DWORD *)&v62[4])) ^ ((int)(73244475
                                                                              * ((*(uint64_t *)v62 >> 48) ^ *(_DWORD *)&v62[4])) >> 16));
    v18 = ((v17 ^ (v17 >> 16)) - 1640531527 + (v16 << 6) + (v16 >> 2)) ^ v16;
    v19 = 73244475 * ((73244475 * (v12 ^ (v12 >> 16))) ^ ((73244475 * (v12 ^ (v12 >> 16))) >> 16));
    v20 = ((v19 ^ (v19 >> 16)) - 1640531527 + (v18 << 6) + (v18 >> 2)) ^ v18;
    v21 = *(_QWORD *)(a1 + 320);
    v22 = *(_QWORD *)(v21 + 16 * (v20 % *(_QWORD *)(a1 + 312)));
    v23 = (_DWORD **)(a1 + 296);
    if (v22 != -1)
      v23 = (_DWORD **)(*(_QWORD *)(v21 + 16 * v22 + 8) + 16);
    v24 = v12;
    while (1)
    {
      v25 = *v23;
      if (*v25 == *(_DWORD *)v62 && v25[1] == *(_DWORD *)&v62[4] && v25[2] == v12)
        break;
      v23 = (_DWORD **)(v25 + 4);
    }
    v27 = v25[3];
    v28 = *(_QWORD *)(a1 + 136);
    v29 = v28 + 36 * v27;
    if (quasar::gLogLevel >= 6)
    {
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      v64 = 0u;
      v65 = 0u;
      v63 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v63);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"Considering ", 12);
      v31 = quasar::ptt::operator<<(v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" (ID: ", 6);
      v32 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)").", 2);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v63);
    }
    if (*(float *)(v28 + 36 * v27 + 16) <= a2)
    {
      v33 = *(_QWORD *)(a1 + 120);
      if (v33)
      {
        v34 = *(_DWORD *)&v62[8];
        v36 = *(_QWORD *)(v33 + 48);
        v35 = v33 + 48;
        *(_DWORD *)(v35 - 32) = *(_DWORD *)&v62[4];
        *(_DWORD *)(v35 - 28) = v34;
        *(_DWORD *)(v35 - 24) = v34;
        (*(void (**)(void))(v36 + 16))();
      }
      else
      {
        v59 = *(_OWORD *)(a1 + 96);
        v37 = operator new();
        *(_OWORD *)v37 = v59;
        v38 = *(_QWORD *)&v62[4];
        *(_QWORD *)(v37 + 16) = *(_QWORD *)&v62[4];
        *(_DWORD *)(v37 + 24) = HIDWORD(v38);
        fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::ArcIterator(v37 + 48, v59, v38);
        *(_DWORD *)(v37 + 124) = 0;
        *(_DWORD *)(v37 + 128) = 0;
        v39 = *(_QWORD *)(a1 + 120);
        *(_QWORD *)(a1 + 120) = v37;
        if (v39)
          MEMORY[0x1AF44D190](v39, 0x10E0C4059286A48);
      }
      v40 = *(_QWORD *)(a1 + 120);
      if (*(_QWORD *)(v40 + 96) < *(_QWORD *)(v40 + 88))
      {
        while (1)
        {
          v41 = *(unsigned int *)(v40 + 76);
          if ((_DWORD)v41)
          {
            (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v40 + 8) + 32))(*(_QWORD *)(v40 + 8), *(unsigned int *)(v40 + 24), v41, v40 + 28);
            v42 = *(float *)(v40 + 80);
            v43 = NAN;
            if (v42 != -INFINITY)
            {
              v44 = *(float *)(v40 + 36);
              v43 = NAN;
              if (v44 != -INFINITY)
              {
                v43 = INFINITY;
                v45 = v44 == INFINITY || v42 == INFINITY;
                v46 = v42 + v44;
                if (!v45)
                  v43 = v46;
              }
            }
            v47 = *(_DWORD *)(v40 + 72);
            v48 = *(_DWORD *)(v40 + 32);
            *(_DWORD *)(v40 + 112) = v47;
            *(_DWORD *)(v40 + 116) = v48;
            v49 = (int *)(v40 + 40);
          }
          else
          {
            v47 = *(_DWORD *)(v40 + 72);
            *(_QWORD *)(v40 + 112) = v47;
            v43 = *(float *)(v40 + 80);
            v49 = (int *)(v40 + 24);
          }
          *(float *)(v40 + 120) = v43;
          v50 = *v49;
          *(_DWORD *)(v40 + 124) = *(_DWORD *)(v40 + 84);
          *(_DWORD *)(v40 + 128) = v50;
          if (quasar::gLogLevel >= 6)
          {
            v78 = 0u;
            v79 = 0u;
            v76 = 0u;
            v77 = 0u;
            v74 = 0u;
            v75 = 0u;
            v72 = 0u;
            v73 = 0u;
            v70 = 0u;
            v71 = 0u;
            v68 = 0u;
            v69 = 0u;
            v66 = 0u;
            v67 = 0u;
            v64 = 0u;
            v65 = 0u;
            v63 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v63);
            v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"Considering expanding ", 22);
            v52 = quasar::ptt::operator<<(v51, v40 + 112);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)".", 1);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v63);
            v47 = *(_DWORD *)(v40 + 112);
          }
          if (*(_BYTE *)(a1 + 29) && !v47)
            break;
          v60 = -1;
          v61 = -1;
          v3 = v3 & 0xFFFFFFFF00000000 | v24;
          if ((quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessArc<true,true>(a1, 0, a2, v14, v3, v27, v29, (int *)(v40 + 112), 1, (int *)&v60, 0, 0) & 1) == 0)
          {
            if (quasar::gLogLevel >= 6)
            {
              v78 = 0u;
              v79 = 0u;
              v76 = 0u;
              v77 = 0u;
              v74 = 0u;
              v75 = 0u;
              v72 = 0u;
              v73 = 0u;
              v70 = 0u;
              v71 = 0u;
              v68 = 0u;
              v69 = 0u;
              v66 = 0u;
              v67 = 0u;
              v64 = 0u;
              v65 = 0u;
              v63 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v63);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"Exiting arc-loop early.", 23);
              quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v63);
            }
            goto LABEL_66;
          }
          if (quasar::gLogLevel >= 6)
          {
            v78 = 0u;
            v79 = 0u;
            v76 = 0u;
            v77 = 0u;
            v74 = 0u;
            v75 = 0u;
            v72 = 0u;
            v73 = 0u;
            v70 = 0u;
            v71 = 0u;
            v68 = 0u;
            v69 = 0u;
            v66 = 0u;
            v67 = 0u;
            v64 = 0u;
            v65 = 0u;
            v63 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v63);
            v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)"Arc expansion led to next state ", 32);
            v56 = quasar::ptt::operator<<(v55);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)".", 1);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v63);
          }
          v53 = v61;
          if (v60 != -1 || v61 != -1)
          {
            v54 = v60;
LABEL_57:
            quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>::push_back((_QWORD *)(a1 + 216), v54, v53);
          }
LABEL_58:
          ++*(_QWORD *)(v40 + 96);
          fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(v40 + 48);
          if (*(_QWORD *)(v40 + 96) >= *(_QWORD *)(v40 + 88))
            goto LABEL_66;
        }
        *(_QWORD *)&v63 = -1;
        DWORD2(v63) = -1;
        v6 = v6 & 0xFFFFFFFF00000000 | v24;
        quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessArc<true,true>(a1, 0, a2, v14, v6, v27, v29, (int *)(v40 + 112), 0, (int *)&v63, 0, 0);
        v53 = DWORD2(v63);
        if ((_QWORD)v63 == -1 && DWORD2(v63) == -1)
          goto LABEL_58;
        v54 = v63;
        goto LABEL_57;
      }
    }
LABEL_66:
    if (*(_QWORD *)(a1 + 208))
    {
      v57 = (uint64_t **)(a1 + 192);
LABEL_70:
      v58 = *v57;
      v11 = (*v57)[4];
      v12 = *((_DWORD *)*v57 + 10);
      std::__tree<std::string>::__remove_node_pointer(v57, *v57);
      operator delete(v58);
      goto LABEL_71;
    }
    if (*(_QWORD *)(a1 + 272))
    {
      v57 = (uint64_t **)(a1 + 256);
      goto LABEL_70;
    }
    v12 = -1;
    v11 = -1;
LABEL_71:
    v13 = HIDWORD(v11);
    *(_QWORD *)v62 = v11;
  }
}

void sub_1ADF86CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)va);
  _Unwind_Resume(a1);
}

float quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmitting(uint64_t a1, int a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  float v6;
  _QWORD *v7;
  _QWORD *v8;
  float v9;
  float v10;
  float WeightCutoffUpperBound;
  float v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  float v25;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  BOOL v45;
  float v46;
  unsigned int v47;
  int v48;
  int *v49;
  int v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  _BYTE v66[12];
  void *__p;
  _QWORD *v68;
  _QWORD v69[2];
  float v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;

  if (quasar::gLogLevel >= 6)
  {
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v75 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Process emitting with observation ", 34);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v71);
  }
  quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::Frontier::NextIteration(a1 + 280, (uint64_t)v69);
  v5 = v69[0];
  v4 = v69[1];
  v6 = v70;
  if (quasar::gLogLevel >= 6)
  {
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v75 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"prevFrontierBestHashListElement=", 32);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" ", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"prevFrontierBestCost=", 21);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v71);
  }
  v9 = *(float *)(a1 + 8);
  if ((LODWORD(v6) & 0x7FFFFFFFu) >= 0x7F800000)
    v10 = 1.0e10;
  else
    v10 = v6;
  quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements(a1, v5, &__p);
  WeightCutoffUpperBound = quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ComputeNextWeightCutoffUpperBound(a1, v4, a2);
  v12 = v10 + v9;
  if (quasar::gLogLevel >= 6)
  {
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v75 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"adaptiveBeam=", 13);
    v13 = (_QWORD *)std::ostream::operator<<();
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" ", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"weightCutoff=", 13);
    v15 = (_QWORD *)std::ostream::operator<<();
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"nextWeightCutoffUpperBound=", 27);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v71);
  }
  v17 = v68;
  if (v68 != __p)
  {
    v59 = 0;
    v18 = 0;
    v17 = __p;
    do
    {
      v19 = v17[v18];
      *(_QWORD *)v66 = *(_QWORD *)v19;
      v20 = *(_DWORD *)(v19 + 12);
      *(_DWORD *)&v66[8] = *(_DWORD *)(v19 + 8);
      v21 = *(_QWORD *)(a1 + 136);
      v63 = v21 + 36 * v20;
      v64 = v20;
      if (quasar::gLogLevel >= 6)
      {
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v75 = 0u;
        v73 = 0u;
        v74 = 0u;
        v71 = 0u;
        v72 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Considering ", 12);
        v23 = quasar::ptt::operator<<(v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" with ID ", 9);
        v24 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)".", 1);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v71);
      }
      v25 = *(float *)(v21 + 36 * v64 + 16);
      if (v25 < v12 && v25 < WeightCutoffUpperBound)
      {
        v58 = v19;
        v32 = *(_QWORD *)&v66[4];
        v33 = *(_QWORD *)(a1 + 120);
        v34 = HIDWORD(*(_QWORD *)&v66[4]);
        if (v33)
        {
          v36 = *(_QWORD *)(v33 + 48);
          v35 = v33 + 48;
          *(_DWORD *)(v35 - 32) = *(_DWORD *)&v66[4];
          *(_DWORD *)(v35 - 28) = v34;
          *(_DWORD *)(v35 - 24) = v34;
          (*(void (**)(void))(v36 + 16))();
        }
        else
        {
          v61 = *(_OWORD *)(a1 + 96);
          v37 = operator new();
          *(_OWORD *)v37 = v61;
          *(_QWORD *)(v37 + 16) = v32;
          *(_DWORD *)(v37 + 24) = v34;
          fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::ArcIterator(v37 + 48, v61, v32);
          *(_DWORD *)(v37 + 124) = 0;
          *(_DWORD *)(v37 + 128) = 0;
          v38 = *(_QWORD *)(a1 + 120);
          *(_QWORD *)(a1 + 120) = v37;
          if (v38)
            MEMORY[0x1AF44D190](v38, 0x10E0C4059286A48);
        }
        v39 = v34;
        v40 = *(_QWORD *)(a1 + 120);
        v62 = *(_QWORD *)v66;
        while (*(_QWORD *)(v40 + 96) < *(_QWORD *)(v40 + 88))
        {
          v41 = *(unsigned int *)(v40 + 76);
          if ((_DWORD)v41)
          {
            (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v40 + 8) + 32))(*(_QWORD *)(v40 + 8), *(unsigned int *)(v40 + 24), v41, v40 + 28);
            v42 = *(float *)(v40 + 80);
            v43 = NAN;
            if (v42 != -INFINITY)
            {
              v44 = *(float *)(v40 + 36);
              v43 = NAN;
              if (v44 != -INFINITY)
              {
                v43 = INFINITY;
                v45 = v44 == INFINITY || v42 == INFINITY;
                v46 = v42 + v44;
                if (!v45)
                  v43 = v46;
              }
            }
            v47 = *(_DWORD *)(v40 + 72);
            v48 = *(_DWORD *)(v40 + 32);
            *(_DWORD *)(v40 + 112) = v47;
            *(_DWORD *)(v40 + 116) = v48;
            v49 = (int *)(v40 + 40);
          }
          else
          {
            v47 = *(_DWORD *)(v40 + 72);
            *(_QWORD *)(v40 + 112) = v47;
            v43 = *(float *)(v40 + 80);
            v49 = (int *)(v40 + 24);
          }
          *(float *)(v40 + 120) = v43;
          v50 = *v49;
          *(_DWORD *)(v40 + 124) = *(_DWORD *)(v40 + 84);
          *(_DWORD *)(v40 + 128) = v50;
          if (quasar::gLogLevel >= 6)
          {
            v86 = 0u;
            v87 = 0u;
            v84 = 0u;
            v85 = 0u;
            v82 = 0u;
            v83 = 0u;
            v80 = 0u;
            v81 = 0u;
            v78 = 0u;
            v79 = 0u;
            v76 = 0u;
            v77 = 0u;
            v75 = 0u;
            v73 = 0u;
            v74 = 0u;
            v71 = 0u;
            v72 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
            v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Considering expanding ", 22);
            v52 = quasar::ptt::operator<<(v51, v40 + 112);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)".", 1);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v71);
            v47 = *(_DWORD *)(v40 + 112);
          }
          if (v47)
          {
            v65 = 0;
            v2 = v2 & 0xFFFFFFFF00000000 | v39;
            if ((quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessArc<true,true>(a1, a2, WeightCutoffUpperBound, v62, v2, v64, v63, (int *)(v40 + 112), 1, 0, &v65, 0) & 1) == 0)
            {
              if (quasar::gLogLevel >= 6)
              {
                v86 = 0u;
                v87 = 0u;
                v84 = 0u;
                v85 = 0u;
                v82 = 0u;
                v83 = 0u;
                v80 = 0u;
                v81 = 0u;
                v78 = 0u;
                v79 = 0u;
                v76 = 0u;
                v77 = 0u;
                v75 = 0u;
                v73 = 0u;
                v74 = 0u;
                v71 = 0u;
                v72 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Exiting arc-loop early.", 23);
                quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v71);
              }
              break;
            }
            if (v65 && (float)(v9 + *(float *)(v65 + 16)) < WeightCutoffUpperBound)
              WeightCutoffUpperBound = v9 + *(float *)(v65 + 16);
          }
          else if (quasar::gLogLevel >= 6)
          {
            v86 = 0u;
            v87 = 0u;
            v84 = 0u;
            v85 = 0u;
            v82 = 0u;
            v83 = 0u;
            v80 = 0u;
            v81 = 0u;
            v78 = 0u;
            v79 = 0u;
            v76 = 0u;
            v77 = 0u;
            v75 = 0u;
            v73 = 0u;
            v74 = 0u;
            v71 = 0u;
            v72 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
            v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Skipping ", 9);
            v54 = quasar::ptt::operator<<(v53, v40 + 112);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" since it is an epsilon arc.", 28);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v71);
          }
          ++*(_QWORD *)(v40 + 96);
          fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(v40 + 48);
        }
        if (quasar::gLogLevel >= 6)
        {
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          v82 = 0u;
          v83 = 0u;
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v75 = 0u;
          v73 = 0u;
          v74 = 0u;
          v71 = 0u;
          v72 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Considering the case where we ignore observation ", 49);
          v55 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)".", 1);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v71);
        }
        *(_QWORD *)&v71 = 0;
        v57 = v57 & 0xFFFFFFFF00000000 | v39;
        quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessArc<false,true>(a1, a2, v62, v39, v64, v63, WeightCutoffUpperBound, 0, 0, 0, (uint64_t *)&v71, 0);
        v19 = v58;
        if ((_QWORD)v71 && (float)(v9 + *(float *)(v71 + 16)) < WeightCutoffUpperBound)
          WeightCutoffUpperBound = v9 + *(float *)(v71 + 16);
      }
      else if (quasar::gLogLevel >= 6)
      {
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v75 = 0u;
        v73 = 0u;
        v74 = 0u;
        v71 = 0u;
        v72 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Skipping ", 9);
        v28 = quasar::ptt::operator<<(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" (ID: ", 6);
        v29 = (_QWORD *)std::ostream::operator<<();
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)") ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"since cost exceeds ", 19);
        v31 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)".", 1);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v71);
      }
      *(_QWORD *)(v19 + 16) = *(_QWORD *)(a1 + 344);
      *(_QWORD *)(a1 + 344) = v19;
      ++v18;
      v17 = __p;
      v59 += 8;
    }
    while (v18 < ((char *)v68 - (_BYTE *)__p) >> 3);
  }
  if (quasar::gLogLevel >= 6)
  {
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v75 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"nextWeightCutoffUpperBound=", 27);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v71);
    v17 = __p;
  }
  if (v17)
  {
    v68 = v17;
    operator delete(v17);
  }
  return WeightCutoffUpperBound;
}

void sub_1ADF875F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::GetBestPaths(uint64_t a1, unint64_t a2, int a3, uint64_t *a4, int a5)
{
  float v9;
  uint64_t i;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  BOOL v19;
  float *v20;
  float *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  float *v28;
  float *v29;
  float *v30;
  float *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  float *v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  int v44;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  float *v63;
  float *v64;
  unint64_t v65;

  v63 = 0;
  v64 = 0;
  v65 = 0;
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)&v63, *(_QWORD *)(a1 + 376));
  v44 = a5;
  for (i = *(_QWORD *)(a1 + 296); i; i = *(_QWORD *)(i + 16))
  {
    if (quasar::gLogLevel >= 6)
    {
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v46 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"Considering path ", 17);
      v12 = quasar::ptt::operator<<(v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" (ID: ", 6);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)").", 2);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v46);
    }
    v14 = *(_DWORD *)(i + 12);
    v15 = *(_QWORD *)(a1 + 136);
    v16 = *(float *)(v15 + 36 * v14 + 16);
    if (a3)
    {
      v17 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 96) + 32))(*(_QWORD *)(a1 + 96), *(unsigned int *)(v15 + 36 * v14 + 28));
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 104) + 16))(*(_QWORD *)(a1 + 104), *(unsigned int *)(v15 + 36 * v14 + 32));
      v18 = NAN;
      if (v17 != -INFINITY && v9 != -INFINITY)
      {
        v18 = INFINITY;
        v19 = v9 == INFINITY || v17 == INFINITY;
        v9 = v17 + v9;
        if (!v19)
          v18 = v9;
      }
      v16 = v16 + v18;
    }
    if ((LODWORD(v16) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      v20 = v64;
      if ((unint64_t)v64 >= v65)
      {
        v22 = ((char *)v64 - (char *)v63) >> 3;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v24 = v65 - (_QWORD)v63;
        if ((uint64_t)(v65 - (_QWORD)v63) >> 2 > v23)
          v23 = v24 >> 2;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
          v25 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v65, v25);
        v28 = (float *)&v26[8 * v22];
        *v28 = v16;
        v28[1] = *(float *)(i + 12);
        v30 = v63;
        v29 = v64;
        v31 = v28;
        if (v64 != v63)
        {
          do
          {
            v32 = *((_QWORD *)v29 - 1);
            v29 -= 2;
            *((_QWORD *)v31 - 1) = v32;
            v31 -= 2;
          }
          while (v29 != v30);
          v29 = v63;
        }
        v21 = v28 + 2;
        v63 = v31;
        v64 = v28 + 2;
        v65 = (unint64_t)&v26[8 * v27];
        if (v29)
          operator delete(v29);
      }
      else
      {
        *v64 = v16;
        v20[1] = *(float *)(i + 12);
        v21 = v20 + 2;
      }
      v64 = v21;
    }
  }
  v33 = ((char *)v64 - (char *)v63) >> 3;
  if (v33 >= a2)
    v34 = a2;
  else
    v34 = ((char *)v64 - (char *)v63) >> 3;
  if (v44)
  {
    v35 = 126 - 2 * __clz(v33);
    if (v64 == v63)
      v36 = 0;
    else
      v36 = v35;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *,false>((uint64_t)v63, (unint64_t)v64, (uint64_t)&v46, v36, 1);
  }
  else if (v33 > a2)
  {
    v37 = &v63[2 * v34];
    if (v37 != v64)
      std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<float,int> *>>((uint64_t)v63, v37, (uint64_t)v64, v9);
  }
  std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::reserve(a4, v34);
  if (v34)
  {
    v38 = 0;
    do
    {
      v39 = LODWORD(v63[v38 + 1]);
      if (quasar::gLogLevel >= 6)
      {
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v46 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"Extracting path with ID ", 24);
        v40 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" with expected cost ", 20);
        v41 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)".", 1);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v46);
      }
      quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::GetPath(a1, v39, a3, &v46);
      std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::emplace_back<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>(a4, (uint64_t)&v46);
      *(_QWORD *)&v46 = &unk_1E5D25580;
      v42 = *((_QWORD *)&v46 + 1);
      if (*((_QWORD *)&v46 + 1))
      {
        v43 = *(_DWORD *)(*((_QWORD *)&v46 + 1) + 56) - 1;
        *(_DWORD *)(*((_QWORD *)&v46 + 1) + 56) = v43;
        if (!v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      }
      v38 += 2;
      --v34;
    }
    while (v34);
  }
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
}

void sub_1ADF87B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  void *v16;

  v16 = *(void **)(v14 - 128);
  if (v16)
  {
    *(_QWORD *)(v14 - 120) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

std::runtime_error *quasar::ptt::TooManyTokensError::TooManyTokensError(std::runtime_error *this, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(this, a2);
  result->__vftable = (std::runtime_error_vtbl *)&unk_1E5D3B6E0;
  return result;
}

void quasar::ptt::TooManyTokensError::~TooManyTokensError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Insert(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  int v6;
  unint64_t v8;
  int v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t result;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;

  v6 = a2;
  v8 = HIDWORD(a2);
  v9 = 73244475 * ((73244475 * (a2 ^ ((int)a2 >> 16))) ^ ((int)(73244475 * (a2 ^ ((int)a2 >> 16))) >> 16));
  v10 = (((v9 ^ (v9 >> 16)) - 1640531527) ^ 3u) + 192;
  v11 = 73244475 * ((73244475 * ((a2 >> 48) ^ HIDWORD(a2))) ^ ((int)(73244475 * ((a2 >> 48) ^ HIDWORD(a2))) >> 16));
  v12 = ((v11 ^ (v11 >> 16)) - 1640531527 + (v10 << 6) + (v10 >> 2)) ^ v10;
  v13 = 73244475 * ((73244475 * (a3 ^ (a3 >> 16))) ^ ((73244475 * (a3 ^ (a3 >> 16))) >> 16));
  v14 = (((v13 ^ (v13 >> 16)) - 1640531527 + (v12 << 6) + (v12 >> 2)) ^ v12) % a1[2];
  v15 = (uint64_t *)(a1[3] + 16 * v14);
  result = kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::New(a1);
  *(_DWORD *)result = v6;
  *(_DWORD *)(result + 4) = v8;
  *(_DWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 12) = a4;
  v17 = v15 + 1;
  v18 = v15[1];
  if (v18)
  {
    *(_QWORD *)(result + 16) = *(_QWORD *)(v18 + 16);
    *(_QWORD *)(v18 + 16) = result;
    *v17 = result;
  }
  else
  {
    v19 = a1[1];
    v20 = a1;
    if (v19 != -1)
      v20 = (uint64_t *)(*(_QWORD *)(a1[3] + 16 * v19 + 8) + 16);
    *v20 = result;
    *(_QWORD *)(result + 16) = 0;
    *v17 = result;
    *v15 = v19;
    a1[1] = v14;
  }
  return result;
}

uint64_t kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::New(_QWORD *a1)
{
  uint64_t result;
  char **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  result = a1[6];
  if (!result)
  {
    v3 = (char **)(a1 + 7);
    do
    {
      v4 = operator new[]();
      v5 = v4;
      for (i = 0; i != 24576; i += 24)
      {
        v7 = v4 + i;
        *(_QWORD *)v7 = 0;
        *(_DWORD *)(v7 + 8) = 0;
      }
      v8 = -24552;
      do
      {
        *(_QWORD *)(v4 + v8 + 24568) = v4 + v8 + 24576;
        v8 += 24;
      }
      while (v8);
      *(_QWORD *)(v4 + 24568) = 0;
      a1[6] = v4;
      v10 = (uint64_t *)a1[8];
      v9 = a1[9];
      if ((unint64_t)v10 >= v9)
      {
        v12 = ((char *)v10 - *v3) >> 3;
        if ((unint64_t)(v12 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v13 = v9 - (_QWORD)*v3;
        v14 = v13 >> 2;
        if (v13 >> 2 <= (unint64_t)(v12 + 1))
          v14 = v12 + 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 9), v15);
        else
          v16 = 0;
        v17 = (uint64_t *)&v16[8 * v12];
        *v17 = v5;
        v11 = v17 + 1;
        v19 = (char *)a1[7];
        v18 = (char *)a1[8];
        if (v18 != v19)
        {
          do
          {
            v20 = *((_QWORD *)v18 - 1);
            v18 -= 8;
            *--v17 = v20;
          }
          while (v18 != v19);
          v18 = *v3;
        }
        a1[7] = v17;
        a1[8] = v11;
        a1[9] = &v16[8 * v15];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v10 = v4;
        v11 = v10 + 1;
      }
      a1[8] = v11;
      result = a1[6];
    }
    while (!result);
  }
  a1[6] = *(_QWORD *)(result + 16);
  return result;
}

void quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>::push_back(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v4;
  float v6;
  float v7;
  uint64_t **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  _BYTE v17[12];

  *(_QWORD *)v17 = a2;
  *(_DWORD *)&v17[8] = a3;
  *(_QWORD *)&v16 = a2;
  DWORD2(v16) = a3;
  v4 = a1[3];
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  v6 = (*(float (**)(uint64_t, __int128 *))(*(_QWORD *)v4 + 48))(v4, &v16);
  v7 = v6;
  v8 = (uint64_t **)(a1 + 5);
  if (a1[7] < a1[4])
  {
    v9 = *(_QWORD *)&v17[4];
    v10 = LODWORD(v6) | (unint64_t)(a2 << 32);
LABEL_10:
    *(_QWORD *)&v16 = v10;
    *((_QWORD *)&v16 + 1) = v9;
    std::__tree<std::pair<float,std::pair<int,std::pair<int,int>>>>::__emplace_unique_key_args<std::pair<float,std::pair<int,std::pair<int,int>>>,std::pair<float,std::pair<int,std::pair<int,int>>>>(v8, (uint64_t)&v16, &v16);
    return;
  }
  v13 = a1[6];
  v12 = a1 + 6;
  v11 = v13;
  if (v13)
  {
    do
    {
      v14 = v11;
      v11 = *(_QWORD *)(v11 + 8);
    }
    while (v11);
  }
  else
  {
    do
    {
      v14 = v12[2];
      v15 = *(_QWORD *)v14 == (_QWORD)v12;
      v12 = (_QWORD *)v14;
    }
    while (v15);
  }
  if (v6 < *(float *)(v14 + 28))
  {
    std::__tree<std::string>::__remove_node_pointer(v8, (uint64_t *)v14);
    operator delete((void *)v14);
    v9 = *(_QWORD *)&v17[4];
    v10 = LODWORD(v7) | ((unint64_t)*(unsigned int *)v17 << 32);
    goto LABEL_10;
  }
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessArc<true,true>(uint64_t a1, int a2, float a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int *a8, int a9, int *a10, uint64_t *a11, float *a12)
{
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  BOOL v26;
  float v27;
  float v29;
  unint64_t v30;
  uint64_t v31;
  float v32;
  BOOL v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  if (quasar::gLogLevel >= 6)
  {
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Evaluating to expand path with graph arc ", 41);
    v20 = quasar::ptt::operator<<(v19, (uint64_t)a8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" w.r.t. observation ", 20);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)".", 1);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v39);
  }
  v22 = *((float *)a8 + 2);
  v23 = *(float *)(a1 + 24) * v22;
  if (a6)
  {
    v24 = NAN;
    if (v23 != -INFINITY)
    {
      v25 = *(float *)(a7 + 16);
      if (v25 != -INFINITY)
      {
        v26 = v25 == INFINITY || v23 == INFINITY;
        v27 = v23 + v25;
        if (v26)
          v24 = INFINITY;
        else
          v24 = v27;
      }
    }
    if (!a9)
      goto LABEL_18;
  }
  else
  {
    v24 = *(float *)(a1 + 24) * v22;
    if (!a9)
      goto LABEL_18;
  }
  if (*(_BYTE *)(a1 + 28) && v24 > a3)
    return 0;
LABEL_18:
  v29 = *(float *)(*(_QWORD *)(a1 + 56) + 4 * *(_DWORD *)(a1 + 72) * a2 + 4 * *a8);
  if (quasar::gLogLevel >= 6)
  {
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"symbolDistanceArc.weight.Value()=", 33);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v39);
  }
  LODWORD(v39) = 0;
  *(_QWORD *)((char *)&v39 + 4) = *(_QWORD *)(a8 + 3);
  v30 = v39;
  v31 = HIDWORD(*(_QWORD *)((char *)&v39 + 4));
  v32 = NAN;
  if (v24 == -INFINITY
    || v29 == -INFINITY
    || (v29 != INFINITY ? (v33 = v24 == INFINITY) : (v33 = 1), !v33 ? (v32 = v24 + v29) : (v32 = INFINITY), v32 >= a3))
  {
    if (quasar::gLogLevel >= 6)
    {
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v39 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Dropping path due to cut-off.", 29);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v39);
    }
    v35 = 0;
  }
  else
  {
    if (quasar::gLogLevel >= 6)
    {
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v39 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Expanding path with nextState=", 30);
      quasar::ptt::operator<<(v34);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v39);
    }
    v35 = quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::Frontier::Expand((uint64_t *)(a1 + 280), a6, a2, *a8, a8[1], v30, v31, v32, v29 + *(float *)(a7 + 20));
  }
  if (a10)
  {
    v36 = HIDWORD(v30);
    if (v35)
      v37 = v30;
    else
      v37 = -1;
    if (!v35)
      LODWORD(v36) = -1;
    *a10 = v37;
    a10[1] = v36;
    if (v35)
      v38 = v31;
    else
      v38 = -1;
    a10[2] = v38;
  }
  if (a11)
    *a11 = v35;
  if (a12)
    *a12 = v32;
  return 1;
}

void sub_1ADF88494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)va);
  _Unwind_Resume(a1);
}

char *std::__tree<std::pair<float,std::pair<int,std::pair<int,int>>>>::__emplace_unique_key_args<std::pair<float,std::pair<int,std::pair<int,int>>>,std::pair<float,std::pair<int,std::pair<int,int>>>>(uint64_t **a1, uint64_t a2, _OWORD *a3)
{
  void **v5;
  char *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::pair<float,std::pair<int,std::pair<int,int>>>>::__find_equal<std::pair<float,std::pair<int,std::pair<int,int>>>>((uint64_t)a1, &v9, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v6 + 28) = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

_QWORD *std::__tree<std::pair<float,std::pair<int,std::pair<int,int>>>>::__find_equal<std::pair<float,std::pair<int,std::pair<int,int>>>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (uint64_t)v4 + 28;
        if (!std::less<std::pair<float,std::pair<int,std::pair<int,int>>>>::operator()[abi:ne180100](v7, a3, (uint64_t)v4 + 28))break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::pair<float,std::pair<int,std::pair<int,int>>>>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

BOOL std::less<std::pair<float,std::pair<int,std::pair<int,int>>>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;

  if (*(float *)a2 < *(float *)a3)
    return 1;
  if (*(float *)a3 < *(float *)a2)
    return 0;
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_DWORD *)(a3 + 4);
  if (v3 < v4)
    return 1;
  if (v4 < v3)
    return 0;
  v5 = *(_DWORD *)(a2 + 8);
  v6 = *(_DWORD *)(a3 + 8);
  if (v5 < v6)
    return 1;
  return v6 >= v5 && *(_DWORD *)(a2 + 12) < *(_DWORD *)(a3 + 12);
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::Frontier::Expand(uint64_t *a1, int a2, int a3, int a4, int a5, unint64_t a6, int a7, float a8, float a9)
{
  int v11;
  int v12;
  uint64_t *v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t i;
  int v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t j;
  uint64_t v45;
  uint64_t v46;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  int v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  std::runtime_error *exception;
  int v69;
  int v70;
  int v71;
  int v73;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  unint64_t v92;
  int v93;

  v11 = a4;
  v12 = a3;
  v92 = a6;
  v93 = a7;
  v17 = a1 + 2;
  v18 = HIDWORD(a6);
  v19 = 73244475 * ((73244475 * (a6 ^ ((int)a6 >> 16))) ^ ((int)(73244475 * (a6 ^ ((int)a6 >> 16))) >> 16));
  v20 = (((v19 ^ (v19 >> 16)) - 1640531527) ^ 3u) + 192;
  v21 = 73244475
      * ((73244475 * (HIDWORD(a6) ^ (SHIDWORD(a6) >> 16))) ^ ((73244475 * (HIDWORD(a6) ^ (SHIDWORD(a6) >> 16))) >> 16));
  v22 = ((v21 ^ (v21 >> 16)) - 1640531527 + (v20 << 6) + (v20 >> 2)) ^ v20;
  v23 = (73244475 * (a7 ^ (a7 >> 16))) ^ ((73244475 * (a7 ^ (a7 >> 16))) >> 16);
  v24 = (((73244475 * v23) ^ ((73244475 * v23) >> 16)) - 1640531527 + (v22 << 6) + (v22 >> 2)) ^ v22;
  v25 = a1[5];
  v26 = v24 % a1[4];
  v27 = *(_QWORD *)(v25 + 16 * v26 + 8);
  if (v27)
  {
    v28 = *(_QWORD *)(v25 + 16 * v26);
    v29 = a1 + 2;
    if (v28 != -1)
      v29 = (uint64_t *)(*(_QWORD *)(v25 + 16 * v28 + 8) + 16);
    v30 = *(_QWORD *)(v27 + 16);
    for (i = *v29; ; i = *(_QWORD *)(i + 16))
    {
      if (i == v30)
        goto LABEL_12;
      if (*(_DWORD *)i == (_DWORD)a6 && *(_DWORD *)(i + 4) == HIDWORD(a6) && *(_DWORD *)(i + 8) == a7)
        break;
    }
    v48 = *(_DWORD *)(i + 12);
    if (v48)
    {
      v49 = *(_QWORD *)(*a1 + 8);
      if (quasar::gLogLevel >= 6)
      {
        v70 = a5;
        v90 = 0u;
        v91 = 0u;
        v88 = 0u;
        v89 = 0u;
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v75 = 0u;
        v50 = v49;
        v51 = v48;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
        v69 = v51;
        v49 = v50;
        v52 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" ", 1);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v75);
        a5 = v70;
        v11 = a4;
        v48 = v69;
        v12 = a3;
      }
      if (*(float *)(v49 + 36 * v48 + 16) <= a8)
      {
        if (quasar::gLogLevel >= 6)
        {
          v90 = 0u;
          v91 = 0u;
          v88 = 0u;
          v89 = 0u;
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          v82 = 0u;
          v83 = 0u;
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v75 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
          v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Skipping path replacement for state ", 36);
          v61 = quasar::ptt::operator<<(v60);
          v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)" since cost of new candidate ", 29);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"(", 1);
          v63 = (_QWORD *)std::ostream::operator<<();
          v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)") exceeds cost of existing candidate ", 37);
          v65 = quasar::ptt::operator<<(v64);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)".", 1);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v75);
        }
        return 0;
      }
      if (quasar::gLogLevel >= 6)
      {
        v71 = a5;
        v73 = v11;
        v90 = 0u;
        v91 = 0u;
        v88 = 0u;
        v89 = 0u;
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v75 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
        v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Replacing existing path for state ", 34);
        v54 = quasar::ptt::operator<<(v53);
        v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" with new path due to lower cost ", 33);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"(", 1);
        v56 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" vs. ", 5);
        v57 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)").", 2);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v75);
        a5 = v71;
        v11 = v73;
      }
      v37 = *a1;
      v38 = *(_QWORD *)(*a1 + 16);
      v58 = v38 + 1;
      if ((unint64_t)(v38 + 1) >= *(_QWORD *)*a1)
        goto LABEL_52;
LABEL_46:
      v39 = 0;
      *(_QWORD *)(v37 + 16) = v58;
      if ((v38 & 0x80000000) != 0)
        return 0;
      goto LABEL_16;
    }
    if (quasar::gLogLevel >= 6)
    {
      v59 = a5;
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v75 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Expanding search with initial path.", 35);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v75);
      a5 = v59;
      v11 = a4;
    }
    v37 = *a1;
    v38 = *(_QWORD *)(*a1 + 16);
    v58 = v38 + 1;
    if ((unint64_t)(v38 + 1) < *(_QWORD *)*a1)
      goto LABEL_46;
LABEL_52:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    quasar::ptt::TooManyTokensError::TooManyTokensError(exception, "Ran out of token storage");
  }
LABEL_12:
  if (quasar::gLogLevel >= 6)
  {
    v34 = a5;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v75 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Expanding search with path leading to state ", 44);
    v36 = quasar::ptt::operator<<(v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)".", 1);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v75);
    a5 = v34;
    v11 = a4;
  }
  v37 = *a1;
  v38 = *(_QWORD *)(*a1 + 16);
  if ((unint64_t)(v38 + 1) >= *(_QWORD *)*a1)
    goto LABEL_52;
  i = 0;
  *(_QWORD *)(v37 + 16) = v38 + 1;
  v39 = 1;
  if ((v38 & 0x80000000) != 0)
    return 0;
LABEL_16:
  v40 = *(_QWORD *)(v37 + 8) + 36 * v38;
  *(_DWORD *)v40 = a2;
  *(_DWORD *)(v40 + 4) = v12;
  *(_DWORD *)(v40 + 8) = v11;
  *(_DWORD *)(v40 + 12) = a5;
  *(float *)(v40 + 16) = a8;
  *(float *)(v40 + 20) = a9;
  *(_DWORD *)(v40 + 24) = a6;
  *(_DWORD *)(v40 + 28) = v18;
  *(_DWORD *)(v40 + 32) = a7;
  if ((v39 & 1) != 0)
    kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Insert(v17, a6, a7, v38);
  else
    *(_DWORD *)(i + 12) = v38;
  ++a1[12];
  if (quasar::gLogLevel >= 6)
  {
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v75 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"New partial path: ", 18);
    quasar::ptt::operator<<(v41);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v75);
  }
  if (a8 < *((float *)a1 + 28))
  {
    *((float *)a1 + 28) = a8;
    v42 = a1[5];
    v43 = v24 % a1[4];
    j = *(_QWORD *)(v42 + 16 * v43 + 8);
    if (j)
    {
      v45 = *(_QWORD *)(v42 + 16 * v43);
      if (v45 != -1)
        v17 = (uint64_t *)(*(_QWORD *)(v42 + 16 * v45 + 8) + 16);
      v46 = *(_QWORD *)(j + 16);
      for (j = *v17; j != v46; j = *(_QWORD *)(j + 16))
      {
        if (*(_DWORD *)j == (_DWORD)a6 && *(_DWORD *)(j + 4) == (_DWORD)v18 && *(_DWORD *)(j + 8) == a7)
          goto LABEL_34;
      }
      j = 0;
    }
LABEL_34:
    a1[13] = j;
  }
  return v40;
}

void sub_1ADF88CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;

  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::Frontier::NextIteration(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _OWORD v13[17];

  v3 = *(_QWORD *)(a1 + 24);
  if (v3 != -1)
  {
    v4 = *(_QWORD *)(a1 + 40);
    do
    {
      v5 = (uint64_t *)(v4 + 16 * v3);
      v5[1] = 0;
      v3 = *v5;
    }
    while (v3 != -1);
  }
  v7 = (_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = -1;
  v9 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v9;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 112);
  v10 = (unint64_t)(float)(*(float *)(a1 + 8) * (float)v6);
  if (*(_QWORD *)(a1 + 32) < v10)
  {
    if (quasar::gLogLevel >= 6)
    {
      memset(v13, 0, sizeof(v13));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Expand hash list number of buckets from ", 40);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" to ", 4);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)".", 1);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v13);
    }
    kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize(a1 + 16, v10);
  }
  *v7 = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 2139095040;
}

void sub_1ADF88E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a9);
  _Unwind_Resume(a1);
}

char *quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *result;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a2)
  {
    v5 = a2;
    v6 = 0;
    v7 = a3 + 2;
    do
    {
      if ((unint64_t)v6 >= *v7)
      {
        v8 = (uint64_t)&v6[-*a3] >> 3;
        if ((unint64_t)(v8 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v9 = *v7 - *a3;
        v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1))
          v10 = v8 + 1;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), v11);
        else
          v12 = 0;
        v13 = &v12[8 * v8];
        *(_QWORD *)v13 = v5;
        v6 = v13 + 8;
        v15 = (char *)*a3;
        v14 = (char *)a3[1];
        if (v14 != (char *)*a3)
        {
          do
          {
            v16 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          v14 = (char *)*a3;
        }
        *a3 = v13;
        a3[1] = v6;
        a3[2] = &v12[8 * v11];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_QWORD *)v6 = v5;
        v6 += 8;
      }
      a3[1] = v6;
      v5 = *(_QWORD *)(v5 + 16);
    }
    while (v5);
    v17 = (char *)*a3;
  }
  else
  {
    v17 = 0;
    v6 = 0;
  }
  v18 = *(int *)(a1 + 12);
  if ((_DWORD)v18)
  {
    v19 = (v6 - v17) >> 3;
    if (v19 > v18)
    {
      v28 = a1 + 128;
      result = std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem *)::{lambda(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*)#1} &,std::__wrap_iter<kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>,std::__wrap_iter<kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>>(v17, &v17[8 * v18], v6, &v28);
      v21 = (uint64_t *)a3[1];
      v22 = *a3 + 8 * v18;
      if ((uint64_t *)v22 != v21)
      {
        v23 = *(_QWORD *)(a1 + 344);
        v24 = (uint64_t *)(*a3 + 8 * v18);
        do
        {
          v25 = *v24++;
          *(_QWORD *)(v25 + 16) = v23;
          *(_QWORD *)(a1 + 344) = v25;
          v23 = v25;
        }
        while (v24 != v21);
        a3[1] = v22;
      }
      return result;
    }
  }
  else
  {
    v19 = (v6 - v17) >> 3;
  }
  v26 = 126 - 2 * __clz(v19);
  if (v6 == v17)
    v27 = 0;
  else
    v27 = v26;
  return (char *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **,false>((uint64_t)v17, (unint64_t *)v6, (uint64_t)&v29, v27, 1);
}

void sub_1ADF8901C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ComputeNextWeightCutoffUpperBound(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v3;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  BOOL v21;
  float v22;
  unsigned int v23;
  int v24;
  int *v25;
  int v26;
  __int128 v28;
  int v29;
  _OWORD v31[17];
  float v32;
  _BYTE v33[12];

  v3 = (unint64_t)"TropicalWeightTplIfEEiEENS_24DefaultReplaceStateTableIS5_lEENS_17DefaultCacheStoreIS5_EEEEEE";
  if (!a2)
    return 1.0e10;
  *(_QWORD *)v33 = *(_QWORD *)a2;
  v29 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)&v33[8] = *(_DWORD *)(a2 + 8);
  v5 = *(float *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)&v33[4];
  v8 = *(_QWORD *)(a1 + 120);
  v9 = HIDWORD(*(_QWORD *)&v33[4]);
  if (v8)
  {
    v11 = *(_QWORD *)(v8 + 48);
    v10 = v8 + 48;
    *(_DWORD *)(v10 - 32) = *(_DWORD *)&v33[4];
    *(_DWORD *)(v10 - 28) = v9;
    *(_DWORD *)(v10 - 24) = v9;
    (*(void (**)(void))(v11 + 16))();
  }
  else
  {
    v28 = *(_OWORD *)(a1 + 96);
    v12 = operator new();
    *(_OWORD *)v12 = v28;
    *(_QWORD *)(v12 + 16) = v7;
    *(_DWORD *)(v12 + 24) = v9;
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::ArcIterator(v12 + 48, v28, v7);
    *(_DWORD *)(v12 + 124) = 0;
    *(_DWORD *)(v12 + 128) = 0;
    v13 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v12;
    if (v13)
      MEMORY[0x1AF44D190](v13, 0x10E0C4059286A48);
  }
  v14 = *(_QWORD *)(a1 + 120);
  if (*(_QWORD *)(v14 + 96) >= *(_QWORD *)(v14 + 88))
    return 1.0e10;
  v15 = *(_QWORD *)v33;
  v16 = 1.0e10;
  while (1)
  {
    v17 = *(unsigned int *)(v14 + 76);
    if ((_DWORD)v17)
    {
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v14 + 8) + 32))(*(_QWORD *)(v14 + 8), *(unsigned int *)(v14 + 24), v17, v14 + 28);
      v18 = *(float *)(v14 + 80);
      v19 = NAN;
      if (v18 != -INFINITY)
      {
        v20 = *(float *)(v14 + 36);
        v19 = NAN;
        if (v20 != -INFINITY)
        {
          v19 = INFINITY;
          v21 = v20 == INFINITY || v18 == INFINITY;
          v22 = v18 + v20;
          if (!v21)
            v19 = v22;
        }
      }
      v23 = *(_DWORD *)(v14 + 72);
      v24 = *(_DWORD *)(v14 + 32);
      *(_DWORD *)(v14 + 112) = v23;
      *(_DWORD *)(v14 + 116) = v24;
      v25 = (int *)(v14 + 40);
    }
    else
    {
      v23 = *(_DWORD *)(v14 + 72);
      *(_QWORD *)(v14 + 112) = v23;
      v19 = *(float *)(v14 + 80);
      v25 = (int *)(v14 + 24);
    }
    *(float *)(v14 + 120) = v19;
    v26 = *v25;
    *(_DWORD *)(v14 + 124) = *(_DWORD *)(v14 + 84);
    *(_DWORD *)(v14 + 128) = v26;
    if (!v23)
      goto LABEL_22;
    v3 = v3 & 0xFFFFFFFF00000000 | v9;
    if ((quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessArc<true,false>(a1, a3, v16, v15, v3, v29, v6 + 36 * v29, (float *)(v14 + 112), 1, 0, 0, &v32) & 1) == 0)break;
    if ((float)(v5 + v32) < v16)
      v16 = v5 + v32;
LABEL_22:
    ++*(_QWORD *)(v14 + 96);
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(v14 + 48);
    if (*(_QWORD *)(v14 + 96) >= *(_QWORD *)(v14 + 88))
      return v16;
  }
  if (quasar::gLogLevel >= 6)
  {
    memset(v31, 0, sizeof(v31));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Exiting arc-loop early.", 23);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v31);
  }
  return v16;
}

void sub_1ADF8931C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessArc<false,true>(uint64_t a1, int a2, uint64_t a3, int a4, int a5, uint64_t a6, float a7, uint64_t a8, int a9, int *a10, uint64_t *a11, float *a12)
{
  _QWORD *v18;
  float v19;
  float v20;
  float v21;
  float v23;
  unint64_t v24;
  uint64_t v25;
  float v26;
  BOOL v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[12];

  *(_QWORD *)v50 = a3;
  *(_DWORD *)&v50[8] = a4;
  if (quasar::gLogLevel >= 6)
  {
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v33 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Evaluating to expand path where we ignore observation ", 54);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)".", 1);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v33);
  }
  if (a5)
  {
    v19 = *(float *)(a6 + 16);
    v20 = v19 + 0.0;
    if (v19 == INFINITY)
      v20 = INFINITY;
    if (v19 == -INFINITY)
      v20 = NAN;
    v21 = v20;
    if (!a9)
      goto LABEL_14;
  }
  else
  {
    v21 = 0.0;
    if (!a9)
      goto LABEL_14;
  }
  if (*(_BYTE *)(a1 + 28) && v21 > a7)
    return 0;
LABEL_14:
  v23 = *(float *)(*(_QWORD *)(a1 + 56) + 4 * *(_DWORD *)(a1 + 72) * a2);
  if (quasar::gLogLevel >= 6)
  {
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v33 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"symbolDistanceArc.weight.Value()=", 33);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v33);
  }
  LODWORD(v33) = 0;
  *(_QWORD *)((char *)&v33 + 4) = *(_QWORD *)&v50[4];
  v24 = v33;
  v25 = HIDWORD(*(_QWORD *)&v50[4]);
  v26 = NAN;
  if (v21 == -INFINITY
    || v23 == -INFINITY
    || (v23 != INFINITY ? (v27 = v21 == INFINITY) : (v27 = 1), !v27 ? (v26 = v21 + v23) : (v26 = INFINITY), v26 >= a7))
  {
    if (quasar::gLogLevel >= 6)
    {
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v33 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Dropping path due to cut-off.", 29);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v33);
    }
    v29 = 0;
  }
  else
  {
    if (quasar::gLogLevel >= 6)
    {
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v33 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Expanding path with nextState=", 30);
      quasar::ptt::operator<<(v28);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v33);
    }
    v29 = quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::Frontier::Expand((uint64_t *)(a1 + 280), a5, a2, 0, 0, v24, v25, v26, v23 + *(float *)(a6 + 20));
  }
  if (a10)
  {
    v30 = HIDWORD(v24);
    if (v29)
      v31 = v24;
    else
      v31 = -1;
    if (!v29)
      LODWORD(v30) = -1;
    *a10 = v31;
    a10[1] = v30;
    if (v29)
      v32 = v25;
    else
      v32 = -1;
    a10[2] = v32;
  }
  if (a11)
    *a11 = v29;
  if (a12)
    *a12 = v26;
  return 1;
}

void sub_1ADF89694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)va);
  _Unwind_Resume(a1);
}

char *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem *)::{lambda(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*)#1} &,std::__wrap_iter<kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>,std::__wrap_iter<kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>>(char *a1, char *a2, char *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[8 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem *)::{lambda(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*)#1} &,std::__wrap_iter<kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>>((uint64_t)a1, a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    if (a2 == a3)
    {
      a3 = a2;
    }
    else
    {
      v13 = a2;
      do
      {
        v14 = *(_QWORD *)v13;
        if (*(float *)(*(_QWORD *)(*a4 + 8) + 36 * *(int *)(*(_QWORD *)v13 + 12) + 16) < *(float *)(*(_QWORD *)(*a4 + 8) + 36 * *(int *)(*(_QWORD *)a1 + 12) + 16))
        {
          *(_QWORD *)v13 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v14;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem *)::{lambda(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*)#1} &,std::__wrap_iter<kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>>((uint64_t)a1, a4, v9, a1);
        }
        v13 += 8;
      }
      while (v13 != a3);
    }
    if (v8 >= 9)
    {
      v15 = (unint64_t)v8 >> 3;
      v16 = a2 - 8;
      do
      {
        v17 = *(_QWORD *)a1;
        v18 = (char *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem *)::{lambda(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*)#1} &,std::__wrap_iter<kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>>(a1, (uint64_t)a4, v15);
        if (v16 == v18)
        {
          *(_QWORD *)v18 = v17;
        }
        else
        {
          *(_QWORD *)v18 = *(_QWORD *)v16;
          *(_QWORD *)v16 = v17;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem *)::{lambda(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*)#1} &,std::__wrap_iter<kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>>((uint64_t)a1, (uint64_t)(v18 + 8), (uint64_t)a4, (v18 + 8 - a1) >> 3);
        }
        v16 -= 8;
      }
      while (v15-- > 2);
    }
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem *)::{lambda(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*)#1} &,std::__wrap_iter<kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>>(uint64_t result, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) | 1;
      v8 = (_QWORD *)(result + 8 * v7);
      v9 = v6 + 2;
      v10 = *a2;
      if (v9 >= a3)
      {
        v11 = *(_QWORD *)(v10 + 8);
      }
      else
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (*(float *)(v11 + 36 * *(int *)(*v8 + 12) + 16) < *(float *)(v11 + 36 * *(int *)(v8[1] + 12) + 16))
        {
          ++v8;
          v7 = v9;
        }
      }
      v12 = *v8;
      v13 = *a4;
      v14 = *(_DWORD *)(*a4 + 12);
      if (*(float *)(v11 + 36 * *(int *)(*v8 + 12) + 16) >= *(float *)(v11 + 36 * v14 + 16))
      {
        do
        {
          *a4 = v12;
          a4 = v8;
          if (v5 < v7)
            break;
          v15 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (_QWORD *)(result + 8 * v7);
          v16 = v15 + 2;
          v17 = *a2;
          if (v16 >= a3)
          {
            v18 = *(_QWORD *)(v17 + 8);
          }
          else
          {
            v18 = *(_QWORD *)(v17 + 8);
            if (*(float *)(v18 + 36 * *(int *)(*v8 + 12) + 16) < *(float *)(v18 + 36 * *(int *)(v8[1] + 12) + 16))
            {
              ++v8;
              v7 = v16;
            }
          }
          v12 = *v8;
        }
        while (*(float *)(v18 + 36 * *(int *)(*v8 + 12) + 16) >= *(float *)(v18 + 36 * v14 + 16));
        *a4 = v13;
      }
    }
  }
  return result;
}

_QWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem *)::{lambda(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*)#1} &,std::__wrap_iter<kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>>(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = result;
    result += v3 + 1;
    v7 = 2 * v3;
    v3 = (2 * v3) | 1;
    v8 = v7 + 2;
    if (v8 < a3
      && *(float *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 36 * *(int *)(*result + 12) + 16) < *(float *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 36 * *(int *)(result[1] + 12) + 16))
    {
      ++result;
      v3 = v8;
    }
    *v6 = *result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem *)::{lambda(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*)#1} &,std::__wrap_iter<kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (_QWORD *)(result + 8 * v4);
    v6 = *v5;
    v9 = *(_QWORD *)(a2 - 8);
    v7 = (_QWORD *)(a2 - 8);
    v8 = v9;
    v10 = *(_DWORD *)(v9 + 12);
    if (*(float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 36 * *(int *)(*v5 + 12) + 16) < *(float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 36 * v10 + 16))
    {
      do
      {
        v11 = v5;
        *v7 = v6;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (_QWORD *)(result + 8 * v4);
        v6 = *v5;
        v7 = v11;
      }
      while (*(float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 36 * *(int *)(*v5 + 12) + 16) < *(float *)(*(_QWORD *)(*(_QWORD *)a3 + 8) + 36 * v10 + 16));
      *v11 = v8;
    }
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **,false>(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  char v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  BOOL v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;

  v8 = (unint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (v20 < *v9)
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v9, v9 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v12 > 191)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**,fst::LatticeStringRepository<int>::Entry const**>(v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v9, &v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v9 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v9 + 2, &v9[v14 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(v15 - 1, v15, &v9[v14 + 1]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v9 - 1) >= *v9)
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeStringRepository<int>::Entry const**,std::__less<void,void> &>(v9, (uint64_t *)a2);
            v9 = (unint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,fst::LatticeStringRepository<int>::Entry const**,std::__less<void,void> &>(v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>(v9, v17);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>(v17 + 1, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        v22 = v9 + 1;
        v24 = v9 == a2 || v22 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v24)
          {
            v25 = 0;
            v26 = v9;
            do
            {
              v28 = *v26;
              v27 = v26[1];
              v26 = v22;
              if (v27 < v28)
              {
                v29 = v25;
                while (1)
                {
                  *(unint64_t *)((char *)v9 + v29 + 8) = v28;
                  if (!v29)
                    break;
                  v28 = *(unint64_t *)((char *)v9 + v29 - 8);
                  v29 -= 8;
                  if (v27 >= v28)
                  {
                    v30 = (unint64_t *)((char *)v9 + v29 + 8);
                    goto LABEL_42;
                  }
                }
                v30 = v9;
LABEL_42:
                *v30 = v27;
              }
              v22 = v26 + 1;
              v25 += 8;
            }
            while (v26 + 1 != a2);
          }
        }
        else if (!v24)
        {
          do
          {
            v32 = *v8;
            v31 = v8[1];
            v8 = v22;
            if (v31 < v32)
            {
              do
              {
                *v22 = v32;
                v32 = *(v22 - 2);
                --v22;
              }
              while (v31 < v32);
              *v22 = v31;
            }
            v22 = v8 + 1;
          }
          while (v8 + 1 != a2);
        }
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,fst::LatticeStringRepository<int>::Entry const**>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(unint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 >= v13)
        {
          v16 = (unint64_t *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessArc<true,false>(uint64_t a1, int a2, float a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, float *a8, int a9, uint64_t a10, uint64_t a11, float *a12)
{
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  BOOL v26;
  float v27;
  float v29;
  float v30;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  if (quasar::gLogLevel >= 6)
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Evaluating to expand path with graph arc ", 41);
    v20 = quasar::ptt::operator<<(v19, (uint64_t)a8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" w.r.t. observation ", 20);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)".", 1);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v32);
  }
  v22 = a8[2];
  v23 = *(float *)(a1 + 24) * v22;
  if (a6)
  {
    v24 = NAN;
    if (v23 != -INFINITY)
    {
      v25 = *(float *)(a7 + 16);
      if (v25 != -INFINITY)
      {
        v26 = v25 == INFINITY || v23 == INFINITY;
        v27 = v23 + v25;
        if (v26)
          v24 = INFINITY;
        else
          v24 = v27;
      }
    }
    if (!a9)
      goto LABEL_18;
  }
  else
  {
    v24 = *(float *)(a1 + 24) * v22;
    if (!a9)
      goto LABEL_18;
  }
  if (*(_BYTE *)(a1 + 28) && v24 > a3)
    return 0;
LABEL_18:
  v29 = *(float *)(*(_QWORD *)(a1 + 56) + 4 * *(_DWORD *)(a1 + 72) * a2 + 4 * *(int *)a8);
  if (quasar::gLogLevel >= 6)
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"symbolDistanceArc.weight.Value()=", 33);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v32);
  }
  v30 = NAN;
  if (v24 != -INFINITY && v29 != -INFINITY)
  {
    if (v29 == INFINITY || v24 == INFINITY)
      v30 = INFINITY;
    else
      v30 = v24 + v29;
  }
  if (a12)
    *a12 = v30;
  return 1;
}

void sub_1ADF8A1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::emplace_back<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD v18[5];

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = ((uint64_t)v7 - *a1) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v5 - *a1;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v18[4] = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v4, v13);
    else
      v14 = 0;
    v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v13];
    v16 = *(_QWORD *)(a2 + 8);
    *((_QWORD *)v15 + 1) = v16;
    ++*(_DWORD *)(v16 + 56);
    *(_QWORD *)v15 = &unk_1E5D28830;
    v18[2] = v15 + 16;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::__swap_out_circular_buffer(a1, v18);
    v9 = (_QWORD *)a1[1];
    std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__split_buffer((uint64_t)v18);
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 8);
    v7[1] = v8;
    ++*(_DWORD *)(v8 + 56);
    *v7 = &unk_1E5D28830;
    v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return v9 - 2;
}

void sub_1ADF8A2F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::GetPath@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int *v11;
  float v12;
  float v13;
  float v14;
  BOOL v15;
  float v16;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  float v20;
  uint64_t v21;
  float v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t result;
  float v30[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(a4);
  v7 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::AddState((uint64_t)a4);
  v8 = quasar::gLogLevel;
  if (a2)
  {
    v9 = a2;
    while (1)
    {
      v10 = *(_QWORD *)(a1 + 136);
      v11 = (int *)(v10 + 36 * v9);
      if (v8 >= 6)
      {
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v39 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
        quasar::ptt::operator<<(&v31);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v31);
      }
      if (v9 == a2)
      {
        if (a3)
        {
          v12 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 96) + 32))(*(_QWORD *)(a1 + 96), *(unsigned int *)(v10 + 36 * v9 + 28));
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 104) + 16))(*(_QWORD *)(a1 + 104), *(unsigned int *)(v10 + 36 * v9 + 32));
          v14 = NAN;
          if (v12 != -INFINITY && v13 != -INFINITY)
          {
            v15 = v13 == INFINITY || v12 == INFINITY;
            v16 = v12 + v13;
            if (v15)
              v14 = INFINITY;
            else
              v14 = v16;
          }
          *(float *)&v31 = v14;
          v30[0] = INFINITY;
          v8 = quasar::gLogLevel;
          if (v14 == INFINITY)
            break;
          if (quasar::gLogLevel >= 6)
          {
            v46 = 0u;
            v47 = 0u;
            v44 = 0u;
            v45 = 0u;
            v42 = 0u;
            v43 = 0u;
            v40 = 0u;
            v41 = 0u;
            v39 = 0u;
            v37 = 0u;
            v38 = 0u;
            v35 = 0u;
            v36 = 0u;
            v33 = 0u;
            v34 = 0u;
            v31 = 0u;
            v32 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"finalWeight=", 12);
            std::ostream::operator<<();
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v31);
          }
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck((uint64_t)a4);
          v17 = (uint64_t *)a4[1];
          LODWORD(v31) = 0;
          *((float *)&v31 + 1) = v14;
          fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetFinal(v17, v7, (uint64_t *)&v31);
        }
        else
        {
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck((uint64_t)a4);
          v18 = (uint64_t *)a4[1];
          *(_QWORD *)&v31 = 0;
          fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetFinal(v18, v7, (uint64_t *)&v31);
        }
      }
      v19 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::AddState((uint64_t)a4);
      v20 = *(float *)(v10 + 36 * v9 + 16);
      if (*v11)
      {
        v21 = *(_QWORD *)(a1 + 136) + 36 * *v11;
        v20 = v20 - *(float *)(v21 + 16);
        v22 = *(float *)(v10 + 36 * v9 + 20) - *(float *)(v21 + 20);
      }
      else
      {
        v22 = *(float *)(v10 + 36 * v9 + 20);
      }
      v30[0] = v22;
      v30[1] = v20 - v22;
      *(_QWORD *)&v31 = *(_QWORD *)(v10 + 36 * v9 + 8) | (*(_DWORD *)(v10 + 36 * v9 + 4) << 16);
      *((float *)&v31 + 2) = v22;
      *((float *)&v31 + 3) = v20 - v22;
      LODWORD(v32) = v7;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck((uint64_t)a4);
      fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddArc((_QWORD *)a4[1], v19, (float *)&v31);
      v8 = quasar::gLogLevel;
      if (quasar::gLogLevel >= 6)
      {
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v39 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Arc from ", 9);
        v23 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" to ", 4);
        v24 = (_QWORD *)std::ostream::operator<<();
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" with weight ", 13);
        v26 = fst::operator<<<float>(v25, v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)".", 1);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v31);
        v8 = quasar::gLogLevel;
      }
      v9 = *v11;
      v7 = v19;
      if (!*v11)
        goto LABEL_28;
    }
  }
  v19 = v7;
LABEL_28:
  if (v8 >= 6)
  {
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"pathNextState=", 14);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v31);
  }
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck((uint64_t)a4);
  v27 = a4[1];
  *(_DWORD *)(v27 + 88) = v19;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
  *(_QWORD *)(v27 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(_QWORD *)(v27 + 8) & 4;
  return result;
}

void sub_1ADF8A728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _QWORD *v11;
  _DWORD *v13;
  int v14;

  *v11 = &unk_1E5D25580;
  v13 = (_DWORD *)v11[1];
  if (v13)
  {
    v14 = v13[14] - 1;
    v13[14] = v14;
    if (!v14)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
  }
  _Unwind_Resume(exception_object);
}

void std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<float,int> *>>(uint64_t a1, float *a2, uint64_t a3, float k)
{
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  float v12;
  unint64_t v13;
  uint64_t i;
  float v15;
  unint64_t j;
  float *v17;
  float v18;
  int v19;
  float v20;
  float *v21;
  float v22;
  float v23;
  int v24;
  float *v25;
  float v26;
  int v27;
  int v28;
  float *v29;
  float v30;
  uint64_t v31;
  int v32;
  float *v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  int v39;
  float v40;
  float v41;
  int v42;
  int v43;

  if ((float *)a3 == a2)
    return;
  v4 = a3;
  while (1)
  {
    v7 = (v4 - a1) >> 3;
    if (v7 < 2)
      return;
    if (v7 == 3)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(a1, a1 + 8, v4 - 8);
      return;
    }
    if (v7 == 2)
    {
      v40 = *(float *)(v4 - 8);
      v41 = *(float *)a1;
      if (v40 >= *(float *)a1)
      {
        if (v41 < v40)
          return;
        v43 = *(_DWORD *)(v4 - 4);
        v42 = *(_DWORD *)(a1 + 4);
        if (v43 >= v42)
          return;
      }
      else
      {
        v42 = *(_DWORD *)(a1 + 4);
        v43 = *(_DWORD *)(v4 - 4);
      }
      *(float *)a1 = v40;
      *(float *)(v4 - 8) = v41;
      *(_DWORD *)(a1 + 4) = v43;
      *(_DWORD *)(v4 - 4) = v42;
      return;
    }
    if (v4 - a1 <= 63)
    {
      std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<float,int> *>>(a1, v4, k);
      return;
    }
    v8 = v7 >> 1;
    v9 = a1 + 8 * (v7 >> 1);
    v10 = v4 - 8;
    v11 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *>(a1, v9, v4 - 8);
    k = *(float *)a1;
    v12 = *(float *)v9;
    if (*(float *)a1 < *(float *)v9 || v12 >= k && *(_DWORD *)(a1 + 4) < *(_DWORD *)(a1 + 8 * v8 + 4))
    {
      v13 = v4 - 8;
      goto LABEL_9;
    }
    v13 = v4 - 16;
    if (a1 != v4 - 16)
    {
      while (1)
      {
        v20 = *(float *)v13;
        if (*(float *)v13 < v12 || v12 >= v20 && *(_DWORD *)(v13 + 4) < *(_DWORD *)(a1 + 8 * v8 + 4))
          break;
        v13 -= 8;
        if (v13 == a1)
          goto LABEL_32;
      }
      *(float *)a1 = v20;
      *(float *)v13 = k;
      v32 = *(_DWORD *)(a1 + 4);
      *(_DWORD *)(a1 + 4) = *(_DWORD *)(v13 + 4);
      *(_DWORD *)(v13 + 4) = v32;
      ++v11;
LABEL_9:
      if (a1 + 8 >= v13)
      {
        i = 1;
      }
      else
      {
        for (i = 1; ; ++i)
        {
          v15 = *(float *)v9;
          for (j = a1 + 8 * i; ; j += 8)
          {
            k = *(float *)j;
            if (*(float *)j >= v15 && (v15 < k || *(_DWORD *)(j + 4) >= *(_DWORD *)(v9 + 4)))
              break;
            ++i;
          }
          v17 = (float *)(v13 - 8);
          v18 = *(float *)(v13 - 8);
          if (v18 >= v15)
          {
            do
            {
              if (v15 >= v18 && *(_DWORD *)(v13 - 4) < *(_DWORD *)(v9 + 4))
                break;
              v18 = *(float *)(v13 - 16);
              v13 -= 8;
            }
            while (v18 >= v15);
            v17 = (float *)(v13 - 8);
          }
          if (j >= (unint64_t)v17)
            break;
          *(float *)j = v18;
          *v17 = k;
          v19 = *(_DWORD *)(j + 4);
          *(_DWORD *)(j + 4) = *(_DWORD *)(v13 - 4);
          *(_DWORD *)(v13 - 4) = v19;
          ++v11;
          if (j == v9)
            v9 = (uint64_t)v17;
          v13 = (unint64_t)v17;
        }
      }
      v25 = (float *)(a1 + 8 * i);
      if (v25 == (float *)v9)
        goto LABEL_47;
      k = *(float *)v9;
      v26 = *v25;
      if (*(float *)v9 >= *v25)
      {
        if (v26 < k)
          goto LABEL_47;
        v28 = *(_DWORD *)(v9 + 4);
        v27 = *(_DWORD *)(a1 + 8 * i + 4);
        if (v28 >= v27)
          goto LABEL_47;
      }
      else
      {
        v27 = *(_DWORD *)(a1 + 8 * i + 4);
        v28 = *(_DWORD *)(v9 + 4);
      }
      *v25 = k;
      *(float *)v9 = v26;
      *(_DWORD *)(a1 + 8 * i + 4) = v28;
      *(_DWORD *)(v9 + 4) = v27;
      ++v11;
LABEL_47:
      if (v25 == a2)
        return;
      if (!v11)
      {
        if (v25 <= a2)
        {
          v33 = v25 + 2;
          if (v25 + 2 == (float *)v4)
            return;
          v34 = *v25;
          while (1)
          {
            k = *v33;
            if (*v33 < v34 || v34 >= k && *((_DWORD *)v33 + 1) < *((_DWORD *)v33 - 1))
              break;
            v33 += 2;
            v34 = k;
            if (v33 == (float *)v4)
              return;
          }
        }
        else
        {
          if (i == 1)
            return;
          v29 = (float *)(a1 + 12);
          v30 = *(float *)a1;
          v31 = 8 * i - 8;
          while (1)
          {
            k = *(v29 - 1);
            if (k < v30 || v30 >= k && *(_DWORD *)v29 < *((_DWORD *)v29 - 2))
              break;
            v29 += 2;
            v30 = k;
            v31 -= 8;
            if (!v31)
              return;
          }
        }
      }
      v21 = v25 + 2;
      if (v25 > a2)
      {
        v4 = (uint64_t)v25;
        v21 = (float *)a1;
      }
      goto LABEL_82;
    }
LABEL_32:
    v21 = (float *)(a1 + 8);
    v22 = *(float *)v10;
    if (k >= *(float *)v10 && (v22 < k || *(_DWORD *)(a1 + 4) >= *(_DWORD *)(v4 - 4)))
      break;
LABEL_70:
    if (v21 == (float *)v10)
      return;
    while (1)
    {
      v35 = *(float *)a1;
      for (k = *v21; v35 >= k && (k < v35 || *(_DWORD *)(a1 + 4) >= *((_DWORD *)v21 + 1)); k = v36)
      {
        v36 = v21[2];
        v21 += 2;
      }
      do
      {
        do
        {
          v37 = *(float *)(v10 - 8);
          v10 -= 8;
          v38 = v37;
        }
        while (v35 < v37);
      }
      while (v38 >= v35 && *(_DWORD *)(a1 + 4) < *(_DWORD *)(v10 + 4));
      if ((unint64_t)v21 >= v10)
        break;
      *v21 = v38;
      *(float *)v10 = k;
      v39 = *((_DWORD *)v21 + 1);
      v21[1] = *(float *)(v10 + 4);
      *(_DWORD *)(v10 + 4) = v39;
      v21 += 2;
    }
    if (v21 > a2)
      return;
LABEL_82:
    a1 = (uint64_t)v21;
    if ((float *)v4 == a2)
      return;
  }
  while (v21 != (float *)v10)
  {
    v23 = *v21;
    if (k < *v21)
    {
      v24 = *((_DWORD *)v21 + 1);
LABEL_69:
      *v21 = v22;
      *(float *)(v4 - 8) = v23;
      v21[1] = *(float *)(v4 - 4);
      *(_DWORD *)(v4 - 4) = v24;
      v21 += 2;
      goto LABEL_70;
    }
    if (v23 >= k)
    {
      v24 = *((_DWORD *)v21 + 1);
      if (*(_DWORD *)(a1 + 4) < v24)
        goto LABEL_69;
    }
    v21 += 2;
  }
}

float std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<float,int> *>>(uint64_t a1, uint64_t a2, float result)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  while (a1 != a2 - 8)
  {
    v3 = a1;
    a1 += 8;
    if (v3 != a2 && a1 != a2)
    {
      v4 = a1;
      v5 = v3;
      do
      {
        result = *(float *)v4;
        if (*(float *)v4 < *(float *)v5 || *(float *)v5 >= result && *(_DWORD *)(v4 + 4) < *(_DWORD *)(v5 + 4))
          v5 = v4;
        v4 += 8;
      }
      while (v4 != a2);
      if (v5 != v3)
      {
        result = *(float *)v3;
        *(_DWORD *)v3 = *(_DWORD *)v5;
        *(float *)v5 = result;
        v6 = *(_DWORD *)(v3 + 4);
        *(_DWORD *)(v3 + 4) = *(_DWORD *)(v5 + 4);
        *(_DWORD *)(v5 + 4) = v6;
      }
    }
  }
  return result;
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::DecoderImpl(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  __int128 v6;
  __int128 v7;
  _OWORD v9[17];

  *(_QWORD *)a1 = &unk_1E5CFF2E0;
  v6 = *a2;
  v7 = a2[1];
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 8);
  *(_OWORD *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 48) = &off_1E5D3B708;
  kaldi::Matrix<float>::Matrix(a1 + 56, a3 + 8);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)a4;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a4 + 8);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  quasar::ptt::DynamicArrayPartialPathStorage<quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>>::DynamicArrayPartialPathStorage((unint64_t *)(a1 + 128), *(int *)(a1 + 40));
  quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::operator()(a1, (_OWORD *)(a1 + 152));
  quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::operator()(a1, (_OWORD *)(a1 + 200));
  quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::Frontier::Frontier(a1 + 248, a1 + 128, *(float *)(a1 + 36));
  if (*(_BYTE *)(a1 + 30)
    && *(_BYTE *)(a1 + 28)
    && (quasar::ptt::IsLGGraphValid<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>(*(_QWORD *)(a1 + 96), *(unsigned __int8 *)(a1 + 29)) & 1) == 0)
  {
    memset(v9, 0, sizeof(v9));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"LG failed invariants.", 21);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v9);
  }
  return a1;
}

void sub_1ADF8AE68(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::Frontier::~Frontier(v6);
  std::deque<std::pair<int,std::pair<int,int>>>::~deque[abi:ne180100](v5);
  std::deque<std::pair<int,std::pair<int,int>>>::~deque[abi:ne180100](v4);
  v9 = *(_QWORD *)(v1 + 136);
  if (v9)
    MEMORY[0x1AF44D160](v9, 0x1000C808AA14F5FLL);
  quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::~DynamicGraph(v3);
  *(_QWORD *)(v1 + 48) = v7;
  kaldi::Matrix<float>::~Matrix(v2);
  _Unwind_Resume(a1);
}

double quasar::ptt::ConstructProcessNonEmittingQueue<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::operator()@<D0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  fst *v3;
  _QWORD *v4;
  double result;
  void *__p[2];
  char v7;
  char v8;

  if (*(int *)(a1 + 16) > 0 || *(int *)(a1 + 20) >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v3 = fst::LogMessage::LogMessage((fst *)&v8, (uint64_t)__p);
    v4 = (_QWORD *)fst::cerr(v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Maximum queue size is unsupported for deque queue implementation", 64);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v8);
    if (v7 < 0)
      operator delete(__p[0]);
  }
  result = 0.0;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  return result;
}

void sub_1ADF8AF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::~DecoderImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E5CFF2E0;
  quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::Frontier::~Frontier((uint64_t)(a1 + 31));
  std::deque<std::pair<int,std::pair<int,int>>>::~deque[abi:ne180100](a1 + 25);
  std::deque<std::pair<int,std::pair<int,int>>>::~deque[abi:ne180100](a1 + 19);
  v2 = a1[17];
  if (v2)
    MEMORY[0x1AF44D160](v2, 0x1000C808AA14F5FLL);
  v3 = a1[15];
  a1[15] = 0;
  if (v3)
    MEMORY[0x1AF44D190](v3, 0x10E0C4059286A48);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 13));
  a1[6] = &off_1E5D3B708;
  kaldi::Matrix<float>::~Matrix((uint64_t)(a1 + 7));
  return a1;
}

void quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::~DecoderImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E5CFF2E0;
  quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::Frontier::~Frontier((uint64_t)(a1 + 31));
  std::deque<std::pair<int,std::pair<int,int>>>::~deque[abi:ne180100](a1 + 25);
  std::deque<std::pair<int,std::pair<int,int>>>::~deque[abi:ne180100](a1 + 19);
  v2 = a1[17];
  if (v2)
    MEMORY[0x1AF44D160](v2, 0x1000C808AA14F5FLL);
  v3 = a1[15];
  a1[15] = 0;
  if (v3)
    MEMORY[0x1AF44D190](v3, 0x10E0C4059286A48);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 13));
  a1[6] = &off_1E5D3B708;
  kaldi::Matrix<float>::~Matrix((uint64_t)(a1 + 7));
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::decode(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (***v41)(_QWORD);
  void (***v42)(_QWORD);
  void (**v43)(_QWORD);
  BOOL v44;
  std::runtime_error *exception;
  unint64_t v47;
  uint64_t *v48;
  void *__p[2];
  char v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _QWORD v68[3];

  v10 = *(_QWORD *)(a1 + 272);
  if (v10 != -1)
  {
    v11 = *(_QWORD *)(a1 + 288);
    do
    {
      v12 = (uint64_t *)(v11 + 16 * v10);
      v12[1] = 0;
      v10 = *v12;
    }
    while (v10 != -1);
  }
  v13 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = -1;
  if (v13)
  {
    v14 = *(_QWORD *)(a1 + 312);
    do
    {
      v15 = v13;
      v13 = *(_QWORD *)(v13 + 16);
      *(_QWORD *)(v15 + 16) = v14;
      v14 = v15;
    }
    while (v13);
    *(_QWORD *)(a1 + 312) = v15;
  }
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 360) = 2139095040;
  v16 = *(void ***)(a1 + 160);
  v17 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 192) = 0;
  v18 = v17 - (_QWORD)v16;
  if (v18 >= 0x11)
  {
    do
    {
      operator delete(*v16);
      v19 = *(_QWORD *)(a1 + 168);
      v16 = (void **)(*(_QWORD *)(a1 + 160) + 8);
      *(_QWORD *)(a1 + 160) = v16;
      v18 = v19 - (_QWORD)v16;
    }
    while (v18 > 0x10);
  }
  if (v18 >> 3 == 1)
  {
    v20 = 170;
  }
  else
  {
    if (v18 >> 3 != 2)
      goto LABEL_15;
    v20 = 341;
  }
  *(_QWORD *)(a1 + 184) = v20;
LABEL_15:
  v21 = *(void ***)(a1 + 208);
  v22 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 240) = 0;
  v23 = v22 - (_QWORD)v21;
  if (v23 >= 0x11)
  {
    do
    {
      operator delete(*v21);
      v24 = *(_QWORD *)(a1 + 216);
      v21 = (void **)(*(_QWORD *)(a1 + 208) + 8);
      *(_QWORD *)(a1 + 208) = v21;
      v23 = v24 - (_QWORD)v21;
    }
    while (v23 > 0x10);
  }
  if (v23 >> 3 == 1)
  {
    v25 = 170;
  }
  else
  {
    if (v23 >> 3 != 2)
      goto LABEL_22;
    v25 = 341;
  }
  *(_QWORD *)(a1 + 232) = v25;
LABEL_22:
  *(_QWORD *)(a1 + 144) = 0;
  v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 96) + 24))(*(_QWORD *)(a1 + 96));
  v27 = (***(uint64_t (****)(_QWORD))(a1 + 104))(*(_QWORD *)(a1 + 104));
  LODWORD(v51) = 0;
  *(_QWORD *)((char *)&v51 + 4) = v26 | ((unint64_t)v27 << 32);
  v28 = *(_QWORD **)(a1 + 248);
  v29 = v28[2];
  if ((unint64_t)(v29 + 1) >= *v28)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    quasar::ptt::TooManyTokensError::TooManyTokensError(exception, "Ran out of token storage");
  }
  v47 = a3;
  v48 = a4;
  v30 = v51;
  v28[2] = v29 + 1;
  v31 = v28[1] + 36 * (int)v29;
  *(_DWORD *)v31 = v29;
  *(_QWORD *)(v31 + 12) = 0;
  *(_QWORD *)(v31 + 4) = 0;
  *(_DWORD *)(v31 + 20) = 0;
  *(_QWORD *)(v31 + 24) = v30;
  *(_DWORD *)(v31 + 32) = v27;
  kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Insert((uint64_t *)(a1 + 264), v30, v27, v29);
  ++*(_QWORD *)(a1 + 344);
  quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessNonemitting(a1, *(float *)(a1 + 8));
  if (quasar::gLogLevel >= 6)
  {
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v51 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v51, (uint64_t)"Frontier after ProcessNonemitting size=", 39);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v51);
  }
  v32 = *a2;
  if (a2[1] != *a2)
  {
    v33 = 0;
    v34 = quasar::gLogLevel;
    do
    {
      if (v34 >= 6)
      {
        v66 = 0u;
        v67 = 0u;
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v51 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v51);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v51, (uint64_t)"Processing frame ", 17);
        v35 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" with observation ", 18);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v51);
        v32 = *a2;
      }
      v36 = quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessEmitting(a1, *(_DWORD *)(v32 + 4 * v33));
      if (quasar::gLogLevel >= 6)
      {
        v66 = 0u;
        v67 = 0u;
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v51 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v51);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v51, (uint64_t)"Frontier after ProcessEmitting size=", 36);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v51);
      }
      if (a5)
      {
        v51 = 0uLL;
        *(_QWORD *)&v52 = 0;
        quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::GetBestPaths(a1, 0xFFFFFFFFFFFFFFFFLL, 0, (uint64_t *)&v51, 1);
        std::string::basic_string[abi:ne180100]<0>(__p, "AfterProcessEmitting");
        v68[0] = v33;
        v37 = *(_QWORD *)(a5 + 24);
        if (!v37)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, void **, __int128 *))(*(_QWORD *)v37 + 48))(v37, v68, __p, &v51);
        if (v50 < 0)
          operator delete(__p[0]);
        __p[0] = &v51;
        std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      }
      quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessNonemitting(a1, v36);
      if (quasar::gLogLevel >= 6)
      {
        v66 = 0u;
        v67 = 0u;
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v51 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v51);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v51, (uint64_t)"Frontier after ProcessNonemitting size=", 39);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v51);
      }
      if (a5)
      {
        v51 = 0uLL;
        *(_QWORD *)&v52 = 0;
        quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::GetBestPaths(a1, 0xFFFFFFFFFFFFFFFFLL, 0, (uint64_t *)&v51, 1);
        std::string::basic_string[abi:ne180100]<0>(__p, "AfterProcessNonemitting");
        v68[0] = v33;
        v38 = *(_QWORD *)(a5 + 24);
        if (!v38)
          std::__throw_bad_function_call[abi:ne180100]();
        (*(void (**)(uint64_t, _QWORD *, void **, __int128 *))(*(_QWORD *)v38 + 48))(v38, v68, __p, &v51);
        if (v50 < 0)
          operator delete(__p[0]);
        __p[0] = &v51;
        std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      }
      v34 = quasar::gLogLevel;
      if (quasar::gLogLevel >= 6)
      {
        v66 = 0u;
        v67 = 0u;
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v51 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v51);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v51, (uint64_t)"NumPaths=", 9);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v51);
        v34 = quasar::gLogLevel;
      }
      ++v33;
      v32 = *a2;
    }
    while (v33 != (a2[1] - *a2) >> 2);
  }
  if (a4)
  {
    v40 = *a4;
    v39 = v48[1];
    if (v39 != *v48)
    {
      v41 = (void (***)(_QWORD))(v39 - 16);
      v42 = (void (***)(_QWORD))(v39 - 16);
      do
      {
        v43 = *v42;
        v42 -= 2;
        (*v43)(v41);
        v44 = v41 == (void (***)(_QWORD))v40;
        v41 = v42;
      }
      while (!v44);
    }
    v48[1] = v40;
    quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::GetBestPaths(a1, v47, 1, v48, 0);
  }
  return 1;
}

void sub_1ADF8B6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  fst *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  const char *v28;
  size_t v29;

  if (a2 == 1)
  {
    v23 = __cxa_begin_catch(a1);
    std::string::basic_string[abi:ne180100]<0>(&__p, "INFO");
    v24 = fst::LogMessage::LogMessage((fst *)&a12, (uint64_t)&__p);
    v25 = (_QWORD *)fst::cerr(v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Max tokens ", 11);
    v26 = (_QWORD *)std::ostream::operator<<();
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" exceeded - ", 12);
    v28 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v23 + 16))(v23);
    v29 = strlen(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&a12);
    if (a23 < 0)
      operator delete(__p);
    __cxa_end_catch();
    JUMPOUT(0x1ADF8B678);
  }
  _Unwind_Resume(a1);
}

void sub_1ADF8B834(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1ADF8B6F0);
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::Frontier::Frontier(uint64_t a1, uint64_t a2, float a3)
{
  *(_QWORD *)a1 = a2;
  *(float *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 24) = xmmword_1AE146E50;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 112) = 2139095040;
  kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize(a1 + 16, 0x3E8uLL);
  return a1;
}

void sub_1ADF8B8D0(_Unwind_Exception *a1)
{
  _QWORD *v1;

  kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::~HashList(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::pair<int,std::pair<int,int>>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 170;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 341;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

void quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessNonemitting(uint64_t a1, float a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD **v28;
  uint64_t v29;
  _DWORD *v30;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  float v48;
  float v49;
  BOOL v50;
  float v51;
  unsigned int v52;
  int v53;
  int *v54;
  int v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  __int128 v68;
  uint64_t v69;
  int v70;
  _BYTE v71[12];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;

  if (quasar::gLogLevel >= 6)
  {
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v72 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v72);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"Process non-emitting with cutoff=", 33);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v72);
  }
  v6 = *(_QWORD *)(a1 + 264);
  if (v6)
  {
    v7 = 0;
    v2 = 36;
    do
    {
      if (*(float *)(*(_QWORD *)(a1 + 136) + 36 * *(int *)(v6 + 12) + 16) <= a2)
      {
        ++v7;
        std::deque<std::pair<int,std::pair<int,int>>>::push_back((_QWORD *)(a1 + 152), (uint64_t *)v6);
      }
      v6 = *(_QWORD *)(v6 + 16);
    }
    while (v6);
  }
  if (quasar::gLogLevel > 5)
  {
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v72 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v72);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"Process non-emitting considered ", 32);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" initial states.", 16);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v72);
  }
  v9 = *(_QWORD *)(a1 + 192);
  if (v9)
  {
    v10 = v9 - 1;
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * ((*(_QWORD *)(a1 + 184) + v10) / 0x155uLL))
        + 12 * ((*(_QWORD *)(a1 + 184) + v10) % 0x155uLL);
    v12 = *(_QWORD *)v11;
    v13 = *(_DWORD *)(v11 + 8);
    *(_QWORD *)(a1 + 192) = v10;
    v14 = (_QWORD *)(a1 + 152);
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 240);
    if (!v15)
    {
      v13 = -1;
      v12 = -1;
      goto LABEL_15;
    }
    v16 = v15 - 1;
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 8 * ((*(_QWORD *)(a1 + 232) + v16) / 0x155uLL))
        + 12 * ((*(_QWORD *)(a1 + 232) + v16) % 0x155uLL);
    v12 = *(_QWORD *)v17;
    v13 = *(_DWORD *)(v17 + 8);
    *(_QWORD *)(a1 + 240) = v16;
    v14 = (_QWORD *)(a1 + 200);
  }
  std::deque<std::pair<int,std::pair<int,int>>>::__maybe_remove_back_spare[abi:ne180100](v14, 1);
LABEL_15:
  *(_QWORD *)v71 = v12;
  v18 = HIDWORD(v12);
  while (1)
  {
    *(_DWORD *)&v71[8] = v13;
    if ((_DWORD)v12 == -1 && (_DWORD)v18 == -1 && v13 == -1)
      break;
    v19 = *(_QWORD *)v71;
    v20 = 73244475
        * ((73244475 * (*(_DWORD *)v71 ^ (*(int *)v71 >> 16))) ^ ((73244475 * (*(_DWORD *)v71 ^ (*(int *)v71 >> 16))) >> 16));
    v21 = (((v20 ^ (v20 >> 16)) - 1640531527) ^ 3u) + 192;
    v22 = 73244475
        * ((73244475 * ((*(uint64_t *)v71 >> 48) ^ *(_DWORD *)&v71[4])) ^ ((int)(73244475
                                                                              * ((*(uint64_t *)v71 >> 48) ^ *(_DWORD *)&v71[4])) >> 16));
    v23 = ((v22 ^ (v22 >> 16)) - 1640531527 + (v21 << 6) + (v21 >> 2)) ^ v21;
    v24 = 73244475 * ((73244475 * (v13 ^ (v13 >> 16))) ^ ((73244475 * (v13 ^ (v13 >> 16))) >> 16));
    v25 = ((v24 ^ (v24 >> 16)) - 1640531527 + (v23 << 6) + (v23 >> 2)) ^ v23;
    v26 = *(_QWORD *)(a1 + 288);
    v27 = *(_QWORD *)(v26 + 16 * (v25 % *(_QWORD *)(a1 + 280)));
    v28 = (_DWORD **)(a1 + 264);
    if (v27 != -1)
      v28 = (_DWORD **)(*(_QWORD *)(v26 + 16 * v27 + 8) + 16);
    v29 = v13;
    while (1)
    {
      v30 = *v28;
      if (*v30 == *(_DWORD *)v71 && v30[1] == *(_DWORD *)&v71[4] && v30[2] == v13)
        break;
      v28 = (_DWORD **)(v30 + 4);
    }
    v32 = v30[3];
    v33 = *(_QWORD *)(a1 + 136);
    v34 = v33 + 36 * v32;
    if (quasar::gLogLevel >= 6)
    {
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      v77 = 0u;
      v78 = 0u;
      v75 = 0u;
      v76 = 0u;
      v73 = 0u;
      v74 = 0u;
      v72 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v72);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"Considering ", 12);
      v36 = quasar::ptt::operator<<(v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" (ID: ", 6);
      v37 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)").", 2);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v72);
    }
    if (*(float *)(v33 + 36 * v32 + 16) <= a2)
    {
      v38 = *(_QWORD *)(a1 + 120);
      if (v38)
      {
        v39 = *(_DWORD *)&v71[8];
        v41 = *(_QWORD *)(v38 + 48);
        v40 = v38 + 48;
        *(_DWORD *)(v40 - 32) = *(_DWORD *)&v71[4];
        *(_DWORD *)(v40 - 28) = v39;
        *(_DWORD *)(v40 - 24) = v39;
        (*(void (**)(void))(v41 + 16))();
      }
      else
      {
        v68 = *(_OWORD *)(a1 + 96);
        v42 = operator new();
        *(_OWORD *)v42 = v68;
        v43 = *(_QWORD *)&v71[4];
        *(_QWORD *)(v42 + 16) = *(_QWORD *)&v71[4];
        *(_DWORD *)(v42 + 24) = HIDWORD(v43);
        fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::ArcIterator(v42 + 48, v68, v43);
        *(_DWORD *)(v42 + 124) = 0;
        *(_DWORD *)(v42 + 128) = 0;
        v44 = *(_QWORD *)(a1 + 120);
        *(_QWORD *)(a1 + 120) = v42;
        if (v44)
          MEMORY[0x1AF44D190](v44, 0x10E0C4059286A48);
      }
      v45 = *(_QWORD *)(a1 + 120);
      if (*(_QWORD *)(v45 + 96) < *(_QWORD *)(v45 + 88))
      {
        while (1)
        {
          v46 = *(unsigned int *)(v45 + 76);
          if ((_DWORD)v46)
          {
            (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v45 + 8) + 32))(*(_QWORD *)(v45 + 8), *(unsigned int *)(v45 + 24), v46, v45 + 28);
            v47 = *(float *)(v45 + 80);
            v48 = NAN;
            if (v47 != -INFINITY)
            {
              v49 = *(float *)(v45 + 36);
              v48 = NAN;
              if (v49 != -INFINITY)
              {
                v48 = INFINITY;
                v50 = v49 == INFINITY || v47 == INFINITY;
                v51 = v47 + v49;
                if (!v50)
                  v48 = v51;
              }
            }
            v52 = *(_DWORD *)(v45 + 72);
            v53 = *(_DWORD *)(v45 + 32);
            *(_DWORD *)(v45 + 112) = v52;
            *(_DWORD *)(v45 + 116) = v53;
            v54 = (int *)(v45 + 40);
          }
          else
          {
            v52 = *(_DWORD *)(v45 + 72);
            *(_QWORD *)(v45 + 112) = v52;
            v48 = *(float *)(v45 + 80);
            v54 = (int *)(v45 + 24);
          }
          *(float *)(v45 + 120) = v48;
          v55 = *v54;
          *(_DWORD *)(v45 + 124) = *(_DWORD *)(v45 + 84);
          *(_DWORD *)(v45 + 128) = v55;
          if (quasar::gLogLevel >= 6)
          {
            v87 = 0u;
            v88 = 0u;
            v85 = 0u;
            v86 = 0u;
            v83 = 0u;
            v84 = 0u;
            v81 = 0u;
            v82 = 0u;
            v79 = 0u;
            v80 = 0u;
            v77 = 0u;
            v78 = 0u;
            v75 = 0u;
            v76 = 0u;
            v73 = 0u;
            v74 = 0u;
            v72 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v72);
            v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"Considering expanding ", 22);
            v57 = quasar::ptt::operator<<(v56, v45 + 112);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)".", 1);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v72);
            v52 = *(_DWORD *)(v45 + 112);
          }
          if (*(_BYTE *)(a1 + 29) && !v52)
            break;
          v69 = -1;
          v70 = -1;
          v2 = v2 & 0xFFFFFFFF00000000 | v29;
          if ((quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessArc<true,true>(a1, 0, a2, v19, v2, v32, v34, (int *)(v45 + 112), 1, (int *)&v69, 0, 0) & 1) == 0)
          {
            if (quasar::gLogLevel >= 6)
            {
              v87 = 0u;
              v88 = 0u;
              v85 = 0u;
              v86 = 0u;
              v83 = 0u;
              v84 = 0u;
              v81 = 0u;
              v82 = 0u;
              v79 = 0u;
              v80 = 0u;
              v77 = 0u;
              v78 = 0u;
              v75 = 0u;
              v76 = 0u;
              v73 = 0u;
              v74 = 0u;
              v72 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v72);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"Exiting arc-loop early.", 23);
              quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v72);
            }
            goto LABEL_66;
          }
          if (quasar::gLogLevel >= 6)
          {
            v87 = 0u;
            v88 = 0u;
            v85 = 0u;
            v86 = 0u;
            v83 = 0u;
            v84 = 0u;
            v81 = 0u;
            v82 = 0u;
            v79 = 0u;
            v80 = 0u;
            v77 = 0u;
            v78 = 0u;
            v75 = 0u;
            v76 = 0u;
            v73 = 0u;
            v74 = 0u;
            v72 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v72);
            v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"Arc expansion led to next state ", 32);
            v60 = quasar::ptt::operator<<(v59);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)".", 1);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v72);
          }
          if (v69 != -1 || v70 != -1)
          {
            v58 = &v69;
LABEL_57:
            std::deque<std::pair<int,std::pair<int,int>>>::push_front(a1 + 200, v58);
          }
LABEL_58:
          ++*(_QWORD *)(v45 + 96);
          fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(v45 + 48);
          if (*(_QWORD *)(v45 + 96) >= *(_QWORD *)(v45 + 88))
            goto LABEL_66;
        }
        *(_QWORD *)&v72 = -1;
        DWORD2(v72) = -1;
        v3 = v3 & 0xFFFFFFFF00000000 | v29;
        quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessArc<true,true>(a1, 0, a2, v19, v3, v32, v34, (int *)(v45 + 112), 0, (int *)&v72, 0, 0);
        if ((_QWORD)v72 == -1 && DWORD2(v72) == -1)
          goto LABEL_58;
        v58 = (uint64_t *)&v72;
        goto LABEL_57;
      }
    }
LABEL_66:
    v61 = *(_QWORD *)(a1 + 192);
    if (v61)
    {
      v62 = v61 - 1;
      v63 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * ((*(_QWORD *)(a1 + 184) + v62) / 0x155uLL))
          + 12 * ((*(_QWORD *)(a1 + 184) + v62) % 0x155uLL);
      v12 = *(_QWORD *)v63;
      v13 = *(_DWORD *)(v63 + 8);
      *(_QWORD *)(a1 + 192) = v62;
      v64 = (_QWORD *)(a1 + 152);
LABEL_70:
      std::deque<std::pair<int,std::pair<int,int>>>::__maybe_remove_back_spare[abi:ne180100](v64, 1);
      goto LABEL_71;
    }
    v65 = *(_QWORD *)(a1 + 240);
    if (v65)
    {
      v66 = v65 - 1;
      v67 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 8 * ((*(_QWORD *)(a1 + 232) + v66) / 0x155uLL))
          + 12 * ((*(_QWORD *)(a1 + 232) + v66) % 0x155uLL);
      v12 = *(_QWORD *)v67;
      v13 = *(_DWORD *)(v67 + 8);
      *(_QWORD *)(a1 + 240) = v66;
      v64 = (_QWORD *)(a1 + 200);
      goto LABEL_70;
    }
    v13 = -1;
    v12 = -1;
LABEL_71:
    v18 = HIDWORD(v12);
    *(_QWORD *)v71 = v12;
  }
}

void sub_1ADF8C240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)va);
  _Unwind_Resume(a1);
}

float quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessEmitting(uint64_t a1, int a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  float v6;
  _QWORD *v7;
  _QWORD *v8;
  float v9;
  float v10;
  float WeightCutoffUpperBound;
  float v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  float v25;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  float v44;
  BOOL v45;
  float v46;
  unsigned int v47;
  int v48;
  int *v49;
  int v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  _BYTE v66[12];
  void *__p;
  _QWORD *v68;
  _QWORD v69[2];
  float v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;

  if (quasar::gLogLevel >= 6)
  {
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v75 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Process emitting with observation ", 34);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v71);
  }
  quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::Frontier::NextIteration(a1 + 248, (uint64_t)v69);
  v5 = v69[0];
  v4 = v69[1];
  v6 = v70;
  if (quasar::gLogLevel >= 6)
  {
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v75 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"prevFrontierBestHashListElement=", 32);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" ", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"prevFrontierBestCost=", 21);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v71);
  }
  v9 = *(float *)(a1 + 8);
  if ((LODWORD(v6) & 0x7FFFFFFFu) >= 0x7F800000)
    v10 = 1.0e10;
  else
    v10 = v6;
  quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements(a1, v5, &__p);
  WeightCutoffUpperBound = quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ComputeNextWeightCutoffUpperBound(a1, v4, a2);
  v12 = v10 + v9;
  if (quasar::gLogLevel >= 6)
  {
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v75 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"adaptiveBeam=", 13);
    v13 = (_QWORD *)std::ostream::operator<<();
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" ", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"weightCutoff=", 13);
    v15 = (_QWORD *)std::ostream::operator<<();
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"nextWeightCutoffUpperBound=", 27);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v71);
  }
  v17 = v68;
  if (v68 != __p)
  {
    v59 = 0;
    v18 = 0;
    v17 = __p;
    do
    {
      v19 = v17[v18];
      *(_QWORD *)v66 = *(_QWORD *)v19;
      v20 = *(_DWORD *)(v19 + 12);
      *(_DWORD *)&v66[8] = *(_DWORD *)(v19 + 8);
      v21 = *(_QWORD *)(a1 + 136);
      v63 = v21 + 36 * v20;
      v64 = v20;
      if (quasar::gLogLevel >= 6)
      {
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v75 = 0u;
        v73 = 0u;
        v74 = 0u;
        v71 = 0u;
        v72 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Considering ", 12);
        v23 = quasar::ptt::operator<<(v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" with ID ", 9);
        v24 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)".", 1);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v71);
      }
      v25 = *(float *)(v21 + 36 * v64 + 16);
      if (v25 < v12 && v25 < WeightCutoffUpperBound)
      {
        v58 = v19;
        v32 = *(_QWORD *)&v66[4];
        v33 = *(_QWORD *)(a1 + 120);
        v34 = HIDWORD(*(_QWORD *)&v66[4]);
        if (v33)
        {
          v36 = *(_QWORD *)(v33 + 48);
          v35 = v33 + 48;
          *(_DWORD *)(v35 - 32) = *(_DWORD *)&v66[4];
          *(_DWORD *)(v35 - 28) = v34;
          *(_DWORD *)(v35 - 24) = v34;
          (*(void (**)(void))(v36 + 16))();
        }
        else
        {
          v61 = *(_OWORD *)(a1 + 96);
          v37 = operator new();
          *(_OWORD *)v37 = v61;
          *(_QWORD *)(v37 + 16) = v32;
          *(_DWORD *)(v37 + 24) = v34;
          fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::ArcIterator(v37 + 48, v61, v32);
          *(_DWORD *)(v37 + 124) = 0;
          *(_DWORD *)(v37 + 128) = 0;
          v38 = *(_QWORD *)(a1 + 120);
          *(_QWORD *)(a1 + 120) = v37;
          if (v38)
            MEMORY[0x1AF44D190](v38, 0x10E0C4059286A48);
        }
        v39 = v34;
        v40 = *(_QWORD *)(a1 + 120);
        v62 = *(_QWORD *)v66;
        while (*(_QWORD *)(v40 + 96) < *(_QWORD *)(v40 + 88))
        {
          v41 = *(unsigned int *)(v40 + 76);
          if ((_DWORD)v41)
          {
            (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v40 + 8) + 32))(*(_QWORD *)(v40 + 8), *(unsigned int *)(v40 + 24), v41, v40 + 28);
            v42 = *(float *)(v40 + 80);
            v43 = NAN;
            if (v42 != -INFINITY)
            {
              v44 = *(float *)(v40 + 36);
              v43 = NAN;
              if (v44 != -INFINITY)
              {
                v43 = INFINITY;
                v45 = v44 == INFINITY || v42 == INFINITY;
                v46 = v42 + v44;
                if (!v45)
                  v43 = v46;
              }
            }
            v47 = *(_DWORD *)(v40 + 72);
            v48 = *(_DWORD *)(v40 + 32);
            *(_DWORD *)(v40 + 112) = v47;
            *(_DWORD *)(v40 + 116) = v48;
            v49 = (int *)(v40 + 40);
          }
          else
          {
            v47 = *(_DWORD *)(v40 + 72);
            *(_QWORD *)(v40 + 112) = v47;
            v43 = *(float *)(v40 + 80);
            v49 = (int *)(v40 + 24);
          }
          *(float *)(v40 + 120) = v43;
          v50 = *v49;
          *(_DWORD *)(v40 + 124) = *(_DWORD *)(v40 + 84);
          *(_DWORD *)(v40 + 128) = v50;
          if (quasar::gLogLevel >= 6)
          {
            v86 = 0u;
            v87 = 0u;
            v84 = 0u;
            v85 = 0u;
            v82 = 0u;
            v83 = 0u;
            v80 = 0u;
            v81 = 0u;
            v78 = 0u;
            v79 = 0u;
            v76 = 0u;
            v77 = 0u;
            v75 = 0u;
            v73 = 0u;
            v74 = 0u;
            v71 = 0u;
            v72 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
            v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Considering expanding ", 22);
            v52 = quasar::ptt::operator<<(v51, v40 + 112);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)".", 1);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v71);
            v47 = *(_DWORD *)(v40 + 112);
          }
          if (v47)
          {
            v65 = 0;
            v2 = v2 & 0xFFFFFFFF00000000 | v39;
            if ((quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessArc<true,true>(a1, a2, WeightCutoffUpperBound, v62, v2, v64, v63, (int *)(v40 + 112), 1, 0, &v65, 0) & 1) == 0)
            {
              if (quasar::gLogLevel >= 6)
              {
                v86 = 0u;
                v87 = 0u;
                v84 = 0u;
                v85 = 0u;
                v82 = 0u;
                v83 = 0u;
                v80 = 0u;
                v81 = 0u;
                v78 = 0u;
                v79 = 0u;
                v76 = 0u;
                v77 = 0u;
                v75 = 0u;
                v73 = 0u;
                v74 = 0u;
                v71 = 0u;
                v72 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Exiting arc-loop early.", 23);
                quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v71);
              }
              break;
            }
            if (v65 && (float)(v9 + *(float *)(v65 + 16)) < WeightCutoffUpperBound)
              WeightCutoffUpperBound = v9 + *(float *)(v65 + 16);
          }
          else if (quasar::gLogLevel >= 6)
          {
            v86 = 0u;
            v87 = 0u;
            v84 = 0u;
            v85 = 0u;
            v82 = 0u;
            v83 = 0u;
            v80 = 0u;
            v81 = 0u;
            v78 = 0u;
            v79 = 0u;
            v76 = 0u;
            v77 = 0u;
            v75 = 0u;
            v73 = 0u;
            v74 = 0u;
            v71 = 0u;
            v72 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
            v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Skipping ", 9);
            v54 = quasar::ptt::operator<<(v53, v40 + 112);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" since it is an epsilon arc.", 28);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v71);
          }
          ++*(_QWORD *)(v40 + 96);
          fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(v40 + 48);
        }
        if (quasar::gLogLevel >= 6)
        {
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          v82 = 0u;
          v83 = 0u;
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v75 = 0u;
          v73 = 0u;
          v74 = 0u;
          v71 = 0u;
          v72 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Considering the case where we ignore observation ", 49);
          v55 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)".", 1);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v71);
        }
        *(_QWORD *)&v71 = 0;
        v57 = v57 & 0xFFFFFFFF00000000 | v39;
        quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessArc<false,true>(a1, a2, v62, v39, v64, v63, WeightCutoffUpperBound, 0, 0, 0, (uint64_t *)&v71, 0);
        v19 = v58;
        if ((_QWORD)v71 && (float)(v9 + *(float *)(v71 + 16)) < WeightCutoffUpperBound)
          WeightCutoffUpperBound = v9 + *(float *)(v71 + 16);
      }
      else if (quasar::gLogLevel >= 6)
      {
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v75 = 0u;
        v73 = 0u;
        v74 = 0u;
        v71 = 0u;
        v72 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Skipping ", 9);
        v28 = quasar::ptt::operator<<(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" (ID: ", 6);
        v29 = (_QWORD *)std::ostream::operator<<();
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)") ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"since cost exceeds ", 19);
        v31 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)".", 1);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v71);
      }
      *(_QWORD *)(v19 + 16) = *(_QWORD *)(a1 + 312);
      *(_QWORD *)(a1 + 312) = v19;
      ++v18;
      v17 = __p;
      v59 += 8;
    }
    while (v18 < ((char *)v68 - (_BYTE *)__p) >> 3);
  }
  if (quasar::gLogLevel >= 6)
  {
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v75 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"nextWeightCutoffUpperBound=", 27);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v71);
    v17 = __p;
  }
  if (v17)
  {
    v68 = v17;
    operator delete(v17);
  }
  return WeightCutoffUpperBound;
}

void sub_1ADF8CB60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::GetBestPaths(uint64_t a1, unint64_t a2, int a3, uint64_t *a4, int a5)
{
  float v9;
  uint64_t i;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  float v16;
  float v17;
  float v18;
  BOOL v19;
  float *v20;
  float *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  float *v28;
  float *v29;
  float *v30;
  float *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  float *v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  int v44;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  float *v63;
  float *v64;
  unint64_t v65;

  v63 = 0;
  v64 = 0;
  v65 = 0;
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)&v63, *(_QWORD *)(a1 + 344));
  v44 = a5;
  for (i = *(_QWORD *)(a1 + 264); i; i = *(_QWORD *)(i + 16))
  {
    if (quasar::gLogLevel >= 6)
    {
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v46 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"Considering path ", 17);
      v12 = quasar::ptt::operator<<(v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" (ID: ", 6);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)").", 2);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v46);
    }
    v14 = *(_DWORD *)(i + 12);
    v15 = *(_QWORD *)(a1 + 136);
    v16 = *(float *)(v15 + 36 * v14 + 16);
    if (a3)
    {
      v17 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 96) + 32))(*(_QWORD *)(a1 + 96), *(unsigned int *)(v15 + 36 * v14 + 28));
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 104) + 16))(*(_QWORD *)(a1 + 104), *(unsigned int *)(v15 + 36 * v14 + 32));
      v18 = NAN;
      if (v17 != -INFINITY && v9 != -INFINITY)
      {
        v18 = INFINITY;
        v19 = v9 == INFINITY || v17 == INFINITY;
        v9 = v17 + v9;
        if (!v19)
          v18 = v9;
      }
      v16 = v16 + v18;
    }
    if ((LODWORD(v16) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      v20 = v64;
      if ((unint64_t)v64 >= v65)
      {
        v22 = ((char *)v64 - (char *)v63) >> 3;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v24 = v65 - (_QWORD)v63;
        if ((uint64_t)(v65 - (_QWORD)v63) >> 2 > v23)
          v23 = v24 >> 2;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
          v25 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v65, v25);
        v28 = (float *)&v26[8 * v22];
        *v28 = v16;
        v28[1] = *(float *)(i + 12);
        v30 = v63;
        v29 = v64;
        v31 = v28;
        if (v64 != v63)
        {
          do
          {
            v32 = *((_QWORD *)v29 - 1);
            v29 -= 2;
            *((_QWORD *)v31 - 1) = v32;
            v31 -= 2;
          }
          while (v29 != v30);
          v29 = v63;
        }
        v21 = v28 + 2;
        v63 = v31;
        v64 = v28 + 2;
        v65 = (unint64_t)&v26[8 * v27];
        if (v29)
          operator delete(v29);
      }
      else
      {
        *v64 = v16;
        v20[1] = *(float *)(i + 12);
        v21 = v20 + 2;
      }
      v64 = v21;
    }
  }
  v33 = ((char *)v64 - (char *)v63) >> 3;
  if (v33 >= a2)
    v34 = a2;
  else
    v34 = ((char *)v64 - (char *)v63) >> 3;
  if (v44)
  {
    v35 = 126 - 2 * __clz(v33);
    if (v64 == v63)
      v36 = 0;
    else
      v36 = v35;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<float,int> *,false>((uint64_t)v63, (unint64_t)v64, (uint64_t)&v46, v36, 1);
  }
  else if (v33 > a2)
  {
    v37 = &v63[2 * v34];
    if (v37 != v64)
      std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<float,int> *>>((uint64_t)v63, v37, (uint64_t)v64, v9);
  }
  std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::reserve(a4, v34);
  if (v34)
  {
    v38 = 0;
    do
    {
      v39 = LODWORD(v63[v38 + 1]);
      if (quasar::gLogLevel >= 6)
      {
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v46 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"Extracting path with ID ", 24);
        v40 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" with expected cost ", 20);
        v41 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)".", 1);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v46);
      }
      quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::GetPath(a1, v39, a3, &v46);
      std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>::emplace_back<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>(a4, (uint64_t)&v46);
      *(_QWORD *)&v46 = &unk_1E5D25580;
      v42 = *((_QWORD *)&v46 + 1);
      if (*((_QWORD *)&v46 + 1))
      {
        v43 = *(_DWORD *)(*((_QWORD *)&v46 + 1) + 56) - 1;
        *(_DWORD *)(*((_QWORD *)&v46 + 1) + 56) = v43;
        if (!v43)
          (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
      }
      v38 += 2;
      --v34;
    }
    while (v34);
  }
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
}

void sub_1ADF8D0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  void *v16;

  v16 = *(void **)(v14 - 128);
  if (v16)
  {
    *(_QWORD *)(v14 - 120) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void std::deque<std::pair<int,std::pair<int,int>>>::push_back(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 341 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::pair<int,std::pair<int,int>>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x155)) + 12 * (v7 % 0x155);
  v9 = *a2;
  *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v8 = v9;
  ++a1[5];
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessArc<true,true>(uint64_t a1, int a2, float a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int *a8, int a9, int *a10, uint64_t *a11, float *a12)
{
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  BOOL v26;
  float v27;
  float v29;
  unint64_t v30;
  uint64_t v31;
  float v32;
  BOOL v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  if (quasar::gLogLevel >= 6)
  {
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Evaluating to expand path with graph arc ", 41);
    v20 = quasar::ptt::operator<<(v19, (uint64_t)a8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" w.r.t. observation ", 20);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)".", 1);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v39);
  }
  v22 = *((float *)a8 + 2);
  v23 = *(float *)(a1 + 24) * v22;
  if (a6)
  {
    v24 = NAN;
    if (v23 != -INFINITY)
    {
      v25 = *(float *)(a7 + 16);
      if (v25 != -INFINITY)
      {
        v26 = v25 == INFINITY || v23 == INFINITY;
        v27 = v23 + v25;
        if (v26)
          v24 = INFINITY;
        else
          v24 = v27;
      }
    }
    if (!a9)
      goto LABEL_18;
  }
  else
  {
    v24 = *(float *)(a1 + 24) * v22;
    if (!a9)
      goto LABEL_18;
  }
  if (*(_BYTE *)(a1 + 28) && v24 > a3)
    return 0;
LABEL_18:
  v29 = *(float *)(*(_QWORD *)(a1 + 56) + 4 * *(_DWORD *)(a1 + 72) * a2 + 4 * *a8);
  if (quasar::gLogLevel >= 6)
  {
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"symbolDistanceArc.weight.Value()=", 33);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v39);
  }
  LODWORD(v39) = 0;
  *(_QWORD *)((char *)&v39 + 4) = *(_QWORD *)(a8 + 3);
  v30 = v39;
  v31 = HIDWORD(*(_QWORD *)((char *)&v39 + 4));
  v32 = NAN;
  if (v24 == -INFINITY
    || v29 == -INFINITY
    || (v29 != INFINITY ? (v33 = v24 == INFINITY) : (v33 = 1), !v33 ? (v32 = v24 + v29) : (v32 = INFINITY), v32 >= a3))
  {
    if (quasar::gLogLevel >= 6)
    {
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v39 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Dropping path due to cut-off.", 29);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v39);
    }
    v35 = 0;
  }
  else
  {
    if (quasar::gLogLevel >= 6)
    {
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v39 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v39);
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Expanding path with nextState=", 30);
      quasar::ptt::operator<<(v34);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v39);
    }
    v35 = quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::Frontier::Expand((uint64_t *)(a1 + 248), a6, a2, *a8, a8[1], v30, v31, v32, v29 + *(float *)(a7 + 20));
  }
  if (a10)
  {
    v36 = HIDWORD(v30);
    if (v35)
      v37 = v30;
    else
      v37 = -1;
    if (!v35)
      LODWORD(v36) = -1;
    *a10 = v37;
    a10[1] = v36;
    if (v35)
      v38 = v31;
    else
      v38 = -1;
    a10[2] = v38;
  }
  if (a11)
    *a11 = v35;
  if (a12)
    *a12 = v32;
  return 1;
}

void sub_1ADF8D59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)va);
  _Unwind_Resume(a1);
}

int64x2_t std::deque<std::pair<int,std::pair<int,int>>>::push_front(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    std::deque<std::pair<int,std::pair<int,int>>>::__add_front_capacity((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x155));
  v7 = *v6 + 12 * (v4 % 0x155);
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4092;
  v8 = *a2;
  *(_DWORD *)(v7 - 4) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(v7 - 12) = v8;
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1AE140E90);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void std::deque<std::pair<int,std::pair<int,int>>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x155;
  v4 = v2 - 341;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFFCuLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFFCuLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFFCuLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADF8D930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::pair<int,std::pair<int,int>>>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 341 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x155)
    a2 = 1;
  if (v5 < 0x2AA)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::Frontier::Expand(uint64_t *a1, int a2, int a3, int a4, int a5, unint64_t a6, int a7, float a8, float a9)
{
  int v11;
  int v12;
  uint64_t *v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t i;
  int v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t j;
  uint64_t v45;
  uint64_t v46;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  int v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  std::runtime_error *exception;
  int v69;
  int v70;
  int v71;
  int v73;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  unint64_t v92;
  int v93;

  v11 = a4;
  v12 = a3;
  v92 = a6;
  v93 = a7;
  v17 = a1 + 2;
  v18 = HIDWORD(a6);
  v19 = 73244475 * ((73244475 * (a6 ^ ((int)a6 >> 16))) ^ ((int)(73244475 * (a6 ^ ((int)a6 >> 16))) >> 16));
  v20 = (((v19 ^ (v19 >> 16)) - 1640531527) ^ 3u) + 192;
  v21 = 73244475
      * ((73244475 * (HIDWORD(a6) ^ (SHIDWORD(a6) >> 16))) ^ ((73244475 * (HIDWORD(a6) ^ (SHIDWORD(a6) >> 16))) >> 16));
  v22 = ((v21 ^ (v21 >> 16)) - 1640531527 + (v20 << 6) + (v20 >> 2)) ^ v20;
  v23 = (73244475 * (a7 ^ (a7 >> 16))) ^ ((73244475 * (a7 ^ (a7 >> 16))) >> 16);
  v24 = (((73244475 * v23) ^ ((73244475 * v23) >> 16)) - 1640531527 + (v22 << 6) + (v22 >> 2)) ^ v22;
  v25 = a1[5];
  v26 = v24 % a1[4];
  v27 = *(_QWORD *)(v25 + 16 * v26 + 8);
  if (v27)
  {
    v28 = *(_QWORD *)(v25 + 16 * v26);
    v29 = a1 + 2;
    if (v28 != -1)
      v29 = (uint64_t *)(*(_QWORD *)(v25 + 16 * v28 + 8) + 16);
    v30 = *(_QWORD *)(v27 + 16);
    for (i = *v29; ; i = *(_QWORD *)(i + 16))
    {
      if (i == v30)
        goto LABEL_12;
      if (*(_DWORD *)i == (_DWORD)a6 && *(_DWORD *)(i + 4) == HIDWORD(a6) && *(_DWORD *)(i + 8) == a7)
        break;
    }
    v48 = *(_DWORD *)(i + 12);
    if (v48)
    {
      v49 = *(_QWORD *)(*a1 + 8);
      if (quasar::gLogLevel >= 6)
      {
        v70 = a5;
        v90 = 0u;
        v91 = 0u;
        v88 = 0u;
        v89 = 0u;
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v75 = 0u;
        v50 = v49;
        v51 = v48;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
        v69 = v51;
        v49 = v50;
        v52 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" ", 1);
        std::ostream::operator<<();
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v75);
        a5 = v70;
        v11 = a4;
        v48 = v69;
        v12 = a3;
      }
      if (*(float *)(v49 + 36 * v48 + 16) <= a8)
      {
        if (quasar::gLogLevel >= 6)
        {
          v90 = 0u;
          v91 = 0u;
          v88 = 0u;
          v89 = 0u;
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          v82 = 0u;
          v83 = 0u;
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v75 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
          v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Skipping path replacement for state ", 36);
          v61 = quasar::ptt::operator<<(v60);
          v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)" since cost of new candidate ", 29);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"(", 1);
          v63 = (_QWORD *)std::ostream::operator<<();
          v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)") exceeds cost of existing candidate ", 37);
          v65 = quasar::ptt::operator<<(v64);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)".", 1);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v75);
        }
        return 0;
      }
      if (quasar::gLogLevel >= 6)
      {
        v71 = a5;
        v73 = v11;
        v90 = 0u;
        v91 = 0u;
        v88 = 0u;
        v89 = 0u;
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v75 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
        v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Replacing existing path for state ", 34);
        v54 = quasar::ptt::operator<<(v53);
        v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" with new path due to lower cost ", 33);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"(", 1);
        v56 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" vs. ", 5);
        v57 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)").", 2);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v75);
        a5 = v71;
        v11 = v73;
      }
      v37 = *a1;
      v38 = *(_QWORD *)(*a1 + 16);
      v58 = v38 + 1;
      if ((unint64_t)(v38 + 1) >= *(_QWORD *)*a1)
        goto LABEL_52;
LABEL_46:
      v39 = 0;
      *(_QWORD *)(v37 + 16) = v58;
      if ((v38 & 0x80000000) != 0)
        return 0;
      goto LABEL_16;
    }
    if (quasar::gLogLevel >= 6)
    {
      v59 = a5;
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v75 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Expanding search with initial path.", 35);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v75);
      a5 = v59;
      v11 = a4;
    }
    v37 = *a1;
    v38 = *(_QWORD *)(*a1 + 16);
    v58 = v38 + 1;
    if ((unint64_t)(v38 + 1) < *(_QWORD *)*a1)
      goto LABEL_46;
LABEL_52:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    quasar::ptt::TooManyTokensError::TooManyTokensError(exception, "Ran out of token storage");
  }
LABEL_12:
  if (quasar::gLogLevel >= 6)
  {
    v34 = a5;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v75 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Expanding search with path leading to state ", 44);
    v36 = quasar::ptt::operator<<(v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)".", 1);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v75);
    a5 = v34;
    v11 = a4;
  }
  v37 = *a1;
  v38 = *(_QWORD *)(*a1 + 16);
  if ((unint64_t)(v38 + 1) >= *(_QWORD *)*a1)
    goto LABEL_52;
  i = 0;
  *(_QWORD *)(v37 + 16) = v38 + 1;
  v39 = 1;
  if ((v38 & 0x80000000) != 0)
    return 0;
LABEL_16:
  v40 = *(_QWORD *)(v37 + 8) + 36 * v38;
  *(_DWORD *)v40 = a2;
  *(_DWORD *)(v40 + 4) = v12;
  *(_DWORD *)(v40 + 8) = v11;
  *(_DWORD *)(v40 + 12) = a5;
  *(float *)(v40 + 16) = a8;
  *(float *)(v40 + 20) = a9;
  *(_DWORD *)(v40 + 24) = a6;
  *(_DWORD *)(v40 + 28) = v18;
  *(_DWORD *)(v40 + 32) = a7;
  if ((v39 & 1) != 0)
    kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Insert(v17, a6, a7, v38);
  else
    *(_DWORD *)(i + 12) = v38;
  ++a1[12];
  if (quasar::gLogLevel >= 6)
  {
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v75 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"New partial path: ", 18);
    quasar::ptt::operator<<(v41);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v75);
  }
  if (a8 < *((float *)a1 + 28))
  {
    *((float *)a1 + 28) = a8;
    v42 = a1[5];
    v43 = v24 % a1[4];
    j = *(_QWORD *)(v42 + 16 * v43 + 8);
    if (j)
    {
      v45 = *(_QWORD *)(v42 + 16 * v43);
      if (v45 != -1)
        v17 = (uint64_t *)(*(_QWORD *)(v42 + 16 * v45 + 8) + 16);
      v46 = *(_QWORD *)(j + 16);
      for (j = *v17; j != v46; j = *(_QWORD *)(j + 16))
      {
        if (*(_DWORD *)j == (_DWORD)a6 && *(_DWORD *)(j + 4) == (_DWORD)v18 && *(_DWORD *)(j + 8) == a7)
          goto LABEL_34;
      }
      j = 0;
    }
LABEL_34:
    a1[13] = j;
  }
  return v40;
}

